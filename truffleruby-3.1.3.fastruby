$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       113.417M i/100ms
Function with splat arguments
                         1.136k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.135B (± 0.6%) i/s -      5.784B in   5.094700s
Function with splat arguments
                         13.340k (± 6.7%) i/s -     67.024k in   5.050110s

Comparison:
Function with single Array argument: 1135390662.3 i/s
Function with splat arguments:    13340.4 i/s - 85109.37x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   113.446M i/100ms
Sequential Assignment
                       113.607M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.135B (± 0.6%) i/s -      5.786B in   5.099080s
Sequential Assignment
                          1.141B (± 1.3%) i/s -      5.794B in   5.077513s

Comparison:
Sequential Assignment: 1141273088.5 i/s
 Parallel Assignment: 1134700495.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   113.685M i/100ms
       attr_accessor   113.424M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.134B (± 0.8%) i/s -      5.684B in   5.014681s
       attr_accessor      1.138B (± 0.7%) i/s -      5.785B in   5.083599s

Comparison:
       attr_accessor: 1137961857.3 i/s
   getter_and_setter: 1133602586.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    10.204k i/100ms
         respond_to?   113.640M i/100ms
Calculating -------------------------------------
      begin...rescue     77.448k (± 3.3%) i/s -    387.752k in   5.012138s
         respond_to?      1.137B (± 0.9%) i/s -      5.796B in   5.099827s

Comparison:
         respond_to?: 1136529446.5 i/s
      begin...rescue:    77448.2 i/s - 14674.70x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   113.378M i/100ms
             &method   113.517M i/100ms
Calculating -------------------------------------
              normal      1.136B (± 0.8%) i/s -      5.782B in   5.091048s
             &method      1.137B (± 0.7%) i/s -      5.789B in   5.094078s

Comparison:
             &method: 1136533573.5 i/s
              normal: 1135848278.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       141.000  i/100ms
       define_method   152.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.324k (±60.2%) i/s -      5.076k in   5.714986s
       define_method      6.170k (±44.7%) i/s -      8.816k in   5.018484s

Comparison:
       define_method:     6169.8 i/s
module_eval with string:     2324.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    80.604k i/100ms
       Kernel#format    71.530k i/100ms
            String#%    71.981k i/100ms
Calculating -------------------------------------
         Float#round    861.169k (± 2.3%) i/s -      4.353M in   5.057040s
       Kernel#format    719.743k (± 1.8%) i/s -      3.648M in   5.070249s
            String#%    719.828k (± 1.9%) i/s -      3.599M in   5.001738s

Comparison:
         Float#round:   861169.2 i/s
            String#%:   719828.3 i/s - 1.20x  (± 0.00) slower
       Kernel#format:   719743.2 i/s - 1.20x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.835M i/100ms
          OpenStruct   113.589M i/100ms
Calculating -------------------------------------
                Hash      1.134B (± 0.7%) i/s -      5.692B in   5.018307s
          OpenStruct      1.137B (± 0.6%) i/s -      5.793B in   5.096527s

Comparison:
          OpenStruct: 1136708773.3 i/s
                Hash: 1134248142.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.579M i/100ms
          OpenStruct     3.386k i/100ms
Calculating -------------------------------------
                Hash      1.134B (± 0.8%) i/s -      5.679B in   5.008270s
          OpenStruct     35.628k (±13.2%) i/s -    176.072k in   5.070249s

Comparison:
                Hash: 1133982343.2 i/s
          OpenStruct:    35628.0 i/s - 31828.43x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   888.182k i/100ms
  ancestors.include?   176.186k i/100ms
Calculating -------------------------------------
  less than or equal      9.059M (± 3.3%) i/s -     45.297M in   5.005865s
  ancestors.include?      1.839M (± 4.6%) i/s -      9.338M in   5.089203s

Comparison:
  less than or equal:  9059152.0 i/s
  ancestors.include?:  1838804.3 i/s - 4.93x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     11.382  (± 0.0%) i/s -     57.000  in   5.008520s
         Kernel loop     11.358  (± 0.0%) i/s -     57.000  in   5.018853s

Comparison:
          While Loop:       11.4 i/s
         Kernel loop:       11.4 i/s - 1.00x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   113.606M i/100ms
         Array#first   113.882M i/100ms
Calculating -------------------------------------
           Array#[0]      1.136B (± 0.9%) i/s -      5.680B in   5.001110s
         Array#first      1.135B (± 0.7%) i/s -      5.694B in   5.018233s

Comparison:
           Array#[0]: 1135895738.0 i/s
         Array#first: 1134743675.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   113.757M i/100ms
          Array#last   113.528M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.136B (± 0.7%) i/s -      5.688B in   5.007934s
          Array#last      1.138B (± 1.1%) i/s -      5.790B in   5.088547s

Comparison:
          Array#last: 1137976833.3 i/s
          Array#[-1]: 1135820421.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   644.800k i/100ms
Calculating -------------------------------------
                find      4.444  (±22.5%) i/s -     15.000  in   5.122087s
             bsearch      6.561M (± 2.2%) i/s -     32.885M in   5.014306s

Comparison:
             bsearch:  6561303.8 i/s
                find:        4.4 i/s - 1476359.73x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.069  (± 0.0%) i/s -      1.000  in  14.502493s
        Array#insert      1.027  (± 0.0%) i/s -      6.000  in   5.842988s

Comparison:
        Array#insert:        1.0 i/s
       Array#unshift:        0.1 i/s - 14.89x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   113.857M i/100ms
          Array#size   114.313M i/100ms
         Array#count   113.906M i/100ms
Calculating -------------------------------------
        Array#length      1.135B (± 0.5%) i/s -      5.693B in   5.017581s
          Array#size      1.136B (± 0.7%) i/s -      5.716B in   5.031478s
         Array#count      1.136B (± 0.7%) i/s -      5.695B in   5.013786s

Comparison:
          Array#size: 1136040712.2 i/s
         Array#count: 1135986875.2 i/s - same-ish: difference falls within error
        Array#length: 1134609381.4 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    22.967k i/100ms
        Array#sample     2.775M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    253.196k (± 1.7%) i/s -      1.286M in   5.081308s
        Array#sample     27.639M (± 0.1%) i/s -    138.763M in   5.020599s

Comparison:
        Array#sample: 27638869.1 i/s
 Array#shuffle.first:   253195.6 i/s - 109.16x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601     1.118k i/100ms
          Date.parse   794.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     43.433k (±32.3%) i/s -    169.936k in   4.997654s
          Date.parse     16.011k (±25.6%) i/s -     68.284k in   5.036316s

Comparison:
        Date.iso8601:    43433.2 i/s
          Date.parse:    16010.6 i/s - 2.71x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   226.772k i/100ms
           Array#map     1.043M i/100ms
Calculating -------------------------------------
   Array#each + push      2.455M (± 4.7%) i/s -     12.472M in   5.093075s
           Array#map     10.359M (± 5.3%) i/s -     52.132M in   5.047000s

Comparison:
           Array#map: 10359343.9 i/s
   Array#each + push:  2454764.9 i/s - 4.22x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     9.325M i/100ms
               #each    41.415M i/100ms
Calculating -------------------------------------
            For loop     93.087M (± 0.4%) i/s -    466.234M in   5.008684s
               #each    413.630M (± 0.4%) i/s -      2.071B in   5.006356s

Comparison:
               #each: 413630035.7 i/s
            For loop: 93086723.2 i/s - 4.44x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   807.111k i/100ms
     each_with_index     1.030M i/100ms
Calculating -------------------------------------
          While Loop      8.075M (± 0.1%) i/s -     41.163M in   5.097590s
     each_with_index     10.305M (± 0.0%) i/s -     52.546M in   5.099034s

Comparison:
     each_with_index: 10305043.3 i/s
          While Loop:  8074928.2 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   160.948k i/100ms
      inject to_proc   158.552k i/100ms
        inject block   160.245k i/100ms
Calculating -------------------------------------
       inject symbol      1.590M (± 0.0%) i/s -      8.047M in   5.060093s
      inject to_proc      1.600M (± 0.0%) i/s -      8.086M in   5.054588s
        inject block      1.591M (± 0.4%) i/s -      8.012M in   5.036944s

Comparison:
      inject to_proc:  1599764.9 i/s
        inject block:  1590721.8 i/s - 1.01x  (± 0.00) slower
       inject symbol:  1590366.5 i/s - 1.01x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    17.082k i/100ms
   Array#map.flatten    18.524k i/100ms
      Array#flat_map    44.540k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    185.565k (± 4.5%) i/s -    939.510k in   5.074318s
   Array#map.flatten    188.436k (± 4.3%) i/s -    944.724k in   5.023489s
      Array#flat_map    454.114k (± 1.6%) i/s -      2.272M in   5.003459s

Comparison:
      Array#flat_map:   454114.1 i/s
   Array#map.flatten:   188435.8 i/s - 2.41x  (± 0.00) slower
Array#map.flatten(1):   185565.1 i/s - 2.45x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   209.886k i/100ms
  Array#reverse_each     1.639M i/100ms
Calculating -------------------------------------
  Array#reverse.each      2.256M (± 3.2%) i/s -     11.334M in   5.030042s
  Array#reverse_each     16.399M (± 0.1%) i/s -     83.589M in   5.097132s

Comparison:
  Array#reverse_each: 16399168.8 i/s
  Array#reverse.each:  2255616.4 i/s - 7.27x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       682.865k i/100ms
   Enumerable#detect     2.396M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          7.711M (± 6.1%) i/s -    153.645M in  20.017948s
   Enumerable#detect     26.175M (± 0.3%) i/s -    524.689M in  20.045624s

Comparison:
   Enumerable#detect: 26174915.4 i/s
Enumerable#select.first:  7711406.8 i/s - 3.39x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       208.549k i/100ms
Enumerable#select.last
                       374.996k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.341M (± 3.0%) i/s -     11.887M in   5.083521s
Enumerable#select.last
                          3.790M (± 2.7%) i/s -     19.125M in   5.049804s

Comparison:
Enumerable#select.last:  3790174.1 i/s
Enumerable#reverse.detect:  2340547.7 i/s - 1.62x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.871k i/100ms
  Enumerable#sort_by     2.994k i/100ms
     Enumerable#sort     4.145k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         28.912k (±13.2%) i/s -    143.550k in   5.063044s
  Enumerable#sort_by     27.950k (±11.9%) i/s -    137.724k in   5.002934s
     Enumerable#sort     41.555k (± 0.3%) i/s -    211.395k in   5.087157s

Comparison:
     Enumerable#sort:    41555.1 i/s
Enumerable#sort_by (Symbol#to_proc):    28911.9 i/s - 1.44x  (± 0.00) slower
  Enumerable#sort_by:    27950.2 i/s - 1.49x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   484.937k i/100ms
Enumerable#sort_by...first
                         6.512k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      4.853M (± 0.1%) i/s -     24.732M in   5.096421s
Enumerable#sort_by...first
                         67.075k (± 2.3%) i/s -    338.624k in   5.051317s

Comparison:
   Enumerable#min_by:  4852778.9 i/s
Enumerable#sort_by...first:    67075.1 i/s - 72.35x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   387.714k i/100ms
            Hash#dup   456.952k i/100ms
Calculating -------------------------------------
              Hash[]      4.811M (± 2.4%) i/s -     24.038M in   4.999043s
            Hash#dup      4.810M (± 2.0%) i/s -     24.218M in   5.037346s

Comparison:
              Hash[]:  4811476.1 i/s
            Hash#dup:  4809809.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   113.649M i/100ms
  Hash#fetch, symbol   113.438M i/100ms
     Hash#[], string     3.672M i/100ms
  Hash#fetch, string    13.463M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.137B (± 1.1%) i/s -      5.796B in   5.097703s
  Hash#fetch, symbol      1.139B (± 1.2%) i/s -      5.785B in   5.080296s
     Hash#[], string    171.712M (± 1.7%) i/s -    859.207M in   5.005150s
  Hash#fetch, string    150.915M (± 0.9%) i/s -    767.380M in   5.085249s

Comparison:
  Hash#fetch, symbol: 1138953719.1 i/s
     Hash#[], symbol: 1137140422.9 i/s - same-ish: difference falls within error
     Hash#[], string: 171712400.3 i/s - 6.63x  (± 0.00) slower
  Hash#fetch, string: 150914716.1 i/s - 7.55x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    49.750M i/100ms
             Hash#[]    49.796M i/100ms
          Hash#[] ||    49.803M i/100ms
          Hash#[] &&    49.793M i/100ms
          Hash#fetch    49.789M i/100ms
 Hash#fetch fallback    49.800M i/100ms
Calculating -------------------------------------
            Hash#dig    497.540M (± 0.2%) i/s -      2.488B in   4.999667s
             Hash#[]    497.742M (± 0.2%) i/s -      2.490B in   5.002190s
          Hash#[] ||    497.638M (± 0.2%) i/s -      2.490B in   5.003963s
          Hash#[] &&    497.615M (± 0.3%) i/s -      2.490B in   5.003174s
          Hash#fetch    497.973M (± 0.1%) i/s -      2.539B in   5.099199s
 Hash#fetch fallback    497.823M (± 0.2%) i/s -      2.490B in   5.001761s

Comparison:
          Hash#fetch: 497972764.9 i/s
 Hash#fetch fallback: 497822553.1 i/s - same-ish: difference falls within error
             Hash#[]: 497741506.2 i/s - same-ish: difference falls within error
          Hash#[] ||: 497637602.7 i/s - same-ish: difference falls within error
          Hash#[] &&: 497615439.5 i/s - same-ish: difference falls within error
            Hash#dig: 497539630.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   113.290M i/100ms
  Hash#fetch + block   113.416M i/100ms
    Hash#fetch + arg   113.533M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.135B (± 0.6%) i/s -      5.778B in   5.090963s
  Hash#fetch + block      1.136B (± 0.8%) i/s -      5.784B in   5.092160s
    Hash#fetch + arg      1.139B (± 0.9%) i/s -      5.790B in   5.085477s

Comparison:
    Hash#fetch + arg: 1138660144.5 i/s
  Hash#fetch + block: 1135984675.4 i/s - same-ish: difference falls within error
  Hash#fetch + const: 1134952150.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    22.090k i/100ms
         sort + to_h    10.894k i/100ms
Calculating -------------------------------------
      sort_by + to_h    376.083k (± 4.6%) i/s -      1.878M in   5.004705s
         sort + to_h    151.830k (± 4.8%) i/s -    762.580k in   5.035191s

Comparison:
      sort_by + to_h:   376083.2 i/s
         sort + to_h:   151830.1 i/s - 2.48x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   177.715k i/100ms
       Hash#each_key   221.447k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.910M (±10.7%) i/s -      9.419M in   5.057896s
       Hash#each_key      2.244M (± 3.2%) i/s -     11.294M in   5.037706s

Comparison:
       Hash#each_key:  2244267.1 i/s
      Hash#keys.each:  1909845.2 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   198.000  i/100ms
           Hash#key?    12.409M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.989k (±11.1%) i/s -      9.900k in   5.061152s
           Hash#key?    128.753M (± 0.1%) i/s -    645.276M in   5.011732s

Comparison:
           Hash#key?: 128753247.4 i/s
  Hash#keys.include?:     1989.2 i/s - 64725.82x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    37.886k i/100ms
            Hash#[]=    41.649k i/100ms
Calculating -------------------------------------
         Hash#merge!    428.220k (± 5.1%) i/s -      2.160M in   5.057175s
            Hash#[]=    424.487k (± 4.6%) i/s -      2.124M in   5.015039s

Comparison:
         Hash#merge!:   428220.5 i/s
            Hash#[]=:   424487.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        24.247k i/100ms
      Hash#merge({})    14.921k i/100ms
 Hash#dup#merge!({})    25.154k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        281.677k (± 2.5%) i/s -      1.431M in   5.081920s
      Hash#merge({})    160.189k (± 2.1%) i/s -    805.734k in   5.032282s
 Hash#dup#merge!({})    251.736k (± 2.0%) i/s -      1.283M in   5.098044s

Comparison:
{}#merge!(Hash) do end:   281676.8 i/s
 Hash#dup#merge!({}):   251736.2 i/s - 1.12x  (± 0.00) slower
      Hash#merge({}):   160189.0 i/s - 1.76x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   113.671M i/100ms
          Hash#merge   113.477M i/100ms
Calculating -------------------------------------
        Hash#**other      1.137B (± 0.8%) i/s -      5.684B in   4.999408s
          Hash#merge      1.135B (± 0.6%) i/s -      5.787B in   5.099187s

Comparison:
        Hash#**other: 1136917631.9 i/s
          Hash#merge: 1134991221.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   710.000  i/100ms
         Hash#merge!    41.118k i/100ms
Calculating -------------------------------------
          Hash#merge      7.839k (± 7.2%) i/s -     39.050k in   5.009665s
         Hash#merge!    424.568k (± 5.0%) i/s -      2.138M in   5.049600s

Comparison:
         Hash#merge!:   424567.8 i/s
          Hash#merge:     7839.2 i/s - 54.16x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.449M i/100ms
Array#each               1.340M i/100ms
Array#each_w/_object     1.378M i/100ms
Hash#select-include      2.049M i/100ms
Calculating -------------------------------------
Hash#native-slice        16.786M (± 4.1%) i/s -     84.035M in   5.015731s
Array#each               14.135M (± 3.6%) i/s -     71.017M in   5.031377s
Array#each_w/_object     14.015M (± 3.4%) i/s -     70.284M in   5.021254s
Hash#select-include      20.867M (± 2.3%) i/s -    104.484M in   5.010078s

Comparison:
Hash#select-include : 20866717.9 i/s
Hash#native-slice   : 16785889.0 i/s - 1.24x  (± 0.00) slower
Array#each          : 14135146.4 i/s - 1.48x  (± 0.00) slower
Array#each_w/_object: 14014637.9 i/s - 1.49x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   211.000  i/100ms
         Hash#value?   391.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.964k (± 9.9%) i/s -      9.706k in   5.016068s
         Hash#value?      3.882k (± 1.0%) i/s -     19.550k in   5.037061s

Comparison:
         Hash#value?:     3881.6 i/s
Hash#values.include?:     1964.1 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   113.587M i/100ms
                send   113.294M i/100ms
      method_missing   113.651M i/100ms
Calculating -------------------------------------
                call      1.137B (± 0.7%) i/s -      5.793B in   5.095501s
                send      1.137B (± 0.8%) i/s -      5.778B in   5.083834s
      method_missing      1.136B (± 0.3%) i/s -      5.683B in   5.003920s

Comparison:
                call: 1136929035.0 i/s
                send: 1136615408.5 i/s - same-ish: difference falls within error
      method_missing: 1135632260.7 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    29.558k i/100ms
      Symbol#to_proc    33.410k i/100ms
Calculating -------------------------------------
               Block    345.992k (± 2.4%) i/s -      1.744M in   5.043265s
      Symbol#to_proc    345.188k (± 2.1%) i/s -      1.737M in   5.035284s

Comparison:
               Block:   345991.9 i/s
      Symbol#to_proc:   345188.5 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   113.382M i/100ms
       block + yield   113.404M i/100ms
        unused block   113.541M i/100ms
               yield   113.495M i/100ms
Calculating -------------------------------------
          block.call      1.138B (± 1.0%) i/s -      5.782B in   5.082350s
       block + yield      1.138B (± 0.6%) i/s -      5.784B in   5.084242s
        unused block      1.139B (± 1.0%) i/s -      5.791B in   5.083118s
               yield      1.137B (± 0.7%) i/s -      5.788B in   5.091152s

Comparison:
        unused block: 1139297221.4 i/s
          block.call: 1137869148.9 i/s - same-ish: difference falls within error
       block + yield: 1137598675.0 i/s - same-ish: difference falls within error
               yield: 1136981293.6 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    17.996k i/100ms
      range#include?   600.000  i/100ms
       range#member?   856.000  i/100ms
       plain compare    31.459k i/100ms
Calculating -------------------------------------
        range#cover?    207.076k (±19.3%) i/s -    989.780k in   5.008401s
      range#include?      9.571k (±28.2%) i/s -     43.800k in   5.022871s
       range#member?      9.006k (±28.7%) i/s -     41.088k in   5.010096s
       plain compare    382.751k (± 6.0%) i/s -      1.919M in   5.033827s

Comparison:
       plain compare:   382751.2 i/s
        range#cover?:   207075.9 i/s - 1.85x  (± 0.00) slower
      range#include?:     9571.4 i/s - 39.99x  (± 0.00) slower
       range#member?:     9006.4 i/s - 42.50x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     4.521M i/100ms
           String#=~    13.833M i/100ms
          Regexp#===    13.834M i/100ms
        String#match     9.738M i/100ms
Calculating -------------------------------------
       String#match?    140.867M (± 0.7%) i/s -    705.299M in   5.007097s
           String#=~    138.300M (± 0.0%) i/s -    691.674M in   5.001254s
          Regexp#===    137.668M (± 0.1%) i/s -    691.691M in   5.024333s
        String#match     95.104M (± 0.1%) i/s -    477.142M in   5.017078s

Comparison:
       String#match?: 140866583.0 i/s
           String#=~: 138300096.7 i/s - 1.02x  (± 0.00) slower
          Regexp#===: 137668377.5 i/s - 1.02x  (± 0.00) slower
        String#match: 95103641.3 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.344M i/100ms
      String#casecmp     3.830M i/100ms
Calculating -------------------------------------
String#downcase + ==     26.470M (± 6.0%) i/s -    133.636M in   5.068009s
      String#casecmp     38.667M (± 4.6%) i/s -    195.323M in   5.063090s

Comparison:
      String#casecmp: 38667368.6 i/s
String#downcase + ==: 26470140.5 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     7.739M i/100ms
       String#concat     8.363M i/100ms
       String#append     8.367M i/100ms
         "foo" "bar"   113.683M i/100ms
  "#{'foo'}#{'bar'}"   113.534M i/100ms
Calculating -------------------------------------
            String#+     84.301M (± 3.3%) i/s -    425.627M in   5.054627s
       String#concat     84.396M (± 3.1%) i/s -    426.517M in   5.059026s
       String#append     84.521M (± 2.9%) i/s -    426.704M in   5.053055s
         "foo" "bar"      1.137B (± 0.5%) i/s -      5.684B in   5.001099s
  "#{'foo'}#{'bar'}"      1.140B (± 0.9%) i/s -      5.790B in   5.081348s

Comparison:
  "#{'foo'}#{'bar'}": 1139593450.5 i/s
         "foo" "bar": 1136606509.2 i/s - same-ish: difference falls within error
       String#append: 84521412.8 i/s - 13.48x  (± 0.00) slower
       String#concat: 84396331.9 i/s - 13.50x  (± 0.00) slower
            String#+: 84300622.6 i/s - 13.52x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   113.513M i/100ms
          String#dup   113.399M i/100ms
Calculating -------------------------------------
           String#+@      1.139B (± 1.3%) i/s -      5.789B in   5.085524s
          String#dup      1.135B (± 0.5%) i/s -      5.783B in   5.094462s

Comparison:
           String#+@: 1138545540.9 i/s
          String#dup: 1135250216.2 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.347M i/100ms
       String#match?     1.519M i/100ms
    String#end_with?    10.020M i/100ms
Calculating -------------------------------------
           String#=~     14.397M (± 2.6%) i/s -     72.763M in   5.057655s
       String#match?     18.399M (± 0.1%) i/s -     92.660M in   5.036276s
    String#end_with?     99.501M (± 0.7%) i/s -    500.982M in   5.035194s

Comparison:
    String#end_with?: 99500625.4 i/s
       String#match?: 18398619.3 i/s - 5.41x  (± 0.00) slower
           String#=~: 14397174.2 i/s - 6.91x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   249.718k i/100ms
          String#sub   739.033k i/100ms
String#dup["string"]=
                         9.220M i/100ms
Calculating -------------------------------------
         String#gsub      5.927M (± 9.1%) i/s -     29.467M in   5.031687s
          String#sub      8.075M (± 2.2%) i/s -     40.647M in   5.036509s
String#dup["string"]=
                         92.213M (± 0.1%) i/s -    470.209M in   5.099154s

Comparison:
String#dup["string"]=: 92213226.5 i/s
          String#sub:  8074544.0 i/s - 11.42x  (± 0.00) slower
         String#gsub:  5927291.9 i/s - 15.56x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   139.647k i/100ms
           String#tr   104.847k i/100ms
Calculating -------------------------------------
         String#gsub      2.625M (± 8.3%) i/s -     13.127M in   5.040649s
           String#tr      1.110M (± 4.8%) i/s -      5.557M in   5.020059s

Comparison:
         String#gsub:  2624839.9 i/s
           String#tr:  1109733.6 i/s - 2.37x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   113.292M i/100ms
         With Freeze   113.841M i/100ms
Calculating -------------------------------------
      Without Freeze      1.136B (± 1.1%) i/s -      5.778B in   5.087889s
         With Freeze      1.134B (± 0.3%) i/s -      5.692B in   5.018692s

Comparison:
      Without Freeze: 1135737539.4 i/s
         With Freeze: 1134177827.8 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     6.561k i/100ms
      String#squeeze    27.592k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     98.930k (± 9.8%) i/s -    492.075k in   5.041399s
      String#squeeze    276.120k (± 2.4%) i/s -      1.380M in   4.999730s

Comparison:
      String#squeeze:   276120.2 i/s
 String#gsub/regex+/:    98930.1 i/s - 2.79x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     2.440M i/100ms
       String#match?     5.014M i/100ms
  String#start_with?     9.114M i/100ms
Calculating -------------------------------------
           String#=~     24.820M (± 3.4%) i/s -    124.454M in   5.020386s
       String#match?     46.187M (± 1.1%) i/s -    235.662M in   5.102881s
  String#start_with?     92.672M (± 0.7%) i/s -    464.809M in   5.015859s

Comparison:
  String#start_with?: 92672262.5 i/s
       String#match?: 46187338.2 i/s - 2.01x  (± 0.00) slower
           String#=~: 24820275.5 i/s - 3.73x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   107.627k i/100ms
    String#[0, n] ==   249.251k i/100ms
   String#[RANGE] ==   323.913k i/100ms
   String#[0...n] ==   227.035k i/100ms
Calculating -------------------------------------
  String#start_with?      4.067M (± 0.1%) i/s -     20.342M in   5.001832s
    String#[0, n] ==      2.551M (± 3.6%) i/s -     12.961M in   5.086927s
   String#[RANGE] ==      3.276M (± 3.3%) i/s -     16.520M in   5.049158s
   String#[0...n] ==      2.264M (± 4.1%) i/s -     11.352M in   5.022953s

Comparison:
  String#start_with?:  4066813.8 i/s
   String#[RANGE] ==:  3275613.6 i/s - 1.24x  (± 0.00) slower
    String#[0, n] ==:  2551474.2 i/s - 1.59x  (± 0.00) slower
   String#[0...n] ==:  2264034.1 i/s - 1.80x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     9.205M i/100ms
 String#sub!'string'   774.706k i/100ms
String#gsub!'string'   577.779k i/100ms
  String#[/regexp/]=     1.768M i/100ms
 String#sub!/regexp/   951.215k i/100ms
String#gsub!/regexp/   666.365k i/100ms
Calculating -------------------------------------
  String#['string']=     92.201M (± 0.1%) i/s -    469.442M in   5.091518s
 String#sub!'string'      8.548M (±14.0%) i/s -     40.285M in   5.043809s
String#gsub!'string'      6.000M (± 2.0%) i/s -     30.045M in   5.009675s
  String#[/regexp/]=     17.476M (± 1.7%) i/s -     88.388M in   5.059200s
 String#sub!/regexp/      9.626M (± 2.2%) i/s -     48.512M in   5.042187s
String#gsub!/regexp/      6.620M (± 2.3%) i/s -     33.318M in   5.035934s

Comparison:
  String#['string']=: 92200860.5 i/s
  String#[/regexp/]=: 17476349.1 i/s - 5.28x  (± 0.00) slower
 String#sub!/regexp/:  9625818.6 i/s - 9.58x  (± 0.00) slower
 String#sub!'string':  8547973.5 i/s - 10.79x  (± 0.00) slower
String#gsub!/regexp/:  6619721.3 i/s - 13.93x  (± 0.00) slower
String#gsub!'string':  5999748.5 i/s - 15.37x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.384M i/100ms
        String#chomp     4.679M i/100ms
String#delete_suffix    10.648M i/100ms
Calculating -------------------------------------
          String#sub     25.188M (± 4.9%) i/s -    125.953M in   5.015562s
        String#chomp     46.800M (± 0.2%) i/s -    238.607M in   5.098500s
String#delete_suffix    107.015M (± 7.1%) i/s -    543.065M in   5.101227s

Comparison:
String#delete_suffix: 107014768.8 i/s
        String#chomp: 46799525.6 i/s - 2.29x  (± 0.00) slower
          String#sub: 25188201.9 i/s - 4.25x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   113.810M i/100ms
          String#sub    14.175M i/100ms
Calculating -------------------------------------
String#delete_prefix      1.135B (± 0.6%) i/s -      5.691B in   5.013698s
          String#sub    152.385M (± 0.2%) i/s -    765.450M in   5.023170s

Comparison:
String#delete_prefix: 1135035802.6 i/s
          String#sub: 152384678.2 i/s - 7.45x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.557M i/100ms
    String#unpack[0]     1.652M i/100ms
Calculating -------------------------------------
      String#unpack1     16.629M (± 3.4%) i/s -     84.072M in   5.061996s
    String#unpack[0]     16.652M (± 3.1%) i/s -     84.260M in   5.065120s

Comparison:
    String#unpack[0]: 16651799.3 i/s
      String#unpack1: 16628761.5 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    22.930k i/100ms
          Time.parse   226.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    293.908k (±25.8%) i/s -      1.330M in   5.005366s
          Time.parse      9.368k (±23.8%) i/s -     40.002k in   5.011515s

Comparison:
        Time.iso8601:   293908.2 i/s
          Time.parse:     9367.6 i/s - 31.37x  (± 0.00) slower

