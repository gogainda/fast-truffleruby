$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       113.978M i/100ms
Function with splat arguments
                         1.129k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.134B (± 0.5%) i/s -      5.699B in   5.024002s
Function with splat arguments
                         13.093k (± 6.7%) i/s -     65.482k in   5.028566s

Comparison:
Function with single Array argument: 1134370845.5 i/s
Function with splat arguments:    13092.6 i/s - 86642.16x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   113.948M i/100ms
Sequential Assignment
                       113.331M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.133B (± 0.4%) i/s -      5.697B in   5.029913s
Sequential Assignment
                          1.135B (± 0.5%) i/s -      5.780B in   5.094586s

Comparison:
Sequential Assignment: 1134534148.0 i/s
 Parallel Assignment: 1132725324.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   113.669M i/100ms
       attr_accessor   113.352M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.136B (± 0.9%) i/s -      5.683B in   5.004668s
       attr_accessor      1.136B (± 0.8%) i/s -      5.781B in   5.090937s

Comparison:
   getter_and_setter: 1135714688.4 i/s
       attr_accessor: 1135606300.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    10.094k i/100ms
         respond_to?   111.610M i/100ms
Calculating -------------------------------------
      begin...rescue     76.647k (± 3.8%) i/s -    383.572k in   5.011560s
         respond_to?      1.136B (± 0.5%) i/s -      5.692B in   5.011103s

Comparison:
         respond_to?: 1135924979.5 i/s
      begin...rescue:    76646.9 i/s - 14820.22x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   113.507M i/100ms
             &method   114.143M i/100ms
Calculating -------------------------------------
              normal      1.135B (± 0.7%) i/s -      5.789B in   5.099136s
             &method      1.137B (± 0.2%) i/s -      5.707B in   5.019537s

Comparison:
             &method: 1136989080.6 i/s
              normal: 1135315842.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       144.000  i/100ms
       define_method   154.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.429k (±55.9%) i/s -      6.624k in   5.144186s
       define_method      6.200k (±49.0%) i/s -      8.932k in   6.659839s

Comparison:
       define_method:     6200.2 i/s
module_eval with string:     2429.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    73.491k i/100ms
       Kernel#format    62.940k i/100ms
            String#%    62.788k i/100ms
Calculating -------------------------------------
         Float#round    753.111k (± 3.9%) i/s -      3.822M in   5.081942s
       Kernel#format    642.819k (± 3.7%) i/s -      3.210M in   5.000098s
            String#%    635.753k (± 2.3%) i/s -      3.202M in   5.039557s

Comparison:
         Float#round:   753111.1 i/s
       Kernel#format:   642818.6 i/s - 1.17x  (± 0.00) slower
            String#%:   635753.2 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.392M i/100ms
          OpenStruct   113.398M i/100ms
Calculating -------------------------------------
                Hash      1.136B (± 1.1%) i/s -      5.783B in   5.089150s
          OpenStruct      1.137B (± 0.9%) i/s -      5.783B in   5.088652s

Comparison:
          OpenStruct: 1136602047.8 i/s
                Hash: 1136478332.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.394M i/100ms
          OpenStruct     3.326k i/100ms
Calculating -------------------------------------
                Hash      1.132B (± 1.0%) i/s -      5.670B in   5.011266s
          OpenStruct     34.682k (±13.7%) i/s -    172.952k in   5.128249s

Comparison:
                Hash: 1131501527.8 i/s
          OpenStruct:    34682.3 i/s - 32624.79x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   808.859k i/100ms
  ancestors.include?   168.525k i/100ms
Calculating -------------------------------------
  less than or equal      8.838M (± 3.8%) i/s -     44.487M in   5.042033s
  ancestors.include?      1.720M (± 4.9%) i/s -      8.595M in   5.010727s

Comparison:
  less than or equal:  8837501.1 i/s
  ancestors.include?:  1719627.6 i/s - 5.14x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     11.368  (± 0.0%) i/s -     57.000  in   5.014633s
         Kernel loop     11.363  (± 0.0%) i/s -     57.000  in   5.016394s

Comparison:
          While Loop:       11.4 i/s
         Kernel loop:       11.4 i/s - 1.00x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   114.011M i/100ms
         Array#first   113.476M i/100ms
Calculating -------------------------------------
           Array#[0]      1.137B (± 1.2%) i/s -      5.701B in   5.014568s
         Array#first      1.139B (± 1.5%) i/s -      5.787B in   5.081529s

Comparison:
         Array#first: 1139114174.7 i/s
           Array#[0]: 1136959836.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   113.467M i/100ms
          Array#last   113.900M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.134B (± 0.5%) i/s -      5.673B in   5.005096s
          Array#last      1.138B (± 1.0%) i/s -      5.695B in   5.006934s

Comparison:
          Array#last: 1137529016.4 i/s
          Array#[-1]: 1133537569.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   686.397k i/100ms
Calculating -------------------------------------
                find      4.726  (± 0.0%) i/s -     24.000  in   5.078548s
             bsearch      6.913M (± 4.1%) i/s -     35.006M in   5.072359s

Comparison:
             bsearch:  6913465.6 i/s
                find:        4.7 i/s - 1462930.38x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.069  (± 0.0%) i/s -      1.000  in  14.557771s
        Array#insert      1.028  (± 0.0%) i/s -      6.000  in   5.834718s

Comparison:
        Array#insert:        1.0 i/s
       Array#unshift:        0.1 i/s - 14.97x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   113.949M i/100ms
          Array#size   113.655M i/100ms
         Array#count   113.895M i/100ms
Calculating -------------------------------------
        Array#length      1.134B (± 0.7%) i/s -      5.697B in   5.024540s
          Array#size      1.135B (± 0.4%) i/s -      5.683B in   5.008631s
         Array#count      1.140B (± 1.2%) i/s -      5.809B in   5.096853s

Comparison:
         Array#count: 1139819378.0 i/s
          Array#size: 1134606807.4 i/s - same-ish: difference falls within error
        Array#length: 1133982390.9 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    24.741k i/100ms
        Array#sample     2.858M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    254.332k (± 1.7%) i/s -      1.287M in   5.060079s
        Array#sample     28.676M (± 0.1%) i/s -    145.780M in   5.083742s

Comparison:
        Array#sample: 28675679.7 i/s
 Array#shuffle.first:   254332.1 i/s - 112.75x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601     1.985k i/100ms
          Date.parse   922.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     41.173k (±33.8%) i/s -    172.695k in   5.019211s
          Date.parse     14.648k (±19.2%) i/s -     66.384k in   5.012074s

Comparison:
        Date.iso8601:    41173.1 i/s
          Date.parse:    14648.5 i/s - 2.81x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   224.093k i/100ms
           Array#map     1.053M i/100ms
Calculating -------------------------------------
   Array#each + push      2.448M (± 5.0%) i/s -     12.325M in   5.048443s
           Array#map     10.273M (± 5.2%) i/s -     51.606M in   5.037892s

Comparison:
           Array#map: 10272879.1 i/s
   Array#each + push:  2447962.2 i/s - 4.20x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     6.630M i/100ms
               #each    40.577M i/100ms
Calculating -------------------------------------
            For loop     65.796M (± 2.3%) i/s -    331.496M in   5.040810s
               #each    405.409M (± 1.0%) i/s -      2.029B in   5.004915s

Comparison:
               #each: 405409475.7 i/s
            For loop: 65795636.4 i/s - 6.16x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   813.667k i/100ms
     each_with_index     1.042M i/100ms
Calculating -------------------------------------
          While Loop      8.138M (± 0.1%) i/s -     41.497M in   5.099186s
     each_with_index     10.425M (± 0.0%) i/s -     53.160M in   5.099271s

Comparison:
     each_with_index: 10425060.5 i/s
          While Loop:  8137970.7 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   159.267k i/100ms
      inject to_proc   158.888k i/100ms
        inject block   159.898k i/100ms
Calculating -------------------------------------
       inject symbol      1.599M (± 0.1%) i/s -      8.123M in   5.080972s
      inject to_proc      1.596M (± 0.0%) i/s -      8.103M in   5.076559s
        inject block      1.619M (± 0.1%) i/s -      8.155M in   5.035701s

Comparison:
        inject block:  1619398.0 i/s
       inject symbol:  1598637.3 i/s - 1.01x  (± 0.00) slower
      inject to_proc:  1596216.8 i/s - 1.01x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    16.990k i/100ms
   Array#map.flatten    17.939k i/100ms
      Array#flat_map    44.727k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    185.852k (± 4.6%) i/s -    934.450k in   5.039287s
   Array#map.flatten    188.542k (± 4.3%) i/s -    950.767k in   5.053015s
      Array#flat_map    451.543k (± 1.6%) i/s -      2.281M in   5.053049s

Comparison:
      Array#flat_map:   451543.1 i/s
   Array#map.flatten:   188542.4 i/s - 2.39x  (± 0.00) slower
Array#map.flatten(1):   185852.4 i/s - 2.43x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   206.988k i/100ms
  Array#reverse_each     1.683M i/100ms
Calculating -------------------------------------
  Array#reverse.each      2.164M (± 2.9%) i/s -     10.970M in   5.074698s
  Array#reverse_each     16.845M (± 0.2%) i/s -     85.850M in   5.096618s

Comparison:
  Array#reverse_each: 16844587.5 i/s
  Array#reverse.each:  2163635.8 i/s - 7.79x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       698.609k i/100ms
   Enumerable#detect     2.757M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          7.337M (± 5.2%) i/s -    146.708M in  20.065270s
   Enumerable#detect     27.488M (± 0.3%) i/s -    551.406M in  20.060159s

Comparison:
   Enumerable#detect: 27487867.4 i/s
Enumerable#select.first:  7336926.2 i/s - 3.75x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       208.440k i/100ms
Enumerable#select.last
                       408.371k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.336M (± 3.1%) i/s -     11.881M in   5.090351s
Enumerable#select.last
                          4.132M (± 2.9%) i/s -     20.827M in   5.045060s

Comparison:
Enumerable#select.last:  4131893.2 i/s
Enumerable#reverse.detect:  2336452.6 i/s - 1.77x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.743k i/100ms
  Enumerable#sort_by     2.914k i/100ms
     Enumerable#sort     4.107k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         27.458k (±15.4%) i/s -    134.407k in   5.041723s
  Enumerable#sort_by     25.299k (±20.2%) i/s -    122.388k in   5.086283s
     Enumerable#sort     41.298k (± 1.4%) i/s -    209.457k in   5.072950s

Comparison:
     Enumerable#sort:    41297.6 i/s
Enumerable#sort_by (Symbol#to_proc):    27458.1 i/s - 1.50x  (± 0.00) slower
  Enumerable#sort_by:    25298.7 i/s - 1.63x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   475.401k i/100ms
Enumerable#sort_by...first
                         6.359k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      4.695M (± 1.1%) i/s -     23.770M in   5.063936s
Enumerable#sort_by...first
                         68.014k (± 2.4%) i/s -    343.386k in   5.051767s

Comparison:
   Enumerable#min_by:  4694580.3 i/s
Enumerable#sort_by...first:    68013.7 i/s - 69.02x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   414.476k i/100ms
            Hash#dup   453.763k i/100ms
Calculating -------------------------------------
              Hash[]      4.748M (± 2.3%) i/s -     24.040M in   5.066056s
            Hash#dup      4.785M (± 2.2%) i/s -     24.049M in   5.028851s

Comparison:
            Hash#dup:  4784710.6 i/s
              Hash[]:  4747762.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   113.364M i/100ms
  Hash#fetch, symbol   113.928M i/100ms
     Hash#[], string     3.617M i/100ms
  Hash#fetch, string    12.750M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.135B (± 0.7%) i/s -      5.782B in   5.095805s
  Hash#fetch, symbol      1.139B (± 0.8%) i/s -      5.696B in   5.000604s
     Hash#[], string    174.213M (± 1.3%) i/s -    871.789M in   5.005062s
  Hash#fetch, string    152.609M (± 2.3%) i/s -    765.019M in   5.015890s

Comparison:
  Hash#fetch, symbol: 1139215330.4 i/s
     Hash#[], symbol: 1134635028.7 i/s - same-ish: difference falls within error
     Hash#[], string: 174212952.5 i/s - 6.54x  (± 0.00) slower
  Hash#fetch, string: 152608509.1 i/s - 7.46x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    49.783M i/100ms
             Hash#[]    49.794M i/100ms
          Hash#[] ||    49.816M i/100ms
          Hash#[] &&    49.817M i/100ms
          Hash#fetch    49.803M i/100ms
 Hash#fetch fallback    49.811M i/100ms
Calculating -------------------------------------
            Hash#dig    497.568M (± 0.3%) i/s -      2.489B in   5.002672s
             Hash#[]    497.872M (± 0.2%) i/s -      2.490B in   5.000749s
          Hash#[] ||    497.804M (± 0.2%) i/s -      2.491B in   5.003605s
          Hash#[] &&    497.724M (± 0.2%) i/s -      2.491B in   5.004529s
          Hash#fetch    497.997M (± 0.0%) i/s -      2.490B in   5.000352s
 Hash#fetch fallback    497.962M (± 0.1%) i/s -      2.491B in   5.001526s

Comparison:
          Hash#fetch: 497996655.3 i/s
 Hash#fetch fallback: 497962082.9 i/s - same-ish: difference falls within error
             Hash#[]: 497872091.1 i/s - same-ish: difference falls within error
          Hash#[] ||: 497803535.7 i/s - same-ish: difference falls within error
          Hash#[] &&: 497724468.5 i/s - same-ish: difference falls within error
            Hash#dig: 497568395.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   113.936M i/100ms
  Hash#fetch + block   114.831M i/100ms
    Hash#fetch + arg   113.617M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.141B (± 1.3%) i/s -      5.811B in   5.095266s
  Hash#fetch + block      1.137B (± 1.0%) i/s -      5.742B in   5.050003s
    Hash#fetch + arg      1.141B (± 1.2%) i/s -      5.794B in   5.078074s

Comparison:
    Hash#fetch + arg: 1141228628.2 i/s
  Hash#fetch + const: 1140619380.1 i/s - same-ish: difference falls within error
  Hash#fetch + block: 1137050634.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    23.256k i/100ms
         sort + to_h     9.566k i/100ms
Calculating -------------------------------------
      sort_by + to_h    360.889k (± 3.2%) i/s -      1.814M in   5.031962s
         sort + to_h     99.575k (± 4.3%) i/s -    497.432k in   5.005269s

Comparison:
      sort_by + to_h:   360889.1 i/s
         sort + to_h:    99574.9 i/s - 3.62x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   180.855k i/100ms
       Hash#each_key   219.990k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.952M (±11.4%) i/s -      9.585M in   5.054560s
       Hash#each_key      2.251M (± 3.1%) i/s -     11.439M in   5.087731s

Comparison:
       Hash#each_key:  2250708.7 i/s
      Hash#keys.each:  1951650.0 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   233.000  i/100ms
           Hash#key?     2.520M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      2.473k (±11.4%) i/s -     12.349k in   5.085691s
           Hash#key?     25.207M (± 0.1%) i/s -    128.525M in   5.098746s

Comparison:
           Hash#key?: 25207160.2 i/s
  Hash#keys.include?:     2472.7 i/s - 10194.17x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    41.147k i/100ms
            Hash#[]=    41.354k i/100ms
Calculating -------------------------------------
         Hash#merge!    431.987k (± 5.3%) i/s -      2.181M in   5.063664s
            Hash#[]=    418.600k (± 5.2%) i/s -      2.109M in   5.053119s

Comparison:
         Hash#merge!:   431986.8 i/s
            Hash#[]=:   418600.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        24.171k i/100ms
      Hash#merge({})    14.654k i/100ms
 Hash#dup#merge!({})    25.138k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        275.015k (± 2.5%) i/s -      1.378M in   5.013050s
      Hash#merge({})    158.708k (± 3.1%) i/s -    805.970k in   5.083346s
 Hash#dup#merge!({})    249.186k (± 2.3%) i/s -      1.257M in   5.046772s

Comparison:
{}#merge!(Hash) do end:   275014.6 i/s
 Hash#dup#merge!({}):   249186.5 i/s - 1.10x  (± 0.00) slower
      Hash#merge({}):   158707.7 i/s - 1.73x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   113.778M i/100ms
          Hash#merge   113.381M i/100ms
Calculating -------------------------------------
        Hash#**other      1.137B (± 1.0%) i/s -      5.689B in   5.002151s
          Hash#merge      1.139B (± 1.1%) i/s -      5.782B in   5.076641s

Comparison:
          Hash#merge: 1139152801.9 i/s
        Hash#**other: 1137394455.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   676.000  i/100ms
         Hash#merge!    41.277k i/100ms
Calculating -------------------------------------
          Hash#merge      7.876k (± 6.9%) i/s -     39.208k in   5.004753s
         Hash#merge!    430.002k (± 2.1%) i/s -      2.188M in   5.089990s

Comparison:
         Hash#merge!:   430002.1 i/s
          Hash#merge:     7875.6 i/s - 54.60x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.431M i/100ms
Array#each               1.384M i/100ms
Array#each_w/_object     1.378M i/100ms
Hash#select-include      2.083M i/100ms
Calculating -------------------------------------
Hash#native-slice        16.323M (± 4.2%) i/s -     81.551M in   5.005640s
Array#each               14.131M (± 2.9%) i/s -     70.597M in   5.000405s
Array#each_w/_object     13.972M (± 3.2%) i/s -     70.303M in   5.037321s
Hash#select-include      20.864M (± 3.5%) i/s -    106.217M in   5.097785s

Comparison:
Hash#select-include : 20863911.5 i/s
Hash#native-slice   : 16322693.8 i/s - 1.28x  (± 0.00) slower
Array#each          : 14131347.8 i/s - 1.48x  (± 0.00) slower
Array#each_w/_object: 13972417.9 i/s - 1.49x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   234.000  i/100ms
         Hash#value?     2.384k i/100ms
Calculating -------------------------------------
Hash#values.include?      2.450k (±11.5%) i/s -     12.168k in   5.065152s
         Hash#value?     24.476k (± 0.2%) i/s -    123.968k in   5.064863s

Comparison:
         Hash#value?:    24476.2 i/s
Hash#values.include?:     2449.7 i/s - 9.99x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   113.549M i/100ms
                send   113.520M i/100ms
      method_missing   113.539M i/100ms
Calculating -------------------------------------
                call      1.121B (± 4.5%) i/s -      5.677B in   5.076111s
                send      1.136B (± 0.7%) i/s -      5.789B in   5.094657s
      method_missing      1.135B (± 0.3%) i/s -      5.677B in   5.000583s

Comparison:
                send: 1136438476.1 i/s
      method_missing: 1135266566.9 i/s - same-ish: difference falls within error
                call: 1121123024.8 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    31.576k i/100ms
      Symbol#to_proc    33.494k i/100ms
Calculating -------------------------------------
               Block    350.839k (± 2.3%) i/s -      1.768M in   5.042844s
      Symbol#to_proc    348.702k (± 2.1%) i/s -      1.775M in   5.093212s

Comparison:
               Block:   350839.1 i/s
      Symbol#to_proc:   348702.3 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   113.363M i/100ms
       block + yield   113.368M i/100ms
        unused block   113.472M i/100ms
               yield   113.628M i/100ms
Calculating -------------------------------------
          block.call      1.135B (± 0.7%) i/s -      5.782B in   5.092025s
       block + yield      1.139B (± 1.0%) i/s -      5.782B in   5.078821s
        unused block      1.137B (± 1.1%) i/s -      5.787B in   5.089228s
               yield      1.136B (± 0.7%) i/s -      5.681B in   5.000659s

Comparison:
       block + yield: 1138518741.3 i/s
        unused block: 1137249148.8 i/s - same-ish: difference falls within error
               yield: 1136178444.5 i/s - same-ish: difference falls within error
          block.call: 1135469166.5 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    16.730k i/100ms
      range#include?   660.000  i/100ms
       range#member?   920.000  i/100ms
       plain compare    31.547k i/100ms
Calculating -------------------------------------
        range#cover?    199.369k (±23.5%) i/s -    920.150k in   5.003040s
      range#include?     10.001k (±29.9%) i/s -     44.880k in   5.026069s
       range#member?      9.663k (±29.1%) i/s -     44.160k in   5.057126s
       plain compare    351.594k (± 5.8%) i/s -      1.767M in   5.046469s

Comparison:
       plain compare:   351593.9 i/s
        range#cover?:   199368.7 i/s - 1.76x  (± 0.00) slower
      range#include?:    10000.7 i/s - 35.16x  (± 0.00) slower
       range#member?:     9662.5 i/s - 36.39x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    13.972M i/100ms
           String#=~    14.595M i/100ms
          Regexp#===    14.599M i/100ms
        String#match     9.726M i/100ms
Calculating -------------------------------------
       String#match?    144.658M (± 0.1%) i/s -    726.539M in   5.022459s
           String#=~    145.730M (± 0.4%) i/s -    729.768M in   5.007746s
          Regexp#===    135.688M (± 1.1%) i/s -    686.143M in   5.057352s
        String#match     97.190M (± 0.3%) i/s -    486.279M in   5.003443s

Comparison:
           String#=~: 145729621.3 i/s
       String#match?: 144658264.8 i/s - 1.01x  (± 0.00) slower
          Regexp#===: 135687704.5 i/s - 1.07x  (± 0.00) slower
        String#match: 97190015.2 i/s - 1.50x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.446M i/100ms
      String#casecmp     3.988M i/100ms
Calculating -------------------------------------
String#downcase + ==     27.758M (± 6.3%) i/s -    139.397M in   5.043753s
      String#casecmp     40.131M (± 3.9%) i/s -    203.363M in   5.075845s

Comparison:
      String#casecmp: 40131295.6 i/s
String#downcase + ==: 27758276.0 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     7.641M i/100ms
       String#concat     8.326M i/100ms
       String#append     8.439M i/100ms
         "foo" "bar"   113.599M i/100ms
  "#{'foo'}#{'bar'}"   113.505M i/100ms
Calculating -------------------------------------
            String#+     83.487M (± 3.7%) i/s -    420.240M in   5.040773s
       String#concat     84.328M (± 2.1%) i/s -    424.610M in   5.037557s
       String#append     83.493M (± 3.4%) i/s -    421.934M in   5.059495s
         "foo" "bar"      1.136B (± 0.4%) i/s -      5.794B in   5.099925s
  "#{'foo'}#{'bar'}"      1.135B (± 0.4%) i/s -      5.789B in   5.098109s

Comparison:
         "foo" "bar": 1136028852.1 i/s
  "#{'foo'}#{'bar'}": 1135493434.6 i/s - same-ish: difference falls within error
       String#concat: 84327855.3 i/s - 13.47x  (± 0.00) slower
       String#append: 83493253.5 i/s - 13.61x  (± 0.00) slower
            String#+: 83487267.3 i/s - 13.61x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   113.434M i/100ms
          String#dup   113.374M i/100ms
Calculating -------------------------------------
           String#+@      1.135B (± 0.6%) i/s -      5.785B in   5.098408s
          String#dup      1.134B (± 0.3%) i/s -      5.782B in   5.098065s

Comparison:
           String#+@: 1134731466.7 i/s
          String#dup: 1134178285.3 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.233M i/100ms
       String#match?     1.453M i/100ms
    String#end_with?    10.261M i/100ms
Calculating -------------------------------------
           String#=~     13.359M (± 2.7%) i/s -     67.800M in   5.079197s
       String#match?     18.118M (± 0.2%) i/s -     91.537M in   5.052176s
    String#end_with?    102.275M (± 0.4%) i/s -    513.058M in   5.016554s

Comparison:
    String#end_with?: 102275039.3 i/s
       String#match?: 18118414.2 i/s - 5.64x  (± 0.00) slower
           String#=~: 13359015.0 i/s - 7.66x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   343.069k i/100ms
          String#sub   737.069k i/100ms
String#dup["string"]=
                        11.293M i/100ms
Calculating -------------------------------------
         String#gsub      5.631M (± 9.3%) i/s -     28.132M in   5.050530s
          String#sub      8.350M (± 2.4%) i/s -     42.013M in   5.034766s
String#dup["string"]=
                        112.663M (± 0.2%) i/s -    564.645M in   5.011824s

Comparison:
String#dup["string"]=: 112663069.6 i/s
          String#sub:  8349627.0 i/s - 13.49x  (± 0.00) slower
         String#gsub:  5631417.1 i/s - 20.01x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   118.948k i/100ms
           String#tr   115.702k i/100ms
Calculating -------------------------------------
         String#gsub      2.648M (± 7.8%) i/s -     13.203M in   5.022955s
           String#tr      1.170M (± 3.2%) i/s -      5.901M in   5.050540s

Comparison:
         String#gsub:  2647821.1 i/s
           String#tr:  1169644.8 i/s - 2.26x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   113.611M i/100ms
         With Freeze   113.794M i/100ms
Calculating -------------------------------------
      Without Freeze      1.136B (± 0.9%) i/s -      5.681B in   5.001971s
         With Freeze      1.138B (± 0.7%) i/s -      5.690B in   5.001426s

Comparison:
         With Freeze: 1137674735.5 i/s
      Without Freeze: 1135761225.7 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     6.488k i/100ms
      String#squeeze    27.441k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     90.692k (±11.5%) i/s -    454.160k in   5.069656s
      String#squeeze    274.796k (± 2.0%) i/s -      1.399M in   5.095227s

Comparison:
      String#squeeze:   274795.8 i/s
 String#gsub/regex+/:    90691.5 i/s - 3.03x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     2.347M i/100ms
       String#match?     4.859M i/100ms
  String#start_with?     9.086M i/100ms
Calculating -------------------------------------
           String#=~     25.060M (± 3.3%) i/s -    126.739M in   5.063379s
       String#match?     42.924M (± 0.6%) i/s -    218.634M in   5.093767s
  String#start_with?     91.471M (± 0.7%) i/s -    463.396M in   5.066248s

Comparison:
  String#start_with?: 91471278.6 i/s
       String#match?: 42923711.3 i/s - 2.13x  (± 0.00) slower
           String#=~: 25059995.6 i/s - 3.65x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   107.000k i/100ms
    String#[0, n] ==   244.644k i/100ms
   String#[RANGE] ==   324.112k i/100ms
   String#[0...n] ==   226.119k i/100ms
Calculating -------------------------------------
  String#start_with?      4.139M (± 0.2%) i/s -     20.758M in   5.015012s
    String#[0, n] ==      2.552M (± 3.6%) i/s -     12.966M in   5.087886s
   String#[RANGE] ==      3.275M (± 3.1%) i/s -     16.530M in   5.052967s
   String#[0...n] ==      2.288M (± 3.4%) i/s -     11.532M in   5.046137s

Comparison:
  String#start_with?:  4139182.6 i/s
   String#[RANGE] ==:  3274669.0 i/s - 1.26x  (± 0.00) slower
    String#[0, n] ==:  2551952.8 i/s - 1.62x  (± 0.00) slower
   String#[0...n] ==:  2288207.0 i/s - 1.81x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    11.280M i/100ms
 String#sub!'string'   752.111k i/100ms
String#gsub!'string'   576.999k i/100ms
  String#[/regexp/]=     1.872M i/100ms
 String#sub!/regexp/     2.233M i/100ms
String#gsub!/regexp/   699.040k i/100ms
Calculating -------------------------------------
  String#['string']=    113.158M (± 0.1%) i/s -    575.264M in   5.083734s
 String#sub!'string'      8.768M (±14.7%) i/s -     39.862M in   5.017325s
String#gsub!'string'      5.977M (± 2.0%) i/s -     30.004M in   5.021891s
  String#[/regexp/]=     18.687M (± 1.8%) i/s -     93.604M in   5.010704s
 String#sub!/regexp/     22.537M (± 1.4%) i/s -    113.888M in   5.054341s
String#gsub!/regexp/      6.659M (± 2.1%) i/s -     33.554M in   5.041156s

Comparison:
  String#['string']=: 113157878.1 i/s
 String#sub!/regexp/: 22537340.4 i/s - 5.02x  (± 0.00) slower
  String#[/regexp/]=: 18686945.7 i/s - 6.06x  (± 0.00) slower
 String#sub!'string':  8767729.7 i/s - 12.91x  (± 0.00) slower
String#gsub!/regexp/:  6658961.2 i/s - 16.99x  (± 0.00) slower
String#gsub!'string':  5977080.0 i/s - 18.93x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     2.412M i/100ms
        String#chomp     4.610M i/100ms
String#delete_suffix    10.832M i/100ms
Calculating -------------------------------------
          String#sub     24.797M (± 4.5%) i/s -    125.428M in   5.069783s
        String#chomp     46.087M (± 0.2%) i/s -    230.524M in   5.001943s
String#delete_suffix    109.457M (± 7.2%) i/s -    552.428M in   5.075137s

Comparison:
String#delete_suffix: 109457173.5 i/s
        String#chomp: 46087183.1 i/s - 2.38x  (± 0.00) slower
          String#sub: 24797493.1 i/s - 4.41x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   113.514M i/100ms
          String#sub    15.477M i/100ms
Calculating -------------------------------------
String#delete_prefix      1.136B (± 0.8%) i/s -      5.789B in   5.096295s
          String#sub    154.700M (± 0.2%) i/s -    773.827M in   5.002122s

Comparison:
String#delete_prefix: 1136029478.0 i/s
          String#sub: 154700256.6 i/s - 7.34x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.558M i/100ms
    String#unpack[0]     1.624M i/100ms
Calculating -------------------------------------
      String#unpack1     16.410M (± 3.3%) i/s -     82.587M in   5.038673s
    String#unpack[0]     16.458M (± 3.2%) i/s -     82.804M in   5.036614s

Comparison:
    String#unpack[0]: 16458246.4 i/s
      String#unpack1: 16409607.2 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 23.0.0-dev-f3db7ba6, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    21.954k i/100ms
          Time.parse   362.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    311.926k (±20.9%) i/s -      1.471M in   5.056356s
          Time.parse      9.533k (±23.7%) i/s -     41.992k in   5.018414s

Comparison:
        Time.iso8601:   311925.7 i/s
          Time.parse:     9532.5 i/s - 32.72x  (± 0.00) slower

