$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       184.588M i/100ms
Function with splat arguments
                       815.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.851B (± 2.2%) i/s -      9.414B in   5.089012s
Function with splat arguments
                          8.518k (± 7.3%) i/s -     42.380k in   5.003719s

Comparison:
Function with single Array argument: 1850730475.6 i/s
Function with splat arguments:     8518.3 i/s - 217264.50x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   182.230M i/100ms
Sequential Assignment
                       181.772M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.809B (± 3.1%) i/s -      9.111B in   5.043275s
Sequential Assignment
                          1.797B (± 3.4%) i/s -      9.089B in   5.064478s

Comparison:
 Parallel Assignment: 1808520894.9 i/s
Sequential Assignment: 1796767657.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   181.230M i/100ms
       attr_accessor   186.194M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.842B (± 2.6%) i/s -      9.243B in   5.020999s
       attr_accessor      1.859B (± 2.4%) i/s -      9.310B in   5.011919s

Comparison:
       attr_accessor: 1858606601.7 i/s
   getter_and_setter: 1842071429.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     8.208k i/100ms
         respond_to?   181.134M i/100ms
Calculating -------------------------------------
      begin...rescue     63.805k (± 4.9%) i/s -    320.112k in   5.029142s
         respond_to?      1.861B (± 2.3%) i/s -      9.419B in   5.064954s

Comparison:
         respond_to?: 1860699332.7 i/s
      begin...rescue:    63805.0 i/s - 29162.29x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   184.997M i/100ms
             &method   184.926M i/100ms
Calculating -------------------------------------
              normal      1.828B (± 2.2%) i/s -      9.250B in   5.063935s
             &method      1.838B (± 2.3%) i/s -      9.246B in   5.034585s

Comparison:
             &method: 1837546587.6 i/s
              normal: 1827542258.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        89.000  i/100ms
       define_method   125.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.388k (±52.2%) i/s -      3.916k in   5.027618s
       define_method      4.638k (±58.6%) i/s -      6.000k in   5.857199s

Comparison:
       define_method:     4638.3 i/s
module_eval with string:     1387.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    59.051k i/100ms
       Kernel#format    51.519k i/100ms
            String#%    52.455k i/100ms
Calculating -------------------------------------
         Float#round    623.271k (± 3.6%) i/s -      3.130M in   5.028183s
       Kernel#format    523.093k (± 3.4%) i/s -      2.627M in   5.029051s
            String#%    516.374k (± 6.9%) i/s -      2.570M in   5.013441s

Comparison:
         Float#round:   623271.1 i/s
       Kernel#format:   523092.9 i/s - 1.19x  (± 0.00) slower
            String#%:   516373.5 i/s - 1.21x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   182.736M i/100ms
          OpenStruct   184.329M i/100ms
Calculating -------------------------------------
                Hash      1.830B (± 2.9%) i/s -      9.320B in   5.098355s
          OpenStruct      1.859B (± 1.9%) i/s -      9.401B in   5.058774s

Comparison:
          OpenStruct: 1858953445.0 i/s
                Hash: 1829531160.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   182.958M i/100ms
          OpenStruct     1.771k i/100ms
Calculating -------------------------------------
                Hash      1.843B (± 2.1%) i/s -      9.331B in   5.064090s
          OpenStruct     19.943k (±13.6%) i/s -     97.405k in   5.003911s

Comparison:
                Hash: 1843418635.0 i/s
          OpenStruct:    19943.3 i/s - 92432.94x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   646.707k i/100ms
  ancestors.include?   134.454k i/100ms
Calculating -------------------------------------
  less than or equal      7.665M (± 5.1%) i/s -     38.802M in   5.077186s
  ancestors.include?      1.362M (± 5.9%) i/s -      6.857M in   5.052429s

Comparison:
  less than or equal:  7664754.0 i/s
  ancestors.include?:  1362119.3 i/s - 5.63x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     20.360  (± 4.9%) i/s -    102.000  in   5.012990s
         Kernel loop     20.529  (± 4.9%) i/s -    103.000  in   5.024496s

Comparison:
         Kernel loop:       20.5 i/s
          While Loop:       20.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   184.822M i/100ms
         Array#first   182.487M i/100ms
Calculating -------------------------------------
           Array#[0]      1.851B (± 1.5%) i/s -      9.426B in   5.094530s
         Array#first      1.862B (± 3.0%) i/s -      9.489B in   5.102661s

Comparison:
         Array#first: 1861525932.8 i/s
           Array#[0]: 1850645132.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   185.051M i/100ms
          Array#last   179.620M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.866B (± 2.1%) i/s -      9.438B in   5.058705s
          Array#last      1.839B (± 2.9%) i/s -      9.340B in   5.084574s

Comparison:
          Array#[-1]: 1866420508.4 i/s
          Array#last: 1838535874.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   520.165k i/100ms
Calculating -------------------------------------
                find      4.901  (±20.4%) i/s -     14.000  in   5.152185s
             bsearch      5.261M (± 3.4%) i/s -     26.528M in   5.048536s

Comparison:
             bsearch:  5260858.6 i/s
                find:        4.9 i/s - 1073431.60x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.077  (± 0.0%) i/s -      1.000  in  12.971286s
        Array#insert      0.749  (± 0.0%) i/s -      4.000  in   5.343523s

Comparison:
        Array#insert:        0.7 i/s
       Array#unshift:        0.1 i/s - 9.71x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   183.867M i/100ms
          Array#size   182.766M i/100ms
         Array#count   185.852M i/100ms
Calculating -------------------------------------
        Array#length      1.850B (± 3.2%) i/s -      9.377B in   5.075051s
          Array#size      1.856B (± 2.1%) i/s -      9.321B in   5.025559s
         Array#count      1.848B (± 2.1%) i/s -      9.293B in   5.030180s

Comparison:
          Array#size: 1855563686.7 i/s
        Array#length: 1849841095.8 i/s - same-ish: difference falls within error
         Array#count: 1848224299.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    19.740k i/100ms
        Array#sample     2.518M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    193.161k (± 2.8%) i/s -    967.260k in   5.011496s
        Array#sample     25.123M (± 2.0%) i/s -    125.914M in   5.013942s

Comparison:
        Array#sample: 25123239.0 i/s
 Array#shuffle.first:   193161.2 i/s - 130.06x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   348.000  i/100ms
          Date.parse   388.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     15.057k (±33.0%) i/s -     62.988k in   4.994425s
          Date.parse      8.975k (±23.2%) i/s -     39.964k in   5.003727s

Comparison:
        Date.iso8601:    15057.5 i/s
          Date.parse:     8974.7 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   168.018k i/100ms
           Array#map   893.269k i/100ms
Calculating -------------------------------------
   Array#each + push      1.952M (± 6.2%) i/s -      9.745M in   5.014620s
           Array#map      8.860M (± 8.3%) i/s -     44.663M in   5.078501s

Comparison:
           Array#map:  8860450.4 i/s
   Array#each + push:  1951748.7 i/s - 4.54x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     7.888M i/100ms
               #each    43.174M i/100ms
Calculating -------------------------------------
            For loop     80.142M (± 1.8%) i/s -    402.277M in   5.021187s
               #each    434.134M (± 1.4%) i/s -      2.202B in   5.072915s

Comparison:
               #each: 434133765.5 i/s
            For loop: 80142221.2 i/s - 5.42x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   803.759k i/100ms
     each_with_index     1.145M i/100ms
Calculating -------------------------------------
          While Loop      8.037M (± 2.0%) i/s -     40.188M in   5.002474s
     each_with_index     11.438M (± 1.9%) i/s -     57.250M in   5.007121s

Comparison:
     each_with_index: 11437926.3 i/s
          While Loop:  8036943.1 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   144.871k i/100ms
      inject to_proc   143.884k i/100ms
        inject block   146.316k i/100ms
Calculating -------------------------------------
       inject symbol      1.451M (± 1.7%) i/s -      7.388M in   5.092424s
      inject to_proc      1.431M (± 1.8%) i/s -      7.194M in   5.028830s
        inject block      1.439M (± 1.9%) i/s -      7.316M in   5.085810s

Comparison:
       inject symbol:  1451286.1 i/s
        inject block:  1439012.9 i/s - same-ish: difference falls within error
      inject to_proc:  1431063.9 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    11.310k i/100ms
   Array#map.flatten    15.735k i/100ms
      Array#flat_map    37.045k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    163.997k (± 6.9%) i/s -    825.630k in   5.061241s
   Array#map.flatten    162.535k (± 5.5%) i/s -    818.220k in   5.050831s
      Array#flat_map    371.117k (± 4.9%) i/s -      1.889M in   5.104090s

Comparison:
      Array#flat_map:   371116.6 i/s
Array#map.flatten(1):   163996.9 i/s - 2.26x  (± 0.00) slower
   Array#map.flatten:   162535.2 i/s - 2.28x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   137.852k i/100ms
  Array#reverse_each     1.633M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.865M (± 5.5%) i/s -      9.374M in   5.043056s
  Array#reverse_each     16.719M (± 1.5%) i/s -     84.941M in   5.081570s

Comparison:
  Array#reverse_each: 16719361.7 i/s
  Array#reverse.each:  1864598.0 i/s - 8.97x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       556.234k i/100ms
   Enumerable#detect     2.866M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          5.867M (± 7.4%) i/s -    116.809M in  20.042093s
   Enumerable#detect     28.663M (± 2.3%) i/s -    573.268M in  20.011265s

Comparison:
   Enumerable#detect: 28662972.5 i/s
Enumerable#select.first:  5867326.7 i/s - 4.89x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       191.720k i/100ms
Enumerable#select.last
                       295.596k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.011M (± 5.1%) i/s -     10.161M in   5.068407s
Enumerable#select.last
                          3.060M (± 4.1%) i/s -     15.371M in   5.032831s

Comparison:
Enumerable#select.last:  3059593.2 i/s
Enumerable#reverse.detect:  2010544.1 i/s - 1.52x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.228k i/100ms
  Enumerable#sort_by     2.054k i/100ms
     Enumerable#sort     2.564k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         20.847k (±17.2%) i/s -    102.488k in   5.071818s
  Enumerable#sort_by     19.736k (±18.5%) i/s -     96.538k in   5.059665s
     Enumerable#sort     30.035k (± 3.7%) i/s -    151.276k in   5.044101s

Comparison:
     Enumerable#sort:    30035.0 i/s
Enumerable#sort_by (Symbol#to_proc):    20847.5 i/s - 1.44x  (± 0.00) slower
  Enumerable#sort_by:    19736.0 i/s - 1.52x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   421.604k i/100ms
Enumerable#sort_by...first
                         5.154k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      4.317M (± 2.7%) i/s -     21.923M in   5.082107s
Enumerable#sort_by...first
                         57.829k (± 4.7%) i/s -    288.624k in   5.002980s

Comparison:
   Enumerable#min_by:  4317135.3 i/s
Enumerable#sort_by...first:    57828.9 i/s - 74.65x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   269.648k i/100ms
            Hash#dup   318.510k i/100ms
Calculating -------------------------------------
              Hash[]      3.166M (± 7.8%) i/s -     15.909M in   5.060212s
            Hash#dup      3.403M (± 5.0%) i/s -     17.200M in   5.068689s

Comparison:
            Hash#dup:  3402516.5 i/s
              Hash[]:  3165941.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   182.379M i/100ms
  Hash#fetch, symbol   183.891M i/100ms
     Hash#[], string     2.725M i/100ms
  Hash#fetch, string    10.177M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.847B (± 3.9%) i/s -      9.301B in   5.044776s
  Hash#fetch, symbol      1.870B (± 1.9%) i/s -      9.378B in   5.017301s
     Hash#[], string    136.229M (± 3.2%) i/s -    681.321M in   5.006741s
  Hash#fetch, string    114.754M (± 3.1%) i/s -    580.097M in   5.060307s

Comparison:
  Hash#fetch, symbol: 1869904173.3 i/s
     Hash#[], symbol: 1846747231.0 i/s - same-ish: difference falls within error
     Hash#[], string: 136228927.7 i/s - 13.73x  (± 0.00) slower
  Hash#fetch, string: 114753584.7 i/s - 16.29x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    72.665M i/100ms
             Hash#[]    72.387M i/100ms
          Hash#[] ||    73.330M i/100ms
          Hash#[] &&    74.293M i/100ms
          Hash#fetch    73.975M i/100ms
 Hash#fetch fallback    74.128M i/100ms
Calculating -------------------------------------
            Hash#dig    735.450M (± 2.6%) i/s -      3.706B in   5.042606s
             Hash#[]    741.111M (± 2.8%) i/s -      3.764B in   5.083345s
          Hash#[] ||    736.734M (± 2.1%) i/s -      3.740B in   5.078410s
          Hash#[] &&    728.988M (± 2.4%) i/s -      3.715B in   5.098553s
          Hash#fetch    728.306M (± 2.4%) i/s -      3.699B in   5.081642s
 Hash#fetch fallback    737.397M (± 1.9%) i/s -      3.706B in   5.028157s

Comparison:
             Hash#[]: 741111439.7 i/s
 Hash#fetch fallback: 737396811.8 i/s - same-ish: difference falls within error
          Hash#[] ||: 736733943.1 i/s - same-ish: difference falls within error
            Hash#dig: 735449992.6 i/s - same-ish: difference falls within error
          Hash#[] &&: 728987554.2 i/s - same-ish: difference falls within error
          Hash#fetch: 728305520.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   187.337M i/100ms
  Hash#fetch + block   182.629M i/100ms
    Hash#fetch + arg   184.736M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.860B (± 1.9%) i/s -      9.367B in   5.036476s
  Hash#fetch + block      1.859B (± 2.7%) i/s -      9.314B in   5.013026s
    Hash#fetch + arg      1.851B (± 1.9%) i/s -      9.422B in   5.091316s

Comparison:
  Hash#fetch + const: 1860472896.7 i/s
  Hash#fetch + block: 1859464352.2 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 1851179065.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    16.366k i/100ms
         sort + to_h     3.591k i/100ms
Calculating -------------------------------------
      sort_by + to_h    282.539k (± 6.8%) i/s -      1.407M in   5.008148s
         sort + to_h    116.353k (± 8.7%) i/s -    578.151k in   5.019833s

Comparison:
      sort_by + to_h:   282539.3 i/s
         sort + to_h:   116353.4 i/s - 2.43x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   131.501k i/100ms
       Hash#each_key   155.928k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.384M (±12.3%) i/s -      6.707M in   5.005638s
       Hash#each_key      1.562M (± 4.4%) i/s -      7.796M in   5.000101s

Comparison:
       Hash#each_key:  1562435.1 i/s
      Hash#keys.each:  1383931.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   187.000  i/100ms
           Hash#key?     1.727M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      2.214k (±13.4%) i/s -     10.846k in   5.048347s
           Hash#key?     18.831M (± 1.6%) i/s -     94.979M in   5.044903s

Comparison:
           Hash#key?: 18831484.7 i/s
  Hash#keys.include?:     2213.7 i/s - 8506.65x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    24.889k i/100ms
            Hash#[]=    32.071k i/100ms
Calculating -------------------------------------
         Hash#merge!    323.592k (± 6.9%) i/s -      1.618M in   5.026079s
            Hash#[]=    324.704k (± 5.5%) i/s -      1.636M in   5.054237s

Comparison:
            Hash#[]=:   324703.6 i/s
         Hash#merge!:   323592.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        14.226k i/100ms
      Hash#merge({})    13.007k i/100ms
 Hash#dup#merge!({})    22.201k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        236.358k (± 4.9%) i/s -      1.181M in   5.008407s
      Hash#merge({})    140.389k (± 3.9%) i/s -    702.378k in   5.011039s
 Hash#dup#merge!({})    219.981k (± 3.6%) i/s -      1.110M in   5.052998s

Comparison:
{}#merge!(Hash) do end:   236358.3 i/s
 Hash#dup#merge!({}):   219981.3 i/s - same-ish: difference falls within error
      Hash#merge({}):   140388.5 i/s - 1.68x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   184.258M i/100ms
          Hash#merge   181.657M i/100ms
Calculating -------------------------------------
        Hash#**other      1.854B (± 2.7%) i/s -      9.397B in   5.073284s
          Hash#merge      1.848B (± 2.4%) i/s -      9.265B in   5.017021s

Comparison:
        Hash#**other: 1853631392.0 i/s
          Hash#merge: 1847681837.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   504.000  i/100ms
         Hash#merge!    31.715k i/100ms
Calculating -------------------------------------
          Hash#merge      5.933k (± 9.6%) i/s -     29.736k in   5.062558s
         Hash#merge!    315.050k (± 6.3%) i/s -      1.586M in   5.054956s

Comparison:
         Hash#merge!:   315050.2 i/s
          Hash#merge:     5933.2 i/s - 53.10x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      972.747k i/100ms
Array#each             874.266k i/100ms
Array#each_w/_object   866.343k i/100ms
Hash#select-include      1.572M i/100ms
Calculating -------------------------------------
Hash#native-slice        10.670M (± 5.2%) i/s -     53.501M in   5.028647s
Array#each                9.054M (± 3.7%) i/s -     45.462M in   5.028555s
Array#each_w/_object      9.094M (± 4.4%) i/s -     45.916M in   5.059600s
Hash#select-include      16.133M (± 5.8%) i/s -     81.733M in   5.085433s

Comparison:
Hash#select-include : 16132969.7 i/s
Hash#native-slice   : 10670486.2 i/s - 1.51x  (± 0.00) slower
Array#each_w/_object:  9093803.7 i/s - 1.77x  (± 0.00) slower
Array#each          :  9053739.0 i/s - 1.78x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   187.000  i/100ms
         Hash#value?     8.135k i/100ms
Calculating -------------------------------------
Hash#values.include?      2.270k (±12.6%) i/s -     11.220k in   5.056414s
         Hash#value?     72.368k (± 3.7%) i/s -    366.075k in   5.065447s

Comparison:
         Hash#value?:    72368.2 i/s
Hash#values.include?:     2269.8 i/s - 31.88x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   185.934M i/100ms
                send   184.441M i/100ms
      method_missing   180.967M i/100ms
Calculating -------------------------------------
                call      1.848B (± 2.7%) i/s -      9.297B in   5.034336s
                send      1.831B (± 2.2%) i/s -      9.222B in   5.038648s
      method_missing      1.818B (± 2.9%) i/s -      9.229B in   5.081451s

Comparison:
                call: 1848091014.4 i/s
                send: 1831178362.7 i/s - same-ish: difference falls within error
      method_missing: 1817821242.8 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    25.540k i/100ms
      Symbol#to_proc    30.291k i/100ms
Calculating -------------------------------------
               Block    330.864k (± 4.2%) i/s -      1.660M in   5.027071s
      Symbol#to_proc    328.364k (± 3.8%) i/s -      1.666M in   5.081558s

Comparison:
               Block:   330863.8 i/s
      Symbol#to_proc:   328364.0 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   182.364M i/100ms
       block + yield   186.026M i/100ms
        unused block   176.301M i/100ms
               yield   182.849M i/100ms
Calculating -------------------------------------
          block.call      1.843B (± 2.3%) i/s -      9.301B in   5.048533s
       block + yield      1.812B (± 4.4%) i/s -      9.115B in   5.041383s
        unused block      1.842B (± 3.3%) i/s -      9.344B in   5.079435s
               yield      1.830B (± 2.2%) i/s -      9.325B in   5.098348s

Comparison:
          block.call: 1843239551.5 i/s
        unused block: 1841645648.6 i/s - same-ish: difference falls within error
               yield: 1829958503.1 i/s - same-ish: difference falls within error
       block + yield: 1811785523.5 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    16.230k i/100ms
      range#include?   374.000  i/100ms
       range#member?   667.000  i/100ms
       plain compare    31.677k i/100ms
Calculating -------------------------------------
        range#cover?    153.426k (±26.8%) i/s -    697.890k in   5.059139s
      range#include?      5.818k (±33.4%) i/s -     26.554k in   5.048564s
       range#member?      5.961k (±26.1%) i/s -     28.681k in   5.131015s
       plain compare    310.439k (± 5.9%) i/s -      1.552M in   5.018746s

Comparison:
       plain compare:   310439.2 i/s
        range#cover?:   153425.6 i/s - 2.02x  (± 0.00) slower
       range#member?:     5961.2 i/s - 52.08x  (± 0.00) slower
      range#include?:     5818.2 i/s - 53.36x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     3.763M i/100ms
           String#=~    11.621M i/100ms
          Regexp#===    11.694M i/100ms
        String#match     8.212M i/100ms
Calculating -------------------------------------
       String#match?    120.524M (± 3.9%) i/s -    602.019M in   5.004338s
           String#=~    117.414M (± 2.0%) i/s -    592.648M in   5.049507s
          Regexp#===    114.886M (± 3.2%) i/s -    584.704M in   5.094864s
        String#match     82.543M (± 3.0%) i/s -    418.803M in   5.078490s

Comparison:
       String#match?: 120524441.8 i/s
           String#=~: 117414304.6 i/s - same-ish: difference falls within error
          Regexp#===: 114885788.1 i/s - same-ish: difference falls within error
        String#match: 82543395.4 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.612M i/100ms
      String#casecmp     3.132M i/100ms
Calculating -------------------------------------
String#downcase + ==     21.586M (± 8.1%) i/s -    107.988M in   5.040569s
      String#casecmp     32.785M (± 6.3%) i/s -    165.994M in   5.085376s

Comparison:
      String#casecmp: 32784623.2 i/s
String#downcase + ==: 21586086.4 i/s - 1.52x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     6.405M i/100ms
       String#concat     6.939M i/100ms
       String#append     6.821M i/100ms
         "foo" "bar"   181.897M i/100ms
  "#{'foo'}#{'bar'}"   179.143M i/100ms
Calculating -------------------------------------
            String#+     68.910M (± 5.1%) i/s -    345.873M in   5.033600s
       String#concat     68.603M (± 5.2%) i/s -    346.938M in   5.071671s
       String#append     69.110M (± 4.5%) i/s -    347.848M in   5.044558s
         "foo" "bar"      1.856B (± 2.1%) i/s -      9.277B in   5.001341s
  "#{'foo'}#{'bar'}"      1.860B (± 2.1%) i/s -      9.315B in   5.009492s

Comparison:
  "#{'foo'}#{'bar'}": 1860377486.1 i/s
         "foo" "bar": 1855705623.0 i/s - same-ish: difference falls within error
       String#append: 69110394.3 i/s - 26.92x  (± 0.00) slower
            String#+: 68910198.0 i/s - 27.00x  (± 0.00) slower
       String#concat: 68603184.4 i/s - 27.12x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   184.749M i/100ms
          String#dup   183.483M i/100ms
Calculating -------------------------------------
           String#+@      1.850B (± 2.2%) i/s -      9.422B in   5.096717s
          String#dup      1.868B (± 1.7%) i/s -      9.358B in   5.010930s

Comparison:
          String#dup: 1867975347.0 i/s
           String#+@: 1849623885.0 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.223M i/100ms
       String#match?     1.158M i/100ms
    String#end_with?     7.930M i/100ms
Calculating -------------------------------------
           String#=~     12.429M (± 4.8%) i/s -     62.352M in   5.029678s
       String#match?     15.220M (± 2.3%) i/s -     76.402M in   5.022323s
    String#end_with?     79.427M (± 2.2%) i/s -    404.454M in   5.094610s

Comparison:
    String#end_with?: 79427492.6 i/s
       String#match?: 15220310.3 i/s - 5.22x  (± 0.00) slower
           String#=~: 12429008.4 i/s - 6.39x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   111.169k i/100ms
          String#sub   504.412k i/100ms
String#dup["string"]=
                         8.933M i/100ms
Calculating -------------------------------------
         String#gsub      4.513M (±12.5%) i/s -     22.011M in   5.018810s
          String#sub      5.815M (± 6.5%) i/s -     29.256M in   5.057026s
String#dup["string"]=
                         89.139M (± 2.2%) i/s -    446.646M in   5.013213s

Comparison:
String#dup["string"]=: 89139192.4 i/s
          String#sub:  5815023.2 i/s - 15.33x  (± 0.00) slower
         String#gsub:  4513208.7 i/s - 19.75x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    58.218k i/100ms
           String#tr    91.873k i/100ms
Calculating -------------------------------------
         String#gsub      2.008M (±10.0%) i/s -      9.955M in   5.023834s
           String#tr    921.187k (± 4.6%) i/s -      4.686M in   5.098349s

Comparison:
         String#gsub:  2007988.7 i/s
           String#tr:   921186.5 i/s - 2.18x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   185.221M i/100ms
         With Freeze   185.552M i/100ms
Calculating -------------------------------------
      Without Freeze      1.821B (± 3.0%) i/s -      9.261B in   5.091467s
         With Freeze      1.846B (± 2.0%) i/s -      9.278B in   5.026446s

Comparison:
         With Freeze: 1846491993.1 i/s
      Without Freeze: 1820653907.2 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     5.599k i/100ms
      String#squeeze    22.776k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     88.938k (± 8.0%) i/s -    442.321k in   5.008315s
      String#squeeze    231.649k (± 3.4%) i/s -      1.162M in   5.020606s

Comparison:
      String#squeeze:   231648.6 i/s
 String#gsub/regex+/:    88938.3 i/s - 2.60x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.637M i/100ms
       String#match?     3.879M i/100ms
  String#start_with?     7.356M i/100ms
Calculating -------------------------------------
           String#=~     17.126M (± 4.4%) i/s -     86.775M in   5.077625s
       String#match?     38.676M (± 2.5%) i/s -    193.947M in   5.017874s
  String#start_with?     73.098M (± 2.5%) i/s -    367.786M in   5.034637s

Comparison:
  String#start_with?: 73097975.8 i/s
       String#match?: 38676291.6 i/s - 1.89x  (± 0.00) slower
           String#=~: 17125624.6 i/s - 4.27x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    77.436k i/100ms
    String#[0, n] ==   204.259k i/100ms
   String#[RANGE] ==   282.571k i/100ms
   String#[0...n] ==   195.854k i/100ms
Calculating -------------------------------------
  String#start_with?      3.298M (± 2.8%) i/s -     16.494M in   5.004695s
    String#[0, n] ==      2.254M (± 5.6%) i/s -     11.234M in   5.001857s
   String#[RANGE] ==      2.838M (± 4.9%) i/s -     14.411M in   5.092299s
   String#[0...n] ==      1.962M (± 5.3%) i/s -      9.793M in   5.005451s

Comparison:
  String#start_with?:  3298411.2 i/s
   String#[RANGE] ==:  2837536.8 i/s - 1.16x  (± 0.00) slower
    String#[0, n] ==:  2253764.3 i/s - 1.46x  (± 0.00) slower
   String#[0...n] ==:  1962378.8 i/s - 1.68x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     8.873M i/100ms
 String#sub!'string'   453.866k i/100ms
String#gsub!'string'   364.671k i/100ms
  String#[/regexp/]=     1.798M i/100ms
 String#sub!/regexp/     1.624M i/100ms
String#gsub!/regexp/   500.759k i/100ms
Calculating -------------------------------------
  String#['string']=     89.345M (± 2.6%) i/s -    452.548M in   5.068803s
 String#sub!'string'      5.942M (±14.1%) i/s -     27.232M in   5.004435s
String#gsub!'string'      4.492M (± 4.9%) i/s -     22.610M in   5.046918s
  String#[/regexp/]=     18.313M (± 4.4%) i/s -     91.718M in   5.019181s
 String#sub!/regexp/     17.075M (± 3.0%) i/s -     86.093M in   5.046809s
String#gsub!/regexp/      4.937M (± 7.6%) i/s -     25.038M in   5.102445s

Comparison:
  String#['string']=: 89345402.2 i/s
  String#[/regexp/]=: 18312800.2 i/s - 4.88x  (± 0.00) slower
 String#sub!/regexp/: 17075150.2 i/s - 5.23x  (± 0.00) slower
 String#sub!'string':  5942211.2 i/s - 15.04x  (± 0.00) slower
String#gsub!/regexp/:  4937257.6 i/s - 18.10x  (± 0.00) slower
String#gsub!'string':  4491636.0 i/s - 19.89x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.215M i/100ms
        String#chomp     3.758M i/100ms
String#delete_suffix     8.805M i/100ms
Calculating -------------------------------------
          String#sub     19.227M (± 6.1%) i/s -     95.986M in   5.014171s
        String#chomp     37.603M (± 3.3%) i/s -    187.885M in   5.002613s
String#delete_suffix     85.223M (± 9.7%) i/s -    431.459M in   5.113203s

Comparison:
String#delete_suffix: 85222820.2 i/s
        String#chomp: 37602549.4 i/s - 2.27x  (± 0.00) slower
          String#sub: 19226685.1 i/s - 4.43x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   185.336M i/100ms
          String#sub    11.625M i/100ms
Calculating -------------------------------------
String#delete_prefix      1.844B (± 2.3%) i/s -      9.267B in   5.029418s
          String#sub    123.056M (± 2.8%) i/s -    616.124M in   5.010816s

Comparison:
String#delete_prefix: 1843524787.1 i/s
          String#sub: 123056092.9 i/s - 14.98x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.288M i/100ms
    String#unpack[0]     1.359M i/100ms
Calculating -------------------------------------
      String#unpack1     13.521M (± 4.7%) i/s -     68.260M in   5.060799s
    String#unpack[0]     13.741M (± 4.4%) i/s -     69.326M in   5.055550s

Comparison:
    String#unpack[0]: 13741292.3 i/s
      String#unpack1: 13520546.0 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 23.0.0-dev-aae7d3b9, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    11.654k i/100ms
          Time.parse   102.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    117.427k (±36.5%) i/s -    512.776k in   5.020739s
          Time.parse      4.538k (±24.7%) i/s -     20.196k in   5.003974s

Comparison:
        Time.iso8601:   117427.2 i/s
          Time.parse:     4538.3 i/s - 25.87x  (± 0.00) slower

