$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       198.932M i/100ms
Function with splat arguments
                       726.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.987B (± 1.1%) i/s -      9.947B in   5.005561s
Function with splat arguments
                          7.557k (± 7.9%) i/s -     37.752k in   5.050251s

Comparison:
Function with single Array argument: 1987369024.0 i/s
Function with splat arguments:     7556.9 i/s - 262986.73x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   199.786M i/100ms
Sequential Assignment
                       199.625M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.984B (± 1.3%) i/s -      9.989B in   5.035681s
Sequential Assignment
                          1.991B (± 0.4%) i/s -      9.981B in   5.012992s

Comparison:
Sequential Assignment: 1991110082.1 i/s
 Parallel Assignment: 1984062034.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   199.205M i/100ms
       attr_accessor   198.717M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.994B (± 0.7%) i/s -     10.159B in   5.096234s
       attr_accessor      1.994B (± 0.5%) i/s -     10.135B in   5.082692s

Comparison:
       attr_accessor: 1993991249.9 i/s
   getter_and_setter: 1993622320.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     7.157k i/100ms
         respond_to?   198.783M i/100ms
Calculating -------------------------------------
      begin...rescue     47.591k (± 7.4%) i/s -    236.181k in   5.008430s
         respond_to?      1.990B (± 0.4%) i/s -     10.138B in   5.094369s

Comparison:
         respond_to?: 1990058633.4 i/s
      begin...rescue:    47591.0 i/s - 41815.88x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   198.561M i/100ms
             &method   198.676M i/100ms
Calculating -------------------------------------
              normal      1.986B (± 0.4%) i/s -      9.928B in   5.000059s
             &method      1.991B (± 0.5%) i/s -     10.132B in   5.088011s

Comparison:
             &method: 1991484634.2 i/s
              normal: 1985616050.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       115.000  i/100ms
       define_method   126.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.172k (±29.9%) i/s -      4.025k in   6.178460s
       define_method      2.985k (±60.3%) i/s -      5.670k in   5.957179s

Comparison:
       define_method:     2985.0 i/s
module_eval with string:     1172.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    64.175k i/100ms
       Kernel#format    56.613k i/100ms
            String#%    57.704k i/100ms
Calculating -------------------------------------
         Float#round    671.343k (± 2.7%) i/s -      3.401M in   5.070376s
       Kernel#format    575.327k (± 2.6%) i/s -      2.887M in   5.022128s
            String#%    584.177k (± 2.8%) i/s -      2.943M in   5.041703s

Comparison:
         Float#round:   671342.7 i/s
            String#%:   584176.9 i/s - 1.15x  (± 0.00) slower
       Kernel#format:   575326.5 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   198.500M i/100ms
          OpenStruct   198.932M i/100ms
Calculating -------------------------------------
                Hash      1.987B (± 1.3%) i/s -     10.124B in   5.095022s
          OpenStruct      2.012B (± 1.2%) i/s -     10.146B in   5.044210s

Comparison:
          OpenStruct: 2011593969.2 i/s
                Hash: 1987272176.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   199.331M i/100ms
          OpenStruct     2.657k i/100ms
Calculating -------------------------------------
                Hash      1.994B (± 1.9%) i/s -      9.967B in   4.999574s
          OpenStruct     25.917k (±11.7%) i/s -    127.536k in   5.020535s

Comparison:
                Hash: 1994218623.9 i/s
          OpenStruct:    25917.3 i/s - 76945.32x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   619.904k i/100ms
  ancestors.include?   125.672k i/100ms
Calculating -------------------------------------
  less than or equal      7.153M (± 2.9%) i/s -     35.954M in   5.030543s
  ancestors.include?      1.203M (± 8.5%) i/s -      6.032M in   5.072826s

Comparison:
  less than or equal:  7153330.4 i/s
  ancestors.include?:  1203178.5 i/s - 5.95x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     19.984  (± 0.0%) i/s -    100.000  in   5.004307s
         Kernel loop     19.878  (± 0.0%) i/s -    100.000  in   5.030684s

Comparison:
          While Loop:       20.0 i/s
         Kernel loop:       19.9 i/s - 1.01x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   198.601M i/100ms
         Array#first   198.812M i/100ms
Calculating -------------------------------------
           Array#[0]      1.985B (± 0.8%) i/s -      9.930B in   5.003360s
         Array#first      1.997B (± 0.8%) i/s -     10.139B in   5.078822s

Comparison:
         Array#first: 1996533452.5 i/s
           Array#[0]: 1984825642.7 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   198.791M i/100ms
          Array#last   198.884M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.993B (± 0.6%) i/s -     10.138B in   5.086269s
          Array#last      1.991B (± 0.6%) i/s -     10.143B in   5.093454s

Comparison:
          Array#[-1]: 1993346881.1 i/s
          Array#last: 1991456920.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   468.796k i/100ms
Calculating -------------------------------------
                find      5.745  (±34.8%) i/s -     10.000  in   5.147351s
             bsearch      4.760M (± 4.2%) i/s -     23.909M in   5.032166s

Comparison:
             bsearch:  4759877.6 i/s
                find:        5.7 i/s - 828593.62x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.103  (± 0.0%) i/s -      1.000  in   9.668083s
        Array#insert      0.792  (± 0.0%) i/s -      4.000  in   5.051543s

Comparison:
        Array#insert:        0.8 i/s
       Array#unshift:        0.1 i/s - 7.66x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   199.004M i/100ms
          Array#size   198.777M i/100ms
         Array#count   199.584M i/100ms
Calculating -------------------------------------
        Array#length      2.017B (± 1.6%) i/s -     10.149B in   5.032237s
          Array#size      1.994B (± 0.6%) i/s -     10.138B in   5.083436s
         Array#count      1.989B (± 1.7%) i/s -      9.979B in   5.019844s

Comparison:
        Array#length: 2017356577.5 i/s
          Array#size: 1994310743.5 i/s - same-ish: difference falls within error
         Array#count: 1988597437.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    20.037k i/100ms
        Array#sample     2.383M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    210.943k (± 2.4%) i/s -      1.062M in   5.037500s
        Array#sample     23.529M (± 0.4%) i/s -    119.151M in   5.064004s

Comparison:
        Array#sample: 23529347.3 i/s
 Array#shuffle.first:   210943.5 i/s - 111.54x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   335.000  i/100ms
          Date.parse   370.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     32.440k (±36.7%) i/s -    119.930k in   4.990487s
          Date.parse     18.266k (±29.7%) i/s -     72.520k in   4.996969s

Comparison:
        Date.iso8601:    32440.3 i/s
          Date.parse:    18266.4 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   126.694k i/100ms
           Array#map   543.482k i/100ms
Calculating -------------------------------------
   Array#each + push      1.298M (± 3.3%) i/s -      6.588M in   5.080783s
           Array#map      4.830M (± 8.9%) i/s -     23.913M in   5.008866s

Comparison:
           Array#map:  4830258.2 i/s
   Array#each + push:  1298109.3 i/s - 3.72x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     8.162M i/100ms
               #each    38.312M i/100ms
Calculating -------------------------------------
            For loop     82.899M (± 0.6%) i/s -    416.242M in   5.021246s
               #each    383.127M (± 0.3%) i/s -      1.916B in   4.999925s

Comparison:
               #each: 383126529.0 i/s
            For loop: 82898989.0 i/s - 4.62x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   756.672k i/100ms
     each_with_index     1.069M i/100ms
Calculating -------------------------------------
          While Loop      7.640M (± 0.5%) i/s -     38.590M in   5.051155s
     each_with_index     10.719M (± 1.0%) i/s -     54.531M in   5.087685s

Comparison:
     each_with_index: 10719121.2 i/s
          While Loop:  7640118.0 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   122.677k i/100ms
      inject to_proc   122.579k i/100ms
        inject block   122.584k i/100ms
Calculating -------------------------------------
       inject symbol      1.227M (± 0.2%) i/s -      6.134M in   5.000980s
      inject to_proc      1.226M (± 0.1%) i/s -      6.252M in   5.097677s
        inject block      1.225M (± 0.3%) i/s -      6.129M in   5.003828s

Comparison:
       inject symbol:  1226532.9 i/s
      inject to_proc:  1226349.7 i/s - same-ish: difference falls within error
        inject block:  1224915.1 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    10.142k i/100ms
   Array#map.flatten    10.252k i/100ms
      Array#flat_map    26.405k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    101.703k (± 7.8%) i/s -    507.100k in   5.039785s
   Array#map.flatten    103.618k (± 3.6%) i/s -    522.852k in   5.052549s
      Array#flat_map    267.195k (± 4.2%) i/s -      1.347M in   5.049375s

Comparison:
      Array#flat_map:   267195.3 i/s
   Array#map.flatten:   103618.0 i/s - 2.58x  (± 0.00) slower
Array#map.flatten(1):   101702.6 i/s - 2.63x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   139.279k i/100ms
  Array#reverse_each     1.618M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.569M (± 7.8%) i/s -      7.800M in   5.034931s
  Array#reverse_each     16.156M (± 0.3%) i/s -     80.923M in   5.008876s

Comparison:
  Array#reverse_each: 16156066.4 i/s
  Array#reverse.each:  1568600.7 i/s - 10.30x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       493.524k i/100ms
   Enumerable#detect     3.361M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          5.570M (± 7.7%) i/s -    110.549M in  20.047084s
   Enumerable#detect     33.643M (± 0.3%) i/s -    675.499M in  20.078529s

Comparison:
   Enumerable#detect: 33643117.4 i/s
Enumerable#select.first:  5569578.1 i/s - 6.04x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       142.684k i/100ms
Enumerable#select.last
                       322.184k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.599M (± 2.7%) i/s -      7.990M in   5.000491s
Enumerable#select.last
                          3.175M (± 7.7%) i/s -     15.787M in   5.024835s

Comparison:
Enumerable#select.last:  3174999.4 i/s
Enumerable#reverse.detect:  1599117.3 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.106k i/100ms
  Enumerable#sort_by     2.206k i/100ms
     Enumerable#sort     2.783k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         15.931k (±12.3%) i/s -     80.028k in   5.151987s
  Enumerable#sort_by     21.486k (±13.4%) i/s -    103.682k in   5.020725s
     Enumerable#sort     29.410k (± 1.9%) i/s -    147.499k in   5.017231s

Comparison:
     Enumerable#sort:    29410.4 i/s
  Enumerable#sort_by:    21486.2 i/s - 1.37x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    15930.8 i/s - 1.85x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   415.858k i/100ms
Enumerable#sort_by...first
                         4.613k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      4.179M (± 0.3%) i/s -     21.209M in   5.074636s
Enumerable#sort_by...first
                         51.526k (± 2.9%) i/s -    258.328k in   5.017871s

Comparison:
   Enumerable#min_by:  4179399.6 i/s
Enumerable#sort_by...first:    51526.3 i/s - 81.11x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   172.685k i/100ms
            Hash#dup   200.788k i/100ms
Calculating -------------------------------------
              Hash[]      2.010M (± 3.9%) i/s -     10.188M in   5.075679s
            Hash#dup      2.011M (± 4.1%) i/s -     10.240M in   5.099628s

Comparison:
            Hash#dup:  2011383.3 i/s
              Hash[]:  2010296.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   198.822M i/100ms
  Hash#fetch, symbol   199.209M i/100ms
     Hash#[], string     2.226M i/100ms
  Hash#fetch, string     2.263M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.995B (± 0.6%) i/s -     10.140B in   5.082634s
  Hash#fetch, symbol      1.993B (± 0.5%) i/s -     10.160B in   5.096635s
     Hash#[], string    130.916M (± 0.8%) i/s -    656.662M in   5.016201s
  Hash#fetch, string    136.736M (± 3.0%) i/s -    683.306M in   5.002309s

Comparison:
     Hash#[], symbol: 1995075650.8 i/s
  Hash#fetch, symbol: 1993454710.8 i/s - same-ish: difference falls within error
  Hash#fetch, string: 136736199.3 i/s - 14.59x  (± 0.00) slower
     Hash#[], string: 130915889.1 i/s - 15.24x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    41.414M i/100ms
             Hash#[]    41.428M i/100ms
          Hash#[] ||    41.460M i/100ms
          Hash#[] &&    41.526M i/100ms
          Hash#fetch    41.511M i/100ms
 Hash#fetch fallback    41.960M i/100ms
Calculating -------------------------------------
            Hash#dig    415.745M (± 0.7%) i/s -      2.112B in   5.080568s
             Hash#[]    418.108M (± 1.1%) i/s -      2.113B in   5.053927s
          Hash#[] ||    415.926M (± 0.8%) i/s -      2.114B in   5.084051s
          Hash#[] &&    415.197M (± 0.5%) i/s -      2.076B in   5.000856s
          Hash#fetch    415.163M (± 0.4%) i/s -      2.117B in   5.099364s
 Hash#fetch fallback    414.294M (± 0.4%) i/s -      2.098B in   5.064108s

Comparison:
             Hash#[]: 418107640.3 i/s
          Hash#[] ||: 415925645.7 i/s - same-ish: difference falls within error
            Hash#dig: 415744980.8 i/s - same-ish: difference falls within error
          Hash#[] &&: 415197033.3 i/s - same-ish: difference falls within error
          Hash#fetch: 415163457.3 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 414293504.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   198.063M i/100ms
  Hash#fetch + block   198.874M i/100ms
    Hash#fetch + arg   199.005M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.998B (± 1.1%) i/s -     10.101B in   5.055753s
  Hash#fetch + block      2.004B (± 1.1%) i/s -     10.143B in   5.061676s
    Hash#fetch + arg      1.997B (± 0.7%) i/s -     10.149B in   5.083457s

Comparison:
  Hash#fetch + block: 2004050977.1 i/s
  Hash#fetch + const: 1998198772.4 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 1996622118.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    15.368k i/100ms
         sort + to_h   301.000  i/100ms
Calculating -------------------------------------
      sort_by + to_h    242.661k (± 5.3%) i/s -      1.214M in   5.017642s
         sort + to_h     95.209k (±12.2%) i/s -    449.092k in   4.994829s

Comparison:
      sort_by + to_h:   242661.2 i/s
         sort + to_h:    95209.3 i/s - 2.55x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   101.944k i/100ms
       Hash#each_key   109.116k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.031M (±11.9%) i/s -      5.097M in   5.092723s
       Hash#each_key      1.114M (± 3.1%) i/s -      5.565M in   5.000627s

Comparison:
       Hash#each_key:  1113904.2 i/s
      Hash#keys.each:  1031156.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   159.000  i/100ms
           Hash#key?     1.949M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.889k (±11.2%) i/s -      9.381k in   5.065476s
           Hash#key?     19.546M (± 1.2%) i/s -     99.415M in   5.086938s

Comparison:
           Hash#key?: 19545969.4 i/s
  Hash#keys.include?:     1888.9 i/s - 10347.71x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    19.042k i/100ms
            Hash#[]=    20.307k i/100ms
Calculating -------------------------------------
         Hash#merge!    206.880k (± 3.8%) i/s -      1.047M in   5.069553s
            Hash#[]=    205.496k (± 4.8%) i/s -      1.036M in   5.052733s

Comparison:
         Hash#merge!:   206880.0 i/s
            Hash#[]=:   205496.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         9.998k i/100ms
      Hash#merge({})     7.512k i/100ms
 Hash#dup#merge!({})    12.067k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        120.720k (± 4.2%) i/s -    609.878k in   5.061045s
      Hash#merge({})     75.261k (± 5.0%) i/s -    375.600k in   5.003280s
 Hash#dup#merge!({})    130.797k (± 6.0%) i/s -    651.618k in   5.000722s

Comparison:
 Hash#dup#merge!({}):   130796.5 i/s
{}#merge!(Hash) do end:   120719.7 i/s - same-ish: difference falls within error
      Hash#merge({}):    75260.9 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   200.254M i/100ms
          Hash#merge   202.225M i/100ms
Calculating -------------------------------------
        Hash#**other      2.010B (± 1.3%) i/s -     10.213B in   5.082615s
          Hash#merge      1.998B (± 0.6%) i/s -     10.111B in   5.061223s

Comparison:
        Hash#**other: 2009703083.6 i/s
          Hash#merge: 1997867629.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   258.000  i/100ms
         Hash#merge!    20.809k i/100ms
Calculating -------------------------------------
          Hash#merge      2.954k (± 7.9%) i/s -     14.706k in   5.034952s
         Hash#merge!    201.570k (± 8.0%) i/s -    998.832k in   5.008335s

Comparison:
         Hash#merge!:   201569.7 i/s
          Hash#merge:     2954.0 i/s - 68.24x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      998.517k i/100ms
Array#each             793.878k i/100ms
Array#each_w/_object   803.625k i/100ms
Hash#select-include      1.316M i/100ms
Calculating -------------------------------------
Hash#native-slice        10.158M (± 3.6%) i/s -     50.924M in   5.019619s
Array#each                8.680M (± 5.2%) i/s -     43.663M in   5.044019s
Array#each_w/_object      8.673M (± 3.0%) i/s -     43.396M in   5.008051s
Hash#select-include      11.788M (± 5.2%) i/s -     59.236M in   5.037840s

Comparison:
Hash#select-include : 11788316.1 i/s
Hash#native-slice   : 10158179.7 i/s - 1.16x  (± 0.00) slower
Array#each          :  8680438.3 i/s - 1.36x  (± 0.00) slower
Array#each_w/_object:  8673237.2 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   188.000  i/100ms
         Hash#value?   567.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.813k (± 7.1%) i/s -      9.212k in   5.110124s
         Hash#value?      5.686k (± 0.3%) i/s -     28.917k in   5.085880s

Comparison:
         Hash#value?:     5685.8 i/s
Hash#values.include?:     1812.6 i/s - 3.14x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   198.239M i/100ms
                send   198.803M i/100ms
      method_missing   201.783M i/100ms
Calculating -------------------------------------
                call      1.995B (± 1.2%) i/s -     10.110B in   5.068918s
                send      1.989B (± 0.2%) i/s -     10.139B in   5.098069s
      method_missing      1.992B (± 0.6%) i/s -     10.089B in   5.064779s

Comparison:
                call: 1994826947.2 i/s
      method_missing: 1992094612.8 i/s - same-ish: difference falls within error
                send: 1988787744.7 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    13.089k i/100ms
      Symbol#to_proc    14.199k i/100ms
Calculating -------------------------------------
               Block    138.900k (± 7.5%) i/s -    693.717k in   5.044992s
      Symbol#to_proc    142.130k (± 3.7%) i/s -    709.950k in   5.001783s

Comparison:
      Symbol#to_proc:   142129.5 i/s
               Block:   138900.2 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   199.850M i/100ms
       block + yield   198.686M i/100ms
        unused block   199.438M i/100ms
               yield   199.824M i/100ms
Calculating -------------------------------------
          block.call      1.994B (± 0.9%) i/s -      9.992B in   5.011901s
       block + yield      1.990B (± 0.6%) i/s -     10.133B in   5.091367s
        unused block      1.992B (± 0.7%) i/s -      9.972B in   5.006206s
               yield      1.994B (± 0.5%) i/s -      9.991B in   5.011394s

Comparison:
          block.call: 1993919420.6 i/s
               yield: 1993755884.6 i/s - same-ish: difference falls within error
        unused block: 1992014753.4 i/s - same-ish: difference falls within error
       block + yield: 1990299447.5 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    13.231k i/100ms
      range#include?   343.000  i/100ms
       range#member?   631.000  i/100ms
       plain compare    19.867k i/100ms
Calculating -------------------------------------
        range#cover?    133.430k (±31.6%) i/s -    608.626k in   5.062131s
      range#include?      8.183k (±29.7%) i/s -     36.015k in   5.016095s
       range#member?      6.517k (±18.4%) i/s -     30.919k in   5.037479s
       plain compare    295.506k (±17.6%) i/s -      1.430M in   5.038597s

Comparison:
       plain compare:   295505.7 i/s
        range#cover?:   133429.8 i/s - 2.21x  (± 0.00) slower
      range#include?:     8182.5 i/s - 36.11x  (± 0.00) slower
       range#member?:     6516.5 i/s - 45.35x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    11.225M i/100ms
           String#=~     9.215M i/100ms
          Regexp#===     9.951M i/100ms
        String#match     9.569M i/100ms
Calculating -------------------------------------
       String#match?    113.001M (± 0.3%) i/s -    572.462M in   5.066041s
           String#=~     92.585M (± 0.7%) i/s -    469.963M in   5.076238s
          Regexp#===     99.525M (± 0.2%) i/s -    507.492M in   5.099149s
        String#match     95.804M (± 0.4%) i/s -    487.994M in   5.093756s

Comparison:
       String#match?: 113000685.7 i/s
          Regexp#===: 99525318.9 i/s - 1.14x  (± 0.00) slower
        String#match: 95804024.3 i/s - 1.18x  (± 0.00) slower
           String#=~: 92584866.4 i/s - 1.22x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.432M i/100ms
      String#casecmp     2.312M i/100ms
Calculating -------------------------------------
String#downcase + ==     14.469M (± 7.8%) i/s -     71.624M in   5.002821s
      String#casecmp     22.386M (± 7.6%) i/s -    110.985M in   5.007823s

Comparison:
      String#casecmp: 22385829.1 i/s
String#downcase + ==: 14469222.5 i/s - 1.55x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     5.993M i/100ms
       String#concat     6.194M i/100ms
       String#append     6.167M i/100ms
         "foo" "bar"   198.992M i/100ms
  "#{'foo'}#{'bar'}"   199.413M i/100ms
Calculating -------------------------------------
            String#+     61.338M (± 4.5%) i/s -    311.626M in   5.090690s
       String#concat     61.405M (± 2.8%) i/s -    309.716M in   5.047856s
       String#append     61.917M (± 3.7%) i/s -    314.534M in   5.087109s
         "foo" "bar"      1.983B (± 2.1%) i/s -      9.950B in   5.020774s
  "#{'foo'}#{'bar'}"      1.996B (± 0.5%) i/s -     10.170B in   5.094544s

Comparison:
  "#{'foo'}#{'bar'}": 1996321760.8 i/s
         "foo" "bar": 1982643127.7 i/s - same-ish: difference falls within error
       String#append: 61916666.4 i/s - 32.24x  (± 0.00) slower
       String#concat: 61405141.9 i/s - 32.51x  (± 0.00) slower
            String#+: 61337600.7 i/s - 32.55x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   198.929M i/100ms
          String#dup   198.620M i/100ms
Calculating -------------------------------------
           String#+@      1.994B (± 0.8%) i/s -     10.145B in   5.088877s
          String#dup      2.005B (± 1.0%) i/s -     10.130B in   5.051645s

Comparison:
          String#dup: 2005427055.8 i/s
           String#+@: 1993753788.4 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   619.022k i/100ms
       String#match?   956.881k i/100ms
    String#end_with?    11.884M i/100ms
Calculating -------------------------------------
           String#=~      8.077M (± 2.5%) i/s -     40.855M in   5.061786s
       String#match?      9.550M (± 1.0%) i/s -     47.844M in   5.010444s
    String#end_with?    118.946M (± 0.9%) i/s -    606.102M in   5.096020s

Comparison:
    String#end_with?: 118946319.4 i/s
       String#match?:  9549807.2 i/s - 12.46x  (± 0.00) slower
           String#=~:  8076797.7 i/s - 14.73x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    42.571k i/100ms
          String#sub   312.000k i/100ms
String#dup["string"]=
                         7.551M i/100ms
Calculating -------------------------------------
         String#gsub      3.714M (±12.9%) i/s -     18.050M in   5.004414s
          String#sub      4.187M (± 6.4%) i/s -     20.904M in   5.014004s
String#dup["string"]=
                         75.690M (± 0.9%) i/s -    385.116M in   5.088453s

Comparison:
String#dup["string"]=: 75689950.5 i/s
          String#sub:  4187190.7 i/s - 18.08x  (± 0.00) slower
         String#gsub:  3714355.7 i/s - 20.38x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    24.325k i/100ms
           String#tr    76.143k i/100ms
Calculating -------------------------------------
         String#gsub      1.622M (±14.4%) i/s -      7.760M in   5.000927s
           String#tr    771.440k (± 4.9%) i/s -      3.883M in   5.046404s

Comparison:
         String#gsub:  1621653.7 i/s
           String#tr:   771440.4 i/s - 2.10x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   198.979M i/100ms
         With Freeze   198.708M i/100ms
Calculating -------------------------------------
      Without Freeze      1.998B (± 0.9%) i/s -     10.148B in   5.078879s
         With Freeze      2.014B (± 1.2%) i/s -     10.134B in   5.032617s

Comparison:
         With Freeze: 2013995145.1 i/s
      Without Freeze: 1998214530.5 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     4.093k i/100ms
      String#squeeze    20.157k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     50.202k (± 8.8%) i/s -    249.673k in   5.042979s
      String#squeeze    209.361k (± 2.9%) i/s -      1.048M in   5.010977s

Comparison:
      String#squeeze:   209361.4 i/s
 String#gsub/regex+/:    50202.0 i/s - 4.17x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     2.501M i/100ms
       String#match?     3.928M i/100ms
  String#start_with?     8.903M i/100ms
Calculating -------------------------------------
           String#=~     25.634M (± 3.3%) i/s -    130.031M in   5.078544s
       String#match?     39.504M (± 1.1%) i/s -    200.341M in   5.072001s
  String#start_with?     89.487M (± 0.8%) i/s -    454.029M in   5.074050s

Comparison:
  String#start_with?: 89486749.2 i/s
       String#match?: 39504106.8 i/s - 2.27x  (± 0.00) slower
           String#=~: 25633863.6 i/s - 3.49x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    82.694k i/100ms
    String#[0, n] ==   185.534k i/100ms
   String#[RANGE] ==   242.056k i/100ms
   String#[0...n] ==   167.893k i/100ms
Calculating -------------------------------------
  String#start_with?      3.955M (± 0.4%) i/s -     19.847M in   5.018013s
    String#[0, n] ==      1.915M (± 4.2%) i/s -      9.648M in   5.047619s
   String#[RANGE] ==      2.644M (± 3.9%) i/s -     13.313M in   5.042832s
   String#[0...n] ==      1.714M (± 3.8%) i/s -      8.563M in   5.002186s

Comparison:
  String#start_with?:  3955127.7 i/s
   String#[RANGE] ==:  2644129.2 i/s - 1.50x  (± 0.00) slower
    String#[0, n] ==:  1914782.8 i/s - 2.07x  (± 0.00) slower
   String#[0...n] ==:  1714345.4 i/s - 2.31x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     7.485M i/100ms
 String#sub!'string'    79.697k i/100ms
String#gsub!'string'   319.175k i/100ms
  String#[/regexp/]=     1.248M i/100ms
 String#sub!/regexp/   438.221k i/100ms
String#gsub!/regexp/   330.440k i/100ms
Calculating -------------------------------------
  String#['string']=     75.781M (± 0.7%) i/s -    381.753M in   5.037811s
 String#sub!'string'      4.558M (±21.9%) i/s -     20.721M in   4.997912s
String#gsub!'string'      3.960M (± 4.3%) i/s -     19.789M in   5.007204s
  String#[/regexp/]=     13.118M (± 3.2%) i/s -     66.145M in   5.047438s
 String#sub!/regexp/      4.108M (± 8.4%) i/s -     20.596M in   5.073525s
String#gsub!/regexp/      3.811M (± 6.7%) i/s -     19.166M in   5.052333s

Comparison:
  String#['string']=: 75781065.4 i/s
  String#[/regexp/]=: 13118494.2 i/s - 5.78x  (± 0.00) slower
 String#sub!'string':  4557879.3 i/s - 16.63x  (± 0.00) slower
 String#sub!/regexp/:  4107584.3 i/s - 18.45x  (± 0.00) slower
String#gsub!'string':  3959552.1 i/s - 19.14x  (± 0.00) slower
String#gsub!/regexp/:  3810697.7 i/s - 19.89x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub    49.615k i/100ms
        String#chomp     3.793M i/100ms
String#delete_suffix     3.846M i/100ms
Calculating -------------------------------------
          String#sub     17.039M (± 8.1%) i/s -     83.849M in   4.997870s
        String#chomp     37.712M (± 0.4%) i/s -    189.665M in   5.029426s
String#delete_suffix     41.205M (± 3.3%) i/s -    207.682M in   5.045802s

Comparison:
String#delete_suffix: 41204710.9 i/s
        String#chomp: 37711560.3 i/s - 1.09x  (± 0.00) slower
          String#sub: 17038671.7 i/s - 2.42x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   199.095M i/100ms
          String#sub    81.506k i/100ms
Calculating -------------------------------------
String#delete_prefix      1.996B (± 1.1%) i/s -     10.154B in   5.088193s
          String#sub    105.061M (± 4.8%) i/s -    523.758M in   4.995549s

Comparison:
String#delete_prefix: 1995798498.2 i/s
          String#sub: 105060700.5 i/s - 19.00x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.023M i/100ms
    String#unpack[0]     1.168M i/100ms
Calculating -------------------------------------
      String#unpack1     11.866M (± 3.1%) i/s -     59.320M in   5.003948s
    String#unpack[0]     11.829M (± 2.9%) i/s -     59.557M in   5.038997s

Comparison:
      String#unpack1: 11866318.2 i/s
    String#unpack[0]: 11829287.3 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 23.1.0-dev-7c8d8d51, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    12.363k i/100ms
          Time.parse   114.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    284.096k (± 9.8%) i/s -      1.409M in   5.019262s
          Time.parse     10.623k (±28.6%) i/s -     42.294k in   4.998277s

Comparison:
        Time.iso8601:   284096.0 i/s
          Time.parse:    10623.2 i/s - 26.74x  (± 0.00) slower

