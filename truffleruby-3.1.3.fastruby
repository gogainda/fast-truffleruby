$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       238.290M i/100ms
Function with splat arguments
                       722.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          2.384B (± 0.5%) i/s -     12.153B in   5.097792s
Function with splat arguments
                          7.587k (± 7.2%) i/s -     38.266k in   5.085950s

Comparison:
Function with single Array argument: 2383988129.5 i/s
Function with splat arguments:     7587.1 i/s - 314217.36x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   238.247M i/100ms
Sequential Assignment
                       238.194M i/100ms
Calculating -------------------------------------
 Parallel Assignment      2.385B (± 0.3%) i/s -     12.151B in   5.094147s
Sequential Assignment
                          2.388B (± 0.2%) i/s -     12.148B in   5.087510s

Comparison:
Sequential Assignment: 2387796803.9 i/s
 Parallel Assignment: 2385239847.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   238.291M i/100ms
       attr_accessor   238.612M i/100ms
Calculating -------------------------------------
   getter_and_setter      2.386B (± 0.3%) i/s -     12.153B in   5.093438s
       attr_accessor      2.387B (± 0.3%) i/s -     12.169B in   5.097984s

Comparison:
       attr_accessor: 2387077419.8 i/s
   getter_and_setter: 2386005682.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     7.301k i/100ms
         respond_to?   238.318M i/100ms
Calculating -------------------------------------
      begin...rescue     50.205k (± 6.5%) i/s -    255.535k in   5.122250s
         respond_to?      2.388B (± 0.2%) i/s -     12.154B in   5.089041s

Comparison:
         respond_to?: 2388318640.0 i/s
      begin...rescue:    50205.3 i/s - 47571.01x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   238.285M i/100ms
             &method   238.151M i/100ms
Calculating -------------------------------------
              normal      2.386B (± 0.3%) i/s -     12.153B in   5.093016s
             &method      2.388B (± 0.2%) i/s -     12.146B in   5.086516s

Comparison:
             &method: 2387835337.1 i/s
              normal: 2386136389.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        95.000  i/100ms
       define_method   122.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.590k (±56.5%) i/s -      4.560k in   6.375200s
       define_method      3.986k (±49.0%) i/s -      7.564k in   6.808669s

Comparison:
       define_method:     3985.5 i/s
module_eval with string:     1589.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    75.773k i/100ms
       Kernel#format    68.862k i/100ms
            String#%    68.719k i/100ms
Calculating -------------------------------------
         Float#round    822.998k (± 2.6%) i/s -      4.168M in   5.067377s
       Kernel#format    697.342k (± 2.3%) i/s -      3.512M in   5.039056s
            String#%    693.761k (± 3.3%) i/s -      3.505M in   5.057816s

Comparison:
         Float#round:   822997.7 i/s
       Kernel#format:   697342.4 i/s - 1.18x  (± 0.00) slower
            String#%:   693761.0 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   238.353M i/100ms
          OpenStruct   238.329M i/100ms
Calculating -------------------------------------
                Hash      2.383B (± 0.7%) i/s -     11.918B in   5.000915s
          OpenStruct      2.382B (± 1.1%) i/s -     11.916B in   5.003433s

Comparison:
                Hash: 2383210332.4 i/s
          OpenStruct: 2381951094.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   237.657M i/100ms
          OpenStruct     2.572k i/100ms
Calculating -------------------------------------
                Hash      2.383B (± 0.4%) i/s -     12.120B in   5.087235s
          OpenStruct     27.446k (±11.0%) i/s -    136.316k in   5.068566s

Comparison:
                Hash: 2382558502.8 i/s
          OpenStruct:    27445.8 i/s - 86809.44x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   700.756k i/100ms
  ancestors.include?   134.081k i/100ms
Calculating -------------------------------------
  less than or equal      8.082M (± 5.0%) i/s -     40.644M in   5.041612s
  ancestors.include?      1.367M (± 2.5%) i/s -      6.838M in   5.004301s

Comparison:
  less than or equal:  8082228.9 i/s
  ancestors.include?:  1367357.8 i/s - 5.91x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     23.853  (± 0.0%) i/s -    120.000  in   5.030953s
         Kernel loop     23.863  (± 0.0%) i/s -    120.000  in   5.028728s

Comparison:
         Kernel loop:       23.9 i/s
          While Loop:       23.9 i/s - 1.00x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   238.557M i/100ms
         Array#first   238.230M i/100ms
Calculating -------------------------------------
           Array#[0]      2.385B (± 0.4%) i/s -     11.928B in   5.001595s
         Array#first      2.388B (± 0.2%) i/s -     12.150B in   5.088467s

Comparison:
         Array#first: 2387715837.7 i/s
           Array#[0]: 2384838982.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   238.156M i/100ms
          Array#last   238.486M i/100ms
Calculating -------------------------------------
          Array#[-1]      2.384B (± 0.4%) i/s -     12.146B in   5.093782s
          Array#last      2.387B (± 0.3%) i/s -     12.163B in   5.094772s

Comparison:
          Array#last: 2387330883.8 i/s
          Array#[-1]: 2384499971.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   525.410k i/100ms
Calculating -------------------------------------
                find      6.657  (±30.0%) i/s -     12.000  in   5.128329s
             bsearch      5.389M (± 4.0%) i/s -     27.321M in   5.078543s

Comparison:
             bsearch:  5388510.2 i/s
                find:        6.7 i/s - 809506.76x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.124  (± 0.0%) i/s -      1.000  in   8.081193s
        Array#insert      0.944  (± 0.0%) i/s -      5.000  in   5.296162s

Comparison:
        Array#insert:        0.9 i/s
       Array#unshift:        0.1 i/s - 7.63x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   238.244M i/100ms
          Array#size   238.114M i/100ms
         Array#count   238.918M i/100ms
Calculating -------------------------------------
        Array#length      2.387B (± 0.3%) i/s -     12.150B in   5.090442s
          Array#size      2.387B (± 0.2%) i/s -     12.144B in   5.086543s
         Array#count      2.388B (± 0.2%) i/s -     11.946B in   5.002541s

Comparison:
         Array#count: 2387972002.9 i/s
          Array#size: 2387453057.1 i/s - same-ish: difference falls within error
        Array#length: 2386937555.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    23.530k i/100ms
        Array#sample     2.813M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    248.997k (± 2.0%) i/s -      1.247M in   5.010641s
        Array#sample     28.738M (± 0.1%) i/s -    146.294M in   5.090629s

Comparison:
        Array#sample: 28737876.4 i/s
 Array#shuffle.first:   248997.5 i/s - 115.41x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   429.000  i/100ms
          Date.parse   355.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     34.707k (±39.6%) i/s -    127.842k in   5.144082s
          Date.parse     19.397k (±32.1%) i/s -     74.195k in   5.000556s

Comparison:
        Date.iso8601:    34707.2 i/s
          Date.parse:    19396.7 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   128.211k i/100ms
           Array#map   540.983k i/100ms
Calculating -------------------------------------
   Array#each + push      1.448M (± 4.4%) i/s -      7.308M in   5.055712s
           Array#map      5.348M (± 4.1%) i/s -     27.049M in   5.066653s

Comparison:
           Array#map:  5347941.8 i/s
   Array#each + push:  1448366.1 i/s - 3.69x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     9.789M i/100ms
               #each    45.628M i/100ms
Calculating -------------------------------------
            For loop     99.390M (± 0.4%) i/s -    499.247M in   5.023196s
               #each    459.332M (± 0.2%) i/s -      2.327B in   5.066089s

Comparison:
               #each: 459331740.9 i/s
            For loop: 99389966.4 i/s - 4.62x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   910.297k i/100ms
     each_with_index     1.267M i/100ms
Calculating -------------------------------------
          While Loop      9.153M (± 0.3%) i/s -     46.425M in   5.072215s
     each_with_index     12.848M (± 0.9%) i/s -     64.629M in   5.030579s

Comparison:
     each_with_index: 12848112.9 i/s
          While Loop:  9152900.7 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   145.756k i/100ms
      inject to_proc   147.162k i/100ms
        inject block   147.102k i/100ms
Calculating -------------------------------------
       inject symbol      1.470M (± 0.2%) i/s -      7.434M in   5.056563s
      inject to_proc      1.471M (± 0.1%) i/s -      7.358M in   5.002282s
        inject block      1.470M (± 0.1%) i/s -      7.355M in   5.002262s

Comparison:
      inject to_proc:  1470951.0 i/s
        inject block:  1470357.6 i/s - same-ish: difference falls within error
       inject symbol:  1470086.2 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    10.091k i/100ms
   Array#map.flatten    10.775k i/100ms
      Array#flat_map    29.751k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    108.878k (± 3.7%) i/s -    544.914k in   5.011869s
   Array#map.flatten    108.097k (± 3.4%) i/s -    549.525k in   5.089424s
      Array#flat_map    297.206k (± 2.7%) i/s -      1.488M in   5.008740s

Comparison:
      Array#flat_map:   297205.8 i/s
Array#map.flatten(1):   108878.5 i/s - 2.73x  (± 0.00) slower
   Array#map.flatten:   108097.1 i/s - 2.75x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   159.699k i/100ms
  Array#reverse_each     1.940M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.809M (± 7.4%) i/s -      9.103M in   5.082557s
  Array#reverse_each     19.391M (± 0.3%) i/s -     97.023M in   5.003642s

Comparison:
  Array#reverse_each: 19390571.8 i/s
  Array#reverse.each:  1809126.3 i/s - 10.72x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       516.394k i/100ms
   Enumerable#detect     4.035M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          5.601M (± 7.7%) i/s -    111.025M in  20.024657s
   Enumerable#detect     40.335M (± 0.1%) i/s -    806.956M in  20.006424s

Comparison:
   Enumerable#detect: 40334921.6 i/s
Enumerable#select.first:  5600626.6 i/s - 7.20x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       185.342k i/100ms
Enumerable#select.last
                       348.145k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.869M (± 3.9%) i/s -      9.452M in   5.065931s
Enumerable#select.last
                          3.662M (± 2.9%) i/s -     18.452M in   5.042689s

Comparison:
Enumerable#select.last:  3662325.7 i/s
Enumerable#reverse.detect:  1868661.6 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.444k i/100ms
  Enumerable#sort_by     2.298k i/100ms
     Enumerable#sort     3.322k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         22.673k (±26.7%) i/s -     97.760k in   5.055044s
  Enumerable#sort_by     22.687k (±25.2%) i/s -     98.814k in   5.002110s
     Enumerable#sort     34.943k (± 2.2%) i/s -    176.066k in   5.041388s

Comparison:
     Enumerable#sort:    34942.8 i/s
  Enumerable#sort_by:    22687.2 i/s - 1.54x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    22672.8 i/s - 1.54x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   497.332k i/100ms
Enumerable#sort_by...first
                         4.677k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      5.002M (± 0.2%) i/s -     25.364M in   5.070905s
Enumerable#sort_by...first
                         57.441k (± 3.1%) i/s -    289.974k in   5.053111s

Comparison:
   Enumerable#min_by:  5001879.0 i/s
Enumerable#sort_by...first:    57440.9 i/s - 87.08x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   164.886k i/100ms
            Hash#dup   189.325k i/100ms
Calculating -------------------------------------
              Hash[]      1.906M (± 7.2%) i/s -      9.563M in   5.063999s
            Hash#dup      1.900M (± 2.7%) i/s -      9.656M in   5.084981s

Comparison:
              Hash[]:  1906230.4 i/s
            Hash#dup:  1900230.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   238.101M i/100ms
  Hash#fetch, symbol   238.041M i/100ms
     Hash#[], string     2.391M i/100ms
  Hash#fetch, string     2.434M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      2.386B (± 0.3%) i/s -     12.143B in   5.088818s
  Hash#fetch, symbol      2.387B (± 0.3%) i/s -     12.140B in   5.085427s
     Hash#[], string    156.910M (± 0.5%) i/s -    786.517M in   5.012663s
  Hash#fetch, string    152.090M (± 0.8%) i/s -    761.904M in   5.009856s

Comparison:
  Hash#fetch, symbol: 2387248688.9 i/s
     Hash#[], symbol: 2386261284.5 i/s - same-ish: difference falls within error
     Hash#[], string: 156909560.4 i/s - 15.21x  (± 0.00) slower
  Hash#fetch, string: 152090006.5 i/s - 15.70x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    49.687M i/100ms
             Hash#[]    49.682M i/100ms
          Hash#[] ||    49.762M i/100ms
          Hash#[] &&    49.776M i/100ms
          Hash#fetch    49.779M i/100ms
 Hash#fetch fallback    49.770M i/100ms
Calculating -------------------------------------
            Hash#dig    497.294M (± 0.3%) i/s -      2.534B in   5.095653s
             Hash#[]    497.681M (± 0.2%) i/s -      2.534B in   5.091188s
          Hash#[] ||    497.602M (± 0.2%) i/s -      2.488B in   5.000227s
          Hash#[] &&    497.491M (± 0.2%) i/s -      2.489B in   5.002724s
          Hash#fetch    497.746M (± 0.1%) i/s -      2.489B in   5.000424s
 Hash#fetch fallback    497.545M (± 0.2%) i/s -      2.488B in   5.001532s

Comparison:
          Hash#fetch: 497746334.7 i/s
             Hash#[]: 497680843.6 i/s - same-ish: difference falls within error
          Hash#[] ||: 497601937.5 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 497545136.5 i/s - same-ish: difference falls within error
          Hash#[] &&: 497491359.3 i/s - same-ish: difference falls within error
            Hash#dig: 497293995.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   238.134M i/100ms
  Hash#fetch + block   238.613M i/100ms
    Hash#fetch + arg   238.297M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      2.386B (± 0.3%) i/s -     12.145B in   5.090049s
  Hash#fetch + block      2.387B (± 0.3%) i/s -     12.169B in   5.098349s
    Hash#fetch + arg      2.388B (± 0.2%) i/s -     12.153B in   5.090171s

Comparison:
    Hash#fetch + arg: 2387584208.2 i/s
  Hash#fetch + block: 2386922079.2 i/s - same-ish: difference falls within error
  Hash#fetch + const: 2386017226.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    14.966k i/100ms
         sort + to_h     2.038k i/100ms
Calculating -------------------------------------
      sort_by + to_h    237.178k (± 4.8%) i/s -      1.182M in   4.996543s
         sort + to_h     85.997k (±11.2%) i/s -    419.828k in   5.014640s

Comparison:
      sort_by + to_h:   237178.1 i/s
         sort + to_h:    85996.8 i/s - 2.76x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   124.008k i/100ms
       Hash#each_key   147.576k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.326M (±12.1%) i/s -      6.448M in   5.018907s
       Hash#each_key      1.486M (± 3.6%) i/s -      7.526M in   5.071691s

Comparison:
       Hash#each_key:  1485860.9 i/s
      Hash#keys.each:  1325984.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   248.000  i/100ms
           Hash#key?     2.363M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      2.330k (±11.2%) i/s -     11.656k in   5.091998s
           Hash#key?     23.335M (± 0.1%) i/s -    118.150M in   5.063161s

Comparison:
           Hash#key?: 23335351.2 i/s
  Hash#keys.include?:     2330.5 i/s - 10013.02x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    20.331k i/100ms
            Hash#[]=    21.071k i/100ms
Calculating -------------------------------------
         Hash#merge!    206.051k (± 3.3%) i/s -      1.037M in   5.037650s
            Hash#[]=    206.939k (± 5.0%) i/s -      1.032M in   5.003470s

Comparison:
            Hash#[]=:   206938.9 i/s
         Hash#merge!:   206050.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         9.985k i/100ms
      Hash#merge({})     7.049k i/100ms
 Hash#dup#merge!({})    12.281k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        114.549k (± 3.4%) i/s -    579.130k in   5.061554s
      Hash#merge({})     69.802k (± 2.3%) i/s -    352.450k in   5.051848s
 Hash#dup#merge!({})    122.142k (± 4.0%) i/s -    614.050k in   5.035226s

Comparison:
 Hash#dup#merge!({}):   122142.2 i/s
{}#merge!(Hash) do end:   114548.7 i/s - same-ish: difference falls within error
      Hash#merge({}):    69802.2 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   238.330M i/100ms
          Hash#merge   238.990M i/100ms
Calculating -------------------------------------
        Hash#**other      2.387B (± 0.2%) i/s -     12.155B in   5.092879s
          Hash#merge      2.386B (± 0.3%) i/s -     11.950B in   5.007734s

Comparison:
        Hash#**other: 2386648580.8 i/s
          Hash#merge: 2386234181.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   251.000  i/100ms
         Hash#merge!    21.061k i/100ms
Calculating -------------------------------------
          Hash#merge      2.845k (± 7.5%) i/s -     14.307k in   5.078822s
         Hash#merge!    209.984k (± 3.5%) i/s -      1.053M in   5.020928s

Comparison:
         Hash#merge!:   209984.2 i/s
          Hash#merge:     2845.0 i/s - 73.81x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.105M i/100ms
Array#each             945.378k i/100ms
Array#each_w/_object   939.132k i/100ms
Hash#select-include      1.474M i/100ms
Calculating -------------------------------------
Hash#native-slice        11.585M (± 4.2%) i/s -     58.590M in   5.066602s
Array#each                9.591M (± 2.6%) i/s -     48.214M in   5.030345s
Array#each_w/_object      9.507M (± 4.4%) i/s -     47.896M in   5.047804s
Hash#select-include      15.037M (± 3.2%) i/s -     75.169M in   5.004075s

Comparison:
Hash#select-include : 15037341.6 i/s
Hash#native-slice   : 11584536.8 i/s - 1.30x  (± 0.00) slower
Array#each          :  9591403.5 i/s - 1.57x  (± 0.00) slower
Array#each_w/_object:  9506764.4 i/s - 1.58x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   156.000  i/100ms
         Hash#value?   392.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.867k (±11.2%) i/s -      9.204k in   5.025910s
         Hash#value?      3.975k (± 0.3%) i/s -     19.992k in   5.029270s

Comparison:
         Hash#value?:     3975.2 i/s
Hash#values.include?:     1867.4 i/s - 2.13x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   238.120M i/100ms
                send   237.745M i/100ms
      method_missing   238.793M i/100ms
Calculating -------------------------------------
                call      2.385B (± 0.3%) i/s -     12.144B in   5.090963s
                send      2.387B (± 0.3%) i/s -     12.125B in   5.080346s
      method_missing      2.387B (± 0.3%) i/s -     11.940B in   5.001858s

Comparison:
      method_missing: 2387067061.5 i/s
                send: 2386669781.9 i/s - same-ish: difference falls within error
                call: 2385449220.2 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    13.006k i/100ms
      Symbol#to_proc    14.039k i/100ms
Calculating -------------------------------------
               Block    136.849k (± 7.0%) i/s -    689.318k in   5.079993s
      Symbol#to_proc    137.212k (± 6.9%) i/s -    687.911k in   5.053266s

Comparison:
      Symbol#to_proc:   137211.9 i/s
               Block:   136848.9 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   237.858M i/100ms
       block + yield   238.159M i/100ms
        unused block   238.948M i/100ms
               yield   239.031M i/100ms
Calculating -------------------------------------
          block.call      2.385B (± 0.4%) i/s -     12.131B in   5.085416s
       block + yield      2.388B (± 0.2%) i/s -     12.146B in   5.086390s
        unused block      2.388B (± 0.2%) i/s -     11.947B in   5.002691s
               yield      2.388B (± 0.3%) i/s -     11.952B in   5.005539s

Comparison:
        unused block: 2388199927.1 i/s
       block + yield: 2387978145.3 i/s - same-ish: difference falls within error
               yield: 2387686818.0 i/s - same-ish: difference falls within error
          block.call: 2385435134.0 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    16.450k i/100ms
      range#include?   352.000  i/100ms
       range#member?   737.000  i/100ms
       plain compare    26.507k i/100ms
Calculating -------------------------------------
        range#cover?    156.887k (±24.8%) i/s -    723.800k in   5.007249s
      range#include?      8.133k (±32.1%) i/s -     35.904k in   5.027009s
       range#member?      7.124k (±23.3%) i/s -     33.902k in   5.033882s
       plain compare    297.372k (± 6.8%) i/s -      1.484M in   5.023671s

Comparison:
       plain compare:   297372.1 i/s
        range#cover?:   156887.2 i/s - 1.90x  (± 0.00) slower
      range#include?:     8133.0 i/s - 36.56x  (± 0.00) slower
       range#member?:     7123.7 i/s - 41.74x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    13.357M i/100ms
           String#=~    11.943M i/100ms
          Regexp#===    11.948M i/100ms
        String#match    11.486M i/100ms
Calculating -------------------------------------
       String#match?    135.673M (± 0.2%) i/s -    681.219M in   5.021047s
           String#=~    119.455M (± 0.1%) i/s -    609.069M in   5.098752s
          Regexp#===    119.379M (± 0.4%) i/s -    597.396M in   5.004258s
        String#match    114.738M (± 0.6%) i/s -    574.319M in   5.005714s

Comparison:
       String#match?: 135673328.2 i/s
           String#=~: 119454672.2 i/s - 1.14x  (± 0.00) slower
          Regexp#===: 119379483.3 i/s - 1.14x  (± 0.00) slower
        String#match: 114737554.5 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.444M i/100ms
      String#casecmp     2.361M i/100ms
Calculating -------------------------------------
String#downcase + ==     14.497M (± 7.2%) i/s -     72.183M in   5.023402s
      String#casecmp     23.548M (± 6.9%) i/s -    118.055M in   5.054575s

Comparison:
      String#casecmp: 23547798.0 i/s
String#downcase + ==: 14496929.6 i/s - 1.62x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     5.967M i/100ms
       String#concat     7.177M i/100ms
       String#append     6.925M i/100ms
         "foo" "bar"   238.918M i/100ms
  "#{'foo'}#{'bar'}"   238.873M i/100ms
Calculating -------------------------------------
            String#+     73.093M (± 3.4%) i/s -    369.961M in   5.067552s
       String#concat     72.187M (± 4.2%) i/s -    366.045M in   5.079964s
       String#append     71.244M (± 2.6%) i/s -    360.108M in   5.058071s
         "foo" "bar"      2.388B (± 0.3%) i/s -     11.946B in   5.003389s
  "#{'foo'}#{'bar'}"      2.388B (± 0.2%) i/s -     11.944B in   5.001099s

Comparison:
  "#{'foo'}#{'bar'}": 2388218448.7 i/s
         "foo" "bar": 2387573417.2 i/s - same-ish: difference falls within error
            String#+: 73092638.9 i/s - 32.67x  (± 0.00) slower
       String#concat: 72187383.7 i/s - 33.08x  (± 0.00) slower
       String#append: 71244137.5 i/s - 33.52x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   238.546M i/100ms
          String#dup   238.240M i/100ms
Calculating -------------------------------------
           String#+@      2.384B (± 0.4%) i/s -     11.927B in   5.002675s
          String#dup      2.387B (± 0.3%) i/s -     12.150B in   5.090108s

Comparison:
          String#dup: 2387043571.2 i/s
           String#+@: 2384223288.4 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   905.496k i/100ms
       String#match?   884.920k i/100ms
    String#end_with?    13.268M i/100ms
Calculating -------------------------------------
           String#=~      9.544M (± 2.8%) i/s -     47.991M in   5.032473s
       String#match?     11.064M (± 0.1%) i/s -     55.750M in   5.038792s
    String#end_with?    132.534M (± 0.3%) i/s -    663.420M in   5.005691s

Comparison:
    String#end_with?: 132534409.6 i/s
       String#match?: 11064155.0 i/s - 11.98x  (± 0.00) slower
           String#=~:  9544076.5 i/s - 13.89x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    44.929k i/100ms
          String#sub   315.301k i/100ms
String#dup["string"]=
                         9.047M i/100ms
Calculating -------------------------------------
         String#gsub      3.651M (±12.7%) i/s -     17.657M in   5.011979s
          String#sub      4.200M (± 8.7%) i/s -     20.810M in   5.015815s
String#dup["string"]=
                         90.495M (± 0.1%) i/s -    461.380M in   5.098415s

Comparison:
String#dup["string"]=: 90494910.5 i/s
          String#sub:  4200240.0 i/s - 21.55x  (± 0.00) slower
         String#gsub:  3650665.3 i/s - 24.79x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    42.181k i/100ms
           String#tr    78.173k i/100ms
Calculating -------------------------------------
         String#gsub      1.683M (±11.3%) i/s -      8.225M in   5.008285s
           String#tr    804.841k (± 4.0%) i/s -      4.065M in   5.058727s

Comparison:
         String#gsub:  1683400.8 i/s
           String#tr:   804840.8 i/s - 2.09x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   238.075M i/100ms
         With Freeze   238.653M i/100ms
Calculating -------------------------------------
      Without Freeze      2.385B (± 0.3%) i/s -     12.142B in   5.089926s
         With Freeze      2.387B (± 0.3%) i/s -     12.171B in   5.098995s

Comparison:
         With Freeze: 2387014371.0 i/s
      Without Freeze: 2385483470.8 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     4.187k i/100ms
      String#squeeze    26.487k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     48.745k (± 7.7%) i/s -    242.846k in   5.037334s
      String#squeeze    263.996k (± 2.5%) i/s -      1.324M in   5.019930s

Comparison:
      String#squeeze:   263996.2 i/s
 String#gsub/regex+/:    48745.1 i/s - 5.42x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     2.907M i/100ms
       String#match?     4.709M i/100ms
  String#start_with?    10.665M i/100ms
Calculating -------------------------------------
           String#=~     29.340M (± 3.8%) i/s -    148.274M in   5.061523s
       String#match?     46.810M (± 0.8%) i/s -    235.447M in   5.030179s
  String#start_with?    106.568M (± 0.3%) i/s -    533.272M in   5.004070s

Comparison:
  String#start_with?: 106568258.6 i/s
       String#match?: 46810057.1 i/s - 2.28x  (± 0.00) slower
           String#=~: 29340131.5 i/s - 3.63x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    98.838k i/100ms
    String#[0, n] ==   186.540k i/100ms
   String#[RANGE] ==   299.700k i/100ms
   String#[0...n] ==   190.243k i/100ms
Calculating -------------------------------------
  String#start_with?      4.742M (± 0.1%) i/s -     23.721M in   5.002650s
    String#[0, n] ==      2.085M (± 3.1%) i/s -     10.446M in   5.016363s
   String#[RANGE] ==      2.990M (± 3.9%) i/s -     14.985M in   5.018525s
   String#[0...n] ==      1.895M (± 2.8%) i/s -      9.512M in   5.023031s

Comparison:
  String#start_with?:  4741718.6 i/s
   String#[RANGE] ==:  2990427.0 i/s - 1.59x  (± 0.00) slower
    String#[0, n] ==:  2084588.9 i/s - 2.27x  (± 0.00) slower
   String#[0...n] ==:  1895181.8 i/s - 2.50x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     9.045M i/100ms
 String#sub!'string'    87.124k i/100ms
String#gsub!'string'   318.473k i/100ms
  String#[/regexp/]=     1.297M i/100ms
 String#sub!/regexp/   456.413k i/100ms
String#gsub!/regexp/   342.716k i/100ms
Calculating -------------------------------------
  String#['string']=     90.487M (± 0.1%) i/s -    461.277M in   5.097717s
 String#sub!'string'      4.477M (±19.8%) i/s -     20.910M in   5.010697s
String#gsub!'string'      4.194M (± 6.0%) i/s -     21.019M in   5.033374s
  String#[/regexp/]=     13.409M (± 3.6%) i/s -     67.445M in   5.036657s
 String#sub!/regexp/      4.325M (± 5.2%) i/s -     21.908M in   5.079266s
String#gsub!/regexp/      4.036M (± 6.1%) i/s -     20.220M in   5.030348s

Comparison:
  String#['string']=: 90486996.5 i/s
  String#[/regexp/]=: 13409424.6 i/s - 6.75x  (± 0.00) slower
 String#sub!'string':  4476514.3 i/s - 20.21x  (± 0.00) slower
 String#sub!/regexp/:  4324819.8 i/s - 20.92x  (± 0.00) slower
String#gsub!'string':  4193720.1 i/s - 21.58x  (± 0.00) slower
String#gsub!/regexp/:  4035601.5 i/s - 22.42x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub    81.046k i/100ms
        String#chomp     4.367M i/100ms
String#delete_suffix     3.617M i/100ms
Calculating -------------------------------------
          String#sub     18.254M (± 7.6%) i/s -     90.123M in   4.997107s
        String#chomp     43.438M (± 0.5%) i/s -    218.332M in   5.026396s
String#delete_suffix     38.383M (± 2.9%) i/s -    195.336M in   5.093572s

Comparison:
        String#chomp: 43438254.6 i/s
String#delete_suffix: 38383216.0 i/s - 1.13x  (± 0.00) slower
          String#sub: 18253661.2 i/s - 2.38x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   238.303M i/100ms
          String#sub    97.818k i/100ms
Calculating -------------------------------------
String#delete_prefix      2.386B (± 0.3%) i/s -     12.153B in   5.093903s
          String#sub    122.478M (± 1.4%) i/s -    611.754M in   4.995745s

Comparison:
String#delete_prefix: 2385902173.5 i/s
          String#sub: 122478184.1 i/s - 19.48x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.145M i/100ms
    String#unpack[0]     1.113M i/100ms
Calculating -------------------------------------
      String#unpack1     13.159M (± 3.7%) i/s -     66.383M in   5.051533s
    String#unpack[0]     11.169M (± 2.1%) i/s -     56.755M in   5.084028s

Comparison:
      String#unpack1: 13159189.6 i/s
    String#unpack[0]: 11168549.9 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 23.1.0-dev-6f5a2422, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    12.483k i/100ms
          Time.parse   175.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    234.637k (±12.1%) i/s -      1.148M in   5.027029s
          Time.parse     11.287k (±34.7%) i/s -     42.700k in   5.000684s

Comparison:
        Time.iso8601:   234637.2 i/s
          Time.parse:    11287.0 i/s - 20.79x  (± 0.00) slower

