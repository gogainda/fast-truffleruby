$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       238.536M i/100ms
Function with splat arguments
                       762.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          2.386B (± 0.3%) i/s -     12.165B in   5.098002s
Function with splat arguments
                          7.755k (± 6.6%) i/s -     38.862k in   5.044544s

Comparison:
Function with single Array argument: 2386314645.5 i/s
Function with splat arguments:     7754.8 i/s - 307722.85x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   238.580M i/100ms
Sequential Assignment
                       238.284M i/100ms
Calculating -------------------------------------
 Parallel Assignment      2.385B (± 0.3%) i/s -     11.929B in   5.001344s
Sequential Assignment
                          2.388B (± 0.2%) i/s -     12.152B in   5.089157s

Comparison:
Sequential Assignment: 2387925025.5 i/s
 Parallel Assignment: 2385181955.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   238.659M i/100ms
       attr_accessor   238.202M i/100ms
Calculating -------------------------------------
   getter_and_setter      2.386B (± 0.3%) i/s -     11.933B in   5.000915s
       attr_accessor      2.387B (± 0.4%) i/s -     12.148B in   5.088472s

Comparison:
       attr_accessor: 2387456926.0 i/s
   getter_and_setter: 2386176229.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     7.460k i/100ms
         respond_to?   238.176M i/100ms
Calculating -------------------------------------
      begin...rescue     51.836k (± 5.7%) i/s -    261.100k in   5.060378s
         respond_to?      2.387B (± 0.4%) i/s -     12.147B in   5.089780s

Comparison:
         respond_to?: 2386586419.7 i/s
      begin...rescue:    51835.6 i/s - 46041.41x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   238.464M i/100ms
             &method   238.348M i/100ms
Calculating -------------------------------------
              normal      2.383B (± 0.4%) i/s -     11.923B in   5.002515s
             &method      2.388B (± 0.3%) i/s -     12.156B in   5.091207s

Comparison:
             &method: 2387616871.7 i/s
              normal: 2383480655.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        98.000  i/100ms
       define_method   123.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.597k (±52.4%) i/s -      4.802k in   5.039723s
       define_method      3.792k (±57.8%) i/s -      6.273k in   6.157331s

Comparison:
       define_method:     3792.3 i/s
module_eval with string:     1596.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    75.937k i/100ms
       Kernel#format    67.602k i/100ms
            String#%    67.533k i/100ms
Calculating -------------------------------------
         Float#round    822.448k (± 2.3%) i/s -      4.177M in   5.081025s
       Kernel#format    684.234k (± 2.1%) i/s -      3.448M in   5.041026s
            String#%    678.910k (± 2.1%) i/s -      3.444M in   5.075383s

Comparison:
         Float#round:   822448.2 i/s
       Kernel#format:   684234.1 i/s - 1.20x  (± 0.00) slower
            String#%:   678910.1 i/s - 1.21x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   238.668M i/100ms
          OpenStruct   238.875M i/100ms
Calculating -------------------------------------
                Hash      2.385B (± 0.4%) i/s -     11.933B in   5.003652s
          OpenStruct      2.389B (± 0.2%) i/s -     11.944B in   5.000056s

Comparison:
          OpenStruct: 2388738905.3 i/s
                Hash: 2384979651.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   238.679M i/100ms
          OpenStruct     2.549k i/100ms
Calculating -------------------------------------
                Hash      2.383B (± 0.4%) i/s -     11.934B in   5.007569s
          OpenStruct     26.893k (±10.2%) i/s -    132.548k in   5.008207s

Comparison:
                Hash: 2383211969.6 i/s
          OpenStruct:    26892.5 i/s - 88619.88x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   667.951k i/100ms
  ancestors.include?   129.352k i/100ms
Calculating -------------------------------------
  less than or equal      8.206M (± 4.8%) i/s -     41.413M in   5.058343s
  ancestors.include?      1.401M (± 2.4%) i/s -      7.114M in   5.081838s

Comparison:
  less than or equal:  8206369.3 i/s
  ancestors.include?:  1400809.0 i/s - 5.86x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     23.861  (± 0.0%) i/s -    120.000  in   5.029292s
         Kernel loop     23.882  (± 0.0%) i/s -    120.000  in   5.024661s

Comparison:
         Kernel loop:       23.9 i/s
          While Loop:       23.9 i/s - 1.00x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   237.926M i/100ms
         Array#first   238.591M i/100ms
Calculating -------------------------------------
           Array#[0]      2.386B (± 0.3%) i/s -     12.134B in   5.084907s
         Array#first      2.386B (± 0.5%) i/s -     12.168B in   5.099052s

Comparison:
         Array#first: 2386424377.8 i/s
           Array#[0]: 2386339135.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   238.505M i/100ms
          Array#last   238.703M i/100ms
Calculating -------------------------------------
          Array#[-1]      2.386B (± 0.3%) i/s -     12.164B in   5.098580s
          Array#last      2.389B (± 0.2%) i/s -     12.174B in   5.096596s

Comparison:
          Array#last: 2388635644.7 i/s
          Array#[-1]: 2385736971.7 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   529.345k i/100ms
Calculating -------------------------------------
                find      6.530  (±30.6%) i/s -     12.000  in   5.026339s
             bsearch      5.419M (± 3.4%) i/s -     27.526M in   5.085660s

Comparison:
             bsearch:  5418732.0 i/s
                find:        6.5 i/s - 829807.65x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.124  (± 0.0%) i/s -      1.000  in   8.063681s
        Array#insert      0.945  (± 0.0%) i/s -      5.000  in   5.292644s

Comparison:
        Array#insert:        0.9 i/s
       Array#unshift:        0.1 i/s - 7.62x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   238.521M i/100ms
          Array#size   238.659M i/100ms
         Array#count   239.053M i/100ms
Calculating -------------------------------------
        Array#length      2.387B (± 0.3%) i/s -     12.165B in   5.097212s
          Array#size      2.387B (± 0.3%) i/s -     12.172B in   5.098285s
         Array#count      2.385B (± 0.7%) i/s -     11.953B in   5.011758s

Comparison:
          Array#size: 2387412499.8 i/s
        Array#length: 2386533834.9 i/s - same-ish: difference falls within error
         Array#count: 2385036009.8 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    24.983k i/100ms
        Array#sample     2.861M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    257.931k (± 2.1%) i/s -      1.299M in   5.039056s
        Array#sample     29.473M (± 0.1%) i/s -    148.775M in   5.047788s

Comparison:
        Array#sample: 29473322.3 i/s
 Array#shuffle.first:   257931.3 i/s - 114.27x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   416.000  i/100ms
          Date.parse   392.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     36.755k (±31.8%) i/s -    134.784k in   4.988534s
          Date.parse     13.589k (±22.7%) i/s -     58.408k in   5.010401s

Comparison:
        Date.iso8601:    36754.9 i/s
          Date.parse:    13588.7 i/s - 2.70x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   134.759k i/100ms
           Array#map   514.125k i/100ms
Calculating -------------------------------------
   Array#each + push      1.499M (± 4.0%) i/s -      7.547M in   5.041906s
           Array#map      5.317M (± 5.2%) i/s -     26.735M in   5.042488s

Comparison:
           Array#map:  5316609.6 i/s
   Array#each + push:  1499228.5 i/s - 3.55x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     9.825M i/100ms
               #each    45.957M i/100ms
Calculating -------------------------------------
            For loop     99.387M (± 0.3%) i/s -    501.096M in   5.041921s
               #each    459.220M (± 0.4%) i/s -      2.298B in   5.003865s

Comparison:
               #each: 459220270.0 i/s
            For loop: 99387079.1 i/s - 4.62x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   910.914k i/100ms
     each_with_index     1.267M i/100ms
Calculating -------------------------------------
          While Loop      9.154M (± 0.2%) i/s -     46.457M in   5.075023s
     each_with_index     12.724M (± 0.1%) i/s -     64.636M in   5.079671s

Comparison:
     each_with_index: 12724435.0 i/s
          While Loop:  9153999.0 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   145.821k i/100ms
      inject to_proc   147.172k i/100ms
        inject block   147.143k i/100ms
Calculating -------------------------------------
       inject symbol      1.471M (± 0.2%) i/s -      7.437M in   5.056318s
      inject to_proc      1.471M (± 0.1%) i/s -      7.359M in   5.001288s
        inject block      1.471M (± 0.1%) i/s -      7.357M in   5.001804s

Comparison:
      inject to_proc:  1471343.4 i/s
        inject block:  1470902.8 i/s - same-ish: difference falls within error
       inject symbol:  1470814.3 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     9.274k i/100ms
   Array#map.flatten    10.463k i/100ms
      Array#flat_map    30.467k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    107.244k (± 3.3%) i/s -    537.892k in   5.021277s
   Array#map.flatten    107.842k (± 3.7%) i/s -    544.076k in   5.051949s
      Array#flat_map    304.708k (± 2.5%) i/s -      1.523M in   5.002623s

Comparison:
      Array#flat_map:   304708.5 i/s
   Array#map.flatten:   107842.3 i/s - 2.83x  (± 0.00) slower
Array#map.flatten(1):   107244.0 i/s - 2.84x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   173.408k i/100ms
  Array#reverse_each     1.930M i/100ms
Calculating -------------------------------------
  Array#reverse.each      2.001M (± 3.1%) i/s -     10.058M in   5.031863s
  Array#reverse_each     19.436M (± 0.2%) i/s -     98.409M in   5.063174s

Comparison:
  Array#reverse_each: 19436271.4 i/s
  Array#reverse.each:  2000697.2 i/s - 9.71x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       544.958k i/100ms
   Enumerable#detect     3.733M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          5.848M (± 6.4%) i/s -    116.621M in  20.062241s
   Enumerable#detect     37.334M (± 0.1%) i/s -    746.688M in  20.000037s

Comparison:
   Enumerable#detect: 37334349.7 i/s
Enumerable#select.first:  5848366.5 i/s - 6.38x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       203.812k i/100ms
Enumerable#select.last
                       370.961k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.094M (± 3.0%) i/s -     10.598M in   5.065622s
Enumerable#select.last
                          3.730M (± 2.2%) i/s -     18.919M in   5.074839s

Comparison:
Enumerable#select.last:  3729866.5 i/s
Enumerable#reverse.detect:  2094101.6 i/s - 1.78x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.604k i/100ms
  Enumerable#sort_by     2.646k i/100ms
     Enumerable#sort   137.000  i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         26.887k (± 9.9%) i/s -    132.804k in   5.017811s
  Enumerable#sort_by     26.639k (±13.2%) i/s -    129.654k in   5.066166s
     Enumerable#sort     37.651k (± 2.9%) i/s -    187.827k in   5.000631s

Comparison:
     Enumerable#sort:    37650.8 i/s
Enumerable#sort_by (Symbol#to_proc):    26886.5 i/s - 1.40x  (± 0.00) slower
  Enumerable#sort_by:    26639.3 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   520.531k i/100ms
Enumerable#sort_by...first
                         5.360k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      5.206M (± 1.3%) i/s -     26.027M in   5.000206s
Enumerable#sort_by...first
                         59.330k (± 2.4%) i/s -    300.160k in   5.062260s

Comparison:
   Enumerable#min_by:  5205982.2 i/s
Enumerable#sort_by...first:    59330.0 i/s - 87.75x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   166.346k i/100ms
            Hash#dup   181.867k i/100ms
Calculating -------------------------------------
              Hash[]      1.940M (± 6.7%) i/s -      9.648M in   5.011585s
            Hash#dup      1.922M (± 3.6%) i/s -      9.639M in   5.020825s

Comparison:
              Hash[]:  1939769.4 i/s
            Hash#dup:  1922303.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   238.271M i/100ms
  Hash#fetch, symbol   238.300M i/100ms
     Hash#[], string     2.494M i/100ms
  Hash#fetch, string     2.479M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      2.385B (± 0.5%) i/s -     12.152B in   5.094346s
  Hash#fetch, symbol      2.389B (± 0.2%) i/s -     12.153B in   5.088220s
     Hash#[], string    156.979M (± 0.6%) i/s -    785.708M in   5.005338s
  Hash#fetch, string    165.833M (± 0.5%) i/s -    830.554M in   5.008490s

Comparison:
  Hash#fetch, symbol: 2388523661.8 i/s
     Hash#[], symbol: 2385407044.7 i/s - same-ish: difference falls within error
  Hash#fetch, string: 165832971.5 i/s - 14.40x  (± 0.00) slower
     Hash#[], string: 156979374.9 i/s - 15.22x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    49.694M i/100ms
             Hash#[]    49.797M i/100ms
          Hash#[] ||    49.725M i/100ms
          Hash#[] &&    49.772M i/100ms
          Hash#fetch    49.770M i/100ms
 Hash#fetch fallback    49.760M i/100ms
Calculating -------------------------------------
            Hash#dig    496.695M (± 0.4%) i/s -      2.485B in   5.002597s
             Hash#[]    497.225M (± 0.2%) i/s -      2.490B in   5.007534s
          Hash#[] ||    497.298M (± 0.2%) i/s -      2.536B in   5.099529s
          Hash#[] &&    497.205M (± 0.2%) i/s -      2.489B in   5.005169s
          Hash#fetch    497.351M (± 0.2%) i/s -      2.488B in   5.003521s
 Hash#fetch fallback    497.355M (± 0.3%) i/s -      2.488B in   5.002517s

Comparison:
 Hash#fetch fallback: 497355083.9 i/s
          Hash#fetch: 497351264.4 i/s - same-ish: difference falls within error
          Hash#[] ||: 497297883.0 i/s - same-ish: difference falls within error
             Hash#[]: 497224763.7 i/s - same-ish: difference falls within error
          Hash#[] &&: 497204768.2 i/s - same-ish: difference falls within error
            Hash#dig: 496694701.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   238.271M i/100ms
  Hash#fetch + block   238.496M i/100ms
    Hash#fetch + arg   238.814M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      2.384B (± 0.3%) i/s -     12.152B in   5.096448s
  Hash#fetch + block      2.387B (± 0.2%) i/s -     12.163B in   5.095109s
    Hash#fetch + arg      2.385B (± 0.4%) i/s -     11.941B in   5.005713s

Comparison:
  Hash#fetch + block: 2387263048.4 i/s
    Hash#fetch + arg: 2385450511.2 i/s - same-ish: difference falls within error
  Hash#fetch + const: 2384402535.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    16.318k i/100ms
         sort + to_h     7.328k i/100ms
Calculating -------------------------------------
      sort_by + to_h    261.071k (± 5.2%) i/s -      1.305M in   5.014869s
         sort + to_h     69.198k (± 2.5%) i/s -    351.744k in   5.086335s

Comparison:
      sort_by + to_h:   261070.9 i/s
         sort + to_h:    69198.2 i/s - 3.77x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   131.694k i/100ms
       Hash#each_key   157.673k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.386M (±10.4%) i/s -      6.848M in   5.064180s
       Hash#each_key      1.575M (± 2.7%) i/s -      7.884M in   5.008834s

Comparison:
       Hash#each_key:  1575104.3 i/s
      Hash#keys.each:  1386017.0 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   200.000  i/100ms
           Hash#key?     2.371M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      2.090k (±11.4%) i/s -     10.400k in   5.065708s
           Hash#key?     23.736M (± 0.1%) i/s -    120.903M in   5.093628s

Comparison:
           Hash#key?: 23736094.8 i/s
  Hash#keys.include?:     2089.8 i/s - 11357.85x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    14.600k i/100ms
            Hash#[]=    20.979k i/100ms
Calculating -------------------------------------
         Hash#merge!    209.545k (± 4.2%) i/s -      1.051M in   5.025526s
            Hash#[]=    212.226k (± 2.5%) i/s -      1.070M in   5.044622s

Comparison:
            Hash#[]=:   212226.3 i/s
         Hash#merge!:   209545.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        10.760k i/100ms
      Hash#merge({})     7.097k i/100ms
 Hash#dup#merge!({})    12.561k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        116.633k (± 2.6%) i/s -    591.800k in   5.077532s
      Hash#merge({})     72.118k (± 3.4%) i/s -    361.947k in   5.024624s
 Hash#dup#merge!({})    124.790k (± 2.0%) i/s -    628.050k in   5.034797s

Comparison:
 Hash#dup#merge!({}):   124790.0 i/s
{}#merge!(Hash) do end:   116632.6 i/s - 1.07x  (± 0.00) slower
      Hash#merge({}):    72117.9 i/s - 1.73x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   238.502M i/100ms
          Hash#merge   238.963M i/100ms
Calculating -------------------------------------
        Hash#**other      2.385B (± 0.3%) i/s -     11.925B in   4.999236s
          Hash#merge      2.387B (± 0.3%) i/s -     11.948B in   5.006271s

Comparison:
          Hash#merge: 2386649829.7 i/s
        Hash#**other: 2385409344.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   267.000  i/100ms
         Hash#merge!    21.292k i/100ms
Calculating -------------------------------------
          Hash#merge      2.880k (± 6.6%) i/s -     14.418k in   5.042531s
         Hash#merge!    213.336k (± 4.0%) i/s -      1.086M in   5.098253s

Comparison:
         Hash#merge!:   213335.9 i/s
          Hash#merge:     2879.8 i/s - 74.08x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      996.440k i/100ms
Array#each             945.057k i/100ms
Array#each_w/_object   956.282k i/100ms
Hash#select-include      1.449M i/100ms
Calculating -------------------------------------
Hash#native-slice        11.278M (± 4.4%) i/s -     56.797M in   5.045836s
Array#each                9.626M (± 2.3%) i/s -     48.198M in   5.009563s
Array#each_w/_object      9.505M (± 3.6%) i/s -     47.814M in   5.036736s
Hash#select-include      14.959M (± 3.9%) i/s -     75.348M in   5.044763s

Comparison:
Hash#select-include : 14959396.7 i/s
Hash#native-slice   : 11278476.5 i/s - 1.33x  (± 0.00) slower
Array#each          :  9626486.7 i/s - 1.55x  (± 0.00) slower
Array#each_w/_object:  9505463.9 i/s - 1.57x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   172.000  i/100ms
         Hash#value?   554.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      2.097k (±10.6%) i/s -     10.320k in   5.010506s
         Hash#value?      5.518k (± 0.2%) i/s -     27.700k in   5.019543s

Comparison:
         Hash#value?:     5518.5 i/s
Hash#values.include?:     2097.0 i/s - 2.63x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   238.545M i/100ms
                send   236.425M i/100ms
      method_missing   238.891M i/100ms
Calculating -------------------------------------
                call      2.386B (± 0.3%) i/s -     12.166B in   5.098694s
                send      2.387B (± 0.2%) i/s -     12.058B in   5.050655s
      method_missing      2.388B (± 0.2%) i/s -     11.945B in   5.002387s

Comparison:
      method_missing: 2387777396.6 i/s
                send: 2387365386.0 i/s - same-ish: difference falls within error
                call: 2386085723.3 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    11.869k i/100ms
      Symbol#to_proc    13.211k i/100ms
Calculating -------------------------------------
               Block    139.674k (± 5.1%) i/s -    700.271k in   5.030264s
      Symbol#to_proc    138.525k (± 5.2%) i/s -    700.183k in   5.069121s

Comparison:
               Block:   139673.8 i/s
      Symbol#to_proc:   138525.0 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   238.474M i/100ms
       block + yield   238.665M i/100ms
        unused block   238.882M i/100ms
               yield   238.884M i/100ms
Calculating -------------------------------------
          block.call      2.384B (± 0.5%) i/s -     11.924B in   5.002043s
       block + yield      2.388B (± 0.2%) i/s -     12.172B in   5.096373s
        unused block      2.387B (± 0.4%) i/s -     11.944B in   5.004862s
               yield      2.387B (± 0.3%) i/s -     11.944B in   5.004431s

Comparison:
       block + yield: 2388364829.5 i/s
               yield: 2386751886.4 i/s - same-ish: difference falls within error
        unused block: 2386535672.1 i/s - same-ish: difference falls within error
          block.call: 2383830944.0 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    15.135k i/100ms
      range#include?   384.000  i/100ms
       range#member?   667.000  i/100ms
       plain compare    27.117k i/100ms
Calculating -------------------------------------
        range#cover?    153.671k (±18.6%) i/s -    741.615k in   5.021267s
      range#include?      6.217k (±21.5%) i/s -     29.952k in   5.052996s
       range#member?      5.825k (±13.1%) i/s -     28.681k in   5.031422s
       plain compare    318.563k (± 6.3%) i/s -      1.600M in   5.044918s

Comparison:
       plain compare:   318563.1 i/s
        range#cover?:   153670.5 i/s - 2.07x  (± 0.00) slower
      range#include?:     6217.2 i/s - 51.24x  (± 0.00) slower
       range#member?:     5824.5 i/s - 54.69x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    13.454M i/100ms
           String#=~    11.949M i/100ms
          Regexp#===    11.946M i/100ms
        String#match    11.483M i/100ms
Calculating -------------------------------------
       String#match?    135.664M (± 0.2%) i/s -    686.162M in   5.057817s
           String#=~    119.453M (± 0.1%) i/s -    597.444M in   5.001508s
          Regexp#===    119.480M (± 0.1%) i/s -    609.240M in   5.099109s
        String#match    114.844M (± 0.1%) i/s -    585.648M in   5.099518s

Comparison:
       String#match?: 135664295.9 i/s
          Regexp#===: 119479973.2 i/s - 1.14x  (± 0.00) slower
           String#=~: 119453130.0 i/s - 1.14x  (± 0.00) slower
        String#match: 114843951.8 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.159M i/100ms
      String#casecmp     2.440M i/100ms
Calculating -------------------------------------
String#downcase + ==     15.094M (± 3.7%) i/s -     76.474M in   5.073683s
      String#casecmp     24.175M (± 2.5%) i/s -    122.000M in   5.049615s

Comparison:
      String#casecmp: 24174711.9 i/s
String#downcase + ==: 15093712.4 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     6.897M i/100ms
       String#concat     7.130M i/100ms
       String#append     7.222M i/100ms
         "foo" "bar"   238.878M i/100ms
  "#{'foo'}#{'bar'}"   238.914M i/100ms
Calculating -------------------------------------
            String#+     73.281M (± 5.5%) i/s -    365.526M in   5.003736s
       String#concat     74.679M (± 2.9%) i/s -    377.877M in   5.064419s
       String#append     72.341M (± 5.0%) i/s -    361.080M in   5.004058s
         "foo" "bar"      2.387B (± 0.2%) i/s -     11.944B in   5.002699s
  "#{'foo'}#{'bar'}"      2.388B (± 0.2%) i/s -     11.946B in   5.003103s

Comparison:
  "#{'foo'}#{'bar'}": 2387674210.0 i/s
         "foo" "bar": 2387496953.1 i/s - same-ish: difference falls within error
       String#concat: 74678648.7 i/s - 31.97x  (± 0.00) slower
            String#+: 73281083.0 i/s - 32.58x  (± 0.00) slower
       String#append: 72341126.6 i/s - 33.01x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   238.404M i/100ms
          String#dup   238.714M i/100ms
Calculating -------------------------------------
           String#+@      2.386B (± 0.3%) i/s -     12.159B in   5.096444s
          String#dup      2.387B (± 0.3%) i/s -     11.936B in   5.000308s

Comparison:
          String#dup: 2387009797.0 i/s
           String#+@: 2385721810.3 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   848.359k i/100ms
       String#match?   894.296k i/100ms
    String#end_with?    13.562M i/100ms
Calculating -------------------------------------
           String#=~      9.211M (± 2.8%) i/s -     46.660M in   5.070150s
       String#match?     11.909M (± 0.7%) i/s -     59.918M in   5.031412s
    String#end_with?    135.637M (± 0.2%) i/s -    691.641M in   5.099218s

Comparison:
    String#end_with?: 135637456.2 i/s
       String#match?: 11909306.8 i/s - 11.39x  (± 0.00) slower
           String#=~:  9210653.9 i/s - 14.73x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    45.314k i/100ms
          String#sub   359.521k i/100ms
String#dup["string"]=
                         8.848M i/100ms
Calculating -------------------------------------
         String#gsub      3.440M (±10.4%) i/s -     16.811M in   5.007595s
          String#sub      4.525M (± 8.5%) i/s -     22.650M in   5.055997s
String#dup["string"]=
                         88.623M (± 0.1%) i/s -    451.224M in   5.091537s

Comparison:
String#dup["string"]=: 88622542.1 i/s
          String#sub:  4525480.5 i/s - 19.58x  (± 0.00) slower
         String#gsub:  3439637.0 i/s - 25.77x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    39.750k i/100ms
           String#tr    82.612k i/100ms
Calculating -------------------------------------
         String#gsub      1.786M (± 7.8%) i/s -      8.904M in   5.021372s
           String#tr    829.540k (± 2.7%) i/s -      4.213M in   5.082605s

Comparison:
         String#gsub:  1786398.8 i/s
           String#tr:   829539.5 i/s - 2.15x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   238.497M i/100ms
         With Freeze   238.327M i/100ms
Calculating -------------------------------------
      Without Freeze      2.385B (± 0.3%) i/s -     11.925B in   5.000219s
         With Freeze      2.387B (± 0.2%) i/s -     12.155B in   5.092041s

Comparison:
         With Freeze: 2387010864.0 i/s
      Without Freeze: 2384897392.4 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.817k i/100ms
      String#squeeze    27.022k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     50.662k (± 7.1%) i/s -    251.922k in   5.016439s
      String#squeeze    270.776k (± 2.3%) i/s -      1.378M in   5.092366s

Comparison:
      String#squeeze:   270775.6 i/s
 String#gsub/regex+/:    50661.7 i/s - 5.34x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.051M i/100ms
       String#match?     4.589M i/100ms
  String#start_with?    10.666M i/100ms
Calculating -------------------------------------
           String#=~     35.456M (± 5.6%) i/s -    176.559M in   4.998889s
       String#match?     45.942M (± 0.9%) i/s -    234.053M in   5.095010s
  String#start_with?    106.523M (± 0.3%) i/s -    533.298M in   5.006441s

Comparison:
  String#start_with?: 106523377.0 i/s
       String#match?: 45941745.9 i/s - 2.32x  (± 0.00) slower
           String#=~: 35455750.4 i/s - 3.00x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   103.504k i/100ms
    String#[0, n] ==   191.051k i/100ms
   String#[RANGE] ==   302.964k i/100ms
   String#[0...n] ==   196.014k i/100ms
Calculating -------------------------------------
  String#start_with?      4.760M (± 0.1%) i/s -     23.806M in   5.001499s
    String#[0, n] ==      2.050M (± 3.1%) i/s -     10.317M in   5.037586s
   String#[RANGE] ==      3.063M (± 2.9%) i/s -     15.451M in   5.048137s
   String#[0...n] ==      1.950M (± 3.5%) i/s -      9.801M in   5.031431s

Comparison:
  String#start_with?:  4759763.5 i/s
   String#[RANGE] ==:  3063461.8 i/s - 1.55x  (± 0.00) slower
    String#[0, n] ==:  2049953.0 i/s - 2.32x  (± 0.00) slower
   String#[0...n] ==:  1950254.4 i/s - 2.44x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     9.030M i/100ms
 String#sub!'string'    89.610k i/100ms
String#gsub!'string'   296.423k i/100ms
  String#[/regexp/]=     1.339M i/100ms
 String#sub!/regexp/   438.424k i/100ms
String#gsub!/regexp/   361.204k i/100ms
Calculating -------------------------------------
  String#['string']=     90.490M (± 0.0%) i/s -    460.549M in   5.089520s
 String#sub!'string'      4.175M (±18.1%) i/s -     19.714M in   5.015310s
String#gsub!'string'      4.073M (± 6.9%) i/s -     20.453M in   5.047515s
  String#[/regexp/]=     13.547M (± 2.7%) i/s -     68.267M in   5.042984s
 String#sub!/regexp/      4.628M (± 4.4%) i/s -     23.236M in   5.030434s
String#gsub!/regexp/      3.618M (± 7.4%) i/s -     18.060M in   5.034552s

Comparison:
  String#['string']=: 90489730.0 i/s
  String#[/regexp/]=: 13547138.2 i/s - 6.68x  (± 0.00) slower
 String#sub!/regexp/:  4628291.4 i/s - 19.55x  (± 0.00) slower
 String#sub!'string':  4174945.5 i/s - 21.67x  (± 0.00) slower
String#gsub!'string':  4073405.2 i/s - 22.21x  (± 0.00) slower
String#gsub!/regexp/:  3617651.3 i/s - 25.01x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub    46.804k i/100ms
        String#chomp     4.525M i/100ms
String#delete_suffix     4.014M i/100ms
Calculating -------------------------------------
          String#sub     18.351M (± 6.5%) i/s -     90.659M in   4.998792s
        String#chomp     45.210M (± 0.3%) i/s -    226.247M in   5.004410s
String#delete_suffix     39.991M (± 2.2%) i/s -    200.696M in   5.020853s

Comparison:
        String#chomp: 45209922.2 i/s
String#delete_suffix: 39991241.6 i/s - 1.13x  (± 0.00) slower
          String#sub: 18351178.7 i/s - 2.46x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   238.353M i/100ms
          String#sub    99.029k i/100ms
Calculating -------------------------------------
String#delete_prefix      2.386B (± 0.3%) i/s -     12.156B in   5.094946s
          String#sub    121.940M (± 1.1%) i/s -    609.028M in   4.995117s

Comparison:
String#delete_prefix: 2385919867.2 i/s
          String#sub: 121940015.3 i/s - 19.57x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.289M i/100ms
    String#unpack[0]     1.331M i/100ms
Calculating -------------------------------------
      String#unpack1     13.199M (± 2.5%) i/s -     67.034M in   5.081879s
    String#unpack[0]     13.067M (± 6.3%) i/s -     65.227M in   5.023927s

Comparison:
      String#unpack1: 13199290.0 i/s
    String#unpack[0]: 13067114.3 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 23.0.0-dev-82f5ec31, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    16.960k i/100ms
          Time.parse   190.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    168.473k (±28.8%) i/s -    763.200k in   5.052039s
          Time.parse      6.730k (±26.3%) i/s -     29.260k in   5.002705s

Comparison:
        Time.iso8601:   168472.9 i/s
          Time.parse:     6729.5 i/s - 25.03x  (± 0.00) slower

