$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       113.668M i/100ms
Function with splat arguments
                         1.134k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.135B (± 0.7%) i/s -      5.683B in   5.008605s
Function with splat arguments
                         12.406k (± 8.3%) i/s -     62.370k in   5.074295s

Comparison:
Function with single Array argument: 1134778093.1 i/s
Function with splat arguments:    12405.7 i/s - 91472.42x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   113.714M i/100ms
Sequential Assignment
                       113.489M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.135B (± 0.6%) i/s -      5.686B in   5.007760s
Sequential Assignment
                          1.134B (± 0.5%) i/s -      5.674B in   5.001966s

Comparison:
 Parallel Assignment: 1135425574.8 i/s
Sequential Assignment: 1134472831.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   113.456M i/100ms
       attr_accessor   113.536M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.134B (± 0.6%) i/s -      5.673B in   5.002365s
       attr_accessor      1.139B (± 1.1%) i/s -      5.790B in   5.086327s

Comparison:
       attr_accessor: 1138555716.8 i/s
   getter_and_setter: 1134069472.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    10.419k i/100ms
         respond_to?   113.395M i/100ms
Calculating -------------------------------------
      begin...rescue     76.870k (± 2.6%) i/s -    385.503k in   5.018369s
         respond_to?      1.138B (± 0.9%) i/s -      5.783B in   5.082890s

Comparison:
         respond_to?: 1137851303.7 i/s
      begin...rescue:    76869.6 i/s - 14802.36x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   113.462M i/100ms
             &method   114.058M i/100ms
Calculating -------------------------------------
              normal      1.136B (± 0.9%) i/s -      5.787B in   5.091944s
             &method      1.136B (± 0.5%) i/s -      5.703B in   5.018571s

Comparison:
              normal: 1136497308.9 i/s
             &method: 1136387344.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       140.000  i/100ms
       define_method   154.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.537k (±55.0%) i/s -      6.580k in   5.041280s
       define_method      6.224k (±51.4%) i/s -      8.932k in   6.684297s

Comparison:
       define_method:     6223.9 i/s
module_eval with string:     2537.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    87.385k i/100ms
       Kernel#format    76.087k i/100ms
            String#%    76.733k i/100ms
Calculating -------------------------------------
         Float#round    936.919k (± 2.2%) i/s -      4.719M in   5.038945s
       Kernel#format    765.539k (± 1.7%) i/s -      3.880M in   5.070405s
            String#%    768.300k (± 2.2%) i/s -      3.913M in   5.095954s

Comparison:
         Float#round:   936919.4 i/s
            String#%:   768300.3 i/s - 1.22x  (± 0.00) slower
       Kernel#format:   765539.5 i/s - 1.22x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.440M i/100ms
          OpenStruct   113.245M i/100ms
Calculating -------------------------------------
                Hash      1.135B (± 0.8%) i/s -      5.785B in   5.096826s
          OpenStruct      1.138B (± 0.9%) i/s -      5.775B in   5.074242s

Comparison:
          OpenStruct: 1138281179.3 i/s
                Hash: 1135167797.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.803M i/100ms
          OpenStruct     3.155k i/100ms
Calculating -------------------------------------
                Hash      1.134B (± 0.6%) i/s -      5.690B in   5.017164s
          OpenStruct     34.302k (±10.0%) i/s -    170.370k in   5.041469s

Comparison:
                Hash: 1134185715.0 i/s
          OpenStruct:    34302.5 i/s - 33064.26x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   829.376k i/100ms
  ancestors.include?   162.646k i/100ms
Calculating -------------------------------------
  less than or equal      8.730M (± 3.2%) i/s -     43.957M in   5.040581s
  ancestors.include?      1.841M (± 3.1%) i/s -      9.271M in   5.041761s

Comparison:
  less than or equal:  8729952.1 i/s
  ancestors.include?:  1840663.4 i/s - 4.74x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     11.332  (± 0.0%) i/s -     57.000  in   5.029892s
         Kernel loop     11.381  (± 0.0%) i/s -     57.000  in   5.008843s

Comparison:
         Kernel loop:       11.4 i/s
          While Loop:       11.3 i/s - 1.00x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   113.667M i/100ms
         Array#first   113.429M i/100ms
Calculating -------------------------------------
           Array#[0]      1.136B (± 0.8%) i/s -      5.683B in   5.005182s
         Array#first      1.138B (± 1.2%) i/s -      5.785B in   5.083499s

Comparison:
         Array#first: 1138146077.1 i/s
           Array#[0]: 1135558883.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   113.831M i/100ms
          Array#last   113.418M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.136B (± 1.2%) i/s -      5.692B in   5.011510s
          Array#last      1.137B (± 0.9%) i/s -      5.784B in   5.088317s

Comparison:
          Array#last: 1136874388.0 i/s
          Array#[-1]: 1135846995.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   628.030k i/100ms
Calculating -------------------------------------
                find      4.767  (± 0.0%) i/s -     24.000  in   5.034504s
             bsearch      6.407M (± 2.9%) i/s -     32.030M in   5.003477s

Comparison:
             bsearch:  6406903.1 i/s
                find:        4.8 i/s - 1343959.38x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.069  (± 0.0%) i/s -      1.000  in  14.533330s
        Array#insert      1.028  (± 0.0%) i/s -      6.000  in   5.837482s

Comparison:
        Array#insert:        1.0 i/s
       Array#unshift:        0.1 i/s - 14.94x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   113.536M i/100ms
          Array#size   113.949M i/100ms
         Array#count   113.992M i/100ms
Calculating -------------------------------------
        Array#length      1.137B (± 0.8%) i/s -      5.790B in   5.092038s
          Array#size      1.139B (± 1.1%) i/s -      5.697B in   5.003186s
         Array#count      1.137B (± 0.8%) i/s -      5.700B in   5.011665s

Comparison:
          Array#size: 1138907023.8 i/s
         Array#count: 1137341683.6 i/s - same-ish: difference falls within error
        Array#length: 1137208123.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    24.596k i/100ms
        Array#sample     2.861M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    254.024k (± 1.7%) i/s -      1.279M in   5.036435s
        Array#sample     26.366M (± 0.4%) i/s -    134.470M in   5.100230s

Comparison:
        Array#sample: 26365923.7 i/s
 Array#shuffle.first:   254023.9 i/s - 103.79x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   402.000  i/100ms
          Date.parse   622.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     46.439k (±30.7%) i/s -    182.106k in   4.997784s
          Date.parse     12.064k (±23.8%) i/s -     55.358k in   5.022804s

Comparison:
        Date.iso8601:    46439.3 i/s
          Date.parse:    12064.1 i/s - 3.85x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   223.945k i/100ms
           Array#map   954.074k i/100ms
Calculating -------------------------------------
   Array#each + push      2.393M (± 6.1%) i/s -     12.093M in   5.083461s
           Array#map     10.079M (± 7.3%) i/s -     50.566M in   5.055940s

Comparison:
           Array#map: 10078837.7 i/s
   Array#each + push:  2392878.9 i/s - 4.21x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     9.304M i/100ms
               #each    40.877M i/100ms
Calculating -------------------------------------
            For loop     93.391M (± 0.9%) i/s -    474.515M in   5.081357s
               #each    407.031M (± 1.2%) i/s -      2.044B in   5.022110s

Comparison:
               #each: 407030692.0 i/s
            For loop: 93390929.6 i/s - 4.36x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   807.153k i/100ms
     each_with_index     1.030M i/100ms
Calculating -------------------------------------
          While Loop      8.073M (± 0.1%) i/s -     41.165M in   5.098954s
     each_with_index     10.305M (± 0.0%) i/s -     52.546M in   5.099045s

Comparison:
     each_with_index: 10305101.8 i/s
          While Loop:  8073188.3 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   159.186k i/100ms
      inject to_proc   161.022k i/100ms
        inject block   161.339k i/100ms
Calculating -------------------------------------
       inject symbol      1.590M (± 0.1%) i/s -      7.959M in   5.004925s
      inject to_proc      1.586M (± 0.0%) i/s -      8.051M in   5.076720s
        inject block      1.616M (± 0.0%) i/s -      8.228M in   5.091804s

Comparison:
        inject block:  1615987.3 i/s
       inject symbol:  1590294.2 i/s - 1.02x  (± 0.00) slower
      inject to_proc:  1585886.5 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    17.249k i/100ms
   Array#map.flatten    18.068k i/100ms
      Array#flat_map    44.119k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    179.667k (± 7.0%) i/s -    896.948k in   5.026291s
   Array#map.flatten    187.062k (± 4.3%) i/s -    939.536k in   5.032450s
      Array#flat_map    446.778k (± 2.5%) i/s -      2.250M in   5.039515s

Comparison:
      Array#flat_map:   446777.9 i/s
   Array#map.flatten:   187062.2 i/s - 2.39x  (± 0.00) slower
Array#map.flatten(1):   179666.5 i/s - 2.49x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   206.119k i/100ms
  Array#reverse_each     1.632M i/100ms
Calculating -------------------------------------
  Array#reverse.each      2.180M (± 6.2%) i/s -     10.924M in   5.040908s
  Array#reverse_each     16.407M (± 0.1%) i/s -     83.251M in   5.074296s

Comparison:
  Array#reverse_each: 16406515.4 i/s
  Array#reverse.each:  2180214.3 i/s - 7.53x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       690.365k i/100ms
   Enumerable#detect     2.410M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          7.349M (± 6.5%) i/s -    146.357M in  20.046235s
   Enumerable#detect     25.954M (± 0.5%) i/s -    520.510M in  20.055834s

Comparison:
   Enumerable#detect: 25953650.9 i/s
Enumerable#select.first:  7348515.2 i/s - 3.53x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       215.518k i/100ms
Enumerable#select.last
                       380.811k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.320M (± 3.2%) i/s -     11.638M in   5.022492s
Enumerable#select.last
                          3.952M (± 2.9%) i/s -     19.802M in   5.014610s

Comparison:
Enumerable#select.last:  3952352.8 i/s
Enumerable#reverse.detect:  2319567.7 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.819k i/100ms
  Enumerable#sort_by     2.918k i/100ms
     Enumerable#sort     4.093k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         28.995k (± 8.5%) i/s -    143.769k in   5.014546s
  Enumerable#sort_by     27.400k (±23.4%) i/s -    119.638k in   5.061666s
     Enumerable#sort     39.715k (± 1.2%) i/s -    200.557k in   5.050728s

Comparison:
     Enumerable#sort:    39714.8 i/s
Enumerable#sort_by (Symbol#to_proc):    28995.3 i/s - 1.37x  (± 0.00) slower
  Enumerable#sort_by:    27400.0 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   485.742k i/100ms
Enumerable#sort_by...first
                         5.890k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      4.858M (± 0.5%) i/s -     24.287M in   4.999594s
Enumerable#sort_by...first
                         68.092k (± 2.2%) i/s -    341.620k in   5.019482s

Comparison:
   Enumerable#min_by:  4857959.1 i/s
Enumerable#sort_by...first:    68091.8 i/s - 71.34x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   371.243k i/100ms
            Hash#dup   408.953k i/100ms
Calculating -------------------------------------
              Hash[]      4.425M (± 8.7%) i/s -     21.903M in   4.999111s
            Hash#dup      4.439M (± 7.4%) i/s -     22.083M in   5.003324s

Comparison:
            Hash#dup:  4439147.7 i/s
              Hash[]:  4424963.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   113.920M i/100ms
  Hash#fetch, symbol   113.520M i/100ms
     Hash#[], string     3.662M i/100ms
  Hash#fetch, string    13.186M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.144B (± 1.6%) i/s -      5.810B in   5.079598s
  Hash#fetch, symbol      1.137B (± 0.5%) i/s -      5.790B in   5.094277s
     Hash#[], string    173.794M (± 1.5%) i/s -    871.445M in   5.015417s
  Hash#fetch, string    159.584M (± 0.9%) i/s -    804.324M in   5.040559s

Comparison:
     Hash#[], symbol: 1144066381.2 i/s
  Hash#fetch, symbol: 1136503207.1 i/s - same-ish: difference falls within error
     Hash#[], string: 173793654.4 i/s - 6.58x  (± 0.00) slower
  Hash#fetch, string: 159584117.7 i/s - 7.17x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    49.782M i/100ms
             Hash#[]    49.803M i/100ms
          Hash#[] ||    49.815M i/100ms
          Hash#[] &&    49.813M i/100ms
          Hash#fetch    49.816M i/100ms
 Hash#fetch fallback    49.817M i/100ms
Calculating -------------------------------------
            Hash#dig    497.637M (± 0.2%) i/s -      2.489B in   5.001849s
             Hash#[]    497.973M (± 0.1%) i/s -      2.490B in   5.000600s
          Hash#[] ||    497.850M (± 0.2%) i/s -      2.491B in   5.003056s
          Hash#[] &&    497.508M (± 0.4%) i/s -      2.491B in   5.006325s
          Hash#fetch    497.938M (± 0.2%) i/s -      2.491B in   5.002203s
 Hash#fetch fallback    497.964M (± 0.1%) i/s -      2.491B in   5.002118s

Comparison:
             Hash#[]: 497972711.8 i/s
 Hash#fetch fallback: 497964342.6 i/s - same-ish: difference falls within error
          Hash#fetch: 497937573.9 i/s - same-ish: difference falls within error
          Hash#[] ||: 497849919.2 i/s - same-ish: difference falls within error
            Hash#dig: 497637147.3 i/s - same-ish: difference falls within error
          Hash#[] &&: 497508416.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   113.459M i/100ms
  Hash#fetch + block   113.419M i/100ms
    Hash#fetch + arg   113.508M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.135B (± 0.8%) i/s -      5.673B in   4.999962s
  Hash#fetch + block      1.134B (± 0.4%) i/s -      5.784B in   5.099519s
    Hash#fetch + arg      1.136B (± 0.8%) i/s -      5.789B in   5.094852s

Comparison:
    Hash#fetch + arg: 1136300849.4 i/s
  Hash#fetch + const: 1134663030.3 i/s - same-ish: difference falls within error
  Hash#fetch + block: 1134315300.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    20.810k i/100ms
         sort + to_h    10.481k i/100ms
Calculating -------------------------------------
      sort_by + to_h    371.877k (± 5.0%) i/s -      1.873M in   5.049854s
         sort + to_h    149.095k (± 3.6%) i/s -    754.632k in   5.068046s

Comparison:
      sort_by + to_h:   371877.1 i/s
         sort + to_h:   149094.5 i/s - 2.49x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   180.234k i/100ms
       Hash#each_key   205.950k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.768M (±11.0%) i/s -      8.651M in   5.027338s
       Hash#each_key      2.078M (± 2.8%) i/s -     10.503M in   5.058648s

Comparison:
       Hash#each_key:  2077979.5 i/s
      Hash#keys.each:  1768379.4 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   216.000  i/100ms
           Hash#key?     2.419M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      2.116k (±11.3%) i/s -     10.584k in   5.082748s
           Hash#key?     24.029M (± 0.4%) i/s -    120.939M in   5.033188s

Comparison:
           Hash#key?: 24028591.2 i/s
  Hash#keys.include?:     2115.6 i/s - 11357.87x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    40.982k i/100ms
            Hash#[]=    41.816k i/100ms
Calculating -------------------------------------
         Hash#merge!    420.385k (± 4.6%) i/s -      2.131M in   5.080332s
            Hash#[]=    425.234k (± 3.9%) i/s -      2.133M in   5.022879s

Comparison:
            Hash#[]=:   425233.7 i/s
         Hash#merge!:   420385.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        22.568k i/100ms
      Hash#merge({})    13.849k i/100ms
 Hash#dup#merge!({})    24.415k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        264.645k (± 8.5%) i/s -      1.332M in   5.071239s
      Hash#merge({})    151.825k (± 7.4%) i/s -    761.695k in   5.056423s
 Hash#dup#merge!({})    239.010k (± 7.0%) i/s -      1.196M in   5.031535s

Comparison:
{}#merge!(Hash) do end:   264644.5 i/s
 Hash#dup#merge!({}):   239010.2 i/s - same-ish: difference falls within error
      Hash#merge({}):   151824.6 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   114.167M i/100ms
          Hash#merge   113.393M i/100ms
Calculating -------------------------------------
        Hash#**other      1.133B (± 0.6%) i/s -      5.708B in   5.040453s
          Hash#merge      1.136B (± 0.4%) i/s -      5.783B in   5.092489s

Comparison:
          Hash#merge: 1135624974.0 i/s
        Hash#**other: 1132545063.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   658.000  i/100ms
         Hash#merge!    41.242k i/100ms
Calculating -------------------------------------
          Hash#merge      7.888k (± 6.1%) i/s -     39.480k in   5.024993s
         Hash#merge!    428.545k (± 2.1%) i/s -      2.145M in   5.006454s

Comparison:
         Hash#merge!:   428544.6 i/s
          Hash#merge:     7888.2 i/s - 54.33x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.511M i/100ms
Array#each             332.071k i/100ms
Array#each_w/_object     1.315M i/100ms
Hash#select-include      1.964M i/100ms
Calculating -------------------------------------
Hash#native-slice        15.536M (± 3.1%) i/s -     78.586M in   5.063432s
Array#each               13.896M (± 6.2%) i/s -     69.403M in   5.015855s
Array#each_w/_object     13.424M (± 2.2%) i/s -     68.406M in   5.098033s
Hash#select-include      19.890M (± 2.3%) i/s -    100.148M in   5.037931s

Comparison:
Hash#select-include : 19889833.4 i/s
Hash#native-slice   : 15535790.4 i/s - 1.28x  (± 0.00) slower
Array#each          : 13895539.3 i/s - 1.43x  (± 0.00) slower
Array#each_w/_object: 13424475.4 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   246.000  i/100ms
         Hash#value?     6.572k i/100ms
Calculating -------------------------------------
Hash#values.include?      2.659k (±11.0%) i/s -     13.284k in   5.081195s
         Hash#value?     67.315k (± 0.1%) i/s -    341.744k in   5.076776s

Comparison:
         Hash#value?:    67315.2 i/s
Hash#values.include?:     2659.0 i/s - 25.32x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   113.490M i/100ms
                send   113.867M i/100ms
      method_missing   113.818M i/100ms
Calculating -------------------------------------
                call      1.137B (± 0.9%) i/s -      5.788B in   5.089007s
                send      1.145B (± 1.5%) i/s -      5.807B in   5.072213s
      method_missing      1.147B (± 1.4%) i/s -      5.805B in   5.062225s

Comparison:
      method_missing: 1146886370.3 i/s
                send: 1145173302.3 i/s - same-ish: difference falls within error
                call: 1137439425.0 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    31.821k i/100ms
      Symbol#to_proc    29.513k i/100ms
Calculating -------------------------------------
               Block    377.264k (± 4.2%) i/s -      1.909M in   5.070076s
      Symbol#to_proc    365.701k (± 3.8%) i/s -      1.830M in   5.010971s

Comparison:
               Block:   377263.9 i/s
      Symbol#to_proc:   365701.2 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   113.624M i/100ms
       block + yield   113.864M i/100ms
        unused block   114.352M i/100ms
               yield   113.579M i/100ms
Calculating -------------------------------------
          block.call      1.138B (± 1.0%) i/s -      5.795B in   5.092503s
       block + yield      1.151B (± 1.9%) i/s -      5.807B in   5.046931s
        unused block      1.136B (± 0.7%) i/s -      5.718B in   5.035258s
               yield      1.144B (± 1.2%) i/s -      5.793B in   5.065164s

Comparison:
       block + yield: 1151001553.3 i/s
               yield: 1143771820.0 i/s - same-ish: difference falls within error
          block.call: 1138016552.3 i/s - same-ish: difference falls within error
        unused block: 1135557923.0 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    15.510k i/100ms
      range#include?   441.000  i/100ms
       range#member?   793.000  i/100ms
       plain compare    26.345k i/100ms
Calculating -------------------------------------
        range#cover?    143.962k (±21.3%) i/s -    697.950k in   5.159186s
      range#include?      8.125k (±27.1%) i/s -     37.485k in   5.058713s
       range#member?      7.739k (±19.2%) i/s -     37.271k in   5.039987s
       plain compare    278.807k (± 7.6%) i/s -      1.396M in   5.062845s

Comparison:
       plain compare:   278807.3 i/s
        range#cover?:   143961.9 i/s - 1.94x  (± 0.00) slower
      range#include?:     8124.9 i/s - 34.32x  (± 0.00) slower
       range#member?:     7739.0 i/s - 36.03x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    14.031M i/100ms
           String#=~    13.834M i/100ms
          Regexp#===    13.834M i/100ms
        String#match     9.732M i/100ms
Calculating -------------------------------------
       String#match?    142.871M (± 0.1%) i/s -    715.593M in   5.008660s
           String#=~    138.366M (± 0.0%) i/s -    705.511M in   5.098871s
          Regexp#===    138.359M (± 0.0%) i/s -    705.544M in   5.099353s
        String#match     97.534M (± 0.4%) i/s -    496.341M in   5.089005s

Comparison:
       String#match?: 142871271.6 i/s
           String#=~: 138366192.7 i/s - 1.03x  (± 0.00) slower
          Regexp#===: 138359474.5 i/s - 1.03x  (± 0.00) slower
        String#match: 97533637.5 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.339M i/100ms
      String#casecmp     3.730M i/100ms
Calculating -------------------------------------
String#downcase + ==     25.918M (± 4.1%) i/s -    131.000M in   5.062905s
      String#casecmp     37.410M (± 6.6%) i/s -    186.494M in   5.019746s

Comparison:
      String#casecmp: 37410003.3 i/s
String#downcase + ==: 25918406.5 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     7.678M i/100ms
       String#concat     8.105M i/100ms
       String#append     8.221M i/100ms
         "foo" "bar"   113.628M i/100ms
  "#{'foo'}#{'bar'}"   113.791M i/100ms
Calculating -------------------------------------
            String#+     82.077M (± 3.4%) i/s -    414.597M in   5.057177s
       String#concat     82.759M (± 3.4%) i/s -    413.379M in   5.000678s
       String#append     83.276M (± 1.9%) i/s -    419.281M in   5.036607s
         "foo" "bar"      1.136B (± 0.9%) i/s -      5.795B in   5.099503s
  "#{'foo'}#{'bar'}"      1.140B (± 1.2%) i/s -      5.803B in   5.090358s

Comparison:
  "#{'foo'}#{'bar'}": 1140223534.2 i/s
         "foo" "bar": 1136476293.9 i/s - same-ish: difference falls within error
       String#append: 83275912.0 i/s - 13.69x  (± 0.00) slower
       String#concat: 82759308.2 i/s - 13.78x  (± 0.00) slower
            String#+: 82077023.6 i/s - 13.89x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   113.911M i/100ms
          String#dup   113.688M i/100ms
Calculating -------------------------------------
           String#+@      1.136B (± 0.6%) i/s -      5.696B in   5.013504s
          String#dup      1.136B (± 0.5%) i/s -      5.684B in   5.002716s

Comparison:
          String#dup: 1136296576.8 i/s
           String#+@: 1136085649.6 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.408M i/100ms
       String#match?     1.506M i/100ms
    String#end_with?    10.026M i/100ms
Calculating -------------------------------------
           String#=~     14.239M (± 2.3%) i/s -     71.790M in   5.044799s
       String#match?     17.378M (± 0.1%) i/s -     87.323M in   5.025033s
    String#end_with?     98.350M (± 0.8%) i/s -    501.287M in   5.097291s

Comparison:
    String#end_with?: 98350077.3 i/s
       String#match?: 17377556.0 i/s - 5.66x  (± 0.00) slower
           String#=~: 14238645.7 i/s - 6.91x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   299.891k i/100ms
          String#sub   759.153k i/100ms
String#dup["string"]=
                         9.225M i/100ms
Calculating -------------------------------------
         String#gsub      5.786M (± 7.9%) i/s -     29.089M in   5.081418s
          String#sub      7.469M (± 9.1%) i/s -     37.198M in   5.031191s
String#dup["string"]=
                         92.230M (± 0.0%) i/s -    461.249M in   5.001084s

Comparison:
String#dup["string"]=: 92229857.7 i/s
          String#sub:  7469112.0 i/s - 12.35x  (± 0.00) slower
         String#gsub:  5786251.8 i/s - 15.94x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   104.391k i/100ms
           String#tr   119.806k i/100ms
Calculating -------------------------------------
         String#gsub      2.730M (± 6.4%) i/s -     13.675M in   5.033367s
           String#tr      1.192M (± 6.4%) i/s -      5.990M in   5.061087s

Comparison:
         String#gsub:  2729563.5 i/s
           String#tr:  1191728.1 i/s - 2.29x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   114.352M i/100ms
         With Freeze   113.513M i/100ms
Calculating -------------------------------------
      Without Freeze      1.135B (± 0.9%) i/s -      5.718B in   5.038030s
         With Freeze      1.136B (± 0.5%) i/s -      5.789B in   5.097564s

Comparison:
         With Freeze: 1135705631.4 i/s
      Without Freeze: 1134978427.8 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     6.401k i/100ms
      String#squeeze    27.225k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     91.619k (± 8.9%) i/s -    454.471k in   5.014660s
      String#squeeze    273.443k (± 2.3%) i/s -      1.388M in   5.080567s

Comparison:
      String#squeeze:   273443.3 i/s
 String#gsub/regex+/:    91618.8 i/s - 2.98x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     2.430M i/100ms
       String#match?     4.997M i/100ms
  String#start_with?     9.086M i/100ms
Calculating -------------------------------------
           String#=~     24.669M (± 3.5%) i/s -    123.930M in   5.030005s
       String#match?     50.342M (± 0.2%) i/s -    254.861M in   5.062645s
  String#start_with?     88.653M (± 1.0%) i/s -    445.219M in   5.022525s

Comparison:
  String#start_with?: 88653212.0 i/s
       String#match?: 50341718.7 i/s - 1.76x  (± 0.00) slower
           String#=~: 24669495.8 i/s - 3.59x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   100.140k i/100ms
    String#[0, n] ==   251.179k i/100ms
   String#[RANGE] ==   320.482k i/100ms
   String#[0...n] ==   223.971k i/100ms
Calculating -------------------------------------
  String#start_with?      4.036M (± 0.2%) i/s -     20.228M in   5.012390s
    String#[0, n] ==      2.532M (± 3.9%) i/s -     12.810M in   5.067806s
   String#[RANGE] ==      3.260M (± 2.5%) i/s -     16.345M in   5.017083s
   String#[0...n] ==      2.291M (± 4.2%) i/s -     11.646M in   5.092990s

Comparison:
  String#start_with?:  4035671.1 i/s
   String#[RANGE] ==:  3259852.8 i/s - 1.24x  (± 0.00) slower
    String#[0, n] ==:  2531650.1 i/s - 1.59x  (± 0.00) slower
   String#[0...n] ==:  2290815.9 i/s - 1.76x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     9.216M i/100ms
 String#sub!'string'   781.128k i/100ms
String#gsub!'string'   571.087k i/100ms
  String#[/regexp/]=     2.246M i/100ms
 String#sub!/regexp/   808.523k i/100ms
String#gsub!/regexp/   640.287k i/100ms
Calculating -------------------------------------
  String#['string']=     90.421M (± 0.3%) i/s -    460.792M in   5.096105s
 String#sub!'string'      8.167M (±16.9%) i/s -     38.275M in   5.072820s
String#gsub!'string'      5.720M (± 4.5%) i/s -     28.554M in   5.003274s
  String#[/regexp/]=     21.897M (± 6.5%) i/s -    110.078M in   5.059790s
 String#sub!/regexp/      8.751M (± 8.9%) i/s -     43.660M in   5.039049s
String#gsub!/regexp/      6.351M (± 8.2%) i/s -     32.014M in   5.088876s

Comparison:
  String#['string']=: 90421082.5 i/s
  String#[/regexp/]=: 21896516.9 i/s - 4.13x  (± 0.00) slower
 String#sub!/regexp/:  8751343.2 i/s - 10.33x  (± 0.00) slower
 String#sub!'string':  8166668.6 i/s - 11.07x  (± 0.00) slower
String#gsub!/regexp/:  6351139.6 i/s - 14.24x  (± 0.00) slower
String#gsub!'string':  5720169.7 i/s - 15.81x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     2.418M i/100ms
        String#chomp     4.212M i/100ms
String#delete_suffix     9.810M i/100ms
Calculating -------------------------------------
          String#sub     25.074M (± 4.9%) i/s -    125.759M in   5.028896s
        String#chomp     46.521M (± 0.4%) i/s -    235.867M in   5.070152s
String#delete_suffix    109.308M (± 8.6%) i/s -    549.346M in   5.080814s

Comparison:
String#delete_suffix: 109307928.5 i/s
        String#chomp: 46521206.9 i/s - 2.35x  (± 0.00) slower
          String#sub: 25074239.6 i/s - 4.36x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   113.720M i/100ms
          String#sub    15.220M i/100ms
Calculating -------------------------------------
String#delete_prefix      1.138B (± 1.2%) i/s -      5.800B in   5.098933s
          String#sub    152.426M (± 0.2%) i/s -    776.215M in   5.092414s

Comparison:
String#delete_prefix: 1137598429.6 i/s
          String#sub: 152426247.6 i/s - 7.46x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.393M i/100ms
    String#unpack[0]     1.582M i/100ms
Calculating -------------------------------------
      String#unpack1     16.331M (± 3.2%) i/s -     82.170M in   5.036677s
    String#unpack[0]     16.370M (± 2.6%) i/s -     82.253M in   5.028045s

Comparison:
    String#unpack[0]: 16369773.2 i/s
      String#unpack1: 16331437.5 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 23.0.0-dev-925cadce, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    21.051k i/100ms
          Time.parse   163.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    292.780k (±14.6%) i/s -      1.410M in   5.007290s
          Time.parse      6.867k (±22.9%) i/s -     30.970k in   5.005568s

Comparison:
        Time.iso8601:   292780.1 i/s
          Time.parse:     6867.1 i/s - 42.64x  (± 0.00) slower

