$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       114.020M i/100ms
Function with splat arguments
                         1.194k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.137B (± 0.8%) i/s -      5.701B in   5.016167s
Function with splat arguments
                         13.083k (± 7.6%) i/s -     65.670k in   5.063663s

Comparison:
Function with single Array argument: 1136592825.7 i/s
Function with splat arguments:    13083.1 i/s - 86875.14x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   113.920M i/100ms
Sequential Assignment
                       113.831M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.135B (± 0.7%) i/s -      5.696B in   5.016744s
Sequential Assignment
                          1.136B (± 0.5%) i/s -      5.692B in   5.008267s

Comparison:
Sequential Assignment: 1136461022.3 i/s
 Parallel Assignment: 1135447254.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   114.357M i/100ms
       attr_accessor   113.580M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.139B (± 0.7%) i/s -      5.718B in   5.020968s
       attr_accessor      1.141B (± 0.7%) i/s -      5.793B in   5.076137s

Comparison:
       attr_accessor: 1141195877.4 i/s
   getter_and_setter: 1138844376.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    10.112k i/100ms
         respond_to?   113.881M i/100ms
Calculating -------------------------------------
      begin...rescue     75.200k (± 6.0%) i/s -    374.144k in   5.001011s
         respond_to?      1.138B (± 0.5%) i/s -      5.694B in   5.004017s

Comparison:
         respond_to?: 1137929219.6 i/s
      begin...rescue:    75200.0 i/s - 15132.03x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   113.895M i/100ms
             &method   113.813M i/100ms
Calculating -------------------------------------
              normal      1.138B (± 0.9%) i/s -      5.695B in   5.005218s
             &method      1.138B (± 0.5%) i/s -      5.804B in   5.098984s

Comparison:
             &method: 1138386776.1 i/s
              normal: 1137845195.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       131.000  i/100ms
       define_method   143.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.288k (±54.9%) i/s -      6.288k in   5.020121s
       define_method      6.166k (±48.8%) i/s -      9.581k in   6.824741s

Comparison:
       define_method:     6166.3 i/s
module_eval with string:     2287.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    89.113k i/100ms
       Kernel#format    75.291k i/100ms
            String#%    75.489k i/100ms
Calculating -------------------------------------
         Float#round    904.090k (± 2.1%) i/s -      4.545M in   5.029108s
       Kernel#format    762.525k (± 2.0%) i/s -      3.840M in   5.037633s
            String#%    764.719k (± 1.8%) i/s -      3.850M in   5.036182s

Comparison:
         Float#round:   904089.8 i/s
            String#%:   764718.6 i/s - 1.18x  (± 0.00) slower
       Kernel#format:   762525.3 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.379M i/100ms
          OpenStruct   113.752M i/100ms
Calculating -------------------------------------
                Hash      1.139B (± 0.6%) i/s -      5.782B in   5.074827s
          OpenStruct      1.138B (± 0.6%) i/s -      5.801B in   5.097011s

Comparison:
                Hash: 1139459584.1 i/s
          OpenStruct: 1138237564.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.974M i/100ms
          OpenStruct     3.287k i/100ms
Calculating -------------------------------------
                Hash      1.135B (± 0.6%) i/s -      5.699B in   5.022831s
          OpenStruct     34.465k (±11.5%) i/s -    170.924k in   5.051397s

Comparison:
                Hash: 1134600939.8 i/s
          OpenStruct:    34464.9 i/s - 32920.44x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   828.051k i/100ms
  ancestors.include?   158.898k i/100ms
Calculating -------------------------------------
  less than or equal      8.936M (± 4.1%) i/s -     44.715M in   5.012680s
  ancestors.include?      1.797M (± 2.9%) i/s -      9.057M in   5.045585s

Comparison:
  less than or equal:  8935838.5 i/s
  ancestors.include?:  1796606.3 i/s - 4.97x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     11.384  (± 0.0%) i/s -     57.000  in   5.007389s
         Kernel loop     11.378  (± 0.0%) i/s -     57.000  in   5.009764s

Comparison:
          While Loop:       11.4 i/s
         Kernel loop:       11.4 i/s - 1.00x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   113.577M i/100ms
         Array#first   114.055M i/100ms
Calculating -------------------------------------
           Array#[0]      1.136B (± 0.7%) i/s -      5.792B in   5.097725s
         Array#first      1.138B (± 0.7%) i/s -      5.703B in   5.009600s

Comparison:
         Array#first: 1138430781.3 i/s
           Array#[0]: 1136333375.9 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   114.020M i/100ms
          Array#last   113.859M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.139B (± 0.6%) i/s -      5.701B in   5.006634s
          Array#last      1.138B (± 0.6%) i/s -      5.693B in   5.001895s

Comparison:
          Array#[-1]: 1138738136.1 i/s
          Array#last: 1138209274.8 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   652.999k i/100ms
Calculating -------------------------------------
                find      4.717  (± 0.0%) i/s -     24.000  in   5.087893s
             bsearch      6.570M (± 1.9%) i/s -     33.303M in   5.071172s

Comparison:
             bsearch:  6569537.0 i/s
                find:        4.7 i/s - 1392712.00x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.069  (± 0.0%) i/s -      1.000  in  14.447345s
        Array#insert      1.010  (± 0.0%) i/s -      6.000  in   5.941100s

Comparison:
        Array#insert:        1.0 i/s
       Array#unshift:        0.1 i/s - 14.59x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   114.225M i/100ms
          Array#size   114.136M i/100ms
         Array#count   113.823M i/100ms
Calculating -------------------------------------
        Array#length      1.138B (± 0.8%) i/s -      5.711B in   5.019654s
          Array#size      1.139B (± 0.6%) i/s -      5.707B in   5.008872s
         Array#count      1.141B (± 0.7%) i/s -      5.805B in   5.086894s

Comparison:
         Array#count: 1141219706.4 i/s
          Array#size: 1139381756.6 i/s - same-ish: difference falls within error
        Array#length: 1137853140.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    22.810k i/100ms
        Array#sample     2.772M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    255.604k (± 2.0%) i/s -      1.277M in   4.999455s
        Array#sample     25.965M (± 0.3%) i/s -    130.269M in   5.017097s

Comparison:
        Array#sample: 25965263.4 i/s
 Array#shuffle.first:   255604.0 i/s - 101.58x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   876.000  i/100ms
          Date.parse   604.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     47.391k (±34.6%) i/s -    189.216k in   5.005655s
          Date.parse     15.811k (±26.2%) i/s -     69.460k in   5.022460s

Comparison:
        Date.iso8601:    47391.2 i/s
          Date.parse:    15811.2 i/s - 3.00x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   209.894k i/100ms
           Array#map   963.201k i/100ms
Calculating -------------------------------------
   Array#each + push      2.230M (± 5.1%) i/s -     11.124M in   5.001673s
           Array#map     10.209M (± 2.8%) i/s -     51.050M in   5.004574s

Comparison:
           Array#map: 10208978.7 i/s
   Array#each + push:  2230188.9 i/s - 4.58x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     9.245M i/100ms
               #each    40.382M i/100ms
Calculating -------------------------------------
            For loop     92.708M (± 0.3%) i/s -    471.514M in   5.086049s
               #each    402.008M (± 0.6%) i/s -      2.019B in   5.022750s

Comparison:
               #each: 402008012.0 i/s
            For loop: 92707928.2 i/s - 4.34x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   806.582k i/100ms
     each_with_index     1.028M i/100ms
Calculating -------------------------------------
          While Loop      8.053M (± 0.9%) i/s -     40.329M in   5.008373s
     each_with_index     10.282M (± 0.0%) i/s -     51.414M in   5.000312s

Comparison:
     each_with_index: 10282131.3 i/s
          While Loop:  8053076.7 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   158.110k i/100ms
      inject to_proc   161.030k i/100ms
        inject block   160.061k i/100ms
Calculating -------------------------------------
       inject symbol      1.598M (± 0.1%) i/s -      8.064M in   5.046619s
      inject to_proc      1.620M (± 0.1%) i/s -      8.213M in   5.068784s
        inject block      1.610M (± 0.1%) i/s -      8.163M in   5.070317s

Comparison:
      inject to_proc:  1620217.8 i/s
        inject block:  1609980.9 i/s - 1.01x  (± 0.00) slower
       inject symbol:  1597826.0 i/s - 1.01x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    16.595k i/100ms
   Array#map.flatten    17.196k i/100ms
      Array#flat_map    42.636k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    169.961k (± 7.0%) i/s -    846.345k in   5.015900s
   Array#map.flatten    172.125k (± 5.3%) i/s -    859.800k in   5.009421s
      Array#flat_map    440.012k (± 2.4%) i/s -      2.217M in   5.041652s

Comparison:
      Array#flat_map:   440012.3 i/s
   Array#map.flatten:   172125.1 i/s - 2.56x  (± 0.00) slower
Array#map.flatten(1):   169960.6 i/s - 2.59x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   214.504k i/100ms
  Array#reverse_each     1.642M i/100ms
Calculating -------------------------------------
  Array#reverse.each      2.165M (± 2.0%) i/s -     10.940M in   5.056005s
  Array#reverse_each     16.392M (± 0.4%) i/s -     82.105M in   5.008880s

Comparison:
  Array#reverse_each: 16392128.2 i/s
  Array#reverse.each:  2164555.3 i/s - 7.57x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       660.521k i/100ms
   Enumerable#detect     2.611M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          7.163M (± 7.1%) i/s -    142.673M in  20.068889s
   Enumerable#detect     26.089M (± 0.2%) i/s -    522.167M in  20.014801s

Comparison:
   Enumerable#detect: 26089209.9 i/s
Enumerable#select.first:  7163200.7 i/s - 3.64x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       206.121k i/100ms
Enumerable#select.last
                       390.225k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.174M (± 2.1%) i/s -     10.924M in   5.026434s
Enumerable#select.last
                          3.859M (± 6.3%) i/s -     19.511M in   5.087512s

Comparison:
Enumerable#select.last:  3858880.0 i/s
Enumerable#reverse.detect:  2174312.8 i/s - 1.77x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.632k i/100ms
  Enumerable#sort_by     2.689k i/100ms
     Enumerable#sort     3.713k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         28.178k (±10.0%) i/s -    139.496k in   5.034071s
  Enumerable#sort_by     20.958k (±44.3%) i/s -     77.981k in   5.025696s
     Enumerable#sort     40.242k (± 1.6%) i/s -    204.215k in   5.076023s

Comparison:
     Enumerable#sort:    40242.4 i/s
Enumerable#sort_by (Symbol#to_proc):    28177.5 i/s - 1.43x  (± 0.00) slower
  Enumerable#sort_by:    20957.7 i/s - 1.92x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   463.846k i/100ms
Enumerable#sort_by...first
                         6.629k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      4.845M (± 0.1%) i/s -     24.584M in   5.073976s
Enumerable#sort_by...first
                         68.354k (± 2.1%) i/s -    344.708k in   5.045185s

Comparison:
   Enumerable#min_by:  4845086.0 i/s
Enumerable#sort_by...first:    68354.3 i/s - 70.88x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   368.682k i/100ms
            Hash#dup   381.155k i/100ms
Calculating -------------------------------------
              Hash[]      4.223M (± 4.9%) i/s -     21.384M in   5.076074s
            Hash#dup      4.087M (± 5.0%) i/s -     20.582M in   5.049475s

Comparison:
              Hash[]:  4223259.3 i/s
            Hash#dup:  4086593.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   114.209M i/100ms
  Hash#fetch, symbol   113.774M i/100ms
     Hash#[], string    13.793M i/100ms
  Hash#fetch, string    14.394M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.137B (± 0.7%) i/s -      5.710B in   5.020773s
  Hash#fetch, symbol      1.138B (± 0.6%) i/s -      5.802B in   5.097076s
     Hash#[], string    177.762M (± 0.5%) i/s -    896.555M in   5.043694s
  Hash#fetch, string    163.393M (± 0.4%) i/s -    820.449M in   5.021388s

Comparison:
  Hash#fetch, symbol: 1138438094.3 i/s
     Hash#[], symbol: 1137416393.9 i/s - same-ish: difference falls within error
     Hash#[], string: 177761763.8 i/s - 6.40x  (± 0.00) slower
  Hash#fetch, string: 163393243.4 i/s - 6.97x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    49.675M i/100ms
             Hash#[]    49.731M i/100ms
          Hash#[] ||    49.713M i/100ms
          Hash#[] &&    49.711M i/100ms
          Hash#fetch    49.716M i/100ms
 Hash#fetch fallback    49.714M i/100ms
Calculating -------------------------------------
            Hash#dig    496.590M (± 0.3%) i/s -      2.484B in   5.001605s
             Hash#[]    496.895M (± 0.2%) i/s -      2.487B in   5.004165s
          Hash#[] ||    496.785M (± 0.2%) i/s -      2.486B in   5.003451s
          Hash#[] &&    496.837M (± 0.2%) i/s -      2.486B in   5.002729s
          Hash#fetch    496.957M (± 0.1%) i/s -      2.486B in   5.002020s
 Hash#fetch fallback    496.850M (± 0.2%) i/s -      2.486B in   5.002961s

Comparison:
          Hash#fetch: 496957371.1 i/s
             Hash#[]: 496895317.5 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 496849529.1 i/s - same-ish: difference falls within error
          Hash#[] &&: 496837016.6 i/s - same-ish: difference falls within error
          Hash#[] ||: 496785146.1 i/s - same-ish: difference falls within error
            Hash#dig: 496590467.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   113.638M i/100ms
  Hash#fetch + block   113.798M i/100ms
    Hash#fetch + arg   113.779M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.134B (± 0.5%) i/s -      5.682B in   5.011825s
  Hash#fetch + block      1.139B (± 0.6%) i/s -      5.804B in   5.096118s
    Hash#fetch + arg      1.138B (± 0.5%) i/s -      5.803B in   5.099067s

Comparison:
  Hash#fetch + block: 1138879757.3 i/s
    Hash#fetch + arg: 1138025229.1 i/s - same-ish: difference falls within error
  Hash#fetch + const: 1133727173.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    21.418k i/100ms
         sort + to_h   319.000  i/100ms
Calculating -------------------------------------
      sort_by + to_h    346.321k (± 5.5%) i/s -      1.735M in   5.025729s
         sort + to_h    143.647k (±10.3%) i/s -    696.377k in   4.987740s

Comparison:
      sort_by + to_h:   346321.4 i/s
         sort + to_h:   143647.2 i/s - 2.41x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   162.611k i/100ms
       Hash#each_key   192.342k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.653M (±10.7%) i/s -      8.131M in   5.048180s
       Hash#each_key      1.917M (± 1.7%) i/s -      9.617M in   5.017096s

Comparison:
       Hash#each_key:  1917384.5 i/s
      Hash#keys.each:  1653140.1 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   185.000  i/100ms
           Hash#key?     2.663M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      2.228k (±10.1%) i/s -     11.100k in   5.057312s
           Hash#key?     26.431M (± 0.1%) i/s -    133.150M in   5.037615s

Comparison:
           Hash#key?: 26431245.2 i/s
  Hash#keys.include?:     2227.9 i/s - 11863.51x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    40.769k i/100ms
            Hash#[]=    38.923k i/100ms
Calculating -------------------------------------
         Hash#merge!    380.671k (± 2.4%) i/s -      1.916M in   5.036643s
            Hash#[]=    398.993k (± 3.8%) i/s -      2.024M in   5.080190s

Comparison:
            Hash#[]=:   398993.0 i/s
         Hash#merge!:   380671.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        20.980k i/100ms
      Hash#merge({})    13.252k i/100ms
 Hash#dup#merge!({})    23.229k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        247.756k (± 8.7%) i/s -      1.238M in   5.049342s
      Hash#merge({})    140.815k (± 6.5%) i/s -    702.356k in   5.009834s
 Hash#dup#merge!({})    234.775k (± 3.7%) i/s -      1.185M in   5.053108s

Comparison:
{}#merge!(Hash) do end:   247756.1 i/s
 Hash#dup#merge!({}):   234775.4 i/s - same-ish: difference falls within error
      Hash#merge({}):   140815.1 i/s - 1.76x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   113.638M i/100ms
          Hash#merge   114.249M i/100ms
Calculating -------------------------------------
        Hash#**other      1.136B (± 0.6%) i/s -      5.682B in   4.999976s
          Hash#merge      1.138B (± 0.6%) i/s -      5.712B in   5.018115s

Comparison:
          Hash#merge: 1138402530.8 i/s
        Hash#**other: 1136425375.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   582.000  i/100ms
         Hash#merge!    40.376k i/100ms
Calculating -------------------------------------
          Hash#merge      6.693k (± 8.8%) i/s -     33.174k in   5.017355s
         Hash#merge!    410.289k (± 5.9%) i/s -      2.059M in   5.037818s

Comparison:
         Hash#merge!:   410289.1 i/s
          Hash#merge:     6692.6 i/s - 61.31x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.559M i/100ms
Array#each               1.349M i/100ms
Array#each_w/_object     1.339M i/100ms
Hash#select-include      2.040M i/100ms
Calculating -------------------------------------
Hash#native-slice        15.971M (± 4.3%) i/s -     81.069M in   5.085569s
Array#each               13.763M (± 2.2%) i/s -     68.780M in   4.999924s
Array#each_w/_object     13.779M (± 3.2%) i/s -     69.610M in   5.057457s
Hash#select-include      20.297M (± 3.5%) i/s -    102.024M in   5.032978s

Comparison:
Hash#select-include : 20296623.3 i/s
Hash#native-slice   : 15971414.1 i/s - 1.27x  (± 0.00) slower
Array#each_w/_object: 13778594.7 i/s - 1.47x  (± 0.00) slower
Array#each          : 13762818.9 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   191.000  i/100ms
         Hash#value?   379.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.943k (± 9.9%) i/s -      9.741k in   5.077838s
         Hash#value?      3.792k (± 0.2%) i/s -     19.329k in   5.097332s

Comparison:
         Hash#value?:     3792.0 i/s
Hash#values.include?:     1942.9 i/s - 1.95x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   114.259M i/100ms
                send   113.808M i/100ms
      method_missing   114.251M i/100ms
Calculating -------------------------------------
                call      1.139B (± 0.7%) i/s -      5.713B in   5.013980s
                send      1.137B (± 0.6%) i/s -      5.690B in   5.003749s
      method_missing      1.140B (± 0.6%) i/s -      5.713B in   5.011796s

Comparison:
      method_missing: 1139863687.6 i/s
                call: 1139457763.8 i/s - same-ish: difference falls within error
                send: 1137266102.8 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    29.716k i/100ms
      Symbol#to_proc    33.227k i/100ms
Calculating -------------------------------------
               Block    329.216k (± 7.6%) i/s -      1.634M in   5.005044s
      Symbol#to_proc    337.969k (± 5.0%) i/s -      1.695M in   5.027062s

Comparison:
      Symbol#to_proc:   337969.4 i/s
               Block:   329215.5 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   113.926M i/100ms
       block + yield   113.646M i/100ms
        unused block   114.334M i/100ms
               yield   113.641M i/100ms
Calculating -------------------------------------
          block.call      1.139B (± 0.5%) i/s -      5.810B in   5.099205s
       block + yield      1.139B (± 0.5%) i/s -      5.796B in   5.090859s
        unused block      1.137B (± 0.4%) i/s -      5.717B in   5.029183s
               yield      1.139B (± 0.6%) i/s -      5.796B in   5.089759s

Comparison:
          block.call: 1139461392.7 i/s
               yield: 1138729033.8 i/s - same-ish: difference falls within error
       block + yield: 1138530995.7 i/s - same-ish: difference falls within error
        unused block: 1136728557.5 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    19.025k i/100ms
      range#include?   537.000  i/100ms
       range#member?   885.000  i/100ms
       plain compare    36.753k i/100ms
Calculating -------------------------------------
        range#cover?    154.418k (±16.2%) i/s -    761.000k in   5.055994s
      range#include?      9.454k (±30.3%) i/s -     42.960k in   5.128385s
       range#member?      8.043k (±24.1%) i/s -     38.055k in   5.006795s
       plain compare    383.540k (± 5.3%) i/s -      1.911M in   5.000764s

Comparison:
       plain compare:   383540.0 i/s
        range#cover?:   154417.6 i/s - 2.48x  (± 0.00) slower
      range#include?:     9453.8 i/s - 40.57x  (± 0.00) slower
       range#member?:     8042.9 i/s - 47.69x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    13.809M i/100ms
           String#=~    13.766M i/100ms
          Regexp#===    13.790M i/100ms
        String#match    11.277M i/100ms
Calculating -------------------------------------
       String#match?    138.534M (± 0.0%) i/s -    704.246M in   5.083565s
           String#=~    138.003M (± 0.0%) i/s -    702.041M in   5.087158s
          Regexp#===    130.759M (± 0.8%) i/s -    661.931M in   5.062523s
        String#match    112.680M (± 0.0%) i/s -    563.872M in   5.004197s

Comparison:
       String#match?: 138533924.8 i/s
           String#=~: 138002589.9 i/s - 1.00x  (± 0.00) slower
          Regexp#===: 130758600.0 i/s - 1.06x  (± 0.00) slower
        String#match: 112679904.1 i/s - 1.23x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.334M i/100ms
      String#casecmp     3.496M i/100ms
Calculating -------------------------------------
String#downcase + ==     25.065M (± 7.3%) i/s -    126.034M in   5.068915s
      String#casecmp     37.144M (± 5.5%) i/s -    185.302M in   5.004101s

Comparison:
      String#casecmp: 37144271.9 i/s
String#downcase + ==: 25064528.4 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     8.011M i/100ms
       String#concat     7.654M i/100ms
       String#append     8.135M i/100ms
         "foo" "bar"   113.691M i/100ms
  "#{'foo'}#{'bar'}"   114.001M i/100ms
Calculating -------------------------------------
            String#+     82.220M (± 3.1%) i/s -    416.560M in   5.071298s
       String#concat     82.356M (± 3.2%) i/s -    413.341M in   5.024057s
       String#append     82.431M (± 3.2%) i/s -    414.884M in   5.038492s
         "foo" "bar"      1.140B (± 0.7%) i/s -      5.798B in   5.085135s
  "#{'foo'}#{'bar'}"      1.138B (± 0.5%) i/s -      5.700B in   5.010237s

Comparison:
         "foo" "bar": 1140294167.5 i/s
  "#{'foo'}#{'bar'}": 1137708341.1 i/s - same-ish: difference falls within error
       String#append: 82430943.0 i/s - 13.83x  (± 0.00) slower
       String#concat: 82355930.1 i/s - 13.85x  (± 0.00) slower
            String#+: 82219502.0 i/s - 13.87x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   114.120M i/100ms
          String#dup   114.192M i/100ms
Calculating -------------------------------------
           String#+@      1.136B (± 0.6%) i/s -      5.706B in   5.021870s
          String#dup      1.139B (± 0.7%) i/s -      5.710B in   5.012704s

Comparison:
          String#dup: 1139079488.0 i/s
           String#+@: 1136276348.6 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   782.345k i/100ms
       String#match?     1.046M i/100ms
    String#end_with?    13.071M i/100ms
Calculating -------------------------------------
           String#=~      9.120M (± 2.1%) i/s -     46.158M in   5.063397s
       String#match?      9.604M (± 0.1%) i/s -     48.104M in   5.008518s
    String#end_with?    130.604M (± 0.2%) i/s -    653.561M in   5.004160s

Comparison:
    String#end_with?: 130604294.2 i/s
       String#match?:  9604471.5 i/s - 13.60x  (± 0.00) slower
           String#=~:  9120268.9 i/s - 14.32x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    78.332k i/100ms
          String#sub   655.102k i/100ms
String#dup["string"]=
                         9.037M i/100ms
Calculating -------------------------------------
         String#gsub      5.162M (±12.5%) i/s -     25.066M in   4.998533s
          String#sub      7.701M (± 5.5%) i/s -     38.651M in   5.035891s
String#dup["string"]=
                         90.249M (± 0.3%) i/s -    451.839M in   5.006611s

Comparison:
String#dup["string"]=: 90249279.5 i/s
          String#sub:  7700969.6 i/s - 11.72x  (± 0.00) slower
         String#gsub:  5161949.3 i/s - 17.48x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    54.218k i/100ms
           String#tr   109.519k i/100ms
Calculating -------------------------------------
         String#gsub      2.516M (± 8.4%) i/s -     12.470M in   5.000124s
           String#tr      1.110M (± 2.3%) i/s -      5.585M in   5.036176s

Comparison:
         String#gsub:  2516117.3 i/s
           String#tr:  1109683.3 i/s - 2.27x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   114.797M i/100ms
         With Freeze   113.718M i/100ms
Calculating -------------------------------------
      Without Freeze      1.138B (± 0.7%) i/s -      5.740B in   5.042223s
         With Freeze      1.138B (± 0.5%) i/s -      5.800B in   5.097804s

Comparison:
      Without Freeze: 1138412192.4 i/s
         With Freeze: 1137705294.5 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     6.807k i/100ms
      String#squeeze    27.210k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     98.296k (± 7.7%) i/s -    490.104k in   5.038154s
      String#squeeze    272.197k (± 2.6%) i/s -      1.361M in   5.001841s

Comparison:
      String#squeeze:   272196.5 i/s
 String#gsub/regex+/:    98296.1 i/s - 2.77x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     3.904M i/100ms
       String#match?     5.348M i/100ms
  String#start_with?    10.804M i/100ms
Calculating -------------------------------------
           String#=~     39.861M (± 2.9%) i/s -    199.093M in   4.999158s
       String#match?     53.608M (± 0.4%) i/s -    272.772M in   5.088336s
  String#start_with?    107.933M (± 0.2%) i/s -    540.184M in   5.004837s

Comparison:
  String#start_with?: 107932961.2 i/s
       String#match?: 53608025.1 i/s - 2.01x  (± 0.00) slower
           String#=~: 39860939.2 i/s - 2.71x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    91.785k i/100ms
    String#[0, n] ==   231.025k i/100ms
   String#[RANGE] ==   315.210k i/100ms
   String#[0...n] ==   218.636k i/100ms
Calculating -------------------------------------
  String#start_with?      4.458M (± 0.9%) i/s -     22.304M in   5.003091s
    String#[0, n] ==      2.453M (± 2.3%) i/s -     12.475M in   5.088946s
   String#[RANGE] ==      3.174M (± 3.0%) i/s -     16.076M in   5.069711s
   String#[0...n] ==      2.174M (± 2.4%) i/s -     10.932M in   5.031015s

Comparison:
  String#start_with?:  4458367.5 i/s
   String#[RANGE] ==:  3173835.7 i/s - 1.40x  (± 0.00) slower
    String#[0, n] ==:  2452780.7 i/s - 1.82x  (± 0.00) slower
   String#[0...n] ==:  2174187.4 i/s - 2.05x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     9.184M i/100ms
 String#sub!'string'   144.271k i/100ms
String#gsub!'string'   539.788k i/100ms
  String#[/regexp/]=     2.132M i/100ms
 String#sub!/regexp/   711.048k i/100ms
String#gsub!/regexp/   485.228k i/100ms
Calculating -------------------------------------
  String#['string']=     91.987M (± 0.1%) i/s -    468.405M in   5.092090s
 String#sub!'string'      7.478M (±20.7%) i/s -     34.192M in   5.012574s
String#gsub!'string'      5.468M (± 3.9%) i/s -     27.529M in   5.042989s
  String#[/regexp/]=     21.765M (± 3.7%) i/s -    110.851M in   5.100588s
 String#sub!/regexp/      8.158M (± 9.6%) i/s -     40.530M in   5.028940s
String#gsub!/regexp/      6.312M (± 7.3%) i/s -     31.540M in   5.026924s

Comparison:
  String#['string']=: 91986875.0 i/s
  String#[/regexp/]=: 21764719.6 i/s - 4.23x  (± 0.00) slower
 String#sub!/regexp/:  8157921.8 i/s - 11.28x  (± 0.00) slower
 String#sub!'string':  7478272.0 i/s - 12.30x  (± 0.00) slower
String#gsub!/regexp/:  6311563.9 i/s - 14.57x  (± 0.00) slower
String#gsub!'string':  5468214.0 i/s - 16.82x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub    90.417k i/100ms
        String#chomp     4.682M i/100ms
String#delete_suffix     9.649M i/100ms
Calculating -------------------------------------
          String#sub     24.285M (± 7.2%) i/s -    120.074M in   4.994961s
        String#chomp     46.791M (± 0.2%) i/s -    234.099M in   5.003131s
String#delete_suffix     96.920M (± 4.8%) i/s -    492.119M in   5.089793s

Comparison:
String#delete_suffix: 96919611.2 i/s
        String#chomp: 46790690.3 i/s - 2.07x  (± 0.00) slower
          String#sub: 24285314.9 i/s - 3.99x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   114.265M i/100ms
          String#sub   187.907k i/100ms
Calculating -------------------------------------
String#delete_prefix      1.139B (± 1.0%) i/s -      5.713B in   5.016128s
          String#sub    146.949M (± 0.8%) i/s -    733.965M in   4.995194s

Comparison:
String#delete_prefix: 1139095149.3 i/s
          String#sub: 146949119.3 i/s - 7.75x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.562M i/100ms
    String#unpack[0]     1.596M i/100ms
Calculating -------------------------------------
      String#unpack1     15.669M (± 6.3%) i/s -     79.657M in   5.115895s
    String#unpack[0]     15.933M (± 2.2%) i/s -     79.818M in   5.012052s

Comparison:
    String#unpack[0]: 15932905.9 i/s
      String#unpack1: 15668941.7 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 23.1.0-dev-f9395b14, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    19.957k i/100ms
          Time.parse   252.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    348.085k (±13.1%) i/s -      1.716M in   5.016397s
          Time.parse     11.122k (±16.9%) i/s -     49.140k in   5.011878s

Comparison:
        Time.iso8601:   348084.7 i/s
          Time.parse:    11122.4 i/s - 31.30x  (± 0.00) slower

