$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       238.614M i/100ms
Function with splat arguments
                       728.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          2.387B (± 0.3%) i/s -     12.169B in   5.097345s
Function with splat arguments
                          7.472k (± 6.9%) i/s -     37.128k in   5.006079s

Comparison:
Function with single Array argument: 2387395954.4 i/s
Function with splat arguments:     7472.3 i/s - 319498.33x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   238.660M i/100ms
Sequential Assignment
                       238.214M i/100ms
Calculating -------------------------------------
 Parallel Assignment      2.384B (± 0.4%) i/s -     11.933B in   5.005817s
Sequential Assignment
                          2.388B (± 0.2%) i/s -     12.149B in   5.087547s

Comparison:
Sequential Assignment: 2387984218.6 i/s
 Parallel Assignment: 2383857047.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   238.317M i/100ms
       attr_accessor   238.637M i/100ms
Calculating -------------------------------------
   getter_and_setter      2.387B (± 0.3%) i/s -     12.154B in   5.092757s
       attr_accessor      2.388B (± 0.3%) i/s -     12.170B in   5.096197s

Comparison:
       attr_accessor: 2388166796.2 i/s
   getter_and_setter: 2386585443.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     7.944k i/100ms
         respond_to?   238.496M i/100ms
Calculating -------------------------------------
      begin...rescue     50.815k (± 6.6%) i/s -    254.208k in   5.035596s
         respond_to?      2.386B (± 0.6%) i/s -     12.163B in   5.098054s

Comparison:
         respond_to?: 2385975543.6 i/s
      begin...rescue:    50815.0 i/s - 46954.19x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   237.947M i/100ms
             &method   238.281M i/100ms
Calculating -------------------------------------
              normal      2.385B (± 0.4%) i/s -     12.135B in   5.088529s
             &method      2.388B (± 0.2%) i/s -     12.152B in   5.088867s

Comparison:
             &method: 2388035260.7 i/s
              normal: 2384877768.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        97.000  i/100ms
       define_method   132.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.688k (±55.9%) i/s -      4.656k in   5.003748s
       define_method      3.809k (±53.8%) i/s -      6.600k in   6.507437s

Comparison:
       define_method:     3809.3 i/s
module_eval with string:     1688.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    75.876k i/100ms
       Kernel#format    67.643k i/100ms
            String#%    68.602k i/100ms
Calculating -------------------------------------
         Float#round    825.319k (± 2.2%) i/s -      4.173M in   5.058931s
       Kernel#format    696.280k (± 2.1%) i/s -      3.517M in   5.053942s
            String#%    691.602k (± 2.0%) i/s -      3.499M in   5.060857s

Comparison:
         Float#round:   825319.0 i/s
       Kernel#format:   696279.6 i/s - 1.19x  (± 0.00) slower
            String#%:   691602.3 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   238.679M i/100ms
          OpenStruct   238.419M i/100ms
Calculating -------------------------------------
                Hash      2.383B (± 0.6%) i/s -     11.934B in   5.007450s
          OpenStruct      2.389B (± 0.2%) i/s -     12.159B in   5.090740s

Comparison:
          OpenStruct: 2388534049.3 i/s
                Hash: 2383313950.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   238.627M i/100ms
          OpenStruct     2.779k i/100ms
Calculating -------------------------------------
                Hash      2.381B (± 0.5%) i/s -     11.931B in   5.011374s
          OpenStruct     28.775k (±10.7%) i/s -    141.729k in   5.001882s

Comparison:
                Hash: 2380904870.3 i/s
          OpenStruct:    28774.6 i/s - 82743.14x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   696.890k i/100ms
  ancestors.include?   141.347k i/100ms
Calculating -------------------------------------
  less than or equal      7.685M (± 2.7%) i/s -     39.026M in   5.082029s
  ancestors.include?      1.413M (± 7.4%) i/s -      7.067M in   5.047747s

Comparison:
  less than or equal:  7685037.4 i/s
  ancestors.include?:  1412951.4 i/s - 5.44x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     23.865  (± 0.0%) i/s -    120.000  in   5.028523s
         Kernel loop     23.880  (± 0.0%) i/s -    120.000  in   5.025118s

Comparison:
         Kernel loop:       23.9 i/s
          While Loop:       23.9 i/s - 1.00x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   238.483M i/100ms
         Array#first   238.249M i/100ms
Calculating -------------------------------------
           Array#[0]      2.387B (± 0.3%) i/s -     12.163B in   5.095016s
         Array#first      2.387B (± 0.3%) i/s -     12.151B in   5.089790s

Comparison:
         Array#first: 2387299578.9 i/s
           Array#[0]: 2387180653.4 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   238.566M i/100ms
          Array#last   238.280M i/100ms
Calculating -------------------------------------
          Array#[-1]      2.386B (± 0.3%) i/s -     12.167B in   5.098467s
          Array#last      2.388B (± 0.2%) i/s -     12.152B in   5.087944s

Comparison:
          Array#last: 2388454039.3 i/s
          Array#[-1]: 2386396905.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   521.320k i/100ms
Calculating -------------------------------------
                find      6.694  (±29.9%) i/s -     13.000  in   5.045168s
             bsearch      5.382M (± 3.4%) i/s -     27.109M in   5.042997s

Comparison:
             bsearch:  5381655.9 i/s
                find:        6.7 i/s - 803989.46x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.125  (± 0.0%) i/s -      1.000  in   8.008034s
        Array#insert      0.944  (± 0.0%) i/s -      5.000  in   5.295021s

Comparison:
        Array#insert:        0.9 i/s
       Array#unshift:        0.1 i/s - 7.56x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   238.455M i/100ms
          Array#size   238.496M i/100ms
         Array#count   239.043M i/100ms
Calculating -------------------------------------
        Array#length      2.387B (± 0.3%) i/s -     12.161B in   5.094851s
          Array#size      2.388B (± 0.2%) i/s -     12.163B in   5.093289s
         Array#count      2.388B (± 0.3%) i/s -     11.952B in   5.004791s

Comparison:
         Array#count: 2388156782.8 i/s
          Array#size: 2388113818.4 i/s - same-ish: difference falls within error
        Array#length: 2386979932.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    24.489k i/100ms
        Array#sample     2.848M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    255.013k (± 2.0%) i/s -      1.298M in   5.091811s
        Array#sample     28.459M (± 0.1%) i/s -    142.402M in   5.003767s

Comparison:
        Array#sample: 28458924.2 i/s
 Array#shuffle.first:   255013.3 i/s - 111.60x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   400.000  i/100ms
          Date.parse   626.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     27.129k (±38.6%) i/s -    105.600k in   4.998599s
          Date.parse     12.552k (±26.0%) i/s -     57.592k in   5.077440s

Comparison:
        Date.iso8601:    27129.2 i/s
          Date.parse:    12552.1 i/s - 2.16x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   141.323k i/100ms
           Array#map   482.819k i/100ms
Calculating -------------------------------------
   Array#each + push      1.427M (± 3.6%) i/s -      7.207M in   5.056572s
           Array#map      5.289M (± 5.6%) i/s -     26.555M in   5.037606s

Comparison:
           Array#map:  5288613.0 i/s
   Array#each + push:  1427168.3 i/s - 3.71x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     9.733M i/100ms
               #each    45.963M i/100ms
Calculating -------------------------------------
            For loop     99.392M (± 0.4%) i/s -    506.125M in   5.092264s
               #each    459.411M (± 0.2%) i/s -      2.298B in   5.002352s

Comparison:
               #each: 459411498.3 i/s
            For loop: 99392379.6 i/s - 4.62x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   909.719k i/100ms
     each_with_index     1.267M i/100ms
Calculating -------------------------------------
          While Loop      9.157M (± 0.2%) i/s -     46.396M in   5.066576s
     each_with_index     12.893M (± 0.3%) i/s -     64.632M in   5.012885s

Comparison:
     each_with_index: 12893238.5 i/s
          While Loop:  9157244.7 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   144.338k i/100ms
      inject to_proc   147.199k i/100ms
        inject block   147.196k i/100ms
Calculating -------------------------------------
       inject symbol      1.471M (± 0.2%) i/s -      7.361M in   5.005017s
      inject to_proc      1.472M (± 0.1%) i/s -      7.360M in   5.001079s
        inject block      1.471M (± 0.1%) i/s -      7.360M in   5.002800s

Comparison:
      inject to_proc:  1471675.4 i/s
        inject block:  1471139.1 i/s - same-ish: difference falls within error
       inject symbol:  1470780.2 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     9.745k i/100ms
   Array#map.flatten    11.025k i/100ms
      Array#flat_map    30.023k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    109.974k (± 3.2%) i/s -    555.465k in   5.056073s
   Array#map.flatten    110.110k (± 2.6%) i/s -    551.250k in   5.009789s
      Array#flat_map    301.300k (± 2.2%) i/s -      1.531M in   5.084263s

Comparison:
      Array#flat_map:   301299.9 i/s
   Array#map.flatten:   110109.7 i/s - 2.74x  (± 0.00) slower
Array#map.flatten(1):   109973.6 i/s - 2.74x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   157.685k i/100ms
  Array#reverse_each     1.946M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.850M (± 3.2%) i/s -      9.303M in   5.035014s
  Array#reverse_each     19.350M (± 0.4%) i/s -     97.281M in   5.027432s

Comparison:
  Array#reverse_each: 19350312.0 i/s
  Array#reverse.each:  1849663.2 i/s - 10.46x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       536.916k i/100ms
   Enumerable#detect     3.735M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          5.736M (± 7.1%) i/s -    113.826M in  20.010650s
   Enumerable#detect     37.335M (± 0.1%) i/s -    746.973M in  20.007425s

Comparison:
   Enumerable#detect: 37334894.9 i/s
Enumerable#select.first:  5735600.0 i/s - 6.51x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       182.901k i/100ms
Enumerable#select.last
                       369.102k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.831M (± 6.6%) i/s -      9.328M in   5.131710s
Enumerable#select.last
                          3.609M (± 6.7%) i/s -     18.086M in   5.048275s

Comparison:
Enumerable#select.last:  3609130.0 i/s
Enumerable#reverse.detect:  1830796.5 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.487k i/100ms
  Enumerable#sort_by     2.538k i/100ms
     Enumerable#sort   173.000  i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         25.713k (±10.1%) i/s -    126.837k in   5.017034s
  Enumerable#sort_by     24.604k (±10.5%) i/s -    121.824k in   5.055255s
     Enumerable#sort     36.360k (± 2.8%) i/s -    181.477k in   5.001506s

Comparison:
     Enumerable#sort:    36359.7 i/s
Enumerable#sort_by (Symbol#to_proc):    25712.9 i/s - 1.41x  (± 0.00) slower
  Enumerable#sort_by:    24603.8 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   519.733k i/100ms
Enumerable#sort_by...first
                         4.807k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      5.239M (± 0.2%) i/s -     26.506M in   5.059464s
Enumerable#sort_by...first
                         61.488k (± 2.4%) i/s -    307.648k in   5.006324s

Comparison:
   Enumerable#min_by:  5238995.9 i/s
Enumerable#sort_by...first:    61488.0 i/s - 85.20x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   179.507k i/100ms
            Hash#dup   191.826k i/100ms
Calculating -------------------------------------
              Hash[]      2.008M (± 3.0%) i/s -     10.052M in   5.011894s
            Hash#dup      1.923M (± 2.6%) i/s -      9.783M in   5.091963s

Comparison:
              Hash[]:  2007539.4 i/s
            Hash#dup:  1922607.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   238.754M i/100ms
  Hash#fetch, symbol   238.634M i/100ms
     Hash#[], string     2.477M i/100ms
  Hash#fetch, string     2.446M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      2.387B (± 0.3%) i/s -     11.938B in   5.001016s
  Hash#fetch, symbol      2.389B (± 0.2%) i/s -     12.170B in   5.094792s
     Hash#[], string    157.030M (± 0.4%) i/s -    785.210M in   5.000481s
  Hash#fetch, string    165.902M (± 0.4%) i/s -    831.705M in   5.013327s

Comparison:
  Hash#fetch, symbol: 2388791815.2 i/s
     Hash#[], symbol: 2387070768.8 i/s - same-ish: difference falls within error
  Hash#fetch, string: 165902143.3 i/s - 14.40x  (± 0.00) slower
     Hash#[], string: 157030068.2 i/s - 15.21x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    49.718M i/100ms
             Hash#[]    49.750M i/100ms
          Hash#[] ||    49.748M i/100ms
          Hash#[] &&    49.789M i/100ms
          Hash#fetch    49.798M i/100ms
 Hash#fetch fallback    49.800M i/100ms
Calculating -------------------------------------
            Hash#dig    497.467M (± 0.2%) i/s -      2.536B in   5.097088s
             Hash#[]    497.426M (± 0.4%) i/s -      2.488B in   5.000847s
          Hash#[] ||    497.540M (± 0.2%) i/s -      2.537B in   5.099448s
          Hash#[] &&    497.560M (± 0.2%) i/s -      2.489B in   5.003307s
          Hash#fetch    497.596M (± 0.2%) i/s -      2.490B in   5.003833s
 Hash#fetch fallback    497.739M (± 0.2%) i/s -      2.490B in   5.002632s

Comparison:
 Hash#fetch fallback: 497739097.9 i/s
          Hash#fetch: 497595839.1 i/s - same-ish: difference falls within error
          Hash#[] &&: 497560301.3 i/s - same-ish: difference falls within error
          Hash#[] ||: 497540432.6 i/s - same-ish: difference falls within error
            Hash#dig: 497467202.7 i/s - same-ish: difference falls within error
             Hash#[]: 497426298.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   238.580M i/100ms
  Hash#fetch + block   238.355M i/100ms
    Hash#fetch + arg   239.050M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      2.385B (± 0.4%) i/s -     11.929B in   5.001600s
  Hash#fetch + block      2.386B (± 0.4%) i/s -     12.156B in   5.094255s
    Hash#fetch + arg      2.388B (± 0.2%) i/s -     11.952B in   5.004653s

Comparison:
    Hash#fetch + arg: 2388289618.1 i/s
  Hash#fetch + block: 2386273692.3 i/s - same-ish: difference falls within error
  Hash#fetch + const: 2385076709.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    17.075k i/100ms
         sort + to_h     9.557k i/100ms
Calculating -------------------------------------
      sort_by + to_h    273.664k (± 8.0%) i/s -      1.366M in   5.053477s
         sort + to_h    113.739k (± 3.5%) i/s -    573.420k in   5.047630s

Comparison:
      sort_by + to_h:   273663.8 i/s
         sort + to_h:   113738.7 i/s - 2.41x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   130.550k i/100ms
       Hash#each_key   151.319k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.371M (±10.7%) i/s -      6.789M in   5.078749s
       Hash#each_key      1.503M (± 2.6%) i/s -      7.566M in   5.038329s

Comparison:
       Hash#each_key:  1502715.9 i/s
      Hash#keys.each:  1370959.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   193.000  i/100ms
           Hash#key?     2.369M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      2.170k (±10.5%) i/s -     10.808k in   5.056822s
           Hash#key?     23.726M (± 0.1%) i/s -    120.815M in   5.092082s

Comparison:
           Hash#key?: 23726135.8 i/s
  Hash#keys.include?:     2170.4 i/s - 10931.50x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    20.707k i/100ms
            Hash#[]=    20.992k i/100ms
Calculating -------------------------------------
         Hash#merge!    214.692k (± 2.9%) i/s -      1.077M in   5.019587s
            Hash#[]=    211.573k (± 2.4%) i/s -      1.071M in   5.063160s

Comparison:
         Hash#merge!:   214692.3 i/s
            Hash#[]=:   211572.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         9.951k i/100ms
      Hash#merge({})     6.743k i/100ms
 Hash#dup#merge!({})    12.432k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        116.276k (± 3.6%) i/s -    587.109k in   5.055770s
      Hash#merge({})     72.743k (± 3.2%) i/s -    364.122k in   5.010734s
 Hash#dup#merge!({})    123.545k (± 2.2%) i/s -    621.600k in   5.033823s

Comparison:
 Hash#dup#merge!({}):   123544.7 i/s
{}#merge!(Hash) do end:   116275.8 i/s - 1.06x  (± 0.00) slower
      Hash#merge({}):    72743.5 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   238.540M i/100ms
          Hash#merge   238.354M i/100ms
Calculating -------------------------------------
        Hash#**other      2.386B (± 0.4%) i/s -     11.927B in   4.999735s
          Hash#merge      2.388B (± 0.3%) i/s -     12.156B in   5.090072s

Comparison:
          Hash#merge: 2388206346.7 i/s
        Hash#**other: 2385561879.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   266.000  i/100ms
         Hash#merge!    20.973k i/100ms
Calculating -------------------------------------
          Hash#merge      2.929k (± 7.1%) i/s -     14.630k in   5.038005s
         Hash#merge!    213.932k (± 2.2%) i/s -      1.070M in   5.002318s

Comparison:
         Hash#merge!:   213931.6 i/s
          Hash#merge:     2928.7 i/s - 73.05x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.153M i/100ms
Array#each             959.450k i/100ms
Array#each_w/_object   968.990k i/100ms
Hash#select-include      1.426M i/100ms
Calculating -------------------------------------
Hash#native-slice        11.571M (± 2.6%) i/s -     58.817M in   5.086597s
Array#each                9.601M (± 2.3%) i/s -     48.932M in   5.099376s
Array#each_w/_object      9.528M (± 3.0%) i/s -     48.450M in   5.089425s
Hash#select-include      14.924M (± 2.1%) i/s -     75.596M in   5.067694s

Comparison:
Hash#select-include : 14923969.0 i/s
Hash#native-slice   : 11570860.7 i/s - 1.29x  (± 0.00) slower
Array#each          :  9600588.1 i/s - 1.55x  (± 0.00) slower
Array#each_w/_object:  9528215.8 i/s - 1.57x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   188.000  i/100ms
         Hash#value?   399.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.943k (±11.8%) i/s -      9.588k in   5.022134s
         Hash#value?      4.011k (± 0.3%) i/s -     20.349k in   5.073407s

Comparison:
         Hash#value?:     4010.9 i/s
Hash#values.include?:     1942.8 i/s - 2.06x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   238.178M i/100ms
                send   238.200M i/100ms
      method_missing   239.007M i/100ms
Calculating -------------------------------------
                call      2.386B (± 0.3%) i/s -     12.147B in   5.090992s
                send      2.387B (± 0.4%) i/s -     12.148B in   5.089760s
      method_missing      2.389B (± 0.2%) i/s -     11.950B in   5.002546s

Comparison:
      method_missing: 2388860993.7 i/s
                send: 2386828827.8 i/s - same-ish: difference falls within error
                call: 2386020095.7 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    13.046k i/100ms
      Symbol#to_proc    13.177k i/100ms
Calculating -------------------------------------
               Block    136.116k (± 6.8%) i/s -    678.392k in   5.022061s
      Symbol#to_proc    139.903k (± 2.4%) i/s -    711.558k in   5.088997s

Comparison:
      Symbol#to_proc:   139903.3 i/s
               Block:   136116.4 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   238.585M i/100ms
       block + yield   238.801M i/100ms
        unused block   239.025M i/100ms
               yield   238.990M i/100ms
Calculating -------------------------------------
          block.call      2.388B (± 0.3%) i/s -     12.168B in   5.095709s
       block + yield      2.388B (± 0.2%) i/s -     12.179B in   5.099611s
        unused block      2.388B (± 0.3%) i/s -     11.951B in   5.005377s
               yield      2.388B (± 0.3%) i/s -     11.949B in   5.004794s

Comparison:
       block + yield: 2388205964.3 i/s
          block.call: 2387872540.5 i/s - same-ish: difference falls within error
        unused block: 2387704576.5 i/s - same-ish: difference falls within error
               yield: 2387631986.2 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    14.755k i/100ms
      range#include?   383.000  i/100ms
       range#member?   721.000  i/100ms
       plain compare    25.215k i/100ms
Calculating -------------------------------------
        range#cover?    129.947k (±10.5%) i/s -    649.220k in   5.053054s
      range#include?      7.838k (±29.6%) i/s -     35.619k in   5.015491s
       range#member?      6.535k (±14.8%) i/s -     32.445k in   5.098247s
       plain compare    327.792k (± 6.5%) i/s -      1.639M in   5.024201s

Comparison:
       plain compare:   327791.7 i/s
        range#cover?:   129946.8 i/s - 2.52x  (± 0.00) slower
      range#include?:     7838.4 i/s - 41.82x  (± 0.00) slower
       range#member?:     6534.8 i/s - 50.16x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    13.463M i/100ms
           String#=~    11.951M i/100ms
          Regexp#===    11.952M i/100ms
        String#match    11.488M i/100ms
Calculating -------------------------------------
       String#match?    135.646M (± 0.2%) i/s -    686.606M in   5.061780s
           String#=~    119.480M (± 0.1%) i/s -    597.542M in   5.001194s
          Regexp#===    119.392M (± 0.4%) i/s -    597.583M in   5.005276s
        String#match    114.870M (± 0.1%) i/s -    574.383M in   5.000289s

Comparison:
       String#match?: 135645814.5 i/s
           String#=~: 119480018.8 i/s - 1.14x  (± 0.00) slower
          Regexp#===: 119392408.3 i/s - 1.14x  (± 0.00) slower
        String#match: 114870276.6 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.303M i/100ms
      String#casecmp     2.365M i/100ms
Calculating -------------------------------------
String#downcase + ==     14.935M (± 3.3%) i/s -     75.579M in   5.066388s
      String#casecmp     23.772M (± 3.1%) i/s -    120.612M in   5.078544s

Comparison:
      String#casecmp: 23772137.0 i/s
String#downcase + ==: 14934754.7 i/s - 1.59x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     6.565M i/100ms
       String#concat     7.167M i/100ms
       String#append     7.435M i/100ms
         "foo" "bar"   238.992M i/100ms
  "#{'foo'}#{'bar'}"   239.047M i/100ms
Calculating -------------------------------------
            String#+     73.695M (± 2.7%) i/s -    374.206M in   5.081531s
       String#concat     72.450M (± 2.9%) i/s -    365.529M in   5.049627s
       String#append     73.490M (± 3.0%) i/s -    371.727M in   5.062757s
         "foo" "bar"      2.385B (± 0.7%) i/s -     11.950B in   5.010964s
  "#{'foo'}#{'bar'}"      2.389B (± 0.2%) i/s -     11.952B in   5.004127s

Comparison:
  "#{'foo'}#{'bar'}": 2388509151.3 i/s
         "foo" "bar": 2384811272.8 i/s - same-ish: difference falls within error
            String#+: 73694823.0 i/s - 32.41x  (± 0.00) slower
       String#append: 73490230.7 i/s - 32.50x  (± 0.00) slower
       String#concat: 72449767.8 i/s - 32.97x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   238.197M i/100ms
          String#dup   238.326M i/100ms
Calculating -------------------------------------
           String#+@      2.386B (± 0.3%) i/s -     12.148B in   5.090485s
          String#dup      2.387B (± 0.3%) i/s -     12.155B in   5.091299s

Comparison:
          String#dup: 2387353890.0 i/s
           String#+@: 2386438470.5 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   684.292k i/100ms
       String#match?     1.170M i/100ms
    String#end_with?    13.577M i/100ms
Calculating -------------------------------------
           String#=~      8.802M (± 2.4%) i/s -     44.479M in   5.056325s
       String#match?     11.183M (± 0.2%) i/s -     56.157M in   5.021390s
    String#end_with?    135.705M (± 0.2%) i/s -    678.846M in   5.002405s

Comparison:
    String#end_with?: 135704623.7 i/s
       String#match?: 11183499.7 i/s - 12.13x  (± 0.00) slower
           String#=~:  8802202.7 i/s - 15.42x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    44.893k i/100ms
          String#sub   392.217k i/100ms
String#dup["string"]=
                         8.913M i/100ms
Calculating -------------------------------------
         String#gsub      3.815M (±10.4%) i/s -     18.586M in   5.000781s
          String#sub      4.030M (± 4.0%) i/s -     20.395M in   5.068899s
String#dup["string"]=
                         89.077M (± 0.4%) i/s -    445.660M in   5.003145s

Comparison:
String#dup["string"]=: 89077188.4 i/s
          String#sub:  4030165.0 i/s - 22.10x  (± 0.00) slower
         String#gsub:  3814955.8 i/s - 23.35x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    43.737k i/100ms
           String#tr    83.034k i/100ms
Calculating -------------------------------------
         String#gsub      1.566M (± 7.5%) i/s -      7.785M in   5.004210s
           String#tr    856.648k (± 3.3%) i/s -      4.318M in   5.045834s

Comparison:
         String#gsub:  1566143.4 i/s
           String#tr:   856648.3 i/s - 1.83x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   238.060M i/100ms
         With Freeze   238.202M i/100ms
Calculating -------------------------------------
      Without Freeze      2.386B (± 0.3%) i/s -     12.141B in   5.088826s
         With Freeze      2.388B (± 0.3%) i/s -     12.148B in   5.088214s

Comparison:
         With Freeze: 2387555445.9 i/s
      Without Freeze: 2385852215.9 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     4.041k i/100ms
      String#squeeze    27.045k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     51.175k (± 7.0%) i/s -    254.583k in   5.017937s
      String#squeeze    270.822k (± 2.3%) i/s -      1.379M in   5.095877s

Comparison:
      String#squeeze:   270822.4 i/s
 String#gsub/regex+/:    51175.4 i/s - 5.29x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.193M i/100ms
       String#match?     4.566M i/100ms
  String#start_with?    10.666M i/100ms
Calculating -------------------------------------
           String#=~     32.177M (± 4.2%) i/s -    161.008M in   5.013897s
       String#match?     46.606M (± 1.3%) i/s -    237.442M in   5.095540s
  String#start_with?    106.527M (± 0.3%) i/s -    533.320M in   5.006467s

Comparison:
  String#start_with?: 106527436.3 i/s
       String#match?: 46605823.2 i/s - 2.29x  (± 0.00) slower
           String#=~: 32177023.1 i/s - 3.31x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    96.007k i/100ms
    String#[0, n] ==   210.691k i/100ms
   String#[RANGE] ==   301.808k i/100ms
   String#[0...n] ==   187.464k i/100ms
Calculating -------------------------------------
  String#start_with?      4.693M (± 0.1%) i/s -     23.522M in   5.012261s
    String#[0, n] ==      2.133M (± 3.2%) i/s -     10.745M in   5.042955s
   String#[RANGE] ==      3.044M (± 2.6%) i/s -     15.392M in   5.060138s
   String#[0...n] ==      1.905M (± 3.0%) i/s -      9.561M in   5.023319s

Comparison:
  String#start_with?:  4692840.1 i/s
   String#[RANGE] ==:  3044076.4 i/s - 1.54x  (± 0.00) slower
    String#[0, n] ==:  2132987.3 i/s - 2.20x  (± 0.00) slower
   String#[0...n] ==:  1905030.9 i/s - 2.46x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     9.035M i/100ms
 String#sub!'string'    83.049k i/100ms
String#gsub!'string'   337.704k i/100ms
  String#[/regexp/]=     1.332M i/100ms
 String#sub!/regexp/   469.407k i/100ms
String#gsub!/regexp/   354.646k i/100ms
Calculating -------------------------------------
  String#['string']=     90.498M (± 0.1%) i/s -    460.779M in   5.091593s
 String#sub!'string'      4.441M (±19.7%) i/s -     20.679M in   5.002948s
String#gsub!'string'      3.654M (± 5.7%) i/s -     18.236M in   5.008445s
  String#[/regexp/]=     13.472M (± 2.7%) i/s -     67.922M in   5.045638s
 String#sub!/regexp/      4.791M (± 4.9%) i/s -     23.940M in   5.009025s
String#gsub!/regexp/      4.174M (± 6.0%) i/s -     20.924M in   5.032165s

Comparison:
  String#['string']=: 90498066.3 i/s
  String#[/regexp/]=: 13471716.5 i/s - 6.72x  (± 0.00) slower
 String#sub!/regexp/:  4791071.9 i/s - 18.89x  (± 0.00) slower
 String#sub!'string':  4441454.8 i/s - 20.38x  (± 0.00) slower
String#gsub!/regexp/:  4174196.5 i/s - 21.68x  (± 0.00) slower
String#gsub!'string':  3653666.5 i/s - 24.77x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub    74.651k i/100ms
        String#chomp     4.517M i/100ms
String#delete_suffix     3.833M i/100ms
Calculating -------------------------------------
          String#sub     18.530M (± 8.6%) i/s -     91.298M in   4.999475s
        String#chomp     45.213M (± 0.2%) i/s -    230.368M in   5.095217s
String#delete_suffix     37.208M (± 6.6%) i/s -    187.824M in   5.083798s

Comparison:
        String#chomp: 45212813.5 i/s
String#delete_suffix: 37208219.0 i/s - 1.22x  (± 0.00) slower
          String#sub: 18530364.4 i/s - 2.44x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   238.550M i/100ms
          String#sub    91.342k i/100ms
Calculating -------------------------------------
String#delete_prefix      2.387B (± 0.3%) i/s -     12.166B in   5.097257s
          String#sub    124.027M (± 1.0%) i/s -    619.481M in   4.995259s

Comparison:
String#delete_prefix: 2386801797.0 i/s
          String#sub: 124027061.1 i/s - 19.24x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.225M i/100ms
    String#unpack[0]     1.297M i/100ms
Calculating -------------------------------------
      String#unpack1     13.364M (± 3.0%) i/s -     67.354M in   5.044431s
    String#unpack[0]     13.426M (± 3.0%) i/s -     67.457M in   5.029126s

Comparison:
    String#unpack[0]: 13425835.2 i/s
      String#unpack1: 13363913.8 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 23.0.0-dev-4edc01dc, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    16.733k i/100ms
          Time.parse   204.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    257.807k (±12.4%) i/s -      1.272M in   5.006685s
          Time.parse      8.714k (±17.5%) i/s -     37.536k in   5.009998s

Comparison:
        Time.iso8601:   257807.4 i/s
          Time.parse:     8713.8 i/s - 29.59x  (± 0.00) slower

