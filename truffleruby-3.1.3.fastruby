$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       238.373M i/100ms
Function with splat arguments
                       324.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          2.385B (± 0.4%) i/s -     12.157B in   5.097253s
Function with splat arguments
                          3.404k (±15.0%) i/s -     16.524k in   5.054656s

Comparison:
Function with single Array argument: 2385042299.7 i/s
Function with splat arguments:     3403.6 i/s - 700748.41x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   238.583M i/100ms
Sequential Assignment
                       238.490M i/100ms
Calculating -------------------------------------
 Parallel Assignment      2.382B (± 0.5%) i/s -     11.929B in   5.008629s
Sequential Assignment
                          2.387B (± 0.3%) i/s -     12.163B in   5.095626s

Comparison:
Sequential Assignment: 2386969868.9 i/s
 Parallel Assignment: 2381789176.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   238.697M i/100ms
       attr_accessor   238.462M i/100ms
Calculating -------------------------------------
   getter_and_setter      2.382B (± 0.5%) i/s -     11.935B in   5.009686s
       attr_accessor      2.386B (± 0.3%) i/s -     12.162B in   5.096399s

Comparison:
       attr_accessor: 2386322026.7 i/s
   getter_and_setter: 2382412282.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     8.515k i/100ms
         respond_to?   238.535M i/100ms
Calculating -------------------------------------
      begin...rescue     55.475k (± 6.4%) i/s -    280.995k in   5.095465s
         respond_to?      2.386B (± 0.3%) i/s -     12.165B in   5.098019s

Comparison:
         respond_to?: 2386297274.0 i/s
      begin...rescue:    55474.8 i/s - 43015.88x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   238.473M i/100ms
             &method   238.555M i/100ms
Calculating -------------------------------------
              normal      2.382B (± 0.5%) i/s -     11.924B in   5.005594s
             &method      2.387B (± 0.3%) i/s -     12.166B in   5.097441s

Comparison:
             &method: 2386769672.0 i/s
              normal: 2382127491.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       103.000  i/100ms
       define_method   132.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.795k (±50.5%) i/s -      5.150k in   5.020536s
       define_method      4.006k (±53.6%) i/s -      7.524k in   5.057166s

Comparison:
       define_method:     4006.3 i/s
module_eval with string:     1795.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    79.368k i/100ms
       Kernel#format    66.884k i/100ms
            String#%    66.937k i/100ms
Calculating -------------------------------------
         Float#round    794.334k (± 3.3%) i/s -      3.968M in   5.001894s
       Kernel#format    683.597k (± 2.2%) i/s -      3.478M in   5.090194s
            String#%    683.044k (± 2.1%) i/s -      3.414M in   5.000066s

Comparison:
         Float#round:   794334.2 i/s
       Kernel#format:   683596.6 i/s - 1.16x  (± 0.00) slower
            String#%:   683043.5 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   238.733M i/100ms
          OpenStruct   238.548M i/100ms
Calculating -------------------------------------
                Hash      2.382B (± 0.8%) i/s -     11.937B in   5.012121s
          OpenStruct      2.387B (± 0.3%) i/s -     12.166B in   5.096133s

Comparison:
          OpenStruct: 2387301383.1 i/s
                Hash: 2381732285.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   238.498M i/100ms
          OpenStruct     2.909k i/100ms
Calculating -------------------------------------
                Hash      2.380B (± 0.4%) i/s -     11.925B in   5.009538s
          OpenStruct     29.898k (±10.4%) i/s -    148.359k in   5.041047s

Comparison:
                Hash: 2380476641.6 i/s
          OpenStruct:    29897.7 i/s - 79620.79x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   763.552k i/100ms
  ancestors.include?   134.738k i/100ms
Calculating -------------------------------------
  less than or equal      8.319M (± 2.7%) i/s -     41.995M in   5.051892s
  ancestors.include?      1.459M (± 7.8%) i/s -      7.276M in   5.030556s

Comparison:
  less than or equal:  8318900.6 i/s
  ancestors.include?:  1459266.1 i/s - 5.70x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     23.836  (± 0.0%) i/s -    120.000  in   5.034607s
         Kernel loop     23.864  (± 0.0%) i/s -    120.000  in   5.028753s

Comparison:
         Kernel loop:       23.9 i/s
          While Loop:       23.8 i/s - 1.00x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   238.754M i/100ms
         Array#first   238.501M i/100ms
Calculating -------------------------------------
           Array#[0]      2.384B (± 0.3%) i/s -     11.938B in   5.006475s
         Array#first      2.387B (± 0.2%) i/s -     12.164B in   5.095862s

Comparison:
         Array#first: 2386961148.6 i/s
           Array#[0]: 2384481945.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   238.675M i/100ms
          Array#last   238.815M i/100ms
Calculating -------------------------------------
          Array#[-1]      2.384B (± 0.3%) i/s -     11.934B in   5.005563s
          Array#last      2.387B (± 0.3%) i/s -     11.941B in   5.003443s

Comparison:
          Array#last: 2386530416.4 i/s
          Array#[-1]: 2384120986.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   368.429k i/100ms
Calculating -------------------------------------
                find      7.077  (±28.3%) i/s -     15.000  in   5.086892s
             bsearch      3.749M (± 2.9%) i/s -     18.790M in   5.016555s

Comparison:
             bsearch:  3748856.7 i/s
                find:        7.1 i/s - 529691.16x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.124  (± 0.0%) i/s -      1.000  in   8.084602s
        Array#insert      0.944  (± 0.0%) i/s -      5.000  in   5.297805s

Comparison:
        Array#insert:        0.9 i/s
       Array#unshift:        0.1 i/s - 7.63x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   238.275M i/100ms
          Array#size   238.656M i/100ms
         Array#count   238.388M i/100ms
Calculating -------------------------------------
        Array#length      2.384B (± 0.4%) i/s -     12.152B in   5.097845s
          Array#size      2.387B (± 0.3%) i/s -     11.933B in   4.999975s
         Array#count      2.388B (± 0.2%) i/s -     12.158B in   5.091104s

Comparison:
         Array#count: 2388055435.2 i/s
          Array#size: 2386587517.3 i/s - same-ish: difference falls within error
        Array#length: 2383787594.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    20.260k i/100ms
        Array#sample     2.744M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    223.608k (± 2.0%) i/s -      1.135M in   5.076123s
        Array#sample     27.528M (± 0.1%) i/s -    139.961M in   5.084236s

Comparison:
        Array#sample: 27528495.6 i/s
 Array#shuffle.first:   223608.3 i/s - 123.11x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   421.000  i/100ms
          Date.parse   375.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     49.820k (±34.0%) i/s -    177.241k in   4.985870s
          Date.parse     23.975k (±31.0%) i/s -     87.375k in   4.996613s

Comparison:
        Date.iso8601:    49820.4 i/s
          Date.parse:    23974.5 i/s - 2.08x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   134.414k i/100ms
           Array#map   604.196k i/100ms
Calculating -------------------------------------
   Array#each + push      1.534M (± 4.1%) i/s -      7.662M in   5.001710s
           Array#map      5.945M (± 6.3%) i/s -     30.210M in   5.102487s

Comparison:
           Array#map:  5945062.0 i/s
   Array#each + push:  1534430.6 i/s - 3.87x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     9.763M i/100ms
               #each    45.936M i/100ms
Calculating -------------------------------------
            For loop     99.254M (± 0.4%) i/s -    497.905M in   5.016562s
               #each    459.035M (± 0.2%) i/s -      2.297B in   5.003556s

Comparison:
               #each: 459034845.5 i/s
            For loop: 99253994.4 i/s - 4.62x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   908.038k i/100ms
     each_with_index     1.290M i/100ms
Calculating -------------------------------------
          While Loop      9.148M (± 0.3%) i/s -     46.310M in   5.062501s
     each_with_index     12.686M (± 0.5%) i/s -     64.476M in   5.082673s

Comparison:
     each_with_index: 12685729.3 i/s
          While Loop:  9147697.7 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   145.640k i/100ms
      inject to_proc   147.294k i/100ms
        inject block   147.110k i/100ms
Calculating -------------------------------------
       inject symbol      1.470M (± 0.2%) i/s -      7.428M in   5.051877s
      inject to_proc      1.473M (± 0.2%) i/s -      7.365M in   5.000450s
        inject block      1.470M (± 0.2%) i/s -      7.356M in   5.002351s

Comparison:
      inject to_proc:  1472810.9 i/s
        inject block:  1470413.0 i/s - same-ish: difference falls within error
       inject symbol:  1470282.1 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    11.810k i/100ms
   Array#map.flatten    11.429k i/100ms
      Array#flat_map    31.597k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    118.869k (± 6.7%) i/s -    590.500k in   5.003437s
   Array#map.flatten    119.850k (± 4.6%) i/s -    605.737k in   5.065231s
      Array#flat_map    323.446k (± 2.5%) i/s -      1.643M in   5.082972s

Comparison:
      Array#flat_map:   323445.9 i/s
   Array#map.flatten:   119849.9 i/s - 2.70x  (± 0.00) slower
Array#map.flatten(1):   118869.4 i/s - 2.72x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   180.833k i/100ms
  Array#reverse_each     1.945M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.886M (± 6.8%) i/s -      9.403M in   5.026484s
  Array#reverse_each     19.447M (± 0.2%) i/s -     97.258M in   5.001052s

Comparison:
  Array#reverse_each: 19447486.6 i/s
  Array#reverse.each:  1885518.3 i/s - 10.31x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       649.217k i/100ms
   Enumerable#detect     4.036M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          6.442M (± 7.3%) i/s -    127.896M in  20.014747s
   Enumerable#detect     40.353M (± 0.1%) i/s -    807.232M in  20.004307s

Comparison:
   Enumerable#detect: 40353000.5 i/s
Enumerable#select.first:  6441761.3 i/s - 6.26x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       175.235k i/100ms
Enumerable#select.last
                       392.717k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.966M (± 3.5%) i/s -      9.813M in   4.998698s
Enumerable#select.last
                          3.959M (± 2.0%) i/s -     20.029M in   5.061126s

Comparison:
Enumerable#select.last:  3958989.7 i/s
Enumerable#reverse.detect:  1965581.0 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.262k i/100ms
  Enumerable#sort_by     2.460k i/100ms
     Enumerable#sort     3.122k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         23.854k (±18.6%) i/s -    110.838k in   5.061668s
  Enumerable#sort_by     23.386k (±20.3%) i/s -    108.240k in   5.071039s
     Enumerable#sort     31.681k (± 1.6%) i/s -    159.222k in   5.027131s

Comparison:
     Enumerable#sort:    31681.1 i/s
Enumerable#sort_by (Symbol#to_proc):    23854.2 i/s - 1.33x  (± 0.00) slower
  Enumerable#sort_by:    23386.5 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   519.252k i/100ms
Enumerable#sort_by...first
                         4.726k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      5.233M (± 0.3%) i/s -     26.482M in   5.060254s
Enumerable#sort_by...first
                         56.573k (± 2.7%) i/s -    283.560k in   5.016095s

Comparison:
   Enumerable#min_by:  5233352.9 i/s
Enumerable#sort_by...first:    56573.5 i/s - 92.51x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   189.526k i/100ms
            Hash#dup   221.945k i/100ms
Calculating -------------------------------------
              Hash[]      2.237M (± 7.3%) i/s -     11.372M in   5.126354s
            Hash#dup      2.235M (± 3.4%) i/s -     11.319M in   5.069905s

Comparison:
              Hash[]:  2237324.7 i/s
            Hash#dup:  2235271.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   238.712M i/100ms
  Hash#fetch, symbol   238.512M i/100ms
     Hash#[], string     2.666M i/100ms
  Hash#fetch, string     2.654M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      2.385B (± 0.3%) i/s -     11.936B in   5.003707s
  Hash#fetch, symbol      2.387B (± 0.2%) i/s -     12.164B in   5.094959s
     Hash#[], string    156.863M (± 0.6%) i/s -    786.336M in   5.013087s
  Hash#fetch, string    152.028M (± 0.8%) i/s -    761.758M in   5.011019s

Comparison:
  Hash#fetch, symbol: 2387487018.6 i/s
     Hash#[], symbol: 2385374868.0 i/s - same-ish: difference falls within error
     Hash#[], string: 156862763.6 i/s - 15.22x  (± 0.00) slower
  Hash#fetch, string: 152027795.9 i/s - 15.70x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    49.732M i/100ms
             Hash#[]    49.751M i/100ms
          Hash#[] ||    49.762M i/100ms
          Hash#[] &&    49.757M i/100ms
          Hash#fetch    49.771M i/100ms
 Hash#fetch fallback    49.713M i/100ms
Calculating -------------------------------------
            Hash#dig    496.886M (± 0.3%) i/s -      2.487B in   5.004385s
             Hash#[]    497.371M (± 0.2%) i/s -      2.488B in   5.001414s
          Hash#[] ||    497.212M (± 0.2%) i/s -      2.488B in   5.004179s
          Hash#[] &&    497.422M (± 0.2%) i/s -      2.488B in   5.001536s
          Hash#fetch    497.581M (± 0.1%) i/s -      2.489B in   5.001321s
 Hash#fetch fallback    497.346M (± 0.2%) i/s -      2.535B in   5.097807s

Comparison:
          Hash#fetch: 497580668.1 i/s
          Hash#[] &&: 497421715.4 i/s - same-ish: difference falls within error
             Hash#[]: 497371317.0 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 497345523.9 i/s - same-ish: difference falls within error
          Hash#[] ||: 497211791.5 i/s - same-ish: difference falls within error
            Hash#dig: 496885696.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   238.422M i/100ms
  Hash#fetch + block   238.539M i/100ms
    Hash#fetch + arg   238.900M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      2.384B (± 0.4%) i/s -     11.921B in   5.000035s
  Hash#fetch + block      2.387B (± 0.2%) i/s -     12.166B in   5.096106s
    Hash#fetch + arg      2.388B (± 0.2%) i/s -     11.945B in   5.001610s

Comparison:
    Hash#fetch + arg: 2388237318.9 i/s
  Hash#fetch + block: 2387229749.1 i/s - same-ish: difference falls within error
  Hash#fetch + const: 2384240364.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    12.781k i/100ms
         sort + to_h     3.633k i/100ms
Calculating -------------------------------------
      sort_by + to_h    301.526k (± 8.1%) i/s -      1.508M in   5.071863s
         sort + to_h    113.947k (± 9.2%) i/s -    563.115k in   5.027499s

Comparison:
      sort_by + to_h:   301526.1 i/s
         sort + to_h:   113946.9 i/s - 2.65x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   109.692k i/100ms
       Hash#each_key   126.742k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.172M (± 9.5%) i/s -      5.814M in   5.068657s
       Hash#each_key      1.252M (± 2.7%) i/s -      6.337M in   5.063447s

Comparison:
       Hash#each_key:  1252459.7 i/s
      Hash#keys.each:  1171769.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   170.000  i/100ms
           Hash#key?     2.378M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      2.048k (±12.3%) i/s -     10.030k in   5.006056s
           Hash#key?     23.068M (± 0.1%) i/s -    116.511M in   5.050734s

Comparison:
           Hash#key?: 23068067.1 i/s
  Hash#keys.include?:     2047.7 i/s - 11265.61x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    20.878k i/100ms
            Hash#[]=    23.745k i/100ms
Calculating -------------------------------------
         Hash#merge!    239.617k (± 3.7%) i/s -      1.211M in   5.060415s
            Hash#[]=    240.927k (± 3.6%) i/s -      1.211M in   5.032701s

Comparison:
            Hash#[]=:   240926.6 i/s
         Hash#merge!:   239616.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        11.590k i/100ms
      Hash#merge({})     8.211k i/100ms
 Hash#dup#merge!({})    14.503k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        133.443k (± 2.9%) i/s -    672.220k in   5.041777s
      Hash#merge({})     84.229k (± 3.9%) i/s -    426.972k in   5.076775s
 Hash#dup#merge!({})    145.040k (± 3.5%) i/s -    725.150k in   5.005745s

Comparison:
 Hash#dup#merge!({}):   145040.0 i/s
{}#merge!(Hash) do end:   133443.1 i/s - 1.09x  (± 0.00) slower
      Hash#merge({}):    84228.7 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   238.252M i/100ms
          Hash#merge   238.596M i/100ms
Calculating -------------------------------------
        Hash#**other      2.384B (± 0.4%) i/s -     12.151B in   5.097775s
          Hash#merge      2.387B (± 0.2%) i/s -     12.168B in   5.098142s

Comparison:
          Hash#merge: 2386839179.7 i/s
        Hash#**other: 2383587892.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   290.000  i/100ms
         Hash#merge!    23.965k i/100ms
Calculating -------------------------------------
          Hash#merge      3.360k (± 3.9%) i/s -     16.820k in   5.014003s
         Hash#merge!    242.420k (± 4.1%) i/s -      1.222M in   5.050039s

Comparison:
         Hash#merge!:   242419.8 i/s
          Hash#merge:     3359.7 i/s - 72.15x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.084M i/100ms
Array#each             949.633k i/100ms
Array#each_w/_object   963.488k i/100ms
Hash#select-include    375.553k i/100ms
Calculating -------------------------------------
Hash#native-slice        12.225M (± 3.4%) i/s -     61.800M in   5.061125s
Array#each                9.736M (± 2.0%) i/s -     49.381M in   5.074127s
Array#each_w/_object      9.361M (± 3.4%) i/s -     47.211M in   5.049116s
Hash#select-include       3.747M (± 3.3%) i/s -     18.778M in   5.017036s

Comparison:
Hash#native-slice   : 12224869.1 i/s
Array#each          :  9735892.4 i/s - 1.26x  (± 0.00) slower
Array#each_w/_object:  9360883.1 i/s - 1.31x  (± 0.00) slower
Hash#select-include :  3747062.7 i/s - 3.26x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   157.000  i/100ms
         Hash#value?     1.779k i/100ms
Calculating -------------------------------------
Hash#values.include?      1.980k (± 9.6%) i/s -      9.734k in   4.998571s
         Hash#value?     17.862k (± 0.4%) i/s -     90.729k in   5.079563s

Comparison:
         Hash#value?:    17861.8 i/s
Hash#values.include?:     1979.7 i/s - 9.02x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   238.354M i/100ms
                send   238.586M i/100ms
      method_missing   238.911M i/100ms
Calculating -------------------------------------
                call      2.385B (± 0.3%) i/s -     12.156B in   5.097290s
                send      2.386B (± 0.2%) i/s -     12.168B in   5.099087s
      method_missing      2.387B (± 0.2%) i/s -     11.946B in   5.005320s

Comparison:
      method_missing: 2386584449.1 i/s
                send: 2386302934.8 i/s - same-ish: difference falls within error
                call: 2384828550.9 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    14.405k i/100ms
      Symbol#to_proc    16.581k i/100ms
Calculating -------------------------------------
               Block    166.944k (± 3.1%) i/s -    835.490k in   5.009512s
      Symbol#to_proc    167.701k (± 3.9%) i/s -    845.631k in   5.049971s

Comparison:
      Symbol#to_proc:   167701.3 i/s
               Block:   166944.5 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   238.185M i/100ms
       block + yield   238.603M i/100ms
        unused block   238.843M i/100ms
               yield   238.921M i/100ms
Calculating -------------------------------------
          block.call      2.386B (± 0.4%) i/s -     12.147B in   5.091616s
       block + yield      2.388B (± 0.3%) i/s -     12.169B in   5.096803s
        unused block      2.388B (± 0.2%) i/s -     11.942B in   5.001569s
               yield      2.388B (± 0.2%) i/s -     11.946B in   5.001908s

Comparison:
               yield: 2388310578.4 i/s
        unused block: 2387692277.7 i/s - same-ish: difference falls within error
       block + yield: 2387545128.5 i/s - same-ish: difference falls within error
          block.call: 2385800091.6 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    17.033k i/100ms
      range#include?   373.000  i/100ms
       range#member?   640.000  i/100ms
       plain compare    31.055k i/100ms
Calculating -------------------------------------
        range#cover?    166.129k (±20.9%) i/s -    783.518k in   5.011434s
      range#include?      7.949k (±30.7%) i/s -     35.808k in   5.040736s
       range#member?      6.735k (±18.0%) i/s -     32.640k in   5.044227s
       plain compare    389.995k (± 4.8%) i/s -      1.956M in   5.030341s

Comparison:
       plain compare:   389995.5 i/s
        range#cover?:   166129.2 i/s - 2.35x  (± 0.00) slower
      range#include?:     7949.2 i/s - 49.06x  (± 0.00) slower
       range#member?:     6734.6 i/s - 57.91x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    10.971M i/100ms
           String#=~    11.475M i/100ms
          Regexp#===    10.296M i/100ms
        String#match     9.331M i/100ms
Calculating -------------------------------------
       String#match?    104.281M (± 0.3%) i/s -    526.619M in   5.050059s
           String#=~    104.878M (± 1.2%) i/s -    527.857M in   5.033723s
          Regexp#===    102.949M (± 0.1%) i/s -    514.808M in   5.000595s
        String#match     93.259M (± 0.2%) i/s -    466.534M in   5.002568s

Comparison:
           String#=~: 104878083.7 i/s
       String#match?: 104280647.4 i/s - same-ish: difference falls within error
          Regexp#===: 102949470.0 i/s - 1.02x  (± 0.00) slower
        String#match: 93259164.4 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.488M i/100ms
      String#casecmp     2.676M i/100ms
Calculating -------------------------------------
String#downcase + ==     16.499M (± 7.2%) i/s -     81.854M in   5.003425s
      String#casecmp     26.777M (± 4.4%) i/s -    133.803M in   5.006594s

Comparison:
      String#casecmp: 26777077.6 i/s
String#downcase + ==: 16499016.9 i/s - 1.62x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     7.535M i/100ms
       String#concat     7.563M i/100ms
       String#append     7.630M i/100ms
         "foo" "bar"   238.838M i/100ms
  "#{'foo'}#{'bar'}"   238.838M i/100ms
Calculating -------------------------------------
            String#+     76.182M (± 3.2%) i/s -    384.304M in   5.049835s
       String#concat     76.608M (± 3.6%) i/s -    385.730M in   5.041682s
       String#append     77.158M (± 2.4%) i/s -    389.121M in   5.046161s
         "foo" "bar"      2.387B (± 0.3%) i/s -     11.942B in   5.003064s
  "#{'foo'}#{'bar'}"      2.386B (± 0.3%) i/s -     11.942B in   5.004185s

Comparison:
         "foo" "bar": 2386936957.6 i/s
  "#{'foo'}#{'bar'}": 2386401556.9 i/s - same-ish: difference falls within error
       String#append: 77158105.9 i/s - 30.94x  (± 0.00) slower
       String#concat: 76607759.5 i/s - 31.16x  (± 0.00) slower
            String#+: 76181525.0 i/s - 31.33x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   238.139M i/100ms
          String#dup   238.713M i/100ms
Calculating -------------------------------------
           String#+@      2.384B (± 0.3%) i/s -     12.145B in   5.094246s
          String#dup      2.386B (± 0.3%) i/s -     11.936B in   5.003256s

Comparison:
          String#dup: 2385606851.1 i/s
           String#+@: 2384104473.9 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   763.896k i/100ms
       String#match?     1.092M i/100ms
    String#end_with?    13.564M i/100ms
Calculating -------------------------------------
           String#=~      8.963M (± 2.4%) i/s -     45.070M in   5.031496s
       String#match?     10.934M (± 0.2%) i/s -     55.688M in   5.092998s
    String#end_with?    135.612M (± 0.3%) i/s -    678.207M in   5.001129s

Comparison:
    String#end_with?: 135611568.7 i/s
       String#match?: 10934277.3 i/s - 12.40x  (± 0.00) slower
           String#=~:  8962878.7 i/s - 15.13x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    47.011k i/100ms
          String#sub   383.730k i/100ms
String#dup["string"]=
                         9.049M i/100ms
Calculating -------------------------------------
         String#gsub      4.192M (±11.1%) i/s -     20.356M in   4.997813s
          String#sub      4.991M (± 9.0%) i/s -     24.942M in   5.057175s
String#dup["string"]=
                         90.482M (± 0.1%) i/s -    452.450M in   5.000439s

Comparison:
String#dup["string"]=: 90482139.6 i/s
          String#sub:  4991243.8 i/s - 18.13x  (± 0.00) slower
         String#gsub:  4192465.6 i/s - 21.58x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    43.847k i/100ms
           String#tr    89.789k i/100ms
Calculating -------------------------------------
         String#gsub      1.773M (± 7.5%) i/s -      8.813M in   5.005861s
           String#tr    895.253k (± 3.0%) i/s -      4.489M in   5.019129s

Comparison:
         String#gsub:  1772705.5 i/s
           String#tr:   895252.8 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   238.407M i/100ms
         With Freeze   238.826M i/100ms
Calculating -------------------------------------
      Without Freeze      2.385B (± 0.3%) i/s -     12.159B in   5.097805s
         With Freeze      2.387B (± 0.3%) i/s -     11.941B in   5.003512s

Comparison:
         With Freeze: 2386601392.7 i/s
      Without Freeze: 2385119692.1 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     4.508k i/100ms
      String#squeeze    25.945k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     58.020k (± 7.2%) i/s -    288.512k in   5.016743s
      String#squeeze    259.386k (± 2.6%) i/s -      1.297M in   5.004779s

Comparison:
      String#squeeze:   259386.0 i/s
 String#gsub/regex+/:    58019.6 i/s - 4.47x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     2.791M i/100ms
       String#match?     4.221M i/100ms
  String#start_with?    10.668M i/100ms
Calculating -------------------------------------
           String#=~     30.622M (± 3.1%) i/s -    153.503M in   5.017822s
       String#match?     42.181M (± 0.2%) i/s -    211.044M in   5.003309s
  String#start_with?    106.551M (± 0.3%) i/s -    533.415M in   5.006219s

Comparison:
  String#start_with?: 106551181.3 i/s
       String#match?: 42181063.3 i/s - 2.53x  (± 0.00) slower
           String#=~: 30621512.6 i/s - 3.48x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    95.934k i/100ms
    String#[0, n] ==   192.146k i/100ms
   String#[RANGE] ==   290.447k i/100ms
   String#[0...n] ==   198.223k i/100ms
Calculating -------------------------------------
  String#start_with?      4.743M (± 0.1%) i/s -     23.792M in   5.016076s
    String#[0, n] ==      2.242M (± 4.3%) i/s -     11.337M in   5.065873s
   String#[RANGE] ==      3.161M (± 2.6%) i/s -     15.975M in   5.056230s
   String#[0...n] ==      1.991M (± 3.2%) i/s -     10.109M in   5.082939s

Comparison:
  String#start_with?:  4743081.4 i/s
   String#[RANGE] ==:  3161489.9 i/s - 1.50x  (± 0.00) slower
    String#[0, n] ==:  2242097.8 i/s - 2.12x  (± 0.00) slower
   String#[0...n] ==:  1990978.7 i/s - 2.38x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     9.030M i/100ms
 String#sub!'string'    87.669k i/100ms
String#gsub!'string'   369.455k i/100ms
  String#[/regexp/]=     1.442M i/100ms
 String#sub!/regexp/   546.998k i/100ms
String#gsub!/regexp/   394.767k i/100ms
Calculating -------------------------------------
  String#['string']=     90.485M (± 0.1%) i/s -    460.543M in   5.089704s
 String#sub!'string'      5.118M (±21.1%) i/s -     23.583M in   5.004276s
String#gsub!'string'      4.503M (± 6.2%) i/s -     22.537M in   5.026157s
  String#[/regexp/]=     14.804M (± 3.2%) i/s -     74.977M in   5.070350s
 String#sub!/regexp/      5.502M (± 5.1%) i/s -     27.897M in   5.084328s
String#gsub!/regexp/      4.532M (± 5.5%) i/s -     22.896M in   5.068618s

Comparison:
  String#['string']=: 90485228.3 i/s
  String#[/regexp/]=: 14803653.2 i/s - 6.11x  (± 0.00) slower
 String#sub!/regexp/:  5501543.0 i/s - 16.45x  (± 0.00) slower
 String#sub!'string':  5118410.3 i/s - 17.68x  (± 0.00) slower
String#gsub!/regexp/:  4531961.3 i/s - 19.97x  (± 0.00) slower
String#gsub!'string':  4503333.8 i/s - 20.09x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub    77.421k i/100ms
        String#chomp     4.519M i/100ms
String#delete_suffix     4.457M i/100ms
Calculating -------------------------------------
          String#sub     17.072M (± 8.4%) i/s -     84.234M in   4.998864s
        String#chomp     45.133M (± 0.2%) i/s -    225.967M in   5.006696s
String#delete_suffix     43.279M (± 7.0%) i/s -    218.406M in   5.086225s

Comparison:
        String#chomp: 45133176.5 i/s
String#delete_suffix: 43278638.1 i/s - same-ish: difference falls within error
          String#sub: 17071906.7 i/s - 2.64x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   238.425M i/100ms
          String#sub    99.136k i/100ms
Calculating -------------------------------------
String#delete_prefix      2.385B (± 0.3%) i/s -     12.160B in   5.098681s
          String#sub     74.527M (± 0.5%) i/s -    372.454M in   4.997706s

Comparison:
String#delete_prefix: 2384887244.6 i/s
          String#sub: 74527255.7 i/s - 32.00x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.175M i/100ms
    String#unpack[0]     1.338M i/100ms
Calculating -------------------------------------
      String#unpack1     13.681M (± 2.9%) i/s -     69.352M in   5.073475s
    String#unpack[0]     13.543M (± 2.2%) i/s -     68.255M in   5.042170s

Comparison:
      String#unpack1: 13680837.6 i/s
    String#unpack[0]: 13543439.4 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 23.1.0-dev-3a4fe791, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    18.447k i/100ms
          Time.parse    72.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    302.485k (±13.2%) i/s -      1.494M in   5.025422s
          Time.parse     14.158k (±18.7%) i/s -     51.264k in   4.995761s

Comparison:
        Time.iso8601:   302484.7 i/s
          Time.parse:    14158.3 i/s - 21.36x  (± 0.00) slower

