$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       202.405M i/100ms
Function with splat arguments
                       306.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          2.033B (± 1.3%) i/s -     10.323B in   5.078648s
Function with splat arguments
                          3.146k (±15.5%) i/s -     15.300k in   5.057477s

Comparison:
Function with single Array argument: 2032894981.0 i/s
Function with splat arguments:     3145.9 i/s - 646200.35x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   202.188M i/100ms
Sequential Assignment
                       201.793M i/100ms
Calculating -------------------------------------
 Parallel Assignment      2.026B (± 1.6%) i/s -     10.312B in   5.090209s
Sequential Assignment
                          2.045B (± 1.3%) i/s -     10.291B in   5.033280s

Comparison:
Sequential Assignment: 2045027556.7 i/s
 Parallel Assignment: 2026261055.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   200.563M i/100ms
       attr_accessor   199.562M i/100ms
Calculating -------------------------------------
   getter_and_setter      2.019B (± 1.3%) i/s -     10.229B in   5.066934s
       attr_accessor      2.010B (± 1.0%) i/s -     10.178B in   5.064009s

Comparison:
   getter_and_setter: 2019039432.8 i/s
       attr_accessor: 2010008811.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     7.062k i/100ms
         respond_to?   200.652M i/100ms
Calculating -------------------------------------
      begin...rescue     49.632k (± 1.8%) i/s -    254.232k in   5.123950s
         respond_to?      2.018B (± 0.8%) i/s -     10.233B in   5.071558s

Comparison:
         respond_to?: 2017918513.6 i/s
      begin...rescue:    49632.2 i/s - 40657.43x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   202.899M i/100ms
             &method   203.111M i/100ms
Calculating -------------------------------------
              normal      2.014B (± 1.1%) i/s -     10.145B in   5.036878s
             &method      2.004B (± 0.8%) i/s -     10.156B in   5.068594s

Comparison:
              normal: 2014388282.6 i/s
             &method: 2003755388.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        92.000  i/100ms
       define_method   122.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.351k (±47.9%) i/s -      4.232k in   6.212191s
       define_method      3.117k (±60.1%) i/s -      6.466k in   6.409402s

Comparison:
       define_method:     3117.2 i/s
module_eval with string:     1351.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    64.251k i/100ms
       Kernel#format    57.688k i/100ms
            String#%    57.620k i/100ms
Calculating -------------------------------------
         Float#round    689.844k (± 2.5%) i/s -      3.470M in   5.032789s
       Kernel#format    578.611k (± 2.5%) i/s -      2.942M in   5.087944s
            String#%    590.781k (± 2.7%) i/s -      2.996M in   5.075429s

Comparison:
         Float#round:   689843.8 i/s
            String#%:   590781.3 i/s - 1.17x  (± 0.00) slower
       Kernel#format:   578611.4 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   202.074M i/100ms
          OpenStruct   203.681M i/100ms
Calculating -------------------------------------
                Hash      2.036B (± 1.5%) i/s -     10.306B in   5.062262s
          OpenStruct      2.019B (± 1.1%) i/s -     10.184B in   5.044148s

Comparison:
                Hash: 2036266604.7 i/s
          OpenStruct: 2019237477.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   203.374M i/100ms
          OpenStruct     2.450k i/100ms
Calculating -------------------------------------
                Hash      2.012B (± 1.2%) i/s -     10.169B in   5.053947s
          OpenStruct     26.955k (±12.8%) i/s -    132.300k in   5.023302s

Comparison:
                Hash: 2012292474.3 i/s
          OpenStruct:    26954.6 i/s - 74654.85x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   651.168k i/100ms
  ancestors.include?   132.323k i/100ms
Calculating -------------------------------------
  less than or equal      7.170M (± 2.9%) i/s -     35.814M in   4.999429s
  ancestors.include?      1.302M (± 7.2%) i/s -      6.484M in   5.020032s

Comparison:
  less than or equal:  7169778.1 i/s
  ancestors.include?:  1302306.1 i/s - 5.51x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     20.382  (± 0.0%) i/s -    102.000  in   5.005844s
         Kernel loop     20.128  (± 0.0%) i/s -    101.000  in   5.019138s

Comparison:
          While Loop:       20.4 i/s
         Kernel loop:       20.1 i/s - 1.01x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   202.121M i/100ms
         Array#first   200.759M i/100ms
Calculating -------------------------------------
           Array#[0]      2.028B (± 1.1%) i/s -     10.308B in   5.084330s
         Array#first      2.037B (± 1.5%) i/s -     10.239B in   5.026625s

Comparison:
         Array#first: 2037356187.1 i/s
           Array#[0]: 2027672629.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   204.415M i/100ms
          Array#last   201.010M i/100ms
Calculating -------------------------------------
          Array#[-1]      2.037B (± 1.4%) i/s -     10.221B in   5.018673s
          Array#last      2.022B (± 1.2%) i/s -     10.252B in   5.070671s

Comparison:
          Array#[-1]: 2036935383.2 i/s
          Array#last: 2022012772.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   463.191k i/100ms
Calculating -------------------------------------
                find      5.859  (±34.1%) i/s -     11.000  in   5.012424s
             bsearch      4.740M (± 3.9%) i/s -     24.086M in   5.090002s

Comparison:
             bsearch:  4739584.6 i/s
                find:        5.9 i/s - 809001.02x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.106  (± 0.0%) i/s -      1.000  in   9.449847s
        Array#insert      0.805  (± 0.0%) i/s -      5.000  in   6.208109s

Comparison:
        Array#insert:        0.8 i/s
       Array#unshift:        0.1 i/s - 7.61x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   202.307M i/100ms
          Array#size   199.745M i/100ms
         Array#count   204.392M i/100ms
Calculating -------------------------------------
        Array#length      2.016B (± 1.1%) i/s -     10.115B in   5.018175s
          Array#size      2.008B (± 1.0%) i/s -     10.187B in   5.074067s
         Array#count      2.017B (± 1.0%) i/s -     10.220B in   5.068205s

Comparison:
         Array#count: 2016631906.9 i/s
        Array#length: 2016008610.9 i/s - same-ish: difference falls within error
          Array#size: 2007844971.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    18.799k i/100ms
        Array#sample     2.459M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    211.209k (± 2.2%) i/s -      1.072M in   5.076015s
        Array#sample     24.480M (± 1.1%) i/s -    122.949M in   5.022955s

Comparison:
        Array#sample: 24480195.1 i/s
 Array#shuffle.first:   211209.1 i/s - 115.91x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   405.000  i/100ms
          Date.parse   606.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     38.644k (±31.2%) i/s -    149.850k in   4.997598s
          Date.parse     18.869k (±31.1%) i/s -     77.568k in   5.059076s

Comparison:
        Date.iso8601:    38643.6 i/s
          Date.parse:    18869.2 i/s - 2.05x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   120.755k i/100ms
           Array#map   537.146k i/100ms
Calculating -------------------------------------
   Array#each + push      1.310M (± 2.3%) i/s -      6.642M in   5.071426s
           Array#map      5.086M (± 7.9%) i/s -     25.246M in   5.011621s

Comparison:
           Array#map:  5085779.1 i/s
   Array#each + push:  1310342.6 i/s - 3.88x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     8.405M i/100ms
               #each    39.385M i/100ms
Calculating -------------------------------------
            For loop     84.544M (± 1.1%) i/s -    428.643M in   5.070659s
               #each    386.983M (± 0.9%) i/s -      1.969B in   5.089118s

Comparison:
               #each: 386983368.7 i/s
            For loop: 84544128.9 i/s - 4.58x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   783.872k i/100ms
     each_with_index     1.080M i/100ms
Calculating -------------------------------------
          While Loop      7.696M (± 0.9%) i/s -     39.194M in   5.093351s
     each_with_index     10.838M (± 1.2%) i/s -     55.079M in   5.082755s

Comparison:
     each_with_index: 10837828.3 i/s
          While Loop:  7695729.0 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   123.067k i/100ms
      inject to_proc   124.671k i/100ms
        inject block   123.215k i/100ms
Calculating -------------------------------------
       inject symbol      1.248M (± 1.5%) i/s -      6.276M in   5.029761s
      inject to_proc      1.247M (± 1.0%) i/s -      6.234M in   5.000202s
        inject block      1.245M (± 0.9%) i/s -      6.284M in   5.045883s

Comparison:
       inject symbol:  1248136.0 i/s
      inject to_proc:  1246783.8 i/s - same-ish: difference falls within error
        inject block:  1245473.4 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     9.701k i/100ms
   Array#map.flatten    10.687k i/100ms
      Array#flat_map    26.916k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    105.541k (± 7.2%) i/s -    523.854k in   5.008721s
   Array#map.flatten    107.443k (± 3.1%) i/s -    545.037k in   5.077924s
      Array#flat_map    271.907k (± 4.2%) i/s -      1.373M in   5.057620s

Comparison:
      Array#flat_map:   271907.5 i/s
   Array#map.flatten:   107442.7 i/s - 2.53x  (± 0.00) slower
Array#map.flatten(1):   105540.8 i/s - 2.58x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   144.051k i/100ms
  Array#reverse_each     1.633M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.623M (± 2.1%) i/s -      8.211M in   5.060429s
  Array#reverse_each     16.500M (± 1.2%) i/s -     83.286M in   5.048382s

Comparison:
  Array#reverse_each: 16499939.0 i/s
  Array#reverse.each:  1623277.3 i/s - 10.16x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       534.291k i/100ms
   Enumerable#detect     3.398M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          5.727M (± 6.9%) i/s -    113.804M in  20.020319s
   Enumerable#detect     34.409M (± 1.3%) i/s -    689.833M in  20.051271s

Comparison:
   Enumerable#detect: 34409484.2 i/s
Enumerable#select.first:  5726560.8 i/s - 6.01x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       161.956k i/100ms
Enumerable#select.last
                       334.031k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.613M (± 2.4%) i/s -      8.098M in   5.021722s
Enumerable#select.last
                          3.261M (± 7.4%) i/s -     16.368M in   5.068211s

Comparison:
Enumerable#select.last:  3261051.8 i/s
Enumerable#reverse.detect:  1613447.6 i/s - 2.02x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.155k i/100ms
  Enumerable#sort_by     2.128k i/100ms
     Enumerable#sort     2.270k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         13.016k (±34.7%) i/s -     56.030k in   5.086291s
  Enumerable#sort_by     21.897k (±10.7%) i/s -    108.528k in   5.060319s
     Enumerable#sort     26.994k (± 2.0%) i/s -    136.200k in   5.047882s

Comparison:
     Enumerable#sort:    26993.5 i/s
  Enumerable#sort_by:    21897.1 i/s - 1.23x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    13016.0 i/s - 2.07x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   418.516k i/100ms
Enumerable#sort_by...first
                         4.486k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      4.272M (± 1.2%) i/s -     21.763M in   5.094462s
Enumerable#sort_by...first
                         52.098k (± 3.3%) i/s -    260.188k in   4.999796s

Comparison:
   Enumerable#min_by:  4272443.8 i/s
Enumerable#sort_by...first:    52098.3 i/s - 82.01x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   175.123k i/100ms
            Hash#dup   205.178k i/100ms
Calculating -------------------------------------
              Hash[]      2.029M (± 3.9%) i/s -     10.157M in   5.012205s
            Hash#dup      2.031M (± 7.1%) i/s -     10.259M in   5.094607s

Comparison:
            Hash#dup:  2031313.4 i/s
              Hash[]:  2029484.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   200.390M i/100ms
  Hash#fetch, symbol   199.701M i/100ms
     Hash#[], string     2.265M i/100ms
  Hash#fetch, string     2.328M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      2.006B (± 0.9%) i/s -     10.220B in   5.095551s
  Hash#fetch, symbol      2.017B (± 1.1%) i/s -     10.185B in   5.050384s
     Hash#[], string    133.500M (± 1.9%) i/s -    668.123M in   5.006359s
  Hash#fetch, string    140.687M (± 1.8%) i/s -    705.239M in   5.014461s

Comparison:
  Hash#fetch, symbol: 2016877670.8 i/s
     Hash#[], symbol: 2005803826.1 i/s - same-ish: difference falls within error
  Hash#fetch, string: 140687240.7 i/s - 14.34x  (± 0.00) slower
     Hash#[], string: 133500228.3 i/s - 15.11x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    42.067M i/100ms
             Hash#[]    42.031M i/100ms
          Hash#[] ||    42.324M i/100ms
          Hash#[] &&    41.953M i/100ms
          Hash#fetch    41.994M i/100ms
 Hash#fetch fallback    42.368M i/100ms
Calculating -------------------------------------
            Hash#dig    420.641M (± 1.1%) i/s -      2.103B in   5.000923s
             Hash#[]    423.975M (± 1.5%) i/s -      2.144B in   5.057091s
          Hash#[] ||    421.719M (± 1.3%) i/s -      2.116B in   5.018880s
          Hash#[] &&    424.154M (± 1.6%) i/s -      2.140B in   5.045747s
          Hash#fetch    426.096M (± 1.5%) i/s -      2.142B in   5.027353s
 Hash#fetch fallback    420.675M (± 1.2%) i/s -      2.118B in   5.036407s

Comparison:
          Hash#fetch: 426096061.4 i/s
          Hash#[] &&: 424153679.2 i/s - same-ish: difference falls within error
             Hash#[]: 423975137.8 i/s - same-ish: difference falls within error
          Hash#[] ||: 421719297.9 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 420675456.4 i/s - same-ish: difference falls within error
            Hash#dig: 420640657.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   202.886M i/100ms
  Hash#fetch + block   203.826M i/100ms
    Hash#fetch + arg   206.293M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      2.006B (± 1.1%) i/s -     10.144B in   5.057563s
  Hash#fetch + block      2.000B (± 0.7%) i/s -     10.191B in   5.096242s
    Hash#fetch + arg      1.990B (± 0.2%) i/s -     10.108B in   5.080717s

Comparison:
  Hash#fetch + const: 2006033851.0 i/s
  Hash#fetch + block: 1999865644.6 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 1989561308.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    14.570k i/100ms
         sort + to_h     3.492k i/100ms
Calculating -------------------------------------
      sort_by + to_h    233.404k (± 3.9%) i/s -      1.166M in   5.001708s
         sort + to_h     90.264k (± 9.9%) i/s -    443.484k in   5.002888s

Comparison:
      sort_by + to_h:   233403.5 i/s
         sort + to_h:    90264.3 i/s - 2.59x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   110.760k i/100ms
       Hash#each_key   127.693k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.223M (±10.7%) i/s -      5.981M in   5.014427s
       Hash#each_key      1.309M (± 3.6%) i/s -      6.640M in   5.078705s

Comparison:
       Hash#each_key:  1309165.8 i/s
      Hash#keys.each:  1222819.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   126.000  i/100ms
           Hash#key?     9.895M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.516k (±11.3%) i/s -      7.434k in   5.013757s
           Hash#key?     99.306M (± 1.3%) i/s -    504.631M in   5.082454s

Comparison:
           Hash#key?: 99305863.9 i/s
  Hash#keys.include?:     1515.8 i/s - 65513.54x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    20.966k i/100ms
            Hash#[]=    21.265k i/100ms
Calculating -------------------------------------
         Hash#merge!    215.383k (± 4.3%) i/s -      1.090M in   5.070836s
            Hash#[]=    216.600k (± 4.0%) i/s -      1.085M in   5.014880s

Comparison:
            Hash#[]=:   216599.9 i/s
         Hash#merge!:   215382.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        10.036k i/100ms
      Hash#merge({})     7.681k i/100ms
 Hash#dup#merge!({})    13.422k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        129.064k (± 5.6%) i/s -    652.340k in   5.071426s
      Hash#merge({})     82.696k (± 4.8%) i/s -    414.774k in   5.028117s
 Hash#dup#merge!({})    137.834k (± 6.5%) i/s -    697.944k in   5.086127s

Comparison:
 Hash#dup#merge!({}):   137834.5 i/s
{}#merge!(Hash) do end:   129064.1 i/s - same-ish: difference falls within error
      Hash#merge({}):    82695.8 i/s - 1.67x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   200.393M i/100ms
          Hash#merge   204.107M i/100ms
Calculating -------------------------------------
        Hash#**other      2.031B (± 2.1%) i/s -     10.220B in   5.035518s
          Hash#merge      2.021B (± 1.5%) i/s -     10.205B in   5.051039s

Comparison:
        Hash#**other: 2030505147.2 i/s
          Hash#merge: 2020915366.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   272.000  i/100ms
         Hash#merge!    20.805k i/100ms
Calculating -------------------------------------
          Hash#merge      3.096k (± 8.3%) i/s -     15.504k in   5.065235s
         Hash#merge!    214.973k (± 5.7%) i/s -      1.082M in   5.049028s

Comparison:
         Hash#merge!:   214973.2 i/s
          Hash#merge:     3096.3 i/s - 69.43x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.057M i/100ms
Array#each             904.541k i/100ms
Array#each_w/_object   833.037k i/100ms
Hash#select-include      1.435M i/100ms
Calculating -------------------------------------
Hash#native-slice        10.701M (± 3.9%) i/s -     53.909M in   5.045365s
Array#each                9.052M (± 4.3%) i/s -     45.227M in   5.005841s
Array#each_w/_object      8.884M (± 2.9%) i/s -     44.984M in   5.067774s
Hash#select-include      14.176M (± 4.0%) i/s -     71.767M in   5.070897s

Comparison:
Hash#select-include : 14175767.5 i/s
Hash#native-slice   : 10700747.9 i/s - 1.32x  (± 0.00) slower
Array#each          :  9051819.0 i/s - 1.57x  (± 0.00) slower
Array#each_w/_object:  8884043.6 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   154.000  i/100ms
         Hash#value?   483.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.661k (±13.4%) i/s -      8.162k in   5.038756s
         Hash#value?      4.853k (± 2.2%) i/s -     24.633k in   5.078181s

Comparison:
         Hash#value?:     4853.4 i/s
Hash#values.include?:     1661.4 i/s - 2.92x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   202.376M i/100ms
                send   200.345M i/100ms
      method_missing   199.966M i/100ms
Calculating -------------------------------------
                call      2.018B (± 1.0%) i/s -     10.119B in   5.014522s
                send      2.058B (± 2.5%) i/s -     10.418B in   5.065714s
      method_missing      2.083B (± 2.4%) i/s -     10.598B in   5.090290s

Comparison:
      method_missing: 2083189845.7 i/s
                send: 2057811458.5 i/s - same-ish: difference falls within error
                call: 2018090845.6 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    13.931k i/100ms
      Symbol#to_proc    15.172k i/100ms
Calculating -------------------------------------
               Block    149.337k (± 7.2%) i/s -    752.274k in   5.083669s
      Symbol#to_proc    147.835k (± 7.1%) i/s -    743.428k in   5.071547s

Comparison:
               Block:   149336.6 i/s
      Symbol#to_proc:   147835.4 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   201.053M i/100ms
       block + yield   200.316M i/100ms
        unused block   202.234M i/100ms
               yield   204.516M i/100ms
Calculating -------------------------------------
          block.call      2.064B (± 1.7%) i/s -     10.455B in   5.066542s
       block + yield      2.095B (± 2.0%) i/s -     10.617B in   5.070045s
        unused block      2.042B (± 1.6%) i/s -     10.314B in   5.051228s
               yield      2.033B (± 2.1%) i/s -     10.226B in   5.031831s

Comparison:
       block + yield: 2094872957.8 i/s
          block.call: 2064052505.1 i/s - same-ish: difference falls within error
        unused block: 2042383021.0 i/s - same-ish: difference falls within error
               yield: 2033160679.4 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    15.617k i/100ms
      range#include?   336.000  i/100ms
       range#member?   599.000  i/100ms
       plain compare    27.484k i/100ms
Calculating -------------------------------------
        range#cover?    147.070k (±28.1%) i/s -    671.531k in   5.013965s
      range#include?      7.078k (±26.8%) i/s -     32.256k in   5.011047s
       range#member?      6.630k (±22.5%) i/s -     31.148k in   5.003489s
       plain compare    336.987k (± 9.4%) i/s -      1.677M in   5.038355s

Comparison:
       plain compare:   336986.6 i/s
        range#cover?:   147069.9 i/s - 2.29x  (± 0.00) slower
      range#include?:     7078.3 i/s - 47.61x  (± 0.00) slower
       range#member?:     6630.2 i/s - 50.83x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    11.721M i/100ms
           String#=~    10.296M i/100ms
          Regexp#===    10.417M i/100ms
        String#match    10.011M i/100ms
Calculating -------------------------------------
       String#match?    118.706M (± 1.7%) i/s -    597.762M in   5.037148s
           String#=~    103.311M (± 1.5%) i/s -    525.111M in   5.084035s
          Regexp#===    104.284M (± 2.1%) i/s -    531.276M in   5.096725s
        String#match    100.917M (± 1.7%) i/s -    510.545M in   5.060569s

Comparison:
       String#match?: 118706476.9 i/s
          Regexp#===: 104284405.0 i/s - 1.14x  (± 0.00) slower
           String#=~: 103310770.1 i/s - 1.15x  (± 0.00) slower
        String#match: 100917254.6 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.413M i/100ms
      String#casecmp     2.517M i/100ms
Calculating -------------------------------------
String#downcase + ==     15.455M (± 3.5%) i/s -     77.688M in   5.033045s
      String#casecmp     24.174M (± 4.0%) i/s -    120.828M in   5.006271s

Comparison:
      String#casecmp: 24173849.3 i/s
String#downcase + ==: 15454738.7 i/s - 1.56x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     5.875M i/100ms
       String#concat     6.487M i/100ms
       String#append     6.348M i/100ms
         "foo" "bar"   203.949M i/100ms
  "#{'foo'}#{'bar'}"   203.485M i/100ms
Calculating -------------------------------------
            String#+     64.359M (± 4.4%) i/s -    323.119M in   5.030119s
       String#concat     66.371M (± 2.5%) i/s -    337.339M in   5.085909s
       String#append     63.911M (± 3.3%) i/s -    323.749M in   5.071338s
         "foo" "bar"      2.021B (± 1.1%) i/s -     10.197B in   5.047037s
  "#{'foo'}#{'bar'}"      2.009B (± 0.9%) i/s -     10.174B in   5.064680s

Comparison:
         "foo" "bar": 2020707766.5 i/s
  "#{'foo'}#{'bar'}": 2009018017.8 i/s - same-ish: difference falls within error
       String#concat: 66371337.1 i/s - 30.45x  (± 0.00) slower
            String#+: 64359307.9 i/s - 31.40x  (± 0.00) slower
       String#append: 63910559.3 i/s - 31.62x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   200.353M i/100ms
          String#dup   199.249M i/100ms
Calculating -------------------------------------
           String#+@      2.061B (± 2.0%) i/s -     10.418B in   5.058121s
          String#dup      2.068B (± 1.9%) i/s -     10.361B in   5.011123s

Comparison:
          String#dup: 2068364804.1 i/s
           String#+@: 2060582760.4 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   784.885k i/100ms
       String#match?   772.898k i/100ms
    String#end_with?    11.334M i/100ms
Calculating -------------------------------------
           String#=~      7.889M (± 2.0%) i/s -     40.029M in   5.076041s
       String#match?      9.919M (± 1.5%) i/s -     50.238M in   5.066231s
    String#end_with?    113.788M (± 1.1%) i/s -    578.033M in   5.080608s

Comparison:
    String#end_with?: 113787631.0 i/s
       String#match?:  9918942.1 i/s - 11.47x  (± 0.00) slower
           String#=~:  7889201.5 i/s - 14.42x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    39.904k i/100ms
          String#sub   317.207k i/100ms
String#dup["string"]=
                         7.845M i/100ms
Calculating -------------------------------------
         String#gsub      3.571M (±12.3%) i/s -     17.398M in   5.007701s
          String#sub      4.587M (± 7.0%) i/s -     23.156M in   5.074743s
String#dup["string"]=
                         77.154M (± 1.6%) i/s -    392.260M in   5.085413s

Comparison:
String#dup["string"]=: 77153544.2 i/s
          String#sub:  4587428.7 i/s - 16.82x  (± 0.00) slower
         String#gsub:  3570861.1 i/s - 21.61x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    40.574k i/100ms
           String#tr    74.274k i/100ms
Calculating -------------------------------------
         String#gsub      1.685M (± 8.3%) i/s -      8.358M in   5.002450s
           String#tr    763.441k (± 3.2%) i/s -      3.862M in   5.064161s

Comparison:
         String#gsub:  1684956.6 i/s
           String#tr:   763441.0 i/s - 2.21x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   205.011M i/100ms
         With Freeze   202.998M i/100ms
Calculating -------------------------------------
      Without Freeze      2.016B (± 1.2%) i/s -     10.251B in   5.086500s
         With Freeze      2.003B (± 0.7%) i/s -     10.150B in   5.066814s

Comparison:
      Without Freeze: 2015515575.5 i/s
         With Freeze: 2003311487.7 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.947k i/100ms
      String#squeeze    21.335k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     55.404k (± 4.6%) i/s -    280.237k in   5.068832s
      String#squeeze    222.932k (± 3.3%) i/s -      1.131M in   5.077769s

Comparison:
      String#squeeze:   222931.8 i/s
 String#gsub/regex+/:    55403.7 i/s - 4.02x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     2.737M i/100ms
       String#match?     4.013M i/100ms
  String#start_with?     9.312M i/100ms
Calculating -------------------------------------
           String#=~     27.981M (± 2.5%) i/s -    142.339M in   5.090298s
       String#match?     39.915M (± 1.4%) i/s -    200.656M in   5.027963s
  String#start_with?     92.256M (± 1.9%) i/s -    465.619M in   5.048927s

Comparison:
  String#start_with?: 92255769.1 i/s
       String#match?: 39915467.2 i/s - 2.31x  (± 0.00) slower
           String#=~: 27980833.3 i/s - 3.30x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    87.437k i/100ms
    String#[0, n] ==   172.958k i/100ms
   String#[RANGE] ==   271.574k i/100ms
   String#[0...n] ==   175.401k i/100ms
Calculating -------------------------------------
  String#start_with?      3.274M (± 2.6%) i/s -     16.438M in   5.023666s
    String#[0, n] ==      1.973M (± 4.5%) i/s -      9.859M in   5.007136s
   String#[RANGE] ==      2.742M (± 2.7%) i/s -     13.850M in   5.054528s
   String#[0...n] ==      1.754M (± 3.8%) i/s -      8.770M in   5.007806s

Comparison:
  String#start_with?:  3274381.9 i/s
   String#[RANGE] ==:  2742270.2 i/s - 1.19x  (± 0.00) slower
    String#[0, n] ==:  1972940.3 i/s - 1.66x  (± 0.00) slower
   String#[0...n] ==:  1753840.5 i/s - 1.87x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     7.603M i/100ms
 String#sub!'string'    82.830k i/100ms
String#gsub!'string'   390.542k i/100ms
  String#[/regexp/]=     1.314M i/100ms
 String#sub!/regexp/   419.668k i/100ms
String#gsub!/regexp/   346.302k i/100ms
Calculating -------------------------------------
  String#['string']=     77.235M (± 1.5%) i/s -    387.742M in   5.021387s
 String#sub!'string'      4.777M (±21.1%) i/s -     21.867M in   5.001951s
String#gsub!'string'      4.030M (± 6.7%) i/s -     20.308M in   5.064659s
  String#[/regexp/]=     13.533M (± 3.5%) i/s -     68.322M in   5.055017s
 String#sub!/regexp/      4.372M (± 4.3%) i/s -     21.823M in   5.001206s
String#gsub!/regexp/      4.026M (± 6.9%) i/s -     20.086M in   5.013326s

Comparison:
  String#['string']=: 77235015.8 i/s
  String#[/regexp/]=: 13532715.7 i/s - 5.71x  (± 0.00) slower
 String#sub!'string':  4777069.2 i/s - 16.17x  (± 0.00) slower
 String#sub!/regexp/:  4371926.0 i/s - 17.67x  (± 0.00) slower
String#gsub!'string':  4030365.9 i/s - 19.16x  (± 0.00) slower
String#gsub!/regexp/:  4026450.9 i/s - 19.18x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub    50.480k i/100ms
        String#chomp     3.824M i/100ms
String#delete_suffix     4.125M i/100ms
Calculating -------------------------------------
          String#sub     17.126M (± 8.7%) i/s -     84.049M in   4.997758s
        String#chomp     38.097M (± 1.0%) i/s -    191.182M in   5.018758s
String#delete_suffix     41.157M (± 7.3%) i/s -    206.248M in   5.054871s

Comparison:
String#delete_suffix: 41156623.6 i/s
        String#chomp: 38097283.5 i/s - same-ish: difference falls within error
          String#sub: 17125722.3 i/s - 2.40x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   200.733M i/100ms
          String#sub    84.159k i/100ms
Calculating -------------------------------------
String#delete_prefix      1.993B (± 0.4%) i/s -     10.037B in   5.037144s
          String#sub    103.754M (± 1.5%) i/s -    518.167M in   4.995241s

Comparison:
String#delete_prefix: 1992557756.6 i/s
          String#sub: 103754269.5 i/s - 19.20x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.039M i/100ms
    String#unpack[0]     1.200M i/100ms
Calculating -------------------------------------
      String#unpack1     12.022M (± 3.5%) i/s -     60.257M in   5.018604s
    String#unpack[0]     12.047M (± 3.3%) i/s -     61.187M in   5.084744s

Comparison:
    String#unpack[0]: 12046509.7 i/s
      String#unpack1: 12021771.7 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 23.1.0-dev-17ec84b1, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    13.373k i/100ms
          Time.parse   155.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    261.325k (±11.2%) i/s -      1.284M in   5.023886s
          Time.parse     11.994k (±29.2%) i/s -     46.965k in   5.001241s

Comparison:
        Time.iso8601:   261325.0 i/s
          Time.parse:    11993.9 i/s - 21.79x  (± 0.00) slower

