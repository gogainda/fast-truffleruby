$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       174.959M i/100ms
Function with splat arguments
                       732.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.757B (± 1.7%) i/s -      8.923B in   5.079434s
Function with splat arguments
                          8.083k (± 8.7%) i/s -     40.260k in   5.022627s

Comparison:
Function with single Array argument: 1757208212.4 i/s
Function with splat arguments:     8082.6 i/s - 217406.65x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   177.517M i/100ms
Sequential Assignment
                       178.358M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.728B (± 3.3%) i/s -      8.698B in   5.037962s
Sequential Assignment
                          1.735B (± 2.6%) i/s -      8.740B in   5.041859s

Comparison:
Sequential Assignment: 1734567865.3 i/s
 Parallel Assignment: 1728497992.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   175.551M i/100ms
       attr_accessor   172.333M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.734B (± 3.0%) i/s -      8.778B in   5.067958s
       attr_accessor      1.745B (± 3.4%) i/s -      8.789B in   5.042439s

Comparison:
       attr_accessor: 1745188934.0 i/s
   getter_and_setter: 1733650729.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     8.596k i/100ms
         respond_to?   173.204M i/100ms
Calculating -------------------------------------
      begin...rescue     58.334k (± 7.3%) i/s -    292.264k in   5.049359s
         respond_to?      1.764B (± 2.8%) i/s -      8.833B in   5.012118s

Comparison:
         respond_to?: 1763910463.9 i/s
      begin...rescue:    58333.8 i/s - 30238.24x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   172.613M i/100ms
             &method   177.677M i/100ms
Calculating -------------------------------------
              normal      1.739B (± 2.7%) i/s -      8.803B in   5.064804s
             &method      1.753B (± 2.0%) i/s -      8.884B in   5.068558s

Comparison:
             &method: 1753465579.7 i/s
              normal: 1739483755.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        82.000  i/100ms
       define_method   128.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.482k (±51.9%) i/s -      3.936k in   5.084781s
       define_method      4.235k (±58.5%) i/s -      5.248k in   5.459101s

Comparison:
       define_method:     4235.3 i/s
module_eval with string:     1482.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    60.525k i/100ms
       Kernel#format    49.749k i/100ms
            String#%    54.882k i/100ms
Calculating -------------------------------------
         Float#round    667.515k (± 4.7%) i/s -      3.329M in   4.998750s
       Kernel#format    546.838k (± 4.3%) i/s -      2.736M in   5.013248s
            String#%    553.608k (± 3.3%) i/s -      2.799M in   5.061581s

Comparison:
         Float#round:   667514.9 i/s
            String#%:   553607.5 i/s - 1.21x  (± 0.00) slower
       Kernel#format:   546837.7 i/s - 1.22x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   177.357M i/100ms
          OpenStruct   174.270M i/100ms
Calculating -------------------------------------
                Hash      1.764B (± 1.3%) i/s -      8.868B in   5.026991s
          OpenStruct      1.766B (± 2.6%) i/s -      8.888B in   5.035744s

Comparison:
          OpenStruct: 1766155432.8 i/s
                Hash: 1764349910.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   173.502M i/100ms
          OpenStruct     2.193k i/100ms
Calculating -------------------------------------
                Hash      1.734B (± 4.3%) i/s -      8.675B in   5.014390s
          OpenStruct     20.959k (±17.0%) i/s -    103.071k in   5.145789s

Comparison:
                Hash: 1733591835.7 i/s
          OpenStruct:    20958.9 i/s - 82713.97x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   603.701k i/100ms
  ancestors.include?   126.709k i/100ms
Calculating -------------------------------------
  less than or equal      7.015M (± 4.4%) i/s -     35.015M in   5.001528s
  ancestors.include?      1.302M (± 5.5%) i/s -      6.589M in   5.075929s

Comparison:
  less than or equal:  7015288.1 i/s
  ancestors.include?:  1302153.8 i/s - 5.39x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     19.538  (± 0.0%) i/s -     98.000  in   5.018496s
         Kernel loop     19.345  (± 5.2%) i/s -     97.000  in   5.022554s

Comparison:
          While Loop:       19.5 i/s
         Kernel loop:       19.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   177.031M i/100ms
         Array#first   173.574M i/100ms
Calculating -------------------------------------
           Array#[0]      1.777B (± 2.4%) i/s -      9.029B in   5.082396s
         Array#first      1.770B (± 1.6%) i/s -      8.852B in   5.001848s

Comparison:
           Array#[0]: 1777479575.0 i/s
         Array#first: 1770253551.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   178.688M i/100ms
          Array#last   179.179M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.748B (± 2.0%) i/s -      8.756B in   5.009772s
          Array#last      1.759B (± 1.9%) i/s -      8.959B in   5.095261s

Comparison:
          Array#last: 1758954134.5 i/s
          Array#[-1]: 1748452098.9 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   473.325k i/100ms
Calculating -------------------------------------
                find      4.458  (±22.4%) i/s -     12.000  in   5.170338s
             bsearch      4.631M (± 5.8%) i/s -     23.193M in   5.026683s

Comparison:
             bsearch:  4630602.0 i/s
                find:        4.5 i/s - 1038797.77x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.072  (± 0.0%) i/s -      1.000  in  13.795371s
        Array#insert      0.713  (± 0.0%) i/s -      4.000  in   5.608040s

Comparison:
        Array#insert:        0.7 i/s
       Array#unshift:        0.1 i/s - 9.84x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   175.951M i/100ms
          Array#size   177.820M i/100ms
         Array#count   178.627M i/100ms
Calculating -------------------------------------
        Array#length      1.775B (± 1.7%) i/s -      8.974B in   5.057076s
          Array#size      1.764B (± 2.0%) i/s -      8.891B in   5.042529s
         Array#count      1.761B (± 1.8%) i/s -      8.931B in   5.073164s

Comparison:
        Array#length: 1774970104.0 i/s
          Array#size: 1763925248.3 i/s - same-ish: difference falls within error
         Array#count: 1761101722.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    19.514k i/100ms
        Array#sample     2.201M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    215.526k (± 2.9%) i/s -      1.093M in   5.074934s
        Array#sample     24.140M (± 2.5%) i/s -    121.044M in   5.017696s

Comparison:
        Array#sample: 24139730.2 i/s
 Array#shuffle.first:   215525.6 i/s - 112.00x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   299.000  i/100ms
          Date.parse   294.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     14.968k (±28.1%) i/s -     66.677k in   5.185884s
          Date.parse      8.545k (±21.7%) i/s -     39.396k in   5.005415s

Comparison:
        Date.iso8601:    14967.5 i/s
          Date.parse:     8544.9 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   150.257k i/100ms
           Array#map   853.203k i/100ms
Calculating -------------------------------------
   Array#each + push      1.703M (± 5.5%) i/s -      8.565M in   5.047397s
           Array#map      8.819M (± 7.1%) i/s -     44.367M in   5.056652s

Comparison:
           Array#map:  8819447.3 i/s
   Array#each + push:  1702522.7 i/s - 5.18x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     7.429M i/100ms
               #each    37.717M i/100ms
Calculating -------------------------------------
            For loop     74.599M (± 2.8%) i/s -    378.901M in   5.083504s
               #each    379.949M (± 2.1%) i/s -      1.924B in   5.064902s

Comparison:
               #each: 379949366.3 i/s
            For loop: 74599445.5 i/s - 5.09x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   741.074k i/100ms
     each_with_index     1.058M i/100ms
Calculating -------------------------------------
          While Loop      7.579M (± 1.9%) i/s -     38.536M in   5.086652s
     each_with_index     10.464M (± 3.0%) i/s -     52.917M in   5.061876s

Comparison:
     each_with_index: 10463965.7 i/s
          While Loop:  7578611.3 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   138.212k i/100ms
      inject to_proc   135.231k i/100ms
        inject block   137.665k i/100ms
Calculating -------------------------------------
       inject symbol      1.371M (± 2.5%) i/s -      6.911M in   5.043273s
      inject to_proc      1.378M (± 2.5%) i/s -      6.897M in   5.008061s
        inject block      1.374M (± 1.7%) i/s -      6.883M in   5.012763s

Comparison:
      inject to_proc:  1378053.6 i/s
        inject block:  1373568.5 i/s - same-ish: difference falls within error
       inject symbol:  1371164.5 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    11.696k i/100ms
   Array#map.flatten    15.525k i/100ms
      Array#flat_map    34.814k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    156.802k (± 6.2%) i/s -    783.632k in   5.019052s
   Array#map.flatten    154.646k (± 5.7%) i/s -    776.250k in   5.037077s
      Array#flat_map    345.828k (± 4.3%) i/s -      1.741M in   5.043679s

Comparison:
      Array#flat_map:   345828.3 i/s
Array#map.flatten(1):   156801.7 i/s - 2.21x  (± 0.00) slower
   Array#map.flatten:   154646.3 i/s - 2.24x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   163.811k i/100ms
  Array#reverse_each     1.528M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.724M (± 6.4%) i/s -      8.682M in   5.056929s
  Array#reverse_each     15.536M (± 2.7%) i/s -     77.926M in   5.019931s

Comparison:
  Array#reverse_each: 15536009.8 i/s
  Array#reverse.each:  1724385.9 i/s - 9.01x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       524.870k i/100ms
   Enumerable#detect     2.717M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          5.698M (± 9.0%) i/s -    112.847M in  19.999709s
   Enumerable#detect     27.028M (± 2.3%) i/s -    540.745M in  20.017782s

Comparison:
   Enumerable#detect: 27028358.9 i/s
Enumerable#select.first:  5698430.0 i/s - 4.74x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       159.361k i/100ms
Enumerable#select.last
                       282.215k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.884M (± 5.3%) i/s -      9.402M in   5.006693s
Enumerable#select.last
                          2.835M (± 3.9%) i/s -     14.393M in   5.084265s

Comparison:
Enumerable#select.last:  2835309.6 i/s
Enumerable#reverse.detect:  1883563.0 i/s - 1.51x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.123k i/100ms
  Enumerable#sort_by     2.179k i/100ms
     Enumerable#sort     2.650k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         23.017k (±11.9%) i/s -    112.519k in   5.007563s
  Enumerable#sort_by     22.128k (±22.2%) i/s -     98.055k in   5.027887s
     Enumerable#sort     30.597k (± 2.3%) i/s -    153.700k in   5.026336s

Comparison:
     Enumerable#sort:    30597.1 i/s
Enumerable#sort_by (Symbol#to_proc):    23016.5 i/s - 1.33x  (± 0.00) slower
  Enumerable#sort_by:    22128.0 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   400.081k i/100ms
Enumerable#sort_by...first
                         5.006k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      3.974M (± 4.1%) i/s -     20.004M in   5.041913s
Enumerable#sort_by...first
                         55.398k (± 3.6%) i/s -    280.336k in   5.067192s

Comparison:
   Enumerable#min_by:  3974451.5 i/s
Enumerable#sort_by...first:    55397.6 i/s - 71.74x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   270.045k i/100ms
            Hash#dup   300.392k i/100ms
Calculating -------------------------------------
              Hash[]      3.108M (± 9.0%) i/s -     15.393M in   4.998263s
            Hash#dup      3.159M (± 5.5%) i/s -     15.921M in   5.057461s

Comparison:
            Hash#dup:  3158668.2 i/s
              Hash[]:  3107633.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   179.369M i/100ms
  Hash#fetch, symbol   177.605M i/100ms
     Hash#[], string    10.149M i/100ms
  Hash#fetch, string     9.636M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.756B (± 2.6%) i/s -      8.789B in   5.009746s
  Hash#fetch, symbol      1.772B (± 2.4%) i/s -      8.880B in   5.013644s
     Hash#[], string    128.576M (± 3.1%) i/s -    649.504M in   5.056732s
  Hash#fetch, string     98.252M (± 4.2%) i/s -    491.418M in   5.011145s

Comparison:
  Hash#fetch, symbol: 1772288411.7 i/s
     Hash#[], symbol: 1755640183.6 i/s - same-ish: difference falls within error
     Hash#[], string: 128575519.2 i/s - 13.78x  (± 0.00) slower
  Hash#fetch, string: 98252352.4 i/s - 18.04x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    69.810M i/100ms
             Hash#[]    70.258M i/100ms
          Hash#[] ||    69.856M i/100ms
          Hash#[] &&    69.694M i/100ms
          Hash#fetch    69.354M i/100ms
 Hash#fetch fallback    66.346M i/100ms
Calculating -------------------------------------
            Hash#dig    695.003M (± 2.3%) i/s -      3.491B in   5.024973s
             Hash#[]    688.316M (± 3.5%) i/s -      3.443B in   5.008119s
          Hash#[] ||    693.107M (± 2.9%) i/s -      3.493B in   5.043700s
          Hash#[] &&    689.994M (± 3.5%) i/s -      3.485B in   5.056889s
          Hash#fetch    701.899M (± 1.7%) i/s -      3.537B in   5.040756s
 Hash#fetch fallback    702.486M (± 1.8%) i/s -      3.516B in   5.007308s

Comparison:
 Hash#fetch fallback: 702486415.5 i/s
          Hash#fetch: 701898770.6 i/s - same-ish: difference falls within error
            Hash#dig: 695002722.4 i/s - same-ish: difference falls within error
          Hash#[] ||: 693107318.2 i/s - same-ish: difference falls within error
          Hash#[] &&: 689994428.1 i/s - same-ish: difference falls within error
             Hash#[]: 688315958.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   176.335M i/100ms
  Hash#fetch + block   177.273M i/100ms
    Hash#fetch + arg   178.659M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.775B (± 2.1%) i/s -      8.993B in   5.068658s
  Hash#fetch + block      1.767B (± 3.0%) i/s -      8.864B in   5.021312s
    Hash#fetch + arg      1.768B (± 1.9%) i/s -      8.933B in   5.054178s

Comparison:
  Hash#fetch + const: 1775087534.9 i/s
    Hash#fetch + arg: 1768065739.1 i/s - same-ish: difference falls within error
  Hash#fetch + block: 1767000114.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    16.296k i/100ms
         sort + to_h     2.102k i/100ms
Calculating -------------------------------------
      sort_by + to_h    278.205k (± 5.5%) i/s -      1.385M in   4.995957s
         sort + to_h    107.530k (±10.0%) i/s -    529.704k in   5.002911s

Comparison:
      sort_by + to_h:   278205.3 i/s
         sort + to_h:   107529.8 i/s - 2.59x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   114.694k i/100ms
       Hash#each_key   138.796k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.211M (±11.5%) i/s -      5.964M in   5.070555s
       Hash#each_key      1.472M (± 3.9%) i/s -      7.356M in   5.004203s

Comparison:
       Hash#each_key:  1472322.8 i/s
      Hash#keys.each:  1211334.5 i/s - 1.22x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   131.000  i/100ms
           Hash#key?     7.906M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.580k (±10.7%) i/s -      7.860k in   5.042050s
           Hash#key?     77.571M (± 3.7%) i/s -    387.408M in   5.001574s

Comparison:
           Hash#key?: 77570799.2 i/s
  Hash#keys.include?:     1580.3 i/s - 49086.47x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    24.962k i/100ms
            Hash#[]=    28.947k i/100ms
Calculating -------------------------------------
         Hash#merge!    302.587k (± 6.7%) i/s -      1.523M in   5.057387s
            Hash#[]=    300.830k (± 6.1%) i/s -      1.505M in   5.023749s

Comparison:
         Hash#merge!:   302587.4 i/s
            Hash#[]=:   300830.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        14.879k i/100ms
      Hash#merge({})    11.977k i/100ms
 Hash#dup#merge!({})    21.063k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        228.211k (± 4.0%) i/s -      1.146M in   5.028832s
      Hash#merge({})    134.292k (± 4.2%) i/s -    670.712k in   5.003726s
 Hash#dup#merge!({})    211.801k (± 3.4%) i/s -      1.074M in   5.077888s

Comparison:
{}#merge!(Hash) do end:   228211.0 i/s
 Hash#dup#merge!({}):   211801.1 i/s - 1.08x  (± 0.00) slower
      Hash#merge({}):   134291.8 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   175.867M i/100ms
          Hash#merge   166.918M i/100ms
Calculating -------------------------------------
        Hash#**other      1.781B (± 1.3%) i/s -      8.969B in   5.036728s
          Hash#merge      1.786B (± 1.3%) i/s -      9.014B in   5.046307s

Comparison:
          Hash#merge: 1786461760.8 i/s
        Hash#**other: 1781064175.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   472.000  i/100ms
         Hash#merge!    29.516k i/100ms
Calculating -------------------------------------
          Hash#merge      5.728k (±10.3%) i/s -     28.320k in   5.004141s
         Hash#merge!    295.291k (± 6.3%) i/s -      1.476M in   5.020291s

Comparison:
         Hash#merge!:   295290.5 i/s
          Hash#merge:     5728.4 i/s - 51.55x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      795.058k i/100ms
Array#each             830.925k i/100ms
Array#each_w/_object   834.094k i/100ms
Hash#select-include      1.515M i/100ms
Calculating -------------------------------------
Hash#native-slice        10.052M (± 4.7%) i/s -     50.884M in   5.074757s
Array#each                8.439M (± 4.3%) i/s -     42.377M in   5.031740s
Array#each_w/_object      8.396M (± 4.1%) i/s -     42.539M in   5.075704s
Hash#select-include      14.485M (± 4.5%) i/s -     72.735M in   5.032534s

Comparison:
Hash#select-include : 14484609.6 i/s
Hash#native-slice   : 10051739.5 i/s - 1.44x  (± 0.00) slower
Array#each          :  8438784.4 i/s - 1.72x  (± 0.00) slower
Array#each_w/_object:  8395502.7 i/s - 1.73x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   152.000  i/100ms
         Hash#value?     1.536k i/100ms
Calculating -------------------------------------
Hash#values.include?      2.003k (±12.7%) i/s -      9.728k in   5.020424s
         Hash#value?     15.541k (± 2.5%) i/s -     78.336k in   5.043881s

Comparison:
         Hash#value?:    15540.9 i/s
Hash#values.include?:     2002.5 i/s - 7.76x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   173.185M i/100ms
                send   171.317M i/100ms
      method_missing   172.741M i/100ms
Calculating -------------------------------------
                call      1.743B (± 3.5%) i/s -      8.832B in   5.073499s
                send      1.760B (± 3.1%) i/s -      8.908B in   5.066659s
      method_missing      1.772B (± 1.9%) i/s -      8.983B in   5.071953s

Comparison:
      method_missing: 1771653840.2 i/s
                send: 1760014296.6 i/s - same-ish: difference falls within error
                call: 1743292032.5 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    29.225k i/100ms
      Symbol#to_proc    32.985k i/100ms
Calculating -------------------------------------
               Block    342.327k (± 4.9%) i/s -      1.724M in   5.049935s
      Symbol#to_proc    345.033k (± 4.6%) i/s -      1.748M in   5.078107s

Comparison:
      Symbol#to_proc:   345033.0 i/s
               Block:   342326.5 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   175.022M i/100ms
       block + yield   171.626M i/100ms
        unused block   176.942M i/100ms
               yield   178.929M i/100ms
Calculating -------------------------------------
          block.call      1.754B (± 3.2%) i/s -      8.926B in   5.094932s
       block + yield      1.741B (± 3.6%) i/s -      8.753B in   5.035384s
        unused block      1.769B (± 2.1%) i/s -      8.847B in   5.003734s
               yield      1.747B (± 2.3%) i/s -      8.768B in   5.020492s

Comparison:
        unused block: 1768907023.2 i/s
          block.call: 1753889927.0 i/s - same-ish: difference falls within error
               yield: 1747335976.3 i/s - same-ish: difference falls within error
       block + yield: 1740809219.2 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     8.272k i/100ms
      range#include?   306.000  i/100ms
       range#member?   567.000  i/100ms
       plain compare    25.123k i/100ms
Calculating -------------------------------------
        range#cover?    150.159k (±24.8%) i/s -    703.120k in   5.002834s
      range#include?      6.395k (±28.5%) i/s -     28.764k in   5.001855s
       range#member?      5.019k (±16.0%) i/s -     23.814k in   5.033462s
       plain compare    340.473k (±14.1%) i/s -      1.658M in   5.027603s

Comparison:
       plain compare:   340473.1 i/s
        range#cover?:   150159.1 i/s - 2.27x  (± 0.00) slower
      range#include?:     6394.7 i/s - 53.24x  (± 0.00) slower
       range#member?:     5019.1 i/s - 67.84x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     3.626M i/100ms
           String#=~    10.991M i/100ms
          Regexp#===    10.637M i/100ms
        String#match     7.662M i/100ms
Calculating -------------------------------------
       String#match?    109.277M (± 6.8%) i/s -    543.935M in   5.008272s
           String#=~    108.063M (± 3.8%) i/s -    549.574M in   5.093822s
          Regexp#===    108.368M (± 3.1%) i/s -    542.509M in   5.011354s
        String#match     77.540M (± 2.7%) i/s -    390.786M in   5.043828s

Comparison:
       String#match?: 109276715.7 i/s
          Regexp#===: 108367948.9 i/s - same-ish: difference falls within error
           String#=~: 108062576.1 i/s - same-ish: difference falls within error
        String#match: 77540431.8 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.515M i/100ms
      String#casecmp     2.865M i/100ms
Calculating -------------------------------------
String#downcase + ==     19.484M (± 7.1%) i/s -     96.990M in   5.005042s
      String#casecmp     30.313M (± 6.5%) i/s -    151.868M in   5.034987s

Comparison:
      String#casecmp: 30313169.9 i/s
String#downcase + ==: 19483703.8 i/s - 1.56x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     5.224M i/100ms
       String#concat     6.445M i/100ms
       String#append     6.463M i/100ms
         "foo" "bar"   173.718M i/100ms
  "#{'foo'}#{'bar'}"   178.994M i/100ms
Calculating -------------------------------------
            String#+     65.236M (± 5.4%) i/s -    329.138M in   5.061734s
       String#concat     65.806M (± 4.3%) i/s -    328.700M in   5.004810s
       String#append     65.279M (± 4.8%) i/s -    329.623M in   5.062275s
         "foo" "bar"      1.774B (± 2.3%) i/s -      9.033B in   5.094075s
  "#{'foo'}#{'bar'}"      1.776B (± 2.3%) i/s -      8.950B in   5.042564s

Comparison:
  "#{'foo'}#{'bar'}": 1775826767.9 i/s
         "foo" "bar": 1774286821.8 i/s - same-ish: difference falls within error
       String#concat: 65805595.8 i/s - 26.99x  (± 0.00) slower
       String#append: 65279164.6 i/s - 27.20x  (± 0.00) slower
            String#+: 65235889.1 i/s - 27.22x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   176.743M i/100ms
          String#dup   175.897M i/100ms
Calculating -------------------------------------
           String#+@      1.749B (± 2.8%) i/s -      8.837B in   5.056610s
          String#dup      1.729B (± 3.3%) i/s -      8.795B in   5.091816s

Comparison:
           String#+@: 1749096224.2 i/s
          String#dup: 1729175815.4 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   897.813k i/100ms
       String#match?   963.329k i/100ms
    String#end_with?     7.483M i/100ms
Calculating -------------------------------------
           String#=~     11.957M (± 4.7%) i/s -     60.153M in   5.042663s
       String#match?     14.189M (± 3.2%) i/s -     71.286M in   5.029312s
    String#end_with?     73.157M (± 2.6%) i/s -    366.680M in   5.015843s

Comparison:
    String#end_with?: 73157386.4 i/s
       String#match?: 14189384.7 i/s - 5.16x  (± 0.00) slower
           String#=~: 11957431.7 i/s - 6.12x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   106.112k i/100ms
          String#sub   490.144k i/100ms
String#dup["string"]=
                         7.444M i/100ms
Calculating -------------------------------------
         String#gsub      4.281M (±12.5%) i/s -     20.904M in   5.014971s
          String#sub      5.369M (± 9.7%) i/s -     26.958M in   5.074749s
String#dup["string"]=
                         74.130M (± 2.5%) i/s -    372.197M in   5.023952s

Comparison:
String#dup["string"]=: 74130400.3 i/s
          String#sub:  5369412.8 i/s - 13.81x  (± 0.00) slower
         String#gsub:  4281325.4 i/s - 17.31x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    56.506k i/100ms
           String#tr    87.803k i/100ms
Calculating -------------------------------------
         String#gsub      1.898M (±10.5%) i/s -      9.380M in   5.014567s
           String#tr    889.238k (± 4.8%) i/s -      4.478M in   5.048310s

Comparison:
         String#gsub:  1897807.7 i/s
           String#tr:   889237.6 i/s - 2.13x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   178.678M i/100ms
         With Freeze   180.250M i/100ms
Calculating -------------------------------------
      Without Freeze      1.775B (± 1.7%) i/s -      8.934B in   5.035345s
         With Freeze      1.787B (± 2.2%) i/s -      9.013B in   5.044878s

Comparison:
         With Freeze: 1787335381.6 i/s
      Without Freeze: 1774781465.5 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     4.728k i/100ms
      String#squeeze    20.037k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     82.792k (±11.0%) i/s -    411.336k in   5.037171s
      String#squeeze    211.299k (± 3.9%) i/s -      1.062M in   5.033926s

Comparison:
      String#squeeze:   211298.7 i/s
 String#gsub/regex+/:    82792.4 i/s - 2.55x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.017M i/100ms
       String#match?   937.751k i/100ms
  String#start_with?     6.576M i/100ms
Calculating -------------------------------------
           String#=~     16.490M (± 5.4%) i/s -     82.356M in   5.010553s
       String#match?     38.366M (± 4.1%) i/s -    192.239M in   5.021090s
  String#start_with?     64.345M (± 3.1%) i/s -    322.219M in   5.012896s

Comparison:
  String#start_with?: 64345252.2 i/s
       String#match?: 38365830.1 i/s - 1.68x  (± 0.00) slower
           String#=~: 16489761.7 i/s - 3.90x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    76.869k i/100ms
    String#[0, n] ==   173.759k i/100ms
   String#[RANGE] ==   254.794k i/100ms
   String#[0...n] ==   182.861k i/100ms
Calculating -------------------------------------
  String#start_with?      3.023M (± 5.9%) i/s -     15.143M in   5.030989s
    String#[0, n] ==      2.051M (± 6.6%) i/s -     10.252M in   5.022281s
   String#[RANGE] ==      2.641M (± 5.1%) i/s -     13.249M in   5.032017s
   String#[0...n] ==      1.882M (± 5.7%) i/s -      9.509M in   5.071927s

Comparison:
  String#start_with?:  3022577.5 i/s
   String#[RANGE] ==:  2640626.7 i/s - 1.14x  (± 0.00) slower
    String#[0, n] ==:  2050847.8 i/s - 1.47x  (± 0.00) slower
   String#[0...n] ==:  1881722.8 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     7.436M i/100ms
 String#sub!'string'   406.758k i/100ms
String#gsub!'string'   342.162k i/100ms
  String#[/regexp/]=     1.724M i/100ms
 String#sub!/regexp/   664.541k i/100ms
String#gsub!/regexp/   474.588k i/100ms
Calculating -------------------------------------
  String#['string']=     74.195M (± 2.3%) i/s -    371.824M in   5.014168s
 String#sub!'string'      5.810M (±15.1%) i/s -     27.660M in   5.057923s
String#gsub!'string'      4.224M (± 5.7%) i/s -     21.214M in   5.041328s
  String#[/regexp/]=     17.482M (± 4.1%) i/s -     87.902M in   5.037288s
 String#sub!/regexp/      7.060M (± 7.8%) i/s -     35.221M in   5.021158s
String#gsub!/regexp/      4.754M (± 5.1%) i/s -     23.729M in   5.005960s

Comparison:
  String#['string']=: 74194830.1 i/s
  String#[/regexp/]=: 17482136.6 i/s - 4.24x  (± 0.00) slower
 String#sub!/regexp/:  7060414.5 i/s - 10.51x  (± 0.00) slower
 String#sub!'string':  5809606.3 i/s - 12.77x  (± 0.00) slower
String#gsub!/regexp/:  4753743.0 i/s - 15.61x  (± 0.00) slower
String#gsub!'string':  4223631.5 i/s - 17.57x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.720M i/100ms
        String#chomp     3.400M i/100ms
String#delete_suffix     8.229M i/100ms
Calculating -------------------------------------
          String#sub     18.649M (± 5.2%) i/s -     94.605M in   5.088419s
        String#chomp     33.579M (± 2.2%) i/s -    170.005M in   5.065354s
String#delete_suffix     82.056M (± 9.0%) i/s -    411.430M in   5.057155s

Comparison:
String#delete_suffix: 82055880.3 i/s
        String#chomp: 33578508.7 i/s - 2.44x  (± 0.00) slower
          String#sub: 18649232.3 i/s - 4.40x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   176.203M i/100ms
          String#sub    11.650M i/100ms
Calculating -------------------------------------
String#delete_prefix      1.759B (± 2.1%) i/s -      8.810B in   5.009724s
          String#sub    117.397M (± 3.3%) i/s -    594.128M in   5.066916s

Comparison:
String#delete_prefix: 1759397769.2 i/s
          String#sub: 117396789.0 i/s - 14.99x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.236M i/100ms
    String#unpack[0]     1.229M i/100ms
Calculating -------------------------------------
      String#unpack1     12.764M (± 4.5%) i/s -     64.293M in   5.047786s
    String#unpack[0]     12.774M (± 4.4%) i/s -     63.888M in   5.011700s

Comparison:
    String#unpack[0]: 12773950.8 i/s
      String#unpack1: 12764211.9 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 23.0.0-dev-d28f52ab, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    11.126k i/100ms
          Time.parse    37.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    333.627k (±10.3%) i/s -      1.647M in   4.995606s
          Time.parse      4.332k (±18.1%) i/s -     19.166k in   4.995784s

Comparison:
        Time.iso8601:   333627.3 i/s
          Time.parse:     4331.6 i/s - 77.02x  (± 0.00) slower

