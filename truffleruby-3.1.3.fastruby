$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       176.209M i/100ms
Function with splat arguments
                       301.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.786B (± 2.1%) i/s -      8.987B in   5.033067s
Function with splat arguments
                          3.161k (±16.2%) i/s -     15.351k in   5.079878s

Comparison:
Function with single Array argument: 1786354518.9 i/s
Function with splat arguments:     3160.7 i/s - 565167.96x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   178.066M i/100ms
Sequential Assignment
                       176.880M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.780B (± 2.8%) i/s -      8.903B in   5.006695s
Sequential Assignment
                          1.764B (± 2.5%) i/s -      8.844B in   5.016693s

Comparison:
 Parallel Assignment: 1779669131.9 i/s
Sequential Assignment: 1764069528.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   176.776M i/100ms
       attr_accessor   179.045M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.765B (± 2.9%) i/s -      8.839B in   5.012831s
       attr_accessor      1.783B (± 3.0%) i/s -      8.952B in   5.026157s

Comparison:
       attr_accessor: 1782783855.4 i/s
   getter_and_setter: 1764807967.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     8.652k i/100ms
         respond_to?   179.552M i/100ms
Calculating -------------------------------------
      begin...rescue     59.508k (± 2.9%) i/s -    302.820k in   5.093072s
         respond_to?      1.779B (± 2.5%) i/s -      8.978B in   5.050120s

Comparison:
         respond_to?: 1778881515.6 i/s
      begin...rescue:    59507.9 i/s - 29893.20x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   175.461M i/100ms
             &method   175.986M i/100ms
Calculating -------------------------------------
              normal      1.776B (± 2.3%) i/s -      8.949B in   5.042409s
             &method      1.781B (± 2.0%) i/s -      8.975B in   5.041594s

Comparison:
             &method: 1780941936.3 i/s
              normal: 1775616667.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        82.000  i/100ms
       define_method   108.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.516k (±49.1%) i/s -      4.018k in   5.007525s
       define_method      4.446k (±56.6%) i/s -      5.400k in   5.783644s

Comparison:
       define_method:     4446.3 i/s
module_eval with string:     1515.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    61.292k i/100ms
       Kernel#format    52.225k i/100ms
            String#%    52.158k i/100ms
Calculating -------------------------------------
         Float#round    650.364k (± 4.1%) i/s -      3.248M in   5.003504s
       Kernel#format    540.326k (± 3.7%) i/s -      2.716M in   5.033174s
            String#%    538.147k (± 3.4%) i/s -      2.712M in   5.046027s

Comparison:
         Float#round:   650364.4 i/s
       Kernel#format:   540325.5 i/s - 1.20x  (± 0.00) slower
            String#%:   538147.2 i/s - 1.21x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   179.373M i/100ms
          OpenStruct   175.413M i/100ms
Calculating -------------------------------------
                Hash      1.766B (± 3.1%) i/s -      8.969B in   5.085332s
          OpenStruct      1.759B (± 3.0%) i/s -      8.946B in   5.090130s

Comparison:
                Hash: 1765504528.6 i/s
          OpenStruct: 1759185575.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   177.733M i/100ms
          OpenStruct     1.923k i/100ms
Calculating -------------------------------------
                Hash      1.765B (± 2.7%) i/s -      8.887B in   5.039504s
          OpenStruct     22.656k (±14.7%) i/s -    109.611k in   5.007448s

Comparison:
                Hash: 1764699743.7 i/s
          OpenStruct:    22656.3 i/s - 77890.08x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   598.527k i/100ms
  ancestors.include?   115.500k i/100ms
Calculating -------------------------------------
  less than or equal      6.912M (± 5.4%) i/s -     34.715M in   5.037909s
  ancestors.include?      1.301M (± 4.8%) i/s -      6.583M in   5.072520s

Comparison:
  less than or equal:  6911718.8 i/s
  ancestors.include?:  1300898.0 i/s - 5.31x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     19.838  (± 5.0%) i/s -    100.000  in   5.044519s
         Kernel loop     19.605  (± 5.1%) i/s -     98.000  in   5.006026s

Comparison:
          While Loop:       19.8 i/s
         Kernel loop:       19.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   173.202M i/100ms
         Array#first   178.891M i/100ms
Calculating -------------------------------------
           Array#[0]      1.779B (± 2.2%) i/s -      9.006B in   5.065638s
         Array#first      1.793B (± 2.1%) i/s -      9.123B in   5.091424s

Comparison:
         Array#first: 1792748157.3 i/s
           Array#[0]: 1778848347.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   179.758M i/100ms
          Array#last   173.993M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.772B (± 2.0%) i/s -      8.988B in   5.072780s
          Array#last      1.781B (± 2.6%) i/s -      9.048B in   5.083579s

Comparison:
          Array#last: 1780958085.0 i/s
          Array#[-1]: 1772489313.7 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   462.200k i/100ms
Calculating -------------------------------------
                find      4.591  (±21.8%) i/s -     12.000  in   5.120067s
             bsearch      4.746M (± 4.7%) i/s -     24.034M in   5.075425s

Comparison:
             bsearch:  4746131.4 i/s
                find:        4.6 i/s - 1033778.28x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.074  (± 0.0%) i/s -      1.000  in  13.441062s
        Array#insert      0.721  (± 0.0%) i/s -      4.000  in   5.551644s

Comparison:
        Array#insert:        0.7 i/s
       Array#unshift:        0.1 i/s - 9.69x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   174.936M i/100ms
          Array#size   177.806M i/100ms
         Array#count   177.622M i/100ms
Calculating -------------------------------------
        Array#length      1.767B (± 1.8%) i/s -      8.922B in   5.051114s
          Array#size      1.775B (± 2.8%) i/s -      8.890B in   5.012670s
         Array#count      1.798B (± 2.3%) i/s -      9.059B in   5.040950s

Comparison:
         Array#count: 1797994959.3 i/s
          Array#size: 1774996777.9 i/s - same-ish: difference falls within error
        Array#length: 1766858191.7 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    19.874k i/100ms
        Array#sample     2.435M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    208.823k (± 4.5%) i/s -      1.053M in   5.055336s
        Array#sample     23.930M (± 3.1%) i/s -    121.749M in   5.092772s

Comparison:
        Array#sample: 23929939.5 i/s
 Array#shuffle.first:   208823.4 i/s - 114.59x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   348.000  i/100ms
          Date.parse   329.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     25.849k (±32.7%) i/s -    103.008k in   4.998305s
          Date.parse     14.562k (±25.4%) i/s -     59.878k in   5.010549s

Comparison:
        Date.iso8601:    25849.3 i/s
          Date.parse:    14562.2 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   153.716k i/100ms
           Array#map   784.430k i/100ms
Calculating -------------------------------------
   Array#each + push      1.673M (±10.8%) i/s -      8.301M in   5.046454s
           Array#map      8.446M (± 5.0%) i/s -     42.359M in   5.028205s

Comparison:
           Array#map:  8445706.7 i/s
   Array#each + push:  1673088.9 i/s - 5.05x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     7.669M i/100ms
               #each    38.422M i/100ms
Calculating -------------------------------------
            For loop     75.209M (± 2.3%) i/s -    375.757M in   4.998831s
               #each    381.815M (± 2.8%) i/s -      1.921B in   5.035571s

Comparison:
               #each: 381815010.3 i/s
            For loop: 75208872.7 i/s - 5.08x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   737.589k i/100ms
     each_with_index     1.065M i/100ms
Calculating -------------------------------------
          While Loop      7.581M (± 3.7%) i/s -     38.355M in   5.066776s
     each_with_index     10.663M (± 3.5%) i/s -     53.273M in   5.002041s

Comparison:
     each_with_index: 10663458.9 i/s
          While Loop:  7580835.9 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   139.106k i/100ms
      inject to_proc   139.116k i/100ms
        inject block   142.032k i/100ms
Calculating -------------------------------------
       inject symbol      1.406M (± 2.0%) i/s -      7.094M in   5.047033s
      inject to_proc      1.408M (± 2.6%) i/s -      7.095M in   5.042754s
        inject block      1.388M (± 2.6%) i/s -      6.960M in   5.017717s

Comparison:
      inject to_proc:  1407943.8 i/s
       inject symbol:  1406229.4 i/s - same-ish: difference falls within error
        inject block:  1387989.6 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    10.748k i/100ms
   Array#map.flatten    15.016k i/100ms
      Array#flat_map    34.556k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    147.858k (± 8.7%) i/s -    730.864k in   5.006196s
   Array#map.flatten    148.624k (± 7.0%) i/s -    750.800k in   5.076277s
      Array#flat_map    350.403k (± 6.2%) i/s -      1.762M in   5.050327s

Comparison:
      Array#flat_map:   350403.4 i/s
   Array#map.flatten:   148624.1 i/s - 2.36x  (± 0.00) slower
Array#map.flatten(1):   147858.0 i/s - 2.37x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   146.234k i/100ms
  Array#reverse_each     1.552M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.759M (± 4.8%) i/s -      8.774M in   4.999515s
  Array#reverse_each     15.661M (± 2.3%) i/s -     79.147M in   5.056562s

Comparison:
  Array#reverse_each: 15660872.9 i/s
  Array#reverse.each:  1759144.6 i/s - 8.90x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       426.456k i/100ms
   Enumerable#detect     2.773M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          5.566M (± 9.3%) i/s -    110.026M in  20.021010s
   Enumerable#detect     28.320M (± 3.8%) i/s -    565.626M in  20.002479s

Comparison:
   Enumerable#detect: 28319865.5 i/s
Enumerable#select.first:  5565870.9 i/s - 5.09x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       155.210k i/100ms
Enumerable#select.last
                       298.511k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.822M (± 4.6%) i/s -      9.157M in   5.036142s
Enumerable#select.last
                          2.900M (± 5.4%) i/s -     14.627M in   5.059059s

Comparison:
Enumerable#select.last:  2900345.7 i/s
Enumerable#reverse.detect:  1822261.5 i/s - 1.59x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         1.984k i/100ms
  Enumerable#sort_by     2.295k i/100ms
     Enumerable#sort     2.766k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         22.683k (±12.1%) i/s -    111.104k in   5.036336s
  Enumerable#sort_by     22.548k (±18.9%) i/s -    103.275k in   5.000387s
     Enumerable#sort     32.006k (± 4.1%) i/s -    160.428k in   5.021125s

Comparison:
     Enumerable#sort:    32005.8 i/s
Enumerable#sort_by (Symbol#to_proc):    22683.2 i/s - 1.41x  (± 0.00) slower
  Enumerable#sort_by:    22547.7 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   434.900k i/100ms
Enumerable#sort_by...first
                         5.162k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      4.380M (± 3.3%) i/s -     22.180M in   5.069111s
Enumerable#sort_by...first
                         58.839k (± 5.2%) i/s -    294.234k in   5.015428s

Comparison:
   Enumerable#min_by:  4380398.2 i/s
Enumerable#sort_by...first:    58838.6 i/s - 74.45x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   276.201k i/100ms
            Hash#dup   296.620k i/100ms
Calculating -------------------------------------
              Hash[]      3.088M (± 5.0%) i/s -     15.467M in   5.022161s
            Hash#dup      3.020M (± 6.1%) i/s -     15.128M in   5.028384s

Comparison:
              Hash[]:  3087974.5 i/s
            Hash#dup:  3019529.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   189.601M i/100ms
  Hash#fetch, symbol   191.094M i/100ms
     Hash#[], string     2.603M i/100ms
  Hash#fetch, string     2.933M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.896B (± 4.1%) i/s -      9.480B in   5.008580s
  Hash#fetch, symbol      1.853B (± 3.8%) i/s -      9.364B in   5.061778s
     Hash#[], string    137.850M (± 6.4%) i/s -    687.063M in   5.005150s
  Hash#fetch, string    126.191M (± 5.6%) i/s -    630.664M in   5.014607s

Comparison:
     Hash#[], symbol: 1896050526.9 i/s
  Hash#fetch, symbol: 1852568467.2 i/s - same-ish: difference falls within error
     Hash#[], string: 137850137.2 i/s - 13.75x  (± 0.00) slower
  Hash#fetch, string: 126190782.7 i/s - 15.03x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    74.675M i/100ms
             Hash#[]    72.446M i/100ms
          Hash#[] ||    75.073M i/100ms
          Hash#[] &&    76.733M i/100ms
          Hash#fetch    75.276M i/100ms
 Hash#fetch fallback    76.573M i/100ms
Calculating -------------------------------------
            Hash#dig    755.545M (± 3.7%) i/s -      3.808B in   5.047883s
             Hash#[]    727.885M (± 4.8%) i/s -      3.695B in   5.088784s
          Hash#[] ||    759.256M (± 3.0%) i/s -      3.829B in   5.047470s
          Hash#[] &&    755.431M (± 3.5%) i/s -      3.837B in   5.085219s
          Hash#fetch    762.461M (± 3.2%) i/s -      3.839B in   5.040579s
 Hash#fetch fallback    762.258M (± 3.1%) i/s -      3.829B in   5.027731s

Comparison:
          Hash#fetch: 762461367.7 i/s
 Hash#fetch fallback: 762258394.2 i/s - same-ish: difference falls within error
          Hash#[] ||: 759256440.7 i/s - same-ish: difference falls within error
            Hash#dig: 755544904.1 i/s - same-ish: difference falls within error
          Hash#[] &&: 755430717.4 i/s - same-ish: difference falls within error
             Hash#[]: 727885430.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   180.781M i/100ms
  Hash#fetch + block   188.869M i/100ms
    Hash#fetch + arg   190.144M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.887B (± 3.8%) i/s -      9.581B in   5.085299s
  Hash#fetch + block      1.855B (± 3.4%) i/s -      9.443B in   5.095828s
    Hash#fetch + arg      1.864B (± 3.6%) i/s -      9.317B in   5.006009s

Comparison:
  Hash#fetch + const: 1886970403.3 i/s
    Hash#fetch + arg: 1863721932.0 i/s - same-ish: difference falls within error
  Hash#fetch + block: 1855363411.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    16.471k i/100ms
         sort + to_h     2.074k i/100ms
Calculating -------------------------------------
      sort_by + to_h    269.926k (± 8.4%) i/s -      1.351M in   5.042495s
         sort + to_h    113.148k (±11.3%) i/s -    557.906k in   5.009651s

Comparison:
      sort_by + to_h:   269925.6 i/s
         sort + to_h:   113147.9 i/s - 2.39x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   123.821k i/100ms
       Hash#each_key   140.771k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.235M (±11.3%) i/s -      6.067M in   5.057536s
       Hash#each_key      1.383M (± 5.0%) i/s -      6.898M in   5.000197s

Comparison:
       Hash#each_key:  1382908.7 i/s
      Hash#keys.each:  1234529.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   113.000  i/100ms
           Hash#key?     7.817M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.415k (±10.7%) i/s -      7.006k in   5.053111s
           Hash#key?     78.408M (± 3.6%) i/s -    398.645M in   5.091246s

Comparison:
           Hash#key?: 78408166.5 i/s
  Hash#keys.include?:     1415.1 i/s - 55407.76x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    24.407k i/100ms
            Hash#[]=    28.644k i/100ms
Calculating -------------------------------------
         Hash#merge!    310.811k (± 5.3%) i/s -      1.562M in   5.040026s
            Hash#[]=    299.867k (± 9.0%) i/s -      1.489M in   5.032645s

Comparison:
         Hash#merge!:   310810.7 i/s
            Hash#[]=:   299866.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        13.870k i/100ms
      Hash#merge({})    12.434k i/100ms
 Hash#dup#merge!({})    20.323k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        221.564k (±12.7%) i/s -      1.096M in   5.040686s
      Hash#merge({})    129.695k (±10.5%) i/s -    646.568k in   5.045741s
 Hash#dup#merge!({})    206.366k (±10.7%) i/s -      1.036M in   5.085891s

Comparison:
{}#merge!(Hash) do end:   221564.1 i/s
 Hash#dup#merge!({}):   206366.4 i/s - same-ish: difference falls within error
      Hash#merge({}):   129695.0 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   191.671M i/100ms
          Hash#merge   186.111M i/100ms
Calculating -------------------------------------
        Hash#**other      1.915B (± 3.0%) i/s -      9.584B in   5.008509s
          Hash#merge      1.901B (± 3.3%) i/s -      9.492B in   4.999695s

Comparison:
        Hash#**other: 1915238831.3 i/s
          Hash#merge: 1900633485.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   366.000  i/100ms
         Hash#merge!    29.591k i/100ms
Calculating -------------------------------------
          Hash#merge      5.698k (± 8.2%) i/s -     28.548k in   5.046389s
         Hash#merge!    308.466k (± 4.8%) i/s -      1.539M in   5.000146s

Comparison:
         Hash#merge!:   308465.8 i/s
          Hash#merge:     5698.2 i/s - 54.13x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      955.824k i/100ms
Array#each             884.097k i/100ms
Array#each_w/_object   879.792k i/100ms
Hash#select-include      1.459M i/100ms
Calculating -------------------------------------
Hash#native-slice        10.775M (± 5.0%) i/s -     54.482M in   5.069315s
Array#each                8.705M (± 7.2%) i/s -     43.321M in   5.003168s
Array#each_w/_object      8.876M (± 4.9%) i/s -     44.869M in   5.067665s
Hash#select-include      15.903M (± 6.2%) i/s -     80.232M in   5.065050s

Comparison:
Hash#select-include : 15903488.8 i/s
Hash#native-slice   : 10775068.2 i/s - 1.48x  (± 0.00) slower
Array#each_w/_object:  8875713.8 i/s - 1.79x  (± 0.00) slower
Array#each          :  8705369.3 i/s - 1.83x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   118.000  i/100ms
         Hash#value?   340.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.399k (±11.7%) i/s -      6.962k in   5.072301s
         Hash#value?      3.467k (± 3.3%) i/s -     17.340k in   5.006656s

Comparison:
         Hash#value?:     3467.3 i/s
Hash#values.include?:     1399.0 i/s - 2.48x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   187.718M i/100ms
                send   189.916M i/100ms
      method_missing   186.597M i/100ms
Calculating -------------------------------------
                call      1.884B (± 4.3%) i/s -      9.574B in   5.092408s
                send      1.877B (± 5.9%) i/s -      9.496B in   5.080268s
      method_missing      1.877B (± 3.2%) i/s -      9.516B in   5.074012s

Comparison:
                call: 1883627847.8 i/s
      method_missing: 1877495504.2 i/s - same-ish: difference falls within error
                send: 1876634546.2 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    27.429k i/100ms
      Symbol#to_proc    30.739k i/100ms
Calculating -------------------------------------
               Block    317.437k (± 7.6%) i/s -      1.591M in   5.043139s
      Symbol#to_proc    307.970k (±10.1%) i/s -      1.537M in   5.059031s

Comparison:
               Block:   317436.9 i/s
      Symbol#to_proc:   307970.1 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   189.549M i/100ms
       block + yield   190.162M i/100ms
        unused block   190.342M i/100ms
               yield   188.299M i/100ms
Calculating -------------------------------------
          block.call      1.911B (± 3.8%) i/s -      9.667B in   5.066306s
       block + yield      1.899B (± 3.5%) i/s -      9.508B in   5.012845s
        unused block      1.884B (± 4.4%) i/s -      9.517B in   5.063059s
               yield      1.866B (± 4.5%) i/s -      9.415B in   5.056097s

Comparison:
          block.call: 1910964779.2 i/s
       block + yield: 1899236170.7 i/s - same-ish: difference falls within error
        unused block: 1883502505.2 i/s - same-ish: difference falls within error
               yield: 1866124040.1 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    13.136k i/100ms
      range#include?   237.000  i/100ms
       range#member?   623.000  i/100ms
       plain compare    25.170k i/100ms
Calculating -------------------------------------
        range#cover?    144.730k (±36.2%) i/s -    630.528k in   4.999914s
      range#include?      8.294k (±36.8%) i/s -     34.128k in   5.000424s
       range#member?      7.192k (±37.9%) i/s -     31.773k in   5.042002s
       plain compare    384.323k (± 8.6%) i/s -      1.913M in   5.019960s

Comparison:
       plain compare:   384323.0 i/s
        range#cover?:   144729.5 i/s - 2.66x  (± 0.00) slower
      range#include?:     8294.4 i/s - 46.34x  (± 0.00) slower
       range#member?:     7191.7 i/s - 53.44x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    11.819M i/100ms
           String#=~    11.453M i/100ms
          Regexp#===    11.392M i/100ms
        String#match     9.994M i/100ms
Calculating -------------------------------------
       String#match?    121.803M (± 3.8%) i/s -    614.582M in   5.053209s
           String#=~    118.886M (± 4.2%) i/s -    595.552M in   5.018443s
          Regexp#===    117.553M (± 3.9%) i/s -    592.368M in   5.046968s
        String#match     97.979M (± 3.6%) i/s -    489.725M in   5.005084s

Comparison:
       String#match?: 121803347.7 i/s
           String#=~: 118886025.4 i/s - same-ish: difference falls within error
          Regexp#===: 117552672.0 i/s - same-ish: difference falls within error
        String#match: 97978974.2 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.864M i/100ms
      String#casecmp     3.218M i/100ms
Calculating -------------------------------------
String#downcase + ==     20.414M (± 8.5%) i/s -    102.510M in   5.073129s
      String#casecmp     31.834M (± 8.8%) i/s -    160.922M in   5.114600s

Comparison:
      String#casecmp: 31833615.4 i/s
String#downcase + ==: 20414434.1 i/s - 1.56x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     5.665M i/100ms
       String#concat     6.948M i/100ms
       String#append     6.907M i/100ms
         "foo" "bar"   189.611M i/100ms
  "#{'foo'}#{'bar'}"   191.228M i/100ms
Calculating -------------------------------------
            String#+     69.099M (± 6.4%) i/s -    345.558M in   5.021145s
       String#concat     67.930M (± 5.0%) i/s -    340.429M in   5.024011s
       String#append     68.595M (± 4.1%) i/s -    345.366M in   5.043814s
         "foo" "bar"      1.877B (± 4.8%) i/s -      9.481B in   5.062680s
  "#{'foo'}#{'bar'}"      1.879B (± 3.0%) i/s -      9.561B in   5.093608s

Comparison:
  "#{'foo'}#{'bar'}": 1878875217.5 i/s
         "foo" "bar": 1877389212.6 i/s - same-ish: difference falls within error
            String#+: 69098821.9 i/s - 27.19x  (± 0.00) slower
       String#append: 68595238.0 i/s - 27.39x  (± 0.00) slower
       String#concat: 67930368.0 i/s - 27.66x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   178.866M i/100ms
          String#dup   187.749M i/100ms
Calculating -------------------------------------
           String#+@      1.914B (± 3.0%) i/s -      9.659B in   5.052007s
          String#dup      1.892B (± 3.0%) i/s -      9.575B in   5.065771s

Comparison:
           String#+@: 1913662776.9 i/s
          String#dup: 1891877707.7 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   655.112k i/100ms
       String#match?   807.842k i/100ms
    String#end_with?    11.468M i/100ms
Calculating -------------------------------------
           String#=~      8.190M (± 5.1%) i/s -     41.272M in   5.053941s
       String#match?     10.006M (± 3.7%) i/s -     50.086M in   5.012658s
    String#end_with?    116.308M (± 3.0%) i/s -    584.877M in   5.033267s

Comparison:
    String#end_with?: 116307931.8 i/s
       String#match?: 10006170.4 i/s - 11.62x  (± 0.00) slower
           String#=~:  8190383.4 i/s - 14.20x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    49.660k i/100ms
          String#sub   362.214k i/100ms
String#dup["string"]=
                         7.101M i/100ms
Calculating -------------------------------------
         String#gsub      4.143M (±15.0%) i/s -     19.914M in   5.001468s
          String#sub      5.598M (± 9.5%) i/s -     27.890M in   5.032864s
String#dup["string"]=
                         70.195M (± 4.3%) i/s -    355.030M in   5.067614s

Comparison:
String#dup["string"]=: 70194536.0 i/s
          String#sub:  5597632.2 i/s - 12.54x  (± 0.00) slower
         String#gsub:  4143318.4 i/s - 16.94x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    41.296k i/100ms
           String#tr    83.795k i/100ms
Calculating -------------------------------------
         String#gsub      1.967M (±11.4%) i/s -      9.663M in   4.996050s
           String#tr    883.696k (± 6.7%) i/s -      4.441M in   5.049596s

Comparison:
         String#gsub:  1967451.4 i/s
           String#tr:   883695.9 i/s - 2.23x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   190.218M i/100ms
         With Freeze   190.453M i/100ms
Calculating -------------------------------------
      Without Freeze      1.776B (± 3.5%) i/s -      8.940B in   5.039652s
         With Freeze      1.833B (± 2.5%) i/s -      9.332B in   5.095022s

Comparison:
         With Freeze: 1832758010.2 i/s
      Without Freeze: 1776198491.1 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.851k i/100ms
      String#squeeze    20.028k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     84.240k (±12.2%) i/s -    412.057k in   5.004286s
      String#squeeze    224.832k (± 4.2%) i/s -      1.142M in   5.086823s

Comparison:
      String#squeeze:   224832.1 i/s
 String#gsub/regex+/:    84240.4 i/s - 2.67x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     3.194M i/100ms
       String#match?     4.485M i/100ms
  String#start_with?     8.510M i/100ms
Calculating -------------------------------------
           String#=~     33.310M (± 5.2%) i/s -    166.067M in   4.999680s
       String#match?     44.501M (± 2.2%) i/s -    224.258M in   5.041836s
  String#start_with?     83.992M (± 3.1%) i/s -    425.491M in   5.070915s

Comparison:
  String#start_with?: 83992339.1 i/s
       String#match?: 44500970.1 i/s - 1.89x  (± 0.00) slower
           String#=~: 33310412.0 i/s - 2.52x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    80.941k i/100ms
    String#[0, n] ==   213.168k i/100ms
   String#[RANGE] ==   273.321k i/100ms
   String#[0...n] ==   189.130k i/100ms
Calculating -------------------------------------
  String#start_with?      3.652M (± 4.6%) i/s -     18.293M in   5.019829s
    String#[0, n] ==      2.228M (± 4.5%) i/s -     11.298M in   5.082274s
   String#[RANGE] ==      2.819M (± 5.1%) i/s -     14.213M in   5.055369s
   String#[0...n] ==      1.995M (± 6.0%) i/s -     10.024M in   5.042469s

Comparison:
  String#start_with?:  3652356.9 i/s
   String#[RANGE] ==:  2819053.5 i/s - 1.30x  (± 0.00) slower
    String#[0, n] ==:  2227536.7 i/s - 1.64x  (± 0.00) slower
   String#[0...n] ==:  1995424.7 i/s - 1.83x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     7.621M i/100ms
 String#sub!'string'    73.687k i/100ms
String#gsub!'string'   363.611k i/100ms
  String#[/regexp/]=     1.803M i/100ms
 String#sub!/regexp/   509.357k i/100ms
String#gsub!/regexp/   341.431k i/100ms
Calculating -------------------------------------
  String#['string']=     78.813M (± 3.3%) i/s -    396.274M in   5.033602s
 String#sub!'string'      5.576M (±25.0%) i/s -     24.685M in   5.000756s
String#gsub!'string'      4.600M (± 7.4%) i/s -     22.907M in   5.013275s
  String#[/regexp/]=     17.862M (± 4.7%) i/s -     90.160M in   5.059238s
 String#sub!/regexp/      6.444M (±10.2%) i/s -     32.089M in   5.035604s
String#gsub!/regexp/      4.598M (± 9.4%) i/s -     22.876M in   5.023622s

Comparison:
  String#['string']=: 78813224.0 i/s
  String#[/regexp/]=: 17862267.0 i/s - 4.41x  (± 0.00) slower
 String#sub!/regexp/:  6443666.8 i/s - 12.23x  (± 0.00) slower
 String#sub!'string':  5576020.5 i/s - 14.13x  (± 0.00) slower
String#gsub!'string':  4600480.8 i/s - 17.13x  (± 0.00) slower
String#gsub!/regexp/:  4598041.3 i/s - 17.14x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub    48.795k i/100ms
        String#chomp     3.839M i/100ms
String#delete_suffix     7.517M i/100ms
Calculating -------------------------------------
          String#sub     20.057M (±11.6%) i/s -     97.785M in   4.995346s
        String#chomp     38.757M (± 2.8%) i/s -    195.770M in   5.055233s
String#delete_suffix     75.896M (±10.4%) i/s -    375.861M in   5.021052s

Comparison:
String#delete_suffix: 75896250.8 i/s
        String#chomp: 38756724.7 i/s - 1.96x  (± 0.00) slower
          String#sub: 20056667.8 i/s - 3.78x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   186.722M i/100ms
          String#sub    84.536k i/100ms
Calculating -------------------------------------
String#delete_prefix      1.874B (± 2.6%) i/s -      9.523B in   5.086071s
          String#sub    127.397M (±11.6%) i/s -    623.707M in   4.991255s

Comparison:
String#delete_prefix: 1873578759.0 i/s
          String#sub: 127396615.2 i/s - 14.71x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.096M i/100ms
    String#unpack[0]     1.259M i/100ms
Calculating -------------------------------------
      String#unpack1     12.586M (± 8.6%) i/s -     62.446M in   5.022893s
    String#unpack[0]     12.773M (± 5.0%) i/s -     64.216M in   5.040224s

Comparison:
    String#unpack[0]: 12772989.6 i/s
      String#unpack1: 12585766.9 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 23.1.0-dev-1b9b7f5b, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601     9.737k i/100ms
          Time.parse   177.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    132.677k (±44.8%) i/s -    555.009k in   5.031568s
          Time.parse      6.064k (±22.7%) i/s -     26.727k in   5.003732s

Comparison:
        Time.iso8601:   132677.5 i/s
          Time.parse:     6064.2 i/s - 21.88x  (± 0.00) slower

