$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       228.249M i/100ms
Function with splat arguments
                       759.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          2.332B (± 6.5%) i/s -     11.641B in   5.013707s
Function with splat arguments
                          8.132k (± 3.8%) i/s -     40.986k in   5.047419s

Comparison:
Function with single Array argument: 2331779082.7 i/s
Function with splat arguments:     8131.6 i/s - 286756.79x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   237.161M i/100ms
Sequential Assignment
                       208.057M i/100ms
Calculating -------------------------------------
 Parallel Assignment      2.407B (± 5.3%) i/s -     12.095B in   5.040752s
Sequential Assignment
                          2.310B (± 6.2%) i/s -     11.651B in   5.063633s

Comparison:
 Parallel Assignment: 2406554611.9 i/s
Sequential Assignment: 2309955938.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   230.011M i/100ms
       attr_accessor   230.802M i/100ms
Calculating -------------------------------------
   getter_and_setter      2.397B (± 4.9%) i/s -     12.191B in   5.097374s
       attr_accessor      2.389B (± 4.9%) i/s -     12.002B in   5.036171s

Comparison:
   getter_and_setter: 2397468000.8 i/s
       attr_accessor: 2389062048.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     8.236k i/100ms
         respond_to?   240.302M i/100ms
Calculating -------------------------------------
      begin...rescue     53.553k (± 2.6%) i/s -    271.788k in   5.078442s
         respond_to?      2.396B (± 4.5%) i/s -     12.015B in   5.024830s

Comparison:
         respond_to?: 2396040058.6 i/s
      begin...rescue:    53553.2 i/s - 44741.32x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   226.021M i/100ms
             &method   226.926M i/100ms
Calculating -------------------------------------
              normal      2.355B (± 5.4%) i/s -     11.753B in   5.005900s
             &method      2.409B (± 5.0%) i/s -     12.027B in   5.005849s

Comparison:
             &method: 2408834043.3 i/s
              normal: 2354921117.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       103.000  i/100ms
       define_method   132.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.704k (±51.4%) i/s -      5.150k in   5.009307s
       define_method      3.396k (±59.7%) i/s -      6.204k in   6.083199s

Comparison:
       define_method:     3396.2 i/s
module_eval with string:     1703.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    68.372k i/100ms
       Kernel#format    66.555k i/100ms
            String#%    65.188k i/100ms
Calculating -------------------------------------
         Float#round    774.373k (± 6.1%) i/s -      3.897M in   5.051873s
       Kernel#format    669.854k (± 6.3%) i/s -      3.394M in   5.087962s
            String#%    677.406k (± 4.8%) i/s -      3.390M in   5.015933s

Comparison:
         Float#round:   774373.2 i/s
            String#%:   677406.0 i/s - 1.14x  (± 0.00) slower
       Kernel#format:   669854.3 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   233.510M i/100ms
          OpenStruct   223.907M i/100ms
Calculating -------------------------------------
                Hash      2.382B (± 4.4%) i/s -     11.909B in   5.010108s
          OpenStruct      2.402B (± 4.4%) i/s -     12.091B in   5.043398s

Comparison:
          OpenStruct: 2402163060.5 i/s
                Hash: 2381767046.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   229.391M i/100ms
          OpenStruct     2.581k i/100ms
Calculating -------------------------------------
                Hash      2.321B (± 6.9%) i/s -     11.699B in   5.065220s
          OpenStruct     28.418k (±11.3%) i/s -    141.955k in   5.092852s

Comparison:
                Hash: 2320686672.4 i/s
          OpenStruct:    28418.2 i/s - 81661.89x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   683.717k i/100ms
  ancestors.include?   139.975k i/100ms
Calculating -------------------------------------
  less than or equal      8.099M (± 6.2%) i/s -     40.339M in   5.000252s
  ancestors.include?      1.459M (± 3.7%) i/s -      7.419M in   5.091819s

Comparison:
  less than or equal:  8098713.1 i/s
  ancestors.include?:  1459035.9 i/s - 5.55x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     23.070  (± 4.3%) i/s -    115.000  in   4.999277s
         Kernel loop     23.927  (± 4.2%) i/s -    120.000  in   5.031701s

Comparison:
         Kernel loop:       23.9 i/s
          While Loop:       23.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   233.159M i/100ms
         Array#first   235.319M i/100ms
Calculating -------------------------------------
           Array#[0]      2.344B (± 5.0%) i/s -     11.891B in   5.085689s
         Array#first      2.379B (± 4.8%) i/s -     12.001B in   5.056582s

Comparison:
         Array#first: 2378961453.6 i/s
           Array#[0]: 2344212509.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   224.137M i/100ms
          Array#last   221.311M i/100ms
Calculating -------------------------------------
          Array#[-1]      2.327B (± 4.8%) i/s -     11.655B in   5.021054s
          Array#last      2.344B (± 5.0%) i/s -     11.729B in   5.016576s

Comparison:
          Array#last: 2344076514.8 i/s
          Array#[-1]: 2326712480.9 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   536.541k i/100ms
Calculating -------------------------------------
                find      6.892  (±29.0%) i/s -     14.000  in   5.004099s
             bsearch      5.547M (± 6.3%) i/s -     27.900M in   5.050263s

Comparison:
             bsearch:  5547473.7 i/s
                find:        6.9 i/s - 804915.68x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.125  (± 0.0%) i/s -      1.000  in   7.968298s
        Array#insert      0.948  (± 0.0%) i/s -      5.000  in   5.277289s

Comparison:
        Array#insert:        0.9 i/s
       Array#unshift:        0.1 i/s - 7.55x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   232.822M i/100ms
          Array#size   220.203M i/100ms
         Array#count   247.132M i/100ms
Calculating -------------------------------------
        Array#length      2.342B (± 5.8%) i/s -     11.874B in   5.087258s
          Array#size      2.345B (± 5.5%) i/s -     11.891B in   5.087305s
         Array#count      2.407B (± 5.0%) i/s -     12.109B in   5.044900s

Comparison:
         Array#count: 2406614618.2 i/s
          Array#size: 2344585201.4 i/s - same-ish: difference falls within error
        Array#length: 2342108691.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    25.308k i/100ms
        Array#sample     2.999M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    254.689k (± 5.3%) i/s -      1.291M in   5.082535s
        Array#sample     30.039M (± 5.6%) i/s -    149.946M in   5.008933s

Comparison:
        Array#sample: 30038506.7 i/s
 Array#shuffle.first:   254689.4 i/s - 117.94x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   340.000  i/100ms
          Date.parse   293.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     22.745k (±36.2%) i/s -     93.840k in   5.099200s
          Date.parse      8.427k (±27.0%) i/s -     38.969k in   5.140294s

Comparison:
        Date.iso8601:    22745.3 i/s
          Date.parse:     8426.9 i/s - 2.70x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   140.834k i/100ms
           Array#map   524.109k i/100ms
Calculating -------------------------------------
   Array#each + push      1.484M (± 4.6%) i/s -      7.464M in   5.039421s
           Array#map      5.065M (± 8.8%) i/s -     25.157M in   5.018801s

Comparison:
           Array#map:  5065431.6 i/s
   Array#each + push:  1484307.0 i/s - 3.41x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     9.279M i/100ms
               #each    46.326M i/100ms
Calculating -------------------------------------
            For loop     99.383M (± 4.9%) i/s -    501.068M in   5.054315s
               #each    462.842M (± 5.0%) i/s -      2.316B in   5.017680s

Comparison:
               #each: 462841806.6 i/s
            For loop: 99382814.2 i/s - 4.66x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   909.732k i/100ms
     each_with_index     1.298M i/100ms
Calculating -------------------------------------
          While Loop      8.934M (± 6.6%) i/s -     44.577M in   5.011996s
     each_with_index     12.738M (± 7.1%) i/s -     63.606M in   5.023136s

Comparison:
     each_with_index: 12737557.3 i/s
          While Loop:  8934058.5 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   146.982k i/100ms
      inject to_proc   148.922k i/100ms
        inject block   144.084k i/100ms
Calculating -------------------------------------
       inject symbol      1.464M (± 4.6%) i/s -      7.349M in   5.029074s
      inject to_proc      1.492M (± 4.3%) i/s -      7.446M in   5.000735s
        inject block      1.475M (± 5.0%) i/s -      7.492M in   5.094799s

Comparison:
      inject to_proc:  1491811.9 i/s
        inject block:  1474523.3 i/s - same-ish: difference falls within error
       inject symbol:  1464431.3 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    10.943k i/100ms
   Array#map.flatten    11.186k i/100ms
      Array#flat_map    31.588k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    111.612k (± 4.3%) i/s -    558.093k in   5.009608s
   Array#map.flatten    114.195k (± 3.4%) i/s -    570.486k in   5.001397s
      Array#flat_map    314.893k (± 4.9%) i/s -      1.579M in   5.028321s

Comparison:
      Array#flat_map:   314892.7 i/s
   Array#map.flatten:   114195.3 i/s - 2.76x  (± 0.00) slower
Array#map.flatten(1):   111612.2 i/s - 2.82x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   191.681k i/100ms
  Array#reverse_each     1.977M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.987M (± 4.6%) i/s -      9.967M in   5.027589s
  Array#reverse_each     19.607M (± 5.0%) i/s -     98.838M in   5.054379s

Comparison:
  Array#reverse_each: 19606602.0 i/s
  Array#reverse.each:  1986790.8 i/s - 9.87x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       553.065k i/100ms
   Enumerable#detect     3.631M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          6.050M (± 7.1%) i/s -    120.568M in  20.080719s
   Enumerable#detect     37.533M (± 5.1%) i/s -    751.633M in  20.079069s

Comparison:
   Enumerable#detect: 37533442.8 i/s
Enumerable#select.first:  6050121.0 i/s - 6.20x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       192.552k i/100ms
Enumerable#select.last
                       389.589k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.088M (± 5.3%) i/s -     10.590M in   5.087077s
Enumerable#select.last
                          4.003M (± 4.4%) i/s -     20.259M in   5.071137s

Comparison:
Enumerable#select.last:  4002552.2 i/s
Enumerable#reverse.detect:  2088129.7 i/s - 1.92x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         1.963k i/100ms
  Enumerable#sort_by     2.394k i/100ms
     Enumerable#sort     2.763k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         24.547k (±10.9%) i/s -    121.706k in   5.056559s
  Enumerable#sort_by     24.009k (±10.9%) i/s -    119.700k in   5.084915s
     Enumerable#sort     35.653k (± 4.7%) i/s -    179.595k in   5.048725s

Comparison:
     Enumerable#sort:    35653.5 i/s
Enumerable#sort_by (Symbol#to_proc):    24547.1 i/s - 1.45x  (± 0.00) slower
  Enumerable#sort_by:    24009.0 i/s - 1.49x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   535.297k i/100ms
Enumerable#sort_by...first
                         5.328k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      5.119M (± 6.9%) i/s -     25.694M in   5.044561s
Enumerable#sort_by...first
                         60.680k (± 4.5%) i/s -    303.696k in   5.015362s

Comparison:
   Enumerable#min_by:  5118736.8 i/s
Enumerable#sort_by...first:    60679.9 i/s - 84.36x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   177.291k i/100ms
            Hash#dup   188.962k i/100ms
Calculating -------------------------------------
              Hash[]      1.999M (± 4.1%) i/s -     10.106M in   5.063821s
            Hash#dup      2.031M (± 4.0%) i/s -     10.204M in   5.031855s

Comparison:
            Hash#dup:  2031096.8 i/s
              Hash[]:  1998987.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   219.752M i/100ms
  Hash#fetch, symbol   232.611M i/100ms
     Hash#[], string     2.698M i/100ms
  Hash#fetch, string     2.728M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      2.375B (± 4.3%) i/s -     11.867B in   5.004741s
  Hash#fetch, symbol      2.363B (± 6.3%) i/s -     11.863B in   5.041591s
     Hash#[], string    151.055M (± 7.2%) i/s -    752.715M in   5.009184s
  Hash#fetch, string    157.304M (± 6.8%) i/s -    785.550M in   5.017942s

Comparison:
     Hash#[], symbol: 2375475262.2 i/s
  Hash#fetch, symbol: 2362663843.3 i/s - same-ish: difference falls within error
  Hash#fetch, string: 157304306.5 i/s - 15.10x  (± 0.00) slower
     Hash#[], string: 151055485.9 i/s - 15.73x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    45.449M i/100ms
             Hash#[]    48.324M i/100ms
          Hash#[] ||    47.948M i/100ms
          Hash#[] &&    50.158M i/100ms
          Hash#fetch    49.295M i/100ms
 Hash#fetch fallback    50.715M i/100ms
Calculating -------------------------------------
            Hash#dig    495.435M (± 5.5%) i/s -      2.500B in   5.061405s
             Hash#[]    494.315M (± 4.8%) i/s -      2.513B in   5.095555s
          Hash#[] ||    503.452M (± 5.2%) i/s -      2.541B in   5.061604s
          Hash#[] &&    491.658M (± 6.8%) i/s -      2.458B in   5.023456s
          Hash#fetch    497.649M (± 5.4%) i/s -      2.514B in   5.067305s
 Hash#fetch fallback    490.632M (± 4.5%) i/s -      2.485B in   5.075315s

Comparison:
          Hash#[] ||: 503452481.7 i/s
          Hash#fetch: 497648516.6 i/s - same-ish: difference falls within error
            Hash#dig: 495434989.2 i/s - same-ish: difference falls within error
             Hash#[]: 494315274.4 i/s - same-ish: difference falls within error
          Hash#[] &&: 491658297.5 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 490631524.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   239.072M i/100ms
  Hash#fetch + block   232.138M i/100ms
    Hash#fetch + arg   255.331M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      2.373B (± 5.9%) i/s -     11.954B in   5.056067s
  Hash#fetch + block      2.384B (± 4.8%) i/s -     12.071B in   5.074821s
    Hash#fetch + arg      2.381B (± 6.0%) i/s -     12.001B in   5.059153s

Comparison:
  Hash#fetch + block: 2384466784.8 i/s
    Hash#fetch + arg: 2381066541.9 i/s - same-ish: difference falls within error
  Hash#fetch + const: 2372822189.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    16.134k i/100ms
         sort + to_h     6.063k i/100ms
Calculating -------------------------------------
      sort_by + to_h    235.721k (± 6.5%) i/s -      1.178M in   5.019800s
         sort + to_h     85.742k (± 8.3%) i/s -    424.410k in   5.011029s

Comparison:
      sort_by + to_h:   235721.2 i/s
         sort + to_h:    85742.0 i/s - 2.75x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   139.453k i/100ms
       Hash#each_key   159.208k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.465M (±11.7%) i/s -      7.252M in   5.091366s
       Hash#each_key      1.590M (± 5.3%) i/s -      7.960M in   5.022195s

Comparison:
       Hash#each_key:  1589567.9 i/s
      Hash#keys.each:  1465235.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   185.000  i/100ms
           Hash#key?     2.343M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.938k (±12.6%) i/s -      9.620k in   5.067723s
           Hash#key?     23.814M (± 4.5%) i/s -    119.490M in   5.028566s

Comparison:
           Hash#key?: 23813587.8 i/s
  Hash#keys.include?:     1937.7 i/s - 12289.59x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    19.819k i/100ms
            Hash#[]=    20.966k i/100ms
Calculating -------------------------------------
         Hash#merge!    215.764k (± 3.6%) i/s -      1.090M in   5.058529s
            Hash#[]=    217.724k (± 3.3%) i/s -      1.090M in   5.012843s

Comparison:
            Hash#[]=:   217724.3 i/s
         Hash#merge!:   215764.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        11.327k i/100ms
      Hash#merge({})     7.846k i/100ms
 Hash#dup#merge!({})    13.483k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        128.356k (± 4.8%) i/s -    645.639k in   5.041666s
      Hash#merge({})     80.353k (± 4.2%) i/s -    407.992k in   5.086433s
 Hash#dup#merge!({})    136.413k (± 2.8%) i/s -    687.633k in   5.044924s

Comparison:
 Hash#dup#merge!({}):   136413.2 i/s
{}#merge!(Hash) do end:   128355.9 i/s - same-ish: difference falls within error
      Hash#merge({}):    80353.2 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   228.440M i/100ms
          Hash#merge   224.292M i/100ms
Calculating -------------------------------------
        Hash#**other      2.339B (± 6.4%) i/s -     11.650B in   5.002474s
          Hash#merge      2.377B (± 4.8%) i/s -     11.887B in   5.013606s

Comparison:
          Hash#merge: 2376690134.9 i/s
        Hash#**other: 2338558815.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   280.000  i/100ms
         Hash#merge!    21.484k i/100ms
Calculating -------------------------------------
          Hash#merge      3.207k (± 7.2%) i/s -     15.960k in   5.019665s
         Hash#merge!    214.088k (± 4.2%) i/s -      1.074M in   5.026461s

Comparison:
         Hash#merge!:   214087.5 i/s
          Hash#merge:     3207.5 i/s - 66.75x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.098M i/100ms
Array#each             998.429k i/100ms
Array#each_w/_object   988.447k i/100ms
Hash#select-include      1.584M i/100ms
Calculating -------------------------------------
Hash#native-slice        11.859M (± 5.7%) i/s -     59.299M in   5.016794s
Array#each                9.990M (± 3.8%) i/s -     49.921M in   5.004510s
Array#each_w/_object     10.052M (± 5.4%) i/s -     50.411M in   5.029382s
Hash#select-include      15.849M (± 6.1%) i/s -     79.183M in   5.015328s

Comparison:
Hash#select-include : 15848718.7 i/s
Hash#native-slice   : 11859223.1 i/s - 1.34x  (± 0.00) slower
Array#each_w/_object: 10051936.8 i/s - 1.58x  (± 0.00) slower
Array#each          :  9989959.6 i/s - 1.59x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   168.000  i/100ms
         Hash#value?     6.291k i/100ms
Calculating -------------------------------------
Hash#values.include?      2.235k (± 9.0%) i/s -     11.088k in   5.029973s
         Hash#value?     62.915k (± 5.8%) i/s -    314.550k in   5.017798s

Comparison:
         Hash#value?:    62914.8 i/s
Hash#values.include?:     2234.5 i/s - 28.16x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   233.882M i/100ms
                send   221.765M i/100ms
      method_missing   246.813M i/100ms
Calculating -------------------------------------
                call      2.389B (± 5.4%) i/s -     11.928B in   5.007629s
                send      2.377B (± 5.0%) i/s -     11.975B in   5.050743s
      method_missing      2.353B (± 6.0%) i/s -     11.847B in   5.053753s

Comparison:
                call: 2389377501.8 i/s
                send: 2377035799.8 i/s - same-ish: difference falls within error
      method_missing: 2352723334.7 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    14.200k i/100ms
      Symbol#to_proc    14.905k i/100ms
Calculating -------------------------------------
               Block    146.383k (± 6.5%) i/s -    738.400k in   5.076980s
      Symbol#to_proc    149.632k (± 2.9%) i/s -    760.155k in   5.084321s

Comparison:
      Symbol#to_proc:   149631.9 i/s
               Block:   146383.1 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   227.040M i/100ms
       block + yield   228.907M i/100ms
        unused block   241.793M i/100ms
               yield   233.896M i/100ms
Calculating -------------------------------------
          block.call      2.265B (± 5.8%) i/s -     11.352B in   5.028595s
       block + yield      2.249B (± 5.4%) i/s -     11.216B in   5.001228s
        unused block      2.313B (± 6.2%) i/s -     11.606B in   5.036713s
               yield      2.236B (± 6.0%) i/s -     11.227B in   5.039000s

Comparison:
        unused block: 2313479628.2 i/s
          block.call: 2265201776.1 i/s - same-ish: difference falls within error
       block + yield: 2249383904.4 i/s - same-ish: difference falls within error
               yield: 2236117303.1 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    12.063k i/100ms
      range#include?   331.000  i/100ms
       range#member?   630.000  i/100ms
       plain compare    19.327k i/100ms
Calculating -------------------------------------
        range#cover?    129.721k (±19.7%) i/s -    627.276k in   5.034380s
      range#include?      6.662k (±25.8%) i/s -     29.790k in   5.042073s
       range#member?      5.887k (±18.7%) i/s -     27.720k in   5.108522s
       plain compare    176.781k (± 9.9%) i/s -    889.042k in   5.091876s

Comparison:
       plain compare:   176780.5 i/s
        range#cover?:   129721.2 i/s - 1.36x  (± 0.00) slower
      range#include?:     6662.4 i/s - 26.53x  (± 0.00) slower
       range#member?:     5886.6 i/s - 30.03x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    13.758M i/100ms
           String#=~    11.335M i/100ms
          Regexp#===    11.727M i/100ms
        String#match     9.647M i/100ms
Calculating -------------------------------------
       String#match?    144.124M (± 5.7%) i/s -    729.172M in   5.076026s
           String#=~    116.230M (± 6.3%) i/s -    589.422M in   5.091429s
          Regexp#===    117.763M (± 4.7%) i/s -    598.090M in   5.090334s
        String#match     94.975M (± 6.3%) i/s -    482.368M in   5.099893s

Comparison:
       String#match?: 144124263.7 i/s
          Regexp#===: 117763129.1 i/s - 1.22x  (± 0.00) slower
           String#=~: 116230393.4 i/s - 1.24x  (± 0.00) slower
        String#match: 94975354.4 i/s - 1.52x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.432M i/100ms
      String#casecmp     2.421M i/100ms
Calculating -------------------------------------
String#downcase + ==     15.395M (± 3.8%) i/s -     77.305M in   5.028780s
      String#casecmp     24.015M (± 3.7%) i/s -    121.055M in   5.047826s

Comparison:
      String#casecmp: 24014827.5 i/s
String#downcase + ==: 15394803.4 i/s - 1.56x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     5.925M i/100ms
       String#concat     7.199M i/100ms
       String#append     7.345M i/100ms
         "foo" "bar"   229.255M i/100ms
  "#{'foo'}#{'bar'}"   221.131M i/100ms
Calculating -------------------------------------
            String#+     72.566M (± 6.9%) i/s -    367.361M in   5.087663s
       String#concat     73.239M (± 6.0%) i/s -    367.139M in   5.031769s
       String#append     72.968M (± 4.6%) i/s -    367.268M in   5.043730s
         "foo" "bar"      2.326B (± 5.7%) i/s -     11.692B in   5.042517s
  "#{'foo'}#{'bar'}"      2.342B (± 5.3%) i/s -     11.720B in   5.019593s

Comparison:
  "#{'foo'}#{'bar'}": 2341613375.0 i/s
         "foo" "bar": 2326418103.5 i/s - same-ish: difference falls within error
       String#concat: 73239035.2 i/s - 31.97x  (± 0.00) slower
       String#append: 72967736.0 i/s - 32.09x  (± 0.00) slower
            String#+: 72565746.3 i/s - 32.27x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   210.902M i/100ms
          String#dup   221.131M i/100ms
Calculating -------------------------------------
           String#+@      2.266B (± 5.7%) i/s -     11.389B in   5.042070s
          String#dup      2.265B (± 5.9%) i/s -     11.499B in   5.094256s

Comparison:
           String#+@: 2266101761.4 i/s
          String#dup: 2264897396.1 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.156M i/100ms
       String#match?     1.229M i/100ms
    String#end_with?    10.106M i/100ms
Calculating -------------------------------------
           String#=~     12.322M (± 6.1%) i/s -     62.404M in   5.083539s
       String#match?     16.979M (± 5.9%) i/s -     84.778M in   5.010552s
    String#end_with?     98.328M (± 4.8%) i/s -    495.180M in   5.047409s

Comparison:
    String#end_with?: 98328080.0 i/s
       String#match?: 16979482.3 i/s - 5.79x  (± 0.00) slower
           String#=~: 12321754.7 i/s - 7.98x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   110.795k i/100ms
          String#sub   358.248k i/100ms
String#dup["string"]=
                         8.685M i/100ms
Calculating -------------------------------------
         String#gsub      3.219M (±10.5%) i/s -     15.954M in   5.025852s
          String#sub      4.616M (± 5.0%) i/s -     23.286M in   5.057578s
String#dup["string"]=
                         87.838M (± 5.8%) i/s -    442.944M in   5.060305s

Comparison:
String#dup["string"]=: 87838204.6 i/s
          String#sub:  4616018.8 i/s - 19.03x  (± 0.00) slower
         String#gsub:  3218768.2 i/s - 27.29x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    54.028k i/100ms
           String#tr    83.881k i/100ms
Calculating -------------------------------------
         String#gsub      1.844M (± 7.5%) i/s -      9.185M in   5.013967s
           String#tr    840.467k (± 4.9%) i/s -      4.194M in   5.002529s

Comparison:
         String#gsub:  1843689.2 i/s
           String#tr:   840467.1 i/s - 2.19x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   228.280M i/100ms
         With Freeze   222.810M i/100ms
Calculating -------------------------------------
      Without Freeze      2.310B (± 6.5%) i/s -     11.642B in   5.060688s
         With Freeze      2.346B (± 6.4%) i/s -     11.809B in   5.055558s

Comparison:
         With Freeze: 2345582875.5 i/s
      Without Freeze: 2310389796.5 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     4.361k i/100ms
      String#squeeze    24.010k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     57.753k (± 4.1%) i/s -    292.187k in   5.067851s
      String#squeeze    254.527k (± 5.7%) i/s -      1.273M in   5.016504s

Comparison:
      String#squeeze:   254526.7 i/s
 String#gsub/regex+/:    57752.9 i/s - 4.41x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.904M i/100ms
       String#match?     4.700M i/100ms
  String#start_with?     8.712M i/100ms
Calculating -------------------------------------
           String#=~     19.808M (± 6.5%) i/s -     99.033M in   5.021215s
       String#match?     45.569M (± 4.2%) i/s -    230.286M in   5.063069s
  String#start_with?     84.209M (± 6.2%) i/s -    426.875M in   5.089152s

Comparison:
  String#start_with?: 84209460.7 i/s
       String#match?: 45569134.6 i/s - 1.85x  (± 0.00) slower
           String#=~: 19808007.5 i/s - 4.25x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    90.102k i/100ms
    String#[0, n] ==   198.339k i/100ms
   String#[RANGE] ==   269.942k i/100ms
   String#[0...n] ==   166.591k i/100ms
Calculating -------------------------------------
  String#start_with?      3.621M (± 7.1%) i/s -     18.020M in   4.999901s
    String#[0, n] ==      2.056M (± 3.5%) i/s -     10.314M in   5.023276s
   String#[RANGE] ==      2.959M (± 4.9%) i/s -     14.847M in   5.029527s
   String#[0...n] ==      1.703M (± 5.2%) i/s -      8.496M in   5.001842s

Comparison:
  String#start_with?:  3621210.1 i/s
   String#[RANGE] ==:  2959217.0 i/s - 1.22x  (± 0.00) slower
    String#[0, n] ==:  2055764.9 i/s - 1.76x  (± 0.00) slower
   String#[0...n] ==:  1703420.9 i/s - 2.13x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     7.706M i/100ms
 String#sub!'string'   314.171k i/100ms
String#gsub!'string'   304.419k i/100ms
  String#[/regexp/]=     1.267M i/100ms
 String#sub!/regexp/   442.712k i/100ms
String#gsub!/regexp/   360.655k i/100ms
Calculating -------------------------------------
  String#['string']=     77.866M (± 1.7%) i/s -    392.982M in   5.048313s
 String#sub!'string'      4.274M (±15.7%) i/s -     20.421M in   5.059829s
String#gsub!'string'      3.195M (± 5.3%) i/s -     16.134M in   5.064181s
  String#[/regexp/]=     13.460M (± 3.3%) i/s -     68.432M in   5.089919s
 String#sub!/regexp/      4.675M (± 5.2%) i/s -     23.464M in   5.033243s
String#gsub!/regexp/      3.507M (± 3.3%) i/s -     17.672M in   5.044986s

Comparison:
  String#['string']=: 77865605.9 i/s
  String#[/regexp/]=: 13459821.3 i/s - 5.79x  (± 0.00) slower
 String#sub!/regexp/:  4674708.3 i/s - 16.66x  (± 0.00) slower
 String#sub!'string':  4273972.4 i/s - 18.22x  (± 0.00) slower
String#gsub!/regexp/:  3506957.2 i/s - 22.20x  (± 0.00) slower
String#gsub!'string':  3194847.7 i/s - 24.37x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub   766.887k i/100ms
        String#chomp     3.467M i/100ms
String#delete_suffix     3.854M i/100ms
Calculating -------------------------------------
          String#sub     17.853M (± 4.8%) i/s -     89.726M in   5.038543s
        String#chomp     34.649M (± 2.5%) i/s -    173.337M in   5.005617s
String#delete_suffix     40.539M (± 2.7%) i/s -    204.242M in   5.042004s

Comparison:
String#delete_suffix: 40538671.3 i/s
        String#chomp: 34649469.2 i/s - 1.17x  (± 0.00) slower
          String#sub: 17852692.1 i/s - 2.27x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   204.585M i/100ms
          String#sub    10.816M i/100ms
Calculating -------------------------------------
String#delete_prefix      2.037B (± 1.6%) i/s -     10.229B in   5.023373s
          String#sub    105.463M (± 1.2%) i/s -    529.995M in   5.026155s

Comparison:
String#delete_prefix: 2036858978.1 i/s
          String#sub: 105463164.2 i/s - 19.31x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.206M i/100ms
    String#unpack[0]     1.194M i/100ms
Calculating -------------------------------------
      String#unpack1     12.420M (± 3.5%) i/s -     62.731M in   5.057078s
    String#unpack[0]     12.420M (± 3.1%) i/s -     62.069M in   5.002105s

Comparison:
    String#unpack[0]: 12420360.8 i/s
      String#unpack1: 12419727.0 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 23.0.0-dev-6e40a2aa, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    13.273k i/100ms
          Time.parse    86.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    163.963k (±22.2%) i/s -    769.834k in   5.027766s
          Time.parse      4.105k (±18.6%) i/s -     18.920k in   5.017983s

Comparison:
        Time.iso8601:   163962.7 i/s
          Time.parse:     4104.8 i/s - 39.94x  (± 0.00) slower

