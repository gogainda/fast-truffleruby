$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       238.372M i/100ms
Function with splat arguments
                       677.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          2.384B (± 0.4%) i/s -     12.157B in   5.098435s
Function with splat arguments
                          7.074k (± 7.9%) i/s -     35.204k in   5.026870s

Comparison:
Function with single Array argument: 2384498631.2 i/s
Function with splat arguments:     7074.3 i/s - 337064.32x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   237.539M i/100ms
Sequential Assignment
                       238.132M i/100ms
Calculating -------------------------------------
 Parallel Assignment      2.384B (± 0.3%) i/s -     12.115B in   5.081771s
Sequential Assignment
                          2.386B (± 0.2%) i/s -     12.145B in   5.089172s

Comparison:
Sequential Assignment: 2386399213.5 i/s
 Parallel Assignment: 2383942580.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   238.135M i/100ms
       attr_accessor   238.699M i/100ms
Calculating -------------------------------------
   getter_and_setter      2.384B (± 0.3%) i/s -     12.145B in   5.093640s
       attr_accessor      2.379B (± 1.1%) i/s -     11.935B in   5.017432s

Comparison:
   getter_and_setter: 2384347850.9 i/s
       attr_accessor: 2378979114.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     6.750k i/100ms
         respond_to?   238.309M i/100ms
Calculating -------------------------------------
      begin...rescue     44.797k (± 8.7%) i/s -    222.750k in   5.023343s
         respond_to?      2.388B (± 0.2%) i/s -     12.154B in   5.089811s

Comparison:
         respond_to?: 2387872609.4 i/s
      begin...rescue:    44797.4 i/s - 53303.80x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   238.351M i/100ms
             &method   238.557M i/100ms
Calculating -------------------------------------
              normal      2.385B (± 0.3%) i/s -     12.156B in   5.097232s
             &method      2.388B (± 0.2%) i/s -     12.166B in   5.094910s

Comparison:
             &method: 2387965590.6 i/s
              normal: 2384828610.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        91.000  i/100ms
       define_method   116.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.324k (±41.6%) i/s -      4.368k in   6.400754s
       define_method      2.772k (±58.5%) i/s -      5.568k in   6.043383s

Comparison:
       define_method:     2772.2 i/s
module_eval with string:     1323.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    68.257k i/100ms
       Kernel#format    62.272k i/100ms
            String#%    61.507k i/100ms
Calculating -------------------------------------
         Float#round    753.952k (± 2.8%) i/s -      3.822M in   5.074029s
       Kernel#format    623.342k (± 2.9%) i/s -      3.114M in   4.999324s
            String#%    622.896k (± 2.7%) i/s -      3.137M in   5.039861s

Comparison:
         Float#round:   753951.9 i/s
       Kernel#format:   623342.1 i/s - 1.21x  (± 0.00) slower
            String#%:   622895.9 i/s - 1.21x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   238.623M i/100ms
          OpenStruct   238.944M i/100ms
Calculating -------------------------------------
                Hash      2.385B (± 0.4%) i/s -     11.931B in   5.002895s
          OpenStruct      2.387B (± 0.3%) i/s -     11.947B in   5.005707s

Comparison:
          OpenStruct: 2386737226.1 i/s
                Hash: 2384877496.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   238.438M i/100ms
          OpenStruct     2.546k i/100ms
Calculating -------------------------------------
                Hash      2.381B (± 0.4%) i/s -     11.922B in   5.007570s
          OpenStruct     26.849k (±10.8%) i/s -    132.392k in   5.012376s

Comparison:
                Hash: 2380825386.0 i/s
          OpenStruct:    26849.5 i/s - 88673.00x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   622.588k i/100ms
  ancestors.include?   135.714k i/100ms
Calculating -------------------------------------
  less than or equal      7.340M (± 4.1%) i/s -     36.733M in   5.013380s
  ancestors.include?      1.379M (± 3.3%) i/s -      6.921M in   5.023497s

Comparison:
  less than or equal:  7340100.0 i/s
  ancestors.include?:  1379410.3 i/s - 5.32x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     23.859  (± 0.0%) i/s -    120.000  in   5.029740s
         Kernel loop     23.867  (± 0.0%) i/s -    120.000  in   5.027964s

Comparison:
         Kernel loop:       23.9 i/s
          While Loop:       23.9 i/s - 1.00x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   238.544M i/100ms
         Array#first   238.487M i/100ms
Calculating -------------------------------------
           Array#[0]      2.384B (± 0.4%) i/s -     11.927B in   5.003633s
         Array#first      2.387B (± 0.2%) i/s -     12.163B in   5.094413s

Comparison:
         Array#first: 2387494101.9 i/s
           Array#[0]: 2383748360.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   238.160M i/100ms
          Array#last   238.752M i/100ms
Calculating -------------------------------------
          Array#[-1]      2.386B (± 0.3%) i/s -     12.146B in   5.091659s
          Array#last      2.387B (± 0.2%) i/s -     11.938B in   5.000173s

Comparison:
          Array#last: 2387447807.5 i/s
          Array#[-1]: 2385530843.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   425.264k i/100ms
Calculating -------------------------------------
                find      6.428  (±31.1%) i/s -     11.000  in   5.081917s
             bsearch      4.572M (± 4.2%) i/s -     22.964M in   5.032137s

Comparison:
             bsearch:  4571879.4 i/s
                find:        6.4 i/s - 711238.25x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.124  (± 0.0%) i/s -      1.000  in   8.064031s
        Array#insert      0.944  (± 0.0%) i/s -      5.000  in   5.297439s

Comparison:
        Array#insert:        0.9 i/s
       Array#unshift:        0.1 i/s - 7.61x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   238.179M i/100ms
          Array#size   238.582M i/100ms
         Array#count   239.036M i/100ms
Calculating -------------------------------------
        Array#length      2.387B (± 0.3%) i/s -     12.147B in   5.089945s
          Array#size      2.388B (± 0.3%) i/s -     12.168B in   5.094869s
         Array#count      2.388B (± 0.3%) i/s -     11.952B in   5.004876s

Comparison:
          Array#size: 2388236057.8 i/s
         Array#count: 2388053182.3 i/s - same-ish: difference falls within error
        Array#length: 2386519799.7 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    20.913k i/100ms
        Array#sample     2.673M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    229.487k (± 2.6%) i/s -      1.150M in   5.015783s
        Array#sample     26.482M (± 0.1%) i/s -    133.673M in   5.047722s

Comparison:
        Array#sample: 26481882.3 i/s
 Array#shuffle.first:   229486.7 i/s - 115.40x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   381.000  i/100ms
          Date.parse   363.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     30.686k (±39.6%) i/s -    117.348k in   4.996815s
          Date.parse     17.836k (±33.3%) i/s -     71.511k in   5.019534s

Comparison:
        Date.iso8601:    30686.4 i/s
          Date.parse:    17836.0 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   124.650k i/100ms
           Array#map   529.724k i/100ms
Calculating -------------------------------------
   Array#each + push      1.361M (± 4.4%) i/s -      6.856M in   5.048619s
           Array#map      5.198M (± 4.9%) i/s -     25.956M in   5.006606s

Comparison:
           Array#map:  5197585.0 i/s
   Array#each + push:  1360538.5 i/s - 3.82x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     9.788M i/100ms
               #each    45.956M i/100ms
Calculating -------------------------------------
            For loop     99.279M (± 0.6%) i/s -    499.164M in   5.028103s
               #each    459.455M (± 0.2%) i/s -      2.298B in   5.001165s

Comparison:
               #each: 459454824.8 i/s
            For loop: 99278528.6 i/s - 4.63x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   910.974k i/100ms
     each_with_index   913.344k i/100ms
Calculating -------------------------------------
          While Loop      9.158M (± 0.2%) i/s -     46.460M in   5.073231s
     each_with_index      9.131M (± 0.1%) i/s -     45.667M in   5.001530s

Comparison:
          While Loop:  9157837.3 i/s
     each_with_index:  9130665.3 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   146.717k i/100ms
      inject to_proc   147.194k i/100ms
        inject block   147.040k i/100ms
Calculating -------------------------------------
       inject symbol      1.472M (± 0.1%) i/s -      7.483M in   5.084949s
      inject to_proc      1.472M (± 0.0%) i/s -      7.360M in   5.000580s
        inject block      1.470M (± 0.0%) i/s -      7.352M in   5.001002s

Comparison:
      inject to_proc:  1471769.4 i/s
       inject symbol:  1471513.1 i/s - same-ish: difference falls within error
        inject block:  1470105.7 i/s - 1.00x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     9.460k i/100ms
   Array#map.flatten    10.643k i/100ms
      Array#flat_map    28.713k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    108.267k (± 4.2%) i/s -    548.680k in   5.077133s
   Array#map.flatten    108.080k (± 3.0%) i/s -    542.793k in   5.027139s
      Array#flat_map    290.212k (± 4.1%) i/s -      1.464M in   5.054566s

Comparison:
      Array#flat_map:   290211.8 i/s
Array#map.flatten(1):   108267.2 i/s - 2.68x  (± 0.00) slower
   Array#map.flatten:   108079.7 i/s - 2.69x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   159.010k i/100ms
  Array#reverse_each     1.942M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.831M (± 7.3%) i/s -      9.382M in   5.173146s
  Array#reverse_each     19.394M (± 0.4%) i/s -     97.076M in   5.005479s

Comparison:
  Array#reverse_each: 19394305.7 i/s
  Array#reverse.each:  1831485.9 i/s - 10.59x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       549.859k i/100ms
   Enumerable#detect     4.037M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          5.551M (± 7.6%) i/s -    109.972M in  20.001760s
   Enumerable#detect     40.368M (± 0.0%) i/s -    807.421M in  20.001373s

Comparison:
   Enumerable#detect: 40368287.8 i/s
Enumerable#select.first:  5551431.6 i/s - 7.27x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       190.649k i/100ms
Enumerable#select.last
                       363.673k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.895M (± 3.8%) i/s -      9.532M in   5.039075s
Enumerable#select.last
                          3.643M (± 2.5%) i/s -     18.547M in   5.094040s

Comparison:
Enumerable#select.last:  3643373.2 i/s
Enumerable#reverse.detect:  1894545.5 i/s - 1.92x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.397k i/100ms
  Enumerable#sort_by     2.495k i/100ms
     Enumerable#sort     3.109k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         20.892k (±21.6%) i/s -    100.674k in   5.082172s
  Enumerable#sort_by     24.884k (±14.7%) i/s -    119.760k in   5.080568s
     Enumerable#sort     34.860k (± 2.1%) i/s -    177.213k in   5.086229s

Comparison:
     Enumerable#sort:    34860.2 i/s
  Enumerable#sort_by:    24883.8 i/s - 1.40x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    20892.3 i/s - 1.67x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   498.110k i/100ms
Enumerable#sort_by...first
                         4.925k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      5.017M (± 0.3%) i/s -     25.404M in   5.063431s
Enumerable#sort_by...first
                         55.728k (± 3.3%) i/s -    280.725k in   5.043274s

Comparison:
   Enumerable#min_by:  5017116.0 i/s
Enumerable#sort_by...first:    55728.4 i/s - 90.03x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   158.796k i/100ms
            Hash#dup   173.049k i/100ms
Calculating -------------------------------------
              Hash[]      1.790M (± 3.7%) i/s -      9.051M in   5.064786s
            Hash#dup      1.862M (± 4.0%) i/s -      9.345M in   5.027239s

Comparison:
            Hash#dup:  1861871.0 i/s
              Hash[]:  1789688.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   238.394M i/100ms
  Hash#fetch, symbol   238.285M i/100ms
     Hash#[], string     2.271M i/100ms
  Hash#fetch, string     2.328M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      2.387B (± 0.3%) i/s -     12.158B in   5.093832s
  Hash#fetch, symbol      2.388B (± 0.2%) i/s -     12.153B in   5.089411s
     Hash#[], string    157.075M (± 0.3%) i/s -    785.654M in   5.001851s
  Hash#fetch, string    165.735M (± 0.8%) i/s -    828.700M in   5.000470s

Comparison:
  Hash#fetch, symbol: 2387822860.0 i/s
     Hash#[], symbol: 2386855545.9 i/s - same-ish: difference falls within error
  Hash#fetch, string: 165735085.4 i/s - 14.41x  (± 0.00) slower
     Hash#[], string: 157074628.4 i/s - 15.20x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    49.735M i/100ms
             Hash#[]    49.726M i/100ms
          Hash#[] ||    49.776M i/100ms
          Hash#[] &&    49.780M i/100ms
          Hash#fetch    49.789M i/100ms
 Hash#fetch fallback    49.780M i/100ms
Calculating -------------------------------------
            Hash#dig    497.011M (± 0.3%) i/s -      2.487B in   5.003417s
             Hash#[]    496.556M (± 1.2%) i/s -      2.486B in   5.007912s
          Hash#[] ||    497.444M (± 0.2%) i/s -      2.489B in   5.003207s
          Hash#[] &&    497.615M (± 0.1%) i/s -      2.489B in   5.001862s
          Hash#fetch    497.646M (± 0.1%) i/s -      2.489B in   5.002415s
 Hash#fetch fallback    497.647M (± 0.1%) i/s -      2.489B in   5.001574s

Comparison:
 Hash#fetch fallback: 497646684.9 i/s
          Hash#fetch: 497646377.1 i/s - same-ish: difference falls within error
          Hash#[] &&: 497615104.1 i/s - same-ish: difference falls within error
          Hash#[] ||: 497443866.0 i/s - same-ish: difference falls within error
            Hash#dig: 497011479.8 i/s - same-ish: difference falls within error
             Hash#[]: 496555843.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   238.284M i/100ms
  Hash#fetch + block   238.347M i/100ms
    Hash#fetch + arg   238.956M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      2.386B (± 0.3%) i/s -     12.152B in   5.092651s
  Hash#fetch + block      2.387B (± 0.2%) i/s -     12.156B in   5.091802s
    Hash#fetch + arg      2.387B (± 0.3%) i/s -     11.948B in   5.006084s

Comparison:
  Hash#fetch + block: 2387316210.8 i/s
    Hash#fetch + arg: 2386677428.3 i/s - same-ish: difference falls within error
  Hash#fetch + const: 2386294912.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    16.069k i/100ms
         sort + to_h   299.000  i/100ms
Calculating -------------------------------------
      sort_by + to_h    249.712k (± 4.6%) i/s -      1.253M in   5.030724s
         sort + to_h     93.585k (±12.9%) i/s -    446.706k in   4.985281s

Comparison:
      sort_by + to_h:   249711.6 i/s
         sort + to_h:    93585.3 i/s - 2.67x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   115.903k i/100ms
       Hash#each_key   138.589k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.272M (±10.6%) i/s -      6.259M in   5.056198s
       Hash#each_key      1.402M (± 2.9%) i/s -      7.068M in   5.046682s

Comparison:
       Hash#each_key:  1401761.3 i/s
      Hash#keys.each:  1271998.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   205.000  i/100ms
           Hash#key?     2.326M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.890k (±11.5%) i/s -      9.430k in   5.081800s
           Hash#key?     23.327M (± 0.1%) i/s -    118.632M in   5.085571s

Comparison:
           Hash#key?: 23327159.1 i/s
  Hash#keys.include?:     1889.8 i/s - 12343.76x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    16.073k i/100ms
            Hash#[]=    19.052k i/100ms
Calculating -------------------------------------
         Hash#merge!    197.975k (± 4.6%) i/s -    996.526k in   5.044249s
            Hash#[]=    192.040k (± 8.2%) i/s -    952.600k in   5.010950s

Comparison:
         Hash#merge!:   197974.9 i/s
            Hash#[]=:   192040.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         9.037k i/100ms
      Hash#merge({})     6.228k i/100ms
 Hash#dup#merge!({})    11.573k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        108.625k (± 4.4%) i/s -    542.220k in   5.001629s
      Hash#merge({})     66.638k (± 3.1%) i/s -    336.312k in   5.052055s
 Hash#dup#merge!({})    116.369k (± 3.3%) i/s -    590.223k in   5.077835s

Comparison:
 Hash#dup#merge!({}):   116369.4 i/s
{}#merge!(Hash) do end:   108624.8 i/s - same-ish: difference falls within error
      Hash#merge({}):    66638.1 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   237.934M i/100ms
          Hash#merge   238.814M i/100ms
Calculating -------------------------------------
        Hash#**other      2.383B (± 0.4%) i/s -     12.135B in   5.093070s
          Hash#merge      2.384B (± 0.5%) i/s -     11.941B in   5.008419s

Comparison:
          Hash#merge: 2384181959.6 i/s
        Hash#**other: 2382621204.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   238.000  i/100ms
         Hash#merge!    20.104k i/100ms
Calculating -------------------------------------
          Hash#merge      2.765k (± 4.1%) i/s -     13.804k in   5.000518s
         Hash#merge!    203.485k (± 4.5%) i/s -      1.025M in   5.049246s

Comparison:
         Hash#merge!:   203485.0 i/s
          Hash#merge:     2765.4 i/s - 73.58x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.049M i/100ms
Array#each             923.959k i/100ms
Array#each_w/_object   932.333k i/100ms
Hash#select-include      1.449M i/100ms
Calculating -------------------------------------
Hash#native-slice        11.028M (± 4.2%) i/s -     55.594M in   5.050709s
Array#each                9.473M (± 2.9%) i/s -     48.046M in   5.076298s
Array#each_w/_object      9.379M (± 4.4%) i/s -     47.549M in   5.079442s
Hash#select-include      14.575M (± 4.4%) i/s -     73.922M in   5.082198s

Comparison:
Hash#select-include : 14574844.6 i/s
Hash#native-slice   : 11027572.6 i/s - 1.32x  (± 0.00) slower
Array#each          :  9473266.5 i/s - 1.54x  (± 0.00) slower
Array#each_w/_object:  9379412.8 i/s - 1.55x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   178.000  i/100ms
         Hash#value?   407.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.876k (±10.9%) i/s -      9.256k in   5.018849s
         Hash#value?      4.088k (± 0.5%) i/s -     20.757k in   5.077522s

Comparison:
         Hash#value?:     4088.1 i/s
Hash#values.include?:     1876.3 i/s - 2.18x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   238.863M i/100ms
                send   238.667M i/100ms
      method_missing   239.061M i/100ms
Calculating -------------------------------------
                call      2.387B (± 0.3%) i/s -     11.943B in   5.004298s
                send      2.389B (± 0.2%) i/s -     12.172B in   5.094570s
      method_missing      2.389B (± 0.3%) i/s -     11.953B in   5.003342s

Comparison:
                send: 2389222128.1 i/s
      method_missing: 2389031615.3 i/s - same-ish: difference falls within error
                call: 2386603200.6 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    12.887k i/100ms
      Symbol#to_proc    13.908k i/100ms
Calculating -------------------------------------
               Block    138.234k (± 2.8%) i/s -    695.898k in   5.038241s
      Symbol#to_proc    139.520k (± 3.4%) i/s -    709.308k in   5.089934s

Comparison:
      Symbol#to_proc:   139520.3 i/s
               Block:   138233.9 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   238.683M i/100ms
       block + yield   238.608M i/100ms
        unused block   239.108M i/100ms
               yield   239.091M i/100ms
Calculating -------------------------------------
          block.call      2.388B (± 0.3%) i/s -     12.173B in   5.098014s
       block + yield      2.380B (± 2.7%) i/s -     11.930B in   5.016638s
        unused block      2.389B (± 0.2%) i/s -     11.955B in   5.004355s
               yield      2.390B (± 0.1%) i/s -     11.955B in   5.002362s

Comparison:
               yield: 2389786551.9 i/s
        unused block: 2389010141.4 i/s - same-ish: difference falls within error
          block.call: 2387779930.7 i/s - same-ish: difference falls within error
       block + yield: 2380311268.9 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    13.798k i/100ms
      range#include?   326.000  i/100ms
       range#member?   811.000  i/100ms
       plain compare    26.834k i/100ms
Calculating -------------------------------------
        range#cover?    166.555k (±22.8%) i/s -    786.486k in   5.025044s
      range#include?      9.048k (±32.8%) i/s -     39.446k in   5.034771s
       range#member?      8.074k (±29.9%) i/s -     36.495k in   5.045776s
       plain compare    346.141k (± 5.7%) i/s -      1.744M in   5.058231s

Comparison:
       plain compare:   346141.3 i/s
        range#cover?:   166554.7 i/s - 2.08x  (± 0.00) slower
      range#include?:     9048.4 i/s - 38.25x  (± 0.00) slower
       range#member?:     8074.0 i/s - 42.87x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    14.373M i/100ms
           String#=~    11.496M i/100ms
          Regexp#===    11.480M i/100ms
        String#match    10.742M i/100ms
Calculating -------------------------------------
       String#match?    145.747M (± 0.1%) i/s -    733.008M in   5.029334s
           String#=~    114.945M (± 0.0%) i/s -    574.800M in   5.000638s
          Regexp#===    114.942M (± 0.0%) i/s -    585.476M in   5.093683s
        String#match    114.943M (± 0.0%) i/s -    580.085M in   5.046735s

Comparison:
       String#match?: 145746587.0 i/s
           String#=~: 114945270.9 i/s - 1.27x  (± 0.00) slower
        String#match: 114942691.5 i/s - 1.27x  (± 0.00) slower
          Regexp#===: 114941500.1 i/s - 1.27x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.294M i/100ms
      String#casecmp     2.334M i/100ms
Calculating -------------------------------------
String#downcase + ==     14.725M (± 3.6%) i/s -     73.755M in   5.015196s
      String#casecmp     23.388M (± 7.3%) i/s -    116.684M in   5.035659s

Comparison:
      String#casecmp: 23387703.9 i/s
String#downcase + ==: 14725158.1 i/s - 1.59x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     7.184M i/100ms
       String#concat     7.128M i/100ms
       String#append     7.280M i/100ms
         "foo" "bar"   239.037M i/100ms
  "#{'foo'}#{'bar'}"   239.086M i/100ms
Calculating -------------------------------------
            String#+     72.875M (± 4.2%) i/s -    366.362M in   5.036569s
       String#concat     73.582M (± 3.0%) i/s -    370.640M in   5.041591s
       String#append     72.042M (± 3.3%) i/s -    363.982M in   5.058073s
         "foo" "bar"      2.389B (± 0.3%) i/s -     11.952B in   5.003088s
  "#{'foo'}#{'bar'}"      2.390B (± 0.2%) i/s -     11.954B in   5.002832s

Comparison:
  "#{'foo'}#{'bar'}": 2389516077.1 i/s
         "foo" "bar": 2388916468.5 i/s - same-ish: difference falls within error
       String#concat: 73581831.2 i/s - 32.47x  (± 0.00) slower
            String#+: 72875122.7 i/s - 32.79x  (± 0.00) slower
       String#append: 72042280.9 i/s - 33.17x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   238.401M i/100ms
          String#dup   238.431M i/100ms
Calculating -------------------------------------
           String#+@      2.387B (± 0.3%) i/s -     12.158B in   5.094118s
          String#dup      2.388B (± 0.3%) i/s -     12.160B in   5.091768s

Comparison:
          String#dup: 2388188053.7 i/s
           String#+@: 2386788569.7 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   932.934k i/100ms
       String#match?   841.796k i/100ms
    String#end_with?    12.952M i/100ms
Calculating -------------------------------------
           String#=~      9.505M (± 2.8%) i/s -     47.580M in   5.009768s
       String#match?     11.185M (± 0.1%) i/s -     56.400M in   5.042669s
    String#end_with?    129.289M (± 0.4%) i/s -    647.586M in   5.008921s

Comparison:
    String#end_with?: 129288690.2 i/s
       String#match?: 11184635.7 i/s - 11.56x  (± 0.00) slower
           String#=~:  9505302.2 i/s - 13.60x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    38.878k i/100ms
          String#sub   302.409k i/100ms
String#dup["string"]=
                         8.975M i/100ms
Calculating -------------------------------------
         String#gsub      3.533M (±11.9%) i/s -     17.067M in   5.002605s
          String#sub      4.163M (± 8.5%) i/s -     20.564M in   5.000159s
String#dup["string"]=
                         89.705M (± 0.3%) i/s -    448.770M in   5.002781s

Comparison:
String#dup["string"]=: 89704748.2 i/s
          String#sub:  4162948.4 i/s - 21.55x  (± 0.00) slower
         String#gsub:  3533234.4 i/s - 25.39x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    40.567k i/100ms
           String#tr    76.487k i/100ms
Calculating -------------------------------------
         String#gsub      1.676M (± 8.6%) i/s -      8.316M in   5.007618s
           String#tr    760.373k (± 4.1%) i/s -      3.824M in   5.038380s

Comparison:
         String#gsub:  1675812.4 i/s
           String#tr:   760373.2 i/s - 2.20x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   238.361M i/100ms
         With Freeze   238.700M i/100ms
Calculating -------------------------------------
      Without Freeze      2.386B (± 0.4%) i/s -     12.156B in   5.094156s
         With Freeze      2.390B (± 0.2%) i/s -     12.174B in   5.094656s

Comparison:
         With Freeze: 2389509618.5 i/s
      Without Freeze: 2386377274.0 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     4.132k i/100ms
      String#squeeze    23.755k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     48.253k (± 7.7%) i/s -    239.656k in   5.016362s
      String#squeeze    238.500k (± 2.7%) i/s -      1.212M in   5.083730s

Comparison:
      String#squeeze:   238499.8 i/s
 String#gsub/regex+/:    48253.1 i/s - 4.94x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     2.731M i/100ms
       String#match?     3.984M i/100ms
  String#start_with?    10.674M i/100ms
Calculating -------------------------------------
           String#=~     27.647M (± 3.4%) i/s -    139.264M in   5.043688s
       String#match?     39.783M (± 1.2%) i/s -    199.219M in   5.008310s
  String#start_with?    106.654M (± 0.3%) i/s -    533.681M in   5.003885s

Comparison:
  String#start_with?: 106654275.2 i/s
       String#match?: 39783139.0 i/s - 2.68x  (± 0.00) slower
           String#=~: 27646644.0 i/s - 3.86x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    92.847k i/100ms
    String#[0, n] ==   198.622k i/100ms
   String#[RANGE] ==   290.583k i/100ms
   String#[0...n] ==   197.045k i/100ms
Calculating -------------------------------------
  String#start_with?      4.556M (± 0.2%) i/s -     22.840M in   5.013321s
    String#[0, n] ==      2.066M (± 3.3%) i/s -     10.328M in   5.005266s
   String#[RANGE] ==      2.912M (± 4.1%) i/s -     14.820M in   5.097093s
   String#[0...n] ==      1.968M (± 3.6%) i/s -      9.852M in   5.013822s

Comparison:
  String#start_with?:  4555947.0 i/s
   String#[RANGE] ==:  2912419.3 i/s - 1.56x  (± 0.00) slower
    String#[0, n] ==:  2065817.4 i/s - 2.21x  (± 0.00) slower
   String#[0...n] ==:  1967662.7 i/s - 2.32x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     9.024M i/100ms
 String#sub!'string'    82.851k i/100ms
String#gsub!'string'   324.747k i/100ms
  String#[/regexp/]=     1.319M i/100ms
 String#sub!/regexp/   428.155k i/100ms
String#gsub!/regexp/   331.062k i/100ms
Calculating -------------------------------------
  String#['string']=     90.289M (± 0.2%) i/s -    460.239M in   5.097441s
 String#sub!'string'      4.338M (±20.6%) i/s -     20.050M in   5.011731s
String#gsub!'string'      3.752M (± 5.7%) i/s -     18.835M in   5.038736s
  String#[/regexp/]=     13.392M (± 3.6%) i/s -     67.274M in   5.030614s
 String#sub!/regexp/      4.294M (± 4.9%) i/s -     21.836M in   5.097611s
String#gsub!/regexp/      3.830M (± 6.4%) i/s -     19.202M in   5.036051s

Comparison:
  String#['string']=: 90288677.0 i/s
  String#[/regexp/]=: 13391735.6 i/s - 6.74x  (± 0.00) slower
 String#sub!'string':  4338286.5 i/s - 20.81x  (± 0.00) slower
 String#sub!/regexp/:  4294187.9 i/s - 21.03x  (± 0.00) slower
String#gsub!/regexp/:  3829799.4 i/s - 23.58x  (± 0.00) slower
String#gsub!'string':  3751849.8 i/s - 24.07x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub    48.757k i/100ms
        String#chomp     4.328M i/100ms
String#delete_suffix     3.550M i/100ms
Calculating -------------------------------------
          String#sub     18.399M (± 8.3%) i/s -     90.298M in   4.997308s
        String#chomp     43.263M (± 0.3%) i/s -    216.393M in   5.001869s
String#delete_suffix     38.464M (± 7.0%) i/s -    195.255M in   5.120964s

Comparison:
        String#chomp: 43262888.2 i/s
String#delete_suffix: 38464266.5 i/s - 1.12x  (± 0.00) slower
          String#sub: 18399311.6 i/s - 2.35x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   238.530M i/100ms
          String#sub    96.181k i/100ms
Calculating -------------------------------------
String#delete_prefix      2.386B (± 0.4%) i/s -     12.165B in   5.098907s
          String#sub    124.437M (± 0.4%) i/s -    621.714M in   4.996277s

Comparison:
String#delete_prefix: 2385854176.8 i/s
          String#sub: 124437072.7 i/s - 19.17x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.149M i/100ms
    String#unpack[0]     1.323M i/100ms
Calculating -------------------------------------
      String#unpack1     13.157M (± 3.5%) i/s -     66.620M in   5.069900s
    String#unpack[0]     13.062M (± 7.3%) i/s -     64.822M in   5.009982s

Comparison:
      String#unpack1: 13156536.4 i/s
    String#unpack[0]: 13062442.4 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 23.1.0-dev-b64cd1d4, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    12.896k i/100ms
          Time.parse   175.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    163.929k (±34.6%) i/s -    735.072k in   5.038347s
          Time.parse      7.599k (±22.0%) i/s -     32.375k in   5.003068s

Comparison:
        Time.iso8601:   163929.1 i/s
          Time.parse:     7598.7 i/s - 21.57x  (± 0.00) slower

