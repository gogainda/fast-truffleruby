$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       238.078M i/100ms
Function with splat arguments
                       711.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          2.386B (± 0.3%) i/s -     12.142B in   5.088714s
Function with splat arguments
                          7.431k (± 7.4%) i/s -     36.972k in   5.020834s

Comparison:
Function with single Array argument: 2386079765.2 i/s
Function with splat arguments:     7431.4 i/s - 321081.46x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   238.206M i/100ms
Sequential Assignment
                       238.504M i/100ms
Calculating -------------------------------------
 Parallel Assignment      2.387B (± 0.3%) i/s -     12.148B in   5.090507s
Sequential Assignment
                          2.388B (± 0.2%) i/s -     12.164B in   5.093761s

Comparison:
Sequential Assignment: 2387975255.9 i/s
 Parallel Assignment: 2386516536.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   238.477M i/100ms
       attr_accessor   238.234M i/100ms
Calculating -------------------------------------
   getter_and_setter      2.385B (± 0.4%) i/s -     11.924B in   4.999479s
       attr_accessor      2.388B (± 0.2%) i/s -     12.150B in   5.088620s

Comparison:
       attr_accessor: 2387683705.9 i/s
   getter_and_setter: 2385053580.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     7.227k i/100ms
         respond_to?   238.219M i/100ms
Calculating -------------------------------------
      begin...rescue     47.225k (± 2.0%) i/s -    238.491k in   5.052129s
         respond_to?      2.387B (± 0.3%) i/s -     12.149B in   5.088697s

Comparison:
         respond_to?: 2387499351.4 i/s
      begin...rescue:    47224.5 i/s - 50556.34x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   238.131M i/100ms
             &method   238.223M i/100ms
Calculating -------------------------------------
              normal      2.381B (± 0.8%) i/s -     11.907B in   5.002011s
             &method      2.387B (± 0.3%) i/s -     12.149B in   5.089112s

Comparison:
             &method: 2387350851.5 i/s
              normal: 2380529301.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        91.000  i/100ms
       define_method   117.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.795k (±53.9%) i/s -      4.550k in   5.015216s
       define_method      4.179k (±48.0%) i/s -      6.903k in   6.960828s

Comparison:
       define_method:     4179.2 i/s
module_eval with string:     1794.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    67.836k i/100ms
       Kernel#format    59.934k i/100ms
            String#%    61.829k i/100ms
Calculating -------------------------------------
         Float#round    728.012k (± 2.9%) i/s -      3.663M in   5.036087s
       Kernel#format    618.716k (± 2.6%) i/s -      3.117M in   5.040787s
            String#%    624.062k (± 2.6%) i/s -      3.153M in   5.056371s

Comparison:
         Float#round:   728012.3 i/s
            String#%:   624061.9 i/s - 1.17x  (± 0.00) slower
       Kernel#format:   618716.0 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   236.965M i/100ms
          OpenStruct   238.932M i/100ms
Calculating -------------------------------------
                Hash      2.385B (± 0.3%) i/s -     12.085B in   5.066711s
          OpenStruct      2.387B (± 0.3%) i/s -     11.947B in   5.005362s

Comparison:
          OpenStruct: 2386782694.0 i/s
                Hash: 2385245871.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   235.844M i/100ms
          OpenStruct     2.572k i/100ms
Calculating -------------------------------------
                Hash      2.381B (± 0.4%) i/s -     12.028B in   5.051419s
          OpenStruct     27.259k (±12.2%) i/s -    133.744k in   5.020189s

Comparison:
                Hash: 2381162215.0 i/s
          OpenStruct:    27258.9 i/s - 87353.69x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   625.623k i/100ms
  ancestors.include?   130.028k i/100ms
Calculating -------------------------------------
  less than or equal      7.004M (± 3.1%) i/s -     35.035M in   5.007085s
  ancestors.include?      1.268M (± 7.9%) i/s -      6.371M in   5.071784s

Comparison:
  less than or equal:  7003803.1 i/s
  ancestors.include?:  1267966.4 i/s - 5.52x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     23.860  (± 0.0%) i/s -    120.000  in   5.029498s
         Kernel loop     23.865  (± 0.0%) i/s -    120.000  in   5.028399s

Comparison:
         Kernel loop:       23.9 i/s
          While Loop:       23.9 i/s - 1.00x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   238.137M i/100ms
         Array#first   238.524M i/100ms
Calculating -------------------------------------
           Array#[0]      2.386B (± 0.3%) i/s -     12.145B in   5.090836s
         Array#first      2.387B (± 0.2%) i/s -     12.165B in   5.095525s

Comparison:
         Array#first: 2387342243.0 i/s
           Array#[0]: 2385682927.8 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   237.982M i/100ms
          Array#last   238.245M i/100ms
Calculating -------------------------------------
          Array#[-1]      2.385B (± 0.3%) i/s -     12.137B in   5.089080s
          Array#last      2.388B (± 0.2%) i/s -     12.150B in   5.088818s

Comparison:
          Array#last: 2387691448.3 i/s
          Array#[-1]: 2384957155.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   461.835k i/100ms
Calculating -------------------------------------
                find      6.564  (±30.5%) i/s -     13.000  in   5.085316s
             bsearch      4.653M (± 2.9%) i/s -     23.554M in   5.066538s

Comparison:
             bsearch:  4652916.4 i/s
                find:        6.6 i/s - 708890.05x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.124  (± 0.0%) i/s -      1.000  in   8.043253s
        Array#insert      0.944  (± 0.0%) i/s -      5.000  in   5.295935s

Comparison:
        Array#insert:        0.9 i/s
       Array#unshift:        0.1 i/s - 7.59x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   238.534M i/100ms
          Array#size   238.460M i/100ms
         Array#count   238.949M i/100ms
Calculating -------------------------------------
        Array#length      2.385B (± 0.3%) i/s -     11.927B in   4.999961s
          Array#size      2.387B (± 0.3%) i/s -     12.161B in   5.093893s
         Array#count      2.388B (± 0.3%) i/s -     11.947B in   5.003584s

Comparison:
         Array#count: 2387795229.6 i/s
          Array#size: 2387475343.2 i/s - same-ish: difference falls within error
        Array#length: 2385381269.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    22.015k i/100ms
        Array#sample     2.642M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    243.749k (± 2.5%) i/s -      1.233M in   5.061325s
        Array#sample     26.513M (± 0.2%) i/s -    134.725M in   5.081535s

Comparison:
        Array#sample: 26512757.5 i/s
 Array#shuffle.first:   243749.3 i/s - 108.77x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   390.000  i/100ms
          Date.parse   354.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     29.725k (±40.4%) i/s -    113.490k in   4.996193s
          Date.parse     19.562k (±28.9%) i/s -     75.402k in   4.995115s

Comparison:
        Date.iso8601:    29724.9 i/s
          Date.parse:    19561.7 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   133.121k i/100ms
           Array#map   491.770k i/100ms
Calculating -------------------------------------
   Array#each + push      1.415M (± 4.8%) i/s -      7.189M in   5.093698s
           Array#map      4.912M (± 5.2%) i/s -     24.588M in   5.019238s

Comparison:
           Array#map:  4912028.7 i/s
   Array#each + push:  1414517.4 i/s - 3.47x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     7.966M i/100ms
               #each    24.895M i/100ms
Calculating -------------------------------------
            For loop     80.566M (± 0.3%) i/s -    406.251M in   5.042527s
               #each    248.873M (± 0.1%) i/s -      1.245B in   5.001588s

Comparison:
               #each: 248872971.0 i/s
            For loop: 80565767.9 i/s - 3.09x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   962.940k i/100ms
     each_with_index     1.215M i/100ms
Calculating -------------------------------------
          While Loop      9.670M (± 0.2%) i/s -     49.110M in   5.078781s
     each_with_index     12.046M (± 0.3%) i/s -     60.736M in   5.042222s

Comparison:
     each_with_index: 12045660.0 i/s
          While Loop:  9669659.6 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   145.132k i/100ms
      inject to_proc   147.332k i/100ms
        inject block   147.277k i/100ms
Calculating -------------------------------------
       inject symbol      1.472M (± 0.2%) i/s -      7.402M in   5.028932s
      inject to_proc      1.472M (± 0.4%) i/s -      7.367M in   5.005807s
        inject block      1.472M (± 0.2%) i/s -      7.364M in   5.001971s

Comparison:
        inject block:  1472193.4 i/s
       inject symbol:  1471836.4 i/s - same-ish: difference falls within error
      inject to_proc:  1471629.3 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     9.288k i/100ms
   Array#map.flatten    10.697k i/100ms
      Array#flat_map    30.223k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    110.393k (± 3.9%) i/s -    557.280k in   5.056279s
   Array#map.flatten    109.062k (± 3.9%) i/s -    545.547k in   5.010137s
      Array#flat_map    304.830k (± 4.1%) i/s -      1.541M in   5.065149s

Comparison:
      Array#flat_map:   304830.5 i/s
Array#map.flatten(1):   110393.0 i/s - 2.76x  (± 0.00) slower
   Array#map.flatten:   109061.6 i/s - 2.80x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   153.368k i/100ms
  Array#reverse_each     1.886M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.831M (± 7.2%) i/s -      9.202M in   5.071172s
  Array#reverse_each     18.772M (± 0.2%) i/s -     94.287M in   5.022766s

Comparison:
  Array#reverse_each: 18771965.6 i/s
  Array#reverse.each:  1831379.0 i/s - 10.25x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       541.885k i/100ms
   Enumerable#detect     3.473M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          5.769M (± 7.0%) i/s -    114.880M in  20.063797s
   Enumerable#detect     34.723M (± 0.2%) i/s -    694.578M in  20.003197s

Comparison:
   Enumerable#detect: 34723410.4 i/s
Enumerable#select.first:  5768701.5 i/s - 6.02x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       181.675k i/100ms
Enumerable#select.last
                       342.320k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.816M (± 3.5%) i/s -      9.084M in   5.009375s
Enumerable#select.last
                          3.617M (± 2.7%) i/s -     18.143M in   5.020520s

Comparison:
Enumerable#select.last:  3616507.8 i/s
Enumerable#reverse.detect:  1815653.3 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.462k i/100ms
  Enumerable#sort_by     2.170k i/100ms
     Enumerable#sort     3.211k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         24.570k (±18.1%) i/s -    113.252k in   5.011223s
  Enumerable#sort_by     22.530k (±28.2%) i/s -     95.480k in   5.019046s
     Enumerable#sort     34.683k (± 2.2%) i/s -    173.394k in   5.002236s

Comparison:
     Enumerable#sort:    34683.0 i/s
Enumerable#sort_by (Symbol#to_proc):    24570.4 i/s - 1.41x  (± 0.00) slower
  Enumerable#sort_by:    22529.6 i/s - 1.54x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   512.774k i/100ms
Enumerable#sort_by...first
                         4.579k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      5.179M (± 0.3%) i/s -     26.151M in   5.049960s
Enumerable#sort_by...first
                         55.558k (± 7.2%) i/s -    279.319k in   5.075616s

Comparison:
   Enumerable#min_by:  5178594.1 i/s
Enumerable#sort_by...first:    55558.2 i/s - 93.21x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   166.228k i/100ms
            Hash#dup   175.009k i/100ms
Calculating -------------------------------------
              Hash[]      1.839M (± 4.1%) i/s -      9.309M in   5.069376s
            Hash#dup      1.808M (± 7.4%) i/s -      9.100M in   5.080092s

Comparison:
              Hash[]:  1839348.0 i/s
            Hash#dup:  1807800.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   238.247M i/100ms
  Hash#fetch, symbol   238.564M i/100ms
     Hash#[], string     2.198M i/100ms
  Hash#fetch, string     2.239M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      2.386B (± 0.3%) i/s -     12.151B in   5.092349s
  Hash#fetch, symbol      2.388B (± 0.2%) i/s -     12.167B in   5.095682s
     Hash#[], string    157.106M (± 0.4%) i/s -    787.018M in   5.009571s
  Hash#fetch, string    143.127M (± 2.2%) i/s -    716.588M in   5.009120s

Comparison:
  Hash#fetch, symbol: 2387671177.1 i/s
     Hash#[], symbol: 2386067398.7 i/s - same-ish: difference falls within error
     Hash#[], string: 157106137.7 i/s - 15.20x  (± 0.00) slower
  Hash#fetch, string: 143127112.3 i/s - 16.68x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    49.702M i/100ms
             Hash#[]    49.724M i/100ms
          Hash#[] ||    49.704M i/100ms
          Hash#[] &&    49.782M i/100ms
          Hash#fetch    49.778M i/100ms
 Hash#fetch fallback    49.779M i/100ms
Calculating -------------------------------------
            Hash#dig    496.884M (± 0.4%) i/s -      2.485B in   5.001448s
             Hash#[]    497.600M (± 0.2%) i/s -      2.536B in   5.096365s
          Hash#[] ||    497.652M (± 0.1%) i/s -      2.535B in   5.093708s
          Hash#[] &&    497.452M (± 0.2%) i/s -      2.489B in   5.003693s
          Hash#fetch    497.295M (± 0.4%) i/s -      2.489B in   5.004944s
 Hash#fetch fallback    497.658M (± 0.1%) i/s -      2.489B in   5.001313s

Comparison:
 Hash#fetch fallback: 497658310.0 i/s
          Hash#[] ||: 497652294.7 i/s - same-ish: difference falls within error
             Hash#[]: 497599944.6 i/s - same-ish: difference falls within error
          Hash#[] &&: 497452454.5 i/s - same-ish: difference falls within error
          Hash#fetch: 497294551.4 i/s - same-ish: difference falls within error
            Hash#dig: 496883977.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   238.648M i/100ms
  Hash#fetch + block   238.285M i/100ms
    Hash#fetch + arg   238.904M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      2.386B (± 0.3%) i/s -     11.932B in   5.002094s
  Hash#fetch + block      2.387B (± 0.3%) i/s -     12.153B in   5.091409s
    Hash#fetch + arg      2.387B (± 0.3%) i/s -     11.945B in   5.004188s

Comparison:
    Hash#fetch + arg: 2387071404.4 i/s
  Hash#fetch + block: 2386889128.6 i/s - same-ish: difference falls within error
  Hash#fetch + const: 2385511183.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    13.800k i/100ms
         sort + to_h     2.052k i/100ms
Calculating -------------------------------------
      sort_by + to_h    248.131k (± 5.2%) i/s -      1.242M in   5.020194s
         sort + to_h     94.594k (±10.7%) i/s -    463.752k in   5.035603s

Comparison:
      sort_by + to_h:   248130.6 i/s
         sort + to_h:    94593.7 i/s - 2.62x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   118.607k i/100ms
       Hash#each_key   139.060k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.209M (±12.2%) i/s -      5.930M in   5.063047s
       Hash#each_key      1.335M (± 7.3%) i/s -      6.675M in   5.044264s

Comparison:
       Hash#each_key:  1335067.2 i/s
      Hash#keys.each:  1209072.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   190.000  i/100ms
           Hash#key?     2.232M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      2.028k (±12.6%) i/s -     10.070k in   5.069441s
           Hash#key?     21.928M (± 0.1%) i/s -    111.584M in   5.088701s

Comparison:
           Hash#key?: 21927824.6 i/s
  Hash#keys.include?:     2028.0 i/s - 10812.50x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    14.135k i/100ms
            Hash#[]=    20.018k i/100ms
Calculating -------------------------------------
         Hash#merge!    211.445k (± 5.0%) i/s -      1.060M in   5.026715s
            Hash#[]=    210.822k (± 3.3%) i/s -      1.061M in   5.038269s

Comparison:
         Hash#merge!:   211444.5 i/s
            Hash#[]=:   210821.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         9.706k i/100ms
      Hash#merge({})     6.527k i/100ms
 Hash#dup#merge!({})    12.280k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        116.394k (± 3.9%) i/s -    582.360k in   5.011361s
      Hash#merge({})     70.874k (± 4.7%) i/s -    358.985k in   5.076469s
 Hash#dup#merge!({})    124.954k (± 2.8%) i/s -    626.280k in   5.016114s

Comparison:
 Hash#dup#merge!({}):   124954.3 i/s
{}#merge!(Hash) do end:   116393.9 i/s - 1.07x  (± 0.00) slower
      Hash#merge({}):    70873.7 i/s - 1.76x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   238.378M i/100ms
          Hash#merge   238.999M i/100ms
Calculating -------------------------------------
        Hash#**other      2.386B (± 0.3%) i/s -     12.157B in   5.095532s
          Hash#merge      2.387B (± 0.3%) i/s -     11.950B in   5.006432s

Comparison:
          Hash#merge: 2386943764.6 i/s
        Hash#**other: 2385891131.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   259.000  i/100ms
         Hash#merge!    21.068k i/100ms
Calculating -------------------------------------
          Hash#merge      2.895k (± 7.5%) i/s -     14.504k in   5.057355s
         Hash#merge!    206.158k (± 3.5%) i/s -      1.032M in   5.013500s

Comparison:
         Hash#merge!:   206157.7 i/s
          Hash#merge:     2895.3 i/s - 71.20x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      985.813k i/100ms
Array#each             934.177k i/100ms
Array#each_w/_object   901.829k i/100ms
Hash#select-include      1.211M i/100ms
Calculating -------------------------------------
Hash#native-slice        10.640M (± 3.8%) i/s -     53.234M in   5.010791s
Array#each                9.347M (± 2.8%) i/s -     46.709M in   5.001337s
Array#each_w/_object      9.193M (± 4.2%) i/s -     45.993M in   5.012314s
Hash#select-include      12.379M (± 3.2%) i/s -     62.977M in   5.092717s

Comparison:
Hash#select-include : 12379237.1 i/s
Hash#native-slice   : 10640200.8 i/s - 1.16x  (± 0.00) slower
Array#each          :  9346911.4 i/s - 1.32x  (± 0.00) slower
Array#each_w/_object:  9192743.2 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   189.000  i/100ms
         Hash#value?   411.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.979k (±11.7%) i/s -      9.828k in   5.062955s
         Hash#value?      4.114k (± 0.3%) i/s -     20.961k in   5.095258s

Comparison:
         Hash#value?:     4113.9 i/s
Hash#values.include?:     1978.8 i/s - 2.08x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   238.431M i/100ms
                send   238.264M i/100ms
      method_missing   238.929M i/100ms
Calculating -------------------------------------
                call      2.386B (± 0.3%) i/s -     12.160B in   5.096756s
                send      2.387B (± 0.3%) i/s -     12.151B in   5.091439s
      method_missing      2.387B (± 0.3%) i/s -     11.946B in   5.004303s

Comparison:
      method_missing: 2387255832.0 i/s
                send: 2386665797.5 i/s - same-ish: difference falls within error
                call: 2385850512.8 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    12.515k i/100ms
      Symbol#to_proc    13.805k i/100ms
Calculating -------------------------------------
               Block    135.211k (± 7.2%) i/s -    675.810k in   5.042569s
      Symbol#to_proc    135.377k (± 7.3%) i/s -    676.445k in   5.041258s

Comparison:
      Symbol#to_proc:   135377.5 i/s
               Block:   135211.2 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   238.463M i/100ms
       block + yield   238.537M i/100ms
        unused block   238.916M i/100ms
               yield   238.809M i/100ms
Calculating -------------------------------------
          block.call      2.386B (± 0.3%) i/s -     12.162B in   5.096898s
       block + yield      2.388B (± 0.1%) i/s -     12.165B in   5.093787s
        unused block      2.388B (± 0.2%) i/s -     11.946B in   5.002823s
               yield      2.388B (± 0.2%) i/s -     11.940B in   5.000939s

Comparison:
       block + yield: 2388285465.3 i/s
        unused block: 2387818833.6 i/s - same-ish: difference falls within error
               yield: 2387647482.0 i/s - same-ish: difference falls within error
          block.call: 2386102055.8 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    15.697k i/100ms
      range#include?   322.000  i/100ms
       range#member?   658.000  i/100ms
       plain compare    19.243k i/100ms
Calculating -------------------------------------
        range#cover?    139.671k (±25.0%) i/s -    643.577k in   5.029583s
      range#include?      8.734k (±30.9%) i/s -     38.318k in   5.007042s
       range#member?      7.475k (±30.6%) i/s -     33.558k in   5.018543s
       plain compare    331.906k (± 8.6%) i/s -      1.655M in   5.029545s

Comparison:
       plain compare:   331905.9 i/s
        range#cover?:   139670.6 i/s - 2.38x  (± 0.00) slower
      range#include?:     8734.2 i/s - 38.00x  (± 0.00) slower
       range#member?:     7475.0 i/s - 44.40x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     9.645M i/100ms
           String#=~     9.641M i/100ms
          Regexp#===     9.643M i/100ms
        String#match     8.506M i/100ms
Calculating -------------------------------------
       String#match?     97.436M (± 0.2%) i/s -    491.870M in   5.048136s
           String#=~     96.338M (± 0.4%) i/s -    482.057M in   5.003890s
          Regexp#===     96.383M (± 0.1%) i/s -    482.150M in   5.002457s
        String#match     85.074M (± 0.1%) i/s -    433.817M in   5.099328s

Comparison:
       String#match?: 97436408.4 i/s
          Regexp#===: 96382755.2 i/s - 1.01x  (± 0.00) slower
           String#=~: 96337586.7 i/s - 1.01x  (± 0.00) slower
        String#match: 85073575.9 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.272M i/100ms
      String#casecmp     2.272M i/100ms
Calculating -------------------------------------
String#downcase + ==     14.187M (± 7.7%) i/s -     71.209M in   5.068300s
      String#casecmp     22.940M (± 2.4%) i/s -    115.861M in   5.053589s

Comparison:
      String#casecmp: 22940307.9 i/s
String#downcase + ==: 14187359.9 i/s - 1.62x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     5.325M i/100ms
       String#concat     5.955M i/100ms
       String#append     5.964M i/100ms
         "foo" "bar"   238.878M i/100ms
  "#{'foo'}#{'bar'}"   238.836M i/100ms
Calculating -------------------------------------
            String#+     63.317M (± 5.2%) i/s -    319.472M in   5.059914s
       String#concat     64.181M (± 3.0%) i/s -    321.595M in   5.015486s
       String#append     63.842M (± 4.6%) i/s -    322.068M in   5.055854s
         "foo" "bar"      2.387B (± 0.2%) i/s -     11.944B in   5.003702s
  "#{'foo'}#{'bar'}"      2.386B (± 0.4%) i/s -     11.942B in   5.005739s

Comparison:
         "foo" "bar": 2387027863.5 i/s
  "#{'foo'}#{'bar'}": 2385657372.3 i/s - same-ish: difference falls within error
       String#concat: 64180527.0 i/s - 37.19x  (± 0.00) slower
       String#append: 63842442.4 i/s - 37.39x  (± 0.00) slower
            String#+: 63317038.1 i/s - 37.70x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   238.485M i/100ms
          String#dup   238.112M i/100ms
Calculating -------------------------------------
           String#+@      2.382B (± 0.4%) i/s -     11.924B in   5.005070s
          String#dup      2.386B (± 0.3%) i/s -     12.144B in   5.090043s

Comparison:
          String#dup: 2385806717.3 i/s
           String#+@: 2382476520.6 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   716.643k i/100ms
       String#match?     1.204M i/100ms
    String#end_with?    14.182M i/100ms
Calculating -------------------------------------
           String#=~      9.012M (± 2.9%) i/s -     45.149M in   5.014792s
       String#match?     12.030M (± 0.2%) i/s -     60.196M in   5.003869s
    String#end_with?    142.023M (± 0.3%) i/s -    723.279M in   5.092741s

Comparison:
    String#end_with?: 142022515.3 i/s
       String#match?: 12029896.6 i/s - 11.81x  (± 0.00) slower
           String#=~:  9011503.4 i/s - 15.76x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    41.469k i/100ms
          String#sub   352.703k i/100ms
String#dup["string"]=
                         7.461M i/100ms
Calculating -------------------------------------
         String#gsub      3.803M (±13.1%) i/s -     18.412M in   5.000298s
          String#sub      4.445M (± 4.2%) i/s -     22.220M in   5.008472s
String#dup["string"]=
                         74.610M (± 0.1%) i/s -    380.499M in   5.099847s

Comparison:
String#dup["string"]=: 74609862.1 i/s
          String#sub:  4444744.2 i/s - 16.79x  (± 0.00) slower
         String#gsub:  3803453.6 i/s - 19.62x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    39.005k i/100ms
           String#tr    77.682k i/100ms
Calculating -------------------------------------
         String#gsub      1.682M (± 8.8%) i/s -      8.347M in   5.008806s
           String#tr    798.598k (± 3.1%) i/s -      4.039M in   5.063184s

Comparison:
         String#gsub:  1682279.1 i/s
           String#tr:   798598.5 i/s - 2.11x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   238.474M i/100ms
         With Freeze   238.164M i/100ms
Calculating -------------------------------------
      Without Freeze      2.384B (± 0.4%) i/s -     11.924B in   5.001682s
         With Freeze      2.388B (± 0.1%) i/s -     12.146B in   5.086669s

Comparison:
         With Freeze: 2387885683.6 i/s
      Without Freeze: 2383973408.8 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     4.233k i/100ms
      String#squeeze    26.327k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     50.276k (± 7.6%) i/s -    249.747k in   5.016708s
      String#squeeze    262.506k (± 3.0%) i/s -      1.316M in   5.019552s

Comparison:
      String#squeeze:   262506.5 i/s
 String#gsub/regex+/:    50276.2 i/s - 5.22x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.046M i/100ms
       String#match?     1.853M i/100ms
  String#start_with?     9.653M i/100ms
Calculating -------------------------------------
           String#=~     26.877M (± 5.0%) i/s -    134.918M in   5.035431s
       String#match?     43.384M (± 0.5%) i/s -    218.681M in   5.040730s
  String#start_with?     96.464M (± 0.4%) i/s -    482.662M in   5.003618s

Comparison:
  String#start_with?: 96464395.2 i/s
       String#match?: 43383865.5 i/s - 2.22x  (± 0.00) slower
           String#=~: 26877272.4 i/s - 3.59x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    97.995k i/100ms
    String#[0, n] ==   191.997k i/100ms
   String#[RANGE] ==   272.372k i/100ms
   String#[0...n] ==   193.999k i/100ms
Calculating -------------------------------------
  String#start_with?      4.541M (± 0.1%) i/s -     22.735M in   5.006283s
    String#[0, n] ==      2.103M (± 4.3%) i/s -     10.560M in   5.030377s
   String#[RANGE] ==      3.006M (± 3.0%) i/s -     15.253M in   5.079834s
   String#[0...n] ==      1.947M (± 3.9%) i/s -      9.894M in   5.090217s

Comparison:
  String#start_with?:  4541268.2 i/s
   String#[RANGE] ==:  3005542.5 i/s - 1.51x  (± 0.00) slower
    String#[0, n] ==:  2103411.3 i/s - 2.16x  (± 0.00) slower
   String#[0...n] ==:  1946744.9 i/s - 2.33x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     7.442M i/100ms
 String#sub!'string'    82.435k i/100ms
String#gsub!'string'   344.338k i/100ms
  String#[/regexp/]=     1.292M i/100ms
 String#sub!/regexp/   434.254k i/100ms
String#gsub!/regexp/   321.113k i/100ms
Calculating -------------------------------------
  String#['string']=     74.467M (± 0.1%) i/s -    379.524M in   5.096581s
 String#sub!'string'      4.353M (±20.7%) i/s -     20.197M in   5.018318s
String#gsub!'string'      3.541M (± 5.2%) i/s -     17.906M in   5.072010s
  String#[/regexp/]=     13.174M (± 3.8%) i/s -     65.911M in   5.011008s
 String#sub!/regexp/      4.450M (± 5.1%) i/s -     22.581M in   5.087924s
String#gsub!/regexp/      3.893M (± 6.2%) i/s -     19.588M in   5.053013s

Comparison:
  String#['string']=: 74466509.5 i/s
  String#[/regexp/]=: 13174096.6 i/s - 5.65x  (± 0.00) slower
 String#sub!/regexp/:  4450376.6 i/s - 16.73x  (± 0.00) slower
 String#sub!'string':  4353198.8 i/s - 17.11x  (± 0.00) slower
String#gsub!/regexp/:  3892522.9 i/s - 19.13x  (± 0.00) slower
String#gsub!'string':  3540842.2 i/s - 21.03x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub    50.544k i/100ms
        String#chomp     3.780M i/100ms
String#delete_suffix     3.740M i/100ms
Calculating -------------------------------------
          String#sub     15.324M (± 7.0%) i/s -     75.664M in   4.998888s
        String#chomp     37.818M (± 0.2%) i/s -    192.799M in   5.098154s
String#delete_suffix     38.642M (± 3.0%) i/s -    194.498M in   5.038014s

Comparison:
String#delete_suffix: 38641691.1 i/s
        String#chomp: 37817555.5 i/s - same-ish: difference falls within error
          String#sub: 15323997.2 i/s - 2.52x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   238.204M i/100ms
          String#sub    87.257k i/100ms
Calculating -------------------------------------
String#delete_prefix      2.386B (± 0.3%) i/s -     12.148B in   5.092360s
          String#sub    105.503M (± 1.3%) i/s -    527.032M in   4.996286s

Comparison:
String#delete_prefix: 2385638841.2 i/s
          String#sub: 105502724.5 i/s - 22.61x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.273M i/100ms
    String#unpack[0]     1.303M i/100ms
Calculating -------------------------------------
      String#unpack1     12.638M (± 6.9%) i/s -     63.662M in   5.077725s
    String#unpack[0]     12.770M (± 2.9%) i/s -     63.854M in   5.004453s

Comparison:
    String#unpack[0]: 12770391.6 i/s
      String#unpack1: 12637876.0 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 23.1.0-dev-9ff255ae, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    13.183k i/100ms
          Time.parse   115.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    244.398k (±24.3%) i/s -      1.134M in   4.999220s
          Time.parse     12.522k (±18.3%) i/s -     48.645k in   5.001078s

Comparison:
        Time.iso8601:   244398.0 i/s
          Time.parse:    12522.2 i/s - 19.52x  (± 0.00) slower

