$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       181.901M i/100ms
Function with splat arguments
                       833.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.792B (± 3.7%) i/s -      9.095B in   5.081533s
Function with splat arguments
                          8.795k (± 5.6%) i/s -     44.149k in   5.036056s

Comparison:
Function with single Array argument: 1792370093.2 i/s
Function with splat arguments:     8795.4 i/s - 203784.38x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   183.120M i/100ms
Sequential Assignment
                       176.575M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.843B (± 5.9%) i/s -      9.339B in   5.085678s
Sequential Assignment
                          1.826B (± 4.9%) i/s -      9.182B in   5.041182s

Comparison:
 Parallel Assignment: 1842633980.5 i/s
Sequential Assignment: 1825549480.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   184.487M i/100ms
       attr_accessor   184.925M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.927B (± 4.2%) i/s -      9.778B in   5.082419s
       attr_accessor      1.943B (± 5.4%) i/s -      9.801B in   5.058993s

Comparison:
       attr_accessor: 1943198854.3 i/s
   getter_and_setter: 1927323029.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     9.308k i/100ms
         respond_to?   189.589M i/100ms
Calculating -------------------------------------
      begin...rescue     62.326k (± 4.4%) i/s -    316.472k in   5.087632s
         respond_to?      1.843B (± 4.2%) i/s -      9.290B in   5.048656s

Comparison:
         respond_to?: 1843289052.1 i/s
      begin...rescue:    62325.6 i/s - 29575.13x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   186.715M i/100ms
             &method   182.394M i/100ms
Calculating -------------------------------------
              normal      1.862B (± 5.0%) i/s -      9.336B in   5.026280s
             &method      1.828B (± 3.7%) i/s -      9.302B in   5.094531s

Comparison:
              normal: 1862022204.3 i/s
             &method: 1828442587.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        85.000  i/100ms
       define_method   123.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.494k (±51.0%) i/s -      4.080k in   5.057727s
       define_method      4.449k (±58.4%) i/s -      5.781k in   5.896159s

Comparison:
       define_method:     4449.4 i/s
module_eval with string:     1493.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    70.595k i/100ms
       Kernel#format    61.717k i/100ms
            String#%    59.978k i/100ms
Calculating -------------------------------------
         Float#round    743.803k (± 6.9%) i/s -      3.742M in   5.054144s
       Kernel#format    596.026k (± 5.9%) i/s -      3.024M in   5.090578s
            String#%    598.121k (± 5.1%) i/s -      2.999M in   5.027452s

Comparison:
         Float#round:   743803.2 i/s
            String#%:   598120.7 i/s - 1.24x  (± 0.00) slower
       Kernel#format:   596026.1 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   189.168M i/100ms
          OpenStruct   180.601M i/100ms
Calculating -------------------------------------
                Hash      1.880B (± 4.8%) i/s -      9.458B in   5.042826s
          OpenStruct      1.928B (± 6.9%) i/s -      9.752B in   5.094229s

Comparison:
          OpenStruct: 1927548408.4 i/s
                Hash: 1880133275.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   179.488M i/100ms
          OpenStruct     2.072k i/100ms
Calculating -------------------------------------
                Hash      1.790B (± 5.9%) i/s -      8.974B in   5.033267s
          OpenStruct     20.935k (±15.3%) i/s -    103.600k in   5.117979s

Comparison:
                Hash: 1790162389.1 i/s
          OpenStruct:    20935.0 i/s - 85510.69x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   708.825k i/100ms
  ancestors.include?   143.094k i/100ms
Calculating -------------------------------------
  less than or equal      7.502M (± 5.7%) i/s -     37.568M in   5.024569s
  ancestors.include?      1.424M (± 5.5%) i/s -      7.155M in   5.041491s

Comparison:
  less than or equal:  7501769.0 i/s
  ancestors.include?:  1423584.0 i/s - 5.27x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     22.631  (± 4.4%) i/s -    113.000  in   5.005273s
         Kernel loop     21.432  (± 4.7%) i/s -    107.000  in   5.001526s

Comparison:
          While Loop:       22.6 i/s
         Kernel loop:       21.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   176.962M i/100ms
         Array#first   192.520M i/100ms
Calculating -------------------------------------
           Array#[0]      1.858B (± 5.1%) i/s -      9.379B in   5.063243s
         Array#first      1.755B (± 7.2%) i/s -      8.856B in   5.073314s

Comparison:
           Array#[0]: 1857714268.7 i/s
         Array#first: 1755423191.9 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   179.487M i/100ms
          Array#last   182.946M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.889B (± 5.4%) i/s -      9.513B in   5.050735s
          Array#last      1.895B (± 4.0%) i/s -      9.513B in   5.029316s

Comparison:
          Array#last: 1894749575.6 i/s
          Array#[-1]: 1888976343.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   545.754k i/100ms
Calculating -------------------------------------
                find      5.228  (±19.1%) i/s -     15.000  in   5.109744s
             bsearch      5.590M (± 4.9%) i/s -     28.379M in   5.088980s

Comparison:
             bsearch:  5590163.6 i/s
                find:        5.2 i/s - 1069310.10x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.080  (± 0.0%) i/s -      1.000  in  12.469826s
        Array#insert      0.748  (± 0.0%) i/s -      4.000  in   5.348710s

Comparison:
        Array#insert:        0.7 i/s
       Array#unshift:        0.1 i/s - 9.33x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   188.866M i/100ms
          Array#size   182.988M i/100ms
         Array#count   191.316M i/100ms
Calculating -------------------------------------
        Array#length      1.934B (± 4.1%) i/s -      9.821B in   5.086080s
          Array#size      1.899B (± 4.5%) i/s -      9.515B in   5.020108s
         Array#count      1.866B (± 4.3%) i/s -      9.375B in   5.032673s

Comparison:
        Array#length: 1934260386.4 i/s
          Array#size: 1899435082.4 i/s - same-ish: difference falls within error
         Array#count: 1866130810.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    20.358k i/100ms
        Array#sample     2.410M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    221.557k (± 5.9%) i/s -      1.120M in   5.071418s
        Array#sample     24.989M (± 3.6%) i/s -    125.313M in   5.021342s

Comparison:
        Array#sample: 24988697.0 i/s
 Array#shuffle.first:   221557.2 i/s - 112.79x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   317.000  i/100ms
          Date.parse   317.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     17.294k (±37.0%) i/s -     70.057k in   4.998435s
          Date.parse      9.064k (±24.5%) i/s -     40.893k in   5.022823s

Comparison:
        Date.iso8601:    17293.5 i/s
          Date.parse:     9064.4 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   172.662k i/100ms
           Array#map   854.119k i/100ms
Calculating -------------------------------------
   Array#each + push      1.771M (± 6.0%) i/s -      8.978M in   5.087325s
           Array#map      8.308M (± 8.7%) i/s -     41.852M in   5.095028s

Comparison:
           Array#map:  8308392.5 i/s
   Array#each + push:  1771191.6 i/s - 4.69x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     7.712M i/100ms
               #each    38.988M i/100ms
Calculating -------------------------------------
            For loop     78.686M (± 3.5%) i/s -    393.310M in   5.004845s
               #each    394.535M (± 5.4%) i/s -      1.988B in   5.054465s

Comparison:
               #each: 394534818.0 i/s
            For loop: 78685662.7 i/s - 5.01x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   808.911k i/100ms
     each_with_index     1.082M i/100ms
Calculating -------------------------------------
          While Loop      8.363M (± 6.1%) i/s -     42.063M in   5.048250s
     each_with_index     11.701M (± 5.4%) i/s -     58.445M in   5.009317s

Comparison:
     each_with_index: 11701216.3 i/s
          While Loop:  8363264.1 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   140.313k i/100ms
      inject to_proc   148.829k i/100ms
        inject block   145.490k i/100ms
Calculating -------------------------------------
       inject symbol      1.514M (± 4.6%) i/s -      7.577M in   5.016097s
      inject to_proc      1.481M (± 4.3%) i/s -      7.441M in   5.034266s
        inject block      1.519M (± 4.5%) i/s -      7.711M in   5.086417s

Comparison:
        inject block:  1519016.3 i/s
       inject symbol:  1513652.2 i/s - same-ish: difference falls within error
      inject to_proc:  1480830.0 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    10.836k i/100ms
   Array#map.flatten    14.853k i/100ms
      Array#flat_map    36.151k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    151.221k (± 8.7%) i/s -    758.520k in   5.055818s
   Array#map.flatten    161.613k (± 4.8%) i/s -    816.915k in   5.066766s
      Array#flat_map    359.946k (± 3.5%) i/s -      1.808M in   5.027839s

Comparison:
      Array#flat_map:   359946.2 i/s
   Array#map.flatten:   161612.8 i/s - 2.23x  (± 0.00) slower
Array#map.flatten(1):   151220.9 i/s - 2.38x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   147.636k i/100ms
  Array#reverse_each     1.582M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.900M (± 6.8%) i/s -      9.596M in   5.073833s
  Array#reverse_each     16.494M (± 4.6%) i/s -     83.828M in   5.093356s

Comparison:
  Array#reverse_each: 16493804.2 i/s
  Array#reverse.each:  1900259.7 i/s - 8.68x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       570.250k i/100ms
   Enumerable#detect     2.914M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          5.737M (± 8.6%) i/s -    114.050M in  20.092589s
   Enumerable#detect     28.650M (± 4.8%) i/s -    574.098M in  20.083898s

Comparison:
   Enumerable#detect: 28649919.3 i/s
Enumerable#select.first:  5736528.4 i/s - 4.99x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       149.902k i/100ms
Enumerable#select.last
                       300.487k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.818M (± 4.7%) i/s -      9.144M in   5.041522s
Enumerable#select.last
                          3.093M (± 3.9%) i/s -     15.625M in   5.059625s

Comparison:
Enumerable#select.last:  3093092.2 i/s
Enumerable#reverse.detect:  1817950.3 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.079k i/100ms
  Enumerable#sort_by   629.000  i/100ms
     Enumerable#sort     2.482k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         23.359k (±12.0%) i/s -    114.345k in   5.028080s
  Enumerable#sort_by     22.670k (±19.0%) i/s -    103.785k in   5.020085s
     Enumerable#sort     30.753k (± 4.6%) i/s -    153.884k in   5.014750s

Comparison:
     Enumerable#sort:    30753.3 i/s
Enumerable#sort_by (Symbol#to_proc):    23359.3 i/s - 1.32x  (± 0.00) slower
  Enumerable#sort_by:    22670.4 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   422.303k i/100ms
Enumerable#sort_by...first
                         5.253k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      4.474M (± 4.1%) i/s -     22.382M in   5.011480s
Enumerable#sort_by...first
                         60.679k (± 4.5%) i/s -    304.674k in   5.031366s

Comparison:
   Enumerable#min_by:  4473613.4 i/s
Enumerable#sort_by...first:    60679.5 i/s - 73.73x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   265.160k i/100ms
            Hash#dup   300.028k i/100ms
Calculating -------------------------------------
              Hash[]      3.011M (± 7.4%) i/s -     15.114M in   5.048714s
            Hash#dup      2.943M (± 6.7%) i/s -     14.701M in   5.019271s

Comparison:
              Hash[]:  3010714.4 i/s
            Hash#dup:  2942811.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   180.747M i/100ms
  Hash#fetch, symbol   185.102M i/100ms
     Hash#[], string     2.861M i/100ms
  Hash#fetch, string     9.896M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.842B (± 3.1%) i/s -      9.218B in   5.009643s
  Hash#fetch, symbol      1.847B (± 3.5%) i/s -      9.255B in   5.016475s
     Hash#[], string    135.792M (± 4.5%) i/s -    678.160M in   5.004019s
  Hash#fetch, string    122.641M (± 4.4%) i/s -    613.546M in   5.013313s

Comparison:
  Hash#fetch, symbol: 1847340535.4 i/s
     Hash#[], symbol: 1841900695.0 i/s - same-ish: difference falls within error
     Hash#[], string: 135791527.2 i/s - 13.60x  (± 0.00) slower
  Hash#fetch, string: 122640515.8 i/s - 15.06x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    73.591M i/100ms
             Hash#[]    75.557M i/100ms
          Hash#[] ||    74.698M i/100ms
          Hash#[] &&    74.615M i/100ms
          Hash#fetch    78.493M i/100ms
 Hash#fetch fallback    74.153M i/100ms
Calculating -------------------------------------
            Hash#dig    745.921M (± 3.1%) i/s -      3.753B in   5.036646s
             Hash#[]    719.619M (± 3.8%) i/s -      3.627B in   5.047303s
          Hash#[] ||    709.253M (± 2.5%) i/s -      3.585B in   5.058781s
          Hash#[] &&    718.319M (± 2.1%) i/s -      3.656B in   5.092232s
          Hash#fetch    723.171M (± 2.3%) i/s -      3.689B in   5.104102s
 Hash#fetch fallback    716.678M (± 3.1%) i/s -      3.634B in   5.075147s

Comparison:
            Hash#dig: 745920948.8 i/s
          Hash#fetch: 723170699.3 i/s - same-ish: difference falls within error
             Hash#[]: 719619318.6 i/s - same-ish: difference falls within error
          Hash#[] &&: 718318855.7 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 716678385.7 i/s - same-ish: difference falls within error
          Hash#[] ||: 709252865.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   180.797M i/100ms
  Hash#fetch + block   183.373M i/100ms
    Hash#fetch + arg   187.950M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.954B (± 3.4%) i/s -      9.944B in   5.095668s
  Hash#fetch + block      1.860B (± 5.4%) i/s -      9.352B in   5.043678s
    Hash#fetch + arg      1.940B (± 2.8%) i/s -      9.773B in   5.042807s

Comparison:
  Hash#fetch + const: 1953696451.1 i/s
    Hash#fetch + arg: 1939594854.9 i/s - same-ish: difference falls within error
  Hash#fetch + block: 1859675190.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    20.511k i/100ms
         sort + to_h     3.470k i/100ms
Calculating -------------------------------------
      sort_by + to_h    316.626k (± 7.7%) i/s -      1.579M in   5.018840s
         sort + to_h     89.377k (± 8.4%) i/s -    444.160k in   5.009145s

Comparison:
      sort_by + to_h:   316625.9 i/s
         sort + to_h:    89376.7 i/s - 3.54x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   126.292k i/100ms
       Hash#each_key   138.434k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.254M (±11.2%) i/s -      6.188M in   5.077347s
       Hash#each_key      1.446M (± 4.0%) i/s -      7.337M in   5.080682s

Comparison:
       Hash#each_key:  1446453.8 i/s
      Hash#keys.each:  1253855.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   203.000  i/100ms
           Hash#key?     1.302M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.905k (±11.2%) i/s -      9.541k in   5.087983s
           Hash#key?     19.754M (± 3.1%) i/s -     98.923M in   5.012615s

Comparison:
           Hash#key?: 19753511.8 i/s
  Hash#keys.include?:     1904.8 i/s - 10370.21x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    22.823k i/100ms
            Hash#[]=    29.222k i/100ms
Calculating -------------------------------------
         Hash#merge!    297.109k (± 6.2%) i/s -      1.483M in   5.013395s
            Hash#[]=    296.697k (± 5.5%) i/s -      1.490M in   5.038489s

Comparison:
         Hash#merge!:   297108.8 i/s
            Hash#[]=:   296696.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        13.724k i/100ms
      Hash#merge({})    12.105k i/100ms
 Hash#dup#merge!({})    21.012k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        232.746k (±12.1%) i/s -      1.153M in   5.041623s
      Hash#merge({})    136.138k (±10.8%) i/s -    677.880k in   5.044285s
 Hash#dup#merge!({})    215.012k (± 9.4%) i/s -      1.072M in   5.033536s

Comparison:
{}#merge!(Hash) do end:   232746.0 i/s
 Hash#dup#merge!({}):   215012.2 i/s - same-ish: difference falls within error
      Hash#merge({}):   136138.4 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   183.151M i/100ms
          Hash#merge   181.759M i/100ms
Calculating -------------------------------------
        Hash#**other      1.860B (± 2.4%) i/s -      9.341B in   5.023688s
          Hash#merge      1.844B (± 2.1%) i/s -      9.270B in   5.028931s

Comparison:
        Hash#**other: 1860377733.1 i/s
          Hash#merge: 1844055821.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   393.000  i/100ms
         Hash#merge!    30.634k i/100ms
Calculating -------------------------------------
          Hash#merge      5.675k (± 9.8%) i/s -     28.296k in   5.039786s
         Hash#merge!    297.911k (± 7.5%) i/s -      1.501M in   5.069008s

Comparison:
         Hash#merge!:   297910.6 i/s
          Hash#merge:     5674.7 i/s - 52.50x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.002M i/100ms
Array#each             858.201k i/100ms
Array#each_w/_object   767.114k i/100ms
Hash#select-include      1.519M i/100ms
Calculating -------------------------------------
Hash#native-slice        10.985M (± 6.0%) i/s -     55.087M in   5.034039s
Array#each                9.102M (± 5.7%) i/s -     45.485M in   5.013660s
Array#each_w/_object      8.502M (± 6.3%) i/s -     42.958M in   5.073631s
Hash#select-include      15.379M (± 5.3%) i/s -     77.486M in   5.052485s

Comparison:
Hash#select-include : 15379336.7 i/s
Hash#native-slice   : 10984679.7 i/s - 1.40x  (± 0.00) slower
Array#each          :  9102216.7 i/s - 1.69x  (± 0.00) slower
Array#each_w/_object:  8501578.6 i/s - 1.81x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   187.000  i/100ms
         Hash#value?   797.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.946k (±14.1%) i/s -      9.537k in   5.028556s
         Hash#value?      8.147k (± 4.3%) i/s -     41.444k in   5.097652s

Comparison:
         Hash#value?:     8147.1 i/s
Hash#values.include?:     1945.8 i/s - 4.19x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   179.699M i/100ms
                send   181.265M i/100ms
      method_missing   185.338M i/100ms
Calculating -------------------------------------
                call      1.850B (± 3.1%) i/s -      9.344B in   5.055184s
                send      1.865B (± 1.8%) i/s -      9.426B in   5.054474s
      method_missing      1.863B (± 3.2%) i/s -      9.452B in   5.080127s

Comparison:
                send: 1865450641.7 i/s
      method_missing: 1862549519.8 i/s - same-ish: difference falls within error
                call: 1850402373.0 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    28.170k i/100ms
      Symbol#to_proc    31.767k i/100ms
Calculating -------------------------------------
               Block    311.155k (± 9.8%) i/s -      1.549M in   5.046213s
      Symbol#to_proc    322.254k (±10.8%) i/s -      1.588M in   5.015490s

Comparison:
      Symbol#to_proc:   322254.5 i/s
               Block:   311154.6 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   185.059M i/100ms
       block + yield   181.578M i/100ms
        unused block   183.101M i/100ms
               yield   183.455M i/100ms
Calculating -------------------------------------
          block.call      1.807B (± 4.0%) i/s -      9.068B in   5.027655s
       block + yield      1.821B (± 2.5%) i/s -      9.260B in   5.089468s
        unused block      1.833B (± 1.8%) i/s -      9.338B in   5.095189s
               yield      1.865B (± 3.2%) i/s -      9.356B in   5.022803s

Comparison:
               yield: 1864685961.6 i/s
        unused block: 1833311756.1 i/s - same-ish: difference falls within error
       block + yield: 1820725146.8 i/s - same-ish: difference falls within error
          block.call: 1806789743.1 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     8.332k i/100ms
      range#include?   285.000  i/100ms
       range#member?   567.000  i/100ms
       plain compare    25.982k i/100ms
Calculating -------------------------------------
        range#cover?    137.706k (±17.5%) i/s -    666.560k in   5.008082s
      range#include?      6.719k (±33.7%) i/s -     29.925k in   5.016035s
       range#member?      5.602k (±25.2%) i/s -     27.216k in   5.089361s
       plain compare    302.210k (± 5.5%) i/s -      1.507M in   5.003841s

Comparison:
       plain compare:   302210.1 i/s
        range#cover?:   137706.4 i/s - 2.19x  (± 0.00) slower
      range#include?:     6718.8 i/s - 44.98x  (± 0.00) slower
       range#member?:     5601.7 i/s - 53.95x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    11.456M i/100ms
           String#=~    11.607M i/100ms
          Regexp#===    11.374M i/100ms
        String#match     9.855M i/100ms
Calculating -------------------------------------
       String#match?    119.293M (± 4.1%) i/s -    607.186M in   5.098521s
           String#=~    112.613M (± 4.3%) i/s -    568.750M in   5.060313s
          Regexp#===    111.672M (± 3.3%) i/s -    568.723M in   5.098297s
        String#match     95.596M (± 3.0%) i/s -    482.884M in   5.055775s

Comparison:
       String#match?: 119293141.4 i/s
           String#=~: 112612541.9 i/s - same-ish: difference falls within error
          Regexp#===: 111671917.6 i/s - same-ish: difference falls within error
        String#match: 95596425.7 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.846M i/100ms
      String#casecmp     2.841M i/100ms
Calculating -------------------------------------
String#downcase + ==     19.787M (± 8.8%) i/s -     97.847M in   5.000715s
      String#casecmp     29.736M (± 7.6%) i/s -    147.750M in   4.998990s

Comparison:
      String#casecmp: 29735505.3 i/s
String#downcase + ==: 19787349.0 i/s - 1.50x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     6.355M i/100ms
       String#concat     7.099M i/100ms
       String#append     6.751M i/100ms
         "foo" "bar"   184.315M i/100ms
  "#{'foo'}#{'bar'}"   180.548M i/100ms
Calculating -------------------------------------
            String#+     65.416M (± 5.8%) i/s -    330.464M in   5.069096s
       String#concat     64.553M (± 7.2%) i/s -    326.557M in   5.087640s
       String#append     64.588M (± 4.9%) i/s -    324.026M in   5.028634s
         "foo" "bar"      1.845B (± 5.8%) i/s -      9.216B in   5.012083s
  "#{'foo'}#{'bar'}"      1.864B (± 3.9%) i/s -      9.389B in   5.044321s

Comparison:
  "#{'foo'}#{'bar'}": 1864136193.6 i/s
         "foo" "bar": 1845250350.7 i/s - same-ish: difference falls within error
            String#+: 65415716.3 i/s - 28.50x  (± 0.00) slower
       String#append: 64587696.7 i/s - 28.86x  (± 0.00) slower
       String#concat: 64553203.2 i/s - 28.88x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   178.642M i/100ms
          String#dup   191.711M i/100ms
Calculating -------------------------------------
           String#+@      1.964B (± 3.7%) i/s -      9.825B in   5.009845s
          String#dup      1.925B (± 4.4%) i/s -      9.777B in   5.090630s

Comparison:
           String#+@: 1963933096.8 i/s
          String#dup: 1924515186.8 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   701.584k i/100ms
       String#match?   786.335k i/100ms
    String#end_with?    11.567M i/100ms
Calculating -------------------------------------
           String#=~      8.465M (± 3.7%) i/s -     42.797M in   5.063081s
       String#match?     10.178M (± 6.7%) i/s -     51.112M in   5.045285s
    String#end_with?    120.533M (± 5.7%) i/s -    601.501M in   5.007077s

Comparison:
    String#end_with?: 120533486.7 i/s
       String#match?: 10178283.2 i/s - 11.84x  (± 0.00) slower
           String#=~:  8465106.0 i/s - 14.24x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    47.011k i/100ms
          String#sub   348.948k i/100ms
String#dup["string"]=
                         7.315M i/100ms
Calculating -------------------------------------
         String#gsub      4.248M (±14.4%) i/s -     20.497M in   5.001495s
          String#sub      5.602M (±10.6%) i/s -     27.916M in   5.049180s
String#dup["string"]=
                         69.715M (± 4.6%) i/s -    351.104M in   5.046949s

Comparison:
String#dup["string"]=: 69715436.1 i/s
          String#sub:  5602210.0 i/s - 12.44x  (± 0.00) slower
         String#gsub:  4247564.2 i/s - 16.41x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    25.168k i/100ms
           String#tr    79.766k i/100ms
Calculating -------------------------------------
         String#gsub      1.970M (±13.7%) i/s -      9.488M in   5.010690s
           String#tr    846.060k (± 7.7%) i/s -      4.228M in   5.028187s

Comparison:
         String#gsub:  1970046.4 i/s
           String#tr:   846060.4 i/s - 2.33x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   192.963M i/100ms
         With Freeze   183.787M i/100ms
Calculating -------------------------------------
      Without Freeze      1.979B (± 4.3%) i/s -     10.034B in   5.080809s
         With Freeze      1.878B (± 4.8%) i/s -      9.373B in   5.000986s

Comparison:
      Without Freeze: 1978808663.7 i/s
         With Freeze: 1878478642.4 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.973k i/100ms
      String#squeeze    21.866k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     81.013k (±13.9%) i/s -    397.300k in   5.045774s
      String#squeeze    244.138k (± 5.1%) i/s -      1.224M in   5.029074s

Comparison:
      String#squeeze:   244138.2 i/s
 String#gsub/regex+/:    81013.3 i/s - 3.01x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.091M i/100ms
       String#match?     4.838M i/100ms
  String#start_with?     8.537M i/100ms
Calculating -------------------------------------
           String#=~     36.162M (± 8.3%) i/s -    180.007M in   5.016112s
       String#match?     46.523M (± 6.2%) i/s -    232.238M in   5.011173s
  String#start_with?     91.800M (± 5.3%) i/s -    460.988M in   5.035683s

Comparison:
  String#start_with?: 91800055.9 i/s
       String#match?: 46522668.9 i/s - 1.97x  (± 0.00) slower
           String#=~: 36161902.8 i/s - 2.54x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    81.091k i/100ms
    String#[0, n] ==   226.446k i/100ms
   String#[RANGE] ==   288.351k i/100ms
   String#[0...n] ==   200.487k i/100ms
Calculating -------------------------------------
  String#start_with?      3.712M (± 3.8%) i/s -     18.570M in   5.009257s
    String#[0, n] ==      2.220M (± 5.4%) i/s -     11.096M in   5.013715s
   String#[RANGE] ==      2.810M (± 4.8%) i/s -     14.129M in   5.039929s
   String#[0...n] ==      1.987M (± 7.2%) i/s -     10.024M in   5.073402s

Comparison:
  String#start_with?:  3712320.2 i/s
   String#[RANGE] ==:  2810154.0 i/s - 1.32x  (± 0.00) slower
    String#[0, n] ==:  2219824.2 i/s - 1.67x  (± 0.00) slower
   String#[0...n] ==:  1986800.7 i/s - 1.87x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     8.604M i/100ms
 String#sub!'string'    77.304k i/100ms
String#gsub!'string'   366.624k i/100ms
  String#[/regexp/]=     1.625M i/100ms
 String#sub!/regexp/   576.815k i/100ms
String#gsub!/regexp/   341.330k i/100ms
Calculating -------------------------------------
  String#['string']=     79.209M (± 6.5%) i/s -    395.802M in   5.018728s
 String#sub!'string'      5.802M (±23.5%) i/s -     25.974M in   4.998742s
String#gsub!'string'      4.486M (± 7.5%) i/s -     22.364M in   5.016538s
  String#[/regexp/]=     17.373M (± 6.0%) i/s -     87.766M in   5.071318s
 String#sub!/regexp/      6.532M (± 8.6%) i/s -     32.878M in   5.072954s
String#gsub!/regexp/      4.767M (± 6.4%) i/s -     23.893M in   5.033689s

Comparison:
  String#['string']=: 79209087.9 i/s
  String#[/regexp/]=: 17372979.7 i/s - 4.56x  (± 0.00) slower
 String#sub!/regexp/:  6531773.9 i/s - 12.13x  (± 0.00) slower
 String#sub!'string':  5802285.0 i/s - 13.65x  (± 0.00) slower
String#gsub!/regexp/:  4767466.4 i/s - 16.61x  (± 0.00) slower
String#gsub!'string':  4486114.9 i/s - 17.66x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub    77.491k i/100ms
        String#chomp     3.561M i/100ms
String#delete_suffix     7.233M i/100ms
Calculating -------------------------------------
          String#sub     19.261M (±10.1%) i/s -     94.617M in   4.996752s
        String#chomp     38.329M (± 3.5%) i/s -    192.311M in   5.023625s
String#delete_suffix     79.752M (±10.2%) i/s -    397.791M in   5.061685s

Comparison:
String#delete_suffix: 79751891.9 i/s
        String#chomp: 38329030.8 i/s - 2.08x  (± 0.00) slower
          String#sub: 19261145.8 i/s - 4.14x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   191.938M i/100ms
          String#sub    89.621k i/100ms
Calculating -------------------------------------
String#delete_prefix      1.812B (± 2.4%) i/s -      9.213B in   5.088186s
          String#sub    127.085M (±11.1%) i/s -    623.493M in   4.992677s

Comparison:
String#delete_prefix: 1811688254.4 i/s
          String#sub: 127084506.3 i/s - 14.26x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.055M i/100ms
    String#unpack[0]     1.254M i/100ms
Calculating -------------------------------------
      String#unpack1     12.403M (± 7.0%) i/s -     62.259M in   5.045064s
    String#unpack[0]     13.348M (± 5.5%) i/s -     67.711M in   5.088696s

Comparison:
    String#unpack[0]: 13347519.3 i/s
      String#unpack1: 12403410.3 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 23.0.0-dev-79587128, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    11.115k i/100ms
          Time.parse    44.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    221.263k (±19.2%) i/s -      1.034M in   5.043685s
          Time.parse      4.717k (±21.0%) i/s -     20.108k in   4.995564s

Comparison:
        Time.iso8601:   221263.3 i/s
          Time.parse:     4716.9 i/s - 46.91x  (± 0.00) slower

