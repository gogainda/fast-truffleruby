$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       237.953M i/100ms
Function with splat arguments
                       521.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          2.382B (± 0.6%) i/s -     12.136B in   5.094046s
Function with splat arguments
                          5.201k (± 8.4%) i/s -     26.050k in   5.071059s

Comparison:
Function with single Array argument: 2382384777.4 i/s
Function with splat arguments:     5201.4 i/s - 458026.08x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   238.134M i/100ms
Sequential Assignment
                       237.249M i/100ms
Calculating -------------------------------------
 Parallel Assignment      2.381B (± 0.4%) i/s -     11.907B in   5.000826s
Sequential Assignment
                          2.384B (± 0.3%) i/s -     12.100B in   5.075661s

Comparison:
Sequential Assignment: 2383895732.1 i/s
 Parallel Assignment: 2380977320.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   238.140M i/100ms
       attr_accessor   237.902M i/100ms
Calculating -------------------------------------
   getter_and_setter      2.382B (± 0.4%) i/s -     12.145B in   5.097869s
       attr_accessor      2.386B (± 0.3%) i/s -     12.133B in   5.086001s

Comparison:
       attr_accessor: 2385584818.7 i/s
   getter_and_setter: 2382422821.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     5.499k i/100ms
         respond_to?   238.325M i/100ms
Calculating -------------------------------------
      begin...rescue     37.338k (± 7.5%) i/s -    186.966k in   5.050443s
         respond_to?      2.385B (± 0.3%) i/s -     12.155B in   5.095810s

Comparison:
         respond_to?: 2385229297.3 i/s
      begin...rescue:    37338.0 i/s - 63882.11x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   238.180M i/100ms
             &method   237.777M i/100ms
Calculating -------------------------------------
              normal      2.384B (± 0.3%) i/s -     12.147B in   5.096177s
             &method      2.385B (± 0.3%) i/s -     12.127B in   5.085248s

Comparison:
             &method: 2384695790.5 i/s
              normal: 2383613430.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        74.000  i/100ms
       define_method    98.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.470k (±52.7%) i/s -      3.330k in   6.085101s
       define_method      2.417k (±56.8%) i/s -      4.312k in   6.326655s

Comparison:
       define_method:     2416.6 i/s
module_eval with string:     1470.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    71.890k i/100ms
       Kernel#format    57.836k i/100ms
            String#%    59.355k i/100ms
Calculating -------------------------------------
         Float#round    723.548k (± 3.8%) i/s -      3.666M in   5.075103s
       Kernel#format    600.765k (± 3.6%) i/s -      3.007M in   5.013314s
            String#%    613.580k (± 3.8%) i/s -      3.086M in   5.038010s

Comparison:
         Float#round:   723547.9 i/s
            String#%:   613579.9 i/s - 1.18x  (± 0.00) slower
       Kernel#format:   600765.0 i/s - 1.20x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   237.512M i/100ms
          OpenStruct   238.146M i/100ms
Calculating -------------------------------------
                Hash      2.380B (± 0.6%) i/s -     12.113B in   5.088817s
          OpenStruct      2.385B (± 0.3%) i/s -     12.145B in   5.092713s

Comparison:
          OpenStruct: 2384889513.0 i/s
                Hash: 2380430683.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   238.485M i/100ms
          OpenStruct     2.269k i/100ms
Calculating -------------------------------------
                Hash      2.379B (± 0.4%) i/s -     11.924B in   5.013028s
          OpenStruct     24.655k (±13.3%) i/s -    122.526k in   5.095329s

Comparison:
                Hash: 2378698746.7 i/s
          OpenStruct:    24655.2 i/s - 96478.41x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   564.541k i/100ms
  ancestors.include?   104.500k i/100ms
Calculating -------------------------------------
  less than or equal      6.808M (± 7.1%) i/s -     33.872M in   5.000925s
  ancestors.include?      1.086M (± 9.1%) i/s -      5.434M in   5.078195s

Comparison:
  less than or equal:  6808227.3 i/s
  ancestors.include?:  1085565.3 i/s - 6.27x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     23.811  (± 0.0%) i/s -    120.000  in   5.039945s
         Kernel loop     23.840  (± 0.0%) i/s -    120.000  in   5.033619s

Comparison:
         Kernel loop:       23.8 i/s
          While Loop:       23.8 i/s - 1.00x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   238.345M i/100ms
         Array#first   238.551M i/100ms
Calculating -------------------------------------
           Array#[0]      2.382B (± 0.4%) i/s -     11.917B in   5.002688s
         Array#first      2.386B (± 0.3%) i/s -     12.166B in   5.099590s

Comparison:
         Array#first: 2385717012.7 i/s
           Array#[0]: 2382206562.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   238.191M i/100ms
          Array#last   238.133M i/100ms
Calculating -------------------------------------
          Array#[-1]      2.382B (± 0.3%) i/s -     11.910B in   4.999130s
          Array#last      2.383B (± 0.5%) i/s -     12.145B in   5.096673s

Comparison:
          Array#last: 2382951823.7 i/s
          Array#[-1]: 2382349811.7 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   420.010k i/100ms
Calculating -------------------------------------
                find      0.165  (± 0.0%) i/s -      1.000  in   6.046181s
             bsearch      4.254M (± 5.0%) i/s -     21.421M in   5.048273s

Comparison:
             bsearch:  4254259.8 i/s
                find:        0.2 i/s - 25722023.22x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.124  (± 0.0%) i/s -      1.000  in   8.077155s
        Array#insert      0.941  (± 0.0%) i/s -      5.000  in   5.312199s

Comparison:
        Array#insert:        0.9 i/s
       Array#unshift:        0.1 i/s - 7.60x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   238.112M i/100ms
          Array#size   237.944M i/100ms
         Array#count   238.690M i/100ms
Calculating -------------------------------------
        Array#length      2.384B (± 0.3%) i/s -     12.144B in   5.094417s
          Array#size      2.385B (± 0.4%) i/s -     12.135B in   5.088252s
         Array#count      2.386B (± 0.3%) i/s -     11.935B in   5.001605s

Comparison:
         Array#count: 2386152141.9 i/s
          Array#size: 2384965781.3 i/s - same-ish: difference falls within error
        Array#length: 2383755727.4 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    23.031k i/100ms
        Array#sample     2.784M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    239.862k (± 3.0%) i/s -      1.198M in   4.998345s
        Array#sample     27.846M (± 0.1%) i/s -    141.979M in   5.098796s

Comparison:
        Array#sample: 27845689.4 i/s
 Array#shuffle.first:   239861.7 i/s - 116.09x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   313.000  i/100ms
          Date.parse   317.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     23.381k (±38.9%) i/s -     85.762k in   4.996310s
          Date.parse     14.007k (±28.6%) i/s -     55.475k in   4.996795s

Comparison:
        Date.iso8601:    23381.5 i/s
          Date.parse:    14007.0 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   109.107k i/100ms
           Array#map   384.546k i/100ms
Calculating -------------------------------------
   Array#each + push      1.089M (± 6.3%) i/s -      5.455M in   5.030012s
           Array#map      4.000M (± 6.3%) i/s -     19.996M in   5.020505s

Comparison:
           Array#map:  4000202.0 i/s
   Array#each + push:  1088953.1 i/s - 3.67x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     9.730M i/100ms
               #each    45.925M i/100ms
Calculating -------------------------------------
            For loop     99.247M (± 0.4%) i/s -    496.221M in   4.999943s
               #each    458.890M (± 0.3%) i/s -      2.296B in   5.003954s

Comparison:
               #each: 458890240.7 i/s
            For loop: 99247188.4 i/s - 4.62x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   904.707k i/100ms
     each_with_index   905.942k i/100ms
Calculating -------------------------------------
          While Loop      9.148M (± 0.3%) i/s -     46.140M in   5.043507s
     each_with_index      9.060M (± 0.2%) i/s -     46.203M in   5.099559s

Comparison:
          While Loop:  9148469.0 i/s
     each_with_index:  9060235.3 i/s - 1.01x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   145.346k i/100ms
      inject to_proc   147.038k i/100ms
        inject block   146.881k i/100ms
Calculating -------------------------------------
       inject symbol      1.469M (± 0.2%) i/s -      7.413M in   5.044983s
      inject to_proc      1.470M (± 0.1%) i/s -      7.352M in   5.001438s
        inject block      1.469M (± 0.2%) i/s -      7.344M in   5.000184s

Comparison:
      inject to_proc:  1469960.0 i/s
       inject symbol:  1469318.1 i/s - same-ish: difference falls within error
        inject block:  1468760.2 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     7.787k i/100ms
   Array#map.flatten     8.167k i/100ms
      Array#flat_map    24.633k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     77.982k (± 5.2%) i/s -    389.350k in   5.006537s
   Array#map.flatten     80.032k (± 4.4%) i/s -    400.183k in   5.010382s
      Array#flat_map    246.255k (± 4.4%) i/s -      1.232M in   5.011975s

Comparison:
      Array#flat_map:   246255.3 i/s
   Array#map.flatten:    80031.8 i/s - 3.08x  (± 0.00) slower
Array#map.flatten(1):    77982.3 i/s - 3.16x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   146.762k i/100ms
  Array#reverse_each     1.944M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.644M (± 4.5%) i/s -      8.219M in   5.009602s
  Array#reverse_each     19.356M (± 0.4%) i/s -     97.177M in   5.020671s

Comparison:
  Array#reverse_each: 19355715.6 i/s
  Array#reverse.each:  1644195.6 i/s - 11.77x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       430.126k i/100ms
   Enumerable#detect     4.031M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          4.234M (± 8.6%) i/s -     83.875M in  20.070915s
   Enumerable#detect     40.315M (± 0.2%) i/s -    810.182M in  20.096259s

Comparison:
   Enumerable#detect: 40315270.0 i/s
Enumerable#select.first:  4233669.2 i/s - 9.52x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       145.543k i/100ms
Enumerable#select.last
                       339.478k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.619M (± 5.6%) i/s -      8.150M in   5.050490s
Enumerable#select.last
                          3.470M (± 4.5%) i/s -     17.653M in   5.097480s

Comparison:
Enumerable#select.last:  3470330.0 i/s
Enumerable#reverse.detect:  1618899.2 i/s - 2.14x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.081k i/100ms
  Enumerable#sort_by     2.376k i/100ms
     Enumerable#sort     3.232k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         22.377k (±18.7%) i/s -    104.050k in   5.067107s
  Enumerable#sort_by     14.024k (±26.5%) i/s -     64.152k in   5.037998s
     Enumerable#sort     34.228k (± 3.0%) i/s -    171.296k in   5.010213s

Comparison:
     Enumerable#sort:    34227.7 i/s
Enumerable#sort_by (Symbol#to_proc):    22377.0 i/s - 1.53x  (± 0.00) slower
  Enumerable#sort_by:    14024.0 i/s - 2.44x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   495.209k i/100ms
Enumerable#sort_by...first
                         3.844k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      5.006M (± 0.3%) i/s -     25.256M in   5.045052s
Enumerable#sort_by...first
                         48.915k (± 4.3%) i/s -    246.016k in   5.039837s

Comparison:
   Enumerable#min_by:  5006074.8 i/s
Enumerable#sort_by...first:    48914.5 i/s - 102.34x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   116.599k i/100ms
            Hash#dup   137.362k i/100ms
Calculating -------------------------------------
              Hash[]      1.317M (± 5.2%) i/s -      6.646M in   5.059477s
            Hash#dup      1.375M (± 3.6%) i/s -      6.868M in   5.000309s

Comparison:
            Hash#dup:  1375423.9 i/s
              Hash[]:  1317232.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   238.775M i/100ms
  Hash#fetch, symbol   238.415M i/100ms
     Hash#[], string     2.102M i/100ms
  Hash#fetch, string     2.166M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      2.384B (± 0.3%) i/s -     11.939B in   5.007477s
  Hash#fetch, symbol      2.387B (± 0.1%) i/s -     12.159B in   5.092905s
     Hash#[], string    156.797M (± 0.6%) i/s -    784.168M in   5.001402s
  Hash#fetch, string    165.544M (± 0.6%) i/s -    829.393M in   5.010344s

Comparison:
  Hash#fetch, symbol: 2387472792.4 i/s
     Hash#[], symbol: 2384216734.2 i/s - same-ish: difference falls within error
  Hash#fetch, string: 165543504.6 i/s - 14.42x  (± 0.00) slower
     Hash#[], string: 156796613.8 i/s - 15.23x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    49.657M i/100ms
             Hash#[]    49.640M i/100ms
          Hash#[] ||    49.739M i/100ms
          Hash#[] &&    49.693M i/100ms
          Hash#fetch    49.772M i/100ms
 Hash#fetch fallback    49.761M i/100ms
Calculating -------------------------------------
            Hash#dig    496.882M (± 0.2%) i/s -      2.533B in   5.096820s
             Hash#[]    497.252M (± 0.2%) i/s -      2.532B in   5.091319s
          Hash#[] ||    496.941M (± 0.3%) i/s -      2.487B in   5.004558s
          Hash#[] &&    496.804M (± 0.3%) i/s -      2.485B in   5.001348s
          Hash#fetch    496.882M (± 0.4%) i/s -      2.489B in   5.008582s
 Hash#fetch fallback    497.262M (± 0.1%) i/s -      2.488B in   5.003549s

Comparison:
 Hash#fetch fallback: 497262230.4 i/s
             Hash#[]: 497251624.3 i/s - same-ish: difference falls within error
          Hash#[] ||: 496941497.2 i/s - same-ish: difference falls within error
            Hash#dig: 496882176.9 i/s - same-ish: difference falls within error
          Hash#fetch: 496881506.6 i/s - same-ish: difference falls within error
          Hash#[] &&: 496803824.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   237.664M i/100ms
  Hash#fetch + block   238.041M i/100ms
    Hash#fetch + arg   238.730M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      2.384B (± 0.3%) i/s -     12.121B in   5.084886s
  Hash#fetch + block      2.386B (± 0.3%) i/s -     12.140B in   5.088706s
    Hash#fetch + arg      2.385B (± 0.2%) i/s -     11.937B in   5.003825s

Comparison:
  Hash#fetch + block: 2385718407.4 i/s
    Hash#fetch + arg: 2385489996.7 i/s - same-ish: difference falls within error
  Hash#fetch + const: 2383729150.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    13.434k i/100ms
         sort + to_h     2.770k i/100ms
Calculating -------------------------------------
      sort_by + to_h    228.057k (± 6.0%) i/s -      1.142M in   5.027073s
         sort + to_h     82.383k (±11.4%) i/s -    401.650k in   5.018539s

Comparison:
      sort_by + to_h:   228057.3 i/s
         sort + to_h:    82383.2 i/s - 2.77x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   114.514k i/100ms
       Hash#each_key   133.665k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.222M (±11.4%) i/s -      5.955M in   5.026705s
       Hash#each_key      1.345M (± 3.4%) i/s -      6.817M in   5.074770s

Comparison:
       Hash#each_key:  1344947.9 i/s
      Hash#keys.each:  1221595.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   184.000  i/100ms
           Hash#key?     2.298M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      2.092k (±13.2%) i/s -     10.304k in   5.062081s
           Hash#key?     23.723M (± 0.1%) i/s -    119.490M in   5.036819s

Comparison:
           Hash#key?: 23723400.8 i/s
  Hash#keys.include?:     2091.7 i/s - 11341.65x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    13.178k i/100ms
            Hash#[]=    14.846k i/100ms
Calculating -------------------------------------
         Hash#merge!    152.812k (± 5.9%) i/s -    764.324k in   5.019027s
            Hash#[]=    151.345k (± 4.8%) i/s -    757.146k in   5.014145s

Comparison:
         Hash#merge!:   152811.5 i/s
            Hash#[]=:   151345.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         6.717k i/100ms
      Hash#merge({})     5.277k i/100ms
 Hash#dup#merge!({})     9.331k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         87.112k (± 6.2%) i/s -    436.605k in   5.032618s
      Hash#merge({})     55.462k (± 6.0%) i/s -    279.681k in   5.061881s
 Hash#dup#merge!({})     98.692k (± 4.9%) i/s -    494.543k in   5.024070s

Comparison:
 Hash#dup#merge!({}):    98691.8 i/s
{}#merge!(Hash) do end:    87112.1 i/s - 1.13x  (± 0.00) slower
      Hash#merge({}):    55462.5 i/s - 1.78x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   237.616M i/100ms
          Hash#merge   238.696M i/100ms
Calculating -------------------------------------
        Hash#**other      2.385B (± 0.3%) i/s -     12.118B in   5.081839s
          Hash#merge      2.385B (± 0.3%) i/s -     11.935B in   5.003975s

Comparison:
          Hash#merge: 2385081185.6 i/s
        Hash#**other: 2384676434.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   142.000  i/100ms
         Hash#merge!    14.689k i/100ms
Calculating -------------------------------------
          Hash#merge      2.120k (±10.1%) i/s -     10.508k in   5.056754s
         Hash#merge!    153.925k (± 6.4%) i/s -    778.517k in   5.077804s

Comparison:
         Hash#merge!:   153924.7 i/s
          Hash#merge:     2119.8 i/s - 72.61x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.012M i/100ms
Array#each             901.729k i/100ms
Array#each_w/_object   893.840k i/100ms
Hash#select-include      1.295M i/100ms
Calculating -------------------------------------
Hash#native-slice        10.087M (± 5.6%) i/s -     50.587M in   5.031291s
Array#each                9.216M (± 3.7%) i/s -     46.890M in   5.095551s
Array#each_w/_object      9.016M (± 6.3%) i/s -     45.586M in   5.077000s
Hash#select-include      13.221M (± 5.5%) i/s -     66.067M in   5.012829s

Comparison:
Hash#select-include : 13221254.5 i/s
Hash#native-slice   : 10087482.8 i/s - 1.31x  (± 0.00) slower
Array#each          :  9215745.0 i/s - 1.43x  (± 0.00) slower
Array#each_w/_object:  9015826.7 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   168.000  i/100ms
         Hash#value?   814.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.771k (±11.2%) i/s -      8.736k in   5.027244s
         Hash#value?      7.954k (± 0.4%) i/s -     39.886k in   5.014367s

Comparison:
         Hash#value?:     7954.5 i/s
Hash#values.include?:     1771.4 i/s - 4.49x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   238.429M i/100ms
                send   237.831M i/100ms
      method_missing   238.709M i/100ms
Calculating -------------------------------------
                call      2.380B (± 0.8%) i/s -     11.921B in   5.010194s
                send      2.384B (± 0.4%) i/s -     12.129B in   5.086915s
      method_missing      2.385B (± 0.3%) i/s -     11.935B in   5.004220s

Comparison:
      method_missing: 2385101156.1 i/s
                send: 2384461095.3 i/s - same-ish: difference falls within error
                call: 2379589047.1 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block     9.742k i/100ms
      Symbol#to_proc    10.197k i/100ms
Calculating -------------------------------------
               Block    103.799k (± 4.1%) i/s -    526.068k in   5.076981s
      Symbol#to_proc    103.468k (± 3.3%) i/s -    520.047k in   5.032083s

Comparison:
               Block:   103799.0 i/s
      Symbol#to_proc:   103468.0 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   237.998M i/100ms
       block + yield   237.901M i/100ms
        unused block   238.779M i/100ms
               yield   238.680M i/100ms
Calculating -------------------------------------
          block.call      2.384B (± 0.3%) i/s -     12.138B in   5.090487s
       block + yield      2.386B (± 0.3%) i/s -     12.133B in   5.085322s
        unused block      2.385B (± 0.3%) i/s -     11.939B in   5.005158s
               yield      2.386B (± 0.2%) i/s -     11.934B in   5.002312s

Comparison:
       block + yield: 2385892666.8 i/s
               yield: 2385711195.9 i/s - same-ish: difference falls within error
        unused block: 2385348849.0 i/s - same-ish: difference falls within error
          block.call: 2384449264.0 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     7.931k i/100ms
      range#include?   316.000  i/100ms
       range#member?   478.000  i/100ms
       plain compare    19.230k i/100ms
Calculating -------------------------------------
        range#cover?    100.864k (±19.1%) i/s -    483.791k in   5.024279s
      range#include?      8.191k (±25.9%) i/s -     34.760k in   5.008211s
       range#member?      6.519k (±32.0%) i/s -     28.680k in   5.034510s
       plain compare    303.574k (± 9.2%) i/s -      1.519M in   5.058476s

Comparison:
       plain compare:   303573.5 i/s
        range#cover?:   100864.4 i/s - 3.01x  (± 0.00) slower
      range#include?:     8191.5 i/s - 37.06x  (± 0.00) slower
       range#member?:     6518.8 i/s - 46.57x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    13.427M i/100ms
           String#=~    11.482M i/100ms
          Regexp#===    11.485M i/100ms
        String#match    11.034M i/100ms
Calculating -------------------------------------
       String#match?    135.568M (± 0.2%) i/s -    684.787M in   5.051263s
           String#=~    114.771M (± 0.2%) i/s -    574.100M in   5.002132s
          Regexp#===    114.756M (± 0.1%) i/s -    574.268M in   5.004274s
        String#match    110.658M (± 0.5%) i/s -    562.759M in   5.085657s

Comparison:
       String#match?: 135568242.6 i/s
           String#=~: 114771441.2 i/s - 1.18x  (± 0.00) slower
          Regexp#===: 114755841.3 i/s - 1.18x  (± 0.00) slower
        String#match: 110658476.2 i/s - 1.23x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   967.662k i/100ms
      String#casecmp     1.791M i/100ms
Calculating -------------------------------------
String#downcase + ==     11.145M (± 5.0%) i/s -     56.124M in   5.048501s
      String#casecmp     18.474M (± 3.7%) i/s -     93.145M in   5.049315s

Comparison:
      String#casecmp: 18474147.5 i/s
String#downcase + ==: 11145266.6 i/s - 1.66x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     6.234M i/100ms
       String#concat     6.273M i/100ms
       String#append     6.775M i/100ms
         "foo" "bar"   238.713M i/100ms
  "#{'foo'}#{'bar'}"   238.672M i/100ms
Calculating -------------------------------------
            String#+     65.922M (± 7.8%) i/s -    330.401M in   5.044698s
       String#concat     67.569M (± 6.0%) i/s -    338.744M in   5.032450s
       String#append     67.707M (± 6.3%) i/s -    338.739M in   5.023257s
         "foo" "bar"      2.387B (± 0.2%) i/s -     11.936B in   5.000742s
  "#{'foo'}#{'bar'}"      2.386B (± 0.3%) i/s -     11.934B in   5.002263s

Comparison:
         "foo" "bar": 2386786728.3 i/s
  "#{'foo'}#{'bar'}": 2385658960.3 i/s - same-ish: difference falls within error
       String#append: 67706953.3 i/s - 35.25x  (± 0.00) slower
       String#concat: 67569496.9 i/s - 35.32x  (± 0.00) slower
            String#+: 65922243.4 i/s - 36.21x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   238.359M i/100ms
          String#dup   237.649M i/100ms
Calculating -------------------------------------
           String#+@      2.383B (± 0.4%) i/s -     11.918B in   5.000592s
          String#dup      2.384B (± 0.3%) i/s -     12.120B in   5.083269s

Comparison:
          String#dup: 2384343021.0 i/s
           String#+@: 2383344370.0 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   877.426k i/100ms
       String#match?   781.867k i/100ms
    String#end_with?    12.954M i/100ms
Calculating -------------------------------------
           String#=~      8.515M (± 4.8%) i/s -     42.994M in   5.061996s
       String#match?     10.322M (± 1.0%) i/s -     51.603M in   4.999611s
    String#end_with?    129.431M (± 0.3%) i/s -    647.684M in   5.004118s

Comparison:
    String#end_with?: 129431020.4 i/s
       String#match?: 10322356.3 i/s - 12.54x  (± 0.00) slower
           String#=~:  8514571.9 i/s - 15.20x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    34.380k i/100ms
          String#sub    83.808k i/100ms
String#dup["string"]=
                         9.026M i/100ms
Calculating -------------------------------------
         String#gsub      2.343M (±15.4%) i/s -     11.174M in   5.007021s
          String#sub      3.401M (±16.5%) i/s -     16.175M in   4.996536s
String#dup["string"]=
                         90.091M (± 0.4%) i/s -    451.276M in   5.009180s

Comparison:
String#dup["string"]=: 90091492.7 i/s
          String#sub:  3400828.9 i/s - 26.49x  (± 0.00) slower
         String#gsub:  2342751.4 i/s - 38.46x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    20.575k i/100ms
           String#tr    56.125k i/100ms
Calculating -------------------------------------
         String#gsub      1.218M (±15.6%) i/s -      5.802M in   5.005466s
           String#tr    627.407k (± 6.4%) i/s -      3.143M in   5.031917s

Comparison:
         String#gsub:  1218147.2 i/s
           String#tr:   627407.1 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   238.004M i/100ms
         With Freeze   238.303M i/100ms
Calculating -------------------------------------
      Without Freeze      2.383B (± 0.3%) i/s -     12.138B in   5.093268s
         With Freeze      2.386B (± 0.2%) i/s -     12.153B in   5.094128s

Comparison:
         With Freeze: 2385785725.1 i/s
      Without Freeze: 2383216108.5 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     1.384k i/100ms
      String#squeeze    19.972k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     39.087k (±11.3%) i/s -    190.992k in   5.023167s
      String#squeeze    208.185k (± 3.5%) i/s -      1.059M in   5.091650s

Comparison:
      String#squeeze:   208185.5 i/s
 String#gsub/regex+/:    39087.5 i/s - 5.33x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.040M i/100ms
       String#match?     1.964M i/100ms
  String#start_with?    10.664M i/100ms
Calculating -------------------------------------
           String#=~     26.807M (± 6.2%) i/s -    134.146M in   5.029940s
       String#match?     41.117M (± 0.9%) i/s -    206.232M in   5.016093s
  String#start_with?    106.499M (± 0.3%) i/s -    533.177M in   5.006415s

Comparison:
  String#start_with?: 106499423.3 i/s
       String#match?: 41117302.7 i/s - 2.59x  (± 0.00) slower
           String#=~: 26807312.1 i/s - 3.97x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    75.134k i/100ms
    String#[0, n] ==   172.876k i/100ms
   String#[RANGE] ==   237.182k i/100ms
   String#[0...n] ==   162.605k i/100ms
Calculating -------------------------------------
  String#start_with?      4.563M (± 0.4%) i/s -     22.841M in   5.006110s
    String#[0, n] ==      1.679M (± 3.7%) i/s -      8.471M in   5.053050s
   String#[RANGE] ==      2.561M (± 5.3%) i/s -     12.808M in   5.015287s
   String#[0...n] ==      1.611M (± 3.7%) i/s -      8.130M in   5.054569s

Comparison:
  String#start_with?:  4562646.9 i/s
   String#[RANGE] ==:  2561058.6 i/s - 1.78x  (± 0.00) slower
    String#[0, n] ==:  1678802.9 i/s - 2.72x  (± 0.00) slower
   String#[0...n] ==:  1610803.5 i/s - 2.83x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     9.001M i/100ms
 String#sub!'string'    40.398k i/100ms
String#gsub!'string'   271.669k i/100ms
  String#[/regexp/]=   991.012k i/100ms
 String#sub!/regexp/   360.226k i/100ms
String#gsub!/regexp/   289.101k i/100ms
Calculating -------------------------------------
  String#['string']=     90.278M (± 0.2%) i/s -    459.066M in   5.085036s
 String#sub!'string'      3.459M (±23.7%) i/s -     15.472M in   5.000424s
String#gsub!'string'      2.975M (± 8.2%) i/s -     14.942M in   5.061211s
  String#[/regexp/]=     10.574M (± 4.1%) i/s -     53.515M in   5.070579s
 String#sub!/regexp/      3.330M (± 6.0%) i/s -     16.931M in   5.104189s
String#gsub!/regexp/      3.323M (± 6.5%) i/s -     16.768M in   5.070410s

Comparison:
  String#['string']=: 90278109.4 i/s
  String#[/regexp/]=: 10574152.1 i/s - 8.54x  (± 0.00) slower
 String#sub!'string':  3458658.5 i/s - 26.10x  (± 0.00) slower
 String#sub!/regexp/:  3329915.8 i/s - 27.11x  (± 0.00) slower
String#gsub!/regexp/:  3322619.9 i/s - 27.17x  (± 0.00) slower
String#gsub!'string':  2974731.6 i/s - 30.35x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub    37.023k i/100ms
        String#chomp     4.319M i/100ms
String#delete_suffix     2.799M i/100ms
Calculating -------------------------------------
          String#sub     14.700M (± 8.0%) i/s -     72.010M in   4.998216s
        String#chomp     43.188M (± 0.5%) i/s -    215.964M in   5.000639s
String#delete_suffix     29.918M (± 4.0%) i/s -    151.130M in   5.059941s

Comparison:
        String#chomp: 43188225.9 i/s
String#delete_suffix: 29917888.3 i/s - 1.44x  (± 0.00) slower
          String#sub: 14700118.7 i/s - 2.94x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   238.230M i/100ms
          String#sub    40.968k i/100ms
Calculating -------------------------------------
String#delete_prefix      2.384B (± 0.3%) i/s -     12.150B in   5.096006s
          String#sub    123.888M (± 1.2%) i/s -    618.002M in   4.989192s

Comparison:
String#delete_prefix: 2384189120.7 i/s
          String#sub: 123887553.9 i/s - 19.24x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.025M i/100ms
    String#unpack[0]     1.225M i/100ms
Calculating -------------------------------------
      String#unpack1     12.417M (± 5.3%) i/s -     62.513M in   5.048875s
    String#unpack[0]     12.478M (± 3.9%) i/s -     62.473M in   5.015172s

Comparison:
    String#unpack[0]: 12477965.3 i/s
      String#unpack1: 12417112.5 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 23.1.0-dev-7e5e57df, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    10.620k i/100ms
          Time.parse    43.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    212.334k (±11.6%) i/s -      1.030M in   4.998498s
          Time.parse      5.858k (±27.0%) i/s -     21.672k in   5.005858s

Comparison:
        Time.iso8601:   212333.8 i/s
          Time.parse:     5858.2 i/s - 36.25x  (± 0.00) slower

