$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       238.116M i/100ms
Function with splat arguments
                       802.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          2.388B (± 0.2%) i/s -     12.144B in   5.084721s
Function with splat arguments
                          8.239k (± 6.5%) i/s -     41.704k in   5.094721s

Comparison:
Function with single Array argument: 2388327716.5 i/s
Function with splat arguments:     8238.8 i/s - 289888.98x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   238.351M i/100ms
Sequential Assignment
                       238.647M i/100ms
Calculating -------------------------------------
 Parallel Assignment      2.385B (± 0.5%) i/s -     12.156B in   5.097557s
Sequential Assignment
                          2.389B (± 0.2%) i/s -     12.171B in   5.094715s

Comparison:
Sequential Assignment: 2388960885.0 i/s
 Parallel Assignment: 2384700841.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   238.669M i/100ms
       attr_accessor   238.568M i/100ms
Calculating -------------------------------------
   getter_and_setter      2.387B (± 0.3%) i/s -     12.172B in   5.098432s
       attr_accessor      2.388B (± 0.4%) i/s -     12.167B in   5.095603s

Comparison:
       attr_accessor: 2387772867.0 i/s
   getter_and_setter: 2387444408.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     8.054k i/100ms
         respond_to?   238.558M i/100ms
Calculating -------------------------------------
      begin...rescue     54.691k (± 2.0%) i/s -    273.836k in   5.008984s
         respond_to?      2.389B (± 0.2%) i/s -     12.166B in   5.092184s

Comparison:
         respond_to?: 2389255249.6 i/s
      begin...rescue:    54691.0 i/s - 43686.47x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   238.258M i/100ms
             &method   238.556M i/100ms
Calculating -------------------------------------
              normal      2.387B (± 0.3%) i/s -     12.151B in   5.090798s
             &method      2.386B (± 0.8%) i/s -     11.928B in   4.999894s

Comparison:
              normal: 2386913628.6 i/s
             &method: 2385768059.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       110.000  i/100ms
       define_method   138.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.917k (±51.4%) i/s -      5.390k in   5.027509s
       define_method      4.042k (±56.1%) i/s -      6.900k in   6.311014s

Comparison:
       define_method:     4042.0 i/s
module_eval with string:     1917.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    77.128k i/100ms
       Kernel#format    69.071k i/100ms
            String#%    68.560k i/100ms
Calculating -------------------------------------
         Float#round    831.595k (± 2.3%) i/s -      4.165M in   5.010948s
       Kernel#format    691.559k (± 2.0%) i/s -      3.523M in   5.095846s
            String#%    692.072k (± 1.9%) i/s -      3.497M in   5.054278s

Comparison:
         Float#round:   831594.8 i/s
            String#%:   692072.0 i/s - 1.20x  (± 0.00) slower
       Kernel#format:   691558.9 i/s - 1.20x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   219.215M i/100ms
          OpenStruct   238.763M i/100ms
Calculating -------------------------------------
                Hash      2.387B (± 0.3%) i/s -     12.057B in   5.050468s
          OpenStruct      2.389B (± 0.2%) i/s -     12.177B in   5.096402s

Comparison:
          OpenStruct: 2389326091.1 i/s
                Hash: 2387294265.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   237.884M i/100ms
          OpenStruct     2.864k i/100ms
Calculating -------------------------------------
                Hash      2.383B (± 0.4%) i/s -     12.132B in   5.091716s
          OpenStruct     29.565k (±10.3%) i/s -    146.064k in   5.010793s

Comparison:
                Hash: 2382753145.5 i/s
          OpenStruct:    29565.4 i/s - 80592.75x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   843.496k i/100ms
  ancestors.include?   154.318k i/100ms
Calculating -------------------------------------
  less than or equal      9.121M (± 4.0%) i/s -     45.549M in   5.002671s
  ancestors.include?      1.479M (± 7.3%) i/s -      7.407M in   5.048155s

Comparison:
  less than or equal:  9120807.8 i/s
  ancestors.include?:  1479038.7 i/s - 6.17x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     23.880  (± 0.0%) i/s -    120.000  in   5.025150s
         Kernel loop     23.884  (± 0.0%) i/s -    120.000  in   5.024437s

Comparison:
         Kernel loop:       23.9 i/s
          While Loop:       23.9 i/s - 1.00x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   238.424M i/100ms
         Array#first   238.819M i/100ms
Calculating -------------------------------------
           Array#[0]      2.387B (± 0.3%) i/s -     12.160B in   5.094111s
         Array#first      2.388B (± 0.3%) i/s -     12.180B in   5.099411s

Comparison:
         Array#first: 2388482415.2 i/s
           Array#[0]: 2387019064.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   238.814M i/100ms
          Array#last   238.655M i/100ms
Calculating -------------------------------------
          Array#[-1]      2.386B (± 0.4%) i/s -     11.941B in   5.004285s
          Array#last      2.385B (± 1.2%) i/s -     11.933B in   5.003465s

Comparison:
          Array#[-1]: 2386127298.0 i/s
          Array#last: 2385244732.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   571.153k i/100ms
Calculating -------------------------------------
                find      7.156  (±27.9%) i/s -     17.000  in   5.090763s
             bsearch      5.682M (± 3.6%) i/s -     28.558M in   5.033162s

Comparison:
             bsearch:  5681578.8 i/s
                find:        7.2 i/s - 793912.65x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.125  (± 0.0%) i/s -      1.000  in   8.010030s
        Array#insert      0.946  (± 0.0%) i/s -      5.000  in   5.287768s

Comparison:
        Array#insert:        0.9 i/s
       Array#unshift:        0.1 i/s - 7.57x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   238.535M i/100ms
          Array#size   238.754M i/100ms
         Array#count   239.123M i/100ms
Calculating -------------------------------------
        Array#length      2.387B (± 0.3%) i/s -     12.165B in   5.096775s
          Array#size      2.388B (± 0.3%) i/s -     12.176B in   5.098800s
         Array#count      2.389B (± 0.2%) i/s -     11.956B in   5.005014s

Comparison:
         Array#count: 2388850323.3 i/s
          Array#size: 2388120146.5 i/s - same-ish: difference falls within error
        Array#length: 2386879959.4 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    22.691k i/100ms
        Array#sample     2.783M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    258.519k (± 2.1%) i/s -      1.293M in   5.005367s
        Array#sample     28.037M (± 0.4%) i/s -    141.944M in   5.062846s

Comparison:
        Array#sample: 28037001.6 i/s
 Array#shuffle.first:   258519.4 i/s - 108.45x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601     1.167k i/100ms
          Date.parse   752.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     47.343k (±33.5%) i/s -    191.388k in   5.007449s
          Date.parse     15.236k (±23.3%) i/s -     69.184k in   5.008909s

Comparison:
        Date.iso8601:    47343.5 i/s
          Date.parse:    15235.6 i/s - 3.11x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   139.587k i/100ms
           Array#map   543.498k i/100ms
Calculating -------------------------------------
   Array#each + push      1.564M (± 4.6%) i/s -      7.817M in   5.008765s
           Array#map      5.958M (± 6.1%) i/s -     29.892M in   5.035657s

Comparison:
           Array#map:  5958255.1 i/s
   Array#each + push:  1564019.3 i/s - 3.81x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     9.816M i/100ms
               #each    45.928M i/100ms
Calculating -------------------------------------
            For loop     99.399M (± 0.4%) i/s -    500.595M in   5.036301s
               #each    459.417M (± 0.2%) i/s -      2.342B in   5.098481s

Comparison:
               #each: 459416677.2 i/s
            For loop: 99399189.9 i/s - 4.62x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   909.394k i/100ms
     each_with_index     1.290M i/100ms
Calculating -------------------------------------
          While Loop      9.159M (± 0.2%) i/s -     46.379M in   5.063667s
     each_with_index     12.677M (± 0.1%) i/s -     64.513M in   5.088876s

Comparison:
     each_with_index: 12677296.5 i/s
          While Loop:  9159241.8 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   145.753k i/100ms
      inject to_proc   147.243k i/100ms
        inject block   147.230k i/100ms
Calculating -------------------------------------
       inject symbol      1.471M (± 0.2%) i/s -      7.433M in   5.051658s
      inject to_proc      1.472M (± 0.1%) i/s -      7.362M in   5.001489s
        inject block      1.472M (± 0.1%) i/s -      7.362M in   5.001912s

Comparison:
      inject to_proc:  1471993.5 i/s
        inject block:  1471739.8 i/s - same-ish: difference falls within error
       inject symbol:  1471484.2 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    10.999k i/100ms
   Array#map.flatten    11.758k i/100ms
      Array#flat_map    31.372k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    118.676k (± 6.5%) i/s -    593.946k in   5.039846s
   Array#map.flatten    122.542k (± 2.8%) i/s -    623.174k in   5.089324s
      Array#flat_map    314.223k (± 3.2%) i/s -      1.600M in   5.097197s

Comparison:
      Array#flat_map:   314223.5 i/s
   Array#map.flatten:   122542.2 i/s - 2.56x  (± 0.00) slower
Array#map.flatten(1):   118676.2 i/s - 2.65x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   194.814k i/100ms
  Array#reverse_each     1.946M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.928M (± 2.6%) i/s -      9.741M in   5.057037s
  Array#reverse_each     19.278M (± 0.8%) i/s -     97.320M in   5.048506s

Comparison:
  Array#reverse_each: 19278428.7 i/s
  Array#reverse.each:  1927506.7 i/s - 10.00x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       599.444k i/100ms
   Enumerable#detect     3.736M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          6.517M (± 7.3%) i/s -    129.480M in  20.028125s
   Enumerable#detect     37.351M (± 0.1%) i/s -    747.270M in  20.006959s

Comparison:
   Enumerable#detect: 37350587.1 i/s
Enumerable#select.first:  6517136.7 i/s - 5.73x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       192.461k i/100ms
Enumerable#select.last
                       398.170k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.948M (± 2.3%) i/s -      9.816M in   5.041164s
Enumerable#select.last
                          3.873M (± 6.2%) i/s -     19.510M in   5.067326s

Comparison:
Enumerable#select.last:  3873420.9 i/s
Enumerable#reverse.detect:  1948137.1 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.628k i/100ms
  Enumerable#sort_by     1.116k i/100ms
     Enumerable#sort     3.710k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         28.016k (± 9.6%) i/s -    139.284k in   5.047102s
  Enumerable#sort_by     24.654k (±30.7%) i/s -    101.556k in   4.999070s
     Enumerable#sort     40.078k (± 1.6%) i/s -    200.340k in   5.000163s

Comparison:
     Enumerable#sort:    40078.4 i/s
Enumerable#sort_by (Symbol#to_proc):    28016.2 i/s - 1.43x  (± 0.00) slower
  Enumerable#sort_by:    24653.6 i/s - 1.63x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   521.569k i/100ms
Enumerable#sort_by...first
                         5.336k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      5.238M (± 0.4%) i/s -     26.600M in   5.078356s
Enumerable#sort_by...first
                         62.073k (± 2.7%) i/s -    314.824k in   5.075582s

Comparison:
   Enumerable#min_by:  5238025.8 i/s
Enumerable#sort_by...first:    62072.9 i/s - 84.39x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   201.047k i/100ms
            Hash#dup   210.476k i/100ms
Calculating -------------------------------------
              Hash[]      2.280M (± 6.9%) i/s -     11.460M in   5.064186s
            Hash#dup      2.248M (± 3.7%) i/s -     11.366M in   5.063083s

Comparison:
              Hash[]:  2279712.5 i/s
            Hash#dup:  2247938.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   238.272M i/100ms
  Hash#fetch, symbol   238.610M i/100ms
     Hash#[], string     2.737M i/100ms
  Hash#fetch, string     2.705M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      2.384B (± 1.3%) i/s -     12.152B in   5.097724s
  Hash#fetch, symbol      2.390B (± 0.2%) i/s -     12.169B in   5.091774s
     Hash#[], string    157.063M (± 0.6%) i/s -    785.521M in   5.001474s
  Hash#fetch, string    165.825M (± 0.5%) i/s -    830.557M in   5.008734s

Comparison:
  Hash#fetch, symbol: 2389966460.9 i/s
     Hash#[], symbol: 2384249683.9 i/s - same-ish: difference falls within error
  Hash#fetch, string: 165825243.8 i/s - 14.41x  (± 0.00) slower
     Hash#[], string: 157063046.9 i/s - 15.22x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    49.748M i/100ms
             Hash#[]    49.816M i/100ms
          Hash#[] ||    49.778M i/100ms
          Hash#[] &&    49.817M i/100ms
          Hash#fetch    49.816M i/100ms
 Hash#fetch fallback    49.818M i/100ms
Calculating -------------------------------------
            Hash#dig    497.615M (± 0.2%) i/s -      2.537B in   5.098663s
             Hash#[]    497.810M (± 0.2%) i/s -      2.491B in   5.003508s
          Hash#[] ||    497.881M (± 0.2%) i/s -      2.539B in   5.098939s
          Hash#[] &&    497.813M (± 0.2%) i/s -      2.491B in   5.003581s
          Hash#fetch    497.969M (± 0.2%) i/s -      2.491B in   5.001931s
 Hash#fetch fallback    497.844M (± 0.2%) i/s -      2.491B in   5.003412s

Comparison:
          Hash#fetch: 497969342.5 i/s
          Hash#[] ||: 497881200.6 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 497844049.7 i/s - same-ish: difference falls within error
          Hash#[] &&: 497812595.5 i/s - same-ish: difference falls within error
             Hash#[]: 497810030.9 i/s - same-ish: difference falls within error
            Hash#dig: 497615133.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   238.487M i/100ms
  Hash#fetch + block   238.711M i/100ms
    Hash#fetch + arg   239.014M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      2.387B (± 0.3%) i/s -     12.163B in   5.095118s
  Hash#fetch + block      2.389B (± 0.2%) i/s -     12.174B in   5.096992s
    Hash#fetch + arg      2.389B (± 0.2%) i/s -     11.951B in   5.001835s

Comparison:
    Hash#fetch + arg: 2389272793.2 i/s
  Hash#fetch + block: 2388533623.2 i/s - same-ish: difference falls within error
  Hash#fetch + const: 2387183759.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    18.838k i/100ms
         sort + to_h   324.000  i/100ms
Calculating -------------------------------------
      sort_by + to_h    308.516k (± 5.2%) i/s -      1.545M in   5.022871s
         sort + to_h    109.728k (± 9.0%) i/s -    537.840k in   4.994390s

Comparison:
      sort_by + to_h:   308516.5 i/s
         sort + to_h:   109728.0 i/s - 2.81x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   139.163k i/100ms
       Hash#each_key   153.176k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.354M (± 9.9%) i/s -      6.680M in   5.040437s
       Hash#each_key      1.539M (± 2.0%) i/s -      7.812M in   5.076471s

Comparison:
       Hash#each_key:  1539496.3 i/s
      Hash#keys.each:  1353552.6 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   167.000  i/100ms
           Hash#key?     9.371M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.959k (±13.4%) i/s -      9.686k in   5.056007s
           Hash#key?     91.980M (± 0.1%) i/s -    468.542M in   5.093975s

Comparison:
           Hash#key?: 91979680.6 i/s
  Hash#keys.include?:     1958.6 i/s - 46961.28x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    22.675k i/100ms
            Hash#[]=    23.593k i/100ms
Calculating -------------------------------------
         Hash#merge!    239.111k (± 2.8%) i/s -      1.202M in   5.029764s
            Hash#[]=    237.295k (± 2.7%) i/s -      1.203M in   5.074410s

Comparison:
         Hash#merge!:   239111.2 i/s
            Hash#[]=:   237295.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        11.819k i/100ms
      Hash#merge({})     8.452k i/100ms
 Hash#dup#merge!({})    14.703k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        137.741k (± 4.3%) i/s -    697.321k in   5.072055s
      Hash#merge({})     88.206k (± 4.0%) i/s -    447.956k in   5.086784s
 Hash#dup#merge!({})    146.605k (± 4.6%) i/s -    735.150k in   5.025480s

Comparison:
 Hash#dup#merge!({}):   146605.3 i/s
{}#merge!(Hash) do end:   137741.4 i/s - same-ish: difference falls within error
      Hash#merge({}):    88206.5 i/s - 1.66x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   238.662M i/100ms
          Hash#merge   238.801M i/100ms
Calculating -------------------------------------
        Hash#**other      2.386B (± 0.4%) i/s -     11.933B in   5.001496s
          Hash#merge      2.389B (± 0.2%) i/s -     12.179B in   5.097064s

Comparison:
          Hash#merge: 2389400393.1 i/s
        Hash#**other: 2385953943.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   301.000  i/100ms
         Hash#merge!    23.038k i/100ms
Calculating -------------------------------------
          Hash#merge      3.362k (± 6.8%) i/s -     16.856k in   5.050477s
         Hash#merge!    244.044k (± 4.6%) i/s -      1.221M in   5.013687s

Comparison:
         Hash#merge!:   244044.1 i/s
          Hash#merge:     3361.7 i/s - 72.59x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.212M i/100ms
Array#each               1.012M i/100ms
Array#each_w/_object     1.060M i/100ms
Hash#select-include      1.623M i/100ms
Calculating -------------------------------------
Hash#native-slice        12.638M (± 4.8%) i/s -     64.222M in   5.093849s
Array#each               10.520M (± 2.5%) i/s -     52.616M in   5.004598s
Array#each_w/_object     10.494M (± 3.2%) i/s -     53.016M in   5.057432s
Hash#select-include      16.509M (± 2.6%) i/s -     82.750M in   5.015891s

Comparison:
Hash#select-include : 16509041.8 i/s
Hash#native-slice   : 12637909.1 i/s - 1.31x  (± 0.00) slower
Array#each          : 10520069.5 i/s - 1.57x  (± 0.00) slower
Array#each_w/_object: 10493791.0 i/s - 1.57x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   172.000  i/100ms
         Hash#value?   417.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.924k (± 8.4%) i/s -      9.632k in   5.060990s
         Hash#value?      4.170k (± 0.3%) i/s -     20.850k in   4.999922s

Comparison:
         Hash#value?:     4170.1 i/s
Hash#values.include?:     1924.0 i/s - 2.17x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   238.677M i/100ms
                send   238.456M i/100ms
      method_missing   239.108M i/100ms
Calculating -------------------------------------
                call      2.386B (± 0.3%) i/s -     11.934B in   5.000903s
                send      2.388B (± 0.3%) i/s -     12.161B in   5.093647s
      method_missing      2.389B (± 0.2%) i/s -     11.955B in   5.005356s

Comparison:
      method_missing: 2388527478.6 i/s
                send: 2387555652.3 i/s - same-ish: difference falls within error
                call: 2386367563.5 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    15.286k i/100ms
      Symbol#to_proc    16.217k i/100ms
Calculating -------------------------------------
               Block    163.656k (± 2.7%) i/s -    825.444k in   5.047377s
      Symbol#to_proc    164.599k (± 2.3%) i/s -    827.067k in   5.027415s

Comparison:
      Symbol#to_proc:   164599.4 i/s
               Block:   163655.7 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   238.136M i/100ms
       block + yield   238.373M i/100ms
        unused block   239.052M i/100ms
               yield   239.085M i/100ms
Calculating -------------------------------------
          block.call      2.388B (± 0.3%) i/s -     12.145B in   5.084909s
       block + yield      2.390B (± 0.2%) i/s -     12.157B in   5.087147s
        unused block      2.390B (± 0.2%) i/s -     11.953B in   5.001073s
               yield      2.389B (± 0.3%) i/s -     11.954B in   5.003167s

Comparison:
        unused block: 2390009320.2 i/s
       block + yield: 2389759821.8 i/s - same-ish: difference falls within error
               yield: 2389347337.1 i/s - same-ish: difference falls within error
          block.call: 2388441914.4 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    14.947k i/100ms
      range#include?   328.000  i/100ms
       range#member?   699.000  i/100ms
       plain compare    28.740k i/100ms
Calculating -------------------------------------
        range#cover?    170.497k (±25.1%) i/s -    792.191k in   5.032737s
      range#include?      8.848k (±30.2%) i/s -     38.704k in   5.015870s
       range#member?      8.681k (±30.4%) i/s -     39.144k in   5.048060s
       plain compare    352.154k (± 6.6%) i/s -      1.753M in   5.007975s

Comparison:
       plain compare:   352153.5 i/s
        range#cover?:   170496.7 i/s - 2.07x  (± 0.00) slower
      range#include?:     8848.3 i/s - 39.80x  (± 0.00) slower
       range#member?:     8681.3 i/s - 40.56x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    13.444M i/100ms
           String#=~    11.954M i/100ms
          Regexp#===    11.956M i/100ms
        String#match    11.497M i/100ms
Calculating -------------------------------------
       String#match?    135.759M (± 0.2%) i/s -    685.634M in   5.050376s
           String#=~    119.512M (± 0.1%) i/s -    597.719M in   5.001339s
          Regexp#===    119.522M (± 0.1%) i/s -    597.775M in   5.001402s
        String#match    114.898M (± 0.1%) i/s -    574.835M in   5.003004s

Comparison:
       String#match?: 135759467.7 i/s
          Regexp#===: 119521744.7 i/s - 1.14x  (± 0.00) slower
           String#=~: 119512020.6 i/s - 1.14x  (± 0.00) slower
        String#match: 114898143.3 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.517M i/100ms
      String#casecmp     2.633M i/100ms
Calculating -------------------------------------
String#downcase + ==     16.973M (± 3.2%) i/s -     84.939M in   5.009791s
      String#casecmp     26.981M (± 2.2%) i/s -    136.938M in   5.077761s

Comparison:
      String#casecmp: 26980860.0 i/s
String#downcase + ==: 16972566.2 i/s - 1.59x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     7.563M i/100ms
       String#concat     7.750M i/100ms
       String#append     7.563M i/100ms
         "foo" "bar"   239.062M i/100ms
  "#{'foo'}#{'bar'}"   239.112M i/100ms
Calculating -------------------------------------
            String#+     78.031M (± 3.5%) i/s -    393.267M in   5.046326s
       String#concat     77.857M (± 3.3%) i/s -    395.248M in   5.082231s
       String#append     77.341M (± 3.5%) i/s -    393.259M in   5.091139s
         "foo" "bar"      2.389B (± 0.2%) i/s -     11.953B in   5.002609s
  "#{'foo'}#{'bar'}"      2.390B (± 0.2%) i/s -     11.956B in   5.003051s

Comparison:
  "#{'foo'}#{'bar'}": 2389666868.4 i/s
         "foo" "bar": 2389383971.0 i/s - same-ish: difference falls within error
            String#+: 78030645.2 i/s - 30.62x  (± 0.00) slower
       String#concat: 77857009.9 i/s - 30.69x  (± 0.00) slower
       String#append: 77340785.3 i/s - 30.90x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   238.577M i/100ms
          String#dup   238.685M i/100ms
Calculating -------------------------------------
           String#+@      2.386B (± 0.3%) i/s -     11.929B in   4.999236s
          String#dup      2.388B (± 0.4%) i/s -     12.173B in   5.098226s

Comparison:
          String#dup: 2387711196.9 i/s
           String#+@: 2386162313.6 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   925.289k i/100ms
       String#match?     1.198M i/100ms
    String#end_with?    13.558M i/100ms
Calculating -------------------------------------
           String#=~      9.349M (± 1.9%) i/s -     47.190M in   5.049336s
       String#match?     11.988M (± 0.3%) i/s -     61.120M in   5.098470s
    String#end_with?    135.703M (± 0.2%) i/s -    691.450M in   5.095351s

Comparison:
    String#end_with?: 135702558.3 i/s
       String#match?: 11988080.6 i/s - 11.32x  (± 0.00) slower
           String#=~:  9349416.8 i/s - 14.51x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    48.324k i/100ms
          String#sub   371.874k i/100ms
String#dup["string"]=
                         8.768M i/100ms
Calculating -------------------------------------
         String#gsub      4.106M (±11.9%) i/s -     20.054M in   5.010993s
          String#sub      4.897M (± 6.9%) i/s -     24.544M in   5.037826s
String#dup["string"]=
                         87.641M (± 0.1%) i/s -    438.406M in   5.002302s

Comparison:
String#dup["string"]=: 87640888.7 i/s
          String#sub:  4897119.5 i/s - 17.90x  (± 0.00) slower
         String#gsub:  4105676.5 i/s - 21.35x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    45.819k i/100ms
           String#tr    88.856k i/100ms
Calculating -------------------------------------
         String#gsub      1.889M (± 7.3%) i/s -      9.393M in   5.004329s
           String#tr    888.757k (± 4.0%) i/s -      4.443M in   5.006938s

Comparison:
         String#gsub:  1888756.2 i/s
           String#tr:   888757.0 i/s - 2.13x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   238.464M i/100ms
         With Freeze   238.600M i/100ms
Calculating -------------------------------------
      Without Freeze      2.387B (± 0.3%) i/s -     12.162B in   5.094758s
         With Freeze      2.389B (± 0.2%) i/s -     12.169B in   5.092618s

Comparison:
         With Freeze: 2389467513.7 i/s
      Without Freeze: 2387119437.3 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     4.506k i/100ms
      String#squeeze    25.374k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     57.912k (± 9.4%) i/s -    288.384k in   5.055980s
      String#squeeze    254.142k (± 2.3%) i/s -      1.294M in   5.094840s

Comparison:
      String#squeeze:   254142.1 i/s
 String#gsub/regex+/:    57912.0 i/s - 4.39x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.092M i/100ms
       String#match?     4.621M i/100ms
  String#start_with?    10.674M i/100ms
Calculating -------------------------------------
           String#=~     33.442M (± 5.1%) i/s -    167.017M in   5.009346s
       String#match?     45.682M (± 1.6%) i/s -    231.055M in   5.059214s
  String#start_with?    106.605M (± 0.3%) i/s -    533.715M in   5.006507s

Comparison:
  String#start_with?: 106605440.6 i/s
       String#match?: 45681557.9 i/s - 2.33x  (± 0.00) slower
           String#=~: 33442316.6 i/s - 3.19x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   101.229k i/100ms
    String#[0, n] ==   223.389k i/100ms
   String#[RANGE] ==   313.415k i/100ms
   String#[0...n] ==   204.595k i/100ms
Calculating -------------------------------------
  String#start_with?      4.704M (± 0.1%) i/s -     23.586M in   5.013927s
    String#[0, n] ==      2.242M (± 2.2%) i/s -     11.393M in   5.083532s
   String#[RANGE] ==      3.136M (± 3.1%) i/s -     15.671M in   5.002393s
   String#[0...n] ==      2.027M (± 2.2%) i/s -     10.230M in   5.049327s

Comparison:
  String#start_with?:  4704173.9 i/s
   String#[RANGE] ==:  3135773.7 i/s - 1.50x  (± 0.00) slower
    String#[0, n] ==:  2242202.8 i/s - 2.10x  (± 0.00) slower
   String#[0...n] ==:  2026958.2 i/s - 2.32x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     9.042M i/100ms
 String#sub!'string'    95.083k i/100ms
String#gsub!'string'   372.539k i/100ms
  String#[/regexp/]=     1.498M i/100ms
 String#sub!/regexp/   516.886k i/100ms
String#gsub!/regexp/   443.384k i/100ms
Calculating -------------------------------------
  String#['string']=     90.509M (± 0.3%) i/s -    461.128M in   5.094917s
 String#sub!'string'      5.175M (±22.2%) i/s -     23.581M in   4.999758s
String#gsub!'string'      4.740M (± 4.1%) i/s -     23.842M in   5.038947s
  String#[/regexp/]=     15.273M (± 2.6%) i/s -     76.409M in   5.006248s
 String#sub!/regexp/      5.471M (± 8.3%) i/s -     27.395M in   5.058073s
String#gsub!/regexp/      4.347M (± 7.1%) i/s -     21.726M in   5.035407s

Comparison:
  String#['string']=: 90508526.6 i/s
  String#[/regexp/]=: 15273496.4 i/s - 5.93x  (± 0.00) slower
 String#sub!/regexp/:  5471385.7 i/s - 16.54x  (± 0.00) slower
 String#sub!'string':  5175372.0 i/s - 17.49x  (± 0.00) slower
String#gsub!'string':  4740152.3 i/s - 19.09x  (± 0.00) slower
String#gsub!/regexp/:  4346524.0 i/s - 20.82x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub    78.475k i/100ms
        String#chomp     4.523M i/100ms
String#delete_suffix     4.297M i/100ms
Calculating -------------------------------------
          String#sub     19.473M (± 7.2%) i/s -     96.367M in   4.999708s
        String#chomp     45.224M (± 0.3%) i/s -    226.168M in   5.001116s
String#delete_suffix     47.127M (± 2.9%) i/s -    236.309M in   5.018548s

Comparison:
String#delete_suffix: 47127191.6 i/s
        String#chomp: 45223894.3 i/s - 1.04x  (± 0.00) slower
          String#sub: 19473146.1 i/s - 2.42x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   238.317M i/100ms
          String#sub   106.607k i/100ms
Calculating -------------------------------------
String#delete_prefix      2.387B (± 0.3%) i/s -     12.154B in   5.092329s
          String#sub    124.286M (± 0.6%) i/s -    620.986M in   4.996605s

Comparison:
String#delete_prefix: 2386787703.4 i/s
          String#sub: 124286439.2 i/s - 19.20x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.247M i/100ms
    String#unpack[0]     1.343M i/100ms
Calculating -------------------------------------
      String#unpack1     14.093M (± 3.1%) i/s -     71.072M in   5.047671s
    String#unpack[0]     14.110M (± 2.7%) i/s -     71.201M in   5.049799s

Comparison:
    String#unpack[0]: 14109839.9 i/s
      String#unpack1: 14093399.3 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 23.1.0-dev-fbbc027e, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    18.710k i/100ms
          Time.parse   219.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    221.522k (±25.4%) i/s -      1.010M in   5.037548s
          Time.parse      7.852k (±23.4%) i/s -     35.259k in   5.002443s

Comparison:
        Time.iso8601:   221522.0 i/s
          Time.parse:     7852.0 i/s - 28.21x  (± 0.00) slower

