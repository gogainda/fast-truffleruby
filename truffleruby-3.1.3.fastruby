$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       113.392M i/100ms
Function with splat arguments
                         1.191k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.134B (± 0.8%) i/s -      5.783B in   5.098141s
Function with splat arguments
                         13.018k (± 7.6%) i/s -     65.505k in   5.073875s

Comparison:
Function with single Array argument: 1134408261.3 i/s
Function with splat arguments:    13017.5 i/s - 87144.67x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   113.428M i/100ms
Sequential Assignment
                       113.380M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.133B (± 1.0%) i/s -      5.671B in   5.007530s
Sequential Assignment
                          1.137B (± 1.2%) i/s -      5.782B in   5.084221s

Comparison:
Sequential Assignment: 1137465851.5 i/s
 Parallel Assignment: 1132690411.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   113.488M i/100ms
       attr_accessor   113.367M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.132B (± 0.4%) i/s -      5.674B in   5.010828s
       attr_accessor      1.132B (± 0.5%) i/s -      5.668B in   5.006783s

Comparison:
   getter_and_setter: 1132443753.5 i/s
       attr_accessor: 1132166983.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    10.194k i/100ms
         respond_to?   113.419M i/100ms
Calculating -------------------------------------
      begin...rescue     68.536k (± 6.6%) i/s -    346.596k in   5.090031s
         respond_to?      1.135B (± 0.6%) i/s -      5.784B in   5.096001s

Comparison:
         respond_to?: 1135117757.3 i/s
      begin...rescue:    68536.2 i/s - 16562.32x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   113.323M i/100ms
             &method   113.570M i/100ms
Calculating -------------------------------------
              normal      1.133B (± 1.0%) i/s -      5.666B in   5.000321s
             &method      1.136B (± 1.0%) i/s -      5.792B in   5.098220s

Comparison:
             &method: 1136198377.4 i/s
              normal: 1133265177.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       116.000  i/100ms
       define_method   142.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.600k (±52.2%) i/s -      6.496k in   5.026943s
       define_method      6.333k (±51.0%) i/s -      8.662k in   6.944385s

Comparison:
       define_method:     6333.4 i/s
module_eval with string:     2599.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    81.284k i/100ms
       Kernel#format    72.113k i/100ms
            String#%    72.056k i/100ms
Calculating -------------------------------------
         Float#round    873.910k (± 2.3%) i/s -      4.389M in   5.025368s
       Kernel#format    729.268k (± 2.0%) i/s -      3.678M in   5.045241s
            String#%    730.900k (± 2.5%) i/s -      3.675M in   5.030983s

Comparison:
         Float#round:   873909.8 i/s
            String#%:   730899.7 i/s - 1.20x  (± 0.00) slower
       Kernel#format:   729268.2 i/s - 1.20x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.289M i/100ms
          OpenStruct   113.306M i/100ms
Calculating -------------------------------------
                Hash      1.135B (± 0.8%) i/s -      5.778B in   5.091028s
          OpenStruct      1.132B (± 1.1%) i/s -      5.665B in   5.005364s

Comparison:
                Hash: 1134959926.6 i/s
          OpenStruct: 1131976497.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.344M i/100ms
          OpenStruct     3.408k i/100ms
Calculating -------------------------------------
                Hash      1.133B (± 0.7%) i/s -      5.667B in   5.001425s
          OpenStruct     34.844k (±11.6%) i/s -    173.808k in   5.080980s

Comparison:
                Hash: 1133172300.0 i/s
          OpenStruct:    34844.4 i/s - 32520.93x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   794.165k i/100ms
  ancestors.include?   172.671k i/100ms
Calculating -------------------------------------
  less than or equal      8.327M (± 4.1%) i/s -     42.091M in   5.063841s
  ancestors.include?      1.817M (± 2.9%) i/s -      9.152M in   5.041535s

Comparison:
  less than or equal:  8326594.5 i/s
  ancestors.include?:  1816836.2 i/s - 4.58x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     11.337  (± 0.0%) i/s -     57.000  in   5.027986s
         Kernel loop     11.364  (± 0.0%) i/s -     57.000  in   5.016107s

Comparison:
         Kernel loop:       11.4 i/s
          While Loop:       11.3 i/s - 1.00x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   113.342M i/100ms
         Array#first   114.191M i/100ms
Calculating -------------------------------------
           Array#[0]      1.134B (± 0.8%) i/s -      5.780B in   5.097298s
         Array#first      1.137B (± 1.0%) i/s -      5.710B in   5.021688s

Comparison:
         Array#first: 1137097363.7 i/s
           Array#[0]: 1134098676.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   113.804M i/100ms
          Array#last   113.938M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.133B (± 0.5%) i/s -      5.690B in   5.023685s
          Array#last      1.133B (± 0.4%) i/s -      5.697B in   5.027195s

Comparison:
          Array#last: 1133232977.6 i/s
          Array#[-1]: 1132710063.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   656.616k i/100ms
Calculating -------------------------------------
                find      4.444  (±22.5%) i/s -     15.000  in   5.156726s
             bsearch      6.628M (± 4.0%) i/s -     33.487M in   5.060720s

Comparison:
             bsearch:  6628446.7 i/s
                find:        4.4 i/s - 1491525.45x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.068  (± 0.0%) i/s -      1.000  in  14.771863s
        Array#insert      1.020  (± 0.0%) i/s -      6.000  in   5.884347s

Comparison:
        Array#insert:        1.0 i/s
       Array#unshift:        0.1 i/s - 15.06x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   113.635M i/100ms
          Array#size   113.272M i/100ms
         Array#count   113.359M i/100ms
Calculating -------------------------------------
        Array#length      1.136B (± 0.9%) i/s -      5.682B in   5.003268s
          Array#size      1.136B (± 0.8%) i/s -      5.777B in   5.084776s
         Array#count      1.135B (± 0.7%) i/s -      5.781B in   5.092006s

Comparison:
          Array#size: 1136186831.2 i/s
        Array#length: 1135705841.2 i/s - same-ish: difference falls within error
         Array#count: 1135418130.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    22.356k i/100ms
        Array#sample     2.527M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    227.211k (± 2.1%) i/s -      1.140M in   5.020495s
        Array#sample     26.971M (± 0.1%) i/s -    136.438M in   5.058645s

Comparison:
        Array#sample: 26971323.6 i/s
 Array#shuffle.first:   227211.3 i/s - 118.71x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   975.000  i/100ms
          Date.parse   789.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     59.487k (±35.9%) i/s -    222.300k in   5.001701s
          Date.parse     27.889k (±32.7%) i/s -    108.093k in   4.999500s

Comparison:
        Date.iso8601:    59486.8 i/s
          Date.parse:    27889.3 i/s - 2.13x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   208.963k i/100ms
           Array#map   950.690k i/100ms
Calculating -------------------------------------
   Array#each + push      2.288M (± 5.7%) i/s -     11.493M in   5.040791s
           Array#map     10.278M (± 3.2%) i/s -     52.288M in   5.092600s

Comparison:
           Array#map: 10278430.5 i/s
   Array#each + push:  2287887.3 i/s - 4.49x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     8.579M i/100ms
               #each    24.855M i/100ms
Calculating -------------------------------------
            For loop     84.522M (± 0.2%) i/s -    428.927M in   5.074738s
               #each    248.769M (± 0.3%) i/s -      1.268B in   5.095646s

Comparison:
               #each: 248768586.4 i/s
            For loop: 84522304.9 i/s - 2.94x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   821.077k i/100ms
     each_with_index     1.011M i/100ms
Calculating -------------------------------------
          While Loop      8.214M (± 0.1%) i/s -     41.875M in   5.097951s
     each_with_index     10.113M (± 0.0%) i/s -     50.571M in   5.000521s

Comparison:
     each_with_index: 10113098.9 i/s
          While Loop:  8214073.1 i/s - 1.23x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   157.549k i/100ms
      inject to_proc   158.486k i/100ms
        inject block   159.192k i/100ms
Calculating -------------------------------------
       inject symbol      1.573M (± 0.1%) i/s -      7.877M in   5.008871s
      inject to_proc      1.593M (± 0.2%) i/s -      8.083M in   5.075203s
        inject block      1.615M (± 0.1%) i/s -      8.119M in   5.027313s

Comparison:
        inject block:  1614938.6 i/s
      inject to_proc:  1592613.3 i/s - 1.01x  (± 0.00) slower
       inject symbol:  1572700.2 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    16.813k i/100ms
   Array#map.flatten    17.782k i/100ms
      Array#flat_map    43.949k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    178.879k (± 7.5%) i/s -    891.089k in   5.025506s
   Array#map.flatten    177.404k (± 8.4%) i/s -    889.100k in   5.063906s
      Array#flat_map    443.300k (± 2.4%) i/s -      2.241M in   5.059083s

Comparison:
      Array#flat_map:   443300.1 i/s
Array#map.flatten(1):   178879.1 i/s - 2.48x  (± 0.00) slower
   Array#map.flatten:   177403.7 i/s - 2.50x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   182.790k i/100ms
  Array#reverse_each     1.495M i/100ms
Calculating -------------------------------------
  Array#reverse.each      2.124M (± 6.9%) i/s -     10.602M in   5.035731s
  Array#reverse_each     14.955M (± 0.1%) i/s -     76.240M in   5.098052s

Comparison:
  Array#reverse_each: 14954741.5 i/s
  Array#reverse.each:  2123860.9 i/s - 7.04x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       634.028k i/100ms
   Enumerable#detect     2.686M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          6.874M (± 6.9%) i/s -    136.950M in  20.071764s
   Enumerable#detect     26.871M (± 0.3%) i/s -    539.821M in  20.089750s

Comparison:
   Enumerable#detect: 26870680.7 i/s
Enumerable#select.first:  6873940.6 i/s - 3.91x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       214.749k i/100ms
Enumerable#select.last
                       399.049k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.160M (± 3.0%) i/s -     10.952M in   5.074918s
Enumerable#select.last
                          4.003M (± 2.2%) i/s -     20.351M in   5.086151s

Comparison:
Enumerable#select.last:  4003347.5 i/s
Enumerable#reverse.detect:  2160075.0 i/s - 1.85x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.774k i/100ms
  Enumerable#sort_by     2.854k i/100ms
     Enumerable#sort     3.542k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         28.521k (±13.1%) i/s -    138.700k in   5.084295s
  Enumerable#sort_by     20.750k (± 9.8%) i/s -    102.744k in   5.027835s
     Enumerable#sort     35.960k (± 2.1%) i/s -    180.642k in   5.025954s

Comparison:
     Enumerable#sort:    35959.7 i/s
Enumerable#sort_by (Symbol#to_proc):    28520.9 i/s - 1.26x  (± 0.00) slower
  Enumerable#sort_by:    20750.2 i/s - 1.73x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   530.709k i/100ms
Enumerable#sort_by...first
                         5.918k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      5.307M (± 0.1%) i/s -     26.535M in   5.000544s
Enumerable#sort_by...first
                         64.238k (± 2.5%) i/s -    325.490k in   5.070241s

Comparison:
   Enumerable#min_by:  5306516.6 i/s
Enumerable#sort_by...first:    64237.6 i/s - 82.61x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   376.258k i/100ms
            Hash#dup   379.009k i/100ms
Calculating -------------------------------------
              Hash[]      4.046M (± 9.3%) i/s -     20.318M in   5.077759s
            Hash#dup      4.137M (± 7.4%) i/s -     20.845M in   5.067052s

Comparison:
            Hash#dup:  4137401.4 i/s
              Hash[]:  4046123.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   113.312M i/100ms
  Hash#fetch, symbol   113.217M i/100ms
     Hash#[], string     3.419M i/100ms
  Hash#fetch, string    12.141M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.137B (± 0.9%) i/s -      5.779B in   5.084329s
  Hash#fetch, symbol      1.139B (± 1.0%) i/s -      5.774B in   5.070753s
     Hash#[], string    179.975M (± 1.6%) i/s -    902.565M in   5.016245s
  Hash#fetch, string    150.013M (± 0.9%) i/s -    752.730M in   5.018169s

Comparison:
  Hash#fetch, symbol: 1138806925.3 i/s
     Hash#[], symbol: 1136700902.8 i/s - same-ish: difference falls within error
     Hash#[], string: 179975093.9 i/s - 6.33x  (± 0.00) slower
  Hash#fetch, string: 150013102.5 i/s - 7.59x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    49.766M i/100ms
             Hash#[]    49.782M i/100ms
          Hash#[] ||    49.804M i/100ms
          Hash#[] &&    49.807M i/100ms
          Hash#fetch    49.804M i/100ms
 Hash#fetch fallback    49.783M i/100ms
Calculating -------------------------------------
            Hash#dig    497.521M (± 0.2%) i/s -      2.488B in   5.001404s
             Hash#[]    497.518M (± 0.4%) i/s -      2.489B in   5.003131s
          Hash#[] ||    497.607M (± 0.2%) i/s -      2.490B in   5.004417s
          Hash#[] &&    497.427M (± 0.4%) i/s -      2.490B in   5.006560s
          Hash#fetch    497.799M (± 0.2%) i/s -      2.490B in   5.002417s
 Hash#fetch fallback    497.866M (± 0.1%) i/s -      2.539B in   5.099677s

Comparison:
 Hash#fetch fallback: 497865506.5 i/s
          Hash#fetch: 497799234.5 i/s - same-ish: difference falls within error
          Hash#[] ||: 497606515.8 i/s - same-ish: difference falls within error
            Hash#dig: 497521265.2 i/s - same-ish: difference falls within error
             Hash#[]: 497518364.0 i/s - same-ish: difference falls within error
          Hash#[] &&: 497427429.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   113.755M i/100ms
  Hash#fetch + block   113.604M i/100ms
    Hash#fetch + arg   113.636M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.137B (± 0.7%) i/s -      5.688B in   5.003712s
  Hash#fetch + block      1.136B (± 0.8%) i/s -      5.680B in   5.001937s
    Hash#fetch + arg      1.136B (± 0.7%) i/s -      5.682B in   5.001413s

Comparison:
  Hash#fetch + const: 1136760682.2 i/s
    Hash#fetch + arg: 1136095981.2 i/s - same-ish: difference falls within error
  Hash#fetch + block: 1135678253.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    24.367k i/100ms
         sort + to_h   326.000  i/100ms
Calculating -------------------------------------
      sort_by + to_h    369.929k (± 3.6%) i/s -      1.852M in   5.012709s
         sort + to_h    148.852k (±14.8%) i/s -    691.772k in   4.995815s

Comparison:
      sort_by + to_h:   369928.6 i/s
         sort + to_h:   148852.0 i/s - 2.49x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   156.571k i/100ms
       Hash#each_key   183.606k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.670M (±10.6%) i/s -      8.142M in   5.005010s
       Hash#each_key      1.920M (± 2.1%) i/s -      9.731M in   5.071847s

Comparison:
       Hash#each_key:  1919528.8 i/s
      Hash#keys.each:  1669879.9 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   186.000  i/100ms
           Hash#key?     2.499M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      2.051k (±10.3%) i/s -     10.230k in   5.066584s
           Hash#key?     24.993M (± 0.2%) i/s -    127.447M in   5.099326s

Comparison:
           Hash#key?: 24992930.7 i/s
  Hash#keys.include?:     2050.6 i/s - 12187.92x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    39.652k i/100ms
            Hash#[]=    37.587k i/100ms
Calculating -------------------------------------
         Hash#merge!    409.107k (± 7.5%) i/s -      2.062M in   5.084331s
            Hash#[]=    407.779k (± 5.6%) i/s -      2.067M in   5.085788s

Comparison:
         Hash#merge!:   409107.3 i/s
            Hash#[]=:   407778.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        21.403k i/100ms
      Hash#merge({})    13.482k i/100ms
 Hash#dup#merge!({})    23.594k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        256.410k (± 9.8%) i/s -      1.284M in   5.071339s
      Hash#merge({})    147.550k (±10.1%) i/s -    728.028k in   5.009652s
 Hash#dup#merge!({})    244.494k (± 7.8%) i/s -      1.227M in   5.065796s

Comparison:
{}#merge!(Hash) do end:   256409.7 i/s
 Hash#dup#merge!({}):   244494.3 i/s - same-ish: difference falls within error
      Hash#merge({}):   147550.5 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   114.071M i/100ms
          Hash#merge   113.538M i/100ms
Calculating -------------------------------------
        Hash#**other      1.134B (± 0.5%) i/s -      5.704B in   5.031147s
          Hash#merge      1.134B (± 0.4%) i/s -      5.677B in   5.005009s

Comparison:
          Hash#merge: 1134259394.9 i/s
        Hash#**other: 1133679576.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   635.000  i/100ms
         Hash#merge!    39.376k i/100ms
Calculating -------------------------------------
          Hash#merge      7.108k (± 9.5%) i/s -     35.560k in   5.065068s
         Hash#merge!    399.823k (± 7.2%) i/s -      2.008M in   5.050124s

Comparison:
         Hash#merge!:   399823.3 i/s
          Hash#merge:     7107.6 i/s - 56.25x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.367M i/100ms
Array#each               1.282M i/100ms
Array#each_w/_object     1.315M i/100ms
Hash#select-include      1.758M i/100ms
Calculating -------------------------------------
Hash#native-slice        15.459M (± 4.0%) i/s -     77.909M in   5.048237s
Array#each               13.117M (± 2.4%) i/s -     66.662M in   5.085045s
Array#each_w/_object     12.985M (± 6.9%) i/s -     65.763M in   5.102379s
Hash#select-include      18.161M (± 6.9%) i/s -     91.406M in   5.070228s

Comparison:
Hash#select-include : 18161180.1 i/s
Hash#native-slice   : 15459037.2 i/s - 1.17x  (± 0.00) slower
Array#each          : 13117217.4 i/s - 1.38x  (± 0.00) slower
Array#each_w/_object: 12984618.0 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   186.000  i/100ms
         Hash#value?   379.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      2.049k (±11.2%) i/s -     10.230k in   5.078130s
         Hash#value?      3.813k (± 0.5%) i/s -     19.329k in   5.069089s

Comparison:
         Hash#value?:     3813.2 i/s
Hash#values.include?:     2049.1 i/s - 1.86x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   113.237M i/100ms
                send   113.723M i/100ms
      method_missing   113.528M i/100ms
Calculating -------------------------------------
                call      1.136B (± 0.8%) i/s -      5.775B in   5.085140s
                send      1.136B (± 1.0%) i/s -      5.686B in   5.006874s
      method_missing      1.135B (± 0.5%) i/s -      5.676B in   5.000707s

Comparison:
                send: 1135774206.8 i/s
                call: 1135746800.4 i/s - same-ish: difference falls within error
      method_missing: 1135152993.7 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    30.473k i/100ms
      Symbol#to_proc    34.575k i/100ms
Calculating -------------------------------------
               Block    346.343k (± 6.2%) i/s -      1.737M in   5.034678s
      Symbol#to_proc    344.529k (± 7.9%) i/s -      1.729M in   5.060406s

Comparison:
               Block:   346342.6 i/s
      Symbol#to_proc:   344528.6 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   111.725M i/100ms
       block + yield   113.860M i/100ms
        unused block   113.143M i/100ms
               yield   113.471M i/100ms
Calculating -------------------------------------
          block.call      1.134B (± 0.7%) i/s -      5.698B in   5.027044s
       block + yield      1.134B (± 0.2%) i/s -      5.693B in   5.021178s
        unused block      1.134B (± 0.4%) i/s -      5.770B in   5.088572s
               yield      1.135B (± 0.8%) i/s -      5.674B in   5.000204s

Comparison:
               yield: 1134727002.2 i/s
        unused block: 1133988596.4 i/s - same-ish: difference falls within error
       block + yield: 1133802188.4 i/s - same-ish: difference falls within error
          block.call: 1133515545.0 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    16.167k i/100ms
      range#include?   395.000  i/100ms
       range#member?   839.000  i/100ms
       plain compare    31.826k i/100ms
Calculating -------------------------------------
        range#cover?    175.434k (±24.7%) i/s -    808.350k in   5.011597s
      range#include?      9.700k (±29.9%) i/s -     43.450k in   5.026495s
       range#member?      9.000k (±28.0%) i/s -     41.111k in   5.005266s
       plain compare    409.655k (± 7.4%) i/s -      2.037M in   5.004123s

Comparison:
       plain compare:   409654.8 i/s
        range#cover?:   175433.7 i/s - 2.34x  (± 0.00) slower
      range#include?:     9700.4 i/s - 42.23x  (± 0.00) slower
       range#member?:     8999.8 i/s - 45.52x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    10.004M i/100ms
           String#=~    10.371M i/100ms
          Regexp#===    10.421M i/100ms
        String#match     8.517M i/100ms
Calculating -------------------------------------
       String#match?    100.150M (± 0.0%) i/s -    510.229M in   5.094670s
           String#=~    104.209M (± 0.0%) i/s -    528.929M in   5.075678s
          Regexp#===    104.228M (± 0.0%) i/s -    531.496M in   5.099341s
        String#match     85.095M (± 0.4%) i/s -    425.847M in   5.004467s

Comparison:
          Regexp#===: 104228346.9 i/s
           String#=~: 104208624.7 i/s - same-ish: difference falls within error
       String#match?: 100149622.5 i/s - 1.04x  (± 0.00) slower
        String#match: 85095075.2 i/s - 1.22x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.289M i/100ms
      String#casecmp     3.531M i/100ms
Calculating -------------------------------------
String#downcase + ==     23.541M (± 7.1%) i/s -    119.045M in   5.093746s
      String#casecmp     34.429M (± 5.3%) i/s -    173.019M in   5.039730s

Comparison:
      String#casecmp: 34428970.5 i/s
String#downcase + ==: 23541086.2 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     7.045M i/100ms
       String#concat     7.468M i/100ms
       String#append     7.016M i/100ms
         "foo" "bar"   113.613M i/100ms
  "#{'foo'}#{'bar'}"   113.497M i/100ms
Calculating -------------------------------------
            String#+     74.046M (± 3.9%) i/s -    373.387M in   5.050163s
       String#concat     75.159M (± 3.3%) i/s -    380.877M in   5.073481s
       String#append     75.130M (± 2.3%) i/s -    378.874M in   5.045767s
         "foo" "bar"      1.135B (± 0.7%) i/s -      5.681B in   5.004588s
  "#{'foo'}#{'bar'}"      1.134B (± 0.3%) i/s -      5.675B in   5.003697s

Comparison:
         "foo" "bar": 1135149859.8 i/s
  "#{'foo'}#{'bar'}": 1134144853.5 i/s - same-ish: difference falls within error
       String#concat: 75158558.8 i/s - 15.10x  (± 0.00) slower
       String#append: 75129559.6 i/s - 15.11x  (± 0.00) slower
            String#+: 74045926.3 i/s - 15.33x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   113.767M i/100ms
          String#dup   113.458M i/100ms
Calculating -------------------------------------
           String#+@      1.133B (± 0.6%) i/s -      5.688B in   5.019721s
          String#dup      1.136B (± 0.9%) i/s -      5.786B in   5.093800s

Comparison:
          String#dup: 1136063486.1 i/s
           String#+@: 1133244478.0 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.009M i/100ms
       String#match?     1.201M i/100ms
    String#end_with?    14.500M i/100ms
Calculating -------------------------------------
           String#=~     10.130M (± 2.0%) i/s -     51.456M in   5.081754s
       String#match?     12.038M (± 0.3%) i/s -     61.253M in   5.088287s
    String#end_with?    145.497M (± 0.5%) i/s -    739.486M in   5.082603s

Comparison:
    String#end_with?: 145496595.2 i/s
       String#match?: 12038094.2 i/s - 12.09x  (± 0.00) slower
           String#=~: 10129702.3 i/s - 14.36x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    81.084k i/100ms
          String#sub   700.445k i/100ms
String#dup["string"]=
                         7.546M i/100ms
Calculating -------------------------------------
         String#gsub      5.470M (±13.4%) i/s -     26.433M in   5.007859s
          String#sub      7.207M (± 9.1%) i/s -     35.723M in   5.009828s
String#dup["string"]=
                         75.452M (± 0.0%) i/s -    377.317M in   5.000776s

Comparison:
String#dup["string"]=: 75451792.3 i/s
          String#sub:  7206812.5 i/s - 10.47x  (± 0.00) slower
         String#gsub:  5470459.7 i/s - 13.79x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    45.755k i/100ms
           String#tr   104.647k i/100ms
Calculating -------------------------------------
         String#gsub      2.574M (± 9.5%) i/s -     12.720M in   5.002542s
           String#tr      1.065M (± 2.4%) i/s -      5.337M in   5.015598s

Comparison:
         String#gsub:  2573947.3 i/s
           String#tr:  1064710.9 i/s - 2.42x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   113.279M i/100ms
         With Freeze   113.443M i/100ms
Calculating -------------------------------------
      Without Freeze      1.135B (± 0.9%) i/s -      5.777B in   5.089132s
         With Freeze      1.134B (± 0.4%) i/s -      5.672B in   5.003766s

Comparison:
      Without Freeze: 1135302756.7 i/s
         With Freeze: 1133593315.8 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     6.202k i/100ms
      String#squeeze    26.832k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     90.382k (± 9.3%) i/s -    446.544k in   5.001082s
      String#squeeze    268.472k (± 2.7%) i/s -      1.342M in   5.001184s

Comparison:
      String#squeeze:   268472.0 i/s
 String#gsub/regex+/:    90381.7 i/s - 2.97x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     3.503M i/100ms
       String#match?     4.870M i/100ms
  String#start_with?    10.629M i/100ms
Calculating -------------------------------------
           String#=~     35.397M (± 2.8%) i/s -    178.657M in   5.051321s
       String#match?     48.518M (± 0.1%) i/s -    243.499M in   5.018726s
  String#start_with?    106.054M (± 0.5%) i/s -    531.468M in   5.011420s

Comparison:
  String#start_with?: 106053851.9 i/s
       String#match?: 48518209.3 i/s - 2.19x  (± 0.00) slower
           String#=~: 35397466.1 i/s - 3.00x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   106.430k i/100ms
    String#[0, n] ==   230.421k i/100ms
   String#[RANGE] ==   294.742k i/100ms
   String#[0...n] ==   220.478k i/100ms
Calculating -------------------------------------
  String#start_with?      4.503M (± 0.5%) i/s -     22.563M in   5.011090s
    String#[0, n] ==      2.529M (± 3.4%) i/s -     12.673M in   5.017622s
   String#[RANGE] ==      3.226M (± 3.1%) i/s -     16.211M in   5.029792s
   String#[0...n] ==      2.218M (± 3.6%) i/s -     11.244M in   5.075514s

Comparison:
  String#start_with?:  4502772.8 i/s
   String#[RANGE] ==:  3226247.6 i/s - 1.40x  (± 0.00) slower
    String#[0, n] ==:  2528786.5 i/s - 1.78x  (± 0.00) slower
   String#[0...n] ==:  2218411.0 i/s - 2.03x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     7.544M i/100ms
 String#sub!'string'    92.255k i/100ms
String#gsub!'string'   498.843k i/100ms
  String#[/regexp/]=     2.039M i/100ms
 String#sub!/regexp/   702.561k i/100ms
String#gsub!/regexp/   519.337k i/100ms
Calculating -------------------------------------
  String#['string']=     75.389M (± 0.5%) i/s -    377.203M in   5.003587s
 String#sub!'string'      8.044M (±21.4%) i/s -     36.348M in   5.005820s
String#gsub!'string'      5.599M (± 5.0%) i/s -     27.935M in   5.003500s
  String#[/regexp/]=     19.521M (± 4.2%) i/s -     97.879M in   5.023865s
 String#sub!/regexp/      8.391M (±10.2%) i/s -     41.451M in   5.006215s
String#gsub!/regexp/      6.355M (±10.1%) i/s -     31.680M in   5.054018s

Comparison:
  String#['string']=: 75388696.2 i/s
  String#[/regexp/]=: 19520939.5 i/s - 3.86x  (± 0.00) slower
 String#sub!/regexp/:  8391278.8 i/s - 8.98x  (± 0.00) slower
 String#sub!'string':  8043549.6 i/s - 9.37x  (± 0.00) slower
String#gsub!/regexp/:  6354992.3 i/s - 11.86x  (± 0.00) slower
String#gsub!'string':  5599280.1 i/s - 13.46x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub   103.761k i/100ms
        String#chomp     4.285M i/100ms
String#delete_suffix     8.877M i/100ms
Calculating -------------------------------------
          String#sub     22.699M (± 6.8%) i/s -    112.477M in   5.002174s
        String#chomp     42.802M (± 0.2%) i/s -    214.256M in   5.005786s
String#delete_suffix     99.487M (± 8.1%) i/s -    497.133M in   5.041516s

Comparison:
String#delete_suffix: 99487013.1 i/s
        String#chomp: 42801812.4 i/s - 2.32x  (± 0.00) slower
          String#sub: 22698793.5 i/s - 4.38x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   113.612M i/100ms
          String#sub   163.689k i/100ms
Calculating -------------------------------------
String#delete_prefix      1.136B (± 1.1%) i/s -      5.681B in   5.001605s
          String#sub    107.277M (± 1.8%) i/s -    535.263M in   4.998951s

Comparison:
String#delete_prefix: 1135888173.2 i/s
          String#sub: 107276832.9 i/s - 10.59x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.531M i/100ms
    String#unpack[0]     1.605M i/100ms
Calculating -------------------------------------
      String#unpack1     15.900M (± 2.4%) i/s -     79.599M in   5.009097s
    String#unpack[0]     15.684M (± 6.5%) i/s -     78.667M in   5.050432s

Comparison:
      String#unpack1: 15900001.1 i/s
    String#unpack[0]: 15683666.4 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 23.1.0-dev-82d3a4a5, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    20.540k i/100ms
          Time.parse   214.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    392.517k (± 9.9%) i/s -      1.951M in   5.022766s
          Time.parse     21.004k (±17.7%) i/s -     78.324k in   4.999783s

Comparison:
        Time.iso8601:   392516.5 i/s
          Time.parse:    21004.0 i/s - 18.69x  (± 0.00) slower

