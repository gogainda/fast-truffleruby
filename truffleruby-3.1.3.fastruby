$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       113.817M i/100ms
Function with splat arguments
                         1.144k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.137B (± 0.8%) i/s -      5.691B in   5.003770s
Function with splat arguments
                         13.322k (± 6.5%) i/s -     66.352k in   5.005086s

Comparison:
Function with single Array argument: 1137391088.3 i/s
Function with splat arguments:    13321.7 i/s - 85378.67x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   113.614M i/100ms
Sequential Assignment
                       114.175M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.137B (± 1.1%) i/s -      5.794B in   5.098859s
Sequential Assignment
                          1.140B (± 1.4%) i/s -      5.709B in   5.009402s

Comparison:
Sequential Assignment: 1139826507.7 i/s
 Parallel Assignment: 1136521917.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   114.254M i/100ms
       attr_accessor   113.569M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.139B (± 1.2%) i/s -      5.713B in   5.014279s
       attr_accessor      1.137B (± 0.8%) i/s -      5.792B in   5.092941s

Comparison:
   getter_and_setter: 1139434441.3 i/s
       attr_accessor: 1137335463.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     7.520k i/100ms
         respond_to?   113.741M i/100ms
Calculating -------------------------------------
      begin...rescue     78.780k (± 4.5%) i/s -    398.560k in   5.069769s
         respond_to?      1.139B (± 1.0%) i/s -      5.801B in   5.091464s

Comparison:
         respond_to?: 1139439683.7 i/s
      begin...rescue:    78780.1 i/s - 14463.54x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   113.968M i/100ms
             &method   114.584M i/100ms
Calculating -------------------------------------
              normal      1.138B (± 1.1%) i/s -      5.698B in   5.007629s
             &method      1.136B (± 0.5%) i/s -      5.729B in   5.045061s

Comparison:
              normal: 1138069350.8 i/s
             &method: 1135631010.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       139.000  i/100ms
       define_method   150.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.279k (±56.6%) i/s -      6.255k in   5.005429s
       define_method      5.825k (±50.0%) i/s -      8.850k in   6.702664s

Comparison:
       define_method:     5824.5 i/s
module_eval with string:     2278.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    86.434k i/100ms
       Kernel#format    72.266k i/100ms
            String#%    72.850k i/100ms
Calculating -------------------------------------
         Float#round    874.809k (± 2.2%) i/s -      4.408M in   5.041452s
       Kernel#format    727.229k (± 1.9%) i/s -      3.686M in   5.069804s
            String#%    728.990k (± 1.9%) i/s -      3.715M in   5.098528s

Comparison:
         Float#round:   874808.9 i/s
            String#%:   728990.2 i/s - 1.20x  (± 0.00) slower
       Kernel#format:   727229.2 i/s - 1.20x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.847M i/100ms
          OpenStruct   113.645M i/100ms
Calculating -------------------------------------
                Hash      1.136B (± 0.9%) i/s -      5.692B in   5.012817s
          OpenStruct      1.137B (± 0.9%) i/s -      5.796B in   5.096319s

Comparison:
          OpenStruct: 1137355806.5 i/s
                Hash: 1135645008.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.843M i/100ms
          OpenStruct     3.120k i/100ms
Calculating -------------------------------------
                Hash      1.136B (± 0.7%) i/s -      5.692B in   5.012491s
          OpenStruct     33.109k (± 9.5%) i/s -    165.360k in   5.065074s

Comparison:
                Hash: 1135652731.1 i/s
          OpenStruct:    33109.0 i/s - 34300.44x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   855.049k i/100ms
  ancestors.include?   172.772k i/100ms
Calculating -------------------------------------
  less than or equal      8.931M (± 3.1%) i/s -     45.318M in   5.079685s
  ancestors.include?      1.867M (± 4.7%) i/s -      9.330M in   5.007486s

Comparison:
  less than or equal:  8930811.8 i/s
  ancestors.include?:  1867412.4 i/s - 4.78x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     11.350  (± 0.0%) i/s -     57.000  in   5.022063s
         Kernel loop     11.373  (± 0.0%) i/s -     57.000  in   5.012215s

Comparison:
         Kernel loop:       11.4 i/s
          While Loop:       11.4 i/s - 1.00x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   113.433M i/100ms
         Array#first   114.810M i/100ms
Calculating -------------------------------------
           Array#[0]      1.138B (± 1.1%) i/s -      5.785B in   5.083915s
         Array#first      1.138B (± 1.0%) i/s -      5.741B in   5.047102s

Comparison:
           Array#[0]: 1138059624.7 i/s
         Array#first: 1137501084.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   114.065M i/100ms
          Array#last   114.293M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.136B (± 1.1%) i/s -      5.703B in   5.019596s
          Array#last      1.137B (± 0.7%) i/s -      5.715B in   5.025302s

Comparison:
          Array#last: 1137238367.7 i/s
          Array#[-1]: 1136324864.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   688.830k i/100ms
Calculating -------------------------------------
                find      4.725  (± 0.0%) i/s -     24.000  in   5.079539s
             bsearch      6.872M (± 4.0%) i/s -     34.441M in   5.020023s

Comparison:
             bsearch:  6871916.7 i/s
                find:        4.7 i/s - 1454423.53x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.069  (± 0.0%) i/s -      1.000  in  14.542328s
        Array#insert      1.027  (± 0.0%) i/s -      6.000  in   5.839544s

Comparison:
        Array#insert:        1.0 i/s
       Array#unshift:        0.1 i/s - 14.94x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   113.547M i/100ms
          Array#size   113.720M i/100ms
         Array#count   113.553M i/100ms
Calculating -------------------------------------
        Array#length      1.137B (± 0.9%) i/s -      5.791B in   5.095720s
          Array#size      1.137B (± 0.7%) i/s -      5.686B in   5.002976s
         Array#count      1.136B (± 0.6%) i/s -      5.791B in   5.099178s

Comparison:
          Array#size: 1136586114.7 i/s
        Array#length: 1136525897.4 i/s - same-ish: difference falls within error
         Array#count: 1135754223.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    23.692k i/100ms
        Array#sample     2.687M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    244.043k (± 1.8%) i/s -      1.232M in   5.049970s
        Array#sample     27.887M (± 0.3%) i/s -    139.734M in   5.010750s

Comparison:
        Array#sample: 27886979.6 i/s
 Array#shuffle.first:   244042.6 i/s - 114.27x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601     1.953k i/100ms
          Date.parse   698.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     45.602k (±31.2%) i/s -    185.535k in   5.000665s
          Date.parse     14.732k (±25.6%) i/s -     64.914k in   5.033224s

Comparison:
        Date.iso8601:    45602.1 i/s
          Date.parse:    14732.0 i/s - 3.10x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   195.705k i/100ms
           Array#map     1.071M i/100ms
Calculating -------------------------------------
   Array#each + push      2.466M (± 5.2%) i/s -     12.329M in   5.014176s
           Array#map     10.887M (± 5.7%) i/s -     54.597M in   5.032085s

Comparison:
           Array#map: 10887163.2 i/s
   Array#each + push:  2466393.7 i/s - 4.41x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     6.865M i/100ms
               #each    40.083M i/100ms
Calculating -------------------------------------
            For loop     66.438M (± 2.1%) i/s -    336.396M in   5.065595s
               #each    404.157M (± 0.9%) i/s -      2.044B in   5.058426s

Comparison:
               #each: 404157315.4 i/s
            For loop: 66437559.4 i/s - 6.08x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   812.265k i/100ms
     each_with_index     1.042M i/100ms
Calculating -------------------------------------
          While Loop      8.120M (± 0.7%) i/s -     40.613M in   5.001945s
     each_with_index     10.422M (± 0.0%) i/s -     52.121M in   5.001080s

Comparison:
     each_with_index: 10421899.7 i/s
          While Loop:  8119914.9 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   159.939k i/100ms
      inject to_proc   160.831k i/100ms
        inject block   159.851k i/100ms
Calculating -------------------------------------
       inject symbol      1.602M (± 0.0%) i/s -      8.157M in   5.091020s
      inject to_proc      1.595M (± 0.1%) i/s -      8.042M in   5.040580s
        inject block      1.598M (± 0.0%) i/s -      7.993M in   5.000070s

Comparison:
       inject symbol:  1602211.4 i/s
        inject block:  1598488.0 i/s - 1.00x  (± 0.00) slower
      inject to_proc:  1595362.7 i/s - 1.00x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    17.096k i/100ms
   Array#map.flatten    18.599k i/100ms
      Array#flat_map    44.753k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    186.549k (± 4.5%) i/s -    940.280k in   5.051279s
   Array#map.flatten    189.415k (± 4.4%) i/s -    948.549k in   5.018374s
      Array#flat_map    450.238k (± 3.0%) i/s -      2.282M in   5.074358s

Comparison:
      Array#flat_map:   450237.5 i/s
   Array#map.flatten:   189415.4 i/s - 2.38x  (± 0.00) slower
Array#map.flatten(1):   186548.6 i/s - 2.41x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   200.678k i/100ms
  Array#reverse_each     1.693M i/100ms
Calculating -------------------------------------
  Array#reverse.each      2.186M (± 3.2%) i/s -     11.037M in   5.053598s
  Array#reverse_each     16.933M (± 0.0%) i/s -     86.355M in   5.099759s

Comparison:
  Array#reverse_each: 16933220.6 i/s
  Array#reverse.each:  2186315.3 i/s - 7.75x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       694.968k i/100ms
   Enumerable#detect     2.751M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          7.338M (± 5.3%) i/s -    146.638M in  20.054807s
   Enumerable#detect     27.551M (± 0.2%) i/s -    552.924M in  20.068976s

Comparison:
   Enumerable#detect: 27551328.3 i/s
Enumerable#select.first:  7338226.1 i/s - 3.75x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       217.467k i/100ms
Enumerable#select.last
                       408.982k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.330M (± 2.9%) i/s -     11.743M in   5.045306s
Enumerable#select.last
                          4.134M (± 2.9%) i/s -     20.858M in   5.049879s

Comparison:
Enumerable#select.last:  4133937.4 i/s
Enumerable#reverse.detect:  2329594.5 i/s - 1.77x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.801k i/100ms
  Enumerable#sort_by     2.828k i/100ms
     Enumerable#sort     3.957k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         27.588k (±12.4%) i/s -    137.249k in   5.060581s
  Enumerable#sort_by     26.155k (±16.1%) i/s -    127.260k in   5.011463s
     Enumerable#sort     39.449k (± 0.6%) i/s -    197.850k in   5.015524s

Comparison:
     Enumerable#sort:    39448.9 i/s
Enumerable#sort_by (Symbol#to_proc):    27588.2 i/s - 1.43x  (± 0.00) slower
  Enumerable#sort_by:    26154.8 i/s - 1.51x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   472.732k i/100ms
Enumerable#sort_by...first
                         6.702k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      4.721M (± 0.8%) i/s -     23.637M in   5.007135s
Enumerable#sort_by...first
                         67.789k (± 2.3%) i/s -    341.802k in   5.045040s

Comparison:
   Enumerable#min_by:  4720924.3 i/s
Enumerable#sort_by...first:    67788.8 i/s - 69.64x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   411.606k i/100ms
            Hash#dup   448.638k i/100ms
Calculating -------------------------------------
              Hash[]      4.664M (± 2.6%) i/s -     23.462M in   5.034329s
            Hash#dup      4.677M (± 2.2%) i/s -     23.778M in   5.086466s

Comparison:
            Hash#dup:  4677083.0 i/s
              Hash[]:  4663556.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   113.998M i/100ms
  Hash#fetch, symbol   114.248M i/100ms
     Hash#[], string    14.089M i/100ms
  Hash#fetch, string    12.653M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.137B (± 0.8%) i/s -      5.700B in   5.014424s
  Hash#fetch, symbol      1.139B (± 0.9%) i/s -      5.712B in   5.014894s
     Hash#[], string    170.427M (± 0.8%) i/s -    859.453M in   5.043278s
  Hash#fetch, string    148.526M (± 0.8%) i/s -    746.539M in   5.026691s

Comparison:
  Hash#fetch, symbol: 1139176605.7 i/s
     Hash#[], symbol: 1136778544.8 i/s - same-ish: difference falls within error
     Hash#[], string: 170426843.1 i/s - 6.68x  (± 0.00) slower
  Hash#fetch, string: 148525767.6 i/s - 7.67x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    49.778M i/100ms
             Hash#[]    49.778M i/100ms
          Hash#[] ||    49.780M i/100ms
          Hash#[] &&    49.797M i/100ms
          Hash#fetch    49.799M i/100ms
 Hash#fetch fallback    49.794M i/100ms
Calculating -------------------------------------
            Hash#dig    497.342M (± 0.2%) i/s -      2.489B in   5.004458s
             Hash#[]    497.598M (± 0.2%) i/s -      2.489B in   5.001838s
          Hash#[] ||    497.682M (± 0.2%) i/s -      2.489B in   5.001204s
          Hash#[] &&    497.723M (± 0.1%) i/s -      2.490B in   5.002449s
          Hash#fetch    497.713M (± 0.2%) i/s -      2.490B in   5.002846s
 Hash#fetch fallback    497.719M (± 0.1%) i/s -      2.490B in   5.002251s

Comparison:
          Hash#[] &&: 497722517.9 i/s
 Hash#fetch fallback: 497719211.0 i/s - same-ish: difference falls within error
          Hash#fetch: 497712939.1 i/s - same-ish: difference falls within error
          Hash#[] ||: 497681762.3 i/s - same-ish: difference falls within error
             Hash#[]: 497597646.6 i/s - same-ish: difference falls within error
            Hash#dig: 497341594.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   113.778M i/100ms
  Hash#fetch + block   113.360M i/100ms
    Hash#fetch + arg   114.099M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.137B (± 0.9%) i/s -      5.689B in   5.002868s
  Hash#fetch + block      1.141B (± 1.3%) i/s -      5.781B in   5.066666s
    Hash#fetch + arg      1.142B (± 1.3%) i/s -      5.819B in   5.094663s

Comparison:
    Hash#fetch + arg: 1142369510.9 i/s
  Hash#fetch + block: 1141258558.9 i/s - same-ish: difference falls within error
  Hash#fetch + const: 1137206804.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    21.333k i/100ms
         sort + to_h    11.421k i/100ms
Calculating -------------------------------------
      sort_by + to_h    327.694k (± 4.8%) i/s -      1.643M in   5.025637s
         sort + to_h    126.157k (± 5.3%) i/s -    639.576k in   5.084754s

Comparison:
      sort_by + to_h:   327694.1 i/s
         sort + to_h:   126156.8 i/s - 2.60x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   189.533k i/100ms
       Hash#each_key   227.847k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.928M (±10.4%) i/s -      9.477M in   5.026115s
       Hash#each_key      2.302M (± 3.3%) i/s -     11.620M in   5.053745s

Comparison:
       Hash#each_key:  2301934.5 i/s
      Hash#keys.each:  1927619.4 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   191.000  i/100ms
           Hash#key?     2.518M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.939k (±10.6%) i/s -      9.550k in   5.004836s
           Hash#key?     25.150M (± 0.1%) i/s -    125.885M in   5.005368s

Comparison:
           Hash#key?: 25149964.1 i/s
  Hash#keys.include?:     1938.6 i/s - 12973.08x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    40.857k i/100ms
            Hash#[]=    42.447k i/100ms
Calculating -------------------------------------
         Hash#merge!    434.222k (± 5.2%) i/s -      2.165M in   5.001496s
            Hash#[]=    433.387k (± 4.9%) i/s -      2.165M in   5.008091s

Comparison:
         Hash#merge!:   434222.1 i/s
            Hash#[]=:   433386.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        22.464k i/100ms
      Hash#merge({})    15.079k i/100ms
 Hash#dup#merge!({})    25.170k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        275.961k (± 2.6%) i/s -      1.393M in   5.050465s
      Hash#merge({})    159.140k (± 2.3%) i/s -    799.187k in   5.024523s
 Hash#dup#merge!({})    251.534k (± 2.0%) i/s -      1.258M in   5.005281s

Comparison:
{}#merge!(Hash) do end:   275960.6 i/s
 Hash#dup#merge!({}):   251534.3 i/s - 1.10x  (± 0.00) slower
      Hash#merge({}):   159140.3 i/s - 1.73x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   113.702M i/100ms
          Hash#merge   113.268M i/100ms
Calculating -------------------------------------
        Hash#**other      1.136B (± 0.9%) i/s -      5.685B in   5.003397s
          Hash#merge      1.137B (± 0.9%) i/s -      5.777B in   5.079935s

Comparison:
          Hash#merge: 1137253701.8 i/s
        Hash#**other: 1136325566.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   696.000  i/100ms
         Hash#merge!    42.251k i/100ms
Calculating -------------------------------------
          Hash#merge      7.984k (± 6.8%) i/s -     40.368k in   5.082063s
         Hash#merge!    432.069k (± 3.1%) i/s -      2.197M in   5.090264s

Comparison:
         Hash#merge!:   432069.1 i/s
          Hash#merge:     7983.6 i/s - 54.12x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.544M i/100ms
Array#each               1.363M i/100ms
Array#each_w/_object     1.360M i/100ms
Hash#select-include      2.071M i/100ms
Calculating -------------------------------------
Hash#native-slice        16.477M (± 3.9%) i/s -     83.386M in   5.068919s
Array#each               13.773M (± 3.1%) i/s -     69.512M in   5.052182s
Array#each_w/_object     13.746M (± 3.3%) i/s -     69.378M in   5.053101s
Hash#select-include      20.830M (± 3.5%) i/s -    105.617M in   5.077247s

Comparison:
Hash#select-include : 20829934.1 i/s
Hash#native-slice   : 16477433.5 i/s - 1.26x  (± 0.00) slower
Array#each          : 13772886.2 i/s - 1.51x  (± 0.00) slower
Array#each_w/_object: 13746077.6 i/s - 1.52x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   209.000  i/100ms
         Hash#value?   365.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.949k (±11.2%) i/s -      9.614k in   5.018734s
         Hash#value?      3.660k (± 0.4%) i/s -     18.615k in   5.086472s

Comparison:
         Hash#value?:     3659.8 i/s
Hash#values.include?:     1949.3 i/s - 1.88x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   114.133M i/100ms
                send   113.551M i/100ms
      method_missing   113.776M i/100ms
Calculating -------------------------------------
                call      1.136B (± 1.3%) i/s -      5.707B in   5.024913s
                send      1.138B (± 0.8%) i/s -      5.791B in   5.087357s
      method_missing      1.147B (± 1.3%) i/s -      5.803B in   5.061799s

Comparison:
      method_missing: 1146534946.3 i/s
                send: 1138404648.8 i/s - same-ish: difference falls within error
                call: 1135855058.9 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    31.968k i/100ms
      Symbol#to_proc    33.567k i/100ms
Calculating -------------------------------------
               Block    356.399k (± 2.4%) i/s -      1.790M in   5.025921s
      Symbol#to_proc    352.867k (± 2.3%) i/s -      1.779M in   5.044443s

Comparison:
               Block:   356399.5 i/s
      Symbol#to_proc:   352867.4 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   114.299M i/100ms
       block + yield   114.143M i/100ms
        unused block   113.465M i/100ms
               yield   113.577M i/100ms
Calculating -------------------------------------
          block.call      1.140B (± 1.0%) i/s -      5.715B in   5.015474s
       block + yield      1.137B (± 0.7%) i/s -      5.707B in   5.021204s
        unused block      1.136B (± 0.6%) i/s -      5.787B in   5.095673s
               yield      1.138B (± 0.9%) i/s -      5.792B in   5.088723s

Comparison:
          block.call: 1139577269.5 i/s
               yield: 1138368089.8 i/s - same-ish: difference falls within error
       block + yield: 1136667368.1 i/s - same-ish: difference falls within error
        unused block: 1135660274.9 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    22.589k i/100ms
      range#include?   640.000  i/100ms
       range#member?   837.000  i/100ms
       plain compare    33.160k i/100ms
Calculating -------------------------------------
        range#cover?    227.063k (±18.6%) i/s -      1.084M in   5.010107s
      range#include?      9.091k (±28.1%) i/s -     42.240k in   5.070159s
       range#member?      8.421k (±19.6%) i/s -     41.013k in   5.085543s
       plain compare    404.102k (± 7.8%) i/s -      2.023M in   5.044020s

Comparison:
       plain compare:   404102.3 i/s
        range#cover?:   227063.0 i/s - 1.78x  (± 0.00) slower
      range#include?:     9090.5 i/s - 44.45x  (± 0.00) slower
       range#member?:     8421.1 i/s - 47.99x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    14.438M i/100ms
           String#=~    14.588M i/100ms
          Regexp#===    14.594M i/100ms
        String#match     9.707M i/100ms
Calculating -------------------------------------
       String#match?    144.548M (± 0.4%) i/s -    736.318M in   5.094027s
           String#=~    145.757M (± 0.8%) i/s -    729.379M in   5.004423s
          Regexp#===    145.918M (± 0.0%) i/s -    729.686M in   5.000646s
        String#match     94.345M (± 0.4%) i/s -    475.658M in   5.041765s

Comparison:
          Regexp#===: 145918411.3 i/s
           String#=~: 145757242.4 i/s - same-ish: difference falls within error
       String#match?: 144548011.2 i/s - 1.01x  (± 0.00) slower
        String#match: 94345188.3 i/s - 1.55x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.849M i/100ms
      String#casecmp     3.196M i/100ms
Calculating -------------------------------------
String#downcase + ==     20.510M (± 4.5%) i/s -    103.549M in   5.059660s
      String#casecmp     32.258M (± 3.6%) i/s -    163.010M in   5.060428s

Comparison:
      String#casecmp: 32257689.0 i/s
String#downcase + ==: 20510174.1 i/s - 1.57x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     6.007M i/100ms
       String#concat     6.237M i/100ms
       String#append     8.427M i/100ms
         "foo" "bar"   114.077M i/100ms
  "#{'foo'}#{'bar'}"   114.213M i/100ms
Calculating -------------------------------------
            String#+     83.211M (± 3.9%) i/s -    420.517M in   5.061636s
       String#concat     83.437M (± 4.2%) i/s -    417.894M in   5.017642s
       String#append     83.615M (± 3.6%) i/s -    421.367M in   5.046139s
         "foo" "bar"      1.139B (± 0.8%) i/s -      5.704B in   5.009739s
  "#{'foo'}#{'bar'}"      1.139B (± 1.1%) i/s -      5.711B in   5.014830s

Comparison:
  "#{'foo'}#{'bar'}": 1138887849.1 i/s
         "foo" "bar": 1138622837.1 i/s - same-ish: difference falls within error
       String#append: 83614556.3 i/s - 13.62x  (± 0.00) slower
       String#concat: 83437465.3 i/s - 13.65x  (± 0.00) slower
            String#+: 83211198.7 i/s - 13.69x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   114.330M i/100ms
          String#dup   113.981M i/100ms
Calculating -------------------------------------
           String#+@      1.135B (± 0.6%) i/s -      5.716B in   5.035499s
          String#dup      1.135B (± 0.5%) i/s -      5.699B in   5.019277s

Comparison:
          String#dup: 1135451196.8 i/s
           String#+@: 1135281217.9 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.404M i/100ms
       String#match?     1.494M i/100ms
    String#end_with?    10.193M i/100ms
Calculating -------------------------------------
           String#=~     13.486M (± 2.8%) i/s -     67.373M in   5.000029s
       String#match?     18.244M (± 0.1%) i/s -     92.607M in   5.075912s
    String#end_with?    102.010M (± 0.4%) i/s -    519.820M in   5.095885s

Comparison:
    String#end_with?: 102009578.8 i/s
       String#match?: 18244419.2 i/s - 5.59x  (± 0.00) slower
           String#=~: 13486046.2 i/s - 7.56x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   445.815k i/100ms
          String#sub   555.378k i/100ms
String#dup["string"]=
                        11.268M i/100ms
Calculating -------------------------------------
         String#gsub      5.728M (± 7.5%) i/s -     28.532M in   5.014220s
          String#sub      8.152M (± 2.7%) i/s -     41.098M in   5.045354s
String#dup["string"]=
                        112.852M (± 0.2%) i/s -    574.680M in   5.092362s

Comparison:
String#dup["string"]=: 112851927.6 i/s
          String#sub:  8151660.5 i/s - 13.84x  (± 0.00) slower
         String#gsub:  5728455.2 i/s - 19.70x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   228.987k i/100ms
           String#tr   115.594k i/100ms
Calculating -------------------------------------
         String#gsub      2.564M (± 6.5%) i/s -     12.823M in   5.022498s
           String#tr      1.178M (± 3.7%) i/s -      5.895M in   5.014060s

Comparison:
         String#gsub:  2564458.8 i/s
           String#tr:  1177544.0 i/s - 2.18x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   113.679M i/100ms
         With Freeze   113.339M i/100ms
Calculating -------------------------------------
      Without Freeze      1.140B (± 1.0%) i/s -      5.798B in   5.087035s
         With Freeze      1.139B (± 0.9%) i/s -      5.780B in   5.075915s

Comparison:
      Without Freeze: 1139806707.5 i/s
         With Freeze: 1138868863.9 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     6.582k i/100ms
      String#squeeze    27.282k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     87.843k (± 6.8%) i/s -    440.994k in   5.044070s
      String#squeeze    273.238k (± 1.4%) i/s -      1.391M in   5.093313s

Comparison:
      String#squeeze:   273238.3 i/s
 String#gsub/regex+/:    87842.7 i/s - 3.11x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     3.157M i/100ms
       String#match?     4.947M i/100ms
  String#start_with?     9.222M i/100ms
Calculating -------------------------------------
           String#=~     32.208M (± 2.1%) i/s -    161.016M in   5.001538s
       String#match?     45.540M (± 0.1%) i/s -    232.508M in   5.105539s
  String#start_with?     92.015M (± 0.4%) i/s -    461.086M in   5.011083s

Comparison:
  String#start_with?: 92014832.8 i/s
       String#match?: 45540415.4 i/s - 2.02x  (± 0.00) slower
           String#=~: 32207824.5 i/s - 2.86x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   108.765k i/100ms
    String#[0, n] ==   238.384k i/100ms
   String#[RANGE] ==   320.747k i/100ms
   String#[0...n] ==   224.498k i/100ms
Calculating -------------------------------------
  String#start_with?      4.067M (± 0.1%) i/s -     20.339M in   5.000689s
    String#[0, n] ==      2.540M (± 3.9%) i/s -     12.873M in   5.077448s
   String#[RANGE] ==      3.264M (± 3.2%) i/s -     16.358M in   5.017501s
   String#[0...n] ==      2.271M (± 3.7%) i/s -     11.449M in   5.049184s

Comparison:
  String#start_with?:  4067257.8 i/s
   String#[RANGE] ==:  3263852.6 i/s - 1.25x  (± 0.00) slower
    String#[0, n] ==:  2539532.0 i/s - 1.60x  (± 0.00) slower
   String#[0...n] ==:  2270967.2 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    11.270M i/100ms
 String#sub!'string'   500.064k i/100ms
String#gsub!'string'   575.638k i/100ms
  String#[/regexp/]=     1.817M i/100ms
 String#sub!/regexp/     2.232M i/100ms
String#gsub!/regexp/   658.305k i/100ms
Calculating -------------------------------------
  String#['string']=    112.881M (± 0.2%) i/s -    574.761M in   5.091776s
 String#sub!'string'      8.913M (±11.9%) i/s -     42.005M in   5.039609s
String#gsub!'string'      5.952M (± 3.2%) i/s -     29.933M in   5.034714s
  String#[/regexp/]=     18.141M (± 2.0%) i/s -     90.872M in   5.011207s
 String#sub!/regexp/     22.361M (± 1.5%) i/s -    113.836M in   5.092097s
String#gsub!/regexp/      6.582M (± 2.2%) i/s -     32.915M in   5.003123s

Comparison:
  String#['string']=: 112880514.4 i/s
 String#sub!/regexp/: 22360914.1 i/s - 5.05x  (± 0.00) slower
  String#[/regexp/]=: 18141159.7 i/s - 6.22x  (± 0.00) slower
 String#sub!'string':  8913429.4 i/s - 12.66x  (± 0.00) slower
String#gsub!/regexp/:  6582294.7 i/s - 17.15x  (± 0.00) slower
String#gsub!'string':  5952282.4 i/s - 18.96x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     2.412M i/100ms
        String#chomp     4.608M i/100ms
String#delete_suffix     9.740M i/100ms
Calculating -------------------------------------
          String#sub     25.020M (± 4.3%) i/s -    125.434M in   5.024287s
        String#chomp     46.053M (± 0.3%) i/s -    230.391M in   5.002736s
String#delete_suffix    108.686M (± 7.8%) i/s -    545.429M in   5.052169s

Comparison:
String#delete_suffix: 108686456.6 i/s
        String#chomp: 46053361.1 i/s - 2.36x  (± 0.00) slower
          String#sub: 25020364.3 i/s - 4.34x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   113.797M i/100ms
          String#sub    15.469M i/100ms
Calculating -------------------------------------
String#delete_prefix      1.140B (± 1.5%) i/s -      5.804B in   5.093401s
          String#sub    154.646M (± 0.2%) i/s -    773.458M in   5.001486s

Comparison:
String#delete_prefix: 1139684983.9 i/s
          String#sub: 154646292.0 i/s - 7.37x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.573M i/100ms
    String#unpack[0]     1.637M i/100ms
Calculating -------------------------------------
      String#unpack1     16.509M (± 3.1%) i/s -     83.350M in   5.053822s
    String#unpack[0]     16.211M (± 3.0%) i/s -     81.855M in   5.053968s

Comparison:
      String#unpack1: 16508928.8 i/s
    String#unpack[0]: 16211411.9 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 23.0.0-dev-6c2da4e0, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    23.061k i/100ms
          Time.parse   363.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    342.406k (±18.9%) i/s -      1.637M in   5.008179s
          Time.parse     10.062k (±23.4%) i/s -     43.923k in   5.009354s

Comparison:
        Time.iso8601:   342405.8 i/s
          Time.parse:    10062.4 i/s - 34.03x  (± 0.00) slower

