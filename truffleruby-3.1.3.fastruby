$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       198.618M i/100ms
Function with splat arguments
                       729.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.996B (± 0.7%) i/s -     10.130B in   5.076006s
Function with splat arguments
                          7.669k (± 7.8%) i/s -     38.637k in   5.092896s

Comparison:
Function with single Array argument: 1995653306.7 i/s
Function with splat arguments:     7669.3 i/s - 260214.91x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   199.761M i/100ms
Sequential Assignment
                       199.119M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.988B (± 1.2%) i/s -      9.988B in   5.026120s
Sequential Assignment
                          1.996B (± 0.5%) i/s -     10.155B in   5.088962s

Comparison:
Sequential Assignment: 1995564228.5 i/s
 Parallel Assignment: 1987515331.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   190.485M i/100ms
       attr_accessor   199.910M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.996B (± 0.6%) i/s -     10.096B in   5.059354s
       attr_accessor      2.000B (± 0.5%) i/s -     10.195B in   5.098437s

Comparison:
       attr_accessor: 1999769608.8 i/s
   getter_and_setter: 1995535332.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     7.114k i/100ms
         respond_to?   199.352M i/100ms
Calculating -------------------------------------
      begin...rescue     47.757k (± 6.9%) i/s -    241.876k in   5.100893s
         respond_to?      1.994B (± 0.4%) i/s -     10.167B in   5.098229s

Comparison:
         respond_to?: 1994248724.7 i/s
      begin...rescue:    47756.7 i/s - 41758.52x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   199.003M i/100ms
             &method   199.922M i/100ms
Calculating -------------------------------------
              normal      1.986B (± 0.5%) i/s -      9.950B in   5.010758s
             &method      1.988B (± 0.8%) i/s -      9.996B in   5.028127s

Comparison:
             &method: 1988155456.5 i/s
              normal: 1985805900.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        99.000  i/100ms
       define_method   124.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.275k (±38.0%) i/s -      4.158k in   6.303663s
       define_method      2.589k (±58.1%) i/s -      5.580k in   6.221569s

Comparison:
       define_method:     2589.2 i/s
module_eval with string:     1275.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    61.359k i/100ms
       Kernel#format    54.802k i/100ms
            String#%    53.792k i/100ms
Calculating -------------------------------------
         Float#round    656.284k (± 2.6%) i/s -      3.313M in   5.052109s
       Kernel#format    545.871k (± 2.5%) i/s -      2.740M in   5.022997s
            String#%    541.055k (± 2.5%) i/s -      2.743M in   5.073669s

Comparison:
         Float#round:   656284.0 i/s
       Kernel#format:   545871.0 i/s - 1.20x  (± 0.00) slower
            String#%:   541055.4 i/s - 1.21x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   199.883M i/100ms
          OpenStruct   199.504M i/100ms
Calculating -------------------------------------
                Hash      1.992B (± 0.5%) i/s -      9.994B in   5.016913s
          OpenStruct      1.996B (± 0.5%) i/s -     10.175B in   5.096599s

Comparison:
          OpenStruct: 1996414276.0 i/s
                Hash: 1992147257.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   183.884M i/100ms
          OpenStruct     2.235k i/100ms
Calculating -------------------------------------
                Hash      1.988B (± 0.5%) i/s -     10.114B in   5.087329s
          OpenStruct     24.741k (± 9.2%) i/s -    122.925k in   5.037630s

Comparison:
                Hash: 1988047490.5 i/s
          OpenStruct:    24740.7 i/s - 80355.32x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   646.876k i/100ms
  ancestors.include?   127.150k i/100ms
Calculating -------------------------------------
  less than or equal      7.005M (± 4.3%) i/s -     35.578M in   5.088722s
  ancestors.include?      1.338M (± 3.4%) i/s -      6.739M in   5.043895s

Comparison:
  less than or equal:  7004796.9 i/s
  ancestors.include?:  1337647.3 i/s - 5.24x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     19.980  (± 0.0%) i/s -    100.000  in   5.005317s
         Kernel loop     19.999  (± 0.0%) i/s -    100.000  in   5.000698s

Comparison:
         Kernel loop:       20.0 i/s
          While Loop:       20.0 i/s - 1.00x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   199.154M i/100ms
         Array#first   198.554M i/100ms
Calculating -------------------------------------
           Array#[0]      1.991B (± 0.5%) i/s -      9.958B in   5.000945s
         Array#first      1.998B (± 0.6%) i/s -     10.126B in   5.069015s

Comparison:
         Array#first: 1997747637.5 i/s
           Array#[0]: 1991219649.9 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   199.586M i/100ms
          Array#last   199.102M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.996B (± 0.6%) i/s -      9.979B in   5.000470s
          Array#last      1.998B (± 0.4%) i/s -     10.154B in   5.082990s

Comparison:
          Array#last: 1997722766.6 i/s
          Array#[-1]: 1995748221.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   409.519k i/100ms
Calculating -------------------------------------
                find      5.761  (±34.7%) i/s -     10.000  in   5.033246s
             bsearch      4.145M (± 4.2%) i/s -     20.885M in   5.048244s

Comparison:
             bsearch:  4144718.8 i/s
                find:        5.8 i/s - 719382.48x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.104  (± 0.0%) i/s -      1.000  in   9.659540s
        Array#insert      0.789  (± 0.0%) i/s -      4.000  in   5.069381s

Comparison:
        Array#insert:        0.8 i/s
       Array#unshift:        0.1 i/s - 7.62x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   199.015M i/100ms
          Array#size   200.193M i/100ms
         Array#count   199.704M i/100ms
Calculating -------------------------------------
        Array#length      1.997B (± 0.6%) i/s -     10.150B in   5.082660s
          Array#size      1.991B (± 0.3%) i/s -     10.010B in   5.027870s
         Array#count      1.991B (± 0.2%) i/s -      9.985B in   5.015787s

Comparison:
        Array#length: 1997009340.0 i/s
          Array#size: 1990849619.3 i/s - same-ish: difference falls within error
         Array#count: 1990758499.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    19.923k i/100ms
        Array#sample     2.312M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    206.824k (± 2.2%) i/s -      1.036M in   5.011653s
        Array#sample     23.031M (± 0.3%) i/s -    115.597M in   5.019246s

Comparison:
        Array#sample: 23031030.8 i/s
 Array#shuffle.first:   206823.8 i/s - 111.36x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   337.000  i/100ms
          Date.parse   415.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     39.326k (±32.6%) i/s -    142.551k in   4.995330s
          Date.parse     18.922k (±28.5%) i/s -     73.040k in   4.995950s

Comparison:
        Date.iso8601:    39325.6 i/s
          Date.parse:    18922.4 i/s - 2.08x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   121.141k i/100ms
           Array#map   517.311k i/100ms
Calculating -------------------------------------
   Array#each + push      1.248M (± 4.5%) i/s -      6.299M in   5.059153s
           Array#map      5.209M (± 6.8%) i/s -     26.383M in   5.089059s

Comparison:
           Array#map:  5209283.7 i/s
   Array#each + push:  1247737.3 i/s - 4.17x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     8.282M i/100ms
               #each    38.456M i/100ms
Calculating -------------------------------------
            For loop     82.958M (± 0.4%) i/s -    422.365M in   5.091407s
               #each    382.685M (± 0.4%) i/s -      1.923B in   5.024554s

Comparison:
               #each: 382685078.2 i/s
            For loop: 82957977.6 i/s - 4.61x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   759.557k i/100ms
     each_with_index   763.509k i/100ms
Calculating -------------------------------------
          While Loop      7.654M (± 0.5%) i/s -     38.737M in   5.061276s
     each_with_index      7.631M (± 0.3%) i/s -     38.175M in   5.002790s

Comparison:
          While Loop:  7653840.1 i/s
     each_with_index:  7630922.6 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   122.377k i/100ms
      inject to_proc   122.926k i/100ms
        inject block   122.913k i/100ms
Calculating -------------------------------------
       inject symbol      1.229M (± 0.6%) i/s -      6.241M in   5.078658s
      inject to_proc      1.228M (± 0.2%) i/s -      6.146M in   5.006952s
        inject block      1.229M (± 0.4%) i/s -      6.146M in   5.001244s

Comparison:
       inject symbol:  1228951.5 i/s
        inject block:  1228843.7 i/s - same-ish: difference falls within error
      inject to_proc:  1227560.8 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     8.525k i/100ms
   Array#map.flatten    10.516k i/100ms
      Array#flat_map    25.484k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    105.808k (± 5.6%) i/s -    528.550k in   5.011350s
   Array#map.flatten    102.546k (± 5.4%) i/s -    515.284k in   5.040227s
      Array#flat_map    249.041k (± 4.1%) i/s -      1.249M in   5.022938s

Comparison:
      Array#flat_map:   249041.4 i/s
Array#map.flatten(1):   105808.2 i/s - 2.35x  (± 0.00) slower
   Array#map.flatten:   102546.1 i/s - 2.43x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   137.264k i/100ms
  Array#reverse_each     1.615M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.594M (± 7.5%) i/s -      7.961M in   5.049359s
  Array#reverse_each     16.238M (± 0.4%) i/s -     82.389M in   5.073923s

Comparison:
  Array#reverse_each: 16237985.1 i/s
  Array#reverse.each:  1593715.6 i/s - 10.19x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       526.302k i/100ms
   Enumerable#detect     3.377M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          5.559M (± 8.0%) i/s -    110.523M in  20.100768s
   Enumerable#detect     33.794M (± 0.5%) i/s -    678.831M in  20.088061s

Comparison:
   Enumerable#detect: 33793575.6 i/s
Enumerable#select.first:  5559033.8 i/s - 6.08x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       147.975k i/100ms
Enumerable#select.last
                       326.798k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.597M (± 2.4%) i/s -      7.991M in   5.007726s
Enumerable#select.last
                          3.169M (± 7.8%) i/s -     15.686M in   5.001728s

Comparison:
Enumerable#select.last:  3169388.6 i/s
Enumerable#reverse.detect:  1596570.9 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.078k i/100ms
  Enumerable#sort_by     2.189k i/100ms
     Enumerable#sort     2.767k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         15.667k (±12.6%) i/s -     76.886k in   5.049239s
  Enumerable#sort_by     21.138k (±16.2%) i/s -    100.694k in   5.073648s
     Enumerable#sort     29.124k (± 1.7%) i/s -    146.651k in   5.037091s

Comparison:
     Enumerable#sort:    29124.1 i/s
  Enumerable#sort_by:    21138.1 i/s - 1.38x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    15667.1 i/s - 1.86x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   415.370k i/100ms
Enumerable#sort_by...first
                         4.253k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      4.191M (± 0.4%) i/s -     21.184M in   5.054277s
Enumerable#sort_by...first
                         49.597k (± 3.0%) i/s -    250.927k in   5.063926s

Comparison:
   Enumerable#min_by:  4191334.6 i/s
Enumerable#sort_by...first:    49597.2 i/s - 84.51x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   176.298k i/100ms
            Hash#dup   190.528k i/100ms
Calculating -------------------------------------
              Hash[]      2.022M (± 4.1%) i/s -     10.225M in   5.065025s
            Hash#dup      1.916M (± 4.2%) i/s -      9.717M in   5.081068s

Comparison:
              Hash[]:  2022163.9 i/s
            Hash#dup:  1915669.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   198.933M i/100ms
  Hash#fetch, symbol   199.002M i/100ms
     Hash#[], string     2.200M i/100ms
  Hash#fetch, string     2.154M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.997B (± 0.6%) i/s -     10.146B in   5.079948s
  Hash#fetch, symbol      1.995B (± 0.4%) i/s -     10.149B in   5.086658s
     Hash#[], string    131.482M (± 1.1%) i/s -    657.891M in   5.004232s
  Hash#fetch, string    138.720M (± 1.1%) i/s -    693.588M in   5.000542s

Comparison:
     Hash#[], symbol: 1997241954.0 i/s
  Hash#fetch, symbol: 1995272789.3 i/s - same-ish: difference falls within error
  Hash#fetch, string: 138719978.2 i/s - 14.40x  (± 0.00) slower
     Hash#[], string: 131481567.1 i/s - 15.19x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    41.535M i/100ms
             Hash#[]    41.529M i/100ms
          Hash#[] ||    41.728M i/100ms
          Hash#[] &&    41.615M i/100ms
          Hash#fetch    41.664M i/100ms
 Hash#fetch fallback    41.772M i/100ms
Calculating -------------------------------------
            Hash#dig    414.924M (± 0.4%) i/s -      2.077B in   5.005252s
             Hash#[]    415.910M (± 0.5%) i/s -      2.118B in   5.092468s
          Hash#[] ||    416.325M (± 0.6%) i/s -      2.086B in   5.011679s
          Hash#[] &&    416.514M (± 0.6%) i/s -      2.122B in   5.095692s
          Hash#fetch    416.563M (± 0.5%) i/s -      2.083B in   5.001062s
 Hash#fetch fallback    415.898M (± 0.5%) i/s -      2.089B in   5.022007s

Comparison:
          Hash#fetch: 416562730.3 i/s
          Hash#[] &&: 416513897.5 i/s - same-ish: difference falls within error
          Hash#[] ||: 416325005.1 i/s - same-ish: difference falls within error
             Hash#[]: 415909788.4 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 415897851.3 i/s - same-ish: difference falls within error
            Hash#dig: 414923607.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   199.684M i/100ms
  Hash#fetch + block   199.236M i/100ms
    Hash#fetch + arg   198.879M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.992B (± 0.5%) i/s -      9.984B in   5.011055s
  Hash#fetch + block      1.993B (± 0.3%) i/s -     10.161B in   5.099039s
    Hash#fetch + arg      1.996B (± 0.5%) i/s -     10.143B in   5.081178s

Comparison:
    Hash#fetch + arg: 1996199106.7 i/s
  Hash#fetch + block: 1992761546.3 i/s - same-ish: difference falls within error
  Hash#fetch + const: 1992488956.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    14.307k i/100ms
         sort + to_h     1.916k i/100ms
Calculating -------------------------------------
      sort_by + to_h    225.219k (± 8.4%) i/s -      1.116M in   5.029328s
         sort + to_h     53.129k (±10.0%) i/s -    260.576k in   5.013077s

Comparison:
      sort_by + to_h:   225219.0 i/s
         sort + to_h:    53129.2 i/s - 4.24x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each    94.508k i/100ms
       Hash#each_key   123.626k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.155M (±10.1%) i/s -      5.670M in   5.045512s
       Hash#each_key      1.233M (± 3.5%) i/s -      6.181M in   5.019656s

Comparison:
       Hash#each_key:  1232949.3 i/s
      Hash#keys.each:  1154657.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   217.000  i/100ms
           Hash#key?     1.862M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      2.120k (±11.7%) i/s -     10.416k in   5.015836s
           Hash#key?     18.658M (± 1.3%) i/s -     94.978M in   5.091326s

Comparison:
           Hash#key?: 18658196.4 i/s
  Hash#keys.include?:     2119.6 i/s - 8802.84x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    13.528k i/100ms
            Hash#[]=    20.538k i/100ms
Calculating -------------------------------------
         Hash#merge!    214.466k (± 4.4%) i/s -      1.082M in   5.056435s
            Hash#[]=    213.791k (± 3.2%) i/s -      1.068M in   5.000485s

Comparison:
         Hash#merge!:   214465.7 i/s
            Hash#[]=:   213790.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         9.925k i/100ms
      Hash#merge({})     7.714k i/100ms
 Hash#dup#merge!({})    13.362k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        127.943k (± 5.5%) i/s -    645.125k in   5.058765s
      Hash#merge({})     80.349k (± 4.7%) i/s -    401.128k in   5.003870s
 Hash#dup#merge!({})    134.620k (± 5.3%) i/s -    681.462k in   5.076751s

Comparison:
 Hash#dup#merge!({}):   134620.4 i/s
{}#merge!(Hash) do end:   127943.1 i/s - same-ish: difference falls within error
      Hash#merge({}):    80349.4 i/s - 1.68x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   199.245M i/100ms
          Hash#merge   199.940M i/100ms
Calculating -------------------------------------
        Hash#**other      1.995B (± 0.5%) i/s -     10.161B in   5.094878s
          Hash#merge      1.990B (± 0.2%) i/s -      9.997B in   5.022869s

Comparison:
        Hash#**other: 1994508987.8 i/s
          Hash#merge: 1990304044.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   269.000  i/100ms
         Hash#merge!    21.525k i/100ms
Calculating -------------------------------------
          Hash#merge      3.134k (± 7.9%) i/s -     15.602k in   5.034378s
         Hash#merge!    215.824k (± 3.3%) i/s -      1.098M in   5.091942s

Comparison:
         Hash#merge!:   215823.9 i/s
          Hash#merge:     3134.0 i/s - 68.87x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      874.355k i/100ms
Array#each             819.166k i/100ms
Array#each_w/_object   836.137k i/100ms
Hash#select-include      1.379M i/100ms
Calculating -------------------------------------
Hash#native-slice         9.887M (± 4.4%) i/s -     49.838M in   5.051166s
Array#each                8.424M (± 4.2%) i/s -     42.597M in   5.065685s
Array#each_w/_object      8.423M (± 3.0%) i/s -     42.643M in   5.067484s
Hash#select-include      13.844M (± 4.0%) i/s -     70.309M in   5.086807s

Comparison:
Hash#select-include : 13843955.4 i/s
Hash#native-slice   :  9886843.0 i/s - 1.40x  (± 0.00) slower
Array#each          :  8424403.0 i/s - 1.64x  (± 0.00) slower
Array#each_w/_object:  8422877.8 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   140.000  i/100ms
         Hash#value?   516.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.757k (±10.2%) i/s -      8.680k in   5.038169s
         Hash#value?      5.171k (± 0.2%) i/s -     26.316k in   5.089333s

Comparison:
         Hash#value?:     5170.8 i/s
Hash#values.include?:     1757.1 i/s - 2.94x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   189.717M i/100ms
                send   199.029M i/100ms
      method_missing   199.203M i/100ms
Calculating -------------------------------------
                call      1.989B (± 0.3%) i/s -     10.055B in   5.054423s
                send      1.989B (± 0.3%) i/s -      9.951B in   5.002585s
      method_missing      1.989B (± 0.5%) i/s -      9.960B in   5.007534s

Comparison:
                call: 1989363212.2 i/s
                send: 1989280892.3 i/s - same-ish: difference falls within error
      method_missing: 1989080050.4 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    13.632k i/100ms
      Symbol#to_proc    14.796k i/100ms
Calculating -------------------------------------
               Block    146.091k (± 7.7%) i/s -    722.496k in   5.000722s
      Symbol#to_proc    148.592k (± 3.0%) i/s -    754.596k in   5.082852s

Comparison:
      Symbol#to_proc:   148591.8 i/s
               Block:   146091.4 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   194.061M i/100ms
       block + yield   199.098M i/100ms
        unused block   199.160M i/100ms
               yield   199.000M i/100ms
Calculating -------------------------------------
          block.call      1.989B (± 0.3%) i/s -     10.091B in   5.073831s
       block + yield      1.991B (± 0.1%) i/s -      9.955B in   5.000988s
        unused block      1.991B (± 0.2%) i/s -      9.958B in   5.002309s
               yield      1.990B (± 0.2%) i/s -     10.149B in   5.099032s

Comparison:
        unused block: 1990685344.5 i/s
       block + yield: 1990584793.4 i/s - same-ish: difference falls within error
               yield: 1990386422.0 i/s - same-ish: difference falls within error
          block.call: 1988878293.9 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     7.808k i/100ms
      range#include?   302.000  i/100ms
       range#member?   661.000  i/100ms
       plain compare    23.130k i/100ms
Calculating -------------------------------------
        range#cover?    120.811k (±21.8%) i/s -    569.984k in   5.024119s
      range#include?      8.300k (±28.2%) i/s -     36.844k in   5.037634s
       range#member?      6.624k (±18.1%) i/s -     31.728k in   5.081724s
       plain compare    256.828k (±24.5%) i/s -      1.226M in   5.063493s

Comparison:
       plain compare:   256827.6 i/s
        range#cover?:   120811.2 i/s - 2.13x  (± 0.00) slower
      range#include?:     8300.0 i/s - 30.94x  (± 0.00) slower
       range#member?:     6623.6 i/s - 38.77x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    11.295M i/100ms
           String#=~     9.557M i/100ms
          Regexp#===     9.574M i/100ms
        String#match     9.578M i/100ms
Calculating -------------------------------------
       String#match?    113.180M (± 0.1%) i/s -    576.049M in   5.089673s
           String#=~     95.766M (± 0.1%) i/s -    487.411M in   5.089607s
          Regexp#===     95.768M (± 0.1%) i/s -    488.298M in   5.098741s
        String#match     95.789M (± 0.1%) i/s -    488.471M in   5.099427s

Comparison:
       String#match?: 113180113.6 i/s
        String#match: 95789485.9 i/s - 1.18x  (± 0.00) slower
          Regexp#===: 95768386.9 i/s - 1.18x  (± 0.00) slower
           String#=~: 95766090.5 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.409M i/100ms
      String#casecmp     2.322M i/100ms
Calculating -------------------------------------
String#downcase + ==     15.222M (± 3.0%) i/s -     76.080M in   5.002671s
      String#casecmp     24.109M (± 4.1%) i/s -    120.760M in   5.017496s

Comparison:
      String#casecmp: 24109369.7 i/s
String#downcase + ==: 15221662.0 i/s - 1.58x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     4.970M i/100ms
       String#concat     6.361M i/100ms
       String#append     6.316M i/100ms
         "foo" "bar"   199.232M i/100ms
  "#{'foo'}#{'bar'}"   199.208M i/100ms
Calculating -------------------------------------
            String#+     62.462M (± 3.3%) i/s -    313.082M in   5.017769s
       String#concat     62.859M (± 3.4%) i/s -    318.036M in   5.065319s
       String#append     62.647M (± 2.3%) i/s -    315.803M in   5.043605s
         "foo" "bar"      1.991B (± 0.2%) i/s -      9.962B in   5.002628s
  "#{'foo'}#{'bar'}"      1.989B (± 0.3%) i/s -      9.960B in   5.006730s

Comparison:
         "foo" "bar": 1991280424.2 i/s
  "#{'foo'}#{'bar'}": 1989424855.0 i/s - same-ish: difference falls within error
       String#concat: 62858781.1 i/s - 31.68x  (± 0.00) slower
       String#append: 62646960.9 i/s - 31.79x  (± 0.00) slower
            String#+: 62461746.2 i/s - 31.88x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   198.841M i/100ms
          String#dup   198.791M i/100ms
Calculating -------------------------------------
           String#+@      1.988B (± 0.3%) i/s -      9.942B in   5.000244s
          String#dup      1.990B (± 0.2%) i/s -     10.138B in   5.094511s

Comparison:
          String#dup: 1990066217.8 i/s
           String#+@: 1988335197.9 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   782.564k i/100ms
       String#match?   742.788k i/100ms
    String#end_with?    10.342M i/100ms
Calculating -------------------------------------
           String#=~      7.503M (± 2.0%) i/s -     37.563M in   5.008816s
       String#match?      9.610M (± 1.3%) i/s -     48.281M in   5.025215s
    String#end_with?    103.242M (± 0.4%) i/s -    517.121M in   5.008897s

Comparison:
    String#end_with?: 103242006.4 i/s
       String#match?:  9609555.9 i/s - 10.74x  (± 0.00) slower
           String#=~:  7502793.1 i/s - 13.76x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    43.123k i/100ms
          String#sub   214.217k i/100ms
String#dup["string"]=
                         7.546M i/100ms
Calculating -------------------------------------
         String#gsub      3.155M (±11.9%) i/s -     15.395M in   5.004083s
          String#sub      4.557M (± 6.8%) i/s -     22.707M in   5.008642s
String#dup["string"]=
                         75.425M (± 0.1%) i/s -    377.278M in   5.002029s

Comparison:
String#dup["string"]=: 75425016.5 i/s
          String#sub:  4556759.0 i/s - 16.55x  (± 0.00) slower
         String#gsub:  3154711.5 i/s - 23.91x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    34.788k i/100ms
           String#tr    76.794k i/100ms
Calculating -------------------------------------
         String#gsub      1.516M (±12.1%) i/s -      7.375M in   5.012932s
           String#tr    766.790k (± 4.4%) i/s -      3.840M in   5.017408s

Comparison:
         String#gsub:  1516161.6 i/s
           String#tr:   766790.3 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   198.923M i/100ms
         With Freeze   198.822M i/100ms
Calculating -------------------------------------
      Without Freeze      1.988B (± 0.3%) i/s -      9.946B in   5.002487s
         With Freeze      1.989B (± 0.3%) i/s -     10.140B in   5.098032s

Comparison:
         With Freeze: 1989010153.2 i/s
      Without Freeze: 1988257146.4 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.595k i/100ms
      String#squeeze    20.768k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     54.773k (± 4.8%) i/s -    273.220k in   5.000112s
      String#squeeze    217.542k (± 2.3%) i/s -      1.101M in   5.062527s

Comparison:
      String#squeeze:   217541.8 i/s
 String#gsub/regex+/:    54772.7 i/s - 3.97x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     2.277M i/100ms
       String#match?     1.608M i/100ms
  String#start_with?     8.892M i/100ms
Calculating -------------------------------------
           String#=~     23.070M (± 3.5%) i/s -    116.129M in   5.040506s
       String#match?     34.109M (± 0.8%) i/s -    172.032M in   5.043888s
  String#start_with?     88.817M (± 0.2%) i/s -    444.577M in   5.005541s

Comparison:
  String#start_with?: 88817409.4 i/s
       String#match?: 34109431.4 i/s - 2.60x  (± 0.00) slower
           String#=~: 23070064.4 i/s - 3.85x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    94.861k i/100ms
    String#[0, n] ==   171.120k i/100ms
   String#[RANGE] ==   236.209k i/100ms
   String#[0...n] ==   167.597k i/100ms
Calculating -------------------------------------
  String#start_with?      3.823M (± 0.1%) i/s -     19.162M in   5.012143s
    String#[0, n] ==      1.905M (± 4.2%) i/s -      9.583M in   5.039204s
   String#[RANGE] ==      2.624M (± 3.4%) i/s -     13.228M in   5.047327s
   String#[0...n] ==      1.717M (± 4.2%) i/s -      8.715M in   5.085599s

Comparison:
  String#start_with?:  3823105.0 i/s
   String#[RANGE] ==:  2623964.3 i/s - 1.46x  (± 0.00) slower
    String#[0, n] ==:  1905147.7 i/s - 2.01x  (± 0.00) slower
   String#[0...n] ==:  1716766.9 i/s - 2.23x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     7.538M i/100ms
 String#sub!'string'    74.053k i/100ms
String#gsub!'string'   300.935k i/100ms
  String#[/regexp/]=     1.277M i/100ms
 String#sub!/regexp/   475.833k i/100ms
String#gsub!/regexp/   321.765k i/100ms
Calculating -------------------------------------
  String#['string']=     75.428M (± 0.0%) i/s -    384.461M in   5.097037s
 String#sub!'string'      4.652M (±23.2%) i/s -     21.031M in   4.998274s
String#gsub!'string'      3.782M (± 8.6%) i/s -     18.959M in   5.055317s
  String#[/regexp/]=     13.253M (± 5.7%) i/s -     66.389M in   5.027665s
 String#sub!/regexp/      4.407M (± 4.8%) i/s -     22.364M in   5.086926s
String#gsub!/regexp/      4.026M (± 4.5%) i/s -     20.271M in   5.045876s

Comparison:
  String#['string']=: 75428339.4 i/s
  String#[/regexp/]=: 13253210.5 i/s - 5.69x  (± 0.00) slower
 String#sub!'string':  4651718.4 i/s - 16.22x  (± 0.00) slower
 String#sub!/regexp/:  4407092.8 i/s - 17.12x  (± 0.00) slower
String#gsub!/regexp/:  4026417.7 i/s - 18.73x  (± 0.00) slower
String#gsub!'string':  3781884.1 i/s - 19.94x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub    44.844k i/100ms
        String#chomp     3.471M i/100ms
String#delete_suffix     3.858M i/100ms
Calculating -------------------------------------
          String#sub     16.236M (± 8.2%) i/s -     79.643M in   4.997098s
        String#chomp     34.639M (± 0.9%) i/s -    173.548M in   5.010558s
String#delete_suffix     40.482M (± 7.9%) i/s -    200.602M in   5.012296s

Comparison:
String#delete_suffix: 40482364.7 i/s
        String#chomp: 34639195.7 i/s - 1.17x  (± 0.00) slower
          String#sub: 16235959.8 i/s - 2.49x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   198.616M i/100ms
          String#sub    72.906k i/100ms
Calculating -------------------------------------
String#delete_prefix      1.989B (± 0.3%) i/s -     10.129B in   5.093246s
          String#sub    103.676M (± 1.0%) i/s -    517.851M in   4.995354s

Comparison:
String#delete_prefix: 1988813324.4 i/s
          String#sub: 103676008.1 i/s - 19.18x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.016M i/100ms
    String#unpack[0]     1.151M i/100ms
Calculating -------------------------------------
      String#unpack1     11.802M (± 3.8%) i/s -     59.943M in   5.086554s
    String#unpack[0]     11.925M (± 2.6%) i/s -     59.873M in   5.024076s

Comparison:
    String#unpack[0]: 11925382.6 i/s
      String#unpack1: 11801614.5 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 23.1.0-dev-f403dd53, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    12.309k i/100ms
          Time.parse    85.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    178.805k (±17.1%) i/s -    849.321k in   5.000375s
          Time.parse      7.011k (±23.9%) i/s -     28.985k in   4.994273s

Comparison:
        Time.iso8601:   178805.4 i/s
          Time.parse:     7011.0 i/s - 25.50x  (± 0.00) slower

