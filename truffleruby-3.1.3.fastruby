$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       238.458M i/100ms
Function with splat arguments
                       313.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          2.386B (± 0.3%) i/s -     12.161B in   5.097403s
Function with splat arguments
                          3.333k (±16.2%) i/s -     15.963k in   5.016570s

Comparison:
Function with single Array argument: 2385818239.2 i/s
Function with splat arguments:     3333.4 i/s - 715731.86x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   238.671M i/100ms
Sequential Assignment
                       238.377M i/100ms
Calculating -------------------------------------
 Parallel Assignment      2.386B (± 0.3%) i/s -     11.934B in   5.001144s
Sequential Assignment
                          2.383B (± 0.7%) i/s -     11.919B in   5.001803s

Comparison:
 Parallel Assignment: 2386188684.6 i/s
Sequential Assignment: 2383040520.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   238.316M i/100ms
       attr_accessor   238.687M i/100ms
Calculating -------------------------------------
   getter_and_setter      2.386B (± 0.3%) i/s -     12.154B in   5.094144s
       attr_accessor      2.389B (± 0.2%) i/s -     12.173B in   5.096099s

Comparison:
       attr_accessor: 2388707878.6 i/s
   getter_and_setter: 2385928800.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     7.089k i/100ms
         respond_to?   238.360M i/100ms
Calculating -------------------------------------
      begin...rescue     51.881k (± 1.7%) i/s -    262.293k in   5.057165s
         respond_to?      2.388B (± 0.2%) i/s -     12.156B in   5.091279s

Comparison:
         respond_to?: 2387697634.1 i/s
      begin...rescue:    51880.7 i/s - 46022.88x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   238.618M i/100ms
             &method   238.627M i/100ms
Calculating -------------------------------------
              normal      2.383B (± 0.4%) i/s -     11.931B in   5.006979s
             &method      2.385B (± 0.8%) i/s -     11.931B in   5.002968s

Comparison:
             &method: 2384999640.9 i/s
              normal: 2382897831.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        97.000  i/100ms
       define_method   118.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.548k (±54.7%) i/s -      4.462k in   6.204575s
       define_method      3.745k (±54.1%) i/s -      6.844k in   6.472131s

Comparison:
       define_method:     3744.6 i/s
module_eval with string:     1548.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    75.307k i/100ms
       Kernel#format    67.437k i/100ms
            String#%    67.702k i/100ms
Calculating -------------------------------------
         Float#round    817.359k (± 2.8%) i/s -      4.142M in   5.071474s
       Kernel#format    684.687k (± 2.6%) i/s -      3.439M in   5.026544s
            String#%    685.811k (± 2.4%) i/s -      3.453M in   5.037572s

Comparison:
         Float#round:   817359.0 i/s
            String#%:   685811.2 i/s - 1.19x  (± 0.00) slower
       Kernel#format:   684686.7 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   238.779M i/100ms
          OpenStruct   238.578M i/100ms
Calculating -------------------------------------
                Hash      2.386B (± 0.3%) i/s -     11.939B in   5.004209s
          OpenStruct      2.385B (± 0.4%) i/s -     11.929B in   5.001242s

Comparison:
                Hash: 2385799844.5 i/s
          OpenStruct: 2385234789.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   238.430M i/100ms
          OpenStruct     2.788k i/100ms
Calculating -------------------------------------
                Hash      2.379B (± 0.5%) i/s -     11.922B in   5.010977s
          OpenStruct     29.399k (±12.4%) i/s -    144.976k in   5.040580s

Comparison:
                Hash: 2379148517.9 i/s
          OpenStruct:    29398.9 i/s - 80926.36x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   805.864k i/100ms
  ancestors.include?   127.438k i/100ms
Calculating -------------------------------------
  less than or equal      8.408M (± 5.7%) i/s -     41.905M in   5.001940s
  ancestors.include?      1.417M (± 5.2%) i/s -      7.137M in   5.053480s

Comparison:
  less than or equal:  8408417.9 i/s
  ancestors.include?:  1416555.8 i/s - 5.94x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     23.872  (± 0.0%) i/s -    120.000  in   5.026877s
         Kernel loop     23.886  (± 0.0%) i/s -    120.000  in   5.023962s

Comparison:
         Kernel loop:       23.9 i/s
          While Loop:       23.9 i/s - 1.00x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   238.823M i/100ms
         Array#first   238.260M i/100ms
Calculating -------------------------------------
           Array#[0]      2.386B (± 0.3%) i/s -     11.941B in   5.005314s
         Array#first      2.387B (± 0.4%) i/s -     12.151B in   5.091327s

Comparison:
         Array#first: 2386691604.7 i/s
           Array#[0]: 2385717057.4 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   238.381M i/100ms
          Array#last   238.375M i/100ms
Calculating -------------------------------------
          Array#[-1]      2.385B (± 0.4%) i/s -     12.157B in   5.097118s
          Array#last      2.388B (± 0.2%) i/s -     12.157B in   5.090198s

Comparison:
          Array#last: 2388352734.2 i/s
          Array#[-1]: 2385192169.8 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   359.887k i/100ms
Calculating -------------------------------------
                find      6.909  (±28.9%) i/s -     12.000  in   5.011737s
             bsearch      3.630M (± 3.3%) i/s -     18.354M in   5.061493s

Comparison:
             bsearch:  3630422.1 i/s
                find:        6.9 i/s - 525432.88x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.125  (± 0.0%) i/s -      1.000  in   8.010054s
        Array#insert      0.945  (± 0.0%) i/s -      5.000  in   5.291969s

Comparison:
        Array#insert:        0.9 i/s
       Array#unshift:        0.1 i/s - 7.57x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   238.623M i/100ms
          Array#size   238.643M i/100ms
         Array#count   239.030M i/100ms
Calculating -------------------------------------
        Array#length      2.387B (± 0.3%) i/s -     12.170B in   5.097366s
          Array#size      2.388B (± 0.3%) i/s -     12.171B in   5.096453s
         Array#count      2.384B (± 0.8%) i/s -     11.952B in   5.013141s

Comparison:
          Array#size: 2388107394.0 i/s
        Array#length: 2387485256.3 i/s - same-ish: difference falls within error
         Array#count: 2384197257.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    19.712k i/100ms
        Array#sample     2.747M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    223.557k (± 2.2%) i/s -      1.124M in   5.028571s
        Array#sample     27.487M (± 0.1%) i/s -    140.117M in   5.097499s

Comparison:
        Array#sample: 27487423.0 i/s
 Array#shuffle.first:   223556.8 i/s - 122.95x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   395.000  i/100ms
          Date.parse   425.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     45.584k (±32.5%) i/s -    169.060k in   5.001778s
          Date.parse     20.985k (±30.3%) i/s -     81.175k in   5.026993s

Comparison:
        Date.iso8601:    45584.3 i/s
          Date.parse:    20984.5 i/s - 2.17x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   139.231k i/100ms
           Array#map   529.598k i/100ms
Calculating -------------------------------------
   Array#each + push      1.432M (± 4.5%) i/s -      7.240M in   5.067808s
           Array#map      5.340M (± 6.3%) i/s -     27.009M in   5.078885s

Comparison:
           Array#map:  5339981.3 i/s
   Array#each + push:  1431618.3 i/s - 3.73x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     9.923M i/100ms
               #each    45.961M i/100ms
Calculating -------------------------------------
            For loop     99.457M (± 0.1%) i/s -    506.092M in   5.088583s
               #each    459.072M (± 0.4%) i/s -      2.298B in   5.005877s

Comparison:
               #each: 459072098.6 i/s
            For loop: 99456617.1 i/s - 4.62x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   908.612k i/100ms
     each_with_index     1.290M i/100ms
Calculating -------------------------------------
          While Loop      9.154M (± 0.2%) i/s -     46.339M in   5.062184s
     each_with_index     12.739M (± 0.8%) i/s -     64.508M in   5.063965s

Comparison:
     each_with_index: 12739435.2 i/s
          While Loop:  9154050.5 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   145.908k i/100ms
      inject to_proc   146.373k i/100ms
        inject block   147.136k i/100ms
Calculating -------------------------------------
       inject symbol      1.470M (± 0.2%) i/s -      7.441M in   5.062242s
      inject to_proc      1.472M (± 0.1%) i/s -      7.465M in   5.070389s
        inject block      1.471M (± 0.2%) i/s -      7.357M in   5.002182s

Comparison:
      inject to_proc:  1472281.0 i/s
        inject block:  1470722.3 i/s - same-ish: difference falls within error
       inject symbol:  1469971.0 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    10.680k i/100ms
   Array#map.flatten    10.336k i/100ms
      Array#flat_map    30.386k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    113.160k (± 3.6%) i/s -    566.040k in   5.008773s
   Array#map.flatten    110.352k (± 6.2%) i/s -    558.144k in   5.081049s
      Array#flat_map    307.102k (± 2.8%) i/s -      1.550M in   5.050227s

Comparison:
      Array#flat_map:   307101.6 i/s
Array#map.flatten(1):   113160.0 i/s - 2.71x  (± 0.00) slower
   Array#map.flatten:   110351.5 i/s - 2.78x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   159.429k i/100ms
  Array#reverse_each     1.942M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.819M (± 2.7%) i/s -      9.087M in   5.000326s
  Array#reverse_each     19.424M (± 0.2%) i/s -     99.018M in   5.097794s

Comparison:
  Array#reverse_each: 19423688.0 i/s
  Array#reverse.each:  1818749.5 i/s - 10.68x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       536.978k i/100ms
   Enumerable#detect     4.037M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          5.911M (± 6.9%) i/s -    117.598M in  20.044190s
   Enumerable#detect     40.332M (± 0.5%) i/s -    807.385M in  20.019295s

Comparison:
   Enumerable#detect: 40331577.9 i/s
Enumerable#select.first:  5911233.9 i/s - 6.82x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       165.779k i/100ms
Enumerable#select.last
                       343.106k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.890M (± 4.3%) i/s -      9.449M in   5.010606s
Enumerable#select.last
                          3.807M (± 2.9%) i/s -     19.214M in   5.050860s

Comparison:
Enumerable#select.last:  3807375.4 i/s
Enumerable#reverse.detect:  1889519.8 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.308k i/100ms
  Enumerable#sort_by     2.189k i/100ms
     Enumerable#sort     3.177k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         23.007k (±17.7%) i/s -    108.476k in   5.065132s
  Enumerable#sort_by     23.000k (±14.1%) i/s -    111.639k in   5.057223s
     Enumerable#sort     32.949k (± 2.3%) i/s -    165.204k in   5.016840s

Comparison:
     Enumerable#sort:    32948.7 i/s
Enumerable#sort_by (Symbol#to_proc):    23006.8 i/s - 1.43x  (± 0.00) slower
  Enumerable#sort_by:    22999.5 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   524.406k i/100ms
Enumerable#sort_by...first
                         4.686k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      5.242M (± 0.1%) i/s -     26.220M in   5.001728s
Enumerable#sort_by...first
                         55.296k (± 3.0%) i/s -    276.474k in   5.004561s

Comparison:
   Enumerable#min_by:  5242250.0 i/s
Enumerable#sort_by...first:    55296.0 i/s - 94.80x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   175.725k i/100ms
            Hash#dup   189.642k i/100ms
Calculating -------------------------------------
              Hash[]      2.056M (± 7.3%) i/s -     10.192M in   5.004248s
            Hash#dup      2.002M (± 3.9%) i/s -     10.051M in   5.028008s

Comparison:
              Hash[]:  2055905.1 i/s
            Hash#dup:  2002064.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   238.166M i/100ms
  Hash#fetch, symbol   238.369M i/100ms
     Hash#[], string     2.503M i/100ms
  Hash#fetch, string     2.502M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      2.388B (± 0.3%) i/s -     12.146B in   5.086691s
  Hash#fetch, symbol      2.389B (± 0.3%) i/s -     12.157B in   5.089501s
     Hash#[], string    156.960M (± 0.7%) i/s -    785.876M in   5.007127s
  Hash#fetch, string    165.873M (± 0.6%) i/s -    830.710M in   5.008278s

Comparison:
  Hash#fetch, symbol: 2388618721.5 i/s
     Hash#[], symbol: 2387905481.4 i/s - same-ish: difference falls within error
  Hash#fetch, string: 165873349.3 i/s - 14.40x  (± 0.00) slower
     Hash#[], string: 156959539.7 i/s - 15.22x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    49.782M i/100ms
             Hash#[]    49.764M i/100ms
          Hash#[] ||    49.790M i/100ms
          Hash#[] &&    49.790M i/100ms
          Hash#fetch    49.784M i/100ms
 Hash#fetch fallback    49.784M i/100ms
Calculating -------------------------------------
            Hash#dig    497.546M (± 0.2%) i/s -      2.489B in   5.002732s
             Hash#[]    497.421M (± 0.3%) i/s -      2.488B in   5.002297s
          Hash#[] ||    497.451M (± 0.2%) i/s -      2.489B in   5.004489s
          Hash#[] &&    497.567M (± 0.2%) i/s -      2.490B in   5.003402s
          Hash#fetch    497.574M (± 0.2%) i/s -      2.489B in   5.002654s
 Hash#fetch fallback    497.628M (± 0.1%) i/s -      2.489B in   5.002097s

Comparison:
 Hash#fetch fallback: 497627761.3 i/s
          Hash#fetch: 497574090.2 i/s - same-ish: difference falls within error
          Hash#[] &&: 497567357.6 i/s - same-ish: difference falls within error
            Hash#dig: 497545872.9 i/s - same-ish: difference falls within error
          Hash#[] ||: 497450879.2 i/s - same-ish: difference falls within error
             Hash#[]: 497421419.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   238.303M i/100ms
  Hash#fetch + block   238.480M i/100ms
    Hash#fetch + arg   238.936M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      2.387B (± 0.2%) i/s -     12.153B in   5.092230s
  Hash#fetch + block      2.387B (± 0.3%) i/s -     12.162B in   5.094411s
    Hash#fetch + arg      2.389B (± 0.2%) i/s -     11.947B in   5.001291s

Comparison:
    Hash#fetch + arg: 2388755092.6 i/s
  Hash#fetch + block: 2387433594.1 i/s - same-ish: difference falls within error
  Hash#fetch + const: 2386677769.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    15.527k i/100ms
         sort + to_h     8.966k i/100ms
Calculating -------------------------------------
      sort_by + to_h    240.507k (± 5.6%) i/s -      1.211M in   5.052935s
         sort + to_h     59.076k (± 7.4%) i/s -    304.844k in   5.201319s

Comparison:
      sort_by + to_h:   240506.7 i/s
         sort + to_h:    59076.4 i/s - 4.07x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   128.892k i/100ms
       Hash#each_key   152.911k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.414M (±10.3%) i/s -      6.960M in   5.042087s
       Hash#each_key      1.536M (± 3.5%) i/s -      7.798M in   5.083193s

Comparison:
       Hash#each_key:  1536028.5 i/s
      Hash#keys.each:  1414342.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   180.000  i/100ms
           Hash#key?    11.789M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.728k (±12.3%) i/s -      8.460k in   5.001184s
           Hash#key?    117.859M (± 0.1%) i/s -    589.448M in   5.001285s

Comparison:
           Hash#key?: 117859440.9 i/s
  Hash#keys.include?:     1727.9 i/s - 68207.92x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    21.198k i/100ms
            Hash#[]=    22.196k i/100ms
Calculating -------------------------------------
         Hash#merge!    219.923k (± 3.6%) i/s -      1.102M in   5.018667s
            Hash#[]=    223.579k (± 3.2%) i/s -      1.132M in   5.068326s

Comparison:
            Hash#[]=:   223578.8 i/s
         Hash#merge!:   219922.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        10.729k i/100ms
      Hash#merge({})     7.319k i/100ms
 Hash#dup#merge!({})    12.699k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        119.916k (± 3.9%) i/s -    600.824k in   5.018622s
      Hash#merge({})     74.646k (± 4.4%) i/s -    373.269k in   5.010451s
 Hash#dup#merge!({})    128.690k (± 4.7%) i/s -    647.649k in   5.044259s

Comparison:
 Hash#dup#merge!({}):   128690.0 i/s
{}#merge!(Hash) do end:   119916.1 i/s - same-ish: difference falls within error
      Hash#merge({}):    74646.2 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   238.155M i/100ms
          Hash#merge   238.217M i/100ms
Calculating -------------------------------------
        Hash#**other      2.385B (± 0.4%) i/s -     12.146B in   5.092922s
          Hash#merge      2.387B (± 0.2%) i/s -     12.149B in   5.089054s

Comparison:
          Hash#merge: 2387310077.2 i/s
        Hash#**other: 2384888858.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   258.000  i/100ms
         Hash#merge!    21.890k i/100ms
Calculating -------------------------------------
          Hash#merge      3.096k (± 4.1%) i/s -     15.480k in   5.008774s
         Hash#merge!    222.730k (± 4.2%) i/s -      1.116M in   5.021048s

Comparison:
         Hash#merge!:   222729.6 i/s
          Hash#merge:     3095.8 i/s - 71.95x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.124M i/100ms
Array#each             919.575k i/100ms
Array#each_w/_object   917.229k i/100ms
Hash#select-include    363.902k i/100ms
Calculating -------------------------------------
Hash#native-slice        11.692M (± 3.7%) i/s -     58.428M in   5.004376s
Array#each                9.241M (± 2.9%) i/s -     46.898M in   5.079538s
Array#each_w/_object      9.075M (± 3.7%) i/s -     45.861M in   5.060882s
Hash#select-include       3.600M (± 3.5%) i/s -     18.195M in   5.061087s

Comparison:
Hash#native-slice   : 11691584.0 i/s
Array#each          :  9240662.2 i/s - 1.27x  (± 0.00) slower
Array#each_w/_object:  9074830.2 i/s - 1.29x  (± 0.00) slower
Hash#select-include :  3599768.7 i/s - 3.25x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   155.000  i/100ms
         Hash#value?   587.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.881k (±12.6%) i/s -      9.300k in   5.059632s
         Hash#value?      5.971k (± 0.3%) i/s -     29.937k in   5.013656s

Comparison:
         Hash#value?:     5971.1 i/s
Hash#values.include?:     1881.2 i/s - 3.17x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   238.347M i/100ms
                send   238.599M i/100ms
      method_missing   239.006M i/100ms
Calculating -------------------------------------
                call      2.386B (± 0.3%) i/s -     12.156B in   5.095020s
                send      2.388B (± 0.2%) i/s -     12.169B in   5.096280s
      method_missing      2.388B (± 0.2%) i/s -     11.950B in   5.004990s

Comparison:
                send: 2387741584.5 i/s
      method_missing: 2387688195.8 i/s - same-ish: difference falls within error
                call: 2385820650.7 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    13.283k i/100ms
      Symbol#to_proc    14.978k i/100ms
Calculating -------------------------------------
               Block    152.053k (± 3.8%) i/s -    770.414k in   5.074003s
      Symbol#to_proc    151.339k (± 6.9%) i/s -    763.878k in   5.088337s

Comparison:
               Block:   152053.2 i/s
      Symbol#to_proc:   151338.7 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   238.357M i/100ms
       block + yield   238.634M i/100ms
        unused block   238.970M i/100ms
               yield   238.947M i/100ms
Calculating -------------------------------------
          block.call      2.388B (± 0.3%) i/s -     12.156B in   5.090851s
       block + yield      2.390B (± 0.2%) i/s -     12.170B in   5.092963s
        unused block      2.387B (± 0.4%) i/s -     11.949B in   5.005556s
               yield      2.389B (± 0.3%) i/s -     11.947B in   5.001663s

Comparison:
       block + yield: 2389642230.9 i/s
               yield: 2388700165.2 i/s - same-ish: difference falls within error
          block.call: 2387865330.0 i/s - same-ish: difference falls within error
        unused block: 2387096043.4 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    16.715k i/100ms
      range#include?   297.000  i/100ms
       range#member?   819.000  i/100ms
       plain compare    20.300k i/100ms
Calculating -------------------------------------
        range#cover?    167.233k (±20.3%) i/s -    802.320k in   5.023617s
      range#include?      9.045k (±33.4%) i/s -     39.204k in   4.999809s
       range#member?      7.764k (±26.0%) i/s -     36.036k in   5.017087s
       plain compare    346.147k (± 7.1%) i/s -      1.726M in   5.012871s

Comparison:
       plain compare:   346147.2 i/s
        range#cover?:   167233.1 i/s - 2.07x  (± 0.00) slower
      range#include?:     9045.1 i/s - 38.27x  (± 0.00) slower
       range#member?:     7764.2 i/s - 44.58x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    11.052M i/100ms
           String#=~    11.483M i/100ms
          Regexp#===    10.304M i/100ms
        String#match     9.337M i/100ms
Calculating -------------------------------------
       String#match?    110.567M (± 0.1%) i/s -    563.644M in   5.097775s
           String#=~    114.628M (± 1.0%) i/s -    574.127M in   5.009184s
          Regexp#===    102.980M (± 0.1%) i/s -    515.193M in   5.002849s
        String#match     93.330M (± 0.0%) i/s -    466.827M in   5.001913s

Comparison:
           String#=~: 114627668.2 i/s
       String#match?: 110566791.0 i/s - 1.04x  (± 0.00) slower
          Regexp#===: 102979906.6 i/s - 1.11x  (± 0.00) slower
        String#match: 93329627.2 i/s - 1.23x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.259M i/100ms
      String#casecmp     2.500M i/100ms
Calculating -------------------------------------
String#downcase + ==     15.676M (± 4.1%) i/s -     79.320M in   5.068275s
      String#casecmp     25.573M (± 3.8%) i/s -    130.005M in   5.091096s

Comparison:
      String#casecmp: 25572624.5 i/s
String#downcase + ==: 15676324.7 i/s - 1.63x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     6.145M i/100ms
       String#concat     6.901M i/100ms
       String#append     7.533M i/100ms
         "foo" "bar"   238.977M i/100ms
  "#{'foo'}#{'bar'}"   239.069M i/100ms
Calculating -------------------------------------
            String#+     72.271M (± 4.3%) i/s -    362.542M in   5.025910s
       String#concat     74.246M (± 3.3%) i/s -    372.669M in   5.025164s
       String#append     74.674M (± 3.6%) i/s -    376.651M in   5.050822s
         "foo" "bar"      2.389B (± 0.2%) i/s -     11.949B in   5.000700s
  "#{'foo'}#{'bar'}"      2.389B (± 0.4%) i/s -     11.953B in   5.004039s

Comparison:
         "foo" "bar": 2389440694.4 i/s
  "#{'foo'}#{'bar'}": 2388793725.4 i/s - same-ish: difference falls within error
       String#append: 74673646.7 i/s - 32.00x  (± 0.00) slower
       String#concat: 74246011.3 i/s - 32.18x  (± 0.00) slower
            String#+: 72271035.9 i/s - 33.06x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   238.431M i/100ms
          String#dup   238.714M i/100ms
Calculating -------------------------------------
           String#+@      2.387B (± 0.3%) i/s -     12.160B in   5.093460s
          String#dup      2.388B (± 0.4%) i/s -     12.174B in   5.098751s

Comparison:
          String#dup: 2387760710.7 i/s
           String#+@: 2387390510.5 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   875.441k i/100ms
       String#match?   876.041k i/100ms
    String#end_with?    13.236M i/100ms
Calculating -------------------------------------
           String#=~      8.636M (± 2.7%) i/s -     43.772M in   5.072546s
       String#match?     10.975M (± 0.1%) i/s -     55.191M in   5.028771s
    String#end_with?    131.963M (± 0.4%) i/s -    661.803M in   5.015145s

Comparison:
    String#end_with?: 131963043.2 i/s
       String#match?: 10974989.0 i/s - 12.02x  (± 0.00) slower
           String#=~:  8635667.3 i/s - 15.28x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    44.383k i/100ms
          String#sub   367.690k i/100ms
String#dup["string"]=
                         9.056M i/100ms
Calculating -------------------------------------
         String#gsub      3.946M (±10.4%) i/s -     19.440M in   5.004542s
          String#sub      4.250M (± 9.8%) i/s -     20.958M in   5.007702s
String#dup["string"]=
                         90.474M (± 0.2%) i/s -    452.810M in   5.004894s

Comparison:
String#dup["string"]=: 90473888.5 i/s
          String#sub:  4250324.9 i/s - 21.29x  (± 0.00) slower
         String#gsub:  3945656.9 i/s - 22.93x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    41.903k i/100ms
           String#tr    85.458k i/100ms
Calculating -------------------------------------
         String#gsub      1.550M (±11.5%) i/s -      7.584M in   5.017533s
           String#tr    843.678k (± 7.6%) i/s -      4.187M in   5.010673s

Comparison:
         String#gsub:  1549741.6 i/s
           String#tr:   843678.0 i/s - 1.84x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   238.315M i/100ms
         With Freeze   238.628M i/100ms
Calculating -------------------------------------
      Without Freeze      2.386B (± 0.3%) i/s -     12.154B in   5.094177s
         With Freeze      2.388B (± 0.2%) i/s -     12.170B in   5.095851s

Comparison:
         With Freeze: 2388237617.3 i/s
      Without Freeze: 2385900904.5 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     4.174k i/100ms
      String#squeeze    26.714k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     51.632k (± 7.9%) i/s -    258.788k in   5.065992s
      String#squeeze    271.352k (± 2.6%) i/s -      1.362M in   5.024407s

Comparison:
      String#squeeze:   271352.4 i/s
 String#gsub/regex+/:    51632.2 i/s - 5.26x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.034M i/100ms
       String#match?     4.218M i/100ms
  String#start_with?    10.671M i/100ms
Calculating -------------------------------------
           String#=~     30.124M (± 5.2%) i/s -    150.946M in   5.027142s
       String#match?     42.139M (± 0.3%) i/s -    210.915M in   5.005219s
  String#start_with?    106.615M (± 0.2%) i/s -    533.561M in   5.004600s

Comparison:
  String#start_with?: 106614630.9 i/s
       String#match?: 42139426.5 i/s - 2.53x  (± 0.00) slower
           String#=~: 30124144.6 i/s - 3.54x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    95.369k i/100ms
    String#[0, n] ==   195.895k i/100ms
   String#[RANGE] ==   306.510k i/100ms
   String#[0...n] ==   194.128k i/100ms
Calculating -------------------------------------
  String#start_with?      4.695M (± 0.1%) i/s -     23.556M in   5.017518s
    String#[0, n] ==      2.105M (± 3.4%) i/s -     10.578M in   5.030094s
   String#[RANGE] ==      2.988M (± 3.6%) i/s -     15.019M in   5.032906s
   String#[0...n] ==      1.930M (± 2.9%) i/s -      9.706M in   5.033103s

Comparison:
  String#start_with?:  4694783.0 i/s
   String#[RANGE] ==:  2988177.3 i/s - 1.57x  (± 0.00) slower
    String#[0, n] ==:  2105434.3 i/s - 2.23x  (± 0.00) slower
   String#[0...n] ==:  1930122.5 i/s - 2.43x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     9.046M i/100ms
 String#sub!'string'    87.147k i/100ms
String#gsub!'string'   330.814k i/100ms
  String#[/regexp/]=     1.333M i/100ms
 String#sub!/regexp/   440.765k i/100ms
String#gsub!/regexp/   356.969k i/100ms
Calculating -------------------------------------
  String#['string']=     90.493M (± 0.0%) i/s -    461.352M in   5.098194s
 String#sub!'string'      4.527M (±20.5%) i/s -     20.915M in   4.997918s
String#gsub!'string'      3.853M (± 3.7%) i/s -     19.518M in   5.073002s
  String#[/regexp/]=     13.467M (± 2.8%) i/s -     68.006M in   5.053963s
 String#sub!/regexp/      4.888M (± 5.1%) i/s -     24.683M in   5.062958s
String#gsub!/regexp/      4.031M (± 5.9%) i/s -     20.347M in   5.065743s

Comparison:
  String#['string']=: 90493301.2 i/s
  String#[/regexp/]=: 13466727.6 i/s - 6.72x  (± 0.00) slower
 String#sub!/regexp/:  4887834.2 i/s - 18.51x  (± 0.00) slower
 String#sub!'string':  4526562.6 i/s - 19.99x  (± 0.00) slower
String#gsub!/regexp/:  4031064.3 i/s - 22.45x  (± 0.00) slower
String#gsub!'string':  3853035.1 i/s - 23.49x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub    50.911k i/100ms
        String#chomp     4.455M i/100ms
String#delete_suffix     3.735M i/100ms
Calculating -------------------------------------
          String#sub     15.794M (± 7.6%) i/s -     77.843M in   4.997641s
        String#chomp     44.518M (± 0.3%) i/s -    222.741M in   5.003494s
String#delete_suffix     40.637M (± 7.1%) i/s -    205.429M in   5.102243s

Comparison:
        String#chomp: 44517547.3 i/s
String#delete_suffix: 40636545.4 i/s - 1.10x  (± 0.00) slower
          String#sub: 15793656.7 i/s - 2.82x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   238.306M i/100ms
          String#sub    96.833k i/100ms
Calculating -------------------------------------
String#delete_prefix      2.387B (± 0.3%) i/s -     12.154B in   5.091518s
          String#sub     74.642M (± 0.7%) i/s -    373.001M in   4.997599s

Comparison:
String#delete_prefix: 2387046296.0 i/s
          String#sub: 74641890.7 i/s - 31.98x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.114M i/100ms
    String#unpack[0]     1.268M i/100ms
Calculating -------------------------------------
      String#unpack1     12.900M (± 3.8%) i/s -     64.601M in   5.015038s
    String#unpack[0]     13.134M (± 2.5%) i/s -     65.943M in   5.023834s

Comparison:
    String#unpack[0]: 13134328.3 i/s
      String#unpack1: 12900319.7 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 23.1.0-dev-6f0ce721, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    12.868k i/100ms
          Time.parse   193.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    179.984k (±36.3%) i/s -    784.948k in   5.011504s
          Time.parse      8.365k (±24.6%) i/s -     35.512k in   5.014036s

Comparison:
        Time.iso8601:   179983.7 i/s
          Time.parse:     8365.3 i/s - 21.52x  (± 0.00) slower

