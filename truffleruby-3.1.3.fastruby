$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       114.012M i/100ms
Function with splat arguments
                         1.145k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.135B (± 0.3%) i/s -      5.701B in   5.020428s
Function with splat arguments
                         13.400k (± 6.7%) i/s -     67.555k in   5.067744s

Comparison:
Function with single Array argument: 1135495495.9 i/s
Function with splat arguments:    13399.6 i/s - 84740.95x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   113.525M i/100ms
Sequential Assignment
                       113.868M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.136B (± 0.8%) i/s -      5.790B in   5.097715s
Sequential Assignment
                          1.136B (± 0.5%) i/s -      5.693B in   5.009952s

Comparison:
Sequential Assignment: 1136455603.4 i/s
 Parallel Assignment: 1135816666.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   113.424M i/100ms
       attr_accessor   113.616M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.134B (± 0.3%) i/s -      5.671B in   4.999594s
       attr_accessor      1.136B (± 0.3%) i/s -      5.681B in   5.000197s

Comparison:
       attr_accessor: 1136124461.2 i/s
   getter_and_setter: 1134349432.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    10.238k i/100ms
         respond_to?   113.428M i/100ms
Calculating -------------------------------------
      begin...rescue     77.313k (± 3.3%) i/s -    389.044k in   5.037725s
         respond_to?      1.136B (± 0.3%) i/s -      5.785B in   5.093580s

Comparison:
         respond_to?: 1135716581.3 i/s
      begin...rescue:    77312.5 i/s - 14689.95x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   113.648M i/100ms
             &method   113.546M i/100ms
Calculating -------------------------------------
              normal      1.136B (± 0.6%) i/s -      5.682B in   5.004186s
             &method      1.138B (± 0.7%) i/s -      5.791B in   5.087086s

Comparison:
             &method: 1138404371.9 i/s
              normal: 1135564334.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       140.000  i/100ms
       define_method   147.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.471k (±54.5%) i/s -      6.580k in   5.146197s
       define_method      5.945k (±51.5%) i/s -      8.379k in   6.564588s

Comparison:
       define_method:     5944.8 i/s
module_eval with string:     2470.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    79.970k i/100ms
       Kernel#format    71.249k i/100ms
            String#%    71.670k i/100ms
Calculating -------------------------------------
         Float#round    859.933k (± 2.5%) i/s -      4.318M in   5.025135s
       Kernel#format    716.095k (± 1.8%) i/s -      3.634M in   5.075922s
            String#%    714.914k (± 2.2%) i/s -      3.583M in   5.014908s

Comparison:
         Float#round:   859933.1 i/s
       Kernel#format:   716094.6 i/s - 1.20x  (± 0.00) slower
            String#%:   714914.4 i/s - 1.20x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.661M i/100ms
          OpenStruct   113.911M i/100ms
Calculating -------------------------------------
                Hash      1.134B (± 0.6%) i/s -      5.683B in   5.011825s
          OpenStruct      1.136B (± 0.4%) i/s -      5.696B in   5.014389s

Comparison:
          OpenStruct: 1135863591.5 i/s
                Hash: 1133964300.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.649M i/100ms
          OpenStruct     3.317k i/100ms
Calculating -------------------------------------
                Hash      1.133B (± 0.7%) i/s -      5.682B in   5.016593s
          OpenStruct     36.168k (±12.9%) i/s -    179.118k in   5.088917s

Comparison:
                Hash: 1132788190.8 i/s
          OpenStruct:    36168.4 i/s - 31319.81x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   835.372k i/100ms
  ancestors.include?   173.937k i/100ms
Calculating -------------------------------------
  less than or equal      9.021M (± 3.3%) i/s -     45.110M in   5.006334s
  ancestors.include?      1.838M (± 5.0%) i/s -      9.219M in   5.028163s

Comparison:
  less than or equal:  9020965.5 i/s
  ancestors.include?:  1838249.8 i/s - 4.91x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     11.342  (± 0.0%) i/s -     57.000  in   5.025630s
         Kernel loop     11.361  (± 0.0%) i/s -     57.000  in   5.017071s

Comparison:
         Kernel loop:       11.4 i/s
          While Loop:       11.3 i/s - 1.00x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   113.486M i/100ms
         Array#first   113.369M i/100ms
Calculating -------------------------------------
           Array#[0]      1.138B (± 0.9%) i/s -      5.788B in   5.086354s
         Array#first      1.134B (± 0.3%) i/s -      5.782B in   5.098468s

Comparison:
           Array#[0]: 1137991102.4 i/s
         Array#first: 1134035805.9 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   113.458M i/100ms
          Array#last   113.486M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.137B (± 1.0%) i/s -      5.786B in   5.087852s
          Array#last      1.137B (± 0.8%) i/s -      5.788B in   5.089051s

Comparison:
          Array#[-1]: 1137391199.6 i/s
          Array#last: 1137377005.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   644.554k i/100ms
Calculating -------------------------------------
                find      4.437  (±22.5%) i/s -     15.000  in   5.121078s
             bsearch      6.533M (± 2.2%) i/s -     32.872M in   5.033959s

Comparison:
             bsearch:  6533256.5 i/s
                find:        4.4 i/s - 1472500.01x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.069  (± 0.0%) i/s -      1.000  in  14.524323s
        Array#insert      1.027  (± 0.0%) i/s -      6.000  in   5.844156s

Comparison:
        Array#insert:        1.0 i/s
       Array#unshift:        0.1 i/s - 14.91x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   113.534M i/100ms
          Array#size   114.082M i/100ms
         Array#count   113.784M i/100ms
Calculating -------------------------------------
        Array#length      1.137B (± 0.4%) i/s -      5.790B in   5.092288s
          Array#size      1.139B (± 0.9%) i/s -      5.704B in   5.009687s
         Array#count      1.139B (± 0.7%) i/s -      5.803B in   5.093057s

Comparison:
         Array#count: 1139443310.7 i/s
          Array#size: 1138710694.3 i/s - same-ish: difference falls within error
        Array#length: 1137076261.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    24.831k i/100ms
        Array#sample     2.703M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    253.047k (± 1.7%) i/s -      1.266M in   5.006037s
        Array#sample     27.622M (± 0.4%) i/s -    140.549M in   5.088307s

Comparison:
        Array#sample: 27622444.0 i/s
 Array#shuffle.first:   253047.3 i/s - 109.16x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   985.000  i/100ms
          Date.parse   642.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     36.194k (±30.2%) i/s -    155.630k in   5.006382s
          Date.parse     15.378k (±25.2%) i/s -     66.768k in   5.020631s

Comparison:
        Date.iso8601:    36194.4 i/s
          Date.parse:    15377.8 i/s - 2.35x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   218.269k i/100ms
           Array#map     1.041M i/100ms
Calculating -------------------------------------
   Array#each + push      2.445M (± 4.3%) i/s -     12.223M in   5.008815s
           Array#map     10.338M (± 5.0%) i/s -     52.049M in   5.047631s

Comparison:
           Array#map: 10338332.6 i/s
   Array#each + push:  2445086.6 i/s - 4.23x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     9.238M i/100ms
               #each    41.287M i/100ms
Calculating -------------------------------------
            For loop     92.869M (± 1.0%) i/s -    471.125M in   5.073536s
               #each    409.389M (± 1.2%) i/s -      2.064B in   5.043188s

Comparison:
               #each: 409388725.1 i/s
            For loop: 92868962.3 i/s - 4.41x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   806.527k i/100ms
     each_with_index     1.028M i/100ms
Calculating -------------------------------------
          While Loop      8.056M (± 0.2%) i/s -     40.326M in   5.005875s
     each_with_index     10.293M (± 0.1%) i/s -     52.414M in   5.091976s

Comparison:
     each_with_index: 10293434.3 i/s
          While Loop:  8055840.7 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   158.897k i/100ms
      inject to_proc   160.116k i/100ms
        inject block   159.805k i/100ms
Calculating -------------------------------------
       inject symbol      1.592M (± 0.2%) i/s -      8.104M in   5.090866s
      inject to_proc      1.616M (± 0.3%) i/s -      8.166M in   5.052865s
        inject block      1.590M (± 0.4%) i/s -      7.990M in   5.025419s

Comparison:
      inject to_proc:  1616114.1 i/s
       inject symbol:  1591826.3 i/s - 1.02x  (± 0.00) slower
        inject block:  1589998.9 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    16.498k i/100ms
   Array#map.flatten    18.440k i/100ms
      Array#flat_map    44.779k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    183.676k (± 6.4%) i/s -    923.888k in   5.055065s
   Array#map.flatten    188.785k (± 4.3%) i/s -    958.880k in   5.089448s
      Array#flat_map    446.466k (± 3.8%) i/s -      2.239M in   5.023085s

Comparison:
      Array#flat_map:   446465.9 i/s
   Array#map.flatten:   188785.3 i/s - 2.36x  (± 0.00) slower
Array#map.flatten(1):   183676.0 i/s - 2.43x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   200.132k i/100ms
  Array#reverse_each     1.637M i/100ms
Calculating -------------------------------------
  Array#reverse.each      2.249M (± 3.1%) i/s -     11.408M in   5.077137s
  Array#reverse_each     16.369M (± 0.2%) i/s -     81.869M in   5.001605s

Comparison:
  Array#reverse_each: 16368657.6 i/s
  Array#reverse.each:  2249135.6 i/s - 7.28x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       684.275k i/100ms
   Enumerable#detect     2.620M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          7.719M (± 6.0%) i/s -    153.962M in  20.039004s
   Enumerable#detect     26.136M (± 0.3%) i/s -    524.088M in  20.052435s

Comparison:
   Enumerable#detect: 26136069.6 i/s
Enumerable#select.first:  7718708.1 i/s - 3.39x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       208.125k i/100ms
Enumerable#select.last
                       374.413k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.333M (± 3.0%) i/s -     11.655M in   5.000280s
Enumerable#select.last
                          3.763M (± 5.0%) i/s -     19.095M in   5.090992s

Comparison:
Enumerable#select.last:  3762805.4 i/s
Enumerable#reverse.detect:  2333033.6 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.772k i/100ms
  Enumerable#sort_by     2.816k i/100ms
     Enumerable#sort     3.840k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         28.080k (±13.1%) i/s -    138.600k in   5.030928s
  Enumerable#sort_by     25.735k (±16.9%) i/s -    126.720k in   5.087815s
     Enumerable#sort     39.625k (± 0.6%) i/s -    199.680k in   5.039481s

Comparison:
     Enumerable#sort:    39624.6 i/s
Enumerable#sort_by (Symbol#to_proc):    28080.4 i/s - 1.41x  (± 0.00) slower
  Enumerable#sort_by:    25735.1 i/s - 1.54x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   485.296k i/100ms
Enumerable#sort_by...first
                         6.254k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      4.848M (± 0.8%) i/s -     24.265M in   5.005922s
Enumerable#sort_by...first
                         67.292k (± 2.4%) i/s -    337.716k in   5.021661s

Comparison:
   Enumerable#min_by:  4847549.5 i/s
Enumerable#sort_by...first:    67291.8 i/s - 72.04x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   379.008k i/100ms
            Hash#dup   449.421k i/100ms
Calculating -------------------------------------
              Hash[]      4.712M (± 2.4%) i/s -     23.878M in   5.070759s
            Hash#dup      4.716M (± 2.0%) i/s -     23.819M in   5.053221s

Comparison:
            Hash#dup:  4715621.7 i/s
              Hash[]:  4711727.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   113.445M i/100ms
  Hash#fetch, symbol   113.451M i/100ms
     Hash#[], string     3.663M i/100ms
  Hash#fetch, string    13.232M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.136B (± 0.8%) i/s -      5.786B in   5.092611s
  Hash#fetch, symbol      1.137B (± 0.8%) i/s -      5.786B in   5.088206s
     Hash#[], string    167.982M (± 2.3%) i/s -    842.429M in   5.017743s
  Hash#fetch, string    146.552M (± 0.9%) i/s -    740.978M in   5.056492s

Comparison:
  Hash#fetch, symbol: 1137203085.3 i/s
     Hash#[], symbol: 1136170759.9 i/s - same-ish: difference falls within error
     Hash#[], string: 167981812.1 i/s - 6.77x  (± 0.00) slower
  Hash#fetch, string: 146552232.8 i/s - 7.76x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    49.737M i/100ms
             Hash#[]    49.779M i/100ms
          Hash#[] ||    49.777M i/100ms
          Hash#[] &&    49.797M i/100ms
          Hash#fetch    49.792M i/100ms
 Hash#fetch fallback    49.776M i/100ms
Calculating -------------------------------------
            Hash#dig    497.273M (± 0.2%) i/s -      2.487B in   5.000963s
             Hash#[]    497.659M (± 0.2%) i/s -      2.489B in   5.001303s
          Hash#[] ||    497.727M (± 0.2%) i/s -      2.489B in   5.000417s
          Hash#[] &&    497.267M (± 0.4%) i/s -      2.490B in   5.007102s
          Hash#fetch    497.746M (± 0.1%) i/s -      2.490B in   5.001795s
 Hash#fetch fallback    497.663M (± 0.2%) i/s -      2.489B in   5.001011s

Comparison:
          Hash#fetch: 497745941.5 i/s
          Hash#[] ||: 497726548.0 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 497663243.8 i/s - same-ish: difference falls within error
             Hash#[]: 497659111.7 i/s - same-ish: difference falls within error
            Hash#dig: 497272882.6 i/s - same-ish: difference falls within error
          Hash#[] &&: 497267271.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   113.671M i/100ms
  Hash#fetch + block   113.879M i/100ms
    Hash#fetch + arg   113.498M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.136B (± 0.6%) i/s -      5.684B in   5.005403s
  Hash#fetch + block      1.133B (± 0.5%) i/s -      5.694B in   5.025645s
    Hash#fetch + arg      1.137B (± 1.0%) i/s -      5.788B in   5.090799s

Comparison:
    Hash#fetch + arg: 1137138850.1 i/s
  Hash#fetch + const: 1135523723.3 i/s - same-ish: difference falls within error
  Hash#fetch + block: 1133004632.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    20.903k i/100ms
         sort + to_h    11.729k i/100ms
Calculating -------------------------------------
      sort_by + to_h    342.622k (± 4.4%) i/s -      1.714M in   5.013431s
         sort + to_h    130.731k (± 4.2%) i/s -    656.824k in   5.033774s

Comparison:
      sort_by + to_h:   342622.2 i/s
         sort + to_h:   130730.8 i/s - 2.62x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   177.487k i/100ms
       Hash#each_key   220.729k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.909M (±10.6%) i/s -      9.407M in   5.049345s
       Hash#each_key      2.242M (± 3.0%) i/s -     11.257M in   5.025859s

Comparison:
       Hash#each_key:  2241969.2 i/s
      Hash#keys.each:  1908781.2 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   231.000  i/100ms
           Hash#key?     2.556M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      2.337k (±12.5%) i/s -     11.550k in   5.055051s
           Hash#key?     25.316M (± 0.2%) i/s -    127.786M in   5.047547s

Comparison:
           Hash#key?: 25316446.9 i/s
  Hash#keys.include?:     2337.2 i/s - 10832.16x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    43.831k i/100ms
            Hash#[]=    42.215k i/100ms
Calculating -------------------------------------
         Hash#merge!    432.477k (± 5.0%) i/s -      2.192M in   5.081063s
            Hash#[]=    429.213k (± 5.1%) i/s -      2.153M in   5.030207s

Comparison:
         Hash#merge!:   432477.0 i/s
            Hash#[]=:   429212.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        22.697k i/100ms
      Hash#merge({})    15.105k i/100ms
 Hash#dup#merge!({})    25.080k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        279.024k (± 2.5%) i/s -      1.407M in   5.046536s
      Hash#merge({})    157.457k (± 3.9%) i/s -    800.565k in   5.092793s
 Hash#dup#merge!({})    241.274k (± 6.4%) i/s -      1.204M in   5.010996s

Comparison:
{}#merge!(Hash) do end:   279023.7 i/s
 Hash#dup#merge!({}):   241274.4 i/s - 1.16x  (± 0.00) slower
      Hash#merge({}):   157457.1 i/s - 1.77x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   113.447M i/100ms
          Hash#merge   113.476M i/100ms
Calculating -------------------------------------
        Hash#**other      1.134B (± 0.3%) i/s -      5.672B in   5.001195s
          Hash#merge      1.137B (± 0.6%) i/s -      5.787B in   5.092175s

Comparison:
          Hash#merge: 1136540159.1 i/s
        Hash#**other: 1134211800.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   725.000  i/100ms
         Hash#merge!    41.203k i/100ms
Calculating -------------------------------------
          Hash#merge      8.175k (± 5.4%) i/s -     41.325k in   5.071401s
         Hash#merge!    416.025k (± 9.1%) i/s -      2.060M in   5.022411s

Comparison:
         Hash#merge!:   416024.6 i/s
          Hash#merge:     8175.3 i/s - 50.89x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.538M i/100ms
Array#each               1.386M i/100ms
Array#each_w/_object     1.395M i/100ms
Hash#select-include      2.060M i/100ms
Calculating -------------------------------------
Hash#native-slice        16.388M (± 3.8%) i/s -     83.047M in   5.075514s
Array#each               14.070M (± 3.2%) i/s -     70.687M in   5.029518s
Array#each_w/_object     14.161M (± 3.5%) i/s -     71.141M in   5.030435s
Hash#select-include      20.483M (± 6.9%) i/s -    102.976M in   5.062482s

Comparison:
Hash#select-include : 20483380.1 i/s
Hash#native-slice   : 16387544.7 i/s - 1.25x  (± 0.00) slower
Array#each_w/_object: 14160765.8 i/s - 1.45x  (± 0.00) slower
Array#each          : 14069791.4 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   212.000  i/100ms
         Hash#value?   474.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      2.064k (±12.1%) i/s -     10.176k in   5.025205s
         Hash#value?      4.744k (± 0.2%) i/s -     24.174k in   5.096112s

Comparison:
         Hash#value?:     4743.6 i/s
Hash#values.include?:     2064.3 i/s - 2.30x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   113.472M i/100ms
                send   113.368M i/100ms
      method_missing   114.080M i/100ms
Calculating -------------------------------------
                call      1.135B (± 0.3%) i/s -      5.674B in   5.000522s
                send      1.137B (± 0.8%) i/s -      5.782B in   5.087285s
      method_missing      1.135B (± 0.2%) i/s -      5.704B in   5.026384s

Comparison:
                send: 1136580076.0 i/s
      method_missing: 1134815415.4 i/s - same-ish: difference falls within error
                call: 1134613317.0 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    31.388k i/100ms
      Symbol#to_proc    33.801k i/100ms
Calculating -------------------------------------
               Block    352.852k (± 2.4%) i/s -      1.789M in   5.073514s
      Symbol#to_proc    351.696k (± 3.3%) i/s -      1.758M in   5.003315s

Comparison:
               Block:   352851.7 i/s
      Symbol#to_proc:   351695.8 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   113.912M i/100ms
       block + yield   113.713M i/100ms
        unused block   113.670M i/100ms
               yield   114.031M i/100ms
Calculating -------------------------------------
          block.call      1.138B (± 1.0%) i/s -      5.696B in   5.004737s
       block + yield      1.139B (± 0.8%) i/s -      5.799B in   5.090623s
        unused block      1.138B (± 0.8%) i/s -      5.797B in   5.093850s
               yield      1.139B (± 1.0%) i/s -      5.702B in   5.004702s

Comparison:
               yield: 1139355455.3 i/s
       block + yield: 1139290271.2 i/s - same-ish: difference falls within error
          block.call: 1138149803.6 i/s - same-ish: difference falls within error
        unused block: 1138147660.8 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    16.154k i/100ms
      range#include?   609.000  i/100ms
       range#member?   866.000  i/100ms
       plain compare    26.693k i/100ms
Calculating -------------------------------------
        range#cover?    168.291k (±20.8%) i/s -    791.546k in   5.004130s
      range#include?     10.049k (±29.9%) i/s -     45.066k in   5.009829s
       range#member?      9.491k (±29.7%) i/s -     44.166k in   5.121201s
       plain compare    397.104k (± 4.8%) i/s -      2.002M in   5.054175s

Comparison:
       plain compare:   397103.8 i/s
        range#cover?:   168290.9 i/s - 2.36x  (± 0.00) slower
      range#include?:    10048.7 i/s - 39.52x  (± 0.00) slower
       range#member?:     9491.3 i/s - 41.84x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    14.310M i/100ms
           String#=~    13.825M i/100ms
          Regexp#===    13.826M i/100ms
        String#match     8.624M i/100ms
Calculating -------------------------------------
       String#match?    131.941M (± 1.1%) i/s -    672.567M in   5.098099s
           String#=~    136.376M (± 0.2%) i/s -    691.266M in   5.068857s
          Regexp#===    138.123M (± 0.2%) i/s -    691.314M in   5.005098s
        String#match     94.672M (± 0.4%) i/s -    474.325M in   5.010274s

Comparison:
          Regexp#===: 138122729.6 i/s
           String#=~: 136375923.8 i/s - 1.01x  (± 0.00) slower
       String#match?: 131940604.1 i/s - 1.05x  (± 0.00) slower
        String#match: 94672346.4 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.333M i/100ms
      String#casecmp     3.756M i/100ms
Calculating -------------------------------------
String#downcase + ==     26.628M (± 6.0%) i/s -    132.962M in   5.012676s
      String#casecmp     38.631M (± 5.2%) i/s -    195.302M in   5.070646s

Comparison:
      String#casecmp: 38631354.0 i/s
String#downcase + ==: 26628241.1 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     8.005M i/100ms
       String#concat     8.308M i/100ms
       String#append     8.400M i/100ms
         "foo" "bar"   113.870M i/100ms
  "#{'foo'}#{'bar'}"   113.839M i/100ms
Calculating -------------------------------------
            String#+     84.171M (± 3.3%) i/s -    424.276M in   5.046400s
       String#concat     84.309M (± 3.1%) i/s -    423.716M in   5.030890s
       String#append     84.278M (± 3.2%) i/s -    428.406M in   5.088690s
         "foo" "bar"      1.138B (± 0.8%) i/s -      5.693B in   5.001230s
  "#{'foo'}#{'bar'}"      1.137B (± 0.9%) i/s -      5.692B in   5.006134s

Comparison:
         "foo" "bar": 1138487693.7 i/s
  "#{'foo'}#{'bar'}": 1137081466.8 i/s - same-ish: difference falls within error
       String#concat: 84308747.4 i/s - 13.50x  (± 0.00) slower
       String#append: 84277579.0 i/s - 13.51x  (± 0.00) slower
            String#+: 84171415.5 i/s - 13.53x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   114.303M i/100ms
          String#dup   113.496M i/100ms
Calculating -------------------------------------
           String#+@      1.135B (± 0.6%) i/s -      5.715B in   5.036888s
          String#dup      1.136B (± 0.9%) i/s -      5.788B in   5.096920s

Comparison:
          String#dup: 1135723982.4 i/s
           String#+@: 1134700561.2 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.326M i/100ms
       String#match?     1.481M i/100ms
    String#end_with?    10.063M i/100ms
Calculating -------------------------------------
           String#=~     13.515M (± 2.3%) i/s -     67.649M in   5.008250s
       String#match?     18.484M (± 0.1%) i/s -     93.331M in   5.049375s
    String#end_with?    100.468M (± 0.5%) i/s -    503.166M in   5.008361s

Comparison:
    String#end_with?: 100468193.7 i/s
       String#match?: 18483717.9 i/s - 5.44x  (± 0.00) slower
           String#=~: 13514952.3 i/s - 7.43x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   299.735k i/100ms
          String#sub   800.538k i/100ms
String#dup["string"]=
                         9.215M i/100ms
Calculating -------------------------------------
         String#gsub      5.959M (±10.8%) i/s -     29.374M in   5.006805s
          String#sub      8.300M (± 2.8%) i/s -     41.628M in   5.019550s
String#dup["string"]=
                         92.137M (± 0.2%) i/s -    460.752M in   5.000733s

Comparison:
String#dup["string"]=: 92137243.8 i/s
          String#sub:  8299785.9 i/s - 11.10x  (± 0.00) slower
         String#gsub:  5958500.5 i/s - 15.46x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   116.799k i/100ms
           String#tr   109.978k i/100ms
Calculating -------------------------------------
         String#gsub      2.649M (± 9.5%) i/s -     13.198M in   5.036648s
           String#tr      1.118M (± 3.5%) i/s -      5.609M in   5.021969s

Comparison:
         String#gsub:  2649399.3 i/s
           String#tr:  1118364.5 i/s - 2.37x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   113.598M i/100ms
         With Freeze   113.610M i/100ms
Calculating -------------------------------------
      Without Freeze      1.136B (± 0.6%) i/s -      5.680B in   5.001865s
         With Freeze      1.139B (± 1.2%) i/s -      5.794B in   5.088824s

Comparison:
         With Freeze: 1138760714.4 i/s
      Without Freeze: 1135595508.2 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     6.576k i/100ms
      String#squeeze    27.594k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    102.044k (± 8.5%) i/s -    506.352k in   5.000225s
      String#squeeze    276.092k (± 2.2%) i/s -      1.380M in   5.000036s

Comparison:
      String#squeeze:   276091.6 i/s
 String#gsub/regex+/:   102044.3 i/s - 2.71x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     2.304M i/100ms
       String#match?     5.020M i/100ms
  String#start_with?     9.092M i/100ms
Calculating -------------------------------------
           String#=~     24.748M (± 3.4%) i/s -    124.442M in   5.034552s
       String#match?     50.135M (± 0.3%) i/s -    250.976M in   5.006097s
  String#start_with?     92.427M (± 0.6%) i/s -    463.705M in   5.017169s

Comparison:
  String#start_with?: 92426550.3 i/s
       String#match?: 50134563.0 i/s - 1.84x  (± 0.00) slower
           String#=~: 24748163.8 i/s - 3.73x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   111.901k i/100ms
    String#[0, n] ==   244.545k i/100ms
   String#[RANGE] ==   323.791k i/100ms
   String#[0...n] ==   225.740k i/100ms
Calculating -------------------------------------
  String#start_with?      4.061M (± 0.4%) i/s -     20.366M in   5.014767s
    String#[0, n] ==      2.542M (± 3.8%) i/s -     12.716M in   5.010393s
   String#[RANGE] ==      3.271M (± 3.3%) i/s -     16.513M in   5.054459s
   String#[0...n] ==      2.285M (± 3.8%) i/s -     11.513M in   5.046678s

Comparison:
  String#start_with?:  4061254.1 i/s
   String#[RANGE] ==:  3270971.3 i/s - 1.24x  (± 0.00) slower
    String#[0, n] ==:  2541965.4 i/s - 1.60x  (± 0.00) slower
   String#[0...n] ==:  2284797.7 i/s - 1.78x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     9.202M i/100ms
 String#sub!'string'   731.327k i/100ms
String#gsub!'string'   561.835k i/100ms
  String#[/regexp/]=     1.752M i/100ms
 String#sub!/regexp/   801.517k i/100ms
String#gsub!/regexp/   672.480k i/100ms
Calculating -------------------------------------
  String#['string']=     92.145M (± 0.2%) i/s -    469.322M in   5.093318s
 String#sub!'string'      8.496M (±13.0%) i/s -     40.223M in   5.039856s
String#gsub!'string'      5.799M (± 2.6%) i/s -     29.215M in   5.041436s
  String#[/regexp/]=     17.905M (± 1.8%) i/s -     91.111M in   5.090437s
 String#sub!/regexp/      9.689M (± 2.5%) i/s -     48.893M in   5.049402s
String#gsub!/regexp/      6.784M (± 2.4%) i/s -     34.296M in   5.058600s

Comparison:
  String#['string']=: 92145054.6 i/s
  String#[/regexp/]=: 17904556.3 i/s - 5.15x  (± 0.00) slower
 String#sub!/regexp/:  9688996.0 i/s - 9.51x  (± 0.00) slower
 String#sub!'string':  8495703.3 i/s - 10.85x  (± 0.00) slower
String#gsub!/regexp/:  6783793.5 i/s - 13.58x  (± 0.00) slower
String#gsub!'string':  5799241.0 i/s - 15.89x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.417M i/100ms
        String#chomp     4.679M i/100ms
String#delete_suffix    10.741M i/100ms
Calculating -------------------------------------
          String#sub     24.918M (± 7.0%) i/s -    124.652M in   5.033760s
        String#chomp     46.582M (± 3.1%) i/s -    233.970M in   5.028792s
String#delete_suffix    106.385M (± 7.5%) i/s -    537.040M in   5.078382s

Comparison:
String#delete_suffix: 106384821.5 i/s
        String#chomp: 46581874.3 i/s - 2.28x  (± 0.00) slower
          String#sub: 24917878.5 i/s - 4.27x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   113.650M i/100ms
          String#sub    15.225M i/100ms
Calculating -------------------------------------
String#delete_prefix      1.133B (± 1.6%) i/s -      5.683B in   5.018661s
          String#sub    152.273M (± 0.2%) i/s -    776.461M in   5.099150s

Comparison:
String#delete_prefix: 1132597504.9 i/s
          String#sub: 152273412.7 i/s - 7.44x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.574M i/100ms
    String#unpack[0]     1.648M i/100ms
Calculating -------------------------------------
      String#unpack1     16.586M (± 3.5%) i/s -     83.399M in   5.034487s
    String#unpack[0]     16.593M (± 2.9%) i/s -     84.070M in   5.071106s

Comparison:
    String#unpack[0]: 16593144.7 i/s
      String#unpack1: 16586356.6 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 23.0.0-dev-f9113553, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    22.785k i/100ms
          Time.parse   203.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    241.586k (±31.1%) i/s -      1.048M in   5.045303s
          Time.parse      8.644k (±25.8%) i/s -     36.134k in   4.999814s

Comparison:
        Time.iso8601:   241585.5 i/s
          Time.parse:     8644.2 i/s - 27.95x  (± 0.00) slower

