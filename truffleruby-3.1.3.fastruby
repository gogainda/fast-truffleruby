$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       198.137M i/100ms
Function with splat arguments
                       649.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.985B (± 0.4%) i/s -     10.105B in   5.089732s
Function with splat arguments
                          7.333k (± 4.7%) i/s -     36.993k in   5.055609s

Comparison:
Function with single Array argument: 1985390938.5 i/s
Function with splat arguments:     7333.5 i/s - 270730.50x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   198.512M i/100ms
Sequential Assignment
                       198.689M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.968B (± 2.4%) i/s -      9.926B in   5.047699s
Sequential Assignment
                          1.988B (± 0.2%) i/s -     10.133B in   5.096269s

Comparison:
Sequential Assignment: 1988356947.5 i/s
 Parallel Assignment: 1967561262.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   198.651M i/100ms
       attr_accessor   195.136M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.985B (± 0.4%) i/s -      9.933B in   5.004362s
       attr_accessor      1.987B (± 0.2%) i/s -      9.952B in   5.007306s

Comparison:
       attr_accessor: 1987497579.2 i/s
   getter_and_setter: 1984804873.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     6.468k i/100ms
         respond_to?   198.730M i/100ms
Calculating -------------------------------------
      begin...rescue     43.676k (± 7.4%) i/s -    219.912k in   5.079973s
         respond_to?      1.988B (± 0.2%) i/s -     10.135B in   5.097295s

Comparison:
         respond_to?: 1988366644.2 i/s
      begin...rescue:    43675.6 i/s - 45525.81x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   198.413M i/100ms
             &method   198.823M i/100ms
Calculating -------------------------------------
              normal      1.969B (± 2.6%) i/s -      9.921B in   5.041626s
             &method      1.963B (± 3.0%) i/s -      9.941B in   5.068658s

Comparison:
              normal: 1969130006.3 i/s
             &method: 1963183956.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        94.000  i/100ms
       define_method   128.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.159k (±31.7%) i/s -      3.854k in   5.017088s
       define_method      2.617k (±66.6%) i/s -      4.352k in   5.614634s

Comparison:
       define_method:     2616.8 i/s
module_eval with string:     1159.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    57.036k i/100ms
       Kernel#format    51.446k i/100ms
            String#%    51.605k i/100ms
Calculating -------------------------------------
         Float#round    603.733k (± 2.8%) i/s -      3.023M in   5.011053s
       Kernel#format    516.340k (± 2.6%) i/s -      2.624M in   5.085008s
            String#%    516.516k (± 2.8%) i/s -      2.632M in   5.099584s

Comparison:
         Float#round:   603732.9 i/s
            String#%:   516516.0 i/s - 1.17x  (± 0.00) slower
       Kernel#format:   516339.6 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   198.699M i/100ms
          OpenStruct   198.796M i/100ms
Calculating -------------------------------------
                Hash      1.985B (± 0.3%) i/s -      9.935B in   5.003980s
          OpenStruct      1.987B (± 0.5%) i/s -      9.940B in   5.003072s

Comparison:
          OpenStruct: 1986785426.6 i/s
                Hash: 1985432536.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   198.852M i/100ms
          OpenStruct     2.224k i/100ms
Calculating -------------------------------------
                Hash      1.982B (± 0.5%) i/s -      9.943B in   5.016620s
          OpenStruct     24.465k (±11.9%) i/s -    120.096k in   5.012940s

Comparison:
                Hash: 1981969291.6 i/s
          OpenStruct:    24464.5 i/s - 81014.03x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   556.773k i/100ms
  ancestors.include?   112.524k i/100ms
Calculating -------------------------------------
  less than or equal      6.417M (± 4.5%) i/s -     32.293M in   5.043169s
  ancestors.include?      1.278M (± 3.6%) i/s -      6.414M in   5.026883s

Comparison:
  less than or equal:  6417128.5 i/s
  ancestors.include?:  1277683.2 i/s - 5.02x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     19.861  (± 0.0%) i/s -    100.000  in   5.035217s
         Kernel loop     19.882  (± 0.0%) i/s -    100.000  in   5.029719s

Comparison:
         Kernel loop:       19.9 i/s
          While Loop:       19.9 i/s - 1.00x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   197.989M i/100ms
         Array#first   198.947M i/100ms
Calculating -------------------------------------
           Array#[0]      1.986B (± 0.3%) i/s -     10.097B in   5.083212s
         Array#first      1.989B (± 0.3%) i/s -      9.947B in   5.002322s

Comparison:
         Array#first: 1988562057.9 i/s
           Array#[0]: 1986451212.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   192.062M i/100ms
          Array#last   198.434M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.986B (± 0.3%) i/s -      9.987B in   5.029239s
          Array#last      1.987B (± 0.3%) i/s -     10.120B in   5.092921s

Comparison:
          Array#last: 1987115426.2 i/s
          Array#[-1]: 1985851590.4 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   369.516k i/100ms
Calculating -------------------------------------
                find      0.153  (± 0.0%) i/s -      1.000  in   6.544073s
             bsearch      4.097M (± 2.8%) i/s -     20.693M in   5.055242s

Comparison:
             bsearch:  4096738.8 i/s
                find:        0.2 i/s - 26809358.26x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.104  (± 0.0%) i/s -      1.000  in   9.625035s
        Array#insert      0.786  (± 0.0%) i/s -      4.000  in   5.088199s

Comparison:
        Array#insert:        0.8 i/s
       Array#unshift:        0.1 i/s - 7.57x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   198.666M i/100ms
          Array#size   198.798M i/100ms
         Array#count   199.053M i/100ms
Calculating -------------------------------------
        Array#length      1.987B (± 0.3%) i/s -      9.933B in   5.000091s
          Array#size      1.988B (± 0.4%) i/s -     10.139B in   5.098782s
         Array#count      1.988B (± 0.2%) i/s -      9.953B in   5.005328s

Comparison:
          Array#size: 1988477803.7 i/s
         Array#count: 1988417877.8 i/s - same-ish: difference falls within error
        Array#length: 1986644869.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    18.876k i/100ms
        Array#sample     2.458M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    216.205k (± 2.7%) i/s -      1.095M in   5.067800s
        Array#sample     23.783M (± 0.3%) i/s -    120.457M in   5.064856s

Comparison:
        Array#sample: 23783205.8 i/s
 Array#shuffle.first:   216205.3 i/s - 110.00x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   369.000  i/100ms
          Date.parse   348.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     19.770k (±35.2%) i/s -     80.073k in   4.997836s
          Date.parse     15.265k (±33.2%) i/s -     61.248k in   5.002317s

Comparison:
        Date.iso8601:    19770.3 i/s
          Date.parse:    15265.3 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   110.912k i/100ms
           Array#map   510.174k i/100ms
Calculating -------------------------------------
   Array#each + push      1.262M (± 4.4%) i/s -      6.322M in   5.021756s
           Array#map      4.957M (± 5.4%) i/s -     24.999M in   5.058297s

Comparison:
           Array#map:  4957151.5 i/s
   Array#each + push:  1261531.2 i/s - 3.93x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     7.872M i/100ms
               #each    38.256M i/100ms
Calculating -------------------------------------
            For loop     82.461M (± 0.3%) i/s -    417.218M in   5.059657s
               #each    382.316M (± 0.2%) i/s -      1.913B in   5.003246s

Comparison:
               #each: 382316487.9 i/s
            For loop: 82460609.2 i/s - 4.64x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   761.240k i/100ms
     each_with_index   760.362k i/100ms
Calculating -------------------------------------
          While Loop      7.627M (± 0.1%) i/s -     38.823M in   5.090305s
     each_with_index      7.603M (± 0.1%) i/s -     38.018M in   5.000414s

Comparison:
          While Loop:  7626903.6 i/s
     each_with_index:  7602993.0 i/s - 1.00x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   122.463k i/100ms
      inject to_proc   122.558k i/100ms
        inject block   122.430k i/100ms
Calculating -------------------------------------
       inject symbol      1.226M (± 0.1%) i/s -      6.246M in   5.095803s
      inject to_proc      1.226M (± 0.0%) i/s -      6.128M in   5.000056s
        inject block      1.225M (± 0.1%) i/s -      6.244M in   5.097894s

Comparison:
       inject symbol:  1225639.1 i/s
      inject to_proc:  1225566.4 i/s - same-ish: difference falls within error
        inject block:  1224808.2 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     8.400k i/100ms
   Array#map.flatten    10.255k i/100ms
      Array#flat_map    25.701k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    105.392k (± 4.2%) i/s -    529.200k in   5.030488s
   Array#map.flatten    104.097k (± 3.9%) i/s -    523.005k in   5.031945s
      Array#flat_map    259.190k (± 3.0%) i/s -      1.311M in   5.062187s

Comparison:
      Array#flat_map:   259189.8 i/s
Array#map.flatten(1):   105391.7 i/s - 2.46x  (± 0.00) slower
   Array#map.flatten:   104096.9 i/s - 2.49x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   162.742k i/100ms
  Array#reverse_each     1.614M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.642M (± 3.1%) i/s -      8.300M in   5.060763s
  Array#reverse_each     16.161M (± 0.1%) i/s -     82.322M in   5.093814s

Comparison:
  Array#reverse_each: 16161200.0 i/s
  Array#reverse.each:  1641743.7 i/s - 9.84x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       506.666k i/100ms
   Enumerable#detect     3.356M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          5.491M (± 7.4%) i/s -    108.933M in  20.022296s
   Enumerable#detect     33.587M (± 0.6%) i/s -    674.512M in  20.083173s

Comparison:
   Enumerable#detect: 33587306.5 i/s
Enumerable#select.first:  5491225.2 i/s - 6.12x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       162.378k i/100ms
Enumerable#select.last
                       323.348k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.643M (± 3.0%) i/s -      8.281M in   5.045842s
Enumerable#select.last
                          3.266M (± 2.2%) i/s -     16.491M in   5.051817s

Comparison:
Enumerable#select.last:  3266047.7 i/s
Enumerable#reverse.detect:  1642743.4 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.007k i/100ms
  Enumerable#sort_by   588.000  i/100ms
     Enumerable#sort   166.000  i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         19.841k (±29.0%) i/s -     82.287k in   5.027114s
  Enumerable#sort_by     20.395k (±24.9%) i/s -     88.788k in   5.009425s
     Enumerable#sort     29.762k (± 2.6%) i/s -    148.404k in   4.999641s

Comparison:
     Enumerable#sort:    29761.8 i/s
  Enumerable#sort_by:    20395.1 i/s - 1.46x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    19840.7 i/s - 1.50x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   416.769k i/100ms
Enumerable#sort_by...first
                         3.875k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      4.179M (± 0.1%) i/s -     21.255M in   5.086510s
Enumerable#sort_by...first
                         49.637k (± 3.5%) i/s -    248.000k in   5.002640s

Comparison:
   Enumerable#min_by:  4178746.6 i/s
Enumerable#sort_by...first:    49637.4 i/s - 84.19x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   176.860k i/100ms
            Hash#dup   189.768k i/100ms
Calculating -------------------------------------
              Hash[]      1.914M (± 5.0%) i/s -      9.550M in   5.002725s
            Hash#dup      1.894M (± 2.9%) i/s -      9.488M in   5.013517s

Comparison:
              Hash[]:  1913839.9 i/s
            Hash#dup:  1894188.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   198.484M i/100ms
  Hash#fetch, symbol   194.537M i/100ms
     Hash#[], string     2.076M i/100ms
  Hash#fetch, string     2.058M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.987B (± 0.3%) i/s -     10.123B in   5.095211s
  Hash#fetch, symbol      1.987B (± 0.3%) i/s -     10.116B in   5.090822s
     Hash#[], string    130.730M (± 0.4%) i/s -    653.910M in   5.002075s
  Hash#fetch, string    138.003M (± 0.5%) i/s -    691.579M in   5.011452s

Comparison:
  Hash#fetch, symbol: 1987100547.8 i/s
     Hash#[], symbol: 1986728224.6 i/s - same-ish: difference falls within error
  Hash#fetch, string: 138003361.4 i/s - 14.40x  (± 0.00) slower
     Hash#[], string: 130730219.6 i/s - 15.20x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    41.420M i/100ms
             Hash#[]    41.305M i/100ms
          Hash#[] ||    41.469M i/100ms
          Hash#[] &&    41.468M i/100ms
          Hash#fetch    41.402M i/100ms
 Hash#fetch fallback    41.467M i/100ms
Calculating -------------------------------------
            Hash#dig    414.206M (± 0.3%) i/s -      2.071B in   4.999972s
             Hash#[]    414.577M (± 0.2%) i/s -      2.107B in   5.081280s
          Hash#[] ||    414.576M (± 0.3%) i/s -      2.073B in   5.001414s
          Hash#[] &&    414.522M (± 0.2%) i/s -      2.073B in   5.001921s
          Hash#fetch    414.551M (± 0.1%) i/s -      2.112B in   5.093533s
 Hash#fetch fallback    414.433M (± 0.3%) i/s -      2.073B in   5.002901s

Comparison:
             Hash#[]: 414577346.6 i/s
          Hash#[] ||: 414575841.2 i/s - same-ish: difference falls within error
          Hash#fetch: 414551380.9 i/s - same-ish: difference falls within error
          Hash#[] &&: 414521785.6 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 414433156.1 i/s - same-ish: difference falls within error
            Hash#dig: 414206109.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   198.908M i/100ms
  Hash#fetch + block   198.764M i/100ms
    Hash#fetch + arg   198.709M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.987B (± 0.3%) i/s -      9.945B in   5.005850s
  Hash#fetch + block      1.987B (± 0.3%) i/s -      9.938B in   5.000734s
    Hash#fetch + arg      1.988B (± 0.2%) i/s -     10.134B in   5.098667s

Comparison:
    Hash#fetch + arg: 1987617110.7 i/s
  Hash#fetch + block: 1987359270.1 i/s - same-ish: difference falls within error
  Hash#fetch + const: 1986775117.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    16.447k i/100ms
         sort + to_h     2.159k i/100ms
Calculating -------------------------------------
      sort_by + to_h    261.630k (± 5.0%) i/s -      1.316M in   5.042824s
         sort + to_h    111.438k (± 8.6%) i/s -    552.704k in   5.006872s

Comparison:
      sort_by + to_h:   261629.9 i/s
         sort + to_h:   111438.4 i/s - 2.35x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   107.585k i/100ms
       Hash#each_key   123.988k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.077M (±10.5%) i/s -      5.272M in   5.030032s
       Hash#each_key      1.228M (± 2.6%) i/s -      6.199M in   5.053354s

Comparison:
       Hash#each_key:  1227699.6 i/s
      Hash#keys.each:  1076664.7 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   130.000  i/100ms
           Hash#key?     9.113M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.585k (±12.8%) i/s -      7.800k in   5.059813s
           Hash#key?     91.089M (± 0.1%) i/s -    455.651M in   5.002280s

Comparison:
           Hash#key?: 91088693.5 i/s
  Hash#keys.include?:     1585.2 i/s - 57461.64x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    14.357k i/100ms
            Hash#[]=    19.764k i/100ms
Calculating -------------------------------------
         Hash#merge!    196.559k (± 4.8%) i/s -    990.633k in   5.051798s
            Hash#[]=    195.701k (± 7.6%) i/s -    988.200k in   5.100813s

Comparison:
         Hash#merge!:   196559.2 i/s
            Hash#[]=:   195700.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         9.603k i/100ms
      Hash#merge({})     6.755k i/100ms
 Hash#dup#merge!({})    12.174k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        120.547k (± 6.6%) i/s -    604.989k in   5.042207s
      Hash#merge({})     75.265k (± 7.0%) i/s -    378.280k in   5.052716s
 Hash#dup#merge!({})    134.040k (± 3.6%) i/s -    669.570k in   5.002024s

Comparison:
 Hash#dup#merge!({}):   134040.5 i/s
{}#merge!(Hash) do end:   120547.4 i/s - 1.11x  (± 0.00) slower
      Hash#merge({}):    75265.4 i/s - 1.78x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   194.114M i/100ms
          Hash#merge   198.830M i/100ms
Calculating -------------------------------------
        Hash#**other      1.987B (± 0.3%) i/s -     10.094B in   5.080439s
          Hash#merge      1.987B (± 0.6%) i/s -      9.942B in   5.004637s

Comparison:
        Hash#**other: 1986837262.7 i/s
          Hash#merge: 1986521902.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   252.000  i/100ms
         Hash#merge!    20.202k i/100ms
Calculating -------------------------------------
          Hash#merge      2.946k (± 8.2%) i/s -     14.616k in   5.020950s
         Hash#merge!    205.282k (± 3.3%) i/s -      1.030M in   5.024617s

Comparison:
         Hash#merge!:   205281.9 i/s
          Hash#merge:     2946.3 i/s - 69.68x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      838.843k i/100ms
Array#each             836.357k i/100ms
Array#each_w/_object   838.366k i/100ms
Hash#select-include      1.354M i/100ms
Calculating -------------------------------------
Hash#native-slice        10.053M (± 3.8%) i/s -     50.331M in   5.014464s
Array#each                8.446M (± 4.4%) i/s -     42.654M in   5.060497s
Array#each_w/_object      8.519M (± 3.2%) i/s -     42.757M in   5.024397s
Hash#select-include      13.632M (± 3.8%) i/s -     69.062M in   5.073581s

Comparison:
Hash#select-include : 13632463.8 i/s
Hash#native-slice   : 10052955.8 i/s - 1.36x  (± 0.00) slower
Array#each_w/_object:  8518966.0 i/s - 1.60x  (± 0.00) slower
Array#each          :  8445846.2 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   208.000  i/100ms
         Hash#value?     4.989k i/100ms
Calculating -------------------------------------
Hash#values.include?      2.197k (±11.5%) i/s -     10.816k in   5.024262s
         Hash#value?     51.443k (± 0.2%) i/s -    259.428k in   5.043025s

Comparison:
         Hash#value?:    51443.1 i/s
Hash#values.include?:     2196.9 i/s - 23.42x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   198.773M i/100ms
                send   198.482M i/100ms
      method_missing   199.010M i/100ms
Calculating -------------------------------------
                call      1.986B (± 0.4%) i/s -      9.939B in   5.003799s
                send      1.989B (± 0.2%) i/s -     10.123B in   5.089422s
      method_missing      1.989B (± 0.2%) i/s -      9.950B in   5.003300s

Comparison:
                send: 1988952390.6 i/s
      method_missing: 1988794874.4 i/s - same-ish: difference falls within error
                call: 1986254470.0 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    12.955k i/100ms
      Symbol#to_proc    14.060k i/100ms
Calculating -------------------------------------
               Block    141.494k (± 3.9%) i/s -    712.525k in   5.043415s
      Symbol#to_proc    142.764k (± 4.0%) i/s -    717.060k in   5.030706s

Comparison:
      Symbol#to_proc:   142763.9 i/s
               Block:   141493.9 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   198.770M i/100ms
       block + yield   194.332M i/100ms
        unused block   198.775M i/100ms
               yield   198.935M i/100ms
Calculating -------------------------------------
          block.call      1.987B (± 0.3%) i/s -      9.939B in   5.003004s
       block + yield      1.988B (± 0.2%) i/s -     10.105B in   5.082695s
        unused block      1.911B (± 3.6%) i/s -      9.541B in   4.999526s
               yield      1.899B (± 4.1%) i/s -      9.549B in   5.036784s

Comparison:
       block + yield: 1988179771.3 i/s
          block.call: 1986522377.6 i/s - same-ish: difference falls within error
        unused block: 1911085652.2 i/s - 1.04x  (± 0.00) slower
               yield: 1899228244.3 i/s - 1.05x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     7.402k i/100ms
      range#include?   351.000  i/100ms
       range#member?   597.000  i/100ms
       plain compare    25.215k i/100ms
Calculating -------------------------------------
        range#cover?    107.891k (±11.9%) i/s -    532.944k in   5.024505s
      range#include?      7.812k (±28.1%) i/s -     34.749k in   5.023535s
       range#member?      6.367k (±17.9%) i/s -     30.447k in   5.082244s
       plain compare    229.189k (±19.9%) i/s -      1.109M in   5.004176s

Comparison:
       plain compare:   229189.5 i/s
        range#cover?:   107891.5 i/s - 2.12x  (± 0.00) slower
      range#include?:     7812.3 i/s - 29.34x  (± 0.00) slower
       range#member?:     6366.9 i/s - 36.00x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    11.219M i/100ms
           String#=~     9.569M i/100ms
          Regexp#===     9.567M i/100ms
        String#match     9.567M i/100ms
Calculating -------------------------------------
       String#match?    112.979M (± 0.2%) i/s -    572.155M in   5.064262s
           String#=~     95.662M (± 0.1%) i/s -    478.425M in   5.001200s
          Regexp#===     95.667M (± 0.1%) i/s -    478.333M in   4.999970s
        String#match     95.646M (± 0.1%) i/s -    478.332M in   5.001049s

Comparison:
       String#match?: 112979435.7 i/s
          Regexp#===: 95667271.1 i/s - 1.18x  (± 0.00) slower
           String#=~: 95662345.3 i/s - 1.18x  (± 0.00) slower
        String#match: 95646438.5 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.354M i/100ms
      String#casecmp     2.219M i/100ms
Calculating -------------------------------------
String#downcase + ==     14.736M (± 3.7%) i/s -     74.470M in   5.060420s
      String#casecmp     22.697M (± 3.5%) i/s -    115.398M in   5.090852s

Comparison:
      String#casecmp: 22696849.4 i/s
String#downcase + ==: 14736100.7 i/s - 1.54x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     5.497M i/100ms
       String#concat     6.270M i/100ms
       String#append     6.291M i/100ms
         "foo" "bar"   198.830M i/100ms
  "#{'foo'}#{'bar'}"   198.907M i/100ms
Calculating -------------------------------------
            String#+     63.233M (± 3.5%) i/s -    318.830M in   5.048756s
       String#concat     63.498M (± 4.4%) i/s -    319.749M in   5.045476s
       String#append     63.974M (± 3.1%) i/s -    320.838M in   5.020364s
         "foo" "bar"      1.988B (± 0.2%) i/s -      9.941B in   5.001143s
  "#{'foo'}#{'bar'}"      1.988B (± 0.2%) i/s -      9.945B in   5.001883s

Comparison:
  "#{'foo'}#{'bar'}": 1988328339.8 i/s
         "foo" "bar": 1987856466.2 i/s - same-ish: difference falls within error
       String#append: 63974279.6 i/s - 31.08x  (± 0.00) slower
       String#concat: 63498235.7 i/s - 31.31x  (± 0.00) slower
            String#+: 63232962.6 i/s - 31.44x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   198.290M i/100ms
          String#dup   190.761M i/100ms
Calculating -------------------------------------
           String#+@      1.967B (± 2.6%) i/s -      9.915B in   5.044934s
          String#dup      1.951B (± 2.5%) i/s -      9.920B in   5.088671s

Comparison:
           String#+@: 1966705247.1 i/s
          String#dup: 1950576966.0 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   544.911k i/100ms
       String#match?   819.769k i/100ms
    String#end_with?    10.329M i/100ms
Calculating -------------------------------------
           String#=~      8.120M (± 3.9%) i/s -     40.868M in   5.041595s
       String#match?     10.065M (± 0.1%) i/s -     50.826M in   5.049687s
    String#end_with?    103.259M (± 0.3%) i/s -    516.473M in   5.001780s

Comparison:
    String#end_with?: 103258892.0 i/s
       String#match?: 10065122.9 i/s - 10.26x  (± 0.00) slower
           String#=~:  8120343.2 i/s - 12.72x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    39.171k i/100ms
          String#sub   326.263k i/100ms
String#dup["string"]=
                         7.535M i/100ms
Calculating -------------------------------------
         String#gsub      3.257M (± 9.8%) i/s -     16.060M in   5.005120s
          String#sub      4.263M (± 9.4%) i/s -     21.533M in   5.120816s
String#dup["string"]=
                         75.812M (± 1.2%) i/s -    384.262M in   5.069365s

Comparison:
String#dup["string"]=: 75812022.4 i/s
          String#sub:  4262948.2 i/s - 17.78x  (± 0.00) slower
         String#gsub:  3256932.7 i/s - 23.28x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    23.708k i/100ms
           String#tr    67.600k i/100ms
Calculating -------------------------------------
         String#gsub      1.565M (±11.6%) i/s -      7.681M in   4.996858s
           String#tr    680.779k (± 4.1%) i/s -      3.448M in   5.072959s

Comparison:
         String#gsub:  1565090.4 i/s
           String#tr:   680779.4 i/s - 2.30x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   190.563M i/100ms
         With Freeze   198.808M i/100ms
Calculating -------------------------------------
      Without Freeze      1.972B (± 1.9%) i/s -      9.909B in   5.027270s
         With Freeze      1.987B (± 0.3%) i/s -      9.940B in   5.003149s

Comparison:
         With Freeze: 1986847176.4 i/s
      Without Freeze: 1971851047.9 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     1.506k i/100ms
      String#squeeze    18.238k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     53.979k (± 8.4%) i/s -    268.068k in   5.007061s
      String#squeeze    187.188k (± 2.8%) i/s -    948.376k in   5.070717s

Comparison:
      String#squeeze:   187188.2 i/s
 String#gsub/regex+/:    53978.9 i/s - 3.47x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.954M i/100ms
       String#match?     1.554M i/100ms
  String#start_with?     8.873M i/100ms
Calculating -------------------------------------
           String#=~     22.978M (± 3.2%) i/s -    115.282M in   5.022530s
       String#match?     34.505M (± 1.4%) i/s -    174.019M in   5.044277s
  String#start_with?     88.653M (± 0.5%) i/s -    443.667M in   5.004645s

Comparison:
  String#start_with?: 88652929.6 i/s
       String#match?: 34504804.4 i/s - 2.57x  (± 0.00) slower
           String#=~: 22978091.6 i/s - 3.86x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   101.689k i/100ms
    String#[0, n] ==   157.823k i/100ms
   String#[RANGE] ==   238.518k i/100ms
   String#[0...n] ==   173.125k i/100ms
Calculating -------------------------------------
  String#start_with?      3.819M (± 0.1%) i/s -     19.118M in   5.006514s
    String#[0, n] ==      1.863M (± 4.2%) i/s -      9.312M in   5.006751s
   String#[RANGE] ==      2.596M (± 3.3%) i/s -     13.118M in   5.059883s
   String#[0...n] ==      1.757M (± 4.1%) i/s -      8.829M in   5.033196s

Comparison:
  String#start_with?:  3818534.8 i/s
   String#[RANGE] ==:  2595727.5 i/s - 1.47x  (± 0.00) slower
    String#[0, n] ==:  1863383.9 i/s - 2.05x  (± 0.00) slower
   String#[0...n] ==:  1757317.9 i/s - 2.17x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     7.510M i/100ms
 String#sub!'string'    73.601k i/100ms
String#gsub!'string'   322.830k i/100ms
  String#[/regexp/]=     1.253M i/100ms
 String#sub!/regexp/   439.161k i/100ms
String#gsub!/regexp/   316.225k i/100ms
Calculating -------------------------------------
  String#['string']=     75.319M (± 0.1%) i/s -    383.027M in   5.085421s
 String#sub!'string'      4.417M (±23.9%) i/s -     19.799M in   5.004956s
String#gsub!'string'      3.694M (± 3.8%) i/s -     18.724M in   5.076746s
  String#[/regexp/]=     12.411M (± 5.4%) i/s -     62.670M in   5.064924s
 String#sub!/regexp/      4.223M (± 5.5%) i/s -     21.080M in   5.007936s
String#gsub!/regexp/      3.865M (± 6.5%) i/s -     19.290M in   5.013532s

Comparison:
  String#['string']=: 75318605.1 i/s
  String#[/regexp/]=: 12411086.1 i/s - 6.07x  (± 0.00) slower
 String#sub!'string':  4416778.7 i/s - 17.05x  (± 0.00) slower
 String#sub!/regexp/:  4222724.1 i/s - 17.84x  (± 0.00) slower
String#gsub!/regexp/:  3865320.0 i/s - 19.49x  (± 0.00) slower
String#gsub!'string':  3693741.5 i/s - 20.39x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub    40.447k i/100ms
        String#chomp     3.476M i/100ms
String#delete_suffix     3.592M i/100ms
Calculating -------------------------------------
          String#sub     16.459M (± 8.7%) i/s -     80.449M in   4.998333s
        String#chomp     34.730M (± 0.6%) i/s -    173.790M in   5.004249s
String#delete_suffix     38.304M (± 8.1%) i/s -    190.366M in   5.027849s

Comparison:
String#delete_suffix: 38303974.3 i/s
        String#chomp: 34729685.4 i/s - 1.10x  (± 0.00) slower
          String#sub: 16458669.8 i/s - 2.33x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   198.579M i/100ms
          String#sub    83.129k i/100ms
Calculating -------------------------------------
String#delete_prefix      1.987B (± 0.3%) i/s -     10.128B in   5.097820s
          String#sub    103.746M (± 1.3%) i/s -    518.143M in   4.995200s

Comparison:
String#delete_prefix: 1986661190.4 i/s
          String#sub: 103745567.4 i/s - 19.15x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.031M i/100ms
    String#unpack[0]     1.175M i/100ms
Calculating -------------------------------------
      String#unpack1     11.724M (± 4.6%) i/s -     58.780M in   5.024875s
    String#unpack[0]     11.881M (± 3.2%) i/s -     59.941M in   5.050928s

Comparison:
    String#unpack[0]: 11880567.4 i/s
      String#unpack1: 11723523.3 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 23.1.0-dev-9ba6955f, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    11.961k i/100ms
          Time.parse   102.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    258.033k (±14.9%) i/s -      1.244M in   5.012002s
          Time.parse     10.411k (±26.2%) i/s -     40.494k in   4.998502s

Comparison:
        Time.iso8601:   258033.3 i/s
          Time.parse:    10411.4 i/s - 24.78x  (± 0.00) slower

