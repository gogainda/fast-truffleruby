$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       113.526M i/100ms
Function with splat arguments
                         1.156k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.136B (± 0.6%) i/s -      5.790B in   5.095783s
Function with splat arguments
                         13.582k (± 6.3%) i/s -     68.204k in   5.045177s

Comparison:
Function with single Array argument: 1136238015.5 i/s
Function with splat arguments:    13582.3 i/s - 83655.59x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   113.296M i/100ms
Sequential Assignment
                       113.663M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.137B (± 0.6%) i/s -      5.778B in   5.083774s
Sequential Assignment
                          1.139B (± 0.9%) i/s -      5.797B in   5.092007s

Comparison:
Sequential Assignment: 1138510577.6 i/s
 Parallel Assignment: 1136617392.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   111.765M i/100ms
       attr_accessor   114.154M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.137B (± 0.8%) i/s -      5.700B in   5.012318s
       attr_accessor      1.136B (± 0.3%) i/s -      5.708B in   5.023235s

Comparison:
   getter_and_setter: 1137272311.8 i/s
       attr_accessor: 1136273412.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     7.438k i/100ms
         respond_to?   113.337M i/100ms
Calculating -------------------------------------
      begin...rescue     78.096k (± 4.6%) i/s -    394.214k in   5.058898s
         respond_to?      1.136B (± 0.4%) i/s -      5.780B in   5.090422s

Comparison:
         respond_to?: 1135523809.3 i/s
      begin...rescue:    78096.3 i/s - 14540.05x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   113.363M i/100ms
             &method   113.499M i/100ms
Calculating -------------------------------------
              normal      1.137B (± 0.8%) i/s -      5.781B in   5.086795s
             &method      1.138B (± 0.8%) i/s -      5.788B in   5.084696s

Comparison:
             &method: 1138471762.9 i/s
              normal: 1136638265.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       145.000  i/100ms
       define_method    92.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.929k (±60.4%) i/s -      5.220k in   5.781459s
       define_method      6.737k (±36.8%) i/s -     10.672k in   5.146866s

Comparison:
       define_method:     6737.3 i/s
module_eval with string:     1928.7 i/s - 3.49x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    80.422k i/100ms
       Kernel#format    71.031k i/100ms
            String#%    71.690k i/100ms
Calculating -------------------------------------
         Float#round    858.479k (± 2.3%) i/s -      4.343M in   5.061461s
       Kernel#format    716.477k (± 1.9%) i/s -      3.623M in   5.058025s
            String#%    715.525k (± 1.9%) i/s -      3.584M in   5.011429s

Comparison:
         Float#round:   858479.0 i/s
       Kernel#format:   716477.1 i/s - 1.20x  (± 0.00) slower
            String#%:   715524.8 i/s - 1.20x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.736M i/100ms
          OpenStruct   114.585M i/100ms
Calculating -------------------------------------
                Hash      1.131B (± 2.8%) i/s -      5.687B in   5.033545s
          OpenStruct      1.137B (± 0.7%) i/s -      5.729B in   5.038895s

Comparison:
          OpenStruct: 1137065062.3 i/s
                Hash: 1130779753.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.728M i/100ms
          OpenStruct     3.390k i/100ms
Calculating -------------------------------------
                Hash      1.133B (± 0.5%) i/s -      5.686B in   5.020240s
          OpenStruct     35.731k (±12.9%) i/s -    176.280k in   5.060590s

Comparison:
                Hash: 1132727671.1 i/s
          OpenStruct:    35731.4 i/s - 31701.21x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   825.337k i/100ms
  ancestors.include?   167.964k i/100ms
Calculating -------------------------------------
  less than or equal      8.932M (± 3.6%) i/s -     45.394M in   5.089364s
  ancestors.include?      1.789M (± 5.5%) i/s -      9.070M in   5.086926s

Comparison:
  less than or equal:  8932001.7 i/s
  ancestors.include?:  1788770.4 i/s - 4.99x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     11.350  (± 0.0%) i/s -     57.000  in   5.022135s
         Kernel loop     11.367  (± 0.0%) i/s -     57.000  in   5.014684s

Comparison:
         Kernel loop:       11.4 i/s
          While Loop:       11.4 i/s - 1.00x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   113.630M i/100ms
         Array#first   113.260M i/100ms
Calculating -------------------------------------
           Array#[0]      1.134B (± 0.6%) i/s -      5.682B in   5.012469s
         Array#first      1.137B (± 1.0%) i/s -      5.776B in   5.079073s

Comparison:
         Array#first: 1137372611.1 i/s
           Array#[0]: 1133521331.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   113.496M i/100ms
          Array#last   113.328M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.135B (± 0.6%) i/s -      5.788B in   5.098480s
          Array#last      1.137B (± 0.8%) i/s -      5.780B in   5.085479s

Comparison:
          Array#last: 1136589847.9 i/s
          Array#[-1]: 1135337243.8 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   643.864k i/100ms
Calculating -------------------------------------
                find      4.444  (±22.5%) i/s -     15.000  in   5.121159s
             bsearch      6.543M (± 2.1%) i/s -     32.837M in   5.021236s

Comparison:
             bsearch:  6542703.3 i/s
                find:        4.4 i/s - 1472109.13x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.069  (± 0.0%) i/s -      1.000  in  14.512250s
        Array#insert      1.024  (± 0.0%) i/s -      6.000  in   5.856844s

Comparison:
        Array#insert:        1.0 i/s
       Array#unshift:        0.1 i/s - 14.87x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   113.543M i/100ms
          Array#size   113.505M i/100ms
         Array#count   113.736M i/100ms
Calculating -------------------------------------
        Array#length      1.137B (± 0.5%) i/s -      5.791B in   5.093887s
          Array#size      1.141B (± 1.2%) i/s -      5.789B in   5.073463s
         Array#count      1.138B (± 0.4%) i/s -      5.801B in   5.098447s

Comparison:
          Array#size: 1141148592.1 i/s
         Array#count: 1137729185.5 i/s - same-ish: difference falls within error
        Array#length: 1136823968.8 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    24.967k i/100ms
        Array#sample     2.674M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    249.999k (± 1.7%) i/s -      1.273M in   5.094789s
        Array#sample     28.556M (± 0.2%) i/s -    144.396M in   5.056563s

Comparison:
        Array#sample: 28556169.4 i/s
 Array#shuffle.first:   249998.9 i/s - 114.23x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601     2.666k i/100ms
          Date.parse   777.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     34.234k (±26.7%) i/s -    146.630k in   5.029233s
          Date.parse     14.415k (±27.7%) i/s -     59.052k in   5.013707s

Comparison:
        Date.iso8601:    34234.0 i/s
          Date.parse:    14415.5 i/s - 2.37x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   227.118k i/100ms
           Array#map     1.044M i/100ms
Calculating -------------------------------------
   Array#each + push      2.465M (± 4.6%) i/s -     12.491M in   5.078770s
           Array#map     10.451M (± 5.4%) i/s -     52.219M in   5.012087s

Comparison:
           Array#map: 10450920.7 i/s
   Array#each + push:  2465217.1 i/s - 4.24x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     9.270M i/100ms
               #each    41.463M i/100ms
Calculating -------------------------------------
            For loop     92.728M (± 1.7%) i/s -    463.517M in   5.000280s
               #each    412.224M (± 0.8%) i/s -      2.073B in   5.029532s

Comparison:
               #each: 412223981.3 i/s
            For loop: 92727860.9 i/s - 4.45x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   807.271k i/100ms
     each_with_index     1.031M i/100ms
Calculating -------------------------------------
          While Loop      8.076M (± 0.1%) i/s -     41.171M in   5.098132s
     each_with_index     10.306M (± 0.0%) i/s -     51.536M in   5.000514s

Comparison:
     each_with_index: 10306182.2 i/s
          While Loop:  8075671.6 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   159.934k i/100ms
      inject to_proc   159.016k i/100ms
        inject block   159.083k i/100ms
Calculating -------------------------------------
       inject symbol      1.590M (± 0.0%) i/s -      7.997M in   5.028954s
      inject to_proc      1.587M (± 0.0%) i/s -      7.951M in   5.009031s
        inject block      1.606M (± 0.1%) i/s -      8.113M in   5.050459s

Comparison:
        inject block:  1606435.2 i/s
       inject symbol:  1590132.2 i/s - 1.01x  (± 0.00) slower
      inject to_proc:  1587293.1 i/s - 1.01x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    16.737k i/100ms
   Array#map.flatten    18.712k i/100ms
      Array#flat_map    45.119k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    186.761k (± 4.5%) i/s -    937.272k in   5.029416s
   Array#map.flatten    190.068k (± 4.2%) i/s -    954.312k in   5.030511s
      Array#flat_map    454.802k (± 2.8%) i/s -      2.301M in   5.063797s

Comparison:
      Array#flat_map:   454801.9 i/s
   Array#map.flatten:   190068.3 i/s - 2.39x  (± 0.00) slower
Array#map.flatten(1):   186760.6 i/s - 2.44x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   199.621k i/100ms
  Array#reverse_each     1.638M i/100ms
Calculating -------------------------------------
  Array#reverse.each      2.255M (± 3.2%) i/s -     11.378M in   5.050389s
  Array#reverse_each     16.356M (± 0.2%) i/s -     81.896M in   5.007167s

Comparison:
  Array#reverse_each: 16355891.2 i/s
  Array#reverse.each:  2255402.6 i/s - 7.25x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       682.454k i/100ms
   Enumerable#detect     2.619M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          7.719M (± 6.1%) i/s -    154.235M in  20.075841s
   Enumerable#detect     26.146M (± 0.3%) i/s -    523.790M in  20.033137s

Comparison:
   Enumerable#detect: 26146461.7 i/s
Enumerable#select.first:  7718651.6 i/s - 3.39x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       207.435k i/100ms
Enumerable#select.last
                       375.009k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.333M (± 2.9%) i/s -     11.824M in   5.072506s
Enumerable#select.last
                          3.790M (± 2.7%) i/s -     19.125M in   5.050038s

Comparison:
Enumerable#select.last:  3790158.9 i/s
Enumerable#reverse.detect:  2333022.0 i/s - 1.62x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.802k i/100ms
  Enumerable#sort_by     2.816k i/100ms
     Enumerable#sort     3.919k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         27.657k (±13.4%) i/s -    137.298k in   5.064720s
  Enumerable#sort_by     25.883k (±17.5%) i/s -    126.720k in   5.069510s
     Enumerable#sort     40.255k (± 0.6%) i/s -    203.788k in   5.062631s

Comparison:
     Enumerable#sort:    40255.1 i/s
Enumerable#sort_by (Symbol#to_proc):    27657.1 i/s - 1.46x  (± 0.00) slower
  Enumerable#sort_by:    25883.0 i/s - 1.56x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   485.250k i/100ms
Enumerable#sort_by...first
                         5.817k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      4.854M (± 0.1%) i/s -     24.748M in   5.098064s
Enumerable#sort_by...first
                         66.824k (± 2.6%) i/s -    337.386k in   5.052531s

Comparison:
   Enumerable#min_by:  4854344.7 i/s
Enumerable#sort_by...first:    66824.0 i/s - 72.64x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   393.104k i/100ms
            Hash#dup   451.363k i/100ms
Calculating -------------------------------------
              Hash[]      4.786M (± 2.4%) i/s -     23.979M in   5.013885s
            Hash#dup      4.830M (± 2.1%) i/s -     24.374M in   5.048205s

Comparison:
            Hash#dup:  4830349.9 i/s
              Hash[]:  4785549.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   113.609M i/100ms
  Hash#fetch, symbol   113.499M i/100ms
     Hash#[], string     3.698M i/100ms
  Hash#fetch, string    13.122M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.136B (± 0.7%) i/s -      5.680B in   5.000982s
  Hash#fetch, symbol      1.136B (± 0.6%) i/s -      5.788B in   5.095030s
     Hash#[], string    174.785M (± 1.2%) i/s -    876.324M in   5.014510s
  Hash#fetch, string    147.091M (± 1.0%) i/s -    747.977M in   5.085694s

Comparison:
  Hash#fetch, symbol: 1136132725.4 i/s
     Hash#[], symbol: 1135928813.9 i/s - same-ish: difference falls within error
     Hash#[], string: 174785085.2 i/s - 6.50x  (± 0.00) slower
  Hash#fetch, string: 147090507.6 i/s - 7.72x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    49.762M i/100ms
             Hash#[]    49.794M i/100ms
          Hash#[] ||    49.810M i/100ms
          Hash#[] &&    49.762M i/100ms
          Hash#fetch    49.815M i/100ms
 Hash#fetch fallback    49.811M i/100ms
Calculating -------------------------------------
            Hash#dig    497.604M (± 0.2%) i/s -      2.488B in   5.000229s
             Hash#[]    497.916M (± 0.2%) i/s -      2.490B in   5.000219s
          Hash#[] ||    497.818M (± 0.2%) i/s -      2.491B in   5.002869s
          Hash#[] &&    497.496M (± 0.5%) i/s -      2.488B in   5.001431s
          Hash#fetch    497.991M (± 0.2%) i/s -      2.491B in   5.001631s
 Hash#fetch fallback    497.807M (± 0.2%) i/s -      2.491B in   5.003078s

Comparison:
          Hash#fetch: 497991445.6 i/s
             Hash#[]: 497916081.9 i/s - same-ish: difference falls within error
          Hash#[] ||: 497818438.1 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 497806516.2 i/s - same-ish: difference falls within error
            Hash#dig: 497604344.3 i/s - same-ish: difference falls within error
          Hash#[] &&: 497495602.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   113.266M i/100ms
  Hash#fetch + block   113.344M i/100ms
    Hash#fetch + arg   113.523M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.135B (± 0.4%) i/s -      5.777B in   5.090558s
  Hash#fetch + block      1.134B (± 0.6%) i/s -      5.781B in   5.096491s
    Hash#fetch + arg      1.135B (± 0.6%) i/s -      5.790B in   5.099087s

Comparison:
    Hash#fetch + arg: 1135468977.9 i/s
  Hash#fetch + const: 1134780042.4 i/s - same-ish: difference falls within error
  Hash#fetch + block: 1134260377.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    21.814k i/100ms
         sort + to_h    11.710k i/100ms
Calculating -------------------------------------
      sort_by + to_h    360.576k (± 4.4%) i/s -      1.811M in   5.032216s
         sort + to_h    139.179k (± 4.4%) i/s -    702.600k in   5.058493s

Comparison:
      sort_by + to_h:   360575.6 i/s
         sort + to_h:   139179.0 i/s - 2.59x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   184.582k i/100ms
       Hash#each_key   220.024k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.881M (±10.9%) i/s -      9.229M in   5.051178s
       Hash#each_key      2.190M (± 3.0%) i/s -     11.001M in   5.028543s

Comparison:
       Hash#each_key:  2189844.6 i/s
      Hash#keys.each:  1880737.1 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   239.000  i/100ms
           Hash#key?     2.515M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      2.542k (±11.6%) i/s -     12.667k in   5.084787s
           Hash#key?     25.093M (± 0.2%) i/s -    125.733M in   5.010782s

Comparison:
           Hash#key?: 25092588.6 i/s
  Hash#keys.include?:     2542.3 i/s - 9870.05x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    39.989k i/100ms
            Hash#[]=    42.497k i/100ms
Calculating -------------------------------------
         Hash#merge!    429.905k (± 5.0%) i/s -      2.159M in   5.036810s
            Hash#[]=    435.762k (± 4.6%) i/s -      2.210M in   5.082616s

Comparison:
            Hash#[]=:   435762.0 i/s
         Hash#merge!:   429905.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        26.194k i/100ms
      Hash#merge({})    15.308k i/100ms
 Hash#dup#merge!({})    25.306k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        277.951k (± 2.3%) i/s -      1.414M in   5.091708s
      Hash#merge({})    161.473k (± 2.0%) i/s -    811.324k in   5.026590s
 Hash#dup#merge!({})    254.164k (± 1.8%) i/s -      1.291M in   5.079570s

Comparison:
{}#merge!(Hash) do end:   277951.3 i/s
 Hash#dup#merge!({}):   254163.7 i/s - 1.09x  (± 0.00) slower
      Hash#merge({}):   161472.9 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   113.460M i/100ms
          Hash#merge   113.681M i/100ms
Calculating -------------------------------------
        Hash#**other      1.132B (± 1.8%) i/s -      5.673B in   5.012581s
          Hash#merge      1.130B (± 3.2%) i/s -      5.684B in   5.037909s

Comparison:
        Hash#**other: 1132170593.2 i/s
          Hash#merge: 1129562394.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   723.000  i/100ms
         Hash#merge!    41.234k i/100ms
Calculating -------------------------------------
          Hash#merge      8.060k (± 3.8%) i/s -     40.488k in   5.031201s
         Hash#merge!    438.134k (± 1.9%) i/s -      2.227M in   5.084110s

Comparison:
         Hash#merge!:   438133.8 i/s
          Hash#merge:     8060.5 i/s - 54.36x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.416M i/100ms
Array#each               1.395M i/100ms
Array#each_w/_object     1.395M i/100ms
Hash#select-include      2.056M i/100ms
Calculating -------------------------------------
Hash#native-slice        16.832M (± 3.8%) i/s -     84.940M in   5.054115s
Array#each               14.228M (± 2.6%) i/s -     71.130M in   5.003080s
Array#each_w/_object     14.195M (± 3.0%) i/s -     71.143M in   5.016593s
Hash#select-include      20.564M (± 3.7%) i/s -    102.788M in   5.005671s

Comparison:
Hash#select-include : 20563581.0 i/s
Hash#native-slice   : 16832161.2 i/s - 1.22x  (± 0.00) slower
Array#each          : 14227549.3 i/s - 1.45x  (± 0.00) slower
Array#each_w/_object: 14194550.8 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   240.000  i/100ms
         Hash#value?     5.397k i/100ms
Calculating -------------------------------------
Hash#values.include?      2.615k (±11.6%) i/s -     12.960k in   5.059687s
         Hash#value?     53.393k (± 3.2%) i/s -    269.850k in   5.060115s

Comparison:
         Hash#value?:    53392.6 i/s
Hash#values.include?:     2614.7 i/s - 20.42x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   113.735M i/100ms
                send   114.081M i/100ms
      method_missing   113.772M i/100ms
Calculating -------------------------------------
                call      1.136B (± 0.4%) i/s -      5.687B in   5.007196s
                send      1.137B (± 0.4%) i/s -      5.704B in   5.016436s
      method_missing      1.136B (± 0.3%) i/s -      5.689B in   5.005626s

Comparison:
                send: 1137085702.0 i/s
      method_missing: 1136452252.6 i/s - same-ish: difference falls within error
                call: 1135738787.8 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    31.714k i/100ms
      Symbol#to_proc    34.039k i/100ms
Calculating -------------------------------------
               Block    353.151k (± 2.2%) i/s -      1.776M in   5.031382s
      Symbol#to_proc    353.195k (± 1.9%) i/s -      1.770M in   5.013368s

Comparison:
      Symbol#to_proc:   353194.6 i/s
               Block:   353150.9 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   113.565M i/100ms
       block + yield   113.505M i/100ms
        unused block   113.748M i/100ms
               yield   113.689M i/100ms
Calculating -------------------------------------
          block.call      1.137B (± 0.7%) i/s -      5.792B in   5.094930s
       block + yield      1.138B (± 0.5%) i/s -      5.789B in   5.088437s
        unused block      1.139B (± 0.7%) i/s -      5.801B in   5.093776s
               yield      1.138B (± 0.5%) i/s -      5.798B in   5.095455s

Comparison:
        unused block: 1138934787.4 i/s
               yield: 1137933567.1 i/s - same-ish: difference falls within error
       block + yield: 1137657065.6 i/s - same-ish: difference falls within error
          block.call: 1136837408.6 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    23.396k i/100ms
      range#include?   584.000  i/100ms
       range#member?   851.000  i/100ms
       plain compare    39.828k i/100ms
Calculating -------------------------------------
        range#cover?    234.934k (±18.9%) i/s -      1.123M in   5.026229s
      range#include?      9.484k (±28.1%) i/s -     43.800k in   5.027396s
       range#member?      8.930k (±28.1%) i/s -     41.699k in   5.082036s
       plain compare    408.437k (± 5.4%) i/s -      2.071M in   5.086685s

Comparison:
       plain compare:   408437.2 i/s
        range#cover?:   234934.4 i/s - 1.74x  (± 0.00) slower
      range#include?:     9484.4 i/s - 43.06x  (± 0.00) slower
       range#member?:     8930.2 i/s - 45.74x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    14.327M i/100ms
           String#=~    13.836M i/100ms
          Regexp#===    13.838M i/100ms
        String#match     9.751M i/100ms
Calculating -------------------------------------
       String#match?    143.713M (± 0.0%) i/s -    730.695M in   5.084408s
           String#=~    138.372M (± 0.0%) i/s -    705.658M in   5.099720s
          Regexp#===    138.335M (± 0.2%) i/s -    691.905M in   5.001690s
        String#match     97.646M (± 0.1%) i/s -    497.282M in   5.092691s

Comparison:
       String#match?: 143712860.8 i/s
           String#=~: 138371922.2 i/s - 1.04x  (± 0.00) slower
          Regexp#===: 138334765.7 i/s - 1.04x  (± 0.00) slower
        String#match: 97646168.9 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.373M i/100ms
      String#casecmp     3.871M i/100ms
Calculating -------------------------------------
String#downcase + ==     26.772M (± 5.9%) i/s -    135.254M in   5.071070s
      String#casecmp     38.767M (± 4.2%) i/s -    193.526M in   5.001592s

Comparison:
      String#casecmp: 38767118.5 i/s
String#downcase + ==: 26771977.4 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     7.479M i/100ms
       String#concat     8.300M i/100ms
       String#append     8.391M i/100ms
         "foo" "bar"   113.850M i/100ms
  "#{'foo'}#{'bar'}"   113.813M i/100ms
Calculating -------------------------------------
            String#+     84.315M (± 3.6%) i/s -    426.322M in   5.063541s
       String#concat     84.415M (± 3.3%) i/s -    423.295M in   5.020333s
       String#append     84.406M (± 3.3%) i/s -    427.939M in   5.075925s
         "foo" "bar"      1.139B (± 0.8%) i/s -      5.806B in   5.098512s
  "#{'foo'}#{'bar'}"      1.137B (± 0.2%) i/s -      5.691B in   5.004501s

Comparison:
         "foo" "bar": 1138896185.1 i/s
  "#{'foo'}#{'bar'}": 1137111109.2 i/s - same-ish: difference falls within error
       String#concat: 84414751.6 i/s - 13.49x  (± 0.00) slower
       String#append: 84405851.1 i/s - 13.49x  (± 0.00) slower
            String#+: 84315081.7 i/s - 13.51x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   113.661M i/100ms
          String#dup   113.690M i/100ms
Calculating -------------------------------------
           String#+@      1.135B (± 0.4%) i/s -      5.683B in   5.008132s
          String#dup      1.137B (± 0.5%) i/s -      5.798B in   5.098987s

Comparison:
          String#dup: 1137148021.3 i/s
           String#+@: 1134787046.9 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.350M i/100ms
       String#match?     1.498M i/100ms
    String#end_with?     9.818M i/100ms
Calculating -------------------------------------
           String#=~     13.894M (± 2.4%) i/s -     70.177M in   5.054061s
       String#match?     18.278M (± 0.1%) i/s -     92.879M in   5.081557s
    String#end_with?     97.291M (± 0.5%) i/s -    490.921M in   5.046037s

Comparison:
    String#end_with?: 97291010.2 i/s
       String#match?: 18277669.6 i/s - 5.32x  (± 0.00) slower
           String#=~: 13894034.6 i/s - 7.00x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   112.655k i/100ms
          String#sub   816.773k i/100ms
String#dup["string"]=
                         9.224M i/100ms
Calculating -------------------------------------
         String#gsub      5.849M (±11.1%) i/s -     28.614M in   5.006952s
          String#sub      8.506M (± 2.2%) i/s -     43.289M in   5.091852s
String#dup["string"]=
                         92.244M (± 0.0%) i/s -    470.422M in   5.099750s

Comparison:
String#dup["string"]=: 92244077.5 i/s
          String#sub:  8505945.9 i/s - 10.84x  (± 0.00) slower
         String#gsub:  5849346.6 i/s - 15.77x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   129.397k i/100ms
           String#tr   123.655k i/100ms
Calculating -------------------------------------
         String#gsub      2.655M (± 7.9%) i/s -     13.198M in   5.008578s
           String#tr      1.257M (± 3.4%) i/s -      6.306M in   5.025046s

Comparison:
         String#gsub:  2654583.7 i/s
           String#tr:  1256501.2 i/s - 2.11x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   113.602M i/100ms
         With Freeze   113.586M i/100ms
Calculating -------------------------------------
      Without Freeze      1.135B (± 0.4%) i/s -      5.680B in   5.004422s
         With Freeze      1.136B (± 0.3%) i/s -      5.793B in   5.097797s

Comparison:
         With Freeze: 1136365438.5 i/s
      Without Freeze: 1135037251.4 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     6.426k i/100ms
      String#squeeze    27.633k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    107.856k (± 8.3%) i/s -    539.784k in   5.042665s
      String#squeeze    276.309k (± 2.2%) i/s -      1.382M in   5.003179s

Comparison:
      String#squeeze:   276309.2 i/s
 String#gsub/regex+/:   107856.0 i/s - 2.56x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     2.200M i/100ms
       String#match?     4.961M i/100ms
  String#start_with?     9.171M i/100ms
Calculating -------------------------------------
           String#=~     24.816M (± 3.3%) i/s -    125.427M in   5.060251s
       String#match?     49.851M (± 0.6%) i/s -    253.018M in   5.075626s
  String#start_with?     91.493M (± 0.7%) i/s -    458.552M in   5.012173s

Comparison:
  String#start_with?: 91492743.6 i/s
       String#match?: 49851264.4 i/s - 1.84x  (± 0.00) slower
           String#=~: 24816112.0 i/s - 3.69x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   114.311k i/100ms
    String#[0, n] ==   246.053k i/100ms
   String#[RANGE] ==   324.579k i/100ms
   String#[0...n] ==   226.017k i/100ms
Calculating -------------------------------------
  String#start_with?      4.107M (± 0.1%) i/s -     20.576M in   5.010506s
    String#[0, n] ==      2.544M (± 3.8%) i/s -     12.795M in   5.037576s
   String#[RANGE] ==      3.278M (± 3.2%) i/s -     16.554M in   5.054983s
   String#[0...n] ==      2.287M (± 3.7%) i/s -     11.527M in   5.046703s

Comparison:
  String#start_with?:  4106575.3 i/s
   String#[RANGE] ==:  3278279.7 i/s - 1.25x  (± 0.00) slower
    String#[0, n] ==:  2543869.9 i/s - 1.61x  (± 0.00) slower
   String#[0...n] ==:  2287375.6 i/s - 1.80x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     9.203M i/100ms
 String#sub!'string'   736.222k i/100ms
String#gsub!'string'   556.044k i/100ms
  String#[/regexp/]=     1.813M i/100ms
 String#sub!/regexp/     2.241M i/100ms
String#gsub!/regexp/   676.167k i/100ms
Calculating -------------------------------------
  String#['string']=     92.200M (± 0.2%) i/s -    469.349M in   5.090576s
 String#sub!'string'      8.687M (±13.8%) i/s -     39.756M in   4.999679s
String#gsub!'string'      5.792M (± 1.9%) i/s -     29.470M in   5.090086s
  String#[/regexp/]=     18.112M (± 1.7%) i/s -     90.641M in   5.006096s
 String#sub!/regexp/     22.355M (± 1.5%) i/s -    112.053M in   5.013686s
String#gsub!/regexp/      6.714M (± 2.3%) i/s -     33.808M in   5.038436s

Comparison:
  String#['string']=: 92200184.8 i/s
 String#sub!/regexp/: 22354522.3 i/s - 4.12x  (± 0.00) slower
  String#[/regexp/]=: 18111626.8 i/s - 5.09x  (± 0.00) slower
 String#sub!'string':  8686785.0 i/s - 10.61x  (± 0.00) slower
String#gsub!/regexp/:  6713604.5 i/s - 13.73x  (± 0.00) slower
String#gsub!'string':  5792028.2 i/s - 15.92x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     2.463M i/100ms
        String#chomp     4.339M i/100ms
String#delete_suffix    10.812M i/100ms
Calculating -------------------------------------
          String#sub     25.188M (± 3.9%) i/s -    128.074M in   5.093735s
        String#chomp     46.851M (± 0.3%) i/s -    234.281M in   5.000629s
String#delete_suffix    110.296M (± 7.2%) i/s -    551.403M in   5.027415s

Comparison:
String#delete_suffix: 110296209.4 i/s
        String#chomp: 46850762.9 i/s - 2.35x  (± 0.00) slower
          String#sub: 25188404.9 i/s - 4.38x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   113.662M i/100ms
          String#sub    15.250M i/100ms
Calculating -------------------------------------
String#delete_prefix      1.136B (± 0.3%) i/s -      5.683B in   5.003095s
          String#sub    146.828M (± 1.8%) i/s -    747.237M in   5.091007s

Comparison:
String#delete_prefix: 1135930831.3 i/s
          String#sub: 146828300.7 i/s - 7.74x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.369M i/100ms
    String#unpack[0]     1.649M i/100ms
Calculating -------------------------------------
      String#unpack1     16.641M (± 3.7%) i/s -     83.509M in   5.025469s
    String#unpack[0]     16.674M (± 3.1%) i/s -     84.106M in   5.049015s

Comparison:
    String#unpack[0]: 16674460.3 i/s
      String#unpack1: 16640719.0 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 23.0.0-dev-dd8609b3, like ruby 3.1.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    21.464k i/100ms
          Time.parse   355.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    376.894k (± 8.2%) i/s -      1.889M in   5.048375s
          Time.parse     10.955k (±24.2%) i/s -     46.150k in   5.004664s

Comparison:
        Time.iso8601:   376894.0 i/s
          Time.parse:    10955.0 i/s - 34.40x  (± 0.00) slower

