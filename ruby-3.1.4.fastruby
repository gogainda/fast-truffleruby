$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       591.331k i/100ms
Function with splat arguments
                        20.278k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          5.910M (± 0.2%) i/s -     29.567M in   5.002976s
Function with splat arguments
                        200.098k (± 6.3%) i/s -      1.014M in   5.096186s

Comparison:
Function with single Array argument:  5909825.5 i/s
Function with splat arguments:   200097.8 i/s - 29.53x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   850.874k i/100ms
Sequential Assignment
                       892.114k i/100ms
Calculating -------------------------------------
 Parallel Assignment      8.504M (± 0.0%) i/s -     42.544M in   5.002765s
Sequential Assignment
                          8.914M (± 0.1%) i/s -     44.606M in   5.003900s

Comparison:
Sequential Assignment:  8914189.6 i/s
 Parallel Assignment:  8504037.9 i/s - 1.05x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   366.068k i/100ms
       attr_accessor   431.331k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.678M (± 0.2%) i/s -     18.669M in   5.076249s
       attr_accessor      4.333M (± 0.2%) i/s -     21.998M in   5.076915s

Comparison:
       attr_accessor:  4332940.6 i/s
   getter_and_setter:  3677830.4 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    66.586k i/100ms
         respond_to?   583.945k i/100ms
Calculating -------------------------------------
      begin...rescue    690.857k (± 1.0%) i/s -      3.462M in   5.012397s
         respond_to?      5.844M (± 0.1%) i/s -     29.781M in   5.095922s

Comparison:
         respond_to?:  5844127.7 i/s
      begin...rescue:   690857.3 i/s - 8.46x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   243.694k i/100ms
             &method    88.928k i/100ms
Calculating -------------------------------------
              normal      2.434M (± 0.6%) i/s -     12.185M in   5.007190s
             &method    875.914k (± 0.1%) i/s -      4.446M in   5.076309s

Comparison:
              normal:  2433533.7 i/s
             &method:   875913.6 i/s - 2.78x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       185.000  i/100ms
       define_method   235.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.026k (±14.5%) i/s -      9.620k in   5.033088s
       define_method      2.529k (±17.4%) i/s -     11.750k in   5.034565s

Comparison:
       define_method:     2529.0 i/s
module_eval with string:     2025.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   140.059k i/100ms
       Kernel#format   152.075k i/100ms
            String#%   133.598k i/100ms
Calculating -------------------------------------
         Float#round      1.403M (± 0.1%) i/s -      7.143M in   5.089527s
       Kernel#format      1.520M (± 0.2%) i/s -      7.604M in   5.002979s
            String#%      1.339M (± 0.2%) i/s -      6.813M in   5.087363s

Comparison:
       Kernel#format:  1519848.2 i/s
         Float#round:  1403472.6 i/s - 1.08x  (± 0.00) slower
            String#%:  1339302.0 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   700.468k i/100ms
          OpenStruct   362.143k i/100ms
Calculating -------------------------------------
                Hash      7.005M (± 0.1%) i/s -     35.023M in   4.999972s
          OpenStruct      3.622M (± 0.1%) i/s -     18.469M in   5.099511s

Comparison:
                Hash:  7004726.8 i/s
          OpenStruct:  3621779.3 i/s - 1.93x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   846.590k i/100ms
          OpenStruct     8.284k i/100ms
Calculating -------------------------------------
                Hash      9.040M (± 0.2%) i/s -     45.716M in   5.057227s
          OpenStruct     84.426k (± 2.2%) i/s -    422.484k in   5.006683s

Comparison:
                Hash:  9039756.4 i/s
          OpenStruct:    84426.1 i/s - 107.07x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   490.865k i/100ms
  ancestors.include?    98.064k i/100ms
Calculating -------------------------------------
  less than or equal      4.975M (± 0.3%) i/s -     25.034M in   5.031626s
  ancestors.include?    985.359k (± 0.4%) i/s -      5.001M in   5.075674s

Comparison:
  less than or equal:  4975385.1 i/s
  ancestors.include?:   985358.6 i/s - 5.05x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.458  (± 0.0%) i/s -      3.000  in   6.557137s
         Kernel loop      0.179  (± 0.0%) i/s -      1.000  in   5.586010s

Comparison:
          While Loop:        0.5 i/s
         Kernel loop:        0.2 i/s - 2.56x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.298M i/100ms
         Array#first     1.105M i/100ms
Calculating -------------------------------------
           Array#[0]     12.987M (± 0.2%) i/s -     66.199M in   5.097479s
         Array#first     11.057M (± 0.1%) i/s -     56.376M in   5.098833s

Comparison:
           Array#[0]: 12986674.1 i/s
         Array#first: 11056707.3 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.297M i/100ms
          Array#last     1.096M i/100ms
Calculating -------------------------------------
          Array#[-1]     12.960M (± 0.1%) i/s -     64.850M in   5.003991s
          Array#last     10.967M (± 0.1%) i/s -     55.907M in   5.097633s

Comparison:
          Array#[-1]: 12959599.0 i/s
          Array#last: 10967236.7 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    74.719k i/100ms
Calculating -------------------------------------
                find      0.203  (± 0.0%) i/s -      2.000  in   9.833540s
             bsearch    747.638k (± 0.3%) i/s -      3.811M in   5.097003s

Comparison:
             bsearch:   747637.6 i/s
                find:        0.2 i/s - 3675962.10x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    14.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    147.538  (± 2.7%) i/s -    742.000  in   5.032891s
        Array#insert      1.150  (± 0.0%) i/s -      6.000  in   5.216246s

Comparison:
       Array#unshift:      147.5 i/s
        Array#insert:        1.2 i/s - 128.27x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.870M i/100ms
          Array#size     1.903M i/100ms
         Array#count     1.350M i/100ms
Calculating -------------------------------------
        Array#length     18.674M (± 0.7%) i/s -     93.478M in   5.005925s
          Array#size     19.037M (± 0.5%) i/s -     97.031M in   5.096993s
         Array#count     13.512M (± 0.2%) i/s -     68.867M in   5.096840s

Comparison:
          Array#size: 19037363.1 i/s
        Array#length: 18674458.1 i/s - 1.02x  (± 0.00) slower
         Array#count: 13511707.8 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    33.820k i/100ms
        Array#sample   829.175k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    340.808k (± 0.3%) i/s -      1.725M in   5.061033s
        Array#sample      8.289M (± 0.1%) i/s -     41.459M in   5.001522s

Comparison:
        Array#sample:  8289240.3 i/s
 Array#shuffle.first:   340807.6 i/s - 24.32x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    46.954k i/100ms
          Date.parse    24.338k i/100ms
Calculating -------------------------------------
        Date.iso8601    471.080k (± 0.5%) i/s -      2.395M in   5.083481s
          Date.parse    242.650k (± 0.1%) i/s -      1.217M in   5.015046s

Comparison:
        Date.iso8601:   471080.2 i/s
          Date.parse:   242650.2 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    13.614k i/100ms
           Array#map    19.599k i/100ms
Calculating -------------------------------------
   Array#each + push    135.825k (± 0.2%) i/s -    680.700k in   5.011624s
           Array#map    196.007k (± 0.2%) i/s -    999.549k in   5.099565s

Comparison:
           Array#map:   196007.3 i/s
   Array#each + push:   135824.8 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    22.059k i/100ms
               #each    24.036k i/100ms
Calculating -------------------------------------
            For loop    220.701k (± 0.1%) i/s -      1.125M in   5.097429s
               #each    240.383k (± 0.1%) i/s -      1.226M in   5.099512s

Comparison:
               #each:   240383.1 i/s
            For loop:   220701.3 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    24.096k i/100ms
     each_with_index    13.945k i/100ms
Calculating -------------------------------------
          While Loop    241.040k (± 0.1%) i/s -      1.229M in   5.098305s
     each_with_index    139.379k (± 0.2%) i/s -    697.250k in   5.002567s

Comparison:
          While Loop:   241040.2 i/s
     each_with_index:   139378.8 i/s - 1.73x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    71.600k i/100ms
      inject to_proc     1.711k i/100ms
        inject block     1.560k i/100ms
Calculating -------------------------------------
       inject symbol    715.961k (± 0.0%) i/s -      3.580M in   5.000270s
      inject to_proc     17.095k (± 0.2%) i/s -     85.550k in   5.004333s
        inject block     15.437k (± 0.2%) i/s -     78.000k in   5.052857s

Comparison:
       inject symbol:   715961.4 i/s
      inject to_proc:    17095.2 i/s - 41.88x  (± 0.00) slower
        inject block:    15436.9 i/s - 46.38x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     5.537k i/100ms
   Array#map.flatten     3.038k i/100ms
      Array#flat_map     7.092k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     55.286k (± 0.4%) i/s -    276.850k in   5.007646s
   Array#map.flatten     30.349k (± 0.3%) i/s -    151.900k in   5.005212s
      Array#flat_map     70.949k (± 0.2%) i/s -    361.692k in   5.097928s

Comparison:
      Array#flat_map:    70949.0 i/s
Array#map.flatten(1):    55286.3 i/s - 1.28x  (± 0.00) slower
   Array#map.flatten:    30348.6 i/s - 2.34x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    23.602k i/100ms
  Array#reverse_each    23.585k i/100ms
Calculating -------------------------------------
  Array#reverse.each    236.101k (± 0.2%) i/s -      1.204M in   5.098255s
  Array#reverse_each    236.570k (± 0.1%) i/s -      1.203M in   5.084487s

Comparison:
  Array#reverse_each:   236569.7 i/s
  Array#reverse.each:   236101.3 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        15.533k i/100ms
   Enumerable#detect    62.348k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        155.462k (± 0.1%) i/s -      3.122M in  20.083008s
   Enumerable#detect    624.406k (± 0.1%) i/s -     12.532M in  20.070250s

Comparison:
   Enumerable#detect:   624405.5 i/s
Enumerable#select.first:   155461.7 i/s - 4.02x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       175.083k i/100ms
Enumerable#select.last
                        14.193k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.765M (± 0.9%) i/s -      8.929M in   5.058400s
Enumerable#select.last
                        142.078k (± 0.2%) i/s -    723.843k in   5.094704s

Comparison:
Enumerable#reverse.detect:  1765376.7 i/s
Enumerable#select.last:   142077.9 i/s - 12.43x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.830k i/100ms
  Enumerable#sort_by     3.558k i/100ms
     Enumerable#sort     1.866k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         38.145k (± 0.5%) i/s -    191.500k in   5.020385s
  Enumerable#sort_by     35.652k (± 0.5%) i/s -    181.458k in   5.089857s
     Enumerable#sort     18.727k (± 0.2%) i/s -     95.166k in   5.081637s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    38145.3 i/s
  Enumerable#sort_by:    35651.6 i/s - 1.07x  (± 0.00) slower
     Enumerable#sort:    18727.5 i/s - 2.04x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    13.307k i/100ms
Enumerable#sort_by...first
                         6.618k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    132.640k (± 0.1%) i/s -    665.350k in   5.016202s
Enumerable#sort_by...first
                         66.281k (± 0.5%) i/s -    337.518k in   5.092308s

Comparison:
   Enumerable#min_by:   132640.3 i/s
Enumerable#sort_by...first:    66281.3 i/s - 2.00x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   283.009k i/100ms
            Hash#dup   231.904k i/100ms
Calculating -------------------------------------
              Hash[]      2.796M (± 1.9%) i/s -     14.150M in   5.063417s
            Hash#dup      2.148M (± 0.5%) i/s -     10.899M in   5.074384s

Comparison:
              Hash[]:  2795656.4 i/s
            Hash#dup:  2148001.6 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.133M i/100ms
  Hash#fetch, symbol   971.100k i/100ms
     Hash#[], string   965.412k i/100ms
  Hash#fetch, string   599.106k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     11.333M (± 0.2%) i/s -     57.781M in   5.098645s
  Hash#fetch, symbol      9.598M (± 0.1%) i/s -     48.555M in   5.058816s
     Hash#[], string      9.652M (± 0.1%) i/s -     48.271M in   5.001172s
  Hash#fetch, string      6.044M (± 0.4%) i/s -     30.554M in   5.054990s

Comparison:
     Hash#[], symbol: 11332674.4 i/s
     Hash#[], string:  9651863.9 i/s - 1.17x  (± 0.00) slower
  Hash#fetch, symbol:  9598103.3 i/s - 1.18x  (± 0.00) slower
  Hash#fetch, string:  6044493.0 i/s - 1.87x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   722.129k i/100ms
             Hash#[]   765.836k i/100ms
          Hash#[] ||   708.114k i/100ms
          Hash#[] &&   326.022k i/100ms
          Hash#fetch   499.372k i/100ms
 Hash#fetch fallback   312.440k i/100ms
Calculating -------------------------------------
            Hash#dig      7.149M (± 0.5%) i/s -     36.106M in   5.050987s
             Hash#[]      7.647M (± 0.5%) i/s -     38.292M in   5.007372s
          Hash#[] ||      7.089M (± 0.7%) i/s -     36.114M in   5.094723s
          Hash#[] &&      3.261M (± 0.6%) i/s -     16.627M in   5.099026s
          Hash#fetch      4.963M (± 0.4%) i/s -     24.969M in   5.030832s
 Hash#fetch fallback      3.105M (± 0.7%) i/s -     15.622M in   5.030838s

Comparison:
             Hash#[]:  7647278.8 i/s
            Hash#dig:  7148556.9 i/s - 1.07x  (± 0.00) slower
          Hash#[] ||:  7088815.0 i/s - 1.08x  (± 0.00) slower
          Hash#fetch:  4963209.3 i/s - 1.54x  (± 0.00) slower
          Hash#[] &&:  3260979.2 i/s - 2.35x  (± 0.00) slower
 Hash#fetch fallback:  3105386.9 i/s - 2.46x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.166M i/100ms
  Hash#fetch + block     1.160M i/100ms
    Hash#fetch + arg   841.462k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     11.659M (± 0.3%) i/s -     58.299M in   5.000242s
  Hash#fetch + block     11.605M (± 0.1%) i/s -     59.184M in   5.099656s
    Hash#fetch + arg      8.408M (± 0.1%) i/s -     42.073M in   5.004179s

Comparison:
  Hash#fetch + const: 11659390.9 i/s
  Hash#fetch + block: 11605499.9 i/s - 1.00x  (± 0.00) slower
    Hash#fetch + arg:  8407599.3 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    19.519k i/100ms
         sort + to_h     8.096k i/100ms
Calculating -------------------------------------
      sort_by + to_h    195.118k (± 0.4%) i/s -    975.950k in   5.001938s
         sort + to_h     80.551k (± 0.3%) i/s -    404.800k in   5.025409s

Comparison:
      sort_by + to_h:   195117.7 i/s
         sort + to_h:    80551.2 i/s - 2.42x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   151.897k i/100ms
       Hash#each_key   159.584k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.505M (± 0.1%) i/s -      7.595M in   5.045136s
       Hash#each_key      1.584M (± 2.9%) i/s -      7.979M in   5.041613s

Comparison:
       Hash#each_key:  1584346.5 i/s
      Hash#keys.each:  1505382.5 i/s - 1.05x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.001k i/100ms
           Hash#key?   740.308k i/100ms
Calculating -------------------------------------
  Hash#keys.include?      9.782k (± 4.4%) i/s -     49.049k in   5.024620s
           Hash#key?      7.327M (± 0.1%) i/s -     37.015M in   5.051750s

Comparison:
           Hash#key?:  7327245.6 i/s
  Hash#keys.include?:     9782.4 i/s - 749.02x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     2.966k i/100ms
            Hash#[]=     7.365k i/100ms
Calculating -------------------------------------
         Hash#merge!     29.696k (± 0.1%) i/s -    151.266k in   5.093751s
            Hash#[]=     73.575k (± 0.3%) i/s -    368.250k in   5.005126s

Comparison:
            Hash#[]=:    73575.2 i/s
         Hash#merge!:    29696.4 i/s - 2.48x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.727k i/100ms
      Hash#merge({})     2.917k i/100ms
 Hash#dup#merge!({})     2.102k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         37.045k (± 0.3%) i/s -    186.350k in   5.030493s
      Hash#merge({})     30.515k (± 1.4%) i/s -    154.601k in   5.067494s
 Hash#dup#merge!({})     21.694k (± 0.1%) i/s -    109.304k in   5.038562s

Comparison:
{}#merge!(Hash) do end:    37044.5 i/s
      Hash#merge({}):    30514.6 i/s - 1.21x  (± 0.00) slower
 Hash#dup#merge!({}):    21693.5 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   284.861k i/100ms
          Hash#merge   251.776k i/100ms
Calculating -------------------------------------
        Hash#**other      2.847M (± 0.1%) i/s -     14.243M in   5.003172s
          Hash#merge      2.557M (± 0.9%) i/s -     12.841M in   5.022018s

Comparison:
        Hash#**other:  2846807.3 i/s
          Hash#merge:  2557084.7 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.085k i/100ms
         Hash#merge!     2.935k i/100ms
Calculating -------------------------------------
          Hash#merge     10.587k (± 1.0%) i/s -     53.165k in   5.022082s
         Hash#merge!     29.326k (± 0.2%) i/s -    146.750k in   5.004034s

Comparison:
         Hash#merge!:    29326.4 i/s
          Hash#merge:    10587.4 i/s - 2.77x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      315.702k i/100ms
Array#each             167.882k i/100ms
Array#each_w/_object   103.094k i/100ms
Hash#select-include     57.115k i/100ms
Calculating -------------------------------------
Hash#native-slice         3.117M (± 0.1%) i/s -     15.785M in   5.063627s
Array#each                1.671M (± 0.1%) i/s -      8.394M in   5.024008s
Array#each_w/_object      1.031M (± 1.1%) i/s -      5.258M in   5.100174s
Hash#select-include     561.788k (± 1.4%) i/s -      2.856M in   5.084356s

Comparison:
Hash#native-slice   :  3117352.6 i/s
Array#each          :  1670798.3 i/s - 1.87x  (± 0.00) slower
Array#each_w/_object:  1031024.8 i/s - 3.02x  (± 0.00) slower
Hash#select-include :   561787.8 i/s - 5.55x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   924.000  i/100ms
         Hash#value?   827.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      8.952k (± 4.8%) i/s -     45.276k in   5.070282s
         Hash#value?      8.284k (± 0.3%) i/s -     42.177k in   5.091215s

Comparison:
Hash#values.include?:     8952.0 i/s
         Hash#value?:     8284.3 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   521.783k i/100ms
                send   345.800k i/100ms
      method_missing   265.300k i/100ms
Calculating -------------------------------------
                call      5.217M (± 0.1%) i/s -     26.089M in   5.001242s
                send      3.469M (± 0.1%) i/s -     17.636M in   5.083160s
      method_missing      2.674M (± 0.4%) i/s -     13.530M in   5.060772s

Comparison:
                call:  5216536.3 i/s
                send:  3469457.7 i/s - 1.50x  (± 0.00) slower
      method_missing:  2673611.4 i/s - 1.95x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     7.006k i/100ms
      Symbol#to_proc     7.854k i/100ms
Calculating -------------------------------------
               Block     68.937k (± 2.4%) i/s -    350.300k in   5.084536s
      Symbol#to_proc     78.501k (± 1.1%) i/s -    392.700k in   5.003064s

Comparison:
      Symbol#to_proc:    78501.0 i/s
               Block:    68936.9 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   747.505k i/100ms
       block + yield   777.435k i/100ms
        unused block     1.027M i/100ms
               yield   989.270k i/100ms
Calculating -------------------------------------
          block.call      7.478M (± 0.2%) i/s -     38.123M in   5.097845s
       block + yield      7.764M (± 0.2%) i/s -     38.872M in   5.006510s
        unused block     10.271M (± 0.1%) i/s -     51.361M in   5.000446s
               yield      9.835M (± 2.2%) i/s -     49.464M in   5.031733s

Comparison:
        unused block: 10271263.8 i/s
               yield:  9835416.7 i/s - 1.04x  (± 0.00) slower
       block + yield:  7764265.0 i/s - 1.32x  (± 0.00) slower
          block.call:  7478227.6 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   244.870k i/100ms
      range#include?     8.278k i/100ms
       range#member?     8.302k i/100ms
       plain compare   349.019k i/100ms
Calculating -------------------------------------
        range#cover?      2.448M (± 0.1%) i/s -     12.244M in   5.001587s
      range#include?     84.212k (± 1.8%) i/s -    422.178k in   5.014850s
       range#member?     84.174k (± 1.5%) i/s -    423.402k in   5.031238s
       plain compare      3.481M (± 0.3%) i/s -     17.451M in   5.013748s

Comparison:
       plain compare:  3480654.4 i/s
        range#cover?:  2447924.6 i/s - 1.42x  (± 0.00) slower
      range#include?:    84211.9 i/s - 41.33x  (± 0.00) slower
       range#member?:    84174.2 i/s - 41.35x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   747.599k i/100ms
           String#=~   486.478k i/100ms
          Regexp#===   460.729k i/100ms
        String#match   337.775k i/100ms
Calculating -------------------------------------
       String#match?      7.480M (± 0.0%) i/s -     38.128M in   5.097350s
           String#=~      4.885M (± 0.1%) i/s -     24.810M in   5.079060s
          Regexp#===      4.617M (± 0.1%) i/s -     23.497M in   5.089388s
        String#match      3.370M (± 0.2%) i/s -     16.889M in   5.011093s

Comparison:
       String#match?:  7479878.2 i/s
           String#=~:  4884839.4 i/s - 1.53x  (± 0.00) slower
          Regexp#===:  4616903.1 i/s - 1.62x  (± 0.00) slower
        String#match:  3370286.2 i/s - 2.22x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   505.426k i/100ms
      String#casecmp   614.744k i/100ms
Calculating -------------------------------------
String#downcase + ==      5.039M (± 0.5%) i/s -     25.271M in   5.015177s
      String#casecmp      6.139M (± 0.4%) i/s -     30.737M in   5.007070s

Comparison:
      String#casecmp:  6138884.9 i/s
String#downcase + ==:  5039092.5 i/s - 1.22x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   446.180k i/100ms
       String#concat   465.758k i/100ms
       String#append   516.048k i/100ms
         "foo" "bar"   994.891k i/100ms
  "#{'foo'}#{'bar'}"   971.497k i/100ms
Calculating -------------------------------------
            String#+      4.459M (± 0.9%) i/s -     22.309M in   5.003643s
       String#concat      4.661M (± 0.6%) i/s -     23.754M in   5.096421s
       String#append      5.160M (± 0.7%) i/s -     25.802M in   5.000309s
         "foo" "bar"      9.919M (± 0.8%) i/s -     49.745M in   5.015368s
  "#{'foo'}#{'bar'}"      9.681M (± 0.6%) i/s -     48.575M in   5.017630s

Comparison:
         "foo" "bar":  9919104.9 i/s
  "#{'foo'}#{'bar'}":  9681178.1 i/s - 1.02x  (± 0.00) slower
       String#append:  5160456.1 i/s - 1.92x  (± 0.00) slower
       String#concat:  4661044.8 i/s - 2.13x  (± 0.00) slower
            String#+:  4458912.8 i/s - 2.22x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@   783.021k i/100ms
          String#dup   438.695k i/100ms
Calculating -------------------------------------
           String#+@      7.823M (± 0.4%) i/s -     39.151M in   5.004787s
          String#dup      4.389M (± 0.1%) i/s -     22.373M in   5.097993s

Comparison:
           String#+@:  7822856.3 i/s
          String#dup:  4388684.1 i/s - 1.78x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   145.352k i/100ms
       String#match?   328.446k i/100ms
    String#end_with?   493.255k i/100ms
Calculating -------------------------------------
           String#=~      1.462M (± 0.2%) i/s -      7.413M in   5.068972s
       String#match?      3.286M (± 1.1%) i/s -     16.751M in   5.097912s
    String#end_with?      4.930M (± 0.5%) i/s -     24.663M in   5.002732s

Comparison:
    String#end_with?:  4929978.6 i/s
       String#match?:  3286216.3 i/s - 1.50x  (± 0.00) slower
           String#=~:  1462421.1 i/s - 3.37x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    76.465k i/100ms
          String#sub    94.772k i/100ms
String#dup["string"]=
                       115.849k i/100ms
Calculating -------------------------------------
         String#gsub    769.901k (± 0.3%) i/s -      3.900M in   5.065254s
          String#sub    937.126k (± 0.8%) i/s -      4.739M in   5.056876s
String#dup["string"]=
                          1.180M (± 0.2%) i/s -      5.908M in   5.007243s

Comparison:
String#dup["string"]=:  1179955.0 i/s
          String#sub:   937125.7 i/s - 1.26x  (± 0.00) slower
         String#gsub:   769900.9 i/s - 1.53x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    67.426k i/100ms
           String#tr   280.452k i/100ms
Calculating -------------------------------------
         String#gsub    672.148k (± 0.3%) i/s -      3.371M in   5.015748s
           String#tr      2.803M (± 0.7%) i/s -     14.023M in   5.003169s

Comparison:
           String#tr:  2802868.5 i/s
         String#gsub:   672148.3 i/s - 4.17x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   944.806k i/100ms
         With Freeze     1.370M i/100ms
Calculating -------------------------------------
      Without Freeze      9.421M (± 0.3%) i/s -     47.240M in   5.014400s
         With Freeze     13.669M (± 0.1%) i/s -     68.493M in   5.010812s

Comparison:
         With Freeze: 13668983.8 i/s
      Without Freeze:  9421019.0 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.570k i/100ms
      String#squeeze   131.941k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     25.758k (± 0.2%) i/s -    131.070k in   5.088567s
      String#squeeze      1.325M (± 0.1%) i/s -      6.729M in   5.078344s

Comparison:
      String#squeeze:  1325038.7 i/s
 String#gsub/regex+/:    25757.8 i/s - 51.44x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   211.128k i/100ms
       String#match?   578.251k i/100ms
  String#start_with?   677.737k i/100ms
Calculating -------------------------------------
           String#=~      2.119M (± 0.4%) i/s -     10.768M in   5.082439s
       String#match?      5.793M (± 0.1%) i/s -     29.491M in   5.090500s
  String#start_with?      6.728M (± 0.3%) i/s -     33.887M in   5.036914s

Comparison:
  String#start_with?:  6727758.2 i/s
       String#match?:  5793303.4 i/s - 1.16x  (± 0.00) slower
           String#=~:  2118610.1 i/s - 3.18x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   184.814k i/100ms
    String#[0, n] ==    67.456k i/100ms
   String#[RANGE] ==    60.669k i/100ms
   String#[0...n] ==    35.225k i/100ms
Calculating -------------------------------------
  String#start_with?      1.852M (± 0.1%) i/s -      9.426M in   5.090596s
    String#[0, n] ==    671.859k (± 1.2%) i/s -      3.373M in   5.020871s
   String#[RANGE] ==    604.929k (± 0.5%) i/s -      3.033M in   5.014675s
   String#[0...n] ==    352.147k (± 0.3%) i/s -      1.761M in   5.001522s

Comparison:
  String#start_with?:  1851558.0 i/s
    String#[0, n] ==:   671859.2 i/s - 2.76x  (± 0.00) slower
   String#[RANGE] ==:   604929.4 i/s - 3.06x  (± 0.00) slower
   String#[0...n] ==:   352146.7 i/s - 5.26x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   118.344k i/100ms
 String#sub!'string'    86.649k i/100ms
String#gsub!'string'    54.933k i/100ms
  String#[/regexp/]=   102.426k i/100ms
 String#sub!/regexp/    82.380k i/100ms
String#gsub!/regexp/    44.036k i/100ms
Calculating -------------------------------------
  String#['string']=      1.163M (± 0.4%) i/s -      5.917M in   5.089169s
 String#sub!'string'    866.516k (± 0.4%) i/s -      4.332M in   4.999950s
String#gsub!'string'    545.257k (± 0.5%) i/s -      2.747M in   5.037462s
  String#[/regexp/]=      1.016M (± 0.5%) i/s -      5.121M in   5.040414s
 String#sub!/regexp/    816.052k (± 0.6%) i/s -      4.119M in   5.047641s
String#gsub!/regexp/    442.507k (± 0.6%) i/s -      2.246M in   5.075475s

Comparison:
  String#['string']=:  1162727.6 i/s
  String#[/regexp/]=:  1016069.4 i/s - 1.14x  (± 0.00) slower
 String#sub!'string':   866515.7 i/s - 1.34x  (± 0.00) slower
 String#sub!/regexp/:   816052.1 i/s - 1.42x  (± 0.00) slower
String#gsub!'string':   545257.4 i/s - 2.13x  (± 0.00) slower
String#gsub!/regexp/:   442507.0 i/s - 2.63x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   115.395k i/100ms
        String#chomp   425.240k i/100ms
String#delete_suffix   461.396k i/100ms
Calculating -------------------------------------
          String#sub      1.116M (± 2.3%) i/s -      5.654M in   5.069903s
        String#chomp      4.251M (± 0.1%) i/s -     21.262M in   5.002058s
String#delete_suffix      4.617M (± 0.1%) i/s -     23.531M in   5.096427s

Comparison:
String#delete_suffix:  4617204.7 i/s
        String#chomp:  4250659.2 i/s - 1.09x  (± 0.00) slower
          String#sub:  1115884.5 i/s - 4.14x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   454.411k i/100ms
          String#sub   117.642k i/100ms
Calculating -------------------------------------
String#delete_prefix      4.557M (± 0.2%) i/s -     23.175M in   5.085354s
          String#sub      1.129M (± 2.0%) i/s -      5.647M in   5.002406s

Comparison:
String#delete_prefix:  4557210.5 i/s
          String#sub:  1129273.5 i/s - 4.04x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   467.688k i/100ms
    String#unpack[0]   358.944k i/100ms
Calculating -------------------------------------
      String#unpack1      4.706M (± 0.3%) i/s -     23.852M in   5.068706s
    String#unpack[0]      3.599M (± 0.6%) i/s -     18.306M in   5.087241s

Comparison:
      String#unpack1:  4705808.7 i/s
    String#unpack[0]:  3598569.2 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    21.544k i/100ms
          Time.parse     7.456k i/100ms
Calculating -------------------------------------
        Time.iso8601    215.883k (± 0.4%) i/s -      1.099M in   5.089619s
          Time.parse     74.635k (± 0.3%) i/s -    380.256k in   5.094929s

Comparison:
        Time.iso8601:   215883.3 i/s
          Time.parse:    74634.7 i/s - 2.89x  (± 0.00) slower

