$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       764.426k i/100ms
Function with splat arguments
                        27.040k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.669M (± 0.4%) i/s -     38.986M in   5.083556s
Function with splat arguments
                        263.570k (± 5.8%) i/s -      1.325M in   5.048524s

Comparison:
Function with single Array argument:  7669134.4 i/s
Function with splat arguments:   263569.9 i/s - 29.10x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   996.128k i/100ms
Sequential Assignment
                         1.001M i/100ms
Calculating -------------------------------------
 Parallel Assignment      9.994M (± 0.3%) i/s -     50.803M in   5.083403s
Sequential Assignment
                          9.837M (± 3.0%) i/s -     50.064M in   5.093850s

Comparison:
 Parallel Assignment:  9993871.2 i/s
Sequential Assignment:  9837310.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   463.877k i/100ms
       attr_accessor   547.012k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.603M (± 1.1%) i/s -     23.194M in   5.039020s
       attr_accessor      5.482M (± 0.3%) i/s -     27.898M in   5.088557s

Comparison:
       attr_accessor:  5482472.9 i/s
   getter_and_setter:  4603369.8 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    87.618k i/100ms
         respond_to?   758.755k i/100ms
Calculating -------------------------------------
      begin...rescue    892.278k (± 0.3%) i/s -      4.469M in   5.008043s
         respond_to?      7.561M (± 0.4%) i/s -     37.938M in   5.017481s

Comparison:
         respond_to?:  7561266.4 i/s
      begin...rescue:   892278.4 i/s - 8.47x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   290.452k i/100ms
             &method   121.252k i/100ms
Calculating -------------------------------------
              normal      2.978M (± 1.2%) i/s -     15.104M in   5.072087s
             &method      1.213M (± 0.6%) i/s -      6.184M in   5.097946s

Comparison:
              normal:  2978208.6 i/s
             &method:  1213058.5 i/s - 2.46x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       260.000  i/100ms
       define_method   258.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.391k (±20.6%) i/s -     10.660k in   5.047666s
       define_method      3.270k (±21.2%) i/s -     14.964k in   5.016871s

Comparison:
       define_method:     3269.6 i/s
module_eval with string:     2391.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   267.639k i/100ms
       Kernel#format   204.908k i/100ms
            String#%   175.849k i/100ms
Calculating -------------------------------------
         Float#round      2.671M (± 1.0%) i/s -     13.382M in   5.011346s
       Kernel#format      2.065M (± 0.4%) i/s -     10.450M in   5.060351s
            String#%      1.764M (± 0.8%) i/s -      8.968M in   5.085796s

Comparison:
         Float#round:  2670617.6 i/s
       Kernel#format:  2065175.0 i/s - 1.29x  (± 0.00) slower
            String#%:  1763509.5 i/s - 1.51x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   893.992k i/100ms
          OpenStruct   497.636k i/100ms
Calculating -------------------------------------
                Hash      8.904M (± 0.5%) i/s -     44.700M in   5.020392s
          OpenStruct      4.993M (± 0.4%) i/s -     25.379M in   5.083333s

Comparison:
                Hash:  8903834.1 i/s
          OpenStruct:  4992767.4 i/s - 1.78x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.068M i/100ms
          OpenStruct    11.431k i/100ms
Calculating -------------------------------------
                Hash     11.396M (± 0.3%) i/s -     57.691M in   5.062438s
          OpenStruct    115.761k (± 2.6%) i/s -    582.981k in   5.039481s

Comparison:
                Hash: 11395908.3 i/s
          OpenStruct:   115761.5 i/s - 98.44x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   577.525k i/100ms
  ancestors.include?   123.147k i/100ms
Calculating -------------------------------------
  less than or equal      5.816M (± 1.0%) i/s -     29.454M in   5.064643s
  ancestors.include?      1.233M (± 1.4%) i/s -      6.280M in   5.094799s

Comparison:
  less than or equal:  5816087.0 i/s
  ancestors.include?:  1232970.9 i/s - 4.72x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.693  (± 0.0%) i/s -      4.000  in   5.848376s
         Kernel loop      0.198  (± 0.0%) i/s -      1.000  in   5.062460s

Comparison:
          While Loop:        0.7 i/s
         Kernel loop:        0.2 i/s - 3.51x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.526M i/100ms
         Array#first     1.300M i/100ms
Calculating -------------------------------------
           Array#[0]     15.273M (± 0.5%) i/s -     77.818M in   5.095215s
         Array#first     13.174M (± 0.3%) i/s -     66.284M in   5.031586s

Comparison:
           Array#[0]: 15273128.7 i/s
         Array#first: 13173693.3 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.559M i/100ms
          Array#last     1.308M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.571M (± 0.6%) i/s -     77.973M in   5.007892s
          Array#last     13.169M (± 0.3%) i/s -     66.689M in   5.064318s

Comparison:
          Array#[-1]: 15570584.8 i/s
          Array#last: 13168633.3 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    97.027k i/100ms
Calculating -------------------------------------
                find      0.253  (± 0.0%) i/s -      2.000  in   7.904351s
             bsearch    966.400k (± 0.4%) i/s -      4.851M in   5.020110s

Comparison:
             bsearch:   966400.2 i/s
                find:        0.3 i/s - 3819380.90x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    18.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    191.253  (± 2.1%) i/s -    972.000  in   5.084895s
        Array#insert      1.454  (± 0.0%) i/s -      8.000  in   5.500606s

Comparison:
       Array#unshift:      191.3 i/s
        Array#insert:        1.5 i/s - 131.50x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.133M i/100ms
          Array#size     2.115M i/100ms
         Array#count     1.614M i/100ms
Calculating -------------------------------------
        Array#length     21.348M (± 0.2%) i/s -    108.760M in   5.094580s
          Array#size     21.283M (± 0.2%) i/s -    107.850M in   5.067455s
         Array#count     16.296M (± 0.7%) i/s -     82.305M in   5.051003s

Comparison:
        Array#length: 21348326.7 i/s
          Array#size: 21282904.5 i/s - same-ish: difference falls within error
         Array#count: 16295535.4 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.750k i/100ms
        Array#sample     1.040M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    459.485k (± 0.3%) i/s -      2.333M in   5.078028s
        Array#sample     10.386M (± 0.5%) i/s -     52.004M in   5.007358s

Comparison:
        Array#sample: 10385797.7 i/s
 Array#shuffle.first:   459485.0 i/s - 22.60x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    63.936k i/100ms
          Date.parse    32.261k i/100ms
Calculating -------------------------------------
        Date.iso8601    639.515k (± 0.5%) i/s -      3.261M in   5.098869s
          Date.parse    322.829k (± 0.8%) i/s -      1.645M in   5.096841s

Comparison:
        Date.iso8601:   639514.9 i/s
          Date.parse:   322829.3 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.584k i/100ms
           Array#map    25.716k i/100ms
Calculating -------------------------------------
   Array#each + push    186.536k (± 0.3%) i/s -    947.784k in   5.081025s
           Array#map    256.308k (± 0.6%) i/s -      1.286M in   5.016817s

Comparison:
           Array#map:   256307.7 i/s
   Array#each + push:   186535.6 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    28.824k i/100ms
               #each    31.625k i/100ms
Calculating -------------------------------------
            For loop    289.039k (± 0.4%) i/s -      1.470M in   5.085970s
               #each    315.283k (± 0.6%) i/s -      1.581M in   5.015525s

Comparison:
               #each:   315283.4 i/s
            For loop:   289038.7 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.618k i/100ms
     each_with_index    18.752k i/100ms
Calculating -------------------------------------
          While Loop    278.113k (± 0.7%) i/s -      1.409M in   5.064765s
     each_with_index    187.445k (± 0.5%) i/s -    937.600k in   5.002110s

Comparison:
          While Loop:   278113.4 i/s
     each_with_index:   187445.3 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol   124.002k i/100ms
      inject to_proc     1.767k i/100ms
        inject block     1.948k i/100ms
Calculating -------------------------------------
       inject symbol      1.239M (± 0.8%) i/s -      6.200M in   5.006432s
      inject to_proc     17.633k (± 0.4%) i/s -     88.350k in   5.010671s
        inject block     19.429k (± 0.5%) i/s -     97.400k in   5.013197s

Comparison:
       inject symbol:  1238504.2 i/s
        inject block:    19429.1 i/s - 63.74x  (± 0.00) slower
      inject to_proc:    17632.6 i/s - 70.24x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.988k i/100ms
   Array#map.flatten     4.186k i/100ms
      Array#flat_map     8.892k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     69.747k (± 0.5%) i/s -    349.400k in   5.009635s
   Array#map.flatten     41.809k (± 0.5%) i/s -    209.300k in   5.006263s
      Array#flat_map     88.723k (± 4.9%) i/s -    444.600k in   5.028739s

Comparison:
      Array#flat_map:    88722.5 i/s
Array#map.flatten(1):    69747.1 i/s - 1.27x  (± 0.00) slower
   Array#map.flatten:    41808.7 i/s - 2.12x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    30.568k i/100ms
  Array#reverse_each    31.657k i/100ms
Calculating -------------------------------------
  Array#reverse.each    305.340k (± 0.4%) i/s -      1.528M in   5.005662s
  Array#reverse_each    316.066k (± 0.4%) i/s -      1.583M in   5.008071s

Comparison:
  Array#reverse_each:   316065.5 i/s
  Array#reverse.each:   305340.1 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.231k i/100ms
   Enumerable#detect    81.452k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        203.351k (± 0.4%) i/s -      4.087M in  20.096940s
   Enumerable#detect    816.650k (± 0.5%) i/s -     16.372M in  20.048055s

Comparison:
   Enumerable#detect:   816649.8 i/s
Enumerable#select.first:   203350.9 i/s - 4.02x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       246.062k i/100ms
Enumerable#select.last
                        18.483k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.416M (± 0.5%) i/s -     12.303M in   5.091992s
Enumerable#select.last
                        183.538k (± 0.7%) i/s -    924.150k in   5.035487s

Comparison:
Enumerable#reverse.detect:  2416217.9 i/s
Enumerable#select.last:   183538.0 i/s - 13.16x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         5.016k i/100ms
  Enumerable#sort_by     4.989k i/100ms
     Enumerable#sort     2.348k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         52.112k (± 0.9%) i/s -    260.832k in   5.005552s
  Enumerable#sort_by     50.158k (± 1.2%) i/s -    254.439k in   5.073438s
     Enumerable#sort     23.437k (± 0.9%) i/s -    117.400k in   5.009564s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    52112.4 i/s
  Enumerable#sort_by:    50158.0 i/s - 1.04x  (± 0.00) slower
     Enumerable#sort:    23437.0 i/s - 2.22x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.481k i/100ms
Enumerable#sort_by...first
                         8.889k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    174.390k (± 0.6%) i/s -    874.050k in   5.012193s
Enumerable#sort_by...first
                         88.932k (± 0.3%) i/s -    453.339k in   5.097667s

Comparison:
   Enumerable#min_by:   174390.4 i/s
Enumerable#sort_by...first:    88931.6 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   418.513k i/100ms
            Hash#dup   320.659k i/100ms
Calculating -------------------------------------
              Hash[]      4.015M (± 2.2%) i/s -     20.089M in   5.005718s
            Hash#dup      2.967M (± 1.2%) i/s -     15.071M in   5.080809s

Comparison:
              Hash[]:  4014907.5 i/s
            Hash#dup:  2966671.4 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.373M i/100ms
  Hash#fetch, symbol     1.171M i/100ms
     Hash#[], string     1.230M i/100ms
  Hash#fetch, string   774.224k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     13.926M (± 0.2%) i/s -     70.016M in   5.027876s
  Hash#fetch, symbol     11.818M (± 0.3%) i/s -     59.738M in   5.054798s
     Hash#[], string     12.345M (± 0.5%) i/s -     62.712M in   5.080238s
  Hash#fetch, string      7.711M (± 0.5%) i/s -     38.711M in   5.020293s

Comparison:
     Hash#[], symbol: 13925675.7 i/s
     Hash#[], string: 12344549.5 i/s - 1.13x  (± 0.00) slower
  Hash#fetch, symbol: 11818249.5 i/s - 1.18x  (± 0.00) slower
  Hash#fetch, string:  7711138.6 i/s - 1.81x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   894.300k i/100ms
             Hash#[]     1.006M i/100ms
          Hash#[] ||   848.337k i/100ms
          Hash#[] &&   408.497k i/100ms
          Hash#fetch   599.762k i/100ms
 Hash#fetch fallback   398.150k i/100ms
Calculating -------------------------------------
            Hash#dig      9.121M (± 0.6%) i/s -     45.609M in   5.000657s
             Hash#[]      9.696M (± 1.9%) i/s -     49.278M in   5.083993s
          Hash#[] ||      8.462M (± 0.4%) i/s -     42.417M in   5.012892s
          Hash#[] &&      4.225M (± 1.9%) i/s -     21.242M in   5.029416s
          Hash#fetch      6.397M (± 2.1%) i/s -     32.387M in   5.065371s
 Hash#fetch fallback      3.966M (± 0.4%) i/s -     19.908M in   5.019829s

Comparison:
             Hash#[]:  9696414.0 i/s
            Hash#dig:  9120941.1 i/s - 1.06x  (± 0.00) slower
          Hash#[] ||:  8461688.9 i/s - 1.15x  (± 0.00) slower
          Hash#fetch:  6396617.5 i/s - 1.52x  (± 0.00) slower
          Hash#[] &&:  4224973.9 i/s - 2.30x  (± 0.00) slower
 Hash#fetch fallback:  3965848.7 i/s - 2.44x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.420M i/100ms
  Hash#fetch + block     1.451M i/100ms
    Hash#fetch + arg     1.078M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.248M (± 0.3%) i/s -     72.412M in   5.082448s
  Hash#fetch + block     14.527M (± 0.5%) i/s -     74.020M in   5.095329s
    Hash#fetch + arg     10.786M (± 0.6%) i/s -     54.992M in   5.098670s

Comparison:
  Hash#fetch + block: 14527445.8 i/s
  Hash#fetch + const: 14247719.5 i/s - 1.02x  (± 0.00) slower
    Hash#fetch + arg: 10785805.2 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.708k i/100ms
         sort + to_h    11.693k i/100ms
Calculating -------------------------------------
      sort_by + to_h    272.914k (± 0.8%) i/s -      1.385M in   5.076620s
         sort + to_h    117.728k (± 0.4%) i/s -    596.343k in   5.065494s

Comparison:
      sort_by + to_h:   272914.3 i/s
         sort + to_h:   117728.1 i/s - 2.32x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   185.188k i/100ms
       Hash#each_key   194.049k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.866M (± 0.7%) i/s -      9.445M in   5.060705s
       Hash#each_key      1.933M (± 0.2%) i/s -      9.702M in   5.018487s

Comparison:
       Hash#each_key:  1933349.1 i/s
      Hash#keys.each:  1866349.4 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     3.417k i/100ms
           Hash#key?   946.569k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     33.178k (± 8.0%) i/s -    167.433k in   5.088390s
           Hash#key?      9.474M (± 0.5%) i/s -     48.275M in   5.095727s

Comparison:
           Hash#key?:  9473892.4 i/s
  Hash#keys.include?:    33178.1 i/s - 285.55x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.164k i/100ms
            Hash#[]=    10.430k i/100ms
Calculating -------------------------------------
         Hash#merge!     41.563k (± 2.8%) i/s -    208.200k in   5.013772s
            Hash#[]=    102.678k (± 0.6%) i/s -    521.500k in   5.079186s

Comparison:
            Hash#[]=:   102677.5 i/s
         Hash#merge!:    41563.5 i/s - 2.47x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         5.213k i/100ms
      Hash#merge({})     4.157k i/100ms
 Hash#dup#merge!({})     2.741k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         52.052k (± 0.5%) i/s -    260.650k in   5.007618s
      Hash#merge({})     41.467k (± 0.4%) i/s -    207.850k in   5.012463s
 Hash#dup#merge!({})     27.229k (± 0.6%) i/s -    137.050k in   5.033487s

Comparison:
{}#merge!(Hash) do end:    52051.8 i/s
      Hash#merge({}):    41467.3 i/s - 1.26x  (± 0.00) slower
 Hash#dup#merge!({}):    27228.7 i/s - 1.91x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   395.156k i/100ms
          Hash#merge   363.172k i/100ms
Calculating -------------------------------------
        Hash#**other      3.928M (± 0.9%) i/s -     19.758M in   5.029777s
          Hash#merge      3.679M (± 0.2%) i/s -     18.522M in   5.034777s

Comparison:
        Hash#**other:  3928478.8 i/s
          Hash#merge:  3678788.5 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.694k i/100ms
         Hash#merge!     4.053k i/100ms
Calculating -------------------------------------
          Hash#merge     16.535k (± 3.4%) i/s -     83.006k in   5.026841s
         Hash#merge!     40.674k (± 0.5%) i/s -    206.703k in   5.082016s

Comparison:
         Hash#merge!:    40674.3 i/s
          Hash#merge:    16535.5 i/s - 2.46x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      428.666k i/100ms
Array#each             229.521k i/100ms
Array#each_w/_object   172.822k i/100ms
Hash#select-include     73.172k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.237M (± 0.3%) i/s -     21.433M in   5.058227s
Array#each                2.284M (± 0.9%) i/s -     11.476M in   5.024982s
Array#each_w/_object      1.726M (± 2.2%) i/s -      8.641M in   5.009598s
Hash#select-include     729.231k (± 0.5%) i/s -      3.659M in   5.017189s

Comparison:
Hash#native-slice   :  4237356.3 i/s
Array#each          :  2283976.8 i/s - 1.86x  (± 0.00) slower
Array#each_w/_object:  1725857.0 i/s - 2.46x  (± 0.00) slower
Hash#select-include :   729230.7 i/s - 5.81x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.553k i/100ms
         Hash#value?     1.262k i/100ms
Calculating -------------------------------------
Hash#values.include?     15.288k (± 4.1%) i/s -     77.650k in   5.089518s
         Hash#value?     12.687k (± 0.6%) i/s -     64.362k in   5.073371s

Comparison:
Hash#values.include?:    15288.3 i/s
         Hash#value?:    12686.6 i/s - 1.21x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   660.429k i/100ms
                send   483.664k i/100ms
      method_missing   385.183k i/100ms
Calculating -------------------------------------
                call      6.681M (± 0.3%) i/s -     33.682M in   5.041626s
                send      4.878M (± 0.9%) i/s -     24.667M in   5.056711s
      method_missing      3.824M (± 0.3%) i/s -     19.259M in   5.036142s

Comparison:
                call:  6680802.8 i/s
                send:  4878414.4 i/s - 1.37x  (± 0.00) slower
      method_missing:  3824216.2 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     8.688k i/100ms
      Symbol#to_proc     9.347k i/100ms
Calculating -------------------------------------
               Block     86.641k (± 0.7%) i/s -    434.400k in   5.014045s
      Symbol#to_proc     93.308k (± 0.4%) i/s -    467.350k in   5.008789s

Comparison:
      Symbol#to_proc:    93307.5 i/s
               Block:    86641.4 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   909.953k i/100ms
       block + yield   957.981k i/100ms
        unused block     1.292M i/100ms
               yield     1.157M i/100ms
Calculating -------------------------------------
          block.call      9.078M (± 0.4%) i/s -     45.498M in   5.011892s
       block + yield      9.582M (± 0.3%) i/s -     48.857M in   5.098883s
        unused block     12.987M (± 0.5%) i/s -     65.872M in   5.072428s
               yield     11.597M (± 0.2%) i/s -     58.996M in   5.087337s

Comparison:
        unused block: 12986617.5 i/s
               yield: 11596787.8 i/s - 1.12x  (± 0.00) slower
       block + yield:  9581982.8 i/s - 1.36x  (± 0.00) slower
          block.call:  9078092.4 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   312.894k i/100ms
      range#include?    12.983k i/100ms
       range#member?    12.970k i/100ms
       plain compare   522.375k i/100ms
Calculating -------------------------------------
        range#cover?      3.159M (± 0.5%) i/s -     15.958M in   5.052055s
      range#include?    132.871k (± 0.4%) i/s -    675.116k in   5.081097s
       range#member?    132.359k (± 0.6%) i/s -    674.440k in   5.095692s
       plain compare      5.226M (± 0.2%) i/s -     26.641M in   5.097526s

Comparison:
       plain compare:  5226313.0 i/s
        range#cover?:  3158722.0 i/s - 1.65x  (± 0.00) slower
      range#include?:   132870.8 i/s - 39.33x  (± 0.00) slower
       range#member?:   132359.1 i/s - 39.49x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   934.515k i/100ms
           String#=~   664.340k i/100ms
          Regexp#===   600.697k i/100ms
        String#match   489.938k i/100ms
Calculating -------------------------------------
       String#match?      9.340M (± 0.4%) i/s -     46.726M in   5.002752s
           String#=~      6.546M (± 0.5%) i/s -     33.217M in   5.074217s
          Regexp#===      6.010M (± 0.6%) i/s -     30.636M in   5.097691s
        String#match      4.885M (± 0.3%) i/s -     24.497M in   5.015220s

Comparison:
       String#match?:  9340134.3 i/s
           String#=~:  6546381.6 i/s - 1.43x  (± 0.00) slower
          Regexp#===:  6009887.2 i/s - 1.55x  (± 0.00) slower
        String#match:  4884563.7 i/s - 1.91x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   646.342k i/100ms
      String#casecmp   785.696k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.474M (± 0.8%) i/s -     32.963M in   5.091758s
      String#casecmp      7.863M (± 1.1%) i/s -     40.070M in   5.096707s

Comparison:
      String#casecmp:  7863023.4 i/s
String#downcase + ==:  6474281.0 i/s - 1.21x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   579.153k i/100ms
       String#concat   602.022k i/100ms
       String#append   638.543k i/100ms
         "foo" "bar"     1.136M i/100ms
  "#{'foo'}#{'bar'}"     1.175M i/100ms
Calculating -------------------------------------
            String#+      5.815M (± 0.7%) i/s -     29.537M in   5.079864s
       String#concat      5.996M (± 0.4%) i/s -     30.101M in   5.020228s
       String#append      6.338M (± 0.3%) i/s -     31.927M in   5.037092s
         "foo" "bar"     11.293M (± 0.4%) i/s -     56.796M in   5.029287s
  "#{'foo'}#{'bar'}"     11.739M (± 0.3%) i/s -     58.757M in   5.005092s

Comparison:
  "#{'foo'}#{'bar'}": 11739486.8 i/s
         "foo" "bar": 11293224.2 i/s - 1.04x  (± 0.00) slower
       String#append:  6338479.1 i/s - 1.85x  (± 0.00) slower
       String#concat:  5996081.1 i/s - 1.96x  (± 0.00) slower
            String#+:  5814780.1 i/s - 2.02x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@   998.450k i/100ms
          String#dup   571.351k i/100ms
Calculating -------------------------------------
           String#+@      9.965M (± 0.9%) i/s -     49.922M in   5.010013s
          String#dup      5.713M (± 0.6%) i/s -     28.568M in   5.000599s

Comparison:
           String#+@:  9965400.7 i/s
          String#dup:  5713005.5 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   174.417k i/100ms
       String#match?   385.352k i/100ms
    String#end_with?   601.297k i/100ms
Calculating -------------------------------------
           String#=~      1.760M (± 0.4%) i/s -      8.895M in   5.054981s
       String#match?      3.852M (± 0.5%) i/s -     19.268M in   5.002467s
    String#end_with?      5.937M (± 0.3%) i/s -     30.065M in   5.063735s

Comparison:
    String#end_with?:  5937334.0 i/s
       String#match?:  3851711.0 i/s - 1.54x  (± 0.00) slower
           String#=~:  1759730.3 i/s - 3.37x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   111.598k i/100ms
          String#sub   139.942k i/100ms
String#dup["string"]=
                       179.809k i/100ms
Calculating -------------------------------------
         String#gsub      1.100M (± 0.7%) i/s -      5.580M in   5.072233s
          String#sub      1.355M (± 0.7%) i/s -      6.857M in   5.061193s
String#dup["string"]=
                          1.756M (± 0.7%) i/s -      8.811M in   5.017866s

Comparison:
String#dup["string"]=:  1755942.8 i/s
          String#sub:  1354915.5 i/s - 1.30x  (± 0.00) slower
         String#gsub:  1100140.6 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   102.091k i/100ms
           String#tr   362.588k i/100ms
Calculating -------------------------------------
         String#gsub      1.022M (± 1.1%) i/s -      5.207M in   5.093709s
           String#tr      3.624M (± 0.3%) i/s -     18.129M in   5.003082s

Comparison:
           String#tr:  3623678.6 i/s
         String#gsub:  1022306.5 i/s - 3.54x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.153M i/100ms
         With Freeze     1.620M i/100ms
Calculating -------------------------------------
      Without Freeze     11.523M (± 0.3%) i/s -     57.669M in   5.004693s
         With Freeze     15.679M (± 0.5%) i/s -     79.371M in   5.062367s

Comparison:
         With Freeze: 15679007.1 i/s
      Without Freeze: 11523012.6 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.363k i/100ms
      String#squeeze   155.699k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     33.560k (± 1.3%) i/s -    168.150k in   5.011394s
      String#squeeze      1.590M (± 1.5%) i/s -      8.096M in   5.093787s

Comparison:
      String#squeeze:  1589822.6 i/s
 String#gsub/regex+/:    33559.7 i/s - 47.37x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   256.339k i/100ms
       String#match?   638.582k i/100ms
  String#start_with?   869.397k i/100ms
Calculating -------------------------------------
           String#=~      2.579M (± 0.5%) i/s -     13.073M in   5.070048s
       String#match?      6.390M (± 1.1%) i/s -     32.568M in   5.097674s
  String#start_with?      8.708M (± 0.4%) i/s -     44.339M in   5.091999s

Comparison:
  String#start_with?:  8707780.8 i/s
       String#match?:  6389537.9 i/s - 1.36x  (± 0.00) slower
           String#=~:  2578597.8 i/s - 3.38x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   212.735k i/100ms
    String#[0, n] ==    83.287k i/100ms
   String#[RANGE] ==    77.874k i/100ms
   String#[0...n] ==    47.452k i/100ms
Calculating -------------------------------------
  String#start_with?      2.028M (± 1.2%) i/s -     10.211M in   5.034665s
    String#[0, n] ==    835.789k (± 0.9%) i/s -      4.248M in   5.082612s
   String#[RANGE] ==    757.599k (± 0.4%) i/s -      3.816M in   5.036828s
   String#[0...n] ==    464.904k (± 0.6%) i/s -      2.325M in   5.001553s

Comparison:
  String#start_with?:  2028495.7 i/s
    String#[0, n] ==:   835788.5 i/s - 2.43x  (± 0.00) slower
   String#[RANGE] ==:   757598.9 i/s - 2.68x  (± 0.00) slower
   String#[0...n] ==:   464904.5 i/s - 4.36x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   174.664k i/100ms
 String#sub!'string'   125.868k i/100ms
String#gsub!'string'    76.844k i/100ms
  String#[/regexp/]=   153.423k i/100ms
 String#sub!/regexp/   115.449k i/100ms
String#gsub!/regexp/    59.483k i/100ms
Calculating -------------------------------------
  String#['string']=      1.760M (± 0.5%) i/s -      8.908M in   5.062333s
 String#sub!'string'      1.262M (± 0.3%) i/s -      6.419M in   5.087866s
String#gsub!'string'    774.897k (± 0.2%) i/s -      3.919M in   5.057529s
  String#[/regexp/]=      1.525M (± 0.5%) i/s -      7.671M in   5.031004s
 String#sub!/regexp/      1.114M (± 0.7%) i/s -      5.657M in   5.076503s
String#gsub!/regexp/    593.617k (± 0.7%) i/s -      2.974M in   5.010434s

Comparison:
  String#['string']=:  1759686.7 i/s
  String#[/regexp/]=:  1524813.3 i/s - 1.15x  (± 0.00) slower
 String#sub!'string':  1261691.4 i/s - 1.39x  (± 0.00) slower
 String#sub!/regexp/:  1114399.1 i/s - 1.58x  (± 0.00) slower
String#gsub!'string':   774897.4 i/s - 2.27x  (± 0.00) slower
String#gsub!/regexp/:   593616.7 i/s - 2.96x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   135.891k i/100ms
        String#chomp   550.042k i/100ms
String#delete_suffix   593.089k i/100ms
Calculating -------------------------------------
          String#sub      1.359M (± 0.6%) i/s -      6.795M in   5.001202s
        String#chomp      5.562M (± 0.3%) i/s -     28.052M in   5.043509s
String#delete_suffix      5.907M (± 0.7%) i/s -     29.654M in   5.020871s

Comparison:
String#delete_suffix:  5906517.7 i/s
        String#chomp:  5562081.1 i/s - 1.06x  (± 0.00) slower
          String#sub:  1358635.7 i/s - 4.35x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   627.719k i/100ms
          String#sub   138.843k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.316M (± 0.3%) i/s -     32.014M in   5.068479s
          String#sub      1.391M (± 0.4%) i/s -      7.081M in   5.092106s

Comparison:
String#delete_prefix:  6316294.5 i/s
          String#sub:  1390602.7 i/s - 4.54x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   607.360k i/100ms
    String#unpack[0]   443.271k i/100ms
Calculating -------------------------------------
      String#unpack1      6.066M (± 0.4%) i/s -     30.368M in   5.006549s
    String#unpack[0]      4.414M (± 0.4%) i/s -     22.164M in   5.020901s

Comparison:
      String#unpack1:  6065743.8 i/s
    String#unpack[0]:  4414342.4 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.591k i/100ms
          Time.parse     9.454k i/100ms
Calculating -------------------------------------
        Time.iso8601    277.502k (± 0.2%) i/s -      1.407M in   5.070763s
          Time.parse     95.556k (± 0.4%) i/s -    482.154k in   5.045892s

Comparison:
        Time.iso8601:   277501.8 i/s
          Time.parse:    95555.5 i/s - 2.90x  (± 0.00) slower

