$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       765.290k i/100ms
Function with splat arguments
                        18.875k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.694M (± 0.6%) i/s -     39.030M in   5.073176s
Function with splat arguments
                        172.106k (±10.3%) i/s -    868.250k in   5.101360s

Comparison:
Function with single Array argument:  7693644.8 i/s
Function with splat arguments:   172106.2 i/s - 44.70x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.003M i/100ms
Sequential Assignment
                         1.008M i/100ms
Calculating -------------------------------------
 Parallel Assignment      9.985M (± 0.5%) i/s -     50.135M in   5.021276s
Sequential Assignment
                         10.065M (± 0.4%) i/s -     50.422M in   5.009668s

Comparison:
Sequential Assignment: 10065192.2 i/s
 Parallel Assignment:  9984739.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   476.363k i/100ms
       attr_accessor   555.575k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.751M (± 0.4%) i/s -     23.818M in   5.013293s
       attr_accessor      5.516M (± 0.2%) i/s -     27.779M in   5.036406s

Comparison:
       attr_accessor:  5515615.0 i/s
   getter_and_setter:  4751064.3 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    87.914k i/100ms
         respond_to?   772.296k i/100ms
Calculating -------------------------------------
      begin...rescue    891.594k (± 0.5%) i/s -      4.484M in   5.028890s
         respond_to?      7.701M (± 0.3%) i/s -     38.615M in   5.014463s

Comparison:
         respond_to?:  7700738.4 i/s
      begin...rescue:   891594.5 i/s - 8.64x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   291.610k i/100ms
             &method   120.920k i/100ms
Calculating -------------------------------------
              normal      2.964M (± 0.8%) i/s -     14.872M in   5.017880s
             &method      1.209M (± 0.6%) i/s -      6.167M in   5.100164s

Comparison:
              normal:  2964021.2 i/s
             &method:  1209202.6 i/s - 2.45x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       225.000  i/100ms
       define_method   283.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.090k (±27.4%) i/s -      8.775k in   5.112417s
       define_method      3.242k (±17.0%) i/s -     15.848k in   5.022696s

Comparison:
       define_method:     3242.0 i/s
module_eval with string:     2089.9 i/s - 1.55x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   264.638k i/100ms
       Kernel#format   198.889k i/100ms
            String#%   175.772k i/100ms
Calculating -------------------------------------
         Float#round      2.620M (± 0.5%) i/s -     13.232M in   5.050380s
       Kernel#format      2.008M (± 0.7%) i/s -     10.143M in   5.051808s
            String#%      1.747M (± 0.5%) i/s -      8.789M in   5.030065s

Comparison:
         Float#round:  2620055.9 i/s
       Kernel#format:  2007976.2 i/s - 1.30x  (± 0.00) slower
            String#%:  1747250.0 i/s - 1.50x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   898.912k i/100ms
          OpenStruct   482.531k i/100ms
Calculating -------------------------------------
                Hash      9.013M (± 0.7%) i/s -     45.845M in   5.086836s
          OpenStruct      4.801M (± 0.5%) i/s -     24.127M in   5.025125s

Comparison:
                Hash:  9012798.5 i/s
          OpenStruct:  4801294.7 i/s - 1.88x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.093M i/100ms
          OpenStruct    11.283k i/100ms
Calculating -------------------------------------
                Hash     11.592M (± 0.5%) i/s -     59.021M in   5.091868s
          OpenStruct    114.206k (± 2.7%) i/s -    575.433k in   5.042247s

Comparison:
                Hash: 11591530.3 i/s
          OpenStruct:   114205.6 i/s - 101.50x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   575.742k i/100ms
  ancestors.include?   119.839k i/100ms
Calculating -------------------------------------
  less than or equal      5.840M (± 3.5%) i/s -     29.363M in   5.035069s
  ancestors.include?      1.184M (± 0.6%) i/s -      5.992M in   5.061031s

Comparison:
  less than or equal:  5840322.2 i/s
  ancestors.include?:  1183980.2 i/s - 4.93x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.677  (± 0.0%) i/s -      4.000  in   5.944366s
         Kernel loop      0.214  (± 0.0%) i/s -      2.000  in   9.331124s

Comparison:
          While Loop:        0.7 i/s
         Kernel loop:        0.2 i/s - 3.16x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.496M i/100ms
         Array#first     1.322M i/100ms
Calculating -------------------------------------
           Array#[0]     15.189M (± 0.2%) i/s -     76.286M in   5.022496s
         Array#first     13.098M (± 3.4%) i/s -     66.121M in   5.055158s

Comparison:
           Array#[0]: 15189002.2 i/s
         Array#first: 13098353.4 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.548M i/100ms
          Array#last     1.323M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.466M (± 0.4%) i/s -     77.376M in   5.003050s
          Array#last     13.238M (± 0.2%) i/s -     67.496M in   5.098509s

Comparison:
          Array#[-1]: 15465987.6 i/s
          Array#last: 13238483.4 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    84.079k i/100ms
Calculating -------------------------------------
                find      0.276  (± 0.0%) i/s -      2.000  in   7.256912s
             bsearch    813.344k (± 1.2%) i/s -      4.120M in   5.066095s

Comparison:
             bsearch:   813344.3 i/s
                find:        0.3 i/s - 2951183.84x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    18.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    190.235  (± 2.6%) i/s -    954.000  in   5.017850s
        Array#insert      1.440  (± 0.0%) i/s -      8.000  in   5.558161s

Comparison:
       Array#unshift:      190.2 i/s
        Array#insert:        1.4 i/s - 132.12x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.114M i/100ms
          Array#size     2.115M i/100ms
         Array#count     1.618M i/100ms
Calculating -------------------------------------
        Array#length     21.095M (± 0.3%) i/s -    105.698M in   5.010727s
          Array#size     21.058M (± 3.5%) i/s -    105.759M in   5.030077s
         Array#count     16.122M (± 0.4%) i/s -     80.893M in   5.017635s

Comparison:
        Array#length: 21094639.8 i/s
          Array#size: 21057636.3 i/s - same-ish: difference falls within error
         Array#count: 16121970.0 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.054k i/100ms
        Array#sample     1.011M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    452.355k (± 0.3%) i/s -      2.298M in   5.079571s
        Array#sample     10.315M (± 0.3%) i/s -     51.581M in   5.000899s

Comparison:
        Array#sample: 10314506.6 i/s
 Array#shuffle.first:   452355.5 i/s - 22.80x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    62.804k i/100ms
          Date.parse    30.817k i/100ms
Calculating -------------------------------------
        Date.iso8601    628.828k (± 0.3%) i/s -      3.203M in   5.093664s
          Date.parse    318.361k (± 0.3%) i/s -      1.602M in   5.033611s

Comparison:
        Date.iso8601:   628827.8 i/s
          Date.parse:   318360.6 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.626k i/100ms
           Array#map    25.671k i/100ms
Calculating -------------------------------------
   Array#each + push    186.361k (± 0.4%) i/s -    949.926k in   5.097340s
           Array#map    253.100k (± 4.9%) i/s -      1.284M in   5.086495s

Comparison:
           Array#map:   253099.7 i/s
   Array#each + push:   186360.7 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    28.909k i/100ms
               #each    31.499k i/100ms
Calculating -------------------------------------
            For loop    288.731k (± 0.5%) i/s -      1.445M in   5.006329s
               #each    314.392k (± 1.6%) i/s -      1.575M in   5.010939s

Comparison:
               #each:   314391.5 i/s
            For loop:   288731.2 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.577k i/100ms
     each_with_index    18.232k i/100ms
Calculating -------------------------------------
          While Loop    275.585k (± 0.3%) i/s -      1.379M in   5.003392s
     each_with_index    187.902k (± 0.3%) i/s -    948.064k in   5.045579s

Comparison:
          While Loop:   275585.0 i/s
     each_with_index:   187901.7 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol   124.837k i/100ms
      inject to_proc     1.740k i/100ms
        inject block     1.923k i/100ms
Calculating -------------------------------------
       inject symbol      1.248M (± 0.9%) i/s -      6.242M in   5.002463s
      inject to_proc     17.616k (± 0.5%) i/s -     88.740k in   5.037716s
        inject block     19.306k (± 0.4%) i/s -     98.073k in   5.079895s

Comparison:
       inject symbol:  1247854.9 i/s
        inject block:    19306.4 i/s - 64.63x  (± 0.00) slower
      inject to_proc:    17615.5 i/s - 70.84x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     7.061k i/100ms
   Array#map.flatten     4.132k i/100ms
      Array#flat_map     8.794k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     70.075k (± 0.2%) i/s -    353.050k in   5.038169s
   Array#map.flatten     41.812k (± 0.2%) i/s -    210.732k in   5.039970s
      Array#flat_map     89.550k (± 0.6%) i/s -    448.494k in   5.008482s

Comparison:
      Array#flat_map:    89550.0 i/s
Array#map.flatten(1):    70075.4 i/s - 1.28x  (± 0.00) slower
   Array#map.flatten:    41812.4 i/s - 2.14x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    30.753k i/100ms
  Array#reverse_each    31.467k i/100ms
Calculating -------------------------------------
  Array#reverse.each    306.963k (± 0.5%) i/s -      1.538M in   5.009392s
  Array#reverse_each    314.169k (± 0.4%) i/s -      1.573M in   5.008059s

Comparison:
  Array#reverse_each:   314168.6 i/s
  Array#reverse.each:   306962.5 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        19.731k i/100ms
   Enumerable#detect    83.121k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        202.940k (± 2.4%) i/s -      4.065M in  20.043368s
   Enumerable#detect    828.142k (± 2.0%) i/s -     16.624M in  20.083314s

Comparison:
   Enumerable#detect:   828141.8 i/s
Enumerable#select.first:   202940.2 i/s - 4.08x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       243.891k i/100ms
Enumerable#select.last
                        18.548k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.454M (± 0.6%) i/s -     12.438M in   5.069795s
Enumerable#select.last
                        185.281k (± 0.4%) i/s -    927.400k in   5.005459s

Comparison:
Enumerable#reverse.detect:  2453515.5 i/s
Enumerable#select.last:   185281.2 i/s - 13.24x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         5.222k i/100ms
  Enumerable#sort_by     4.993k i/100ms
     Enumerable#sort     2.393k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         51.969k (± 0.6%) i/s -    261.100k in   5.024364s
  Enumerable#sort_by     48.999k (± 2.8%) i/s -    249.650k in   5.099927s
     Enumerable#sort     23.997k (± 0.5%) i/s -    122.043k in   5.085790s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    51968.7 i/s
  Enumerable#sort_by:    48998.6 i/s - 1.06x  (± 0.00) slower
     Enumerable#sort:    23997.4 i/s - 2.17x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.456k i/100ms
Enumerable#sort_by...first
                         8.800k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    174.797k (± 0.1%) i/s -    890.256k in   5.093091s
Enumerable#sort_by...first
                         87.112k (± 3.2%) i/s -    440.000k in   5.057283s

Comparison:
   Enumerable#min_by:   174797.0 i/s
Enumerable#sort_by...first:    87112.1 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   410.021k i/100ms
            Hash#dup   284.152k i/100ms
Calculating -------------------------------------
              Hash[]      3.753M (± 0.6%) i/s -     18.861M in   5.026140s
            Hash#dup      2.802M (± 1.5%) i/s -     14.208M in   5.071376s

Comparison:
              Hash[]:  3752688.3 i/s
            Hash#dup:  2802162.4 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.427M i/100ms
  Hash#fetch, symbol     1.146M i/100ms
     Hash#[], string     1.243M i/100ms
  Hash#fetch, string   776.457k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.248M (± 0.4%) i/s -     71.363M in   5.008748s
  Hash#fetch, symbol     11.408M (± 0.3%) i/s -     57.323M in   5.024921s
     Hash#[], string     12.400M (± 0.3%) i/s -     62.151M in   5.012195s
  Hash#fetch, string      7.737M (± 0.4%) i/s -     38.823M in   5.018070s

Comparison:
     Hash#[], symbol: 14247896.4 i/s
     Hash#[], string: 12400122.8 i/s - 1.15x  (± 0.00) slower
  Hash#fetch, symbol: 11407795.6 i/s - 1.25x  (± 0.00) slower
  Hash#fetch, string:  7736720.8 i/s - 1.84x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   841.835k i/100ms
             Hash#[]     1.030M i/100ms
          Hash#[] ||   883.153k i/100ms
          Hash#[] &&   435.787k i/100ms
          Hash#fetch   602.796k i/100ms
 Hash#fetch fallback   402.422k i/100ms
Calculating -------------------------------------
            Hash#dig      8.327M (± 0.9%) i/s -     42.092M in   5.055192s
             Hash#[]     10.170M (± 1.4%) i/s -     51.511M in   5.065764s
          Hash#[] ||      8.970M (± 1.6%) i/s -     45.041M in   5.022374s
          Hash#[] &&      4.247M (± 1.8%) i/s -     21.354M in   5.030017s
          Hash#fetch      6.071M (± 1.0%) i/s -     30.743M in   5.063955s
 Hash#fetch fallback      3.895M (± 1.0%) i/s -     19.719M in   5.063379s

Comparison:
             Hash#[]: 10170384.4 i/s
          Hash#[] ||:  8970250.9 i/s - 1.13x  (± 0.00) slower
            Hash#dig:  8327127.2 i/s - 1.22x  (± 0.00) slower
          Hash#fetch:  6071437.5 i/s - 1.68x  (± 0.00) slower
          Hash#[] &&:  4246670.5 i/s - 2.39x  (± 0.00) slower
 Hash#fetch fallback:  3894763.7 i/s - 2.61x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.464M i/100ms
  Hash#fetch + block     1.465M i/100ms
    Hash#fetch + arg     1.099M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.526M (± 0.4%) i/s -     73.209M in   5.040037s
  Hash#fetch + block     14.501M (± 0.9%) i/s -     73.236M in   5.050973s
    Hash#fetch + arg     10.946M (± 0.3%) i/s -     54.932M in   5.018605s

Comparison:
  Hash#fetch + const: 14525743.8 i/s
  Hash#fetch + block: 14500563.3 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 10945773.0 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.347k i/100ms
         sort + to_h    11.562k i/100ms
Calculating -------------------------------------
      sort_by + to_h    271.778k (± 1.4%) i/s -      1.367M in   5.032250s
         sort + to_h    115.394k (± 3.1%) i/s -    578.100k in   5.015680s

Comparison:
      sort_by + to_h:   271777.7 i/s
         sort + to_h:   115394.3 i/s - 2.36x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   187.623k i/100ms
       Hash#each_key   190.761k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.941M (± 1.5%) i/s -      9.756M in   5.028414s
       Hash#each_key      1.880M (± 0.1%) i/s -      9.538M in   5.073359s

Comparison:
      Hash#keys.each:  1940669.7 i/s
       Hash#each_key:  1880029.9 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     2.562k i/100ms
           Hash#key?   939.167k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     25.857k (± 4.7%) i/s -    130.662k in   5.069097s
           Hash#key?      9.413M (± 2.9%) i/s -     47.898M in   5.093519s

Comparison:
           Hash#key?:  9413388.7 i/s
  Hash#keys.include?:    25856.8 i/s - 364.06x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.102k i/100ms
            Hash#[]=     9.883k i/100ms
Calculating -------------------------------------
         Hash#merge!     41.111k (± 0.6%) i/s -    209.202k in   5.088864s
            Hash#[]=     98.651k (± 0.6%) i/s -    494.150k in   5.009263s

Comparison:
            Hash#[]=:    98650.9 i/s
         Hash#merge!:    41111.3 i/s - 2.40x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         5.208k i/100ms
      Hash#merge({})     4.178k i/100ms
 Hash#dup#merge!({})     2.726k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         51.974k (± 0.6%) i/s -    260.400k in   5.010362s
      Hash#merge({})     41.559k (± 0.5%) i/s -    208.900k in   5.026754s
 Hash#dup#merge!({})     26.871k (± 2.9%) i/s -    136.300k in   5.077300s

Comparison:
{}#merge!(Hash) do end:    51974.1 i/s
      Hash#merge({}):    41558.7 i/s - 1.25x  (± 0.00) slower
 Hash#dup#merge!({}):    26870.6 i/s - 1.93x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   390.413k i/100ms
          Hash#merge   364.881k i/100ms
Calculating -------------------------------------
        Hash#**other      3.943M (± 3.2%) i/s -     19.911M in   5.056171s
          Hash#merge      3.673M (± 0.6%) i/s -     18.609M in   5.066912s

Comparison:
        Hash#**other:  3942950.9 i/s
          Hash#merge:  3672762.3 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.636k i/100ms
         Hash#merge!     4.052k i/100ms
Calculating -------------------------------------
          Hash#merge     16.506k (± 0.9%) i/s -     83.436k in   5.055234s
         Hash#merge!     40.425k (± 3.5%) i/s -    202.600k in   5.019414s

Comparison:
         Hash#merge!:    40425.2 i/s
          Hash#merge:    16506.2 i/s - 2.45x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      426.080k i/100ms
Array#each             235.474k i/100ms
Array#each_w/_object   175.295k i/100ms
Hash#select-include     72.541k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.315M (± 0.3%) i/s -     21.730M in   5.036237s
Array#each                2.365M (± 0.6%) i/s -     12.009M in   5.077842s
Array#each_w/_object      1.752M (± 1.1%) i/s -      8.765M in   5.002959s
Hash#select-include     733.690k (± 2.3%) i/s -      3.700M in   5.045099s

Comparison:
Hash#native-slice   :  4314795.7 i/s
Array#each          :  2365111.3 i/s - 1.82x  (± 0.00) slower
Array#each_w/_object:  1752112.7 i/s - 2.46x  (± 0.00) slower
Hash#select-include :   733690.0 i/s - 5.88x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.097k i/100ms
         Hash#value?   837.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     10.664k (± 4.0%) i/s -     53.753k in   5.049547s
         Hash#value?      8.491k (± 0.8%) i/s -     42.687k in   5.027910s

Comparison:
Hash#values.include?:    10663.6 i/s
         Hash#value?:     8490.6 i/s - 1.26x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   670.149k i/100ms
                send   505.869k i/100ms
      method_missing   389.305k i/100ms
Calculating -------------------------------------
                call      6.629M (± 3.1%) i/s -     33.507M in   5.060432s
                send      4.995M (± 0.7%) i/s -     25.293M in   5.063771s
      method_missing      3.882M (± 0.5%) i/s -     19.465M in   5.013821s

Comparison:
                call:  6629225.7 i/s
                send:  4995217.8 i/s - 1.33x  (± 0.00) slower
      method_missing:  3882413.0 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     8.366k i/100ms
      Symbol#to_proc     9.335k i/100ms
Calculating -------------------------------------
               Block     86.073k (± 0.3%) i/s -    435.032k in   5.054261s
      Symbol#to_proc     92.328k (± 0.1%) i/s -    466.750k in   5.055355s

Comparison:
      Symbol#to_proc:    92328.0 i/s
               Block:    86073.2 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   934.741k i/100ms
       block + yield   979.988k i/100ms
        unused block     1.299M i/100ms
               yield     1.110M i/100ms
Calculating -------------------------------------
          block.call      9.348M (± 0.2%) i/s -     47.672M in   5.099772s
       block + yield      9.632M (± 0.6%) i/s -     48.999M in   5.087134s
        unused block     13.058M (± 0.3%) i/s -     66.233M in   5.072286s
               yield     11.723M (± 0.2%) i/s -     58.853M in   5.020394s

Comparison:
        unused block: 13057882.5 i/s
               yield: 11722886.1 i/s - 1.11x  (± 0.00) slower
       block + yield:  9632325.9 i/s - 1.36x  (± 0.00) slower
          block.call:  9347868.4 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   321.303k i/100ms
      range#include?    12.591k i/100ms
       range#member?    12.649k i/100ms
       plain compare   529.489k i/100ms
Calculating -------------------------------------
        range#cover?      3.195M (± 0.4%) i/s -     16.065M in   5.027873s
      range#include?    128.487k (± 0.5%) i/s -    654.732k in   5.095861s
       range#member?    128.330k (± 0.4%) i/s -    645.099k in   5.026930s
       plain compare      5.273M (± 0.4%) i/s -     26.474M in   5.021219s

Comparison:
       plain compare:  5272597.6 i/s
        range#cover?:  3195282.1 i/s - 1.65x  (± 0.00) slower
      range#include?:   128486.7 i/s - 41.04x  (± 0.00) slower
       range#member?:   128330.4 i/s - 41.09x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   948.942k i/100ms
           String#=~   646.765k i/100ms
          Regexp#===   597.788k i/100ms
        String#match   482.719k i/100ms
Calculating -------------------------------------
       String#match?      9.336M (± 4.0%) i/s -     47.447M in   5.091995s
           String#=~      6.578M (± 0.8%) i/s -     32.985M in   5.014588s
          Regexp#===      5.988M (± 0.7%) i/s -     30.487M in   5.091896s
        String#match      4.811M (± 0.4%) i/s -     24.136M in   5.016805s

Comparison:
       String#match?:  9336221.3 i/s
           String#=~:  6578205.0 i/s - 1.42x  (± 0.00) slower
          Regexp#===:  5987717.9 i/s - 1.56x  (± 0.00) slower
        String#match:  4811089.2 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   639.618k i/100ms
      String#casecmp   768.421k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.486M (± 0.7%) i/s -     32.621M in   5.029725s
      String#casecmp      7.669M (± 0.5%) i/s -     38.421M in   5.010362s

Comparison:
      String#casecmp:  7668533.6 i/s
String#downcase + ==:  6485852.2 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   580.229k i/100ms
       String#concat   605.849k i/100ms
       String#append   660.233k i/100ms
         "foo" "bar"     1.178M i/100ms
  "#{'foo'}#{'bar'}"     1.163M i/100ms
Calculating -------------------------------------
            String#+      5.798M (± 0.6%) i/s -     29.011M in   5.004163s
       String#concat      5.980M (± 0.3%) i/s -     30.292M in   5.065435s
       String#append      6.513M (± 0.4%) i/s -     33.012M in   5.068331s
         "foo" "bar"     11.717M (± 0.3%) i/s -     58.908M in   5.027399s
  "#{'foo'}#{'bar'}"     11.722M (± 0.4%) i/s -     59.316M in   5.060309s

Comparison:
  "#{'foo'}#{'bar'}": 11722016.6 i/s
         "foo" "bar": 11717464.7 i/s - same-ish: difference falls within error
       String#append:  6513443.4 i/s - 1.80x  (± 0.00) slower
       String#concat:  5980273.4 i/s - 1.96x  (± 0.00) slower
            String#+:  5797701.1 i/s - 2.02x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@     1.004M i/100ms
          String#dup   507.441k i/100ms
Calculating -------------------------------------
           String#+@      9.919M (± 3.1%) i/s -     50.175M in   5.063871s
          String#dup      5.210M (± 0.7%) i/s -     26.387M in   5.065303s

Comparison:
           String#+@:  9919259.6 i/s
          String#dup:  5209614.9 i/s - 1.90x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   184.678k i/100ms
       String#match?   437.955k i/100ms
    String#end_with?   610.688k i/100ms
Calculating -------------------------------------
           String#=~      1.855M (± 0.3%) i/s -      9.419M in   5.077343s
       String#match?      4.328M (± 3.1%) i/s -     21.898M in   5.065327s
    String#end_with?      6.099M (± 0.6%) i/s -     30.534M in   5.006636s

Comparison:
    String#end_with?:  6099021.1 i/s
       String#match?:  4328446.0 i/s - 1.41x  (± 0.00) slower
           String#=~:  1855040.2 i/s - 3.29x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   107.506k i/100ms
          String#sub   134.209k i/100ms
String#dup["string"]=
                       176.835k i/100ms
Calculating -------------------------------------
         String#gsub      1.076M (± 2.7%) i/s -      5.375M in   5.000794s
          String#sub      1.326M (± 0.6%) i/s -      6.710M in   5.061837s
String#dup["string"]=
                          1.763M (± 0.8%) i/s -      8.842M in   5.015047s

Comparison:
String#dup["string"]=:  1763169.2 i/s
          String#sub:  1325746.5 i/s - 1.33x  (± 0.00) slower
         String#gsub:  1075808.9 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    99.623k i/100ms
           String#tr   359.747k i/100ms
Calculating -------------------------------------
         String#gsub      1.012M (± 0.3%) i/s -      5.081M in   5.021537s
           String#tr      3.614M (± 0.3%) i/s -     18.347M in   5.076849s

Comparison:
           String#tr:  3613907.6 i/s
         String#gsub:  1011803.3 i/s - 3.57x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.151M i/100ms
         With Freeze     1.513M i/100ms
Calculating -------------------------------------
      Without Freeze     11.583M (± 0.3%) i/s -     58.725M in   5.070094s
         With Freeze     15.069M (± 0.5%) i/s -     75.643M in   5.019760s

Comparison:
         With Freeze: 15069370.5 i/s
      Without Freeze: 11582672.5 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.237k i/100ms
      String#squeeze   153.089k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     32.493k (± 0.7%) i/s -    165.087k in   5.080936s
      String#squeeze      1.536M (± 0.4%) i/s -      7.808M in   5.083213s

Comparison:
      String#squeeze:  1535976.2 i/s
 String#gsub/regex+/:    32493.0 i/s - 47.27x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   284.891k i/100ms
       String#match?   795.603k i/100ms
  String#start_with?   874.013k i/100ms
Calculating -------------------------------------
           String#=~      2.860M (± 0.4%) i/s -     14.529M in   5.079674s
       String#match?      7.937M (± 0.8%) i/s -     39.780M in   5.012257s
  String#start_with?      8.718M (± 0.3%) i/s -     43.701M in   5.012721s

Comparison:
  String#start_with?:  8718020.4 i/s
       String#match?:  7937136.2 i/s - 1.10x  (± 0.00) slower
           String#=~:  2860357.9 i/s - 3.05x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   206.881k i/100ms
    String#[0, n] ==    86.326k i/100ms
   String#[RANGE] ==    77.860k i/100ms
   String#[0...n] ==    47.443k i/100ms
Calculating -------------------------------------
  String#start_with?      2.046M (± 0.8%) i/s -     10.344M in   5.056520s
    String#[0, n] ==    849.424k (± 0.8%) i/s -      4.316M in   5.081754s
   String#[RANGE] ==    768.428k (± 0.6%) i/s -      3.893M in   5.066356s
   String#[0...n] ==    466.960k (± 1.2%) i/s -      2.372M in   5.080717s

Comparison:
  String#start_with?:  2045804.7 i/s
    String#[0, n] ==:   849423.8 i/s - 2.41x  (± 0.00) slower
   String#[RANGE] ==:   768428.2 i/s - 2.66x  (± 0.00) slower
   String#[0...n] ==:   466959.9 i/s - 4.38x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   171.009k i/100ms
 String#sub!'string'   124.508k i/100ms
String#gsub!'string'    74.833k i/100ms
  String#[/regexp/]=   153.389k i/100ms
 String#sub!/regexp/   114.242k i/100ms
String#gsub!/regexp/    60.225k i/100ms
Calculating -------------------------------------
  String#['string']=      1.713M (± 0.9%) i/s -      8.721M in   5.092399s
 String#sub!'string'      1.262M (± 0.7%) i/s -      6.350M in   5.030782s
String#gsub!'string'    751.458k (± 0.3%) i/s -      3.816M in   5.078805s
  String#[/regexp/]=      1.502M (± 2.5%) i/s -      7.516M in   5.008480s
 String#sub!/regexp/      1.149M (± 1.5%) i/s -      5.826M in   5.072267s
String#gsub!/regexp/    598.841k (± 0.5%) i/s -      3.011M in   5.028602s

Comparison:
  String#['string']=:  1712773.4 i/s
  String#[/regexp/]=:  1501765.5 i/s - 1.14x  (± 0.00) slower
 String#sub!'string':  1262269.5 i/s - 1.36x  (± 0.00) slower
 String#sub!/regexp/:  1148969.9 i/s - 1.49x  (± 0.00) slower
String#gsub!'string':   751458.4 i/s - 2.28x  (± 0.00) slower
String#gsub!/regexp/:   598840.9 i/s - 2.86x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   143.266k i/100ms
        String#chomp   542.746k i/100ms
String#delete_suffix   588.359k i/100ms
Calculating -------------------------------------
          String#sub      1.425M (± 0.2%) i/s -      7.163M in   5.026123s
        String#chomp      5.438M (± 0.5%) i/s -     27.680M in   5.090649s
String#delete_suffix      5.905M (± 0.5%) i/s -     30.006M in   5.081542s

Comparison:
String#delete_suffix:  5905093.6 i/s
        String#chomp:  5437539.8 i/s - 1.09x  (± 0.00) slower
          String#sub:  1425222.1 i/s - 4.14x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   607.127k i/100ms
          String#sub   140.489k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.149M (± 0.3%) i/s -     30.963M in   5.035845s
          String#sub      1.419M (± 0.5%) i/s -      7.165M in   5.048197s

Comparison:
String#delete_prefix:  6148690.5 i/s
          String#sub:  1419342.0 i/s - 4.33x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   608.680k i/100ms
    String#unpack[0]   446.266k i/100ms
Calculating -------------------------------------
      String#unpack1      6.085M (± 0.3%) i/s -     30.434M in   5.001615s
    String#unpack[0]      4.465M (± 0.5%) i/s -     22.760M in   5.096937s

Comparison:
      String#unpack1:  6084891.7 i/s
    String#unpack[0]:  4465470.7 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    28.297k i/100ms
          Time.parse     9.624k i/100ms
Calculating -------------------------------------
        Time.iso8601    283.226k (± 0.5%) i/s -      1.443M in   5.095532s
          Time.parse     94.972k (± 0.9%) i/s -    481.200k in   5.067223s

Comparison:
        Time.iso8601:   283225.6 i/s
          Time.parse:    94971.5 i/s - 2.98x  (± 0.00) slower

