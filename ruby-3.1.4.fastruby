$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       760.154k i/100ms
Function with splat arguments
                        27.627k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.657M (± 0.3%) i/s -     38.768M in   5.062944s
Function with splat arguments
                        273.426k (± 5.7%) i/s -      1.381M in   5.074576s

Comparison:
Function with single Array argument:  7657237.4 i/s
Function with splat arguments:   273426.2 i/s - 28.00x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.007M i/100ms
Sequential Assignment
                         1.009M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.047M (± 0.4%) i/s -     50.360M in   5.012713s
Sequential Assignment
                         10.090M (± 0.3%) i/s -     51.448M in   5.098836s

Comparison:
Sequential Assignment: 10090257.6 i/s
 Parallel Assignment: 10046534.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   476.856k i/100ms
       attr_accessor   559.749k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.778M (± 2.7%) i/s -     24.320M in   5.094185s
       attr_accessor      5.582M (± 0.3%) i/s -     27.987M in   5.014333s

Comparison:
       attr_accessor:  5581534.7 i/s
   getter_and_setter:  4778414.6 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    88.361k i/100ms
         respond_to?   763.922k i/100ms
Calculating -------------------------------------
      begin...rescue    884.073k (± 0.4%) i/s -      4.506M in   5.097393s
         respond_to?      7.650M (± 0.2%) i/s -     38.960M in   5.092720s

Comparison:
         respond_to?:  7650182.8 i/s
      begin...rescue:   884073.3 i/s - 8.65x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   293.411k i/100ms
             &method   120.805k i/100ms
Calculating -------------------------------------
              normal      2.990M (± 1.0%) i/s -     14.964M in   5.004717s
             &method      1.217M (± 0.4%) i/s -      6.161M in   5.060574s

Comparison:
              normal:  2990312.1 i/s
             &method:  1217482.0 i/s - 2.46x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       268.000  i/100ms
       define_method   257.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.373k (±21.2%) i/s -     10.452k in   5.026698s
       define_method      3.263k (±20.0%) i/s -     14.649k in   5.001037s

Comparison:
       define_method:     3262.9 i/s
module_eval with string:     2372.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   261.676k i/100ms
       Kernel#format   207.703k i/100ms
            String#%   176.419k i/100ms
Calculating -------------------------------------
         Float#round      2.648M (± 0.2%) i/s -     13.345M in   5.040082s
       Kernel#format      2.077M (± 1.1%) i/s -     10.385M in   5.000134s
            String#%      1.779M (± 0.5%) i/s -      8.997M in   5.058539s

Comparison:
         Float#round:  2647879.7 i/s
       Kernel#format:  2077249.3 i/s - 1.27x  (± 0.00) slower
            String#%:  1778692.3 i/s - 1.49x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   896.562k i/100ms
          OpenStruct   492.852k i/100ms
Calculating -------------------------------------
                Hash      8.886M (± 0.3%) i/s -     44.828M in   5.044922s
          OpenStruct      4.962M (± 0.3%) i/s -     25.135M in   5.065707s

Comparison:
                Hash:  8885892.3 i/s
          OpenStruct:  4961931.4 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.044M i/100ms
          OpenStruct    11.337k i/100ms
Calculating -------------------------------------
                Hash     11.096M (± 0.3%) i/s -     56.371M in   5.080350s
          OpenStruct    115.301k (± 2.5%) i/s -    578.187k in   5.017692s

Comparison:
                Hash: 11095933.7 i/s
          OpenStruct:   115300.7 i/s - 96.23x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   567.932k i/100ms
  ancestors.include?   122.453k i/100ms
Calculating -------------------------------------
  less than or equal      5.865M (± 0.5%) i/s -     29.532M in   5.035805s
  ancestors.include?      1.209M (± 0.6%) i/s -      6.123M in   5.063926s

Comparison:
  less than or equal:  5864622.1 i/s
  ancestors.include?:  1209116.1 i/s - 4.85x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.794  (± 0.0%) i/s -      4.000  in   5.052462s
         Kernel loop      0.215  (± 0.0%) i/s -      2.000  in   9.307884s

Comparison:
          While Loop:        0.8 i/s
         Kernel loop:        0.2 i/s - 3.69x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.531M i/100ms
         Array#first     1.320M i/100ms
Calculating -------------------------------------
           Array#[0]     15.276M (± 0.3%) i/s -     76.567M in   5.012405s
         Array#first     13.198M (± 0.4%) i/s -     66.007M in   5.001410s

Comparison:
           Array#[0]: 15275520.6 i/s
         Array#first: 13197906.1 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.560M i/100ms
          Array#last     1.323M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.620M (± 0.4%) i/s -     79.556M in   5.093133s
          Array#last     13.212M (± 0.2%) i/s -     66.158M in   5.007271s

Comparison:
          Array#[-1]: 15620398.3 i/s
          Array#last: 13212474.3 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    96.542k i/100ms
Calculating -------------------------------------
                find      0.258  (± 0.0%) i/s -      2.000  in   7.761344s
             bsearch    965.806k (± 1.1%) i/s -      4.924M in   5.098551s

Comparison:
             bsearch:   965806.1 i/s
                find:        0.3 i/s - 3747976.32x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    18.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    190.798  (± 2.1%) i/s -    954.000  in   5.002715s
        Array#insert      1.455  (± 0.0%) i/s -      8.000  in   5.498450s

Comparison:
       Array#unshift:      190.8 i/s
        Array#insert:        1.5 i/s - 131.13x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.131M i/100ms
          Array#size     2.113M i/100ms
         Array#count     1.630M i/100ms
Calculating -------------------------------------
        Array#length     21.224M (± 0.5%) i/s -    106.557M in   5.020777s
          Array#size     21.134M (± 0.5%) i/s -    107.741M in   5.098187s
         Array#count     16.414M (± 0.4%) i/s -     83.120M in   5.064094s

Comparison:
        Array#length: 21223910.3 i/s
          Array#size: 21133610.8 i/s - same-ish: difference falls within error
         Array#count: 16413762.0 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.721k i/100ms
        Array#sample   934.922k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    458.237k (± 0.4%) i/s -      2.332M in   5.088657s
        Array#sample      9.344M (± 0.2%) i/s -     46.746M in   5.002680s

Comparison:
        Array#sample:  9344269.6 i/s
 Array#shuffle.first:   458236.8 i/s - 20.39x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    62.059k i/100ms
          Date.parse    31.641k i/100ms
Calculating -------------------------------------
        Date.iso8601    626.300k (± 0.3%) i/s -      3.165M in   5.053542s
          Date.parse    315.257k (± 0.6%) i/s -      1.582M in   5.018444s

Comparison:
        Date.iso8601:   626300.2 i/s
          Date.parse:   315257.2 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.581k i/100ms
           Array#map    25.702k i/100ms
Calculating -------------------------------------
   Array#each + push    186.046k (± 0.3%) i/s -    947.631k in   5.093577s
           Array#map    257.055k (± 0.4%) i/s -      1.311M in   5.099392s

Comparison:
           Array#map:   257055.0 i/s
   Array#each + push:   186046.1 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    27.504k i/100ms
               #each    30.384k i/100ms
Calculating -------------------------------------
            For loop    276.746k (± 0.4%) i/s -      1.403M in   5.068653s
               #each    303.294k (± 0.5%) i/s -      1.519M in   5.009110s

Comparison:
               #each:   303293.8 i/s
            For loop:   276746.2 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.595k i/100ms
     each_with_index    18.776k i/100ms
Calculating -------------------------------------
          While Loop    275.712k (± 0.2%) i/s -      1.380M in   5.004335s
     each_with_index    187.725k (± 0.3%) i/s -    938.800k in   5.000954s

Comparison:
          While Loop:   275711.8 i/s
     each_with_index:   187725.4 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol   124.755k i/100ms
      inject to_proc     1.769k i/100ms
        inject block     1.987k i/100ms
Calculating -------------------------------------
       inject symbol      1.248M (± 0.7%) i/s -      6.363M in   5.099059s
      inject to_proc     17.675k (± 0.3%) i/s -     88.450k in   5.004261s
        inject block     19.770k (± 0.3%) i/s -     99.350k in   5.025429s

Comparison:
       inject symbol:  1247841.4 i/s
        inject block:    19769.6 i/s - 63.12x  (± 0.00) slower
      inject to_proc:    17675.1 i/s - 70.60x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     7.053k i/100ms
   Array#map.flatten     4.211k i/100ms
      Array#flat_map     8.980k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     73.461k (± 0.8%) i/s -    373.809k in   5.088902s
   Array#map.flatten     42.477k (± 0.3%) i/s -    214.761k in   5.055969s
      Array#flat_map     93.591k (± 1.4%) i/s -    475.940k in   5.086408s

Comparison:
      Array#flat_map:    93590.5 i/s
Array#map.flatten(1):    73460.6 i/s - 1.27x  (± 0.00) slower
   Array#map.flatten:    42477.0 i/s - 2.20x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    30.694k i/100ms
  Array#reverse_each    31.648k i/100ms
Calculating -------------------------------------
  Array#reverse.each    307.888k (± 0.2%) i/s -      1.565M in   5.084312s
  Array#reverse_each    315.972k (± 0.3%) i/s -      1.582M in   5.008084s

Comparison:
  Array#reverse_each:   315971.9 i/s
  Array#reverse.each:   307887.8 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.330k i/100ms
   Enumerable#detect    81.901k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        203.519k (± 0.3%) i/s -      4.086M in  20.078574s
   Enumerable#detect    819.631k (± 0.3%) i/s -     16.462M in  20.084933s

Comparison:
   Enumerable#detect:   819631.4 i/s
Enumerable#select.first:   203519.1 i/s - 4.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       247.552k i/100ms
Enumerable#select.last
                        18.515k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.462M (± 0.4%) i/s -     12.378M in   5.027854s
Enumerable#select.last
                        184.921k (± 0.2%) i/s -    925.750k in   5.006205s

Comparison:
Enumerable#reverse.detect:  2461850.6 i/s
Enumerable#select.last:   184921.3 i/s - 13.31x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         5.136k i/100ms
  Enumerable#sort_by     4.931k i/100ms
     Enumerable#sort     2.351k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         51.050k (± 1.1%) i/s -    256.800k in   5.031016s
  Enumerable#sort_by     49.274k (± 0.8%) i/s -    246.550k in   5.003950s
     Enumerable#sort     23.481k (± 0.3%) i/s -    117.550k in   5.006198s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    51050.2 i/s
  Enumerable#sort_by:    49274.4 i/s - 1.04x  (± 0.00) slower
     Enumerable#sort:    23481.2 i/s - 2.17x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.322k i/100ms
Enumerable#sort_by...first
                         8.791k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    173.542k (± 0.2%) i/s -    883.422k in   5.090554s
Enumerable#sort_by...first
                         87.884k (± 0.3%) i/s -    439.550k in   5.001507s

Comparison:
   Enumerable#min_by:   173542.3 i/s
Enumerable#sort_by...first:    87884.4 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   422.698k i/100ms
            Hash#dup   315.685k i/100ms
Calculating -------------------------------------
              Hash[]      4.060M (± 2.3%) i/s -     20.712M in   5.104437s
            Hash#dup      2.891M (± 1.1%) i/s -     14.522M in   5.023783s

Comparison:
              Hash[]:  4059623.8 i/s
            Hash#dup:  2890888.9 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.421M i/100ms
  Hash#fetch, symbol     1.118M i/100ms
     Hash#[], string     1.195M i/100ms
  Hash#fetch, string   778.967k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.001M (± 0.3%) i/s -     71.061M in   5.075507s
  Hash#fetch, symbol     11.195M (± 0.6%) i/s -     57.042M in   5.095586s
     Hash#[], string     11.956M (± 0.3%) i/s -     60.931M in   5.096390s
  Hash#fetch, string      7.804M (± 0.3%) i/s -     39.727M in   5.090779s

Comparison:
     Hash#[], symbol: 14000896.5 i/s
     Hash#[], string: 11955709.9 i/s - 1.17x  (± 0.00) slower
  Hash#fetch, symbol: 11194805.2 i/s - 1.25x  (± 0.00) slower
  Hash#fetch, string:  7803830.0 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   853.497k i/100ms
             Hash#[]   980.651k i/100ms
          Hash#[] ||   853.603k i/100ms
          Hash#[] &&   368.545k i/100ms
          Hash#fetch   597.686k i/100ms
 Hash#fetch fallback   395.330k i/100ms
Calculating -------------------------------------
            Hash#dig      8.755M (± 0.7%) i/s -     44.382M in   5.069607s
             Hash#[]      9.947M (± 0.3%) i/s -     50.013M in   5.028046s
          Hash#[] ||      8.806M (± 0.5%) i/s -     44.387M in   5.040866s
          Hash#[] &&      3.743M (± 0.8%) i/s -     18.796M in   5.022529s
          Hash#fetch      6.032M (± 1.2%) i/s -     30.482M in   5.054190s
 Hash#fetch fallback      3.907M (± 1.2%) i/s -     19.766M in   5.059726s

Comparison:
             Hash#[]:  9946958.5 i/s
          Hash#[] ||:  8805746.0 i/s - 1.13x  (± 0.00) slower
            Hash#dig:  8754935.9 i/s - 1.14x  (± 0.00) slower
          Hash#fetch:  6031832.4 i/s - 1.65x  (± 0.00) slower
 Hash#fetch fallback:  3907166.9 i/s - 2.55x  (± 0.00) slower
          Hash#[] &&:  3742546.5 i/s - 2.66x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.441M i/100ms
  Hash#fetch + block     1.445M i/100ms
    Hash#fetch + arg     1.089M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.470M (± 0.3%) i/s -     73.496M in   5.079233s
  Hash#fetch + block     14.502M (± 0.2%) i/s -     73.704M in   5.082484s
    Hash#fetch + arg     10.859M (± 0.4%) i/s -     54.429M in   5.012340s

Comparison:
  Hash#fetch + block: 14501547.0 i/s
  Hash#fetch + const: 14470088.4 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 10859119.6 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.502k i/100ms
         sort + to_h    11.151k i/100ms
Calculating -------------------------------------
      sort_by + to_h    274.870k (± 0.4%) i/s -      1.375M in   5.002808s
         sort + to_h    115.170k (± 0.5%) i/s -    579.852k in   5.034870s

Comparison:
      sort_by + to_h:   274870.5 i/s
         sort + to_h:   115169.6 i/s - 2.39x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   196.474k i/100ms
       Hash#each_key   193.208k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.922M (± 0.7%) i/s -      9.627M in   5.008979s
       Hash#each_key      1.890M (± 0.2%) i/s -      9.467M in   5.008070s

Comparison:
      Hash#keys.each:  1922084.9 i/s
       Hash#each_key:  1890391.8 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.792k i/100ms
           Hash#key?   938.479k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     17.810k (± 4.8%) i/s -     89.600k in   5.046213s
           Hash#key?      9.359M (± 0.4%) i/s -     46.924M in   5.013680s

Comparison:
           Hash#key?:  9359367.1 i/s
  Hash#keys.include?:    17809.6 i/s - 525.53x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.227k i/100ms
            Hash#[]=    10.396k i/100ms
Calculating -------------------------------------
         Hash#merge!     41.919k (± 0.5%) i/s -    211.350k in   5.041999s
            Hash#[]=    103.316k (± 4.5%) i/s -    519.800k in   5.045904s

Comparison:
            Hash#[]=:   103315.8 i/s
         Hash#merge!:    41918.8 i/s - 2.46x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         5.231k i/100ms
      Hash#merge({})     4.152k i/100ms
 Hash#dup#merge!({})     2.738k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         52.377k (± 0.6%) i/s -    266.781k in   5.093711s
      Hash#merge({})     41.550k (± 0.3%) i/s -    211.752k in   5.096398s
 Hash#dup#merge!({})     27.229k (± 1.1%) i/s -    136.900k in   5.028370s

Comparison:
{}#merge!(Hash) do end:    52376.5 i/s
      Hash#merge({}):    41549.8 i/s - 1.26x  (± 0.00) slower
 Hash#dup#merge!({}):    27228.8 i/s - 1.92x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   396.533k i/100ms
          Hash#merge   366.997k i/100ms
Calculating -------------------------------------
        Hash#**other      3.970M (± 0.4%) i/s -     20.223M in   5.094579s
          Hash#merge      3.650M (± 0.4%) i/s -     18.350M in   5.027447s

Comparison:
        Hash#**other:  3969602.1 i/s
          Hash#merge:  3649997.9 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.729k i/100ms
         Hash#merge!     4.090k i/100ms
Calculating -------------------------------------
          Hash#merge     16.915k (± 1.2%) i/s -     84.721k in   5.009267s
         Hash#merge!     41.143k (± 0.4%) i/s -    208.590k in   5.069960s

Comparison:
         Hash#merge!:    41143.0 i/s
          Hash#merge:    16915.5 i/s - 2.43x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      429.099k i/100ms
Array#each             234.816k i/100ms
Array#each_w/_object   175.196k i/100ms
Hash#select-include     79.271k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.269M (± 0.4%) i/s -     21.455M in   5.025311s
Array#each                2.335M (± 0.9%) i/s -     11.741M in   5.028774s
Array#each_w/_object      1.730M (± 0.6%) i/s -      8.760M in   5.063615s
Hash#select-include     792.981k (± 1.0%) i/s -      4.043M in   5.098777s

Comparison:
Hash#native-slice   :  4269446.3 i/s
Array#each          :  2334930.6 i/s - 1.83x  (± 0.00) slower
Array#each_w/_object:  1730019.8 i/s - 2.47x  (± 0.00) slower
Hash#select-include :   792981.4 i/s - 5.38x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.125k i/100ms
         Hash#value?   853.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     11.095k (± 3.3%) i/s -     56.250k in   5.075950s
         Hash#value?      8.540k (± 0.2%) i/s -     43.503k in   5.094199s

Comparison:
Hash#values.include?:    11095.4 i/s
         Hash#value?:     8539.8 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   666.256k i/100ms
                send   494.708k i/100ms
      method_missing   386.869k i/100ms
Calculating -------------------------------------
                call      6.681M (± 0.2%) i/s -     33.979M in   5.086201s
                send      4.932M (± 0.5%) i/s -     24.735M in   5.015427s
      method_missing      3.836M (± 0.7%) i/s -     19.343M in   5.042651s

Comparison:
                call:  6680677.1 i/s
                send:  4931972.2 i/s - 1.35x  (± 0.00) slower
      method_missing:  3836177.5 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     8.756k i/100ms
      Symbol#to_proc     9.322k i/100ms
Calculating -------------------------------------
               Block     86.791k (± 0.3%) i/s -    437.800k in   5.044388s
      Symbol#to_proc     93.295k (± 0.3%) i/s -    475.422k in   5.095914s

Comparison:
      Symbol#to_proc:    93295.4 i/s
               Block:    86790.5 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   908.944k i/100ms
       block + yield   972.996k i/100ms
        unused block     1.288M i/100ms
               yield     1.168M i/100ms
Calculating -------------------------------------
          block.call      9.080M (± 0.2%) i/s -     45.447M in   5.005212s
       block + yield      9.722M (± 0.3%) i/s -     48.650M in   5.004022s
        unused block     12.900M (± 0.3%) i/s -     65.700M in   5.093257s
               yield     11.544M (± 3.8%) i/s -     58.406M in   5.068657s

Comparison:
        unused block: 12899507.8 i/s
               yield: 11544318.3 i/s - 1.12x  (± 0.00) slower
       block + yield:  9722235.3 i/s - 1.33x  (± 0.00) slower
          block.call:  9080017.9 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   310.375k i/100ms
      range#include?    12.786k i/100ms
       range#member?    12.773k i/100ms
       plain compare   531.578k i/100ms
Calculating -------------------------------------
        range#cover?      3.149M (± 0.4%) i/s -     15.829M in   5.027268s
      range#include?    130.313k (± 0.5%) i/s -    652.086k in   5.004132s
       range#member?    129.560k (± 0.4%) i/s -    651.423k in   5.028070s
       plain compare      5.203M (± 1.6%) i/s -     26.047M in   5.007692s

Comparison:
       plain compare:  5202935.2 i/s
        range#cover?:  3148694.2 i/s - 1.65x  (± 0.00) slower
      range#include?:   130312.9 i/s - 39.93x  (± 0.00) slower
       range#member?:   129559.9 i/s - 40.16x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   943.502k i/100ms
           String#=~   656.511k i/100ms
          Regexp#===   603.730k i/100ms
        String#match   489.096k i/100ms
Calculating -------------------------------------
       String#match?      9.450M (± 0.2%) i/s -     48.119M in   5.092034s
           String#=~      6.629M (± 0.1%) i/s -     33.482M in   5.051200s
          Regexp#===      6.041M (± 0.1%) i/s -     30.790M in   5.097036s
        String#match      4.873M (± 2.1%) i/s -     24.455M in   5.020903s

Comparison:
       String#match?:  9449821.6 i/s
           String#=~:  6628546.1 i/s - 1.43x  (± 0.00) slower
          Regexp#===:  6040816.4 i/s - 1.56x  (± 0.00) slower
        String#match:  4873010.4 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   647.854k i/100ms
      String#casecmp   792.195k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.485M (± 0.6%) i/s -     33.041M in   5.094970s
      String#casecmp      7.930M (± 1.1%) i/s -     40.402M in   5.095324s

Comparison:
      String#casecmp:  7930280.8 i/s
String#downcase + ==:  6485182.1 i/s - 1.22x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   580.144k i/100ms
       String#concat   603.979k i/100ms
       String#append   648.227k i/100ms
         "foo" "bar"     1.140M i/100ms
  "#{'foo'}#{'bar'}"     1.132M i/100ms
Calculating -------------------------------------
            String#+      5.810M (± 0.3%) i/s -     29.587M in   5.092229s
       String#concat      6.030M (± 0.3%) i/s -     30.199M in   5.008360s
       String#append      6.502M (± 0.3%) i/s -     33.060M in   5.084524s
         "foo" "bar"     11.372M (± 0.2%) i/s -     57.024M in   5.014355s
  "#{'foo'}#{'bar'}"     11.293M (± 0.2%) i/s -     56.587M in   5.010650s

Comparison:
         "foo" "bar": 11372144.3 i/s
  "#{'foo'}#{'bar'}": 11293421.0 i/s - 1.01x  (± 0.00) slower
       String#append:  6502074.0 i/s - 1.75x  (± 0.00) slower
       String#concat:  6029754.7 i/s - 1.89x  (± 0.00) slower
            String#+:  5810364.0 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@   982.791k i/100ms
          String#dup   569.129k i/100ms
Calculating -------------------------------------
           String#+@      9.814M (± 0.2%) i/s -     49.140M in   5.007052s
          String#dup      5.746M (± 0.6%) i/s -     29.026M in   5.051947s

Comparison:
           String#+@:  9814105.7 i/s
          String#dup:  5745619.3 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   183.603k i/100ms
       String#match?   428.080k i/100ms
    String#end_with?   606.196k i/100ms
Calculating -------------------------------------
           String#=~      1.851M (± 0.3%) i/s -      9.364M in   5.058519s
       String#match?      4.287M (± 0.3%) i/s -     21.832M in   5.092747s
    String#end_with?      6.065M (± 1.3%) i/s -     30.916M in   5.098210s

Comparison:
    String#end_with?:  6065135.6 i/s
       String#match?:  4286941.7 i/s - 1.41x  (± 0.00) slower
           String#=~:  1851106.3 i/s - 3.28x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   108.374k i/100ms
          String#sub   131.988k i/100ms
String#dup["string"]=
                       170.843k i/100ms
Calculating -------------------------------------
         String#gsub      1.085M (± 0.2%) i/s -      5.527M in   5.091982s
          String#sub      1.361M (± 0.2%) i/s -      6.863M in   5.043989s
String#dup["string"]=
                          1.731M (± 0.3%) i/s -      8.713M in   5.033956s

Comparison:
String#dup["string"]=:  1730859.8 i/s
          String#sub:  1360710.4 i/s - 1.27x  (± 0.00) slower
         String#gsub:  1085452.7 i/s - 1.59x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   101.738k i/100ms
           String#tr   360.804k i/100ms
Calculating -------------------------------------
         String#gsub      1.024M (± 0.2%) i/s -      5.189M in   5.069461s
           String#tr      3.594M (± 0.2%) i/s -     18.040M in   5.018954s

Comparison:
           String#tr:  3594432.9 i/s
         String#gsub:  1023513.4 i/s - 3.51x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.174M i/100ms
         With Freeze     1.650M i/100ms
Calculating -------------------------------------
      Without Freeze     11.725M (± 0.4%) i/s -     58.692M in   5.005747s
         With Freeze     16.604M (± 0.4%) i/s -     84.154M in   5.068523s

Comparison:
         With Freeze: 16603599.0 i/s
      Without Freeze: 11725129.7 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.313k i/100ms
      String#squeeze   155.194k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     33.147k (± 0.4%) i/s -    168.963k in   5.097434s
      String#squeeze      1.560M (± 1.3%) i/s -      7.915M in   5.076057s

Comparison:
      String#squeeze:  1559514.8 i/s
 String#gsub/regex+/:    33147.3 i/s - 47.05x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   277.760k i/100ms
       String#match?   801.506k i/100ms
  String#start_with?   869.607k i/100ms
Calculating -------------------------------------
           String#=~      2.791M (± 0.2%) i/s -     14.166M in   5.074962s
       String#match?      7.973M (± 1.2%) i/s -     40.075M in   5.027482s
  String#start_with?      8.696M (± 0.4%) i/s -     43.480M in   5.000284s

Comparison:
  String#start_with?:  8695686.5 i/s
       String#match?:  7972522.8 i/s - 1.09x  (± 0.00) slower
           String#=~:  2791310.7 i/s - 3.12x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   215.019k i/100ms
    String#[0, n] ==    84.939k i/100ms
   String#[RANGE] ==    76.630k i/100ms
   String#[0...n] ==    47.519k i/100ms
Calculating -------------------------------------
  String#start_with?      2.019M (± 0.9%) i/s -     10.106M in   5.005805s
    String#[0, n] ==    840.719k (± 0.6%) i/s -      4.247M in   5.051746s
   String#[RANGE] ==    763.872k (± 0.6%) i/s -      3.832M in   5.016061s
   String#[0...n] ==    466.935k (± 0.7%) i/s -      2.376M in   5.088659s

Comparison:
  String#start_with?:  2018976.7 i/s
    String#[0, n] ==:   840718.7 i/s - 2.40x  (± 0.00) slower
   String#[RANGE] ==:   763872.3 i/s - 2.64x  (± 0.00) slower
   String#[0...n] ==:   466935.3 i/s - 4.32x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   175.760k i/100ms
 String#sub!'string'   125.850k i/100ms
String#gsub!'string'    77.032k i/100ms
  String#[/regexp/]=   142.967k i/100ms
 String#sub!/regexp/   109.471k i/100ms
String#gsub!/regexp/    57.936k i/100ms
Calculating -------------------------------------
  String#['string']=      1.802M (± 0.2%) i/s -      9.140M in   5.073289s
 String#sub!'string'      1.245M (± 0.8%) i/s -      6.292M in   5.055903s
String#gsub!'string'    765.725k (± 0.3%) i/s -      3.852M in   5.030045s
  String#[/regexp/]=      1.431M (± 0.7%) i/s -      7.291M in   5.094261s
 String#sub!/regexp/      1.074M (± 0.5%) i/s -      5.474M in   5.096175s
String#gsub!/regexp/    580.476k (± 0.4%) i/s -      2.955M in   5.090291s

Comparison:
  String#['string']=:  1801509.0 i/s
  String#[/regexp/]=:  1431350.9 i/s - 1.26x  (± 0.00) slower
 String#sub!'string':  1244661.5 i/s - 1.45x  (± 0.00) slower
 String#sub!/regexp/:  1074076.4 i/s - 1.68x  (± 0.00) slower
String#gsub!'string':   765725.5 i/s - 2.35x  (± 0.00) slower
String#gsub!/regexp/:   580476.4 i/s - 3.10x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   134.347k i/100ms
        String#chomp   552.008k i/100ms
String#delete_suffix   593.865k i/100ms
Calculating -------------------------------------
          String#sub      1.346M (± 0.5%) i/s -      6.852M in   5.092037s
        String#chomp      5.477M (± 0.9%) i/s -     27.600M in   5.040135s
String#delete_suffix      5.999M (± 0.6%) i/s -     30.287M in   5.048896s

Comparison:
String#delete_suffix:  5999004.5 i/s
        String#chomp:  5476543.5 i/s - 1.10x  (± 0.00) slower
          String#sub:  1345601.6 i/s - 4.46x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   600.492k i/100ms
          String#sub   143.273k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.333M (± 0.3%) i/s -     31.826M in   5.025458s
          String#sub      1.437M (± 0.5%) i/s -      7.307M in   5.086309s

Comparison:
String#delete_prefix:  6333024.1 i/s
          String#sub:  1436623.1 i/s - 4.41x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   606.943k i/100ms
    String#unpack[0]   436.853k i/100ms
Calculating -------------------------------------
      String#unpack1      6.053M (± 0.9%) i/s -     30.347M in   5.013776s
    String#unpack[0]      4.420M (± 0.5%) i/s -     22.280M in   5.041144s

Comparison:
      String#unpack1:  6053268.1 i/s
    String#unpack[0]:  4419629.3 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    28.340k i/100ms
          Time.parse     9.639k i/100ms
Calculating -------------------------------------
        Time.iso8601    281.496k (± 0.3%) i/s -      1.417M in   5.033866s
          Time.parse     95.898k (± 0.5%) i/s -    481.950k in   5.025809s

Comparison:
        Time.iso8601:   281496.0 i/s
          Time.parse:    95897.7 i/s - 2.94x  (± 0.00) slower

