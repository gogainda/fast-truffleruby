$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       761.955k i/100ms
Function with splat arguments
                        27.043k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.636M (± 3.4%) i/s -     38.860M in   5.095962s
Function with splat arguments
                        245.581k (± 7.3%) i/s -      1.244M in   5.097415s

Comparison:
Function with single Array argument:  7636209.7 i/s
Function with splat arguments:   245581.2 i/s - 31.09x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.007M i/100ms
Sequential Assignment
                         1.008M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.037M (± 0.5%) i/s -     50.354M in   5.016894s
Sequential Assignment
                         10.043M (± 0.3%) i/s -     50.402M in   5.018451s

Comparison:
Sequential Assignment: 10043414.9 i/s
 Parallel Assignment: 10037071.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   464.705k i/100ms
       attr_accessor   549.353k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.674M (± 0.2%) i/s -     23.700M in   5.070132s
       attr_accessor      5.453M (± 0.3%) i/s -     27.468M in   5.036928s

Comparison:
       attr_accessor:  5453293.8 i/s
   getter_and_setter:  4674451.6 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    88.019k i/100ms
         respond_to?   765.486k i/100ms
Calculating -------------------------------------
      begin...rescue    880.297k (± 1.7%) i/s -      4.401M in   5.000865s
         respond_to?      7.660M (± 0.8%) i/s -     39.040M in   5.096801s

Comparison:
         respond_to?:  7660135.5 i/s
      begin...rescue:   880297.3 i/s - 8.70x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   292.677k i/100ms
             &method   122.048k i/100ms
Calculating -------------------------------------
              normal      2.941M (± 0.4%) i/s -     14.927M in   5.075334s
             &method      1.211M (± 1.8%) i/s -      6.102M in   5.040283s

Comparison:
              normal:  2941044.2 i/s
             &method:  1211172.0 i/s - 2.43x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       259.000  i/100ms
       define_method   256.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.368k (±21.6%) i/s -     10.360k in   5.005149s
       define_method      3.309k (±20.5%) i/s -     14.848k in   5.025181s

Comparison:
       define_method:     3309.2 i/s
module_eval with string:     2367.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   238.489k i/100ms
       Kernel#format   202.664k i/100ms
            String#%   175.356k i/100ms
Calculating -------------------------------------
         Float#round      2.370M (± 1.0%) i/s -     11.924M in   5.031758s
       Kernel#format      2.046M (± 0.4%) i/s -     10.336M in   5.050683s
            String#%      1.754M (± 0.3%) i/s -      8.943M in   5.098371s

Comparison:
         Float#round:  2370074.1 i/s
       Kernel#format:  2046454.9 i/s - 1.16x  (± 0.00) slower
            String#%:  1754139.2 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   905.714k i/100ms
          OpenStruct   501.848k i/100ms
Calculating -------------------------------------
                Hash      8.929M (± 4.0%) i/s -     45.286M in   5.082180s
          OpenStruct      5.011M (± 0.6%) i/s -     25.092M in   5.007161s

Comparison:
                Hash:  8928952.3 i/s
          OpenStruct:  5011474.2 i/s - 1.78x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.091M i/100ms
          OpenStruct    11.360k i/100ms
Calculating -------------------------------------
                Hash     11.609M (± 0.3%) i/s -     58.906M in   5.074424s
          OpenStruct    114.722k (± 2.5%) i/s -    579.360k in   5.053235s

Comparison:
                Hash: 11608608.3 i/s
          OpenStruct:   114722.0 i/s - 101.19x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   572.902k i/100ms
  ancestors.include?   122.857k i/100ms
Calculating -------------------------------------
  less than or equal      5.945M (± 0.8%) i/s -     29.791M in   5.011564s
  ancestors.include?      1.223M (± 1.3%) i/s -      6.143M in   5.022209s

Comparison:
  less than or equal:  5944774.3 i/s
  ancestors.include?:  1223357.2 i/s - 4.86x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.686  (± 0.0%) i/s -      4.000  in   5.831090s
         Kernel loop      0.212  (± 0.0%) i/s -      2.000  in   9.419294s

Comparison:
          While Loop:        0.7 i/s
         Kernel loop:        0.2 i/s - 3.23x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.505M i/100ms
         Array#first     1.299M i/100ms
Calculating -------------------------------------
           Array#[0]     15.042M (± 0.2%) i/s -     75.270M in   5.003863s
         Array#first     12.973M (± 0.3%) i/s -     64.957M in   5.007290s

Comparison:
           Array#[0]: 15042486.7 i/s
         Array#first: 12972544.5 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.558M i/100ms
          Array#last     1.311M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.419M (± 0.3%) i/s -     77.896M in   5.052156s
          Array#last     13.099M (± 0.2%) i/s -     65.546M in   5.003968s

Comparison:
          Array#[-1]: 15418615.8 i/s
          Array#last: 13098986.2 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    96.608k i/100ms
Calculating -------------------------------------
                find      0.275  (± 0.0%) i/s -      2.000  in   7.264607s
             bsearch    960.713k (± 3.9%) i/s -      4.830M in   5.037806s

Comparison:
             bsearch:   960712.6 i/s
                find:        0.3 i/s - 3489593.96x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    18.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    189.474  (± 2.6%) i/s -    954.000  in   5.038027s
        Array#insert      1.443  (± 0.0%) i/s -      8.000  in   5.545501s

Comparison:
       Array#unshift:      189.5 i/s
        Array#insert:        1.4 i/s - 131.33x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.092M i/100ms
          Array#size     2.155M i/100ms
         Array#count     1.609M i/100ms
Calculating -------------------------------------
        Array#length     21.335M (± 0.4%) i/s -    108.761M in   5.097769s
          Array#size     21.542M (± 0.2%) i/s -    107.734M in   5.001135s
         Array#count     15.995M (± 2.2%) i/s -     80.433M in   5.031334s

Comparison:
          Array#size: 21541970.5 i/s
        Array#length: 21335286.6 i/s - 1.01x  (± 0.00) slower
         Array#count: 15994515.7 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.717k i/100ms
        Array#sample     1.044M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    458.329k (± 0.4%) i/s -      2.332M in   5.087196s
        Array#sample     10.459M (± 0.3%) i/s -     53.234M in   5.090003s

Comparison:
        Array#sample: 10458677.4 i/s
 Array#shuffle.first:   458328.8 i/s - 22.82x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    63.649k i/100ms
          Date.parse    32.065k i/100ms
Calculating -------------------------------------
        Date.iso8601    641.346k (± 0.4%) i/s -      3.246M in   5.061450s
          Date.parse    320.300k (± 0.5%) i/s -      1.603M in   5.005579s

Comparison:
        Date.iso8601:   641346.0 i/s
          Date.parse:   320300.3 i/s - 2.00x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    17.959k i/100ms
           Array#map    25.600k i/100ms
Calculating -------------------------------------
   Array#each + push    185.958k (± 0.3%) i/s -    933.868k in   5.021981s
           Array#map    255.073k (± 1.4%) i/s -      1.280M in   5.019242s

Comparison:
           Array#map:   255073.4 i/s
   Array#each + push:   185958.1 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    28.700k i/100ms
               #each    31.465k i/100ms
Calculating -------------------------------------
            For loop    287.336k (± 0.4%) i/s -      1.464M in   5.094115s
               #each    314.064k (± 0.2%) i/s -      1.573M in   5.009348s

Comparison:
               #each:   314064.1 i/s
            For loop:   287335.6 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.662k i/100ms
     each_with_index    18.888k i/100ms
Calculating -------------------------------------
          While Loop    275.048k (± 0.4%) i/s -      1.383M in   5.028659s
     each_with_index    187.805k (± 1.5%) i/s -    944.400k in   5.029964s

Comparison:
          While Loop:   275048.4 i/s
     each_with_index:   187804.8 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol   124.695k i/100ms
      inject to_proc     1.758k i/100ms
        inject block     1.924k i/100ms
Calculating -------------------------------------
       inject symbol      1.245M (± 0.6%) i/s -      6.235M in   5.009559s
      inject to_proc     17.563k (± 0.4%) i/s -     87.900k in   5.004765s
        inject block     19.253k (± 0.4%) i/s -     98.124k in   5.096598s

Comparison:
       inject symbol:  1244617.2 i/s
        inject block:    19253.2 i/s - 64.64x  (± 0.00) slower
      inject to_proc:    17563.5 i/s - 70.86x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.966k i/100ms
   Array#map.flatten     4.193k i/100ms
      Array#flat_map     8.923k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     72.679k (± 1.0%) i/s -    369.198k in   5.080437s
   Array#map.flatten     42.117k (± 5.0%) i/s -    213.843k in   5.093358s
      Array#flat_map     94.450k (± 0.6%) i/s -    472.919k in   5.007276s

Comparison:
      Array#flat_map:    94450.0 i/s
Array#map.flatten(1):    72678.9 i/s - 1.30x  (± 0.00) slower
   Array#map.flatten:    42117.5 i/s - 2.24x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    30.747k i/100ms
  Array#reverse_each    31.399k i/100ms
Calculating -------------------------------------
  Array#reverse.each    307.500k (± 0.5%) i/s -      1.568M in   5.099648s
  Array#reverse_each    314.838k (± 0.5%) i/s -      1.601M in   5.086399s

Comparison:
  Array#reverse_each:   314838.1 i/s
  Array#reverse.each:   307499.8 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.381k i/100ms
   Enumerable#detect    78.473k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        203.197k (± 2.0%) i/s -      4.076M in  20.070536s
   Enumerable#detect    780.690k (± 0.3%) i/s -     15.616M in  20.003209s

Comparison:
   Enumerable#detect:   780690.2 i/s
Enumerable#select.first:   203197.2 i/s - 3.84x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       242.518k i/100ms
Enumerable#select.last
                        18.227k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.432M (± 0.7%) i/s -     12.368M in   5.086702s
Enumerable#select.last
                        184.652k (± 0.5%) i/s -    929.577k in   5.034347s

Comparison:
Enumerable#reverse.detect:  2431627.3 i/s
Enumerable#select.last:   184651.8 i/s - 13.17x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.998k i/100ms
  Enumerable#sort_by     5.098k i/100ms
     Enumerable#sort     2.445k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         52.247k (± 1.9%) i/s -    264.894k in   5.071878s
  Enumerable#sort_by     50.608k (± 0.6%) i/s -    254.900k in   5.036930s
     Enumerable#sort     24.496k (± 0.4%) i/s -    124.695k in   5.090522s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    52246.7 i/s
  Enumerable#sort_by:    50608.0 i/s - 1.03x  (± 0.00) slower
     Enumerable#sort:    24496.0 i/s - 2.13x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.465k i/100ms
Enumerable#sort_by...first
                         8.819k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    173.619k (± 4.3%) i/s -    873.250k in   5.042828s
Enumerable#sort_by...first
                         88.451k (± 0.4%) i/s -    449.769k in   5.085046s

Comparison:
   Enumerable#min_by:   173619.5 i/s
Enumerable#sort_by...first:    88450.9 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   418.008k i/100ms
            Hash#dup   320.517k i/100ms
Calculating -------------------------------------
              Hash[]      3.937M (± 5.2%) i/s -     19.646M in   5.008089s
            Hash#dup      2.913M (± 0.8%) i/s -     14.744M in   5.062147s

Comparison:
              Hash[]:  3937149.1 i/s
            Hash#dup:  2912739.8 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.420M i/100ms
  Hash#fetch, symbol     1.176M i/100ms
     Hash#[], string     1.241M i/100ms
  Hash#fetch, string   786.852k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.226M (± 0.4%) i/s -     72.413M in   5.090236s
  Hash#fetch, symbol     11.735M (± 0.5%) i/s -     58.797M in   5.010521s
     Hash#[], string     12.408M (± 0.4%) i/s -     62.038M in   5.000051s
  Hash#fetch, string      7.860M (± 0.2%) i/s -     39.343M in   5.005216s

Comparison:
     Hash#[], symbol: 14226078.9 i/s
     Hash#[], string: 12407724.9 i/s - 1.15x  (± 0.00) slower
  Hash#fetch, symbol: 11735019.3 i/s - 1.21x  (± 0.00) slower
  Hash#fetch, string:  7860365.0 i/s - 1.81x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   903.350k i/100ms
             Hash#[]     1.006M i/100ms
          Hash#[] ||   856.747k i/100ms
          Hash#[] &&   359.502k i/100ms
          Hash#fetch   594.969k i/100ms
 Hash#fetch fallback   390.415k i/100ms
Calculating -------------------------------------
            Hash#dig      8.826M (± 4.0%) i/s -     44.264M in   5.025376s
             Hash#[]     10.097M (± 0.5%) i/s -     51.321M in   5.083134s
          Hash#[] ||      8.486M (± 0.7%) i/s -     42.837M in   5.048039s
          Hash#[] &&      3.763M (± 1.4%) i/s -     19.054M in   5.064886s
          Hash#fetch      5.913M (± 0.8%) i/s -     29.748M in   5.031152s
 Hash#fetch fallback      3.890M (± 1.1%) i/s -     19.521M in   5.018475s

Comparison:
             Hash#[]: 10096723.3 i/s
            Hash#dig:  8825590.3 i/s - 1.14x  (± 0.00) slower
          Hash#[] ||:  8486369.5 i/s - 1.19x  (± 0.00) slower
          Hash#fetch:  5913204.6 i/s - 1.71x  (± 0.00) slower
 Hash#fetch fallback:  3890210.0 i/s - 2.60x  (± 0.00) slower
          Hash#[] &&:  3762628.2 i/s - 2.68x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.459M i/100ms
  Hash#fetch + block     1.446M i/100ms
    Hash#fetch + arg     1.090M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.477M (± 3.4%) i/s -     72.974M in   5.048029s
  Hash#fetch + block     14.474M (± 0.7%) i/s -     73.731M in   5.094273s
    Hash#fetch + arg     10.901M (± 0.2%) i/s -     54.512M in   5.000617s

Comparison:
  Hash#fetch + const: 14477068.6 i/s
  Hash#fetch + block: 14473981.0 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 10901180.4 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.136k i/100ms
         sort + to_h    11.245k i/100ms
Calculating -------------------------------------
      sort_by + to_h    272.905k (± 0.8%) i/s -      1.384M in   5.071471s
         sort + to_h    111.187k (± 0.4%) i/s -    562.250k in   5.056904s

Comparison:
      sort_by + to_h:   272905.2 i/s
         sort + to_h:   111186.8 i/s - 2.45x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   191.530k i/100ms
       Hash#each_key   193.546k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.956M (± 1.2%) i/s -      9.960M in   5.091705s
       Hash#each_key      1.917M (± 0.3%) i/s -      9.677M in   5.047409s

Comparison:
      Hash#keys.each:  1956308.0 i/s
       Hash#each_key:  1917301.6 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.370k i/100ms
           Hash#key?   938.913k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     13.509k (± 4.3%) i/s -     68.500k in   5.082537s
           Hash#key?      9.361M (± 2.6%) i/s -     46.946M in   5.019297s

Comparison:
           Hash#key?:  9360558.5 i/s
  Hash#keys.include?:    13508.5 i/s - 692.94x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.137k i/100ms
            Hash#[]=    10.273k i/100ms
Calculating -------------------------------------
         Hash#merge!     41.443k (± 0.5%) i/s -    210.987k in   5.091173s
            Hash#[]=    102.455k (± 0.7%) i/s -    513.650k in   5.013700s

Comparison:
            Hash#[]=:   102454.5 i/s
         Hash#merge!:    41442.8 i/s - 2.47x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         5.148k i/100ms
      Hash#merge({})     4.159k i/100ms
 Hash#dup#merge!({})     2.724k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         51.891k (± 0.4%) i/s -    262.548k in   5.059730s
      Hash#merge({})     41.283k (± 0.6%) i/s -    207.950k in   5.037414s
 Hash#dup#merge!({})     27.124k (± 0.4%) i/s -    136.200k in   5.021454s

Comparison:
{}#merge!(Hash) do end:    51890.7 i/s
      Hash#merge({}):    41282.5 i/s - 1.26x  (± 0.00) slower
 Hash#dup#merge!({}):    27124.1 i/s - 1.91x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   389.511k i/100ms
          Hash#merge   366.646k i/100ms
Calculating -------------------------------------
        Hash#**other      3.888M (± 3.2%) i/s -     19.476M in   5.014787s
          Hash#merge      3.664M (± 0.6%) i/s -     18.332M in   5.002970s

Comparison:
        Hash#**other:  3888332.9 i/s
          Hash#merge:  3664424.9 i/s - 1.06x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.659k i/100ms
         Hash#merge!     4.098k i/100ms
Calculating -------------------------------------
          Hash#merge     16.452k (± 1.3%) i/s -     82.950k in   5.042884s
         Hash#merge!     41.117k (± 0.5%) i/s -    208.998k in   5.083137s

Comparison:
         Hash#merge!:    41117.0 i/s
          Hash#merge:    16451.6 i/s - 2.50x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      435.413k i/100ms
Array#each             233.630k i/100ms
Array#each_w/_object   169.183k i/100ms
Hash#select-include     79.991k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.362M (± 0.5%) i/s -     22.206M in   5.091298s
Array#each                2.336M (± 1.2%) i/s -     11.682M in   5.000458s
Array#each_w/_object      1.654M (± 0.7%) i/s -      8.290M in   5.011041s
Hash#select-include     793.223k (± 0.4%) i/s -      4.000M in   5.042214s

Comparison:
Hash#native-slice   :  4361665.0 i/s
Array#each          :  2336429.9 i/s - 1.87x  (± 0.00) slower
Array#each_w/_object:  1654419.0 i/s - 2.64x  (± 0.00) slower
Hash#select-include :   793222.8 i/s - 5.50x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.066k i/100ms
         Hash#value?   826.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     10.428k (± 3.5%) i/s -     52.234k in   5.015878s
         Hash#value?      8.319k (± 0.4%) i/s -     42.126k in   5.064196s

Comparison:
Hash#values.include?:    10427.9 i/s
         Hash#value?:     8318.5 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   655.387k i/100ms
                send   489.358k i/100ms
      method_missing   383.862k i/100ms
Calculating -------------------------------------
                call      6.546M (± 3.4%) i/s -     32.769M in   5.013843s
                send      4.899M (± 0.7%) i/s -     24.957M in   5.094260s
      method_missing      3.818M (± 0.4%) i/s -     19.193M in   5.027391s

Comparison:
                call:  6545519.1 i/s
                send:  4899311.7 i/s - 1.34x  (± 0.00) slower
      method_missing:  3817761.3 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     8.640k i/100ms
      Symbol#to_proc     9.283k i/100ms
Calculating -------------------------------------
               Block     86.939k (± 0.6%) i/s -    440.640k in   5.068527s
      Symbol#to_proc     92.043k (± 0.3%) i/s -    464.150k in   5.042792s

Comparison:
      Symbol#to_proc:    92043.1 i/s
               Block:    86939.3 i/s - 1.06x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   923.587k i/100ms
       block + yield   983.381k i/100ms
        unused block     1.182M i/100ms
               yield     1.170M i/100ms
Calculating -------------------------------------
          block.call      9.168M (± 4.2%) i/s -     46.179M in   5.048044s
       block + yield      9.810M (± 0.3%) i/s -     49.169M in   5.012234s
        unused block     11.937M (± 0.4%) i/s -     60.258M in   5.048159s
               yield     11.693M (± 0.3%) i/s -     58.498M in   5.003086s

Comparison:
        unused block: 11936808.5 i/s
               yield: 11692542.2 i/s - 1.02x  (± 0.00) slower
       block + yield:  9809913.8 i/s - 1.22x  (± 0.00) slower
          block.call:  9168331.1 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   312.827k i/100ms
      range#include?    12.973k i/100ms
       range#member?    12.941k i/100ms
       plain compare   525.182k i/100ms
Calculating -------------------------------------
        range#cover?      3.186M (± 0.7%) i/s -     15.954M in   5.008576s
      range#include?    131.557k (± 0.4%) i/s -    661.623k in   5.029256s
       range#member?    129.037k (± 4.7%) i/s -    647.050k in   5.027931s
       plain compare      5.283M (± 0.5%) i/s -     26.784M in   5.070059s

Comparison:
       plain compare:  5282967.2 i/s
        range#cover?:  3185538.4 i/s - 1.66x  (± 0.00) slower
      range#include?:   131556.8 i/s - 40.16x  (± 0.00) slower
       range#member?:   129036.5 i/s - 40.94x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   947.080k i/100ms
           String#=~   653.225k i/100ms
          Regexp#===   601.024k i/100ms
        String#match   479.229k i/100ms
Calculating -------------------------------------
       String#match?      9.411M (± 0.2%) i/s -     47.354M in   5.031857s
           String#=~      6.513M (± 3.6%) i/s -     33.314M in   5.123848s
          Regexp#===      6.040M (± 1.5%) i/s -     30.652M in   5.075785s
        String#match      4.812M (± 0.7%) i/s -     24.441M in   5.078972s

Comparison:
       String#match?:  9410864.9 i/s
           String#=~:  6512546.8 i/s - 1.45x  (± 0.00) slower
          Regexp#===:  6040444.5 i/s - 1.56x  (± 0.00) slower
        String#match:  4812396.2 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   639.237k i/100ms
      String#casecmp   795.624k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.380M (± 0.4%) i/s -     31.962M in   5.010102s
      String#casecmp      7.919M (± 0.8%) i/s -     39.781M in   5.024031s

Comparison:
      String#casecmp:  7918667.3 i/s
String#downcase + ==:  6379607.9 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   567.586k i/100ms
       String#concat   601.536k i/100ms
       String#append   648.490k i/100ms
         "foo" "bar"     1.122M i/100ms
  "#{'foo'}#{'bar'}"     1.127M i/100ms
Calculating -------------------------------------
            String#+      5.715M (± 0.5%) i/s -     28.947M in   5.064790s
       String#concat      5.906M (± 5.4%) i/s -     29.475M in   5.008715s
       String#append      6.454M (± 0.6%) i/s -     32.424M in   5.024417s
         "foo" "bar"     11.266M (± 0.5%) i/s -     57.210M in   5.078308s
  "#{'foo'}#{'bar'}"     11.267M (± 0.2%) i/s -     56.342M in   5.000753s

Comparison:
  "#{'foo'}#{'bar'}": 11266732.8 i/s
         "foo" "bar": 11265761.2 i/s - same-ish: difference falls within error
       String#append:  6453649.2 i/s - 1.75x  (± 0.00) slower
       String#concat:  5906460.1 i/s - 1.91x  (± 0.00) slower
            String#+:  5715458.6 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@   981.772k i/100ms
          String#dup   551.466k i/100ms
Calculating -------------------------------------
           String#+@      9.890M (± 0.9%) i/s -     50.070M in   5.062940s
          String#dup      5.539M (± 0.6%) i/s -     28.125M in   5.077915s

Comparison:
           String#+@:  9890472.9 i/s
          String#dup:  5538855.2 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   170.945k i/100ms
       String#match?   367.569k i/100ms
    String#end_with?   485.029k i/100ms
Calculating -------------------------------------
           String#=~      1.721M (± 0.6%) i/s -      8.718M in   5.067040s
       String#match?      3.675M (± 0.5%) i/s -     18.378M in   5.000698s
    String#end_with?      4.843M (± 0.3%) i/s -     24.251M in   5.007218s

Comparison:
    String#end_with?:  4843346.0 i/s
       String#match?:  3675283.6 i/s - 1.32x  (± 0.00) slower
           String#=~:  1720627.7 i/s - 2.81x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   107.075k i/100ms
          String#sub   132.023k i/100ms
String#dup["string"]=
                       171.889k i/100ms
Calculating -------------------------------------
         String#gsub      1.074M (± 0.4%) i/s -      5.461M in   5.086219s
          String#sub      1.350M (± 0.6%) i/s -      6.865M in   5.087209s
String#dup["string"]=
                          1.764M (± 0.5%) i/s -      8.938M in   5.068247s

Comparison:
String#dup["string"]=:  1763621.2 i/s
          String#sub:  1349550.3 i/s - 1.31x  (± 0.00) slower
         String#gsub:  1073665.1 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   100.423k i/100ms
           String#tr   358.347k i/100ms
Calculating -------------------------------------
         String#gsub      1.007M (± 0.6%) i/s -      5.122M in   5.083733s
           String#tr      3.572M (± 0.2%) i/s -     17.917M in   5.015660s

Comparison:
           String#tr:  3572300.3 i/s
         String#gsub:  1007477.5 i/s - 3.55x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.141M i/100ms
         With Freeze     1.675M i/100ms
Calculating -------------------------------------
      Without Freeze     11.411M (± 0.4%) i/s -     57.074M in   5.001868s
         With Freeze     16.669M (± 0.4%) i/s -     83.735M in   5.023545s

Comparison:
         With Freeze: 16668684.7 i/s
      Without Freeze: 11410758.7 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.341k i/100ms
      String#squeeze   153.685k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     33.696k (± 0.4%) i/s -    170.391k in   5.056719s
      String#squeeze      1.595M (± 1.0%) i/s -      7.992M in   5.009827s

Comparison:
      String#squeeze:  1595368.4 i/s
 String#gsub/regex+/:    33696.5 i/s - 47.35x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   273.416k i/100ms
       String#match?   801.943k i/100ms
  String#start_with?   873.649k i/100ms
Calculating -------------------------------------
           String#=~      2.752M (± 0.4%) i/s -     13.944M in   5.066150s
       String#match?      8.016M (± 0.4%) i/s -     40.097M in   5.001908s
  String#start_with?      8.703M (± 1.5%) i/s -     43.682M in   5.020606s

Comparison:
  String#start_with?:  8702715.4 i/s
       String#match?:  8016488.1 i/s - 1.09x  (± 0.00) slower
           String#=~:  2752469.8 i/s - 3.16x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   203.375k i/100ms
    String#[0, n] ==    83.799k i/100ms
   String#[RANGE] ==    76.078k i/100ms
   String#[0...n] ==    46.698k i/100ms
Calculating -------------------------------------
  String#start_with?      2.051M (± 1.0%) i/s -     10.372M in   5.058087s
    String#[0, n] ==    844.423k (± 1.2%) i/s -      4.274M in   5.061829s
   String#[RANGE] ==    754.028k (± 0.5%) i/s -      3.804M in   5.044902s
   String#[0...n] ==    461.057k (± 1.8%) i/s -      2.335M in   5.065943s

Comparison:
  String#start_with?:  2050819.0 i/s
    String#[0, n] ==:   844422.7 i/s - 2.43x  (± 0.00) slower
   String#[RANGE] ==:   754028.4 i/s - 2.72x  (± 0.00) slower
   String#[0...n] ==:   461056.9 i/s - 4.45x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   175.515k i/100ms
 String#sub!'string'   124.637k i/100ms
String#gsub!'string'    76.244k i/100ms
  String#[/regexp/]=   142.279k i/100ms
 String#sub!/regexp/   107.057k i/100ms
String#gsub!/regexp/    57.789k i/100ms
Calculating -------------------------------------
  String#['string']=      1.751M (± 4.1%) i/s -      8.776M in   5.022443s
 String#sub!'string'      1.243M (± 0.3%) i/s -      6.232M in   5.013590s
String#gsub!'string'    762.642k (± 0.3%) i/s -      3.888M in   5.098702s
  String#[/regexp/]=      1.423M (± 2.0%) i/s -      7.114M in   4.999956s
 String#sub!/regexp/      1.071M (± 1.1%) i/s -      5.353M in   5.000638s
String#gsub!/regexp/    578.777k (± 0.4%) i/s -      2.947M in   5.092262s

Comparison:
  String#['string']=:  1751202.5 i/s
  String#[/regexp/]=:  1423460.1 i/s - 1.23x  (± 0.00) slower
 String#sub!'string':  1243002.1 i/s - 1.41x  (± 0.00) slower
 String#sub!/regexp/:  1070556.7 i/s - 1.64x  (± 0.00) slower
String#gsub!'string':   762641.6 i/s - 2.30x  (± 0.00) slower
String#gsub!/regexp/:   578777.4 i/s - 3.03x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   143.040k i/100ms
        String#chomp   545.578k i/100ms
String#delete_suffix   594.789k i/100ms
Calculating -------------------------------------
          String#sub      1.420M (± 0.8%) i/s -      7.152M in   5.036856s
        String#chomp      5.487M (± 0.9%) i/s -     27.824M in   5.071677s
String#delete_suffix      6.032M (± 0.4%) i/s -     30.334M in   5.029151s

Comparison:
String#delete_suffix:  6031786.4 i/s
        String#chomp:  5486700.5 i/s - 1.10x  (± 0.00) slower
          String#sub:  1420029.9 i/s - 4.25x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   616.258k i/100ms
          String#sub   146.733k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.296M (± 0.4%) i/s -     32.045M in   5.089488s
          String#sub      1.480M (± 0.2%) i/s -      7.483M in   5.057249s

Comparison:
String#delete_prefix:  6296489.6 i/s
          String#sub:  1479741.1 i/s - 4.26x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   611.770k i/100ms
    String#unpack[0]   445.261k i/100ms
Calculating -------------------------------------
      String#unpack1      6.107M (± 0.6%) i/s -     30.588M in   5.009069s
    String#unpack[0]      4.494M (± 0.5%) i/s -     22.708M in   5.052599s

Comparison:
      String#unpack1:  6106813.3 i/s
    String#unpack[0]:  4494478.9 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    28.431k i/100ms
          Time.parse     9.794k i/100ms
Calculating -------------------------------------
        Time.iso8601    284.105k (± 0.4%) i/s -      1.422M in   5.003686s
          Time.parse     96.997k (± 0.7%) i/s -    489.700k in   5.048849s

Comparison:
        Time.iso8601:   284104.6 i/s
          Time.parse:    96997.2 i/s - 2.93x  (± 0.00) slower

