$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       555.293k i/100ms
Function with splat arguments
                        12.488k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          5.457M (± 4.6%) i/s -     27.765M in   5.098827s
Function with splat arguments
                        146.045k (±13.2%) i/s -    724.304k in   5.073530s

Comparison:
Function with single Array argument:  5457273.3 i/s
Function with splat arguments:   146044.6 i/s - 37.37x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   858.920k i/100ms
Sequential Assignment
                       949.813k i/100ms
Calculating -------------------------------------
 Parallel Assignment      9.196M (± 6.2%) i/s -     46.382M in   5.064204s
Sequential Assignment
                          8.527M (± 6.9%) i/s -     42.742M in   5.036187s

Comparison:
 Parallel Assignment:  9195524.8 i/s
Sequential Assignment:  8526621.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   313.303k i/100ms
       attr_accessor   345.233k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.333M (± 6.7%) i/s -     16.605M in   5.005960s
       attr_accessor      3.413M (± 4.3%) i/s -     17.262M in   5.066709s

Comparison:
       attr_accessor:  3413138.4 i/s
   getter_and_setter:  3333352.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    63.285k i/100ms
         respond_to?   506.212k i/100ms
Calculating -------------------------------------
      begin...rescue    681.883k (± 5.0%) i/s -      3.417M in   5.024849s
         respond_to?      5.358M (± 5.4%) i/s -     26.829M in   5.021939s

Comparison:
         respond_to?:  5358337.2 i/s
      begin...rescue:   681883.5 i/s - 7.86x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   225.892k i/100ms
             &method    78.312k i/100ms
Calculating -------------------------------------
              normal      2.126M (± 5.9%) i/s -     10.617M in   5.012500s
             &method    726.309k (± 4.4%) i/s -      3.681M in   5.077794s

Comparison:
              normal:  2125731.4 i/s
             &method:   726309.5 i/s - 2.93x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       156.000  i/100ms
       define_method   198.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.552k (±20.0%) i/s -      6.864k in   5.015520s
       define_method      2.240k (±21.3%) i/s -     10.098k in   5.080964s

Comparison:
       define_method:     2239.9 i/s
module_eval with string:     1552.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   133.697k i/100ms
       Kernel#format   133.830k i/100ms
            String#%   123.356k i/100ms
Calculating -------------------------------------
         Float#round      1.329M (± 5.5%) i/s -      6.685M in   5.047355s
       Kernel#format      1.376M (± 5.4%) i/s -      6.959M in   5.073663s
            String#%      1.261M (± 4.9%) i/s -      6.291M in   5.001629s

Comparison:
       Kernel#format:  1375753.9 i/s
         Float#round:  1328654.4 i/s - same-ish: difference falls within error
            String#%:  1260929.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   589.083k i/100ms
          OpenStruct   329.731k i/100ms
Calculating -------------------------------------
                Hash      6.022M (± 4.7%) i/s -     30.632M in   5.098491s
          OpenStruct      3.318M (± 3.8%) i/s -     16.816M in   5.075987s

Comparison:
                Hash:  6022094.6 i/s
          OpenStruct:  3317753.8 i/s - 1.82x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   778.982k i/100ms
          OpenStruct     6.834k i/100ms
Calculating -------------------------------------
                Hash      8.561M (± 4.6%) i/s -     42.844M in   5.015516s
          OpenStruct     70.548k (± 7.0%) i/s -    355.368k in   5.062486s

Comparison:
                Hash:  8560800.7 i/s
          OpenStruct:    70547.6 i/s - 121.35x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   470.575k i/100ms
  ancestors.include?    82.470k i/100ms
Calculating -------------------------------------
  less than or equal      4.644M (± 3.8%) i/s -     23.529M in   5.073649s
  ancestors.include?    826.743k (± 4.1%) i/s -      4.206M in   5.095882s

Comparison:
  less than or equal:  4644124.7 i/s
  ancestors.include?:   826742.7 i/s - 5.62x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.574  (± 0.0%) i/s -      3.000  in   5.226764s
         Kernel loop      0.162  (± 0.0%) i/s -      1.000  in   6.162712s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 3.54x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.161M i/100ms
         Array#first     1.086M i/100ms
Calculating -------------------------------------
           Array#[0]     11.923M (± 5.1%) i/s -     60.396M in   5.079169s
         Array#first     10.957M (± 3.7%) i/s -     55.388M in   5.062392s

Comparison:
           Array#[0]: 11922722.5 i/s
         Array#first: 10956618.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.209M i/100ms
          Array#last     1.007M i/100ms
Calculating -------------------------------------
          Array#[-1]     11.778M (± 4.8%) i/s -     59.259M in   5.043416s
          Array#last     10.048M (± 3.7%) i/s -     50.327M in   5.015543s

Comparison:
          Array#[-1]: 11777800.5 i/s
          Array#last: 10048426.2 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    55.871k i/100ms
Calculating -------------------------------------
                find      0.175  (± 0.0%) i/s -      1.000  in   5.702026s
             bsearch    561.055k (± 3.8%) i/s -      2.849M in   5.086244s

Comparison:
             bsearch:   561055.0 i/s
                find:        0.2 i/s - 3199150.23x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    11.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    110.969  (± 6.3%) i/s -    561.000  in   5.075271s
        Array#insert      0.444  (± 0.0%) i/s -      3.000  in   6.758035s

Comparison:
       Array#unshift:      111.0 i/s
        Array#insert:        0.4 i/s - 249.93x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.718M i/100ms
          Array#size     1.721M i/100ms
         Array#count     1.250M i/100ms
Calculating -------------------------------------
        Array#length     17.039M (± 4.5%) i/s -     85.914M in   5.053188s
          Array#size     16.908M (± 5.2%) i/s -     84.339M in   5.002254s
         Array#count     12.479M (± 5.4%) i/s -     62.482M in   5.022657s

Comparison:
        Array#length: 17038761.4 i/s
          Array#size: 16907846.4 i/s - same-ish: difference falls within error
         Array#count: 12478823.7 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    30.083k i/100ms
        Array#sample   743.360k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    326.408k (± 4.5%) i/s -      1.655M in   5.079485s
        Array#sample      7.563M (± 5.1%) i/s -     37.911M in   5.026314s

Comparison:
        Array#sample:  7562771.5 i/s
 Array#shuffle.first:   326407.8 i/s - 23.17x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    44.164k i/100ms
          Date.parse    20.045k i/100ms
Calculating -------------------------------------
        Date.iso8601    442.703k (± 5.3%) i/s -      2.252M in   5.103185s
          Date.parse    215.784k (± 5.2%) i/s -      1.082M in   5.029905s

Comparison:
        Date.iso8601:   442703.3 i/s
          Date.parse:   215784.1 i/s - 2.05x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    11.335k i/100ms
           Array#map    17.174k i/100ms
Calculating -------------------------------------
   Array#each + push    122.014k (± 4.6%) i/s -    612.090k in   5.027694s
           Array#map    172.197k (± 4.9%) i/s -    875.874k in   5.099177s

Comparison:
           Array#map:   172196.8 i/s
   Array#each + push:   122014.2 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    19.477k i/100ms
               #each    18.527k i/100ms
Calculating -------------------------------------
            For loop    189.246k (± 3.3%) i/s -    954.373k in   5.048662s
               #each    187.861k (± 6.1%) i/s -    944.877k in   5.048142s

Comparison:
            For loop:   189246.0 i/s
               #each:   187861.1 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    26.450k i/100ms
     each_with_index    12.449k i/100ms
Calculating -------------------------------------
          While Loop    274.197k (± 3.4%) i/s -      1.375M in   5.022063s
     each_with_index    125.724k (± 3.6%) i/s -    634.899k in   5.056398s

Comparison:
          While Loop:   274196.8 i/s
     each_with_index:   125724.4 i/s - 2.18x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    69.691k i/100ms
      inject to_proc     1.437k i/100ms
        inject block     1.306k i/100ms
Calculating -------------------------------------
       inject symbol    694.484k (± 5.4%) i/s -      3.485M in   5.032417s
      inject to_proc     14.457k (± 3.9%) i/s -     73.287k in   5.076951s
        inject block     13.085k (± 4.0%) i/s -     66.606k in   5.098568s

Comparison:
       inject symbol:   694483.7 i/s
      inject to_proc:    14457.1 i/s - 48.04x  (± 0.00) slower
        inject block:    13085.2 i/s - 53.07x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     4.591k i/100ms
   Array#map.flatten     2.445k i/100ms
      Array#flat_map     5.900k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     48.628k (± 5.7%) i/s -    243.323k in   5.020646s
   Array#map.flatten     26.470k (± 4.9%) i/s -    134.475k in   5.092865s
      Array#flat_map     60.570k (± 5.9%) i/s -    306.800k in   5.083276s

Comparison:
      Array#flat_map:    60569.9 i/s
Array#map.flatten(1):    48627.8 i/s - 1.25x  (± 0.00) slower
   Array#map.flatten:    26470.2 i/s - 2.29x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    20.305k i/100ms
  Array#reverse_each    21.219k i/100ms
Calculating -------------------------------------
  Array#reverse.each    197.305k (± 7.2%) i/s -    994.945k in   5.069835s
  Array#reverse_each    205.699k (± 5.0%) i/s -      1.040M in   5.067523s

Comparison:
  Array#reverse_each:   205699.3 i/s
  Array#reverse.each:   197305.0 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        12.808k i/100ms
   Enumerable#detect    50.781k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        125.378k (± 7.0%) i/s -      2.498M in  20.022508s
   Enumerable#detect    495.274k (± 8.4%) i/s -      9.852M in  20.031167s

Comparison:
   Enumerable#detect:   495273.9 i/s
Enumerable#select.first:   125377.6 i/s - 3.95x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       150.931k i/100ms
Enumerable#select.last
                        10.955k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.637M (± 4.2%) i/s -      8.301M in   5.079128s
Enumerable#select.last
                        104.570k (± 7.3%) i/s -    525.840k in   5.056627s

Comparison:
Enumerable#reverse.detect:  1637306.9 i/s
Enumerable#select.last:   104569.9 i/s - 15.66x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.028k i/100ms
  Enumerable#sort_by     3.068k i/100ms
     Enumerable#sort     1.621k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         32.414k (± 4.5%) i/s -    163.512k in   5.054794s
  Enumerable#sort_by     30.709k (± 5.3%) i/s -    156.468k in   5.110063s
     Enumerable#sort     15.230k (± 5.2%) i/s -     76.187k in   5.016237s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    32413.5 i/s
  Enumerable#sort_by:    30708.9 i/s - same-ish: difference falls within error
     Enumerable#sort:    15229.9 i/s - 2.13x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    10.801k i/100ms
Enumerable#sort_by...first
                         4.991k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    104.742k (± 5.0%) i/s -    529.249k in   5.066780s
Enumerable#sort_by...first
                         53.085k (± 7.4%) i/s -    264.523k in   5.010096s

Comparison:
   Enumerable#min_by:   104742.2 i/s
Enumerable#sort_by...first:    53085.2 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   207.383k i/100ms
            Hash#dup   145.364k i/100ms
Calculating -------------------------------------
              Hash[]      1.885M (± 4.0%) i/s -      9.540M in   5.068208s
            Hash#dup      1.686M (± 4.5%) i/s -      8.431M in   5.011581s

Comparison:
              Hash[]:  1885353.0 i/s
            Hash#dup:  1685799.7 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.122M i/100ms
  Hash#fetch, symbol   837.745k i/100ms
     Hash#[], string   898.037k i/100ms
  Hash#fetch, string   508.627k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     11.608M (± 6.1%) i/s -     58.330M in   5.046734s
  Hash#fetch, symbol      9.317M (± 5.1%) i/s -     46.914M in   5.049312s
     Hash#[], string      9.533M (± 4.3%) i/s -     47.596M in   5.002121s
  Hash#fetch, string      5.213M (± 4.5%) i/s -     26.449M in   5.084218s

Comparison:
     Hash#[], symbol: 11608120.2 i/s
     Hash#[], string:  9533368.7 i/s - 1.22x  (± 0.00) slower
  Hash#fetch, symbol:  9316869.3 i/s - 1.25x  (± 0.00) slower
  Hash#fetch, string:  5212945.7 i/s - 2.23x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   643.738k i/100ms
             Hash#[]   724.603k i/100ms
          Hash#[] ||   654.671k i/100ms
          Hash#[] &&   275.013k i/100ms
          Hash#fetch   416.891k i/100ms
 Hash#fetch fallback   231.980k i/100ms
Calculating -------------------------------------
            Hash#dig      6.565M (± 6.8%) i/s -     32.831M in   5.025192s
             Hash#[]      7.506M (± 5.0%) i/s -     37.679M in   5.032880s
          Hash#[] ||      7.066M (± 5.6%) i/s -     35.352M in   5.019056s
          Hash#[] &&      2.876M (± 6.2%) i/s -     14.576M in   5.087810s
          Hash#fetch      4.437M (± 4.3%) i/s -     22.512M in   5.083686s
 Hash#fetch fallback      2.440M (± 6.1%) i/s -     12.295M in   5.058295s

Comparison:
             Hash#[]:  7506226.3 i/s
          Hash#[] ||:  7066472.2 i/s - same-ish: difference falls within error
            Hash#dig:  6564830.2 i/s - 1.14x  (± 0.00) slower
          Hash#fetch:  4437262.6 i/s - 1.69x  (± 0.00) slower
          Hash#[] &&:  2876115.4 i/s - 2.61x  (± 0.00) slower
 Hash#fetch fallback:  2440200.3 i/s - 3.08x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.066M i/100ms
  Hash#fetch + block     1.053M i/100ms
    Hash#fetch + arg   766.195k i/100ms
Calculating -------------------------------------
  Hash#fetch + const      9.899M (± 5.5%) i/s -     50.112M in   5.078338s
  Hash#fetch + block     10.043M (± 6.3%) i/s -     50.557M in   5.054527s
    Hash#fetch + arg      7.144M (± 4.6%) i/s -     36.011M in   5.051463s

Comparison:
  Hash#fetch + block: 10042524.3 i/s
  Hash#fetch + const:  9898661.8 i/s - same-ish: difference falls within error
    Hash#fetch + arg:  7144216.9 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    15.989k i/100ms
         sort + to_h     7.843k i/100ms
Calculating -------------------------------------
      sort_by + to_h    166.366k (± 4.0%) i/s -    831.428k in   5.005843s
         sort + to_h     74.058k (± 3.7%) i/s -    376.464k in   5.090395s

Comparison:
      sort_by + to_h:   166365.6 i/s
         sort + to_h:    74057.7 i/s - 2.25x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   109.732k i/100ms
       Hash#each_key   123.564k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.124M (± 6.8%) i/s -      5.706M in   5.101344s
       Hash#each_key      1.204M (± 6.3%) i/s -      6.055M in   5.051302s

Comparison:
       Hash#each_key:  1203615.6 i/s
      Hash#keys.each:  1123868.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   838.000  i/100ms
           Hash#key?   699.996k i/100ms
Calculating -------------------------------------
  Hash#keys.include?      8.597k (± 7.6%) i/s -     42.738k in   5.004413s
           Hash#key?      7.090M (± 5.3%) i/s -     35.700M in   5.049021s

Comparison:
           Hash#key?:  7090447.5 i/s
  Hash#keys.include?:     8597.1 i/s - 824.75x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     2.445k i/100ms
            Hash#[]=     5.851k i/100ms
Calculating -------------------------------------
         Hash#merge!     25.918k (± 5.1%) i/s -    129.585k in   5.013864s
            Hash#[]=     55.632k (±10.1%) i/s -    280.848k in   5.103178s

Comparison:
            Hash#[]=:    55632.2 i/s
         Hash#merge!:    25917.6 i/s - 2.15x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.070k i/100ms
      Hash#merge({})     2.492k i/100ms
 Hash#dup#merge!({})     1.822k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         30.616k (± 5.9%) i/s -    153.500k in   5.030818s
      Hash#merge({})     24.150k (± 6.1%) i/s -    122.108k in   5.075816s
 Hash#dup#merge!({})     17.391k (± 5.9%) i/s -     87.456k in   5.047096s

Comparison:
{}#merge!(Hash) do end:    30615.7 i/s
      Hash#merge({}):    24149.5 i/s - 1.27x  (± 0.00) slower
 Hash#dup#merge!({}):    17391.3 i/s - 1.76x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   231.078k i/100ms
          Hash#merge   226.649k i/100ms
Calculating -------------------------------------
        Hash#**other      2.415M (± 5.9%) i/s -     12.247M in   5.089733s
          Hash#merge      2.089M (± 7.2%) i/s -     10.426M in   5.017947s

Comparison:
        Hash#**other:  2414637.5 i/s
          Hash#merge:  2088535.7 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   793.000  i/100ms
         Hash#merge!     2.260k i/100ms
Calculating -------------------------------------
          Hash#merge      7.940k (± 5.3%) i/s -     39.650k in   5.007064s
         Hash#merge!     22.628k (± 4.8%) i/s -    113.000k in   5.006163s

Comparison:
         Hash#merge!:    22627.5 i/s
          Hash#merge:     7940.5 i/s - 2.85x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      241.985k i/100ms
Array#each             132.935k i/100ms
Array#each_w/_object    96.802k i/100ms
Hash#select-include     39.496k i/100ms
Calculating -------------------------------------
Hash#native-slice         2.598M (± 3.1%) i/s -     13.067M in   5.033624s
Array#each                1.372M (± 4.7%) i/s -      6.913M in   5.048621s
Array#each_w/_object    988.499k (± 4.9%) i/s -      5.034M in   5.104812s
Hash#select-include     425.881k (± 4.7%) i/s -      2.133M in   5.019160s

Comparison:
Hash#native-slice   :  2598497.4 i/s
Array#each          :  1372394.3 i/s - 1.89x  (± 0.00) slower
Array#each_w/_object:   988498.6 i/s - 2.63x  (± 0.00) slower
Hash#select-include :   425881.0 i/s - 6.10x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   522.000  i/100ms
         Hash#value?   490.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      5.095k (± 4.8%) i/s -     25.578k in   5.032471s
         Hash#value?      4.851k (± 5.8%) i/s -     24.500k in   5.067714s

Comparison:
Hash#values.include?:     5095.2 i/s
         Hash#value?:     4851.4 i/s - same-ish: difference falls within error

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   411.339k i/100ms
                send   329.494k i/100ms
      method_missing   229.483k i/100ms
Calculating -------------------------------------
                call      4.101M (± 4.0%) i/s -     20.567M in   5.024088s
                send      3.243M (± 4.8%) i/s -     16.475M in   5.092831s
      method_missing      2.361M (± 4.9%) i/s -     11.933M in   5.067232s

Comparison:
                call:  4100815.6 i/s
                send:  3242771.3 i/s - 1.26x  (± 0.00) slower
      method_missing:  2360855.4 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     4.927k i/100ms
      Symbol#to_proc     5.164k i/100ms
Calculating -------------------------------------
               Block     48.853k (± 4.4%) i/s -    246.350k in   5.052861s
      Symbol#to_proc     54.539k (± 4.1%) i/s -    273.692k in   5.027215s

Comparison:
      Symbol#to_proc:    54539.2 i/s
               Block:    48852.8 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   675.958k i/100ms
       block + yield   729.127k i/100ms
        unused block   812.278k i/100ms
               yield   921.567k i/100ms
Calculating -------------------------------------
          block.call      6.474M (± 4.0%) i/s -     32.446M in   5.019804s
       block + yield      6.943M (± 3.3%) i/s -     34.998M in   5.046247s
        unused block      8.194M (± 4.0%) i/s -     41.426M in   5.064192s
               yield      9.053M (± 3.9%) i/s -     46.078M in   5.098008s

Comparison:
               yield:  9052719.0 i/s
        unused block:  8193678.0 i/s - 1.10x  (± 0.00) slower
       block + yield:  6942966.6 i/s - 1.30x  (± 0.00) slower
          block.call:  6473964.2 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   191.754k i/100ms
      range#include?     7.154k i/100ms
       range#member?     7.708k i/100ms
       plain compare   304.996k i/100ms
Calculating -------------------------------------
        range#cover?      2.190M (± 4.8%) i/s -     10.930M in   5.001783s
      range#include?     89.787k (± 5.6%) i/s -    450.702k in   5.036120s
       range#member?     89.087k (± 5.0%) i/s -    447.064k in   5.031124s
       plain compare      3.086M (± 6.4%) i/s -     15.555M in   5.062419s

Comparison:
       plain compare:  3085764.9 i/s
        range#cover?:  2190303.8 i/s - 1.41x  (± 0.00) slower
      range#include?:    89787.3 i/s - 34.37x  (± 0.00) slower
       range#member?:    89086.9 i/s - 34.64x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   642.388k i/100ms
           String#=~   383.234k i/100ms
          Regexp#===   317.672k i/100ms
        String#match   293.577k i/100ms
Calculating -------------------------------------
       String#match?      6.016M (± 4.0%) i/s -     30.192M in   5.026786s
           String#=~      3.585M (± 5.1%) i/s -     18.012M in   5.037461s
          Regexp#===      3.368M (± 5.2%) i/s -     16.837M in   5.012663s
        String#match      2.755M (± 6.0%) i/s -     13.798M in   5.028243s

Comparison:
       String#match?:  6016302.6 i/s
           String#=~:  3585420.5 i/s - 1.68x  (± 0.00) slower
          Regexp#===:  3368172.9 i/s - 1.79x  (± 0.00) slower
        String#match:  2754598.3 i/s - 2.18x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   393.769k i/100ms
      String#casecmp   521.155k i/100ms
Calculating -------------------------------------
String#downcase + ==      4.038M (± 5.0%) i/s -     20.476M in   5.084422s
      String#casecmp      5.412M (± 5.4%) i/s -     27.100M in   5.022440s

Comparison:
      String#casecmp:  5411529.9 i/s
String#downcase + ==:  4037640.9 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   359.086k i/100ms
       String#concat   408.845k i/100ms
       String#append   435.414k i/100ms
         "foo" "bar"   877.344k i/100ms
  "#{'foo'}#{'bar'}"   873.907k i/100ms
Calculating -------------------------------------
            String#+      3.909M (± 5.6%) i/s -     19.750M in   5.068739s
       String#concat      4.145M (± 7.3%) i/s -     20.851M in   5.057149s
       String#append      4.568M (± 5.8%) i/s -     23.077M in   5.069388s
         "foo" "bar"      8.822M (± 5.2%) i/s -     44.745M in   5.085889s
  "#{'foo'}#{'bar'}"      8.933M (± 5.7%) i/s -     44.569M in   5.005815s

Comparison:
  "#{'foo'}#{'bar'}":  8933031.3 i/s
         "foo" "bar":  8822097.8 i/s - same-ish: difference falls within error
       String#append:  4568055.9 i/s - 1.96x  (± 0.00) slower
       String#concat:  4145082.3 i/s - 2.16x  (± 0.00) slower
            String#+:  3908547.5 i/s - 2.29x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@   726.629k i/100ms
          String#dup   364.476k i/100ms
Calculating -------------------------------------
           String#+@      7.150M (± 4.8%) i/s -     36.331M in   5.093230s
          String#dup      3.561M (± 6.5%) i/s -     17.859M in   5.036244s

Comparison:
           String#+@:  7150111.6 i/s
          String#dup:  3561415.7 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   123.230k i/100ms
       String#match?   261.309k i/100ms
    String#end_with?   420.666k i/100ms
Calculating -------------------------------------
           String#=~      1.345M (± 4.2%) i/s -      6.778M in   5.046580s
       String#match?      2.822M (± 5.2%) i/s -     14.111M in   5.013621s
    String#end_with?      4.269M (± 3.2%) i/s -     21.454M in   5.030919s

Comparison:
    String#end_with?:  4268954.6 i/s
       String#match?:  2822252.8 i/s - 1.51x  (± 0.00) slower
           String#=~:  1345465.6 i/s - 3.17x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    75.249k i/100ms
          String#sub    87.621k i/100ms
String#dup["string"]=
                       108.963k i/100ms
Calculating -------------------------------------
         String#gsub    723.780k (± 6.2%) i/s -      3.612M in   5.010559s
          String#sub    918.658k (± 7.3%) i/s -      4.644M in   5.083367s
String#dup["string"]=
                          1.262M (± 4.8%) i/s -      6.320M in   5.021224s

Comparison:
String#dup["string"]=:  1261634.7 i/s
          String#sub:   918657.6 i/s - 1.37x  (± 0.00) slower
         String#gsub:   723780.1 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    62.583k i/100ms
           String#tr   250.509k i/100ms
Calculating -------------------------------------
         String#gsub    623.921k (± 3.8%) i/s -      3.129M in   5.022632s
           String#tr      2.404M (± 4.1%) i/s -     12.024M in   5.010050s

Comparison:
           String#tr:  2404029.3 i/s
         String#gsub:   623920.5 i/s - 3.85x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   836.078k i/100ms
         With Freeze     1.207M i/100ms
Calculating -------------------------------------
      Without Freeze      7.959M (± 4.7%) i/s -     40.132M in   5.054054s
         With Freeze     12.326M (± 4.2%) i/s -     61.554M in   5.003184s

Comparison:
         With Freeze: 12325859.7 i/s
      Without Freeze:  7958544.2 i/s - 1.55x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.090k i/100ms
      String#squeeze   110.607k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     22.389k (± 5.8%) i/s -    112.860k in   5.058696s
      String#squeeze      1.140M (± 5.7%) i/s -      5.752M in   5.062446s

Comparison:
      String#squeeze:  1139879.4 i/s
 String#gsub/regex+/:    22389.4 i/s - 50.91x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   187.159k i/100ms
       String#match?   472.504k i/100ms
  String#start_with?   611.726k i/100ms
Calculating -------------------------------------
           String#=~      1.735M (± 7.6%) i/s -      8.796M in   5.101859s
       String#match?      4.741M (± 5.9%) i/s -     23.625M in   5.002102s
  String#start_with?      5.543M (± 5.8%) i/s -     28.139M in   5.094945s

Comparison:
  String#start_with?:  5542663.8 i/s
       String#match?:  4740689.7 i/s - 1.17x  (± 0.00) slower
           String#=~:  1734841.5 i/s - 3.19x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   137.586k i/100ms
    String#[0, n] ==    47.937k i/100ms
   String#[RANGE] ==    42.227k i/100ms
   String#[0...n] ==    28.357k i/100ms
Calculating -------------------------------------
  String#start_with?      1.564M (± 5.2%) i/s -      7.842M in   5.029104s
    String#[0, n] ==    518.200k (± 4.8%) i/s -      2.589M in   5.007672s
   String#[RANGE] ==    469.955k (± 5.9%) i/s -      2.365M in   5.050080s
   String#[0...n] ==    300.801k (± 5.8%) i/s -      1.503M in   5.014399s

Comparison:
  String#start_with?:  1563669.6 i/s
    String#[0, n] ==:   518199.6 i/s - 3.02x  (± 0.00) slower
   String#[RANGE] ==:   469955.2 i/s - 3.33x  (± 0.00) slower
   String#[0...n] ==:   300801.3 i/s - 5.20x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   123.269k i/100ms
 String#sub!'string'    81.912k i/100ms
String#gsub!'string'    49.074k i/100ms
  String#[/regexp/]=   111.656k i/100ms
 String#sub!/regexp/    82.756k i/100ms
String#gsub!/regexp/    40.895k i/100ms
Calculating -------------------------------------
  String#['string']=      1.132M (± 3.6%) i/s -      5.670M in   5.013868s
 String#sub!'string'    765.195k (± 4.6%) i/s -      3.850M in   5.042216s
String#gsub!'string'    481.235k (± 4.8%) i/s -      2.405M in   5.008841s
  String#[/regexp/]=      1.042M (± 5.2%) i/s -      5.248M in   5.047455s
 String#sub!/regexp/    820.035k (± 5.8%) i/s -      4.138M in   5.063900s
String#gsub!/regexp/    399.196k (± 6.8%) i/s -      2.004M in   5.045432s

Comparison:
  String#['string']=:  1132456.7 i/s
  String#[/regexp/]=:  1042431.5 i/s - same-ish: difference falls within error
 String#sub!/regexp/:   820034.6 i/s - 1.38x  (± 0.00) slower
 String#sub!'string':   765195.0 i/s - 1.48x  (± 0.00) slower
String#gsub!'string':   481235.3 i/s - 2.35x  (± 0.00) slower
String#gsub!/regexp/:   399196.3 i/s - 2.84x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   109.335k i/100ms
        String#chomp   368.365k i/100ms
String#delete_suffix   389.938k i/100ms
Calculating -------------------------------------
          String#sub      1.079M (± 3.5%) i/s -      5.467M in   5.071464s
        String#chomp      3.436M (± 5.3%) i/s -     17.313M in   5.052697s
String#delete_suffix      3.682M (± 6.8%) i/s -     18.327M in   5.001278s

Comparison:
String#delete_suffix:  3681849.1 i/s
        String#chomp:  3436245.9 i/s - same-ish: difference falls within error
          String#sub:  1079233.9 i/s - 3.41x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   378.290k i/100ms
          String#sub    97.433k i/100ms
Calculating -------------------------------------
String#delete_prefix      3.693M (± 5.5%) i/s -     18.536M in   5.033586s
          String#sub      1.019M (± 4.5%) i/s -      5.164M in   5.076462s

Comparison:
String#delete_prefix:  3693356.2 i/s
          String#sub:  1019341.6 i/s - 3.62x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   363.472k i/100ms
    String#unpack[0]   289.078k i/100ms
Calculating -------------------------------------
      String#unpack1      3.985M (± 5.7%) i/s -     19.991M in   5.034173s
    String#unpack[0]      2.998M (± 7.4%) i/s -     15.032M in   5.042799s

Comparison:
      String#unpack1:  3984533.8 i/s
    String#unpack[0]:  2998461.2 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    18.348k i/100ms
          Time.parse     5.631k i/100ms
Calculating -------------------------------------
        Time.iso8601    181.689k (± 8.3%) i/s -    917.400k in   5.088195s
          Time.parse     60.611k (± 9.7%) i/s -    304.074k in   5.067780s

Comparison:
        Time.iso8601:   181689.5 i/s
          Time.parse:    60610.8 i/s - 3.00x  (± 0.00) slower

