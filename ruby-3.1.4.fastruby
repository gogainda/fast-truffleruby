$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       762.795k i/100ms
Function with splat arguments
                        28.619k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.584M (± 2.9%) i/s -     38.140M in   5.034446s
Function with splat arguments
                        285.394k (± 5.1%) i/s -      1.431M in   5.033644s

Comparison:
Function with single Array argument:  7583823.7 i/s
Function with splat arguments:   285394.3 i/s - 26.57x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.007M i/100ms
Sequential Assignment
                         1.009M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.022M (± 0.9%) i/s -     50.358M in   5.025016s
Sequential Assignment
                         10.088M (± 0.2%) i/s -     50.459M in   5.001918s

Comparison:
Sequential Assignment: 10087911.9 i/s
 Parallel Assignment: 10022394.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   477.320k i/100ms
       attr_accessor   559.228k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.790M (± 0.2%) i/s -     24.343M in   5.082019s
       attr_accessor      5.590M (± 0.3%) i/s -     27.961M in   5.001651s

Comparison:
       attr_accessor:  5590471.3 i/s
   getter_and_setter:  4790110.8 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    89.069k i/100ms
         respond_to?   766.004k i/100ms
Calculating -------------------------------------
      begin...rescue    892.949k (± 0.5%) i/s -      4.543M in   5.087218s
         respond_to?      7.672M (± 0.3%) i/s -     39.066M in   5.092398s

Comparison:
         respond_to?:  7671539.5 i/s
      begin...rescue:   892948.6 i/s - 8.59x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   293.496k i/100ms
             &method   122.509k i/100ms
Calculating -------------------------------------
              normal      2.960M (± 0.3%) i/s -     14.968M in   5.057453s
             &method      1.215M (± 0.3%) i/s -      6.125M in   5.040859s

Comparison:
              normal:  2959682.4 i/s
             &method:  1215174.2 i/s - 2.44x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       263.000  i/100ms
       define_method   294.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.331k (±21.5%) i/s -     10.257k in   5.015267s
       define_method      3.180k (±18.1%) i/s -     14.700k in   5.082121s

Comparison:
       define_method:     3180.0 i/s
module_eval with string:     2331.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   260.288k i/100ms
       Kernel#format   208.184k i/100ms
            String#%   177.188k i/100ms
Calculating -------------------------------------
         Float#round      2.622M (± 0.5%) i/s -     13.275M in   5.062348s
       Kernel#format      2.045M (± 0.3%) i/s -     10.409M in   5.089154s
            String#%      1.764M (± 0.4%) i/s -      8.859M in   5.022781s

Comparison:
         Float#round:  2622298.4 i/s
       Kernel#format:  2045383.0 i/s - 1.28x  (± 0.00) slower
            String#%:  1763872.4 i/s - 1.49x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   897.992k i/100ms
          OpenStruct   495.694k i/100ms
Calculating -------------------------------------
                Hash      8.983M (± 1.0%) i/s -     45.798M in   5.098730s
          OpenStruct      5.004M (± 0.2%) i/s -     25.280M in   5.051898s

Comparison:
                Hash:  8983014.7 i/s
          OpenStruct:  5004151.6 i/s - 1.80x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.000M i/100ms
          OpenStruct    11.558k i/100ms
Calculating -------------------------------------
                Hash     10.522M (± 0.4%) i/s -     53.015M in   5.038517s
          OpenStruct    116.550k (± 2.3%) i/s -    589.458k in   5.060175s

Comparison:
                Hash: 10522004.2 i/s
          OpenStruct:   116550.5 i/s - 90.28x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   585.703k i/100ms
  ancestors.include?   122.615k i/100ms
Calculating -------------------------------------
  less than or equal      5.980M (± 0.3%) i/s -     30.457M in   5.093496s
  ancestors.include?      1.219M (± 0.4%) i/s -      6.131M in   5.028751s

Comparison:
  less than or equal:  5979554.0 i/s
  ancestors.include?:  1219155.9 i/s - 4.90x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.720  (± 0.0%) i/s -      4.000  in   5.686594s
         Kernel loop      0.214  (± 0.0%) i/s -      2.000  in   9.331633s

Comparison:
          While Loop:        0.7 i/s
         Kernel loop:        0.2 i/s - 3.36x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.534M i/100ms
         Array#first     1.320M i/100ms
Calculating -------------------------------------
           Array#[0]     15.265M (± 1.9%) i/s -     76.690M in   5.026052s
         Array#first     13.228M (± 0.4%) i/s -     67.324M in   5.089745s

Comparison:
           Array#[0]: 15264820.2 i/s
         Array#first: 13227631.9 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.508M i/100ms
          Array#last     1.279M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.101M (± 0.2%) i/s -     76.923M in   5.093867s
          Array#last     12.985M (± 0.2%) i/s -     65.232M in   5.023605s

Comparison:
          Array#[-1]: 15101150.4 i/s
          Array#last: 12985177.7 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    96.312k i/100ms
Calculating -------------------------------------
                find      0.276  (± 0.0%) i/s -      2.000  in   7.254482s
             bsearch    962.922k (± 1.2%) i/s -      4.816M in   5.001814s

Comparison:
             bsearch:   962921.9 i/s
                find:        0.3 i/s - 3492749.61x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    18.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    191.406  (± 2.1%) i/s -    972.000  in   5.080920s
        Array#insert      1.446  (± 0.0%) i/s -      8.000  in   5.531684s

Comparison:
       Array#unshift:      191.4 i/s
        Array#insert:        1.4 i/s - 132.35x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.127M i/100ms
          Array#size     2.111M i/100ms
         Array#count     1.616M i/100ms
Calculating -------------------------------------
        Array#length     21.243M (± 0.5%) i/s -    106.359M in   5.007003s
          Array#size     20.704M (± 0.7%) i/s -    105.542M in   5.097986s
         Array#count     16.336M (± 0.4%) i/s -     82.409M in   5.044639s

Comparison:
        Array#length: 21242689.0 i/s
          Array#size: 20703717.1 i/s - 1.03x  (± 0.00) slower
         Array#count: 16336280.1 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.464k i/100ms
        Array#sample     1.046M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    459.543k (± 0.3%) i/s -      2.319M in   5.045641s
        Array#sample     10.359M (± 0.4%) i/s -     52.318M in   5.050479s

Comparison:
        Array#sample: 10359100.9 i/s
 Array#shuffle.first:   459542.9 i/s - 22.54x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    63.835k i/100ms
          Date.parse    32.651k i/100ms
Calculating -------------------------------------
        Date.iso8601    642.364k (± 0.4%) i/s -      3.256M in   5.068202s
          Date.parse    325.690k (± 0.3%) i/s -      1.633M in   5.012622s

Comparison:
        Date.iso8601:   642364.3 i/s
          Date.parse:   325690.3 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.024k i/100ms
           Array#map    25.449k i/100ms
Calculating -------------------------------------
   Array#each + push    180.441k (± 0.3%) i/s -    919.224k in   5.094362s
           Array#map    253.679k (± 1.2%) i/s -      1.272M in   5.016763s

Comparison:
           Array#map:   253678.9 i/s
   Array#each + push:   180441.4 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    28.654k i/100ms
               #each    31.647k i/100ms
Calculating -------------------------------------
            For loop    287.941k (± 0.5%) i/s -      1.461M in   5.075326s
               #each    315.780k (± 0.4%) i/s -      1.582M in   5.011022s

Comparison:
               #each:   315779.8 i/s
            For loop:   287941.0 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.545k i/100ms
     each_with_index    18.003k i/100ms
Calculating -------------------------------------
          While Loop    275.956k (± 0.2%) i/s -      1.405M in   5.090678s
     each_with_index    181.406k (± 0.9%) i/s -    918.153k in   5.061743s

Comparison:
          While Loop:   275955.8 i/s
     each_with_index:   181406.5 i/s - 1.52x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol   123.873k i/100ms
      inject to_proc     1.769k i/100ms
        inject block     1.929k i/100ms
Calculating -------------------------------------
       inject symbol      1.244M (± 1.3%) i/s -      6.318M in   5.078093s
      inject to_proc     17.650k (± 1.3%) i/s -     88.450k in   5.012290s
        inject block     19.234k (± 0.5%) i/s -     96.450k in   5.014583s

Comparison:
       inject symbol:  1244312.2 i/s
        inject block:    19234.4 i/s - 64.69x  (± 0.00) slower
      inject to_proc:    17650.0 i/s - 70.50x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     7.066k i/100ms
   Array#map.flatten     4.173k i/100ms
      Array#flat_map     8.955k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     73.159k (± 0.7%) i/s -    367.432k in   5.022620s
   Array#map.flatten     43.267k (± 0.4%) i/s -    216.996k in   5.015339s
      Array#flat_map     94.165k (± 0.6%) i/s -    474.615k in   5.040434s

Comparison:
      Array#flat_map:    94165.3 i/s
Array#map.flatten(1):    73159.5 i/s - 1.29x  (± 0.00) slower
   Array#map.flatten:    43267.0 i/s - 2.18x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    30.673k i/100ms
  Array#reverse_each    31.561k i/100ms
Calculating -------------------------------------
  Array#reverse.each    305.889k (± 0.4%) i/s -      1.534M in   5.013813s
  Array#reverse_each    314.753k (± 0.9%) i/s -      1.578M in   5.014064s

Comparison:
  Array#reverse_each:   314752.7 i/s
  Array#reverse.each:   305888.8 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.275k i/100ms
   Enumerable#detect    82.924k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        203.473k (± 0.4%) i/s -      4.075M in  20.028800s
   Enumerable#detect    829.629k (± 0.6%) i/s -     16.668M in  20.091227s

Comparison:
   Enumerable#detect:   829629.4 i/s
Enumerable#select.first:   203473.4 i/s - 4.08x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       247.263k i/100ms
Enumerable#select.last
                        18.114k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.441M (± 0.6%) i/s -     12.363M in   5.063959s
Enumerable#select.last
                        180.887k (± 0.3%) i/s -    905.700k in   5.007026s

Comparison:
Enumerable#reverse.detect:  2441497.4 i/s
Enumerable#select.last:   180887.2 i/s - 13.50x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         5.175k i/100ms
  Enumerable#sort_by     4.929k i/100ms
     Enumerable#sort     2.345k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         51.928k (± 0.8%) i/s -    263.925k in   5.082812s
  Enumerable#sort_by     49.925k (± 1.4%) i/s -    251.379k in   5.036121s
     Enumerable#sort     23.517k (± 0.4%) i/s -    119.595k in   5.085443s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    51928.5 i/s
  Enumerable#sort_by:    49924.6 i/s - 1.04x  (± 0.00) slower
     Enumerable#sort:    23517.5 i/s - 2.21x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.465k i/100ms
Enumerable#sort_by...first
                         8.810k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    174.442k (± 0.3%) i/s -    873.250k in   5.006018s
Enumerable#sort_by...first
                         86.962k (± 0.5%) i/s -    440.500k in   5.065564s

Comparison:
   Enumerable#min_by:   174442.2 i/s
Enumerable#sort_by...first:    86962.3 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   424.607k i/100ms
            Hash#dup   283.536k i/100ms
Calculating -------------------------------------
              Hash[]      3.847M (± 0.8%) i/s -     19.532M in   5.077316s
            Hash#dup      2.815M (± 0.4%) i/s -     14.177M in   5.036043s

Comparison:
              Hash[]:  3847114.1 i/s
            Hash#dup:  2815104.1 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.429M i/100ms
  Hash#fetch, symbol     1.162M i/100ms
     Hash#[], string     1.235M i/100ms
  Hash#fetch, string   777.452k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.221M (± 0.4%) i/s -     71.426M in   5.022664s
  Hash#fetch, symbol     11.602M (± 0.2%) i/s -     58.082M in   5.006125s
     Hash#[], string     12.337M (± 0.3%) i/s -     61.771M in   5.007108s
  Hash#fetch, string      7.707M (± 0.4%) i/s -     38.873M in   5.044182s

Comparison:
     Hash#[], symbol: 14221023.9 i/s
     Hash#[], string: 12336726.7 i/s - 1.15x  (± 0.00) slower
  Hash#fetch, symbol: 11602247.6 i/s - 1.23x  (± 0.00) slower
  Hash#fetch, string:  7706527.5 i/s - 1.85x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   885.212k i/100ms
             Hash#[]     1.012M i/100ms
          Hash#[] ||   860.803k i/100ms
          Hash#[] &&   398.067k i/100ms
          Hash#fetch   615.719k i/100ms
 Hash#fetch fallback   391.943k i/100ms
Calculating -------------------------------------
            Hash#dig      8.943M (± 0.5%) i/s -     45.146M in   5.048294s
             Hash#[]     10.299M (± 0.7%) i/s -     51.596M in   5.010314s
          Hash#[] ||      9.400M (± 1.6%) i/s -     47.344M in   5.037700s
          Hash#[] &&      4.089M (± 0.1%) i/s -     20.699M in   5.062057s
          Hash#fetch      6.123M (± 1.1%) i/s -     30.786M in   5.028744s
 Hash#fetch fallback      3.869M (± 0.5%) i/s -     19.597M in   5.065856s

Comparison:
             Hash#[]: 10298607.2 i/s
          Hash#[] ||:  9400353.5 i/s - 1.10x  (± 0.00) slower
            Hash#dig:  8942967.9 i/s - 1.15x  (± 0.00) slower
          Hash#fetch:  6122714.2 i/s - 1.68x  (± 0.00) slower
          Hash#[] &&:  4089149.0 i/s - 2.52x  (± 0.00) slower
 Hash#fetch fallback:  3868590.6 i/s - 2.66x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.460M i/100ms
  Hash#fetch + block     1.464M i/100ms
    Hash#fetch + arg     1.091M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.484M (± 0.5%) i/s -     73.013M in   5.041066s
  Hash#fetch + block     14.560M (± 0.3%) i/s -     73.223M in   5.028960s
    Hash#fetch + arg     10.905M (± 0.4%) i/s -     54.539M in   5.001412s

Comparison:
  Hash#fetch + block: 14560447.6 i/s
  Hash#fetch + const: 14484095.2 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 10904864.4 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.721k i/100ms
         sort + to_h    11.605k i/100ms
Calculating -------------------------------------
      sort_by + to_h    277.997k (± 0.5%) i/s -      1.414M in   5.085670s
         sort + to_h    118.639k (± 0.8%) i/s -    603.460k in   5.086826s

Comparison:
      sort_by + to_h:   277997.3 i/s
         sort + to_h:   118638.9 i/s - 2.34x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   194.698k i/100ms
       Hash#each_key   196.176k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.933M (± 0.2%) i/s -      9.735M in   5.036073s
       Hash#each_key      1.938M (± 0.1%) i/s -      9.809M in   5.060401s

Comparison:
       Hash#each_key:  1938348.3 i/s
      Hash#keys.each:  1933042.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     2.430k i/100ms
           Hash#key?   926.664k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     23.912k (± 4.7%) i/s -    121.500k in   5.096030s
           Hash#key?      9.105M (± 0.7%) i/s -     46.333M in   5.088809s

Comparison:
           Hash#key?:  9105372.3 i/s
  Hash#keys.include?:    23911.7 i/s - 380.79x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.182k i/100ms
            Hash#[]=    10.466k i/100ms
Calculating -------------------------------------
         Hash#merge!     41.639k (± 0.3%) i/s -    209.100k in   5.021786s
            Hash#[]=    103.811k (± 0.7%) i/s -    523.300k in   5.041147s

Comparison:
            Hash#[]=:   103810.8 i/s
         Hash#merge!:    41638.9 i/s - 2.49x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         5.228k i/100ms
      Hash#merge({})     4.160k i/100ms
 Hash#dup#merge!({})     2.721k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         51.244k (± 0.3%) i/s -    261.400k in   5.101145s
      Hash#merge({})     41.177k (± 1.2%) i/s -    208.000k in   5.052123s
 Hash#dup#merge!({})     26.888k (± 0.7%) i/s -    136.050k in   5.060135s

Comparison:
{}#merge!(Hash) do end:    51243.8 i/s
      Hash#merge({}):    41176.8 i/s - 1.24x  (± 0.00) slower
 Hash#dup#merge!({}):    26887.8 i/s - 1.91x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   397.797k i/100ms
          Hash#merge   361.335k i/100ms
Calculating -------------------------------------
        Hash#**other      3.947M (± 0.5%) i/s -     19.890M in   5.038833s
          Hash#merge      3.611M (± 0.3%) i/s -     18.067M in   5.003136s

Comparison:
        Hash#**other:  3947402.8 i/s
          Hash#merge:  3611111.7 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.727k i/100ms
         Hash#merge!     4.094k i/100ms
Calculating -------------------------------------
          Hash#merge     17.164k (± 0.8%) i/s -     86.350k in   5.031165s
         Hash#merge!     40.693k (± 0.4%) i/s -    204.700k in   5.030393s

Comparison:
         Hash#merge!:    40693.2 i/s
          Hash#merge:    17164.2 i/s - 2.37x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      427.588k i/100ms
Array#each             233.223k i/100ms
Array#each_w/_object   177.428k i/100ms
Hash#select-include     79.959k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.314M (± 0.6%) i/s -     21.807M in   5.055299s
Array#each                2.328M (± 0.4%) i/s -     11.661M in   5.010139s
Array#each_w/_object      1.734M (± 0.4%) i/s -      8.694M in   5.014623s
Hash#select-include     797.449k (± 0.3%) i/s -      3.998M in   5.013458s

Comparison:
Hash#native-slice   :  4313841.4 i/s
Array#each          :  2327547.3 i/s - 1.85x  (± 0.00) slower
Array#each_w/_object:  1733753.0 i/s - 2.49x  (± 0.00) slower
Hash#select-include :   797449.1 i/s - 5.41x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     5.105k i/100ms
         Hash#value?     6.073k i/100ms
Calculating -------------------------------------
Hash#values.include?     50.928k (± 5.5%) i/s -    255.250k in   5.036107s
         Hash#value?     60.771k (± 0.1%) i/s -    309.723k in   5.096565s

Comparison:
         Hash#value?:    60771.0 i/s
Hash#values.include?:    50927.9 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   671.667k i/100ms
                send   502.254k i/100ms
      method_missing   386.844k i/100ms
Calculating -------------------------------------
                call      6.729M (± 0.3%) i/s -     34.255M in   5.090700s
                send      5.039M (± 0.5%) i/s -     25.615M in   5.083128s
      method_missing      3.850M (± 0.5%) i/s -     19.342M in   5.023550s

Comparison:
                call:  6729018.2 i/s
                send:  5039313.3 i/s - 1.34x  (± 0.00) slower
      method_missing:  3850384.8 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     8.704k i/100ms
      Symbol#to_proc     9.281k i/100ms
Calculating -------------------------------------
               Block     87.123k (± 1.1%) i/s -    443.904k in   5.095787s
      Symbol#to_proc     93.278k (± 0.2%) i/s -    473.331k in   5.074409s

Comparison:
      Symbol#to_proc:    93278.3 i/s
               Block:    87123.5 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   937.124k i/100ms
       block + yield   981.573k i/100ms
        unused block     1.304M i/100ms
               yield     1.168M i/100ms
Calculating -------------------------------------
          block.call      9.360M (± 0.2%) i/s -     46.856M in   5.006135s
       block + yield      9.828M (± 0.3%) i/s -     50.060M in   5.093799s
        unused block     13.026M (± 1.1%) i/s -     65.212M in   5.007001s
               yield     11.727M (± 0.2%) i/s -     59.588M in   5.081441s

Comparison:
        unused block: 13025692.2 i/s
               yield: 11726598.9 i/s - 1.11x  (± 0.00) slower
       block + yield:  9827761.1 i/s - 1.33x  (± 0.00) slower
          block.call:  9359809.3 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   317.628k i/100ms
      range#include?    12.904k i/100ms
       range#member?    13.005k i/100ms
       plain compare   530.485k i/100ms
Calculating -------------------------------------
        range#cover?      3.179M (± 0.5%) i/s -     16.199M in   5.095089s
      range#include?    129.841k (± 0.3%) i/s -    658.104k in   5.068588s
       range#member?    131.008k (± 1.5%) i/s -    663.255k in   5.063854s
       plain compare      5.300M (± 0.4%) i/s -     26.524M in   5.004478s

Comparison:
       plain compare:  5300169.5 i/s
        range#cover?:  3179434.9 i/s - 1.67x  (± 0.00) slower
       range#member?:   131008.3 i/s - 40.46x  (± 0.00) slower
      range#include?:   129840.6 i/s - 40.82x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   936.826k i/100ms
           String#=~   641.359k i/100ms
          Regexp#===   597.874k i/100ms
        String#match   486.686k i/100ms
Calculating -------------------------------------
       String#match?      9.317M (± 0.3%) i/s -     46.841M in   5.027539s
           String#=~      6.477M (± 0.6%) i/s -     32.709M in   5.050569s
          Regexp#===      5.955M (± 0.7%) i/s -     29.894M in   5.019846s
        String#match      4.851M (± 0.4%) i/s -     24.334M in   5.015970s

Comparison:
       String#match?:  9317052.3 i/s
           String#=~:  6476614.7 i/s - 1.44x  (± 0.00) slower
          Regexp#===:  5955370.4 i/s - 1.56x  (± 0.00) slower
        String#match:  4851428.7 i/s - 1.92x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   646.793k i/100ms
      String#casecmp   794.868k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.469M (± 0.4%) i/s -     32.986M in   5.099303s
      String#casecmp      7.926M (± 1.2%) i/s -     39.743M in   5.015042s

Comparison:
      String#casecmp:  7925983.4 i/s
String#downcase + ==:  6468917.5 i/s - 1.23x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   585.183k i/100ms
       String#concat   606.298k i/100ms
       String#append   646.939k i/100ms
         "foo" "bar"     1.134M i/100ms
  "#{'foo'}#{'bar'}"     1.157M i/100ms
Calculating -------------------------------------
            String#+      5.802M (± 0.5%) i/s -     29.259M in   5.042703s
       String#concat      6.008M (± 0.4%) i/s -     30.315M in   5.046226s
       String#append      6.498M (± 0.6%) i/s -     32.994M in   5.077882s
         "foo" "bar"     11.356M (± 0.4%) i/s -     57.846M in   5.094184s
  "#{'foo'}#{'bar'}"     11.547M (± 0.3%) i/s -     57.841M in   5.009338s

Comparison:
  "#{'foo'}#{'bar'}": 11546791.6 i/s
         "foo" "bar": 11355527.1 i/s - 1.02x  (± 0.00) slower
       String#append:  6497809.8 i/s - 1.78x  (± 0.00) slower
       String#concat:  6007533.7 i/s - 1.92x  (± 0.00) slower
            String#+:  5802444.9 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@     1.001M i/100ms
          String#dup   575.927k i/100ms
Calculating -------------------------------------
           String#+@     10.015M (± 0.3%) i/s -     51.033M in   5.095704s
          String#dup      5.693M (± 0.9%) i/s -     28.796M in   5.058857s

Comparison:
           String#+@: 10014980.5 i/s
          String#dup:  5692749.5 i/s - 1.76x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   187.673k i/100ms
       String#match?   436.508k i/100ms
    String#end_with?   599.903k i/100ms
Calculating -------------------------------------
           String#=~      1.874M (± 0.5%) i/s -      9.384M in   5.008312s
       String#match?      4.371M (± 0.6%) i/s -     22.262M in   5.093593s
    String#end_with?      6.023M (± 0.4%) i/s -     30.595M in   5.079788s

Comparison:
    String#end_with?:  6022993.8 i/s
       String#match?:  4370711.6 i/s - 1.38x  (± 0.00) slower
           String#=~:  1873658.6 i/s - 3.21x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   108.444k i/100ms
          String#sub   137.033k i/100ms
String#dup["string"]=
                       178.338k i/100ms
Calculating -------------------------------------
         String#gsub      1.090M (± 0.3%) i/s -      5.531M in   5.075408s
          String#sub      1.323M (± 0.7%) i/s -      6.715M in   5.074787s
String#dup["string"]=
                          1.723M (± 0.2%) i/s -      8.739M in   5.073200s

Comparison:
String#dup["string"]=:  1722503.2 i/s
          String#sub:  1323201.9 i/s - 1.30x  (± 0.00) slower
         String#gsub:  1089704.5 i/s - 1.58x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   101.447k i/100ms
           String#tr   360.699k i/100ms
Calculating -------------------------------------
         String#gsub      1.011M (± 1.0%) i/s -      5.072M in   5.018506s
           String#tr      3.583M (± 0.4%) i/s -     18.035M in   5.033177s

Comparison:
           String#tr:  3583276.7 i/s
         String#gsub:  1010846.0 i/s - 3.54x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.128M i/100ms
         With Freeze     1.660M i/100ms
Calculating -------------------------------------
      Without Freeze     11.338M (± 0.3%) i/s -     57.507M in   5.072109s
         With Freeze     16.540M (± 0.4%) i/s -     82.993M in   5.017620s

Comparison:
         With Freeze: 16540493.9 i/s
      Without Freeze: 11338011.9 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.330k i/100ms
      String#squeeze   153.998k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     33.641k (± 0.5%) i/s -    169.830k in   5.048464s
      String#squeeze      1.553M (± 1.3%) i/s -      7.854M in   5.057538s

Comparison:
      String#squeeze:  1553148.9 i/s
 String#gsub/regex+/:    33640.7 i/s - 46.17x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   258.402k i/100ms
       String#match?   633.120k i/100ms
  String#start_with?   884.017k i/100ms
Calculating -------------------------------------
           String#=~      2.609M (± 0.6%) i/s -     13.179M in   5.051245s
       String#match?      6.368M (± 1.2%) i/s -     32.289M in   5.071644s
  String#start_with?      8.835M (± 0.4%) i/s -     44.201M in   5.003228s

Comparison:
  String#start_with?:  8834635.4 i/s
       String#match?:  6367619.6 i/s - 1.39x  (± 0.00) slower
           String#=~:  2609048.9 i/s - 3.39x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   199.616k i/100ms
    String#[0, n] ==    83.799k i/100ms
   String#[RANGE] ==    76.046k i/100ms
   String#[0...n] ==    47.448k i/100ms
Calculating -------------------------------------
  String#start_with?      2.055M (± 0.6%) i/s -     10.380M in   5.051832s
    String#[0, n] ==    848.022k (± 1.2%) i/s -      4.274M in   5.040389s
   String#[RANGE] ==    755.880k (± 1.5%) i/s -      3.802M in   5.031576s
   String#[0...n] ==    472.394k (± 1.0%) i/s -      2.372M in   5.022578s

Comparison:
  String#start_with?:  2054788.1 i/s
    String#[0, n] ==:   848022.1 i/s - 2.42x  (± 0.00) slower
   String#[RANGE] ==:   755879.9 i/s - 2.72x  (± 0.00) slower
   String#[0...n] ==:   472393.7 i/s - 4.35x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   174.200k i/100ms
 String#sub!'string'   126.352k i/100ms
String#gsub!'string'    78.152k i/100ms
  String#[/regexp/]=   154.108k i/100ms
 String#sub!/regexp/   115.773k i/100ms
String#gsub!/regexp/    59.898k i/100ms
Calculating -------------------------------------
  String#['string']=      1.774M (± 0.6%) i/s -      8.884M in   5.007443s
 String#sub!'string'      1.265M (± 0.4%) i/s -      6.444M in   5.093903s
String#gsub!'string'    773.588k (± 0.6%) i/s -      3.908M in   5.051426s
  String#[/regexp/]=      1.507M (± 0.5%) i/s -      7.551M in   5.010682s
 String#sub!/regexp/      1.141M (± 0.6%) i/s -      5.789M in   5.073295s
String#gsub!/regexp/    602.991k (± 0.7%) i/s -      3.055M in   5.066303s

Comparison:
  String#['string']=:  1774268.1 i/s
  String#[/regexp/]=:  1507079.8 i/s - 1.18x  (± 0.00) slower
 String#sub!'string':  1265050.3 i/s - 1.40x  (± 0.00) slower
 String#sub!/regexp/:  1141040.0 i/s - 1.55x  (± 0.00) slower
String#gsub!'string':   773588.2 i/s - 2.29x  (± 0.00) slower
String#gsub!/regexp/:   602991.0 i/s - 2.94x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   144.165k i/100ms
        String#chomp   550.200k i/100ms
String#delete_suffix   599.660k i/100ms
Calculating -------------------------------------
          String#sub      1.434M (± 0.4%) i/s -      7.208M in   5.027226s
        String#chomp      5.546M (± 0.3%) i/s -     28.060M in   5.059971s
String#delete_suffix      6.042M (± 1.3%) i/s -     30.583M in   5.062447s

Comparison:
String#delete_suffix:  6042181.8 i/s
        String#chomp:  5545584.9 i/s - 1.09x  (± 0.00) slower
          String#sub:  1433869.4 i/s - 4.21x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   625.125k i/100ms
          String#sub   136.877k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.278M (± 0.8%) i/s -     31.881M in   5.078715s
          String#sub      1.376M (± 0.4%) i/s -      6.981M in   5.074367s

Comparison:
String#delete_prefix:  6277818.4 i/s
          String#sub:  1375705.1 i/s - 4.56x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   604.625k i/100ms
    String#unpack[0]   444.762k i/100ms
Calculating -------------------------------------
      String#unpack1      6.058M (± 0.4%) i/s -     30.836M in   5.090155s
    String#unpack[0]      4.417M (± 0.6%) i/s -     22.238M in   5.035413s

Comparison:
      String#unpack1:  6058042.5 i/s
    String#unpack[0]:  4416525.6 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    26.658k i/100ms
          Time.parse     8.930k i/100ms
Calculating -------------------------------------
        Time.iso8601    268.799k (± 0.3%) i/s -      1.360M in   5.057927s
          Time.parse     89.540k (± 0.5%) i/s -    455.430k in   5.086467s

Comparison:
        Time.iso8601:   268799.5 i/s
          Time.parse:    89540.2 i/s - 3.00x  (± 0.00) slower

