$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       460.900k i/100ms
Function with splat arguments
                         9.992k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          4.788M (± 3.5%) i/s -     23.967M in   5.012541s
Function with splat arguments
                         98.174k (±15.8%) i/s -    479.616k in   5.029920s

Comparison:
Function with single Array argument:  4787505.1 i/s
Function with splat arguments:    98174.0 i/s - 48.77x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   831.795k i/100ms
Sequential Assignment
                       746.415k i/100ms
Calculating -------------------------------------
 Parallel Assignment      8.119M (± 5.5%) i/s -     40.758M in   5.036828s
Sequential Assignment
                          7.346M (± 3.3%) i/s -     37.321M in   5.085777s

Comparison:
 Parallel Assignment:  8118803.7 i/s
Sequential Assignment:  7346457.1 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   287.057k i/100ms
       attr_accessor   318.718k i/100ms
Calculating -------------------------------------
   getter_and_setter      2.943M (± 2.1%) i/s -     14.927M in   5.074051s
       attr_accessor      3.172M (± 3.3%) i/s -     15.936M in   5.029271s

Comparison:
       attr_accessor:  3172184.1 i/s
   getter_and_setter:  2943142.5 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    59.035k i/100ms
         respond_to?   452.493k i/100ms
Calculating -------------------------------------
      begin...rescue    602.762k (± 3.5%) i/s -      3.070M in   5.099271s
         respond_to?      4.468M (± 3.7%) i/s -     22.625M in   5.071560s

Comparison:
         respond_to?:  4467668.5 i/s
      begin...rescue:   602762.4 i/s - 7.41x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   188.626k i/100ms
             &method    71.052k i/100ms
Calculating -------------------------------------
              normal      1.906M (± 2.6%) i/s -      9.620M in   5.051554s
             &method    694.009k (± 3.0%) i/s -      3.482M in   5.021182s

Comparison:
              normal:  1905684.7 i/s
             &method:   694009.3 i/s - 2.75x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       143.000  i/100ms
       define_method   213.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.473k (±16.8%) i/s -      7.007k in   5.044535s
       define_method      2.016k (±17.7%) i/s -      9.372k in   5.041203s

Comparison:
       define_method:     2016.4 i/s
module_eval with string:     1473.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   110.736k i/100ms
       Kernel#format   124.289k i/100ms
            String#%   107.658k i/100ms
Calculating -------------------------------------
         Float#round      1.170M (± 3.6%) i/s -      5.869M in   5.022058s
       Kernel#format      1.249M (± 3.5%) i/s -      6.339M in   5.082640s
            String#%      1.080M (± 4.2%) i/s -      5.491M in   5.095205s

Comparison:
       Kernel#format:  1248700.6 i/s
         Float#round:  1170237.5 i/s - same-ish: difference falls within error
            String#%:  1079585.5 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   560.879k i/100ms
          OpenStruct   293.474k i/100ms
Calculating -------------------------------------
                Hash      5.695M (± 2.7%) i/s -     28.605M in   5.026708s
          OpenStruct      2.868M (± 4.0%) i/s -     14.380M in   5.022471s

Comparison:
                Hash:  5694648.3 i/s
          OpenStruct:  2867837.7 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   691.443k i/100ms
          OpenStruct     6.226k i/100ms
Calculating -------------------------------------
                Hash      7.776M (± 3.8%) i/s -     39.412M in   5.076379s
          OpenStruct     63.889k (± 5.5%) i/s -    323.752k in   5.083054s

Comparison:
                Hash:  7775701.3 i/s
          OpenStruct:    63889.2 i/s - 121.71x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   399.611k i/100ms
  ancestors.include?    74.780k i/100ms
Calculating -------------------------------------
  less than or equal      3.995M (± 2.3%) i/s -     19.981M in   5.004105s
  ancestors.include?    723.399k (± 3.2%) i/s -      3.664M in   5.070811s

Comparison:
  less than or equal:  3995028.0 i/s
  ancestors.include?:   723398.6 i/s - 5.52x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.502  (± 0.0%) i/s -      3.000  in   5.981690s
         Kernel loop      0.140  (± 0.0%) i/s -      1.000  in   7.120938s

Comparison:
          While Loop:        0.5 i/s
         Kernel loop:        0.1 i/s - 3.57x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.095M i/100ms
         Array#first   803.455k i/100ms
Calculating -------------------------------------
           Array#[0]     10.460M (± 3.4%) i/s -     52.557M in   5.030621s
         Array#first      8.383M (± 2.4%) i/s -     42.583M in   5.082700s

Comparison:
           Array#[0]: 10460367.4 i/s
         Array#first:  8382828.0 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.035M i/100ms
          Array#last   853.873k i/100ms
Calculating -------------------------------------
          Array#[-1]     10.297M (± 2.8%) i/s -     51.773M in   5.031761s
          Array#last      8.299M (± 2.1%) i/s -     41.840M in   5.043862s

Comparison:
          Array#[-1]: 10297248.2 i/s
          Array#last:  8298899.0 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    51.553k i/100ms
Calculating -------------------------------------
                find      0.148  (± 0.0%) i/s -      1.000  in   6.768308s
             bsearch    523.289k (± 3.8%) i/s -      2.629M in   5.031731s

Comparison:
             bsearch:   523288.7 i/s
                find:        0.1 i/s - 3541779.11x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    10.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    105.434  (± 4.7%) i/s -    530.000  in   5.036265s
        Array#insert      0.420  (± 0.0%) i/s -      3.000  in   7.136710s

Comparison:
       Array#unshift:      105.4 i/s
        Array#insert:        0.4 i/s - 250.81x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.447M i/100ms
          Array#size     1.463M i/100ms
         Array#count     1.084M i/100ms
Calculating -------------------------------------
        Array#length     14.849M (± 3.1%) i/s -     75.259M in   5.073415s
          Array#size     14.775M (± 3.4%) i/s -     74.633M in   5.057165s
         Array#count     10.746M (± 4.9%) i/s -     54.198M in   5.056580s

Comparison:
        Array#length: 14849286.9 i/s
          Array#size: 14775221.4 i/s - same-ish: difference falls within error
         Array#count: 10745691.9 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    28.185k i/100ms
        Array#sample   652.297k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    277.762k (± 3.6%) i/s -      1.409M in   5.080449s
        Array#sample      6.672M (± 2.8%) i/s -     33.919M in   5.087916s

Comparison:
        Array#sample:  6672041.5 i/s
 Array#shuffle.first:   277762.2 i/s - 24.02x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    37.525k i/100ms
          Date.parse    20.056k i/100ms
Calculating -------------------------------------
        Date.iso8601    391.975k (± 4.6%) i/s -      1.989M in   5.085582s
          Date.parse    203.226k (± 4.0%) i/s -      1.023M in   5.041623s

Comparison:
        Date.iso8601:   391974.9 i/s
          Date.parse:   203226.4 i/s - 1.93x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    10.465k i/100ms
           Array#map    14.959k i/100ms
Calculating -------------------------------------
   Array#each + push    105.261k (± 2.9%) i/s -    533.715k in   5.074671s
           Array#map    148.137k (± 6.3%) i/s -    747.950k in   5.071229s

Comparison:
           Array#map:   148137.0 i/s
   Array#each + push:   105260.7 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    16.778k i/100ms
               #each    17.955k i/100ms
Calculating -------------------------------------
            For loop    168.129k (± 2.4%) i/s -    855.678k in   5.092550s
               #each    176.766k (± 2.6%) i/s -    897.750k in   5.082152s

Comparison:
               #each:   176766.2 i/s
            For loop:   168129.0 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    24.252k i/100ms
     each_with_index    11.284k i/100ms
Calculating -------------------------------------
          While Loop    243.770k (± 3.9%) i/s -      1.237M in   5.082025s
     each_with_index    111.477k (± 3.0%) i/s -    564.200k in   5.065940s

Comparison:
          While Loop:   243769.8 i/s
     each_with_index:   111477.0 i/s - 2.19x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    62.379k i/100ms
      inject to_proc     1.328k i/100ms
        inject block     1.209k i/100ms
Calculating -------------------------------------
       inject symbol    628.768k (± 3.6%) i/s -      3.181M in   5.066272s
      inject to_proc     13.127k (± 3.4%) i/s -     66.400k in   5.064342s
        inject block     11.784k (± 3.8%) i/s -     59.241k in   5.035066s

Comparison:
       inject symbol:   628767.6 i/s
      inject to_proc:    13126.5 i/s - 47.90x  (± 0.00) slower
        inject block:    11783.7 i/s - 53.36x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     4.140k i/100ms
   Array#map.flatten     2.294k i/100ms
      Array#flat_map     5.277k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     43.804k (± 3.2%) i/s -    219.420k in   5.014566s
   Array#map.flatten     23.345k (± 3.6%) i/s -    116.994k in   5.018110s
      Array#flat_map     54.756k (± 2.7%) i/s -    274.404k in   5.015213s

Comparison:
      Array#flat_map:    54755.7 i/s
Array#map.flatten(1):    43803.6 i/s - 1.25x  (± 0.00) slower
   Array#map.flatten:    23345.2 i/s - 2.35x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    17.493k i/100ms
  Array#reverse_each    18.100k i/100ms
Calculating -------------------------------------
  Array#reverse.each    175.215k (± 3.0%) i/s -    892.143k in   5.096314s
  Array#reverse_each    183.258k (± 2.9%) i/s -    923.100k in   5.041420s

Comparison:
  Array#reverse_each:   183257.8 i/s
  Array#reverse.each:   175214.5 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        11.786k i/100ms
   Enumerable#detect    46.464k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        116.974k (± 2.9%) i/s -      2.345M in  20.068338s
   Enumerable#detect    454.245k (± 4.1%) i/s -      9.107M in  20.083197s

Comparison:
   Enumerable#detect:   454245.4 i/s
Enumerable#select.first:   116973.6 i/s - 3.88x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       138.531k i/100ms
Enumerable#select.last
                         9.745k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.417M (± 3.8%) i/s -      7.204M in   5.089458s
Enumerable#select.last
                         96.348k (± 3.1%) i/s -    487.250k in   5.062266s

Comparison:
Enumerable#reverse.detect:  1417491.4 i/s
Enumerable#select.last:    96348.2 i/s - 14.71x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.818k i/100ms
  Enumerable#sort_by     2.743k i/100ms
     Enumerable#sort     1.394k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         28.588k (± 4.1%) i/s -    143.718k in   5.036101s
  Enumerable#sort_by     26.935k (± 4.6%) i/s -    134.407k in   5.001059s
     Enumerable#sort     14.367k (± 3.0%) i/s -     72.488k in   5.049990s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    28587.6 i/s
  Enumerable#sort_by:    26935.0 i/s - same-ish: difference falls within error
     Enumerable#sort:    14367.3 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by     9.362k i/100ms
Enumerable#sort_by...first
                         4.804k i/100ms
Calculating -------------------------------------
   Enumerable#min_by     93.619k (± 3.3%) i/s -    468.100k in   5.005738s
Enumerable#sort_by...first
                         48.111k (± 3.9%) i/s -    240.200k in   5.000604s

Comparison:
   Enumerable#min_by:    93619.3 i/s
Enumerable#sort_by...first:    48111.2 i/s - 1.95x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   202.609k i/100ms
            Hash#dup   134.022k i/100ms
Calculating -------------------------------------
              Hash[]      1.694M (± 4.4%) i/s -      8.510M in   5.032905s
            Hash#dup      1.337M (± 5.1%) i/s -      6.701M in   5.026596s

Comparison:
              Hash[]:  1694118.3 i/s
            Hash#dup:  1336749.8 i/s - 1.27x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.027M i/100ms
  Hash#fetch, symbol   773.841k i/100ms
     Hash#[], string   855.258k i/100ms
  Hash#fetch, string   457.985k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     10.008M (± 3.4%) i/s -     50.339M in   5.035704s
  Hash#fetch, symbol      7.769M (± 3.6%) i/s -     39.466M in   5.086984s
     Hash#[], string      8.210M (± 4.3%) i/s -     41.052M in   5.010240s
  Hash#fetch, string      4.625M (± 4.2%) i/s -     23.357M in   5.059849s

Comparison:
     Hash#[], symbol: 10008437.4 i/s
     Hash#[], string:  8209924.2 i/s - 1.22x  (± 0.00) slower
  Hash#fetch, symbol:  7768990.7 i/s - 1.29x  (± 0.00) slower
  Hash#fetch, string:  4625017.7 i/s - 2.16x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   581.745k i/100ms
             Hash#[]   677.229k i/100ms
          Hash#[] ||   639.342k i/100ms
          Hash#[] &&   268.264k i/100ms
          Hash#fetch   398.456k i/100ms
 Hash#fetch fallback   226.804k i/100ms
Calculating -------------------------------------
            Hash#dig      5.933M (± 3.1%) i/s -     29.669M in   5.005294s
             Hash#[]      6.842M (± 3.7%) i/s -     34.539M in   5.055231s
          Hash#[] ||      6.387M (± 1.9%) i/s -     31.967M in   5.006696s
          Hash#[] &&      2.696M (± 3.1%) i/s -     13.681M in   5.079018s
          Hash#fetch      4.013M (± 2.6%) i/s -     20.321M in   5.067006s
 Hash#fetch fallback      2.234M (± 3.5%) i/s -     11.340M in   5.081562s

Comparison:
             Hash#[]:  6841860.5 i/s
          Hash#[] ||:  6387193.7 i/s - 1.07x  (± 0.00) slower
            Hash#dig:  5933308.5 i/s - 1.15x  (± 0.00) slower
          Hash#fetch:  4013239.3 i/s - 1.70x  (± 0.00) slower
          Hash#[] &&:  2696353.6 i/s - 2.54x  (± 0.00) slower
 Hash#fetch fallback:  2234468.3 i/s - 3.06x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   937.370k i/100ms
  Hash#fetch + block   928.962k i/100ms
    Hash#fetch + arg   672.343k i/100ms
Calculating -------------------------------------
  Hash#fetch + const      9.458M (± 4.1%) i/s -     47.806M in   5.063295s
  Hash#fetch + block      9.286M (± 1.9%) i/s -     46.448M in   5.004061s
    Hash#fetch + arg      6.535M (± 4.2%) i/s -     32.945M in   5.051311s

Comparison:
  Hash#fetch + const:  9458492.0 i/s
  Hash#fetch + block:  9285604.7 i/s - same-ish: difference falls within error
    Hash#fetch + arg:  6534501.0 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    15.269k i/100ms
         sort + to_h     6.769k i/100ms
Calculating -------------------------------------
      sort_by + to_h    153.425k (± 3.4%) i/s -    778.719k in   5.081572s
         sort + to_h     66.253k (± 4.7%) i/s -    331.681k in   5.018151s

Comparison:
      sort_by + to_h:   153425.0 i/s
         sort + to_h:    66252.7 i/s - 2.32x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   104.531k i/100ms
       Hash#each_key   111.118k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.061M (± 2.9%) i/s -      5.331M in   5.026516s
       Hash#each_key      1.088M (± 2.7%) i/s -      5.445M in   5.006768s

Comparison:
       Hash#each_key:  1088316.5 i/s
      Hash#keys.each:  1061494.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   755.000  i/100ms
           Hash#key?   671.836k i/100ms
Calculating -------------------------------------
  Hash#keys.include?      7.759k (± 5.2%) i/s -     39.260k in   5.075906s
           Hash#key?      6.515M (± 4.2%) i/s -     32.920M in   5.061701s

Comparison:
           Hash#key?:  6515280.0 i/s
  Hash#keys.include?:     7759.0 i/s - 839.71x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     2.330k i/100ms
            Hash#[]=     5.182k i/100ms
Calculating -------------------------------------
         Hash#merge!     23.451k (± 3.0%) i/s -    118.830k in   5.072030s
            Hash#[]=     52.455k (± 2.9%) i/s -    264.282k in   5.042800s

Comparison:
            Hash#[]=:    52455.2 i/s
         Hash#merge!:    23450.5 i/s - 2.24x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         2.857k i/100ms
      Hash#merge({})     2.336k i/100ms
 Hash#dup#merge!({})     1.711k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         28.453k (± 3.4%) i/s -    142.850k in   5.026820s
      Hash#merge({})     22.262k (± 4.1%) i/s -    112.128k in   5.045671s
 Hash#dup#merge!({})     16.738k (± 3.9%) i/s -     83.839k in   5.017169s

Comparison:
{}#merge!(Hash) do end:    28452.9 i/s
      Hash#merge({}):    22261.7 i/s - 1.28x  (± 0.00) slower
 Hash#dup#merge!({}):    16737.5 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   218.448k i/100ms
          Hash#merge   199.138k i/100ms
Calculating -------------------------------------
        Hash#**other      2.238M (± 2.5%) i/s -     11.359M in   5.077861s
          Hash#merge      1.999M (± 4.3%) i/s -     10.156M in   5.090373s

Comparison:
        Hash#**other:  2238432.8 i/s
          Hash#merge:  1998980.9 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   796.000  i/100ms
         Hash#merge!     2.294k i/100ms
Calculating -------------------------------------
          Hash#merge      8.100k (± 5.0%) i/s -     40.596k in   5.024773s
         Hash#merge!     22.725k (± 4.8%) i/s -    114.700k in   5.059684s

Comparison:
         Hash#merge!:    22725.3 i/s
          Hash#merge:     8099.7 i/s - 2.81x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      246.646k i/100ms
Array#each             128.720k i/100ms
Array#each_w/_object    90.264k i/100ms
Hash#select-include     38.934k i/100ms
Calculating -------------------------------------
Hash#native-slice         2.469M (± 2.9%) i/s -     12.579M in   5.098572s
Array#each                1.234M (± 4.1%) i/s -      6.179M in   5.015341s
Array#each_w/_object    945.019k (± 3.5%) i/s -      4.784M in   5.068841s
Hash#select-include     398.576k (± 4.7%) i/s -      2.025M in   5.091057s

Comparison:
Hash#native-slice   :  2469249.5 i/s
Array#each          :  1234076.3 i/s - 2.00x  (± 0.00) slower
Array#each_w/_object:   945019.2 i/s - 2.61x  (± 0.00) slower
Hash#select-include :   398576.0 i/s - 6.20x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   531.000  i/100ms
         Hash#value?   483.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      5.180k (± 6.5%) i/s -     26.019k in   5.049526s
         Hash#value?      4.953k (± 4.2%) i/s -     25.116k in   5.079434s

Comparison:
Hash#values.include?:     5179.6 i/s
         Hash#value?:     4953.4 i/s - same-ish: difference falls within error

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   419.542k i/100ms
                send   305.957k i/100ms
      method_missing   228.650k i/100ms
Calculating -------------------------------------
                call      4.114M (± 3.7%) i/s -     20.558M in   5.003583s
                send      3.019M (± 2.7%) i/s -     15.298M in   5.071185s
      method_missing      2.288M (± 3.6%) i/s -     11.432M in   5.003102s

Comparison:
                call:  4114332.5 i/s
                send:  3018934.9 i/s - 1.36x  (± 0.00) slower
      method_missing:  2288198.9 i/s - 1.80x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     4.570k i/100ms
      Symbol#to_proc     5.044k i/100ms
Calculating -------------------------------------
               Block     45.414k (± 3.4%) i/s -    228.500k in   5.037451s
      Symbol#to_proc     50.317k (± 3.8%) i/s -    252.200k in   5.019550s

Comparison:
      Symbol#to_proc:    50317.1 i/s
               Block:    45414.4 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   632.126k i/100ms
       block + yield   671.732k i/100ms
        unused block   848.425k i/100ms
               yield   884.770k i/100ms
Calculating -------------------------------------
          block.call      6.249M (± 2.6%) i/s -     31.606M in   5.061062s
       block + yield      6.766M (± 2.4%) i/s -     34.258M in   5.066414s
        unused block      8.474M (± 2.5%) i/s -     42.421M in   5.008941s
               yield      8.734M (± 2.8%) i/s -     44.238M in   5.069335s

Comparison:
               yield:  8733633.3 i/s
        unused block:  8474382.4 i/s - same-ish: difference falls within error
       block + yield:  6765807.4 i/s - 1.29x  (± 0.00) slower
          block.call:  6249198.8 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   169.708k i/100ms
      range#include?     7.148k i/100ms
       range#member?     7.015k i/100ms
       plain compare   278.152k i/100ms
Calculating -------------------------------------
        range#cover?      1.753M (± 3.0%) i/s -      8.825M in   5.038999s
      range#include?     70.970k (± 3.2%) i/s -    357.400k in   5.041275s
       range#member?     70.526k (± 4.0%) i/s -    357.765k in   5.081086s
       plain compare      2.790M (± 3.2%) i/s -     14.186M in   5.089214s

Comparison:
       plain compare:  2790421.9 i/s
        range#cover?:  1752958.0 i/s - 1.59x  (± 0.00) slower
      range#include?:    70970.4 i/s - 39.32x  (± 0.00) slower
       range#member?:    70526.0 i/s - 39.57x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   562.034k i/100ms
           String#=~   345.129k i/100ms
          Regexp#===   330.021k i/100ms
        String#match   274.125k i/100ms
Calculating -------------------------------------
       String#match?      5.486M (± 3.2%) i/s -     27.540M in   5.024866s
           String#=~      3.388M (± 4.4%) i/s -     17.256M in   5.104534s
          Regexp#===      3.305M (± 2.9%) i/s -     16.831M in   5.096625s
        String#match      2.733M (± 2.9%) i/s -     13.706M in   5.020074s

Comparison:
       String#match?:  5486365.7 i/s
           String#=~:  3387611.4 i/s - 1.62x  (± 0.00) slower
          Regexp#===:  3305233.2 i/s - 1.66x  (± 0.00) slower
        String#match:  2732519.0 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   373.249k i/100ms
      String#casecmp   500.382k i/100ms
Calculating -------------------------------------
String#downcase + ==      3.690M (± 3.3%) i/s -     18.662M in   5.062944s
      String#casecmp      4.921M (± 3.5%) i/s -     25.019M in   5.090478s

Comparison:
      String#casecmp:  4921042.7 i/s
String#downcase + ==:  3690334.5 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   347.292k i/100ms
       String#concat   356.105k i/100ms
       String#append   398.922k i/100ms
         "foo" "bar"   779.573k i/100ms
  "#{'foo'}#{'bar'}"   814.525k i/100ms
Calculating -------------------------------------
            String#+      3.482M (± 3.3%) i/s -     17.712M in   5.091825s
       String#concat      3.477M (± 6.8%) i/s -     17.449M in   5.044062s
       String#append      3.914M (± 4.9%) i/s -     19.547M in   5.007408s
         "foo" "bar"      7.870M (± 3.1%) i/s -     39.758M in   5.056626s
  "#{'foo'}#{'bar'}"      8.072M (± 3.3%) i/s -     40.726M in   5.050979s

Comparison:
  "#{'foo'}#{'bar'}":  8072395.6 i/s
         "foo" "bar":  7870305.2 i/s - same-ish: difference falls within error
       String#append:  3913937.9 i/s - 2.06x  (± 0.00) slower
            String#+:  3482468.9 i/s - 2.32x  (± 0.00) slower
       String#concat:  3477345.8 i/s - 2.32x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@   658.661k i/100ms
          String#dup   324.691k i/100ms
Calculating -------------------------------------
           String#+@      6.627M (± 4.4%) i/s -     33.592M in   5.079437s
          String#dup      3.248M (± 2.8%) i/s -     16.235M in   5.003074s

Comparison:
           String#+@:  6626876.1 i/s
          String#dup:  3247652.7 i/s - 2.04x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   112.548k i/100ms
       String#match?   253.859k i/100ms
    String#end_with?   368.917k i/100ms
Calculating -------------------------------------
           String#=~      1.154M (± 3.2%) i/s -      5.852M in   5.078109s
       String#match?      2.589M (± 2.5%) i/s -     13.201M in   5.101654s
    String#end_with?      3.699M (± 3.1%) i/s -     18.815M in   5.091260s

Comparison:
    String#end_with?:  3699198.4 i/s
       String#match?:  2589097.0 i/s - 1.43x  (± 0.00) slower
           String#=~:  1153719.0 i/s - 3.21x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    64.904k i/100ms
          String#sub    78.152k i/100ms
String#dup["string"]=
                       106.573k i/100ms
Calculating -------------------------------------
         String#gsub    643.615k (± 3.4%) i/s -      3.245M in   5.048076s
          String#sub    803.194k (± 3.1%) i/s -      4.064M in   5.064556s
String#dup["string"]=
                          1.096M (± 3.3%) i/s -      5.542M in   5.061220s

Comparison:
String#dup["string"]=:  1096210.1 i/s
          String#sub:   803193.6 i/s - 1.36x  (± 0.00) slower
         String#gsub:   643615.2 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    59.500k i/100ms
           String#tr   222.129k i/100ms
Calculating -------------------------------------
         String#gsub    586.807k (± 3.3%) i/s -      2.975M in   5.075425s
           String#tr      2.169M (± 2.5%) i/s -     10.884M in   5.020953s

Comparison:
           String#tr:  2169147.7 i/s
         String#gsub:   586807.1 i/s - 3.70x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   763.105k i/100ms
         With Freeze     1.176M i/100ms
Calculating -------------------------------------
      Without Freeze      7.506M (± 2.8%) i/s -     38.155M in   5.087739s
         With Freeze     11.696M (± 2.5%) i/s -     58.790M in   5.029887s

Comparison:
         With Freeze: 11695767.4 i/s
      Without Freeze:  7505739.4 i/s - 1.56x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     1.988k i/100ms
      String#squeeze   103.601k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     19.994k (± 3.4%) i/s -    101.388k in   5.077090s
      String#squeeze      1.057M (± 3.1%) i/s -      5.284M in   5.005282s

Comparison:
      String#squeeze:  1056612.0 i/s
 String#gsub/regex+/:    19994.0 i/s - 52.85x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   169.924k i/100ms
       String#match?   439.612k i/100ms
  String#start_with?   547.456k i/100ms
Calculating -------------------------------------
           String#=~      1.679M (± 2.9%) i/s -      8.496M in   5.064952s
       String#match?      4.377M (± 3.1%) i/s -     21.981M in   5.026504s
  String#start_with?      5.352M (± 3.1%) i/s -     26.825M in   5.017172s

Comparison:
  String#start_with?:  5351768.7 i/s
       String#match?:  4377351.2 i/s - 1.22x  (± 0.00) slower
           String#=~:  1678934.1 i/s - 3.19x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   143.905k i/100ms
    String#[0, n] ==    48.141k i/100ms
   String#[RANGE] ==    44.291k i/100ms
   String#[0...n] ==    27.268k i/100ms
Calculating -------------------------------------
  String#start_with?      1.377M (± 3.5%) i/s -      6.907M in   5.022304s
    String#[0, n] ==    477.257k (± 2.7%) i/s -      2.407M in   5.047137s
   String#[RANGE] ==    442.748k (± 3.5%) i/s -      2.215M in   5.007947s
   String#[0...n] ==    278.108k (± 3.1%) i/s -      1.391M in   5.005349s

Comparison:
  String#start_with?:  1377100.0 i/s
    String#[0, n] ==:   477257.1 i/s - 2.89x  (± 0.00) slower
   String#[RANGE] ==:   442748.0 i/s - 3.11x  (± 0.00) slower
   String#[0...n] ==:   278108.1 i/s - 4.95x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   107.858k i/100ms
 String#sub!'string'    75.049k i/100ms
String#gsub!'string'    45.242k i/100ms
  String#[/regexp/]=   100.300k i/100ms
 String#sub!/regexp/    76.414k i/100ms
String#gsub!/regexp/    37.148k i/100ms
Calculating -------------------------------------
  String#['string']=      1.075M (± 4.3%) i/s -      5.393M in   5.026051s
 String#sub!'string'    747.232k (± 2.5%) i/s -      3.752M in   5.024991s
String#gsub!'string'    464.588k (± 3.1%) i/s -      2.353M in   5.068870s
  String#[/regexp/]=    985.401k (± 2.4%) i/s -      5.015M in   5.092292s
 String#sub!/regexp/    728.367k (± 3.2%) i/s -      3.668M in   5.041063s
String#gsub!/regexp/    380.547k (± 3.6%) i/s -      1.932M in   5.082725s

Comparison:
  String#['string']=:  1075041.4 i/s
  String#[/regexp/]=:   985400.8 i/s - 1.09x  (± 0.00) slower
 String#sub!'string':   747232.1 i/s - 1.44x  (± 0.00) slower
 String#sub!/regexp/:   728366.6 i/s - 1.48x  (± 0.00) slower
String#gsub!'string':   464588.2 i/s - 2.31x  (± 0.00) slower
String#gsub!/regexp/:   380547.4 i/s - 2.82x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub    96.585k i/100ms
        String#chomp   316.310k i/100ms
String#delete_suffix   351.694k i/100ms
Calculating -------------------------------------
          String#sub    981.717k (± 2.9%) i/s -      4.926M in   5.022115s
        String#chomp      3.326M (± 3.1%) i/s -     16.764M in   5.045601s
String#delete_suffix      3.596M (± 2.6%) i/s -     18.288M in   5.088926s

Comparison:
String#delete_suffix:  3596205.5 i/s
        String#chomp:  3325825.7 i/s - 1.08x  (± 0.00) slower
          String#sub:   981716.7 i/s - 3.66x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   358.250k i/100ms
          String#sub    98.114k i/100ms
Calculating -------------------------------------
String#delete_prefix      3.502M (± 4.3%) i/s -     17.554M in   5.022205s
          String#sub    995.198k (± 2.7%) i/s -      5.004M in   5.031612s

Comparison:
String#delete_prefix:  3502007.3 i/s
          String#sub:   995198.3 i/s - 3.52x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   354.799k i/100ms
    String#unpack[0]   273.124k i/100ms
Calculating -------------------------------------
      String#unpack1      3.528M (± 3.7%) i/s -     17.740M in   5.035254s
    String#unpack[0]      2.737M (± 3.1%) i/s -     13.929M in   5.094146s

Comparison:
      String#unpack1:  3528222.7 i/s
    String#unpack[0]:  2737070.9 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    17.248k i/100ms
          Time.parse     5.397k i/100ms
Calculating -------------------------------------
        Time.iso8601    169.578k (± 6.9%) i/s -    845.152k in   5.008849s
          Time.parse     52.752k (± 6.4%) i/s -    264.453k in   5.034540s

Comparison:
        Time.iso8601:   169578.2 i/s
          Time.parse:    52752.4 i/s - 3.21x  (± 0.00) slower

