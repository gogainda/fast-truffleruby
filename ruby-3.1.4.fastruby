$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       492.978k i/100ms
Function with splat arguments
                        11.336k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          4.807M (± 3.6%) i/s -     24.156M in   5.031948s
Function with splat arguments
                        127.495k (±18.4%) i/s -    612.144k in   5.022453s

Comparison:
Function with single Array argument:  4806572.1 i/s
Function with splat arguments:   127495.4 i/s - 37.70x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   837.090k i/100ms
Sequential Assignment
                       812.894k i/100ms
Calculating -------------------------------------
 Parallel Assignment      8.150M (± 4.4%) i/s -     41.017M in   5.042743s
Sequential Assignment
                          8.245M (± 4.9%) i/s -     41.458M in   5.040705s

Comparison:
Sequential Assignment:  8244676.7 i/s
 Parallel Assignment:  8150317.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   286.298k i/100ms
       attr_accessor   310.216k i/100ms
Calculating -------------------------------------
   getter_and_setter      2.945M (± 4.3%) i/s -     14.887M in   5.064919s
       attr_accessor      3.288M (± 5.4%) i/s -     16.441M in   5.015944s

Comparison:
       attr_accessor:  3287807.4 i/s
   getter_and_setter:  2944882.2 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    58.085k i/100ms
         respond_to?   461.461k i/100ms
Calculating -------------------------------------
      begin...rescue    602.682k (± 3.5%) i/s -      3.020M in   5.017894s
         respond_to?      4.781M (± 4.0%) i/s -     23.996M in   5.027222s

Comparison:
         respond_to?:  4780852.3 i/s
      begin...rescue:   602682.3 i/s - 7.93x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   179.565k i/100ms
             &method    71.649k i/100ms
Calculating -------------------------------------
              normal      1.922M (± 3.4%) i/s -      9.697M in   5.052170s
             &method    707.312k (± 3.7%) i/s -      3.582M in   5.071890s

Comparison:
              normal:  1921564.3 i/s
             &method:   707312.0 i/s - 2.72x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       144.000  i/100ms
       define_method   201.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.359k (±16.3%) i/s -      6.336k in   5.004864s
       define_method      1.832k (±17.8%) i/s -      8.442k in   5.028674s

Comparison:
       define_method:     1832.2 i/s
module_eval with string:     1359.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   116.281k i/100ms
       Kernel#format   122.150k i/100ms
            String#%    96.207k i/100ms
Calculating -------------------------------------
         Float#round      1.071M (± 4.3%) i/s -      5.349M in   5.003174s
       Kernel#format      1.114M (± 6.3%) i/s -      5.619M in   5.062912s
            String#%      1.014M (± 6.4%) i/s -      5.099M in   5.050703s

Comparison:
       Kernel#format:  1114441.8 i/s
         Float#round:  1071121.5 i/s - same-ish: difference falls within error
            String#%:  1014211.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   497.765k i/100ms
          OpenStruct   268.942k i/100ms
Calculating -------------------------------------
                Hash      5.038M (± 6.9%) i/s -     25.386M in   5.064528s
          OpenStruct      2.574M (± 7.0%) i/s -     12.909M in   5.040191s

Comparison:
                Hash:  5038021.4 i/s
          OpenStruct:  2574245.0 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   640.927k i/100ms
          OpenStruct     5.566k i/100ms
Calculating -------------------------------------
                Hash      7.096M (± 5.5%) i/s -     35.892M in   5.073511s
          OpenStruct     57.590k (± 7.3%) i/s -    289.432k in   5.052857s

Comparison:
                Hash:  7096205.8 i/s
          OpenStruct:    57589.9 i/s - 123.22x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   370.255k i/100ms
  ancestors.include?    69.827k i/100ms
Calculating -------------------------------------
  less than or equal      3.716M (± 6.8%) i/s -     18.513M in   5.005608s
  ancestors.include?    663.148k (± 7.4%) i/s -      3.352M in   5.082265s

Comparison:
  less than or equal:  3716020.7 i/s
  ancestors.include?:   663147.7 i/s - 5.60x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.491  (± 0.0%) i/s -      3.000  in   6.106841s
         Kernel loop      0.141  (± 0.0%) i/s -      1.000  in   7.082729s

Comparison:
          While Loop:        0.5 i/s
         Kernel loop:        0.1 i/s - 3.48x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.031M i/100ms
         Array#first   881.082k i/100ms
Calculating -------------------------------------
           Array#[0]     10.448M (± 5.2%) i/s -     52.560M in   5.044476s
         Array#first      9.084M (± 4.3%) i/s -     45.816M in   5.052445s

Comparison:
           Array#[0]: 10447818.8 i/s
         Array#first:  9084388.5 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.076M i/100ms
          Array#last   938.474k i/100ms
Calculating -------------------------------------
          Array#[-1]     10.760M (± 5.2%) i/s -     53.797M in   5.013155s
          Array#last      9.173M (± 4.1%) i/s -     45.985M in   5.021091s

Comparison:
          Array#[-1]: 10759904.8 i/s
          Array#last:  9173196.5 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    53.311k i/100ms
Calculating -------------------------------------
                find      0.156  (± 0.0%) i/s -      1.000  in   6.399551s
             bsearch    529.066k (± 4.8%) i/s -      2.666M in   5.049852s

Comparison:
             bsearch:   529066.4 i/s
                find:        0.2 i/s - 3385787.18x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    10.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    103.882  (± 4.8%) i/s -    520.000  in   5.019318s
        Array#insert      0.422  (± 0.0%) i/s -      3.000  in   7.112746s

Comparison:
       Array#unshift:      103.9 i/s
        Array#insert:        0.4 i/s - 246.23x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.451M i/100ms
          Array#size     1.477M i/100ms
         Array#count     1.121M i/100ms
Calculating -------------------------------------
        Array#length     15.116M (± 4.0%) i/s -     76.878M in   5.094048s
          Array#size     14.900M (± 4.9%) i/s -     75.330M in   5.068257s
         Array#count     10.974M (± 3.4%) i/s -     54.906M in   5.008841s

Comparison:
        Array#length: 15115556.5 i/s
          Array#size: 14899761.7 i/s - same-ish: difference falls within error
         Array#count: 10974374.3 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    28.638k i/100ms
        Array#sample   687.709k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    275.287k (± 4.9%) i/s -      1.375M in   5.005588s
        Array#sample      6.857M (± 3.6%) i/s -     34.385M in   5.020952s

Comparison:
        Array#sample:  6857139.1 i/s
 Array#shuffle.first:   275286.5 i/s - 24.91x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    40.398k i/100ms
          Date.parse    20.911k i/100ms
Calculating -------------------------------------
        Date.iso8601    400.656k (± 3.7%) i/s -      2.020M in   5.048269s
          Date.parse    203.583k (± 4.1%) i/s -      1.025M in   5.041420s

Comparison:
        Date.iso8601:   400655.6 i/s
          Date.parse:   203582.6 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push     9.675k i/100ms
           Array#map    15.421k i/100ms
Calculating -------------------------------------
   Array#each + push    103.494k (± 6.0%) i/s -    522.450k in   5.066790s
           Array#map    151.239k (± 4.3%) i/s -    771.050k in   5.107901s

Comparison:
           Array#map:   151238.7 i/s
   Array#each + push:   103494.1 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    17.103k i/100ms
               #each    18.184k i/100ms
Calculating -------------------------------------
            For loop    168.921k (± 3.7%) i/s -    855.150k in   5.069404s
               #each    182.084k (± 4.9%) i/s -    909.200k in   5.005477s

Comparison:
               #each:   182083.9 i/s
            For loop:   168921.5 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    25.005k i/100ms
     each_with_index    11.874k i/100ms
Calculating -------------------------------------
          While Loop    244.626k (± 4.1%) i/s -      1.225M in   5.017012s
     each_with_index    113.758k (± 4.5%) i/s -    569.952k in   5.020434s

Comparison:
          While Loop:   244626.4 i/s
     each_with_index:   113758.0 i/s - 2.15x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    62.559k i/100ms
      inject to_proc     1.290k i/100ms
        inject block     1.190k i/100ms
Calculating -------------------------------------
       inject symbol    633.624k (± 3.2%) i/s -      3.191M in   5.040688s
      inject to_proc     13.131k (± 4.6%) i/s -     65.790k in   5.021315s
        inject block     11.994k (± 4.4%) i/s -     60.690k in   5.069630s

Comparison:
       inject symbol:   633624.1 i/s
      inject to_proc:    13130.9 i/s - 48.25x  (± 0.00) slower
        inject block:    11994.4 i/s - 52.83x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     4.238k i/100ms
   Array#map.flatten     2.282k i/100ms
      Array#flat_map     5.307k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     42.959k (± 4.4%) i/s -    216.138k in   5.041271s
   Array#map.flatten     23.749k (± 5.2%) i/s -    118.664k in   5.010361s
      Array#flat_map     54.213k (± 4.6%) i/s -    275.964k in   5.101507s

Comparison:
      Array#flat_map:    54213.2 i/s
Array#map.flatten(1):    42958.9 i/s - 1.26x  (± 0.00) slower
   Array#map.flatten:    23748.6 i/s - 2.28x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    17.206k i/100ms
  Array#reverse_each    17.246k i/100ms
Calculating -------------------------------------
  Array#reverse.each    172.035k (± 4.9%) i/s -    860.300k in   5.013176s
  Array#reverse_each    178.387k (± 3.8%) i/s -    896.792k in   5.034482s

Comparison:
  Array#reverse_each:   178386.7 i/s
  Array#reverse.each:   172034.8 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        11.682k i/100ms
   Enumerable#detect    48.133k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        118.214k (± 4.4%) i/s -      2.360M in  20.001391s
   Enumerable#detect    481.744k (± 5.3%) i/s -      9.627M in  20.041392s

Comparison:
   Enumerable#detect:   481744.0 i/s
Enumerable#select.first:   118213.8 i/s - 4.08x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       137.542k i/100ms
Enumerable#select.last
                        10.408k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.418M (± 4.1%) i/s -      7.152M in   5.052531s
Enumerable#select.last
                         98.841k (± 5.1%) i/s -    499.584k in   5.067606s

Comparison:
Enumerable#reverse.detect:  1417995.7 i/s
Enumerable#select.last:    98841.4 i/s - 14.35x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.774k i/100ms
  Enumerable#sort_by     2.659k i/100ms
     Enumerable#sort     1.502k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         28.163k (± 4.3%) i/s -    141.474k in   5.033287s
  Enumerable#sort_by     27.547k (± 4.5%) i/s -    138.268k in   5.029336s
     Enumerable#sort     14.497k (± 3.2%) i/s -     73.598k in   5.082062s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    28163.1 i/s
  Enumerable#sort_by:    27546.9 i/s - same-ish: difference falls within error
     Enumerable#sort:    14496.8 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    10.367k i/100ms
Enumerable#sort_by...first
                         4.904k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    100.021k (± 4.7%) i/s -    507.983k in   5.090390s
Enumerable#sort_by...first
                         50.226k (± 5.8%) i/s -    255.008k in   5.093219s

Comparison:
   Enumerable#min_by:   100020.8 i/s
Enumerable#sort_by...first:    50226.2 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   209.440k i/100ms
            Hash#dup   165.098k i/100ms
Calculating -------------------------------------
              Hash[]      2.052M (± 4.3%) i/s -     10.263M in   5.011098s
            Hash#dup      1.560M (± 5.3%) i/s -      7.925M in   5.093695s

Comparison:
              Hash[]:  2052050.2 i/s
            Hash#dup:  1560225.5 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.035M i/100ms
  Hash#fetch, symbol   805.322k i/100ms
     Hash#[], string   841.393k i/100ms
  Hash#fetch, string   488.860k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     10.401M (± 4.5%) i/s -     52.794M in   5.086300s
  Hash#fetch, symbol      8.265M (± 5.0%) i/s -     41.877M in   5.078904s
     Hash#[], string      8.425M (± 3.7%) i/s -     42.911M in   5.099890s
  Hash#fetch, string      4.752M (± 4.8%) i/s -     23.954M in   5.052304s

Comparison:
     Hash#[], symbol: 10400932.9 i/s
     Hash#[], string:  8425483.7 i/s - 1.23x  (± 0.00) slower
  Hash#fetch, symbol:  8265055.6 i/s - 1.26x  (± 0.00) slower
  Hash#fetch, string:  4752286.8 i/s - 2.19x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   604.597k i/100ms
             Hash#[]   675.972k i/100ms
          Hash#[] ||   653.684k i/100ms
          Hash#[] &&   248.343k i/100ms
          Hash#fetch   406.323k i/100ms
 Hash#fetch fallback   211.019k i/100ms
Calculating -------------------------------------
            Hash#dig      5.763M (± 4.4%) i/s -     29.021M in   5.045833s
             Hash#[]      6.397M (± 2.9%) i/s -     32.447M in   5.076231s
          Hash#[] ||      6.199M (± 4.0%) i/s -     31.377M in   5.069192s
          Hash#[] &&      2.453M (± 4.5%) i/s -     12.417M in   5.073438s
          Hash#fetch      3.983M (± 5.0%) i/s -     19.910M in   5.011519s
 Hash#fetch fallback      2.237M (± 4.4%) i/s -     11.184M in   5.009617s

Comparison:
             Hash#[]:  6397395.3 i/s
          Hash#[] ||:  6199375.6 i/s - same-ish: difference falls within error
            Hash#dig:  5762926.4 i/s - 1.11x  (± 0.00) slower
          Hash#fetch:  3983346.1 i/s - 1.61x  (± 0.00) slower
          Hash#[] &&:  2452517.9 i/s - 2.61x  (± 0.00) slower
 Hash#fetch fallback:  2236906.6 i/s - 2.86x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   922.038k i/100ms
  Hash#fetch + block   919.416k i/100ms
    Hash#fetch + arg   658.119k i/100ms
Calculating -------------------------------------
  Hash#fetch + const      9.487M (± 4.2%) i/s -     47.946M in   5.063229s
  Hash#fetch + block      9.316M (± 5.2%) i/s -     46.890M in   5.047335s
    Hash#fetch + arg      6.550M (± 4.8%) i/s -     32.906M in   5.035599s

Comparison:
  Hash#fetch + const:  9486765.3 i/s
  Hash#fetch + block:  9316378.7 i/s - same-ish: difference falls within error
    Hash#fetch + arg:  6550013.2 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    14.138k i/100ms
         sort + to_h     6.404k i/100ms
Calculating -------------------------------------
      sort_by + to_h    147.993k (± 5.4%) i/s -    749.314k in   5.078644s
         sort + to_h     63.153k (± 4.2%) i/s -    320.200k in   5.079743s

Comparison:
      sort_by + to_h:   147993.4 i/s
         sort + to_h:    63152.8 i/s - 2.34x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   100.416k i/100ms
       Hash#each_key   107.625k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.025M (± 6.4%) i/s -      5.121M in   5.019122s
       Hash#each_key      1.094M (± 4.0%) i/s -      5.489M in   5.024224s

Comparison:
       Hash#each_key:  1094230.5 i/s
      Hash#keys.each:  1024529.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.478k i/100ms
           Hash#key?   563.239k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     15.551k (± 6.9%) i/s -     78.334k in   5.065600s
           Hash#key?      5.750M (± 4.8%) i/s -     28.725M in   5.007810s

Comparison:
           Hash#key?:  5750088.3 i/s
  Hash#keys.include?:    15551.0 i/s - 369.76x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     2.332k i/100ms
            Hash#[]=     5.153k i/100ms
Calculating -------------------------------------
         Hash#merge!     22.917k (± 4.2%) i/s -    116.600k in   5.096874s
            Hash#[]=     52.754k (± 5.3%) i/s -    267.956k in   5.095162s

Comparison:
            Hash#[]=:    52753.5 i/s
         Hash#merge!:    22916.7 i/s - 2.30x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         2.875k i/100ms
      Hash#merge({})     2.240k i/100ms
 Hash#dup#merge!({})     1.636k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         28.152k (± 4.6%) i/s -    140.875k in   5.015299s
      Hash#merge({})     22.923k (± 3.8%) i/s -    116.480k in   5.088705s
 Hash#dup#merge!({})     17.048k (± 3.4%) i/s -     86.708k in   5.092119s

Comparison:
{}#merge!(Hash) do end:    28151.5 i/s
      Hash#merge({}):    22923.3 i/s - 1.23x  (± 0.00) slower
 Hash#dup#merge!({}):    17047.7 i/s - 1.65x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   214.525k i/100ms
          Hash#merge   192.432k i/100ms
Calculating -------------------------------------
        Hash#**other      2.182M (± 4.0%) i/s -     10.941M in   5.023337s
          Hash#merge      1.917M (± 4.2%) i/s -      9.622M in   5.027636s

Comparison:
        Hash#**other:  2181618.1 i/s
          Hash#merge:  1917297.1 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   805.000  i/100ms
         Hash#merge!     2.253k i/100ms
Calculating -------------------------------------
          Hash#merge      7.699k (± 6.9%) i/s -     38.640k in   5.045831s
         Hash#merge!     22.028k (± 4.8%) i/s -    110.397k in   5.023591s

Comparison:
         Hash#merge!:    22027.7 i/s
          Hash#merge:     7698.8 i/s - 2.86x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      238.836k i/100ms
Array#each             119.331k i/100ms
Array#each_w/_object    91.608k i/100ms
Hash#select-include     40.631k i/100ms
Calculating -------------------------------------
Hash#native-slice         2.404M (± 4.6%) i/s -     12.181M in   5.078379s
Array#each                1.257M (± 5.1%) i/s -      6.325M in   5.045510s
Array#each_w/_object    911.860k (± 4.0%) i/s -      4.580M in   5.031058s
Hash#select-include     392.269k (± 7.7%) i/s -      1.950M in   5.002785s

Comparison:
Hash#native-slice   :  2403908.6 i/s
Array#each          :  1256705.4 i/s - 1.91x  (± 0.00) slower
Array#each_w/_object:   911859.6 i/s - 2.64x  (± 0.00) slower
Hash#select-include :   392268.8 i/s - 6.13x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.049k i/100ms
         Hash#value?     1.180k i/100ms
Calculating -------------------------------------
Hash#values.include?     10.408k (± 5.5%) i/s -     52.450k in   5.056705s
         Hash#value?     11.701k (± 4.4%) i/s -     59.000k in   5.052019s

Comparison:
         Hash#value?:    11701.0 i/s
Hash#values.include?:    10407.7 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   404.256k i/100ms
                send   307.851k i/100ms
      method_missing   223.651k i/100ms
Calculating -------------------------------------
                call      3.881M (± 8.6%) i/s -     19.404M in   5.039997s
                send      2.932M (± 7.7%) i/s -     14.777M in   5.070070s
      method_missing      2.163M (± 8.6%) i/s -     10.959M in   5.106823s

Comparison:
                call:  3880723.3 i/s
                send:  2932399.8 i/s - 1.32x  (± 0.00) slower
      method_missing:  2162593.6 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     4.577k i/100ms
      Symbol#to_proc     4.674k i/100ms
Calculating -------------------------------------
               Block     43.022k (± 8.1%) i/s -    215.119k in   5.035671s
      Symbol#to_proc     49.684k (± 6.1%) i/s -    247.722k in   5.005399s

Comparison:
      Symbol#to_proc:    49683.6 i/s
               Block:    43021.8 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   589.557k i/100ms
       block + yield   617.959k i/100ms
        unused block   817.434k i/100ms
               yield   806.969k i/100ms
Calculating -------------------------------------
          block.call      5.743M (± 7.2%) i/s -     28.888M in   5.059911s
       block + yield      5.978M (± 5.8%) i/s -     30.280M in   5.082535s
        unused block      7.911M (± 6.4%) i/s -     40.054M in   5.084979s
               yield      7.978M (± 7.3%) i/s -     40.348M in   5.086399s

Comparison:
               yield:  7978468.0 i/s
        unused block:  7911393.2 i/s - same-ish: difference falls within error
       block + yield:  5977861.8 i/s - 1.33x  (± 0.00) slower
          block.call:  5743452.1 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   170.650k i/100ms
      range#include?     7.026k i/100ms
       range#member?     7.158k i/100ms
       plain compare   256.627k i/100ms
Calculating -------------------------------------
        range#cover?      1.839M (± 5.9%) i/s -      9.215M in   5.028459s
      range#include?     69.648k (± 8.2%) i/s -    351.300k in   5.079422s
       range#member?     71.972k (± 7.0%) i/s -    365.058k in   5.098263s
       plain compare      2.721M (± 3.6%) i/s -     13.858M in   5.099871s

Comparison:
       plain compare:  2720917.7 i/s
        range#cover?:  1839172.4 i/s - 1.48x  (± 0.00) slower
       range#member?:    71972.2 i/s - 37.81x  (± 0.00) slower
      range#include?:    69648.4 i/s - 39.07x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   560.070k i/100ms
           String#=~   334.834k i/100ms
          Regexp#===   289.638k i/100ms
        String#match   253.205k i/100ms
Calculating -------------------------------------
       String#match?      5.509M (± 8.6%) i/s -     27.443M in   5.020379s
           String#=~      3.352M (± 7.9%) i/s -     16.742M in   5.029517s
          Regexp#===      3.104M (± 7.5%) i/s -     15.640M in   5.068308s
        String#match      2.584M (± 8.9%) i/s -     12.913M in   5.039173s

Comparison:
       String#match?:  5508945.2 i/s
           String#=~:  3351652.9 i/s - 1.64x  (± 0.00) slower
          Regexp#===:  3104247.5 i/s - 1.77x  (± 0.00) slower
        String#match:  2584307.9 i/s - 2.13x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   345.801k i/100ms
      String#casecmp   466.223k i/100ms
Calculating -------------------------------------
String#downcase + ==      3.553M (± 6.9%) i/s -     17.982M in   5.086374s
      String#casecmp      4.579M (± 7.9%) i/s -     22.845M in   5.023393s

Comparison:
      String#casecmp:  4578871.4 i/s
String#downcase + ==:  3552964.8 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   324.599k i/100ms
       String#concat   317.385k i/100ms
       String#append   369.967k i/100ms
         "foo" "bar"   790.014k i/100ms
  "#{'foo'}#{'bar'}"   705.447k i/100ms
Calculating -------------------------------------
            String#+      3.308M (± 5.7%) i/s -     16.555M in   5.020726s
       String#concat      3.293M (± 7.7%) i/s -     16.504M in   5.042322s
       String#append      3.647M (± 5.4%) i/s -     18.498M in   5.087839s
         "foo" "bar"      7.465M (± 7.3%) i/s -     37.921M in   5.109560s
  "#{'foo'}#{'bar'}"      7.348M (± 7.2%) i/s -     36.683M in   5.019522s

Comparison:
         "foo" "bar":  7464759.7 i/s
  "#{'foo'}#{'bar'}":  7347934.7 i/s - same-ish: difference falls within error
       String#append:  3646874.9 i/s - 2.05x  (± 0.00) slower
            String#+:  3308431.3 i/s - 2.26x  (± 0.00) slower
       String#concat:  3293259.5 i/s - 2.27x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@   604.755k i/100ms
          String#dup   330.900k i/100ms
Calculating -------------------------------------
           String#+@      6.540M (± 5.1%) i/s -     32.657M in   5.006672s
          String#dup      3.064M (± 7.4%) i/s -     15.552M in   5.104318s

Comparison:
           String#+@:  6540046.8 i/s
          String#dup:  3064472.5 i/s - 2.13x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   114.167k i/100ms
       String#match?   244.312k i/100ms
    String#end_with?   331.864k i/100ms
Calculating -------------------------------------
           String#=~      1.108M (± 7.1%) i/s -      5.594M in   5.075449s
       String#match?      2.388M (± 9.5%) i/s -     11.971M in   5.062283s
    String#end_with?      3.521M (± 7.5%) i/s -     17.589M in   5.025302s

Comparison:
    String#end_with?:  3520591.1 i/s
       String#match?:  2387973.1 i/s - 1.47x  (± 0.00) slower
           String#=~:  1108203.4 i/s - 3.18x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    57.766k i/100ms
          String#sub    82.075k i/100ms
String#dup["string"]=
                       103.985k i/100ms
Calculating -------------------------------------
         String#gsub    600.261k (±11.5%) i/s -      3.004M in   5.085300s
          String#sub    692.716k (±11.7%) i/s -      3.447M in   5.050937s
String#dup["string"]=
                          1.025M (± 9.1%) i/s -      5.095M in   5.016696s

Comparison:
String#dup["string"]=:  1025095.4 i/s
          String#sub:   692716.4 i/s - 1.48x  (± 0.00) slower
         String#gsub:   600261.0 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    48.687k i/100ms
           String#tr   206.404k i/100ms
Calculating -------------------------------------
         String#gsub    559.119k (±11.6%) i/s -      2.775M in   5.042531s
           String#tr      2.165M (± 6.4%) i/s -     10.939M in   5.074311s

Comparison:
           String#tr:  2165213.2 i/s
         String#gsub:   559118.9 i/s - 3.87x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   671.656k i/100ms
         With Freeze     1.139M i/100ms
Calculating -------------------------------------
      Without Freeze      6.713M (± 8.0%) i/s -     33.583M in   5.041158s
         With Freeze     11.421M (± 7.0%) i/s -     56.952M in   5.013519s

Comparison:
         With Freeze: 11421082.6 i/s
      Without Freeze:  6713030.2 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.006k i/100ms
      String#squeeze   104.538k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     19.438k (± 8.1%) i/s -     98.294k in   5.092061s
      String#squeeze    995.918k (± 9.1%) i/s -      5.018M in   5.084103s

Comparison:
      String#squeeze:   995917.7 i/s
 String#gsub/regex+/:    19437.8 i/s - 51.24x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   154.531k i/100ms
       String#match?   434.049k i/100ms
  String#start_with?   507.684k i/100ms
Calculating -------------------------------------
           String#=~      1.667M (± 7.2%) i/s -      8.345M in   5.033568s
       String#match?      4.482M (± 9.8%) i/s -     22.571M in   5.088900s
  String#start_with?      5.031M (± 9.3%) i/s -     25.384M in   5.095513s

Comparison:
  String#start_with?:  5030948.9 i/s
       String#match?:  4481715.8 i/s - same-ish: difference falls within error
           String#=~:  1666665.5 i/s - 3.02x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   133.559k i/100ms
    String#[0, n] ==    45.820k i/100ms
   String#[RANGE] ==    40.129k i/100ms
   String#[0...n] ==    25.309k i/100ms
Calculating -------------------------------------
  String#start_with?      1.332M (± 9.4%) i/s -      6.678M in   5.064222s
    String#[0, n] ==    429.840k (±10.4%) i/s -      2.154M in   5.066474s
   String#[RANGE] ==    432.556k (± 6.8%) i/s -      2.167M in   5.034977s
   String#[0...n] ==    255.442k (±10.5%) i/s -      1.291M in   5.116327s

Comparison:
  String#start_with?:  1331836.3 i/s
   String#[RANGE] ==:   432556.0 i/s - 3.08x  (± 0.00) slower
    String#[0, n] ==:   429839.7 i/s - 3.10x  (± 0.00) slower
   String#[0...n] ==:   255441.8 i/s - 5.21x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   101.817k i/100ms
 String#sub!'string'    69.391k i/100ms
String#gsub!'string'    42.584k i/100ms
  String#[/regexp/]=    94.630k i/100ms
 String#sub!/regexp/    66.485k i/100ms
String#gsub!/regexp/    35.196k i/100ms
Calculating -------------------------------------
  String#['string']=      1.000M (± 8.5%) i/s -      4.989M in   5.024850s
 String#sub!'string'    702.517k (± 8.4%) i/s -      3.539M in   5.074449s
String#gsub!'string'    435.174k (± 9.2%) i/s -      2.172M in   5.037815s
  String#[/regexp/]=    915.714k (± 9.2%) i/s -      4.542M in   5.005436s
 String#sub!/regexp/    684.391k (± 9.4%) i/s -      3.391M in   5.002676s
String#gsub!/regexp/    352.776k (± 8.2%) i/s -      1.760M in   5.027173s

Comparison:
  String#['string']=:  1000373.4 i/s
  String#[/regexp/]=:   915713.9 i/s - same-ish: difference falls within error
 String#sub!'string':   702517.2 i/s - 1.42x  (± 0.00) slower
 String#sub!/regexp/:   684390.6 i/s - 1.46x  (± 0.00) slower
String#gsub!'string':   435174.4 i/s - 2.30x  (± 0.00) slower
String#gsub!/regexp/:   352776.4 i/s - 2.84x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub    80.649k i/100ms
        String#chomp   303.423k i/100ms
String#delete_suffix   290.313k i/100ms
Calculating -------------------------------------
          String#sub    876.043k (±14.4%) i/s -      4.355M in   5.100167s
        String#chomp      3.079M (± 8.8%) i/s -     15.475M in   5.069210s
String#delete_suffix      3.346M (± 8.5%) i/s -     16.838M in   5.070132s

Comparison:
String#delete_suffix:  3346442.8 i/s
        String#chomp:  3079294.0 i/s - same-ish: difference falls within error
          String#sub:   876043.3 i/s - 3.82x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   332.004k i/100ms
          String#sub    89.702k i/100ms
Calculating -------------------------------------
String#delete_prefix      3.490M (± 9.0%) i/s -     17.596M in   5.085450s
          String#sub    916.977k (±10.1%) i/s -      4.575M in   5.046931s

Comparison:
String#delete_prefix:  3490365.1 i/s
          String#sub:   916976.9 i/s - 3.81x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   336.464k i/100ms
    String#unpack[0]   270.285k i/100ms
Calculating -------------------------------------
      String#unpack1      3.424M (± 8.6%) i/s -     17.160M in   5.050025s
    String#unpack[0]      2.733M (± 5.7%) i/s -     13.785M in   5.062537s

Comparison:
      String#unpack1:  3423752.8 i/s
    String#unpack[0]:  2732523.0 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    15.305k i/100ms
          Time.parse     5.003k i/100ms
Calculating -------------------------------------
        Time.iso8601    162.073k (± 7.7%) i/s -    811.165k in   5.035647s
          Time.parse     48.433k (± 8.7%) i/s -    245.147k in   5.101999s

Comparison:
        Time.iso8601:   162073.2 i/s
          Time.parse:    48432.5 i/s - 3.35x  (± 0.00) slower

