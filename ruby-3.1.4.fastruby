$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       592.852k i/100ms
Function with splat arguments
                        21.927k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          5.931M (± 0.1%) i/s -     30.235M in   5.097492s
Function with splat arguments
                        202.815k (± 6.9%) i/s -      1.009M in   5.007892s

Comparison:
Function with single Array argument:  5931444.5 i/s
Function with splat arguments:   202814.8 i/s - 29.25x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   925.583k i/100ms
Sequential Assignment
                       942.487k i/100ms
Calculating -------------------------------------
 Parallel Assignment      9.241M (± 1.3%) i/s -     46.279M in   5.009105s
Sequential Assignment
                          9.417M (± 0.2%) i/s -     47.124M in   5.004200s

Comparison:
Sequential Assignment:  9416981.7 i/s
 Parallel Assignment:  9240692.7 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   381.073k i/100ms
       attr_accessor   430.240k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.809M (± 0.3%) i/s -     19.054M in   5.002742s
       attr_accessor      4.329M (± 0.1%) i/s -     21.942M in   5.068096s

Comparison:
       attr_accessor:  4329491.9 i/s
   getter_and_setter:  3808681.2 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    70.731k i/100ms
         respond_to?   571.204k i/100ms
Calculating -------------------------------------
      begin...rescue    743.456k (± 2.4%) i/s -      3.749M in   5.045498s
         respond_to?      5.728M (± 0.1%) i/s -     29.131M in   5.085678s

Comparison:
         respond_to?:  5728134.7 i/s
      begin...rescue:   743456.3 i/s - 7.70x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   246.429k i/100ms
             &method    88.607k i/100ms
Calculating -------------------------------------
              normal      2.466M (± 0.1%) i/s -     12.568M in   5.096702s
             &method    883.788k (± 0.3%) i/s -      4.430M in   5.012970s

Comparison:
              normal:  2465886.9 i/s
             &method:   883788.4 i/s - 2.79x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       192.000  i/100ms
       define_method   242.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.027k (±20.0%) i/s -      9.216k in   5.080024s
       define_method      2.625k (±15.8%) i/s -     12.342k in   5.044619s

Comparison:
       define_method:     2625.3 i/s
module_eval with string:     2027.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   140.048k i/100ms
       Kernel#format   153.328k i/100ms
            String#%   134.858k i/100ms
Calculating -------------------------------------
         Float#round      1.399M (± 0.6%) i/s -      7.002M in   5.005546s
       Kernel#format      1.532M (± 0.2%) i/s -      7.666M in   5.003461s
            String#%      1.351M (± 0.3%) i/s -      6.878M in   5.091756s

Comparison:
       Kernel#format:  1532224.2 i/s
         Float#round:  1398989.2 i/s - 1.10x  (± 0.00) slower
            String#%:  1350779.5 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   688.004k i/100ms
          OpenStruct   352.150k i/100ms
Calculating -------------------------------------
                Hash      6.874M (± 0.2%) i/s -     34.400M in   5.004530s
          OpenStruct      3.516M (± 0.7%) i/s -     17.608M in   5.008159s

Comparison:
                Hash:  6873830.7 i/s
          OpenStruct:  3515938.2 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   844.787k i/100ms
          OpenStruct     8.559k i/100ms
Calculating -------------------------------------
                Hash      9.027M (± 0.3%) i/s -     45.618M in   5.053782s
          OpenStruct     86.170k (± 2.5%) i/s -    436.509k in   5.068928s

Comparison:
                Hash:  9026674.8 i/s
          OpenStruct:    86170.4 i/s - 104.75x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   494.540k i/100ms
  ancestors.include?    98.891k i/100ms
Calculating -------------------------------------
  less than or equal      4.929M (± 0.7%) i/s -     24.727M in   5.016413s
  ancestors.include?    993.838k (± 0.3%) i/s -      5.043M in   5.074753s

Comparison:
  less than or equal:  4929437.1 i/s
  ancestors.include?:   993838.3 i/s - 4.96x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.460  (± 0.0%) i/s -      3.000  in   6.527330s
         Kernel loop      0.178  (± 0.0%) i/s -      1.000  in   5.630224s

Comparison:
          While Loop:        0.5 i/s
         Kernel loop:        0.2 i/s - 2.59x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.277M i/100ms
         Array#first     1.086M i/100ms
Calculating -------------------------------------
           Array#[0]     12.672M (± 0.2%) i/s -     63.829M in   5.036840s
         Array#first     10.863M (± 0.1%) i/s -     55.368M in   5.096752s

Comparison:
           Array#[0]: 12672434.1 i/s
         Array#first: 10863470.4 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.296M i/100ms
          Array#last     1.010M i/100ms
Calculating -------------------------------------
          Array#[-1]     12.946M (± 0.1%) i/s -     64.801M in   5.005489s
          Array#last      9.929M (± 0.1%) i/s -     50.502M in   5.086131s

Comparison:
          Array#[-1]: 12946077.5 i/s
          Array#last:  9929331.4 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    74.597k i/100ms
Calculating -------------------------------------
                find      0.191  (± 0.0%) i/s -      1.000  in   5.224576s
             bsearch    745.349k (± 0.1%) i/s -      3.730M in   5.004167s

Comparison:
             bsearch:   745349.1 i/s
                find:        0.2 i/s - 3894133.37x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    14.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    142.561  (± 2.8%) i/s -    714.000  in   5.012154s
        Array#insert      1.150  (± 0.0%) i/s -      6.000  in   5.217104s

Comparison:
       Array#unshift:      142.6 i/s
        Array#insert:        1.2 i/s - 123.96x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.885M i/100ms
          Array#size     1.891M i/100ms
         Array#count     1.357M i/100ms
Calculating -------------------------------------
        Array#length     18.824M (± 0.6%) i/s -     94.237M in   5.006339s
          Array#size     18.805M (± 0.5%) i/s -     94.527M in   5.026708s
         Array#count     13.552M (± 0.3%) i/s -     67.836M in   5.005663s

Comparison:
        Array#length: 18824090.8 i/s
          Array#size: 18805443.5 i/s - same-ish: difference falls within error
         Array#count: 13551880.3 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    33.788k i/100ms
        Array#sample   824.189k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    337.694k (± 0.3%) i/s -      1.689M in   5.002800s
        Array#sample      8.256M (± 0.1%) i/s -     42.034M in   5.091419s

Comparison:
        Array#sample:  8255783.9 i/s
 Array#shuffle.first:   337694.4 i/s - 24.45x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    47.866k i/100ms
          Date.parse    24.093k i/100ms
Calculating -------------------------------------
        Date.iso8601    474.070k (± 0.4%) i/s -      2.393M in   5.048480s
          Date.parse    241.723k (± 0.2%) i/s -      1.229M in   5.083308s

Comparison:
        Date.iso8601:   474070.2 i/s
          Date.parse:   241722.6 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    14.207k i/100ms
           Array#map    20.359k i/100ms
Calculating -------------------------------------
   Array#each + push    143.274k (± 0.5%) i/s -    724.557k in   5.057294s
           Array#map    204.500k (± 0.5%) i/s -      1.038M in   5.077421s

Comparison:
           Array#map:   204499.8 i/s
   Array#each + push:   143274.0 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    21.811k i/100ms
               #each    24.235k i/100ms
Calculating -------------------------------------
            For loop    219.285k (± 0.0%) i/s -      1.112M in   5.072678s
               #each    242.070k (± 0.5%) i/s -      1.212M in   5.005928s

Comparison:
               #each:   242069.7 i/s
            For loop:   219284.8 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    24.560k i/100ms
     each_with_index    14.163k i/100ms
Calculating -------------------------------------
          While Loop    245.134k (± 0.1%) i/s -      1.228M in   5.009517s
     each_with_index    141.927k (± 0.1%) i/s -    722.313k in   5.089318s

Comparison:
          While Loop:   245133.6 i/s
     each_with_index:   141927.4 i/s - 1.73x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    71.716k i/100ms
      inject to_proc     1.622k i/100ms
        inject block     1.523k i/100ms
Calculating -------------------------------------
       inject symbol    717.136k (± 0.0%) i/s -      3.586M in   5.000168s
      inject to_proc     16.022k (± 6.6%) i/s -     81.100k in   5.096442s
        inject block     15.190k (± 4.6%) i/s -     76.150k in   5.028382s

Comparison:
       inject symbol:   717136.1 i/s
      inject to_proc:    16022.5 i/s - 44.76x  (± 0.00) slower
        inject block:    15190.4 i/s - 47.21x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     5.517k i/100ms
   Array#map.flatten     3.032k i/100ms
      Array#flat_map     7.085k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     55.115k (± 0.4%) i/s -    275.850k in   5.005056s
   Array#map.flatten     30.295k (± 0.1%) i/s -    151.600k in   5.004092s
      Array#flat_map     70.706k (± 0.2%) i/s -    354.250k in   5.010230s

Comparison:
      Array#flat_map:    70705.5 i/s
Array#map.flatten(1):    55115.3 i/s - 1.28x  (± 0.00) slower
   Array#map.flatten:    30295.3 i/s - 2.33x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    23.233k i/100ms
  Array#reverse_each    24.084k i/100ms
Calculating -------------------------------------
  Array#reverse.each    233.835k (± 0.1%) i/s -      1.185M in   5.067171s
  Array#reverse_each    242.579k (± 0.1%) i/s -      1.228M in   5.063431s

Comparison:
  Array#reverse_each:   242579.5 i/s
  Array#reverse.each:   233835.5 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        15.323k i/100ms
   Enumerable#detect    62.837k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        153.227k (± 0.1%) i/s -      3.065M in  20.000384s
   Enumerable#detect    627.705k (± 0.1%) i/s -     12.567M in  20.021232s

Comparison:
   Enumerable#detect:   627704.7 i/s
Enumerable#select.first:   153227.2 i/s - 4.10x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       175.592k i/100ms
Enumerable#select.last
                        14.466k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.781M (± 1.0%) i/s -      8.955M in   5.029696s
Enumerable#select.last
                        146.234k (± 0.7%) i/s -    737.766k in   5.045332s

Comparison:
Enumerable#reverse.detect:  1780663.7 i/s
Enumerable#select.last:   146233.6 i/s - 12.18x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.862k i/100ms
  Enumerable#sort_by     3.651k i/100ms
     Enumerable#sort     1.788k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         38.583k (± 0.3%) i/s -    193.100k in   5.004794s
  Enumerable#sort_by     36.474k (± 0.3%) i/s -    182.550k in   5.005023s
     Enumerable#sort     17.869k (± 0.4%) i/s -     89.400k in   5.003223s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    38583.3 i/s
  Enumerable#sort_by:    36473.7 i/s - 1.06x  (± 0.00) slower
     Enumerable#sort:    17868.7 i/s - 2.16x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    13.629k i/100ms
Enumerable#sort_by...first
                         6.655k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    136.320k (± 0.1%) i/s -    695.079k in   5.098872s
Enumerable#sort_by...first
                         66.701k (± 0.8%) i/s -    339.405k in   5.088755s

Comparison:
   Enumerable#min_by:   136320.3 i/s
Enumerable#sort_by...first:    66701.0 i/s - 2.04x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   260.307k i/100ms
            Hash#dup   158.298k i/100ms
Calculating -------------------------------------
              Hash[]      2.495M (± 9.8%) i/s -     12.495M in   5.058863s
            Hash#dup      1.940M (± 9.6%) i/s -      9.656M in   5.017304s

Comparison:
              Hash[]:  2495184.0 i/s
            Hash#dup:  1940162.1 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.173M i/100ms
  Hash#fetch, symbol   937.376k i/100ms
     Hash#[], string   940.051k i/100ms
  Hash#fetch, string   589.555k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     11.720M (± 0.2%) i/s -     58.658M in   5.004863s
  Hash#fetch, symbol      9.394M (± 0.0%) i/s -     47.806M in   5.089222s
     Hash#[], string      9.401M (± 0.1%) i/s -     47.003M in   4.999996s
  Hash#fetch, string      5.887M (± 0.3%) i/s -     29.478M in   5.007002s

Comparison:
     Hash#[], symbol: 11720240.2 i/s
     Hash#[], string:  9400525.8 i/s - 1.25x  (± 0.00) slower
  Hash#fetch, symbol:  9393614.4 i/s - 1.25x  (± 0.00) slower
  Hash#fetch, string:  5887377.8 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   733.378k i/100ms
             Hash#[]   769.862k i/100ms
          Hash#[] ||   704.574k i/100ms
          Hash#[] &&   325.298k i/100ms
          Hash#fetch   506.881k i/100ms
 Hash#fetch fallback   306.873k i/100ms
Calculating -------------------------------------
            Hash#dig      7.318M (± 0.5%) i/s -     36.669M in   5.010668s
             Hash#[]      7.712M (± 0.4%) i/s -     39.263M in   5.091450s
          Hash#[] ||      7.026M (± 0.8%) i/s -     35.229M in   5.014440s
          Hash#[] &&      3.252M (± 0.5%) i/s -     16.265M in   5.001666s
          Hash#fetch      5.041M (± 0.4%) i/s -     25.344M in   5.027269s
 Hash#fetch fallback      3.069M (± 0.8%) i/s -     15.651M in   5.099448s

Comparison:
             Hash#[]:  7711694.4 i/s
            Hash#dig:  7318327.5 i/s - 1.05x  (± 0.00) slower
          Hash#[] ||:  7025885.3 i/s - 1.10x  (± 0.00) slower
          Hash#fetch:  5041393.4 i/s - 1.53x  (± 0.00) slower
          Hash#[] &&:  3251975.8 i/s - 2.37x  (± 0.00) slower
 Hash#fetch fallback:  3069270.9 i/s - 2.51x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.119M i/100ms
  Hash#fetch + block     1.134M i/100ms
    Hash#fetch + arg   854.834k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     11.174M (± 0.2%) i/s -     55.940M in   5.006313s
  Hash#fetch + block     11.348M (± 0.1%) i/s -     57.816M in   5.094903s
    Hash#fetch + arg      8.539M (± 0.3%) i/s -     42.742M in   5.005566s

Comparison:
  Hash#fetch + block: 11347885.0 i/s
  Hash#fetch + const: 11174018.4 i/s - 1.02x  (± 0.00) slower
    Hash#fetch + arg:  8538903.8 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    20.177k i/100ms
         sort + to_h     8.624k i/100ms
Calculating -------------------------------------
      sort_by + to_h    204.700k (± 0.7%) i/s -      1.029M in   5.027261s
         sort + to_h     86.074k (± 0.3%) i/s -    431.200k in   5.009717s

Comparison:
      sort_by + to_h:   204699.8 i/s
         sort + to_h:    86073.5 i/s - 2.38x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   150.367k i/100ms
       Hash#each_key   161.311k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.534M (± 0.3%) i/s -      7.669M in   5.000447s
       Hash#each_key      1.610M (± 0.1%) i/s -      8.066M in   5.009441s

Comparison:
       Hash#each_key:  1610070.5 i/s
      Hash#keys.each:  1533621.2 i/s - 1.05x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   991.000  i/100ms
           Hash#key?   773.187k i/100ms
Calculating -------------------------------------
  Hash#keys.include?      9.812k (± 4.5%) i/s -     49.550k in   5.062534s
           Hash#key?      7.735M (± 0.2%) i/s -     39.433M in   5.097686s

Comparison:
           Hash#key?:  7735413.7 i/s
  Hash#keys.include?:     9811.7 i/s - 788.38x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.042k i/100ms
            Hash#[]=     7.340k i/100ms
Calculating -------------------------------------
         Hash#merge!     30.398k (± 0.3%) i/s -    152.100k in   5.003601s
            Hash#[]=     73.517k (± 0.5%) i/s -    374.340k in   5.092009s

Comparison:
            Hash#[]=:    73517.1 i/s
         Hash#merge!:    30398.4 i/s - 2.42x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.756k i/100ms
      Hash#merge({})     3.100k i/100ms
 Hash#dup#merge!({})     2.223k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         38.395k (± 0.6%) i/s -    195.312k in   5.087104s
      Hash#merge({})     30.839k (± 2.2%) i/s -    155.000k in   5.028691s
 Hash#dup#merge!({})     21.926k (± 0.7%) i/s -    111.150k in   5.069587s

Comparison:
{}#merge!(Hash) do end:    38395.2 i/s
      Hash#merge({}):    30839.0 i/s - 1.25x  (± 0.00) slower
 Hash#dup#merge!({}):    21925.8 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   275.578k i/100ms
          Hash#merge   257.746k i/100ms
Calculating -------------------------------------
        Hash#**other      2.769M (± 0.2%) i/s -     14.054M in   5.076111s
          Hash#merge      2.533M (± 1.0%) i/s -     12.887M in   5.088979s

Comparison:
        Hash#**other:  2768756.5 i/s
          Hash#merge:  2532631.9 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.193k i/100ms
         Hash#merge!     2.961k i/100ms
Calculating -------------------------------------
          Hash#merge     11.849k (± 1.6%) i/s -     59.650k in   5.035438s
         Hash#merge!     29.862k (± 0.4%) i/s -    151.011k in   5.056951s

Comparison:
         Hash#merge!:    29862.5 i/s
          Hash#merge:    11849.1 i/s - 2.52x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      318.688k i/100ms
Array#each             170.624k i/100ms
Array#each_w/_object   118.333k i/100ms
Hash#select-include     53.150k i/100ms
Calculating -------------------------------------
Hash#native-slice         3.195M (± 0.4%) i/s -     16.253M in   5.086675s
Array#each                1.691M (± 0.1%) i/s -      8.531M in   5.044988s
Array#each_w/_object      1.206M (± 0.7%) i/s -      6.035M in   5.002727s
Hash#select-include     556.073k (± 2.5%) i/s -      2.817M in   5.069010s

Comparison:
Hash#native-slice   :  3195280.5 i/s
Array#each          :  1691026.3 i/s - 1.89x  (± 0.00) slower
Array#each_w/_object:  1206396.8 i/s - 2.65x  (± 0.00) slower
Hash#select-include :   556072.8 i/s - 5.75x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     3.103k i/100ms
         Hash#value?     3.812k i/100ms
Calculating -------------------------------------
Hash#values.include?     30.717k (± 5.6%) i/s -    155.150k in   5.076725s
         Hash#value?     38.070k (± 0.4%) i/s -    190.600k in   5.006648s

Comparison:
         Hash#value?:    38069.9 i/s
Hash#values.include?:    30717.1 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   521.897k i/100ms
                send   324.385k i/100ms
      method_missing   264.268k i/100ms
Calculating -------------------------------------
                call      5.238M (± 0.1%) i/s -     26.617M in   5.081768s
                send      3.296M (± 0.1%) i/s -     16.544M in   5.019998s
      method_missing      2.666M (± 0.3%) i/s -     13.478M in   5.055598s

Comparison:
                call:  5237698.4 i/s
                send:  3295548.7 i/s - 1.59x  (± 0.00) slower
      method_missing:  2665914.8 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     6.919k i/100ms
      Symbol#to_proc     7.808k i/100ms
Calculating -------------------------------------
               Block     69.264k (± 0.3%) i/s -    352.869k in   5.094568s
      Symbol#to_proc     78.122k (± 0.3%) i/s -    398.208k in   5.097307s

Comparison:
      Symbol#to_proc:    78121.8 i/s
               Block:    69264.5 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   774.050k i/100ms
       block + yield   815.698k i/100ms
        unused block     1.080M i/100ms
               yield   937.447k i/100ms
Calculating -------------------------------------
          block.call      7.736M (± 0.1%) i/s -     38.702M in   5.002859s
       block + yield      8.148M (± 0.1%) i/s -     40.785M in   5.005625s
        unused block     10.733M (± 0.2%) i/s -     54.012M in   5.032553s
               yield      9.379M (± 0.0%) i/s -     47.810M in   5.097667s

Comparison:
        unused block: 10732535.4 i/s
               yield:  9378761.1 i/s - 1.14x  (± 0.00) slower
       block + yield:  8147826.1 i/s - 1.32x  (± 0.00) slower
          block.call:  7736082.8 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   244.091k i/100ms
      range#include?     9.089k i/100ms
       range#member?     9.161k i/100ms
       plain compare   360.592k i/100ms
Calculating -------------------------------------
        range#cover?      2.444M (± 0.2%) i/s -     12.449M in   5.093876s
      range#include?     91.945k (± 2.3%) i/s -    463.539k in   5.044184s
       range#member?     91.911k (± 2.7%) i/s -    467.211k in   5.087042s
       plain compare      3.609M (± 0.1%) i/s -     18.390M in   5.095415s

Comparison:
       plain compare:  3609169.2 i/s
        range#cover?:  2443851.6 i/s - 1.48x  (± 0.00) slower
      range#include?:    91944.5 i/s - 39.25x  (± 0.00) slower
       range#member?:    91911.0 i/s - 39.27x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   746.869k i/100ms
           String#=~   501.755k i/100ms
          Regexp#===   449.097k i/100ms
        String#match   340.404k i/100ms
Calculating -------------------------------------
       String#match?      7.467M (± 0.0%) i/s -     37.343M in   5.000995s
           String#=~      5.017M (± 0.1%) i/s -     25.088M in   5.000733s
          Regexp#===      4.484M (± 0.3%) i/s -     22.455M in   5.007459s
        String#match      3.399M (± 0.3%) i/s -     17.020M in   5.007096s

Comparison:
       String#match?:  7467204.7 i/s
           String#=~:  5016819.7 i/s - 1.49x  (± 0.00) slower
          Regexp#===:  4484334.6 i/s - 1.67x  (± 0.00) slower
        String#match:  3399240.7 i/s - 2.20x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   502.927k i/100ms
      String#casecmp   622.545k i/100ms
Calculating -------------------------------------
String#downcase + ==      5.018M (± 0.3%) i/s -     25.146M in   5.011558s
      String#casecmp      6.228M (± 0.4%) i/s -     31.750M in   5.098019s

Comparison:
      String#casecmp:  6227978.8 i/s
String#downcase + ==:  5017713.5 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   458.392k i/100ms
       String#concat   463.463k i/100ms
       String#append   509.507k i/100ms
         "foo" "bar"   991.233k i/100ms
  "#{'foo'}#{'bar'}"   975.048k i/100ms
Calculating -------------------------------------
            String#+      4.620M (± 0.9%) i/s -     23.378M in   5.060372s
       String#concat      4.652M (± 0.4%) i/s -     23.637M in   5.081010s
       String#append      5.098M (± 0.3%) i/s -     25.985M in   5.097245s
         "foo" "bar"      9.916M (± 0.5%) i/s -     50.553M in   5.098474s
  "#{'foo'}#{'bar'}"      9.738M (± 0.4%) i/s -     48.752M in   5.006248s

Comparison:
         "foo" "bar":  9915574.7 i/s
  "#{'foo'}#{'bar'}":  9738486.2 i/s - 1.02x  (± 0.00) slower
       String#append:  5097866.2 i/s - 1.95x  (± 0.00) slower
       String#concat:  4652011.4 i/s - 2.13x  (± 0.00) slower
            String#+:  4620227.0 i/s - 2.15x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@   751.389k i/100ms
          String#dup   436.381k i/100ms
Calculating -------------------------------------
           String#+@      7.517M (± 0.1%) i/s -     38.321M in   5.098166s
          String#dup      4.363M (± 0.4%) i/s -     21.819M in   5.001021s

Comparison:
           String#+@:  7516602.5 i/s
          String#dup:  4362990.5 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   146.770k i/100ms
       String#match?   332.326k i/100ms
    String#end_with?   476.889k i/100ms
Calculating -------------------------------------
           String#=~      1.474M (± 0.3%) i/s -      7.485M in   5.078379s
       String#match?      3.327M (± 0.1%) i/s -     16.949M in   5.094320s
    String#end_with?      4.768M (± 0.2%) i/s -     23.844M in   5.000678s

Comparison:
    String#end_with?:  4768261.1 i/s
       String#match?:  3326967.2 i/s - 1.43x  (± 0.00) slower
           String#=~:  1473966.0 i/s - 3.23x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    77.236k i/100ms
          String#sub    97.814k i/100ms
String#dup["string"]=
                       139.265k i/100ms
Calculating -------------------------------------
         String#gsub    779.835k (± 0.3%) i/s -      3.939M in   5.051165s
          String#sub    980.362k (± 1.3%) i/s -      4.989M in   5.089269s
String#dup["string"]=
                          1.415M (± 0.3%) i/s -      7.103M in   5.018889s

Comparison:
String#dup["string"]=:  1415168.8 i/s
          String#sub:   980362.2 i/s - 1.44x  (± 0.00) slower
         String#gsub:   779834.7 i/s - 1.81x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    71.907k i/100ms
           String#tr   280.493k i/100ms
Calculating -------------------------------------
         String#gsub    710.561k (± 0.8%) i/s -      3.595M in   5.060187s
           String#tr      2.793M (± 1.0%) i/s -     14.025M in   5.022187s

Comparison:
           String#tr:  2792842.2 i/s
         String#gsub:   710560.6 i/s - 3.93x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   946.514k i/100ms
         With Freeze     1.457M i/100ms
Calculating -------------------------------------
      Without Freeze      9.500M (± 0.5%) i/s -     48.272M in   5.081602s
         With Freeze     14.102M (± 0.1%) i/s -     71.412M in   5.063787s

Comparison:
         With Freeze: 14102465.1 i/s
      Without Freeze:  9499612.4 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.577k i/100ms
      String#squeeze   132.003k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     25.761k (± 0.5%) i/s -    128.850k in   5.001933s
      String#squeeze      1.312M (± 0.3%) i/s -      6.600M in   5.031081s

Comparison:
      String#squeeze:  1311886.4 i/s
 String#gsub/regex+/:    25760.7 i/s - 50.93x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   216.481k i/100ms
       String#match?   596.906k i/100ms
  String#start_with?   670.339k i/100ms
Calculating -------------------------------------
           String#=~      2.170M (± 0.3%) i/s -     11.041M in   5.087914s
       String#match?      5.973M (± 0.1%) i/s -     30.442M in   5.096714s
  String#start_with?      6.702M (± 0.1%) i/s -     33.517M in   5.001175s

Comparison:
  String#start_with?:  6701823.5 i/s
       String#match?:  5972910.6 i/s - 1.12x  (± 0.00) slower
           String#=~:  2169966.0 i/s - 3.09x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   185.674k i/100ms
    String#[0, n] ==    67.943k i/100ms
   String#[RANGE] ==    61.189k i/100ms
   String#[0...n] ==    35.143k i/100ms
Calculating -------------------------------------
  String#start_with?      1.855M (± 0.2%) i/s -      9.284M in   5.004681s
    String#[0, n] ==    679.967k (± 0.2%) i/s -      3.465M in   5.095990s
   String#[RANGE] ==    610.294k (± 0.4%) i/s -      3.059M in   5.013156s
   String#[0...n] ==    355.691k (± 0.3%) i/s -      1.792M in   5.038939s

Comparison:
  String#start_with?:  1855014.8 i/s
    String#[0, n] ==:   679967.5 i/s - 2.73x  (± 0.00) slower
   String#[RANGE] ==:   610294.4 i/s - 3.04x  (± 0.00) slower
   String#[0...n] ==:   355690.8 i/s - 5.22x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   135.668k i/100ms
 String#sub!'string'    91.293k i/100ms
String#gsub!'string'    57.714k i/100ms
  String#[/regexp/]=   117.940k i/100ms
 String#sub!/regexp/    91.783k i/100ms
String#gsub!/regexp/    47.231k i/100ms
Calculating -------------------------------------
  String#['string']=      1.359M (± 1.0%) i/s -      6.919M in   5.092978s
 String#sub!'string'    896.675k (± 0.9%) i/s -      4.565M in   5.091030s
String#gsub!'string'    572.471k (± 0.4%) i/s -      2.886M in   5.040877s
  String#[/regexp/]=      1.191M (± 1.8%) i/s -      6.015M in   5.050571s
 String#sub!/regexp/    926.373k (± 1.0%) i/s -      4.681M in   5.053479s
String#gsub!/regexp/    466.342k (± 0.9%) i/s -      2.362M in   5.064364s

Comparison:
  String#['string']=:  1358676.5 i/s
  String#[/regexp/]=:  1191321.2 i/s - 1.14x  (± 0.00) slower
 String#sub!/regexp/:   926373.2 i/s - 1.47x  (± 0.00) slower
 String#sub!'string':   896674.7 i/s - 1.52x  (± 0.00) slower
String#gsub!'string':   572470.6 i/s - 2.37x  (± 0.00) slower
String#gsub!/regexp/:   466342.3 i/s - 2.91x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   111.254k i/100ms
        String#chomp   426.329k i/100ms
String#delete_suffix   471.973k i/100ms
Calculating -------------------------------------
          String#sub      1.146M (± 0.6%) i/s -      5.785M in   5.047205s
        String#chomp      4.252M (± 0.4%) i/s -     21.316M in   5.013046s
String#delete_suffix      4.707M (± 0.2%) i/s -     23.599M in   5.013889s

Comparison:
String#delete_suffix:  4706671.5 i/s
        String#chomp:  4252248.9 i/s - 1.11x  (± 0.00) slower
          String#sub:  1146265.9 i/s - 4.11x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   475.392k i/100ms
          String#sub   116.758k i/100ms
Calculating -------------------------------------
String#delete_prefix      4.739M (± 0.2%) i/s -     23.770M in   5.016016s
          String#sub      1.167M (± 1.1%) i/s -      5.838M in   5.003798s

Comparison:
String#delete_prefix:  4738770.1 i/s
          String#sub:  1166844.4 i/s - 4.06x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   453.089k i/100ms
    String#unpack[0]   344.162k i/100ms
Calculating -------------------------------------
      String#unpack1      4.530M (± 1.0%) i/s -     22.654M in   5.002032s
    String#unpack[0]      3.495M (± 1.7%) i/s -     17.552M in   5.023572s

Comparison:
      String#unpack1:  4529511.8 i/s
    String#unpack[0]:  3495060.4 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    22.017k i/100ms
          Time.parse     7.394k i/100ms
Calculating -------------------------------------
        Time.iso8601    218.777k (± 1.1%) i/s -      1.101M in   5.032507s
          Time.parse     73.942k (± 0.6%) i/s -    369.700k in   5.000054s

Comparison:
        Time.iso8601:   218776.6 i/s
          Time.parse:    73942.2 i/s - 2.96x  (± 0.00) slower

