$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       594.725k i/100ms
Function with splat arguments
                        21.101k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          5.860M (± 0.1%) i/s -     29.736M in   5.074768s
Function with splat arguments
                        216.695k (± 6.2%) i/s -      1.097M in   5.092058s

Comparison:
Function with single Array argument:  5859632.3 i/s
Function with splat arguments:   216694.6 i/s - 27.04x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   933.043k i/100ms
Sequential Assignment
                       943.050k i/100ms
Calculating -------------------------------------
 Parallel Assignment      9.342M (± 0.3%) i/s -     47.585M in   5.093779s
Sequential Assignment
                          9.434M (± 0.1%) i/s -     48.096M in   5.098117s

Comparison:
Sequential Assignment:  9434001.3 i/s
 Parallel Assignment:  9341886.6 i/s - 1.01x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   378.727k i/100ms
       attr_accessor   439.047k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.740M (± 0.2%) i/s -     18.936M in   5.063232s
       attr_accessor      4.328M (± 0.3%) i/s -     21.952M in   5.072328s

Comparison:
       attr_accessor:  4327917.8 i/s
   getter_and_setter:  3739984.0 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    70.424k i/100ms
         respond_to?   606.802k i/100ms
Calculating -------------------------------------
      begin...rescue    713.605k (± 2.4%) i/s -      3.592M in   5.035885s
         respond_to?      6.068M (± 0.3%) i/s -     30.947M in   5.099657s

Comparison:
         respond_to?:  6068476.6 i/s
      begin...rescue:   713604.6 i/s - 8.50x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   244.180k i/100ms
             &method    87.958k i/100ms
Calculating -------------------------------------
              normal      2.444M (± 0.1%) i/s -     12.453M in   5.095133s
             &method    881.717k (± 0.1%) i/s -      4.486M in   5.087643s

Comparison:
              normal:  2444133.2 i/s
             &method:   881716.9 i/s - 2.77x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       190.000  i/100ms
       define_method   246.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.028k (±20.6%) i/s -      9.120k in   5.003624s
       define_method      2.612k (±15.9%) i/s -     12.300k in   5.059682s

Comparison:
       define_method:     2611.6 i/s
module_eval with string:     2028.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   137.744k i/100ms
       Kernel#format   153.274k i/100ms
            String#%   134.828k i/100ms
Calculating -------------------------------------
         Float#round      1.373M (± 0.1%) i/s -      6.887M in   5.017348s
       Kernel#format      1.532M (± 0.2%) i/s -      7.664M in   5.001447s
            String#%      1.349M (± 0.3%) i/s -      6.876M in   5.095503s

Comparison:
       Kernel#format:  1532300.8 i/s
         Float#round:  1372677.9 i/s - 1.12x  (± 0.00) slower
            String#%:  1349481.3 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   707.612k i/100ms
          OpenStruct   339.078k i/100ms
Calculating -------------------------------------
                Hash      7.081M (± 0.1%) i/s -     36.088M in   5.096198s
          OpenStruct      3.386M (± 0.9%) i/s -     16.954M in   5.007766s

Comparison:
                Hash:  7081404.6 i/s
          OpenStruct:  3385835.5 i/s - 2.09x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   877.056k i/100ms
          OpenStruct     8.568k i/100ms
Calculating -------------------------------------
                Hash      9.381M (± 0.2%) i/s -     47.361M in   5.048899s
          OpenStruct     86.387k (± 2.3%) i/s -    436.968k in   5.060957s

Comparison:
                Hash:  9380514.4 i/s
          OpenStruct:    86386.6 i/s - 108.59x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   487.892k i/100ms
  ancestors.include?    99.540k i/100ms
Calculating -------------------------------------
  less than or equal      4.882M (± 0.3%) i/s -     24.882M in   5.096593s
  ancestors.include?    994.897k (± 0.3%) i/s -      4.977M in   5.002568s

Comparison:
  less than or equal:  4882212.2 i/s
  ancestors.include?:   994897.4 i/s - 4.91x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.459  (± 0.0%) i/s -      3.000  in   6.535510s
         Kernel loop      0.178  (± 0.0%) i/s -      1.000  in   5.621134s

Comparison:
          While Loop:        0.5 i/s
         Kernel loop:        0.2 i/s - 2.58x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.242M i/100ms
         Array#first   992.733k i/100ms
Calculating -------------------------------------
           Array#[0]     12.416M (± 0.0%) i/s -     62.082M in   5.000337s
         Array#first      9.926M (± 0.1%) i/s -     49.637M in   5.000673s

Comparison:
           Array#[0]: 12415645.4 i/s
         Array#first:  9926000.4 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.284M i/100ms
          Array#last     1.027M i/100ms
Calculating -------------------------------------
          Array#[-1]     12.831M (± 0.1%) i/s -     64.191M in   5.002930s
          Array#last     10.273M (± 0.1%) i/s -     51.375M in   5.000782s

Comparison:
          Array#[-1]: 12830736.0 i/s
          Array#last: 10273390.2 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    74.813k i/100ms
Calculating -------------------------------------
                find      0.197  (± 0.0%) i/s -      1.000  in   5.066848s
             bsearch    752.687k (± 0.0%) i/s -      3.815M in   5.069125s

Comparison:
             bsearch:   752686.9 i/s
                find:        0.2 i/s - 3813750.34x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    14.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    147.916  (± 2.7%) i/s -    742.000  in   5.019868s
        Array#insert      1.150  (± 0.0%) i/s -      6.000  in   5.216272s

Comparison:
       Array#unshift:      147.9 i/s
        Array#insert:        1.2 i/s - 128.59x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.902M i/100ms
          Array#size     1.820M i/100ms
         Array#count     1.359M i/100ms
Calculating -------------------------------------
        Array#length     18.972M (± 0.6%) i/s -     95.103M in   5.012853s
          Array#size     18.185M (± 0.4%) i/s -     90.984M in   5.003393s
         Array#count     13.332M (± 0.1%) i/s -     67.944M in   5.096183s

Comparison:
        Array#length: 18972467.9 i/s
          Array#size: 18184807.2 i/s - 1.04x  (± 0.00) slower
         Array#count: 13332284.9 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    33.704k i/100ms
        Array#sample   792.974k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    338.017k (± 0.2%) i/s -      1.719M in   5.085285s
        Array#sample      7.922M (± 0.1%) i/s -     39.649M in   5.004983s

Comparison:
        Array#sample:  7921847.9 i/s
 Array#shuffle.first:   338017.3 i/s - 23.44x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    48.197k i/100ms
          Date.parse    24.517k i/100ms
Calculating -------------------------------------
        Date.iso8601    482.545k (± 0.3%) i/s -      2.458M in   5.093960s
          Date.parse    244.439k (± 0.4%) i/s -      1.226M in   5.015007s

Comparison:
        Date.iso8601:   482544.7 i/s
          Date.parse:   244439.4 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    14.275k i/100ms
           Array#map    20.119k i/100ms
Calculating -------------------------------------
   Array#each + push    142.622k (± 0.2%) i/s -    713.750k in   5.004498s
           Array#map    202.494k (± 0.2%) i/s -      1.026M in   5.067160s

Comparison:
           Array#map:   202494.4 i/s
   Array#each + push:   142622.3 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    21.311k i/100ms
               #each    24.378k i/100ms
Calculating -------------------------------------
            For loop    213.163k (± 0.1%) i/s -      1.087M in   5.098745s
               #each    243.483k (± 0.1%) i/s -      1.219M in   5.006098s

Comparison:
               #each:   243483.2 i/s
            For loop:   213162.6 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    24.741k i/100ms
     each_with_index    14.194k i/100ms
Calculating -------------------------------------
          While Loop    246.590k (± 0.2%) i/s -      1.237M in   5.016664s
     each_with_index    142.553k (± 0.1%) i/s -    723.894k in   5.078068s

Comparison:
          While Loop:   246589.5 i/s
     each_with_index:   142553.3 i/s - 1.73x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    71.376k i/100ms
      inject to_proc     1.625k i/100ms
        inject block     1.555k i/100ms
Calculating -------------------------------------
       inject symbol    715.735k (± 0.0%) i/s -      3.640M in   5.085929s
      inject to_proc     16.249k (± 0.1%) i/s -     81.250k in   5.000460s
        inject block     15.551k (± 0.2%) i/s -     79.305k in   5.099747s

Comparison:
       inject symbol:   715734.7 i/s
      inject to_proc:    16248.5 i/s - 44.05x  (± 0.00) slower
        inject block:    15550.9 i/s - 46.03x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     5.507k i/100ms
   Array#map.flatten     3.000k i/100ms
      Array#flat_map     7.094k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     55.266k (± 0.4%) i/s -    280.857k in   5.081982s
   Array#map.flatten     30.030k (± 0.2%) i/s -    153.000k in   5.094851s
      Array#flat_map     71.119k (± 0.2%) i/s -    361.794k in   5.087148s

Comparison:
      Array#flat_map:    71119.4 i/s
Array#map.flatten(1):    55265.9 i/s - 1.29x  (± 0.00) slower
   Array#map.flatten:    30030.4 i/s - 2.37x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    22.705k i/100ms
  Array#reverse_each    24.070k i/100ms
Calculating -------------------------------------
  Array#reverse.each    230.403k (± 0.1%) i/s -      1.158M in   5.025783s
  Array#reverse_each    242.632k (± 0.1%) i/s -      1.228M in   5.059391s

Comparison:
  Array#reverse_each:   242632.1 i/s
  Array#reverse.each:   230403.2 i/s - 1.05x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        15.425k i/100ms
   Enumerable#detect    62.293k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        154.216k (± 0.1%) i/s -      3.085M in  20.004483s
   Enumerable#detect    624.071k (± 0.7%) i/s -     12.521M in  20.064353s

Comparison:
   Enumerable#detect:   624070.9 i/s
Enumerable#select.first:   154215.6 i/s - 4.05x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       176.488k i/100ms
Enumerable#select.last
                        14.535k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.782M (± 0.4%) i/s -      9.001M in   5.051035s
Enumerable#select.last
                        145.309k (± 0.2%) i/s -    726.750k in   5.001418s

Comparison:
Enumerable#reverse.detect:  1782020.6 i/s
Enumerable#select.last:   145309.2 i/s - 12.26x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.868k i/100ms
  Enumerable#sort_by     3.698k i/100ms
     Enumerable#sort     1.887k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         38.695k (± 0.2%) i/s -    197.268k in   5.097998s
  Enumerable#sort_by     36.947k (± 0.2%) i/s -    184.900k in   5.004529s
     Enumerable#sort     18.920k (± 0.2%) i/s -     96.237k in   5.086565s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    38695.3 i/s
  Enumerable#sort_by:    36946.7 i/s - 1.05x  (± 0.00) slower
     Enumerable#sort:    18919.9 i/s - 2.05x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    13.407k i/100ms
Enumerable#sort_by...first
                         6.669k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    134.014k (± 0.1%) i/s -    670.350k in   5.002085s
Enumerable#sort_by...first
                         66.608k (± 0.2%) i/s -    333.450k in   5.006158s

Comparison:
   Enumerable#min_by:   134014.3 i/s
Enumerable#sort_by...first:    66608.3 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   302.683k i/100ms
            Hash#dup   238.261k i/100ms
Calculating -------------------------------------
              Hash[]      2.895M (± 2.2%) i/s -     14.529M in   5.021226s
            Hash#dup      2.192M (± 1.4%) i/s -     11.198M in   5.109942s

Comparison:
              Hash[]:  2894888.2 i/s
            Hash#dup:  2191871.0 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.168M i/100ms
  Hash#fetch, symbol   891.700k i/100ms
     Hash#[], string   941.534k i/100ms
  Hash#fetch, string   609.072k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     11.709M (± 0.3%) i/s -     59.554M in   5.086116s
  Hash#fetch, symbol      8.914M (± 0.1%) i/s -     44.585M in   5.001838s
     Hash#[], string      9.411M (± 0.1%) i/s -     47.077M in   5.002425s
  Hash#fetch, string      6.090M (± 0.2%) i/s -     30.454M in   5.000460s

Comparison:
     Hash#[], symbol: 11709165.6 i/s
     Hash#[], string:  9410780.0 i/s - 1.24x  (± 0.00) slower
  Hash#fetch, symbol:  8913725.8 i/s - 1.31x  (± 0.00) slower
  Hash#fetch, string:  6090174.9 i/s - 1.92x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   696.732k i/100ms
             Hash#[]   774.998k i/100ms
          Hash#[] ||   709.580k i/100ms
          Hash#[] &&   325.277k i/100ms
          Hash#fetch   501.208k i/100ms
 Hash#fetch fallback   305.236k i/100ms
Calculating -------------------------------------
            Hash#dig      7.010M (± 0.5%) i/s -     35.533M in   5.069324s
             Hash#[]      7.734M (± 0.5%) i/s -     38.750M in   5.010155s
          Hash#[] ||      7.043M (± 0.7%) i/s -     35.479M in   5.037492s
          Hash#[] &&      3.253M (± 0.6%) i/s -     16.589M in   5.099237s
          Hash#fetch      4.966M (± 0.5%) i/s -     25.060M in   5.046933s
 Hash#fetch fallback      3.064M (± 0.2%) i/s -     15.567M in   5.081290s

Comparison:
             Hash#[]:  7734477.2 i/s
          Hash#[] ||:  7043301.6 i/s - 1.10x  (± 0.00) slower
            Hash#dig:  7009655.7 i/s - 1.10x  (± 0.00) slower
          Hash#fetch:  4965599.7 i/s - 1.56x  (± 0.00) slower
          Hash#[] &&:  3253363.3 i/s - 2.38x  (± 0.00) slower
 Hash#fetch fallback:  3063616.6 i/s - 2.52x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.147M i/100ms
  Hash#fetch + block     1.160M i/100ms
    Hash#fetch + arg   855.952k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     11.483M (± 0.1%) i/s -     58.508M in   5.094935s
  Hash#fetch + block     11.611M (± 0.1%) i/s -     59.156M in   5.094758s
    Hash#fetch + arg      8.554M (± 0.3%) i/s -     42.798M in   5.003211s

Comparison:
  Hash#fetch + block: 11611208.0 i/s
  Hash#fetch + const: 11483487.4 i/s - 1.01x  (± 0.00) slower
    Hash#fetch + arg:  8554110.8 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    21.114k i/100ms
         sort + to_h     9.394k i/100ms
Calculating -------------------------------------
      sort_by + to_h    208.608k (± 1.5%) i/s -      1.056M in   5.061800s
         sort + to_h     94.339k (± 0.4%) i/s -    479.094k in   5.078505s

Comparison:
      sort_by + to_h:   208607.6 i/s
         sort + to_h:    94339.0 i/s - 2.21x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   152.245k i/100ms
       Hash#each_key   159.519k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.537M (± 0.2%) i/s -      7.764M in   5.050560s
       Hash#each_key      1.599M (± 0.1%) i/s -      8.135M in   5.088872s

Comparison:
       Hash#each_key:  1598679.0 i/s
      Hash#keys.each:  1537362.0 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.001k i/100ms
           Hash#key?   748.701k i/100ms
Calculating -------------------------------------
  Hash#keys.include?      9.905k (± 4.2%) i/s -     50.050k in   5.063731s
           Hash#key?      7.487M (± 0.1%) i/s -     38.184M in   5.099719s

Comparison:
           Hash#key?:  7487434.2 i/s
  Hash#keys.include?:     9905.0 i/s - 755.92x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.062k i/100ms
            Hash#[]=     7.531k i/100ms
Calculating -------------------------------------
         Hash#merge!     30.505k (± 0.2%) i/s -    153.100k in   5.018816s
            Hash#[]=     75.321k (± 0.5%) i/s -    384.081k in   5.099332s

Comparison:
            Hash#[]=:    75321.5 i/s
         Hash#merge!:    30505.3 i/s - 2.47x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.768k i/100ms
      Hash#merge({})     2.973k i/100ms
 Hash#dup#merge!({})     2.151k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         37.557k (± 0.1%) i/s -    188.400k in   5.016417s
      Hash#merge({})     29.638k (± 0.2%) i/s -    148.650k in   5.015556s
 Hash#dup#merge!({})     21.382k (± 0.1%) i/s -    107.550k in   5.029883s

Comparison:
{}#merge!(Hash) do end:    37556.7 i/s
      Hash#merge({}):    29637.9 i/s - 1.27x  (± 0.00) slower
 Hash#dup#merge!({}):    21382.2 i/s - 1.76x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   275.842k i/100ms
          Hash#merge   251.781k i/100ms
Calculating -------------------------------------
        Hash#**other      2.809M (± 0.3%) i/s -     14.068M in   5.008870s
          Hash#merge      2.538M (± 0.7%) i/s -     12.841M in   5.058857s

Comparison:
        Hash#**other:  2808632.1 i/s
          Hash#merge:  2538429.2 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.247k i/100ms
         Hash#merge!     3.018k i/100ms
Calculating -------------------------------------
          Hash#merge     12.573k (± 1.6%) i/s -     63.597k in   5.059771s
         Hash#merge!     30.220k (± 0.4%) i/s -    153.918k in   5.093275s

Comparison:
         Hash#merge!:    30220.3 i/s
          Hash#merge:    12572.7 i/s - 2.40x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      315.178k i/100ms
Array#each             169.830k i/100ms
Array#each_w/_object   122.084k i/100ms
Hash#select-include     56.857k i/100ms
Calculating -------------------------------------
Hash#native-slice         3.128M (± 0.2%) i/s -     15.759M in   5.038601s
Array#each                1.708M (± 0.2%) i/s -      8.661M in   5.070508s
Array#each_w/_object      1.214M (± 0.3%) i/s -      6.104M in   5.028650s
Hash#select-include     565.661k (± 1.4%) i/s -      2.843M in   5.026685s

Comparison:
Hash#native-slice   :  3127642.2 i/s
Array#each          :  1708186.3 i/s - 1.83x  (± 0.00) slower
Array#each_w/_object:  1213898.2 i/s - 2.58x  (± 0.00) slower
Hash#select-include :   565661.2 i/s - 5.53x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   966.000  i/100ms
         Hash#value?   847.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      9.604k (± 4.4%) i/s -     48.300k in   5.040882s
         Hash#value?      8.453k (± 0.5%) i/s -     42.350k in   5.010129s

Comparison:
Hash#values.include?:     9604.0 i/s
         Hash#value?:     8453.1 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   521.706k i/100ms
                send   341.724k i/100ms
      method_missing   268.503k i/100ms
Calculating -------------------------------------
                call      5.200M (± 0.1%) i/s -     26.085M in   5.016700s
                send      3.412M (± 0.4%) i/s -     17.086M in   5.007996s
      method_missing      2.659M (± 0.1%) i/s -     13.425M in   5.049673s

Comparison:
                call:  5199694.8 i/s
                send:  3411827.8 i/s - 1.52x  (± 0.00) slower
      method_missing:  2658619.9 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     6.862k i/100ms
      Symbol#to_proc     7.881k i/100ms
Calculating -------------------------------------
               Block     68.493k (± 0.6%) i/s -    343.100k in   5.009458s
      Symbol#to_proc     78.462k (± 0.2%) i/s -    394.050k in   5.022205s

Comparison:
      Symbol#to_proc:    78461.9 i/s
               Block:    68492.6 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   794.774k i/100ms
       block + yield   767.273k i/100ms
        unused block     1.048M i/100ms
               yield     1.044M i/100ms
Calculating -------------------------------------
          block.call      7.946M (± 0.2%) i/s -     39.739M in   5.001045s
       block + yield      7.673M (± 0.1%) i/s -     39.131M in   5.099715s
        unused block     10.479M (± 0.1%) i/s -     52.413M in   5.001658s
               yield     10.404M (± 0.2%) i/s -     52.197M in   5.016975s

Comparison:
        unused block: 10479080.8 i/s
               yield: 10404197.9 i/s - 1.01x  (± 0.00) slower
          block.call:  7946105.1 i/s - 1.32x  (± 0.00) slower
       block + yield:  7673165.4 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   244.414k i/100ms
      range#include?     9.343k i/100ms
       range#member?     9.323k i/100ms
       plain compare   362.981k i/100ms
Calculating -------------------------------------
        range#cover?      2.439M (± 0.3%) i/s -     12.221M in   5.010939s
      range#include?     93.589k (± 1.1%) i/s -    476.493k in   5.091960s
       range#member?     95.192k (± 1.0%) i/s -    484.796k in   5.093385s
       plain compare      3.628M (± 0.1%) i/s -     18.149M in   5.002138s

Comparison:
       plain compare:  3628264.4 i/s
        range#cover?:  2438824.6 i/s - 1.49x  (± 0.00) slower
       range#member?:    95191.6 i/s - 38.12x  (± 0.00) slower
      range#include?:    93589.4 i/s - 38.77x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   739.067k i/100ms
           String#=~   505.634k i/100ms
          Regexp#===   465.644k i/100ms
        String#match   345.229k i/100ms
Calculating -------------------------------------
       String#match?      7.390M (± 0.3%) i/s -     36.953M in   5.000439s
           String#=~      4.986M (± 0.8%) i/s -     25.282M in   5.070980s
          Regexp#===      4.651M (± 0.1%) i/s -     23.282M in   5.005598s
        String#match      3.441M (± 0.2%) i/s -     17.261M in   5.016651s

Comparison:
       String#match?:  7390098.9 i/s
           String#=~:  4985931.0 i/s - 1.48x  (± 0.00) slower
          Regexp#===:  4651238.1 i/s - 1.59x  (± 0.00) slower
        String#match:  3440843.1 i/s - 2.15x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   507.582k i/100ms
      String#casecmp   655.881k i/100ms
Calculating -------------------------------------
String#downcase + ==      5.067M (± 0.2%) i/s -     25.379M in   5.008480s
      String#casecmp      6.554M (± 0.2%) i/s -     32.794M in   5.003897s

Comparison:
      String#casecmp:  6553742.5 i/s
String#downcase + ==:  5067239.4 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   466.218k i/100ms
       String#concat   475.630k i/100ms
       String#append   518.910k i/100ms
         "foo" "bar"   994.070k i/100ms
  "#{'foo'}#{'bar'}"     1.003M i/100ms
Calculating -------------------------------------
            String#+      4.659M (± 0.2%) i/s -     23.311M in   5.003180s
       String#concat      4.758M (± 0.3%) i/s -     24.257M in   5.097955s
       String#append      5.179M (± 0.6%) i/s -     25.946M in   5.010115s
         "foo" "bar"      9.953M (± 0.3%) i/s -     50.698M in   5.093514s
  "#{'foo'}#{'bar'}"      9.981M (± 0.6%) i/s -     50.125M in   5.022252s

Comparison:
  "#{'foo'}#{'bar'}":  9980982.2 i/s
         "foo" "bar":  9953461.4 i/s - same-ish: difference falls within error
       String#append:  5178814.8 i/s - 1.93x  (± 0.00) slower
       String#concat:  4758264.3 i/s - 2.10x  (± 0.00) slower
            String#+:  4659245.7 i/s - 2.14x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@   807.881k i/100ms
          String#dup   440.099k i/100ms
Calculating -------------------------------------
           String#+@      8.083M (± 0.1%) i/s -     41.202M in   5.097265s
          String#dup      4.403M (± 0.1%) i/s -     22.445M in   5.098058s

Comparison:
           String#+@:  8083159.4 i/s
          String#dup:  4402670.2 i/s - 1.84x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   146.628k i/100ms
       String#match?   329.325k i/100ms
    String#end_with?   477.667k i/100ms
Calculating -------------------------------------
           String#=~      1.470M (± 0.1%) i/s -      7.478M in   5.086728s
       String#match?      3.297M (± 0.0%) i/s -     16.796M in   5.093829s
    String#end_with?      4.776M (± 0.1%) i/s -     23.883M in   5.001004s

Comparison:
    String#end_with?:  4775713.3 i/s
       String#match?:  3297240.7 i/s - 1.45x  (± 0.00) slower
           String#=~:  1470107.0 i/s - 3.25x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    77.245k i/100ms
          String#sub    99.951k i/100ms
String#dup["string"]=
                       139.332k i/100ms
Calculating -------------------------------------
         String#gsub    774.785k (± 0.6%) i/s -      3.939M in   5.084830s
          String#sub    982.347k (± 2.1%) i/s -      4.998M in   5.089591s
String#dup["string"]=
                          1.404M (± 0.5%) i/s -      7.106M in   5.060072s

Comparison:
String#dup["string"]=:  1404344.5 i/s
          String#sub:   982346.8 i/s - 1.43x  (± 0.00) slower
         String#gsub:   774785.4 i/s - 1.81x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    77.272k i/100ms
           String#tr   279.788k i/100ms
Calculating -------------------------------------
         String#gsub    714.398k (± 1.3%) i/s -      3.632M in   5.084586s
           String#tr      2.801M (± 0.1%) i/s -     14.269M in   5.094704s

Comparison:
           String#tr:  2800790.4 i/s
         String#gsub:   714397.5 i/s - 3.92x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   901.533k i/100ms
         With Freeze     1.459M i/100ms
Calculating -------------------------------------
      Without Freeze      9.014M (± 0.4%) i/s -     45.077M in   5.000939s
         With Freeze     14.524M (± 0.3%) i/s -     72.950M in   5.022691s

Comparison:
         With Freeze: 14524227.4 i/s
      Without Freeze:  9013757.9 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.570k i/100ms
      String#squeeze   132.889k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     25.824k (± 0.3%) i/s -    131.070k in   5.075524s
      String#squeeze      1.320M (± 0.9%) i/s -      6.644M in   5.035815s

Comparison:
      String#squeeze:  1319543.0 i/s
 String#gsub/regex+/:    25824.1 i/s - 51.10x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   213.631k i/100ms
       String#match?   607.026k i/100ms
  String#start_with?   683.980k i/100ms
Calculating -------------------------------------
           String#=~      2.142M (± 0.1%) i/s -     10.895M in   5.087418s
       String#match?      6.070M (± 0.1%) i/s -     30.351M in   5.000624s
  String#start_with?      6.820M (± 0.4%) i/s -     34.199M in   5.014539s

Comparison:
  String#start_with?:  6820090.7 i/s
       String#match?:  6069507.5 i/s - 1.12x  (± 0.00) slower
           String#=~:  2141597.2 i/s - 3.18x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   185.259k i/100ms
    String#[0, n] ==    68.028k i/100ms
   String#[RANGE] ==    61.090k i/100ms
   String#[0...n] ==    35.351k i/100ms
Calculating -------------------------------------
  String#start_with?      1.851M (± 0.4%) i/s -      9.263M in   5.004588s
    String#[0, n] ==    678.688k (± 0.8%) i/s -      3.401M in   5.012090s
   String#[RANGE] ==    611.451k (± 1.0%) i/s -      3.116M in   5.095891s
   String#[0...n] ==    357.544k (± 0.2%) i/s -      1.803M in   5.042487s

Comparison:
  String#start_with?:  1850922.8 i/s
    String#[0, n] ==:   678688.2 i/s - 2.73x  (± 0.00) slower
   String#[RANGE] ==:   611451.2 i/s - 3.03x  (± 0.00) slower
   String#[0...n] ==:   357543.7 i/s - 5.18x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   133.725k i/100ms
 String#sub!'string'    89.803k i/100ms
String#gsub!'string'    57.721k i/100ms
  String#[/regexp/]=   113.784k i/100ms
 String#sub!/regexp/    94.750k i/100ms
String#gsub!/regexp/    45.721k i/100ms
Calculating -------------------------------------
  String#['string']=      1.340M (± 2.1%) i/s -      6.820M in   5.090350s
 String#sub!'string'    916.202k (± 0.8%) i/s -      4.670M in   5.097206s
String#gsub!'string'    575.664k (± 0.4%) i/s -      2.886M in   5.013529s
  String#[/regexp/]=      1.194M (± 1.7%) i/s -      6.031M in   5.050402s
 String#sub!/regexp/    942.353k (± 2.0%) i/s -      4.738M in   5.029363s
String#gsub!/regexp/    478.151k (± 1.9%) i/s -      2.423M in   5.069657s

Comparison:
  String#['string']=:  1340350.2 i/s
  String#[/regexp/]=:  1194403.0 i/s - 1.12x  (± 0.00) slower
 String#sub!/regexp/:   942352.8 i/s - 1.42x  (± 0.00) slower
 String#sub!'string':   916202.2 i/s - 1.46x  (± 0.00) slower
String#gsub!'string':   575663.8 i/s - 2.33x  (± 0.00) slower
String#gsub!/regexp/:   478151.5 i/s - 2.80x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   113.212k i/100ms
        String#chomp   420.099k i/100ms
String#delete_suffix   451.293k i/100ms
Calculating -------------------------------------
          String#sub      1.158M (± 0.8%) i/s -      5.887M in   5.085344s
        String#chomp      4.205M (± 0.2%) i/s -     21.425M in   5.095095s
String#delete_suffix      4.516M (± 0.1%) i/s -     23.016M in   5.096001s

Comparison:
String#delete_suffix:  4516480.2 i/s
        String#chomp:  4205054.4 i/s - 1.07x  (± 0.00) slower
          String#sub:  1157717.7 i/s - 3.90x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   460.455k i/100ms
          String#sub   118.456k i/100ms
Calculating -------------------------------------
String#delete_prefix      4.607M (± 0.2%) i/s -     23.483M in   5.097758s
          String#sub      1.201M (± 0.7%) i/s -      6.041M in   5.028703s

Comparison:
String#delete_prefix:  4606594.7 i/s
          String#sub:  1201415.4 i/s - 3.83x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   446.272k i/100ms
    String#unpack[0]   336.019k i/100ms
Calculating -------------------------------------
      String#unpack1      4.475M (± 0.6%) i/s -     22.760M in   5.085896s
    String#unpack[0]      3.406M (± 0.7%) i/s -     17.137M in   5.031873s

Comparison:
      String#unpack1:  4475236.1 i/s
    String#unpack[0]:  3405847.7 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    22.238k i/100ms
          Time.parse     7.605k i/100ms
Calculating -------------------------------------
        Time.iso8601    221.463k (± 0.6%) i/s -      1.112M in   5.020878s
          Time.parse     76.455k (± 0.5%) i/s -    387.855k in   5.073068s

Comparison:
        Time.iso8601:   221462.7 i/s
          Time.parse:    76455.3 i/s - 2.90x  (± 0.00) slower

