$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       765.574k i/100ms
Function with splat arguments
                        14.845k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.617M (± 1.9%) i/s -     38.279M in   5.027606s
Function with splat arguments
                        172.395k (± 9.1%) i/s -    861.010k in   5.041046s

Comparison:
Function with single Array argument:  7616846.0 i/s
Function with splat arguments:   172394.9 i/s - 44.18x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.004M i/100ms
Sequential Assignment
                       978.994k i/100ms
Calculating -------------------------------------
 Parallel Assignment      9.983M (± 1.8%) i/s -     50.195M in   5.029997s
Sequential Assignment
                          9.857M (± 1.8%) i/s -     49.929M in   5.066823s

Comparison:
 Parallel Assignment:  9982573.6 i/s
Sequential Assignment:  9857257.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   473.627k i/100ms
       attr_accessor   547.739k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.748M (± 0.5%) i/s -     24.155M in   5.087686s
       attr_accessor      5.481M (± 0.4%) i/s -     27.935M in   5.096736s

Comparison:
       attr_accessor:  5480973.7 i/s
   getter_and_setter:  4747848.8 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    85.175k i/100ms
         respond_to?   765.588k i/100ms
Calculating -------------------------------------
      begin...rescue    880.577k (± 1.4%) i/s -      4.429M in   5.030842s
         respond_to?      7.623M (± 1.9%) i/s -     38.279M in   5.023503s

Comparison:
         respond_to?:  7623302.0 i/s
      begin...rescue:   880576.7 i/s - 8.66x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   293.246k i/100ms
             &method   121.591k i/100ms
Calculating -------------------------------------
              normal      2.961M (± 0.7%) i/s -     14.956M in   5.050621s
             &method      1.202M (± 5.5%) i/s -      6.080M in   5.083083s

Comparison:
              normal:  2961276.2 i/s
             &method:  1201942.4 i/s - 2.46x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       219.000  i/100ms
       define_method   333.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.157k (±23.0%) i/s -      9.417k in   5.041041s
       define_method      3.102k (±18.6%) i/s -     15.651k in   5.575703s

Comparison:
       define_method:     3101.6 i/s
module_eval with string:     2157.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   250.248k i/100ms
       Kernel#format   201.860k i/100ms
            String#%   171.843k i/100ms
Calculating -------------------------------------
         Float#round      2.505M (± 0.6%) i/s -     12.763M in   5.095165s
       Kernel#format      2.013M (± 0.7%) i/s -     10.093M in   5.014476s
            String#%      1.737M (± 0.2%) i/s -      8.764M in   5.046554s

Comparison:
         Float#round:  2504961.0 i/s
       Kernel#format:  2012866.9 i/s - 1.24x  (± 0.00) slower
            String#%:  1736636.1 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   898.517k i/100ms
          OpenStruct   488.500k i/100ms
Calculating -------------------------------------
                Hash      8.906M (± 0.4%) i/s -     44.926M in   5.044714s
          OpenStruct      4.858M (± 0.5%) i/s -     24.425M in   5.028261s

Comparison:
                Hash:  8905675.2 i/s
          OpenStruct:  4857678.3 i/s - 1.83x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.071M i/100ms
          OpenStruct     9.388k i/100ms
Calculating -------------------------------------
                Hash     11.205M (± 1.1%) i/s -     56.764M in   5.066732s
          OpenStruct    107.459k (± 5.1%) i/s -    544.504k in   5.080977s

Comparison:
                Hash: 11204761.4 i/s
          OpenStruct:   107459.0 i/s - 104.27x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   579.746k i/100ms
  ancestors.include?   121.291k i/100ms
Calculating -------------------------------------
  less than or equal      6.073M (± 0.7%) i/s -     30.727M in   5.059964s
  ancestors.include?      1.211M (± 0.8%) i/s -      6.065M in   5.007968s

Comparison:
  less than or equal:  6072823.8 i/s
  ancestors.include?:  1211057.3 i/s - 5.01x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.600  (± 0.0%) i/s -      4.000  in   6.668688s
         Kernel loop      0.205  (± 0.0%) i/s -      2.000  in   9.759920s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 2.93x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.459M i/100ms
         Array#first     1.272M i/100ms
Calculating -------------------------------------
           Array#[0]     14.576M (± 0.2%) i/s -     72.937M in   5.004048s
         Array#first     12.733M (± 0.3%) i/s -     64.855M in   5.093634s

Comparison:
           Array#[0]: 14575614.5 i/s
         Array#first: 12732780.0 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.560M i/100ms
          Array#last     1.324M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.581M (± 0.3%) i/s -     77.979M in   5.004853s
          Array#last     13.226M (± 0.3%) i/s -     66.200M in   5.005195s

Comparison:
          Array#[-1]: 15580714.4 i/s
          Array#last: 13226400.1 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    90.430k i/100ms
Calculating -------------------------------------
                find      0.274  (± 0.0%) i/s -      2.000  in   7.286093s
             bsearch    917.020k (± 0.8%) i/s -      4.612M in   5.029580s

Comparison:
             bsearch:   917019.6 i/s
                find:        0.3 i/s - 3340733.91x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    18.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    187.023  (± 2.1%) i/s -    936.000  in   5.007429s
        Array#insert      1.441  (± 0.0%) i/s -      8.000  in   5.551497s

Comparison:
       Array#unshift:      187.0 i/s
        Array#insert:        1.4 i/s - 129.77x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.139M i/100ms
          Array#size     2.117M i/100ms
         Array#count     1.626M i/100ms
Calculating -------------------------------------
        Array#length     21.257M (± 0.5%) i/s -    106.943M in   5.030954s
          Array#size     21.016M (± 0.4%) i/s -    105.854M in   5.036887s
         Array#count     16.195M (± 0.3%) i/s -     81.320M in   5.021469s

Comparison:
        Array#length: 21257473.9 i/s
          Array#size: 21015988.8 i/s - 1.01x  (± 0.00) slower
         Array#count: 16194604.4 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    44.862k i/100ms
        Array#sample     1.039M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    448.321k (± 0.4%) i/s -      2.243M in   5.003430s
        Array#sample     10.356M (± 2.2%) i/s -     51.938M in   5.018055s

Comparison:
        Array#sample: 10356230.7 i/s
 Array#shuffle.first:   448320.8 i/s - 23.10x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    60.894k i/100ms
          Date.parse    31.199k i/100ms
Calculating -------------------------------------
        Date.iso8601    609.660k (± 0.4%) i/s -      3.106M in   5.094040s
          Date.parse    310.370k (± 0.4%) i/s -      1.560M in   5.026180s

Comparison:
        Date.iso8601:   609660.2 i/s
          Date.parse:   310369.5 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.555k i/100ms
           Array#map    25.534k i/100ms
Calculating -------------------------------------
   Array#each + push    185.479k (± 0.2%) i/s -    927.750k in   5.001943s
           Array#map    254.966k (± 0.5%) i/s -      1.277M in   5.007447s

Comparison:
           Array#map:   254965.7 i/s
   Array#each + push:   185478.5 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    28.453k i/100ms
               #each    31.583k i/100ms
Calculating -------------------------------------
            For loop    289.089k (± 0.4%) i/s -      1.451M in   5.019631s
               #each    315.722k (± 0.3%) i/s -      1.579M in   5.001764s

Comparison:
               #each:   315721.7 i/s
            For loop:   289089.4 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.616k i/100ms
     each_with_index    18.640k i/100ms
Calculating -------------------------------------
          While Loop    276.858k (± 0.7%) i/s -      1.408M in   5.087384s
     each_with_index    186.847k (± 0.3%) i/s -    950.640k in   5.087844s

Comparison:
          While Loop:   276858.2 i/s
     each_with_index:   186847.0 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol   124.726k i/100ms
      inject to_proc     1.765k i/100ms
        inject block     1.887k i/100ms
Calculating -------------------------------------
       inject symbol      1.243M (± 1.0%) i/s -      6.236M in   5.016342s
      inject to_proc     17.596k (± 2.1%) i/s -     88.250k in   5.017908s
        inject block     18.851k (± 0.2%) i/s -     94.350k in   5.005122s

Comparison:
       inject symbol:  1243315.1 i/s
        inject block:    18850.7 i/s - 65.96x  (± 0.00) slower
      inject to_proc:    17595.8 i/s - 70.66x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     7.058k i/100ms
   Array#map.flatten     4.221k i/100ms
      Array#flat_map     8.932k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     71.081k (± 0.5%) i/s -    359.958k in   5.064166s
   Array#map.flatten     41.626k (± 1.5%) i/s -    211.050k in   5.071179s
      Array#flat_map     90.638k (± 0.4%) i/s -    455.532k in   5.025906s

Comparison:
      Array#flat_map:    90638.3 i/s
Array#map.flatten(1):    71081.4 i/s - 1.28x  (± 0.00) slower
   Array#map.flatten:    41626.5 i/s - 2.18x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    30.447k i/100ms
  Array#reverse_each    31.224k i/100ms
Calculating -------------------------------------
  Array#reverse.each    301.095k (± 1.8%) i/s -      1.522M in   5.057852s
  Array#reverse_each    311.328k (± 0.4%) i/s -      1.561M in   5.014712s

Comparison:
  Array#reverse_each:   311328.2 i/s
  Array#reverse.each:   301095.1 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.031k i/100ms
   Enumerable#detect    83.663k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        199.435k (± 0.2%) i/s -      4.006M in  20.087836s
   Enumerable#detect    834.359k (± 1.4%) i/s -     16.733M in  20.059015s

Comparison:
   Enumerable#detect:   834359.1 i/s
Enumerable#select.first:   199435.2 i/s - 4.18x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       247.016k i/100ms
Enumerable#select.last
                        18.036k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.399M (± 2.4%) i/s -     12.104M in   5.047728s
Enumerable#select.last
                        180.176k (± 0.2%) i/s -    901.800k in   5.005140s

Comparison:
Enumerable#reverse.detect:  2399478.3 i/s
Enumerable#select.last:   180175.8 i/s - 13.32x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.970k i/100ms
  Enumerable#sort_by     4.908k i/100ms
     Enumerable#sort     2.425k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         51.764k (± 1.3%) i/s -    263.410k in   5.089521s
  Enumerable#sort_by     49.468k (± 1.3%) i/s -    250.308k in   5.060846s
     Enumerable#sort     24.295k (± 0.7%) i/s -    123.675k in   5.090755s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    51764.2 i/s
  Enumerable#sort_by:    49468.3 i/s - 1.05x  (± 0.00) slower
     Enumerable#sort:    24295.1 i/s - 2.13x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.345k i/100ms
Enumerable#sort_by...first
                         8.618k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    173.279k (± 0.4%) i/s -    867.250k in   5.004992s
Enumerable#sort_by...first
                         86.095k (± 0.6%) i/s -    430.900k in   5.005116s

Comparison:
   Enumerable#min_by:   173279.4 i/s
Enumerable#sort_by...first:    86094.9 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   378.515k i/100ms
            Hash#dup   299.894k i/100ms
Calculating -------------------------------------
              Hash[]      3.772M (± 3.5%) i/s -     18.926M in   5.024454s
            Hash#dup      3.016M (± 2.5%) i/s -     15.295M in   5.074979s

Comparison:
              Hash[]:  3771635.2 i/s
            Hash#dup:  3015675.4 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.418M i/100ms
  Hash#fetch, symbol     1.189M i/100ms
     Hash#[], string     1.235M i/100ms
  Hash#fetch, string   768.982k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.290M (± 0.3%) i/s -     72.337M in   5.061953s
  Hash#fetch, symbol     11.892M (± 0.4%) i/s -     60.655M in   5.100413s
     Hash#[], string     12.213M (± 0.3%) i/s -     61.759M in   5.057070s
  Hash#fetch, string      7.668M (± 0.6%) i/s -     38.449M in   5.014219s

Comparison:
     Hash#[], symbol: 14290357.9 i/s
     Hash#[], string: 12212619.6 i/s - 1.17x  (± 0.00) slower
  Hash#fetch, symbol: 11892336.7 i/s - 1.20x  (± 0.00) slower
  Hash#fetch, string:  7668298.7 i/s - 1.86x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   878.147k i/100ms
             Hash#[]     1.006M i/100ms
          Hash#[] ||   864.609k i/100ms
          Hash#[] &&   386.099k i/100ms
          Hash#fetch   597.834k i/100ms
 Hash#fetch fallback   390.447k i/100ms
Calculating -------------------------------------
            Hash#dig      8.857M (± 0.4%) i/s -     44.785M in   5.056826s
             Hash#[]     10.256M (± 2.6%) i/s -     51.306M in   5.006054s
          Hash#[] ||      8.786M (± 0.3%) i/s -     44.095M in   5.018880s
          Hash#[] &&      4.415M (± 0.6%) i/s -     22.394M in   5.071876s
          Hash#fetch      6.074M (± 0.8%) i/s -     30.490M in   5.020118s
 Hash#fetch fallback      3.920M (± 0.8%) i/s -     19.913M in   5.080593s

Comparison:
             Hash#[]: 10256088.8 i/s
            Hash#dig:  8856563.5 i/s - 1.16x  (± 0.00) slower
          Hash#[] ||:  8785937.1 i/s - 1.17x  (± 0.00) slower
          Hash#fetch:  6073827.5 i/s - 1.69x  (± 0.00) slower
          Hash#[] &&:  4415455.9 i/s - 2.32x  (± 0.00) slower
 Hash#fetch fallback:  3919661.4 i/s - 2.62x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.426M i/100ms
  Hash#fetch + block     1.458M i/100ms
    Hash#fetch + arg     1.097M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.109M (± 3.1%) i/s -     71.312M in   5.059996s
  Hash#fetch + block     14.521M (± 0.5%) i/s -     72.903M in   5.020633s
    Hash#fetch + arg     10.879M (± 2.5%) i/s -     54.871M in   5.047677s

Comparison:
  Hash#fetch + block: 14521032.0 i/s
  Hash#fetch + const: 14108906.5 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 10878794.1 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.254k i/100ms
         sort + to_h    11.108k i/100ms
Calculating -------------------------------------
      sort_by + to_h    271.441k (± 1.2%) i/s -      1.363M in   5.021007s
         sort + to_h    113.472k (± 0.5%) i/s -    577.616k in   5.090519s

Comparison:
      sort_by + to_h:   271441.0 i/s
         sort + to_h:   113472.2 i/s - 2.39x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   194.838k i/100ms
       Hash#each_key   194.941k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.914M (± 0.4%) i/s -      9.742M in   5.089322s
       Hash#each_key      1.935M (± 0.6%) i/s -      9.747M in   5.038725s

Comparison:
       Hash#each_key:  1934507.2 i/s
      Hash#keys.each:  1914223.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.265k i/100ms
           Hash#key?     1.018M i/100ms
Calculating -------------------------------------
  Hash#keys.include?     12.508k (± 4.0%) i/s -     63.250k in   5.066674s
           Hash#key?     10.179M (± 0.3%) i/s -     51.900M in   5.098908s

Comparison:
           Hash#key?: 10178689.0 i/s
  Hash#keys.include?:    12507.5 i/s - 813.80x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.143k i/100ms
            Hash#[]=    10.014k i/100ms
Calculating -------------------------------------
         Hash#merge!     41.532k (± 0.3%) i/s -    211.293k in   5.087534s
            Hash#[]=    100.823k (± 0.5%) i/s -    510.714k in   5.065582s

Comparison:
            Hash#[]=:   100822.6 i/s
         Hash#merge!:    41531.8 i/s - 2.43x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         5.151k i/100ms
      Hash#merge({})     4.117k i/100ms
 Hash#dup#merge!({})     2.735k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         51.731k (± 0.5%) i/s -    262.701k in   5.078320s
      Hash#merge({})     41.094k (± 2.6%) i/s -    205.850k in   5.013516s
 Hash#dup#merge!({})     27.045k (± 0.8%) i/s -    136.750k in   5.056669s

Comparison:
{}#merge!(Hash) do end:    51731.4 i/s
      Hash#merge({}):    41093.5 i/s - 1.26x  (± 0.00) slower
 Hash#dup#merge!({}):    27045.3 i/s - 1.91x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   396.922k i/100ms
          Hash#merge   364.963k i/100ms
Calculating -------------------------------------
        Hash#**other      3.960M (± 0.6%) i/s -     19.846M in   5.011530s
          Hash#merge      3.660M (± 0.6%) i/s -     18.613M in   5.085594s

Comparison:
        Hash#**other:  3960220.6 i/s
          Hash#merge:  3660091.3 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.594k i/100ms
         Hash#merge!     4.083k i/100ms
Calculating -------------------------------------
          Hash#merge     16.315k (± 2.4%) i/s -     82.888k in   5.083537s
         Hash#merge!     40.667k (± 1.2%) i/s -    204.150k in   5.020827s

Comparison:
         Hash#merge!:    40666.9 i/s
          Hash#merge:    16314.5 i/s - 2.49x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      426.805k i/100ms
Array#each             237.913k i/100ms
Array#each_w/_object   173.595k i/100ms
Hash#select-include     70.834k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.267M (± 0.5%) i/s -     21.340M in   5.001160s
Array#each                2.293M (± 0.6%) i/s -     11.658M in   5.085144s
Array#each_w/_object      1.718M (± 0.7%) i/s -      8.680M in   5.052218s
Hash#select-include     693.976k (± 2.5%) i/s -      3.471M in   5.004534s

Comparison:
Hash#native-slice   :  4267156.8 i/s
Array#each          :  2292602.2 i/s - 1.86x  (± 0.00) slower
Array#each_w/_object:  1718088.6 i/s - 2.48x  (± 0.00) slower
Hash#select-include :   693975.6 i/s - 6.15x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     2.679k i/100ms
         Hash#value?     2.539k i/100ms
Calculating -------------------------------------
Hash#values.include?     26.301k (± 5.4%) i/s -    131.271k in   5.010436s
         Hash#value?     25.007k (± 3.3%) i/s -    126.950k in   5.082605s

Comparison:
Hash#values.include?:    26300.8 i/s
         Hash#value?:    25006.7 i/s - same-ish: difference falls within error

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   658.623k i/100ms
                send   494.716k i/100ms
      method_missing   383.795k i/100ms
Calculating -------------------------------------
                call      6.605M (± 0.4%) i/s -     33.590M in   5.085571s
                send      4.954M (± 0.6%) i/s -     25.231M in   5.092718s
      method_missing      3.824M (± 0.5%) i/s -     19.190M in   5.018982s

Comparison:
                call:  6605051.1 i/s
                send:  4954419.2 i/s - 1.33x  (± 0.00) slower
      method_missing:  3823521.0 i/s - 1.73x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     8.608k i/100ms
      Symbol#to_proc     9.280k i/100ms
Calculating -------------------------------------
               Block     87.712k (± 0.2%) i/s -    439.008k in   5.005122s
      Symbol#to_proc     91.542k (± 2.6%) i/s -    464.000k in   5.072689s

Comparison:
      Symbol#to_proc:    91542.4 i/s
               Block:    87712.3 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   883.727k i/100ms
       block + yield   981.560k i/100ms
        unused block     1.308M i/100ms
               yield     1.171M i/100ms
Calculating -------------------------------------
          block.call      8.841M (± 0.2%) i/s -     45.070M in   5.098000s
       block + yield      9.804M (± 0.2%) i/s -     49.078M in   5.006057s
        unused block     13.057M (± 0.6%) i/s -     65.385M in   5.007729s
               yield     11.714M (± 0.3%) i/s -     59.706M in   5.097221s

Comparison:
        unused block: 13057310.2 i/s
               yield: 11713588.2 i/s - 1.11x  (± 0.00) slower
       block + yield:  9803768.0 i/s - 1.33x  (± 0.00) slower
          block.call:  8840763.7 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   317.912k i/100ms
      range#include?    12.604k i/100ms
       range#member?    12.673k i/100ms
       plain compare   532.195k i/100ms
Calculating -------------------------------------
        range#cover?      3.188M (± 0.4%) i/s -     16.214M in   5.085698s
      range#include?    126.321k (± 0.6%) i/s -    642.804k in   5.088800s
       range#member?    126.849k (± 0.7%) i/s -    646.323k in   5.095498s
       plain compare      5.328M (± 0.3%) i/s -     27.142M in   5.093836s

Comparison:
       plain compare:  5328441.0 i/s
        range#cover?:  3188106.9 i/s - 1.67x  (± 0.00) slower
       range#member?:   126848.8 i/s - 42.01x  (± 0.00) slower
      range#include?:   126321.4 i/s - 42.18x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   946.394k i/100ms
           String#=~   653.427k i/100ms
          Regexp#===   600.033k i/100ms
        String#match   486.763k i/100ms
Calculating -------------------------------------
       String#match?      9.389M (± 0.2%) i/s -     47.320M in   5.039966s
           String#=~      6.431M (± 0.4%) i/s -     32.671M in   5.080292s
          Regexp#===      6.009M (± 0.5%) i/s -     30.602M in   5.093186s
        String#match      4.851M (± 0.8%) i/s -     24.338M in   5.017630s

Comparison:
       String#match?:  9388920.8 i/s
           String#=~:  6431126.2 i/s - 1.46x  (± 0.00) slower
          Regexp#===:  6008517.3 i/s - 1.56x  (± 0.00) slower
        String#match:  4850828.6 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   635.271k i/100ms
      String#casecmp   803.116k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.339M (± 2.2%) i/s -     31.764M in   5.013612s
      String#casecmp      7.960M (± 0.6%) i/s -     40.156M in   5.044806s

Comparison:
      String#casecmp:  7960076.5 i/s
String#downcase + ==:  6338924.5 i/s - 1.26x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   585.347k i/100ms
       String#concat   594.964k i/100ms
       String#append   644.239k i/100ms
         "foo" "bar"     1.175M i/100ms
  "#{'foo'}#{'bar'}"     1.179M i/100ms
Calculating -------------------------------------
            String#+      5.862M (± 0.4%) i/s -     29.853M in   5.092471s
       String#concat      5.967M (± 0.5%) i/s -     30.343M in   5.084905s
       String#append      6.461M (± 0.4%) i/s -     32.856M in   5.085026s
         "foo" "bar"     11.714M (± 0.3%) i/s -     58.745M in   5.015113s
  "#{'foo'}#{'bar'}"     11.757M (± 0.3%) i/s -     58.972M in   5.015870s

Comparison:
  "#{'foo'}#{'bar'}": 11757156.9 i/s
         "foo" "bar": 11713744.8 i/s - same-ish: difference falls within error
       String#append:  6461447.8 i/s - 1.82x  (± 0.00) slower
       String#concat:  5967424.2 i/s - 1.97x  (± 0.00) slower
            String#+:  5862236.0 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@   992.610k i/100ms
          String#dup   571.096k i/100ms
Calculating -------------------------------------
           String#+@      9.953M (± 4.0%) i/s -     50.623M in   5.097357s
          String#dup      5.654M (± 0.4%) i/s -     28.555M in   5.050143s

Comparison:
           String#+@:  9953204.9 i/s
          String#dup:  5654340.8 i/s - 1.76x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   174.138k i/100ms
       String#match?   386.955k i/100ms
    String#end_with?   604.755k i/100ms
Calculating -------------------------------------
           String#=~      1.753M (± 0.5%) i/s -      8.881M in   5.066496s
       String#match?      3.891M (± 0.2%) i/s -     19.735M in   5.071289s
    String#end_with?      6.049M (± 0.9%) i/s -     30.843M in   5.099482s

Comparison:
    String#end_with?:  6048691.9 i/s
       String#match?:  3891474.3 i/s - 1.55x  (± 0.00) slower
           String#=~:  1752941.7 i/s - 3.45x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   109.013k i/100ms
          String#sub   135.593k i/100ms
String#dup["string"]=
                       178.426k i/100ms
Calculating -------------------------------------
         String#gsub      1.087M (± 0.7%) i/s -      5.451M in   5.014538s
          String#sub      1.345M (± 0.8%) i/s -      6.780M in   5.041755s
String#dup["string"]=
                          1.770M (± 0.6%) i/s -      8.921M in   5.040390s

Comparison:
String#dup["string"]=:  1770017.1 i/s
          String#sub:  1344788.4 i/s - 1.32x  (± 0.00) slower
         String#gsub:  1087016.8 i/s - 1.63x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    98.383k i/100ms
           String#tr   360.263k i/100ms
Calculating -------------------------------------
         String#gsub    997.234k (± 0.4%) i/s -      5.018M in   5.031537s
           String#tr      3.586M (± 0.3%) i/s -     18.013M in   5.023352s

Comparison:
           String#tr:  3585914.1 i/s
         String#gsub:   997233.8 i/s - 3.60x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.163M i/100ms
         With Freeze     1.665M i/100ms
Calculating -------------------------------------
      Without Freeze     11.563M (± 0.3%) i/s -     58.137M in   5.027796s
         With Freeze     16.624M (± 0.4%) i/s -     83.255M in   5.008241s

Comparison:
         With Freeze: 16623987.8 i/s
      Without Freeze: 11563257.4 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.247k i/100ms
      String#squeeze   153.497k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     33.292k (± 0.6%) i/s -    168.844k in   5.071742s
      String#squeeze      1.546M (± 1.0%) i/s -      7.828M in   5.065508s

Comparison:
      String#squeeze:  1545569.0 i/s
 String#gsub/regex+/:    33292.3 i/s - 46.42x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   257.942k i/100ms
       String#match?   645.106k i/100ms
  String#start_with?   847.455k i/100ms
Calculating -------------------------------------
           String#=~      2.590M (± 1.2%) i/s -     13.155M in   5.079519s
       String#match?      6.364M (± 1.8%) i/s -     32.255M in   5.070553s
  String#start_with?      8.498M (± 2.5%) i/s -     43.220M in   5.089657s

Comparison:
  String#start_with?:  8497958.5 i/s
       String#match?:  6363655.3 i/s - 1.34x  (± 0.00) slower
           String#=~:  2590201.6 i/s - 3.28x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   198.230k i/100ms
    String#[0, n] ==    83.183k i/100ms
   String#[RANGE] ==    73.339k i/100ms
   String#[0...n] ==    46.291k i/100ms
Calculating -------------------------------------
  String#start_with?      2.013M (± 0.4%) i/s -     10.110M in   5.021600s
    String#[0, n] ==    827.595k (± 1.1%) i/s -      4.159M in   5.026161s
   String#[RANGE] ==    740.962k (± 0.6%) i/s -      3.740M in   5.048081s
   String#[0...n] ==    462.569k (± 1.1%) i/s -      2.315M in   5.004247s

Comparison:
  String#start_with?:  2013275.2 i/s
    String#[0, n] ==:   827595.5 i/s - 2.43x  (± 0.00) slower
   String#[RANGE] ==:   740961.8 i/s - 2.72x  (± 0.00) slower
   String#[0...n] ==:   462568.8 i/s - 4.35x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   170.464k i/100ms
 String#sub!'string'   123.403k i/100ms
String#gsub!'string'    75.788k i/100ms
  String#[/regexp/]=   153.075k i/100ms
 String#sub!/regexp/   115.605k i/100ms
String#gsub!/regexp/    59.191k i/100ms
Calculating -------------------------------------
  String#['string']=      1.751M (± 0.9%) i/s -      8.864M in   5.062144s
 String#sub!'string'      1.244M (± 0.4%) i/s -      6.294M in   5.057669s
String#gsub!'string'    775.132k (± 0.5%) i/s -      3.941M in   5.084385s
  String#[/regexp/]=      1.552M (± 0.5%) i/s -      7.807M in   5.029876s
 String#sub!/regexp/      1.157M (± 0.5%) i/s -      5.896M in   5.094536s
String#gsub!/regexp/    585.302k (± 0.6%) i/s -      2.960M in   5.056654s

Comparison:
  String#['string']=:  1751204.9 i/s
  String#[/regexp/]=:  1552128.6 i/s - 1.13x  (± 0.00) slower
 String#sub!'string':  1244382.7 i/s - 1.41x  (± 0.00) slower
 String#sub!/regexp/:  1157314.7 i/s - 1.51x  (± 0.00) slower
String#gsub!'string':   775132.2 i/s - 2.26x  (± 0.00) slower
String#gsub!/regexp/:   585302.2 i/s - 2.99x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   144.060k i/100ms
        String#chomp   547.790k i/100ms
String#delete_suffix   594.567k i/100ms
Calculating -------------------------------------
          String#sub      1.427M (± 0.5%) i/s -      7.203M in   5.048860s
        String#chomp      5.465M (± 0.7%) i/s -     27.390M in   5.012351s
String#delete_suffix      5.786M (± 1.5%) i/s -     29.134M in   5.036472s

Comparison:
String#delete_suffix:  5785876.2 i/s
        String#chomp:  5464639.1 i/s - 1.06x  (± 0.00) slower
          String#sub:  1426692.3 i/s - 4.06x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   608.777k i/100ms
          String#sub   140.487k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.102M (± 0.5%) i/s -     31.048M in   5.088000s
          String#sub      1.392M (± 0.7%) i/s -      7.024M in   5.047434s

Comparison:
String#delete_prefix:  6102312.0 i/s
          String#sub:  1391728.0 i/s - 4.38x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   608.671k i/100ms
    String#unpack[0]   442.008k i/100ms
Calculating -------------------------------------
      String#unpack1      6.034M (± 3.1%) i/s -     30.434M in   5.049710s
    String#unpack[0]      4.456M (± 0.4%) i/s -     22.542M in   5.059090s

Comparison:
      String#unpack1:  6033974.6 i/s
    String#unpack[0]:  4455886.6 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.056k i/100ms
          Time.parse     9.398k i/100ms
Calculating -------------------------------------
        Time.iso8601    268.388k (± 0.4%) i/s -      1.353M in   5.040535s
          Time.parse     92.245k (± 1.0%) i/s -    469.900k in   5.094543s

Comparison:
        Time.iso8601:   268387.7 i/s
          Time.parse:    92244.7 i/s - 2.91x  (± 0.00) slower

