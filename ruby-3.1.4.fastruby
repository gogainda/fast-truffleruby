$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       576.695k i/100ms
Function with splat arguments
                         8.474k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          5.768M (± 0.1%) i/s -     29.411M in   5.099369s
Function with splat arguments
                         87.105k (± 8.6%) i/s -    432.174k in   5.004704s

Comparison:
Function with single Array argument:  5767666.5 i/s
Function with splat arguments:    87104.7 i/s - 66.22x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   995.061k i/100ms
Sequential Assignment
                         1.041M i/100ms
Calculating -------------------------------------
 Parallel Assignment      9.943M (± 0.1%) i/s -     49.753M in   5.003766s
Sequential Assignment
                         10.417M (± 0.1%) i/s -     53.098M in   5.097377s

Comparison:
Sequential Assignment: 10416801.5 i/s
 Parallel Assignment:  9943127.7 i/s - 1.05x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   359.541k i/100ms
       attr_accessor   393.445k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.599M (± 0.1%) i/s -     18.337M in   5.095447s
       attr_accessor      3.930M (± 0.3%) i/s -     19.672M in   5.005121s

Comparison:
       attr_accessor:  3930450.4 i/s
   getter_and_setter:  3598625.4 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    71.319k i/100ms
         respond_to?   574.818k i/100ms
Calculating -------------------------------------
      begin...rescue    715.219k (± 0.2%) i/s -      3.637M in   5.085562s
         respond_to?      5.746M (± 0.1%) i/s -     28.741M in   5.002014s

Comparison:
         respond_to?:  5745870.8 i/s
      begin...rescue:   715219.0 i/s - 8.03x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   231.195k i/100ms
             &method    87.380k i/100ms
Calculating -------------------------------------
              normal      2.310M (± 0.1%) i/s -     11.560M in   5.005047s
             &method    866.466k (± 0.2%) i/s -      4.369M in   5.042352s

Comparison:
              normal:  2309622.4 i/s
             &method:   866466.0 i/s - 2.67x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       175.000  i/100ms
       define_method   219.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.870k (±20.1%) i/s -      8.225k in   5.026637s
       define_method      2.279k (±23.2%) i/s -      9.636k in   5.028269s

Comparison:
       define_method:     2279.4 i/s
module_eval with string:     1870.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   137.464k i/100ms
       Kernel#format   149.843k i/100ms
            String#%   133.937k i/100ms
Calculating -------------------------------------
         Float#round      1.375M (± 0.3%) i/s -      6.873M in   5.000184s
       Kernel#format      1.497M (± 0.8%) i/s -      7.492M in   5.005927s
            String#%      1.346M (± 0.1%) i/s -      6.831M in   5.076182s

Comparison:
       Kernel#format:  1496753.1 i/s
         Float#round:  1374605.7 i/s - 1.09x  (± 0.00) slower
            String#%:  1345655.3 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   667.063k i/100ms
          OpenStruct   352.502k i/100ms
Calculating -------------------------------------
                Hash      6.686M (± 0.1%) i/s -     34.020M in   5.087966s
          OpenStruct      3.529M (± 0.1%) i/s -     17.978M in   5.093999s

Comparison:
                Hash:  6686412.3 i/s
          OpenStruct:  3529174.4 i/s - 1.89x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   870.062k i/100ms
          OpenStruct     8.246k i/100ms
Calculating -------------------------------------
                Hash      9.386M (± 0.2%) i/s -     46.983M in   5.005792s
          OpenStruct     83.822k (± 2.5%) i/s -    420.546k in   5.020428s

Comparison:
                Hash:  9385830.5 i/s
          OpenStruct:    83822.1 i/s - 111.97x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   471.439k i/100ms
  ancestors.include?    86.059k i/100ms
Calculating -------------------------------------
  less than or equal      4.717M (± 0.1%) i/s -     24.043M in   5.096867s
  ancestors.include?    858.865k (± 0.2%) i/s -      4.303M in   5.010065s

Comparison:
  less than or equal:  4717296.2 i/s
  ancestors.include?:   858864.6 i/s - 5.49x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.594  (± 0.0%) i/s -      3.000  in   5.048936s
         Kernel loop      0.175  (± 0.0%) i/s -      1.000  in   5.714041s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 3.40x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.386M i/100ms
         Array#first     1.061M i/100ms
Calculating -------------------------------------
           Array#[0]     13.856M (± 0.3%) i/s -     69.289M in   5.000785s
         Array#first     10.860M (± 0.1%) i/s -     55.170M in   5.080234s

Comparison:
           Array#[0]: 13855726.0 i/s
         Array#first: 10859696.0 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.299M i/100ms
          Array#last     1.223M i/100ms
Calculating -------------------------------------
          Array#[-1]     13.035M (± 0.1%) i/s -     66.243M in   5.081992s
          Array#last     12.240M (± 0.1%) i/s -     62.380M in   5.096507s

Comparison:
          Array#[-1]: 13034846.5 i/s
          Array#last: 12239763.6 i/s - 1.06x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    69.174k i/100ms
Calculating -------------------------------------
                find      0.204  (± 0.0%) i/s -      2.000  in   9.819466s
             bsearch    691.548k (± 0.1%) i/s -      3.459M in   5.001392s

Comparison:
             bsearch:   691548.2 i/s
                find:        0.2 i/s - 3395316.10x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    13.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    141.342  (± 2.8%) i/s -    715.000  in   5.062321s
        Array#insert      1.372  (± 0.0%) i/s -      7.000  in   5.102432s

Comparison:
       Array#unshift:      141.3 i/s
        Array#insert:        1.4 i/s - 103.03x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.847M i/100ms
          Array#size     1.871M i/100ms
         Array#count     1.398M i/100ms
Calculating -------------------------------------
        Array#length     18.437M (± 0.4%) i/s -     92.342M in   5.008614s
          Array#size     18.681M (± 0.2%) i/s -     93.559M in   5.008301s
         Array#count     13.990M (± 0.2%) i/s -     71.312M in   5.097447s

Comparison:
          Array#size: 18680878.9 i/s
        Array#length: 18436889.2 i/s - 1.01x  (± 0.00) slower
         Array#count: 13989849.0 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    32.431k i/100ms
        Array#sample   852.644k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    322.951k (± 0.5%) i/s -      1.622M in   5.021176s
        Array#sample      8.558M (± 0.0%) i/s -     43.485M in   5.081388s

Comparison:
        Array#sample:  8557672.4 i/s
 Array#shuffle.first:   322951.3 i/s - 26.50x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    48.965k i/100ms
          Date.parse    24.751k i/100ms
Calculating -------------------------------------
        Date.iso8601    488.037k (± 0.2%) i/s -      2.448M in   5.016542s
          Date.parse    247.849k (± 0.2%) i/s -      1.262M in   5.093052s

Comparison:
        Date.iso8601:   488036.7 i/s
          Date.parse:   247848.6 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    13.563k i/100ms
           Array#map    18.608k i/100ms
Calculating -------------------------------------
   Array#each + push    135.512k (± 0.7%) i/s -    678.150k in   5.004607s
           Array#map    186.260k (± 0.1%) i/s -    949.008k in   5.095075s

Comparison:
           Array#map:   186260.3 i/s
   Array#each + push:   135512.1 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    23.149k i/100ms
               #each    25.261k i/100ms
Calculating -------------------------------------
            For loop    231.413k (± 0.3%) i/s -      1.157M in   5.001732s
               #each    252.645k (± 0.0%) i/s -      1.288M in   5.099302s

Comparison:
               #each:   252644.6 i/s
            For loop:   231412.6 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    28.598k i/100ms
     each_with_index    14.622k i/100ms
Calculating -------------------------------------
          While Loop    284.991k (± 0.1%) i/s -      1.430M in   5.017352s
     each_with_index    146.249k (± 0.1%) i/s -    745.722k in   5.099002s

Comparison:
          While Loop:   284991.2 i/s
     each_with_index:   146248.7 i/s - 1.95x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    82.138k i/100ms
      inject to_proc     1.462k i/100ms
        inject block     1.540k i/100ms
Calculating -------------------------------------
       inject symbol    820.968k (± 0.4%) i/s -      4.107M in   5.002572s
      inject to_proc     14.595k (± 0.1%) i/s -     73.100k in   5.008703s
        inject block     15.412k (± 0.9%) i/s -     78.540k in   5.096504s

Comparison:
       inject symbol:   820968.1 i/s
        inject block:    15412.0 i/s - 53.27x  (± 0.00) slower
      inject to_proc:    14594.6 i/s - 56.25x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     5.047k i/100ms
   Array#map.flatten     2.708k i/100ms
      Array#flat_map     6.397k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     50.215k (± 1.4%) i/s -    252.350k in   5.026348s
   Array#map.flatten     27.190k (± 0.1%) i/s -    138.108k in   5.079387s
      Array#flat_map     64.756k (± 0.1%) i/s -    326.247k in   5.038088s

Comparison:
      Array#flat_map:    64756.2 i/s
Array#map.flatten(1):    50215.4 i/s - 1.29x  (± 0.00) slower
   Array#map.flatten:    27189.9 i/s - 2.38x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    23.762k i/100ms
  Array#reverse_each    24.737k i/100ms
Calculating -------------------------------------
  Array#reverse.each    240.061k (± 0.1%) i/s -      1.212M in   5.048156s
  Array#reverse_each    248.802k (± 0.0%) i/s -      1.262M in   5.070651s

Comparison:
  Array#reverse_each:   248801.8 i/s
  Array#reverse.each:   240060.8 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        14.937k i/100ms
   Enumerable#detect    59.042k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        149.390k (± 0.2%) i/s -      3.002M in  20.097372s
   Enumerable#detect    590.357k (± 0.1%) i/s -     11.808M in  20.002170s

Comparison:
   Enumerable#detect:   590356.8 i/s
Enumerable#select.first:   149390.0 i/s - 3.95x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       169.826k i/100ms
Enumerable#select.last
                        12.704k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.698M (± 0.2%) i/s -      8.661M in   5.099350s
Enumerable#select.last
                        127.084k (± 0.2%) i/s -    647.904k in   5.098261s

Comparison:
Enumerable#reverse.detect:  1698487.0 i/s
Enumerable#select.last:   127083.7 i/s - 13.37x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.259k i/100ms
  Enumerable#sort_by     3.204k i/100ms
     Enumerable#sort     1.819k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         32.587k (± 0.6%) i/s -    162.950k in   5.000702s
  Enumerable#sort_by     32.081k (± 0.5%) i/s -    163.404k in   5.093519s
     Enumerable#sort     18.219k (± 0.2%) i/s -     92.769k in   5.092000s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    32586.6 i/s
  Enumerable#sort_by:    32081.5 i/s - 1.02x  (± 0.00) slower
     Enumerable#sort:    18218.6 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    12.754k i/100ms
Enumerable#sort_by...first
                         5.931k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    127.698k (± 0.1%) i/s -    650.454k in   5.093712s
Enumerable#sort_by...first
                         59.131k (± 0.2%) i/s -    296.550k in   5.015191s

Comparison:
   Enumerable#min_by:   127697.6 i/s
Enumerable#sort_by...first:    59130.7 i/s - 2.16x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   265.467k i/100ms
            Hash#dup   193.190k i/100ms
Calculating -------------------------------------
              Hash[]      2.534M (± 4.6%) i/s -     12.742M in   5.039082s
            Hash#dup      1.819M (± 4.6%) i/s -      9.080M in   5.003527s

Comparison:
              Hash[]:  2533978.1 i/s
            Hash#dup:  1818672.7 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.236M i/100ms
  Hash#fetch, symbol   972.957k i/100ms
     Hash#[], string   979.122k i/100ms
  Hash#fetch, string   559.285k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     12.364M (± 0.0%) i/s -     61.819M in   5.000039s
  Hash#fetch, symbol      9.727M (± 0.3%) i/s -     48.648M in   5.001429s
     Hash#[], string      9.786M (± 0.3%) i/s -     48.956M in   5.002650s
  Hash#fetch, string      5.591M (± 0.6%) i/s -     28.524M in   5.101844s

Comparison:
     Hash#[], symbol: 12363774.9 i/s
     Hash#[], string:  9786107.6 i/s - 1.26x  (± 0.00) slower
  Hash#fetch, symbol:  9726891.2 i/s - 1.27x  (± 0.00) slower
  Hash#fetch, string:  5591050.3 i/s - 2.21x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   661.203k i/100ms
             Hash#[]   752.541k i/100ms
          Hash#[] ||   635.315k i/100ms
          Hash#[] &&   303.423k i/100ms
          Hash#fetch   466.712k i/100ms
 Hash#fetch fallback   268.436k i/100ms
Calculating -------------------------------------
            Hash#dig      6.614M (± 0.1%) i/s -     33.721M in   5.098413s
             Hash#[]      7.511M (± 0.4%) i/s -     37.627M in   5.009891s
          Hash#[] ||      6.366M (± 0.2%) i/s -     32.401M in   5.089376s
          Hash#[] &&      3.033M (± 0.1%) i/s -     15.171M in   5.002837s
          Hash#fetch      4.666M (± 0.1%) i/s -     23.336M in   5.000812s
 Hash#fetch fallback      2.653M (± 1.3%) i/s -     13.422M in   5.059350s

Comparison:
             Hash#[]:  7510653.2 i/s
            Hash#dig:  6614100.5 i/s - 1.14x  (± 0.00) slower
          Hash#[] ||:  6366431.7 i/s - 1.18x  (± 0.00) slower
          Hash#fetch:  4666372.0 i/s - 1.61x  (± 0.00) slower
          Hash#[] &&:  3032514.3 i/s - 2.48x  (± 0.00) slower
 Hash#fetch fallback:  2653377.6 i/s - 2.83x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.188M i/100ms
  Hash#fetch + block     1.128M i/100ms
    Hash#fetch + arg   810.150k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     11.892M (± 0.2%) i/s -     60.579M in   5.094152s
  Hash#fetch + block     11.276M (± 0.2%) i/s -     56.383M in   5.000293s
    Hash#fetch + arg      8.095M (± 0.1%) i/s -     40.508M in   5.003833s

Comparison:
  Hash#fetch + const: 11891905.6 i/s
  Hash#fetch + block: 11275891.0 i/s - 1.05x  (± 0.00) slower
    Hash#fetch + arg:  8095302.7 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    17.946k i/100ms
         sort + to_h     7.842k i/100ms
Calculating -------------------------------------
      sort_by + to_h    178.198k (± 0.2%) i/s -    897.300k in   5.035429s
         sort + to_h     78.255k (± 0.1%) i/s -    392.100k in   5.010545s

Comparison:
      sort_by + to_h:   178198.2 i/s
         sort + to_h:    78255.1 i/s - 2.28x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   132.077k i/100ms
       Hash#each_key   131.979k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.302M (± 0.2%) i/s -      6.604M in   5.073923s
       Hash#each_key      1.331M (± 0.1%) i/s -      6.731M in   5.056884s

Comparison:
       Hash#each_key:  1331044.5 i/s
      Hash#keys.each:  1301532.4 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   747.000  i/100ms
           Hash#key?   805.797k i/100ms
Calculating -------------------------------------
  Hash#keys.include?      7.382k (± 4.5%) i/s -     37.350k in   5.071800s
           Hash#key?      8.063M (± 0.1%) i/s -     41.096M in   5.096528s

Comparison:
           Hash#key?:  8063473.6 i/s
  Hash#keys.include?:     7381.9 i/s - 1092.33x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     2.828k i/100ms
            Hash#[]=     6.548k i/100ms
Calculating -------------------------------------
         Hash#merge!     28.227k (± 0.3%) i/s -    141.400k in   5.009518s
            Hash#[]=     65.479k (± 0.8%) i/s -    327.400k in   5.000469s

Comparison:
            Hash#[]=:    65478.5 i/s
         Hash#merge!:    28226.5 i/s - 2.32x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.554k i/100ms
      Hash#merge({})     2.832k i/100ms
 Hash#dup#merge!({})     2.115k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         35.111k (± 1.7%) i/s -    177.700k in   5.062650s
      Hash#merge({})     28.220k (± 0.5%) i/s -    141.600k in   5.017756s
 Hash#dup#merge!({})     21.050k (± 0.1%) i/s -    105.750k in   5.023762s

Comparison:
{}#merge!(Hash) do end:    35110.9 i/s
      Hash#merge({}):    28220.5 i/s - 1.24x  (± 0.00) slower
 Hash#dup#merge!({}):    21050.0 i/s - 1.67x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   266.292k i/100ms
          Hash#merge   239.113k i/100ms
Calculating -------------------------------------
        Hash#**other      2.625M (± 2.7%) i/s -     13.315M in   5.076154s
          Hash#merge      2.389M (± 0.7%) i/s -     11.956M in   5.005300s

Comparison:
        Hash#**other:  2625043.0 i/s
          Hash#merge:  2388722.4 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.064k i/100ms
         Hash#merge!     2.795k i/100ms
Calculating -------------------------------------
          Hash#merge     10.725k (± 1.1%) i/s -     54.264k in   5.060063s
         Hash#merge!     28.037k (± 0.1%) i/s -    142.545k in   5.084249s

Comparison:
         Hash#merge!:    28036.6 i/s
          Hash#merge:    10725.2 i/s - 2.61x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      290.441k i/100ms
Array#each             157.022k i/100ms
Array#each_w/_object   114.158k i/100ms
Hash#select-include     50.111k i/100ms
Calculating -------------------------------------
Hash#native-slice         2.903M (± 0.2%) i/s -     14.522M in   5.002664s
Array#each                1.565M (± 0.2%) i/s -      7.851M in   5.015100s
Array#each_w/_object      1.142M (± 0.2%) i/s -      5.822M in   5.099720s
Hash#select-include     506.644k (± 1.3%) i/s -      2.556M in   5.045142s

Comparison:
Hash#native-slice   :  2902878.5 i/s
Array#each          :  1565498.3 i/s - 1.85x  (± 0.00) slower
Array#each_w/_object:  1141645.7 i/s - 2.54x  (± 0.00) slower
Hash#select-include :   506643.6 i/s - 5.73x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.148k i/100ms
         Hash#value?     1.077k i/100ms
Calculating -------------------------------------
Hash#values.include?     11.314k (± 4.9%) i/s -     57.400k in   5.088510s
         Hash#value?     10.782k (± 0.1%) i/s -     54.927k in   5.094442s

Comparison:
Hash#values.include?:    11314.4 i/s
         Hash#value?:    10781.8 i/s - same-ish: difference falls within error

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   494.907k i/100ms
                send   347.243k i/100ms
      method_missing   263.721k i/100ms
Calculating -------------------------------------
                call      4.945M (± 0.1%) i/s -     24.745M in   5.003921s
                send      3.471M (± 0.2%) i/s -     17.362M in   5.002355s
      method_missing      2.634M (± 0.2%) i/s -     13.186M in   5.006767s

Comparison:
                call:  4945197.5 i/s
                send:  3470804.2 i/s - 1.42x  (± 0.00) slower
      method_missing:  2633651.4 i/s - 1.88x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     5.508k i/100ms
      Symbol#to_proc     5.976k i/100ms
Calculating -------------------------------------
               Block     55.403k (± 0.1%) i/s -    280.908k in   5.070274s
      Symbol#to_proc     59.466k (± 0.1%) i/s -    298.800k in   5.024704s

Comparison:
      Symbol#to_proc:    59466.3 i/s
               Block:    55403.0 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   757.336k i/100ms
       block + yield   806.333k i/100ms
        unused block     1.036M i/100ms
               yield     1.011M i/100ms
Calculating -------------------------------------
          block.call      7.569M (± 0.4%) i/s -     37.867M in   5.003216s
       block + yield      8.106M (± 0.1%) i/s -     41.123M in   5.073295s
        unused block     10.337M (± 0.2%) i/s -     51.776M in   5.008691s
               yield     10.111M (± 0.4%) i/s -     51.555M in   5.098944s

Comparison:
        unused block: 10337358.9 i/s
               yield: 10111066.4 i/s - 1.02x  (± 0.00) slower
       block + yield:  8105778.2 i/s - 1.28x  (± 0.00) slower
          block.call:  7568608.6 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   222.549k i/100ms
      range#include?     8.980k i/100ms
       range#member?     9.006k i/100ms
       plain compare   338.538k i/100ms
Calculating -------------------------------------
        range#cover?      2.228M (± 0.1%) i/s -     11.350M in   5.093185s
      range#include?     91.443k (± 0.4%) i/s -    457.980k in   5.008424s
       range#member?     91.488k (± 0.3%) i/s -    459.306k in   5.020431s
       plain compare      3.387M (± 0.1%) i/s -     17.265M in   5.097864s

Comparison:
       plain compare:  3386799.5 i/s
        range#cover?:  2228469.6 i/s - 1.52x  (± 0.00) slower
       range#member?:    91488.0 i/s - 37.02x  (± 0.00) slower
      range#include?:    91443.5 i/s - 37.04x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   726.410k i/100ms
           String#=~   435.586k i/100ms
          Regexp#===   411.928k i/100ms
        String#match   336.344k i/100ms
Calculating -------------------------------------
       String#match?      7.262M (± 0.1%) i/s -     36.320M in   5.001727s
           String#=~      4.334M (± 0.1%) i/s -     21.779M in   5.025682s
          Regexp#===      4.118M (± 0.1%) i/s -     20.596M in   5.002119s
        String#match      3.360M (± 0.1%) i/s -     16.817M in   5.005311s

Comparison:
       String#match?:  7261594.7 i/s
           String#=~:  4333604.2 i/s - 1.68x  (± 0.00) slower
          Regexp#===:  4117538.8 i/s - 1.76x  (± 0.00) slower
        String#match:  3359878.4 i/s - 2.16x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   450.902k i/100ms
      String#casecmp   605.090k i/100ms
Calculating -------------------------------------
String#downcase + ==      4.513M (± 0.1%) i/s -     22.996M in   5.094996s
      String#casecmp      6.041M (± 0.3%) i/s -     30.254M in   5.008054s

Comparison:
      String#casecmp:  6041227.4 i/s
String#downcase + ==:  4513453.0 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   412.022k i/100ms
       String#concat   432.165k i/100ms
       String#append   471.097k i/100ms
         "foo" "bar"   956.215k i/100ms
  "#{'foo'}#{'bar'}"   966.860k i/100ms
Calculating -------------------------------------
            String#+      4.117M (± 0.1%) i/s -     20.601M in   5.004205s
       String#concat      4.316M (± 0.3%) i/s -     21.608M in   5.006671s
       String#append      4.704M (± 0.1%) i/s -     23.555M in   5.007321s
         "foo" "bar"      9.558M (± 0.1%) i/s -     47.811M in   5.002313s
  "#{'foo'}#{'bar'}"      9.668M (± 0.1%) i/s -     48.343M in   5.000574s

Comparison:
  "#{'foo'}#{'bar'}":  9667508.0 i/s
         "foo" "bar":  9557735.5 i/s - 1.01x  (± 0.00) slower
       String#append:  4704085.3 i/s - 2.06x  (± 0.00) slower
       String#concat:  4315921.1 i/s - 2.24x  (± 0.00) slower
            String#+:  4116766.2 i/s - 2.35x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@   818.798k i/100ms
          String#dup   400.953k i/100ms
Calculating -------------------------------------
           String#+@      8.181M (± 0.1%) i/s -     40.940M in   5.004437s
          String#dup      4.010M (± 0.1%) i/s -     20.449M in   5.099870s

Comparison:
           String#+@:  8180728.0 i/s
          String#dup:  4009634.5 i/s - 2.04x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   139.167k i/100ms
       String#match?   311.324k i/100ms
    String#end_with?   432.085k i/100ms
Calculating -------------------------------------
           String#=~      1.396M (± 0.3%) i/s -      7.098M in   5.083734s
       String#match?      3.113M (± 0.0%) i/s -     15.566M in   5.000939s
    String#end_with?      4.320M (± 0.1%) i/s -     21.604M in   5.001393s

Comparison:
    String#end_with?:  4319652.9 i/s
       String#match?:  3112655.8 i/s - 1.39x  (± 0.00) slower
           String#=~:  1396137.2 i/s - 3.09x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    82.510k i/100ms
          String#sub   100.149k i/100ms
String#dup["string"]=
                       130.772k i/100ms
Calculating -------------------------------------
         String#gsub    825.301k (± 0.3%) i/s -      4.208M in   5.098806s
          String#sub      1.034M (± 0.5%) i/s -      5.208M in   5.034466s
String#dup["string"]=
                          1.306M (± 0.2%) i/s -      6.539M in   5.005674s

Comparison:
String#dup["string"]=:  1306242.9 i/s
          String#sub:  1034445.3 i/s - 1.26x  (± 0.00) slower
         String#gsub:   825301.0 i/s - 1.58x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    70.260k i/100ms
           String#tr   264.016k i/100ms
Calculating -------------------------------------
         String#gsub    702.292k (± 0.5%) i/s -      3.513M in   5.002309s
           String#tr      2.637M (± 0.1%) i/s -     13.201M in   5.005729s

Comparison:
           String#tr:  2637140.6 i/s
         String#gsub:   702292.3 i/s - 3.76x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   891.465k i/100ms
         With Freeze     1.548M i/100ms
Calculating -------------------------------------
      Without Freeze      8.942M (± 0.1%) i/s -     45.465M in   5.084447s
         With Freeze     15.612M (± 0.1%) i/s -     78.944M in   5.056683s

Comparison:
         With Freeze: 15611763.8 i/s
      Without Freeze:  8941932.6 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.468k i/100ms
      String#squeeze   107.974k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     24.779k (± 0.6%) i/s -    125.868k in   5.079884s
      String#squeeze      1.073M (± 0.8%) i/s -      5.399M in   5.032255s

Comparison:
      String#squeeze:  1072885.3 i/s
 String#gsub/regex+/:    24778.6 i/s - 43.30x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   207.447k i/100ms
       String#match?   578.424k i/100ms
  String#start_with?   663.520k i/100ms
Calculating -------------------------------------
           String#=~      2.076M (± 0.1%) i/s -     10.580M in   5.097438s
       String#match?      5.784M (± 0.0%) i/s -     28.921M in   5.000012s
  String#start_with?      6.629M (± 0.1%) i/s -     33.176M in   5.004855s

Comparison:
  String#start_with?:  6628772.1 i/s
       String#match?:  5784227.2 i/s - 1.15x  (± 0.00) slower
           String#=~:  2075517.2 i/s - 3.19x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   153.061k i/100ms
    String#[0, n] ==    54.220k i/100ms
   String#[RANGE] ==    49.834k i/100ms
   String#[0...n] ==    32.261k i/100ms
Calculating -------------------------------------
  String#start_with?      1.532M (± 0.1%) i/s -      7.806M in   5.095035s
    String#[0, n] ==    542.886k (± 0.1%) i/s -      2.765M in   5.093568s
   String#[RANGE] ==    496.874k (± 0.2%) i/s -      2.492M in   5.014769s
   String#[0...n] ==    321.739k (± 0.2%) i/s -      1.613M in   5.013559s

Comparison:
  String#start_with?:  1532103.6 i/s
    String#[0, n] ==:   542885.8 i/s - 2.82x  (± 0.00) slower
   String#[RANGE] ==:   496874.0 i/s - 3.08x  (± 0.00) slower
   String#[0...n] ==:   321738.7 i/s - 4.76x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   126.941k i/100ms
 String#sub!'string'    92.430k i/100ms
String#gsub!'string'    58.314k i/100ms
  String#[/regexp/]=   114.404k i/100ms
 String#sub!/regexp/    90.664k i/100ms
String#gsub!/regexp/    46.788k i/100ms
Calculating -------------------------------------
  String#['string']=      1.275M (± 0.6%) i/s -      6.474M in   5.077815s
 String#sub!'string'    933.537k (± 0.4%) i/s -      4.714M in   5.049637s
String#gsub!'string'    584.087k (± 0.5%) i/s -      2.974M in   5.091864s
  String#[/regexp/]=      1.125M (± 0.2%) i/s -      5.720M in   5.086612s
 String#sub!/regexp/    913.131k (± 0.3%) i/s -      4.624M in   5.063780s
String#gsub!/regexp/    477.609k (± 0.5%) i/s -      2.433M in   5.094218s

Comparison:
  String#['string']=:  1275001.3 i/s
  String#[/regexp/]=:  1124566.7 i/s - 1.13x  (± 0.00) slower
 String#sub!'string':   933537.0 i/s - 1.37x  (± 0.00) slower
 String#sub!/regexp/:   913131.1 i/s - 1.40x  (± 0.00) slower
String#gsub!'string':   584087.0 i/s - 2.18x  (± 0.00) slower
String#gsub!/regexp/:   477608.9 i/s - 2.67x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   117.267k i/100ms
        String#chomp   390.703k i/100ms
String#delete_suffix   425.718k i/100ms
Calculating -------------------------------------
          String#sub      1.169M (± 0.5%) i/s -      5.863M in   5.014573s
        String#chomp      3.902M (± 0.1%) i/s -     19.535M in   5.006465s
String#delete_suffix      4.262M (± 0.3%) i/s -     21.712M in   5.094128s

Comparison:
String#delete_suffix:  4262129.6 i/s
        String#chomp:  3901987.3 i/s - 1.09x  (± 0.00) slower
          String#sub:  1169297.5 i/s - 3.65x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   430.554k i/100ms
          String#sub   116.613k i/100ms
Calculating -------------------------------------
String#delete_prefix      4.306M (± 0.1%) i/s -     21.528M in   5.000039s
          String#sub      1.155M (± 0.6%) i/s -      5.831M in   5.047773s

Comparison:
String#delete_prefix:  4305512.8 i/s
          String#sub:  1155135.9 i/s - 3.73x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   428.734k i/100ms
    String#unpack[0]   325.026k i/100ms
Calculating -------------------------------------
      String#unpack1      4.285M (± 0.1%) i/s -     21.437M in   5.002901s
    String#unpack[0]      3.247M (± 0.4%) i/s -     16.251M in   5.005504s

Comparison:
      String#unpack1:  4284855.9 i/s
    String#unpack[0]:  3246753.3 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    21.499k i/100ms
          Time.parse     7.240k i/100ms
Calculating -------------------------------------
        Time.iso8601    215.485k (± 0.6%) i/s -      1.096M in   5.088485s
          Time.parse     71.618k (± 1.3%) i/s -    362.000k in   5.055429s

Comparison:
        Time.iso8601:   215484.8 i/s
          Time.parse:    71618.4 i/s - 3.01x  (± 0.00) slower

