$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       761.181k i/100ms
Function with splat arguments
                        26.221k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.611M (± 2.2%) i/s -     38.059M in   5.003337s
Function with splat arguments
                        257.667k (± 5.7%) i/s -      1.285M in   5.011249s

Comparison:
Function with single Array argument:  7610637.8 i/s
Function with splat arguments:   257667.3 i/s - 29.54x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.009M i/100ms
Sequential Assignment
                         1.015M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.060M (± 0.3%) i/s -     50.449M in   5.014733s
Sequential Assignment
                         10.055M (± 0.9%) i/s -     50.732M in   5.045970s

Comparison:
 Parallel Assignment: 10060328.8 i/s
Sequential Assignment: 10054897.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   477.956k i/100ms
       attr_accessor   554.097k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.807M (± 0.3%) i/s -     24.376M in   5.070704s
       attr_accessor      5.558M (± 0.2%) i/s -     28.259M in   5.084224s

Comparison:
       attr_accessor:  5558179.8 i/s
   getter_and_setter:  4807209.8 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    88.056k i/100ms
         respond_to?   769.107k i/100ms
Calculating -------------------------------------
      begin...rescue    892.318k (± 0.8%) i/s -      4.491M in   5.033135s
         respond_to?      7.640M (± 0.6%) i/s -     38.455M in   5.033462s

Comparison:
         respond_to?:  7640249.3 i/s
      begin...rescue:   892318.0 i/s - 8.56x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   297.943k i/100ms
             &method   121.373k i/100ms
Calculating -------------------------------------
              normal      2.984M (± 0.3%) i/s -     15.195M in   5.092699s
             &method      1.205M (± 0.3%) i/s -      6.069M in   5.034485s

Comparison:
              normal:  2983728.4 i/s
             &method:  1205427.8 i/s - 2.48x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       234.000  i/100ms
       define_method   331.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.290k (±16.5%) i/s -     10.764k in   5.028304s
       define_method      3.096k (±18.0%) i/s -     14.233k in   5.034854s

Comparison:
       define_method:     3095.6 i/s
module_eval with string:     2289.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   261.787k i/100ms
       Kernel#format   206.447k i/100ms
            String#%   178.732k i/100ms
Calculating -------------------------------------
         Float#round      2.656M (± 0.2%) i/s -     13.351M in   5.026217s
       Kernel#format      2.075M (± 0.3%) i/s -     10.529M in   5.074532s
            String#%      1.771M (± 0.2%) i/s -      8.937M in   5.046277s

Comparison:
         Float#round:  2656312.1 i/s
       Kernel#format:  2074856.6 i/s - 1.28x  (± 0.00) slower
            String#%:  1770940.2 i/s - 1.50x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   894.844k i/100ms
          OpenStruct   494.725k i/100ms
Calculating -------------------------------------
                Hash      9.143M (± 0.6%) i/s -     46.532M in   5.089500s
          OpenStruct      5.000M (± 0.5%) i/s -     25.231M in   5.046099s

Comparison:
                Hash:  9143012.6 i/s
          OpenStruct:  5000224.8 i/s - 1.83x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.082M i/100ms
          OpenStruct    10.917k i/100ms
Calculating -------------------------------------
                Hash     11.548M (± 0.4%) i/s -     58.416M in   5.058638s
          OpenStruct    111.002k (± 2.7%) i/s -    556.767k in   5.019398s

Comparison:
                Hash: 11548099.5 i/s
          OpenStruct:   111002.2 i/s - 104.03x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   593.387k i/100ms
  ancestors.include?   122.998k i/100ms
Calculating -------------------------------------
  less than or equal      6.040M (± 0.3%) i/s -     30.263M in   5.010271s
  ancestors.include?      1.209M (± 0.9%) i/s -      6.150M in   5.086151s

Comparison:
  less than or equal:  6040208.7 i/s
  ancestors.include?:  1209246.2 i/s - 5.00x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.728  (± 0.0%) i/s -      4.000  in   5.541090s
         Kernel loop      0.214  (± 0.0%) i/s -      2.000  in   9.339493s

Comparison:
          While Loop:        0.7 i/s
         Kernel loop:        0.2 i/s - 3.40x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.536M i/100ms
         Array#first     1.317M i/100ms
Calculating -------------------------------------
           Array#[0]     15.332M (± 0.2%) i/s -     76.822M in   5.010661s
         Array#first     13.189M (± 0.3%) i/s -     67.179M in   5.093486s

Comparison:
           Array#[0]: 15331782.3 i/s
         Array#first: 13189260.4 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.560M i/100ms
          Array#last     1.322M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.581M (± 0.3%) i/s -     77.984M in   5.005028s
          Array#last     13.201M (± 0.4%) i/s -     66.091M in   5.006435s

Comparison:
          Array#[-1]: 15581358.4 i/s
          Array#last: 13201456.3 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    96.717k i/100ms
Calculating -------------------------------------
                find      0.276  (± 0.0%) i/s -      2.000  in   7.245610s
             bsearch    961.835k (± 2.8%) i/s -      4.836M in   5.032268s

Comparison:
             bsearch:   961834.7 i/s
                find:        0.3 i/s - 3484538.04x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    18.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    189.122  (± 3.7%) i/s -    954.000  in   5.052570s
        Array#insert      1.443  (± 0.0%) i/s -      8.000  in   5.546131s

Comparison:
       Array#unshift:      189.1 i/s
        Array#insert:        1.4 i/s - 131.10x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.113M i/100ms
          Array#size     2.119M i/100ms
         Array#count     1.614M i/100ms
Calculating -------------------------------------
        Array#length     21.201M (± 0.3%) i/s -    107.746M in   5.082087s
          Array#size     21.199M (± 0.2%) i/s -    108.055M in   5.097191s
         Array#count     16.151M (± 0.1%) i/s -     82.319M in   5.096833s

Comparison:
        Array#length: 21201345.6 i/s
          Array#size: 21199140.4 i/s - same-ish: difference falls within error
         Array#count: 16151040.5 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.682k i/100ms
        Array#sample     1.047M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    457.681k (± 0.5%) i/s -      2.330M in   5.090509s
        Array#sample     10.448M (± 0.1%) i/s -     52.326M in   5.008214s

Comparison:
        Array#sample: 10448018.1 i/s
 Array#shuffle.first:   457681.1 i/s - 22.83x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    61.868k i/100ms
          Date.parse    31.692k i/100ms
Calculating -------------------------------------
        Date.iso8601    623.154k (± 0.3%) i/s -      3.155M in   5.063432s
          Date.parse    316.315k (± 0.2%) i/s -      1.585M in   5.009591s

Comparison:
        Date.iso8601:   623154.1 i/s
          Date.parse:   316315.2 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.221k i/100ms
           Array#map    25.524k i/100ms
Calculating -------------------------------------
   Array#each + push    182.230k (± 0.4%) i/s -    929.271k in   5.099524s
           Array#map    255.350k (± 0.2%) i/s -      1.302M in   5.097812s

Comparison:
           Array#map:   255350.4 i/s
   Array#each + push:   182229.6 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    27.326k i/100ms
               #each    30.091k i/100ms
Calculating -------------------------------------
            For loop    272.603k (± 0.4%) i/s -      1.366M in   5.012150s
               #each    300.726k (± 0.3%) i/s -      1.505M in   5.003096s

Comparison:
               #each:   300726.4 i/s
            For loop:   272603.0 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.580k i/100ms
     each_with_index    18.844k i/100ms
Calculating -------------------------------------
          While Loop    275.716k (± 0.2%) i/s -      1.379M in   5.001542s
     each_with_index    188.107k (± 0.3%) i/s -    942.200k in   5.008900s

Comparison:
          While Loop:   275716.5 i/s
     each_with_index:   188107.3 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol   123.109k i/100ms
      inject to_proc     1.760k i/100ms
        inject block     1.943k i/100ms
Calculating -------------------------------------
       inject symbol      1.231M (± 1.7%) i/s -      6.155M in   5.000613s
      inject to_proc     17.664k (± 0.5%) i/s -     89.760k in   5.081702s
        inject block     19.487k (± 0.3%) i/s -     99.093k in   5.085114s

Comparison:
       inject symbol:  1231337.7 i/s
        inject block:    19487.0 i/s - 63.19x  (± 0.00) slower
      inject to_proc:    17663.8 i/s - 69.71x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     7.036k i/100ms
   Array#map.flatten     4.191k i/100ms
      Array#flat_map     9.058k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     73.189k (± 0.9%) i/s -    372.908k in   5.095525s
   Array#map.flatten     43.011k (± 0.4%) i/s -    217.932k in   5.066947s
      Array#flat_map     94.896k (± 0.6%) i/s -    480.074k in   5.059129s

Comparison:
      Array#flat_map:    94895.7 i/s
Array#map.flatten(1):    73189.3 i/s - 1.30x  (± 0.00) slower
   Array#map.flatten:    43011.2 i/s - 2.21x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    29.072k i/100ms
  Array#reverse_each    30.010k i/100ms
Calculating -------------------------------------
  Array#reverse.each    291.641k (± 0.3%) i/s -      1.483M in   5.083959s
  Array#reverse_each    300.095k (± 0.3%) i/s -      1.500M in   5.000134s

Comparison:
  Array#reverse_each:   300094.8 i/s
  Array#reverse.each:   291640.8 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.196k i/100ms
   Enumerable#detect    81.903k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        198.903k (± 0.7%) i/s -      3.979M in  20.003874s
   Enumerable#detect    817.072k (± 0.5%) i/s -     16.381M in  20.048451s

Comparison:
   Enumerable#detect:   817072.5 i/s
Enumerable#select.first:   198902.8 i/s - 4.11x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       243.461k i/100ms
Enumerable#select.last
                        18.538k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.441M (± 0.5%) i/s -     12.417M in   5.086339s
Enumerable#select.last
                        184.978k (± 0.5%) i/s -    926.900k in   5.010992s

Comparison:
Enumerable#reverse.detect:  2441211.4 i/s
Enumerable#select.last:   184978.2 i/s - 13.20x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         5.139k i/100ms
  Enumerable#sort_by     4.878k i/100ms
     Enumerable#sort     2.390k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         52.021k (± 1.0%) i/s -    262.089k in   5.038646s
  Enumerable#sort_by     49.652k (± 3.1%) i/s -    248.778k in   5.016207s
     Enumerable#sort     23.902k (± 0.2%) i/s -    121.890k in   5.099586s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    52020.5 i/s
  Enumerable#sort_by:    49652.4 i/s - 1.05x  (± 0.00) slower
     Enumerable#sort:    23902.1 i/s - 2.18x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.450k i/100ms
Enumerable#sort_by...first
                         8.722k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    174.494k (± 0.3%) i/s -    872.500k in   5.000226s
Enumerable#sort_by...first
                         87.035k (± 0.9%) i/s -    436.100k in   5.011042s

Comparison:
   Enumerable#min_by:   174493.5 i/s
Enumerable#sort_by...first:    87035.0 i/s - 2.00x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   399.692k i/100ms
            Hash#dup   280.802k i/100ms
Calculating -------------------------------------
              Hash[]      4.111M (± 1.9%) i/s -     20.784M in   5.057674s
            Hash#dup      3.075M (± 1.2%) i/s -     15.444M in   5.023271s

Comparison:
              Hash[]:  4110821.3 i/s
            Hash#dup:  3074928.9 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.433M i/100ms
  Hash#fetch, symbol     1.188M i/100ms
     Hash#[], string     1.158M i/100ms
  Hash#fetch, string   767.154k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.196M (± 0.3%) i/s -     71.673M in   5.048764s
  Hash#fetch, symbol     11.736M (± 0.3%) i/s -     59.419M in   5.062940s
     Hash#[], string     11.980M (± 1.7%) i/s -     60.224M in   5.028784s
  Hash#fetch, string      7.653M (± 0.4%) i/s -     38.358M in   5.012297s

Comparison:
     Hash#[], symbol: 14196312.6 i/s
     Hash#[], string: 11979594.4 i/s - 1.19x  (± 0.00) slower
  Hash#fetch, symbol: 11736220.3 i/s - 1.21x  (± 0.00) slower
  Hash#fetch, string:  7652814.2 i/s - 1.86x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   884.076k i/100ms
             Hash#[]   972.723k i/100ms
          Hash#[] ||   861.586k i/100ms
          Hash#[] &&   362.993k i/100ms
          Hash#fetch   586.759k i/100ms
 Hash#fetch fallback   386.355k i/100ms
Calculating -------------------------------------
            Hash#dig      8.789M (± 1.1%) i/s -     44.204M in   5.030165s
             Hash#[]      9.471M (± 1.0%) i/s -     47.663M in   5.033001s
          Hash#[] ||      8.313M (± 3.7%) i/s -     42.218M in   5.086556s
          Hash#[] &&      3.678M (± 3.7%) i/s -     18.513M in   5.039422s
          Hash#fetch      6.082M (± 1.5%) i/s -     30.511M in   5.017494s
 Hash#fetch fallback      3.842M (± 1.4%) i/s -     19.318M in   5.028670s

Comparison:
             Hash#[]:  9471161.5 i/s
            Hash#dig:  8788819.3 i/s - 1.08x  (± 0.00) slower
          Hash#[] ||:  8312745.9 i/s - 1.14x  (± 0.00) slower
          Hash#fetch:  6082322.0 i/s - 1.56x  (± 0.00) slower
 Hash#fetch fallback:  3842256.1 i/s - 2.47x  (± 0.00) slower
          Hash#[] &&:  3678182.4 i/s - 2.57x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.428M i/100ms
  Hash#fetch + block     1.432M i/100ms
    Hash#fetch + arg     1.091M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.445M (± 0.4%) i/s -     72.832M in   5.042079s
  Hash#fetch + block     14.500M (± 0.3%) i/s -     73.052M in   5.038217s
    Hash#fetch + arg     10.915M (± 0.2%) i/s -     55.622M in   5.095956s

Comparison:
  Hash#fetch + block: 14499656.4 i/s
  Hash#fetch + const: 14445050.4 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 10914950.1 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.539k i/100ms
         sort + to_h    11.558k i/100ms
Calculating -------------------------------------
      sort_by + to_h    272.839k (± 0.5%) i/s -      1.377M in   5.046866s
         sort + to_h    114.201k (± 0.8%) i/s -    577.900k in   5.060706s

Comparison:
      sort_by + to_h:   272838.7 i/s
         sort + to_h:   114200.6 i/s - 2.39x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   184.936k i/100ms
       Hash#each_key   192.734k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.868M (± 2.4%) i/s -      9.432M in   5.052811s
       Hash#each_key      1.948M (± 0.6%) i/s -      9.829M in   5.045462s

Comparison:
       Hash#each_key:  1948239.8 i/s
      Hash#keys.each:  1867855.1 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     2.923k i/100ms
           Hash#key?   931.508k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     29.105k (± 5.2%) i/s -    146.150k in   5.042690s
           Hash#key?      9.293M (± 0.2%) i/s -     46.575M in   5.011853s

Comparison:
           Hash#key?:  9293105.9 i/s
  Hash#keys.include?:    29105.1 i/s - 319.29x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.180k i/100ms
            Hash#[]=    10.178k i/100ms
Calculating -------------------------------------
         Hash#merge!     41.585k (± 0.6%) i/s -    209.000k in   5.026060s
            Hash#[]=    102.200k (± 0.5%) i/s -    519.078k in   5.079185s

Comparison:
            Hash#[]=:   102199.6 i/s
         Hash#merge!:    41584.6 i/s - 2.46x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         5.273k i/100ms
      Hash#merge({})     4.206k i/100ms
 Hash#dup#merge!({})     2.757k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         52.438k (± 0.4%) i/s -    263.650k in   5.027933s
      Hash#merge({})     41.707k (± 1.2%) i/s -    210.300k in   5.043119s
 Hash#dup#merge!({})     27.182k (± 0.4%) i/s -    137.850k in   5.071462s

Comparison:
{}#merge!(Hash) do end:    52437.8 i/s
      Hash#merge({}):    41706.6 i/s - 1.26x  (± 0.00) slower
 Hash#dup#merge!({}):    27182.0 i/s - 1.93x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   389.445k i/100ms
          Hash#merge   366.869k i/100ms
Calculating -------------------------------------
        Hash#**other      3.926M (± 0.5%) i/s -     19.862M in   5.059256s
          Hash#merge      3.669M (± 0.7%) i/s -     18.710M in   5.099569s

Comparison:
        Hash#**other:  3925916.0 i/s
          Hash#merge:  3669185.9 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.736k i/100ms
         Hash#merge!     4.045k i/100ms
Calculating -------------------------------------
          Hash#merge     17.020k (± 0.7%) i/s -     86.800k in   5.100273s
         Hash#merge!     40.301k (± 2.9%) i/s -    202.250k in   5.023709s

Comparison:
         Hash#merge!:    40301.2 i/s
          Hash#merge:    17019.7 i/s - 2.37x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      429.390k i/100ms
Array#each             230.665k i/100ms
Array#each_w/_object   174.566k i/100ms
Hash#select-include     77.505k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.239M (± 0.5%) i/s -     21.470M in   5.064488s
Array#each                2.312M (± 0.6%) i/s -     11.764M in   5.087982s
Array#each_w/_object      1.747M (± 0.5%) i/s -      8.903M in   5.097090s
Hash#select-include     791.990k (± 0.5%) i/s -      4.030M in   5.088897s

Comparison:
Hash#native-slice   :  4239313.7 i/s
Array#each          :  2312173.0 i/s - 1.83x  (± 0.00) slower
Array#each_w/_object:  1746692.3 i/s - 2.43x  (± 0.00) slower
Hash#select-include :   791989.8 i/s - 5.35x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.091k i/100ms
         Hash#value?   852.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     10.795k (± 4.0%) i/s -     54.550k in   5.062677s
         Hash#value?      8.559k (± 0.3%) i/s -     43.452k in   5.077013s

Comparison:
Hash#values.include?:    10795.4 i/s
         Hash#value?:     8558.7 i/s - 1.26x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   669.396k i/100ms
                send   503.903k i/100ms
      method_missing   386.017k i/100ms
Calculating -------------------------------------
                call      6.752M (± 0.1%) i/s -     34.139M in   5.055918s
                send      5.099M (± 0.4%) i/s -     25.699M in   5.039935s
      method_missing      3.864M (± 0.3%) i/s -     19.687M in   5.095059s

Comparison:
                call:  6752333.4 i/s
                send:  5099178.1 i/s - 1.32x  (± 0.00) slower
      method_missing:  3863947.4 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     8.693k i/100ms
      Symbol#to_proc     9.297k i/100ms
Calculating -------------------------------------
               Block     86.737k (± 0.3%) i/s -    434.650k in   5.011153s
      Symbol#to_proc     92.761k (± 0.3%) i/s -    464.850k in   5.011337s

Comparison:
      Symbol#to_proc:    92760.6 i/s
               Block:    86737.3 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   935.760k i/100ms
       block + yield   980.362k i/100ms
        unused block     1.299M i/100ms
               yield     1.169M i/100ms
Calculating -------------------------------------
          block.call      9.344M (± 0.2%) i/s -     46.788M in   5.007221s
       block + yield      9.819M (± 0.2%) i/s -     49.998M in   5.092252s
        unused block     13.039M (± 0.2%) i/s -     66.274M in   5.082988s
               yield     11.680M (± 0.5%) i/s -     58.451M in   5.004313s

Comparison:
        unused block: 13038519.6 i/s
               yield: 11680442.6 i/s - 1.12x  (± 0.00) slower
       block + yield:  9818561.3 i/s - 1.33x  (± 0.00) slower
          block.call:  9344144.0 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   312.863k i/100ms
      range#include?    12.764k i/100ms
       range#member?    12.792k i/100ms
       plain compare   531.371k i/100ms
Calculating -------------------------------------
        range#cover?      3.192M (± 0.5%) i/s -     16.269M in   5.096326s
      range#include?    130.378k (± 0.4%) i/s -    663.728k in   5.090875s
       range#member?    130.313k (± 0.4%) i/s -    652.392k in   5.006409s
       plain compare      5.307M (± 0.4%) i/s -     26.569M in   5.006508s

Comparison:
       plain compare:  5306871.9 i/s
        range#cover?:  3192352.7 i/s - 1.66x  (± 0.00) slower
      range#include?:   130378.2 i/s - 40.70x  (± 0.00) slower
       range#member?:   130313.1 i/s - 40.72x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   946.485k i/100ms
           String#=~   647.447k i/100ms
          Regexp#===   598.545k i/100ms
        String#match   484.506k i/100ms
Calculating -------------------------------------
       String#match?      9.382M (± 0.3%) i/s -     47.324M in   5.044449s
           String#=~      6.555M (± 0.6%) i/s -     33.020M in   5.037869s
          Regexp#===      6.002M (± 0.5%) i/s -     30.526M in   5.086449s
        String#match      4.860M (± 0.6%) i/s -     24.710M in   5.084579s

Comparison:
       String#match?:  9381521.5 i/s
           String#=~:  6554587.0 i/s - 1.43x  (± 0.00) slower
          Regexp#===:  6001527.9 i/s - 1.56x  (± 0.00) slower
        String#match:  4859923.6 i/s - 1.93x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   643.290k i/100ms
      String#casecmp   791.658k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.442M (± 0.2%) i/s -     32.808M in   5.092756s
      String#casecmp      7.911M (± 0.4%) i/s -     39.583M in   5.003319s

Comparison:
      String#casecmp:  7911485.6 i/s
String#downcase + ==:  6442067.5 i/s - 1.23x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   578.729k i/100ms
       String#concat   601.763k i/100ms
       String#append   649.854k i/100ms
         "foo" "bar"     1.164M i/100ms
  "#{'foo'}#{'bar'}"     1.152M i/100ms
Calculating -------------------------------------
            String#+      5.801M (± 0.3%) i/s -     29.515M in   5.087655s
       String#concat      5.976M (± 0.6%) i/s -     30.088M in   5.034761s
       String#append      6.454M (± 0.5%) i/s -     32.493M in   5.034405s
         "foo" "bar"     11.578M (± 2.2%) i/s -     58.195M in   5.028811s
  "#{'foo'}#{'bar'}"     11.606M (± 0.5%) i/s -     58.776M in   5.064461s

Comparison:
  "#{'foo'}#{'bar'}": 11605839.2 i/s
         "foo" "bar": 11578456.2 i/s - same-ish: difference falls within error
       String#append:  6454310.2 i/s - 1.80x  (± 0.00) slower
       String#concat:  5976271.7 i/s - 1.94x  (± 0.00) slower
            String#+:  5801395.4 i/s - 2.00x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@     1.001M i/100ms
          String#dup   575.696k i/100ms
Calculating -------------------------------------
           String#+@      9.989M (± 0.7%) i/s -     50.065M in   5.011998s
          String#dup      5.694M (± 1.0%) i/s -     28.785M in   5.055613s

Comparison:
           String#+@:  9989464.9 i/s
          String#dup:  5694164.7 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   187.033k i/100ms
       String#match?   432.731k i/100ms
    String#end_with?   608.438k i/100ms
Calculating -------------------------------------
           String#=~      1.868M (± 0.4%) i/s -      9.352M in   5.006220s
       String#match?      4.321M (± 0.5%) i/s -     21.637M in   5.007885s
    String#end_with?      6.039M (± 1.1%) i/s -     30.422M in   5.038323s

Comparison:
    String#end_with?:  6038802.5 i/s
       String#match?:  4320603.6 i/s - 1.40x  (± 0.00) slower
           String#=~:  1868036.1 i/s - 3.23x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   108.543k i/100ms
          String#sub   137.921k i/100ms
String#dup["string"]=
                       168.009k i/100ms
Calculating -------------------------------------
         String#gsub      1.090M (± 2.2%) i/s -      5.536M in   5.080591s
          String#sub      1.319M (± 0.5%) i/s -      6.620M in   5.019686s
String#dup["string"]=
                          1.650M (± 0.3%) i/s -      8.400M in   5.092236s

Comparison:
String#dup["string"]=:  1649674.7 i/s
          String#sub:  1318884.3 i/s - 1.25x  (± 0.00) slower
         String#gsub:  1090150.5 i/s - 1.51x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    99.942k i/100ms
           String#tr   353.820k i/100ms
Calculating -------------------------------------
         String#gsub      1.004M (± 1.1%) i/s -      5.097M in   5.076974s
           String#tr      3.525M (± 0.3%) i/s -     17.691M in   5.018753s

Comparison:
           String#tr:  3525007.3 i/s
         String#gsub:  1004073.4 i/s - 3.51x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.101M i/100ms
         With Freeze     1.662M i/100ms
Calculating -------------------------------------
      Without Freeze     10.981M (± 0.3%) i/s -     55.030M in   5.011254s
         With Freeze     16.606M (± 0.4%) i/s -     83.116M in   5.005167s

Comparison:
         With Freeze: 16606438.3 i/s
      Without Freeze: 10981434.5 i/s - 1.51x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.319k i/100ms
      String#squeeze   155.338k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     33.446k (± 0.4%) i/s -    169.269k in   5.061005s
      String#squeeze      1.544M (± 0.4%) i/s -      7.767M in   5.028893s

Comparison:
      String#squeeze:  1544475.9 i/s
 String#gsub/regex+/:    33446.3 i/s - 46.18x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   285.392k i/100ms
       String#match?   795.673k i/100ms
  String#start_with?   871.972k i/100ms
Calculating -------------------------------------
           String#=~      2.870M (± 0.3%) i/s -     14.555M in   5.070706s
       String#match?      7.963M (± 1.0%) i/s -     40.579M in   5.096594s
  String#start_with?      8.700M (± 0.4%) i/s -     43.599M in   5.011199s

Comparison:
  String#start_with?:  8700350.6 i/s
       String#match?:  7962884.2 i/s - 1.09x  (± 0.00) slower
           String#=~:  2870426.8 i/s - 3.03x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   198.689k i/100ms
    String#[0, n] ==    84.689k i/100ms
   String#[RANGE] ==    75.538k i/100ms
   String#[0...n] ==    46.585k i/100ms
Calculating -------------------------------------
  String#start_with?      1.993M (± 0.4%) i/s -     10.133M in   5.083959s
    String#[0, n] ==    850.374k (± 0.7%) i/s -      4.319M in   5.079338s
   String#[RANGE] ==    754.862k (± 0.6%) i/s -      3.777M in   5.003625s
   String#[0...n] ==    460.085k (± 0.3%) i/s -      2.329M in   5.062697s

Comparison:
  String#start_with?:  1993191.5 i/s
    String#[0, n] ==:   850374.1 i/s - 2.34x  (± 0.00) slower
   String#[RANGE] ==:   754861.8 i/s - 2.64x  (± 0.00) slower
   String#[0...n] ==:   460084.6 i/s - 4.33x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   172.917k i/100ms
 String#sub!'string'   125.353k i/100ms
String#gsub!'string'    76.965k i/100ms
  String#[/regexp/]=   142.991k i/100ms
 String#sub!/regexp/   108.761k i/100ms
String#gsub!/regexp/    58.013k i/100ms
Calculating -------------------------------------
  String#['string']=      1.755M (± 0.9%) i/s -      8.819M in   5.026585s
 String#sub!'string'      1.243M (± 0.9%) i/s -      6.268M in   5.042385s
String#gsub!'string'    765.898k (± 0.5%) i/s -      3.848M in   5.024604s
  String#[/regexp/]=      1.444M (± 0.4%) i/s -      7.293M in   5.051817s
 String#sub!/regexp/      1.096M (± 0.3%) i/s -      5.547M in   5.060876s
String#gsub!/regexp/    587.815k (± 0.4%) i/s -      2.959M in   5.033417s

Comparison:
  String#['string']=:  1754571.5 i/s
  String#[/regexp/]=:  1443567.1 i/s - 1.22x  (± 0.00) slower
 String#sub!'string':  1243091.3 i/s - 1.41x  (± 0.00) slower
 String#sub!/regexp/:  1096031.3 i/s - 1.60x  (± 0.00) slower
String#gsub!'string':   765898.3 i/s - 2.29x  (± 0.00) slower
String#gsub!/regexp/:   587814.6 i/s - 2.98x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   142.890k i/100ms
        String#chomp   548.556k i/100ms
String#delete_suffix   582.647k i/100ms
Calculating -------------------------------------
          String#sub      1.412M (± 0.5%) i/s -      7.144M in   5.059279s
        String#chomp      5.484M (± 1.1%) i/s -     27.428M in   5.002165s
String#delete_suffix      5.837M (± 0.7%) i/s -     29.715M in   5.091444s

Comparison:
String#delete_suffix:  5836526.4 i/s
        String#chomp:  5483896.9 i/s - 1.06x  (± 0.00) slower
          String#sub:  1412193.9 i/s - 4.13x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   627.873k i/100ms
          String#sub   148.873k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.290M (± 0.5%) i/s -     32.022M in   5.091143s
          String#sub      1.487M (± 0.2%) i/s -      7.444M in   5.004368s

Comparison:
String#delete_prefix:  6289805.2 i/s
          String#sub:  1487437.2 i/s - 4.23x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   602.404k i/100ms
    String#unpack[0]   445.702k i/100ms
Calculating -------------------------------------
      String#unpack1      6.040M (± 0.3%) i/s -     30.723M in   5.086164s
    String#unpack[0]      4.463M (± 0.5%) i/s -     22.731M in   5.092968s

Comparison:
      String#unpack1:  6040487.3 i/s
    String#unpack[0]:  4463300.6 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    28.000k i/100ms
          Time.parse     9.619k i/100ms
Calculating -------------------------------------
        Time.iso8601    277.391k (± 0.5%) i/s -      1.400M in   5.047161s
          Time.parse     95.752k (± 0.7%) i/s -    480.950k in   5.023147s

Comparison:
        Time.iso8601:   277390.5 i/s
          Time.parse:    95752.2 i/s - 2.90x  (± 0.00) slower

