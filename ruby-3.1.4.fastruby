$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       769.128k i/100ms
Function with splat arguments
                        23.543k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.690M (± 0.5%) i/s -     38.456M in   5.000693s
Function with splat arguments
                        238.497k (± 7.4%) i/s -      1.201M in   5.070713s

Comparison:
Function with single Array argument:  7690412.8 i/s
Function with splat arguments:   238496.8 i/s - 32.25x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   991.425k i/100ms
Sequential Assignment
                       967.395k i/100ms
Calculating -------------------------------------
 Parallel Assignment      9.901M (± 0.3%) i/s -     49.571M in   5.006858s
Sequential Assignment
                          9.967M (± 2.0%) i/s -     50.305M in   5.049501s

Comparison:
Sequential Assignment:  9966828.7 i/s
 Parallel Assignment:  9900747.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   456.564k i/100ms
       attr_accessor   560.152k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.493M (± 0.5%) i/s -     22.828M in   5.080990s
       attr_accessor      5.556M (± 0.5%) i/s -     28.008M in   5.040959s

Comparison:
       attr_accessor:  5556172.9 i/s
   getter_and_setter:  4492966.5 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    84.287k i/100ms
         respond_to?   766.656k i/100ms
Calculating -------------------------------------
      begin...rescue    851.704k (± 0.8%) i/s -      4.299M in   5.047428s
         respond_to?      7.622M (± 0.4%) i/s -     38.333M in   5.029095s

Comparison:
         respond_to?:  7622327.1 i/s
      begin...rescue:   851703.6 i/s - 8.95x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   292.308k i/100ms
             &method   121.459k i/100ms
Calculating -------------------------------------
              normal      2.983M (± 0.6%) i/s -     15.200M in   5.094945s
             &method      1.212M (± 0.5%) i/s -      6.073M in   5.011746s

Comparison:
              normal:  2983455.2 i/s
             &method:  1211774.6 i/s - 2.46x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       243.000  i/100ms
       define_method   287.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.198k (±21.0%) i/s -      9.963k in   5.107994s
       define_method      3.159k (±18.5%) i/s -     14.637k in   5.131889s

Comparison:
       define_method:     3159.4 i/s
module_eval with string:     2198.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   263.077k i/100ms
       Kernel#format   204.567k i/100ms
            String#%   178.640k i/100ms
Calculating -------------------------------------
         Float#round      2.642M (± 0.5%) i/s -     13.417M in   5.078887s
       Kernel#format      2.062M (± 0.9%) i/s -     10.433M in   5.059350s
            String#%      1.775M (± 0.9%) i/s -      8.932M in   5.033202s

Comparison:
         Float#round:  2641770.7 i/s
       Kernel#format:  2062258.3 i/s - 1.28x  (± 0.00) slower
            String#%:  1774772.6 i/s - 1.49x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   892.496k i/100ms
          OpenStruct   490.973k i/100ms
Calculating -------------------------------------
                Hash      8.973M (± 0.4%) i/s -     45.517M in   5.072821s
          OpenStruct      4.895M (± 0.3%) i/s -     24.549M in   5.014670s

Comparison:
                Hash:  8972904.5 i/s
          OpenStruct:  4895408.7 i/s - 1.83x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.037M i/100ms
          OpenStruct     9.790k i/100ms
Calculating -------------------------------------
                Hash     10.397M (± 0.4%) i/s -     52.896M in   5.087814s
          OpenStruct     95.876k (± 2.3%) i/s -    479.710k in   5.006167s

Comparison:
                Hash: 10396720.4 i/s
          OpenStruct:    95876.2 i/s - 108.44x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   610.314k i/100ms
  ancestors.include?   123.717k i/100ms
Calculating -------------------------------------
  less than or equal      6.050M (± 0.7%) i/s -     30.516M in   5.044265s
  ancestors.include?      1.213M (± 0.7%) i/s -      6.186M in   5.099057s

Comparison:
  less than or equal:  6049924.4 i/s
  ancestors.include?:  1213200.7 i/s - 4.99x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.660  (± 0.0%) i/s -      4.000  in   6.071356s
         Kernel loop      0.214  (± 0.0%) i/s -      2.000  in   9.329681s

Comparison:
          While Loop:        0.7 i/s
         Kernel loop:        0.2 i/s - 3.08x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.536M i/100ms
         Array#first     1.321M i/100ms
Calculating -------------------------------------
           Array#[0]     15.338M (± 0.3%) i/s -     76.782M in   5.006028s
         Array#first     13.050M (± 0.2%) i/s -     66.045M in   5.060878s

Comparison:
           Array#[0]: 15338018.2 i/s
         Array#first: 13050106.1 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.564M i/100ms
          Array#last     1.328M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.574M (± 0.5%) i/s -     78.184M in   5.020337s
          Array#last     13.235M (± 0.4%) i/s -     66.395M in   5.016625s

Comparison:
          Array#[-1]: 15573901.6 i/s
          Array#last: 13235223.2 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    96.511k i/100ms
Calculating -------------------------------------
                find      0.275  (± 0.0%) i/s -      2.000  in   7.260377s
             bsearch    964.630k (± 1.5%) i/s -      4.826M in   5.003671s

Comparison:
             bsearch:   964630.3 i/s
                find:        0.3 i/s - 3501786.02x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    18.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    190.057  (± 2.1%) i/s -    954.000  in   5.022413s
        Array#insert      1.430  (± 0.0%) i/s -      8.000  in   5.594288s

Comparison:
       Array#unshift:      190.1 i/s
        Array#insert:        1.4 i/s - 132.90x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.113M i/100ms
          Array#size     2.121M i/100ms
         Array#count     1.626M i/100ms
Calculating -------------------------------------
        Array#length     21.075M (± 0.3%) i/s -    105.636M in   5.012402s
          Array#size     21.203M (± 0.5%) i/s -    106.029M in   5.000846s
         Array#count     16.425M (± 0.4%) i/s -     82.919M in   5.048530s

Comparison:
          Array#size: 21202749.9 i/s
        Array#length: 21075281.4 i/s - same-ish: difference falls within error
         Array#count: 16424703.4 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.445k i/100ms
        Array#sample     1.034M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    456.810k (± 0.6%) i/s -      2.318M in   5.073843s
        Array#sample     10.304M (± 0.3%) i/s -     51.715M in   5.018782s

Comparison:
        Array#sample: 10304357.5 i/s
 Array#shuffle.first:   456809.6 i/s - 22.56x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    63.579k i/100ms
          Date.parse    32.119k i/100ms
Calculating -------------------------------------
        Date.iso8601    637.312k (± 0.7%) i/s -      3.243M in   5.088086s
          Date.parse    320.534k (± 0.6%) i/s -      1.606M in   5.010392s

Comparison:
        Date.iso8601:   637311.8 i/s
          Date.parse:   320534.4 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.511k i/100ms
           Array#map    25.700k i/100ms
Calculating -------------------------------------
   Array#each + push    184.939k (± 0.6%) i/s -    925.550k in   5.004785s
           Array#map    255.943k (± 1.4%) i/s -      1.285M in   5.021668s

Comparison:
           Array#map:   255943.1 i/s
   Array#each + push:   184938.9 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    28.745k i/100ms
               #each    31.651k i/100ms
Calculating -------------------------------------
            For loop    288.501k (± 0.3%) i/s -      1.466M in   5.081462s
               #each    316.208k (± 0.4%) i/s -      1.583M in   5.004874s

Comparison:
               #each:   316207.9 i/s
            For loop:   288500.9 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.572k i/100ms
     each_with_index    18.576k i/100ms
Calculating -------------------------------------
          While Loop    277.443k (± 0.8%) i/s -      1.406M in   5.068652s
     each_with_index    187.562k (± 0.4%) i/s -    947.376k in   5.051087s

Comparison:
          While Loop:   277442.6 i/s
     each_with_index:   187561.8 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol   122.988k i/100ms
      inject to_proc     1.733k i/100ms
        inject block     1.978k i/100ms
Calculating -------------------------------------
       inject symbol      1.234M (± 0.9%) i/s -      6.272M in   5.081995s
      inject to_proc     17.388k (± 0.6%) i/s -     88.383k in   5.083283s
        inject block     19.765k (± 0.3%) i/s -     98.900k in   5.003952s

Comparison:
       inject symbol:  1234340.2 i/s
        inject block:    19764.6 i/s - 62.45x  (± 0.00) slower
      inject to_proc:    17387.6 i/s - 70.99x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     7.037k i/100ms
   Array#map.flatten     4.192k i/100ms
      Array#flat_map     8.954k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     70.435k (± 0.7%) i/s -    358.887k in   5.095580s
   Array#map.flatten     41.813k (± 0.9%) i/s -    209.600k in   5.013107s
      Array#flat_map     90.538k (± 0.7%) i/s -    456.654k in   5.044041s

Comparison:
      Array#flat_map:    90538.0 i/s
Array#map.flatten(1):    70434.8 i/s - 1.29x  (± 0.00) slower
   Array#map.flatten:    41813.5 i/s - 2.17x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    30.292k i/100ms
  Array#reverse_each    31.429k i/100ms
Calculating -------------------------------------
  Array#reverse.each    305.216k (± 0.4%) i/s -      1.545M in   5.061725s
  Array#reverse_each    315.835k (± 0.3%) i/s -      1.603M in   5.075084s

Comparison:
  Array#reverse_each:   315835.2 i/s
  Array#reverse.each:   305216.0 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.304k i/100ms
   Enumerable#detect    82.994k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        202.461k (± 0.5%) i/s -      4.061M in  20.057686s
   Enumerable#detect    834.387k (± 0.3%) i/s -     16.765M in  20.092561s

Comparison:
   Enumerable#detect:   834386.6 i/s
Enumerable#select.first:   202461.2 i/s - 4.12x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       245.820k i/100ms
Enumerable#select.last
                        18.378k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.451M (± 0.5%) i/s -     12.291M in   5.014120s
Enumerable#select.last
                        183.213k (± 0.5%) i/s -    918.900k in   5.015568s

Comparison:
Enumerable#reverse.detect:  2451352.0 i/s
Enumerable#select.last:   183213.5 i/s - 13.38x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         5.027k i/100ms
  Enumerable#sort_by     4.851k i/100ms
     Enumerable#sort     2.372k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         50.557k (± 1.4%) i/s -    256.377k in   5.071941s
  Enumerable#sort_by     47.981k (± 1.4%) i/s -    242.550k in   5.056160s
     Enumerable#sort     23.673k (± 0.5%) i/s -    118.600k in   5.010002s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    50557.4 i/s
  Enumerable#sort_by:    47981.3 i/s - 1.05x  (± 0.00) slower
     Enumerable#sort:    23673.2 i/s - 2.14x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.398k i/100ms
Enumerable#sort_by...first
                         8.528k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    174.632k (± 0.2%) i/s -    887.298k in   5.080981s
Enumerable#sort_by...first
                         86.776k (± 0.6%) i/s -    434.928k in   5.012212s

Comparison:
   Enumerable#min_by:   174631.7 i/s
Enumerable#sort_by...first:    86776.4 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   410.501k i/100ms
            Hash#dup   297.847k i/100ms
Calculating -------------------------------------
              Hash[]      3.644M (± 1.3%) i/s -     18.473M in   5.069827s
            Hash#dup      3.185M (± 1.0%) i/s -     16.084M in   5.049955s

Comparison:
              Hash[]:  3644240.9 i/s
            Hash#dup:  3185212.9 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.425M i/100ms
  Hash#fetch, symbol     1.194M i/100ms
     Hash#[], string     1.241M i/100ms
  Hash#fetch, string   791.118k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.184M (± 0.4%) i/s -     71.234M in   5.022348s
  Hash#fetch, symbol     11.653M (± 0.7%) i/s -     58.520M in   5.022215s
     Hash#[], string     12.415M (± 0.2%) i/s -     63.280M in   5.097093s
  Hash#fetch, string      7.891M (± 0.4%) i/s -     39.556M in   5.012683s

Comparison:
     Hash#[], symbol: 14183668.2 i/s
     Hash#[], string: 12414956.7 i/s - 1.14x  (± 0.00) slower
  Hash#fetch, symbol: 11652732.3 i/s - 1.22x  (± 0.00) slower
  Hash#fetch, string:  7891303.8 i/s - 1.80x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   872.634k i/100ms
             Hash#[]   974.187k i/100ms
          Hash#[] ||   871.358k i/100ms
          Hash#[] &&   384.879k i/100ms
          Hash#fetch   587.628k i/100ms
 Hash#fetch fallback   389.437k i/100ms
Calculating -------------------------------------
            Hash#dig      9.083M (± 0.4%) i/s -     46.250M in   5.092070s
             Hash#[]     10.651M (± 0.6%) i/s -     53.580M in   5.030939s
          Hash#[] ||      9.441M (± 0.6%) i/s -     47.925M in   5.076328s
          Hash#[] &&      4.181M (± 2.3%) i/s -     21.168M in   5.065850s
          Hash#fetch      6.133M (± 0.4%) i/s -     31.144M in   5.078631s
 Hash#fetch fallback      3.887M (± 0.8%) i/s -     19.472M in   5.010401s

Comparison:
             Hash#[]: 10650553.1 i/s
          Hash#[] ||:  9441204.6 i/s - 1.13x  (± 0.00) slower
            Hash#dig:  9082856.3 i/s - 1.17x  (± 0.00) slower
          Hash#fetch:  6132528.1 i/s - 1.74x  (± 0.00) slower
          Hash#[] &&:  4180910.0 i/s - 2.55x  (± 0.00) slower
 Hash#fetch fallback:  3886515.2 i/s - 2.74x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.443M i/100ms
  Hash#fetch + block     1.400M i/100ms
    Hash#fetch + arg     1.092M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.311M (± 0.5%) i/s -     72.143M in   5.041292s
  Hash#fetch + block     14.093M (± 0.4%) i/s -     71.404M in   5.066704s
    Hash#fetch + arg     10.899M (± 0.4%) i/s -     54.580M in   5.007818s

Comparison:
  Hash#fetch + const: 14310724.4 i/s
  Hash#fetch + block: 14092944.5 i/s - 1.02x  (± 0.00) slower
    Hash#fetch + arg: 10899177.2 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.226k i/100ms
         sort + to_h    11.979k i/100ms
Calculating -------------------------------------
      sort_by + to_h    276.585k (± 0.3%) i/s -      1.389M in   5.020281s
         sort + to_h    119.863k (± 0.7%) i/s -    610.929k in   5.097198s

Comparison:
      sort_by + to_h:   276585.0 i/s
         sort + to_h:   119862.6 i/s - 2.31x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   191.074k i/100ms
       Hash#each_key   192.031k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.888M (± 0.9%) i/s -      9.554M in   5.060195s
       Hash#each_key      1.897M (± 0.5%) i/s -      9.602M in   5.060967s

Comparison:
       Hash#each_key:  1897217.7 i/s
      Hash#keys.each:  1888179.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.246k i/100ms
           Hash#key?     1.015M i/100ms
Calculating -------------------------------------
  Hash#keys.include?     12.433k (± 4.5%) i/s -     62.300k in   5.021926s
           Hash#key?     10.145M (± 0.3%) i/s -     50.728M in   5.000432s

Comparison:
           Hash#key?: 10144739.6 i/s
  Hash#keys.include?:    12432.9 i/s - 815.96x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.126k i/100ms
            Hash#[]=    10.217k i/100ms
Calculating -------------------------------------
         Hash#merge!     41.459k (± 0.6%) i/s -    210.426k in   5.075717s
            Hash#[]=    102.053k (± 0.7%) i/s -    510.850k in   5.005987s

Comparison:
            Hash#[]=:   102052.6 i/s
         Hash#merge!:    41458.8 i/s - 2.46x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.955k i/100ms
      Hash#merge({})     4.174k i/100ms
 Hash#dup#merge!({})     2.719k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         51.963k (± 0.2%) i/s -    262.615k in   5.053897s
      Hash#merge({})     41.142k (± 0.2%) i/s -    208.700k in   5.072713s
 Hash#dup#merge!({})     27.191k (± 0.2%) i/s -    138.669k in   5.099769s

Comparison:
{}#merge!(Hash) do end:    51963.0 i/s
      Hash#merge({}):    41141.8 i/s - 1.26x  (± 0.00) slower
 Hash#dup#merge!({}):    27191.4 i/s - 1.91x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   390.250k i/100ms
          Hash#merge   366.202k i/100ms
Calculating -------------------------------------
        Hash#**other      3.945M (± 0.6%) i/s -     19.903M in   5.045177s
          Hash#merge      3.664M (± 0.6%) i/s -     18.676M in   5.097871s

Comparison:
        Hash#**other:  3945046.3 i/s
          Hash#merge:  3663702.1 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.711k i/100ms
         Hash#merge!     4.010k i/100ms
Calculating -------------------------------------
          Hash#merge     16.596k (± 4.7%) i/s -     83.839k in   5.067626s
         Hash#merge!     40.141k (± 0.6%) i/s -    204.510k in   5.094891s

Comparison:
         Hash#merge!:    40141.5 i/s
          Hash#merge:    16595.5 i/s - 2.42x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      431.795k i/100ms
Array#each             236.611k i/100ms
Array#each_w/_object   177.112k i/100ms
Hash#select-include     78.480k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.330M (± 0.4%) i/s -     22.022M in   5.085370s
Array#each                2.334M (± 0.9%) i/s -     11.831M in   5.068247s
Array#each_w/_object      1.730M (± 0.4%) i/s -      8.678M in   5.016677s
Hash#select-include     784.828k (± 0.5%) i/s -      3.924M in   4.999929s

Comparison:
Hash#native-slice   :  4330446.9 i/s
Array#each          :  2334440.8 i/s - 1.86x  (± 0.00) slower
Array#each_w/_object:  1729954.1 i/s - 2.50x  (± 0.00) slower
Hash#select-include :   784827.8 i/s - 5.52x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     9.883k i/100ms
         Hash#value?    21.411k i/100ms
Calculating -------------------------------------
Hash#values.include?     98.245k (± 5.6%) i/s -    494.150k in   5.054825s
         Hash#value?    206.954k (± 2.1%) i/s -      1.049M in   5.071639s

Comparison:
         Hash#value?:   206954.1 i/s
Hash#values.include?:    98245.3 i/s - 2.11x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   670.675k i/100ms
                send   487.181k i/100ms
      method_missing   380.131k i/100ms
Calculating -------------------------------------
                call      6.708M (± 0.5%) i/s -     34.204M in   5.098963s
                send      4.987M (± 0.4%) i/s -     25.333M in   5.080015s
      method_missing      3.864M (± 0.6%) i/s -     19.387M in   5.017041s

Comparison:
                call:  6708253.1 i/s
                send:  4986973.9 i/s - 1.35x  (± 0.00) slower
      method_missing:  3864322.7 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     8.786k i/100ms
      Symbol#to_proc     9.406k i/100ms
Calculating -------------------------------------
               Block     87.304k (± 0.7%) i/s -    439.300k in   5.032070s
      Symbol#to_proc     93.929k (± 0.5%) i/s -    470.300k in   5.007083s

Comparison:
      Symbol#to_proc:    93929.0 i/s
               Block:    87303.8 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   907.959k i/100ms
       block + yield   973.140k i/100ms
        unused block     1.251M i/100ms
               yield     1.170M i/100ms
Calculating -------------------------------------
          block.call      9.095M (± 0.4%) i/s -     46.306M in   5.091282s
       block + yield      9.756M (± 0.3%) i/s -     49.630M in   5.087068s
        unused block     12.582M (± 0.2%) i/s -     63.822M in   5.072560s
               yield     11.663M (± 0.3%) i/s -     58.503M in   5.016181s

Comparison:
        unused block: 12581805.2 i/s
               yield: 11662934.4 i/s - 1.08x  (± 0.00) slower
       block + yield:  9756245.7 i/s - 1.29x  (± 0.00) slower
          block.call:  9095284.1 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   319.995k i/100ms
      range#include?    12.859k i/100ms
       range#member?    12.712k i/100ms
       plain compare   523.540k i/100ms
Calculating -------------------------------------
        range#cover?      3.153M (± 1.0%) i/s -     16.000M in   5.075532s
      range#include?    130.848k (± 0.5%) i/s -    655.809k in   5.012118s
       range#member?    129.836k (± 0.3%) i/s -    661.024k in   5.091274s
       plain compare      5.277M (± 0.3%) i/s -     26.701M in   5.059978s

Comparison:
       plain compare:  5276857.4 i/s
        range#cover?:  3152669.0 i/s - 1.67x  (± 0.00) slower
      range#include?:   130847.6 i/s - 40.33x  (± 0.00) slower
       range#member?:   129835.9 i/s - 40.64x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   945.765k i/100ms
           String#=~   653.383k i/100ms
          Regexp#===   594.602k i/100ms
        String#match   486.317k i/100ms
Calculating -------------------------------------
       String#match?      9.400M (± 0.4%) i/s -     47.288M in   5.030535s
           String#=~      6.602M (± 0.5%) i/s -     33.323M in   5.047202s
          Regexp#===      5.942M (± 0.4%) i/s -     29.730M in   5.003072s
        String#match      4.870M (± 0.3%) i/s -     24.802M in   5.092757s

Comparison:
       String#match?:  9400400.2 i/s
           String#=~:  6602364.9 i/s - 1.42x  (± 0.00) slower
          Regexp#===:  5942475.4 i/s - 1.58x  (± 0.00) slower
        String#match:  4870141.8 i/s - 1.93x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   647.722k i/100ms
      String#casecmp   798.711k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.491M (± 0.4%) i/s -     33.034M in   5.088990s
      String#casecmp      7.933M (± 1.9%) i/s -     39.936M in   5.036301s

Comparison:
      String#casecmp:  7932598.3 i/s
String#downcase + ==:  6491351.8 i/s - 1.22x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   578.625k i/100ms
       String#concat   604.169k i/100ms
       String#append   656.032k i/100ms
         "foo" "bar"     1.172M i/100ms
  "#{'foo'}#{'bar'}"     1.171M i/100ms
Calculating -------------------------------------
            String#+      5.760M (± 0.3%) i/s -     28.931M in   5.022812s
       String#concat      5.996M (± 1.1%) i/s -     30.208M in   5.038816s
       String#append      6.504M (± 0.5%) i/s -     32.802M in   5.043237s
         "foo" "bar"     11.662M (± 0.6%) i/s -     58.602M in   5.025386s
  "#{'foo'}#{'bar'}"     11.707M (± 0.3%) i/s -     58.545M in   5.000887s

Comparison:
  "#{'foo'}#{'bar'}": 11707039.6 i/s
         "foo" "bar": 11661550.7 i/s - same-ish: difference falls within error
       String#append:  6504228.6 i/s - 1.80x  (± 0.00) slower
       String#concat:  5995936.3 i/s - 1.95x  (± 0.00) slower
            String#+:  5760015.8 i/s - 2.03x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@     1.003M i/100ms
          String#dup   569.649k i/100ms
Calculating -------------------------------------
           String#+@     10.007M (± 0.4%) i/s -     50.132M in   5.009576s
          String#dup      5.683M (± 0.5%) i/s -     28.482M in   5.011685s

Comparison:
           String#+@: 10007472.3 i/s
          String#dup:  5683325.1 i/s - 1.76x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   184.420k i/100ms
       String#match?   428.348k i/100ms
    String#end_with?   611.319k i/100ms
Calculating -------------------------------------
           String#=~      1.866M (± 0.6%) i/s -      9.405M in   5.039623s
       String#match?      4.267M (± 0.4%) i/s -     21.417M in   5.019841s
    String#end_with?      6.097M (± 0.7%) i/s -     30.566M in   5.013433s

Comparison:
    String#end_with?:  6097141.0 i/s
       String#match?:  4266624.9 i/s - 1.43x  (± 0.00) slower
           String#=~:  1866352.2 i/s - 3.27x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   107.995k i/100ms
          String#sub   129.314k i/100ms
String#dup["string"]=
                       175.372k i/100ms
Calculating -------------------------------------
         String#gsub      1.093M (± 0.5%) i/s -      5.508M in   5.040075s
          String#sub      1.345M (± 0.7%) i/s -      6.724M in   5.001540s
String#dup["string"]=
                          1.772M (± 0.3%) i/s -      8.944M in   5.046444s

Comparison:
String#dup["string"]=:  1772351.9 i/s
          String#sub:  1344520.9 i/s - 1.32x  (± 0.00) slower
         String#gsub:  1092819.4 i/s - 1.62x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    99.658k i/100ms
           String#tr   353.361k i/100ms
Calculating -------------------------------------
         String#gsub      1.002M (± 0.4%) i/s -      5.083M in   5.072653s
           String#tr      3.523M (± 0.5%) i/s -     17.668M in   5.014856s

Comparison:
           String#tr:  3523233.0 i/s
         String#gsub:  1001968.4 i/s - 3.52x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.174M i/100ms
         With Freeze     1.649M i/100ms
Calculating -------------------------------------
      Without Freeze     11.714M (± 0.4%) i/s -     58.705M in   5.011375s
         With Freeze     16.716M (± 0.6%) i/s -     84.085M in   5.030397s

Comparison:
         With Freeze: 16716187.0 i/s
      Without Freeze: 11714498.3 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.337k i/100ms
      String#squeeze   154.285k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     33.291k (± 0.6%) i/s -    166.850k in   5.012043s
      String#squeeze      1.551M (± 1.3%) i/s -      7.869M in   5.075276s

Comparison:
      String#squeeze:  1550643.8 i/s
 String#gsub/regex+/:    33291.1 i/s - 46.58x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   257.929k i/100ms
       String#match?   640.425k i/100ms
  String#start_with?   865.404k i/100ms
Calculating -------------------------------------
           String#=~      2.599M (± 0.3%) i/s -     13.154M in   5.060395s
       String#match?      6.375M (± 4.0%) i/s -     32.021M in   5.034058s
  String#start_with?      8.633M (± 0.5%) i/s -     43.270M in   5.012030s

Comparison:
  String#start_with?:  8633452.5 i/s
       String#match?:  6374522.6 i/s - 1.35x  (± 0.00) slower
           String#=~:  2599496.8 i/s - 3.32x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   208.376k i/100ms
    String#[0, n] ==    84.134k i/100ms
   String#[RANGE] ==    76.471k i/100ms
   String#[0...n] ==    48.047k i/100ms
Calculating -------------------------------------
  String#start_with?      2.014M (± 0.9%) i/s -     10.210M in   5.069583s
    String#[0, n] ==    854.208k (± 0.9%) i/s -      4.291M in   5.023577s
   String#[RANGE] ==    771.164k (± 0.5%) i/s -      3.900M in   5.057427s
   String#[0...n] ==    474.121k (± 1.1%) i/s -      2.402M in   5.067514s

Comparison:
  String#start_with?:  2014206.8 i/s
    String#[0, n] ==:   854208.3 i/s - 2.36x  (± 0.00) slower
   String#[RANGE] ==:   771163.6 i/s - 2.61x  (± 0.00) slower
   String#[0...n] ==:   474121.1 i/s - 4.25x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   174.504k i/100ms
 String#sub!'string'   124.277k i/100ms
String#gsub!'string'    76.633k i/100ms
  String#[/regexp/]=   147.280k i/100ms
 String#sub!/regexp/   110.507k i/100ms
String#gsub!/regexp/    58.854k i/100ms
Calculating -------------------------------------
  String#['string']=      1.785M (± 0.4%) i/s -      9.074M in   5.084018s
 String#sub!'string'      1.237M (± 0.4%) i/s -      6.214M in   5.024182s
String#gsub!'string'    765.491k (± 0.6%) i/s -      3.832M in   5.005693s
  String#[/regexp/]=      1.477M (± 0.9%) i/s -      7.511M in   5.087547s
 String#sub!/regexp/      1.125M (± 0.6%) i/s -      5.636M in   5.011876s
String#gsub!/regexp/    576.942k (± 0.4%) i/s -      2.943M in   5.100604s

Comparison:
  String#['string']=:  1784882.2 i/s
  String#[/regexp/]=:  1476520.3 i/s - 1.21x  (± 0.00) slower
 String#sub!'string':  1236810.1 i/s - 1.44x  (± 0.00) slower
 String#sub!/regexp/:  1124544.4 i/s - 1.59x  (± 0.00) slower
String#gsub!'string':   765491.2 i/s - 2.33x  (± 0.00) slower
String#gsub!/regexp/:   576942.3 i/s - 3.09x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   134.615k i/100ms
        String#chomp   554.592k i/100ms
String#delete_suffix   602.143k i/100ms
Calculating -------------------------------------
          String#sub      1.338M (± 0.8%) i/s -      6.731M in   5.030522s
        String#chomp      5.508M (± 0.5%) i/s -     27.730M in   5.034584s
String#delete_suffix      5.973M (± 0.9%) i/s -     30.107M in   5.040542s

Comparison:
String#delete_suffix:  5973443.8 i/s
        String#chomp:  5507963.0 i/s - 1.08x  (± 0.00) slower
          String#sub:  1338064.7 i/s - 4.46x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   628.452k i/100ms
          String#sub   146.895k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.310M (± 0.3%) i/s -     32.051M in   5.079495s
          String#sub      1.464M (± 0.2%) i/s -      7.345M in   5.015953s

Comparison:
String#delete_prefix:  6309931.3 i/s
          String#sub:  1464283.0 i/s - 4.31x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   600.268k i/100ms
    String#unpack[0]   447.034k i/100ms
Calculating -------------------------------------
      String#unpack1      6.012M (± 0.4%) i/s -     30.614M in   5.092365s
    String#unpack[0]      4.419M (± 0.6%) i/s -     22.352M in   5.058752s

Comparison:
      String#unpack1:  6011783.9 i/s
    String#unpack[0]:  4418575.1 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.767k i/100ms
          Time.parse     9.466k i/100ms
Calculating -------------------------------------
        Time.iso8601    276.814k (± 0.5%) i/s -      1.388M in   5.015590s
          Time.parse     94.680k (± 0.6%) i/s -    482.766k in   5.099139s

Comparison:
        Time.iso8601:   276814.5 i/s
          Time.parse:    94679.6 i/s - 2.92x  (± 0.00) slower

