$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       578.647k i/100ms
Function with splat arguments
                        22.110k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          5.789M (± 0.3%) i/s -     29.511M in   5.097600s
Function with splat arguments
                        217.531k (± 5.2%) i/s -      1.083M in   5.000869s

Comparison:
Function with single Array argument:  5789249.5 i/s
Function with splat arguments:   217531.0 i/s - 26.61x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   932.518k i/100ms
Sequential Assignment
                       943.418k i/100ms
Calculating -------------------------------------
 Parallel Assignment      9.341M (± 0.3%) i/s -     47.558M in   5.091170s
Sequential Assignment
                          9.428M (± 0.1%) i/s -     47.171M in   5.003363s

Comparison:
Sequential Assignment:  9427857.9 i/s
 Parallel Assignment:  9341421.9 i/s - 1.01x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   371.252k i/100ms
       attr_accessor   432.475k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.742M (± 0.4%) i/s -     18.934M in   5.059242s
       attr_accessor      4.399M (± 0.1%) i/s -     22.056M in   5.014195s

Comparison:
       attr_accessor:  4398760.6 i/s
   getter_and_setter:  3742491.9 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    73.276k i/100ms
         respond_to?   592.992k i/100ms
Calculating -------------------------------------
      begin...rescue    742.495k (± 1.0%) i/s -      3.737M in   5.033693s
         respond_to?      5.983M (± 0.2%) i/s -     30.243M in   5.055078s

Comparison:
         respond_to?:  5982639.9 i/s
      begin...rescue:   742495.0 i/s - 8.06x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   243.657k i/100ms
             &method    88.830k i/100ms
Calculating -------------------------------------
              normal      2.437M (± 0.1%) i/s -     12.427M in   5.098849s
             &method    887.648k (± 0.2%) i/s -      4.442M in   5.003696s

Comparison:
              normal:  2437120.9 i/s
             &method:   887647.6 i/s - 2.75x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       205.000  i/100ms
       define_method   248.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.004k (±20.4%) i/s -      9.020k in   5.024981s
       define_method      2.659k (±15.8%) i/s -     12.648k in   5.096758s

Comparison:
       define_method:     2659.0 i/s
module_eval with string:     2004.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   140.089k i/100ms
       Kernel#format   153.104k i/100ms
            String#%   134.375k i/100ms
Calculating -------------------------------------
         Float#round      1.407M (± 0.1%) i/s -      7.145M in   5.078332s
       Kernel#format      1.531M (± 0.1%) i/s -      7.655M in   5.000575s
            String#%      1.351M (± 0.2%) i/s -      6.853M in   5.073961s

Comparison:
       Kernel#format:  1530865.1 i/s
         Float#round:  1406867.5 i/s - 1.09x  (± 0.00) slower
            String#%:  1350649.2 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   703.256k i/100ms
          OpenStruct   372.292k i/100ms
Calculating -------------------------------------
                Hash      7.036M (± 0.1%) i/s -     35.866M in   5.097520s
          OpenStruct      3.683M (± 0.1%) i/s -     18.615M in   5.054095s

Comparison:
                Hash:  7035989.2 i/s
          OpenStruct:  3683074.1 i/s - 1.91x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   882.136k i/100ms
          OpenStruct     8.651k i/100ms
Calculating -------------------------------------
                Hash      9.454M (± 0.2%) i/s -     47.635M in   5.038811s
          OpenStruct     86.726k (± 2.2%) i/s -    441.201k in   5.089799s

Comparison:
                Hash:  9453728.0 i/s
          OpenStruct:    86726.3 i/s - 109.01x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   500.564k i/100ms
  ancestors.include?    99.947k i/100ms
Calculating -------------------------------------
  less than or equal      4.966M (± 3.9%) i/s -     25.028M in   5.049386s
  ancestors.include?    999.157k (± 0.2%) i/s -      4.997M in   5.001595s

Comparison:
  less than or equal:  4966169.4 i/s
  ancestors.include?:   999157.3 i/s - 4.97x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.463  (± 0.0%) i/s -      3.000  in   6.486343s
         Kernel loop      0.179  (± 0.0%) i/s -      1.000  in   5.580614s

Comparison:
          While Loop:        0.5 i/s
         Kernel loop:        0.2 i/s - 2.58x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.305M i/100ms
         Array#first     1.098M i/100ms
Calculating -------------------------------------
           Array#[0]     13.025M (± 0.2%) i/s -     65.268M in   5.011105s
         Array#first     10.956M (± 0.1%) i/s -     54.919M in   5.012933s

Comparison:
           Array#[0]: 13024622.8 i/s
         Array#first: 10955513.8 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.288M i/100ms
          Array#last     1.101M i/100ms
Calculating -------------------------------------
          Array#[-1]     12.872M (± 0.2%) i/s -     64.424M in   5.004944s
          Array#last     11.000M (± 0.2%) i/s -     55.073M in   5.006592s

Comparison:
          Array#[-1]: 12872080.2 i/s
          Array#last: 11000082.9 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    70.306k i/100ms
Calculating -------------------------------------
                find      0.207  (± 0.0%) i/s -      2.000  in   9.666001s
             bsearch    704.492k (± 0.1%) i/s -      3.586M in   5.089635s

Comparison:
             bsearch:   704492.0 i/s
                find:        0.2 i/s - 3404809.87x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    14.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    146.838  (± 2.7%) i/s -    742.000  in   5.056467s
        Array#insert      1.151  (± 0.0%) i/s -      6.000  in   5.211799s

Comparison:
       Array#unshift:      146.8 i/s
        Array#insert:        1.2 i/s - 127.55x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.898M i/100ms
          Array#size     1.895M i/100ms
         Array#count     1.248M i/100ms
Calculating -------------------------------------
        Array#length     18.924M (± 0.5%) i/s -     94.890M in   5.014414s
          Array#size     18.932M (± 0.7%) i/s -     94.733M in   5.004219s
         Array#count     12.465M (± 0.1%) i/s -     62.412M in   5.006836s

Comparison:
          Array#size: 18931572.1 i/s
        Array#length: 18923961.2 i/s - same-ish: difference falls within error
         Array#count: 12465387.2 i/s - 1.52x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    34.324k i/100ms
        Array#sample   828.842k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    341.848k (± 0.5%) i/s -      1.716M in   5.020478s
        Array#sample      8.284M (± 0.1%) i/s -     41.442M in   5.002837s

Comparison:
        Array#sample:  8283727.8 i/s
 Array#shuffle.first:   341848.1 i/s - 24.23x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    46.436k i/100ms
          Date.parse    23.769k i/100ms
Calculating -------------------------------------
        Date.iso8601    465.171k (± 0.3%) i/s -      2.368M in   5.091141s
          Date.parse    235.330k (± 0.2%) i/s -      1.188M in   5.050175s

Comparison:
        Date.iso8601:   465171.0 i/s
          Date.parse:   235329.6 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    14.412k i/100ms
           Array#map    20.275k i/100ms
Calculating -------------------------------------
   Array#each + push    144.154k (± 0.4%) i/s -    735.012k in   5.098891s
           Array#map    204.778k (± 0.4%) i/s -      1.034M in   5.049582s

Comparison:
           Array#map:   204778.5 i/s
   Array#each + push:   144154.0 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    22.020k i/100ms
               #each    24.250k i/100ms
Calculating -------------------------------------
            For loop    220.270k (± 0.1%) i/s -      1.123M in   5.098391s
               #each    242.675k (± 0.1%) i/s -      1.237M in   5.096330s

Comparison:
               #each:   242674.8 i/s
            For loop:   220269.6 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    24.555k i/100ms
     each_with_index    14.033k i/100ms
Calculating -------------------------------------
          While Loop    245.594k (± 0.2%) i/s -      1.252M in   5.099104s
     each_with_index    138.196k (± 0.1%) i/s -    701.650k in   5.077220s

Comparison:
          While Loop:   245594.0 i/s
     each_with_index:   138195.9 i/s - 1.78x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    71.368k i/100ms
      inject to_proc     1.722k i/100ms
        inject block     1.573k i/100ms
Calculating -------------------------------------
       inject symbol    712.195k (± 0.1%) i/s -      3.568M in   5.010431s
      inject to_proc     17.237k (± 0.2%) i/s -     87.822k in   5.095067s
        inject block     15.731k (± 0.3%) i/s -     80.223k in   5.099593s

Comparison:
       inject symbol:   712195.5 i/s
      inject to_proc:    17236.7 i/s - 41.32x  (± 0.00) slower
        inject block:    15731.4 i/s - 45.27x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     5.515k i/100ms
   Array#map.flatten     2.980k i/100ms
      Array#flat_map     7.126k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     55.313k (± 0.2%) i/s -    281.265k in   5.084948s
   Array#map.flatten     29.837k (± 0.3%) i/s -    151.980k in   5.093750s
      Array#flat_map     71.180k (± 0.2%) i/s -    356.300k in   5.005632s

Comparison:
      Array#flat_map:    71180.0 i/s
Array#map.flatten(1):    55313.4 i/s - 1.29x  (± 0.00) slower
   Array#map.flatten:    29836.8 i/s - 2.39x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    22.599k i/100ms
  Array#reverse_each    23.325k i/100ms
Calculating -------------------------------------
  Array#reverse.each    226.310k (± 0.2%) i/s -      1.153M in   5.092813s
  Array#reverse_each    233.334k (± 0.1%) i/s -      1.190M in   5.098160s

Comparison:
  Array#reverse_each:   233334.2 i/s
  Array#reverse.each:   226310.3 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        14.955k i/100ms
   Enumerable#detect    62.522k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        149.036k (± 0.4%) i/s -      2.991M in  20.069248s
   Enumerable#detect    624.021k (± 0.1%) i/s -     12.504M in  20.038431s

Comparison:
   Enumerable#detect:   624021.2 i/s
Enumerable#select.first:   149036.0 i/s - 4.19x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       178.948k i/100ms
Enumerable#select.last
                        14.468k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.797M (± 0.7%) i/s -      9.126M in   5.078788s
Enumerable#select.last
                        144.773k (± 0.5%) i/s -    737.868k in   5.096842s

Comparison:
Enumerable#reverse.detect:  1797041.4 i/s
Enumerable#select.last:   144773.0 i/s - 12.41x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.819k i/100ms
  Enumerable#sort_by     3.636k i/100ms
     Enumerable#sort     1.839k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         38.188k (± 0.6%) i/s -    190.950k in   5.000379s
  Enumerable#sort_by     36.431k (± 0.3%) i/s -    185.436k in   5.090191s
     Enumerable#sort     18.362k (± 0.2%) i/s -     91.950k in   5.007643s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    38188.4 i/s
  Enumerable#sort_by:    36430.5 i/s - 1.05x  (± 0.00) slower
     Enumerable#sort:    18362.0 i/s - 2.08x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    13.759k i/100ms
Enumerable#sort_by...first
                         6.870k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    137.499k (± 0.4%) i/s -    687.950k in   5.003405s
Enumerable#sort_by...first
                         67.930k (± 0.6%) i/s -    343.500k in   5.056857s

Comparison:
   Enumerable#min_by:   137499.0 i/s
Enumerable#sort_by...first:    67930.1 i/s - 2.02x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   296.845k i/100ms
            Hash#dup   216.137k i/100ms
Calculating -------------------------------------
              Hash[]      2.642M (± 0.6%) i/s -     13.358M in   5.056418s
            Hash#dup      2.152M (± 0.6%) i/s -     10.807M in   5.022387s

Comparison:
              Hash[]:  2641883.9 i/s
            Hash#dup:  2151816.1 i/s - 1.23x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.075M i/100ms
  Hash#fetch, symbol   901.847k i/100ms
     Hash#[], string   883.147k i/100ms
  Hash#fetch, string   578.302k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     10.740M (± 0.1%) i/s -     53.742M in   5.003960s
  Hash#fetch, symbol      9.165M (± 0.0%) i/s -     45.994M in   5.018494s
     Hash#[], string      8.830M (± 0.3%) i/s -     44.157M in   5.000878s
  Hash#fetch, string      5.773M (± 0.1%) i/s -     28.915M in   5.009112s

Comparison:
     Hash#[], symbol: 10739844.0 i/s
  Hash#fetch, symbol:  9164941.4 i/s - 1.17x  (± 0.00) slower
     Hash#[], string:  8829977.3 i/s - 1.22x  (± 0.00) slower
  Hash#fetch, string:  5772502.8 i/s - 1.86x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   697.243k i/100ms
             Hash#[]   737.992k i/100ms
          Hash#[] ||   702.386k i/100ms
          Hash#[] &&   326.374k i/100ms
          Hash#fetch   508.442k i/100ms
 Hash#fetch fallback   309.342k i/100ms
Calculating -------------------------------------
            Hash#dig      6.919M (± 0.2%) i/s -     34.862M in   5.038734s
             Hash#[]      7.443M (± 0.4%) i/s -     37.638M in   5.056554s
          Hash#[] ||      7.034M (± 0.7%) i/s -     35.822M in   5.092776s
          Hash#[] &&      3.259M (± 0.2%) i/s -     16.319M in   5.007483s
          Hash#fetch      5.092M (± 0.3%) i/s -     25.931M in   5.092696s
 Hash#fetch fallback      3.064M (± 1.6%) i/s -     15.467M in   5.049808s

Comparison:
             Hash#[]:  7443433.2 i/s
          Hash#[] ||:  7034168.2 i/s - 1.06x  (± 0.00) slower
            Hash#dig:  6918857.7 i/s - 1.08x  (± 0.00) slower
          Hash#fetch:  5091756.9 i/s - 1.46x  (± 0.00) slower
          Hash#[] &&:  3258874.2 i/s - 2.28x  (± 0.00) slower
 Hash#fetch fallback:  3063782.2 i/s - 2.43x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.141M i/100ms
  Hash#fetch + block     1.146M i/100ms
    Hash#fetch + arg   848.452k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     11.418M (± 0.1%) i/s -     58.213M in   5.098576s
  Hash#fetch + block     11.457M (± 0.1%) i/s -     57.293M in   5.000629s
    Hash#fetch + arg      8.483M (± 0.1%) i/s -     42.423M in   5.001082s

Comparison:
  Hash#fetch + block: 11457254.4 i/s
  Hash#fetch + const: 11417562.4 i/s - 1.00x  (± 0.00) slower
    Hash#fetch + arg:  8482690.2 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    20.848k i/100ms
         sort + to_h     8.645k i/100ms
Calculating -------------------------------------
      sort_by + to_h    206.810k (± 1.3%) i/s -      1.042M in   5.041213s
         sort + to_h     86.612k (± 0.2%) i/s -    440.895k in   5.090499s

Comparison:
      sort_by + to_h:   206810.4 i/s
         sort + to_h:    86611.7 i/s - 2.39x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   151.871k i/100ms
       Hash#each_key   161.596k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.534M (± 0.3%) i/s -      7.745M in   5.049732s
       Hash#each_key      1.614M (± 0.1%) i/s -      8.080M in   5.006063s

Comparison:
       Hash#each_key:  1614003.5 i/s
      Hash#keys.each:  1533840.0 i/s - 1.05x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.007k i/100ms
           Hash#key?   750.737k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     10.000k (± 4.4%) i/s -     50.350k in   5.046708s
           Hash#key?      7.503M (± 0.3%) i/s -     37.537M in   5.003058s

Comparison:
           Hash#key?:  7502836.0 i/s
  Hash#keys.include?:     9999.9 i/s - 750.29x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     2.965k i/100ms
            Hash#[]=     7.561k i/100ms
Calculating -------------------------------------
         Hash#merge!     29.203k (± 1.6%) i/s -    148.250k in   5.077881s
            Hash#[]=     75.420k (± 0.8%) i/s -    378.050k in   5.012860s

Comparison:
            Hash#[]=:    75420.4 i/s
         Hash#merge!:    29202.6 i/s - 2.58x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.782k i/100ms
      Hash#merge({})     2.979k i/100ms
 Hash#dup#merge!({})     2.152k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         37.623k (± 0.1%) i/s -    189.100k in   5.026201s
      Hash#merge({})     29.640k (± 0.1%) i/s -    148.950k in   5.025330s
 Hash#dup#merge!({})     21.396k (± 0.1%) i/s -    107.600k in   5.028891s

Comparison:
{}#merge!(Hash) do end:    37622.9 i/s
      Hash#merge({}):    29639.9 i/s - 1.27x  (± 0.00) slower
 Hash#dup#merge!({}):    21396.4 i/s - 1.76x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   281.712k i/100ms
          Hash#merge   258.659k i/100ms
Calculating -------------------------------------
        Hash#**other      2.810M (± 0.4%) i/s -     14.086M in   5.011940s
          Hash#merge      2.589M (± 0.4%) i/s -     13.192M in   5.094725s

Comparison:
        Hash#**other:  2810458.2 i/s
          Hash#merge:  2589310.6 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.250k i/100ms
         Hash#merge!     2.998k i/100ms
Calculating -------------------------------------
          Hash#merge     12.529k (± 1.6%) i/s -     63.750k in   5.089639s
         Hash#merge!     29.991k (± 0.3%) i/s -    152.898k in   5.098161s

Comparison:
         Hash#merge!:    29991.0 i/s
          Hash#merge:    12528.9 i/s - 2.39x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      317.306k i/100ms
Array#each             169.673k i/100ms
Array#each_w/_object   121.240k i/100ms
Hash#select-include     57.220k i/100ms
Calculating -------------------------------------
Hash#native-slice         3.159M (± 0.6%) i/s -     15.865M in   5.023101s
Array#each                1.694M (± 0.8%) i/s -      8.484M in   5.009541s
Array#each_w/_object      1.198M (± 0.4%) i/s -      6.062M in   5.062191s
Hash#select-include     574.146k (± 0.4%) i/s -      2.918M in   5.082780s

Comparison:
Hash#native-slice   :  3158572.7 i/s
Array#each          :  1693618.0 i/s - 1.86x  (± 0.00) slower
Array#each_w/_object:  1197528.6 i/s - 2.64x  (± 0.00) slower
Hash#select-include :   574145.9 i/s - 5.50x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   960.000  i/100ms
         Hash#value?   833.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      9.316k (± 4.4%) i/s -     47.040k in   5.060284s
         Hash#value?      8.343k (± 0.3%) i/s -     42.483k in   5.091882s

Comparison:
Hash#values.include?:     9315.9 i/s
         Hash#value?:     8343.4 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   533.545k i/100ms
                send   338.562k i/100ms
      method_missing   267.051k i/100ms
Calculating -------------------------------------
                call      5.343M (± 0.4%) i/s -     27.211M in   5.092801s
                send      3.385M (± 0.1%) i/s -     16.928M in   5.001574s
      method_missing      2.669M (± 0.2%) i/s -     13.353M in   5.003563s

Comparison:
                call:  5343098.6 i/s
                send:  3384559.1 i/s - 1.58x  (± 0.00) slower
      method_missing:  2668618.6 i/s - 2.00x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     6.974k i/100ms
      Symbol#to_proc     7.863k i/100ms
Calculating -------------------------------------
               Block     69.666k (± 0.6%) i/s -    348.700k in   5.005464s
      Symbol#to_proc     78.379k (± 0.8%) i/s -    393.150k in   5.016338s

Comparison:
      Symbol#to_proc:    78378.6 i/s
               Block:    69666.5 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   779.592k i/100ms
       block + yield   849.724k i/100ms
        unused block     1.078M i/100ms
               yield   986.762k i/100ms
Calculating -------------------------------------
          block.call      7.788M (± 0.2%) i/s -     38.980M in   5.005265s
       block + yield      8.487M (± 0.2%) i/s -     42.486M in   5.005993s
        unused block     10.120M (± 0.2%) i/s -     50.657M in   5.005648s
               yield      9.796M (± 0.1%) i/s -     49.338M in   5.036678s

Comparison:
        unused block: 10119936.9 i/s
               yield:  9795773.6 i/s - 1.03x  (± 0.00) slower
       block + yield:  8487109.9 i/s - 1.19x  (± 0.00) slower
          block.call:  7787740.6 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   244.001k i/100ms
      range#include?     8.981k i/100ms
       range#member?     8.334k i/100ms
       plain compare   359.912k i/100ms
Calculating -------------------------------------
        range#cover?      2.439M (± 0.1%) i/s -     12.200M in   5.002578s
      range#include?     83.926k (± 3.8%) i/s -    422.107k in   5.036172s
       range#member?     88.931k (± 4.7%) i/s -    450.036k in   5.071621s
       plain compare      3.600M (± 0.1%) i/s -     18.356M in   5.098108s

Comparison:
       plain compare:  3600461.3 i/s
        range#cover?:  2438753.4 i/s - 1.48x  (± 0.00) slower
       range#member?:    88931.2 i/s - 40.49x  (± 0.00) slower
      range#include?:    83925.9 i/s - 42.90x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   720.542k i/100ms
           String#=~   485.760k i/100ms
          Regexp#===   442.765k i/100ms
        String#match   350.830k i/100ms
Calculating -------------------------------------
       String#match?      7.184M (± 0.4%) i/s -     36.027M in   5.014652s
           String#=~      4.832M (± 0.7%) i/s -     24.288M in   5.026856s
          Regexp#===      4.465M (± 0.2%) i/s -     22.581M in   5.057299s
        String#match      3.506M (± 0.4%) i/s -     17.542M in   5.002967s

Comparison:
       String#match?:  7184474.8 i/s
           String#=~:  4831873.4 i/s - 1.49x  (± 0.00) slower
          Regexp#===:  4465055.3 i/s - 1.61x  (± 0.00) slower
        String#match:  3506282.5 i/s - 2.05x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   458.040k i/100ms
      String#casecmp   569.283k i/100ms
Calculating -------------------------------------
String#downcase + ==      4.574M (± 0.3%) i/s -     22.902M in   5.006848s
      String#casecmp      5.689M (± 0.2%) i/s -     28.464M in   5.003422s

Comparison:
      String#casecmp:  5688950.1 i/s
String#downcase + ==:  4574170.3 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   448.049k i/100ms
       String#concat   470.475k i/100ms
       String#append   516.933k i/100ms
         "foo" "bar"   964.879k i/100ms
  "#{'foo'}#{'bar'}"   970.226k i/100ms
Calculating -------------------------------------
            String#+      4.465M (± 0.9%) i/s -     22.402M in   5.017852s
       String#concat      4.693M (± 0.9%) i/s -     23.524M in   5.013283s
       String#append      5.146M (± 0.5%) i/s -     25.847M in   5.022596s
         "foo" "bar"      9.662M (± 0.7%) i/s -     49.209M in   5.093501s
  "#{'foo'}#{'bar'}"      9.690M (± 0.1%) i/s -     48.511M in   5.006081s

Comparison:
  "#{'foo'}#{'bar'}":  9690479.9 i/s
         "foo" "bar":  9661566.2 i/s - same-ish: difference falls within error
       String#append:  5146192.0 i/s - 1.88x  (± 0.00) slower
       String#concat:  4692664.1 i/s - 2.07x  (± 0.00) slower
            String#+:  4464949.1 i/s - 2.17x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@   813.631k i/100ms
          String#dup   419.353k i/100ms
Calculating -------------------------------------
           String#+@      8.132M (± 0.4%) i/s -     40.682M in   5.002685s
          String#dup      4.192M (± 0.2%) i/s -     20.968M in   5.002174s

Comparison:
           String#+@:  8132053.0 i/s
          String#dup:  4191721.1 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   146.457k i/100ms
       String#match?   339.564k i/100ms
    String#end_with?   464.481k i/100ms
Calculating -------------------------------------
           String#=~      1.475M (± 0.2%) i/s -      7.469M in   5.062604s
       String#match?      3.367M (± 2.6%) i/s -     16.978M in   5.046161s
    String#end_with?      4.639M (± 0.1%) i/s -     23.224M in   5.006645s

Comparison:
    String#end_with?:  4638654.1 i/s
       String#match?:  3367061.8 i/s - 1.38x  (± 0.00) slower
           String#=~:  1475393.4 i/s - 3.14x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    78.918k i/100ms
          String#sub    98.938k i/100ms
String#dup["string"]=
                       140.913k i/100ms
Calculating -------------------------------------
         String#gsub    789.192k (± 0.3%) i/s -      3.946M in   4.999969s
          String#sub      1.003M (± 3.3%) i/s -      5.046M in   5.035923s
String#dup["string"]=
                          1.415M (± 0.5%) i/s -      7.187M in   5.077332s

Comparison:
String#dup["string"]=:  1415463.7 i/s
          String#sub:  1003023.8 i/s - 1.41x  (± 0.00) slower
         String#gsub:   789192.4 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    72.554k i/100ms
           String#tr   274.640k i/100ms
Calculating -------------------------------------
         String#gsub    732.122k (± 3.9%) i/s -      3.700M in   5.061580s
           String#tr      2.740M (± 0.7%) i/s -     13.732M in   5.011745s

Comparison:
           String#tr:  2740120.3 i/s
         String#gsub:   732122.0 i/s - 3.74x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   938.437k i/100ms
         With Freeze     1.457M i/100ms
Calculating -------------------------------------
      Without Freeze      9.395M (± 0.3%) i/s -     47.860M in   5.094386s
         With Freeze     14.545M (± 0.2%) i/s -     72.872M in   5.010122s

Comparison:
         With Freeze: 14544992.7 i/s
      Without Freeze:  9394772.8 i/s - 1.55x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.582k i/100ms
      String#squeeze   133.300k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     25.819k (± 0.2%) i/s -    129.100k in   5.000198s
      String#squeeze      1.321M (± 0.8%) i/s -      6.665M in   5.044998s

Comparison:
      String#squeeze:  1321189.3 i/s
 String#gsub/regex+/:    25819.0 i/s - 51.17x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   214.930k i/100ms
       String#match?   587.141k i/100ms
  String#start_with?   663.402k i/100ms
Calculating -------------------------------------
           String#=~      2.166M (± 0.2%) i/s -     10.961M in   5.060230s
       String#match?      5.872M (± 0.1%) i/s -     29.944M in   5.099167s
  String#start_with?      6.623M (± 0.1%) i/s -     33.170M in   5.008622s

Comparison:
  String#start_with?:  6622602.7 i/s
       String#match?:  5872370.6 i/s - 1.13x  (± 0.00) slower
           String#=~:  2166201.3 i/s - 3.06x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   185.090k i/100ms
    String#[0, n] ==    67.816k i/100ms
   String#[RANGE] ==    61.241k i/100ms
   String#[0...n] ==    35.245k i/100ms
Calculating -------------------------------------
  String#start_with?      1.857M (± 0.2%) i/s -      9.440M in   5.083664s
    String#[0, n] ==    680.054k (± 0.9%) i/s -      3.459M in   5.086261s
   String#[RANGE] ==    611.529k (± 0.8%) i/s -      3.062M in   5.007502s
   String#[0...n] ==    356.324k (± 0.4%) i/s -      1.797M in   5.044636s

Comparison:
  String#start_with?:  1856857.4 i/s
    String#[0, n] ==:   680053.6 i/s - 2.73x  (± 0.00) slower
   String#[RANGE] ==:   611529.0 i/s - 3.04x  (± 0.00) slower
   String#[0...n] ==:   356324.2 i/s - 5.21x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   136.574k i/100ms
 String#sub!'string'    91.209k i/100ms
String#gsub!'string'    58.541k i/100ms
  String#[/regexp/]=   119.518k i/100ms
 String#sub!/regexp/    92.972k i/100ms
String#gsub!/regexp/    46.354k i/100ms
Calculating -------------------------------------
  String#['string']=      1.344M (± 1.8%) i/s -      6.829M in   5.083357s
 String#sub!'string'    910.262k (± 1.4%) i/s -      4.560M in   5.010963s
String#gsub!'string'    583.231k (± 0.4%) i/s -      2.927M in   5.018746s
  String#[/regexp/]=      1.151M (± 2.9%) i/s -      5.856M in   5.093951s
 String#sub!/regexp/    938.996k (± 1.4%) i/s -      4.742M in   5.050666s
String#gsub!/regexp/    470.485k (± 0.8%) i/s -      2.364M in   5.025063s

Comparison:
  String#['string']=:  1343795.6 i/s
  String#[/regexp/]=:  1150601.9 i/s - 1.17x  (± 0.00) slower
 String#sub!/regexp/:   938995.9 i/s - 1.43x  (± 0.00) slower
 String#sub!'string':   910261.9 i/s - 1.48x  (± 0.00) slower
String#gsub!'string':   583231.0 i/s - 2.30x  (± 0.00) slower
String#gsub!/regexp/:   470485.3 i/s - 2.86x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   117.910k i/100ms
        String#chomp   421.845k i/100ms
String#delete_suffix   461.239k i/100ms
Calculating -------------------------------------
          String#sub      1.164M (± 1.7%) i/s -      5.896M in   5.068069s
        String#chomp      4.213M (± 0.3%) i/s -     21.092M in   5.006426s
String#delete_suffix      4.608M (± 0.4%) i/s -     23.062M in   5.004293s

Comparison:
String#delete_suffix:  4608498.6 i/s
        String#chomp:  4213063.7 i/s - 1.09x  (± 0.00) slower
          String#sub:  1163630.3 i/s - 3.96x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   485.995k i/100ms
          String#sub   120.111k i/100ms
Calculating -------------------------------------
String#delete_prefix      4.843M (± 0.1%) i/s -     24.300M in   5.017337s
          String#sub      1.191M (± 0.9%) i/s -      6.006M in   5.044523s

Comparison:
String#delete_prefix:  4843166.7 i/s
          String#sub:  1190600.3 i/s - 4.07x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   458.444k i/100ms
    String#unpack[0]   344.901k i/100ms
Calculating -------------------------------------
      String#unpack1      4.590M (± 0.6%) i/s -     23.381M in   5.093832s
    String#unpack[0]      3.465M (± 0.6%) i/s -     17.590M in   5.076892s

Comparison:
      String#unpack1:  4590140.1 i/s
    String#unpack[0]:  3464849.3 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    21.589k i/100ms
          Time.parse     7.492k i/100ms
Calculating -------------------------------------
        Time.iso8601    220.727k (± 0.3%) i/s -      1.123M in   5.086081s
          Time.parse     75.038k (± 0.1%) i/s -    382.092k in   5.091967s

Comparison:
        Time.iso8601:   220727.0 i/s
          Time.parse:    75038.3 i/s - 2.94x  (± 0.00) slower

