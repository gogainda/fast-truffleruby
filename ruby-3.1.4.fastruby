$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       576.149k i/100ms
Function with splat arguments
                         8.367k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          5.764M (± 0.1%) i/s -     29.384M in   5.097800s
Function with splat arguments
                         80.101k (± 5.1%) i/s -    401.616k in   5.032715s

Comparison:
Function with single Array argument:  5763983.5 i/s
Function with splat arguments:    80100.5 i/s - 71.96x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   972.918k i/100ms
Sequential Assignment
                         1.044M i/100ms
Calculating -------------------------------------
 Parallel Assignment      9.723M (± 0.0%) i/s -     48.646M in   5.003360s
Sequential Assignment
                         10.399M (± 0.3%) i/s -     52.184M in   5.018240s

Comparison:
Sequential Assignment: 10398953.0 i/s
 Parallel Assignment:  9722648.5 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   355.758k i/100ms
       attr_accessor   404.451k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.562M (± 0.1%) i/s -     18.144M in   5.093425s
       attr_accessor      4.049M (± 0.1%) i/s -     20.627M in   5.093829s

Comparison:
       attr_accessor:  4049411.2 i/s
   getter_and_setter:  3562174.9 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    73.759k i/100ms
         respond_to?   570.854k i/100ms
Calculating -------------------------------------
      begin...rescue    740.024k (± 0.3%) i/s -      3.762M in   5.083265s
         respond_to?      5.705M (± 0.4%) i/s -     28.543M in   5.002902s

Comparison:
         respond_to?:  5705309.4 i/s
      begin...rescue:   740023.8 i/s - 7.71x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   226.280k i/100ms
             &method    87.788k i/100ms
Calculating -------------------------------------
              normal      2.266M (± 0.1%) i/s -     11.540M in   5.091821s
             &method    876.717k (± 0.1%) i/s -      4.389M in   5.006636s

Comparison:
              normal:  2266436.6 i/s
             &method:   876717.3 i/s - 2.59x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       164.000  i/100ms
       define_method   209.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.774k (±21.1%) i/s -      7.708k in   5.012892s
       define_method      2.272k (±21.2%) i/s -     10.241k in   5.057467s

Comparison:
       define_method:     2271.7 i/s
module_eval with string:     1774.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   140.450k i/100ms
       Kernel#format   150.217k i/100ms
            String#%   133.454k i/100ms
Calculating -------------------------------------
         Float#round      1.398M (± 0.1%) i/s -      7.022M in   5.022231s
       Kernel#format      1.502M (± 0.1%) i/s -      7.511M in   5.001398s
            String#%      1.340M (± 0.1%) i/s -      6.806M in   5.079889s

Comparison:
       Kernel#format:  1501750.6 i/s
         Float#round:  1398283.7 i/s - 1.07x  (± 0.00) slower
            String#%:  1339824.3 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   669.472k i/100ms
          OpenStruct   360.556k i/100ms
Calculating -------------------------------------
                Hash      6.693M (± 0.1%) i/s -     33.474M in   5.001545s
          OpenStruct      3.604M (± 0.1%) i/s -     18.028M in   5.001937s

Comparison:
                Hash:  6692656.4 i/s
          OpenStruct:  3604166.7 i/s - 1.86x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   867.800k i/100ms
          OpenStruct     8.377k i/100ms
Calculating -------------------------------------
                Hash      9.327M (± 0.4%) i/s -     46.861M in   5.024354s
          OpenStruct     84.377k (± 2.9%) i/s -    427.227k in   5.067831s

Comparison:
                Hash:  9326933.5 i/s
          OpenStruct:    84377.2 i/s - 110.54x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   473.073k i/100ms
  ancestors.include?    86.859k i/100ms
Calculating -------------------------------------
  less than or equal      4.733M (± 0.1%) i/s -     24.127M in   5.097225s
  ancestors.include?    867.589k (± 0.2%) i/s -      4.343M in   5.005788s

Comparison:
  less than or equal:  4733307.7 i/s
  ancestors.include?:   867589.2 i/s - 5.46x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.595  (± 0.0%) i/s -      3.000  in   5.038009s
         Kernel loop      0.176  (± 0.0%) i/s -      1.000  in   5.677746s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 3.38x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.389M i/100ms
         Array#first     1.223M i/100ms
Calculating -------------------------------------
           Array#[0]     13.881M (± 0.1%) i/s -     69.429M in   5.001752s
         Array#first     12.228M (± 0.1%) i/s -     61.169M in   5.002550s

Comparison:
           Array#[0]: 13881004.9 i/s
         Array#first: 12227542.9 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.303M i/100ms
          Array#last     1.200M i/100ms
Calculating -------------------------------------
          Array#[-1]     13.044M (± 0.1%) i/s -     66.477M in   5.096547s
          Array#last     12.016M (± 0.1%) i/s -     61.182M in   5.091585s

Comparison:
          Array#[-1]: 13043567.9 i/s
          Array#last: 12016213.2 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    68.043k i/100ms
Calculating -------------------------------------
                find      0.205  (± 0.0%) i/s -      2.000  in   9.772258s
             bsearch    680.509k (± 0.1%) i/s -      3.470M in   5.099409s

Comparison:
             bsearch:   680509.1 i/s
                find:        0.2 i/s - 3325054.78x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    13.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    140.838  (± 2.8%) i/s -    715.000  in   5.080025s
        Array#insert      1.303  (± 0.0%) i/s -      7.000  in   5.421796s

Comparison:
       Array#unshift:      140.8 i/s
        Array#insert:        1.3 i/s - 108.09x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.840M i/100ms
          Array#size     1.862M i/100ms
         Array#count     1.391M i/100ms
Calculating -------------------------------------
        Array#length     18.389M (± 0.4%) i/s -     91.986M in   5.002379s
          Array#size     18.614M (± 0.3%) i/s -     93.094M in   5.001187s
         Array#count     13.908M (± 0.2%) i/s -     69.568M in   5.002096s

Comparison:
          Array#size: 18614498.4 i/s
        Array#length: 18388674.0 i/s - 1.01x  (± 0.00) slower
         Array#count: 13907915.2 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    31.670k i/100ms
        Array#sample   827.775k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    315.705k (± 0.5%) i/s -      1.584M in   5.015892s
        Array#sample      8.277M (± 0.0%) i/s -     41.389M in   5.000557s

Comparison:
        Array#sample:  8276829.2 i/s
 Array#shuffle.first:   315705.1 i/s - 26.22x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    48.764k i/100ms
          Date.parse    24.478k i/100ms
Calculating -------------------------------------
        Date.iso8601    489.761k (± 0.6%) i/s -      2.487M in   5.078100s
          Date.parse    244.398k (± 0.4%) i/s -      1.224M in   5.007882s

Comparison:
        Date.iso8601:   489761.3 i/s
          Date.parse:   244398.0 i/s - 2.00x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    13.127k i/100ms
           Array#map    18.442k i/100ms
Calculating -------------------------------------
   Array#each + push    131.269k (± 0.3%) i/s -    669.477k in   5.100066s
           Array#map    184.446k (± 0.1%) i/s -    940.542k in   5.099282s

Comparison:
           Array#map:   184446.3 i/s
   Array#each + push:   131269.4 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    23.141k i/100ms
               #each    25.227k i/100ms
Calculating -------------------------------------
            For loop    231.419k (± 0.1%) i/s -      1.180M in   5.099802s
               #each    252.300k (± 0.1%) i/s -      1.287M in   5.099387s

Comparison:
               #each:   252300.4 i/s
            For loop:   231419.0 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    28.461k i/100ms
     each_with_index    14.597k i/100ms
Calculating -------------------------------------
          While Loop    282.727k (± 0.1%) i/s -      1.423M in   5.033296s
     each_with_index    146.454k (± 0.1%) i/s -    744.447k in   5.083139s

Comparison:
          While Loop:   282727.4 i/s
     each_with_index:   146454.3 i/s - 1.93x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    82.778k i/100ms
      inject to_proc     1.457k i/100ms
        inject block     1.462k i/100ms
Calculating -------------------------------------
       inject symbol    827.737k (± 0.0%) i/s -      4.139M in   5.000260s
      inject to_proc     14.562k (± 0.1%) i/s -     72.850k in   5.002851s
        inject block     14.624k (± 0.1%) i/s -     74.562k in   5.098531s

Comparison:
       inject symbol:   827737.0 i/s
        inject block:    14624.2 i/s - 56.60x  (± 0.00) slower
      inject to_proc:    14561.7 i/s - 56.84x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     5.051k i/100ms
   Array#map.flatten     2.718k i/100ms
      Array#flat_map     6.494k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     50.645k (± 0.1%) i/s -    257.601k in   5.086389s
   Array#map.flatten     27.149k (± 0.2%) i/s -    135.900k in   5.005734s
      Array#flat_map     64.865k (± 0.1%) i/s -    324.700k in   5.005764s

Comparison:
      Array#flat_map:    64865.3 i/s
Array#map.flatten(1):    50645.2 i/s - 1.28x  (± 0.00) slower
   Array#map.flatten:    27149.0 i/s - 2.39x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    23.002k i/100ms
  Array#reverse_each    24.028k i/100ms
Calculating -------------------------------------
  Array#reverse.each    229.779k (± 0.2%) i/s -      1.150M in   5.005257s
  Array#reverse_each    240.315k (± 0.0%) i/s -      1.225M in   5.099249s

Comparison:
  Array#reverse_each:   240315.4 i/s
  Array#reverse.each:   229779.3 i/s - 1.05x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        14.402k i/100ms
   Enumerable#detect    58.838k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        144.050k (± 0.1%) i/s -      2.895M in  20.095908s
   Enumerable#detect    587.544k (± 0.4%) i/s -     11.768M in  20.028739s

Comparison:
   Enumerable#detect:   587543.5 i/s
Enumerable#select.first:   144049.6 i/s - 4.08x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       169.908k i/100ms
Enumerable#select.last
                        12.733k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.700M (± 0.1%) i/s -      8.665M in   5.098345s
Enumerable#select.last
                        127.329k (± 0.1%) i/s -    636.650k in   5.000066s

Comparison:
Enumerable#reverse.detect:  1699635.0 i/s
Enumerable#select.last:   127328.6 i/s - 13.35x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.271k i/100ms
  Enumerable#sort_by     3.124k i/100ms
     Enumerable#sort     1.766k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         32.672k (± 0.3%) i/s -    163.550k in   5.005883s
  Enumerable#sort_by     31.207k (± 0.2%) i/s -    156.200k in   5.005249s
     Enumerable#sort     17.669k (± 0.2%) i/s -     90.066k in   5.097439s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    32671.8 i/s
  Enumerable#sort_by:    31207.4 i/s - 1.05x  (± 0.00) slower
     Enumerable#sort:    17669.0 i/s - 1.85x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    12.825k i/100ms
Enumerable#sort_by...first
                         5.885k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    128.155k (± 0.1%) i/s -    641.250k in   5.003730s
Enumerable#sort_by...first
                         58.185k (± 0.4%) i/s -    294.250k in   5.057243s

Comparison:
   Enumerable#min_by:   128154.5 i/s
Enumerable#sort_by...first:    58184.8 i/s - 2.20x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   269.945k i/100ms
            Hash#dup   213.586k i/100ms
Calculating -------------------------------------
              Hash[]      2.654M (± 4.2%) i/s -     13.497M in   5.094644s
            Hash#dup      2.081M (± 3.9%) i/s -     10.466M in   5.038087s

Comparison:
              Hash[]:  2654207.6 i/s
            Hash#dup:  2080704.7 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.275M i/100ms
  Hash#fetch, symbol   984.585k i/100ms
     Hash#[], string     1.059M i/100ms
  Hash#fetch, string   571.299k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     12.788M (± 0.1%) i/s -     65.009M in   5.083680s
  Hash#fetch, symbol      9.847M (± 0.1%) i/s -     50.214M in   5.099173s
     Hash#[], string     10.586M (± 0.1%) i/s -     52.940M in   5.000862s
  Hash#fetch, string      5.712M (± 0.1%) i/s -     28.565M in   5.000601s

Comparison:
     Hash#[], symbol: 12787710.4 i/s
     Hash#[], string: 10586158.5 i/s - 1.21x  (± 0.00) slower
  Hash#fetch, symbol:  9847451.0 i/s - 1.30x  (± 0.00) slower
  Hash#fetch, string:  5712306.7 i/s - 2.24x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   667.917k i/100ms
             Hash#[]   771.086k i/100ms
          Hash#[] ||   685.772k i/100ms
          Hash#[] &&   307.670k i/100ms
          Hash#fetch   468.168k i/100ms
 Hash#fetch fallback   274.905k i/100ms
Calculating -------------------------------------
            Hash#dig      6.685M (± 0.1%) i/s -     34.064M in   5.095369s
             Hash#[]      7.705M (± 0.3%) i/s -     38.554M in   5.004005s
          Hash#[] ||      6.862M (± 0.2%) i/s -     34.974M in   5.096985s
          Hash#[] &&      3.007M (± 1.0%) i/s -     15.076M in   5.014187s
          Hash#fetch      4.686M (± 0.2%) i/s -     23.877M in   5.094789s
 Hash#fetch fallback      2.743M (± 0.1%) i/s -     13.745M in   5.010796s

Comparison:
             Hash#[]:  7704758.4 i/s
          Hash#[] ||:  6861816.4 i/s - 1.12x  (± 0.00) slower
            Hash#dig:  6685253.4 i/s - 1.15x  (± 0.00) slower
          Hash#fetch:  4686487.9 i/s - 1.64x  (± 0.00) slower
          Hash#[] &&:  3006946.8 i/s - 2.56x  (± 0.00) slower
 Hash#fetch fallback:  2743128.8 i/s - 2.81x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.190M i/100ms
  Hash#fetch + block     1.125M i/100ms
    Hash#fetch + arg   811.266k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     11.903M (± 0.1%) i/s -     60.665M in   5.096698s
  Hash#fetch + block     11.254M (± 0.1%) i/s -     57.370M in   5.097679s
    Hash#fetch + arg      8.117M (± 0.1%) i/s -     41.375M in   5.097053s

Comparison:
  Hash#fetch + const: 11902793.5 i/s
  Hash#fetch + block: 11254091.3 i/s - 1.06x  (± 0.00) slower
    Hash#fetch + arg:  8117358.9 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    18.548k i/100ms
         sort + to_h     8.499k i/100ms
Calculating -------------------------------------
      sort_by + to_h    185.196k (± 0.5%) i/s -    927.400k in   5.007766s
         sort + to_h     85.069k (± 0.2%) i/s -    433.449k in   5.095301s

Comparison:
      sort_by + to_h:   185196.4 i/s
         sort + to_h:    85068.8 i/s - 2.18x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   131.169k i/100ms
       Hash#each_key   134.500k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.304M (± 0.2%) i/s -      6.558M in   5.028659s
       Hash#each_key      1.341M (± 0.4%) i/s -      6.725M in   5.013184s

Comparison:
       Hash#each_key:  1341487.4 i/s
      Hash#keys.each:  1304221.4 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.332k i/100ms
           Hash#key?   704.440k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     13.201k (± 4.9%) i/s -     66.600k in   5.060172s
           Hash#key?      7.043M (± 0.1%) i/s -     35.222M in   5.001257s

Comparison:
           Hash#key?:  7042632.6 i/s
  Hash#keys.include?:    13201.4 i/s - 533.48x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     2.841k i/100ms
            Hash#[]=     6.412k i/100ms
Calculating -------------------------------------
         Hash#merge!     28.413k (± 0.1%) i/s -    144.891k in   5.099446s
            Hash#[]=     64.262k (± 0.5%) i/s -    327.012k in   5.088867s

Comparison:
            Hash#[]=:    64261.8 i/s
         Hash#merge!:    28413.1 i/s - 2.26x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.556k i/100ms
      Hash#merge({})     2.826k i/100ms
 Hash#dup#merge!({})     2.116k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         35.388k (± 0.2%) i/s -    177.800k in   5.024251s
      Hash#merge({})     28.282k (± 0.1%) i/s -    144.126k in   5.095984s
 Hash#dup#merge!({})     21.064k (± 0.1%) i/s -    105.800k in   5.022810s

Comparison:
{}#merge!(Hash) do end:    35388.4 i/s
      Hash#merge({}):    28282.3 i/s - 1.25x  (± 0.00) slower
 Hash#dup#merge!({}):    21063.9 i/s - 1.68x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   266.751k i/100ms
          Hash#merge   240.524k i/100ms
Calculating -------------------------------------
        Hash#**other      2.664M (± 0.1%) i/s -     13.338M in   5.006168s
          Hash#merge      2.400M (± 0.1%) i/s -     12.026M in   5.010522s

Comparison:
        Hash#**other:  2664229.0 i/s
          Hash#merge:  2400194.0 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.038k i/100ms
         Hash#merge!     2.800k i/100ms
Calculating -------------------------------------
          Hash#merge     10.944k (± 2.7%) i/s -     55.014k in   5.030503s
         Hash#merge!     28.051k (± 0.2%) i/s -    142.800k in   5.090815s

Comparison:
         Hash#merge!:    28050.6 i/s
          Hash#merge:    10944.2 i/s - 2.56x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      290.822k i/100ms
Array#each             156.715k i/100ms
Array#each_w/_object   113.622k i/100ms
Hash#select-include     48.952k i/100ms
Calculating -------------------------------------
Hash#native-slice         2.911M (± 0.1%) i/s -     14.832M in   5.095940s
Array#each                1.565M (± 0.2%) i/s -      7.836M in   5.006829s
Array#each_w/_object      1.139M (± 0.3%) i/s -      5.795M in   5.088404s
Hash#select-include     483.418k (± 2.7%) i/s -      2.448M in   5.066872s

Comparison:
Hash#native-slice   :  2910541.2 i/s
Array#each          :  1565016.9 i/s - 1.86x  (± 0.00) slower
Array#each_w/_object:  1138817.6 i/s - 2.56x  (± 0.00) slower
Hash#select-include :   483418.0 i/s - 6.02x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     2.727k i/100ms
         Hash#value?     3.881k i/100ms
Calculating -------------------------------------
Hash#values.include?     26.900k (± 6.0%) i/s -    136.350k in   5.098930s
         Hash#value?     38.795k (± 0.1%) i/s -    194.050k in   5.001943s

Comparison:
         Hash#value?:    38795.0 i/s
Hash#values.include?:    26900.4 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   516.486k i/100ms
                send   342.366k i/100ms
      method_missing   268.451k i/100ms
Calculating -------------------------------------
                call      5.155M (± 0.1%) i/s -     25.824M in   5.009540s
                send      3.412M (± 0.5%) i/s -     17.118M in   5.017513s
      method_missing      2.684M (± 0.1%) i/s -     13.423M in   5.001019s

Comparison:
                call:  5155026.9 i/s
                send:  3411781.0 i/s - 1.51x  (± 0.00) slower
      method_missing:  2683965.6 i/s - 1.92x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     5.555k i/100ms
      Symbol#to_proc     5.967k i/100ms
Calculating -------------------------------------
               Block     55.591k (± 0.1%) i/s -    283.305k in   5.096204s
      Symbol#to_proc     59.555k (± 0.1%) i/s -    298.350k in   5.009652s

Comparison:
      Symbol#to_proc:    59555.1 i/s
               Block:    55591.4 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   736.862k i/100ms
       block + yield   791.917k i/100ms
        unused block     1.026M i/100ms
               yield     1.016M i/100ms
Calculating -------------------------------------
          block.call      7.369M (± 0.0%) i/s -     37.580M in   5.099510s
       block + yield      7.918M (± 0.1%) i/s -     39.596M in   5.000673s
        unused block     10.255M (± 0.1%) i/s -     51.306M in   5.003098s
               yield     10.160M (± 0.0%) i/s -     51.805M in   5.099004s

Comparison:
        unused block: 10254778.6 i/s
               yield: 10159836.5 i/s - 1.01x  (± 0.00) slower
       block + yield:  7918108.6 i/s - 1.30x  (± 0.00) slower
          block.call:  7369330.3 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   222.255k i/100ms
      range#include?     9.080k i/100ms
       range#member?     9.096k i/100ms
       plain compare   320.432k i/100ms
Calculating -------------------------------------
        range#cover?      2.223M (± 0.1%) i/s -     11.335M in   5.099186s
      range#include?     91.366k (± 0.6%) i/s -    463.080k in   5.068636s
       range#member?     91.576k (± 0.4%) i/s -    463.896k in   5.065787s
       plain compare      3.216M (± 0.4%) i/s -     16.342M in   5.081231s

Comparison:
       plain compare:  3216199.5 i/s
        range#cover?:  2222906.2 i/s - 1.45x  (± 0.00) slower
       range#member?:    91575.6 i/s - 35.12x  (± 0.00) slower
      range#include?:    91365.6 i/s - 35.20x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   728.681k i/100ms
           String#=~   442.581k i/100ms
          Regexp#===   402.982k i/100ms
        String#match   341.950k i/100ms
Calculating -------------------------------------
       String#match?      7.286M (± 0.0%) i/s -     36.434M in   5.000442s
           String#=~      4.420M (± 0.1%) i/s -     22.129M in   5.006435s
          Regexp#===      4.038M (± 0.9%) i/s -     20.552M in   5.090558s
        String#match      3.416M (± 0.1%) i/s -     17.098M in   5.004674s

Comparison:
       String#match?:  7286168.0 i/s
           String#=~:  4420125.3 i/s - 1.65x  (± 0.00) slower
          Regexp#===:  4037630.7 i/s - 1.80x  (± 0.00) slower
        String#match:  3416308.0 i/s - 2.13x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   459.767k i/100ms
      String#casecmp   614.071k i/100ms
Calculating -------------------------------------
String#downcase + ==      4.597M (± 0.1%) i/s -     22.988M in   5.000532s
      String#casecmp      6.139M (± 0.1%) i/s -     30.704M in   5.001381s

Comparison:
      String#casecmp:  6139019.9 i/s
String#downcase + ==:  4597182.8 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   412.180k i/100ms
       String#concat   434.503k i/100ms
       String#append   474.046k i/100ms
         "foo" "bar"   980.515k i/100ms
  "#{'foo'}#{'bar'}"   979.221k i/100ms
Calculating -------------------------------------
            String#+      4.123M (± 0.1%) i/s -     21.021M in   5.098956s
       String#concat      4.342M (± 0.1%) i/s -     21.725M in   5.004003s
       String#append      4.732M (± 0.3%) i/s -     23.702M in   5.009483s
         "foo" "bar"      9.793M (± 0.1%) i/s -     49.026M in   5.006403s
  "#{'foo'}#{'bar'}"      9.811M (± 0.1%) i/s -     49.940M in   5.090418s

Comparison:
  "#{'foo'}#{'bar'}":  9810652.7 i/s
         "foo" "bar":  9792617.5 i/s - same-ish: difference falls within error
       String#append:  4731530.7 i/s - 2.07x  (± 0.00) slower
       String#concat:  4341558.0 i/s - 2.26x  (± 0.00) slower
            String#+:  4122647.4 i/s - 2.38x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@   819.206k i/100ms
          String#dup   375.117k i/100ms
Calculating -------------------------------------
           String#+@      8.188M (± 0.1%) i/s -     40.960M in   5.002471s
          String#dup      3.760M (± 1.2%) i/s -     19.131M in   5.088906s

Comparison:
           String#+@:  8188017.7 i/s
          String#dup:  3759912.2 i/s - 2.18x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   139.803k i/100ms
       String#match?   305.207k i/100ms
    String#end_with?   445.899k i/100ms
Calculating -------------------------------------
           String#=~      1.398M (± 0.1%) i/s -      7.130M in   5.099129s
       String#match?      3.051M (± 0.0%) i/s -     15.260M in   5.001308s
    String#end_with?      4.452M (± 0.1%) i/s -     22.295M in   5.007811s

Comparison:
    String#end_with?:  4452044.7 i/s
       String#match?:  3051272.0 i/s - 1.46x  (± 0.00) slower
           String#=~:  1398271.3 i/s - 3.18x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    82.449k i/100ms
          String#sub   100.187k i/100ms
String#dup["string"]=
                       135.763k i/100ms
Calculating -------------------------------------
         String#gsub    824.819k (± 0.3%) i/s -      4.205M in   5.098024s
          String#sub      1.034M (± 0.5%) i/s -      5.210M in   5.039673s
String#dup["string"]=
                          1.382M (± 0.3%) i/s -      6.924M in   5.009129s

Comparison:
String#dup["string"]=:  1382275.3 i/s
          String#sub:  1033773.3 i/s - 1.34x  (± 0.00) slower
         String#gsub:   824818.9 i/s - 1.68x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    71.649k i/100ms
           String#tr   262.407k i/100ms
Calculating -------------------------------------
         String#gsub    716.926k (± 0.5%) i/s -      3.654M in   5.097035s
           String#tr      2.621M (± 0.1%) i/s -     13.120M in   5.006517s

Comparison:
           String#tr:  2620655.7 i/s
         String#gsub:   716925.9 i/s - 3.66x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   928.665k i/100ms
         With Freeze     1.549M i/100ms
Calculating -------------------------------------
      Without Freeze      9.281M (± 0.1%) i/s -     46.433M in   5.003214s
         With Freeze     15.507M (± 0.1%) i/s -     78.986M in   5.093528s

Comparison:
         With Freeze: 15507118.8 i/s
      Without Freeze:  9280694.4 i/s - 1.67x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.473k i/100ms
      String#squeeze   106.586k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     24.654k (± 0.9%) i/s -    123.650k in   5.015776s
      String#squeeze      1.066M (± 0.7%) i/s -      5.436M in   5.097503s

Comparison:
      String#squeeze:  1066427.9 i/s
 String#gsub/regex+/:    24654.3 i/s - 43.26x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   207.319k i/100ms
       String#match?   577.576k i/100ms
  String#start_with?   673.712k i/100ms
Calculating -------------------------------------
           String#=~      2.070M (± 0.2%) i/s -     10.366M in   5.007911s
       String#match?      5.775M (± 0.0%) i/s -     28.879M in   5.000506s
  String#start_with?      6.737M (± 0.1%) i/s -     33.686M in   5.000398s

Comparison:
  String#start_with?:  6736587.7 i/s
       String#match?:  5775175.6 i/s - 1.17x  (± 0.00) slower
           String#=~:  2069922.4 i/s - 3.25x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   153.156k i/100ms
    String#[0, n] ==    54.717k i/100ms
   String#[RANGE] ==    49.856k i/100ms
   String#[0...n] ==    32.427k i/100ms
Calculating -------------------------------------
  String#start_with?      1.531M (± 0.1%) i/s -      7.658M in   5.001711s
    String#[0, n] ==    547.787k (± 0.1%) i/s -      2.791M in   5.094267s
   String#[RANGE] ==    500.575k (± 0.2%) i/s -      2.543M in   5.079485s
   String#[0...n] ==    322.719k (± 0.1%) i/s -      1.621M in   5.024033s

Comparison:
  String#start_with?:  1531038.9 i/s
    String#[0, n] ==:   547786.7 i/s - 2.79x  (± 0.00) slower
   String#[RANGE] ==:   500574.9 i/s - 3.06x  (± 0.00) slower
   String#[0...n] ==:   322719.4 i/s - 4.74x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   132.270k i/100ms
 String#sub!'string'    93.796k i/100ms
String#gsub!'string'    59.012k i/100ms
  String#[/regexp/]=   116.785k i/100ms
 String#sub!/regexp/    93.028k i/100ms
String#gsub!/regexp/    47.627k i/100ms
Calculating -------------------------------------
  String#['string']=      1.332M (± 0.8%) i/s -      6.746M in   5.066419s
 String#sub!'string'    950.830k (± 0.3%) i/s -      4.784M in   5.031015s
String#gsub!'string'    588.284k (± 0.9%) i/s -      2.951M in   5.015999s
  String#[/regexp/]=      1.176M (± 0.6%) i/s -      5.956M in   5.064300s
 String#sub!/regexp/    910.019k (± 0.9%) i/s -      4.558M in   5.009525s
String#gsub!/regexp/    478.217k (± 0.7%) i/s -      2.429M in   5.079489s

Comparison:
  String#['string']=:  1331542.5 i/s
  String#[/regexp/]=:  1176120.6 i/s - 1.13x  (± 0.00) slower
 String#sub!'string':   950830.4 i/s - 1.40x  (± 0.00) slower
 String#sub!/regexp/:   910018.9 i/s - 1.46x  (± 0.00) slower
String#gsub!'string':   588284.1 i/s - 2.26x  (± 0.00) slower
String#gsub!/regexp/:   478217.4 i/s - 2.78x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   117.363k i/100ms
        String#chomp   391.241k i/100ms
String#delete_suffix   423.293k i/100ms
Calculating -------------------------------------
          String#sub      1.160M (± 1.0%) i/s -      5.868M in   5.061022s
        String#chomp      3.911M (± 0.1%) i/s -     19.562M in   5.001644s
String#delete_suffix      4.228M (± 0.1%) i/s -     21.165M in   5.005837s

Comparison:
String#delete_suffix:  4227996.0 i/s
        String#chomp:  3911125.5 i/s - 1.08x  (± 0.00) slower
          String#sub:  1159587.9 i/s - 3.65x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   429.879k i/100ms
          String#sub   117.369k i/100ms
Calculating -------------------------------------
String#delete_prefix      4.296M (± 0.1%) i/s -     21.494M in   5.003442s
          String#sub      1.173M (± 0.5%) i/s -      5.868M in   5.002547s

Comparison:
String#delete_prefix:  4295835.3 i/s
          String#sub:  1173121.8 i/s - 3.66x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   427.791k i/100ms
    String#unpack[0]   326.743k i/100ms
Calculating -------------------------------------
      String#unpack1      4.274M (± 0.1%) i/s -     21.390M in   5.004794s
    String#unpack[0]      3.269M (± 0.1%) i/s -     16.664M in   5.097606s

Comparison:
      String#unpack1:  4273815.6 i/s
    String#unpack[0]:  3268966.1 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    21.286k i/100ms
          Time.parse     7.235k i/100ms
Calculating -------------------------------------
        Time.iso8601    212.340k (± 0.8%) i/s -      1.064M in   5.012547s
          Time.parse     71.710k (± 3.0%) i/s -    361.750k in   5.049996s

Comparison:
        Time.iso8601:   212339.6 i/s
          Time.parse:    71709.6 i/s - 2.96x  (± 0.00) slower

