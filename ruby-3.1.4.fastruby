$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       766.449k i/100ms
Function with splat arguments
                        27.084k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.663M (± 0.9%) i/s -     38.322M in   5.001456s
Function with splat arguments
                        268.995k (± 6.4%) i/s -      1.354M in   5.061115s

Comparison:
Function with single Array argument:  7662970.4 i/s
Function with splat arguments:   268995.2 i/s - 28.49x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   996.967k i/100ms
Sequential Assignment
                         1.016M i/100ms
Calculating -------------------------------------
 Parallel Assignment      9.949M (± 0.6%) i/s -     49.848M in   5.010717s
Sequential Assignment
                         10.093M (± 0.2%) i/s -     50.806M in   5.034003s

Comparison:
Sequential Assignment: 10092690.3 i/s
 Parallel Assignment:  9948660.4 i/s - 1.01x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   476.996k i/100ms
       attr_accessor   558.648k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.775M (± 0.4%) i/s -     24.327M in   5.094629s
       attr_accessor      5.584M (± 0.3%) i/s -     27.932M in   5.002041s

Comparison:
       attr_accessor:  5584264.1 i/s
   getter_and_setter:  4775060.6 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    87.143k i/100ms
         respond_to?   770.124k i/100ms
Calculating -------------------------------------
      begin...rescue    884.570k (± 1.2%) i/s -      4.444M in   5.025035s
         respond_to?      7.659M (± 0.2%) i/s -     38.506M in   5.027371s

Comparison:
         respond_to?:  7659349.1 i/s
      begin...rescue:   884570.1 i/s - 8.66x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   292.583k i/100ms
             &method   121.262k i/100ms
Calculating -------------------------------------
              normal      2.971M (± 0.9%) i/s -     14.922M in   5.023311s
             &method      1.209M (± 0.3%) i/s -      6.063M in   5.016501s

Comparison:
              normal:  2970725.8 i/s
             &method:  1208643.4 i/s - 2.46x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       228.000  i/100ms
       define_method   314.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.319k (±17.5%) i/s -     10.944k in   5.065726s
       define_method      3.126k (±18.3%) i/s -     14.130k in   5.001929s

Comparison:
       define_method:     3126.4 i/s
module_eval with string:     2318.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   257.955k i/100ms
       Kernel#format   201.270k i/100ms
            String#%   174.769k i/100ms
Calculating -------------------------------------
         Float#round      2.586M (± 0.3%) i/s -     13.156M in   5.088216s
       Kernel#format      2.009M (± 0.3%) i/s -     10.064M in   5.009503s
            String#%      1.730M (± 0.4%) i/s -      8.738M in   5.050472s

Comparison:
         Float#round:  2585541.1 i/s
       Kernel#format:  2008900.3 i/s - 1.29x  (± 0.00) slower
            String#%:  1730247.1 i/s - 1.49x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   894.066k i/100ms
          OpenStruct   487.423k i/100ms
Calculating -------------------------------------
                Hash      8.878M (± 0.3%) i/s -     44.703M in   5.035068s
          OpenStruct      4.864M (± 0.5%) i/s -     24.371M in   5.010168s

Comparison:
                Hash:  8878465.4 i/s
          OpenStruct:  4864455.8 i/s - 1.83x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.089M i/100ms
          OpenStruct    11.401k i/100ms
Calculating -------------------------------------
                Hash     11.628M (± 0.3%) i/s -     58.812M in   5.057876s
          OpenStruct    115.561k (± 2.2%) i/s -    581.451k in   5.034037s

Comparison:
                Hash: 11627966.5 i/s
          OpenStruct:   115561.5 i/s - 100.62x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   584.703k i/100ms
  ancestors.include?   120.881k i/100ms
Calculating -------------------------------------
  less than or equal      5.924M (± 0.6%) i/s -     29.820M in   5.033565s
  ancestors.include?      1.213M (± 2.1%) i/s -      6.165M in   5.084992s

Comparison:
  less than or equal:  5924394.4 i/s
  ancestors.include?:  1212949.3 i/s - 4.88x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.692  (± 0.0%) i/s -      4.000  in   5.792982s
         Kernel loop      0.214  (± 0.0%) i/s -      2.000  in   9.334674s

Comparison:
          While Loop:        0.7 i/s
         Kernel loop:        0.2 i/s - 3.23x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.533M i/100ms
         Array#first     1.336M i/100ms
Calculating -------------------------------------
           Array#[0]     15.335M (± 0.3%) i/s -     78.172M in   5.097785s
         Array#first     13.327M (± 0.4%) i/s -     66.810M in   5.013272s

Comparison:
           Array#[0]: 15334607.3 i/s
         Array#first: 13326828.1 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.529M i/100ms
          Array#last     1.317M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.311M (± 0.8%) i/s -     77.995M in   5.094279s
          Array#last     13.158M (± 0.2%) i/s -     65.844M in   5.004149s

Comparison:
          Array#[-1]: 15311360.0 i/s
          Array#last: 13157889.4 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    96.618k i/100ms
Calculating -------------------------------------
                find      0.269  (± 0.0%) i/s -      2.000  in   7.425914s
             bsearch    969.757k (± 0.4%) i/s -      4.928M in   5.081287s

Comparison:
             bsearch:   969756.8 i/s
                find:        0.3 i/s - 3600664.48x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    18.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    190.993  (± 2.1%) i/s -    972.000  in   5.091998s
        Array#insert      1.441  (± 0.0%) i/s -      8.000  in   5.550434s

Comparison:
       Array#unshift:      191.0 i/s
        Array#insert:        1.4 i/s - 132.51x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.134M i/100ms
          Array#size     2.115M i/100ms
         Array#count     1.651M i/100ms
Calculating -------------------------------------
        Array#length     21.279M (± 0.4%) i/s -    106.686M in   5.013773s
          Array#size     21.140M (± 0.5%) i/s -    105.739M in   5.001864s
         Array#count     16.430M (± 0.9%) i/s -     82.566M in   5.025699s

Comparison:
        Array#length: 21278940.5 i/s
          Array#size: 21140357.7 i/s - same-ish: difference falls within error
         Array#count: 16430263.0 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.694k i/100ms
        Array#sample     1.030M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    453.760k (± 0.4%) i/s -      2.285M in   5.035114s
        Array#sample     10.396M (± 0.2%) i/s -     52.544M in   5.054089s

Comparison:
        Array#sample: 10396360.4 i/s
 Array#shuffle.first:   453760.0 i/s - 22.91x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    62.212k i/100ms
          Date.parse    31.669k i/100ms
Calculating -------------------------------------
        Date.iso8601    623.154k (± 0.4%) i/s -      3.173M in   5.091605s
          Date.parse    316.406k (± 0.4%) i/s -      1.583M in   5.004563s

Comparison:
        Date.iso8601:   623153.6 i/s
          Date.parse:   316406.0 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.624k i/100ms
           Array#map    25.593k i/100ms
Calculating -------------------------------------
   Array#each + push    186.114k (± 0.3%) i/s -    931.200k in   5.003418s
           Array#map    256.632k (± 1.1%) i/s -      1.305M in   5.086752s

Comparison:
           Array#map:   256631.7 i/s
   Array#each + push:   186114.4 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    28.878k i/100ms
               #each    31.657k i/100ms
Calculating -------------------------------------
            For loop    289.386k (± 0.4%) i/s -      1.473M in   5.089408s
               #each    314.574k (± 0.9%) i/s -      1.583M in   5.032131s

Comparison:
               #each:   314574.0 i/s
            For loop:   289386.3 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.634k i/100ms
     each_with_index    18.676k i/100ms
Calculating -------------------------------------
          While Loop    275.384k (± 1.0%) i/s -      1.382M in   5.017820s
     each_with_index    187.451k (± 0.3%) i/s -    952.476k in   5.081233s

Comparison:
          While Loop:   275384.2 i/s
     each_with_index:   187451.2 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol   124.588k i/100ms
      inject to_proc     1.765k i/100ms
        inject block     1.947k i/100ms
Calculating -------------------------------------
       inject symbol      1.249M (± 0.9%) i/s -      6.354M in   5.085774s
      inject to_proc     17.686k (± 0.3%) i/s -     90.015k in   5.089682s
        inject block     19.775k (± 0.3%) i/s -     99.297k in   5.021364s

Comparison:
       inject symbol:  1249460.7 i/s
        inject block:    19775.0 i/s - 63.18x  (± 0.00) slower
      inject to_proc:    17685.9 i/s - 70.65x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     7.082k i/100ms
   Array#map.flatten     4.189k i/100ms
      Array#flat_map     9.045k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     73.313k (± 1.1%) i/s -    368.264k in   5.023756s
   Array#map.flatten     42.955k (± 0.3%) i/s -    217.828k in   5.071133s
      Array#flat_map     94.344k (± 0.4%) i/s -    479.385k in   5.081313s

Comparison:
      Array#flat_map:    94344.1 i/s
Array#map.flatten(1):    73313.2 i/s - 1.29x  (± 0.00) slower
   Array#map.flatten:    42955.0 i/s - 2.20x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    30.429k i/100ms
  Array#reverse_each    30.986k i/100ms
Calculating -------------------------------------
  Array#reverse.each    302.712k (± 1.5%) i/s -      1.521M in   5.027241s
  Array#reverse_each    311.928k (± 0.3%) i/s -      1.580M in   5.066225s

Comparison:
  Array#reverse_each:   311928.0 i/s
  Array#reverse.each:   302711.5 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.232k i/100ms
   Enumerable#detect    82.767k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        201.716k (± 0.6%) i/s -      4.046M in  20.060514s
   Enumerable#detect    826.951k (± 2.4%) i/s -     16.553M in  20.034093s

Comparison:
   Enumerable#detect:   826951.2 i/s
Enumerable#select.first:   201716.1 i/s - 4.10x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       243.568k i/100ms
Enumerable#select.last
                        18.341k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.451M (± 0.3%) i/s -     12.422M in   5.067152s
Enumerable#select.last
                        182.510k (± 0.4%) i/s -    917.050k in   5.024716s

Comparison:
Enumerable#reverse.detect:  2451491.4 i/s
Enumerable#select.last:   182510.3 i/s - 13.43x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         5.254k i/100ms
  Enumerable#sort_by     5.017k i/100ms
     Enumerable#sort     2.474k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         52.965k (± 0.6%) i/s -    267.954k in   5.059267s
  Enumerable#sort_by     51.020k (± 0.8%) i/s -    255.867k in   5.015315s
     Enumerable#sort     24.691k (± 0.2%) i/s -    123.700k in   5.009886s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    52965.2 i/s
  Enumerable#sort_by:    51020.3 i/s - 1.04x  (± 0.00) slower
     Enumerable#sort:    24691.3 i/s - 2.15x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.434k i/100ms
Enumerable#sort_by...first
                         8.830k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    173.844k (± 0.3%) i/s -    871.700k in   5.014332s
Enumerable#sort_by...first
                         87.592k (± 1.1%) i/s -    441.500k in   5.041079s

Comparison:
   Enumerable#min_by:   173843.6 i/s
Enumerable#sort_by...first:    87592.0 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   416.081k i/100ms
            Hash#dup   301.747k i/100ms
Calculating -------------------------------------
              Hash[]      4.014M (± 3.3%) i/s -     20.388M in   5.084781s
            Hash#dup      2.932M (± 0.6%) i/s -     14.786M in   5.043642s

Comparison:
              Hash[]:  4013722.2 i/s
            Hash#dup:  2931643.1 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.400M i/100ms
  Hash#fetch, symbol     1.170M i/100ms
     Hash#[], string     1.215M i/100ms
  Hash#fetch, string   780.574k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     13.967M (± 0.4%) i/s -     69.983M in   5.010688s
  Hash#fetch, symbol     11.628M (± 0.4%) i/s -     58.505M in   5.031346s
     Hash#[], string     12.152M (± 0.3%) i/s -     60.760M in   5.000080s
  Hash#fetch, string      7.804M (± 0.3%) i/s -     39.029M in   5.000898s

Comparison:
     Hash#[], symbol: 13967040.6 i/s
     Hash#[], string: 12151799.6 i/s - 1.15x  (± 0.00) slower
  Hash#fetch, symbol: 11628161.7 i/s - 1.20x  (± 0.00) slower
  Hash#fetch, string:  7804386.8 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   868.811k i/100ms
             Hash#[]   994.866k i/100ms
          Hash#[] ||   862.324k i/100ms
          Hash#[] &&   375.167k i/100ms
          Hash#fetch   597.834k i/100ms
 Hash#fetch fallback   390.247k i/100ms
Calculating -------------------------------------
            Hash#dig      8.732M (± 0.7%) i/s -     44.309M in   5.074463s
             Hash#[]      9.721M (± 0.5%) i/s -     48.748M in   5.014776s
          Hash#[] ||      8.803M (± 0.8%) i/s -     44.841M in   5.094365s
          Hash#[] &&      3.758M (± 4.6%) i/s -     18.758M in   5.002117s
          Hash#fetch      6.302M (± 1.8%) i/s -     31.685M in   5.029388s
 Hash#fetch fallback      3.915M (± 1.2%) i/s -     19.903M in   5.084601s

Comparison:
             Hash#[]:  9721163.9 i/s
          Hash#[] ||:  8802650.9 i/s - 1.10x  (± 0.00) slower
            Hash#dig:  8732298.1 i/s - 1.11x  (± 0.00) slower
          Hash#fetch:  6302006.9 i/s - 1.54x  (± 0.00) slower
 Hash#fetch fallback:  3914858.8 i/s - 2.48x  (± 0.00) slower
          Hash#[] &&:  3757506.7 i/s - 2.59x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.443M i/100ms
  Hash#fetch + block     1.421M i/100ms
    Hash#fetch + arg     1.085M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.396M (± 0.3%) i/s -     72.141M in   5.011243s
  Hash#fetch + block     14.125M (± 0.6%) i/s -     71.034M in   5.029097s
    Hash#fetch + arg     10.816M (± 0.8%) i/s -     54.265M in   5.017686s

Comparison:
  Hash#fetch + const: 14395964.0 i/s
  Hash#fetch + block: 14125111.7 i/s - 1.02x  (± 0.00) slower
    Hash#fetch + arg: 10815532.3 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.826k i/100ms
         sort + to_h    11.553k i/100ms
Calculating -------------------------------------
      sort_by + to_h    275.722k (± 0.8%) i/s -      1.391M in   5.046348s
         sort + to_h    115.496k (± 0.6%) i/s -    577.650k in   5.001620s

Comparison:
      sort_by + to_h:   275721.6 i/s
         sort + to_h:   115496.3 i/s - 2.39x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   186.104k i/100ms
       Hash#each_key   195.555k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.841M (± 0.4%) i/s -      9.305M in   5.054227s
       Hash#each_key      1.935M (± 0.5%) i/s -      9.778M in   5.052090s

Comparison:
       Hash#each_key:  1935435.1 i/s
      Hash#keys.each:  1841101.6 i/s - 1.05x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.692k i/100ms
           Hash#key?   941.351k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     16.860k (± 4.4%) i/s -     84.600k in   5.029871s
           Hash#key?      9.424M (± 0.8%) i/s -     48.009M in   5.094850s

Comparison:
           Hash#key?:  9423613.2 i/s
  Hash#keys.include?:    16859.9 i/s - 558.94x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.100k i/100ms
            Hash#[]=    10.100k i/100ms
Calculating -------------------------------------
         Hash#merge!     41.104k (± 0.4%) i/s -    209.100k in   5.087195s
            Hash#[]=    101.688k (± 0.6%) i/s -    515.100k in   5.065695s

Comparison:
            Hash#[]=:   101687.6 i/s
         Hash#merge!:    41103.9 i/s - 2.47x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         5.232k i/100ms
      Hash#merge({})     4.183k i/100ms
 Hash#dup#merge!({})     2.753k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         52.239k (± 0.5%) i/s -    261.600k in   5.007866s
      Hash#merge({})     41.615k (± 0.4%) i/s -    209.150k in   5.025910s
 Hash#dup#merge!({})     27.433k (± 0.5%) i/s -    137.650k in   5.017723s

Comparison:
{}#merge!(Hash) do end:    52238.9 i/s
      Hash#merge({}):    41614.9 i/s - 1.26x  (± 0.00) slower
 Hash#dup#merge!({}):    27433.3 i/s - 1.90x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   397.316k i/100ms
          Hash#merge   373.750k i/100ms
Calculating -------------------------------------
        Hash#**other      3.964M (± 1.6%) i/s -     19.866M in   5.012713s
          Hash#merge      3.693M (± 0.8%) i/s -     18.688M in   5.060717s

Comparison:
        Hash#**other:  3964259.8 i/s
          Hash#merge:  3692923.0 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.701k i/100ms
         Hash#merge!     4.063k i/100ms
Calculating -------------------------------------
          Hash#merge     16.870k (± 0.4%) i/s -     85.050k in   5.041733s
         Hash#merge!     40.608k (± 0.2%) i/s -    203.150k in   5.002781s

Comparison:
         Hash#merge!:    40607.6 i/s
          Hash#merge:    16869.5 i/s - 2.41x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      420.965k i/100ms
Array#each             236.056k i/100ms
Array#each_w/_object   175.312k i/100ms
Hash#select-include     76.392k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.247M (± 0.2%) i/s -     21.469M in   5.055008s
Array#each                2.312M (± 0.7%) i/s -     11.567M in   5.003406s
Array#each_w/_object      1.722M (± 0.7%) i/s -      8.766M in   5.092010s
Hash#select-include     763.292k (± 0.6%) i/s -      3.820M in   5.004274s

Comparison:
Hash#native-slice   :  4247143.4 i/s
Array#each          :  2311871.5 i/s - 1.84x  (± 0.00) slower
Array#each_w/_object:  1721518.6 i/s - 2.47x  (± 0.00) slower
Hash#select-include :   763291.7 i/s - 5.56x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.111k i/100ms
         Hash#value?   838.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     10.828k (± 3.6%) i/s -     54.439k in   5.034593s
         Hash#value?      8.389k (± 0.4%) i/s -     42.738k in   5.094805s

Comparison:
Hash#values.include?:    10828.2 i/s
         Hash#value?:     8388.7 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   668.810k i/100ms
                send   502.579k i/100ms
      method_missing   386.094k i/100ms
Calculating -------------------------------------
                call      6.693M (± 0.2%) i/s -     34.109M in   5.096452s
                send      5.033M (± 0.9%) i/s -     25.632M in   5.093002s
      method_missing      3.846M (± 0.3%) i/s -     19.305M in   5.019499s

Comparison:
                call:  6692783.2 i/s
                send:  5033061.1 i/s - 1.33x  (± 0.00) slower
      method_missing:  3845981.1 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     8.423k i/100ms
      Symbol#to_proc     8.965k i/100ms
Calculating -------------------------------------
               Block     83.914k (± 0.3%) i/s -    421.150k in   5.018909s
      Symbol#to_proc     90.581k (± 0.9%) i/s -    457.215k in   5.047977s

Comparison:
      Symbol#to_proc:    90581.3 i/s
               Block:    83913.6 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   935.574k i/100ms
       block + yield   980.143k i/100ms
        unused block     1.293M i/100ms
               yield     1.167M i/100ms
Calculating -------------------------------------
          block.call      9.335M (± 0.3%) i/s -     46.779M in   5.010957s
       block + yield      9.810M (± 0.7%) i/s -     49.987M in   5.095628s
        unused block     13.033M (± 0.3%) i/s -     65.930M in   5.058903s
               yield     11.695M (± 0.3%) i/s -     59.542M in   5.091176s

Comparison:
        unused block: 13032654.1 i/s
               yield: 11695174.9 i/s - 1.11x  (± 0.00) slower
       block + yield:  9810382.3 i/s - 1.33x  (± 0.00) slower
          block.call:  9335362.4 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   319.839k i/100ms
      range#include?    12.767k i/100ms
       range#member?    12.684k i/100ms
       plain compare   527.373k i/100ms
Calculating -------------------------------------
        range#cover?      3.188M (± 0.2%) i/s -     15.992M in   5.016955s
      range#include?    125.888k (± 4.0%) i/s -    638.350k in   5.081032s
       range#member?    127.129k (± 0.4%) i/s -    646.884k in   5.088500s
       plain compare      5.274M (± 0.3%) i/s -     26.896M in   5.099338s

Comparison:
       plain compare:  5274462.3 i/s
        range#cover?:  3187592.8 i/s - 1.65x  (± 0.00) slower
       range#member?:   127128.7 i/s - 41.49x  (± 0.00) slower
      range#include?:   125888.0 i/s - 41.90x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   952.309k i/100ms
           String#=~   658.075k i/100ms
          Regexp#===   601.258k i/100ms
        String#match   491.160k i/100ms
Calculating -------------------------------------
       String#match?      9.417M (± 0.4%) i/s -     47.615M in   5.056445s
           String#=~      6.496M (± 0.5%) i/s -     32.904M in   5.064997s
          Regexp#===      6.003M (± 0.4%) i/s -     30.063M in   5.007766s
        String#match      4.916M (± 0.3%) i/s -     25.049M in   5.095991s

Comparison:
       String#match?:  9416920.5 i/s
           String#=~:  6496490.7 i/s - 1.45x  (± 0.00) slower
          Regexp#===:  6003357.8 i/s - 1.57x  (± 0.00) slower
        String#match:  4915523.6 i/s - 1.92x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   650.645k i/100ms
      String#casecmp   790.476k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.492M (± 0.3%) i/s -     32.532M in   5.011200s
      String#casecmp      7.825M (± 1.1%) i/s -     39.524M in   5.051449s

Comparison:
      String#casecmp:  7825245.5 i/s
String#downcase + ==:  6491985.1 i/s - 1.21x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   574.854k i/100ms
       String#concat   602.582k i/100ms
       String#append   646.888k i/100ms
         "foo" "bar"     1.147M i/100ms
  "#{'foo'}#{'bar'}"     1.173M i/100ms
Calculating -------------------------------------
            String#+      5.838M (± 1.0%) i/s -     29.318M in   5.022516s
       String#concat      6.028M (± 0.4%) i/s -     30.732M in   5.098184s
       String#append      6.560M (± 0.3%) i/s -     32.991M in   5.028879s
         "foo" "bar"     11.462M (± 0.3%) i/s -     57.356M in   5.004045s
  "#{'foo'}#{'bar'}"     11.743M (± 0.3%) i/s -     59.811M in   5.093502s

Comparison:
  "#{'foo'}#{'bar'}": 11742732.5 i/s
         "foo" "bar": 11462000.3 i/s - 1.02x  (± 0.00) slower
       String#append:  6560429.3 i/s - 1.79x  (± 0.00) slower
       String#concat:  6028046.9 i/s - 1.95x  (± 0.00) slower
            String#+:  5837815.3 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@   999.305k i/100ms
          String#dup   521.409k i/100ms
Calculating -------------------------------------
           String#+@      9.967M (± 0.2%) i/s -     49.965M in   5.012912s
          String#dup      5.259M (± 0.3%) i/s -     26.592M in   5.056267s

Comparison:
           String#+@:  9967353.4 i/s
          String#dup:  5259242.9 i/s - 1.90x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   175.605k i/100ms
       String#match?   386.520k i/100ms
    String#end_with?   577.310k i/100ms
Calculating -------------------------------------
           String#=~      1.761M (± 0.7%) i/s -      8.956M in   5.085906s
       String#match?      3.881M (± 0.2%) i/s -     19.713M in   5.078966s
    String#end_with?      6.047M (± 1.1%) i/s -     30.597M in   5.060961s

Comparison:
    String#end_with?:  6046523.1 i/s
       String#match?:  3881220.1 i/s - 1.56x  (± 0.00) slower
           String#=~:  1761002.6 i/s - 3.43x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   109.949k i/100ms
          String#sub   132.524k i/100ms
String#dup["string"]=
                       174.263k i/100ms
Calculating -------------------------------------
         String#gsub      1.105M (± 0.2%) i/s -      5.607M in   5.074329s
          String#sub      1.349M (± 0.2%) i/s -      6.759M in   5.010790s
String#dup["string"]=
                          1.761M (± 0.3%) i/s -      8.887M in   5.046645s

Comparison:
String#dup["string"]=:  1761067.9 i/s
          String#sub:  1348840.5 i/s - 1.31x  (± 0.00) slower
         String#gsub:  1105055.4 i/s - 1.59x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   101.683k i/100ms
           String#tr   352.159k i/100ms
Calculating -------------------------------------
         String#gsub      1.008M (± 0.4%) i/s -      5.084M in   5.042914s
           String#tr      3.534M (± 0.3%) i/s -     17.960M in   5.081801s

Comparison:
           String#tr:  3534239.0 i/s
         String#gsub:  1008189.6 i/s - 3.51x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.146M i/100ms
         With Freeze     1.658M i/100ms
Calculating -------------------------------------
      Without Freeze     11.486M (± 0.3%) i/s -     58.432M in   5.087511s
         With Freeze     16.684M (± 0.4%) i/s -     84.568M in   5.068921s

Comparison:
         With Freeze: 16683891.6 i/s
      Without Freeze: 11485513.0 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.338k i/100ms
      String#squeeze   158.227k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     33.511k (± 0.4%) i/s -    170.238k in   5.080112s
      String#squeeze      1.576M (± 1.5%) i/s -      7.911M in   5.020102s

Comparison:
      String#squeeze:  1576302.6 i/s
 String#gsub/regex+/:    33511.1 i/s - 47.04x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   285.473k i/100ms
       String#match?   801.937k i/100ms
  String#start_with?   885.229k i/100ms
Calculating -------------------------------------
           String#=~      2.883M (± 1.1%) i/s -     14.559M in   5.050425s
       String#match?      8.006M (± 0.4%) i/s -     40.097M in   5.008177s
  String#start_with?      8.749M (± 0.5%) i/s -     44.261M in   5.059144s

Comparison:
  String#start_with?:  8749048.0 i/s
       String#match?:  8006392.6 i/s - 1.09x  (± 0.00) slower
           String#=~:  2883107.8 i/s - 3.03x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   194.730k i/100ms
    String#[0, n] ==    82.259k i/100ms
   String#[RANGE] ==    76.067k i/100ms
   String#[0...n] ==    46.578k i/100ms
Calculating -------------------------------------
  String#start_with?      1.996M (± 1.2%) i/s -     10.126M in   5.074157s
    String#[0, n] ==    834.733k (± 3.4%) i/s -      4.195M in   5.032934s
   String#[RANGE] ==    754.466k (± 0.5%) i/s -      3.803M in   5.041240s
   String#[0...n] ==    464.975k (± 1.2%) i/s -      2.329M in   5.009328s

Comparison:
  String#start_with?:  1995896.9 i/s
    String#[0, n] ==:   834732.9 i/s - 2.39x  (± 0.00) slower
   String#[RANGE] ==:   754465.9 i/s - 2.65x  (± 0.00) slower
   String#[0...n] ==:   464975.4 i/s - 4.29x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   172.470k i/100ms
 String#sub!'string'   126.900k i/100ms
String#gsub!'string'    76.502k i/100ms
  String#[/regexp/]=   144.908k i/100ms
 String#sub!/regexp/   111.165k i/100ms
String#gsub!/regexp/    58.991k i/100ms
Calculating -------------------------------------
  String#['string']=      1.743M (± 0.5%) i/s -      8.796M in   5.046824s
 String#sub!'string'      1.270M (± 0.2%) i/s -      6.472M in   5.097659s
String#gsub!'string'    767.492k (± 0.3%) i/s -      3.902M in   5.083615s
  String#[/regexp/]=      1.476M (± 0.4%) i/s -      7.390M in   5.006182s
 String#sub!/regexp/      1.123M (± 0.5%) i/s -      5.669M in   5.048876s
String#gsub!/regexp/    584.600k (± 0.9%) i/s -      2.950M in   5.045808s

Comparison:
  String#['string']=:  1742920.0 i/s
  String#[/regexp/]=:  1476259.4 i/s - 1.18x  (± 0.00) slower
 String#sub!'string':  1269588.9 i/s - 1.37x  (± 0.00) slower
 String#sub!/regexp/:  1122931.8 i/s - 1.55x  (± 0.00) slower
String#gsub!'string':   767491.8 i/s - 2.27x  (± 0.00) slower
String#gsub!/regexp/:   584600.1 i/s - 2.98x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   135.183k i/100ms
        String#chomp   556.971k i/100ms
String#delete_suffix   607.376k i/100ms
Calculating -------------------------------------
          String#sub      1.362M (± 0.6%) i/s -      6.894M in   5.062163s
        String#chomp      5.590M (± 0.6%) i/s -     28.406M in   5.081386s
String#delete_suffix      6.039M (± 0.5%) i/s -     30.369M in   5.029153s

Comparison:
String#delete_suffix:  6038684.0 i/s
        String#chomp:  5590348.1 i/s - 1.08x  (± 0.00) slower
          String#sub:  1361979.2 i/s - 4.43x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   630.660k i/100ms
          String#sub   140.306k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.344M (± 0.3%) i/s -     32.164M in   5.069614s
          String#sub      1.398M (± 0.2%) i/s -      7.015M in   5.016979s

Comparison:
String#delete_prefix:  6344457.7 i/s
          String#sub:  1398317.5 i/s - 4.54x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   600.953k i/100ms
    String#unpack[0]   443.801k i/100ms
Calculating -------------------------------------
      String#unpack1      6.052M (± 0.4%) i/s -     30.649M in   5.064181s
    String#unpack[0]      4.440M (± 0.2%) i/s -     22.634M in   5.098000s

Comparison:
      String#unpack1:  6052131.0 i/s
    String#unpack[0]:  4439774.7 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    28.330k i/100ms
          Time.parse     9.610k i/100ms
Calculating -------------------------------------
        Time.iso8601    282.916k (± 0.3%) i/s -      1.416M in   5.006842s
          Time.parse     96.128k (± 0.7%) i/s -    490.110k in   5.098736s

Comparison:
        Time.iso8601:   282916.2 i/s
          Time.parse:    96128.5 i/s - 2.94x  (± 0.00) slower

