$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       769.018k i/100ms
Function with splat arguments
                        27.494k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.679M (± 1.5%) i/s -     38.451M in   5.008600s
Function with splat arguments
                        271.321k (± 5.3%) i/s -      1.375M in   5.087966s

Comparison:
Function with single Array argument:  7678763.9 i/s
Function with splat arguments:   271320.8 i/s - 28.30x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   997.793k i/100ms
Sequential Assignment
                         1.006M i/100ms
Calculating -------------------------------------
 Parallel Assignment      9.960M (± 0.7%) i/s -     49.890M in   5.009369s
Sequential Assignment
                         10.050M (± 2.0%) i/s -     50.309M in   5.008148s

Comparison:
Sequential Assignment: 10049850.4 i/s
 Parallel Assignment:  9959714.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   483.234k i/100ms
       attr_accessor   563.539k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.847M (± 0.2%) i/s -     24.645M in   5.084757s
       attr_accessor      5.615M (± 0.6%) i/s -     28.177M in   5.018354s

Comparison:
       attr_accessor:  5614976.7 i/s
   getter_and_setter:  4846846.6 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    90.053k i/100ms
         respond_to?   766.029k i/100ms
Calculating -------------------------------------
      begin...rescue    899.858k (± 0.8%) i/s -      4.503M in   5.004084s
         respond_to?      7.646M (± 0.3%) i/s -     38.301M in   5.009587s

Comparison:
         respond_to?:  7645686.3 i/s
      begin...rescue:   899858.2 i/s - 8.50x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   287.950k i/100ms
             &method   120.919k i/100ms
Calculating -------------------------------------
              normal      2.955M (± 0.7%) i/s -     14.973M in   5.068132s
             &method      1.198M (± 2.0%) i/s -      6.046M in   5.049415s

Comparison:
              normal:  2954551.9 i/s
             &method:  1197889.8 i/s - 2.47x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       251.000  i/100ms
       define_method   316.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.308k (±16.9%) i/s -     11.044k in   5.125417s
       define_method      3.182k (±18.8%) i/s -     14.536k in   5.049224s

Comparison:
       define_method:     3181.9 i/s
module_eval with string:     2307.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   261.960k i/100ms
       Kernel#format   207.634k i/100ms
            String#%   178.634k i/100ms
Calculating -------------------------------------
         Float#round      2.664M (± 0.2%) i/s -     13.360M in   5.014686s
       Kernel#format      2.059M (± 0.5%) i/s -     10.382M in   5.042745s
            String#%      1.763M (± 0.8%) i/s -      8.932M in   5.067732s

Comparison:
         Float#round:  2664181.1 i/s
       Kernel#format:  2058799.4 i/s - 1.29x  (± 0.00) slower
            String#%:  1762568.0 i/s - 1.51x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   907.940k i/100ms
          OpenStruct   497.245k i/100ms
Calculating -------------------------------------
                Hash      9.029M (± 0.8%) i/s -     45.397M in   5.028448s
          OpenStruct      5.006M (± 0.4%) i/s -     25.359M in   5.065414s

Comparison:
                Hash:  9028600.5 i/s
          OpenStruct:  5006480.5 i/s - 1.80x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.097M i/100ms
          OpenStruct    11.478k i/100ms
Calculating -------------------------------------
                Hash     11.616M (± 0.4%) i/s -     58.152M in   5.006096s
          OpenStruct    115.618k (± 2.8%) i/s -    585.378k in   5.067256s

Comparison:
                Hash: 11616370.5 i/s
          OpenStruct:   115617.8 i/s - 100.47x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   601.910k i/100ms
  ancestors.include?   123.796k i/100ms
Calculating -------------------------------------
  less than or equal      5.888M (± 0.8%) i/s -     29.494M in   5.009370s
  ancestors.include?      1.219M (± 0.6%) i/s -      6.190M in   5.077606s

Comparison:
  less than or equal:  5888029.0 i/s
  ancestors.include?:  1219083.7 i/s - 4.83x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.718  (± 0.0%) i/s -      4.000  in   5.571068s
         Kernel loop      0.214  (± 0.0%) i/s -      2.000  in   9.324528s

Comparison:
          While Loop:        0.7 i/s
         Kernel loop:        0.2 i/s - 3.35x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.513M i/100ms
         Array#first     1.287M i/100ms
Calculating -------------------------------------
           Array#[0]     15.003M (± 0.4%) i/s -     75.666M in   5.043413s
         Array#first     12.978M (± 0.4%) i/s -     65.615M in   5.055741s

Comparison:
           Array#[0]: 15003286.7 i/s
         Array#first: 12978424.8 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.552M i/100ms
          Array#last     1.305M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.540M (± 0.3%) i/s -     79.167M in   5.094535s
          Array#last     13.046M (± 0.3%) i/s -     65.238M in   5.000556s

Comparison:
          Array#[-1]: 15539726.1 i/s
          Array#last: 13046237.0 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    96.734k i/100ms
Calculating -------------------------------------
                find      0.269  (± 0.0%) i/s -      2.000  in   7.423632s
             bsearch    968.985k (± 0.3%) i/s -      4.933M in   5.091384s

Comparison:
             bsearch:   968985.3 i/s
                find:        0.3 i/s - 3596695.28x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    18.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    191.124  (± 2.6%) i/s -    972.000  in   5.088782s
        Array#insert      1.444  (± 0.0%) i/s -      8.000  in   5.540130s

Comparison:
       Array#unshift:      191.1 i/s
        Array#insert:        1.4 i/s - 132.35x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.120M i/100ms
          Array#size     2.113M i/100ms
         Array#count     1.606M i/100ms
Calculating -------------------------------------
        Array#length     21.216M (± 0.5%) i/s -    108.140M in   5.097215s
          Array#size     21.093M (± 0.7%) i/s -    105.656M in   5.009204s
         Array#count     16.256M (± 2.0%) i/s -     81.928M in   5.042110s

Comparison:
        Array#length: 21216006.8 i/s
          Array#size: 21093207.9 i/s - same-ish: difference falls within error
         Array#count: 16255723.8 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    44.866k i/100ms
        Array#sample     1.045M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    459.026k (± 0.4%) i/s -      2.333M in   5.082651s
        Array#sample     10.435M (± 0.3%) i/s -     52.233M in   5.005463s

Comparison:
        Array#sample: 10435323.1 i/s
 Array#shuffle.first:   459025.8 i/s - 22.73x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    63.502k i/100ms
          Date.parse    32.283k i/100ms
Calculating -------------------------------------
        Date.iso8601    640.149k (± 2.5%) i/s -      3.239M in   5.062613s
          Date.parse    323.408k (± 0.3%) i/s -      1.646M in   5.090920s

Comparison:
        Date.iso8601:   640149.2 i/s
          Date.parse:   323408.3 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.597k i/100ms
           Array#map    25.714k i/100ms
Calculating -------------------------------------
   Array#each + push    185.235k (± 0.5%) i/s -    929.850k in   5.019980s
           Array#map    256.723k (± 0.5%) i/s -      1.286M in   5.008256s

Comparison:
           Array#map:   256723.1 i/s
   Array#each + push:   185234.7 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    28.858k i/100ms
               #each    31.217k i/100ms
Calculating -------------------------------------
            For loop    287.568k (± 0.6%) i/s -      1.443M in   5.017769s
               #each    310.780k (± 1.7%) i/s -      1.561M in   5.024078s

Comparison:
               #each:   310779.9 i/s
            For loop:   287568.3 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.769k i/100ms
     each_with_index    18.601k i/100ms
Calculating -------------------------------------
          While Loop    275.829k (± 0.2%) i/s -      1.388M in   5.033757s
     each_with_index    185.989k (± 0.4%) i/s -    930.050k in   5.000637s

Comparison:
          While Loop:   275828.8 i/s
     each_with_index:   185989.4 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol   122.703k i/100ms
      inject to_proc     1.759k i/100ms
        inject block     1.902k i/100ms
Calculating -------------------------------------
       inject symbol      1.233M (± 0.8%) i/s -      6.258M in   5.076536s
      inject to_proc     17.589k (± 0.2%) i/s -     87.950k in   5.000321s
        inject block     19.785k (± 0.2%) i/s -    100.806k in   5.095230s

Comparison:
       inject symbol:  1232787.4 i/s
        inject block:    19784.5 i/s - 62.31x  (± 0.00) slower
      inject to_proc:    17588.9 i/s - 70.09x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.951k i/100ms
   Array#map.flatten     4.193k i/100ms
      Array#flat_map     9.027k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     69.582k (± 2.5%) i/s -    354.501k in   5.098603s
   Array#map.flatten     41.652k (± 2.9%) i/s -    209.650k in   5.038378s
      Array#flat_map     90.468k (± 0.6%) i/s -    460.377k in   5.089003s

Comparison:
      Array#flat_map:    90468.2 i/s
Array#map.flatten(1):    69581.5 i/s - 1.30x  (± 0.00) slower
   Array#map.flatten:    41651.9 i/s - 2.17x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    29.465k i/100ms
  Array#reverse_each    30.255k i/100ms
Calculating -------------------------------------
  Array#reverse.each    293.938k (± 0.3%) i/s -      1.473M in   5.012176s
  Array#reverse_each    301.448k (± 0.5%) i/s -      1.513M in   5.018398s

Comparison:
  Array#reverse_each:   301447.9 i/s
  Array#reverse.each:   293937.6 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.418k i/100ms
   Enumerable#detect    82.590k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        204.037k (± 0.3%) i/s -      4.084M in  20.014235s
   Enumerable#detect    831.365k (± 0.6%) i/s -     16.683M in  20.068000s

Comparison:
   Enumerable#detect:   831365.2 i/s
Enumerable#select.first:   204037.3 i/s - 4.07x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       240.534k i/100ms
Enumerable#select.last
                        18.492k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.422M (± 1.2%) i/s -     12.267M in   5.065447s
Enumerable#select.last
                        184.381k (± 0.7%) i/s -    924.600k in   5.014865s

Comparison:
Enumerable#reverse.detect:  2422086.1 i/s
Enumerable#select.last:   184381.2 i/s - 13.14x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         5.315k i/100ms
  Enumerable#sort_by     5.042k i/100ms
     Enumerable#sort     2.427k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         52.838k (± 0.6%) i/s -    265.750k in   5.029759s
  Enumerable#sort_by     51.326k (± 1.4%) i/s -    257.142k in   5.010954s
     Enumerable#sort     24.664k (± 0.3%) i/s -    123.777k in   5.018582s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    52837.6 i/s
  Enumerable#sort_by:    51325.5 i/s - 1.03x  (± 0.00) slower
     Enumerable#sort:    24664.0 i/s - 2.14x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.355k i/100ms
Enumerable#sort_by...first
                         8.712k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    173.516k (± 0.5%) i/s -    867.750k in   5.001113s
Enumerable#sort_by...first
                         86.386k (± 1.1%) i/s -    435.600k in   5.043066s

Comparison:
   Enumerable#min_by:   173515.6 i/s
Enumerable#sort_by...first:    86386.3 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   426.479k i/100ms
            Hash#dup   300.673k i/100ms
Calculating -------------------------------------
              Hash[]      3.713M (± 1.0%) i/s -     18.765M in   5.054737s
            Hash#dup      2.835M (± 0.5%) i/s -     14.432M in   5.091175s

Comparison:
              Hash[]:  3712771.8 i/s
            Hash#dup:  2834846.6 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.429M i/100ms
  Hash#fetch, symbol     1.159M i/100ms
     Hash#[], string     1.234M i/100ms
  Hash#fetch, string   774.219k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.280M (± 0.5%) i/s -     71.452M in   5.003716s
  Hash#fetch, symbol     11.545M (± 0.3%) i/s -     57.961M in   5.020640s
     Hash#[], string     12.415M (± 0.1%) i/s -     62.925M in   5.068345s
  Hash#fetch, string      7.732M (± 0.5%) i/s -     38.711M in   5.006809s

Comparison:
     Hash#[], symbol: 14280077.4 i/s
     Hash#[], string: 12415287.8 i/s - 1.15x  (± 0.00) slower
  Hash#fetch, symbol: 11544681.3 i/s - 1.24x  (± 0.00) slower
  Hash#fetch, string:  7731845.8 i/s - 1.85x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   874.944k i/100ms
             Hash#[]     1.005M i/100ms
          Hash#[] ||   895.301k i/100ms
          Hash#[] &&   391.670k i/100ms
          Hash#fetch   607.601k i/100ms
 Hash#fetch fallback   387.598k i/100ms
Calculating -------------------------------------
            Hash#dig      8.562M (± 2.1%) i/s -     42.872M in   5.010054s
             Hash#[]     10.097M (± 0.7%) i/s -     51.234M in   5.074377s
          Hash#[] ||      8.863M (± 0.5%) i/s -     44.765M in   5.050884s
          Hash#[] &&      3.879M (± 2.0%) i/s -     19.584M in   5.050397s
          Hash#fetch      5.987M (± 0.5%) i/s -     30.380M in   5.074712s
 Hash#fetch fallback      3.870M (± 1.8%) i/s -     19.380M in   5.009210s

Comparison:
             Hash#[]: 10097084.6 i/s
          Hash#[] ||:  8863056.7 i/s - 1.14x  (± 0.00) slower
            Hash#dig:  8561628.4 i/s - 1.18x  (± 0.00) slower
          Hash#fetch:  5986692.8 i/s - 1.69x  (± 0.00) slower
          Hash#[] &&:  3879088.4 i/s - 2.60x  (± 0.00) slower
 Hash#fetch fallback:  3870223.6 i/s - 2.61x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.460M i/100ms
  Hash#fetch + block     1.456M i/100ms
    Hash#fetch + arg     1.096M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.476M (± 0.3%) i/s -     72.975M in   5.041033s
  Hash#fetch + block     14.253M (± 0.9%) i/s -     71.327M in   5.004904s
    Hash#fetch + arg     10.889M (± 0.2%) i/s -     54.820M in   5.034282s

Comparison:
  Hash#fetch + const: 14476351.2 i/s
  Hash#fetch + block: 14252554.4 i/s - 1.02x  (± 0.00) slower
    Hash#fetch + arg: 10889373.6 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.325k i/100ms
         sort + to_h    11.845k i/100ms
Calculating -------------------------------------
      sort_by + to_h    271.970k (± 0.7%) i/s -      1.366M in   5.023750s
         sort + to_h    118.411k (± 1.6%) i/s -    592.250k in   5.003053s

Comparison:
      sort_by + to_h:   271970.2 i/s
         sort + to_h:   118411.0 i/s - 2.30x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   187.899k i/100ms
       Hash#each_key   195.984k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.889M (± 0.7%) i/s -      9.583M in   5.074093s
       Hash#each_key      1.974M (± 1.0%) i/s -      9.995M in   5.062755s

Comparison:
       Hash#each_key:  1974480.5 i/s
      Hash#keys.each:  1888681.8 i/s - 1.05x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.691k i/100ms
           Hash#key?   931.774k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     16.743k (± 4.6%) i/s -     84.550k in   5.063611s
           Hash#key?      9.284M (± 0.3%) i/s -     46.589M in   5.018271s

Comparison:
           Hash#key?:  9283875.2 i/s
  Hash#keys.include?:    16743.4 i/s - 554.48x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.112k i/100ms
            Hash#[]=    10.128k i/100ms
Calculating -------------------------------------
         Hash#merge!     41.229k (± 0.5%) i/s -    209.712k in   5.086644s
            Hash#[]=    101.876k (± 0.7%) i/s -    516.528k in   5.070425s

Comparison:
            Hash#[]=:   101876.1 i/s
         Hash#merge!:    41229.1 i/s - 2.47x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         5.182k i/100ms
      Hash#merge({})     4.168k i/100ms
 Hash#dup#merge!({})     2.728k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         51.923k (± 0.4%) i/s -    264.282k in   5.089904s
      Hash#merge({})     41.250k (± 1.9%) i/s -    208.400k in   5.054189s
 Hash#dup#merge!({})     27.367k (± 0.5%) i/s -    139.128k in   5.083873s

Comparison:
{}#merge!(Hash) do end:    51923.5 i/s
      Hash#merge({}):    41249.6 i/s - 1.26x  (± 0.00) slower
 Hash#dup#merge!({}):    27367.2 i/s - 1.90x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   395.816k i/100ms
          Hash#merge   368.573k i/100ms
Calculating -------------------------------------
        Hash#**other      3.914M (± 0.9%) i/s -     19.791M in   5.056855s
          Hash#merge      3.669M (± 0.4%) i/s -     18.429M in   5.022877s

Comparison:
        Hash#**other:  3913971.0 i/s
          Hash#merge:  3668992.5 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.685k i/100ms
         Hash#merge!     4.110k i/100ms
Calculating -------------------------------------
          Hash#merge     16.855k (± 0.9%) i/s -     85.935k in   5.099049s
         Hash#merge!     41.303k (± 0.6%) i/s -    209.610k in   5.075120s

Comparison:
         Hash#merge!:    41302.9 i/s
          Hash#merge:    16854.6 i/s - 2.45x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      424.689k i/100ms
Array#each             236.303k i/100ms
Array#each_w/_object   178.229k i/100ms
Hash#select-include     78.651k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.292M (± 2.8%) i/s -     21.659M in   5.050713s
Array#each                2.298M (± 1.0%) i/s -     11.579M in   5.039505s
Array#each_w/_object      1.749M (± 1.6%) i/s -      8.911M in   5.095123s
Hash#select-include     780.019k (± 0.6%) i/s -      3.933M in   5.041776s

Comparison:
Hash#native-slice   :  4292317.5 i/s
Array#each          :  2297846.4 i/s - 1.87x  (± 0.00) slower
Array#each_w/_object:  1749473.1 i/s - 2.45x  (± 0.00) slower
Hash#select-include :   780019.1 i/s - 5.50x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.123k i/100ms
         Hash#value?   848.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     11.098k (± 3.9%) i/s -     56.150k in   5.068917s
         Hash#value?      8.577k (± 0.5%) i/s -     43.248k in   5.042184s

Comparison:
Hash#values.include?:    11097.6 i/s
         Hash#value?:     8577.4 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   651.924k i/100ms
                send   497.997k i/100ms
      method_missing   383.114k i/100ms
Calculating -------------------------------------
                call      6.534M (± 0.3%) i/s -     33.248M in   5.088226s
                send      5.006M (± 0.5%) i/s -     25.398M in   5.073821s
      method_missing      3.791M (± 0.7%) i/s -     19.156M in   5.053469s

Comparison:
                call:  6534406.8 i/s
                send:  5005810.3 i/s - 1.31x  (± 0.00) slower
      method_missing:  3790784.8 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     8.754k i/100ms
      Symbol#to_proc     9.286k i/100ms
Calculating -------------------------------------
               Block     86.713k (± 2.6%) i/s -    437.700k in   5.051759s
      Symbol#to_proc     91.850k (± 2.7%) i/s -    464.300k in   5.059341s

Comparison:
      Symbol#to_proc:    91850.0 i/s
               Block:    86713.0 i/s - 1.06x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   901.571k i/100ms
       block + yield   961.602k i/100ms
        unused block     1.308M i/100ms
               yield     1.127M i/100ms
Calculating -------------------------------------
          block.call      9.016M (± 0.3%) i/s -     45.079M in   5.000071s
       block + yield      9.515M (± 0.3%) i/s -     48.080M in   5.053297s
        unused block     13.063M (± 0.3%) i/s -     65.386M in   5.005679s
               yield     11.252M (± 1.3%) i/s -     56.359M in   5.009612s

Comparison:
        unused block: 13062578.5 i/s
               yield: 11252224.3 i/s - 1.16x  (± 0.00) slower
       block + yield:  9514682.6 i/s - 1.37x  (± 0.00) slower
          block.call:  9015685.1 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   312.098k i/100ms
      range#include?    12.844k i/100ms
       range#member?    12.974k i/100ms
       plain compare   530.764k i/100ms
Calculating -------------------------------------
        range#cover?      3.199M (± 0.4%) i/s -     16.229M in   5.072490s
      range#include?    131.485k (± 0.4%) i/s -    667.888k in   5.079637s
       range#member?    131.040k (± 0.7%) i/s -    661.674k in   5.049640s
       plain compare      5.292M (± 0.5%) i/s -     26.538M in   5.015296s

Comparison:
       plain compare:  5291608.1 i/s
        range#cover?:  3199498.3 i/s - 1.65x  (± 0.00) slower
      range#include?:   131485.1 i/s - 40.24x  (± 0.00) slower
       range#member?:   131039.8 i/s - 40.38x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   933.289k i/100ms
           String#=~   654.628k i/100ms
          Regexp#===   600.400k i/100ms
        String#match   480.941k i/100ms
Calculating -------------------------------------
       String#match?      9.404M (± 0.5%) i/s -     47.598M in   5.061644s
           String#=~      6.513M (± 0.7%) i/s -     32.731M in   5.026115s
          Regexp#===      5.982M (± 2.4%) i/s -     30.020M in   5.021558s
        String#match      4.812M (± 0.5%) i/s -     24.528M in   5.097279s

Comparison:
       String#match?:  9403849.9 i/s
           String#=~:  6512613.8 i/s - 1.44x  (± 0.00) slower
          Regexp#===:  5981940.7 i/s - 1.57x  (± 0.00) slower
        String#match:  4812110.8 i/s - 1.95x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   645.628k i/100ms
      String#casecmp   801.922k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.458M (± 0.9%) i/s -     32.927M in   5.099230s
      String#casecmp      7.956M (± 2.3%) i/s -     40.096M in   5.042890s

Comparison:
      String#casecmp:  7956172.6 i/s
String#downcase + ==:  6457743.4 i/s - 1.23x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   576.948k i/100ms
       String#concat   599.323k i/100ms
       String#append   650.569k i/100ms
         "foo" "bar"     1.130M i/100ms
  "#{'foo'}#{'bar'}"     1.167M i/100ms
Calculating -------------------------------------
            String#+      5.849M (± 0.6%) i/s -     29.424M in   5.030891s
       String#concat      5.999M (± 0.6%) i/s -     30.565M in   5.095273s
       String#append      6.496M (± 0.5%) i/s -     32.528M in   5.007378s
         "foo" "bar"     11.307M (± 0.3%) i/s -     57.630M in   5.096763s
  "#{'foo'}#{'bar'}"     11.706M (± 0.3%) i/s -     59.532M in   5.085714s

Comparison:
  "#{'foo'}#{'bar'}": 11705925.0 i/s
         "foo" "bar": 11307332.7 i/s - 1.04x  (± 0.00) slower
       String#append:  6496277.7 i/s - 1.80x  (± 0.00) slower
       String#concat:  5999040.1 i/s - 1.95x  (± 0.00) slower
            String#+:  5848921.1 i/s - 2.00x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@   986.591k i/100ms
          String#dup   570.096k i/100ms
Calculating -------------------------------------
           String#+@      9.841M (± 1.0%) i/s -     49.330M in   5.012976s
          String#dup      5.682M (± 0.7%) i/s -     28.505M in   5.016826s

Comparison:
           String#+@:  9841410.7 i/s
          String#dup:  5682092.1 i/s - 1.73x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   186.236k i/100ms
       String#match?   434.066k i/100ms
    String#end_with?   606.203k i/100ms
Calculating -------------------------------------
           String#=~      1.859M (± 0.6%) i/s -      9.312M in   5.009815s
       String#match?      4.327M (± 0.5%) i/s -     21.703M in   5.016165s
    String#end_with?      6.060M (± 0.6%) i/s -     30.310M in   5.002046s

Comparison:
    String#end_with?:  6059740.8 i/s
       String#match?:  4326796.0 i/s - 1.40x  (± 0.00) slower
           String#=~:  1858773.7 i/s - 3.26x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   109.534k i/100ms
          String#sub   130.281k i/100ms
String#dup["string"]=
                       176.291k i/100ms
Calculating -------------------------------------
         String#gsub      1.109M (± 2.2%) i/s -      5.586M in   5.042236s
          String#sub      1.359M (± 0.7%) i/s -      6.905M in   5.079784s
String#dup["string"]=
                          1.790M (± 2.0%) i/s -      8.991M in   5.024737s

Comparison:
String#dup["string"]=:  1790136.7 i/s
          String#sub:  1359358.1 i/s - 1.32x  (± 0.00) slower
         String#gsub:  1108536.8 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   101.214k i/100ms
           String#tr   359.191k i/100ms
Calculating -------------------------------------
         String#gsub      1.016M (± 0.7%) i/s -      5.162M in   5.079979s
           String#tr      3.590M (± 0.5%) i/s -     17.960M in   5.002771s

Comparison:
           String#tr:  3590008.1 i/s
         String#gsub:  1016187.4 i/s - 3.53x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.149M i/100ms
         With Freeze     1.678M i/100ms
Calculating -------------------------------------
      Without Freeze     11.488M (± 0.4%) i/s -     57.454M in   5.001157s
         With Freeze     16.673M (± 0.4%) i/s -     83.907M in   5.032548s

Comparison:
         With Freeze: 16673208.2 i/s
      Without Freeze: 11488248.7 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.341k i/100ms
      String#squeeze   153.553k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     33.401k (± 0.5%) i/s -    167.050k in   5.001484s
      String#squeeze      1.545M (± 0.3%) i/s -      7.831M in   5.070016s

Comparison:
      String#squeeze:  1544630.0 i/s
 String#gsub/regex+/:    33400.8 i/s - 46.25x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   253.100k i/100ms
       String#match?   641.261k i/100ms
  String#start_with?   874.214k i/100ms
Calculating -------------------------------------
           String#=~      2.571M (± 2.4%) i/s -     12.908M in   5.024656s
       String#match?      6.428M (± 0.5%) i/s -     32.704M in   5.087882s
  String#start_with?      8.758M (± 0.5%) i/s -     44.585M in   5.091021s

Comparison:
  String#start_with?:  8757799.9 i/s
       String#match?:  6428017.6 i/s - 1.36x  (± 0.00) slower
           String#=~:  2570672.7 i/s - 3.41x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   202.211k i/100ms
    String#[0, n] ==    84.987k i/100ms
   String#[RANGE] ==    76.736k i/100ms
   String#[0...n] ==    46.037k i/100ms
Calculating -------------------------------------
  String#start_with?      1.989M (± 0.2%) i/s -     10.111M in   5.084500s
    String#[0, n] ==    857.026k (± 1.0%) i/s -      4.334M in   5.057900s
   String#[RANGE] ==    774.360k (± 0.5%) i/s -      3.914M in   5.054022s
   String#[0...n] ==    473.119k (± 0.9%) i/s -      2.394M in   5.060284s

Comparison:
  String#start_with?:  1988514.9 i/s
    String#[0, n] ==:   857026.4 i/s - 2.32x  (± 0.00) slower
   String#[RANGE] ==:   774359.6 i/s - 2.57x  (± 0.00) slower
   String#[0...n] ==:   473119.5 i/s - 4.20x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   170.985k i/100ms
 String#sub!'string'   126.131k i/100ms
String#gsub!'string'    77.385k i/100ms
  String#[/regexp/]=   145.145k i/100ms
 String#sub!/regexp/   112.838k i/100ms
String#gsub!/regexp/    58.437k i/100ms
Calculating -------------------------------------
  String#['string']=      1.768M (± 0.5%) i/s -      8.891M in   5.029429s
 String#sub!'string'      1.270M (± 0.6%) i/s -      6.433M in   5.064474s
String#gsub!'string'    779.806k (± 0.7%) i/s -      3.947M in   5.061283s
  String#[/regexp/]=      1.457M (± 0.7%) i/s -      7.402M in   5.079211s
 String#sub!/regexp/      1.118M (± 0.3%) i/s -      5.642M in   5.044404s
String#gsub!/regexp/    592.413k (± 0.3%) i/s -      2.980M in   5.030816s

Comparison:
  String#['string']=:  1767889.2 i/s
  String#[/regexp/]=:  1457462.7 i/s - 1.21x  (± 0.00) slower
 String#sub!'string':  1270203.2 i/s - 1.39x  (± 0.00) slower
 String#sub!/regexp/:  1118456.0 i/s - 1.58x  (± 0.00) slower
String#gsub!'string':   779805.9 i/s - 2.27x  (± 0.00) slower
String#gsub!/regexp/:   592413.5 i/s - 2.98x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   145.113k i/100ms
        String#chomp   557.653k i/100ms
String#delete_suffix   600.631k i/100ms
Calculating -------------------------------------
          String#sub      1.450M (± 0.4%) i/s -      7.256M in   5.003745s
        String#chomp      5.533M (± 1.6%) i/s -     27.883M in   5.040795s
String#delete_suffix      6.000M (± 0.4%) i/s -     30.032M in   5.004946s

Comparison:
String#delete_suffix:  6000451.2 i/s
        String#chomp:  5532878.5 i/s - 1.08x  (± 0.00) slower
          String#sub:  1450071.0 i/s - 4.14x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   603.978k i/100ms
          String#sub   150.227k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.138M (± 0.9%) i/s -     30.803M in   5.019057s
          String#sub      1.513M (± 0.4%) i/s -      7.662M in   5.064679s

Comparison:
String#delete_prefix:  6137643.3 i/s
          String#sub:  1512774.0 i/s - 4.06x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   605.370k i/100ms
    String#unpack[0]   429.592k i/100ms
Calculating -------------------------------------
      String#unpack1      6.025M (± 0.5%) i/s -     30.268M in   5.023958s
    String#unpack[0]      4.285M (± 0.4%) i/s -     21.480M in   5.012866s

Comparison:
      String#unpack1:  6024964.6 i/s
    String#unpack[0]:  4284978.8 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    28.682k i/100ms
          Time.parse     9.473k i/100ms
Calculating -------------------------------------
        Time.iso8601    286.299k (± 0.5%) i/s -      1.434M in   5.009218s
          Time.parse     95.817k (± 0.6%) i/s -    483.123k in   5.042308s

Comparison:
        Time.iso8601:   286299.1 i/s
          Time.parse:    95817.2 i/s - 2.99x  (± 0.00) slower

