$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       768.237k i/100ms
Function with splat arguments
                        28.326k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.644M (± 2.2%) i/s -     38.412M in   5.028052s
Function with splat arguments
                        272.958k (± 5.2%) i/s -      1.360M in   5.000749s

Comparison:
Function with single Array argument:  7643607.8 i/s
Function with splat arguments:   272958.3 i/s - 28.00x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.009M i/100ms
Sequential Assignment
                       993.867k i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.009M (± 0.7%) i/s -     50.442M in   5.040176s
Sequential Assignment
                         10.150M (± 0.3%) i/s -     51.681M in   5.091863s

Comparison:
Sequential Assignment: 10149855.9 i/s
 Parallel Assignment: 10008570.7 i/s - 1.01x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   481.454k i/100ms
       attr_accessor   562.747k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.811M (± 1.3%) i/s -     24.073M in   5.005011s
       attr_accessor      5.616M (± 0.3%) i/s -     28.137M in   5.010117s

Comparison:
       attr_accessor:  5616153.6 i/s
   getter_and_setter:  4810573.0 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    88.415k i/100ms
         respond_to?   764.660k i/100ms
Calculating -------------------------------------
      begin...rescue    885.698k (± 0.8%) i/s -      4.509M in   5.091418s
         respond_to?      7.646M (± 0.4%) i/s -     38.233M in   5.000299s

Comparison:
         respond_to?:  7646270.4 i/s
      begin...rescue:   885698.1 i/s - 8.63x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   296.635k i/100ms
             &method   121.591k i/100ms
Calculating -------------------------------------
              normal      2.972M (± 0.5%) i/s -     15.128M in   5.090734s
             &method      1.207M (± 0.4%) i/s -      6.080M in   5.036109s

Comparison:
              normal:  2971822.8 i/s
             &method:  1207214.0 i/s - 2.46x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       270.000  i/100ms
       define_method   302.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.411k (±21.0%) i/s -     10.800k in   5.081328s
       define_method      3.279k (±18.6%) i/s -     15.100k in   5.072480s

Comparison:
       define_method:     3279.4 i/s
module_eval with string:     2410.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   260.796k i/100ms
       Kernel#format   205.444k i/100ms
            String#%   175.913k i/100ms
Calculating -------------------------------------
         Float#round      2.648M (± 0.2%) i/s -     13.301M in   5.022635s
       Kernel#format      2.035M (± 4.9%) i/s -     10.272M in   5.065434s
            String#%      1.752M (± 0.5%) i/s -      8.796M in   5.019995s

Comparison:
         Float#round:  2648145.9 i/s
       Kernel#format:  2034662.8 i/s - 1.30x  (± 0.00) slower
            String#%:  1752166.7 i/s - 1.51x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   884.488k i/100ms
          OpenStruct   498.480k i/100ms
Calculating -------------------------------------
                Hash      8.969M (± 0.6%) i/s -     45.109M in   5.029560s
          OpenStruct      5.014M (± 0.2%) i/s -     25.422M in   5.070746s

Comparison:
                Hash:  8969062.4 i/s
          OpenStruct:  5013581.9 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.085M i/100ms
          OpenStruct    11.430k i/100ms
Calculating -------------------------------------
                Hash     11.559M (± 2.1%) i/s -     58.602M in   5.072418s
          OpenStruct    115.474k (± 2.4%) i/s -    582.930k in   5.051091s

Comparison:
                Hash: 11559040.3 i/s
          OpenStruct:   115474.3 i/s - 100.10x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   592.094k i/100ms
  ancestors.include?   122.086k i/100ms
Calculating -------------------------------------
  less than or equal      5.903M (± 0.9%) i/s -     29.605M in   5.015845s
  ancestors.include?      1.219M (± 0.7%) i/s -      6.104M in   5.008753s

Comparison:
  less than or equal:  5902760.5 i/s
  ancestors.include?:  1218783.1 i/s - 4.84x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.698  (± 0.0%) i/s -      4.000  in   5.779965s
         Kernel loop      0.214  (± 0.0%) i/s -      2.000  in   9.336431s

Comparison:
          While Loop:        0.7 i/s
         Kernel loop:        0.2 i/s - 3.26x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.528M i/100ms
         Array#first     1.293M i/100ms
Calculating -------------------------------------
           Array#[0]     15.302M (± 0.3%) i/s -     77.939M in   5.093503s
         Array#first     12.925M (± 0.7%) i/s -     64.664M in   5.003271s

Comparison:
           Array#[0]: 15301791.2 i/s
         Array#first: 12924968.4 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.512M i/100ms
          Array#last     1.321M i/100ms
Calculating -------------------------------------
          Array#[-1]     14.824M (± 0.3%) i/s -     75.602M in   5.100099s
          Array#last     13.249M (± 0.3%) i/s -     67.355M in   5.083839s

Comparison:
          Array#[-1]: 14823860.5 i/s
          Array#last: 13248867.9 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    96.549k i/100ms
Calculating -------------------------------------
                find      0.274  (± 0.0%) i/s -      2.000  in   7.286466s
             bsearch    967.044k (± 0.9%) i/s -      4.924M in   5.092198s

Comparison:
             bsearch:   967044.0 i/s
                find:        0.3 i/s - 3523159.81x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    18.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    191.435  (± 2.1%) i/s -    972.000  in   5.080063s
        Array#insert      1.452  (± 0.0%) i/s -      8.000  in   5.510787s

Comparison:
       Array#unshift:      191.4 i/s
        Array#insert:        1.5 i/s - 131.87x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.092M i/100ms
          Array#size     2.107M i/100ms
         Array#count     1.631M i/100ms
Calculating -------------------------------------
        Array#length     20.928M (± 0.4%) i/s -    106.695M in   5.098338s
          Array#size     21.115M (± 0.4%) i/s -    107.478M in   5.090256s
         Array#count     16.346M (± 0.2%) i/s -     83.162M in   5.087707s

Comparison:
          Array#size: 21114852.6 i/s
        Array#length: 20927620.2 i/s - 1.01x  (± 0.00) slower
         Array#count: 16345761.4 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.840k i/100ms
        Array#sample     1.038M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    459.597k (± 0.3%) i/s -      2.338M in   5.086777s
        Array#sample     10.430M (± 0.3%) i/s -     52.940M in   5.075754s

Comparison:
        Array#sample: 10430150.1 i/s
 Array#shuffle.first:   459597.0 i/s - 22.69x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    62.569k i/100ms
          Date.parse    31.843k i/100ms
Calculating -------------------------------------
        Date.iso8601    629.482k (± 0.4%) i/s -      3.191M in   5.069341s
          Date.parse    319.659k (± 0.3%) i/s -      1.624M in   5.080449s

Comparison:
        Date.iso8601:   629482.1 i/s
          Date.parse:   319658.8 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.643k i/100ms
           Array#map    25.680k i/100ms
Calculating -------------------------------------
   Array#each + push    186.504k (± 0.3%) i/s -    950.793k in   5.098011s
           Array#map    256.406k (± 1.0%) i/s -      1.284M in   5.008247s

Comparison:
           Array#map:   256405.6 i/s
   Array#each + push:   186504.3 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    28.489k i/100ms
               #each    31.560k i/100ms
Calculating -------------------------------------
            For loop    286.144k (± 0.5%) i/s -      1.453M in   5.077788s
               #each    315.129k (± 0.4%) i/s -      1.578M in   5.007562s

Comparison:
               #each:   315129.1 i/s
            For loop:   286143.8 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.586k i/100ms
     each_with_index    18.740k i/100ms
Calculating -------------------------------------
          While Loop    273.877k (± 0.1%) i/s -      1.379M in   5.036220s
     each_with_index    187.395k (± 0.1%) i/s -    955.740k in   5.100147s

Comparison:
          While Loop:   273876.6 i/s
     each_with_index:   187395.0 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol   124.439k i/100ms
      inject to_proc     1.758k i/100ms
        inject block     2.007k i/100ms
Calculating -------------------------------------
       inject symbol      1.240M (± 1.9%) i/s -      6.222M in   5.018571s
      inject to_proc     17.672k (± 0.4%) i/s -     89.658k in   5.073595s
        inject block     20.064k (± 0.3%) i/s -    100.350k in   5.001552s

Comparison:
       inject symbol:  1240279.4 i/s
        inject block:    20063.9 i/s - 61.82x  (± 0.00) slower
      inject to_proc:    17671.8 i/s - 70.18x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     7.073k i/100ms
   Array#map.flatten     4.193k i/100ms
      Array#flat_map     9.065k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     73.330k (± 0.8%) i/s -    367.796k in   5.015935s
   Array#map.flatten     42.937k (± 2.8%) i/s -    218.036k in   5.082883s
      Array#flat_map     94.324k (± 0.7%) i/s -    480.445k in   5.093803s

Comparison:
      Array#flat_map:    94324.4 i/s
Array#map.flatten(1):    73330.2 i/s - 1.29x  (± 0.00) slower
   Array#map.flatten:    42937.5 i/s - 2.20x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    29.321k i/100ms
  Array#reverse_each    30.249k i/100ms
Calculating -------------------------------------
  Array#reverse.each    293.060k (± 0.2%) i/s -      1.466M in   5.002593s
  Array#reverse_each    301.898k (± 0.4%) i/s -      1.512M in   5.009889s

Comparison:
  Array#reverse_each:   301897.8 i/s
  Array#reverse.each:   293059.5 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.436k i/100ms
   Enumerable#detect    81.495k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        203.978k (± 0.3%) i/s -      4.087M in  20.037603s
   Enumerable#detect    816.360k (± 0.3%) i/s -     16.380M in  20.065464s

Comparison:
   Enumerable#detect:   816359.7 i/s
Enumerable#select.first:   203978.1 i/s - 4.00x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       243.637k i/100ms
Enumerable#select.last
                        18.393k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.441M (± 0.4%) i/s -     12.425M in   5.090006s
Enumerable#select.last
                        184.221k (± 0.3%) i/s -    938.043k in   5.092000s

Comparison:
Enumerable#reverse.detect:  2441196.1 i/s
Enumerable#select.last:   184220.5 i/s - 13.25x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         5.265k i/100ms
  Enumerable#sort_by     5.087k i/100ms
     Enumerable#sort     2.450k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         52.971k (± 0.7%) i/s -    268.515k in   5.069320s
  Enumerable#sort_by     49.699k (± 1.5%) i/s -    249.263k in   5.016563s
     Enumerable#sort     24.509k (± 0.4%) i/s -    124.950k in   5.098140s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    52971.4 i/s
  Enumerable#sort_by:    49699.0 i/s - 1.07x  (± 0.00) slower
     Enumerable#sort:    24509.3 i/s - 2.16x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.165k i/100ms
Enumerable#sort_by...first
                         8.664k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    171.640k (± 0.1%) i/s -    858.250k in   5.000290s
Enumerable#sort_by...first
                         86.565k (± 0.2%) i/s -    433.200k in   5.004343s

Comparison:
   Enumerable#min_by:   171640.3 i/s
Enumerable#sort_by...first:    86565.3 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   429.608k i/100ms
            Hash#dup   329.882k i/100ms
Calculating -------------------------------------
              Hash[]      4.308M (± 1.1%) i/s -     21.910M in   5.086602s
            Hash#dup      3.329M (± 0.9%) i/s -     16.824M in   5.054766s

Comparison:
              Hash[]:  4307907.0 i/s
            Hash#dup:  3328599.0 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.429M i/100ms
  Hash#fetch, symbol     1.194M i/100ms
     Hash#[], string     1.163M i/100ms
  Hash#fetch, string   736.582k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.253M (± 0.4%) i/s -     71.441M in   5.012345s
  Hash#fetch, symbol     11.683M (± 0.7%) i/s -     58.489M in   5.006665s
     Hash#[], string     11.651M (± 0.3%) i/s -     59.296M in   5.089458s
  Hash#fetch, string      7.355M (± 0.3%) i/s -     36.829M in   5.007627s

Comparison:
     Hash#[], symbol: 14253147.2 i/s
  Hash#fetch, symbol: 11682795.5 i/s - 1.22x  (± 0.00) slower
     Hash#[], string: 11650884.7 i/s - 1.22x  (± 0.00) slower
  Hash#fetch, string:  7354671.8 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   864.320k i/100ms
             Hash#[]   989.551k i/100ms
          Hash#[] ||   856.968k i/100ms
          Hash#[] &&   376.433k i/100ms
          Hash#fetch   594.733k i/100ms
 Hash#fetch fallback   385.947k i/100ms
Calculating -------------------------------------
            Hash#dig      8.916M (± 0.7%) i/s -     44.945M in   5.041383s
             Hash#[]     10.534M (± 0.4%) i/s -     53.436M in   5.072629s
          Hash#[] ||      9.242M (± 0.3%) i/s -     46.276M in   5.007154s
          Hash#[] &&      3.844M (± 0.2%) i/s -     19.575M in   5.092434s
          Hash#fetch      6.185M (± 0.7%) i/s -     30.926M in   5.000078s
 Hash#fetch fallback      3.899M (± 0.7%) i/s -     19.683M in   5.048582s

Comparison:
             Hash#[]: 10534264.1 i/s
          Hash#[] ||:  9242108.0 i/s - 1.14x  (± 0.00) slower
            Hash#dig:  8915553.6 i/s - 1.18x  (± 0.00) slower
          Hash#fetch:  6185465.0 i/s - 1.70x  (± 0.00) slower
 Hash#fetch fallback:  3898967.1 i/s - 2.70x  (± 0.00) slower
          Hash#[] &&:  3843853.2 i/s - 2.74x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.461M i/100ms
  Hash#fetch + block     1.460M i/100ms
    Hash#fetch + arg     1.096M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.355M (± 0.6%) i/s -     73.034M in   5.088064s
  Hash#fetch + block     14.183M (± 0.4%) i/s -     71.518M in   5.042505s
    Hash#fetch + arg     10.879M (± 0.3%) i/s -     54.784M in   5.035818s

Comparison:
  Hash#fetch + const: 14354526.3 i/s
  Hash#fetch + block: 14183353.4 i/s - 1.01x  (± 0.00) slower
    Hash#fetch + arg: 10878968.4 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.076k i/100ms
         sort + to_h    10.947k i/100ms
Calculating -------------------------------------
      sort_by + to_h    268.591k (± 0.3%) i/s -      1.354M in   5.040424s
         sort + to_h    109.297k (± 1.0%) i/s -    547.350k in   5.008396s

Comparison:
      sort_by + to_h:   268590.6 i/s
         sort + to_h:   109297.2 i/s - 2.46x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   191.418k i/100ms
       Hash#each_key   191.378k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.922M (± 0.6%) i/s -      9.762M in   5.078279s
       Hash#each_key      1.936M (± 0.9%) i/s -      9.760M in   5.041619s

Comparison:
       Hash#each_key:  1936087.1 i/s
      Hash#keys.each:  1922425.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     2.283k i/100ms
           Hash#key?   948.477k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     22.660k (± 4.7%) i/s -    114.150k in   5.052244s
           Hash#key?      9.439M (± 0.8%) i/s -     47.424M in   5.024484s

Comparison:
           Hash#key?:  9439181.6 i/s
  Hash#keys.include?:    22659.7 i/s - 416.56x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.187k i/100ms
            Hash#[]=    10.352k i/100ms
Calculating -------------------------------------
         Hash#merge!     41.883k (± 0.4%) i/s -    213.537k in   5.098481s
            Hash#[]=    103.558k (± 0.6%) i/s -    527.952k in   5.098320s

Comparison:
            Hash#[]=:   103557.8 i/s
         Hash#merge!:    41883.3 i/s - 2.47x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         5.128k i/100ms
      Hash#merge({})     4.153k i/100ms
 Hash#dup#merge!({})     2.747k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         51.669k (± 0.2%) i/s -    261.528k in   5.061631s
      Hash#merge({})     41.083k (± 0.5%) i/s -    207.650k in   5.054505s
 Hash#dup#merge!({})     27.306k (± 0.3%) i/s -    137.350k in   5.030091s

Comparison:
{}#merge!(Hash) do end:    51669.0 i/s
      Hash#merge({}):    41083.3 i/s - 1.26x  (± 0.00) slower
 Hash#dup#merge!({}):    27306.0 i/s - 1.89x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   391.002k i/100ms
          Hash#merge   364.302k i/100ms
Calculating -------------------------------------
        Hash#**other      3.940M (± 0.5%) i/s -     19.941M in   5.061174s
          Hash#merge      3.619M (± 0.3%) i/s -     18.215M in   5.032944s

Comparison:
        Hash#**other:  3940098.2 i/s
          Hash#merge:  3619202.5 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.733k i/100ms
         Hash#merge!     4.113k i/100ms
Calculating -------------------------------------
          Hash#merge     16.991k (± 0.7%) i/s -     86.650k in   5.100114s
         Hash#merge!     41.142k (± 0.4%) i/s -    209.763k in   5.098637s

Comparison:
         Hash#merge!:    41141.5 i/s
          Hash#merge:    16990.6 i/s - 2.42x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      433.458k i/100ms
Array#each             233.491k i/100ms
Array#each_w/_object   138.779k i/100ms
Hash#select-include     69.606k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.352M (± 0.5%) i/s -     22.106M in   5.080154s
Array#each                2.332M (± 0.8%) i/s -     11.675M in   5.006869s
Array#each_w/_object      1.383M (± 2.6%) i/s -      6.939M in   5.021920s
Hash#select-include     695.573k (± 0.3%) i/s -      3.480M in   5.003558s

Comparison:
Hash#native-slice   :  4351623.9 i/s
Array#each          :  2331873.1 i/s - 1.87x  (± 0.00) slower
Array#each_w/_object:  1382730.5 i/s - 3.15x  (± 0.00) slower
Hash#select-include :   695572.8 i/s - 6.26x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     2.260k i/100ms
         Hash#value?     1.895k i/100ms
Calculating -------------------------------------
Hash#values.include?     22.742k (± 4.8%) i/s -    115.260k in   5.082045s
         Hash#value?     20.076k (± 1.0%) i/s -    100.435k in   5.003291s

Comparison:
Hash#values.include?:    22742.3 i/s
         Hash#value?:    20076.0 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   673.134k i/100ms
                send   504.283k i/100ms
      method_missing   381.283k i/100ms
Calculating -------------------------------------
                call      6.734M (± 0.6%) i/s -     34.330M in   5.098312s
                send      5.056M (± 0.8%) i/s -     25.718M in   5.086865s
      method_missing      3.835M (± 0.5%) i/s -     19.445M in   5.071241s

Comparison:
                call:  6733786.2 i/s
                send:  5056171.8 i/s - 1.33x  (± 0.00) slower
      method_missing:  3834531.8 i/s - 1.76x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     8.678k i/100ms
      Symbol#to_proc     9.298k i/100ms
Calculating -------------------------------------
               Block     86.465k (± 0.3%) i/s -    433.900k in   5.018287s
      Symbol#to_proc     92.628k (± 1.0%) i/s -    464.900k in   5.019589s

Comparison:
      Symbol#to_proc:    92627.5 i/s
               Block:    86464.7 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   933.568k i/100ms
       block + yield   975.219k i/100ms
        unused block     1.305M i/100ms
               yield     1.167M i/100ms
Calculating -------------------------------------
          block.call      9.208M (± 1.7%) i/s -     46.678M in   5.071094s
       block + yield      9.808M (± 0.4%) i/s -     49.736M in   5.070904s
        unused block     13.068M (± 0.3%) i/s -     66.541M in   5.092096s
               yield     11.682M (± 0.2%) i/s -     59.513M in   5.094534s

Comparison:
        unused block: 13067568.1 i/s
               yield: 11681835.8 i/s - 1.12x  (± 0.00) slower
       block + yield:  9808299.3 i/s - 1.33x  (± 0.00) slower
          block.call:  9207965.5 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   317.184k i/100ms
      range#include?    12.781k i/100ms
       range#member?    12.879k i/100ms
       plain compare   528.194k i/100ms
Calculating -------------------------------------
        range#cover?      3.161M (± 0.4%) i/s -     15.859M in   5.016777s
      range#include?    129.799k (± 0.3%) i/s -    651.831k in   5.021922s
       range#member?    130.037k (± 0.4%) i/s -    656.829k in   5.051194s
       plain compare      5.322M (± 1.0%) i/s -     26.938M in   5.062482s

Comparison:
       plain compare:  5321595.5 i/s
        range#cover?:  3161274.2 i/s - 1.68x  (± 0.00) slower
       range#member?:   130036.6 i/s - 40.92x  (± 0.00) slower
      range#include?:   129798.7 i/s - 41.00x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   942.069k i/100ms
           String#=~   653.827k i/100ms
          Regexp#===   602.250k i/100ms
        String#match   462.819k i/100ms
Calculating -------------------------------------
       String#match?      9.411M (± 0.3%) i/s -     47.103M in   5.005059s
           String#=~      6.555M (± 0.4%) i/s -     33.345M in   5.087120s
          Regexp#===      6.023M (± 0.4%) i/s -     30.715M in   5.099492s
        String#match      4.644M (± 0.2%) i/s -     23.604M in   5.082685s

Comparison:
       String#match?:  9411260.5 i/s
           String#=~:  6554956.9 i/s - 1.44x  (± 0.00) slower
          Regexp#===:  6023207.2 i/s - 1.56x  (± 0.00) slower
        String#match:  4643977.8 i/s - 2.03x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   640.941k i/100ms
      String#casecmp   802.126k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.442M (± 0.3%) i/s -     32.688M in   5.074645s
      String#casecmp      7.912M (± 0.4%) i/s -     40.106M in   5.069065s

Comparison:
      String#casecmp:  7912102.6 i/s
String#downcase + ==:  6441503.7 i/s - 1.23x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   574.347k i/100ms
       String#concat   584.847k i/100ms
       String#append   660.337k i/100ms
         "foo" "bar"     1.170M i/100ms
  "#{'foo'}#{'bar'}"     1.156M i/100ms
Calculating -------------------------------------
            String#+      5.789M (± 0.5%) i/s -     29.292M in   5.060199s
       String#concat      5.824M (± 0.3%) i/s -     29.242M in   5.021067s
       String#append      6.549M (± 0.4%) i/s -     33.017M in   5.041640s
         "foo" "bar"     11.733M (± 0.2%) i/s -     59.686M in   5.086813s
  "#{'foo'}#{'bar'}"     11.591M (± 0.1%) i/s -     58.950M in   5.085692s

Comparison:
         "foo" "bar": 11733462.6 i/s
  "#{'foo'}#{'bar'}": 11591463.4 i/s - 1.01x  (± 0.00) slower
       String#append:  6548923.6 i/s - 1.79x  (± 0.00) slower
       String#concat:  5823991.3 i/s - 2.01x  (± 0.00) slower
            String#+:  5788764.7 i/s - 2.03x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@   999.776k i/100ms
          String#dup   566.276k i/100ms
Calculating -------------------------------------
           String#+@      9.969M (± 0.2%) i/s -     49.989M in   5.014677s
          String#dup      5.688M (± 0.6%) i/s -     28.880M in   5.077877s

Comparison:
           String#+@:  9968559.3 i/s
          String#dup:  5687650.7 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   174.525k i/100ms
       String#match?   386.284k i/100ms
    String#end_with?   607.844k i/100ms
Calculating -------------------------------------
           String#=~      1.747M (± 0.3%) i/s -      8.901M in   5.094765s
       String#match?      3.852M (± 0.5%) i/s -     19.314M in   5.014626s
    String#end_with?      6.105M (± 0.9%) i/s -     31.000M in   5.078157s

Comparison:
    String#end_with?:  6105139.5 i/s
       String#match?:  3851658.4 i/s - 1.59x  (± 0.00) slower
           String#=~:  1747064.5 i/s - 3.49x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   108.558k i/100ms
          String#sub   133.004k i/100ms
String#dup["string"]=
                       176.720k i/100ms
Calculating -------------------------------------
         String#gsub      1.104M (± 0.4%) i/s -      5.536M in   5.017154s
          String#sub      1.353M (± 0.5%) i/s -      6.783M in   5.014988s
String#dup["string"]=
                          1.773M (± 0.7%) i/s -      9.013M in   5.082460s

Comparison:
String#dup["string"]=:  1773386.2 i/s
          String#sub:  1352622.3 i/s - 1.31x  (± 0.00) slower
         String#gsub:  1103519.7 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   100.405k i/100ms
           String#tr   359.946k i/100ms
Calculating -------------------------------------
         String#gsub      1.013M (± 0.3%) i/s -      5.121M in   5.054553s
           String#tr      3.594M (± 0.5%) i/s -     17.997M in   5.007222s

Comparison:
           String#tr:  3594355.9 i/s
         String#gsub:  1013087.9 i/s - 3.55x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.162M i/100ms
         With Freeze     1.663M i/100ms
Calculating -------------------------------------
      Without Freeze     11.577M (± 0.3%) i/s -     58.081M in   5.016907s
         With Freeze     16.692M (± 0.3%) i/s -     84.812M in   5.081124s

Comparison:
         With Freeze: 16691793.6 i/s
      Without Freeze: 11577121.0 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.351k i/100ms
      String#squeeze   155.359k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     33.614k (± 0.5%) i/s -    170.901k in   5.084257s
      String#squeeze      1.558M (± 0.9%) i/s -      7.923M in   5.087013s

Comparison:
      String#squeeze:  1557672.4 i/s
 String#gsub/regex+/:    33614.5 i/s - 46.34x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   258.460k i/100ms
       String#match?   643.650k i/100ms
  String#start_with?   879.098k i/100ms
Calculating -------------------------------------
           String#=~      2.593M (± 0.3%) i/s -     13.181M in   5.083638s
       String#match?      6.439M (± 1.1%) i/s -     32.826M in   5.098710s
  String#start_with?      8.736M (± 0.4%) i/s -     43.955M in   5.031393s

Comparison:
  String#start_with?:  8736304.4 i/s
       String#match?:  6438951.2 i/s - 1.36x  (± 0.00) slower
           String#=~:  2592945.1 i/s - 3.37x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   204.049k i/100ms
    String#[0, n] ==    87.084k i/100ms
   String#[RANGE] ==    77.583k i/100ms
   String#[0...n] ==    45.824k i/100ms
Calculating -------------------------------------
  String#start_with?      2.068M (± 0.9%) i/s -     10.406M in   5.031542s
    String#[0, n] ==    849.162k (± 0.9%) i/s -      4.267M in   5.025465s
   String#[RANGE] ==    752.001k (± 0.9%) i/s -      3.802M in   5.055697s
   String#[0...n] ==    450.807k (± 1.6%) i/s -      2.291M in   5.083849s

Comparison:
  String#start_with?:  2068428.6 i/s
    String#[0, n] ==:   849162.3 i/s - 2.44x  (± 0.00) slower
   String#[RANGE] ==:   752001.2 i/s - 2.75x  (± 0.00) slower
   String#[0...n] ==:   450807.1 i/s - 4.59x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   174.389k i/100ms
 String#sub!'string'   126.896k i/100ms
String#gsub!'string'    77.841k i/100ms
  String#[/regexp/]=   150.603k i/100ms
 String#sub!/regexp/   112.158k i/100ms
String#gsub!/regexp/    58.857k i/100ms
Calculating -------------------------------------
  String#['string']=      1.799M (± 0.5%) i/s -      9.068M in   5.041485s
 String#sub!'string'      1.281M (± 0.3%) i/s -      6.472M in   5.050268s
String#gsub!'string'    785.724k (± 0.7%) i/s -      3.970M in   5.052817s
  String#[/regexp/]=      1.496M (± 0.2%) i/s -      7.530M in   5.033896s
 String#sub!/regexp/      1.125M (± 0.5%) i/s -      5.720M in   5.084644s
String#gsub!/regexp/    594.960k (± 0.4%) i/s -      3.002M in   5.045295s

Comparison:
  String#['string']=:  1798760.0 i/s
  String#[/regexp/]=:  1495895.0 i/s - 1.20x  (± 0.00) slower
 String#sub!'string':  1281464.1 i/s - 1.40x  (± 0.00) slower
 String#sub!/regexp/:  1124992.7 i/s - 1.60x  (± 0.00) slower
String#gsub!'string':   785724.1 i/s - 2.29x  (± 0.00) slower
String#gsub!/regexp/:   594959.7 i/s - 3.02x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   134.679k i/100ms
        String#chomp   535.882k i/100ms
String#delete_suffix   579.102k i/100ms
Calculating -------------------------------------
          String#sub      1.348M (± 0.2%) i/s -      6.869M in   5.095540s
        String#chomp      5.387M (± 0.3%) i/s -     27.330M in   5.073394s
String#delete_suffix      5.840M (± 0.7%) i/s -     29.534M in   5.057253s

Comparison:
String#delete_suffix:  5840289.7 i/s
        String#chomp:  5386982.8 i/s - 1.08x  (± 0.00) slower
          String#sub:  1347972.7 i/s - 4.33x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   625.491k i/100ms
          String#sub   146.661k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.283M (± 0.3%) i/s -     31.900M in   5.077586s
          String#sub      1.474M (± 0.3%) i/s -      7.480M in   5.073584s

Comparison:
String#delete_prefix:  6282587.2 i/s
          String#sub:  1474257.0 i/s - 4.26x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   590.834k i/100ms
    String#unpack[0]   441.951k i/100ms
Calculating -------------------------------------
      String#unpack1      5.908M (± 0.3%) i/s -     29.542M in   5.000395s
    String#unpack[0]      4.459M (± 0.6%) i/s -     22.540M in   5.055183s

Comparison:
      String#unpack1:  5907921.1 i/s
    String#unpack[0]:  4458863.9 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.708k i/100ms
          Time.parse     9.427k i/100ms
Calculating -------------------------------------
        Time.iso8601    277.578k (± 0.4%) i/s -      1.413M in   5.090928s
          Time.parse     94.802k (± 0.5%) i/s -    480.777k in   5.071508s

Comparison:
        Time.iso8601:   277577.6 i/s
          Time.parse:    94801.7 i/s - 2.93x  (± 0.00) slower

