$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       762.434k i/100ms
Function with splat arguments
                        22.577k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.665M (± 0.3%) i/s -     38.884M in   5.073201s
Function with splat arguments
                        201.268k (± 6.9%) i/s -      1.016M in   5.075814s

Comparison:
Function with single Array argument:  7664684.8 i/s
Function with splat arguments:   201268.0 i/s - 38.08x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.005M i/100ms
Sequential Assignment
                         1.011M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.033M (± 0.2%) i/s -     50.275M in   5.010839s
Sequential Assignment
                         10.057M (± 0.5%) i/s -     50.535M in   5.024854s

Comparison:
Sequential Assignment: 10057293.5 i/s
 Parallel Assignment: 10033247.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   476.766k i/100ms
       attr_accessor   559.250k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.788M (± 0.4%) i/s -     24.315M in   5.078031s
       attr_accessor      5.570M (± 0.3%) i/s -     27.962M in   5.020167s

Comparison:
       attr_accessor:  5570100.6 i/s
   getter_and_setter:  4788365.6 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    86.450k i/100ms
         respond_to?   763.569k i/100ms
Calculating -------------------------------------
      begin...rescue    864.449k (± 1.5%) i/s -      4.322M in   5.001370s
         respond_to?      7.625M (± 0.7%) i/s -     38.178M in   5.007060s

Comparison:
         respond_to?:  7625357.0 i/s
      begin...rescue:   864448.7 i/s - 8.82x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   294.492k i/100ms
             &method   120.631k i/100ms
Calculating -------------------------------------
              normal      2.968M (± 0.5%) i/s -     15.019M in   5.059732s
             &method      1.208M (± 0.3%) i/s -      6.152M in   5.091245s

Comparison:
              normal:  2968438.3 i/s
             &method:  1208396.5 i/s - 2.46x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       223.000  i/100ms
       define_method   284.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.185k (±22.6%) i/s -      9.589k in   5.089114s
       define_method      3.188k (±21.8%) i/s -     15.052k in   5.316798s

Comparison:
       define_method:     3187.8 i/s
module_eval with string:     2184.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   264.521k i/100ms
       Kernel#format   207.795k i/100ms
            String#%   176.876k i/100ms
Calculating -------------------------------------
         Float#round      2.653M (± 2.2%) i/s -     13.491M in   5.088580s
       Kernel#format      2.055M (± 0.7%) i/s -     10.390M in   5.056645s
            String#%      1.758M (± 0.7%) i/s -      8.844M in   5.030300s

Comparison:
         Float#round:  2652659.5 i/s
       Kernel#format:  2054764.5 i/s - 1.29x  (± 0.00) slower
            String#%:  1758185.4 i/s - 1.51x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   893.890k i/100ms
          OpenStruct   495.052k i/100ms
Calculating -------------------------------------
                Hash      8.827M (± 0.4%) i/s -     44.694M in   5.063208s
          OpenStruct      4.967M (± 0.5%) i/s -     25.248M in   5.082906s

Comparison:
                Hash:  8827437.5 i/s
          OpenStruct:  4967274.0 i/s - 1.78x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.091M i/100ms
          OpenStruct    10.441k i/100ms
Calculating -------------------------------------
                Hash     11.429M (± 0.7%) i/s -     57.836M in   5.060788s
          OpenStruct    107.890k (± 3.5%) i/s -    542.932k in   5.038391s

Comparison:
                Hash: 11428742.3 i/s
          OpenStruct:   107890.1 i/s - 105.93x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   595.486k i/100ms
  ancestors.include?   122.642k i/100ms
Calculating -------------------------------------
  less than or equal      5.961M (± 0.6%) i/s -     30.370M in   5.094882s
  ancestors.include?      1.214M (± 0.7%) i/s -      6.132M in   5.049400s

Comparison:
  less than or equal:  5961088.3 i/s
  ancestors.include?:  1214488.8 i/s - 4.91x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.654  (± 0.0%) i/s -      4.000  in   6.192521s
         Kernel loop      0.215  (± 0.0%) i/s -      2.000  in   9.289786s

Comparison:
          While Loop:        0.7 i/s
         Kernel loop:        0.2 i/s - 3.04x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.527M i/100ms
         Array#first     1.320M i/100ms
Calculating -------------------------------------
           Array#[0]     15.325M (± 0.7%) i/s -     77.897M in   5.083104s
         Array#first     13.213M (± 0.3%) i/s -     67.325M in   5.095361s

Comparison:
           Array#[0]: 15325489.5 i/s
         Array#first: 13213106.2 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.549M i/100ms
          Array#last     1.306M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.574M (± 0.6%) i/s -     78.991M in   5.072331s
          Array#last     12.991M (± 1.5%) i/s -     65.285M in   5.026475s

Comparison:
          Array#[-1]: 15573589.0 i/s
          Array#last: 12991243.5 i/s - 1.20x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    96.760k i/100ms
Calculating -------------------------------------
                find      0.274  (± 0.0%) i/s -      2.000  in   7.295854s
             bsearch    968.537k (± 1.0%) i/s -      4.935M in   5.095558s

Comparison:
             bsearch:   968537.0 i/s
                find:        0.3 i/s - 3533151.98x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    18.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    189.573  (± 2.1%) i/s -    954.000  in   5.035198s
        Array#insert      1.438  (± 0.0%) i/s -      8.000  in   5.564860s

Comparison:
       Array#unshift:      189.6 i/s
        Array#insert:        1.4 i/s - 131.85x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.126M i/100ms
          Array#size     2.109M i/100ms
         Array#count     1.637M i/100ms
Calculating -------------------------------------
        Array#length     21.280M (± 0.4%) i/s -    108.436M in   5.095869s
          Array#size     21.168M (± 0.4%) i/s -    107.564M in   5.081481s
         Array#count     16.389M (± 0.8%) i/s -     83.507M in   5.095567s

Comparison:
        Array#length: 21279616.4 i/s
          Array#size: 21168289.7 i/s - same-ish: difference falls within error
         Array#count: 16389181.1 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.014k i/100ms
        Array#sample     1.015M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    449.212k (± 0.6%) i/s -      2.251M in   5.010488s
        Array#sample     10.186M (± 0.2%) i/s -     51.778M in   5.083535s

Comparison:
        Array#sample: 10185566.8 i/s
 Array#shuffle.first:   449211.9 i/s - 22.67x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    62.329k i/100ms
          Date.parse    31.411k i/100ms
Calculating -------------------------------------
        Date.iso8601    618.199k (± 0.8%) i/s -      3.116M in   5.041534s
          Date.parse    311.456k (± 1.1%) i/s -      1.571M in   5.043193s

Comparison:
        Date.iso8601:   618198.9 i/s
          Date.parse:   311456.0 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.500k i/100ms
           Array#map    25.525k i/100ms
Calculating -------------------------------------
   Array#each + push    185.554k (± 0.5%) i/s -    943.500k in   5.084916s
           Array#map    255.058k (± 0.5%) i/s -      1.276M in   5.003897s

Comparison:
           Array#map:   255058.0 i/s
   Array#each + push:   185554.3 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    28.891k i/100ms
               #each    31.704k i/100ms
Calculating -------------------------------------
            For loop    289.615k (± 0.5%) i/s -      1.473M in   5.087725s
               #each    317.029k (± 0.4%) i/s -      1.585M in   5.000235s

Comparison:
               #each:   317029.1 i/s
            For loop:   289615.0 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.547k i/100ms
     each_with_index    18.364k i/100ms
Calculating -------------------------------------
          While Loop    276.133k (± 0.4%) i/s -      1.405M in   5.087851s
     each_with_index    183.021k (± 0.8%) i/s -    918.200k in   5.017275s

Comparison:
          While Loop:   276133.3 i/s
     each_with_index:   183021.3 i/s - 1.51x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol   125.253k i/100ms
      inject to_proc     1.765k i/100ms
        inject block     1.999k i/100ms
Calculating -------------------------------------
       inject symbol      1.252M (± 0.9%) i/s -      6.263M in   5.001324s
      inject to_proc     17.634k (± 0.5%) i/s -     88.250k in   5.004768s
        inject block     19.984k (± 0.3%) i/s -     99.950k in   5.001526s

Comparison:
       inject symbol:  1252297.3 i/s
        inject block:    19984.0 i/s - 62.66x  (± 0.00) slower
      inject to_proc:    17633.6 i/s - 71.02x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     7.047k i/100ms
   Array#map.flatten     4.162k i/100ms
      Array#flat_map     8.974k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     72.468k (± 1.1%) i/s -    366.444k in   5.057304s
   Array#map.flatten     41.247k (± 3.9%) i/s -    208.100k in   5.055478s
      Array#flat_map     93.591k (± 0.6%) i/s -    475.622k in   5.082124s

Comparison:
      Array#flat_map:    93590.7 i/s
Array#map.flatten(1):    72468.0 i/s - 1.29x  (± 0.00) slower
   Array#map.flatten:    41247.5 i/s - 2.27x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    30.113k i/100ms
  Array#reverse_each    28.353k i/100ms
Calculating -------------------------------------
  Array#reverse.each    297.476k (± 4.5%) i/s -      1.506M in   5.074300s
  Array#reverse_each    283.317k (± 0.7%) i/s -      1.418M in   5.004032s

Comparison:
  Array#reverse.each:   297475.9 i/s
  Array#reverse_each:   283316.7 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.310k i/100ms
   Enumerable#detect    80.531k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        202.635k (± 0.5%) i/s -      4.062M in  20.046438s
   Enumerable#detect    806.780k (± 0.5%) i/s -     16.187M in  20.063980s

Comparison:
   Enumerable#detect:   806780.5 i/s
Enumerable#select.first:   202635.3 i/s - 3.98x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       241.077k i/100ms
Enumerable#select.last
                        18.174k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.383M (± 1.3%) i/s -     12.054M in   5.059126s
Enumerable#select.last
                        181.818k (± 0.2%) i/s -    926.874k in   5.097837s

Comparison:
Enumerable#reverse.detect:  2383016.8 i/s
Enumerable#select.last:   181817.7 i/s - 13.11x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         5.177k i/100ms
  Enumerable#sort_by     4.937k i/100ms
     Enumerable#sort     2.427k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         51.738k (± 0.6%) i/s -    258.850k in   5.003327s
  Enumerable#sort_by     48.652k (± 0.9%) i/s -    246.850k in   5.074206s
     Enumerable#sort     24.161k (± 2.0%) i/s -    121.350k in   5.024919s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    51737.7 i/s
  Enumerable#sort_by:    48651.6 i/s - 1.06x  (± 0.00) slower
     Enumerable#sort:    24160.9 i/s - 2.14x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.141k i/100ms
Enumerable#sort_by...first
                         8.514k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    170.991k (± 1.5%) i/s -    857.050k in   5.013593s
Enumerable#sort_by...first
                         85.122k (± 0.4%) i/s -    425.700k in   5.001120s

Comparison:
   Enumerable#min_by:   170990.6 i/s
Enumerable#sort_by...first:    85122.3 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   370.163k i/100ms
            Hash#dup   265.346k i/100ms
Calculating -------------------------------------
              Hash[]      3.873M (± 3.0%) i/s -     19.619M in   5.069638s
            Hash#dup      2.645M (± 4.4%) i/s -     13.267M in   5.026555s

Comparison:
              Hash[]:  3873282.7 i/s
            Hash#dup:  2644685.5 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.432M i/100ms
  Hash#fetch, symbol     1.124M i/100ms
     Hash#[], string     1.190M i/100ms
  Hash#fetch, string   788.487k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.297M (± 0.3%) i/s -     71.598M in   5.008086s
  Hash#fetch, symbol     11.204M (± 0.2%) i/s -     56.224M in   5.018253s
     Hash#[], string     12.292M (± 0.3%) i/s -     61.856M in   5.032322s
  Hash#fetch, string      7.798M (± 0.4%) i/s -     39.424M in   5.056105s

Comparison:
     Hash#[], symbol: 14296692.5 i/s
     Hash#[], string: 12291752.9 i/s - 1.16x  (± 0.00) slower
  Hash#fetch, symbol: 11203941.7 i/s - 1.28x  (± 0.00) slower
  Hash#fetch, string:  7797515.6 i/s - 1.83x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   861.645k i/100ms
             Hash#[]   997.966k i/100ms
          Hash#[] ||   824.625k i/100ms
          Hash#[] &&   374.405k i/100ms
          Hash#fetch   621.586k i/100ms
 Hash#fetch fallback   392.577k i/100ms
Calculating -------------------------------------
            Hash#dig      8.808M (± 0.5%) i/s -     44.806M in   5.086938s
             Hash#[]     10.233M (± 0.5%) i/s -     51.894M in   5.071444s
          Hash#[] ||      9.432M (± 0.7%) i/s -     47.828M in   5.071126s
          Hash#[] &&      3.812M (± 1.4%) i/s -     19.095M in   5.010692s
          Hash#fetch      5.933M (± 2.1%) i/s -     29.836M in   5.031425s
 Hash#fetch fallback      3.823M (± 1.2%) i/s -     19.236M in   5.031857s

Comparison:
             Hash#[]: 10232907.4 i/s
          Hash#[] ||:  9431972.2 i/s - 1.08x  (± 0.00) slower
            Hash#dig:  8808153.9 i/s - 1.16x  (± 0.00) slower
          Hash#fetch:  5932852.3 i/s - 1.72x  (± 0.00) slower
 Hash#fetch fallback:  3823438.3 i/s - 2.68x  (± 0.00) slower
          Hash#[] &&:  3811553.8 i/s - 2.68x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.461M i/100ms
  Hash#fetch + block     1.448M i/100ms
    Hash#fetch + arg     1.095M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.456M (± 0.3%) i/s -     73.067M in   5.054600s
  Hash#fetch + block     14.573M (± 0.5%) i/s -     73.849M in   5.067594s
    Hash#fetch + arg     10.882M (± 0.4%) i/s -     54.759M in   5.032085s

Comparison:
  Hash#fetch + block: 14573114.1 i/s
  Hash#fetch + const: 14455627.1 i/s - 1.01x  (± 0.00) slower
    Hash#fetch + arg: 10882090.1 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.377k i/100ms
         sort + to_h    11.999k i/100ms
Calculating -------------------------------------
      sort_by + to_h    273.462k (± 0.5%) i/s -      1.369M in   5.005746s
         sort + to_h    116.881k (± 0.8%) i/s -    587.951k in   5.030629s

Comparison:
      sort_by + to_h:   273462.2 i/s
         sort + to_h:   116881.5 i/s - 2.34x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   181.575k i/100ms
       Hash#each_key   195.295k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.890M (± 3.2%) i/s -      9.442M in   5.002498s
       Hash#each_key      1.914M (± 2.5%) i/s -      9.569M in   5.004101s

Comparison:
       Hash#each_key:  1913756.8 i/s
      Hash#keys.each:  1889951.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.380k i/100ms
           Hash#key?   928.515k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     13.664k (± 4.2%) i/s -     69.000k in   5.060612s
           Hash#key?      9.229M (± 0.6%) i/s -     46.426M in   5.030723s

Comparison:
           Hash#key?:  9228819.3 i/s
  Hash#keys.include?:    13663.7 i/s - 675.43x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.061k i/100ms
            Hash#[]=     9.710k i/100ms
Calculating -------------------------------------
         Hash#merge!     40.611k (± 0.4%) i/s -    207.111k in   5.099907s
            Hash#[]=     97.867k (± 2.3%) i/s -    495.210k in   5.063111s

Comparison:
            Hash#[]=:    97867.4 i/s
         Hash#merge!:    40611.5 i/s - 2.41x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         5.105k i/100ms
      Hash#merge({})     4.135k i/100ms
 Hash#dup#merge!({})     2.719k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         51.188k (± 0.5%) i/s -    260.355k in   5.086338s
      Hash#merge({})     42.402k (± 1.4%) i/s -    215.020k in   5.072029s
 Hash#dup#merge!({})     27.438k (± 0.5%) i/s -    138.669k in   5.054101s

Comparison:
{}#merge!(Hash) do end:    51188.2 i/s
      Hash#merge({}):    42401.8 i/s - 1.21x  (± 0.00) slower
 Hash#dup#merge!({}):    27437.7 i/s - 1.87x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   256.544k i/100ms
          Hash#merge   244.780k i/100ms
Calculating -------------------------------------
        Hash#**other      2.564M (± 0.5%) i/s -     12.827M in   5.002892s
          Hash#merge      2.441M (± 0.4%) i/s -     12.239M in   5.013342s

Comparison:
        Hash#**other:  2564020.5 i/s
          Hash#merge:  2441318.2 i/s - 1.05x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.504k i/100ms
         Hash#merge!     4.031k i/100ms
Calculating -------------------------------------
          Hash#merge     15.072k (± 3.2%) i/s -     76.704k in   5.094377s
         Hash#merge!     40.246k (± 0.5%) i/s -    201.550k in   5.008029s

Comparison:
         Hash#merge!:    40246.3 i/s
          Hash#merge:    15072.5 i/s - 2.67x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      422.732k i/100ms
Array#each             230.238k i/100ms
Array#each_w/_object   174.318k i/100ms
Hash#select-include     69.352k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.270M (± 0.3%) i/s -     21.559M in   5.048844s
Array#each                2.322M (± 0.4%) i/s -     11.742M in   5.056810s
Array#each_w/_object      1.728M (± 0.7%) i/s -      8.716M in   5.045132s
Hash#select-include     723.977k (± 3.1%) i/s -      3.676M in   5.082046s

Comparison:
Hash#native-slice   :  4270200.4 i/s
Array#each          :  2322090.3 i/s - 1.84x  (± 0.00) slower
Array#each_w/_object:  1727663.5 i/s - 2.47x  (± 0.00) slower
Hash#select-include :   723976.6 i/s - 5.90x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.106k i/100ms
         Hash#value?   841.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     10.948k (± 4.1%) i/s -     55.300k in   5.061102s
         Hash#value?      8.467k (± 0.9%) i/s -     42.891k in   5.066268s

Comparison:
Hash#values.include?:    10948.3 i/s
         Hash#value?:     8466.7 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   649.657k i/100ms
                send   497.337k i/100ms
      method_missing   376.917k i/100ms
Calculating -------------------------------------
                call      6.507M (± 0.4%) i/s -     33.133M in   5.091700s
                send      4.979M (± 0.9%) i/s -     25.364M in   5.094516s
      method_missing      3.779M (± 0.5%) i/s -     19.223M in   5.087278s

Comparison:
                call:  6507276.1 i/s
                send:  4979136.3 i/s - 1.31x  (± 0.00) slower
      method_missing:  3778701.8 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     8.636k i/100ms
      Symbol#to_proc     9.259k i/100ms
Calculating -------------------------------------
               Block     86.040k (± 0.4%) i/s -    431.800k in   5.018656s
      Symbol#to_proc     92.306k (± 0.2%) i/s -    462.950k in   5.015422s

Comparison:
      Symbol#to_proc:    92305.8 i/s
               Block:    86040.3 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   932.175k i/100ms
       block + yield   981.063k i/100ms
        unused block     1.301M i/100ms
               yield     1.063M i/100ms
Calculating -------------------------------------
          block.call      9.333M (± 0.3%) i/s -     47.541M in   5.093649s
       block + yield      9.800M (± 0.4%) i/s -     49.053M in   5.005479s
        unused block     13.014M (± 0.8%) i/s -     66.327M in   5.096886s
               yield     10.657M (± 0.7%) i/s -     54.197M in   5.085807s

Comparison:
        unused block: 13014073.8 i/s
               yield: 10657125.5 i/s - 1.22x  (± 0.00) slower
       block + yield:  9800071.2 i/s - 1.33x  (± 0.00) slower
          block.call:  9333477.8 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   314.160k i/100ms
      range#include?    13.017k i/100ms
       range#member?    12.856k i/100ms
       plain compare   529.261k i/100ms
Calculating -------------------------------------
        range#cover?      3.168M (± 0.5%) i/s -     16.022M in   5.057002s
      range#include?    130.408k (± 0.8%) i/s -    663.867k in   5.091016s
       range#member?    129.727k (± 0.9%) i/s -    655.656k in   5.054499s
       plain compare      5.282M (± 0.4%) i/s -     26.463M in   5.010057s

Comparison:
       plain compare:  5282055.0 i/s
        range#cover?:  3168379.4 i/s - 1.67x  (± 0.00) slower
      range#include?:   130407.7 i/s - 40.50x  (± 0.00) slower
       range#member?:   129726.9 i/s - 40.72x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   953.381k i/100ms
           String#=~   655.153k i/100ms
          Regexp#===   595.257k i/100ms
        String#match   484.717k i/100ms
Calculating -------------------------------------
       String#match?      9.423M (± 0.4%) i/s -     47.669M in   5.059130s
           String#=~      6.514M (± 0.6%) i/s -     32.758M in   5.028884s
          Regexp#===      5.963M (± 0.9%) i/s -     30.358M in   5.091213s
        String#match      4.859M (± 0.3%) i/s -     24.721M in   5.087688s

Comparison:
       String#match?:  9422528.1 i/s
           String#=~:  6514149.5 i/s - 1.45x  (± 0.00) slower
          Regexp#===:  5963379.2 i/s - 1.58x  (± 0.00) slower
        String#match:  4858942.9 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   654.147k i/100ms
      String#casecmp   792.364k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.541M (± 0.8%) i/s -     32.707M in   5.000510s
      String#casecmp      7.941M (± 2.7%) i/s -     40.411M in   5.093482s

Comparison:
      String#casecmp:  7940716.6 i/s
String#downcase + ==:  6541264.7 i/s - 1.21x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   584.028k i/100ms
       String#concat   605.389k i/100ms
       String#append   653.930k i/100ms
         "foo" "bar"     1.170M i/100ms
  "#{'foo'}#{'bar'}"     1.169M i/100ms
Calculating -------------------------------------
            String#+      5.821M (± 0.5%) i/s -     29.201M in   5.016306s
       String#concat      5.996M (± 0.8%) i/s -     30.269M in   5.048388s
       String#append      6.493M (± 0.6%) i/s -     32.696M in   5.035612s
         "foo" "bar"     11.684M (± 0.3%) i/s -     58.488M in   5.005688s
  "#{'foo'}#{'bar'}"     11.695M (± 0.3%) i/s -     59.638M in   5.099333s

Comparison:
  "#{'foo'}#{'bar'}": 11695288.4 i/s
         "foo" "bar": 11684328.6 i/s - same-ish: difference falls within error
       String#append:  6493289.5 i/s - 1.80x  (± 0.00) slower
       String#concat:  5996229.4 i/s - 1.95x  (± 0.00) slower
            String#+:  5821429.6 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@   988.589k i/100ms
          String#dup   558.358k i/100ms
Calculating -------------------------------------
           String#+@      9.901M (± 0.3%) i/s -     50.418M in   5.092396s
          String#dup      5.522M (± 0.4%) i/s -     27.918M in   5.056036s

Comparison:
           String#+@:  9900734.7 i/s
          String#dup:  5521804.1 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   184.387k i/100ms
       String#match?   436.584k i/100ms
    String#end_with?   600.277k i/100ms
Calculating -------------------------------------
           String#=~      1.862M (± 0.7%) i/s -      9.404M in   5.051546s
       String#match?      4.350M (± 1.0%) i/s -     21.829M in   5.018377s
    String#end_with?      6.052M (± 0.5%) i/s -     30.614M in   5.058913s

Comparison:
    String#end_with?:  6051687.9 i/s
       String#match?:  4350316.8 i/s - 1.39x  (± 0.00) slower
           String#=~:  1861638.5 i/s - 3.25x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   109.110k i/100ms
          String#sub   134.970k i/100ms
String#dup["string"]=
                       175.936k i/100ms
Calculating -------------------------------------
         String#gsub      1.098M (± 0.8%) i/s -      5.565M in   5.067590s
          String#sub      1.335M (± 0.6%) i/s -      6.748M in   5.053365s
String#dup["string"]=
                          1.754M (± 0.5%) i/s -      8.797M in   5.015423s

Comparison:
String#dup["string"]=:  1753988.4 i/s
          String#sub:  1335491.3 i/s - 1.31x  (± 0.00) slower
         String#gsub:  1098159.3 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   101.850k i/100ms
           String#tr   356.340k i/100ms
Calculating -------------------------------------
         String#gsub      1.010M (± 2.0%) i/s -      5.092M in   5.041940s
           String#tr      3.583M (± 0.5%) i/s -     18.173M in   5.072498s

Comparison:
           String#tr:  3582793.2 i/s
         String#gsub:  1010491.2 i/s - 3.55x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.135M i/100ms
         With Freeze     1.653M i/100ms
Calculating -------------------------------------
      Without Freeze     11.578M (± 0.3%) i/s -     59.024M in   5.097948s
         With Freeze     16.585M (± 0.5%) i/s -     84.319M in   5.084073s

Comparison:
         With Freeze: 16585277.1 i/s
      Without Freeze: 11578173.6 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.309k i/100ms
      String#squeeze   154.905k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     33.487k (± 0.5%) i/s -    168.759k in   5.039685s
      String#squeeze      1.541M (± 0.5%) i/s -      7.745M in   5.026781s

Comparison:
      String#squeeze:  1540831.9 i/s
 String#gsub/regex+/:    33486.9 i/s - 46.01x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   273.553k i/100ms
       String#match?   800.571k i/100ms
  String#start_with?   863.557k i/100ms
Calculating -------------------------------------
           String#=~      2.741M (± 1.0%) i/s -     13.951M in   5.090950s
       String#match?      7.972M (± 0.8%) i/s -     40.029M in   5.021638s
  String#start_with?      8.588M (± 0.4%) i/s -     43.178M in   5.027618s

Comparison:
  String#start_with?:  8588249.1 i/s
       String#match?:  7971711.9 i/s - 1.08x  (± 0.00) slower
           String#=~:  2740666.5 i/s - 3.13x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   227.019k i/100ms
    String#[0, n] ==    83.161k i/100ms
   String#[RANGE] ==    75.579k i/100ms
   String#[0...n] ==    47.818k i/100ms
Calculating -------------------------------------
  String#start_with?      2.071M (± 0.4%) i/s -     10.443M in   5.042239s
    String#[0, n] ==    845.182k (± 0.8%) i/s -      4.241M in   5.018437s
   String#[RANGE] ==    756.689k (± 0.6%) i/s -      3.855M in   5.094107s
   String#[0...n] ==    468.276k (± 1.0%) i/s -      2.343M in   5.004121s

Comparison:
  String#start_with?:  2071112.1 i/s
    String#[0, n] ==:   845182.1 i/s - 2.45x  (± 0.00) slower
   String#[RANGE] ==:   756689.2 i/s - 2.74x  (± 0.00) slower
   String#[0...n] ==:   468276.1 i/s - 4.42x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   180.546k i/100ms
 String#sub!'string'   126.097k i/100ms
String#gsub!'string'    78.058k i/100ms
  String#[/regexp/]=   142.748k i/100ms
 String#sub!/regexp/   110.020k i/100ms
String#gsub!/regexp/    57.678k i/100ms
Calculating -------------------------------------
  String#['string']=      1.796M (± 0.7%) i/s -      9.027M in   5.026665s
 String#sub!'string'      1.248M (± 0.7%) i/s -      6.305M in   5.053576s
String#gsub!'string'    765.848k (± 0.4%) i/s -      3.903M in   5.096281s
  String#[/regexp/]=      1.459M (± 0.7%) i/s -      7.423M in   5.088999s
 String#sub!/regexp/      1.087M (± 1.0%) i/s -      5.501M in   5.060778s
String#gsub!/regexp/    585.041k (± 0.7%) i/s -      2.942M in   5.028225s

Comparison:
  String#['string']=:  1795977.4 i/s
  String#[/regexp/]=:  1458693.1 i/s - 1.23x  (± 0.00) slower
 String#sub!'string':  1247661.6 i/s - 1.44x  (± 0.00) slower
 String#sub!/regexp/:  1087107.5 i/s - 1.65x  (± 0.00) slower
String#gsub!'string':   765847.7 i/s - 2.35x  (± 0.00) slower
String#gsub!/regexp/:   585040.8 i/s - 3.07x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   135.956k i/100ms
        String#chomp   556.325k i/100ms
String#delete_suffix   601.386k i/100ms
Calculating -------------------------------------
          String#sub      1.357M (± 0.6%) i/s -      6.798M in   5.010809s
        String#chomp      5.547M (± 0.4%) i/s -     27.816M in   5.014690s
String#delete_suffix      6.068M (± 0.3%) i/s -     30.671M in   5.054320s

Comparison:
String#delete_suffix:  6068263.8 i/s
        String#chomp:  5547064.6 i/s - 1.09x  (± 0.00) slower
          String#sub:  1356681.9 i/s - 4.47x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   622.392k i/100ms
          String#sub   138.493k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.396M (± 0.5%) i/s -     32.364M in   5.059852s
          String#sub      1.399M (± 0.4%) i/s -      7.063M in   5.049476s

Comparison:
String#delete_prefix:  6396448.1 i/s
          String#sub:  1398809.7 i/s - 4.57x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   606.785k i/100ms
    String#unpack[0]   445.364k i/100ms
Calculating -------------------------------------
      String#unpack1      6.058M (± 0.4%) i/s -     30.339M in   5.008418s
    String#unpack[0]      4.471M (± 0.4%) i/s -     22.714M in   5.080005s

Comparison:
      String#unpack1:  6057744.9 i/s
    String#unpack[0]:  4471259.1 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    28.154k i/100ms
          Time.parse     9.332k i/100ms
Calculating -------------------------------------
        Time.iso8601    276.538k (± 0.5%) i/s -      1.408M in   5.090576s
          Time.parse     93.922k (± 1.0%) i/s -    475.932k in   5.067847s

Comparison:
        Time.iso8601:   276538.1 i/s
          Time.parse:    93921.7 i/s - 2.94x  (± 0.00) slower

