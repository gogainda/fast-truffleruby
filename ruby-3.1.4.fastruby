$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       765.214k i/100ms
Function with splat arguments
                        26.611k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.647M (± 0.3%) i/s -     38.261M in   5.003430s
Function with splat arguments
                        271.126k (± 5.4%) i/s -      1.357M in   5.027812s

Comparison:
Function with single Array argument:  7646946.8 i/s
Function with splat arguments:   271126.1 i/s - 28.20x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.012M i/100ms
Sequential Assignment
                         1.012M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.067M (± 0.2%) i/s -     50.621M in   5.028178s
Sequential Assignment
                         10.115M (± 0.7%) i/s -     51.589M in   5.100364s

Comparison:
Sequential Assignment: 10115300.3 i/s
 Parallel Assignment: 10067486.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   478.285k i/100ms
       attr_accessor   549.850k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.802M (± 0.4%) i/s -     24.393M in   5.079925s
       attr_accessor      5.502M (± 0.7%) i/s -     28.042M in   5.096565s

Comparison:
       attr_accessor:  5502482.6 i/s
   getter_and_setter:  4801822.3 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    85.138k i/100ms
         respond_to?   766.108k i/100ms
Calculating -------------------------------------
      begin...rescue    861.446k (± 0.5%) i/s -      4.342M in   5.040533s
         respond_to?      7.646M (± 0.6%) i/s -     38.305M in   5.009919s

Comparison:
         respond_to?:  7646238.7 i/s
      begin...rescue:   861446.3 i/s - 8.88x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   293.803k i/100ms
             &method   120.977k i/100ms
Calculating -------------------------------------
              normal      2.941M (± 0.5%) i/s -     14.984M in   5.095529s
             &method      1.216M (± 0.5%) i/s -      6.170M in   5.072770s

Comparison:
              normal:  2940668.0 i/s
             &method:  1216296.2 i/s - 2.42x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       250.000  i/100ms
       define_method   292.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.278k (±21.2%) i/s -     10.000k in   5.018654s
       define_method      3.144k (±18.3%) i/s -     14.308k in   5.013310s

Comparison:
       define_method:     3143.6 i/s
module_eval with string:     2277.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   258.850k i/100ms
       Kernel#format   206.678k i/100ms
            String#%   177.319k i/100ms
Calculating -------------------------------------
         Float#round      2.663M (± 0.3%) i/s -     13.460M in   5.053647s
       Kernel#format      2.070M (± 0.7%) i/s -     10.541M in   5.092653s
            String#%      1.782M (± 0.3%) i/s -      9.043M in   5.075888s

Comparison:
         Float#round:  2663485.8 i/s
       Kernel#format:  2069857.7 i/s - 1.29x  (± 0.00) slower
            String#%:  1781634.2 i/s - 1.49x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   890.504k i/100ms
          OpenStruct   495.821k i/100ms
Calculating -------------------------------------
                Hash      8.922M (± 0.2%) i/s -     45.416M in   5.090593s
          OpenStruct      4.986M (± 0.5%) i/s -     25.287M in   5.072190s

Comparison:
                Hash:  8921548.3 i/s
          OpenStruct:  4985506.3 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.070M i/100ms
          OpenStruct    11.308k i/100ms
Calculating -------------------------------------
                Hash     11.643M (± 0.2%) i/s -     58.856M in   5.055131s
          OpenStruct    115.014k (± 2.4%) i/s -    576.708k in   5.017066s

Comparison:
                Hash: 11642987.0 i/s
          OpenStruct:   115013.8 i/s - 101.23x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   591.787k i/100ms
  ancestors.include?   121.186k i/100ms
Calculating -------------------------------------
  less than or equal      5.993M (± 0.9%) i/s -     30.181M in   5.036854s
  ancestors.include?      1.201M (± 3.1%) i/s -      6.059M in   5.051151s

Comparison:
  less than or equal:  5992528.5 i/s
  ancestors.include?:  1200761.4 i/s - 4.99x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.591  (± 0.0%) i/s -      4.000  in   6.808608s
         Kernel loop      0.214  (± 0.0%) i/s -      2.000  in   9.335373s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 2.76x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.513M i/100ms
         Array#first     1.309M i/100ms
Calculating -------------------------------------
           Array#[0]     15.198M (± 0.2%) i/s -     77.159M in   5.076969s
         Array#first     13.090M (± 0.2%) i/s -     65.474M in   5.001672s

Comparison:
           Array#[0]: 15197965.2 i/s
         Array#first: 13090491.6 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.560M i/100ms
          Array#last     1.323M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.560M (± 0.3%) i/s -     78.013M in   5.013901s
          Array#last     13.225M (± 0.2%) i/s -     66.157M in   5.002503s

Comparison:
          Array#[-1]: 15559558.4 i/s
          Array#last: 13224792.9 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    93.133k i/100ms
Calculating -------------------------------------
                find      0.276  (± 0.0%) i/s -      2.000  in   7.246116s
             bsearch    928.442k (± 0.9%) i/s -      4.657M in   5.016012s

Comparison:
             bsearch:   928441.6 i/s
                find:        0.3 i/s - 3363797.72x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    18.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    183.813  (± 2.2%) i/s -    936.000  in   5.094902s
        Array#insert      1.433  (± 0.0%) i/s -      8.000  in   5.582637s

Comparison:
       Array#unshift:      183.8 i/s
        Array#insert:        1.4 i/s - 128.26x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.132M i/100ms
          Array#size     2.114M i/100ms
         Array#count     1.641M i/100ms
Calculating -------------------------------------
        Array#length     21.274M (± 0.5%) i/s -    106.598M in   5.010897s
          Array#size     21.142M (± 0.4%) i/s -    107.798M in   5.098788s
         Array#count     16.302M (± 0.3%) i/s -     82.038M in   5.032382s

Comparison:
        Array#length: 21273732.7 i/s
          Array#size: 21142265.5 i/s - same-ish: difference falls within error
         Array#count: 16302145.1 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.757k i/100ms
        Array#sample     1.035M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    459.819k (± 0.4%) i/s -      2.334M in   5.075133s
        Array#sample     10.421M (± 0.2%) i/s -     52.785M in   5.065339s

Comparison:
        Array#sample: 10420815.9 i/s
 Array#shuffle.first:   459818.9 i/s - 22.66x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    61.912k i/100ms
          Date.parse    32.007k i/100ms
Calculating -------------------------------------
        Date.iso8601    620.956k (± 0.4%) i/s -      3.158M in   5.085004s
          Date.parse    318.857k (± 0.5%) i/s -      1.600M in   5.019173s

Comparison:
        Date.iso8601:   620955.7 i/s
          Date.parse:   318856.6 i/s - 1.95x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.588k i/100ms
           Array#map    25.138k i/100ms
Calculating -------------------------------------
   Array#each + push    185.398k (± 1.1%) i/s -    929.400k in   5.013619s
           Array#map    251.254k (± 0.3%) i/s -      1.257M in   5.002558s

Comparison:
           Array#map:   251254.3 i/s
   Array#each + push:   185398.2 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    28.822k i/100ms
               #each    31.337k i/100ms
Calculating -------------------------------------
            For loop    288.569k (± 0.5%) i/s -      1.470M in   5.093945s
               #each    312.911k (± 0.4%) i/s -      1.567M in   5.007428s

Comparison:
               #each:   312910.9 i/s
            For loop:   288568.8 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.986k i/100ms
     each_with_index    18.272k i/100ms
Calculating -------------------------------------
          While Loop    276.854k (± 0.3%) i/s -      1.399M in   5.054351s
     each_with_index    182.844k (± 0.2%) i/s -    931.872k in   5.096586s

Comparison:
          While Loop:   276854.0 i/s
     each_with_index:   182843.5 i/s - 1.51x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol   123.613k i/100ms
      inject to_proc     1.767k i/100ms
        inject block     1.986k i/100ms
Calculating -------------------------------------
       inject symbol      1.242M (± 0.8%) i/s -      6.304M in   5.077372s
      inject to_proc     17.671k (± 0.3%) i/s -     90.117k in   5.099667s
        inject block     19.865k (± 0.6%) i/s -    101.286k in   5.098997s

Comparison:
       inject symbol:  1241714.8 i/s
        inject block:    19864.6 i/s - 62.51x  (± 0.00) slower
      inject to_proc:    17671.3 i/s - 70.27x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.911k i/100ms
   Array#map.flatten     4.140k i/100ms
      Array#flat_map     8.940k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     69.504k (± 0.4%) i/s -    352.461k in   5.071165s
   Array#map.flatten     40.744k (± 3.8%) i/s -    207.000k in   5.088917s
      Array#flat_map     90.393k (± 0.8%) i/s -    455.940k in   5.044264s

Comparison:
      Array#flat_map:    90393.1 i/s
Array#map.flatten(1):    69503.9 i/s - 1.30x  (± 0.00) slower
   Array#map.flatten:    40744.2 i/s - 2.22x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    30.774k i/100ms
  Array#reverse_each    31.345k i/100ms
Calculating -------------------------------------
  Array#reverse.each    307.971k (± 0.3%) i/s -      1.569M in   5.096215s
  Array#reverse_each    312.823k (± 0.3%) i/s -      1.567M in   5.010065s

Comparison:
  Array#reverse_each:   312823.4 i/s
  Array#reverse.each:   307971.1 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        18.685k i/100ms
   Enumerable#detect    83.333k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        186.275k (± 0.3%) i/s -      3.737M in  20.061931s
   Enumerable#detect    834.623k (± 0.2%) i/s -     16.750M in  20.068941s

Comparison:
   Enumerable#detect:   834623.3 i/s
Enumerable#select.first:   186274.8 i/s - 4.48x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       242.942k i/100ms
Enumerable#select.last
                        18.067k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.410M (± 0.6%) i/s -     12.147M in   5.041176s
Enumerable#select.last
                        178.216k (± 0.8%) i/s -    903.350k in   5.069197s

Comparison:
Enumerable#reverse.detect:  2409650.5 i/s
Enumerable#select.last:   178216.1 i/s - 13.52x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         5.199k i/100ms
  Enumerable#sort_by     5.065k i/100ms
     Enumerable#sort     2.370k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         52.987k (± 0.6%) i/s -    265.149k in   5.004260s
  Enumerable#sort_by     50.625k (± 0.9%) i/s -    253.250k in   5.002818s
     Enumerable#sort     23.883k (± 0.3%) i/s -    120.870k in   5.060998s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    52986.5 i/s
  Enumerable#sort_by:    50625.4 i/s - 1.05x  (± 0.00) slower
     Enumerable#sort:    23882.9 i/s - 2.22x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.419k i/100ms
Enumerable#sort_by...first
                         8.628k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    174.150k (± 0.1%) i/s -    870.950k in   5.001168s
Enumerable#sort_by...first
                         86.331k (± 0.4%) i/s -    440.028k in   5.097083s

Comparison:
   Enumerable#min_by:   174149.5 i/s
Enumerable#sort_by...first:    86330.7 i/s - 2.02x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   421.382k i/100ms
            Hash#dup   293.533k i/100ms
Calculating -------------------------------------
              Hash[]      4.201M (± 1.2%) i/s -     21.069M in   5.016350s
            Hash#dup      3.327M (± 0.8%) i/s -     16.731M in   5.028593s

Comparison:
              Hash[]:  4200670.8 i/s
            Hash#dup:  3327432.2 i/s - 1.26x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.422M i/100ms
  Hash#fetch, symbol     1.200M i/100ms
     Hash#[], string     1.244M i/100ms
  Hash#fetch, string   786.443k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.271M (± 0.3%) i/s -     72.508M in   5.080820s
  Hash#fetch, symbol     11.967M (± 0.2%) i/s -     59.980M in   5.012142s
     Hash#[], string     12.425M (± 0.3%) i/s -     62.187M in   5.005022s
  Hash#fetch, string      7.872M (± 0.3%) i/s -     40.109M in   5.095024s

Comparison:
     Hash#[], symbol: 14271170.5 i/s
     Hash#[], string: 12425104.9 i/s - 1.15x  (± 0.00) slower
  Hash#fetch, symbol: 11966960.3 i/s - 1.19x  (± 0.00) slower
  Hash#fetch, string:  7872178.3 i/s - 1.81x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   865.975k i/100ms
             Hash#[]   969.663k i/100ms
          Hash#[] ||   860.129k i/100ms
          Hash#[] &&   367.759k i/100ms
          Hash#fetch   609.415k i/100ms
 Hash#fetch fallback   395.464k i/100ms
Calculating -------------------------------------
            Hash#dig      8.886M (± 0.6%) i/s -     45.031M in   5.067798s
             Hash#[]      9.936M (± 0.8%) i/s -     50.422M in   5.074942s
          Hash#[] ||      8.764M (± 0.3%) i/s -     43.867M in   5.005351s
          Hash#[] &&      3.676M (± 0.5%) i/s -     18.388M in   5.001930s
          Hash#fetch      5.865M (± 2.1%) i/s -     29.861M in   5.093741s
 Hash#fetch fallback      3.935M (± 0.9%) i/s -     19.773M in   5.025830s

Comparison:
             Hash#[]:  9936157.7 i/s
            Hash#dig:  8885986.8 i/s - 1.12x  (± 0.00) slower
          Hash#[] ||:  8764003.5 i/s - 1.13x  (± 0.00) slower
          Hash#fetch:  5865212.4 i/s - 1.69x  (± 0.00) slower
 Hash#fetch fallback:  3934621.8 i/s - 2.53x  (± 0.00) slower
          Hash#[] &&:  3676251.5 i/s - 2.70x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.428M i/100ms
  Hash#fetch + block     1.457M i/100ms
    Hash#fetch + arg     1.076M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.221M (± 0.3%) i/s -     71.405M in   5.021145s
  Hash#fetch + block     14.495M (± 0.5%) i/s -     72.855M in   5.026335s
    Hash#fetch + arg     10.739M (± 0.3%) i/s -     53.791M in   5.009026s

Comparison:
  Hash#fetch + block: 14494930.4 i/s
  Hash#fetch + const: 14220935.3 i/s - 1.02x  (± 0.00) slower
    Hash#fetch + arg: 10738891.9 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.771k i/100ms
         sort + to_h    11.865k i/100ms
Calculating -------------------------------------
      sort_by + to_h    275.549k (± 2.1%) i/s -      1.389M in   5.041623s
         sort + to_h    117.467k (± 0.6%) i/s -    593.250k in   5.050518s

Comparison:
      sort_by + to_h:   275548.8 i/s
         sort + to_h:   117466.9 i/s - 2.35x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   190.553k i/100ms
       Hash#each_key   192.307k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.897M (± 0.9%) i/s -      9.528M in   5.022124s
       Hash#each_key      1.936M (± 0.5%) i/s -      9.808M in   5.065979s

Comparison:
       Hash#each_key:  1936025.9 i/s
      Hash#keys.each:  1897296.1 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     2.027k i/100ms
           Hash#key?   944.623k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     19.742k (± 5.8%) i/s -     99.323k in   5.050247s
           Hash#key?      9.443M (± 0.4%) i/s -     47.231M in   5.001617s

Comparison:
           Hash#key?:  9443294.3 i/s
  Hash#keys.include?:    19741.7 i/s - 478.34x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.299k i/100ms
            Hash#[]=    10.140k i/100ms
Calculating -------------------------------------
         Hash#merge!     42.309k (± 1.5%) i/s -    214.950k in   5.081587s
            Hash#[]=    102.117k (± 0.4%) i/s -    517.140k in   5.064280s

Comparison:
            Hash#[]=:   102117.1 i/s
         Hash#merge!:    42308.7 i/s - 2.41x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         5.131k i/100ms
      Hash#merge({})     4.163k i/100ms
 Hash#dup#merge!({})     2.737k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         51.034k (± 0.1%) i/s -    256.550k in   5.027044s
      Hash#merge({})     41.283k (± 0.6%) i/s -    208.150k in   5.042247s
 Hash#dup#merge!({})     27.324k (± 0.1%) i/s -    136.850k in   5.008495s

Comparison:
{}#merge!(Hash) do end:    51034.1 i/s
      Hash#merge({}):    41282.5 i/s - 1.24x  (± 0.00) slower
 Hash#dup#merge!({}):    27323.6 i/s - 1.87x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   397.209k i/100ms
          Hash#merge   370.027k i/100ms
Calculating -------------------------------------
        Hash#**other      3.971M (± 0.4%) i/s -     19.860M in   5.001505s
          Hash#merge      3.674M (± 0.3%) i/s -     18.501M in   5.035408s

Comparison:
        Hash#**other:  3970944.8 i/s
          Hash#merge:  3674293.0 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.690k i/100ms
         Hash#merge!     4.331k i/100ms
Calculating -------------------------------------
          Hash#merge     16.888k (± 1.2%) i/s -     84.500k in   5.004377s
         Hash#merge!     43.581k (± 0.4%) i/s -    220.881k in   5.068381s

Comparison:
         Hash#merge!:    43581.0 i/s
          Hash#merge:    16887.7 i/s - 2.58x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      431.142k i/100ms
Array#each             238.394k i/100ms
Array#each_w/_object   174.683k i/100ms
Hash#select-include     76.823k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.268M (± 0.4%) i/s -     21.557M in   5.051171s
Array#each                2.335M (± 0.6%) i/s -     11.681M in   5.003776s
Array#each_w/_object      1.735M (± 0.4%) i/s -      8.734M in   5.034896s
Hash#select-include     767.728k (± 0.5%) i/s -      3.841M in   5.003406s

Comparison:
Hash#native-slice   :  4267797.2 i/s
Array#each          :  2334581.5 i/s - 1.83x  (± 0.00) slower
Array#each_w/_object:  1734758.1 i/s - 2.46x  (± 0.00) slower
Hash#select-include :   767728.2 i/s - 5.56x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.074k i/100ms
         Hash#value?   830.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     10.852k (± 4.6%) i/s -     54.774k in   5.058925s
         Hash#value?      8.448k (± 0.7%) i/s -     42.330k in   5.011106s

Comparison:
Hash#values.include?:    10852.0 i/s
         Hash#value?:     8447.6 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   658.561k i/100ms
                send   497.021k i/100ms
      method_missing   388.378k i/100ms
Calculating -------------------------------------
                call      6.592M (± 0.1%) i/s -     33.587M in   5.095429s
                send      4.912M (± 0.2%) i/s -     24.851M in   5.059506s
      method_missing      3.848M (± 0.3%) i/s -     19.419M in   5.046059s

Comparison:
                call:  6591530.7 i/s
                send:  4911780.9 i/s - 1.34x  (± 0.00) slower
      method_missing:  3848355.7 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     8.681k i/100ms
      Symbol#to_proc     9.291k i/100ms
Calculating -------------------------------------
               Block     86.201k (± 0.4%) i/s -    434.050k in   5.035406s
      Symbol#to_proc     92.821k (± 0.5%) i/s -    464.550k in   5.004943s

Comparison:
      Symbol#to_proc:    92820.7 i/s
               Block:    86200.9 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   930.786k i/100ms
       block + yield   964.477k i/100ms
        unused block     1.262M i/100ms
               yield     1.172M i/100ms
Calculating -------------------------------------
          block.call      9.354M (± 0.2%) i/s -     47.470M in   5.075079s
       block + yield      9.678M (± 0.1%) i/s -     49.188M in   5.082678s
        unused block     12.627M (± 0.2%) i/s -     64.340M in   5.095418s
               yield     11.709M (± 0.3%) i/s -     58.618M in   5.006251s

Comparison:
        unused block: 12627112.9 i/s
               yield: 11709105.7 i/s - 1.08x  (± 0.00) slower
       block + yield:  9677659.2 i/s - 1.30x  (± 0.00) slower
          block.call:  9353606.3 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   309.552k i/100ms
      range#include?    12.770k i/100ms
       range#member?    12.741k i/100ms
       plain compare   532.501k i/100ms
Calculating -------------------------------------
        range#cover?      3.076M (± 0.4%) i/s -     15.478M in   5.031062s
      range#include?    130.256k (± 0.4%) i/s -    651.270k in   4.999987s
       range#member?    130.151k (± 0.4%) i/s -    662.532k in   5.090547s
       plain compare      5.279M (± 0.2%) i/s -     26.625M in   5.043985s

Comparison:
       plain compare:  5278599.0 i/s
        range#cover?:  3076470.0 i/s - 1.72x  (± 0.00) slower
      range#include?:   130256.2 i/s - 40.52x  (± 0.00) slower
       range#member?:   130151.2 i/s - 40.56x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   954.888k i/100ms
           String#=~   650.103k i/100ms
          Regexp#===   597.531k i/100ms
        String#match   487.646k i/100ms
Calculating -------------------------------------
       String#match?      9.426M (± 0.4%) i/s -     47.744M in   5.065079s
           String#=~      6.572M (± 0.9%) i/s -     33.155M in   5.045173s
          Regexp#===      5.993M (± 0.4%) i/s -     30.474M in   5.085197s
        String#match      4.888M (± 0.4%) i/s -     24.870M in   5.087784s

Comparison:
       String#match?:  9426380.1 i/s
           String#=~:  6572156.6 i/s - 1.43x  (± 0.00) slower
          Regexp#===:  5992808.4 i/s - 1.57x  (± 0.00) slower
        String#match:  4888236.3 i/s - 1.93x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   647.570k i/100ms
      String#casecmp   785.869k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.456M (± 1.2%) i/s -     32.378M in   5.015975s
      String#casecmp      7.933M (± 0.6%) i/s -     40.079M in   5.052361s

Comparison:
      String#casecmp:  7933100.5 i/s
String#downcase + ==:  6456047.1 i/s - 1.23x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   494.708k i/100ms
       String#concat   576.588k i/100ms
       String#append   606.572k i/100ms
         "foo" "bar"     1.148M i/100ms
  "#{'foo'}#{'bar'}"     1.145M i/100ms
Calculating -------------------------------------
            String#+      5.102M (± 0.2%) i/s -     25.725M in   5.041772s
       String#concat      5.742M (± 0.4%) i/s -     28.829M in   5.020981s
       String#append      6.050M (± 0.7%) i/s -     30.329M in   5.013352s
         "foo" "bar"     11.441M (± 0.3%) i/s -     57.383M in   5.015419s
  "#{'foo'}#{'bar'}"     11.460M (± 0.7%) i/s -     58.406M in   5.096567s

Comparison:
  "#{'foo'}#{'bar'}": 11460448.0 i/s
         "foo" "bar": 11441439.2 i/s - same-ish: difference falls within error
       String#append:  6049871.6 i/s - 1.89x  (± 0.00) slower
       String#concat:  5741882.1 i/s - 2.00x  (± 0.00) slower
            String#+:  5102359.2 i/s - 2.25x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@     1.004M i/100ms
          String#dup   570.353k i/100ms
Calculating -------------------------------------
           String#+@     10.021M (± 0.2%) i/s -     50.190M in   5.008546s
          String#dup      5.730M (± 0.4%) i/s -     29.088M in   5.076087s

Comparison:
           String#+@: 10020985.5 i/s
          String#dup:  5730478.6 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   175.730k i/100ms
       String#match?   380.460k i/100ms
    String#end_with?   600.598k i/100ms
Calculating -------------------------------------
           String#=~      1.751M (± 0.2%) i/s -      8.786M in   5.017923s
       String#match?      3.853M (± 0.2%) i/s -     19.403M in   5.035660s
    String#end_with?      6.040M (± 0.3%) i/s -     30.630M in   5.071045s

Comparison:
    String#end_with?:  6040324.2 i/s
       String#match?:  3853229.0 i/s - 1.57x  (± 0.00) slower
           String#=~:  1751029.0 i/s - 3.45x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   107.422k i/100ms
          String#sub   130.484k i/100ms
String#dup["string"]=
                       174.539k i/100ms
Calculating -------------------------------------
         String#gsub      1.081M (± 2.8%) i/s -      5.479M in   5.072647s
          String#sub      1.296M (± 0.7%) i/s -      6.524M in   5.032967s
String#dup["string"]=
                          1.743M (± 2.1%) i/s -      8.727M in   5.010326s

Comparison:
String#dup["string"]=:  1742616.0 i/s
          String#sub:  1296352.5 i/s - 1.34x  (± 0.00) slower
         String#gsub:  1081077.8 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   100.923k i/100ms
           String#tr   355.764k i/100ms
Calculating -------------------------------------
         String#gsub      1.007M (± 0.4%) i/s -      5.046M in   5.010767s
           String#tr      3.550M (± 0.4%) i/s -     17.788M in   5.010668s

Comparison:
           String#tr:  3550120.9 i/s
         String#gsub:  1007081.7 i/s - 3.53x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.140M i/100ms
         With Freeze     1.667M i/100ms
Calculating -------------------------------------
      Without Freeze     11.523M (± 0.4%) i/s -     58.141M in   5.045947s
         With Freeze     16.679M (± 0.4%) i/s -     85.027M in   5.097899s

Comparison:
         With Freeze: 16679069.2 i/s
      Without Freeze: 11522526.7 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.351k i/100ms
      String#squeeze   155.464k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     33.568k (± 0.4%) i/s -    170.901k in   5.091253s
      String#squeeze      1.554M (± 1.0%) i/s -      7.773M in   5.001320s

Comparison:
      String#squeeze:  1554383.1 i/s
 String#gsub/regex+/:    33568.1 i/s - 46.31x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   258.478k i/100ms
       String#match?   639.952k i/100ms
  String#start_with?   843.305k i/100ms
Calculating -------------------------------------
           String#=~      2.592M (± 0.7%) i/s -     13.182M in   5.086981s
       String#match?      6.424M (± 0.5%) i/s -     32.638M in   5.080941s
  String#start_with?      8.413M (± 0.4%) i/s -     42.165M in   5.011924s

Comparison:
  String#start_with?:  8413105.2 i/s
       String#match?:  6423673.6 i/s - 1.31x  (± 0.00) slower
           String#=~:  2591536.9 i/s - 3.25x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   199.147k i/100ms
    String#[0, n] ==    86.076k i/100ms
   String#[RANGE] ==    76.729k i/100ms
   String#[0...n] ==    46.353k i/100ms
Calculating -------------------------------------
  String#start_with?      2.010M (± 1.3%) i/s -     10.156M in   5.053421s
    String#[0, n] ==    839.507k (± 1.2%) i/s -      4.218M in   5.024828s
   String#[RANGE] ==    761.186k (± 0.7%) i/s -      3.836M in   5.040347s
   String#[0...n] ==    467.454k (± 0.8%) i/s -      2.364M in   5.057533s

Comparison:
  String#start_with?:  2010164.6 i/s
    String#[0, n] ==:   839507.0 i/s - 2.39x  (± 0.00) slower
   String#[RANGE] ==:   761185.9 i/s - 2.64x  (± 0.00) slower
   String#[0...n] ==:   467454.5 i/s - 4.30x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   172.988k i/100ms
 String#sub!'string'   125.614k i/100ms
String#gsub!'string'    77.055k i/100ms
  String#[/regexp/]=   155.685k i/100ms
 String#sub!/regexp/   112.323k i/100ms
String#gsub!/regexp/    60.169k i/100ms
Calculating -------------------------------------
  String#['string']=      1.751M (± 1.1%) i/s -      8.822M in   5.040364s
 String#sub!'string'      1.257M (± 0.4%) i/s -      6.406M in   5.097494s
String#gsub!'string'    770.500k (± 0.5%) i/s -      3.853M in   5.000455s
  String#[/regexp/]=      1.542M (± 0.4%) i/s -      7.784M in   5.047266s
 String#sub!/regexp/      1.134M (± 0.4%) i/s -      5.728M in   5.052509s
String#gsub!/regexp/    596.958k (± 0.5%) i/s -      3.008M in   5.039745s

Comparison:
  String#['string']=:  1750539.5 i/s
  String#[/regexp/]=:  1542294.5 i/s - 1.14x  (± 0.00) slower
 String#sub!'string':  1256774.3 i/s - 1.39x  (± 0.00) slower
 String#sub!/regexp/:  1133807.7 i/s - 1.54x  (± 0.00) slower
String#gsub!'string':   770500.2 i/s - 2.27x  (± 0.00) slower
String#gsub!/regexp/:   596958.0 i/s - 2.93x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   137.615k i/100ms
        String#chomp   520.012k i/100ms
String#delete_suffix   598.152k i/100ms
Calculating -------------------------------------
          String#sub      1.373M (± 0.3%) i/s -      6.881M in   5.010120s
        String#chomp      5.182M (± 0.7%) i/s -     26.001M in   5.017846s
String#delete_suffix      5.860M (± 0.6%) i/s -     29.309M in   5.001700s

Comparison:
String#delete_suffix:  5860089.0 i/s
        String#chomp:  5181892.6 i/s - 1.13x  (± 0.00) slower
          String#sub:  1373381.3 i/s - 4.27x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   623.869k i/100ms
          String#sub   141.462k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.273M (± 0.4%) i/s -     31.817M in   5.072549s
          String#sub      1.421M (± 1.1%) i/s -      7.215M in   5.076178s

Comparison:
String#delete_prefix:  6272535.3 i/s
          String#sub:  1421435.4 i/s - 4.41x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   608.846k i/100ms
    String#unpack[0]   443.236k i/100ms
Calculating -------------------------------------
      String#unpack1      6.120M (± 0.3%) i/s -     31.051M in   5.073641s
    String#unpack[0]      4.452M (± 0.6%) i/s -     22.605M in   5.078121s

Comparison:
      String#unpack1:  6120145.4 i/s
    String#unpack[0]:  4451595.0 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.688k i/100ms
          Time.parse     9.535k i/100ms
Calculating -------------------------------------
        Time.iso8601    275.810k (± 0.5%) i/s -      1.384M in   5.019500s
          Time.parse     94.370k (± 1.3%) i/s -    476.750k in   5.052766s

Comparison:
        Time.iso8601:   275810.1 i/s
          Time.parse:    94370.4 i/s - 2.92x  (± 0.00) slower

