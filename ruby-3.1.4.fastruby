$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       768.616k i/100ms
Function with splat arguments
                        22.602k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.642M (± 0.8%) i/s -     38.431M in   5.029370s
Function with splat arguments
                        238.070k (± 7.2%) i/s -      1.198M in   5.063529s

Comparison:
Function with single Array argument:  7641749.4 i/s
Function with splat arguments:   238069.6 i/s - 32.10x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.009M i/100ms
Sequential Assignment
                       996.939k i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.046M (± 0.6%) i/s -     50.451M in   5.022262s
Sequential Assignment
                         10.080M (± 0.3%) i/s -     50.844M in   5.043864s

Comparison:
Sequential Assignment: 10080408.6 i/s
 Parallel Assignment: 10045862.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   476.781k i/100ms
       attr_accessor   554.335k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.727M (± 0.3%) i/s -     23.839M in   5.042856s
       attr_accessor      5.498M (± 3.2%) i/s -     27.717M in   5.048255s

Comparison:
       attr_accessor:  5497728.9 i/s
   getter_and_setter:  4727346.7 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    87.950k i/100ms
         respond_to?   768.790k i/100ms
Calculating -------------------------------------
      begin...rescue    893.985k (± 0.6%) i/s -      4.485M in   5.017568s
         respond_to?      7.692M (± 0.1%) i/s -     39.208M in   5.097075s

Comparison:
         respond_to?:  7692324.2 i/s
      begin...rescue:   893985.0 i/s - 8.60x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   299.553k i/100ms
             &method   121.651k i/100ms
Calculating -------------------------------------
              normal      2.973M (± 2.7%) i/s -     14.978M in   5.041493s
             &method      1.209M (± 0.5%) i/s -      6.083M in   5.030002s

Comparison:
              normal:  2973410.0 i/s
             &method:  1209280.1 i/s - 2.46x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       220.000  i/100ms
       define_method   292.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.273k (±20.7%) i/s -     10.120k in   5.056166s
       define_method      3.141k (±18.2%) i/s -     14.308k in   5.024124s

Comparison:
       define_method:     3140.5 i/s
module_eval with string:     2273.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   259.738k i/100ms
       Kernel#format   205.890k i/100ms
            String#%   176.869k i/100ms
Calculating -------------------------------------
         Float#round      2.638M (± 1.4%) i/s -     13.247M in   5.021711s
       Kernel#format      2.063M (± 0.4%) i/s -     10.500M in   5.090900s
            String#%      1.775M (± 0.4%) i/s -      9.020M in   5.081357s

Comparison:
         Float#round:  2638435.8 i/s
       Kernel#format:  2062618.9 i/s - 1.28x  (± 0.00) slower
            String#%:  1775201.2 i/s - 1.49x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   882.645k i/100ms
          OpenStruct   499.041k i/100ms
Calculating -------------------------------------
                Hash      8.953M (± 3.8%) i/s -     45.015M in   5.037770s
          OpenStruct      4.960M (± 1.0%) i/s -     24.952M in   5.030746s

Comparison:
                Hash:  8952875.1 i/s
          OpenStruct:  4960451.3 i/s - 1.80x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.091M i/100ms
          OpenStruct     9.635k i/100ms
Calculating -------------------------------------
                Hash     10.984M (± 0.4%) i/s -     55.625M in   5.064156s
          OpenStruct     93.934k (± 2.9%) i/s -    472.115k in   5.030285s

Comparison:
                Hash: 10984328.4 i/s
          OpenStruct:    93933.9 i/s - 116.94x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   597.486k i/100ms
  ancestors.include?   122.422k i/100ms
Calculating -------------------------------------
  less than or equal      5.837M (± 0.6%) i/s -     29.277M in   5.015726s
  ancestors.include?      1.215M (± 0.5%) i/s -      6.121M in   5.038480s

Comparison:
  less than or equal:  5837192.2 i/s
  ancestors.include?:  1214896.8 i/s - 4.80x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.638  (± 0.0%) i/s -      4.000  in   6.273357s
         Kernel loop      0.213  (± 0.0%) i/s -      2.000  in   9.376155s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 2.99x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.533M i/100ms
         Array#first     1.321M i/100ms
Calculating -------------------------------------
           Array#[0]     15.350M (± 0.2%) i/s -     78.206M in   5.094781s
         Array#first     13.199M (± 0.3%) i/s -     66.065M in   5.005421s

Comparison:
           Array#[0]: 15350342.4 i/s
         Array#first: 13198704.9 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.556M i/100ms
          Array#last     1.313M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.548M (± 0.3%) i/s -     77.825M in   5.005366s
          Array#last     13.108M (± 0.2%) i/s -     65.642M in   5.007853s

Comparison:
          Array#[-1]: 15548364.4 i/s
          Array#last: 13107795.2 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    96.694k i/100ms
Calculating -------------------------------------
                find      0.276  (± 0.0%) i/s -      2.000  in   7.237069s
             bsearch    969.214k (± 0.5%) i/s -      4.931M in   5.088163s

Comparison:
             bsearch:   969214.1 i/s
                find:        0.3 i/s - 3507127.17x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    18.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    190.905  (± 2.6%) i/s -    954.000  in   5.000185s
        Array#insert      1.451  (± 0.0%) i/s -      8.000  in   5.513440s

Comparison:
       Array#unshift:      190.9 i/s
        Array#insert:        1.5 i/s - 131.57x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.127M i/100ms
          Array#size     2.117M i/100ms
         Array#count     1.618M i/100ms
Calculating -------------------------------------
        Array#length     21.244M (± 1.2%) i/s -    106.342M in   5.006464s
          Array#size     21.157M (± 0.3%) i/s -    105.851M in   5.003176s
         Array#count     15.978M (± 1.1%) i/s -     80.882M in   5.062682s

Comparison:
        Array#length: 21243847.2 i/s
          Array#size: 21156873.9 i/s - same-ish: difference falls within error
         Array#count: 15977936.3 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.161k i/100ms
        Array#sample     1.032M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    451.953k (± 0.3%) i/s -      2.303M in   5.096167s
        Array#sample     10.434M (± 0.3%) i/s -     52.626M in   5.043546s

Comparison:
        Array#sample: 10434476.2 i/s
 Array#shuffle.first:   451953.3 i/s - 23.09x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    63.501k i/100ms
          Date.parse    32.205k i/100ms
Calculating -------------------------------------
        Date.iso8601    637.282k (± 0.7%) i/s -      3.239M in   5.082056s
          Date.parse    320.215k (± 1.3%) i/s -      1.610M in   5.029628s

Comparison:
        Date.iso8601:   637282.5 i/s
          Date.parse:   320215.1 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.006k i/100ms
           Array#map    25.482k i/100ms
Calculating -------------------------------------
   Array#each + push    179.670k (± 0.3%) i/s -    900.300k in   5.010889s
           Array#map    254.660k (± 0.5%) i/s -      1.274M in   5.003268s

Comparison:
           Array#map:   254660.3 i/s
   Array#each + push:   179670.2 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    28.275k i/100ms
               #each    31.645k i/100ms
Calculating -------------------------------------
            For loop    283.226k (± 0.4%) i/s -      1.442M in   5.091513s
               #each    315.535k (± 0.9%) i/s -      1.582M in   5.014873s

Comparison:
               #each:   315535.3 i/s
            For loop:   283226.1 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.578k i/100ms
     each_with_index    18.694k i/100ms
Calculating -------------------------------------
          While Loop    276.625k (± 0.1%) i/s -      1.406M in   5.084424s
     each_with_index    187.880k (± 0.1%) i/s -    953.394k in   5.074493s

Comparison:
          While Loop:   276625.1 i/s
     each_with_index:   187879.9 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol   122.955k i/100ms
      inject to_proc     1.767k i/100ms
        inject block     2.004k i/100ms
Calculating -------------------------------------
       inject symbol      1.232M (± 0.5%) i/s -      6.271M in   5.089905s
      inject to_proc     17.691k (± 0.1%) i/s -     90.117k in   5.093858s
        inject block     20.071k (± 0.3%) i/s -    102.204k in   5.092214s

Comparison:
       inject symbol:  1232020.6 i/s
        inject block:    20070.9 i/s - 61.38x  (± 0.00) slower
      inject to_proc:    17691.3 i/s - 69.64x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     7.050k i/100ms
   Array#map.flatten     4.200k i/100ms
      Array#flat_map     9.031k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     70.251k (± 0.6%) i/s -    352.500k in   5.017900s
   Array#map.flatten     41.783k (± 0.3%) i/s -    210.000k in   5.026080s
      Array#flat_map     89.058k (± 0.8%) i/s -    451.550k in   5.070667s

Comparison:
      Array#flat_map:    89057.6 i/s
Array#map.flatten(1):    70250.7 i/s - 1.27x  (± 0.00) slower
   Array#map.flatten:    41782.5 i/s - 2.13x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    30.588k i/100ms
  Array#reverse_each    31.630k i/100ms
Calculating -------------------------------------
  Array#reverse.each    305.655k (± 0.4%) i/s -      1.529M in   5.003782s
  Array#reverse_each    316.288k (± 0.3%) i/s -      1.582M in   5.000234s

Comparison:
  Array#reverse_each:   316287.8 i/s
  Array#reverse.each:   305654.7 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.020k i/100ms
   Enumerable#detect    83.192k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        199.196k (± 2.2%) i/s -      3.984M in  20.013156s
   Enumerable#detect    833.478k (± 0.4%) i/s -     16.722M in  20.062766s

Comparison:
   Enumerable#detect:   833477.9 i/s
Enumerable#select.first:   199196.2 i/s - 4.18x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       244.190k i/100ms
Enumerable#select.last
                        17.835k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.443M (± 0.4%) i/s -     12.454M in   5.098098s
Enumerable#select.last
                        178.098k (± 0.9%) i/s -    891.750k in   5.007535s

Comparison:
Enumerable#reverse.detect:  2442853.9 i/s
Enumerable#select.last:   178097.9 i/s - 13.72x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         5.154k i/100ms
  Enumerable#sort_by     4.623k i/100ms
     Enumerable#sort     2.364k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         50.034k (± 1.4%) i/s -    252.546k in   5.048555s
  Enumerable#sort_by     48.714k (± 1.2%) i/s -    245.019k in   5.030464s
     Enumerable#sort     23.658k (± 0.6%) i/s -    120.564k in   5.096436s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    50033.5 i/s
  Enumerable#sort_by:    48714.1 i/s - 1.03x  (± 0.00) slower
     Enumerable#sort:    23657.5 i/s - 2.11x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.289k i/100ms
Enumerable#sort_by...first
                         8.569k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    172.949k (± 0.2%) i/s -    881.739k in   5.098299s
Enumerable#sort_by...first
                         86.755k (± 0.9%) i/s -    437.019k in   5.037785s

Comparison:
   Enumerable#min_by:   172948.5 i/s
Enumerable#sort_by...first:    86755.3 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   420.469k i/100ms
            Hash#dup   326.403k i/100ms
Calculating -------------------------------------
              Hash[]      4.084M (± 2.0%) i/s -     20.603M in   5.046993s
            Hash#dup      2.987M (± 0.6%) i/s -     15.015M in   5.026942s

Comparison:
              Hash[]:  4083753.0 i/s
            Hash#dup:  2986910.9 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.420M i/100ms
  Hash#fetch, symbol     1.181M i/100ms
     Hash#[], string     1.237M i/100ms
  Hash#fetch, string   771.150k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.220M (± 0.5%) i/s -     72.445M in   5.094515s
  Hash#fetch, symbol     11.780M (± 0.3%) i/s -     59.026M in   5.010862s
     Hash#[], string     12.442M (± 0.6%) i/s -     63.065M in   5.069000s
  Hash#fetch, string      7.729M (± 0.3%) i/s -     39.329M in   5.088753s

Comparison:
     Hash#[], symbol: 14220470.8 i/s
     Hash#[], string: 12441786.2 i/s - 1.14x  (± 0.00) slower
  Hash#fetch, symbol: 11779753.8 i/s - 1.21x  (± 0.00) slower
  Hash#fetch, string:  7728602.4 i/s - 1.84x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   901.330k i/100ms
             Hash#[]     1.009M i/100ms
          Hash#[] ||   881.793k i/100ms
          Hash#[] &&   394.033k i/100ms
          Hash#fetch   603.181k i/100ms
 Hash#fetch fallback   388.073k i/100ms
Calculating -------------------------------------
            Hash#dig      9.014M (± 0.6%) i/s -     45.968M in   5.099623s
             Hash#[]     10.227M (± 1.8%) i/s -     51.465M in   5.033837s
          Hash#[] ||      8.863M (± 2.3%) i/s -     44.971M in   5.076618s
          Hash#[] &&      3.968M (± 0.6%) i/s -     20.096M in   5.065058s
          Hash#fetch      5.983M (± 0.6%) i/s -     30.159M in   5.041316s
 Hash#fetch fallback      3.864M (± 0.5%) i/s -     19.404M in   5.021346s

Comparison:
             Hash#[]: 10227087.8 i/s
            Hash#dig:  9014340.2 i/s - 1.13x  (± 0.00) slower
          Hash#[] ||:  8863070.5 i/s - 1.15x  (± 0.00) slower
          Hash#fetch:  5982580.3 i/s - 1.71x  (± 0.00) slower
          Hash#[] &&:  3967652.3 i/s - 2.58x  (± 0.00) slower
 Hash#fetch fallback:  3864319.0 i/s - 2.65x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.449M i/100ms
  Hash#fetch + block     1.434M i/100ms
    Hash#fetch + arg     1.089M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.493M (± 0.2%) i/s -     73.881M in   5.097611s
  Hash#fetch + block     14.355M (± 0.8%) i/s -     73.156M in   5.096643s
    Hash#fetch + arg     10.879M (± 0.4%) i/s -     54.472M in   5.006981s

Comparison:
  Hash#fetch + const: 14493280.2 i/s
  Hash#fetch + block: 14354807.8 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 10879312.2 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.479k i/100ms
         sort + to_h    11.897k i/100ms
Calculating -------------------------------------
      sort_by + to_h    272.844k (± 0.4%) i/s -      1.374M in   5.035738s
         sort + to_h    117.046k (± 0.9%) i/s -    594.850k in   5.082591s

Comparison:
      sort_by + to_h:   272843.8 i/s
         sort + to_h:   117045.7 i/s - 2.33x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   188.107k i/100ms
       Hash#each_key   191.873k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.881M (± 0.8%) i/s -      9.405M in   5.001347s
       Hash#each_key      1.910M (± 0.5%) i/s -      9.594M in   5.023525s

Comparison:
       Hash#each_key:  1909792.4 i/s
      Hash#keys.each:  1880691.3 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.760k i/100ms
           Hash#key?   936.778k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     17.392k (± 4.5%) i/s -     88.000k in   5.072958s
           Hash#key?      9.477M (± 0.4%) i/s -     47.776M in   5.041404s

Comparison:
           Hash#key?:  9476796.7 i/s
  Hash#keys.include?:    17391.6 i/s - 544.91x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.192k i/100ms
            Hash#[]=    10.256k i/100ms
Calculating -------------------------------------
         Hash#merge!     41.891k (± 0.5%) i/s -    209.600k in   5.003553s
            Hash#[]=    101.903k (± 0.6%) i/s -    512.800k in   5.032428s

Comparison:
            Hash#[]=:   101903.0 i/s
         Hash#merge!:    41891.1 i/s - 2.43x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         5.185k i/100ms
      Hash#merge({})     4.130k i/100ms
 Hash#dup#merge!({})     2.746k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         51.429k (± 0.6%) i/s -    259.250k in   5.041122s
      Hash#merge({})     40.990k (± 1.3%) i/s -    206.500k in   5.038702s
 Hash#dup#merge!({})     27.125k (± 0.8%) i/s -    137.300k in   5.062128s

Comparison:
{}#merge!(Hash) do end:    51429.0 i/s
      Hash#merge({}):    40989.7 i/s - 1.25x  (± 0.00) slower
 Hash#dup#merge!({}):    27124.6 i/s - 1.90x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   391.492k i/100ms
          Hash#merge   368.850k i/100ms
Calculating -------------------------------------
        Hash#**other      3.899M (± 0.3%) i/s -     19.575M in   5.020054s
          Hash#merge      3.648M (± 0.5%) i/s -     18.442M in   5.055334s

Comparison:
        Hash#**other:  3899322.2 i/s
          Hash#merge:  3648217.3 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.674k i/100ms
         Hash#merge!     4.096k i/100ms
Calculating -------------------------------------
          Hash#merge     16.514k (± 2.3%) i/s -     83.700k in   5.071340s
         Hash#merge!     41.072k (± 0.5%) i/s -    208.896k in   5.086189s

Comparison:
         Hash#merge!:    41072.3 i/s
          Hash#merge:    16513.6 i/s - 2.49x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      427.200k i/100ms
Array#each             234.520k i/100ms
Array#each_w/_object   175.399k i/100ms
Hash#select-include     77.917k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.283M (± 0.4%) i/s -     21.787M in   5.086411s
Array#each                2.315M (± 3.1%) i/s -     11.726M in   5.070555s
Array#each_w/_object      1.742M (± 1.7%) i/s -      8.770M in   5.037234s
Hash#select-include     753.029k (± 2.2%) i/s -      3.818M in   5.072568s

Comparison:
Hash#native-slice   :  4283488.0 i/s
Array#each          :  2315455.1 i/s - 1.85x  (± 0.00) slower
Array#each_w/_object:  1741596.8 i/s - 2.46x  (± 0.00) slower
Hash#select-include :   753028.8 i/s - 5.69x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     8.808k i/100ms
         Hash#value?    16.699k i/100ms
Calculating -------------------------------------
Hash#values.include?     87.593k (± 5.5%) i/s -    440.400k in   5.052612s
         Hash#value?    167.235k (± 0.3%) i/s -    851.649k in   5.092570s

Comparison:
         Hash#value?:   167234.8 i/s
Hash#values.include?:    87592.7 i/s - 1.91x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   669.998k i/100ms
                send   500.202k i/100ms
      method_missing   382.167k i/100ms
Calculating -------------------------------------
                call      6.708M (± 0.1%) i/s -     34.170M in   5.093767s
                send      4.957M (± 0.4%) i/s -     25.010M in   5.045125s
      method_missing      3.806M (± 0.4%) i/s -     19.108M in   5.020393s

Comparison:
                call:  6708191.9 i/s
                send:  4957340.9 i/s - 1.35x  (± 0.00) slower
      method_missing:  3806196.2 i/s - 1.76x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     8.784k i/100ms
      Symbol#to_proc     9.302k i/100ms
Calculating -------------------------------------
               Block     86.813k (± 0.5%) i/s -    439.200k in   5.059280s
      Symbol#to_proc     92.228k (± 0.3%) i/s -    465.100k in   5.042994s

Comparison:
      Symbol#to_proc:    92228.1 i/s
               Block:    86812.7 i/s - 1.06x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   934.341k i/100ms
       block + yield   962.615k i/100ms
        unused block     1.310M i/100ms
               yield     1.165M i/100ms
Calculating -------------------------------------
          block.call      9.366M (± 0.6%) i/s -     47.651M in   5.087746s
       block + yield      9.765M (± 0.2%) i/s -     49.093M in   5.027554s
        unused block     13.050M (± 0.3%) i/s -     65.500M in   5.019193s
               yield     11.604M (± 0.3%) i/s -     58.248M in   5.019595s

Comparison:
        unused block: 13050024.7 i/s
               yield: 11604273.8 i/s - 1.12x  (± 0.00) slower
       block + yield:  9764904.4 i/s - 1.34x  (± 0.00) slower
          block.call:  9366218.7 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   318.925k i/100ms
      range#include?    12.334k i/100ms
       range#member?    12.540k i/100ms
       plain compare   516.220k i/100ms
Calculating -------------------------------------
        range#cover?      3.114M (± 0.3%) i/s -     15.627M in   5.017735s
      range#include?    125.729k (± 0.6%) i/s -    629.034k in   5.003273s
       range#member?    127.413k (± 0.6%) i/s -    639.540k in   5.019592s
       plain compare      5.184M (± 0.2%) i/s -     26.327M in   5.079044s

Comparison:
       plain compare:  5183513.2 i/s
        range#cover?:  3114455.8 i/s - 1.66x  (± 0.00) slower
       range#member?:   127413.0 i/s - 40.68x  (± 0.00) slower
      range#include?:   125728.6 i/s - 41.23x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   941.794k i/100ms
           String#=~   648.020k i/100ms
          Regexp#===   586.408k i/100ms
        String#match   482.461k i/100ms
Calculating -------------------------------------
       String#match?      9.395M (± 0.6%) i/s -     47.090M in   5.012208s
           String#=~      6.530M (± 0.5%) i/s -     33.049M in   5.061468s
          Regexp#===      5.894M (± 0.4%) i/s -     29.907M in   5.074000s
        String#match      4.838M (± 0.3%) i/s -     24.606M in   5.086122s

Comparison:
       String#match?:  9395392.1 i/s
           String#=~:  6529669.8 i/s - 1.44x  (± 0.00) slower
          Regexp#===:  5894208.9 i/s - 1.59x  (± 0.00) slower
        String#match:  4837812.5 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   617.418k i/100ms
      String#casecmp   752.677k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.141M (± 0.9%) i/s -     30.871M in   5.027723s
      String#casecmp      7.512M (± 1.1%) i/s -     37.634M in   5.010662s

Comparison:
      String#casecmp:  7511727.2 i/s
String#downcase + ==:  6140695.0 i/s - 1.22x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   567.277k i/100ms
       String#concat   595.851k i/100ms
       String#append   643.707k i/100ms
         "foo" "bar"     1.167M i/100ms
  "#{'foo'}#{'bar'}"     1.170M i/100ms
Calculating -------------------------------------
            String#+      5.683M (± 0.8%) i/s -     28.931M in   5.091364s
       String#concat      5.956M (± 0.2%) i/s -     29.793M in   5.002522s
       String#append      6.456M (± 0.4%) i/s -     32.829M in   5.085282s
         "foo" "bar"     11.697M (± 0.3%) i/s -     59.497M in   5.086715s
  "#{'foo'}#{'bar'}"     11.698M (± 0.3%) i/s -     59.656M in   5.099644s

Comparison:
  "#{'foo'}#{'bar'}": 11698280.2 i/s
         "foo" "bar": 11696670.1 i/s - same-ish: difference falls within error
       String#append:  6455807.0 i/s - 1.81x  (± 0.00) slower
       String#concat:  5955526.2 i/s - 1.96x  (± 0.00) slower
            String#+:  5682802.9 i/s - 2.06x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@   998.164k i/100ms
          String#dup   560.184k i/100ms
Calculating -------------------------------------
           String#+@      9.984M (± 0.5%) i/s -     50.906M in   5.099028s
          String#dup      5.663M (± 0.2%) i/s -     28.569M in   5.044532s

Comparison:
           String#+@:  9983777.1 i/s
          String#dup:  5663470.8 i/s - 1.76x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   188.291k i/100ms
       String#match?   428.720k i/100ms
    String#end_with?   601.503k i/100ms
Calculating -------------------------------------
           String#=~      1.872M (± 0.4%) i/s -      9.415M in   5.030050s
       String#match?      4.366M (± 0.3%) i/s -     21.865M in   5.007609s
    String#end_with?      6.040M (± 0.5%) i/s -     30.677M in   5.079357s

Comparison:
    String#end_with?:  6039615.4 i/s
       String#match?:  4366333.4 i/s - 1.38x  (± 0.00) slower
           String#=~:  1871696.2 i/s - 3.23x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   107.256k i/100ms
          String#sub   133.052k i/100ms
String#dup["string"]=
                       172.674k i/100ms
Calculating -------------------------------------
         String#gsub      1.077M (± 0.6%) i/s -      5.470M in   5.079802s
          String#sub      1.275M (± 0.3%) i/s -      6.386M in   5.008428s
String#dup["string"]=
                          1.724M (± 0.7%) i/s -      8.634M in   5.006992s

Comparison:
String#dup["string"]=:  1724423.1 i/s
          String#sub:  1275164.7 i/s - 1.35x  (± 0.00) slower
         String#gsub:  1076867.0 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    98.646k i/100ms
           String#tr   355.269k i/100ms
Calculating -------------------------------------
         String#gsub    987.728k (± 4.1%) i/s -      4.932M in   5.004103s
           String#tr      3.538M (± 0.3%) i/s -     17.763M in   5.020158s

Comparison:
           String#tr:  3538458.7 i/s
         String#gsub:   987728.3 i/s - 3.58x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.152M i/100ms
         With Freeze     1.652M i/100ms
Calculating -------------------------------------
      Without Freeze     11.519M (± 0.2%) i/s -     58.740M in   5.099476s
         With Freeze     16.506M (± 0.2%) i/s -     82.617M in   5.005170s

Comparison:
         With Freeze: 16506471.8 i/s
      Without Freeze: 11518989.9 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.344k i/100ms
      String#squeeze   154.670k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     33.327k (± 1.0%) i/s -    167.200k in   5.017426s
      String#squeeze      1.556M (± 1.0%) i/s -      7.888M in   5.070186s

Comparison:
      String#squeeze:  1555959.6 i/s
 String#gsub/regex+/:    33327.4 i/s - 46.69x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   287.636k i/100ms
       String#match?   781.832k i/100ms
  String#start_with?   871.729k i/100ms
Calculating -------------------------------------
           String#=~      2.866M (± 0.4%) i/s -     14.382M in   5.017469s
       String#match?      7.804M (± 0.5%) i/s -     39.092M in   5.009427s
  String#start_with?      8.691M (± 0.4%) i/s -     43.586M in   5.015081s

Comparison:
  String#start_with?:  8691221.4 i/s
       String#match?:  7803812.8 i/s - 1.11x  (± 0.00) slower
           String#=~:  2866397.6 i/s - 3.03x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   205.466k i/100ms
    String#[0, n] ==    83.551k i/100ms
   String#[RANGE] ==    75.062k i/100ms
   String#[0...n] ==    47.510k i/100ms
Calculating -------------------------------------
  String#start_with?      1.955M (± 2.4%) i/s -      9.862M in   5.047063s
    String#[0, n] ==    822.397k (± 0.8%) i/s -      4.178M in   5.080080s
   String#[RANGE] ==    760.090k (± 0.8%) i/s -      3.828M in   5.036767s
   String#[0...n] ==    461.467k (± 0.5%) i/s -      2.328M in   5.044880s

Comparison:
  String#start_with?:  1955353.3 i/s
    String#[0, n] ==:   822396.7 i/s - 2.38x  (± 0.00) slower
   String#[RANGE] ==:   760090.2 i/s - 2.57x  (± 0.00) slower
   String#[0...n] ==:   461467.3 i/s - 4.24x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   177.896k i/100ms
 String#sub!'string'   124.471k i/100ms
String#gsub!'string'    76.225k i/100ms
  String#[/regexp/]=   142.215k i/100ms
 String#sub!/regexp/   110.940k i/100ms
String#gsub!/regexp/    58.769k i/100ms
Calculating -------------------------------------
  String#['string']=      1.746M (± 3.1%) i/s -      8.895M in   5.099324s
 String#sub!'string'      1.256M (± 0.7%) i/s -      6.348M in   5.056035s
String#gsub!'string'    761.246k (± 0.4%) i/s -      3.811M in   5.006660s
  String#[/regexp/]=      1.417M (± 0.4%) i/s -      7.111M in   5.017799s
 String#sub!/regexp/      1.102M (± 0.5%) i/s -      5.547M in   5.033920s
String#gsub!/regexp/    585.290k (± 0.7%) i/s -      2.938M in   5.020744s

Comparison:
  String#['string']=:  1746323.7 i/s
  String#[/regexp/]=:  1417132.5 i/s - 1.23x  (± 0.00) slower
 String#sub!'string':  1255600.9 i/s - 1.39x  (± 0.00) slower
 String#sub!/regexp/:  1101948.9 i/s - 1.58x  (± 0.00) slower
String#gsub!'string':   761246.3 i/s - 2.29x  (± 0.00) slower
String#gsub!/regexp/:   585290.2 i/s - 2.98x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   135.234k i/100ms
        String#chomp   550.839k i/100ms
String#delete_suffix   594.760k i/100ms
Calculating -------------------------------------
          String#sub      1.338M (± 0.6%) i/s -      6.762M in   5.052869s
        String#chomp      5.497M (± 0.7%) i/s -     27.542M in   5.010278s
String#delete_suffix      5.941M (± 0.8%) i/s -     29.738M in   5.005530s

Comparison:
String#delete_suffix:  5941369.6 i/s
        String#chomp:  5497374.3 i/s - 1.08x  (± 0.00) slower
          String#sub:  1338232.8 i/s - 4.44x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   624.503k i/100ms
          String#sub   135.605k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.268M (± 0.4%) i/s -     31.850M in   5.081347s
          String#sub      1.374M (± 0.2%) i/s -      6.916M in   5.033705s

Comparison:
String#delete_prefix:  6268044.3 i/s
          String#sub:  1373917.2 i/s - 4.56x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   569.357k i/100ms
    String#unpack[0]   432.086k i/100ms
Calculating -------------------------------------
      String#unpack1      5.854M (± 0.3%) i/s -     29.607M in   5.057264s
    String#unpack[0]      4.413M (± 0.4%) i/s -     22.468M in   5.091062s

Comparison:
      String#unpack1:  5854310.1 i/s
    String#unpack[0]:  4413389.4 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.436k i/100ms
          Time.parse     9.410k i/100ms
Calculating -------------------------------------
        Time.iso8601    270.223k (± 1.6%) i/s -      1.372M in   5.077881s
          Time.parse     91.340k (± 1.6%) i/s -    461.090k in   5.049310s

Comparison:
        Time.iso8601:   270223.0 i/s
          Time.parse:    91340.3 i/s - 2.96x  (± 0.00) slower

