$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       492.008k i/100ms
Function with splat arguments
                         9.162k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          5.009M (± 2.0%) i/s -     25.092M in   5.011774s
Function with splat arguments
                         86.432k (± 9.3%) i/s -    430.614k in   5.038338s

Comparison:
Function with single Array argument:  5008668.2 i/s
Function with splat arguments:    86432.3 i/s - 57.95x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   885.349k i/100ms
Sequential Assignment
                       917.793k i/100ms
Calculating -------------------------------------
 Parallel Assignment      8.542M (± 0.8%) i/s -     43.382M in   5.079084s
Sequential Assignment
                          8.690M (± 0.8%) i/s -     44.054M in   5.069650s

Comparison:
Sequential Assignment:  8690261.2 i/s
 Parallel Assignment:  8541932.1 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   310.327k i/100ms
       attr_accessor   326.681k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.089M (± 0.8%) i/s -     15.516M in   5.023802s
       attr_accessor      3.350M (± 0.6%) i/s -     16.987M in   5.070694s

Comparison:
       attr_accessor:  3350249.5 i/s
   getter_and_setter:  3088787.5 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    60.625k i/100ms
         respond_to?   496.495k i/100ms
Calculating -------------------------------------
      begin...rescue    611.754k (± 0.9%) i/s -      3.092M in   5.054530s
         respond_to?      5.018M (± 1.0%) i/s -     25.321M in   5.046730s

Comparison:
         respond_to?:  5017882.8 i/s
      begin...rescue:   611754.3 i/s - 8.20x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   195.555k i/100ms
             &method    72.010k i/100ms
Calculating -------------------------------------
              normal      2.000M (± 1.8%) i/s -     10.169M in   5.085045s
             &method    729.629k (± 1.0%) i/s -      3.673M in   5.033939s

Comparison:
              normal:  2000419.1 i/s
             &method:   729629.0 i/s - 2.74x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       161.000  i/100ms
       define_method   199.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.652k (±19.6%) i/s -      7.406k in   5.084775s
       define_method      2.150k (±25.2%) i/s -      9.154k in   5.089461s

Comparison:
       define_method:     2150.3 i/s
module_eval with string:     1652.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   120.983k i/100ms
       Kernel#format   129.094k i/100ms
            String#%   115.195k i/100ms
Calculating -------------------------------------
         Float#round      1.224M (± 1.5%) i/s -      6.170M in   5.043830s
       Kernel#format      1.300M (± 1.5%) i/s -      6.584M in   5.066953s
            String#%      1.160M (± 1.3%) i/s -      5.875M in   5.066659s

Comparison:
       Kernel#format:  1299639.4 i/s
         Float#round:  1223569.5 i/s - 1.06x  (± 0.00) slower
            String#%:  1159713.2 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   585.841k i/100ms
          OpenStruct   301.142k i/100ms
Calculating -------------------------------------
                Hash      5.958M (± 1.8%) i/s -     29.878M in   5.016730s
          OpenStruct      3.131M (± 2.1%) i/s -     15.659M in   5.004268s

Comparison:
                Hash:  5957584.3 i/s
          OpenStruct:  3130577.7 i/s - 1.90x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   763.657k i/100ms
          OpenStruct     7.295k i/100ms
Calculating -------------------------------------
                Hash      8.141M (± 1.4%) i/s -     41.237M in   5.066463s
          OpenStruct     74.487k (± 3.4%) i/s -    372.045k in   5.000504s

Comparison:
                Hash:  8140798.2 i/s
          OpenStruct:    74487.0 i/s - 109.29x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   404.752k i/100ms
  ancestors.include?    76.189k i/100ms
Calculating -------------------------------------
  less than or equal      4.211M (± 2.3%) i/s -     21.047M in   5.000959s
  ancestors.include?    764.605k (± 3.1%) i/s -      3.886M in   5.086982s

Comparison:
  less than or equal:  4210780.1 i/s
  ancestors.include?:   764605.0 i/s - 5.51x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.505  (± 0.0%) i/s -      3.000  in   5.942855s
         Kernel loop      0.146  (± 0.0%) i/s -      1.000  in   6.850608s

Comparison:
          While Loop:        0.5 i/s
         Kernel loop:        0.1 i/s - 3.46x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.080M i/100ms
         Array#first   956.036k i/100ms
Calculating -------------------------------------
           Array#[0]     10.903M (± 0.8%) i/s -     55.085M in   5.052561s
         Array#first      9.522M (± 1.0%) i/s -     47.802M in   5.020767s

Comparison:
           Array#[0]: 10903137.4 i/s
         Array#first:  9521676.4 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.180M i/100ms
          Array#last     1.027M i/100ms
Calculating -------------------------------------
          Array#[-1]     11.547M (± 0.8%) i/s -     57.833M in   5.008812s
          Array#last     10.433M (± 1.3%) i/s -     52.399M in   5.023157s

Comparison:
          Array#[-1]: 11547032.0 i/s
          Array#last: 10433352.0 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    53.136k i/100ms
Calculating -------------------------------------
                find      0.162  (± 0.0%) i/s -      1.000  in   6.167868s
             bsearch    531.007k (± 1.2%) i/s -      2.657M in   5.003998s

Comparison:
             bsearch:   531007.3 i/s
                find:        0.2 i/s - 3275183.00x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    11.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    119.235  (± 3.4%) i/s -    605.000  in   5.079033s
        Array#insert      1.157  (± 0.0%) i/s -      6.000  in   5.186104s

Comparison:
       Array#unshift:      119.2 i/s
        Array#insert:        1.2 i/s - 103.06x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.561M i/100ms
          Array#size     1.582M i/100ms
         Array#count     1.056M i/100ms
Calculating -------------------------------------
        Array#length     15.765M (± 1.7%) i/s -     79.613M in   5.051294s
          Array#size     16.527M (± 1.7%) i/s -     83.832M in   5.073905s
         Array#count     10.859M (± 2.0%) i/s -     54.934M in   5.060951s

Comparison:
          Array#size: 16526931.4 i/s
        Array#length: 15765333.0 i/s - 1.05x  (± 0.00) slower
         Array#count: 10859055.0 i/s - 1.52x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    28.883k i/100ms
        Array#sample   735.629k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    284.732k (± 2.1%) i/s -      1.444M in   5.074206s
        Array#sample      7.314M (± 1.9%) i/s -     36.781M in   5.030794s

Comparison:
        Array#sample:  7313999.7 i/s
 Array#shuffle.first:   284732.2 i/s - 25.69x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    41.469k i/100ms
          Date.parse    21.586k i/100ms
Calculating -------------------------------------
        Date.iso8601    417.495k (± 1.2%) i/s -      2.115M in   5.066502s
          Date.parse    214.344k (± 1.2%) i/s -      1.079M in   5.036033s

Comparison:
        Date.iso8601:   417494.6 i/s
          Date.parse:   214344.1 i/s - 1.95x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    11.577k i/100ms
           Array#map    15.637k i/100ms
Calculating -------------------------------------
   Array#each + push    117.220k (± 1.4%) i/s -    590.427k in   5.037898s
           Array#map    157.217k (± 1.1%) i/s -    797.487k in   5.073143s

Comparison:
           Array#map:   157217.3 i/s
   Array#each + push:   117219.7 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    19.446k i/100ms
               #each    21.431k i/100ms
Calculating -------------------------------------
            For loop    195.972k (± 0.9%) i/s -    991.746k in   5.061091s
               #each    210.506k (± 0.7%) i/s -      1.072M in   5.090570s

Comparison:
               #each:   210506.1 i/s
            For loop:   195972.0 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    24.353k i/100ms
     each_with_index    12.126k i/100ms
Calculating -------------------------------------
          While Loop    244.718k (± 2.1%) i/s -      1.242M in   5.077393s
     each_with_index    123.602k (± 2.0%) i/s -    618.426k in   5.005275s

Comparison:
          While Loop:   244718.2 i/s
     each_with_index:   123602.1 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    72.134k i/100ms
      inject to_proc     1.306k i/100ms
        inject block     1.314k i/100ms
Calculating -------------------------------------
       inject symbol    688.102k (± 3.2%) i/s -      3.462M in   5.037171s
      inject to_proc     12.011k (± 1.9%) i/s -     60.076k in   5.003458s
        inject block     12.569k (± 2.4%) i/s -     63.072k in   5.021177s

Comparison:
       inject symbol:   688101.6 i/s
        inject block:    12569.0 i/s - 54.75x  (± 0.00) slower
      inject to_proc:    12011.2 i/s - 57.29x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     4.136k i/100ms
   Array#map.flatten     2.357k i/100ms
      Array#flat_map     5.555k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     43.239k (± 1.4%) i/s -    219.208k in   5.070659s
   Array#map.flatten     23.187k (± 1.3%) i/s -    117.850k in   5.083398s
      Array#flat_map     55.357k (± 1.4%) i/s -    277.750k in   5.018355s

Comparison:
      Array#flat_map:    55357.1 i/s
Array#map.flatten(1):    43238.6 i/s - 1.28x  (± 0.00) slower
   Array#map.flatten:    23187.4 i/s - 2.39x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    19.398k i/100ms
  Array#reverse_each    20.103k i/100ms
Calculating -------------------------------------
  Array#reverse.each    194.555k (± 1.1%) i/s -    989.298k in   5.085520s
  Array#reverse_each    200.869k (± 1.5%) i/s -      1.005M in   5.005104s

Comparison:
  Array#reverse_each:   200869.4 i/s
  Array#reverse.each:   194555.1 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        12.737k i/100ms
   Enumerable#detect    49.461k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        126.970k (± 1.4%) i/s -      2.547M in  20.066830s
   Enumerable#detect    501.522k (± 1.5%) i/s -     10.041M in  20.024713s

Comparison:
   Enumerable#detect:   501521.8 i/s
Enumerable#select.first:   126970.1 i/s - 3.95x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       146.385k i/100ms
Enumerable#select.last
                        10.758k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.462M (± 0.9%) i/s -      7.319M in   5.007642s
Enumerable#select.last
                        109.564k (± 1.2%) i/s -    548.658k in   5.008298s

Comparison:
Enumerable#reverse.detect:  1461746.1 i/s
Enumerable#select.last:   109564.4 i/s - 13.34x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.805k i/100ms
  Enumerable#sort_by     2.732k i/100ms
     Enumerable#sort     1.564k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         28.008k (± 2.9%) i/s -    140.250k in   5.011649s
  Enumerable#sort_by     27.782k (± 1.7%) i/s -    139.332k in   5.016631s
     Enumerable#sort     15.672k (± 1.7%) i/s -     79.764k in   5.091092s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    28008.2 i/s
  Enumerable#sort_by:    27781.7 i/s - same-ish: difference falls within error
     Enumerable#sort:    15672.1 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    11.336k i/100ms
Enumerable#sort_by...first
                         5.139k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    108.085k (± 0.9%) i/s -    544.128k in   5.034683s
Enumerable#sort_by...first
                         50.280k (± 1.2%) i/s -    251.811k in   5.008834s

Comparison:
   Enumerable#min_by:   108084.7 i/s
Enumerable#sort_by...first:    50280.5 i/s - 2.15x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   226.848k i/100ms
            Hash#dup   160.991k i/100ms
Calculating -------------------------------------
              Hash[]      1.909M (± 2.1%) i/s -      9.754M in   5.113080s
            Hash#dup      1.631M (± 1.8%) i/s -      8.211M in   5.034710s

Comparison:
              Hash[]:  1908592.2 i/s
            Hash#dup:  1631312.1 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.074M i/100ms
  Hash#fetch, symbol   821.017k i/100ms
     Hash#[], string   893.359k i/100ms
  Hash#fetch, string   480.170k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     10.748M (± 1.6%) i/s -     54.764M in   5.096648s
  Hash#fetch, symbol      8.164M (± 1.1%) i/s -     41.051M in   5.028663s
     Hash#[], string      9.010M (± 1.2%) i/s -     45.561M in   5.057784s
  Hash#fetch, string      4.847M (± 1.2%) i/s -     24.489M in   5.053571s

Comparison:
     Hash#[], symbol: 10747740.8 i/s
     Hash#[], string:  9009543.5 i/s - 1.19x  (± 0.00) slower
  Hash#fetch, symbol:  8164400.9 i/s - 1.32x  (± 0.00) slower
  Hash#fetch, string:  4846511.9 i/s - 2.22x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   565.868k i/100ms
             Hash#[]   638.874k i/100ms
          Hash#[] ||   586.333k i/100ms
          Hash#[] &&   255.367k i/100ms
          Hash#fetch   392.500k i/100ms
 Hash#fetch fallback   232.908k i/100ms
Calculating -------------------------------------
            Hash#dig      5.615M (± 0.9%) i/s -     28.293M in   5.039204s
             Hash#[]      6.316M (± 0.7%) i/s -     31.944M in   5.057619s
          Hash#[] ||      5.748M (± 1.0%) i/s -     29.317M in   5.100569s
          Hash#[] &&      2.571M (± 1.5%) i/s -     13.024M in   5.066789s
          Hash#fetch      3.926M (± 1.0%) i/s -     20.018M in   5.099158s
 Hash#fetch fallback      2.306M (± 1.0%) i/s -     11.645M in   5.049620s

Comparison:
             Hash#[]:  6316299.0 i/s
          Hash#[] ||:  5748325.4 i/s - 1.10x  (± 0.00) slower
            Hash#dig:  5615111.1 i/s - 1.12x  (± 0.00) slower
          Hash#fetch:  3926042.1 i/s - 1.61x  (± 0.00) slower
          Hash#[] &&:  2571010.3 i/s - 2.46x  (± 0.00) slower
 Hash#fetch fallback:  2306434.2 i/s - 2.74x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   997.979k i/100ms
  Hash#fetch + block   944.597k i/100ms
    Hash#fetch + arg   685.418k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     10.046M (± 1.3%) i/s -     50.897M in   5.067411s
  Hash#fetch + block      9.609M (± 1.4%) i/s -     48.174M in   5.014705s
    Hash#fetch + arg      6.850M (± 1.2%) i/s -     34.271M in   5.003832s

Comparison:
  Hash#fetch + const: 10045572.4 i/s
  Hash#fetch + block:  9608548.7 i/s - 1.05x  (± 0.00) slower
    Hash#fetch + arg:  6849977.4 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    15.900k i/100ms
         sort + to_h     7.476k i/100ms
Calculating -------------------------------------
      sort_by + to_h    159.092k (± 1.1%) i/s -    810.900k in   5.097705s
         sort + to_h     75.059k (± 1.1%) i/s -    381.276k in   5.080328s

Comparison:
      sort_by + to_h:   159091.8 i/s
         sort + to_h:    75059.3 i/s - 2.12x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   115.467k i/100ms
       Hash#each_key   121.924k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.165M (± 1.8%) i/s -      5.889M in   5.057179s
       Hash#each_key      1.206M (± 1.5%) i/s -      6.096M in   5.054519s

Comparison:
       Hash#each_key:  1206347.8 i/s
      Hash#keys.each:  1164823.6 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   640.000  i/100ms
           Hash#key?   700.741k i/100ms
Calculating -------------------------------------
  Hash#keys.include?      6.233k (± 4.0%) i/s -     31.360k in   5.040198s
           Hash#key?      7.018M (± 2.5%) i/s -     35.738M in   5.095295s

Comparison:
           Hash#key?:  7018369.1 i/s
  Hash#keys.include?:     6232.6 i/s - 1126.08x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     2.491k i/100ms
            Hash#[]=     5.875k i/100ms
Calculating -------------------------------------
         Hash#merge!     24.993k (± 2.2%) i/s -    127.041k in   5.085512s
            Hash#[]=     58.209k (± 2.2%) i/s -    293.750k in   5.048842s

Comparison:
            Hash#[]=:    58209.2 i/s
         Hash#merge!:    24993.0 i/s - 2.33x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.104k i/100ms
      Hash#merge({})     2.458k i/100ms
 Hash#dup#merge!({})     1.852k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         31.312k (± 2.2%) i/s -    158.304k in   5.058152s
      Hash#merge({})     24.886k (± 1.8%) i/s -    125.358k in   5.038882s
 Hash#dup#merge!({})     18.468k (± 2.0%) i/s -     92.600k in   5.015925s

Comparison:
{}#merge!(Hash) do end:    31312.0 i/s
      Hash#merge({}):    24886.1 i/s - 1.26x  (± 0.00) slower
 Hash#dup#merge!({}):    18468.3 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   233.469k i/100ms
          Hash#merge   212.149k i/100ms
Calculating -------------------------------------
        Hash#**other      2.336M (± 2.2%) i/s -     11.907M in   5.100271s
          Hash#merge      2.086M (± 1.9%) i/s -     10.607M in   5.086765s

Comparison:
        Hash#**other:  2335736.6 i/s
          Hash#merge:  2086056.1 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   948.000  i/100ms
         Hash#merge!     2.411k i/100ms
Calculating -------------------------------------
          Hash#merge      9.164k (± 1.5%) i/s -     46.452k in   5.070153s
         Hash#merge!     23.984k (± 1.4%) i/s -    120.550k in   5.027339s

Comparison:
         Hash#merge!:    23983.9 i/s
          Hash#merge:     9164.0 i/s - 2.62x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      248.370k i/100ms
Array#each             132.990k i/100ms
Array#each_w/_object   103.058k i/100ms
Hash#select-include     44.813k i/100ms
Calculating -------------------------------------
Hash#native-slice         2.452M (± 0.7%) i/s -     12.418M in   5.065747s
Array#each                1.321M (± 1.1%) i/s -      6.650M in   5.033012s
Array#each_w/_object      1.009M (± 0.8%) i/s -      5.050M in   5.005793s
Hash#select-include     437.177k (± 1.2%) i/s -      2.196M in   5.023456s

Comparison:
Hash#native-slice   :  2451586.7 i/s
Array#each          :  1321325.7 i/s - 1.86x  (± 0.00) slower
Array#each_w/_object:  1008872.5 i/s - 2.43x  (± 0.00) slower
Hash#select-include :   437177.1 i/s - 5.61x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.044k i/100ms
         Hash#value?   961.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     10.165k (± 5.6%) i/s -     51.156k in   5.052977s
         Hash#value?      9.733k (± 1.2%) i/s -     49.011k in   5.036508s

Comparison:
Hash#values.include?:    10164.7 i/s
         Hash#value?:     9732.6 i/s - same-ish: difference falls within error

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   430.424k i/100ms
                send   290.385k i/100ms
      method_missing   222.930k i/100ms
Calculating -------------------------------------
                call      4.305M (± 1.3%) i/s -     21.521M in   4.999938s
                send      2.924M (± 0.9%) i/s -     14.810M in   5.064609s
      method_missing      2.256M (± 1.5%) i/s -     11.369M in   5.041376s

Comparison:
                call:  4304968.4 i/s
                send:  2924368.4 i/s - 1.47x  (± 0.00) slower
      method_missing:  2255698.2 i/s - 1.91x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     4.801k i/100ms
      Symbol#to_proc     5.355k i/100ms
Calculating -------------------------------------
               Block     47.562k (± 2.6%) i/s -    240.050k in   5.050663s
      Symbol#to_proc     52.630k (± 2.1%) i/s -    267.750k in   5.089641s

Comparison:
      Symbol#to_proc:    52630.0 i/s
               Block:    47561.9 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   660.740k i/100ms
       block + yield   700.374k i/100ms
        unused block   872.936k i/100ms
               yield   903.401k i/100ms
Calculating -------------------------------------
          block.call      6.318M (± 0.1%) i/s -     31.716M in   5.020100s
       block + yield      6.784M (± 0.1%) i/s -     34.318M in   5.058945s
        unused block      8.739M (± 0.7%) i/s -     44.520M in   5.094774s
               yield      9.114M (± 1.3%) i/s -     46.073M in   5.056201s

Comparison:
               yield:  9113871.3 i/s
        unused block:  8738712.0 i/s - 1.04x  (± 0.00) slower
       block + yield:  6783697.3 i/s - 1.34x  (± 0.00) slower
          block.call:  6317719.6 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   194.630k i/100ms
      range#include?     8.119k i/100ms
       range#member?     7.999k i/100ms
       plain compare   294.592k i/100ms
Calculating -------------------------------------
        range#cover?      1.911M (± 1.5%) i/s -      9.732M in   5.092508s
      range#include?     81.101k (± 2.1%) i/s -    405.950k in   5.007731s
       range#member?     81.334k (± 1.7%) i/s -    407.949k in   5.017101s
       plain compare      2.928M (± 1.7%) i/s -     14.730M in   5.031406s

Comparison:
       plain compare:  2928348.9 i/s
        range#cover?:  1911373.2 i/s - 1.53x  (± 0.00) slower
       range#member?:    81334.1 i/s - 36.00x  (± 0.00) slower
      range#include?:    81100.9 i/s - 36.11x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   625.097k i/100ms
           String#=~   363.097k i/100ms
          Regexp#===   357.872k i/100ms
        String#match   291.812k i/100ms
Calculating -------------------------------------
       String#match?      6.164M (± 1.2%) i/s -     31.255M in   5.071278s
           String#=~      3.593M (± 1.4%) i/s -     18.155M in   5.053787s
          Regexp#===      3.490M (± 1.5%) i/s -     17.536M in   5.026193s
        String#match      2.818M (± 0.9%) i/s -     14.299M in   5.075043s

Comparison:
       String#match?:  6164016.8 i/s
           String#=~:  3592998.2 i/s - 1.72x  (± 0.00) slower
          Regexp#===:  3489621.9 i/s - 1.77x  (± 0.00) slower
        String#match:  2817708.9 i/s - 2.19x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   383.011k i/100ms
      String#casecmp   523.055k i/100ms
Calculating -------------------------------------
String#downcase + ==      3.902M (± 1.4%) i/s -     19.534M in   5.006662s
      String#casecmp      5.273M (± 1.7%) i/s -     26.676M in   5.060258s

Comparison:
      String#casecmp:  5273175.0 i/s
String#downcase + ==:  3902279.5 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   357.958k i/100ms
       String#concat   373.948k i/100ms
       String#append   403.649k i/100ms
         "foo" "bar"   834.294k i/100ms
  "#{'foo'}#{'bar'}"   839.272k i/100ms
Calculating -------------------------------------
            String#+      3.533M (± 1.3%) i/s -     17.898M in   5.066477s
       String#concat      3.712M (± 1.3%) i/s -     18.697M in   5.038081s
       String#append      4.042M (± 1.3%) i/s -     20.586M in   5.093749s
         "foo" "bar"      8.409M (± 1.6%) i/s -     42.549M in   5.061057s
  "#{'foo'}#{'bar'}"      8.271M (± 1.5%) i/s -     41.964M in   5.074962s

Comparison:
         "foo" "bar":  8409322.3 i/s
  "#{'foo'}#{'bar'}":  8270578.5 i/s - same-ish: difference falls within error
       String#append:  4042174.8 i/s - 2.08x  (± 0.00) slower
       String#concat:  3711804.5 i/s - 2.27x  (± 0.00) slower
            String#+:  3533226.9 i/s - 2.38x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@   703.362k i/100ms
          String#dup   343.514k i/100ms
Calculating -------------------------------------
           String#+@      6.950M (± 1.1%) i/s -     35.168M in   5.060516s
          String#dup      3.431M (± 0.9%) i/s -     17.176M in   5.006055s

Comparison:
           String#+@:  6950429.5 i/s
          String#dup:  3431287.4 i/s - 2.03x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   118.554k i/100ms
       String#match?   261.984k i/100ms
    String#end_with?   383.121k i/100ms
Calculating -------------------------------------
           String#=~      1.217M (± 2.0%) i/s -      6.165M in   5.069560s
       String#match?      2.648M (± 1.6%) i/s -     13.361M in   5.047930s
    String#end_with?      3.789M (± 1.7%) i/s -     19.156M in   5.057350s

Comparison:
    String#end_with?:  3788816.1 i/s
       String#match?:  2647574.2 i/s - 1.43x  (± 0.00) slower
           String#=~:  1216516.2 i/s - 3.11x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    72.018k i/100ms
          String#sub    88.175k i/100ms
String#dup["string"]=
                       112.174k i/100ms
Calculating -------------------------------------
         String#gsub    712.752k (± 2.0%) i/s -      3.601M in   5.054070s
          String#sub    917.046k (± 2.4%) i/s -      4.673M in   5.098960s
String#dup["string"]=
                          1.147M (± 2.1%) i/s -      5.833M in   5.089745s

Comparison:
String#dup["string"]=:  1146533.0 i/s
          String#sub:   917046.2 i/s - 1.25x  (± 0.00) slower
         String#gsub:   712752.1 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    63.484k i/100ms
           String#tr   228.189k i/100ms
Calculating -------------------------------------
         String#gsub    622.411k (± 2.2%) i/s -      3.111M in   5.000309s
           String#tr      2.390M (± 2.1%) i/s -     12.094M in   5.061850s

Comparison:
           String#tr:  2390266.3 i/s
         String#gsub:   622411.0 i/s - 3.84x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   834.326k i/100ms
         With Freeze     1.254M i/100ms
Calculating -------------------------------------
      Without Freeze      8.177M (± 2.2%) i/s -     40.882M in   5.002159s
         With Freeze     12.144M (± 1.3%) i/s -     61.455M in   5.061463s

Comparison:
         With Freeze: 12143691.0 i/s
      Without Freeze:  8176925.8 i/s - 1.49x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.165k i/100ms
      String#squeeze    90.523k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     21.026k (± 1.0%) i/s -    106.085k in   5.046042s
      String#squeeze    914.205k (± 1.5%) i/s -      4.617M in   5.051043s

Comparison:
      String#squeeze:   914205.0 i/s
 String#gsub/regex+/:    21025.7 i/s - 43.48x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   176.736k i/100ms
       String#match?   481.914k i/100ms
  String#start_with?   575.808k i/100ms
Calculating -------------------------------------
           String#=~      1.803M (± 1.5%) i/s -      9.190M in   5.099071s
       String#match?      4.797M (± 2.0%) i/s -     24.096M in   5.024719s
  String#start_with?      5.762M (± 1.5%) i/s -     29.366M in   5.097618s

Comparison:
  String#start_with?:  5762050.9 i/s
       String#match?:  4797400.0 i/s - 1.20x  (± 0.00) slower
           String#=~:  1802740.6 i/s - 3.20x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   128.291k i/100ms
    String#[0, n] ==    46.433k i/100ms
   String#[RANGE] ==    42.837k i/100ms
   String#[0...n] ==    27.884k i/100ms
Calculating -------------------------------------
  String#start_with?      1.287M (± 1.6%) i/s -      6.543M in   5.086506s
    String#[0, n] ==    461.474k (± 1.6%) i/s -      2.322M in   5.032166s
   String#[RANGE] ==    421.456k (± 1.4%) i/s -      2.142M in   5.083019s
   String#[0...n] ==    273.236k (± 1.1%) i/s -      1.394M in   5.103151s

Comparison:
  String#start_with?:  1286630.6 i/s
    String#[0, n] ==:   461473.9 i/s - 2.79x  (± 0.00) slower
   String#[RANGE] ==:   421455.7 i/s - 3.05x  (± 0.00) slower
   String#[0...n] ==:   273235.5 i/s - 4.71x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   107.975k i/100ms
 String#sub!'string'    79.154k i/100ms
String#gsub!'string'    50.095k i/100ms
  String#[/regexp/]=    98.582k i/100ms
 String#sub!/regexp/    79.953k i/100ms
String#gsub!/regexp/    41.454k i/100ms
Calculating -------------------------------------
  String#['string']=      1.125M (± 2.9%) i/s -      5.723M in   5.092516s
 String#sub!'string'    832.446k (± 1.9%) i/s -      4.195M in   5.041315s
String#gsub!'string'    513.361k (± 2.3%) i/s -      2.605M in   5.076888s
  String#[/regexp/]=    973.274k (± 1.7%) i/s -      4.929M in   5.065941s
 String#sub!/regexp/    821.654k (± 2.3%) i/s -      4.158M in   5.062765s
String#gsub!/regexp/    418.923k (± 2.4%) i/s -      2.114M in   5.049614s

Comparison:
  String#['string']=:  1124691.7 i/s
  String#[/regexp/]=:   973274.3 i/s - 1.16x  (± 0.00) slower
 String#sub!'string':   832445.9 i/s - 1.35x  (± 0.00) slower
 String#sub!/regexp/:   821654.5 i/s - 1.37x  (± 0.00) slower
String#gsub!'string':   513360.6 i/s - 2.19x  (± 0.00) slower
String#gsub!/regexp/:   418922.9 i/s - 2.68x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   103.901k i/100ms
        String#chomp   346.059k i/100ms
String#delete_suffix   381.646k i/100ms
Calculating -------------------------------------
          String#sub      1.037M (± 2.4%) i/s -      5.195M in   5.012032s
        String#chomp      3.497M (± 2.2%) i/s -     17.649M in   5.049440s
String#delete_suffix      3.769M (± 2.2%) i/s -     19.082M in   5.064850s

Comparison:
String#delete_suffix:  3769462.0 i/s
        String#chomp:  3496984.8 i/s - 1.08x  (± 0.00) slower
          String#sub:  1037101.8 i/s - 3.63x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   382.317k i/100ms
          String#sub   106.436k i/100ms
Calculating -------------------------------------
String#delete_prefix      3.875M (± 2.1%) i/s -     19.498M in   5.034021s
          String#sub      1.062M (± 2.0%) i/s -      5.322M in   5.010846s

Comparison:
String#delete_prefix:  3874985.6 i/s
          String#sub:  1062457.9 i/s - 3.65x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   370.842k i/100ms
    String#unpack[0]   284.211k i/100ms
Calculating -------------------------------------
      String#unpack1      3.731M (± 2.1%) i/s -     18.913M in   5.072109s
    String#unpack[0]      2.851M (± 2.0%) i/s -     14.495M in   5.087111s

Comparison:
      String#unpack1:  3730505.7 i/s
    String#unpack[0]:  2850513.3 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    19.940k i/100ms
          Time.parse     6.633k i/100ms
Calculating -------------------------------------
        Time.iso8601    196.709k (± 2.3%) i/s -    997.000k in   5.071174s
          Time.parse     64.614k (± 2.5%) i/s -    325.017k in   5.033286s

Comparison:
        Time.iso8601:   196708.8 i/s
          Time.parse:    64614.1 i/s - 3.04x  (± 0.00) slower

