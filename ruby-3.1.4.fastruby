$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       772.692k i/100ms
Function with splat arguments
                        24.232k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.719M (± 0.4%) i/s -     38.635M in   5.005288s
Function with splat arguments
                        226.528k (± 5.7%) i/s -      1.139M in   5.050344s

Comparison:
Function with single Array argument:  7718859.5 i/s
Function with splat arguments:   226528.3 i/s - 34.07x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.008M i/100ms
Sequential Assignment
                       978.457k i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.054M (± 0.6%) i/s -     50.403M in   5.013587s
Sequential Assignment
                         10.106M (± 0.4%) i/s -     50.880M in   5.034926s

Comparison:
Sequential Assignment: 10105538.3 i/s
 Parallel Assignment: 10053640.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   484.357k i/100ms
       attr_accessor   565.755k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.860M (± 1.0%) i/s -     24.702M in   5.082879s
       attr_accessor      5.565M (± 4.6%) i/s -     28.288M in   5.097426s

Comparison:
       attr_accessor:  5565309.6 i/s
   getter_and_setter:  4860317.5 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    88.117k i/100ms
         respond_to?   763.764k i/100ms
Calculating -------------------------------------
      begin...rescue    881.383k (± 0.6%) i/s -      4.494M in   5.098935s
         respond_to?      7.611M (± 0.4%) i/s -     38.188M in   5.017524s

Comparison:
         respond_to?:  7611115.9 i/s
      begin...rescue:   881383.0 i/s - 8.64x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   292.072k i/100ms
             &method   122.242k i/100ms
Calculating -------------------------------------
              normal      2.965M (± 0.4%) i/s -     14.896M in   5.023785s
             &method      1.214M (± 0.6%) i/s -      6.112M in   5.033172s

Comparison:
              normal:  2965081.2 i/s
             &method:  1214409.9 i/s - 2.44x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       245.000  i/100ms
       define_method   290.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.372k (±22.6%) i/s -     10.535k in   5.045819s
       define_method      3.270k (±19.9%) i/s -     14.790k in   5.030283s

Comparison:
       define_method:     3270.3 i/s
module_eval with string:     2371.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   264.161k i/100ms
       Kernel#format   203.741k i/100ms
            String#%   176.653k i/100ms
Calculating -------------------------------------
         Float#round      2.663M (± 0.5%) i/s -     13.472M in   5.059025s
       Kernel#format      2.021M (± 1.1%) i/s -     10.187M in   5.042281s
            String#%      1.772M (± 0.6%) i/s -      9.009M in   5.085513s

Comparison:
         Float#round:  2663072.3 i/s
       Kernel#format:  2020583.1 i/s - 1.32x  (± 0.00) slower
            String#%:  1771623.5 i/s - 1.50x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   903.114k i/100ms
          OpenStruct   500.696k i/100ms
Calculating -------------------------------------
                Hash      9.020M (± 0.8%) i/s -     45.156M in   5.006420s
          OpenStruct      4.946M (± 0.3%) i/s -     25.035M in   5.061633s

Comparison:
                Hash:  9020174.2 i/s
          OpenStruct:  4946044.0 i/s - 1.82x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.079M i/100ms
          OpenStruct    11.464k i/100ms
Calculating -------------------------------------
                Hash     11.416M (± 0.6%) i/s -     57.187M in   5.009432s
          OpenStruct    115.681k (± 2.7%) i/s -    584.664k in   5.057774s

Comparison:
                Hash: 11416330.9 i/s
          OpenStruct:   115681.5 i/s - 98.69x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   613.281k i/100ms
  ancestors.include?   122.401k i/100ms
Calculating -------------------------------------
  less than or equal      5.882M (± 0.6%) i/s -     29.437M in   5.004617s
  ancestors.include?      1.234M (± 0.4%) i/s -      6.242M in   5.058222s

Comparison:
  less than or equal:  5882270.3 i/s
  ancestors.include?:  1234135.3 i/s - 4.77x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.596  (± 0.0%) i/s -      3.000  in   5.031571s
         Kernel loop      0.215  (± 0.0%) i/s -      2.000  in   9.317189s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 2.78x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.502M i/100ms
         Array#first     1.322M i/100ms
Calculating -------------------------------------
           Array#[0]     15.307M (± 0.2%) i/s -     76.602M in   5.004438s
         Array#first     13.228M (± 0.4%) i/s -     67.441M in   5.098449s

Comparison:
           Array#[0]: 15306968.4 i/s
         Array#first: 13227987.8 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.560M i/100ms
          Array#last     1.324M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.576M (± 0.3%) i/s -     77.989M in   5.007157s
          Array#last     13.191M (± 2.0%) i/s -     66.224M in   5.022759s

Comparison:
          Array#[-1]: 15575728.6 i/s
          Array#last: 13190798.1 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    96.013k i/100ms
Calculating -------------------------------------
                find      0.274  (± 0.0%) i/s -      2.000  in   7.292855s
             bsearch    959.012k (± 1.1%) i/s -      4.801M in   5.006481s

Comparison:
             bsearch:   959011.7 i/s
                find:        0.3 i/s - 3496965.97x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    18.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    190.651  (± 2.6%) i/s -    954.000  in   5.007447s
        Array#insert      1.452  (± 0.0%) i/s -      8.000  in   5.509083s

Comparison:
       Array#unshift:      190.7 i/s
        Array#insert:        1.5 i/s - 131.28x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.085M i/100ms
          Array#size     2.119M i/100ms
         Array#count     1.625M i/100ms
Calculating -------------------------------------
        Array#length     20.766M (± 0.6%) i/s -    104.274M in   5.021545s
          Array#size     21.171M (± 0.6%) i/s -    105.969M in   5.005635s
         Array#count     16.313M (± 0.3%) i/s -     82.862M in   5.079387s

Comparison:
          Array#size: 21170635.7 i/s
        Array#length: 20766001.0 i/s - 1.02x  (± 0.00) slower
         Array#count: 16313457.7 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.422k i/100ms
        Array#sample     1.039M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    453.129k (± 0.8%) i/s -      2.271M in   5.012400s
        Array#sample     10.358M (± 0.6%) i/s -     51.961M in   5.016678s

Comparison:
        Array#sample: 10357905.6 i/s
 Array#shuffle.first:   453128.9 i/s - 22.86x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    63.750k i/100ms
          Date.parse    32.089k i/100ms
Calculating -------------------------------------
        Date.iso8601    636.356k (± 0.7%) i/s -      3.188M in   5.009230s
          Date.parse    318.693k (± 0.5%) i/s -      1.604M in   5.034604s

Comparison:
        Date.iso8601:   636356.1 i/s
          Date.parse:   318692.9 i/s - 2.00x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    17.244k i/100ms
           Array#map    24.400k i/100ms
Calculating -------------------------------------
   Array#each + push    172.385k (± 0.5%) i/s -    862.200k in   5.001708s
           Array#map    244.148k (± 0.6%) i/s -      1.244M in   5.097090s

Comparison:
           Array#map:   244147.7 i/s
   Array#each + push:   172384.9 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    28.710k i/100ms
               #each    31.241k i/100ms
Calculating -------------------------------------
            For loop    287.055k (± 0.5%) i/s -      1.436M in   5.000916s
               #each    312.248k (± 0.4%) i/s -      1.562M in   5.002662s

Comparison:
               #each:   312247.6 i/s
            For loop:   287055.4 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.367k i/100ms
     each_with_index    18.615k i/100ms
Calculating -------------------------------------
          While Loop    274.542k (± 0.5%) i/s -      1.396M in   5.083921s
     each_with_index    185.916k (± 0.3%) i/s -    930.750k in   5.006320s

Comparison:
          While Loop:   274541.7 i/s
     each_with_index:   185916.5 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol   125.224k i/100ms
      inject to_proc     1.751k i/100ms
        inject block     2.013k i/100ms
Calculating -------------------------------------
       inject symbol      1.243M (± 4.2%) i/s -      6.261M in   5.050354s
      inject to_proc     17.610k (± 0.6%) i/s -     89.301k in   5.071283s
        inject block     20.114k (± 0.6%) i/s -    100.650k in   5.004089s

Comparison:
       inject symbol:  1242634.4 i/s
        inject block:    20114.3 i/s - 61.78x  (± 0.00) slower
      inject to_proc:    17609.8 i/s - 70.56x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     7.082k i/100ms
   Array#map.flatten     4.183k i/100ms
      Array#flat_map     8.657k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     70.276k (± 0.7%) i/s -    354.100k in   5.038955s
   Array#map.flatten     41.943k (± 0.5%) i/s -    213.333k in   5.086355s
      Array#flat_map     89.351k (± 0.6%) i/s -    450.164k in   5.038374s

Comparison:
      Array#flat_map:    89350.7 i/s
Array#map.flatten(1):    70276.5 i/s - 1.27x  (± 0.00) slower
   Array#map.flatten:    41943.2 i/s - 2.13x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    27.566k i/100ms
  Array#reverse_each    28.802k i/100ms
Calculating -------------------------------------
  Array#reverse.each    275.431k (± 0.5%) i/s -      1.378M in   5.004307s
  Array#reverse_each    287.319k (± 0.4%) i/s -      1.440M in   5.012274s

Comparison:
  Array#reverse_each:   287319.2 i/s
  Array#reverse.each:   275431.0 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.257k i/100ms
   Enumerable#detect    82.625k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        202.318k (± 0.4%) i/s -      4.051M in  20.025236s
   Enumerable#detect    829.066k (± 0.7%) i/s -     16.608M in  20.032679s

Comparison:
   Enumerable#detect:   829066.3 i/s
Enumerable#select.first:   202318.3 i/s - 4.10x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       241.648k i/100ms
Enumerable#select.last
                        18.385k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.423M (± 0.6%) i/s -     12.324M in   5.085683s
Enumerable#select.last
                        183.058k (± 0.5%) i/s -    919.250k in   5.021771s

Comparison:
Enumerable#reverse.detect:  2423371.5 i/s
Enumerable#select.last:   183058.2 i/s - 13.24x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         5.030k i/100ms
  Enumerable#sort_by     4.850k i/100ms
     Enumerable#sort     2.417k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         51.060k (± 1.4%) i/s -    256.530k in   5.025004s
  Enumerable#sort_by     48.531k (± 1.4%) i/s -    247.350k in   5.097700s
     Enumerable#sort     24.082k (± 0.6%) i/s -    120.850k in   5.018388s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    51060.3 i/s
  Enumerable#sort_by:    48531.0 i/s - 1.05x  (± 0.00) slower
     Enumerable#sort:    24082.3 i/s - 2.12x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.139k i/100ms
Enumerable#sort_by...first
                         8.514k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    172.204k (± 0.4%) i/s -    874.089k in   5.075969s
Enumerable#sort_by...first
                         86.166k (± 0.9%) i/s -    434.214k in   5.039749s

Comparison:
   Enumerable#min_by:   172203.7 i/s
Enumerable#sort_by...first:    86165.6 i/s - 2.00x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   433.668k i/100ms
            Hash#dup   322.836k i/100ms
Calculating -------------------------------------
              Hash[]      4.040M (± 2.4%) i/s -     20.382M in   5.047925s
            Hash#dup      2.953M (± 1.6%) i/s -     14.850M in   5.030388s

Comparison:
              Hash[]:  4040102.8 i/s
            Hash#dup:  2952871.3 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.395M i/100ms
  Hash#fetch, symbol     1.166M i/100ms
     Hash#[], string     1.230M i/100ms
  Hash#fetch, string   784.713k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.037M (± 0.2%) i/s -     71.157M in   5.069404s
  Hash#fetch, symbol     11.779M (± 0.5%) i/s -     59.449M in   5.047190s
     Hash#[], string     12.309M (± 0.2%) i/s -     62.743M in   5.097397s
  Hash#fetch, string      7.761M (± 0.5%) i/s -     39.236M in   5.055300s

Comparison:
     Hash#[], symbol: 14036602.8 i/s
     Hash#[], string: 12308789.9 i/s - 1.14x  (± 0.00) slower
  Hash#fetch, symbol: 11778888.1 i/s - 1.19x  (± 0.00) slower
  Hash#fetch, string:  7761488.1 i/s - 1.81x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   907.398k i/100ms
             Hash#[]   999.828k i/100ms
          Hash#[] ||   884.860k i/100ms
          Hash#[] &&   388.707k i/100ms
          Hash#fetch   613.957k i/100ms
 Hash#fetch fallback   387.771k i/100ms
Calculating -------------------------------------
            Hash#dig      8.995M (± 0.9%) i/s -     45.370M in   5.044589s
             Hash#[]     10.049M (± 3.6%) i/s -     50.991M in   5.081115s
          Hash#[] ||      9.183M (± 0.3%) i/s -     46.013M in   5.010959s
          Hash#[] &&      4.087M (± 2.9%) i/s -     20.601M in   5.045156s
          Hash#fetch      6.082M (± 1.8%) i/s -     30.698M in   5.048900s
 Hash#fetch fallback      3.887M (± 0.6%) i/s -     19.776M in   5.088226s

Comparison:
             Hash#[]: 10048647.9 i/s
          Hash#[] ||:  9182530.2 i/s - 1.09x  (± 0.00) slower
            Hash#dig:  8994572.2 i/s - 1.12x  (± 0.00) slower
          Hash#fetch:  6081952.7 i/s - 1.65x  (± 0.00) slower
          Hash#[] &&:  4086984.0 i/s - 2.46x  (± 0.00) slower
 Hash#fetch fallback:  3886841.9 i/s - 2.59x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.464M i/100ms
  Hash#fetch + block     1.457M i/100ms
    Hash#fetch + arg     1.092M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.517M (± 2.0%) i/s -     73.214M in   5.045605s
  Hash#fetch + block     14.472M (± 0.9%) i/s -     72.831M in   5.032881s
    Hash#fetch + arg     10.880M (± 0.2%) i/s -     54.588M in   5.017277s

Comparison:
  Hash#fetch + const: 14517138.5 i/s
  Hash#fetch + block: 14472228.9 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 10880020.1 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    28.131k i/100ms
         sort + to_h    12.790k i/100ms
Calculating -------------------------------------
      sort_by + to_h    279.219k (± 0.4%) i/s -      1.407M in   5.037514s
         sort + to_h    127.924k (± 0.6%) i/s -    652.290k in   5.099197s

Comparison:
      sort_by + to_h:   279219.0 i/s
         sort + to_h:   127924.5 i/s - 2.18x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   196.594k i/100ms
       Hash#each_key   190.542k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.906M (± 0.9%) i/s -      9.633M in   5.054658s
       Hash#each_key      1.903M (± 1.0%) i/s -      9.527M in   5.006698s

Comparison:
      Hash#keys.each:  1905948.8 i/s
       Hash#each_key:  1903057.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     4.232k i/100ms
           Hash#key?   943.619k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     42.979k (± 7.4%) i/s -    215.832k in   5.059263s
           Hash#key?      9.424M (± 0.4%) i/s -     47.181M in   5.006780s

Comparison:
           Hash#key?:  9423549.5 i/s
  Hash#keys.include?:    42979.1 i/s - 219.26x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.141k i/100ms
            Hash#[]=    10.211k i/100ms
Calculating -------------------------------------
         Hash#merge!     41.428k (± 0.4%) i/s -    211.191k in   5.097801s
            Hash#[]=    101.476k (± 0.6%) i/s -    510.550k in   5.031456s

Comparison:
            Hash#[]=:   101475.9 i/s
         Hash#merge!:    41428.5 i/s - 2.45x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         5.146k i/100ms
      Hash#merge({})     4.205k i/100ms
 Hash#dup#merge!({})     2.710k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         52.184k (± 0.4%) i/s -    262.446k in   5.029353s
      Hash#merge({})     41.740k (± 0.4%) i/s -    210.250k in   5.037190s
 Hash#dup#merge!({})     27.324k (± 0.3%) i/s -    138.210k in   5.058325s

Comparison:
{}#merge!(Hash) do end:    52183.7 i/s
      Hash#merge({}):    41740.1 i/s - 1.25x  (± 0.00) slower
 Hash#dup#merge!({}):    27323.6 i/s - 1.91x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   406.026k i/100ms
          Hash#merge   371.344k i/100ms
Calculating -------------------------------------
        Hash#**other      4.013M (± 0.4%) i/s -     20.301M in   5.058700s
          Hash#merge      3.711M (± 0.4%) i/s -     18.567M in   5.003996s

Comparison:
        Hash#**other:  4013211.2 i/s
          Hash#merge:  3710526.0 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.711k i/100ms
         Hash#merge!     4.105k i/100ms
Calculating -------------------------------------
          Hash#merge     16.876k (± 0.9%) i/s -     85.550k in   5.069847s
         Hash#merge!     41.201k (± 0.4%) i/s -    209.355k in   5.081395s

Comparison:
         Hash#merge!:    41201.0 i/s
          Hash#merge:    16875.7 i/s - 2.44x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      431.438k i/100ms
Array#each             232.607k i/100ms
Array#each_w/_object   174.002k i/100ms
Hash#select-include     78.229k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.270M (± 0.5%) i/s -     21.572M in   5.051647s
Array#each                2.324M (± 0.8%) i/s -     11.630M in   5.004884s
Array#each_w/_object      1.743M (± 0.4%) i/s -      8.874M in   5.090092s
Hash#select-include     792.082k (± 0.7%) i/s -      3.990M in   5.037167s

Comparison:
Hash#native-slice   :  4270391.4 i/s
Array#each          :  2323945.3 i/s - 1.84x  (± 0.00) slower
Array#each_w/_object:  1743431.5 i/s - 2.45x  (± 0.00) slower
Hash#select-include :   792082.5 i/s - 5.39x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.124k i/100ms
         Hash#value?   855.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     11.061k (± 3.9%) i/s -     56.200k in   5.089795s
         Hash#value?      8.352k (± 0.5%) i/s -     41.895k in   5.016084s

Comparison:
Hash#values.include?:    11061.5 i/s
         Hash#value?:     8352.3 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   657.059k i/100ms
                send   498.546k i/100ms
      method_missing   386.151k i/100ms
Calculating -------------------------------------
                call      6.583M (± 0.2%) i/s -     33.510M in   5.090754s
                send      4.954M (± 0.3%) i/s -     24.927M in   5.031653s
      method_missing      3.830M (± 0.3%) i/s -     19.308M in   5.041344s

Comparison:
                call:  6582549.0 i/s
                send:  4954140.4 i/s - 1.33x  (± 0.00) slower
      method_missing:  3829882.1 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     8.699k i/100ms
      Symbol#to_proc     9.288k i/100ms
Calculating -------------------------------------
               Block     87.438k (± 0.4%) i/s -    443.649k in   5.073931s
      Symbol#to_proc     91.964k (± 0.2%) i/s -    464.400k in   5.049834s

Comparison:
      Symbol#to_proc:    91963.8 i/s
               Block:    87438.1 i/s - 1.05x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   934.550k i/100ms
       block + yield   979.252k i/100ms
        unused block     1.306M i/100ms
               yield     1.173M i/100ms
Calculating -------------------------------------
          block.call      9.349M (± 0.5%) i/s -     47.662M in   5.097994s
       block + yield      9.814M (± 1.0%) i/s -     49.942M in   5.089485s
        unused block     13.074M (± 0.3%) i/s -     66.603M in   5.094443s
               yield     11.658M (± 2.1%) i/s -     58.633M in   5.032098s

Comparison:
        unused block: 13073803.5 i/s
               yield: 11657649.7 i/s - 1.12x  (± 0.00) slower
       block + yield:  9813698.8 i/s - 1.33x  (± 0.00) slower
          block.call:  9349407.1 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   313.387k i/100ms
      range#include?    12.776k i/100ms
       range#member?    12.676k i/100ms
       plain compare   522.717k i/100ms
Calculating -------------------------------------
        range#cover?      3.138M (± 0.6%) i/s -     15.983M in   5.093277s
      range#include?    129.272k (± 0.7%) i/s -    651.576k in   5.040614s
       range#member?    128.737k (± 0.6%) i/s -    646.476k in   5.021881s
       plain compare      5.185M (± 0.7%) i/s -     26.136M in   5.040593s

Comparison:
       plain compare:  5185303.6 i/s
        range#cover?:  3138103.9 i/s - 1.65x  (± 0.00) slower
      range#include?:   129271.9 i/s - 40.11x  (± 0.00) slower
       range#member?:   128736.6 i/s - 40.28x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   931.530k i/100ms
           String#=~   653.963k i/100ms
          Regexp#===   598.689k i/100ms
        String#match   485.793k i/100ms
Calculating -------------------------------------
       String#match?      9.235M (± 0.4%) i/s -     46.576M in   5.043655s
           String#=~      6.526M (± 1.3%) i/s -     32.698M in   5.010916s
          Regexp#===      5.952M (± 0.4%) i/s -     29.934M in   5.028980s
        String#match      4.871M (± 0.5%) i/s -     24.775M in   5.086133s

Comparison:
       String#match?:  9234841.3 i/s
           String#=~:  6526470.1 i/s - 1.41x  (± 0.00) slower
          Regexp#===:  5952490.7 i/s - 1.55x  (± 0.00) slower
        String#match:  4871322.9 i/s - 1.90x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   600.912k i/100ms
      String#casecmp   794.419k i/100ms
Calculating -------------------------------------
String#downcase + ==      5.988M (± 0.4%) i/s -     30.046M in   5.017971s
      String#casecmp      7.932M (± 1.2%) i/s -     39.721M in   5.008755s

Comparison:
      String#casecmp:  7931541.8 i/s
String#downcase + ==:  5987699.5 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   587.090k i/100ms
       String#concat   607.956k i/100ms
       String#append   651.664k i/100ms
         "foo" "bar"     1.181M i/100ms
  "#{'foo'}#{'bar'}"     1.184M i/100ms
Calculating -------------------------------------
            String#+      5.899M (± 0.2%) i/s -     29.942M in   5.075604s
       String#concat      6.030M (± 0.6%) i/s -     30.398M in   5.040935s
       String#append      6.475M (± 0.4%) i/s -     32.583M in   5.032413s
         "foo" "bar"     11.817M (± 0.2%) i/s -     60.231M in   5.096912s
  "#{'foo'}#{'bar'}"     11.812M (± 0.4%) i/s -     59.202M in   5.011936s

Comparison:
         "foo" "bar": 11817250.6 i/s
  "#{'foo'}#{'bar'}": 11812313.1 i/s - same-ish: difference falls within error
       String#append:  6474746.4 i/s - 1.83x  (± 0.00) slower
       String#concat:  6030417.9 i/s - 1.96x  (± 0.00) slower
            String#+:  5899136.6 i/s - 2.00x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@     1.002M i/100ms
          String#dup   575.135k i/100ms
Calculating -------------------------------------
           String#+@     10.022M (± 0.2%) i/s -     50.124M in   5.001464s
          String#dup      5.727M (± 0.7%) i/s -     28.757M in   5.021337s

Comparison:
           String#+@: 10021972.9 i/s
          String#dup:  5727163.4 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   181.153k i/100ms
       String#match?   434.519k i/100ms
    String#end_with?   597.980k i/100ms
Calculating -------------------------------------
           String#=~      1.812M (± 1.0%) i/s -      9.239M in   5.097892s
       String#match?      4.348M (± 0.6%) i/s -     22.160M in   5.097022s
    String#end_with?      5.956M (± 1.2%) i/s -     29.899M in   5.020887s

Comparison:
    String#end_with?:  5955811.6 i/s
       String#match?:  4347900.1 i/s - 1.37x  (± 0.00) slower
           String#=~:  1812489.9 i/s - 3.29x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   108.256k i/100ms
          String#sub   138.227k i/100ms
String#dup["string"]=
                       174.593k i/100ms
Calculating -------------------------------------
         String#gsub      1.088M (± 0.4%) i/s -      5.521M in   5.073360s
          String#sub      1.378M (± 0.6%) i/s -      6.911M in   5.014187s
String#dup["string"]=
                          1.741M (± 0.5%) i/s -      8.730M in   5.013892s

Comparison:
String#dup["string"]=:  1741143.0 i/s
          String#sub:  1378407.6 i/s - 1.26x  (± 0.00) slower
         String#gsub:  1088261.0 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   100.914k i/100ms
           String#tr   351.722k i/100ms
Calculating -------------------------------------
         String#gsub      1.020M (± 0.6%) i/s -      5.147M in   5.047703s
           String#tr      3.528M (± 0.4%) i/s -     17.938M in   5.084585s

Comparison:
           String#tr:  3527934.2 i/s
         String#gsub:  1019630.2 i/s - 3.46x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.146M i/100ms
         With Freeze     1.636M i/100ms
Calculating -------------------------------------
      Without Freeze     11.500M (± 0.4%) i/s -     58.449M in   5.082458s
         With Freeze     16.483M (± 0.4%) i/s -     83.456M in   5.063258s

Comparison:
         With Freeze: 16482856.0 i/s
      Without Freeze: 11500302.3 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.351k i/100ms
      String#squeeze   154.532k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     33.660k (± 0.4%) i/s -    170.901k in   5.077412s
      String#squeeze      1.564M (± 2.9%) i/s -      7.881M in   5.044781s

Comparison:
      String#squeeze:  1563740.3 i/s
 String#gsub/regex+/:    33659.6 i/s - 46.46x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   281.993k i/100ms
       String#match?   791.401k i/100ms
  String#start_with?   860.456k i/100ms
Calculating -------------------------------------
           String#=~      2.840M (± 1.0%) i/s -     14.382M in   5.063589s
       String#match?      7.909M (± 0.6%) i/s -     39.570M in   5.003641s
  String#start_with?      8.594M (± 0.5%) i/s -     43.023M in   5.006079s

Comparison:
  String#start_with?:  8594349.7 i/s
       String#match?:  7908522.6 i/s - 1.09x  (± 0.00) slower
           String#=~:  2840486.6 i/s - 3.03x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   196.483k i/100ms
    String#[0, n] ==    84.303k i/100ms
   String#[RANGE] ==    77.506k i/100ms
   String#[0...n] ==    47.662k i/100ms
Calculating -------------------------------------
  String#start_with?      2.063M (± 0.9%) i/s -     10.414M in   5.047871s
    String#[0, n] ==    848.305k (± 0.8%) i/s -      4.299M in   5.068651s
   String#[RANGE] ==    771.940k (± 0.5%) i/s -      3.875M in   5.020331s
   String#[0...n] ==    466.766k (± 1.0%) i/s -      2.335M in   5.003920s

Comparison:
  String#start_with?:  2063148.7 i/s
    String#[0, n] ==:   848305.4 i/s - 2.43x  (± 0.00) slower
   String#[RANGE] ==:   771939.6 i/s - 2.67x  (± 0.00) slower
   String#[0...n] ==:   466766.4 i/s - 4.42x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   174.799k i/100ms
 String#sub!'string'   126.183k i/100ms
String#gsub!'string'    78.119k i/100ms
  String#[/regexp/]=   146.666k i/100ms
 String#sub!/regexp/   109.272k i/100ms
String#gsub!/regexp/    58.013k i/100ms
Calculating -------------------------------------
  String#['string']=      1.758M (± 0.7%) i/s -      8.915M in   5.070285s
 String#sub!'string'      1.259M (± 0.4%) i/s -      6.309M in   5.010762s
String#gsub!'string'    783.934k (± 1.7%) i/s -      3.984M in   5.083742s
  String#[/regexp/]=      1.474M (± 0.5%) i/s -      7.480M in   5.073452s
 String#sub!/regexp/      1.098M (± 0.3%) i/s -      5.573M in   5.077724s
String#gsub!/regexp/    584.899k (± 2.3%) i/s -      2.959M in   5.061622s

Comparison:
  String#['string']=:  1758311.6 i/s
  String#[/regexp/]=:  1474374.8 i/s - 1.19x  (± 0.00) slower
 String#sub!'string':  1259140.4 i/s - 1.40x  (± 0.00) slower
 String#sub!/regexp/:  1097526.8 i/s - 1.60x  (± 0.00) slower
String#gsub!'string':   783934.2 i/s - 2.24x  (± 0.00) slower
String#gsub!/regexp/:   584898.8 i/s - 3.01x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   134.680k i/100ms
        String#chomp   549.735k i/100ms
String#delete_suffix   599.716k i/100ms
Calculating -------------------------------------
          String#sub      1.355M (± 0.4%) i/s -      6.869M in   5.068553s
        String#chomp      5.509M (± 0.9%) i/s -     28.036M in   5.089727s
String#delete_suffix      6.016M (± 0.9%) i/s -     30.586M in   5.084320s

Comparison:
String#delete_suffix:  6016128.0 i/s
        String#chomp:  5508932.4 i/s - 1.09x  (± 0.00) slower
          String#sub:  1355173.6 i/s - 4.44x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   583.862k i/100ms
          String#sub   141.199k i/100ms
Calculating -------------------------------------
String#delete_prefix      5.884M (± 0.4%) i/s -     29.777M in   5.060736s
          String#sub      1.409M (± 0.6%) i/s -      7.060M in   5.010734s

Comparison:
String#delete_prefix:  5883998.6 i/s
          String#sub:  1409023.1 i/s - 4.18x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   607.257k i/100ms
    String#unpack[0]   443.140k i/100ms
Calculating -------------------------------------
      String#unpack1      6.072M (± 0.4%) i/s -     30.363M in   5.000682s
    String#unpack[0]      4.435M (± 0.6%) i/s -     22.600M in   5.095858s

Comparison:
      String#unpack1:  6071829.9 i/s
    String#unpack[0]:  4435171.3 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    28.527k i/100ms
          Time.parse     9.638k i/100ms
Calculating -------------------------------------
        Time.iso8601    284.610k (± 0.3%) i/s -      1.426M in   5.011631s
          Time.parse     95.670k (± 1.1%) i/s -    481.900k in   5.037739s

Comparison:
        Time.iso8601:   284609.9 i/s
          Time.parse:    95670.4 i/s - 2.97x  (± 0.00) slower

