$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       610.844k i/100ms
Function with splat arguments
                        20.705k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          6.111M (± 0.1%) i/s -     31.153M in   5.097757s
Function with splat arguments
                        199.590k (± 6.9%) i/s -    993.840k in   5.012239s

Comparison:
Function with single Array argument:  6111133.2 i/s
Function with splat arguments:   199590.3 i/s - 30.62x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   931.432k i/100ms
Sequential Assignment
                       936.493k i/100ms
Calculating -------------------------------------
 Parallel Assignment      9.324M (± 0.2%) i/s -     47.503M in   5.094878s
Sequential Assignment
                          9.402M (± 0.3%) i/s -     47.761M in   5.079963s

Comparison:
Sequential Assignment:  9401959.7 i/s
 Parallel Assignment:  9323721.0 i/s - 1.01x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   378.799k i/100ms
       attr_accessor   430.171k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.792M (± 0.3%) i/s -     19.319M in   5.094700s
       attr_accessor      4.261M (± 0.5%) i/s -     21.509M in   5.047824s

Comparison:
       attr_accessor:  4261052.4 i/s
   getter_and_setter:  3791977.8 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    67.767k i/100ms
         respond_to?   549.347k i/100ms
Calculating -------------------------------------
      begin...rescue    685.508k (± 0.9%) i/s -      3.456M in   5.042128s
         respond_to?      5.503M (± 0.4%) i/s -     28.017M in   5.091445s

Comparison:
         respond_to?:  5502778.7 i/s
      begin...rescue:   685508.0 i/s - 8.03x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   236.731k i/100ms
             &method    87.962k i/100ms
Calculating -------------------------------------
              normal      2.367M (± 0.1%) i/s -     11.837M in   5.001664s
             &method    889.134k (± 0.6%) i/s -      4.486M in   5.045614s

Comparison:
              normal:  2366523.3 i/s
             &method:   889133.8 i/s - 2.66x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       184.000  i/100ms
       define_method   235.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.020k (±19.7%) i/s -      9.568k in   5.316213s
       define_method      2.553k (±17.2%) i/s -     11.985k in   5.077902s

Comparison:
       define_method:     2552.6 i/s
module_eval with string:     2019.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   138.782k i/100ms
       Kernel#format   152.039k i/100ms
            String#%   133.210k i/100ms
Calculating -------------------------------------
         Float#round      1.387M (± 0.1%) i/s -      6.939M in   5.001869s
       Kernel#format      1.521M (± 0.4%) i/s -      7.754M in   5.097972s
            String#%      1.341M (± 0.2%) i/s -      6.794M in   5.067732s

Comparison:
       Kernel#format:  1521019.0 i/s
         Float#round:  1387302.0 i/s - 1.10x  (± 0.00) slower
            String#%:  1340587.3 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   684.058k i/100ms
          OpenStruct   356.792k i/100ms
Calculating -------------------------------------
                Hash      6.838M (± 0.4%) i/s -     34.203M in   5.001965s
          OpenStruct      3.566M (± 0.2%) i/s -     17.840M in   5.002125s

Comparison:
                Hash:  6838019.7 i/s
          OpenStruct:  3566417.0 i/s - 1.92x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   865.917k i/100ms
          OpenStruct     8.414k i/100ms
Calculating -------------------------------------
                Hash      9.247M (± 0.5%) i/s -     46.760M in   5.056882s
          OpenStruct     84.841k (± 2.0%) i/s -    429.114k in   5.059976s

Comparison:
                Hash:  9246920.9 i/s
          OpenStruct:    84841.1 i/s - 108.99x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   492.173k i/100ms
  ancestors.include?    98.963k i/100ms
Calculating -------------------------------------
  less than or equal      4.929M (± 0.3%) i/s -     25.101M in   5.092691s
  ancestors.include?    988.585k (± 0.2%) i/s -      4.948M in   5.005307s

Comparison:
  less than or equal:  4928848.5 i/s
  ancestors.include?:   988585.3 i/s - 4.99x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.458  (± 0.0%) i/s -      3.000  in   6.555463s
         Kernel loop      0.178  (± 0.0%) i/s -      1.000  in   5.605483s

Comparison:
          While Loop:        0.5 i/s
         Kernel loop:        0.2 i/s - 2.57x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.255M i/100ms
         Array#first   987.579k i/100ms
Calculating -------------------------------------
           Array#[0]     12.567M (± 0.1%) i/s -     64.008M in   5.093350s
         Array#first      9.878M (± 0.1%) i/s -     50.367M in   5.099115s

Comparison:
           Array#[0]: 12566932.6 i/s
         Array#first:  9877509.9 i/s - 1.27x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.241M i/100ms
          Array#last     1.033M i/100ms
Calculating -------------------------------------
          Array#[-1]     12.408M (± 0.1%) i/s -     63.269M in   5.099085s
          Array#last     10.342M (± 0.2%) i/s -     52.701M in   5.095848s

Comparison:
          Array#[-1]: 12407962.2 i/s
          Array#last: 10341886.8 i/s - 1.20x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    73.630k i/100ms
Calculating -------------------------------------
                find      0.203  (± 0.0%) i/s -      2.000  in   9.832316s
             bsearch    736.374k (± 0.1%) i/s -      3.755M in   5.099490s

Comparison:
             bsearch:   736373.9 i/s
                find:        0.2 i/s - 3620127.52x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    14.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    146.988  (± 2.0%) i/s -    742.000  in   5.050994s
        Array#insert      1.150  (± 0.0%) i/s -      6.000  in   5.216828s

Comparison:
       Array#unshift:      147.0 i/s
        Array#insert:        1.2 i/s - 127.80x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.878M i/100ms
          Array#size     1.899M i/100ms
         Array#count     1.275M i/100ms
Calculating -------------------------------------
        Array#length     18.734M (± 0.7%) i/s -     93.908M in   5.013050s
          Array#size     18.988M (± 0.5%) i/s -     94.967M in   5.001595s
         Array#count     12.749M (± 0.1%) i/s -     63.754M in   5.000597s

Comparison:
          Array#size: 18987928.4 i/s
        Array#length: 18733783.8 i/s - 1.01x  (± 0.00) slower
         Array#count: 12749276.7 i/s - 1.49x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    33.840k i/100ms
        Array#sample   785.256k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    337.388k (± 0.4%) i/s -      1.692M in   5.015071s
        Array#sample      7.854M (± 0.1%) i/s -     40.048M in   5.099239s

Comparison:
        Array#sample:  7853735.8 i/s
 Array#shuffle.first:   337388.3 i/s - 23.28x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    45.526k i/100ms
          Date.parse    23.898k i/100ms
Calculating -------------------------------------
        Date.iso8601    455.705k (± 0.3%) i/s -      2.322M in   5.095076s
          Date.parse    238.890k (± 0.3%) i/s -      1.195M in   5.001934s

Comparison:
        Date.iso8601:   455705.1 i/s
          Date.parse:   238890.1 i/s - 1.91x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    14.120k i/100ms
           Array#map    20.408k i/100ms
Calculating -------------------------------------
   Array#each + push    141.333k (± 0.1%) i/s -    720.120k in   5.095201s
           Array#map    203.757k (± 0.2%) i/s -      1.020M in   5.007952s

Comparison:
           Array#map:   203756.5 i/s
   Array#each + push:   141333.3 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    19.856k i/100ms
               #each    22.888k i/100ms
Calculating -------------------------------------
            For loop    199.131k (± 0.1%) i/s -      1.013M in   5.085389s
               #each    228.897k (± 0.1%) i/s -      1.167M in   5.099618s

Comparison:
               #each:   228897.2 i/s
            For loop:   199130.6 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    24.519k i/100ms
     each_with_index    14.043k i/100ms
Calculating -------------------------------------
          While Loop    245.640k (± 0.1%) i/s -      1.250M in   5.090656s
     each_with_index    139.833k (± 0.2%) i/s -    702.150k in   5.021351s

Comparison:
          While Loop:   245640.3 i/s
     each_with_index:   139833.2 i/s - 1.76x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    71.049k i/100ms
      inject to_proc     1.652k i/100ms
        inject block     1.446k i/100ms
Calculating -------------------------------------
       inject symbol    711.796k (± 0.3%) i/s -      3.623M in   5.090693s
      inject to_proc     16.524k (± 0.1%) i/s -     84.252k in   5.098740s
        inject block     14.460k (± 0.1%) i/s -     72.300k in   5.000079s

Comparison:
       inject symbol:   711796.4 i/s
      inject to_proc:    16524.1 i/s - 43.08x  (± 0.00) slower
        inject block:    14459.8 i/s - 49.23x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     5.528k i/100ms
   Array#map.flatten     3.015k i/100ms
      Array#flat_map     7.140k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     55.120k (± 0.3%) i/s -    276.400k in   5.014557s
   Array#map.flatten     30.143k (± 0.5%) i/s -    150.750k in   5.001294s
      Array#flat_map     71.304k (± 0.5%) i/s -    357.000k in   5.006856s

Comparison:
      Array#flat_map:    71304.0 i/s
Array#map.flatten(1):    55120.1 i/s - 1.29x  (± 0.00) slower
   Array#map.flatten:    30142.9 i/s - 2.37x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    21.539k i/100ms
  Array#reverse_each    22.114k i/100ms
Calculating -------------------------------------
  Array#reverse.each    215.114k (± 0.2%) i/s -      1.077M in   5.006428s
  Array#reverse_each    221.130k (± 0.1%) i/s -      1.106M in   5.000220s

Comparison:
  Array#reverse_each:   221130.4 i/s
  Array#reverse.each:   215113.9 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        14.352k i/100ms
   Enumerable#detect    60.011k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        143.464k (± 0.2%) i/s -      2.870M in  20.007888s
   Enumerable#detect    600.307k (± 0.2%) i/s -     12.062M in  20.093485s

Comparison:
   Enumerable#detect:   600306.7 i/s
Enumerable#select.first:   143464.0 i/s - 4.18x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       173.966k i/100ms
Enumerable#select.last
                        14.375k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.743M (± 0.3%) i/s -      8.872M in   5.089709s
Enumerable#select.last
                        143.096k (± 0.3%) i/s -    718.750k in   5.022893s

Comparison:
Enumerable#reverse.detect:  1743196.5 i/s
Enumerable#select.last:   143096.3 i/s - 12.18x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.834k i/100ms
  Enumerable#sort_by     3.665k i/100ms
     Enumerable#sort     1.874k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         38.012k (± 2.7%) i/s -    191.700k in   5.047369s
  Enumerable#sort_by     36.607k (± 0.6%) i/s -    183.250k in   5.006010s
     Enumerable#sort     18.724k (± 0.5%) i/s -     93.700k in   5.004381s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    38011.6 i/s
  Enumerable#sort_by:    36607.4 i/s - 1.04x  (± 0.00) slower
     Enumerable#sort:    18724.2 i/s - 2.03x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    12.875k i/100ms
Enumerable#sort_by...first
                         6.557k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    128.708k (± 0.1%) i/s -    643.750k in   5.001647s
Enumerable#sort_by...first
                         65.334k (± 0.5%) i/s -    327.850k in   5.018193s

Comparison:
   Enumerable#min_by:   128707.8 i/s
Enumerable#sort_by...first:    65333.7 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   297.424k i/100ms
            Hash#dup   235.709k i/100ms
Calculating -------------------------------------
              Hash[]      2.717M (± 0.7%) i/s -     13.682M in   5.035755s
            Hash#dup      2.334M (± 1.3%) i/s -     11.785M in   5.049983s

Comparison:
              Hash[]:  2716986.9 i/s
            Hash#dup:  2334139.3 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.154M i/100ms
  Hash#fetch, symbol   871.100k i/100ms
     Hash#[], string   838.296k i/100ms
  Hash#fetch, string   598.771k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     11.545M (± 0.2%) i/s -     58.840M in   5.096728s
  Hash#fetch, symbol      8.660M (± 0.4%) i/s -     43.555M in   5.029596s
     Hash#[], string      8.386M (± 0.1%) i/s -     42.753M in   5.097963s
  Hash#fetch, string      5.932M (± 0.3%) i/s -     29.939M in   5.046988s

Comparison:
     Hash#[], symbol: 11544628.1 i/s
  Hash#fetch, symbol:  8659874.6 i/s - 1.33x  (± 0.00) slower
     Hash#[], string:  8386319.6 i/s - 1.38x  (± 0.00) slower
  Hash#fetch, string:  5932012.6 i/s - 1.95x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   700.246k i/100ms
             Hash#[]   761.042k i/100ms
          Hash#[] ||   708.249k i/100ms
          Hash#[] &&   326.486k i/100ms
          Hash#fetch   505.724k i/100ms
 Hash#fetch fallback   310.245k i/100ms
Calculating -------------------------------------
            Hash#dig      6.999M (± 0.5%) i/s -     35.012M in   5.002295s
             Hash#[]      7.618M (± 0.6%) i/s -     38.813M in   5.095407s
          Hash#[] ||      7.058M (± 0.6%) i/s -     35.412M in   5.017656s
          Hash#[] &&      3.261M (± 0.6%) i/s -     16.324M in   5.006544s
          Hash#fetch      5.112M (± 0.4%) i/s -     25.792M in   5.045887s
 Hash#fetch fallback      3.101M (± 0.2%) i/s -     15.512M in   5.002597s

Comparison:
             Hash#[]:  7617516.7 i/s
          Hash#[] ||:  7057809.7 i/s - 1.08x  (± 0.00) slower
            Hash#dig:  6999395.3 i/s - 1.09x  (± 0.00) slower
          Hash#fetch:  5111566.6 i/s - 1.49x  (± 0.00) slower
          Hash#[] &&:  3260707.2 i/s - 2.34x  (± 0.00) slower
 Hash#fetch fallback:  3100858.5 i/s - 2.46x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.103M i/100ms
  Hash#fetch + block     1.128M i/100ms
    Hash#fetch + arg   851.805k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     11.001M (± 0.4%) i/s -     55.131M in   5.011314s
  Hash#fetch + block     11.292M (± 0.1%) i/s -     57.530M in   5.094768s
    Hash#fetch + arg      8.505M (± 0.1%) i/s -     42.590M in   5.007866s

Comparison:
  Hash#fetch + block: 11291997.6 i/s
  Hash#fetch + const: 11001382.3 i/s - 1.03x  (± 0.00) slower
    Hash#fetch + arg:  8504677.7 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    19.768k i/100ms
         sort + to_h     8.423k i/100ms
Calculating -------------------------------------
      sort_by + to_h    197.321k (± 0.4%) i/s -    988.400k in   5.009198s
         sort + to_h     84.006k (± 0.5%) i/s -    421.150k in   5.013457s

Comparison:
      sort_by + to_h:   197320.8 i/s
         sort + to_h:    84006.2 i/s - 2.35x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   150.967k i/100ms
       Hash#each_key   157.633k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.538M (± 0.2%) i/s -      7.699M in   5.007141s
       Hash#each_key      1.582M (± 1.2%) i/s -      8.039M in   5.083563s

Comparison:
       Hash#each_key:  1581639.7 i/s
      Hash#keys.each:  1537670.9 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.966k i/100ms
           Hash#key?   737.679k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     19.588k (± 5.2%) i/s -     98.300k in   5.037228s
           Hash#key?      7.369M (± 0.4%) i/s -     36.884M in   5.005413s

Comparison:
           Hash#key?:  7368914.7 i/s
  Hash#keys.include?:    19587.7 i/s - 376.20x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     2.986k i/100ms
            Hash#[]=     7.381k i/100ms
Calculating -------------------------------------
         Hash#merge!     29.798k (± 0.1%) i/s -    149.300k in   5.010379s
            Hash#[]=     73.554k (± 0.7%) i/s -    369.050k in   5.017650s

Comparison:
            Hash#[]=:    73553.8 i/s
         Hash#merge!:    29798.2 i/s - 2.47x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.734k i/100ms
      Hash#merge({})     2.938k i/100ms
 Hash#dup#merge!({})     2.103k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         37.276k (± 0.2%) i/s -    186.700k in   5.008595s
      Hash#merge({})     29.210k (± 0.2%) i/s -    146.900k in   5.029034s
 Hash#dup#merge!({})     20.952k (± 0.5%) i/s -    105.150k in   5.018727s

Comparison:
{}#merge!(Hash) do end:    37276.0 i/s
      Hash#merge({}):    29210.4 i/s - 1.28x  (± 0.00) slower
 Hash#dup#merge!({}):    20952.1 i/s - 1.78x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   283.249k i/100ms
          Hash#merge   255.358k i/100ms
Calculating -------------------------------------
        Hash#**other      2.820M (± 0.3%) i/s -     14.162M in   5.022887s
          Hash#merge      2.538M (± 0.9%) i/s -     12.768M in   5.030357s

Comparison:
        Hash#**other:  2819614.5 i/s
          Hash#merge:  2538370.5 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.062k i/100ms
         Hash#merge!     2.908k i/100ms
Calculating -------------------------------------
          Hash#merge     10.479k (± 1.3%) i/s -     53.100k in   5.068191s
         Hash#merge!     29.356k (± 0.4%) i/s -    148.308k in   5.052211s

Comparison:
         Hash#merge!:    29355.5 i/s
          Hash#merge:    10479.0 i/s - 2.80x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      316.404k i/100ms
Array#each             170.113k i/100ms
Array#each_w/_object   119.822k i/100ms
Hash#select-include     53.333k i/100ms
Calculating -------------------------------------
Hash#native-slice         3.160M (± 0.5%) i/s -     15.820M in   5.005959s
Array#each                1.702M (± 0.5%) i/s -      8.676M in   5.097069s
Array#each_w/_object      1.188M (± 2.3%) i/s -      5.991M in   5.045272s
Hash#select-include     538.221k (± 1.3%) i/s -      2.720M in   5.054511s

Comparison:
Hash#native-slice   :  3160360.8 i/s
Array#each          :  1702148.0 i/s - 1.86x  (± 0.00) slower
Array#each_w/_object:  1188156.9 i/s - 2.66x  (± 0.00) slower
Hash#select-include :   538220.6 i/s - 5.87x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.759k i/100ms
         Hash#value?     1.729k i/100ms
Calculating -------------------------------------
Hash#values.include?     17.404k (± 5.0%) i/s -     87.950k in   5.070303s
         Hash#value?     17.272k (± 0.4%) i/s -     86.450k in   5.005324s

Comparison:
Hash#values.include?:    17403.8 i/s
         Hash#value?:    17272.0 i/s - same-ish: difference falls within error

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   512.156k i/100ms
                send   344.514k i/100ms
      method_missing   262.740k i/100ms
Calculating -------------------------------------
                call      5.126M (± 0.3%) i/s -     26.120M in   5.096069s
                send      3.424M (± 0.1%) i/s -     17.226M in   5.031072s
      method_missing      2.643M (± 0.3%) i/s -     13.400M in   5.069603s

Comparison:
                call:  5125547.6 i/s
                send:  3423868.3 i/s - 1.50x  (± 0.00) slower
      method_missing:  2643175.6 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     6.980k i/100ms
      Symbol#to_proc     7.861k i/100ms
Calculating -------------------------------------
               Block     69.056k (± 0.7%) i/s -    349.000k in   5.054141s
      Symbol#to_proc     77.359k (± 1.1%) i/s -    393.050k in   5.081449s

Comparison:
      Symbol#to_proc:    77359.4 i/s
               Block:    69055.7 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   772.139k i/100ms
       block + yield   838.196k i/100ms
        unused block     1.029M i/100ms
               yield     1.040M i/100ms
Calculating -------------------------------------
          block.call      7.731M (± 0.4%) i/s -     39.379M in   5.094034s
       block + yield      8.402M (± 0.3%) i/s -     42.748M in   5.087693s
        unused block     10.275M (± 0.1%) i/s -     51.443M in   5.006834s
               yield     10.448M (± 0.5%) i/s -     53.032M in   5.076118s

Comparison:
               yield: 10447547.8 i/s
        unused block: 10274529.3 i/s - 1.02x  (± 0.00) slower
       block + yield:  8402300.2 i/s - 1.24x  (± 0.00) slower
          block.call:  7730543.6 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   244.770k i/100ms
      range#include?     9.086k i/100ms
       range#member?     9.019k i/100ms
       plain compare   361.964k i/100ms
Calculating -------------------------------------
        range#cover?      2.447M (± 0.4%) i/s -     12.238M in   5.001025s
      range#include?     91.755k (± 1.3%) i/s -    463.386k in   5.051048s
       range#member?     91.328k (± 1.6%) i/s -    459.969k in   5.037726s
       plain compare      3.618M (± 0.4%) i/s -     18.098M in   5.002763s

Comparison:
       plain compare:  3617687.4 i/s
        range#cover?:  2447231.3 i/s - 1.48x  (± 0.00) slower
      range#include?:    91755.0 i/s - 39.43x  (± 0.00) slower
       range#member?:    91328.3 i/s - 39.61x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   752.421k i/100ms
           String#=~   493.129k i/100ms
          Regexp#===   432.581k i/100ms
        String#match   331.417k i/100ms
Calculating -------------------------------------
       String#match?      7.520M (± 0.3%) i/s -     37.621M in   5.002568s
           String#=~      4.915M (± 0.1%) i/s -     24.656M in   5.016790s
          Regexp#===      4.324M (± 0.1%) i/s -     21.629M in   5.002589s
        String#match      3.310M (± 0.5%) i/s -     16.571M in   5.006249s

Comparison:
       String#match?:  7520395.6 i/s
           String#=~:  4914788.9 i/s - 1.53x  (± 0.00) slower
          Regexp#===:  4323575.2 i/s - 1.74x  (± 0.00) slower
        String#match:  3310131.9 i/s - 2.27x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   500.772k i/100ms
      String#casecmp   639.768k i/100ms
Calculating -------------------------------------
String#downcase + ==      5.005M (± 0.4%) i/s -     25.039M in   5.003284s
      String#casecmp      6.294M (± 0.5%) i/s -     31.988M in   5.082777s

Comparison:
      String#casecmp:  6293620.4 i/s
String#downcase + ==:  5004518.6 i/s - 1.26x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   457.214k i/100ms
       String#concat   469.000k i/100ms
       String#append   516.285k i/100ms
         "foo" "bar"     1.000M i/100ms
  "#{'foo'}#{'bar'}"   998.420k i/100ms
Calculating -------------------------------------
            String#+      4.590M (± 0.3%) i/s -     23.318M in   5.080677s
       String#concat      4.693M (± 0.5%) i/s -     23.919M in   5.097310s
       String#append      5.161M (± 0.2%) i/s -     25.814M in   5.002008s
         "foo" "bar"      9.977M (± 0.4%) i/s -     50.016M in   5.013433s
  "#{'foo'}#{'bar'}"      9.966M (± 0.7%) i/s -     49.921M in   5.009559s

Comparison:
         "foo" "bar":  9976566.5 i/s
  "#{'foo'}#{'bar'}":  9965620.6 i/s - same-ish: difference falls within error
       String#append:  5160799.4 i/s - 1.93x  (± 0.00) slower
       String#concat:  4692580.6 i/s - 2.13x  (± 0.00) slower
            String#+:  4589564.8 i/s - 2.17x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@   770.737k i/100ms
          String#dup   443.175k i/100ms
Calculating -------------------------------------
           String#+@      7.727M (± 0.2%) i/s -     39.308M in   5.087112s
          String#dup      4.434M (± 0.3%) i/s -     22.602M in   5.097161s

Comparison:
           String#+@:  7726915.8 i/s
          String#dup:  4434260.3 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   145.891k i/100ms
       String#match?   322.746k i/100ms
    String#end_with?   472.341k i/100ms
Calculating -------------------------------------
           String#=~      1.452M (± 0.1%) i/s -      7.295M in   5.023292s
       String#match?      3.233M (± 0.1%) i/s -     16.460M in   5.090519s
    String#end_with?      4.712M (± 0.6%) i/s -     23.617M in   5.012488s

Comparison:
    String#end_with?:  4711793.5 i/s
       String#match?:  3233472.1 i/s - 1.46x  (± 0.00) slower
           String#=~:  1452147.9 i/s - 3.24x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    74.050k i/100ms
          String#sub    95.627k i/100ms
String#dup["string"]=
                       117.105k i/100ms
Calculating -------------------------------------
         String#gsub    740.890k (± 0.2%) i/s -      3.777M in   5.097339s
          String#sub    970.907k (± 0.9%) i/s -      4.877M in   5.023506s
String#dup["string"]=
                          1.182M (± 0.5%) i/s -      5.972M in   5.052784s

Comparison:
String#dup["string"]=:  1182027.9 i/s
          String#sub:   970906.6 i/s - 1.22x  (± 0.00) slower
         String#gsub:   740890.3 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    68.645k i/100ms
           String#tr   282.356k i/100ms
Calculating -------------------------------------
         String#gsub    678.276k (± 0.3%) i/s -      3.432M in   5.060295s
           String#tr      2.818M (± 0.4%) i/s -     14.118M in   5.009416s

Comparison:
           String#tr:  2818306.8 i/s
         String#gsub:   678275.5 i/s - 4.16x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   950.755k i/100ms
         With Freeze     1.438M i/100ms
Calculating -------------------------------------
      Without Freeze      9.513M (± 0.2%) i/s -     48.489M in   5.097343s
         With Freeze     14.373M (± 0.3%) i/s -     71.901M in   5.002451s

Comparison:
         With Freeze: 14373259.5 i/s
      Without Freeze:  9512550.2 i/s - 1.51x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.570k i/100ms
      String#squeeze   133.056k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     25.677k (± 0.2%) i/s -    128.500k in   5.004430s
      String#squeeze      1.321M (± 1.5%) i/s -      6.653M in   5.037495s

Comparison:
      String#squeeze:  1320974.5 i/s
 String#gsub/regex+/:    25677.3 i/s - 51.45x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   211.575k i/100ms
       String#match?   586.191k i/100ms
  String#start_with?   693.706k i/100ms
Calculating -------------------------------------
           String#=~      2.132M (± 0.2%) i/s -     10.790M in   5.061532s
       String#match?      5.854M (± 0.1%) i/s -     29.310M in   5.006984s
  String#start_with?      6.929M (± 0.5%) i/s -     34.685M in   5.005751s

Comparison:
  String#start_with?:  6929263.2 i/s
       String#match?:  5853735.8 i/s - 1.18x  (± 0.00) slower
           String#=~:  2131837.8 i/s - 3.25x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   185.427k i/100ms
    String#[0, n] ==    67.040k i/100ms
   String#[RANGE] ==    60.420k i/100ms
   String#[0...n] ==    34.840k i/100ms
Calculating -------------------------------------
  String#start_with?      1.853M (± 0.4%) i/s -      9.271M in   5.004112s
    String#[0, n] ==    676.761k (± 1.5%) i/s -      3.419M in   5.053260s
   String#[RANGE] ==    605.433k (± 1.3%) i/s -      3.081M in   5.090454s
   String#[0...n] ==    346.714k (± 1.4%) i/s -      1.742M in   5.025297s

Comparison:
  String#start_with?:  1852771.5 i/s
    String#[0, n] ==:   676760.7 i/s - 2.74x  (± 0.00) slower
   String#[RANGE] ==:   605433.0 i/s - 3.06x  (± 0.00) slower
   String#[0...n] ==:   346713.7 i/s - 5.34x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   118.480k i/100ms
 String#sub!'string'    86.724k i/100ms
String#gsub!'string'    55.241k i/100ms
  String#[/regexp/]=   103.636k i/100ms
 String#sub!/regexp/    81.535k i/100ms
String#gsub!/regexp/    43.780k i/100ms
Calculating -------------------------------------
  String#['string']=      1.173M (± 0.1%) i/s -      5.924M in   5.050048s
 String#sub!'string'    871.152k (± 0.6%) i/s -      4.423M in   5.077251s
String#gsub!'string'    548.143k (± 0.5%) i/s -      2.762M in   5.039055s
  String#[/regexp/]=      1.033M (± 0.3%) i/s -      5.182M in   5.016742s
 String#sub!/regexp/    818.969k (± 0.6%) i/s -      4.158M in   5.077618s
String#gsub!/regexp/    439.046k (± 0.7%) i/s -      2.233M in   5.085770s

Comparison:
  String#['string']=:  1173060.0 i/s
  String#[/regexp/]=:  1032909.9 i/s - 1.14x  (± 0.00) slower
 String#sub!'string':   871152.3 i/s - 1.35x  (± 0.00) slower
 String#sub!/regexp/:   818969.2 i/s - 1.43x  (± 0.00) slower
String#gsub!'string':   548142.5 i/s - 2.14x  (± 0.00) slower
String#gsub!/regexp/:   439045.5 i/s - 2.67x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   111.145k i/100ms
        String#chomp   423.860k i/100ms
String#delete_suffix   472.048k i/100ms
Calculating -------------------------------------
          String#sub      1.083M (± 1.4%) i/s -      5.446M in   5.028555s
        String#chomp      4.233M (± 0.2%) i/s -     21.193M in   5.007064s
String#delete_suffix      4.716M (± 0.4%) i/s -     23.602M in   5.005151s

Comparison:
String#delete_suffix:  4715692.3 i/s
        String#chomp:  4232636.2 i/s - 1.11x  (± 0.00) slower
          String#sub:  1083261.5 i/s - 4.35x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   473.869k i/100ms
          String#sub   117.389k i/100ms
Calculating -------------------------------------
String#delete_prefix      4.737M (± 0.2%) i/s -     23.693M in   5.002251s
          String#sub      1.103M (± 3.8%) i/s -      5.517M in   5.007182s

Comparison:
String#delete_prefix:  4736574.5 i/s
          String#sub:  1103415.1 i/s - 4.29x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   462.825k i/100ms
    String#unpack[0]   337.104k i/100ms
Calculating -------------------------------------
      String#unpack1      4.623M (± 0.2%) i/s -     23.141M in   5.005983s
    String#unpack[0]      3.382M (± 0.7%) i/s -     17.192M in   5.083305s

Comparison:
      String#unpack1:  4622729.7 i/s
    String#unpack[0]:  3382289.5 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    21.490k i/100ms
          Time.parse     7.254k i/100ms
Calculating -------------------------------------
        Time.iso8601    214.353k (± 0.5%) i/s -      1.074M in   5.012898s
          Time.parse     72.773k (± 0.2%) i/s -    369.954k in   5.083721s

Comparison:
        Time.iso8601:   214353.4 i/s
          Time.parse:    72772.7 i/s - 2.95x  (± 0.00) slower

