$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       606.374k i/100ms
Function with splat arguments
                         9.891k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          6.065M (± 0.1%) i/s -     30.925M in   5.099251s
Function with splat arguments
                         96.846k (±10.1%) i/s -    484.659k in   5.060648s

Comparison:
Function with single Array argument:  6064634.0 i/s
Function with splat arguments:    96846.1 i/s - 62.62x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.007M i/100ms
Sequential Assignment
                         1.047M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.076M (± 0.1%) i/s -     51.344M in   5.095565s
Sequential Assignment
                         10.459M (± 0.1%) i/s -     52.342M in   5.004611s

Comparison:
Sequential Assignment: 10458823.0 i/s
 Parallel Assignment: 10076306.1 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   380.356k i/100ms
       attr_accessor   422.803k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.805M (± 0.1%) i/s -     19.398M in   5.098692s
       attr_accessor      4.219M (± 0.4%) i/s -     21.140M in   5.010911s

Comparison:
       attr_accessor:  4218894.2 i/s
   getter_and_setter:  3804538.5 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    74.235k i/100ms
         respond_to?   576.668k i/100ms
Calculating -------------------------------------
      begin...rescue    735.762k (± 0.4%) i/s -      3.712M in   5.044833s
         respond_to?      5.795M (± 0.7%) i/s -     29.410M in   5.075398s

Comparison:
         respond_to?:  5794892.2 i/s
      begin...rescue:   735762.3 i/s - 7.88x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   231.754k i/100ms
             &method    90.030k i/100ms
Calculating -------------------------------------
              normal      2.330M (± 0.1%) i/s -     11.819M in   5.072119s
             &method    897.477k (± 0.4%) i/s -      4.502M in   5.015828s

Comparison:
              normal:  2330280.4 i/s
             &method:   897477.4 i/s - 2.60x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       185.000  i/100ms
       define_method   223.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.931k (±21.3%) i/s -      8.510k in   5.081393s
       define_method      2.319k (±24.9%) i/s -      9.589k in   5.045494s

Comparison:
       define_method:     2319.3 i/s
module_eval with string:     1930.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   142.181k i/100ms
       Kernel#format   160.163k i/100ms
            String#%   141.241k i/100ms
Calculating -------------------------------------
         Float#round      1.422M (± 0.1%) i/s -      7.251M in   5.098810s
       Kernel#format      1.602M (± 0.1%) i/s -      8.008M in   5.000067s
            String#%      1.398M (± 0.1%) i/s -      7.062M in   5.053330s

Comparison:
       Kernel#format:  1601609.6 i/s
         Float#round:  1422142.7 i/s - 1.13x  (± 0.00) slower
            String#%:  1397504.9 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   726.150k i/100ms
          OpenStruct   380.512k i/100ms
Calculating -------------------------------------
                Hash      7.259M (± 0.1%) i/s -     36.308M in   5.001504s
          OpenStruct      3.803M (± 0.2%) i/s -     19.026M in   5.002865s

Comparison:
                Hash:  7259321.5 i/s
          OpenStruct:  3802953.1 i/s - 1.91x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   921.910k i/100ms
          OpenStruct     8.487k i/100ms
Calculating -------------------------------------
                Hash     10.003M (± 0.2%) i/s -     50.705M in   5.068902s
          OpenStruct     85.778k (± 2.9%) i/s -    432.837k in   5.050575s

Comparison:
                Hash: 10003196.8 i/s
          OpenStruct:    85777.5 i/s - 116.62x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   481.083k i/100ms
  ancestors.include?    89.713k i/100ms
Calculating -------------------------------------
  less than or equal      4.811M (± 0.1%) i/s -     24.535M in   5.099773s
  ancestors.include?    896.587k (± 0.1%) i/s -      4.486M in   5.003031s

Comparison:
  less than or equal:  4811047.0 i/s
  ancestors.include?:   896586.8 i/s - 5.37x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.602  (± 0.0%) i/s -      4.000  in   6.640307s
         Kernel loop      0.175  (± 0.0%) i/s -      1.000  in   5.707579s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 3.44x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.410M i/100ms
         Array#first     1.246M i/100ms
Calculating -------------------------------------
           Array#[0]     14.097M (± 0.0%) i/s -     71.886M in   5.099234s
         Array#first     12.459M (± 0.0%) i/s -     62.302M in   5.000448s

Comparison:
           Array#[0]: 14097417.4 i/s
         Array#first: 12459345.6 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.279M i/100ms
          Array#last     1.194M i/100ms
Calculating -------------------------------------
          Array#[-1]     12.309M (± 0.0%) i/s -     62.691M in   5.093113s
          Array#last     11.942M (± 0.0%) i/s -     59.714M in   5.000289s

Comparison:
          Array#[-1]: 12308887.6 i/s
          Array#last: 11942021.8 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    70.602k i/100ms
Calculating -------------------------------------
                find      0.204  (± 0.0%) i/s -      2.000  in   9.799833s
             bsearch    705.947k (± 0.0%) i/s -      3.530M in   5.000520s

Comparison:
             bsearch:   705946.8 i/s
                find:        0.2 i/s - 3459078.68x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    14.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    142.681  (± 2.8%) i/s -    714.000  in   5.008147s
        Array#insert      1.351  (± 0.0%) i/s -      7.000  in   5.181545s

Comparison:
       Array#unshift:      142.7 i/s
        Array#insert:        1.4 i/s - 105.59x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.907M i/100ms
          Array#size     1.917M i/100ms
         Array#count     1.404M i/100ms
Calculating -------------------------------------
        Array#length     19.110M (± 0.3%) i/s -     97.239M in   5.088463s
          Array#size     19.165M (± 0.1%) i/s -     95.827M in   5.000115s
         Array#count     14.044M (± 0.1%) i/s -     71.612M in   5.098941s

Comparison:
          Array#size: 19164988.0 i/s
        Array#length: 19109933.4 i/s - same-ish: difference falls within error
         Array#count: 14044497.7 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    34.541k i/100ms
        Array#sample   891.413k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    342.048k (± 0.8%) i/s -      1.727M in   5.049435s
        Array#sample      8.914M (± 0.0%) i/s -     45.462M in   5.099849s

Comparison:
        Array#sample:  8914396.6 i/s
 Array#shuffle.first:   342048.2 i/s - 26.06x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    49.496k i/100ms
          Date.parse    24.631k i/100ms
Calculating -------------------------------------
        Date.iso8601    499.183k (± 0.4%) i/s -      2.524M in   5.056948s
          Date.parse    246.765k (± 0.4%) i/s -      1.256M in   5.090691s

Comparison:
        Date.iso8601:   499183.2 i/s
          Date.parse:   246764.7 i/s - 2.02x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    13.441k i/100ms
           Array#map    18.661k i/100ms
Calculating -------------------------------------
   Array#each + push    134.167k (± 0.3%) i/s -    672.050k in   5.009115s
           Array#map    187.183k (± 0.4%) i/s -    951.711k in   5.084479s

Comparison:
           Array#map:   187182.8 i/s
   Array#each + push:   134166.6 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    23.158k i/100ms
               #each    25.300k i/100ms
Calculating -------------------------------------
            For loop    231.587k (± 0.0%) i/s -      1.181M in   5.099844s
               #each    252.997k (± 0.0%) i/s -      1.265M in   5.000064s

Comparison:
               #each:   252996.8 i/s
            For loop:   231587.1 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    28.607k i/100ms
     each_with_index    14.408k i/100ms
Calculating -------------------------------------
          While Loop    289.263k (± 0.0%) i/s -      1.459M in   5.043708s
     each_with_index    145.914k (± 0.1%) i/s -    734.808k in   5.035887s

Comparison:
          While Loop:   289262.8 i/s
     each_with_index:   145914.5 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    83.000k i/100ms
      inject to_proc     1.536k i/100ms
        inject block     1.544k i/100ms
Calculating -------------------------------------
       inject symbol    831.536k (± 0.0%) i/s -      4.233M in   5.090583s
      inject to_proc     15.375k (± 0.2%) i/s -     78.336k in   5.095060s
        inject block     15.336k (± 0.1%) i/s -     77.200k in   5.033981s

Comparison:
       inject symbol:   831535.5 i/s
      inject to_proc:    15375.0 i/s - 54.08x  (± 0.00) slower
        inject block:    15335.8 i/s - 54.22x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     5.164k i/100ms
   Array#map.flatten     2.793k i/100ms
      Array#flat_map     6.729k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     51.708k (± 0.1%) i/s -    263.364k in   5.093279s
   Array#map.flatten     27.961k (± 0.3%) i/s -    142.443k in   5.094418s
      Array#flat_map     67.187k (± 0.1%) i/s -    336.450k in   5.007634s

Comparison:
      Array#flat_map:    67187.5 i/s
Array#map.flatten(1):    51708.2 i/s - 1.30x  (± 0.00) slower
   Array#map.flatten:    27960.9 i/s - 2.40x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    21.978k i/100ms
  Array#reverse_each    23.043k i/100ms
Calculating -------------------------------------
  Array#reverse.each    219.753k (± 0.2%) i/s -      1.099M in   5.000645s
  Array#reverse_each    230.436k (± 0.0%) i/s -      1.175M in   5.099864s

Comparison:
  Array#reverse_each:   230436.1 i/s
  Array#reverse.each:   219752.7 i/s - 1.05x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        15.384k i/100ms
   Enumerable#detect    61.097k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        153.854k (± 0.3%) i/s -      3.092M in  20.098391s
   Enumerable#detect    611.172k (± 0.1%) i/s -     12.280M in  20.093376s

Comparison:
   Enumerable#detect:   611172.0 i/s
Enumerable#select.first:   153853.9 i/s - 3.97x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       176.793k i/100ms
Enumerable#select.last
                        12.824k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.767M (± 0.2%) i/s -      8.840M in   5.002840s
Enumerable#select.last
                        128.187k (± 0.4%) i/s -    641.200k in   5.002114s

Comparison:
Enumerable#reverse.detect:  1766935.5 i/s
Enumerable#select.last:   128187.4 i/s - 13.78x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.231k i/100ms
  Enumerable#sort_by     3.138k i/100ms
     Enumerable#sort     1.698k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         32.099k (± 0.6%) i/s -    161.550k in   5.033058s
  Enumerable#sort_by     31.281k (± 0.3%) i/s -    156.900k in   5.015794s
     Enumerable#sort     17.001k (± 0.2%) i/s -     86.598k in   5.093694s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    32098.8 i/s
  Enumerable#sort_by:    31281.5 i/s - 1.03x  (± 0.00) slower
     Enumerable#sort:    17001.1 i/s - 1.89x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    13.266k i/100ms
Enumerable#sort_by...first
                         6.268k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    132.681k (± 0.1%) i/s -    676.566k in   5.099206s
Enumerable#sort_by...first
                         62.618k (± 1.0%) i/s -    313.400k in   5.005375s

Comparison:
   Enumerable#min_by:   132680.8 i/s
Enumerable#sort_by...first:    62618.5 i/s - 2.12x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   275.033k i/100ms
            Hash#dup   215.534k i/100ms
Calculating -------------------------------------
              Hash[]      2.641M (± 2.3%) i/s -     13.477M in   5.105395s
            Hash#dup      2.154M (± 1.1%) i/s -     10.777M in   5.004531s

Comparison:
              Hash[]:  2641004.2 i/s
            Hash#dup:  2153635.8 i/s - 1.23x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.309M i/100ms
  Hash#fetch, symbol   991.863k i/100ms
     Hash#[], string     1.056M i/100ms
  Hash#fetch, string   605.061k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     13.080M (± 0.1%) i/s -     65.437M in   5.002702s
  Hash#fetch, symbol     10.410M (± 2.2%) i/s -     52.569M in   5.052553s
     Hash#[], string     10.560M (± 0.0%) i/s -     52.805M in   5.000475s
  Hash#fetch, string      6.047M (± 0.1%) i/s -     30.253M in   5.002846s

Comparison:
     Hash#[], symbol: 13080415.8 i/s
     Hash#[], string: 10559989.4 i/s - 1.24x  (± 0.00) slower
  Hash#fetch, symbol: 10409974.4 i/s - 1.26x  (± 0.00) slower
  Hash#fetch, string:  6047170.8 i/s - 2.16x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   690.137k i/100ms
             Hash#[]   786.592k i/100ms
          Hash#[] ||   711.932k i/100ms
          Hash#[] &&   318.686k i/100ms
          Hash#fetch   481.334k i/100ms
 Hash#fetch fallback   284.897k i/100ms
Calculating -------------------------------------
            Hash#dig      6.897M (± 0.2%) i/s -     34.507M in   5.003312s
             Hash#[]      7.875M (± 0.3%) i/s -     40.116M in   5.094362s
          Hash#[] ||      7.120M (± 0.1%) i/s -     36.309M in   5.099473s
          Hash#[] &&      3.186M (± 0.1%) i/s -     15.934M in   5.001383s
          Hash#fetch      4.819M (± 0.1%) i/s -     24.548M in   5.093924s
 Hash#fetch fallback      2.845M (± 0.1%) i/s -     14.245M in   5.006893s

Comparison:
             Hash#[]:  7874691.1 i/s
          Hash#[] ||:  7120065.3 i/s - 1.11x  (± 0.00) slower
            Hash#dig:  6896825.5 i/s - 1.14x  (± 0.00) slower
          Hash#fetch:  4819090.4 i/s - 1.63x  (± 0.00) slower
          Hash#[] &&:  3185985.2 i/s - 2.47x  (± 0.00) slower
 Hash#fetch fallback:  2845050.6 i/s - 2.77x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.206M i/100ms
  Hash#fetch + block     1.175M i/100ms
    Hash#fetch + arg   830.580k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     12.036M (± 0.1%) i/s -     60.298M in   5.009719s
  Hash#fetch + block     11.756M (± 0.1%) i/s -     59.936M in   5.098183s
    Hash#fetch + arg      8.300M (± 0.1%) i/s -     41.529M in   5.003330s

Comparison:
  Hash#fetch + const: 12036223.1 i/s
  Hash#fetch + block: 11756281.0 i/s - 1.02x  (± 0.00) slower
    Hash#fetch + arg:  8300276.3 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    19.300k i/100ms
         sort + to_h     8.333k i/100ms
Calculating -------------------------------------
      sort_by + to_h    192.863k (± 0.2%) i/s -    965.000k in   5.003586s
         sort + to_h     82.926k (± 0.6%) i/s -    416.650k in   5.024517s

Comparison:
      sort_by + to_h:   192862.7 i/s
         sort + to_h:    82926.1 i/s - 2.33x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   136.422k i/100ms
       Hash#each_key   144.822k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.369M (± 0.2%) i/s -      6.958M in   5.083600s
       Hash#each_key      1.446M (± 0.1%) i/s -      7.241M in   5.007815s

Comparison:
       Hash#each_key:  1445960.7 i/s
      Hash#keys.each:  1368625.8 i/s - 1.06x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   873.000  i/100ms
           Hash#key?   836.365k i/100ms
Calculating -------------------------------------
  Hash#keys.include?      8.551k (± 3.8%) i/s -     42.777k in   5.010555s
           Hash#key?      8.351M (± 0.3%) i/s -     41.818M in   5.007840s

Comparison:
           Hash#key?:  8350639.9 i/s
  Hash#keys.include?:     8550.7 i/s - 976.61x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     2.988k i/100ms
            Hash#[]=     6.873k i/100ms
Calculating -------------------------------------
         Hash#merge!     29.900k (± 0.1%) i/s -    152.388k in   5.096556s
            Hash#[]=     69.231k (± 0.9%) i/s -    350.523k in   5.063503s

Comparison:
            Hash#[]=:    69231.2 i/s
         Hash#merge!:    29900.2 i/s - 2.32x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.720k i/100ms
      Hash#merge({})     3.000k i/100ms
 Hash#dup#merge!({})     2.221k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         37.348k (± 0.1%) i/s -    189.720k in   5.079757s
      Hash#merge({})     29.799k (± 0.1%) i/s -    150.000k in   5.033658s
 Hash#dup#merge!({})     21.781k (± 1.6%) i/s -    111.050k in   5.099860s

Comparison:
{}#merge!(Hash) do end:    37348.3 i/s
      Hash#merge({}):    29799.4 i/s - 1.25x  (± 0.00) slower
 Hash#dup#merge!({}):    21780.7 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   283.189k i/100ms
          Hash#merge   252.379k i/100ms
Calculating -------------------------------------
        Hash#**other      2.830M (± 0.1%) i/s -     14.159M in   5.003669s
          Hash#merge      2.524M (± 0.1%) i/s -     12.619M in   4.999940s

Comparison:
        Hash#**other:  2829815.5 i/s
          Hash#merge:  2523823.0 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.164k i/100ms
         Hash#merge!     2.912k i/100ms
Calculating -------------------------------------
          Hash#merge     11.529k (± 0.7%) i/s -     58.200k in   5.048508s
         Hash#merge!     29.139k (± 0.1%) i/s -    148.512k in   5.096652s

Comparison:
         Hash#merge!:    29139.2 i/s
          Hash#merge:    11528.8 i/s - 2.53x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      314.137k i/100ms
Array#each             165.450k i/100ms
Array#each_w/_object   117.168k i/100ms
Hash#select-include     52.530k i/100ms
Calculating -------------------------------------
Hash#native-slice         3.143M (± 0.4%) i/s -     16.021M in   5.097580s
Array#each                1.650M (± 0.2%) i/s -      8.272M in   5.014533s
Array#each_w/_object      1.177M (± 0.3%) i/s -      5.976M in   5.078029s
Hash#select-include     537.481k (± 0.6%) i/s -      2.732M in   5.082350s

Comparison:
Hash#native-slice   :  3142912.8 i/s
Array#each          :  1649711.6 i/s - 1.91x  (± 0.00) slower
Array#each_w/_object:  1176759.4 i/s - 2.67x  (± 0.00) slower
Hash#select-include :   537480.7 i/s - 5.85x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   893.000  i/100ms
         Hash#value?   747.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      8.809k (± 4.8%) i/s -     44.650k in   5.083269s
         Hash#value?      7.398k (± 0.6%) i/s -     37.350k in   5.049014s

Comparison:
Hash#values.include?:     8808.5 i/s
         Hash#value?:     7397.8 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   529.092k i/100ms
                send   364.451k i/100ms
      method_missing   280.057k i/100ms
Calculating -------------------------------------
                call      5.289M (± 0.1%) i/s -     26.455M in   5.002191s
                send      3.643M (± 0.1%) i/s -     18.223M in   5.001397s
      method_missing      2.797M (± 0.1%) i/s -     14.003M in   5.007067s

Comparison:
                call:  5288606.2 i/s
                send:  3643494.7 i/s - 1.45x  (± 0.00) slower
      method_missing:  2796618.8 i/s - 1.89x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     5.653k i/100ms
      Symbol#to_proc     6.215k i/100ms
Calculating -------------------------------------
               Block     56.440k (± 0.2%) i/s -    282.650k in   5.007962s
      Symbol#to_proc     62.035k (± 0.4%) i/s -    310.750k in   5.009385s

Comparison:
      Symbol#to_proc:    62034.7 i/s
               Block:    56440.3 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   785.101k i/100ms
       block + yield   840.076k i/100ms
        unused block     1.095M i/100ms
               yield     1.100M i/100ms
Calculating -------------------------------------
          block.call      7.906M (± 0.1%) i/s -     40.040M in   5.064715s
       block + yield      8.411M (± 0.0%) i/s -     42.844M in   5.093665s
        unused block     10.964M (± 0.1%) i/s -     55.836M in   5.092621s
               yield     11.002M (± 0.3%) i/s -     55.024M in   5.001436s

Comparison:
               yield: 11001656.5 i/s
        unused block: 10964047.1 i/s - 1.00x  (± 0.00) slower
       block + yield:  8411208.5 i/s - 1.31x  (± 0.00) slower
          block.call:  7905710.7 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   240.007k i/100ms
      range#include?     9.678k i/100ms
       range#member?     9.694k i/100ms
       plain compare   361.007k i/100ms
Calculating -------------------------------------
        range#cover?      2.400M (± 0.1%) i/s -     12.240M in   5.099369s
      range#include?     96.792k (± 0.4%) i/s -    493.578k in   5.099490s
       range#member?     96.852k (± 0.5%) i/s -    484.700k in   5.004670s
       plain compare      3.607M (± 0.3%) i/s -     18.050M in   5.004078s

Comparison:
       plain compare:  3607153.9 i/s
        range#cover?:  2400368.4 i/s - 1.50x  (± 0.00) slower
       range#member?:    96852.3 i/s - 37.24x  (± 0.00) slower
      range#include?:    96791.6 i/s - 37.27x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   764.157k i/100ms
           String#=~   453.054k i/100ms
          Regexp#===   433.103k i/100ms
        String#match   352.150k i/100ms
Calculating -------------------------------------
       String#match?      7.644M (± 0.1%) i/s -     38.972M in   5.098201s
           String#=~      4.552M (± 0.1%) i/s -     23.106M in   5.076368s
          Regexp#===      4.345M (± 0.1%) i/s -     22.088M in   5.083110s
        String#match      3.519M (± 0.3%) i/s -     17.608M in   5.003383s

Comparison:
       String#match?:  7644269.3 i/s
           String#=~:  4551640.5 i/s - 1.68x  (± 0.00) slower
          Regexp#===:  4345428.4 i/s - 1.76x  (± 0.00) slower
        String#match:  3519161.5 i/s - 2.17x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   474.788k i/100ms
      String#casecmp   632.700k i/100ms
Calculating -------------------------------------
String#downcase + ==      4.746M (± 0.1%) i/s -     23.739M in   5.002374s
      String#casecmp      6.323M (± 0.1%) i/s -     31.635M in   5.002783s

Comparison:
      String#casecmp:  6323487.1 i/s
String#downcase + ==:  4745629.5 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   433.484k i/100ms
       String#concat   460.363k i/100ms
       String#append   498.630k i/100ms
         "foo" "bar"   998.865k i/100ms
  "#{'foo'}#{'bar'}"   963.977k i/100ms
Calculating -------------------------------------
            String#+      4.333M (± 0.1%) i/s -     21.674M in   5.002025s
       String#concat      4.600M (± 0.1%) i/s -     23.018M in   5.004392s
       String#append      4.984M (± 0.1%) i/s -     24.932M in   5.002232s
         "foo" "bar"      9.982M (± 0.1%) i/s -     49.943M in   5.003367s
  "#{'foo'}#{'bar'}"      9.628M (± 0.1%) i/s -     48.199M in   5.006120s

Comparison:
         "foo" "bar":  9981934.8 i/s
  "#{'foo'}#{'bar'}":  9627989.4 i/s - 1.04x  (± 0.00) slower
       String#append:  4984076.7 i/s - 2.00x  (± 0.00) slower
       String#concat:  4599592.0 i/s - 2.17x  (± 0.00) slower
            String#+:  4333088.0 i/s - 2.30x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@   832.209k i/100ms
          String#dup   421.069k i/100ms
Calculating -------------------------------------
           String#+@      8.320M (± 0.1%) i/s -     41.610M in   5.001193s
          String#dup      4.200M (± 0.9%) i/s -     21.053M in   5.012978s

Comparison:
           String#+@:  8320121.0 i/s
          String#dup:  4200172.2 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   145.306k i/100ms
       String#match?   324.744k i/100ms
    String#end_with?   459.726k i/100ms
Calculating -------------------------------------
           String#=~      1.452M (± 0.1%) i/s -      7.265M in   5.004574s
       String#match?      3.247M (± 0.0%) i/s -     16.237M in   5.000759s
    String#end_with?      4.589M (± 0.4%) i/s -     22.986M in   5.009016s

Comparison:
    String#end_with?:  4589063.8 i/s
       String#match?:  3246947.5 i/s - 1.41x  (± 0.00) slower
           String#=~:  1451734.6 i/s - 3.16x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    84.730k i/100ms
          String#sub   104.862k i/100ms
String#dup["string"]=
                       144.061k i/100ms
Calculating -------------------------------------
         String#gsub    848.491k (± 0.6%) i/s -      4.321M in   5.093028s
          String#sub      1.053M (± 0.6%) i/s -      5.348M in   5.077403s
String#dup["string"]=
                          1.460M (± 0.2%) i/s -      7.347M in   5.032929s

Comparison:
String#dup["string"]=:  1459815.0 i/s
          String#sub:  1053322.7 i/s - 1.39x  (± 0.00) slower
         String#gsub:   848490.5 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    74.393k i/100ms
           String#tr   280.985k i/100ms
Calculating -------------------------------------
         String#gsub    736.769k (± 0.6%) i/s -      3.720M in   5.048792s
           String#tr      2.807M (± 0.1%) i/s -     14.049M in   5.004752s

Comparison:
           String#tr:  2807184.3 i/s
         String#gsub:   736769.4 i/s - 3.81x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   950.134k i/100ms
         With Freeze     1.581M i/100ms
Calculating -------------------------------------
      Without Freeze      9.495M (± 0.1%) i/s -     47.507M in   5.003166s
         With Freeze     15.810M (± 0.0%) i/s -     80.606M in   5.098439s

Comparison:
         With Freeze: 15809852.3 i/s
      Without Freeze:  9495334.3 i/s - 1.67x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.611k i/100ms
      String#squeeze   111.246k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     26.098k (± 0.2%) i/s -    130.550k in   5.002292s
      String#squeeze      1.103M (± 3.5%) i/s -      5.562M in   5.050488s

Comparison:
      String#squeeze:  1102851.2 i/s
 String#gsub/regex+/:    26098.1 i/s - 42.26x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   218.216k i/100ms
       String#match?   574.385k i/100ms
  String#start_with?   676.448k i/100ms
Calculating -------------------------------------
           String#=~      2.163M (± 0.1%) i/s -     10.911M in   5.044826s
       String#match?      5.745M (± 0.1%) i/s -     29.294M in   5.098722s
  String#start_with?      6.761M (± 0.1%) i/s -     33.822M in   5.002898s

Comparison:
  String#start_with?:  6760563.7 i/s
       String#match?:  5745299.9 i/s - 1.18x  (± 0.00) slower
           String#=~:  2162774.6 i/s - 3.13x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   160.633k i/100ms
    String#[0, n] ==    58.283k i/100ms
   String#[RANGE] ==    53.794k i/100ms
   String#[0...n] ==    34.474k i/100ms
Calculating -------------------------------------
  String#start_with?      1.605M (± 0.2%) i/s -      8.032M in   5.005115s
    String#[0, n] ==    581.589k (± 0.3%) i/s -      2.914M in   5.010728s
   String#[RANGE] ==    537.679k (± 0.2%) i/s -      2.690M in   5.002448s
   String#[0...n] ==    344.063k (± 0.1%) i/s -      1.724M in   5.009854s

Comparison:
  String#start_with?:  1604696.7 i/s
    String#[0, n] ==:   581588.9 i/s - 2.76x  (± 0.00) slower
   String#[RANGE] ==:   537678.6 i/s - 2.98x  (± 0.00) slower
   String#[0...n] ==:   344062.6 i/s - 4.66x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   138.565k i/100ms
 String#sub!'string'    99.189k i/100ms
String#gsub!'string'    60.625k i/100ms
  String#[/regexp/]=   118.606k i/100ms
 String#sub!/regexp/    97.113k i/100ms
String#gsub!/regexp/    48.732k i/100ms
Calculating -------------------------------------
  String#['string']=      1.383M (± 0.3%) i/s -      6.928M in   5.008581s
 String#sub!'string'    997.932k (± 0.6%) i/s -      5.059M in   5.069300s
String#gsub!'string'    605.029k (± 0.2%) i/s -      3.031M in   5.010106s
  String#[/regexp/]=      1.219M (± 1.1%) i/s -      6.168M in   5.061784s
 String#sub!/regexp/    954.979k (± 1.1%) i/s -      4.856M in   5.085149s
String#gsub!/regexp/    493.760k (± 0.6%) i/s -      2.485M in   5.033675s

Comparison:
  String#['string']=:  1383291.3 i/s
  String#[/regexp/]=:  1218597.0 i/s - 1.14x  (± 0.00) slower
 String#sub!'string':   997932.1 i/s - 1.39x  (± 0.00) slower
 String#sub!/regexp/:   954978.9 i/s - 1.45x  (± 0.00) slower
String#gsub!'string':   605029.1 i/s - 2.29x  (± 0.00) slower
String#gsub!/regexp/:   493760.4 i/s - 2.80x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   119.727k i/100ms
        String#chomp   401.359k i/100ms
String#delete_suffix   451.349k i/100ms
Calculating -------------------------------------
          String#sub      1.204M (± 0.4%) i/s -      6.106M in   5.071828s
        String#chomp      4.010M (± 0.0%) i/s -     20.068M in   5.004536s
String#delete_suffix      4.510M (± 0.1%) i/s -     22.567M in   5.003695s

Comparison:
String#delete_suffix:  4510159.3 i/s
        String#chomp:  4009953.5 i/s - 1.12x  (± 0.00) slower
          String#sub:  1203940.7 i/s - 3.75x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   462.714k i/100ms
          String#sub   121.877k i/100ms
Calculating -------------------------------------
String#delete_prefix      4.625M (± 0.1%) i/s -     23.136M in   5.001858s
          String#sub      1.209M (± 0.2%) i/s -      6.094M in   5.042184s

Comparison:
String#delete_prefix:  4625422.9 i/s
          String#sub:  1208579.1 i/s - 3.83x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   447.207k i/100ms
    String#unpack[0]   345.200k i/100ms
Calculating -------------------------------------
      String#unpack1      4.469M (± 0.1%) i/s -     22.360M in   5.003061s
    String#unpack[0]      3.443M (± 0.1%) i/s -     17.260M in   5.012886s

Comparison:
      String#unpack1:  4469335.2 i/s
    String#unpack[0]:  3443130.4 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    22.123k i/100ms
          Time.parse     7.272k i/100ms
Calculating -------------------------------------
        Time.iso8601    220.536k (± 0.6%) i/s -      1.106M in   5.015931s
          Time.parse     73.059k (± 0.3%) i/s -    370.872k in   5.076372s

Comparison:
        Time.iso8601:   220536.1 i/s
          Time.parse:    73059.2 i/s - 3.02x  (± 0.00) slower

