$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       613.882k i/100ms
Function with splat arguments
                        16.673k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          6.144M (± 0.1%) i/s -     31.308M in   5.095386s
Function with splat arguments
                        168.586k (± 7.0%) i/s -    850.323k in   5.074762s

Comparison:
Function with single Array argument:  6144388.8 i/s
Function with splat arguments:   168585.9 i/s - 36.45x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   914.046k i/100ms
Sequential Assignment
                       917.538k i/100ms
Calculating -------------------------------------
 Parallel Assignment      9.137M (± 0.2%) i/s -     45.702M in   5.001683s
Sequential Assignment
                          9.142M (± 0.2%) i/s -     45.877M in   5.018338s

Comparison:
Sequential Assignment:  9141888.4 i/s
 Parallel Assignment:  9137427.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   362.800k i/100ms
       attr_accessor   418.959k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.698M (± 0.4%) i/s -     18.503M in   5.003038s
       attr_accessor      4.220M (± 0.3%) i/s -     21.367M in   5.062815s

Comparison:
       attr_accessor:  4220407.8 i/s
   getter_and_setter:  3698364.3 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    73.298k i/100ms
         respond_to?   576.544k i/100ms
Calculating -------------------------------------
      begin...rescue    736.557k (± 1.1%) i/s -      3.738M in   5.075852s
         respond_to?      5.747M (± 0.4%) i/s -     28.827M in   5.016322s

Comparison:
         respond_to?:  5746774.8 i/s
      begin...rescue:   736556.9 i/s - 7.80x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   238.893k i/100ms
             &method    88.199k i/100ms
Calculating -------------------------------------
              normal      2.387M (± 0.1%) i/s -     11.945M in   5.003535s
             &method    883.616k (± 0.2%) i/s -      4.498M in   5.090643s

Comparison:
              normal:  2387243.7 i/s
             &method:   883616.0 i/s - 2.70x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       184.000  i/100ms
       define_method   238.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.026k (±19.3%) i/s -      9.752k in   5.426387s
       define_method      2.579k (±17.9%) i/s -     11.900k in   5.003792s

Comparison:
       define_method:     2579.4 i/s
module_eval with string:     2026.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   138.265k i/100ms
       Kernel#format   153.449k i/100ms
            String#%   134.457k i/100ms
Calculating -------------------------------------
         Float#round      1.386M (± 0.1%) i/s -      7.052M in   5.087725s
       Kernel#format      1.531M (± 0.3%) i/s -      7.672M in   5.010888s
            String#%      1.352M (± 0.3%) i/s -      6.857M in   5.073733s

Comparison:
       Kernel#format:  1531168.8 i/s
         Float#round:  1385986.9 i/s - 1.10x  (± 0.00) slower
            String#%:  1351545.2 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   685.077k i/100ms
          OpenStruct   359.563k i/100ms
Calculating -------------------------------------
                Hash      6.834M (± 0.1%) i/s -     34.254M in   5.012455s
          OpenStruct      3.593M (± 0.1%) i/s -     17.978M in   5.003462s

Comparison:
                Hash:  6833756.8 i/s
          OpenStruct:  3593146.3 i/s - 1.90x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   876.067k i/100ms
          OpenStruct     8.649k i/100ms
Calculating -------------------------------------
                Hash      9.389M (± 0.2%) i/s -     47.308M in   5.038785s
          OpenStruct     86.055k (± 3.2%) i/s -    432.450k in   5.030773s

Comparison:
                Hash:  9388731.1 i/s
          OpenStruct:    86055.5 i/s - 109.10x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   462.743k i/100ms
  ancestors.include?    96.256k i/100ms
Calculating -------------------------------------
  less than or equal      4.621M (± 0.2%) i/s -     23.137M in   5.006818s
  ancestors.include?    962.527k (± 0.4%) i/s -      4.813M in   5.000267s

Comparison:
  less than or equal:  4621145.3 i/s
  ancestors.include?:   962526.6 i/s - 4.80x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.461  (± 0.0%) i/s -      3.000  in   6.505520s
         Kernel loop      0.178  (± 0.0%) i/s -      1.000  in   5.606715s

Comparison:
          While Loop:        0.5 i/s
         Kernel loop:        0.2 i/s - 2.59x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.289M i/100ms
         Array#first     1.062M i/100ms
Calculating -------------------------------------
           Array#[0]     12.905M (± 0.1%) i/s -     65.742M in   5.094389s
         Array#first     10.623M (± 0.1%) i/s -     54.145M in   5.097113s

Comparison:
           Array#[0]: 12904862.7 i/s
         Array#first: 10622765.8 i/s - 1.21x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.295M i/100ms
          Array#last     1.044M i/100ms
Calculating -------------------------------------
          Array#[-1]     12.931M (± 0.2%) i/s -     64.744M in   5.006986s
          Array#last     10.434M (± 0.1%) i/s -     52.214M in   5.004154s

Comparison:
          Array#[-1]: 12930770.7 i/s
          Array#last: 10434117.9 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    74.067k i/100ms
Calculating -------------------------------------
                find      0.202  (± 0.0%) i/s -      2.000  in   9.892000s
             bsearch    740.454k (± 0.1%) i/s -      3.703M in   5.001457s

Comparison:
             bsearch:   740454.5 i/s
                find:        0.2 i/s - 3662287.61x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    14.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    144.157  (± 2.8%) i/s -    728.000  in   5.053466s
        Array#insert      1.150  (± 0.0%) i/s -      6.000  in   5.218923s

Comparison:
       Array#unshift:      144.2 i/s
        Array#insert:        1.1 i/s - 125.39x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.755M i/100ms
          Array#size     1.912M i/100ms
         Array#count     1.342M i/100ms
Calculating -------------------------------------
        Array#length     18.267M (± 0.6%) i/s -     92.995M in   5.091128s
          Array#size     19.108M (± 0.6%) i/s -     95.609M in   5.003718s
         Array#count     13.413M (± 0.2%) i/s -     67.122M in   5.004346s

Comparison:
          Array#size: 19108209.2 i/s
        Array#length: 18266694.3 i/s - 1.05x  (± 0.00) slower
         Array#count: 13412708.5 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    33.865k i/100ms
        Array#sample   826.232k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    334.733k (± 0.3%) i/s -      1.693M in   5.058547s
        Array#sample      8.256M (± 0.1%) i/s -     41.312M in   5.003970s

Comparison:
        Array#sample:  8255771.7 i/s
 Array#shuffle.first:   334732.8 i/s - 24.66x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    47.562k i/100ms
          Date.parse    24.090k i/100ms
Calculating -------------------------------------
        Date.iso8601    475.951k (± 0.3%) i/s -      2.426M in   5.096498s
          Date.parse    243.903k (± 0.3%) i/s -      1.229M in   5.037269s

Comparison:
        Date.iso8601:   475951.0 i/s
          Date.parse:   243902.6 i/s - 1.95x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    14.301k i/100ms
           Array#map    20.201k i/100ms
Calculating -------------------------------------
   Array#each + push    143.543k (± 0.4%) i/s -    729.351k in   5.081143s
           Array#map    201.992k (± 0.2%) i/s -      1.010M in   5.000468s

Comparison:
           Array#map:   201992.2 i/s
   Array#each + push:   143542.5 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    22.054k i/100ms
               #each    24.426k i/100ms
Calculating -------------------------------------
            For loop    220.663k (± 0.1%) i/s -      1.125M in   5.097162s
               #each    244.120k (± 0.1%) i/s -      1.221M in   5.002873s

Comparison:
               #each:   244119.9 i/s
            For loop:   220663.1 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    24.654k i/100ms
     each_with_index    14.378k i/100ms
Calculating -------------------------------------
          While Loop    246.531k (± 0.2%) i/s -      1.233M in   5.000202s
     each_with_index    143.979k (± 0.1%) i/s -    733.278k in   5.092974s

Comparison:
          While Loop:   246531.0 i/s
     each_with_index:   143978.5 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    71.570k i/100ms
      inject to_proc     1.682k i/100ms
        inject block     1.495k i/100ms
Calculating -------------------------------------
       inject symbol    717.957k (± 0.0%) i/s -      3.650M in   5.083968s
      inject to_proc     16.858k (± 0.2%) i/s -     85.782k in   5.088518s
        inject block     15.539k (± 0.3%) i/s -     77.740k in   5.002862s

Comparison:
       inject symbol:   717957.1 i/s
      inject to_proc:    16858.0 i/s - 42.59x  (± 0.00) slower
        inject block:    15539.2 i/s - 46.20x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     5.522k i/100ms
   Array#map.flatten     3.002k i/100ms
      Array#flat_map     7.062k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     57.652k (± 1.2%) i/s -    292.666k in   5.077156s
   Array#map.flatten     30.825k (± 0.6%) i/s -    156.104k in   5.064457s
      Array#flat_map     75.127k (± 0.3%) i/s -    381.348k in   5.076081s

Comparison:
      Array#flat_map:    75127.0 i/s
Array#map.flatten(1):    57652.5 i/s - 1.30x  (± 0.00) slower
   Array#map.flatten:    30824.6 i/s - 2.44x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    23.361k i/100ms
  Array#reverse_each    24.335k i/100ms
Calculating -------------------------------------
  Array#reverse.each    234.501k (± 0.6%) i/s -      1.191M in   5.080817s
  Array#reverse_each    243.333k (± 0.1%) i/s -      1.217M in   5.000345s

Comparison:
  Array#reverse_each:   243333.4 i/s
  Array#reverse.each:   234501.0 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        15.496k i/100ms
   Enumerable#detect    62.166k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        154.822k (± 0.5%) i/s -      3.099M in  20.018496s
   Enumerable#detect    626.481k (± 0.1%) i/s -     12.558M in  20.044569s

Comparison:
   Enumerable#detect:   626481.3 i/s
Enumerable#select.first:   154821.6 i/s - 4.05x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       181.850k i/100ms
Enumerable#select.last
                        14.492k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.785M (± 0.6%) i/s -      9.092M in   5.094791s
Enumerable#select.last
                        145.241k (± 0.6%) i/s -    739.092k in   5.088907s

Comparison:
Enumerable#reverse.detect:  1784722.9 i/s
Enumerable#select.last:   145241.1 i/s - 12.29x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.803k i/100ms
  Enumerable#sort_by     3.619k i/100ms
     Enumerable#sort     1.774k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         38.119k (± 0.3%) i/s -    193.953k in   5.088099s
  Enumerable#sort_by     36.583k (± 0.4%) i/s -    184.569k in   5.045296s
     Enumerable#sort     17.739k (± 0.2%) i/s -     88.700k in   5.000159s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    38119.4 i/s
  Enumerable#sort_by:    36582.9 i/s - 1.04x  (± 0.00) slower
     Enumerable#sort:    17739.5 i/s - 2.15x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    13.194k i/100ms
Enumerable#sort_by...first
                         6.404k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    131.959k (± 0.1%) i/s -    672.894k in   5.099275s
Enumerable#sort_by...first
                         64.996k (± 1.8%) i/s -    326.604k in   5.026715s

Comparison:
   Enumerable#min_by:   131958.8 i/s
Enumerable#sort_by...first:    64995.7 i/s - 2.03x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   278.792k i/100ms
            Hash#dup   235.425k i/100ms
Calculating -------------------------------------
              Hash[]      2.777M (± 3.4%) i/s -     13.940M in   5.025437s
            Hash#dup      2.202M (± 4.2%) i/s -     11.065M in   5.035432s

Comparison:
              Hash[]:  2777114.1 i/s
            Hash#dup:  2201664.6 i/s - 1.26x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.070M i/100ms
  Hash#fetch, symbol   962.496k i/100ms
     Hash#[], string   962.735k i/100ms
  Hash#fetch, string   574.564k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     10.696M (± 0.1%) i/s -     54.546M in   5.099707s
  Hash#fetch, symbol      9.602M (± 0.0%) i/s -     48.125M in   5.012209s
     Hash#[], string      9.615M (± 0.1%) i/s -     48.137M in   5.006483s
  Hash#fetch, string      5.736M (± 0.3%) i/s -     28.728M in   5.008226s

Comparison:
     Hash#[], symbol: 10696013.7 i/s
     Hash#[], string:  9614894.6 i/s - 1.11x  (± 0.00) slower
  Hash#fetch, symbol:  9601518.0 i/s - 1.11x  (± 0.00) slower
  Hash#fetch, string:  5736250.7 i/s - 1.86x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   731.451k i/100ms
             Hash#[]   774.350k i/100ms
          Hash#[] ||   642.678k i/100ms
          Hash#[] &&   326.875k i/100ms
          Hash#fetch   501.694k i/100ms
 Hash#fetch fallback   305.199k i/100ms
Calculating -------------------------------------
            Hash#dig      7.309M (± 0.4%) i/s -     36.573M in   5.003863s
             Hash#[]      7.756M (± 0.7%) i/s -     39.492M in   5.091876s
          Hash#[] ||      6.419M (± 0.5%) i/s -     32.134M in   5.006289s
          Hash#[] &&      3.254M (± 0.5%) i/s -     16.344M in   5.022954s
          Hash#fetch      5.001M (± 0.5%) i/s -     25.085M in   5.016245s
 Hash#fetch fallback      3.056M (± 0.3%) i/s -     15.565M in   5.094009s

Comparison:
             Hash#[]:  7756270.6 i/s
            Hash#dig:  7309007.5 i/s - 1.06x  (± 0.00) slower
          Hash#[] ||:  6418893.4 i/s - 1.21x  (± 0.00) slower
          Hash#fetch:  5000807.8 i/s - 1.55x  (± 0.00) slower
          Hash#[] &&:  3253879.7 i/s - 2.38x  (± 0.00) slower
 Hash#fetch fallback:  3055612.9 i/s - 2.54x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.099M i/100ms
  Hash#fetch + block     1.152M i/100ms
    Hash#fetch + arg   851.494k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     10.994M (± 0.1%) i/s -     56.059M in   5.098911s
  Hash#fetch + block     11.530M (± 0.1%) i/s -     58.742M in   5.094878s
    Hash#fetch + arg      8.514M (± 0.2%) i/s -     42.575M in   5.000301s

Comparison:
  Hash#fetch + block: 11529699.8 i/s
  Hash#fetch + const: 10994239.2 i/s - 1.05x  (± 0.00) slower
    Hash#fetch + arg:  8514466.9 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    20.304k i/100ms
         sort + to_h     8.474k i/100ms
Calculating -------------------------------------
      sort_by + to_h    203.115k (± 0.9%) i/s -      1.036M in   5.098553s
         sort + to_h     84.827k (± 0.3%) i/s -    432.174k in   5.094799s

Comparison:
      sort_by + to_h:   203114.8 i/s
         sort + to_h:    84827.3 i/s - 2.39x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   151.736k i/100ms
       Hash#each_key   159.478k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.511M (± 0.2%) i/s -      7.587M in   5.021135s
       Hash#each_key      1.593M (± 1.0%) i/s -      7.974M in   5.005174s

Comparison:
       Hash#each_key:  1593288.2 i/s
      Hash#keys.each:  1510978.9 i/s - 1.05x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.007k i/100ms
           Hash#key?   784.723k i/100ms
Calculating -------------------------------------
  Hash#keys.include?      9.752k (± 4.8%) i/s -     49.343k in   5.072301s
           Hash#key?      7.859M (± 0.2%) i/s -     40.021M in   5.092302s

Comparison:
           Hash#key?:  7859138.1 i/s
  Hash#keys.include?:     9752.1 i/s - 805.89x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.055k i/100ms
            Hash#[]=     7.350k i/100ms
Calculating -------------------------------------
         Hash#merge!     30.517k (± 0.3%) i/s -    152.750k in   5.005403s
            Hash#[]=     73.494k (± 0.9%) i/s -    367.500k in   5.000817s

Comparison:
            Hash#[]=:    73493.9 i/s
         Hash#merge!:    30517.3 i/s - 2.41x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.758k i/100ms
      Hash#merge({})     2.976k i/100ms
 Hash#dup#merge!({})     2.149k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         37.484k (± 0.2%) i/s -    187.900k in   5.012842s
      Hash#merge({})     29.423k (± 0.2%) i/s -    148.800k in   5.057219s
 Hash#dup#merge!({})     21.424k (± 0.1%) i/s -    107.450k in   5.015444s

Comparison:
{}#merge!(Hash) do end:    37484.0 i/s
      Hash#merge({}):    29423.4 i/s - 1.27x  (± 0.00) slower
 Hash#dup#merge!({}):    21423.9 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   275.154k i/100ms
          Hash#merge   258.174k i/100ms
Calculating -------------------------------------
        Hash#**other      2.789M (± 1.1%) i/s -     14.033M in   5.032522s
          Hash#merge      2.506M (± 0.8%) i/s -     12.651M in   5.048103s

Comparison:
        Hash#**other:  2788785.6 i/s
          Hash#merge:  2506169.7 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.224k i/100ms
         Hash#merge!     2.995k i/100ms
Calculating -------------------------------------
          Hash#merge     11.167k (± 5.6%) i/s -     56.304k in   5.059707s
         Hash#merge!     30.171k (± 0.6%) i/s -    152.745k in   5.062789s

Comparison:
         Hash#merge!:    30171.3 i/s
          Hash#merge:    11167.0 i/s - 2.70x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      317.440k i/100ms
Array#each             171.814k i/100ms
Array#each_w/_object   121.899k i/100ms
Hash#select-include     57.464k i/100ms
Calculating -------------------------------------
Hash#native-slice         3.183M (± 0.2%) i/s -     16.189M in   5.085989s
Array#each                1.706M (± 0.1%) i/s -      8.591M in   5.035488s
Array#each_w/_object      1.219M (± 0.3%) i/s -      6.217M in   5.098245s
Hash#select-include     537.072k (± 2.8%) i/s -      2.701M in   5.032477s

Comparison:
Hash#native-slice   :  3183156.6 i/s
Array#each          :  1706033.1 i/s - 1.87x  (± 0.00) slower
Array#each_w/_object:  1219418.7 i/s - 2.61x  (± 0.00) slower
Hash#select-include :   537071.9 i/s - 5.93x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   951.000  i/100ms
         Hash#value?   839.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      9.408k (± 4.2%) i/s -     47.550k in   5.064711s
         Hash#value?      8.407k (± 0.3%) i/s -     42.789k in   5.089738s

Comparison:
Hash#values.include?:     9408.2 i/s
         Hash#value?:     8407.0 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   544.744k i/100ms
                send   341.206k i/100ms
      method_missing   267.745k i/100ms
Calculating -------------------------------------
                call      5.453M (± 0.1%) i/s -     27.782M in   5.095050s
                send      3.376M (± 0.2%) i/s -     17.060M in   5.053848s
      method_missing      2.653M (± 0.1%) i/s -     13.387M in   5.046578s

Comparison:
                call:  5452743.8 i/s
                send:  3375719.7 i/s - 1.62x  (± 0.00) slower
      method_missing:  2652740.2 i/s - 2.06x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     6.767k i/100ms
      Symbol#to_proc     7.779k i/100ms
Calculating -------------------------------------
               Block     67.838k (± 0.6%) i/s -    345.117k in   5.087547s
      Symbol#to_proc     77.660k (± 0.9%) i/s -    388.950k in   5.008752s

Comparison:
      Symbol#to_proc:    77660.1 i/s
               Block:    67838.4 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   783.456k i/100ms
       block + yield   812.710k i/100ms
        unused block     1.066M i/100ms
               yield   983.402k i/100ms
Calculating -------------------------------------
          block.call      7.821M (± 0.1%) i/s -     39.173M in   5.008430s
       block + yield      8.114M (± 0.2%) i/s -     40.636M in   5.007869s
        unused block     10.671M (± 0.2%) i/s -     54.390M in   5.097174s
               yield      9.834M (± 0.1%) i/s -     49.170M in   5.000242s

Comparison:
        unused block: 10670587.7 i/s
               yield:  9833561.3 i/s - 1.09x  (± 0.00) slower
       block + yield:  8114367.7 i/s - 1.32x  (± 0.00) slower
          block.call:  7821386.7 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   244.839k i/100ms
      range#include?     9.041k i/100ms
       range#member?     8.827k i/100ms
       plain compare   360.217k i/100ms
Calculating -------------------------------------
        range#cover?      2.448M (± 0.2%) i/s -     12.487M in   5.099803s
      range#include?     88.547k (± 2.4%) i/s -    443.009k in   5.005969s
       range#member?     87.491k (± 2.0%) i/s -    441.350k in   5.046455s
       plain compare      3.575M (± 0.5%) i/s -     18.011M in   5.037681s

Comparison:
       plain compare:  3575313.1 i/s
        range#cover?:  2448491.4 i/s - 1.46x  (± 0.00) slower
      range#include?:    88546.7 i/s - 40.38x  (± 0.00) slower
       range#member?:    87490.9 i/s - 40.86x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   764.314k i/100ms
           String#=~   486.615k i/100ms
          Regexp#===   465.530k i/100ms
        String#match   337.672k i/100ms
Calculating -------------------------------------
       String#match?      7.642M (± 0.1%) i/s -     38.216M in   5.000891s
           String#=~      4.928M (± 0.1%) i/s -     24.817M in   5.036145s
          Regexp#===      4.665M (± 0.2%) i/s -     23.742M in   5.089136s
        String#match      3.383M (± 0.2%) i/s -     17.221M in   5.090548s

Comparison:
       String#match?:  7641781.4 i/s
           String#=~:  4927852.5 i/s - 1.55x  (± 0.00) slower
          Regexp#===:  4665259.4 i/s - 1.64x  (± 0.00) slower
        String#match:  3382997.6 i/s - 2.26x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   495.830k i/100ms
      String#casecmp   613.981k i/100ms
Calculating -------------------------------------
String#downcase + ==      4.943M (± 0.5%) i/s -     24.792M in   5.015954s
      String#casecmp      6.139M (± 0.3%) i/s -     30.699M in   5.001024s

Comparison:
      String#casecmp:  6138614.5 i/s
String#downcase + ==:  4942633.8 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   461.540k i/100ms
       String#concat   460.436k i/100ms
       String#append   513.989k i/100ms
         "foo" "bar"   968.962k i/100ms
  "#{'foo'}#{'bar'}"   956.907k i/100ms
Calculating -------------------------------------
            String#+      4.613M (± 0.6%) i/s -     23.077M in   5.003245s
       String#concat      4.583M (± 0.4%) i/s -     23.022M in   5.023163s
       String#append      5.140M (± 0.3%) i/s -     26.213M in   5.099777s
         "foo" "bar"      9.688M (± 0.3%) i/s -     48.448M in   5.000643s
  "#{'foo'}#{'bar'}"      9.566M (± 0.1%) i/s -     47.845M in   5.001787s

Comparison:
         "foo" "bar":  9688484.7 i/s
  "#{'foo'}#{'bar'}":  9565668.3 i/s - 1.01x  (± 0.00) slower
       String#append:  5140171.1 i/s - 1.88x  (± 0.00) slower
            String#+:  4612574.5 i/s - 2.10x  (± 0.00) slower
       String#concat:  4583214.3 i/s - 2.11x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@   787.401k i/100ms
          String#dup   442.490k i/100ms
Calculating -------------------------------------
           String#+@      7.884M (± 0.3%) i/s -     40.157M in   5.093406s
          String#dup      4.419M (± 0.1%) i/s -     22.124M in   5.006699s

Comparison:
           String#+@:  7884285.2 i/s
          String#dup:  4418983.2 i/s - 1.78x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   146.383k i/100ms
       String#match?   335.111k i/100ms
    String#end_with?   481.988k i/100ms
Calculating -------------------------------------
           String#=~      1.482M (± 0.2%) i/s -      7.466M in   5.037844s
       String#match?      3.350M (± 0.1%) i/s -     16.756M in   5.002268s
    String#end_with?      4.812M (± 0.2%) i/s -     24.099M in   5.007851s

Comparison:
    String#end_with?:  4812351.3 i/s
       String#match?:  3349595.7 i/s - 1.44x  (± 0.00) slower
           String#=~:  1481896.9 i/s - 3.25x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    77.262k i/100ms
          String#sub    96.269k i/100ms
String#dup["string"]=
                       140.454k i/100ms
Calculating -------------------------------------
         String#gsub    780.590k (± 0.5%) i/s -      3.940M in   5.048045s
          String#sub    983.700k (± 1.8%) i/s -      5.006M in   5.090487s
String#dup["string"]=
                          1.409M (± 0.9%) i/s -      7.163M in   5.084591s

Comparison:
String#dup["string"]=:  1408910.8 i/s
          String#sub:   983699.6 i/s - 1.43x  (± 0.00) slower
         String#gsub:   780590.0 i/s - 1.80x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    72.733k i/100ms
           String#tr   284.988k i/100ms
Calculating -------------------------------------
         String#gsub    735.526k (± 1.5%) i/s -      3.709M in   5.044338s
           String#tr      2.850M (± 0.5%) i/s -     14.534M in   5.099481s

Comparison:
           String#tr:  2850238.5 i/s
         String#gsub:   735526.0 i/s - 3.88x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   935.163k i/100ms
         With Freeze     1.460M i/100ms
Calculating -------------------------------------
      Without Freeze      9.344M (± 0.2%) i/s -     46.758M in   5.004263s
         With Freeze     14.583M (± 0.2%) i/s -     72.987M in   5.004839s

Comparison:
         With Freeze: 14583405.5 i/s
      Without Freeze:  9343695.1 i/s - 1.56x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.562k i/100ms
      String#squeeze   133.087k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     25.504k (± 0.8%) i/s -    128.100k in   5.022963s
      String#squeeze      1.322M (± 0.9%) i/s -      6.654M in   5.033711s

Comparison:
      String#squeeze:  1322058.7 i/s
 String#gsub/regex+/:    25504.3 i/s - 51.84x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   214.132k i/100ms
       String#match?   606.482k i/100ms
  String#start_with?   689.526k i/100ms
Calculating -------------------------------------
           String#=~      2.140M (± 0.2%) i/s -     10.707M in   5.003438s
       String#match?      6.062M (± 0.1%) i/s -     30.324M in   5.002666s
  String#start_with?      6.911M (± 0.2%) i/s -     35.166M in   5.088172s

Comparison:
  String#start_with?:  6911316.6 i/s
       String#match?:  6061591.4 i/s - 1.14x  (± 0.00) slower
           String#=~:  2139858.1 i/s - 3.23x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   185.169k i/100ms
    String#[0, n] ==    67.625k i/100ms
   String#[RANGE] ==    61.321k i/100ms
   String#[0...n] ==    35.713k i/100ms
Calculating -------------------------------------
  String#start_with?      1.847M (± 0.4%) i/s -      9.258M in   5.014023s
    String#[0, n] ==    674.305k (± 0.6%) i/s -      3.381M in   5.014626s
   String#[RANGE] ==    612.103k (± 0.5%) i/s -      3.066M in   5.009165s
   String#[0...n] ==    352.421k (± 0.1%) i/s -      1.786M in   5.066818s

Comparison:
  String#start_with?:  1846541.2 i/s
    String#[0, n] ==:   674304.8 i/s - 2.74x  (± 0.00) slower
   String#[RANGE] ==:   612103.3 i/s - 3.02x  (± 0.00) slower
   String#[0...n] ==:   352421.2 i/s - 5.24x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   132.141k i/100ms
 String#sub!'string'    90.379k i/100ms
String#gsub!'string'    58.006k i/100ms
  String#[/regexp/]=   119.999k i/100ms
 String#sub!/regexp/    93.751k i/100ms
String#gsub!/regexp/    47.241k i/100ms
Calculating -------------------------------------
  String#['string']=      1.303M (± 1.5%) i/s -      6.607M in   5.070790s
 String#sub!'string'    909.818k (± 0.9%) i/s -      4.609M in   5.066635s
String#gsub!'string'    574.798k (± 0.4%) i/s -      2.900M in   5.045872s
  String#[/regexp/]=      1.153M (± 3.1%) i/s -      5.760M in   5.001564s
 String#sub!/regexp/    966.486k (± 0.9%) i/s -      4.875M in   5.044470s
String#gsub!/regexp/    459.911k (± 1.2%) i/s -      2.315M in   5.033950s

Comparison:
  String#['string']=:  1303258.5 i/s
  String#[/regexp/]=:  1152750.6 i/s - 1.13x  (± 0.00) slower
 String#sub!/regexp/:   966486.3 i/s - 1.35x  (± 0.00) slower
 String#sub!'string':   909818.4 i/s - 1.43x  (± 0.00) slower
String#gsub!'string':   574798.0 i/s - 2.27x  (± 0.00) slower
String#gsub!/regexp/:   459910.6 i/s - 2.83x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   116.654k i/100ms
        String#chomp   416.592k i/100ms
String#delete_suffix   452.990k i/100ms
Calculating -------------------------------------
          String#sub      1.195M (± 1.1%) i/s -      6.066M in   5.076985s
        String#chomp      4.160M (± 0.1%) i/s -     20.830M in   5.007264s
String#delete_suffix      4.529M (± 0.2%) i/s -     22.650M in   5.001475s

Comparison:
String#delete_suffix:  4528578.7 i/s
        String#chomp:  4159880.5 i/s - 1.09x  (± 0.00) slower
          String#sub:  1194952.7 i/s - 3.79x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   489.525k i/100ms
          String#sub   118.098k i/100ms
Calculating -------------------------------------
String#delete_prefix      4.891M (± 0.3%) i/s -     24.476M in   5.004842s
          String#sub      1.128M (± 1.1%) i/s -      5.669M in   5.025132s

Comparison:
String#delete_prefix:  4890568.0 i/s
          String#sub:  1128216.1 i/s - 4.33x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   444.821k i/100ms
    String#unpack[0]   335.557k i/100ms
Calculating -------------------------------------
      String#unpack1      4.461M (± 0.5%) i/s -     22.686M in   5.085028s
    String#unpack[0]      3.357M (± 0.2%) i/s -     17.113M in   5.098154s

Comparison:
      String#unpack1:  4461407.4 i/s
    String#unpack[0]:  3356793.4 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    22.124k i/100ms
          Time.parse     7.367k i/100ms
Calculating -------------------------------------
        Time.iso8601    221.139k (± 0.5%) i/s -      1.106M in   5.002405s
          Time.parse     74.193k (± 0.7%) i/s -    375.717k in   5.064246s

Comparison:
        Time.iso8601:   221138.7 i/s
          Time.parse:    74193.4 i/s - 2.98x  (± 0.00) slower

