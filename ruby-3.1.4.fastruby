$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       554.812k i/100ms
Function with splat arguments
                        17.435k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          5.539M (± 0.1%) i/s -     27.741M in   5.007998s
Function with splat arguments
                        209.896k (± 5.7%) i/s -      1.046M in   5.010901s

Comparison:
Function with single Array argument:  5539265.2 i/s
Function with splat arguments:   209896.1 i/s - 26.39x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   934.945k i/100ms
Sequential Assignment
                       872.934k i/100ms
Calculating -------------------------------------
 Parallel Assignment      9.351M (± 0.3%) i/s -     47.682M in   5.099285s
Sequential Assignment
                          8.803M (± 0.3%) i/s -     44.520M in   5.057221s

Comparison:
 Parallel Assignment:  9350824.1 i/s
Sequential Assignment:  8803273.7 i/s - 1.06x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   377.312k i/100ms
       attr_accessor   423.160k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.793M (± 0.1%) i/s -     19.243M in   5.072969s
       attr_accessor      4.306M (± 0.2%) i/s -     21.581M in   5.011859s

Comparison:
       attr_accessor:  4306033.7 i/s
   getter_and_setter:  3793232.3 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    70.676k i/100ms
         respond_to?   562.683k i/100ms
Calculating -------------------------------------
      begin...rescue    720.255k (± 0.7%) i/s -      3.604M in   5.004710s
         respond_to?      5.608M (± 0.5%) i/s -     28.134M in   5.017323s

Comparison:
         respond_to?:  5607517.3 i/s
      begin...rescue:   720255.0 i/s - 7.79x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   239.974k i/100ms
             &method    88.279k i/100ms
Calculating -------------------------------------
              normal      2.398M (± 0.1%) i/s -     11.999M in   5.004349s
             &method    872.737k (± 0.2%) i/s -      4.414M in   5.057615s

Comparison:
              normal:  2397656.7 i/s
             &method:   872737.1 i/s - 2.75x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       199.000  i/100ms
       define_method   224.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.984k (±21.9%) i/s -      8.756k in   5.060879s
       define_method      2.596k (±17.9%) i/s -     11.872k in   5.003775s

Comparison:
       define_method:     2595.6 i/s
module_eval with string:     1983.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   139.397k i/100ms
       Kernel#format   151.205k i/100ms
            String#%   132.109k i/100ms
Calculating -------------------------------------
         Float#round      1.390M (± 0.2%) i/s -      6.970M in   5.012532s
       Kernel#format      1.511M (± 0.5%) i/s -      7.560M in   5.004091s
            String#%      1.325M (± 0.4%) i/s -      6.738M in   5.083800s

Comparison:
       Kernel#format:  1510846.2 i/s
         Float#round:  1390490.0 i/s - 1.09x  (± 0.00) slower
            String#%:  1325318.6 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   701.629k i/100ms
          OpenStruct   357.065k i/100ms
Calculating -------------------------------------
                Hash      7.007M (± 0.1%) i/s -     35.081M in   5.006786s
          OpenStruct      3.568M (± 0.1%) i/s -     17.853M in   5.003914s

Comparison:
                Hash:  7006793.2 i/s
          OpenStruct:  3567861.9 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   842.834k i/100ms
          OpenStruct     8.512k i/100ms
Calculating -------------------------------------
                Hash      9.005M (± 0.2%) i/s -     45.513M in   5.054451s
          OpenStruct     85.950k (± 2.2%) i/s -    434.112k in   5.053169s

Comparison:
                Hash:  9004572.9 i/s
          OpenStruct:    85950.2 i/s - 104.76x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   474.708k i/100ms
  ancestors.include?    96.050k i/100ms
Calculating -------------------------------------
  less than or equal      4.784M (± 0.1%) i/s -     24.210M in   5.060679s
  ancestors.include?    963.530k (± 0.2%) i/s -      4.899M in   5.083991s

Comparison:
  less than or equal:  4783973.0 i/s
  ancestors.include?:   963529.8 i/s - 4.97x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.460  (± 0.0%) i/s -      3.000  in   6.523862s
         Kernel loop      0.177  (± 0.0%) i/s -      1.000  in   5.634563s

Comparison:
          While Loop:        0.5 i/s
         Kernel loop:        0.2 i/s - 2.59x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.303M i/100ms
         Array#first     1.106M i/100ms
Calculating -------------------------------------
           Array#[0]     13.037M (± 0.2%) i/s -     66.445M in   5.096620s
         Array#first     11.053M (± 0.5%) i/s -     55.279M in   5.001211s

Comparison:
           Array#[0]: 13037149.9 i/s
         Array#first: 11053388.4 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.270M i/100ms
          Array#last     1.000M i/100ms
Calculating -------------------------------------
          Array#[-1]     12.715M (± 0.1%) i/s -     64.759M in   5.093041s
          Array#last      9.996M (± 0.0%) i/s -     50.001M in   5.002209s

Comparison:
          Array#[-1]: 12715198.6 i/s
          Array#last:  9995745.6 i/s - 1.27x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    74.417k i/100ms
Calculating -------------------------------------
                find      0.204  (± 0.0%) i/s -      2.000  in   9.800264s
             bsearch    744.436k (± 0.1%) i/s -      3.795M in   5.098181s

Comparison:
             bsearch:   744435.8 i/s
                find:        0.2 i/s - 3647832.98x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    14.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    144.414  (± 2.8%) i/s -    728.000  in   5.044682s
        Array#insert      1.150  (± 0.0%) i/s -      6.000  in   5.216652s

Comparison:
       Array#unshift:      144.4 i/s
        Array#insert:        1.2 i/s - 125.56x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.894M i/100ms
          Array#size     1.768M i/100ms
         Array#count     1.319M i/100ms
Calculating -------------------------------------
        Array#length     18.857M (± 0.5%) i/s -     94.689M in   5.021617s
          Array#size     17.671M (± 0.5%) i/s -     88.377M in   5.001365s
         Array#count     13.176M (± 0.3%) i/s -     65.973M in   5.007101s

Comparison:
        Array#length: 18856863.3 i/s
          Array#size: 17670912.7 i/s - 1.07x  (± 0.00) slower
         Array#count: 13176019.4 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    33.390k i/100ms
        Array#sample   794.567k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    334.995k (± 0.5%) i/s -      1.703M in   5.083471s
        Array#sample      7.939M (± 0.1%) i/s -     39.728M in   5.003908s

Comparison:
        Array#sample:  7939473.5 i/s
 Array#shuffle.first:   334995.1 i/s - 23.70x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    47.486k i/100ms
          Date.parse    23.707k i/100ms
Calculating -------------------------------------
        Date.iso8601    471.551k (± 0.3%) i/s -      2.374M in   5.035139s
          Date.parse    238.158k (± 0.2%) i/s -      1.209M in   5.076728s

Comparison:
        Date.iso8601:   471551.0 i/s
          Date.parse:   238157.8 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    13.538k i/100ms
           Array#map    19.365k i/100ms
Calculating -------------------------------------
   Array#each + push    135.527k (± 0.3%) i/s -    690.438k in   5.094502s
           Array#map    194.514k (± 0.2%) i/s -    987.615k in   5.077369s

Comparison:
           Array#map:   194514.1 i/s
   Array#each + push:   135527.3 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    21.773k i/100ms
               #each    24.453k i/100ms
Calculating -------------------------------------
            For loop    217.743k (± 0.1%) i/s -      1.110M in   5.099708s
               #each    240.412k (± 0.1%) i/s -      1.223M in   5.085638s

Comparison:
               #each:   240412.5 i/s
            For loop:   217742.5 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    24.551k i/100ms
     each_with_index    14.086k i/100ms
Calculating -------------------------------------
          While Loop    245.422k (± 0.1%) i/s -      1.228M in   5.001806s
     each_with_index    141.484k (± 0.7%) i/s -    718.386k in   5.077737s

Comparison:
          While Loop:   245421.7 i/s
     each_with_index:   141484.4 i/s - 1.73x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    71.519k i/100ms
      inject to_proc     1.644k i/100ms
        inject block     1.518k i/100ms
Calculating -------------------------------------
       inject symbol    714.848k (± 0.3%) i/s -      3.576M in   5.002424s
      inject to_proc     16.439k (± 0.1%) i/s -     82.200k in   5.000361s
        inject block     15.161k (± 0.6%) i/s -     75.900k in   5.006438s

Comparison:
       inject symbol:   714848.0 i/s
      inject to_proc:    16438.8 i/s - 43.49x  (± 0.00) slower
        inject block:    15161.1 i/s - 47.15x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     5.451k i/100ms
   Array#map.flatten     2.992k i/100ms
      Array#flat_map     7.101k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     54.545k (± 0.3%) i/s -    278.001k in   5.096775s
   Array#map.flatten     30.072k (± 0.3%) i/s -    152.592k in   5.074336s
      Array#flat_map     70.969k (± 0.2%) i/s -    355.050k in   5.002892s

Comparison:
      Array#flat_map:    70969.4 i/s
Array#map.flatten(1):    54545.1 i/s - 1.30x  (± 0.00) slower
   Array#map.flatten:    30071.6 i/s - 2.36x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    23.310k i/100ms
  Array#reverse_each    24.002k i/100ms
Calculating -------------------------------------
  Array#reverse.each    234.254k (± 0.2%) i/s -      1.189M in   5.074895s
  Array#reverse_each    240.278k (± 0.1%) i/s -      1.224M in   5.094534s

Comparison:
  Array#reverse_each:   240277.7 i/s
  Array#reverse.each:   234254.0 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        15.627k i/100ms
   Enumerable#detect    62.250k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        155.052k (± 0.5%) i/s -      3.110M in  20.056897s
   Enumerable#detect    621.807k (± 0.1%) i/s -     12.450M in  20.022308s

Comparison:
   Enumerable#detect:   621807.2 i/s
Enumerable#select.first:   155051.9 i/s - 4.01x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       175.977k i/100ms
Enumerable#select.last
                        14.550k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.784M (± 0.5%) i/s -      8.975M in   5.030100s
Enumerable#select.last
                        143.436k (± 0.2%) i/s -    727.500k in   5.071966s

Comparison:
Enumerable#reverse.detect:  1784273.1 i/s
Enumerable#select.last:   143435.9 i/s - 12.44x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.778k i/100ms
  Enumerable#sort_by     3.648k i/100ms
     Enumerable#sort     1.844k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         38.248k (± 0.3%) i/s -    192.678k in   5.037685s
  Enumerable#sort_by     36.789k (± 0.3%) i/s -    186.048k in   5.057246s
     Enumerable#sort     18.490k (± 0.2%) i/s -     94.044k in   5.086110s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    38247.7 i/s
  Enumerable#sort_by:    36788.7 i/s - 1.04x  (± 0.00) slower
     Enumerable#sort:    18490.4 i/s - 2.07x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    13.437k i/100ms
Enumerable#sort_by...first
                         6.609k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    134.285k (± 0.1%) i/s -    671.850k in   5.003182s
Enumerable#sort_by...first
                         66.201k (± 0.2%) i/s -    337.059k in   5.091455s

Comparison:
   Enumerable#min_by:   134284.7 i/s
Enumerable#sort_by...first:    66201.1 i/s - 2.03x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   281.752k i/100ms
            Hash#dup   213.522k i/100ms
Calculating -------------------------------------
              Hash[]      3.004M (± 0.6%) i/s -     15.215M in   5.064260s
            Hash#dup      2.383M (± 0.6%) i/s -     11.957M in   5.017983s

Comparison:
              Hash[]:  3004411.7 i/s
            Hash#dup:  2382948.0 i/s - 1.26x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.169M i/100ms
  Hash#fetch, symbol   912.789k i/100ms
     Hash#[], string   946.189k i/100ms
  Hash#fetch, string   612.520k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     11.691M (± 0.3%) i/s -     59.598M in   5.097777s
  Hash#fetch, symbol      9.063M (± 0.0%) i/s -     45.639M in   5.036030s
     Hash#[], string      9.453M (± 0.2%) i/s -     47.309M in   5.004696s
  Hash#fetch, string      6.085M (± 0.2%) i/s -     30.626M in   5.033047s

Comparison:
     Hash#[], symbol: 11691190.5 i/s
     Hash#[], string:  9453038.8 i/s - 1.24x  (± 0.00) slower
  Hash#fetch, symbol:  9062587.1 i/s - 1.29x  (± 0.00) slower
  Hash#fetch, string:  6084998.2 i/s - 1.92x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   694.072k i/100ms
             Hash#[]   773.725k i/100ms
          Hash#[] ||   707.143k i/100ms
          Hash#[] &&   325.181k i/100ms
          Hash#fetch   502.272k i/100ms
 Hash#fetch fallback   298.001k i/100ms
Calculating -------------------------------------
            Hash#dig      6.923M (± 0.4%) i/s -     34.704M in   5.012844s
             Hash#[]      7.661M (± 0.5%) i/s -     38.686M in   5.049779s
          Hash#[] ||      7.065M (± 0.7%) i/s -     35.357M in   5.005040s
          Hash#[] &&      3.256M (± 0.7%) i/s -     16.584M in   5.093120s
          Hash#fetch      5.057M (± 0.4%) i/s -     25.616M in   5.065939s
 Hash#fetch fallback      2.964M (± 0.3%) i/s -     14.900M in   5.026634s

Comparison:
             Hash#[]:  7661184.1 i/s
          Hash#[] ||:  7064657.6 i/s - 1.08x  (± 0.00) slower
            Hash#dig:  6923024.1 i/s - 1.11x  (± 0.00) slower
          Hash#fetch:  5056559.7 i/s - 1.52x  (± 0.00) slower
          Hash#[] &&:  3256379.8 i/s - 2.35x  (± 0.00) slower
 Hash#fetch fallback:  2964240.9 i/s - 2.58x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.098M i/100ms
  Hash#fetch + block     1.136M i/100ms
    Hash#fetch + arg   836.132k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     10.980M (± 0.1%) i/s -     54.923M in   5.002343s
  Hash#fetch + block     11.376M (± 0.1%) i/s -     57.927M in   5.092074s
    Hash#fetch + arg      8.341M (± 0.4%) i/s -     41.807M in   5.012172s

Comparison:
  Hash#fetch + block: 11375834.2 i/s
  Hash#fetch + const: 10979505.5 i/s - 1.04x  (± 0.00) slower
    Hash#fetch + arg:  8341149.0 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    19.848k i/100ms
         sort + to_h     8.514k i/100ms
Calculating -------------------------------------
      sort_by + to_h    199.750k (± 0.3%) i/s -      1.012M in   5.067631s
         sort + to_h     85.601k (± 0.2%) i/s -    434.214k in   5.072559s

Comparison:
      sort_by + to_h:   199750.1 i/s
         sort + to_h:    85600.9 i/s - 2.33x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   149.805k i/100ms
       Hash#each_key   158.441k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.499M (± 0.3%) i/s -      7.640M in   5.095779s
       Hash#each_key      1.582M (± 0.1%) i/s -      7.922M in   5.007767s

Comparison:
       Hash#each_key:  1581953.2 i/s
      Hash#keys.each:  1499302.7 i/s - 1.06x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     3.513k i/100ms
           Hash#key?   710.064k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     35.611k (± 5.7%) i/s -    179.163k in   5.057453s
           Hash#key?      7.098M (± 0.2%) i/s -     35.503M in   5.001604s

Comparison:
           Hash#key?:  7098390.7 i/s
  Hash#keys.include?:    35610.5 i/s - 199.33x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.008k i/100ms
            Hash#[]=     7.365k i/100ms
Calculating -------------------------------------
         Hash#merge!     30.053k (± 0.3%) i/s -    150.400k in   5.004624s
            Hash#[]=     72.211k (± 0.5%) i/s -    368.250k in   5.099730s

Comparison:
            Hash#[]=:    72211.5 i/s
         Hash#merge!:    30052.6 i/s - 2.40x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.714k i/100ms
      Hash#merge({})     2.895k i/100ms
 Hash#dup#merge!({})     2.100k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         37.060k (± 0.1%) i/s -    185.700k in   5.010745s
      Hash#merge({})     29.011k (± 0.2%) i/s -    147.645k in   5.089229s
 Hash#dup#merge!({})     20.906k (± 0.2%) i/s -    105.000k in   5.022615s

Comparison:
{}#merge!(Hash) do end:    37060.4 i/s
      Hash#merge({}):    29011.4 i/s - 1.28x  (± 0.00) slower
 Hash#dup#merge!({}):    20905.5 i/s - 1.77x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   273.677k i/100ms
          Hash#merge   252.693k i/100ms
Calculating -------------------------------------
        Hash#**other      2.753M (± 0.3%) i/s -     13.958M in   5.069247s
          Hash#merge      2.482M (± 0.7%) i/s -     12.635M in   5.091172s

Comparison:
        Hash#**other:  2753397.7 i/s
          Hash#merge:  2481797.5 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.169k i/100ms
         Hash#merge!     2.983k i/100ms
Calculating -------------------------------------
          Hash#merge     11.839k (± 1.2%) i/s -     59.619k in   5.036556s
         Hash#merge!     29.941k (± 0.3%) i/s -    152.133k in   5.081155s

Comparison:
         Hash#merge!:    29940.9 i/s
          Hash#merge:    11839.1 i/s - 2.53x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      314.199k i/100ms
Array#each             170.114k i/100ms
Array#each_w/_object   120.600k i/100ms
Hash#select-include     53.677k i/100ms
Calculating -------------------------------------
Hash#native-slice         3.156M (± 0.9%) i/s -     16.024M in   5.077700s
Array#each                1.690M (± 0.7%) i/s -      8.506M in   5.032809s
Array#each_w/_object      1.199M (± 0.5%) i/s -      6.030M in   5.027381s
Hash#select-include     561.563k (± 0.3%) i/s -      2.845M in   5.066050s

Comparison:
Hash#native-slice   :  3156032.6 i/s
Array#each          :  1690136.3 i/s - 1.87x  (± 0.00) slower
Array#each_w/_object:  1199456.7 i/s - 2.63x  (± 0.00) slower
Hash#select-include :   561562.7 i/s - 5.62x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   947.000  i/100ms
         Hash#value?   832.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      9.199k (± 4.0%) i/s -     46.403k in   5.053117s
         Hash#value?      8.346k (± 0.3%) i/s -     42.432k in   5.083844s

Comparison:
Hash#values.include?:     9199.5 i/s
         Hash#value?:     8346.5 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   524.401k i/100ms
                send   330.853k i/100ms
      method_missing   257.381k i/100ms
Calculating -------------------------------------
                call      5.258M (± 0.3%) i/s -     26.744M in   5.086763s
                send      3.312M (± 0.1%) i/s -     16.874M in   5.095309s
      method_missing      2.606M (± 0.1%) i/s -     13.126M in   5.036194s

Comparison:
                call:  5257716.3 i/s
                send:  3311582.7 i/s - 1.59x  (± 0.00) slower
      method_missing:  2606423.0 i/s - 2.02x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     6.848k i/100ms
      Symbol#to_proc     7.813k i/100ms
Calculating -------------------------------------
               Block     68.734k (± 0.4%) i/s -    349.248k in   5.081260s
      Symbol#to_proc     78.011k (± 0.5%) i/s -    390.650k in   5.007741s

Comparison:
      Symbol#to_proc:    78011.2 i/s
               Block:    68733.8 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   808.477k i/100ms
       block + yield   821.840k i/100ms
        unused block     1.065M i/100ms
               yield     1.041M i/100ms
Calculating -------------------------------------
          block.call      8.070M (± 0.3%) i/s -     40.424M in   5.009399s
       block + yield      8.315M (± 0.2%) i/s -     41.914M in   5.040831s
        unused block     10.657M (± 0.1%) i/s -     54.319M in   5.096890s
               yield     10.412M (± 0.2%) i/s -     53.094M in   5.099313s

Comparison:
        unused block: 10657311.5 i/s
               yield: 10412116.4 i/s - 1.02x  (± 0.00) slower
       block + yield:  8314915.8 i/s - 1.28x  (± 0.00) slower
          block.call:  8069654.8 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   242.700k i/100ms
      range#include?     9.395k i/100ms
       range#member?     8.934k i/100ms
       plain compare   361.932k i/100ms
Calculating -------------------------------------
        range#cover?      2.424M (± 0.1%) i/s -     12.135M in   5.006659s
      range#include?     94.546k (± 1.2%) i/s -    479.145k in   5.068643s
       range#member?     95.217k (± 0.5%) i/s -    482.436k in   5.066842s
       plain compare      3.617M (± 0.2%) i/s -     18.097M in   5.002967s

Comparison:
       plain compare:  3617193.8 i/s
        range#cover?:  2423774.2 i/s - 1.49x  (± 0.00) slower
       range#member?:    95217.0 i/s - 37.99x  (± 0.00) slower
      range#include?:    94546.1 i/s - 38.26x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   748.088k i/100ms
           String#=~   500.144k i/100ms
          Regexp#===   434.048k i/100ms
        String#match   332.513k i/100ms
Calculating -------------------------------------
       String#match?      7.476M (± 0.1%) i/s -     37.404M in   5.003031s
           String#=~      4.992M (± 0.1%) i/s -     25.007M in   5.009068s
          Regexp#===      4.344M (± 0.1%) i/s -     22.136M in   5.096123s
        String#match      3.333M (± 0.3%) i/s -     16.958M in   5.088479s

Comparison:
       String#match?:  7476350.8 i/s
           String#=~:  4992393.5 i/s - 1.50x  (± 0.00) slower
          Regexp#===:  4343790.0 i/s - 1.72x  (± 0.00) slower
        String#match:  3332684.3 i/s - 2.24x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   463.549k i/100ms
      String#casecmp   552.680k i/100ms
Calculating -------------------------------------
String#downcase + ==      4.630M (± 0.2%) i/s -     23.177M in   5.006251s
      String#casecmp      5.520M (± 0.4%) i/s -     27.634M in   5.006466s

Comparison:
      String#casecmp:  5519765.5 i/s
String#downcase + ==:  4629715.0 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   430.980k i/100ms
       String#concat   458.904k i/100ms
       String#append   513.660k i/100ms
         "foo" "bar"   978.496k i/100ms
  "#{'foo'}#{'bar'}"   931.085k i/100ms
Calculating -------------------------------------
            String#+      4.307M (± 0.4%) i/s -     21.549M in   5.003861s
       String#concat      4.590M (± 0.4%) i/s -     23.404M in   5.098608s
       String#append      5.133M (± 0.2%) i/s -     25.683M in   5.003126s
         "foo" "bar"      9.804M (± 0.2%) i/s -     49.903M in   5.090026s
  "#{'foo'}#{'bar'}"      9.317M (± 0.3%) i/s -     47.485M in   5.096646s

Comparison:
         "foo" "bar":  9804180.1 i/s
  "#{'foo'}#{'bar'}":  9317066.6 i/s - 1.05x  (± 0.00) slower
       String#append:  5133412.5 i/s - 1.91x  (± 0.00) slower
       String#concat:  4590370.1 i/s - 2.14x  (± 0.00) slower
            String#+:  4306537.1 i/s - 2.28x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@   754.443k i/100ms
          String#dup   431.769k i/100ms
Calculating -------------------------------------
           String#+@      7.532M (± 0.5%) i/s -     37.722M in   5.008360s
          String#dup      4.322M (± 0.1%) i/s -     22.020M in   5.094433s

Comparison:
           String#+@:  7532033.7 i/s
          String#dup:  4322412.0 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   143.666k i/100ms
       String#match?   324.426k i/100ms
    String#end_with?   473.829k i/100ms
Calculating -------------------------------------
           String#=~      1.438M (± 0.1%) i/s -      7.327M in   5.096476s
       String#match?      3.245M (± 0.1%) i/s -     16.546M in   5.098060s
    String#end_with?      4.745M (± 0.2%) i/s -     24.165M in   5.092548s

Comparison:
    String#end_with?:  4745235.8 i/s
       String#match?:  3245496.8 i/s - 1.46x  (± 0.00) slower
           String#=~:  1437655.7 i/s - 3.30x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    76.709k i/100ms
          String#sub    98.932k i/100ms
String#dup["string"]=
                       137.795k i/100ms
Calculating -------------------------------------
         String#gsub    765.461k (± 0.4%) i/s -      3.835M in   5.010726s
          String#sub    988.191k (± 0.8%) i/s -      4.947M in   5.006053s
String#dup["string"]=
                          1.381M (± 1.0%) i/s -      7.028M in   5.090721s

Comparison:
String#dup["string"]=:  1380595.8 i/s
          String#sub:   988191.0 i/s - 1.40x  (± 0.00) slower
         String#gsub:   765461.1 i/s - 1.80x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    70.390k i/100ms
           String#tr   274.822k i/100ms
Calculating -------------------------------------
         String#gsub    701.673k (± 0.8%) i/s -      3.520M in   5.016187s
           String#tr      2.745M (± 0.1%) i/s -     13.741M in   5.006245s

Comparison:
           String#tr:  2744793.3 i/s
         String#gsub:   701673.2 i/s - 3.91x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   953.776k i/100ms
         With Freeze     1.456M i/100ms
Calculating -------------------------------------
      Without Freeze      9.522M (± 0.2%) i/s -     47.689M in   5.008420s
         With Freeze     14.579M (± 0.2%) i/s -     74.236M in   5.091913s

Comparison:
         With Freeze: 14579189.6 i/s
      Without Freeze:  9521758.1 i/s - 1.53x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.543k i/100ms
      String#squeeze   132.883k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     25.379k (± 0.4%) i/s -    127.150k in   5.010127s
      String#squeeze      1.317M (± 0.1%) i/s -      6.644M in   5.043996s

Comparison:
      String#squeeze:  1317242.1 i/s
 String#gsub/regex+/:    25379.0 i/s - 51.90x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   213.037k i/100ms
       String#match?   595.600k i/100ms
  String#start_with?   644.375k i/100ms
Calculating -------------------------------------
           String#=~      2.124M (± 0.2%) i/s -     10.652M in   5.014881s
       String#match?      5.968M (± 0.1%) i/s -     30.376M in   5.089732s
  String#start_with?      6.433M (± 0.7%) i/s -     32.219M in   5.008528s

Comparison:
  String#start_with?:  6433080.5 i/s
       String#match?:  5968020.5 i/s - 1.08x  (± 0.00) slower
           String#=~:  2124060.1 i/s - 3.03x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   178.951k i/100ms
    String#[0, n] ==    66.808k i/100ms
   String#[RANGE] ==    60.898k i/100ms
   String#[0...n] ==    35.360k i/100ms
Calculating -------------------------------------
  String#start_with?      1.853M (± 0.2%) i/s -      9.305M in   5.021443s
    String#[0, n] ==    675.535k (± 1.4%) i/s -      3.407M in   5.044718s
   String#[RANGE] ==    609.958k (± 0.7%) i/s -      3.106M in   5.092076s
   String#[0...n] ==    354.416k (± 0.2%) i/s -      1.803M in   5.088275s

Comparison:
  String#start_with?:  1853152.5 i/s
    String#[0, n] ==:   675534.6 i/s - 2.74x  (± 0.00) slower
   String#[RANGE] ==:   609957.8 i/s - 3.04x  (± 0.00) slower
   String#[0...n] ==:   354415.7 i/s - 5.23x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   126.648k i/100ms
 String#sub!'string'    89.333k i/100ms
String#gsub!'string'    57.283k i/100ms
  String#[/regexp/]=   116.550k i/100ms
 String#sub!/regexp/    92.743k i/100ms
String#gsub!/regexp/    45.389k i/100ms
Calculating -------------------------------------
  String#['string']=      1.351M (± 0.7%) i/s -      6.839M in   5.062844s
 String#sub!'string'    907.125k (± 0.7%) i/s -      4.556M in   5.022665s
String#gsub!'string'    568.214k (± 0.5%) i/s -      2.864M in   5.040729s
  String#[/regexp/]=      1.174M (± 3.1%) i/s -      5.944M in   5.066468s
 String#sub!/regexp/    930.399k (± 0.4%) i/s -      4.730M in   5.083821s
String#gsub!/regexp/    454.870k (± 0.8%) i/s -      2.315M in   5.089358s

Comparison:
  String#['string']=:  1350891.2 i/s
  String#[/regexp/]=:  1174358.0 i/s - 1.15x  (± 0.00) slower
 String#sub!/regexp/:   930399.1 i/s - 1.45x  (± 0.00) slower
 String#sub!'string':   907124.7 i/s - 1.49x  (± 0.00) slower
String#gsub!'string':   568213.8 i/s - 2.38x  (± 0.00) slower
String#gsub!/regexp/:   454869.8 i/s - 2.97x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   116.110k i/100ms
        String#chomp   424.659k i/100ms
String#delete_suffix   439.085k i/100ms
Calculating -------------------------------------
          String#sub      1.103M (± 1.2%) i/s -      5.573M in   5.054302s
        String#chomp      4.244M (± 0.5%) i/s -     21.233M in   5.002744s
String#delete_suffix      4.385M (± 0.3%) i/s -     21.954M in   5.006663s

Comparison:
String#delete_suffix:  4385039.7 i/s
        String#chomp:  4244359.1 i/s - 1.03x  (± 0.00) slower
          String#sub:  1102841.0 i/s - 3.98x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   460.777k i/100ms
          String#sub   110.797k i/100ms
Calculating -------------------------------------
String#delete_prefix      4.617M (± 0.2%) i/s -     23.500M in   5.089790s
          String#sub      1.154M (± 0.7%) i/s -      5.872M in   5.088335s

Comparison:
String#delete_prefix:  4617029.9 i/s
          String#sub:  1154113.3 i/s - 4.00x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   466.867k i/100ms
    String#unpack[0]   348.910k i/100ms
Calculating -------------------------------------
      String#unpack1      4.673M (± 1.1%) i/s -     23.810M in   5.096055s
    String#unpack[0]      3.497M (± 1.4%) i/s -     17.794M in   5.089940s

Comparison:
      String#unpack1:  4672849.7 i/s
    String#unpack[0]:  3496755.3 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    22.110k i/100ms
          Time.parse     7.139k i/100ms
Calculating -------------------------------------
        Time.iso8601    220.174k (± 0.7%) i/s -      1.106M in   5.021308s
          Time.parse     72.184k (± 0.9%) i/s -    364.089k in   5.044314s

Comparison:
        Time.iso8601:   220173.9 i/s
          Time.parse:    72183.7 i/s - 3.05x  (± 0.00) slower

