$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       481.766k i/100ms
Function with splat arguments
                         7.308k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          4.818M (± 0.1%) i/s -     24.570M in   5.099263s
Function with splat arguments
                         72.734k (± 5.5%) i/s -    365.400k in   5.047479s

Comparison:
Function with single Array argument:  4818360.9 i/s
Function with splat arguments:    72733.5 i/s - 66.25x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   844.024k i/100ms
Sequential Assignment
                       864.113k i/100ms
Calculating -------------------------------------
 Parallel Assignment      8.452M (± 0.3%) i/s -     43.045M in   5.092937s
Sequential Assignment
                          8.650M (± 0.2%) i/s -     44.070M in   5.094631s

Comparison:
Sequential Assignment:  8650273.3 i/s
 Parallel Assignment:  8452025.8 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   301.983k i/100ms
       attr_accessor   324.198k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.014M (± 0.2%) i/s -     15.099M in   5.009099s
       attr_accessor      3.267M (± 0.2%) i/s -     16.534M in   5.061388s

Comparison:
       attr_accessor:  3266722.2 i/s
   getter_and_setter:  3014357.2 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    60.744k i/100ms
         respond_to?   485.891k i/100ms
Calculating -------------------------------------
      begin...rescue    605.296k (± 0.5%) i/s -      3.037M in   5.017820s
         respond_to?      4.856M (± 0.1%) i/s -     24.295M in   5.003210s

Comparison:
         respond_to?:  4855803.0 i/s
      begin...rescue:   605296.3 i/s - 8.02x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   193.467k i/100ms
             &method    73.302k i/100ms
Calculating -------------------------------------
              normal      1.932M (± 0.1%) i/s -      9.673M in   5.006585s
             &method    733.721k (± 0.1%) i/s -      3.738M in   5.095141s

Comparison:
              normal:  1932127.2 i/s
             &method:   733720.6 i/s - 2.63x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       154.000  i/100ms
       define_method   194.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.572k (±18.7%) i/s -      7.392k in   5.300049s
       define_method      2.150k (±19.5%) i/s -      9.894k in   5.116485s

Comparison:
       define_method:     2149.8 i/s
module_eval with string:     1572.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   116.717k i/100ms
       Kernel#format   125.545k i/100ms
            String#%   111.040k i/100ms
Calculating -------------------------------------
         Float#round      1.160M (± 0.5%) i/s -      5.836M in   5.029353s
       Kernel#format      1.252M (± 0.2%) i/s -      6.277M in   5.011999s
            String#%      1.112M (± 0.1%) i/s -      5.663M in   5.091760s

Comparison:
       Kernel#format:  1252449.0 i/s
         Float#round:  1160388.8 i/s - 1.08x  (± 0.00) slower
            String#%:  1112197.2 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   557.858k i/100ms
          OpenStruct   289.388k i/100ms
Calculating -------------------------------------
                Hash      5.581M (± 0.1%) i/s -     28.451M in   5.097545s
          OpenStruct      2.892M (± 0.2%) i/s -     14.469M in   5.002973s

Comparison:
                Hash:  5581270.0 i/s
          OpenStruct:  2892169.6 i/s - 1.93x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   741.857k i/100ms
          OpenStruct     7.110k i/100ms
Calculating -------------------------------------
                Hash      8.016M (± 0.3%) i/s -     40.802M in   5.090409s
          OpenStruct     72.278k (± 2.7%) i/s -    362.610k in   5.020670s

Comparison:
                Hash:  8015566.7 i/s
          OpenStruct:    72278.3 i/s - 110.90x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   388.509k i/100ms
  ancestors.include?    72.511k i/100ms
Calculating -------------------------------------
  less than or equal      3.885M (± 0.2%) i/s -     19.425M in   5.000538s
  ancestors.include?    723.863k (± 0.1%) i/s -      3.626M in   5.008614s

Comparison:
  less than or equal:  3884689.2 i/s
  ancestors.include?:   723863.5 i/s - 5.37x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.496  (± 0.0%) i/s -      3.000  in   6.051388s
         Kernel loop      0.143  (± 0.0%) i/s -      1.000  in   6.975926s

Comparison:
          While Loop:        0.5 i/s
         Kernel loop:        0.1 i/s - 3.46x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.157M i/100ms
         Array#first   996.409k i/100ms
Calculating -------------------------------------
           Array#[0]     11.572M (± 0.1%) i/s -     57.871M in   5.000847s
         Array#first      9.950M (± 0.1%) i/s -     49.820M in   5.006996s

Comparison:
           Array#[0]: 11572296.0 i/s
         Array#first:  9950180.2 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.098M i/100ms
          Array#last   958.447k i/100ms
Calculating -------------------------------------
          Array#[-1]     10.997M (± 0.0%) i/s -     55.984M in   5.090808s
          Array#last      9.605M (± 0.1%) i/s -     48.881M in   5.088978s

Comparison:
          Array#[-1]: 10997102.4 i/s
          Array#last:  9605237.1 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    57.796k i/100ms
Calculating -------------------------------------
                find      0.162  (± 0.0%) i/s -      1.000  in   6.178575s
             bsearch    587.311k (± 0.1%) i/s -      2.948M in   5.018805s

Comparison:
             bsearch:   587310.9 i/s
                find:        0.2 i/s - 3628744.37x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    11.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    114.477  (± 2.6%) i/s -    572.000  in   5.000407s
        Array#insert      1.124  (± 0.0%) i/s -      6.000  in   5.338759s

Comparison:
       Array#unshift:      114.5 i/s
        Array#insert:        1.1 i/s - 101.83x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.531M i/100ms
          Array#size     1.506M i/100ms
         Array#count     1.163M i/100ms
Calculating -------------------------------------
        Array#length     15.287M (± 0.4%) i/s -     76.558M in   5.008034s
          Array#size     15.106M (± 0.3%) i/s -     76.802M in   5.084327s
         Array#count     11.635M (± 0.2%) i/s -     59.328M in   5.098982s

Comparison:
        Array#length: 15287247.7 i/s
          Array#size: 15105798.5 i/s - 1.01x  (± 0.00) slower
         Array#count: 11635384.9 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    27.063k i/100ms
        Array#sample   694.202k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    270.624k (± 0.4%) i/s -      1.353M in   5.000173s
        Array#sample      6.938M (± 0.1%) i/s -     34.710M in   5.002742s

Comparison:
        Array#sample:  6938224.2 i/s
 Array#shuffle.first:   270624.3 i/s - 25.64x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    41.715k i/100ms
          Date.parse    20.729k i/100ms
Calculating -------------------------------------
        Date.iso8601    417.428k (± 0.3%) i/s -      2.127M in   5.096667s
          Date.parse    205.947k (± 0.2%) i/s -      1.036M in   5.032625s

Comparison:
        Date.iso8601:   417427.6 i/s
          Date.parse:   205947.3 i/s - 2.03x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    10.940k i/100ms
           Array#map    15.364k i/100ms
Calculating -------------------------------------
   Array#each + push    110.036k (± 0.3%) i/s -    557.940k in   5.070541s
           Array#map    153.774k (± 0.2%) i/s -    783.564k in   5.095577s

Comparison:
           Array#map:   153774.2 i/s
   Array#each + push:   110036.3 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    19.236k i/100ms
               #each    20.880k i/100ms
Calculating -------------------------------------
            For loop    192.584k (± 0.2%) i/s -    981.036k in   5.094096s
               #each    209.227k (± 0.3%) i/s -      1.065M in   5.089642s

Comparison:
               #each:   209226.6 i/s
            For loop:   192584.0 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    23.811k i/100ms
     each_with_index    11.549k i/100ms
Calculating -------------------------------------
          While Loop    237.079k (± 0.2%) i/s -      1.191M in   5.021767s
     each_with_index    115.839k (± 0.2%) i/s -    588.999k in   5.084666s

Comparison:
          While Loop:   237078.6 i/s
     each_with_index:   115838.7 i/s - 2.05x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    69.126k i/100ms
      inject to_proc     1.218k i/100ms
        inject block     1.285k i/100ms
Calculating -------------------------------------
       inject symbol    691.119k (± 0.3%) i/s -      3.456M in   5.001057s
      inject to_proc     12.212k (± 0.4%) i/s -     62.118k in   5.086891s
        inject block     12.854k (± 0.2%) i/s -     65.535k in   5.098489s

Comparison:
       inject symbol:   691118.6 i/s
        inject block:    12853.9 i/s - 53.77x  (± 0.00) slower
      inject to_proc:    12211.6 i/s - 56.60x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     4.222k i/100ms
   Array#map.flatten     2.270k i/100ms
      Array#flat_map     5.451k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     42.172k (± 0.2%) i/s -    211.100k in   5.005757s
   Array#map.flatten     22.693k (± 0.3%) i/s -    113.500k in   5.001681s
      Array#flat_map     54.341k (± 0.1%) i/s -    272.550k in   5.015540s

Comparison:
      Array#flat_map:    54341.2 i/s
Array#map.flatten(1):    42171.7 i/s - 1.29x  (± 0.00) slower
   Array#map.flatten:    22692.5 i/s - 2.39x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    20.126k i/100ms
  Array#reverse_each    20.555k i/100ms
Calculating -------------------------------------
  Array#reverse.each    201.846k (± 0.3%) i/s -      1.026M in   5.085234s
  Array#reverse_each    205.840k (± 0.2%) i/s -      1.048M in   5.092840s

Comparison:
  Array#reverse_each:   205840.2 i/s
  Array#reverse.each:   201846.2 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        12.476k i/100ms
   Enumerable#detect    47.100k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        124.667k (± 1.0%) i/s -      2.495M in  20.017016s
   Enumerable#detect    470.422k (± 0.1%) i/s -      9.420M in  20.024603s

Comparison:
   Enumerable#detect:   470421.7 i/s
Enumerable#select.first:   124667.5 i/s - 3.77x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       142.846k i/100ms
Enumerable#select.last
                        10.481k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.428M (± 0.2%) i/s -      7.142M in   5.001378s
Enumerable#select.last
                        104.532k (± 0.3%) i/s -    524.050k in   5.013318s

Comparison:
Enumerable#reverse.detect:  1428074.6 i/s
Enumerable#select.last:   104532.3 i/s - 13.66x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.762k i/100ms
  Enumerable#sort_by     2.709k i/100ms
     Enumerable#sort     1.491k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         27.630k (± 0.3%) i/s -    140.862k in   5.098151s
  Enumerable#sort_by     27.084k (± 0.2%) i/s -    135.450k in   5.001166s
     Enumerable#sort     14.923k (± 0.4%) i/s -     76.041k in   5.095710s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    27630.3 i/s
  Enumerable#sort_by:    27083.8 i/s - 1.02x  (± 0.00) slower
     Enumerable#sort:    14922.8 i/s - 1.85x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    10.231k i/100ms
Enumerable#sort_by...first
                         4.957k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    102.354k (± 0.2%) i/s -    521.781k in   5.097818s
Enumerable#sort_by...first
                         49.531k (± 0.5%) i/s -    247.850k in   5.004108s

Comparison:
   Enumerable#min_by:   102354.1 i/s
Enumerable#sort_by...first:    49530.5 i/s - 2.07x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   224.782k i/100ms
            Hash#dup   155.625k i/100ms
Calculating -------------------------------------
              Hash[]      2.275M (± 1.1%) i/s -     11.464M in   5.038874s
            Hash#dup      1.766M (± 2.0%) i/s -      8.871M in   5.024019s

Comparison:
              Hash[]:  2275368.4 i/s
            Hash#dup:  1766371.2 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.052M i/100ms
  Hash#fetch, symbol   824.347k i/100ms
     Hash#[], string   891.232k i/100ms
  Hash#fetch, string   477.032k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     10.523M (± 0.2%) i/s -     53.647M in   5.098233s
  Hash#fetch, symbol      8.244M (± 0.1%) i/s -     42.042M in   5.099554s
     Hash#[], string      8.919M (± 0.1%) i/s -     45.453M in   5.096309s
  Hash#fetch, string      4.770M (± 0.2%) i/s -     23.852M in   5.000232s

Comparison:
     Hash#[], symbol: 10522696.4 i/s
     Hash#[], string:  8918788.8 i/s - 1.18x  (± 0.00) slower
  Hash#fetch, symbol:  8244199.5 i/s - 1.28x  (± 0.00) slower
  Hash#fetch, string:  4770110.6 i/s - 2.21x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   551.972k i/100ms
             Hash#[]   626.993k i/100ms
          Hash#[] ||   566.445k i/100ms
          Hash#[] &&   252.581k i/100ms
          Hash#fetch   388.478k i/100ms
 Hash#fetch fallback   226.575k i/100ms
Calculating -------------------------------------
            Hash#dig      5.528M (± 0.2%) i/s -     28.151M in   5.092216s
             Hash#[]      6.237M (± 0.2%) i/s -     31.350M in   5.026385s
          Hash#[] ||      5.666M (± 0.2%) i/s -     28.889M in   5.098201s
          Hash#[] &&      2.526M (± 0.2%) i/s -     12.882M in   5.099688s
          Hash#fetch      3.888M (± 0.2%) i/s -     19.812M in   5.096367s
 Hash#fetch fallback      2.262M (± 0.1%) i/s -     11.329M in   5.008236s

Comparison:
             Hash#[]:  6237036.4 i/s
          Hash#[] ||:  5666474.3 i/s - 1.10x  (± 0.00) slower
            Hash#dig:  5528171.0 i/s - 1.13x  (± 0.00) slower
          Hash#fetch:  3887566.6 i/s - 1.60x  (± 0.00) slower
          Hash#[] &&:  2525970.9 i/s - 2.47x  (± 0.00) slower
 Hash#fetch fallback:  2262025.6 i/s - 2.76x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   982.507k i/100ms
  Hash#fetch + block   937.553k i/100ms
    Hash#fetch + arg   674.752k i/100ms
Calculating -------------------------------------
  Hash#fetch + const      9.817M (± 0.2%) i/s -     49.125M in   5.004199s
  Hash#fetch + block      9.338M (± 0.2%) i/s -     46.878M in   5.020304s
    Hash#fetch + arg      6.739M (± 0.1%) i/s -     33.738M in   5.006441s

Comparison:
  Hash#fetch + const:  9816848.2 i/s
  Hash#fetch + block:  9337642.8 i/s - 1.05x  (± 0.00) slower
    Hash#fetch + arg:  6738848.5 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    15.172k i/100ms
         sort + to_h     6.984k i/100ms
Calculating -------------------------------------
      sort_by + to_h    151.261k (± 0.3%) i/s -    758.600k in   5.015227s
         sort + to_h     69.713k (± 0.2%) i/s -    349.200k in   5.009125s

Comparison:
      sort_by + to_h:   151260.7 i/s
         sort + to_h:    69713.2 i/s - 2.17x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   110.377k i/100ms
       Hash#each_key   115.849k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.104M (± 0.2%) i/s -      5.629M in   5.099672s
       Hash#each_key      1.157M (± 0.2%) i/s -      5.792M in   5.006040s

Comparison:
       Hash#each_key:  1157096.2 i/s
      Hash#keys.each:  1103843.4 i/s - 1.05x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.381k i/100ms
           Hash#key?   586.203k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     13.639k (± 5.8%) i/s -     69.050k in   5.086405s
           Hash#key?      5.851M (± 0.2%) i/s -     29.310M in   5.009268s

Comparison:
           Hash#key?:  5851202.8 i/s
  Hash#keys.include?:    13639.2 i/s - 429.00x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     2.395k i/100ms
            Hash#[]=     5.585k i/100ms
Calculating -------------------------------------
         Hash#merge!     23.929k (± 0.2%) i/s -    119.750k in   5.004423s
            Hash#[]=     55.906k (± 0.4%) i/s -    284.835k in   5.094976s

Comparison:
            Hash#[]=:    55906.0 i/s
         Hash#merge!:    23928.9 i/s - 2.34x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         2.976k i/100ms
      Hash#merge({})     2.384k i/100ms
 Hash#dup#merge!({})     1.763k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         29.633k (± 0.2%) i/s -    148.800k in   5.021409s
      Hash#merge({})     23.678k (± 0.2%) i/s -    119.200k in   5.034159s
 Hash#dup#merge!({})     17.575k (± 0.2%) i/s -     88.150k in   5.015623s

Comparison:
{}#merge!(Hash) do end:    29633.2 i/s
      Hash#merge({}):    23678.3 i/s - 1.25x  (± 0.00) slower
 Hash#dup#merge!({}):    17575.2 i/s - 1.69x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   222.361k i/100ms
          Hash#merge   200.536k i/100ms
Calculating -------------------------------------
        Hash#**other      2.225M (± 0.3%) i/s -     11.340M in   5.096668s
          Hash#merge      2.007M (± 0.2%) i/s -     10.227M in   5.096868s

Comparison:
        Hash#**other:  2225078.4 i/s
          Hash#merge:  2006601.8 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   950.000  i/100ms
         Hash#merge!     2.353k i/100ms
Calculating -------------------------------------
          Hash#merge      9.381k (± 1.3%) i/s -     47.500k in   5.064062s
         Hash#merge!     23.436k (± 1.6%) i/s -    117.650k in   5.021538s

Comparison:
         Hash#merge!:    23435.7 i/s
          Hash#merge:     9381.4 i/s - 2.50x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      242.507k i/100ms
Array#each             130.576k i/100ms
Array#each_w/_object    99.081k i/100ms
Hash#select-include     41.115k i/100ms
Calculating -------------------------------------
Hash#native-slice         2.429M (± 0.2%) i/s -     12.368M in   5.091934s
Array#each                1.307M (± 0.3%) i/s -      6.659M in   5.093894s
Array#each_w/_object    995.340k (± 0.4%) i/s -      5.053M in   5.076884s
Hash#select-include     414.980k (± 4.1%) i/s -      2.097M in   5.062525s

Comparison:
Hash#native-slice   :  2428923.8 i/s
Array#each          :  1307338.0 i/s - 1.86x  (± 0.00) slower
Array#each_w/_object:   995340.2 i/s - 2.44x  (± 0.00) slower
Hash#select-include :   414980.5 i/s - 5.85x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     2.328k i/100ms
         Hash#value?     2.977k i/100ms
Calculating -------------------------------------
Hash#values.include?     23.277k (± 6.3%) i/s -    116.400k in   5.030440s
         Hash#value?     29.821k (± 0.3%) i/s -    151.827k in   5.091255s

Comparison:
         Hash#value?:    29821.4 i/s
Hash#values.include?:    23276.9 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   427.823k i/100ms
                send   292.615k i/100ms
      method_missing   219.573k i/100ms
Calculating -------------------------------------
                call      4.288M (± 0.3%) i/s -     21.819M in   5.088470s
                send      2.907M (± 0.4%) i/s -     14.631M in   5.032431s
      method_missing      2.196M (± 0.3%) i/s -     11.198M in   5.099631s

Comparison:
                call:  4287969.9 i/s
                send:  2907329.1 i/s - 1.47x  (± 0.00) slower
      method_missing:  2195907.9 i/s - 1.95x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     4.673k i/100ms
      Symbol#to_proc     5.015k i/100ms
Calculating -------------------------------------
               Block     46.886k (± 0.3%) i/s -    238.323k in   5.083120s
      Symbol#to_proc     50.076k (± 0.3%) i/s -    250.750k in   5.007411s

Comparison:
      Symbol#to_proc:    50076.2 i/s
               Block:    46885.6 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   628.097k i/100ms
       block + yield   670.807k i/100ms
        unused block   869.974k i/100ms
               yield   875.084k i/100ms
Calculating -------------------------------------
          block.call      6.336M (± 0.2%) i/s -     32.033M in   5.055703s
       block + yield      6.786M (± 0.1%) i/s -     34.211M in   5.041251s
        unused block      8.727M (± 0.3%) i/s -     44.369M in   5.083850s
               yield      9.065M (± 0.2%) i/s -     45.504M in   5.019599s

Comparison:
               yield:  9065385.2 i/s
        unused block:  8727458.5 i/s - 1.04x  (± 0.00) slower
       block + yield:  6786255.7 i/s - 1.34x  (± 0.00) slower
          block.call:  6336023.4 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   185.889k i/100ms
      range#include?     7.898k i/100ms
       range#member?     7.936k i/100ms
       plain compare   268.655k i/100ms
Calculating -------------------------------------
        range#cover?      1.856M (± 0.1%) i/s -      9.294M in   5.007832s
      range#include?     79.389k (± 1.5%) i/s -    402.798k in   5.074910s
       range#member?     79.543k (± 0.4%) i/s -    404.736k in   5.088344s
       plain compare      2.690M (± 0.5%) i/s -     13.701M in   5.092942s

Comparison:
       plain compare:  2690346.7 i/s
        range#cover?:  1855984.4 i/s - 1.45x  (± 0.00) slower
       range#member?:    79542.9 i/s - 33.82x  (± 0.00) slower
      range#include?:    79388.9 i/s - 33.89x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   576.407k i/100ms
           String#=~   360.412k i/100ms
          Regexp#===   344.170k i/100ms
        String#match   283.782k i/100ms
Calculating -------------------------------------
       String#match?      5.773M (± 0.4%) i/s -     29.397M in   5.092055s
           String#=~      3.610M (± 0.3%) i/s -     18.381M in   5.091302s
          Regexp#===      3.446M (± 0.3%) i/s -     17.553M in   5.093833s
        String#match      2.845M (± 0.3%) i/s -     14.473M in   5.087603s

Comparison:
       String#match?:  5773152.6 i/s
           String#=~:  3610311.8 i/s - 1.60x  (± 0.00) slower
          Regexp#===:  3445897.0 i/s - 1.68x  (± 0.00) slower
        String#match:  2844767.2 i/s - 2.03x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   381.346k i/100ms
      String#casecmp   508.983k i/100ms
Calculating -------------------------------------
String#downcase + ==      3.811M (± 0.3%) i/s -     19.067M in   5.003700s
      String#casecmp      5.090M (± 0.2%) i/s -     25.958M in   5.099501s

Comparison:
      String#casecmp:  5090357.1 i/s
String#downcase + ==:  3810681.5 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   342.125k i/100ms
       String#concat   361.012k i/100ms
       String#append   391.676k i/100ms
         "foo" "bar"   734.709k i/100ms
  "#{'foo'}#{'bar'}"   780.256k i/100ms
Calculating -------------------------------------
            String#+      3.425M (± 0.4%) i/s -     17.448M in   5.094147s
       String#concat      3.602M (± 0.1%) i/s -     18.051M in   5.011137s
       String#append      3.911M (± 0.1%) i/s -     19.584M in   5.006894s
         "foo" "bar"      7.330M (± 0.1%) i/s -     36.735M in   5.011357s
  "#{'foo'}#{'bar'}"      7.784M (± 0.2%) i/s -     39.013M in   5.011703s

Comparison:
  "#{'foo'}#{'bar'}":  7784369.5 i/s
         "foo" "bar":  7330452.3 i/s - 1.06x  (± 0.00) slower
       String#append:  3911375.6 i/s - 1.99x  (± 0.00) slower
       String#concat:  3602104.5 i/s - 2.16x  (± 0.00) slower
            String#+:  3425240.3 i/s - 2.27x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@   677.146k i/100ms
          String#dup   335.245k i/100ms
Calculating -------------------------------------
           String#+@      6.774M (± 0.3%) i/s -     34.534M in   5.098330s
          String#dup      3.351M (± 0.1%) i/s -     16.762M in   5.001564s

Comparison:
           String#+@:  6773724.4 i/s
          String#dup:  3351406.1 i/s - 2.02x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   116.278k i/100ms
       String#match?   255.799k i/100ms
    String#end_with?   368.107k i/100ms
Calculating -------------------------------------
           String#=~      1.166M (± 0.2%) i/s -      5.930M in   5.085098s
       String#match?      2.551M (± 0.2%) i/s -     12.790M in   5.013551s
    String#end_with?      3.684M (± 0.3%) i/s -     18.773M in   5.095726s

Comparison:
    String#end_with?:  3684198.2 i/s
       String#match?:  2551085.9 i/s - 1.44x  (± 0.00) slower
           String#=~:  1166190.4 i/s - 3.16x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    68.988k i/100ms
          String#sub    87.096k i/100ms
String#dup["string"]=
                       114.863k i/100ms
Calculating -------------------------------------
         String#gsub    687.796k (± 0.5%) i/s -      3.449M in   5.015257s
          String#sub    872.430k (± 0.5%) i/s -      4.442M in   5.091540s
String#dup["string"]=
                          1.155M (± 0.2%) i/s -      5.858M in   5.072360s

Comparison:
String#dup["string"]=:  1154894.3 i/s
          String#sub:   872430.5 i/s - 1.32x  (± 0.00) slower
         String#gsub:   687795.5 i/s - 1.68x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    59.475k i/100ms
           String#tr   222.673k i/100ms
Calculating -------------------------------------
         String#gsub    597.198k (± 0.5%) i/s -      3.033M in   5.079213s
           String#tr      1.919M (±29.2%) i/s -      8.462M in   5.219245s

Comparison:
           String#tr:  1919117.7 i/s
         String#gsub:   597197.9 i/s - 3.21x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   594.588k i/100ms
         With Freeze   909.327k i/100ms
Calculating -------------------------------------
      Without Freeze      7.207M (±24.8%) i/s -     30.919M in   5.013638s
         With Freeze     10.886M (±32.2%) i/s -     44.557M in   5.066665s

Comparison:
         With Freeze: 10885800.9 i/s
      Without Freeze:  7207277.7 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     1.412k i/100ms
      String#squeeze    68.629k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     20.430k (± 5.6%) i/s -    101.664k in   5.004272s
      String#squeeze    900.430k (± 0.6%) i/s -      4.530M in   5.030552s

Comparison:
      String#squeeze:   900429.7 i/s
 String#gsub/regex+/:    20430.4 i/s - 44.07x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   174.691k i/100ms
       String#match?   462.562k i/100ms
  String#start_with?   536.870k i/100ms
Calculating -------------------------------------
           String#=~      1.758M (± 0.4%) i/s -      8.909M in   5.068943s
       String#match?      4.633M (± 0.3%) i/s -     23.591M in   5.092453s
  String#start_with?      5.375M (± 0.2%) i/s -     27.380M in   5.094261s

Comparison:
  String#start_with?:  5374773.9 i/s
       String#match?:  4632514.8 i/s - 1.16x  (± 0.00) slower
           String#=~:  1757635.2 i/s - 3.06x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   127.517k i/100ms
    String#[0, n] ==    46.129k i/100ms
   String#[RANGE] ==    41.913k i/100ms
   String#[0...n] ==    27.043k i/100ms
Calculating -------------------------------------
  String#start_with?      1.275M (± 0.1%) i/s -      6.376M in   5.002340s
    String#[0, n] ==    460.485k (± 0.1%) i/s -      2.306M in   5.008754s
   String#[RANGE] ==    419.254k (± 0.1%) i/s -      2.138M in   5.098499s
   String#[0...n] ==    270.263k (± 0.1%) i/s -      1.352M in   5.003096s

Comparison:
  String#start_with?:  1274576.1 i/s
    String#[0, n] ==:   460484.6 i/s - 2.77x  (± 0.00) slower
   String#[RANGE] ==:   419254.2 i/s - 3.04x  (± 0.00) slower
   String#[0...n] ==:   270263.0 i/s - 4.72x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   106.645k i/100ms
 String#sub!'string'    78.704k i/100ms
String#gsub!'string'    48.176k i/100ms
  String#[/regexp/]=    96.344k i/100ms
 String#sub!/regexp/    77.227k i/100ms
String#gsub!/regexp/    39.415k i/100ms
Calculating -------------------------------------
  String#['string']=      1.055M (± 0.2%) i/s -      5.332M in   5.055360s
 String#sub!'string'    780.541k (± 1.5%) i/s -      3.935M in   5.042756s
String#gsub!'string'    485.346k (± 0.8%) i/s -      2.457M in   5.062615s
  String#[/regexp/]=    968.249k (± 0.8%) i/s -      4.914M in   5.074951s
 String#sub!/regexp/    771.289k (± 0.8%) i/s -      3.861M in   5.006645s
String#gsub!/regexp/    390.370k (± 0.6%) i/s -      1.971M in   5.048583s

Comparison:
  String#['string']=:  1054774.3 i/s
  String#[/regexp/]=:   968249.0 i/s - 1.09x  (± 0.00) slower
 String#sub!'string':   780541.0 i/s - 1.35x  (± 0.00) slower
 String#sub!/regexp/:   771288.5 i/s - 1.37x  (± 0.00) slower
String#gsub!'string':   485345.7 i/s - 2.17x  (± 0.00) slower
String#gsub!/regexp/:   390369.7 i/s - 2.70x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub    95.928k i/100ms
        String#chomp   329.880k i/100ms
String#delete_suffix   353.115k i/100ms
Calculating -------------------------------------
          String#sub    955.491k (± 0.5%) i/s -      4.796M in   5.019932s
        String#chomp      3.298M (± 0.1%) i/s -     16.494M in   5.001730s
String#delete_suffix      3.529M (± 0.1%) i/s -     17.656M in   5.002699s

Comparison:
String#delete_suffix:  3529246.5 i/s
        String#chomp:  3297662.6 i/s - 1.07x  (± 0.00) slower
          String#sub:   955490.5 i/s - 3.69x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   362.249k i/100ms
          String#sub    96.629k i/100ms
Calculating -------------------------------------
String#delete_prefix      3.618M (± 0.1%) i/s -     18.112M in   5.006855s
          String#sub    965.916k (± 1.0%) i/s -      4.831M in   5.002404s

Comparison:
String#delete_prefix:  3617533.7 i/s
          String#sub:   965915.9 i/s - 3.75x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   344.427k i/100ms
    String#unpack[0]   266.512k i/100ms
Calculating -------------------------------------
      String#unpack1      3.429M (± 0.1%) i/s -     17.221M in   5.022571s
    String#unpack[0]      2.667M (± 0.1%) i/s -     13.592M in   5.095807s

Comparison:
      String#unpack1:  3428795.9 i/s
    String#unpack[0]:  2667315.8 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    17.973k i/100ms
          Time.parse     6.207k i/100ms
Calculating -------------------------------------
        Time.iso8601    180.707k (± 0.6%) i/s -    916.623k in   5.072623s
          Time.parse     62.217k (± 0.8%) i/s -    316.557k in   5.088283s

Comparison:
        Time.iso8601:   180707.4 i/s
          Time.parse:    62216.5 i/s - 2.90x  (± 0.00) slower

