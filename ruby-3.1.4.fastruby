$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       502.847k i/100ms
Function with splat arguments
                         7.735k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          5.129M (± 4.3%) i/s -     25.645M in   5.009820s
Function with splat arguments
                         77.789k (± 8.7%) i/s -    386.750k in   5.016789s

Comparison:
Function with single Array argument:  5129264.5 i/s
Function with splat arguments:    77789.2 i/s - 65.94x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   843.231k i/100ms
Sequential Assignment
                       902.760k i/100ms
Calculating -------------------------------------
 Parallel Assignment      9.158M (± 3.7%) i/s -     46.378M in   5.071451s
Sequential Assignment
                          9.327M (± 4.6%) i/s -     46.944M in   5.044772s

Comparison:
Sequential Assignment:  9327049.2 i/s
 Parallel Assignment:  9158151.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   318.322k i/100ms
       attr_accessor   370.390k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.120M (± 3.0%) i/s -     15.598M in   5.004128s
       attr_accessor      3.521M (± 4.7%) i/s -     17.779M in   5.060216s

Comparison:
       attr_accessor:  3521309.5 i/s
   getter_and_setter:  3119882.0 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    64.554k i/100ms
         respond_to?   475.177k i/100ms
Calculating -------------------------------------
      begin...rescue    654.273k (± 6.1%) i/s -      3.292M in   5.053422s
         respond_to?      5.094M (± 4.5%) i/s -     25.660M in   5.048149s

Comparison:
         respond_to?:  5093740.2 i/s
      begin...rescue:   654273.0 i/s - 7.79x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   204.892k i/100ms
             &method    77.770k i/100ms
Calculating -------------------------------------
              normal      2.071M (± 4.1%) i/s -     10.449M in   5.056114s
             &method    775.504k (± 5.6%) i/s -      3.888M in   5.031668s

Comparison:
              normal:  2070541.4 i/s
             &method:   775504.3 i/s - 2.67x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       168.000  i/100ms
       define_method   206.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.617k (±20.8%) i/s -      7.224k in   5.107830s
       define_method      2.058k (±29.8%) i/s -      7.622k in   5.038254s

Comparison:
       define_method:     2058.2 i/s
module_eval with string:     1616.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   119.501k i/100ms
       Kernel#format   145.453k i/100ms
            String#%   129.145k i/100ms
Calculating -------------------------------------
         Float#round      1.273M (± 6.8%) i/s -      6.453M in   5.097655s
       Kernel#format      1.453M (± 4.6%) i/s -      7.273M in   5.018396s
            String#%      1.310M (± 3.2%) i/s -      6.586M in   5.032608s

Comparison:
       Kernel#format:  1452537.0 i/s
            String#%:  1310178.7 i/s - 1.11x  (± 0.00) slower
         Float#round:  1272812.5 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   650.087k i/100ms
          OpenStruct   334.356k i/100ms
Calculating -------------------------------------
                Hash      6.571M (± 2.7%) i/s -     33.154M in   5.049381s
          OpenStruct      3.329M (± 3.8%) i/s -     16.718M in   5.029760s

Comparison:
                Hash:  6571138.1 i/s
          OpenStruct:  3328782.4 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   818.840k i/100ms
          OpenStruct     7.349k i/100ms
Calculating -------------------------------------
                Hash      8.609M (± 4.3%) i/s -     43.399M in   5.050523s
          OpenStruct     74.493k (± 5.1%) i/s -    374.799k in   5.044679s

Comparison:
                Hash:  8609433.4 i/s
          OpenStruct:    74493.1 i/s - 115.57x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   432.446k i/100ms
  ancestors.include?    68.620k i/100ms
Calculating -------------------------------------
  less than or equal      4.136M (± 4.3%) i/s -     20.757M in   5.027593s
  ancestors.include?    721.222k (± 4.3%) i/s -      3.637M in   5.052789s

Comparison:
  less than or equal:  4136471.4 i/s
  ancestors.include?:   721221.7 i/s - 5.74x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.531  (± 0.0%) i/s -      3.000  in   5.646050s
         Kernel loop      0.147  (± 0.0%) i/s -      1.000  in   6.781881s

Comparison:
          While Loop:        0.5 i/s
         Kernel loop:        0.1 i/s - 3.60x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.055M i/100ms
         Array#first   907.623k i/100ms
Calculating -------------------------------------
           Array#[0]     10.558M (± 3.7%) i/s -     52.731M in   5.001274s
         Array#first      8.802M (± 4.5%) i/s -     44.474M in   5.062802s

Comparison:
           Array#[0]: 10558106.3 i/s
         Array#first:  8802311.6 i/s - 1.20x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.118M i/100ms
          Array#last   947.778k i/100ms
Calculating -------------------------------------
          Array#[-1]     10.871M (± 2.5%) i/s -     54.763M in   5.040774s
          Array#last      9.173M (± 2.9%) i/s -     46.441M in   5.067111s

Comparison:
          Array#[-1]: 10870774.7 i/s
          Array#last:  9173052.7 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    52.297k i/100ms
Calculating -------------------------------------
                find      0.141  (± 0.0%) i/s -      1.000  in   7.082004s
             bsearch    531.171k (± 3.4%) i/s -      2.667M in   5.027699s

Comparison:
             bsearch:   531170.9 i/s
                find:        0.1 i/s - 3761754.12x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    10.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    105.701  (± 4.7%) i/s -    530.000  in   5.025942s
        Array#insert      0.450  (± 0.0%) i/s -      3.000  in   6.664615s

Comparison:
       Array#unshift:      105.7 i/s
        Array#insert:        0.5 i/s - 234.70x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.467M i/100ms
          Array#size     1.513M i/100ms
         Array#count     1.095M i/100ms
Calculating -------------------------------------
        Array#length     15.397M (± 3.0%) i/s -     77.769M in   5.055650s
          Array#size     15.564M (± 3.3%) i/s -     78.695M in   5.062173s
         Array#count     11.597M (± 3.7%) i/s -     58.059M in   5.013842s

Comparison:
          Array#size: 15563734.4 i/s
        Array#length: 15396995.6 i/s - same-ish: difference falls within error
         Array#count: 11596595.2 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    30.061k i/100ms
        Array#sample   685.555k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    305.467k (± 4.1%) i/s -      1.533M in   5.027862s
        Array#sample      6.982M (± 3.6%) i/s -     34.963M in   5.014769s

Comparison:
        Array#sample:  6981581.4 i/s
 Array#shuffle.first:   305467.0 i/s - 22.86x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    36.571k i/100ms
          Date.parse    20.405k i/100ms
Calculating -------------------------------------
        Date.iso8601    374.854k (± 2.7%) i/s -      1.902M in   5.076978s
          Date.parse    196.528k (± 4.0%) i/s -    999.845k in   5.095943s

Comparison:
        Date.iso8601:   374853.6 i/s
          Date.parse:   196527.9 i/s - 1.91x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    11.455k i/100ms
           Array#map    16.931k i/100ms
Calculating -------------------------------------
   Array#each + push    114.339k (± 4.0%) i/s -    572.750k in   5.017897s
           Array#map    168.936k (± 3.5%) i/s -    846.550k in   5.017519s

Comparison:
           Array#map:   168935.6 i/s
   Array#each + push:   114338.9 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    18.195k i/100ms
               #each    20.094k i/100ms
Calculating -------------------------------------
            For loop    181.214k (± 5.3%) i/s -    909.750k in   5.035687s
               #each    199.417k (± 3.7%) i/s -      1.005M in   5.045487s

Comparison:
               #each:   199417.1 i/s
            For loop:   181213.9 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    25.075k i/100ms
     each_with_index    11.956k i/100ms
Calculating -------------------------------------
          While Loop    249.025k (± 3.3%) i/s -      1.254M in   5.040543s
     each_with_index    119.691k (± 3.5%) i/s -    597.800k in   5.001004s

Comparison:
          While Loop:   249024.8 i/s
     each_with_index:   119690.9 i/s - 2.08x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    67.359k i/100ms
      inject to_proc     1.397k i/100ms
        inject block     1.250k i/100ms
Calculating -------------------------------------
       inject symbol    681.289k (± 3.8%) i/s -      3.435M in   5.050135s
      inject to_proc     14.002k (± 3.4%) i/s -     71.247k in   5.094602s
        inject block     12.732k (± 3.3%) i/s -     63.750k in   5.012836s

Comparison:
       inject symbol:   681288.6 i/s
      inject to_proc:    14001.5 i/s - 48.66x  (± 0.00) slower
        inject block:    12731.8 i/s - 53.51x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     4.746k i/100ms
   Array#map.flatten     2.574k i/100ms
      Array#flat_map     5.964k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     47.212k (± 6.7%) i/s -    237.300k in   5.053580s
   Array#map.flatten     24.470k (± 6.8%) i/s -    123.552k in   5.075153s
      Array#flat_map     58.683k (± 2.9%) i/s -    298.200k in   5.085962s

Comparison:
      Array#flat_map:    58683.2 i/s
Array#map.flatten(1):    47211.6 i/s - 1.24x  (± 0.00) slower
   Array#map.flatten:    24470.0 i/s - 2.40x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    18.125k i/100ms
  Array#reverse_each    18.330k i/100ms
Calculating -------------------------------------
  Array#reverse.each    190.461k (± 3.8%) i/s -    960.625k in   5.051482s
  Array#reverse_each    196.051k (± 3.4%) i/s -    989.820k in   5.054808s

Comparison:
  Array#reverse_each:   196051.4 i/s
  Array#reverse.each:   190460.9 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        13.228k i/100ms
   Enumerable#detect    55.326k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        132.235k (± 4.1%) i/s -      2.646M in  20.043796s
   Enumerable#detect    497.966k (± 6.8%) i/s -      9.959M in  20.094348s

Comparison:
   Enumerable#detect:   497965.6 i/s
Enumerable#select.first:   132235.3 i/s - 3.77x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       152.056k i/100ms
Enumerable#select.last
                        11.067k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.595M (± 3.8%) i/s -      8.059M in   5.059593s
Enumerable#select.last
                        108.664k (± 5.0%) i/s -    542.283k in   5.003484s

Comparison:
Enumerable#reverse.detect:  1595211.2 i/s
Enumerable#select.last:   108663.6 i/s - 14.68x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.316k i/100ms
  Enumerable#sort_by     3.162k i/100ms
     Enumerable#sort     1.581k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         33.373k (± 3.6%) i/s -    169.116k in   5.074394s
  Enumerable#sort_by     32.148k (± 4.3%) i/s -    161.262k in   5.026225s
     Enumerable#sort     16.040k (± 3.3%) i/s -     80.631k in   5.032808s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    33373.3 i/s
  Enumerable#sort_by:    32148.1 i/s - same-ish: difference falls within error
     Enumerable#sort:    16039.9 i/s - 2.08x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    11.577k i/100ms
Enumerable#sort_by...first
                         5.787k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    111.470k (± 6.4%) i/s -    555.696k in   5.007190s
Enumerable#sort_by...first
                         53.855k (± 7.3%) i/s -    271.989k in   5.078914s

Comparison:
   Enumerable#min_by:   111469.9 i/s
Enumerable#sort_by...first:    53855.2 i/s - 2.07x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   251.053k i/100ms
            Hash#dup   189.571k i/100ms
Calculating -------------------------------------
              Hash[]      2.384M (± 3.6%) i/s -     12.051M in   5.061198s
            Hash#dup      1.701M (± 4.3%) i/s -      8.531M in   5.025394s

Comparison:
              Hash[]:  2383932.9 i/s
            Hash#dup:  1700767.9 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.117M i/100ms
  Hash#fetch, symbol   898.294k i/100ms
     Hash#[], string   953.853k i/100ms
  Hash#fetch, string   510.531k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     11.203M (± 3.2%) i/s -     56.975M in   5.090867s
  Hash#fetch, symbol      9.000M (± 3.0%) i/s -     45.813M in   5.095046s
     Hash#[], string      9.692M (± 2.4%) i/s -     48.647M in   5.022024s
  Hash#fetch, string      5.230M (± 3.8%) i/s -     26.548M in   5.084028s

Comparison:
     Hash#[], symbol: 11203301.3 i/s
     Hash#[], string:  9692348.2 i/s - 1.16x  (± 0.00) slower
  Hash#fetch, symbol:  9000084.8 i/s - 1.24x  (± 0.00) slower
  Hash#fetch, string:  5230225.7 i/s - 2.14x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   668.114k i/100ms
             Hash#[]   785.245k i/100ms
          Hash#[] ||   689.493k i/100ms
          Hash#[] &&   310.824k i/100ms
          Hash#fetch   457.440k i/100ms
 Hash#fetch fallback   262.893k i/100ms
Calculating -------------------------------------
            Hash#dig      6.593M (± 3.2%) i/s -     33.406M in   5.072473s
             Hash#[]      7.743M (± 5.8%) i/s -     39.262M in   5.091030s
          Hash#[] ||      7.221M (± 4.2%) i/s -     36.543M in   5.070601s
          Hash#[] &&      3.077M (± 3.5%) i/s -     15.541M in   5.056650s
          Hash#fetch      4.645M (± 3.2%) i/s -     23.329M in   5.028042s
 Hash#fetch fallback      2.580M (± 4.3%) i/s -     12.882M in   5.002100s

Comparison:
             Hash#[]:  7742621.6 i/s
          Hash#[] ||:  7220764.9 i/s - same-ish: difference falls within error
            Hash#dig:  6592747.8 i/s - 1.17x  (± 0.00) slower
          Hash#fetch:  4644997.7 i/s - 1.67x  (± 0.00) slower
          Hash#[] &&:  3077433.1 i/s - 2.52x  (± 0.00) slower
 Hash#fetch fallback:  2580377.0 i/s - 3.00x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.115M i/100ms
  Hash#fetch + block   958.025k i/100ms
    Hash#fetch + arg   770.473k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     11.028M (± 2.7%) i/s -     55.755M in   5.059666s
  Hash#fetch + block     10.168M (± 4.1%) i/s -     50.775M in   5.002672s
    Hash#fetch + arg      7.718M (± 2.6%) i/s -     39.294M in   5.094771s

Comparison:
  Hash#fetch + const: 11028125.5 i/s
  Hash#fetch + block: 10167573.6 i/s - 1.08x  (± 0.00) slower
    Hash#fetch + arg:  7718209.7 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    17.110k i/100ms
         sort + to_h     7.253k i/100ms
Calculating -------------------------------------
      sort_by + to_h    173.507k (± 2.9%) i/s -    872.610k in   5.033800s
         sort + to_h     71.666k (± 4.0%) i/s -    362.650k in   5.069155s

Comparison:
      sort_by + to_h:   173506.6 i/s
         sort + to_h:    71666.4 i/s - 2.42x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   116.854k i/100ms
       Hash#each_key   130.858k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.188M (± 3.3%) i/s -      5.960M in   5.023557s
       Hash#each_key      1.288M (± 3.5%) i/s -      6.543M in   5.087596s

Comparison:
       Hash#each_key:  1287709.5 i/s
      Hash#keys.each:  1187778.3 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     4.341k i/100ms
           Hash#key?   653.294k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     42.472k (± 7.8%) i/s -    212.709k in   5.048924s
           Hash#key?      6.634M (± 3.2%) i/s -     33.318M in   5.027748s

Comparison:
           Hash#key?:  6634176.9 i/s
  Hash#keys.include?:    42472.4 i/s - 156.20x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     2.656k i/100ms
            Hash#[]=     6.366k i/100ms
Calculating -------------------------------------
         Hash#merge!     26.881k (± 2.6%) i/s -    135.456k in   5.042631s
            Hash#[]=     63.806k (± 4.3%) i/s -    324.666k in   5.098386s

Comparison:
            Hash#[]=:    63805.7 i/s
         Hash#merge!:    26881.5 i/s - 2.37x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.308k i/100ms
      Hash#merge({})     2.584k i/100ms
 Hash#dup#merge!({})     1.945k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         32.245k (± 4.3%) i/s -    162.092k in   5.036479s
      Hash#merge({})     25.300k (± 4.5%) i/s -    126.616k in   5.014667s
 Hash#dup#merge!({})     18.697k (± 5.2%) i/s -     95.305k in   5.111801s

Comparison:
{}#merge!(Hash) do end:    32245.3 i/s
      Hash#merge({}):    25300.4 i/s - 1.27x  (± 0.00) slower
 Hash#dup#merge!({}):    18697.2 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   254.668k i/100ms
          Hash#merge   232.310k i/100ms
Calculating -------------------------------------
        Hash#**other      2.474M (± 7.5%) i/s -     12.479M in   5.077913s
          Hash#merge      2.310M (± 3.7%) i/s -     11.616M in   5.036239s

Comparison:
        Hash#**other:  2473806.8 i/s
          Hash#merge:  2310029.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   914.000  i/100ms
         Hash#merge!     2.638k i/100ms
Calculating -------------------------------------
          Hash#merge      9.404k (± 4.7%) i/s -     47.528k in   5.065255s
         Hash#merge!     26.194k (± 2.8%) i/s -    131.900k in   5.039577s

Comparison:
         Hash#merge!:    26194.0 i/s
          Hash#merge:     9403.5 i/s - 2.79x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      276.636k i/100ms
Array#each             145.554k i/100ms
Array#each_w/_object   104.232k i/100ms
Hash#select-include     47.774k i/100ms
Calculating -------------------------------------
Hash#native-slice         2.774M (± 3.8%) i/s -     14.108M in   5.092885s
Array#each                1.468M (± 3.5%) i/s -      7.423M in   5.064981s
Array#each_w/_object      1.070M (± 3.0%) i/s -      5.420M in   5.070489s
Hash#select-include     480.138k (± 4.3%) i/s -      2.436M in   5.084276s

Comparison:
Hash#native-slice   :  2774470.7 i/s
Array#each          :  1467553.0 i/s - 1.89x  (± 0.00) slower
Array#each_w/_object:  1070003.1 i/s - 2.59x  (± 0.00) slower
Hash#select-include :   480137.5 i/s - 5.78x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   633.000  i/100ms
         Hash#value?   584.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      6.197k (± 4.2%) i/s -     31.017k in   5.014736s
         Hash#value?      5.829k (± 3.1%) i/s -     29.200k in   5.014896s

Comparison:
Hash#values.include?:     6197.1 i/s
         Hash#value?:     5828.5 i/s - same-ish: difference falls within error

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   434.222k i/100ms
                send   343.550k i/100ms
      method_missing   264.553k i/100ms
Calculating -------------------------------------
                call      4.674M (± 2.9%) i/s -     23.448M in   5.020896s
                send      3.462M (± 5.9%) i/s -     17.521M in   5.081900s
      method_missing      2.600M (± 3.9%) i/s -     13.228M in   5.095137s

Comparison:
                call:  4674242.5 i/s
                send:  3462221.7 i/s - 1.35x  (± 0.00) slower
      method_missing:  2600227.0 i/s - 1.80x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     5.163k i/100ms
      Symbol#to_proc     5.714k i/100ms
Calculating -------------------------------------
               Block     52.877k (± 4.1%) i/s -    268.476k in   5.086796s
      Symbol#to_proc     58.415k (± 3.6%) i/s -    297.128k in   5.093435s

Comparison:
      Symbol#to_proc:    58415.1 i/s
               Block:    52877.2 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   694.740k i/100ms
       block + yield   748.386k i/100ms
        unused block   942.832k i/100ms
               yield   966.303k i/100ms
Calculating -------------------------------------
          block.call      6.816M (± 4.0%) i/s -     34.042M in   5.003116s
       block + yield      7.533M (± 3.2%) i/s -     38.168M in   5.072407s
        unused block      9.699M (± 4.7%) i/s -     49.027M in   5.067512s
               yield      9.635M (± 4.0%) i/s -     48.315M in   5.022514s

Comparison:
        unused block:  9699155.2 i/s
               yield:  9635461.9 i/s - same-ish: difference falls within error
       block + yield:  7532599.4 i/s - 1.29x  (± 0.00) slower
          block.call:  6816271.6 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   217.565k i/100ms
      range#include?     8.620k i/100ms
       range#member?     8.544k i/100ms
       plain compare   318.415k i/100ms
Calculating -------------------------------------
        range#cover?      2.213M (± 3.1%) i/s -     11.096M in   5.018723s
      range#include?     86.447k (± 2.3%) i/s -    439.620k in   5.088317s
       range#member?     87.075k (± 4.0%) i/s -    435.744k in   5.012677s
       plain compare      3.242M (± 3.8%) i/s -     16.239M in   5.016252s

Comparison:
       plain compare:  3242280.3 i/s
        range#cover?:  2213130.8 i/s - 1.47x  (± 0.00) slower
       range#member?:    87074.7 i/s - 37.24x  (± 0.00) slower
      range#include?:    86447.3 i/s - 37.51x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   660.071k i/100ms
           String#=~   404.229k i/100ms
          Regexp#===   374.807k i/100ms
        String#match   316.244k i/100ms
Calculating -------------------------------------
       String#match?      6.515M (± 3.6%) i/s -     33.004M in   5.072349s
           String#=~      3.997M (± 3.5%) i/s -     20.211M in   5.063396s
          Regexp#===      3.612M (± 5.5%) i/s -     18.366M in   5.101886s
        String#match      3.074M (± 4.9%) i/s -     15.496M in   5.054104s

Comparison:
       String#match?:  6515438.7 i/s
           String#=~:  3996918.2 i/s - 1.63x  (± 0.00) slower
          Regexp#===:  3611744.7 i/s - 1.80x  (± 0.00) slower
        String#match:  3074093.2 i/s - 2.12x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   416.437k i/100ms
      String#casecmp   563.779k i/100ms
Calculating -------------------------------------
String#downcase + ==      4.211M (± 2.8%) i/s -     21.238M in   5.047445s
      String#casecmp      5.692M (± 2.7%) i/s -     28.753M in   5.054946s

Comparison:
      String#casecmp:  5692344.7 i/s
String#downcase + ==:  4211202.8 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   398.062k i/100ms
       String#concat   412.102k i/100ms
       String#append   452.849k i/100ms
         "foo" "bar"   924.156k i/100ms
  "#{'foo'}#{'bar'}"   890.282k i/100ms
Calculating -------------------------------------
            String#+      3.997M (± 3.4%) i/s -     20.301M in   5.085298s
       String#concat      4.103M (± 3.3%) i/s -     20.605M in   5.027248s
       String#append      4.575M (± 2.8%) i/s -     23.095M in   5.052058s
         "foo" "bar"      9.157M (± 3.3%) i/s -     46.208M in   5.051717s
  "#{'foo'}#{'bar'}"      8.853M (± 4.0%) i/s -     44.514M in   5.037239s

Comparison:
         "foo" "bar":  9157467.3 i/s
  "#{'foo'}#{'bar'}":  8852560.2 i/s - same-ish: difference falls within error
       String#append:  4574991.1 i/s - 2.00x  (± 0.00) slower
       String#concat:  4103452.4 i/s - 2.23x  (± 0.00) slower
            String#+:  3996892.4 i/s - 2.29x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@   720.094k i/100ms
          String#dup   378.694k i/100ms
Calculating -------------------------------------
           String#+@      7.228M (± 3.2%) i/s -     36.725M in   5.086568s
          String#dup      3.779M (± 3.2%) i/s -     18.935M in   5.015650s

Comparison:
           String#+@:  7227786.1 i/s
          String#dup:  3779007.0 i/s - 1.91x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   133.643k i/100ms
       String#match?   291.394k i/100ms
    String#end_with?   420.709k i/100ms
Calculating -------------------------------------
           String#=~      1.326M (± 3.0%) i/s -      6.682M in   5.045772s
       String#match?      2.878M (± 4.0%) i/s -     14.570M in   5.070942s
    String#end_with?      4.135M (± 3.5%) i/s -     21.035M in   5.093884s

Comparison:
    String#end_with?:  4135141.6 i/s
       String#match?:  2878043.4 i/s - 1.44x  (± 0.00) slower
           String#=~:  1325560.8 i/s - 3.12x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    75.836k i/100ms
          String#sub    93.325k i/100ms
String#dup["string"]=
                       130.998k i/100ms
Calculating -------------------------------------
         String#gsub    762.928k (± 5.1%) i/s -      3.868M in   5.084711s
          String#sub    944.904k (± 3.2%) i/s -      4.760M in   5.042434s
String#dup["string"]=
                          1.318M (± 3.7%) i/s -      6.681M in   5.078028s

Comparison:
String#dup["string"]=:  1317559.1 i/s
          String#sub:   944904.3 i/s - 1.39x  (± 0.00) slower
         String#gsub:   762927.6 i/s - 1.73x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    64.735k i/100ms
           String#tr   248.948k i/100ms
Calculating -------------------------------------
         String#gsub    659.784k (± 4.4%) i/s -      3.301M in   5.014384s
           String#tr      2.560M (± 3.0%) i/s -     12.945M in   5.060658s

Comparison:
           String#tr:  2560437.6 i/s
         String#gsub:   659783.9 i/s - 3.88x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   873.142k i/100ms
         With Freeze     1.253M i/100ms
Calculating -------------------------------------
      Without Freeze      8.727M (± 4.3%) i/s -     43.657M in   5.012988s
         With Freeze     12.437M (± 2.1%) i/s -     62.640M in   5.038992s

Comparison:
         With Freeze: 12436766.1 i/s
      Without Freeze:  8726996.9 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.372k i/100ms
      String#squeeze   120.230k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     23.547k (± 3.1%) i/s -    118.600k in   5.042002s
      String#squeeze      1.209M (± 4.9%) i/s -      6.132M in   5.083130s

Comparison:
      String#squeeze:  1209458.6 i/s
 String#gsub/regex+/:    23546.9 i/s - 51.36x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   190.486k i/100ms
       String#match?   502.240k i/100ms
  String#start_with?   587.892k i/100ms
Calculating -------------------------------------
           String#=~      1.997M (± 3.4%) i/s -     10.096M in   5.061909s
       String#match?      5.078M (± 3.9%) i/s -     25.614M in   5.052740s
  String#start_with?      5.845M (± 2.7%) i/s -     29.395M in   5.032673s

Comparison:
  String#start_with?:  5845326.0 i/s
       String#match?:  5077655.4 i/s - 1.15x  (± 0.00) slower
           String#=~:  1997048.0 i/s - 2.93x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   167.437k i/100ms
    String#[0, n] ==    55.378k i/100ms
   String#[RANGE] ==    50.767k i/100ms
   String#[0...n] ==    31.332k i/100ms
Calculating -------------------------------------
  String#start_with?      1.647M (± 2.9%) i/s -      8.372M in   5.088810s
    String#[0, n] ==    555.200k (± 2.7%) i/s -      2.824M in   5.090856s
   String#[RANGE] ==    504.080k (± 4.0%) i/s -      2.538M in   5.044262s
   String#[0...n] ==    314.476k (± 3.6%) i/s -      1.598M in   5.088219s

Comparison:
  String#start_with?:  1646580.0 i/s
    String#[0, n] ==:   555200.2 i/s - 2.97x  (± 0.00) slower
   String#[RANGE] ==:   504079.6 i/s - 3.27x  (± 0.00) slower
   String#[0...n] ==:   314476.3 i/s - 5.24x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   120.804k i/100ms
 String#sub!'string'    84.456k i/100ms
String#gsub!'string'    47.899k i/100ms
  String#[/regexp/]=   110.423k i/100ms
 String#sub!/regexp/    82.420k i/100ms
String#gsub!/regexp/    37.395k i/100ms
Calculating -------------------------------------
  String#['string']=      1.255M (± 4.5%) i/s -      6.282M in   5.019209s
 String#sub!'string'    866.644k (± 3.9%) i/s -      4.392M in   5.076066s
String#gsub!'string'    527.214k (± 3.6%) i/s -      2.682M in   5.094759s
  String#[/regexp/]=      1.124M (± 3.3%) i/s -      5.632M in   5.015146s
 String#sub!/regexp/    861.873k (± 6.7%) i/s -      4.368M in   5.092611s
String#gsub!/regexp/    430.307k (± 4.2%) i/s -      2.169M in   5.049736s

Comparison:
  String#['string']=:  1254566.6 i/s
  String#[/regexp/]=:  1124193.0 i/s - 1.12x  (± 0.00) slower
 String#sub!'string':   866644.0 i/s - 1.45x  (± 0.00) slower
 String#sub!/regexp/:   861873.5 i/s - 1.46x  (± 0.00) slower
String#gsub!'string':   527214.3 i/s - 2.38x  (± 0.00) slower
String#gsub!/regexp/:   430306.5 i/s - 2.92x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   107.126k i/100ms
        String#chomp   381.197k i/100ms
String#delete_suffix   404.315k i/100ms
Calculating -------------------------------------
          String#sub      1.101M (± 4.4%) i/s -      5.571M in   5.071844s
        String#chomp      3.763M (± 3.7%) i/s -     19.060M in   5.072386s
String#delete_suffix      4.004M (± 6.2%) i/s -     20.216M in   5.071825s

Comparison:
String#delete_suffix:  4004065.2 i/s
        String#chomp:  3762960.5 i/s - same-ish: difference falls within error
          String#sub:  1100715.3 i/s - 3.64x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   418.544k i/100ms
          String#sub   110.953k i/100ms
Calculating -------------------------------------
String#delete_prefix      4.176M (± 3.4%) i/s -     20.927M in   5.017831s
          String#sub      1.122M (± 3.9%) i/s -      5.659M in   5.051624s

Comparison:
String#delete_prefix:  4175613.3 i/s
          String#sub:  1121999.0 i/s - 3.72x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   412.517k i/100ms
    String#unpack[0]   306.518k i/100ms
Calculating -------------------------------------
      String#unpack1      4.109M (± 2.8%) i/s -     20.626M in   5.023896s
    String#unpack[0]      3.160M (± 3.1%) i/s -     15.939M in   5.048615s

Comparison:
      String#unpack1:  4108821.2 i/s
    String#unpack[0]:  3160262.7 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    19.333k i/100ms
          Time.parse     6.329k i/100ms
Calculating -------------------------------------
        Time.iso8601    195.259k (± 4.5%) i/s -    985.983k in   5.060734s
          Time.parse     62.851k (± 3.7%) i/s -    316.450k in   5.042272s

Comparison:
        Time.iso8601:   195259.3 i/s
          Time.parse:    62850.7 i/s - 3.11x  (± 0.00) slower

