$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       764.530k i/100ms
Function with splat arguments
                        20.191k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.689M (± 0.6%) i/s -     38.991M in   5.071370s
Function with splat arguments
                        216.453k (± 5.5%) i/s -      1.090M in   5.057900s

Comparison:
Function with single Array argument:  7688769.5 i/s
Function with splat arguments:   216452.9 i/s - 35.52x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.010M i/100ms
Sequential Assignment
                         1.017M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.070M (± 0.2%) i/s -     50.499M in   5.014819s
Sequential Assignment
                         10.136M (± 0.9%) i/s -     50.870M in   5.019192s

Comparison:
Sequential Assignment: 10135884.7 i/s
 Parallel Assignment: 10069948.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   472.868k i/100ms
       attr_accessor   558.091k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.782M (± 0.8%) i/s -     24.116M in   5.043100s
       attr_accessor      5.587M (± 1.2%) i/s -     28.463M in   5.094974s

Comparison:
       attr_accessor:  5587193.8 i/s
   getter_and_setter:  4782366.3 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    89.187k i/100ms
         respond_to?   768.662k i/100ms
Calculating -------------------------------------
      begin...rescue    898.825k (± 1.7%) i/s -      4.549M in   5.061908s
         respond_to?      7.697M (± 1.0%) i/s -     39.202M in   5.093636s

Comparison:
         respond_to?:  7696926.0 i/s
      begin...rescue:   898824.6 i/s - 8.56x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   294.514k i/100ms
             &method   120.636k i/100ms
Calculating -------------------------------------
              normal      2.966M (± 0.4%) i/s -     15.020M in   5.063853s
             &method      1.202M (± 0.3%) i/s -      6.032M in   5.018038s

Comparison:
              normal:  2966217.1 i/s
             &method:  1202038.4 i/s - 2.47x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       242.000  i/100ms
       define_method   296.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.257k (±22.0%) i/s -     10.406k in   5.240303s
       define_method      3.247k (±19.9%) i/s -     14.800k in   5.069631s

Comparison:
       define_method:     3247.1 i/s
module_eval with string:     2256.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   259.222k i/100ms
       Kernel#format   205.074k i/100ms
            String#%   175.081k i/100ms
Calculating -------------------------------------
         Float#round      2.625M (± 0.5%) i/s -     13.220M in   5.036547s
       Kernel#format      2.041M (± 0.6%) i/s -     10.254M in   5.023204s
            String#%      1.767M (± 1.0%) i/s -      8.929M in   5.054147s

Comparison:
         Float#round:  2624948.1 i/s
       Kernel#format:  2041337.6 i/s - 1.29x  (± 0.00) slower
            String#%:  1766859.2 i/s - 1.49x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   890.120k i/100ms
          OpenStruct   500.843k i/100ms
Calculating -------------------------------------
                Hash      8.814M (± 0.4%) i/s -     44.506M in   5.049595s
          OpenStruct      4.943M (± 0.5%) i/s -     25.042M in   5.066586s

Comparison:
                Hash:  8813896.7 i/s
          OpenStruct:  4942735.1 i/s - 1.78x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.104M i/100ms
          OpenStruct     9.325k i/100ms
Calculating -------------------------------------
                Hash     11.050M (± 0.3%) i/s -     56.325M in   5.097324s
          OpenStruct     92.924k (± 3.2%) i/s -    466.250k in   5.022587s

Comparison:
                Hash: 11050036.1 i/s
          OpenStruct:    92923.7 i/s - 118.92x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   576.011k i/100ms
  ancestors.include?   122.985k i/100ms
Calculating -------------------------------------
  less than or equal      5.904M (± 1.7%) i/s -     29.953M in   5.074705s
  ancestors.include?      1.228M (± 1.5%) i/s -      6.149M in   5.008598s

Comparison:
  less than or equal:  5904058.4 i/s
  ancestors.include?:  1227999.3 i/s - 4.81x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.671  (± 0.0%) i/s -      4.000  in   5.963711s
         Kernel loop      0.214  (± 0.0%) i/s -      2.000  in   9.347658s

Comparison:
          While Loop:        0.7 i/s
         Kernel loop:        0.2 i/s - 3.14x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.482M i/100ms
         Array#first     1.303M i/100ms
Calculating -------------------------------------
           Array#[0]     15.364M (± 1.0%) i/s -     77.080M in   5.017283s
         Array#first     13.157M (± 1.2%) i/s -     66.447M in   5.051115s

Comparison:
           Array#[0]: 15364326.0 i/s
         Array#first: 13156740.1 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.555M i/100ms
          Array#last     1.340M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.836M (± 1.6%) i/s -     79.303M in   5.008932s
          Array#last     13.468M (± 1.8%) i/s -     68.364M in   5.077598s

Comparison:
          Array#[-1]: 15836335.9 i/s
          Array#last: 13468309.5 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    96.728k i/100ms
Calculating -------------------------------------
                find      0.271  (± 0.0%) i/s -      2.000  in   7.366979s
             bsearch    966.015k (± 1.5%) i/s -      4.836M in   5.007778s

Comparison:
             bsearch:   966015.4 i/s
                find:        0.3 i/s - 3558307.68x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    18.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    191.211  (± 2.1%) i/s -    972.000  in   5.086125s
        Array#insert      1.442  (± 0.0%) i/s -      8.000  in   5.549345s

Comparison:
       Array#unshift:      191.2 i/s
        Array#insert:        1.4 i/s - 132.62x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.132M i/100ms
          Array#size     2.119M i/100ms
         Array#count     1.631M i/100ms
Calculating -------------------------------------
        Array#length     21.336M (± 1.0%) i/s -    108.712M in   5.095778s
          Array#size     21.236M (± 0.8%) i/s -    108.068M in   5.089325s
         Array#count     16.337M (± 0.2%) i/s -     83.174M in   5.091054s

Comparison:
        Array#length: 21335726.2 i/s
          Array#size: 21235670.8 i/s - same-ish: difference falls within error
         Array#count: 16337304.1 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.043k i/100ms
        Array#sample     1.037M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    453.350k (± 0.9%) i/s -      2.297M in   5.067549s
        Array#sample     10.337M (± 0.3%) i/s -     51.840M in   5.015255s

Comparison:
        Array#sample: 10336645.3 i/s
 Array#shuffle.first:   453349.8 i/s - 22.80x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    64.120k i/100ms
          Date.parse    32.108k i/100ms
Calculating -------------------------------------
        Date.iso8601    636.320k (± 2.2%) i/s -      3.206M in   5.041171s
          Date.parse    319.190k (± 0.5%) i/s -      1.605M in   5.029716s

Comparison:
        Date.iso8601:   636319.9 i/s
          Date.parse:   319190.3 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.124k i/100ms
           Array#map    25.045k i/100ms
Calculating -------------------------------------
   Array#each + push    182.874k (± 1.7%) i/s -    924.324k in   5.055859s
           Array#map    252.177k (± 1.2%) i/s -      1.277M in   5.065784s

Comparison:
           Array#map:   252176.9 i/s
   Array#each + push:   182874.1 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    28.899k i/100ms
               #each    31.857k i/100ms
Calculating -------------------------------------
            For loop    294.293k (± 2.0%) i/s -      1.474M in   5.010113s
               #each    316.910k (± 1.1%) i/s -      1.593M in   5.026774s

Comparison:
               #each:   316910.4 i/s
            For loop:   294292.7 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.824k i/100ms
     each_with_index    18.709k i/100ms
Calculating -------------------------------------
          While Loop    278.197k (± 0.2%) i/s -      1.391M in   5.000789s
     each_with_index    188.254k (± 0.3%) i/s -    954.159k in   5.068525s

Comparison:
          While Loop:   278197.3 i/s
     each_with_index:   188253.8 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol   125.384k i/100ms
      inject to_proc     1.767k i/100ms
        inject block     2.004k i/100ms
Calculating -------------------------------------
       inject symbol      1.250M (± 0.9%) i/s -      6.269M in   5.016159s
      inject to_proc     17.676k (± 0.5%) i/s -     90.117k in   5.098284s
        inject block     19.873k (± 0.5%) i/s -    100.200k in   5.042069s

Comparison:
       inject symbol:  1249893.7 i/s
        inject block:    19873.3 i/s - 62.89x  (± 0.00) slower
      inject to_proc:    17676.3 i/s - 70.71x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     7.074k i/100ms
   Array#map.flatten     4.191k i/100ms
      Array#flat_map     8.772k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     72.587k (± 1.2%) i/s -    367.848k in   5.068531s
   Array#map.flatten     42.532k (± 1.1%) i/s -    213.741k in   5.026110s
      Array#flat_map     91.820k (± 0.5%) i/s -    464.916k in   5.063462s

Comparison:
      Array#flat_map:    91820.0 i/s
Array#map.flatten(1):    72586.8 i/s - 1.26x  (± 0.00) slower
   Array#map.flatten:    42531.8 i/s - 2.16x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    30.540k i/100ms
  Array#reverse_each    31.625k i/100ms
Calculating -------------------------------------
  Array#reverse.each    306.988k (± 0.4%) i/s -      1.558M in   5.073680s
  Array#reverse_each    316.427k (± 0.4%) i/s -      1.613M in   5.097229s

Comparison:
  Array#reverse_each:   316427.1 i/s
  Array#reverse.each:   306988.4 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.436k i/100ms
   Enumerable#detect    83.212k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        203.887k (± 0.4%) i/s -      4.087M in  20.046758s
   Enumerable#detect    837.551k (± 0.9%) i/s -     16.809M in  20.070622s

Comparison:
   Enumerable#detect:   837550.7 i/s
Enumerable#select.first:   203886.6 i/s - 4.11x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       247.056k i/100ms
Enumerable#select.last
                        17.681k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.437M (± 0.4%) i/s -     12.353M in   5.069459s
Enumerable#select.last
                        171.509k (± 1.8%) i/s -    866.369k in   5.053349s

Comparison:
Enumerable#reverse.detect:  2436754.4 i/s
Enumerable#select.last:   171509.3 i/s - 14.21x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.955k i/100ms
  Enumerable#sort_by     4.753k i/100ms
     Enumerable#sort     2.366k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         51.267k (± 0.8%) i/s -    257.660k in   5.026202s
  Enumerable#sort_by     49.388k (± 0.9%) i/s -    247.156k in   5.004765s
     Enumerable#sort     23.631k (± 0.5%) i/s -    118.300k in   5.006166s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    51266.5 i/s
  Enumerable#sort_by:    49387.9 i/s - 1.04x  (± 0.00) slower
     Enumerable#sort:    23631.5 i/s - 2.17x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.343k i/100ms
Enumerable#sort_by...first
                         8.560k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    173.381k (± 0.5%) i/s -    867.150k in   5.001546s
Enumerable#sort_by...first
                         84.824k (± 0.6%) i/s -    428.000k in   5.045934s

Comparison:
   Enumerable#min_by:   173380.9 i/s
Enumerable#sort_by...first:    84824.0 i/s - 2.04x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   418.846k i/100ms
            Hash#dup   290.571k i/100ms
Calculating -------------------------------------
              Hash[]      3.739M (± 1.2%) i/s -     18.848M in   5.041045s
            Hash#dup      3.080M (± 1.0%) i/s -     15.691M in   5.094397s

Comparison:
              Hash[]:  3739465.1 i/s
            Hash#dup:  3080333.0 i/s - 1.21x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.426M i/100ms
  Hash#fetch, symbol     1.186M i/100ms
     Hash#[], string     1.227M i/100ms
  Hash#fetch, string   782.412k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.450M (± 1.6%) i/s -     72.722M in   5.034002s
  Hash#fetch, symbol     11.866M (± 0.8%) i/s -     60.491M in   5.098101s
     Hash#[], string     12.336M (± 1.8%) i/s -     62.596M in   5.076124s
  Hash#fetch, string      7.730M (± 0.4%) i/s -     39.121M in   5.061087s

Comparison:
     Hash#[], symbol: 14449557.4 i/s
     Hash#[], string: 12335853.4 i/s - 1.17x  (± 0.00) slower
  Hash#fetch, symbol: 11866245.0 i/s - 1.22x  (± 0.00) slower
  Hash#fetch, string:  7729804.6 i/s - 1.87x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   858.667k i/100ms
             Hash#[]   967.653k i/100ms
          Hash#[] ||   872.089k i/100ms
          Hash#[] &&   421.639k i/100ms
          Hash#fetch   601.871k i/100ms
 Hash#fetch fallback   386.418k i/100ms
Calculating -------------------------------------
            Hash#dig      8.969M (± 0.9%) i/s -     45.509M in   5.074657s
             Hash#[]     10.011M (± 0.8%) i/s -     50.318M in   5.026434s
          Hash#[] ||      8.637M (± 0.5%) i/s -     43.604M in   5.048917s
          Hash#[] &&      3.629M (± 1.0%) i/s -     18.552M in   5.112956s
          Hash#fetch      6.159M (± 1.1%) i/s -     31.297M in   5.081928s
 Hash#fetch fallback      3.923M (± 0.9%) i/s -     19.707M in   5.023767s

Comparison:
             Hash#[]: 10011255.7 i/s
            Hash#dig:  8968811.9 i/s - 1.12x  (± 0.00) slower
          Hash#[] ||:  8636627.3 i/s - 1.16x  (± 0.00) slower
          Hash#fetch:  6159260.8 i/s - 1.63x  (± 0.00) slower
 Hash#fetch fallback:  3923141.3 i/s - 2.55x  (± 0.00) slower
          Hash#[] &&:  3628774.2 i/s - 2.76x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.432M i/100ms
  Hash#fetch + block     1.455M i/100ms
    Hash#fetch + arg     1.075M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.365M (± 0.6%) i/s -     73.007M in   5.082360s
  Hash#fetch + block     14.547M (± 1.1%) i/s -     72.729M in   5.000136s
    Hash#fetch + arg     10.788M (± 0.8%) i/s -     54.838M in   5.083447s

Comparison:
  Hash#fetch + block: 14547120.6 i/s
  Hash#fetch + const: 14365315.7 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 10788206.1 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.562k i/100ms
         sort + to_h    11.757k i/100ms
Calculating -------------------------------------
      sort_by + to_h    276.595k (± 1.1%) i/s -      1.406M in   5.082574s
         sort + to_h    114.183k (± 2.3%) i/s -    576.093k in   5.048291s

Comparison:
      sort_by + to_h:   276595.3 i/s
         sort + to_h:   114182.9 i/s - 2.42x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   185.420k i/100ms
       Hash#each_key   195.699k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.881M (± 0.6%) i/s -      9.456M in   5.026656s
       Hash#each_key      1.937M (± 0.9%) i/s -      9.785M in   5.051921s

Comparison:
       Hash#each_key:  1937030.9 i/s
      Hash#keys.each:  1881319.5 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     2.557k i/100ms
           Hash#key?   939.025k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     25.158k (± 4.7%) i/s -    127.850k in   5.096875s
           Hash#key?      9.402M (± 0.2%) i/s -     47.890M in   5.093784s

Comparison:
           Hash#key?:  9401767.0 i/s
  Hash#keys.include?:    25158.4 i/s - 373.70x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.145k i/100ms
            Hash#[]=    10.026k i/100ms
Calculating -------------------------------------
         Hash#merge!     40.979k (± 0.4%) i/s -    207.250k in   5.057580s
            Hash#[]=    100.647k (± 0.9%) i/s -    511.326k in   5.080807s

Comparison:
            Hash#[]=:   100646.6 i/s
         Hash#merge!:    40978.9 i/s - 2.46x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         5.240k i/100ms
      Hash#merge({})     4.197k i/100ms
 Hash#dup#merge!({})     2.759k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         52.301k (± 0.8%) i/s -    262.000k in   5.009818s
      Hash#merge({})     41.448k (± 2.2%) i/s -    209.850k in   5.065673s
 Hash#dup#merge!({})     27.335k (± 0.6%) i/s -    137.950k in   5.046767s

Comparison:
{}#merge!(Hash) do end:    52300.7 i/s
      Hash#merge({}):    41448.4 i/s - 1.26x  (± 0.00) slower
 Hash#dup#merge!({}):    27335.2 i/s - 1.91x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   393.817k i/100ms
          Hash#merge   362.408k i/100ms
Calculating -------------------------------------
        Hash#**other      3.976M (± 0.7%) i/s -     20.085M in   5.052318s
          Hash#merge      3.667M (± 0.9%) i/s -     18.483M in   5.040115s

Comparison:
        Hash#**other:  3975560.6 i/s
          Hash#merge:  3667455.4 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.682k i/100ms
         Hash#merge!     4.103k i/100ms
Calculating -------------------------------------
          Hash#merge     16.303k (± 2.0%) i/s -     82.418k in   5.057450s
         Hash#merge!     40.842k (± 1.8%) i/s -    205.150k in   5.024868s

Comparison:
         Hash#merge!:    40841.5 i/s
          Hash#merge:    16302.9 i/s - 2.51x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      429.039k i/100ms
Array#each             231.858k i/100ms
Array#each_w/_object   174.719k i/100ms
Hash#select-include     79.127k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.252M (± 1.9%) i/s -     21.452M in   5.047374s
Array#each                2.278M (± 1.4%) i/s -     11.593M in   5.090482s
Array#each_w/_object      1.730M (± 0.7%) i/s -      8.736M in   5.051239s
Hash#select-include     765.306k (± 2.0%) i/s -      3.877M in   5.068367s

Comparison:
Hash#native-slice   :  4251854.2 i/s
Array#each          :  2277817.7 i/s - 1.87x  (± 0.00) slower
Array#each_w/_object:  1729549.8 i/s - 2.46x  (± 0.00) slower
Hash#select-include :   765306.4 i/s - 5.56x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.386k i/100ms
         Hash#value?     1.088k i/100ms
Calculating -------------------------------------
Hash#values.include?     13.524k (± 4.4%) i/s -     67.914k in   5.033504s
         Hash#value?     10.872k (± 0.5%) i/s -     54.400k in   5.003645s

Comparison:
Hash#values.include?:    13523.9 i/s
         Hash#value?:    10872.4 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   662.936k i/100ms
                send   501.182k i/100ms
      method_missing   384.247k i/100ms
Calculating -------------------------------------
                call      6.669M (± 0.8%) i/s -     33.810M in   5.069946s
                send      5.010M (± 0.9%) i/s -     25.059M in   5.002639s
      method_missing      3.864M (± 0.4%) i/s -     19.597M in   5.071502s

Comparison:
                call:  6669089.0 i/s
                send:  5009557.3 i/s - 1.33x  (± 0.00) slower
      method_missing:  3864138.7 i/s - 1.73x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     8.527k i/100ms
      Symbol#to_proc     9.267k i/100ms
Calculating -------------------------------------
               Block     85.854k (± 0.3%) i/s -    434.877k in   5.065345s
      Symbol#to_proc     92.863k (± 0.4%) i/s -    472.617k in   5.089461s

Comparison:
      Symbol#to_proc:    92863.3 i/s
               Block:    85854.3 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   934.987k i/100ms
       block + yield   980.772k i/100ms
        unused block     1.306M i/100ms
               yield     1.169M i/100ms
Calculating -------------------------------------
          block.call      9.347M (± 0.4%) i/s -     46.749M in   5.001618s
       block + yield      9.793M (± 0.3%) i/s -     49.039M in   5.007450s
        unused block     13.076M (± 0.3%) i/s -     66.616M in   5.094392s
               yield     11.679M (± 0.4%) i/s -     58.454M in   5.004988s

Comparison:
        unused block: 13076499.8 i/s
               yield: 11679192.7 i/s - 1.12x  (± 0.00) slower
       block + yield:  9793236.6 i/s - 1.34x  (± 0.00) slower
          block.call:  9346974.3 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   311.490k i/100ms
      range#include?    12.669k i/100ms
       range#member?    12.701k i/100ms
       plain compare   525.506k i/100ms
Calculating -------------------------------------
        range#cover?      3.128M (± 0.3%) i/s -     15.886M in   5.078019s
      range#include?    128.617k (± 0.5%) i/s -    646.119k in   5.023701s
       range#member?    128.249k (± 1.8%) i/s -    647.751k in   5.052678s
       plain compare      5.194M (± 0.5%) i/s -     26.275M in   5.059024s

Comparison:
       plain compare:  5193878.6 i/s
        range#cover?:  3128412.4 i/s - 1.66x  (± 0.00) slower
      range#include?:   128617.0 i/s - 40.38x  (± 0.00) slower
       range#member?:   128249.4 i/s - 40.50x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   934.633k i/100ms
           String#=~   648.133k i/100ms
          Regexp#===   592.240k i/100ms
        String#match   487.508k i/100ms
Calculating -------------------------------------
       String#match?      9.347M (± 0.3%) i/s -     47.666M in   5.099428s
           String#=~      6.543M (± 0.7%) i/s -     33.055M in   5.051926s
          Regexp#===      6.020M (± 1.2%) i/s -     30.204M in   5.018057s
        String#match      4.866M (± 0.4%) i/s -     24.375M in   5.009863s

Comparison:
       String#match?:  9347452.4 i/s
           String#=~:  6543290.6 i/s - 1.43x  (± 0.00) slower
          Regexp#===:  6019920.4 i/s - 1.55x  (± 0.00) slower
        String#match:  4865569.9 i/s - 1.92x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   645.209k i/100ms
      String#casecmp   781.426k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.480M (± 1.0%) i/s -     32.906M in   5.078202s
      String#casecmp      7.869M (± 1.1%) i/s -     39.853M in   5.064857s

Comparison:
      String#casecmp:  7869456.0 i/s
String#downcase + ==:  6480386.6 i/s - 1.21x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   576.139k i/100ms
       String#concat   607.794k i/100ms
       String#append   653.420k i/100ms
         "foo" "bar"     1.144M i/100ms
  "#{'foo'}#{'bar'}"     1.149M i/100ms
Calculating -------------------------------------
            String#+      5.860M (± 1.1%) i/s -     29.383M in   5.014415s
       String#concat      6.022M (± 1.1%) i/s -     30.390M in   5.046758s
       String#append      6.526M (± 5.0%) i/s -     32.671M in   5.024004s
         "foo" "bar"     11.437M (± 0.4%) i/s -     57.184M in   5.000111s
  "#{'foo'}#{'bar'}"     11.432M (± 0.7%) i/s -     57.467M in   5.026932s

Comparison:
         "foo" "bar": 11436790.3 i/s
  "#{'foo'}#{'bar'}": 11432493.8 i/s - same-ish: difference falls within error
       String#append:  6526033.6 i/s - 1.75x  (± 0.00) slower
       String#concat:  6022364.8 i/s - 1.90x  (± 0.00) slower
            String#+:  5860405.8 i/s - 1.95x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@     1.018M i/100ms
          String#dup   573.403k i/100ms
Calculating -------------------------------------
           String#+@     10.139M (± 0.7%) i/s -     50.901M in   5.020750s
          String#dup      5.743M (± 1.0%) i/s -     29.244M in   5.092150s

Comparison:
           String#+@: 10138570.5 i/s
          String#dup:  5743427.7 i/s - 1.77x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   176.748k i/100ms
       String#match?   387.710k i/100ms
    String#end_with?   616.535k i/100ms
Calculating -------------------------------------
           String#=~      1.762M (± 0.4%) i/s -      8.837M in   5.016705s
       String#match?      3.830M (± 0.6%) i/s -     19.386M in   5.062325s
    String#end_with?      6.117M (± 0.6%) i/s -     30.827M in   5.039990s

Comparison:
    String#end_with?:  6116632.5 i/s
       String#match?:  3829520.8 i/s - 1.60x  (± 0.00) slower
           String#=~:  1761622.9 i/s - 3.47x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   107.685k i/100ms
          String#sub   132.544k i/100ms
String#dup["string"]=
                       172.802k i/100ms
Calculating -------------------------------------
         String#gsub      1.065M (± 0.7%) i/s -      5.384M in   5.055155s
          String#sub      1.288M (± 0.5%) i/s -      6.495M in   5.043964s
String#dup["string"]=
                          1.697M (± 0.6%) i/s -      8.640M in   5.092343s

Comparison:
String#dup["string"]=:  1696737.2 i/s
          String#sub:  1287638.7 i/s - 1.32x  (± 0.00) slower
         String#gsub:  1065156.9 i/s - 1.59x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   101.223k i/100ms
           String#tr   352.456k i/100ms
Calculating -------------------------------------
         String#gsub      1.020M (± 0.8%) i/s -      5.162M in   5.063187s
           String#tr      3.523M (± 1.0%) i/s -     17.623M in   5.003083s

Comparison:
           String#tr:  3522744.6 i/s
         String#gsub:  1019661.7 i/s - 3.45x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.146M i/100ms
         With Freeze     1.669M i/100ms
Calculating -------------------------------------
      Without Freeze     11.488M (± 0.8%) i/s -     58.445M in   5.088049s
         With Freeze     16.732M (± 0.9%) i/s -     85.123M in   5.087810s

Comparison:
         With Freeze: 16731920.7 i/s
      Without Freeze: 11487603.2 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.348k i/100ms
      String#squeeze   154.099k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     33.662k (± 0.7%) i/s -    170.748k in   5.072594s
      String#squeeze      1.563M (± 1.6%) i/s -      7.859M in   5.029922s

Comparison:
      String#squeeze:  1562836.4 i/s
 String#gsub/regex+/:    33662.3 i/s - 46.43x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   258.322k i/100ms
       String#match?   645.303k i/100ms
  String#start_with?   882.809k i/100ms
Calculating -------------------------------------
           String#=~      2.604M (± 0.7%) i/s -     13.174M in   5.059804s
       String#match?      6.453M (± 0.6%) i/s -     32.265M in   5.000286s
  String#start_with?      8.805M (± 0.5%) i/s -     44.140M in   5.013097s

Comparison:
  String#start_with?:  8805210.8 i/s
       String#match?:  6452882.5 i/s - 1.36x  (± 0.00) slower
           String#=~:  2603859.1 i/s - 3.38x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   200.274k i/100ms
    String#[0, n] ==    83.673k i/100ms
   String#[RANGE] ==    77.170k i/100ms
   String#[0...n] ==    47.004k i/100ms
Calculating -------------------------------------
  String#start_with?      2.010M (± 1.0%) i/s -     10.214M in   5.081916s
    String#[0, n] ==    837.656k (± 0.6%) i/s -      4.267M in   5.094536s
   String#[RANGE] ==    747.824k (± 0.5%) i/s -      3.781M in   5.056559s
   String#[0...n] ==    458.472k (± 0.6%) i/s -      2.303M in   5.023805s

Comparison:
  String#start_with?:  2010064.8 i/s
    String#[0, n] ==:   837655.9 i/s - 2.40x  (± 0.00) slower
   String#[RANGE] ==:   747824.0 i/s - 2.69x  (± 0.00) slower
   String#[0...n] ==:   458472.1 i/s - 4.38x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   175.253k i/100ms
 String#sub!'string'   127.618k i/100ms
String#gsub!'string'    77.061k i/100ms
  String#[/regexp/]=   143.561k i/100ms
 String#sub!/regexp/   110.835k i/100ms
String#gsub!/regexp/    58.021k i/100ms
Calculating -------------------------------------
  String#['string']=      1.745M (± 0.7%) i/s -      8.763M in   5.022852s
 String#sub!'string'      1.262M (± 0.7%) i/s -      6.381M in   5.057206s
String#gsub!'string'    770.086k (± 1.0%) i/s -      3.853M in   5.003960s
  String#[/regexp/]=      1.450M (± 0.4%) i/s -      7.322M in   5.050375s
 String#sub!/regexp/      1.111M (± 0.4%) i/s -      5.653M in   5.088302s
String#gsub!/regexp/    579.141k (± 0.5%) i/s -      2.901M in   5.009359s

Comparison:
  String#['string']=:  1744645.3 i/s
  String#[/regexp/]=:  1449743.3 i/s - 1.20x  (± 0.00) slower
 String#sub!'string':  1261805.2 i/s - 1.38x  (± 0.00) slower
 String#sub!/regexp/:  1110916.0 i/s - 1.57x  (± 0.00) slower
String#gsub!'string':   770085.9 i/s - 2.27x  (± 0.00) slower
String#gsub!/regexp/:   579140.6 i/s - 3.01x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   144.987k i/100ms
        String#chomp   549.997k i/100ms
String#delete_suffix   591.777k i/100ms
Calculating -------------------------------------
          String#sub      1.438M (± 0.3%) i/s -      7.249M in   5.042941s
        String#chomp      5.441M (± 0.6%) i/s -     27.500M in   5.054415s
String#delete_suffix      5.961M (± 0.3%) i/s -     30.181M in   5.062718s

Comparison:
String#delete_suffix:  5961417.9 i/s
        String#chomp:  5440959.8 i/s - 1.10x  (± 0.00) slower
          String#sub:  1437539.5 i/s - 4.15x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   602.166k i/100ms
          String#sub   138.389k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.124M (± 0.4%) i/s -     30.710M in   5.014849s
          String#sub      1.375M (± 0.5%) i/s -      6.919M in   5.034256s

Comparison:
String#delete_prefix:  6124019.6 i/s
          String#sub:  1374505.8 i/s - 4.46x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   604.160k i/100ms
    String#unpack[0]   439.672k i/100ms
Calculating -------------------------------------
      String#unpack1      6.012M (± 0.3%) i/s -     30.208M in   5.024262s
    String#unpack[0]      4.420M (± 0.5%) i/s -     22.423M in   5.073057s

Comparison:
      String#unpack1:  6012493.3 i/s
    String#unpack[0]:  4420178.9 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.447k i/100ms
          Time.parse     9.356k i/100ms
Calculating -------------------------------------
        Time.iso8601    273.928k (± 0.8%) i/s -      1.372M in   5.010226s
          Time.parse     93.189k (± 1.6%) i/s -    467.800k in   5.021136s

Comparison:
        Time.iso8601:   273928.1 i/s
          Time.parse:    93188.8 i/s - 2.94x  (± 0.00) slower

