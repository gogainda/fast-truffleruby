$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       757.975k i/100ms
Function with splat arguments
                        22.602k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.597M (± 0.4%) i/s -     38.657M in   5.088387s
Function with splat arguments
                        253.012k (± 9.6%) i/s -      1.266M in   5.056406s

Comparison:
Function with single Array argument:  7597182.5 i/s
Function with splat arguments:   253012.2 i/s - 30.03x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.009M i/100ms
Sequential Assignment
                         1.010M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.037M (± 0.7%) i/s -     50.456M in   5.027422s
Sequential Assignment
                         10.093M (± 0.6%) i/s -     50.493M in   5.003003s

Comparison:
Sequential Assignment: 10092959.5 i/s
 Parallel Assignment: 10036639.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   474.738k i/100ms
       attr_accessor   553.912k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.738M (± 0.3%) i/s -     23.737M in   5.009788s
       attr_accessor      5.535M (± 0.4%) i/s -     27.696M in   5.003486s

Comparison:
       attr_accessor:  5535368.9 i/s
   getter_and_setter:  4738159.5 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    87.761k i/100ms
         respond_to?   758.189k i/100ms
Calculating -------------------------------------
      begin...rescue    879.692k (± 0.9%) i/s -      4.476M in   5.088390s
         respond_to?      7.507M (± 0.4%) i/s -     37.909M in   5.050129s

Comparison:
         respond_to?:  7506771.4 i/s
      begin...rescue:   879692.3 i/s - 8.53x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   292.831k i/100ms
             &method   120.237k i/100ms
Calculating -------------------------------------
              normal      2.983M (± 1.0%) i/s -     14.934M in   5.006432s
             &method      1.213M (± 0.4%) i/s -      6.132M in   5.055290s

Comparison:
              normal:  2983338.1 i/s
             &method:  1213025.1 i/s - 2.46x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       230.000  i/100ms
       define_method   292.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.215k (±22.5%) i/s -      9.660k in   5.013210s
       define_method      3.262k (±19.1%) i/s -     14.892k in   5.095391s

Comparison:
       define_method:     3261.7 i/s
module_eval with string:     2215.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   260.521k i/100ms
       Kernel#format   205.085k i/100ms
            String#%   176.836k i/100ms
Calculating -------------------------------------
         Float#round      2.655M (± 0.3%) i/s -     13.287M in   5.004938s
       Kernel#format      2.048M (± 0.7%) i/s -     10.254M in   5.007022s
            String#%      1.773M (± 0.4%) i/s -      9.019M in   5.087250s

Comparison:
         Float#round:  2654716.3 i/s
       Kernel#format:  2048062.2 i/s - 1.30x  (± 0.00) slower
            String#%:  1772816.0 i/s - 1.50x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   912.295k i/100ms
          OpenStruct   487.583k i/100ms
Calculating -------------------------------------
                Hash      9.106M (± 0.6%) i/s -     45.615M in   5.009450s
          OpenStruct      4.925M (± 1.4%) i/s -     24.867M in   5.050217s

Comparison:
                Hash:  9106032.8 i/s
          OpenStruct:  4924879.4 i/s - 1.85x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.089M i/100ms
          OpenStruct    11.340k i/100ms
Calculating -------------------------------------
                Hash     11.601M (± 0.4%) i/s -     58.820M in   5.070202s
          OpenStruct    114.597k (± 2.4%) i/s -    578.340k in   5.049608s

Comparison:
                Hash: 11601338.1 i/s
          OpenStruct:   114597.0 i/s - 101.24x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   610.045k i/100ms
  ancestors.include?   124.453k i/100ms
Calculating -------------------------------------
  less than or equal      6.060M (± 0.5%) i/s -     30.502M in   5.033265s
  ancestors.include?      1.227M (± 1.1%) i/s -      6.223M in   5.070392s

Comparison:
  less than or equal:  6060261.2 i/s
  ancestors.include?:  1227388.6 i/s - 4.94x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.709  (± 0.0%) i/s -      4.000  in   5.708938s
         Kernel loop      0.214  (± 0.0%) i/s -      2.000  in   9.324454s

Comparison:
          While Loop:        0.7 i/s
         Kernel loop:        0.2 i/s - 3.30x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.532M i/100ms
         Array#first     1.287M i/100ms
Calculating -------------------------------------
           Array#[0]     15.333M (± 0.2%) i/s -     78.129M in   5.095426s
         Array#first     12.850M (± 0.2%) i/s -     64.339M in   5.006775s

Comparison:
           Array#[0]: 15333328.9 i/s
         Array#first: 12850429.9 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.484M i/100ms
          Array#last     1.290M i/100ms
Calculating -------------------------------------
          Array#[-1]     14.841M (± 0.3%) i/s -     75.686M in   5.099809s
          Array#last     12.892M (± 0.3%) i/s -     64.521M in   5.004778s

Comparison:
          Array#[-1]: 14841069.1 i/s
          Array#last: 12892059.6 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    90.452k i/100ms
Calculating -------------------------------------
                find      0.276  (± 0.0%) i/s -      2.000  in   7.248231s
             bsearch    904.735k (± 1.0%) i/s -      4.613M in   5.099325s

Comparison:
             bsearch:   904735.1 i/s
                find:        0.3 i/s - 3278861.07x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    18.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    191.124  (± 2.1%) i/s -    972.000  in   5.088382s
        Array#insert      1.452  (± 0.0%) i/s -      8.000  in   5.509387s

Comparison:
       Array#unshift:      191.1 i/s
        Array#insert:        1.5 i/s - 131.62x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.125M i/100ms
          Array#size     2.112M i/100ms
         Array#count     1.610M i/100ms
Calculating -------------------------------------
        Array#length     21.275M (± 0.4%) i/s -    108.366M in   5.093639s
          Array#size     21.154M (± 0.8%) i/s -    107.715M in   5.092408s
         Array#count     15.978M (± 1.6%) i/s -     80.519M in   5.040740s

Comparison:
        Array#length: 21275223.7 i/s
          Array#size: 21153674.2 i/s - same-ish: difference falls within error
         Array#count: 15978080.9 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.347k i/100ms
        Array#sample   997.991k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    457.804k (± 0.5%) i/s -      2.313M in   5.051858s
        Array#sample     10.093M (± 0.5%) i/s -     50.898M in   5.042991s

Comparison:
        Array#sample: 10092980.9 i/s
 Array#shuffle.first:   457803.6 i/s - 22.05x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    61.906k i/100ms
          Date.parse    31.490k i/100ms
Calculating -------------------------------------
        Date.iso8601    615.256k (± 1.9%) i/s -      3.095M in   5.032775s
          Date.parse    314.170k (± 0.4%) i/s -      1.574M in   5.011684s

Comparison:
        Date.iso8601:   615255.8 i/s
          Date.parse:   314169.8 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.523k i/100ms
           Array#map    25.589k i/100ms
Calculating -------------------------------------
   Array#each + push    185.030k (± 0.5%) i/s -    926.150k in   5.005501s
           Array#map    255.826k (± 0.6%) i/s -      1.279M in   5.001402s

Comparison:
           Array#map:   255826.5 i/s
   Array#each + push:   185030.2 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    28.393k i/100ms
               #each    31.577k i/100ms
Calculating -------------------------------------
            For loop    288.744k (± 0.4%) i/s -      1.448M in   5.015062s
               #each    315.794k (± 0.3%) i/s -      1.610M in   5.099656s

Comparison:
               #each:   315794.3 i/s
            For loop:   288743.9 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.636k i/100ms
     each_with_index    18.775k i/100ms
Calculating -------------------------------------
          While Loop    277.715k (± 0.4%) i/s -      1.409M in   5.075181s
     each_with_index    187.572k (± 0.3%) i/s -    938.750k in   5.004795s

Comparison:
          While Loop:   277715.4 i/s
     each_with_index:   187572.0 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol   124.039k i/100ms
      inject to_proc     1.767k i/100ms
        inject block     2.006k i/100ms
Calculating -------------------------------------
       inject symbol      1.238M (± 0.6%) i/s -      6.202M in   5.009512s
      inject to_proc     17.669k (± 0.3%) i/s -     88.350k in   5.000285s
        inject block     20.051k (± 0.5%) i/s -    100.300k in   5.002439s

Comparison:
       inject symbol:  1238075.7 i/s
        inject block:    20050.8 i/s - 61.75x  (± 0.00) slower
      inject to_proc:    17669.2 i/s - 70.07x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     7.056k i/100ms
   Array#map.flatten     4.205k i/100ms
      Array#flat_map     8.976k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     70.526k (± 0.4%) i/s -    352.800k in   5.002503s
   Array#map.flatten     41.894k (± 1.0%) i/s -    210.250k in   5.019253s
      Array#flat_map     89.676k (± 0.4%) i/s -    448.800k in   5.004769s

Comparison:
      Array#flat_map:    89676.2 i/s
Array#map.flatten(1):    70526.0 i/s - 1.27x  (± 0.00) slower
   Array#map.flatten:    41893.5 i/s - 2.14x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    30.646k i/100ms
  Array#reverse_each    31.443k i/100ms
Calculating -------------------------------------
  Array#reverse.each    305.961k (± 0.5%) i/s -      1.532M in   5.008265s
  Array#reverse_each    314.167k (± 0.3%) i/s -      1.572M in   5.004239s

Comparison:
  Array#reverse_each:   314167.0 i/s
  Array#reverse.each:   305960.8 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.396k i/100ms
   Enumerable#detect    83.216k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        203.377k (± 0.6%) i/s -      4.079M in  20.057981s
   Enumerable#detect    831.767k (± 1.1%) i/s -     16.643M in  20.012288s

Comparison:
   Enumerable#detect:   831767.2 i/s
Enumerable#select.first:   203377.3 i/s - 4.09x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       246.541k i/100ms
Enumerable#select.last
                        18.212k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.448M (± 0.4%) i/s -     12.327M in   5.036509s
Enumerable#select.last
                        180.897k (± 0.7%) i/s -    910.600k in   5.034071s

Comparison:
Enumerable#reverse.detect:  2447586.4 i/s
Enumerable#select.last:   180896.6 i/s - 13.53x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         5.113k i/100ms
  Enumerable#sort_by     4.981k i/100ms
     Enumerable#sort     2.379k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         52.038k (± 0.4%) i/s -    260.763k in   5.011123s
  Enumerable#sort_by     48.002k (± 3.5%) i/s -    244.069k in   5.091553s
     Enumerable#sort     23.816k (± 0.4%) i/s -    121.329k in   5.094563s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    52037.5 i/s
  Enumerable#sort_by:    48002.3 i/s - 1.08x  (± 0.00) slower
     Enumerable#sort:    23815.7 i/s - 2.19x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.295k i/100ms
Enumerable#sort_by...first
                         8.635k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    172.933k (± 0.3%) i/s -    864.750k in   5.000525s
Enumerable#sort_by...first
                         86.902k (± 0.8%) i/s -    440.385k in   5.067901s

Comparison:
   Enumerable#min_by:   172933.0 i/s
Enumerable#sort_by...first:    86901.9 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   422.406k i/100ms
            Hash#dup   324.462k i/100ms
Calculating -------------------------------------
              Hash[]      4.241M (± 0.9%) i/s -     21.543M in   5.080245s
            Hash#dup      3.293M (± 0.9%) i/s -     16.548M in   5.025261s

Comparison:
              Hash[]:  4240787.0 i/s
            Hash#dup:  3293162.0 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.421M i/100ms
  Hash#fetch, symbol     1.179M i/100ms
     Hash#[], string     1.233M i/100ms
  Hash#fetch, string   774.194k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.189M (± 0.5%) i/s -     71.054M in   5.007694s
  Hash#fetch, symbol     11.798M (± 0.3%) i/s -     60.129M in   5.096426s
     Hash#[], string     12.285M (± 2.1%) i/s -     61.658M in   5.021559s
  Hash#fetch, string      7.730M (± 0.4%) i/s -     38.710M in   5.007602s

Comparison:
     Hash#[], symbol: 14189258.0 i/s
     Hash#[], string: 12284717.5 i/s - 1.16x  (± 0.00) slower
  Hash#fetch, symbol: 11798451.0 i/s - 1.20x  (± 0.00) slower
  Hash#fetch, string:  7730333.6 i/s - 1.84x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   875.113k i/100ms
             Hash#[]   999.954k i/100ms
          Hash#[] ||   863.357k i/100ms
          Hash#[] &&   372.169k i/100ms
          Hash#fetch   604.059k i/100ms
 Hash#fetch fallback   386.244k i/100ms
Calculating -------------------------------------
            Hash#dig      8.770M (± 0.6%) i/s -     44.631M in   5.089269s
             Hash#[]     10.347M (± 0.7%) i/s -     51.998M in   5.025533s
          Hash#[] ||      8.572M (± 1.1%) i/s -     43.168M in   5.036593s
          Hash#[] &&      3.890M (± 2.8%) i/s -     19.725M in   5.075002s
          Hash#fetch      6.175M (± 1.0%) i/s -     31.411M in   5.087524s
 Hash#fetch fallback      3.918M (± 1.0%) i/s -     19.698M in   5.027620s

Comparison:
             Hash#[]: 10347203.7 i/s
            Hash#dig:  8769865.0 i/s - 1.18x  (± 0.00) slower
          Hash#[] ||:  8571795.1 i/s - 1.21x  (± 0.00) slower
          Hash#fetch:  6174799.8 i/s - 1.68x  (± 0.00) slower
 Hash#fetch fallback:  3918412.7 i/s - 2.64x  (± 0.00) slower
          Hash#[] &&:  3889874.3 i/s - 2.66x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.460M i/100ms
  Hash#fetch + block     1.453M i/100ms
    Hash#fetch + arg     1.090M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.701M (± 0.1%) i/s -     74.455M in   5.064511s
  Hash#fetch + block     14.587M (± 0.1%) i/s -     74.102M in   5.080141s
    Hash#fetch + arg     10.902M (± 0.2%) i/s -     55.596M in   5.099607s

Comparison:
  Hash#fetch + const: 14701329.7 i/s
  Hash#fetch + block: 14586729.0 i/s - 1.01x  (± 0.00) slower
    Hash#fetch + arg: 10902124.9 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    26.716k i/100ms
         sort + to_h    11.105k i/100ms
Calculating -------------------------------------
      sort_by + to_h    266.457k (± 0.9%) i/s -      1.336M in   5.013633s
         sort + to_h    109.735k (± 0.7%) i/s -    555.250k in   5.060168s

Comparison:
      sort_by + to_h:   266456.5 i/s
         sort + to_h:   109735.4 i/s - 2.43x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   184.703k i/100ms
       Hash#each_key   197.573k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.862M (± 0.2%) i/s -      9.420M in   5.059997s
       Hash#each_key      1.967M (± 0.4%) i/s -      9.879M in   5.021304s

Comparison:
       Hash#each_key:  1967385.5 i/s
      Hash#keys.each:  1861642.8 i/s - 1.06x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.258k i/100ms
           Hash#key?     1.011M i/100ms
Calculating -------------------------------------
  Hash#keys.include?     12.514k (± 4.1%) i/s -     62.900k in   5.036340s
           Hash#key?     10.114M (± 2.4%) i/s -     50.563M in   5.002466s

Comparison:
           Hash#key?: 10114004.2 i/s
  Hash#keys.include?:    12514.1 i/s - 808.21x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.144k i/100ms
            Hash#[]=    10.256k i/100ms
Calculating -------------------------------------
         Hash#merge!     41.660k (± 0.2%) i/s -    211.344k in   5.073110s
            Hash#[]=    102.778k (± 0.8%) i/s -    523.056k in   5.089511s

Comparison:
            Hash#[]=:   102778.3 i/s
         Hash#merge!:    41659.9 i/s - 2.47x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         5.226k i/100ms
      Hash#merge({})     4.101k i/100ms
 Hash#dup#merge!({})     2.704k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         51.775k (± 0.4%) i/s -    261.300k in   5.046892s
      Hash#merge({})     40.761k (± 0.4%) i/s -    205.050k in   5.030614s
 Hash#dup#merge!({})     26.838k (± 0.8%) i/s -    135.200k in   5.037974s

Comparison:
{}#merge!(Hash) do end:    51775.3 i/s
      Hash#merge({}):    40761.0 i/s - 1.27x  (± 0.00) slower
 Hash#dup#merge!({}):    26837.9 i/s - 1.93x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   396.473k i/100ms
          Hash#merge   369.206k i/100ms
Calculating -------------------------------------
        Hash#**other      3.954M (± 0.4%) i/s -     19.824M in   5.014023s
          Hash#merge      3.677M (± 0.2%) i/s -     18.460M in   5.020044s

Comparison:
        Hash#**other:  3953702.6 i/s
          Hash#merge:  3677338.4 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.694k i/100ms
         Hash#merge!     4.035k i/100ms
Calculating -------------------------------------
          Hash#merge     16.716k (± 0.9%) i/s -     84.700k in   5.067299s
         Hash#merge!     40.428k (± 0.3%) i/s -    205.785k in   5.090150s

Comparison:
         Hash#merge!:    40428.4 i/s
          Hash#merge:    16716.3 i/s - 2.42x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      415.271k i/100ms
Array#each             230.358k i/100ms
Array#each_w/_object   176.026k i/100ms
Hash#select-include     78.006k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.199M (± 0.4%) i/s -     21.179M in   5.043987s
Array#each                2.327M (± 2.4%) i/s -     11.748M in   5.052378s
Array#each_w/_object      1.739M (± 1.0%) i/s -      8.801M in   5.060871s
Hash#select-include     782.119k (± 1.0%) i/s -      3.978M in   5.087133s

Comparison:
Hash#native-slice   :  4198909.0 i/s
Array#each          :  2326734.0 i/s - 1.80x  (± 0.00) slower
Array#each_w/_object:  1739259.7 i/s - 2.41x  (± 0.00) slower
Hash#select-include :   782119.0 i/s - 5.37x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.109k i/100ms
         Hash#value?   835.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     10.761k (± 4.1%) i/s -     54.341k in   5.059700s
         Hash#value?      8.373k (± 0.9%) i/s -     42.585k in   5.086222s

Comparison:
Hash#values.include?:    10760.9 i/s
         Hash#value?:     8373.4 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   670.648k i/100ms
                send   503.684k i/100ms
      method_missing   384.905k i/100ms
Calculating -------------------------------------
                call      6.716M (± 0.3%) i/s -     34.203M in   5.092750s
                send      4.965M (± 0.8%) i/s -     25.184M in   5.072986s
      method_missing      3.816M (± 0.5%) i/s -     19.245M in   5.043936s

Comparison:
                call:  6716100.0 i/s
                send:  4964671.0 i/s - 1.35x  (± 0.00) slower
      method_missing:  3815614.0 i/s - 1.76x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     8.671k i/100ms
      Symbol#to_proc     9.298k i/100ms
Calculating -------------------------------------
               Block     86.140k (± 0.7%) i/s -    433.550k in   5.033308s
      Symbol#to_proc     92.766k (± 0.3%) i/s -    464.900k in   5.011595s

Comparison:
      Symbol#to_proc:    92765.8 i/s
               Block:    86140.4 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   935.642k i/100ms
       block + yield   980.330k i/100ms
        unused block     1.286M i/100ms
               yield     1.153M i/100ms
Calculating -------------------------------------
          block.call      9.366M (± 0.3%) i/s -     47.718M in   5.094925s
       block + yield      9.847M (± 0.2%) i/s -     49.997M in   5.077630s
        unused block     12.876M (± 0.5%) i/s -     65.567M in   5.092309s
               yield     11.519M (± 0.2%) i/s -     57.670M in   5.006734s

Comparison:
        unused block: 12876006.3 i/s
               yield: 11518648.0 i/s - 1.12x  (± 0.00) slower
       block + yield:  9846548.3 i/s - 1.31x  (± 0.00) slower
          block.call:  9365802.8 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   319.493k i/100ms
      range#include?    12.978k i/100ms
       range#member?    12.917k i/100ms
       plain compare   532.384k i/100ms
Calculating -------------------------------------
        range#cover?      3.209M (± 0.5%) i/s -     16.294M in   5.077111s
      range#include?    130.494k (± 0.3%) i/s -    661.878k in   5.072139s
       range#member?    130.569k (± 0.9%) i/s -    658.767k in   5.045781s
       plain compare      5.277M (± 0.5%) i/s -     26.619M in   5.044635s

Comparison:
       plain compare:  5276861.2 i/s
        range#cover?:  3209431.0 i/s - 1.64x  (± 0.00) slower
       range#member?:   130569.0 i/s - 40.41x  (± 0.00) slower
      range#include?:   130494.4 i/s - 40.44x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   943.008k i/100ms
           String#=~   652.534k i/100ms
          Regexp#===   600.492k i/100ms
        String#match   488.646k i/100ms
Calculating -------------------------------------
       String#match?      9.405M (± 0.2%) i/s -     47.150M in   5.013311s
           String#=~      6.597M (± 0.4%) i/s -     33.279M in   5.044523s
          Regexp#===      5.958M (± 2.1%) i/s -     30.025M in   5.041907s
        String#match      4.874M (± 0.4%) i/s -     24.432M in   5.012534s

Comparison:
       String#match?:  9405094.0 i/s
           String#=~:  6597196.7 i/s - 1.43x  (± 0.00) slower
          Regexp#===:  5957854.7 i/s - 1.58x  (± 0.00) slower
        String#match:  4874301.9 i/s - 1.93x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   647.562k i/100ms
      String#casecmp   780.801k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.467M (± 0.2%) i/s -     32.378M in   5.006551s
      String#casecmp      7.807M (± 0.3%) i/s -     39.040M in   5.000372s

Comparison:
      String#casecmp:  7807491.4 i/s
String#downcase + ==:  6467169.4 i/s - 1.21x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   579.651k i/100ms
       String#concat   591.589k i/100ms
       String#append   645.468k i/100ms
         "foo" "bar"     1.163M i/100ms
  "#{'foo'}#{'bar'}"     1.159M i/100ms
Calculating -------------------------------------
            String#+      5.812M (± 0.3%) i/s -     29.562M in   5.086574s
       String#concat      5.882M (± 0.5%) i/s -     29.579M in   5.029079s
       String#append      6.455M (± 2.2%) i/s -     32.273M in   5.002820s
         "foo" "bar"     11.688M (± 0.4%) i/s -     59.292M in   5.072824s
  "#{'foo'}#{'bar'}"     11.614M (± 0.2%) i/s -     59.117M in   5.090035s

Comparison:
         "foo" "bar": 11688413.9 i/s
  "#{'foo'}#{'bar'}": 11614295.4 i/s - 1.01x  (± 0.00) slower
       String#append:  6454563.0 i/s - 1.81x  (± 0.00) slower
       String#concat:  5881818.5 i/s - 1.99x  (± 0.00) slower
            String#+:  5811875.4 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@   997.419k i/100ms
          String#dup   571.316k i/100ms
Calculating -------------------------------------
           String#+@      9.995M (± 0.2%) i/s -     50.868M in   5.089633s
          String#dup      5.787M (± 0.4%) i/s -     29.137M in   5.035280s

Comparison:
           String#+@:  9994544.3 i/s
          String#dup:  5786697.5 i/s - 1.73x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   183.316k i/100ms
       String#match?   437.034k i/100ms
    String#end_with?   601.810k i/100ms
Calculating -------------------------------------
           String#=~      1.837M (± 0.3%) i/s -      9.349M in   5.089057s
       String#match?      4.375M (± 0.4%) i/s -     22.289M in   5.094415s
    String#end_with?      5.924M (± 0.5%) i/s -     30.090M in   5.079842s

Comparison:
    String#end_with?:  5923687.0 i/s
       String#match?:  4375215.4 i/s - 1.35x  (± 0.00) slower
           String#=~:  1837117.6 i/s - 3.22x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   109.222k i/100ms
          String#sub   131.296k i/100ms
String#dup["string"]=
                       179.536k i/100ms
Calculating -------------------------------------
         String#gsub      1.076M (± 0.6%) i/s -      5.461M in   5.076055s
          String#sub      1.363M (± 0.4%) i/s -      6.827M in   5.009898s
String#dup["string"]=
                          1.779M (± 0.3%) i/s -      8.977M in   5.047167s

Comparison:
String#dup["string"]=:  1778602.9 i/s
          String#sub:  1362806.2 i/s - 1.31x  (± 0.00) slower
         String#gsub:  1075888.5 i/s - 1.65x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    98.952k i/100ms
           String#tr   352.361k i/100ms
Calculating -------------------------------------
         String#gsub      1.002M (± 0.5%) i/s -      5.047M in   5.034397s
           String#tr      3.520M (± 0.3%) i/s -     17.618M in   5.004613s

Comparison:
           String#tr:  3520395.7 i/s
         String#gsub:  1002442.6 i/s - 3.51x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.119M i/100ms
         With Freeze     1.646M i/100ms
Calculating -------------------------------------
      Without Freeze     11.231M (± 0.2%) i/s -     57.065M in   5.080959s
         With Freeze     16.641M (± 0.4%) i/s -     83.926M in   5.043271s

Comparison:
         With Freeze: 16641430.6 i/s
      Without Freeze: 11231154.6 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.338k i/100ms
      String#squeeze   156.519k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     33.507k (± 0.5%) i/s -    170.238k in   5.080887s
      String#squeeze      1.563M (± 1.5%) i/s -      7.826M in   5.007249s

Comparison:
      String#squeeze:  1563253.5 i/s
 String#gsub/regex+/:    33506.5 i/s - 46.66x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   284.381k i/100ms
       String#match?   796.729k i/100ms
  String#start_with?   878.628k i/100ms
Calculating -------------------------------------
           String#=~      2.875M (± 0.6%) i/s -     14.503M in   5.045027s
       String#match?      8.009M (± 0.3%) i/s -     40.633M in   5.073183s
  String#start_with?      8.765M (± 0.2%) i/s -     43.931M in   5.012130s

Comparison:
  String#start_with?:  8765068.0 i/s
       String#match?:  8009495.6 i/s - 1.09x  (± 0.00) slower
           String#=~:  2874896.0 i/s - 3.05x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   203.775k i/100ms
    String#[0, n] ==    83.709k i/100ms
   String#[RANGE] ==    76.564k i/100ms
   String#[0...n] ==    46.792k i/100ms
Calculating -------------------------------------
  String#start_with?      2.032M (± 1.2%) i/s -     10.189M in   5.015763s
    String#[0, n] ==    851.801k (± 0.7%) i/s -      4.269M in   5.012144s
   String#[RANGE] ==    775.638k (± 0.5%) i/s -      3.905M in   5.034400s
   String#[0...n] ==    468.451k (± 0.3%) i/s -      2.386M in   5.094251s

Comparison:
  String#start_with?:  2031608.3 i/s
    String#[0, n] ==:   851800.8 i/s - 2.39x  (± 0.00) slower
   String#[RANGE] ==:   775637.6 i/s - 2.62x  (± 0.00) slower
   String#[0...n] ==:   468451.2 i/s - 4.34x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   174.897k i/100ms
 String#sub!'string'   123.159k i/100ms
String#gsub!'string'    76.158k i/100ms
  String#[/regexp/]=   142.239k i/100ms
 String#sub!/regexp/   110.172k i/100ms
String#gsub!/regexp/    57.873k i/100ms
Calculating -------------------------------------
  String#['string']=      1.766M (± 0.7%) i/s -      8.920M in   5.050271s
 String#sub!'string'      1.249M (± 0.7%) i/s -      6.281M in   5.028286s
String#gsub!'string'    772.590k (± 0.6%) i/s -      3.884M in   5.027494s
  String#[/regexp/]=      1.445M (± 0.5%) i/s -      7.254M in   5.019936s
 String#sub!/regexp/      1.082M (± 0.5%) i/s -      5.509M in   5.092424s
String#gsub!/regexp/    583.275k (± 0.5%) i/s -      2.952M in   5.060379s

Comparison:
  String#['string']=:  1766276.5 i/s
  String#[/regexp/]=:  1445112.6 i/s - 1.22x  (± 0.00) slower
 String#sub!'string':  1249214.4 i/s - 1.41x  (± 0.00) slower
 String#sub!/regexp/:  1081749.8 i/s - 1.63x  (± 0.00) slower
String#gsub!'string':   772589.5 i/s - 2.29x  (± 0.00) slower
String#gsub!/regexp/:   583275.5 i/s - 3.03x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   141.239k i/100ms
        String#chomp   554.391k i/100ms
String#delete_suffix   610.460k i/100ms
Calculating -------------------------------------
          String#sub      1.421M (± 0.3%) i/s -      7.203M in   5.069081s
        String#chomp      5.556M (± 0.5%) i/s -     28.274M in   5.089205s
String#delete_suffix      6.085M (± 0.9%) i/s -     30.523M in   5.016494s

Comparison:
String#delete_suffix:  6085052.6 i/s
        String#chomp:  5555797.5 i/s - 1.10x  (± 0.00) slower
          String#sub:  1421021.0 i/s - 4.28x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   633.529k i/100ms
          String#sub   136.682k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.371M (± 0.4%) i/s -     32.310M in   5.071552s
          String#sub      1.353M (± 0.4%) i/s -      6.834M in   5.051070s

Comparison:
String#delete_prefix:  6370924.0 i/s
          String#sub:  1353022.5 i/s - 4.71x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   602.166k i/100ms
    String#unpack[0]   443.683k i/100ms
Calculating -------------------------------------
      String#unpack1      6.013M (± 0.4%) i/s -     30.108M in   5.007105s
    String#unpack[0]      4.407M (± 0.4%) i/s -     22.184M in   5.034042s

Comparison:
      String#unpack1:  6013193.6 i/s
    String#unpack[0]:  4406892.0 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.635k i/100ms
          Time.parse     9.307k i/100ms
Calculating -------------------------------------
        Time.iso8601    273.042k (± 2.1%) i/s -      1.382M in   5.063156s
          Time.parse     91.224k (± 1.6%) i/s -    456.043k in   5.000506s

Comparison:
        Time.iso8601:   273041.7 i/s
          Time.parse:    91224.0 i/s - 2.99x  (± 0.00) slower

