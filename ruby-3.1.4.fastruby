$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       746.087k i/100ms
Function with splat arguments
                        26.548k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.470M (± 0.4%) i/s -     38.050M in   5.093580s
Function with splat arguments
                        251.910k (± 7.9%) i/s -      1.274M in   5.098994s

Comparison:
Function with single Array argument:  7470372.2 i/s
Function with splat arguments:   251910.3 i/s - 29.65x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.008M i/100ms
Sequential Assignment
                         1.010M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.062M (± 0.5%) i/s -     50.382M in   5.007093s
Sequential Assignment
                         10.116M (± 0.3%) i/s -     51.529M in   5.093949s

Comparison:
Sequential Assignment: 10115805.4 i/s
 Parallel Assignment: 10062320.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   475.500k i/100ms
       attr_accessor   558.920k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.765M (± 0.2%) i/s -     24.250M in   5.088889s
       attr_accessor      5.547M (± 0.2%) i/s -     27.946M in   5.037713s

Comparison:
       attr_accessor:  5547383.6 i/s
   getter_and_setter:  4765397.6 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    87.946k i/100ms
         respond_to?   752.915k i/100ms
Calculating -------------------------------------
      begin...rescue    898.150k (± 0.6%) i/s -      4.573M in   5.091978s
         respond_to?      7.476M (± 2.0%) i/s -     37.646M in   5.037973s

Comparison:
         respond_to?:  7475835.9 i/s
      begin...rescue:   898149.9 i/s - 8.32x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   293.886k i/100ms
             &method   119.684k i/100ms
Calculating -------------------------------------
              normal      2.975M (± 1.1%) i/s -     14.988M in   5.037969s
             &method      1.215M (± 0.4%) i/s -      6.104M in   5.022652s

Comparison:
              normal:  2975455.8 i/s
             &method:  1215294.7 i/s - 2.45x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       264.000  i/100ms
       define_method   260.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.376k (±20.8%) i/s -     10.560k in   5.042717s
       define_method      3.268k (±19.9%) i/s -     14.820k in   5.055989s

Comparison:
       define_method:     3268.3 i/s
module_eval with string:     2375.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   262.376k i/100ms
       Kernel#format   204.314k i/100ms
            String#%   177.158k i/100ms
Calculating -------------------------------------
         Float#round      2.665M (± 0.2%) i/s -     13.381M in   5.021201s
       Kernel#format      2.039M (± 0.4%) i/s -     10.216M in   5.011302s
            String#%      1.749M (± 0.1%) i/s -      8.858M in   5.063154s

Comparison:
         Float#round:  2664949.5 i/s
       Kernel#format:  2038565.9 i/s - 1.31x  (± 0.00) slower
            String#%:  1749485.6 i/s - 1.52x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   887.953k i/100ms
          OpenStruct   500.753k i/100ms
Calculating -------------------------------------
                Hash      9.035M (± 0.6%) i/s -     45.286M in   5.012323s
          OpenStruct      4.993M (± 0.3%) i/s -     25.038M in   5.014096s

Comparison:
                Hash:  9035229.3 i/s
          OpenStruct:  4993494.6 i/s - 1.81x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.069M i/100ms
          OpenStruct    11.449k i/100ms
Calculating -------------------------------------
                Hash     11.289M (± 0.3%) i/s -     56.663M in   5.019335s
          OpenStruct    115.846k (± 2.7%) i/s -    583.899k in   5.044032s

Comparison:
                Hash: 11289129.7 i/s
          OpenStruct:   115846.1 i/s - 97.45x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   581.644k i/100ms
  ancestors.include?   123.302k i/100ms
Calculating -------------------------------------
  less than or equal      5.832M (± 0.7%) i/s -     29.664M in   5.087014s
  ancestors.include?      1.213M (± 1.1%) i/s -      6.165M in   5.084405s

Comparison:
  less than or equal:  5831609.9 i/s
  ancestors.include?:  1212698.3 i/s - 4.81x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.646  (± 0.0%) i/s -      4.000  in   6.194598s
         Kernel loop      0.214  (± 0.0%) i/s -      2.000  in   9.342180s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 3.02x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.530M i/100ms
         Array#first     1.323M i/100ms
Calculating -------------------------------------
           Array#[0]     15.283M (± 0.3%) i/s -     76.487M in   5.004606s
         Array#first     13.195M (± 0.3%) i/s -     66.169M in   5.014687s

Comparison:
           Array#[0]: 15283437.5 i/s
         Array#first: 13195139.5 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.515M i/100ms
          Array#last     1.324M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.358M (± 0.3%) i/s -     77.248M in   5.029726s
          Array#last     13.201M (± 0.3%) i/s -     66.200M in   5.014942s

Comparison:
          Array#[-1]: 15358444.1 i/s
          Array#last: 13200572.2 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    95.540k i/100ms
Calculating -------------------------------------
                find      0.272  (± 0.0%) i/s -      2.000  in   7.363694s
             bsearch    959.392k (± 0.8%) i/s -      4.873M in   5.079117s

Comparison:
             bsearch:   959392.3 i/s
                find:        0.3 i/s - 3532324.09x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    18.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    191.280  (± 2.6%) i/s -    972.000  in   5.084603s
        Array#insert      1.456  (± 0.0%) i/s -      8.000  in   5.495848s

Comparison:
       Array#unshift:      191.3 i/s
        Array#insert:        1.5 i/s - 131.40x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.132M i/100ms
          Array#size     2.109M i/100ms
         Array#count     1.624M i/100ms
Calculating -------------------------------------
        Array#length     21.271M (± 0.4%) i/s -    106.601M in   5.011607s
          Array#size     21.109M (± 0.4%) i/s -    107.570M in   5.096093s
         Array#count     16.177M (± 0.9%) i/s -     81.198M in   5.019741s

Comparison:
        Array#length: 21271019.9 i/s
          Array#size: 21108713.6 i/s - same-ish: difference falls within error
         Array#count: 16176932.6 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.909k i/100ms
        Array#sample     1.038M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    459.012k (± 0.3%) i/s -      2.295M in   5.000904s
        Array#sample     10.400M (± 0.4%) i/s -     52.949M in   5.091490s

Comparison:
        Array#sample: 10399551.3 i/s
 Array#shuffle.first:   459012.4 i/s - 22.66x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    61.624k i/100ms
          Date.parse    31.415k i/100ms
Calculating -------------------------------------
        Date.iso8601    620.768k (± 0.4%) i/s -      3.143M in   5.062873s
          Date.parse    312.646k (± 0.5%) i/s -      1.571M in   5.024160s

Comparison:
        Date.iso8601:   620768.3 i/s
          Date.parse:   312645.8 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.620k i/100ms
           Array#map    25.731k i/100ms
Calculating -------------------------------------
   Array#each + push    185.930k (± 0.5%) i/s -    931.000k in   5.007412s
           Array#map    255.384k (± 3.4%) i/s -      1.287M in   5.044385s

Comparison:
           Array#map:   255384.0 i/s
   Array#each + push:   185930.1 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    27.838k i/100ms
               #each    30.588k i/100ms
Calculating -------------------------------------
            For loop    279.641k (± 0.8%) i/s -      1.420M in   5.077360s
               #each    303.757k (± 4.0%) i/s -      1.529M in   5.046314s

Comparison:
               #each:   303756.6 i/s
            For loop:   279641.3 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.595k i/100ms
     each_with_index    18.263k i/100ms
Calculating -------------------------------------
          While Loop    276.214k (± 0.2%) i/s -      1.407M in   5.095148s
     each_with_index    183.250k (± 0.2%) i/s -    931.413k in   5.082781s

Comparison:
          While Loop:   276214.2 i/s
     each_with_index:   183249.8 i/s - 1.51x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol   124.204k i/100ms
      inject to_proc     1.766k i/100ms
        inject block     1.991k i/100ms
Calculating -------------------------------------
       inject symbol      1.245M (± 0.6%) i/s -      6.334M in   5.087617s
      inject to_proc     17.688k (± 0.1%) i/s -     90.066k in   5.092034s
        inject block     20.033k (± 0.2%) i/s -    101.541k in   5.068634s

Comparison:
       inject symbol:  1245110.1 i/s
        inject block:    20033.3 i/s - 62.15x  (± 0.00) slower
      inject to_proc:    17687.6 i/s - 70.39x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     7.166k i/100ms
   Array#map.flatten     4.219k i/100ms
      Array#flat_map     9.112k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     70.490k (± 3.4%) i/s -    358.300k in   5.090257s
   Array#map.flatten     42.112k (± 1.0%) i/s -    210.950k in   5.009850s
      Array#flat_map     90.943k (± 0.6%) i/s -    455.600k in   5.009950s

Comparison:
      Array#flat_map:    90942.6 i/s
Array#map.flatten(1):    70489.9 i/s - 1.29x  (± 0.00) slower
   Array#map.flatten:    42111.5 i/s - 2.16x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    30.904k i/100ms
  Array#reverse_each    31.672k i/100ms
Calculating -------------------------------------
  Array#reverse.each    308.234k (± 0.3%) i/s -      1.545M in   5.013136s
  Array#reverse_each    315.917k (± 0.5%) i/s -      1.584M in   5.012832s

Comparison:
  Array#reverse_each:   315917.1 i/s
  Array#reverse.each:   308233.7 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.319k i/100ms
   Enumerable#detect    83.172k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        202.875k (± 0.5%) i/s -      4.064M in  20.031637s
   Enumerable#detect    831.311k (± 0.3%) i/s -     16.634M in  20.010043s

Comparison:
   Enumerable#detect:   831310.5 i/s
Enumerable#select.first:   202875.2 i/s - 4.10x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       240.976k i/100ms
Enumerable#select.last
                        18.515k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.430M (± 0.5%) i/s -     12.290M in   5.056695s
Enumerable#select.last
                        183.990k (± 0.5%) i/s -    925.750k in   5.031653s

Comparison:
Enumerable#reverse.detect:  2430453.9 i/s
Enumerable#select.last:   183989.9 i/s - 13.21x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         5.213k i/100ms
  Enumerable#sort_by     4.901k i/100ms
     Enumerable#sort     2.407k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         51.641k (± 1.5%) i/s -    260.650k in   5.048502s
  Enumerable#sort_by     49.894k (± 1.3%) i/s -    249.951k in   5.010557s
     Enumerable#sort     24.042k (± 0.4%) i/s -    120.350k in   5.005985s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    51640.9 i/s
  Enumerable#sort_by:    49894.0 i/s - 1.04x  (± 0.00) slower
     Enumerable#sort:    24041.6 i/s - 2.15x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.260k i/100ms
Enumerable#sort_by...first
                         8.746k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    172.575k (± 0.3%) i/s -    863.000k in   5.000752s
Enumerable#sort_by...first
                         87.602k (± 0.6%) i/s -    446.046k in   5.091899s

Comparison:
   Enumerable#min_by:   172575.2 i/s
Enumerable#sort_by...first:    87602.3 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   417.566k i/100ms
            Hash#dup   288.822k i/100ms
Calculating -------------------------------------
              Hash[]      3.725M (± 0.4%) i/s -     18.790M in   5.044763s
            Hash#dup      2.871M (± 1.0%) i/s -     14.441M in   5.030530s

Comparison:
              Hash[]:  3724802.7 i/s
            Hash#dup:  2870987.6 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.427M i/100ms
  Hash#fetch, symbol     1.172M i/100ms
     Hash#[], string     1.239M i/100ms
  Hash#fetch, string   786.289k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.238M (± 0.3%) i/s -     71.339M in   5.010600s
  Hash#fetch, symbol     11.815M (± 0.5%) i/s -     59.755M in   5.057712s
     Hash#[], string     12.405M (± 0.3%) i/s -     63.199M in   5.094868s
  Hash#fetch, string      7.830M (± 0.3%) i/s -     39.314M in   5.021098s

Comparison:
     Hash#[], symbol: 14237806.6 i/s
     Hash#[], string: 12404642.5 i/s - 1.15x  (± 0.00) slower
  Hash#fetch, symbol: 11814963.4 i/s - 1.21x  (± 0.00) slower
  Hash#fetch, string:  7829931.6 i/s - 1.82x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   891.545k i/100ms
             Hash#[]     1.024M i/100ms
          Hash#[] ||   931.819k i/100ms
          Hash#[] &&   393.541k i/100ms
          Hash#fetch   618.132k i/100ms
 Hash#fetch fallback   386.645k i/100ms
Calculating -------------------------------------
            Hash#dig      8.965M (± 0.7%) i/s -     45.469M in   5.071877s
             Hash#[]     10.097M (± 0.8%) i/s -     51.186M in   5.069850s
          Hash#[] ||      9.215M (± 2.0%) i/s -     46.591M in   5.058220s
          Hash#[] &&      4.000M (± 0.3%) i/s -     20.071M in   5.017991s
          Hash#fetch      6.006M (± 0.4%) i/s -     30.288M in   5.043085s
 Hash#fetch fallback      3.942M (± 0.8%) i/s -     19.719M in   5.003108s

Comparison:
             Hash#[]: 10096849.5 i/s
          Hash#[] ||:  9214517.3 i/s - 1.10x  (± 0.00) slower
            Hash#dig:  8965285.5 i/s - 1.13x  (± 0.00) slower
          Hash#fetch:  6006030.7 i/s - 1.68x  (± 0.00) slower
          Hash#[] &&:  3999762.2 i/s - 2.52x  (± 0.00) slower
 Hash#fetch fallback:  3941560.5 i/s - 2.56x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.457M i/100ms
  Hash#fetch + block     1.455M i/100ms
    Hash#fetch + arg     1.091M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.544M (± 0.3%) i/s -     72.862M in   5.009659s
  Hash#fetch + block     14.515M (± 0.3%) i/s -     72.756M in   5.012585s
    Hash#fetch + arg     10.911M (± 0.5%) i/s -     55.633M in   5.098711s

Comparison:
  Hash#fetch + const: 14544421.4 i/s
  Hash#fetch + block: 14514854.7 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 10911452.3 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.620k i/100ms
         sort + to_h    11.351k i/100ms
Calculating -------------------------------------
      sort_by + to_h    272.947k (± 1.4%) i/s -      1.381M in   5.060657s
         sort + to_h    112.821k (± 0.4%) i/s -    567.550k in   5.030609s

Comparison:
      sort_by + to_h:   272947.0 i/s
         sort + to_h:   112820.7 i/s - 2.42x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   190.804k i/100ms
       Hash#each_key   194.167k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.905M (± 0.2%) i/s -      9.540M in   5.009313s
       Hash#each_key      1.933M (± 0.4%) i/s -      9.708M in   5.022361s

Comparison:
       Hash#each_key:  1933057.7 i/s
      Hash#keys.each:  1904503.5 i/s - 1.01x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.943k i/100ms
           Hash#key?   920.497k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     19.220k (± 4.7%) i/s -     97.150k in   5.069178s
           Hash#key?      9.197M (± 0.2%) i/s -     46.025M in   5.004288s

Comparison:
           Hash#key?:  9197128.4 i/s
  Hash#keys.include?:    19220.0 i/s - 478.52x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.159k i/100ms
            Hash#[]=    10.240k i/100ms
Calculating -------------------------------------
         Hash#merge!     41.535k (± 0.4%) i/s -    207.950k in   5.006722s
            Hash#[]=    103.369k (± 0.7%) i/s -    522.240k in   5.052468s

Comparison:
            Hash#[]=:   103369.1 i/s
         Hash#merge!:    41534.9 i/s - 2.49x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         5.194k i/100ms
      Hash#merge({})     4.176k i/100ms
 Hash#dup#merge!({})     2.739k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         51.551k (± 0.3%) i/s -    259.700k in   5.037768s
      Hash#merge({})     41.456k (± 0.4%) i/s -    208.800k in   5.036714s
 Hash#dup#merge!({})     27.250k (± 0.4%) i/s -    136.950k in   5.025732s

Comparison:
{}#merge!(Hash) do end:    51551.0 i/s
      Hash#merge({}):    41456.1 i/s - 1.24x  (± 0.00) slower
 Hash#dup#merge!({}):    27250.2 i/s - 1.89x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   389.184k i/100ms
          Hash#merge   361.571k i/100ms
Calculating -------------------------------------
        Hash#**other      3.864M (± 0.3%) i/s -     19.459M in   5.035609s
          Hash#merge      3.581M (± 0.4%) i/s -     18.079M in   5.047942s

Comparison:
        Hash#**other:  3864352.2 i/s
          Hash#merge:  3581415.0 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.693k i/100ms
         Hash#merge!     4.039k i/100ms
Calculating -------------------------------------
          Hash#merge     16.809k (± 0.9%) i/s -     84.650k in   5.036469s
         Hash#merge!     40.681k (± 0.2%) i/s -    205.989k in   5.063486s

Comparison:
         Hash#merge!:    40681.5 i/s
          Hash#merge:    16808.7 i/s - 2.42x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      429.573k i/100ms
Array#each             239.582k i/100ms
Array#each_w/_object   175.376k i/100ms
Hash#select-include     79.534k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.324M (± 0.4%) i/s -     21.908M in   5.066852s
Array#each                2.363M (± 0.6%) i/s -     11.979M in   5.068668s
Array#each_w/_object      1.754M (± 0.3%) i/s -      8.769M in   5.000500s
Hash#select-include     794.828k (± 0.4%) i/s -      3.977M in   5.003286s

Comparison:
Hash#native-slice   :  4323904.5 i/s
Array#each          :  2363446.5 i/s - 1.83x  (± 0.00) slower
Array#each_w/_object:  1753603.6 i/s - 2.47x  (± 0.00) slower
Hash#select-include :   794828.0 i/s - 5.44x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.132k i/100ms
         Hash#value?   854.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     11.191k (± 4.0%) i/s -     56.600k in   5.067218s
         Hash#value?      8.543k (± 0.5%) i/s -     43.554k in   5.098024s

Comparison:
Hash#values.include?:    11190.8 i/s
         Hash#value?:     8543.5 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   656.211k i/100ms
                send   488.689k i/100ms
      method_missing   384.283k i/100ms
Calculating -------------------------------------
                call      6.591M (± 0.2%) i/s -     33.467M in   5.077758s
                send      4.956M (± 0.7%) i/s -     24.923M in   5.029354s
      method_missing      3.821M (± 0.3%) i/s -     19.214M in   5.029226s

Comparison:
                call:  6590873.2 i/s
                send:  4955760.9 i/s - 1.33x  (± 0.00) slower
      method_missing:  3820544.4 i/s - 1.73x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     8.342k i/100ms
      Symbol#to_proc     9.250k i/100ms
Calculating -------------------------------------
               Block     83.597k (± 0.3%) i/s -    425.442k in   5.089234s
      Symbol#to_proc     92.726k (± 0.6%) i/s -    471.750k in   5.087732s

Comparison:
      Symbol#to_proc:    92725.9 i/s
               Block:    83597.3 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   934.343k i/100ms
       block + yield   977.278k i/100ms
        unused block     1.305M i/100ms
               yield     1.097M i/100ms
Calculating -------------------------------------
          block.call      9.341M (± 0.3%) i/s -     46.717M in   5.001204s
       block + yield      9.783M (± 0.2%) i/s -     49.841M in   5.094634s
        unused block     13.062M (± 0.3%) i/s -     66.574M in   5.096855s
               yield     11.670M (± 0.3%) i/s -     59.247M in   5.077105s

Comparison:
        unused block: 13061904.6 i/s
               yield: 11669570.2 i/s - 1.12x  (± 0.00) slower
       block + yield:  9783122.7 i/s - 1.34x  (± 0.00) slower
          block.call:  9341252.6 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   311.492k i/100ms
      range#include?    12.890k i/100ms
       range#member?    12.761k i/100ms
       plain compare   520.025k i/100ms
Calculating -------------------------------------
        range#cover?      3.112M (± 0.3%) i/s -     15.575M in   5.004463s
      range#include?    129.558k (± 0.4%) i/s -    657.390k in   5.074170s
       range#member?    129.820k (± 0.3%) i/s -    650.811k in   5.013233s
       plain compare      5.206M (± 0.3%) i/s -     26.521M in   5.094196s

Comparison:
       plain compare:  5206237.2 i/s
        range#cover?:  3112176.7 i/s - 1.67x  (± 0.00) slower
       range#member?:   129819.6 i/s - 40.10x  (± 0.00) slower
      range#include?:   129558.3 i/s - 40.18x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   926.846k i/100ms
           String#=~   638.850k i/100ms
          Regexp#===   598.244k i/100ms
        String#match   480.383k i/100ms
Calculating -------------------------------------
       String#match?      9.260M (± 0.2%) i/s -     46.342M in   5.004420s
           String#=~      6.499M (± 0.4%) i/s -     32.581M in   5.013357s
          Regexp#===      5.982M (± 0.4%) i/s -     29.912M in   5.000549s
        String#match      4.822M (± 0.3%) i/s -     24.500M in   5.080490s

Comparison:
       String#match?:  9260324.1 i/s
           String#=~:  6499022.3 i/s - 1.42x  (± 0.00) slower
          Regexp#===:  5981868.7 i/s - 1.55x  (± 0.00) slower
        String#match:  4822335.0 i/s - 1.92x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   645.210k i/100ms
      String#casecmp   798.144k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.482M (± 0.6%) i/s -     32.906M in   5.076640s
      String#casecmp      7.910M (± 1.0%) i/s -     39.907M in   5.046031s

Comparison:
      String#casecmp:  7909510.8 i/s
String#downcase + ==:  6481995.8 i/s - 1.22x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   582.017k i/100ms
       String#concat   599.564k i/100ms
       String#append   648.408k i/100ms
         "foo" "bar"     1.162M i/100ms
  "#{'foo'}#{'bar'}"     1.160M i/100ms
Calculating -------------------------------------
            String#+      5.828M (± 0.5%) i/s -     29.683M in   5.093139s
       String#concat      5.941M (± 0.3%) i/s -     29.978M in   5.045991s
       String#append      6.484M (± 0.2%) i/s -     32.420M in   5.000344s
         "foo" "bar"     11.645M (± 0.2%) i/s -     59.243M in   5.087279s
  "#{'foo'}#{'bar'}"     11.589M (± 0.3%) i/s -     58.012M in   5.005979s

Comparison:
         "foo" "bar": 11645309.1 i/s
  "#{'foo'}#{'bar'}": 11588627.6 i/s - same-ish: difference falls within error
       String#append:  6483660.9 i/s - 1.80x  (± 0.00) slower
       String#concat:  5941035.8 i/s - 1.96x  (± 0.00) slower
            String#+:  5828187.2 i/s - 2.00x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@   988.193k i/100ms
          String#dup   517.408k i/100ms
Calculating -------------------------------------
           String#+@      9.850M (± 1.2%) i/s -     49.410M in   5.016902s
          String#dup      5.185M (± 0.9%) i/s -     26.388M in   5.089360s

Comparison:
           String#+@:  9850258.9 i/s
          String#dup:  5185319.7 i/s - 1.90x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   183.681k i/100ms
       String#match?   437.254k i/100ms
    String#end_with?   608.826k i/100ms
Calculating -------------------------------------
           String#=~      1.841M (± 0.2%) i/s -      9.368M in   5.087344s
       String#match?      4.384M (± 0.3%) i/s -     22.300M in   5.086486s
    String#end_with?      6.075M (± 0.5%) i/s -     30.441M in   5.011130s

Comparison:
    String#end_with?:  6074917.9 i/s
       String#match?:  4384195.8 i/s - 1.39x  (± 0.00) slower
           String#=~:  1841388.4 i/s - 3.30x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   109.129k i/100ms
          String#sub   135.188k i/100ms
String#dup["string"]=
                       173.674k i/100ms
Calculating -------------------------------------
         String#gsub      1.074M (± 0.9%) i/s -      5.456M in   5.079846s
          String#sub      1.322M (± 0.4%) i/s -      6.624M in   5.010333s
String#dup["string"]=
                          1.718M (± 0.6%) i/s -      8.684M in   5.054229s

Comparison:
String#dup["string"]=:  1718167.3 i/s
          String#sub:  1322130.7 i/s - 1.30x  (± 0.00) slower
         String#gsub:  1074221.5 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   100.659k i/100ms
           String#tr   354.748k i/100ms
Calculating -------------------------------------
         String#gsub      1.014M (± 0.4%) i/s -      5.134M in   5.064419s
           String#tr      3.601M (± 0.3%) i/s -     18.092M in   5.024207s

Comparison:
           String#tr:  3601033.1 i/s
         String#gsub:  1013679.4 i/s - 3.55x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.152M i/100ms
         With Freeze     1.661M i/100ms
Calculating -------------------------------------
      Without Freeze     11.567M (± 0.3%) i/s -     58.777M in   5.081327s
         With Freeze     16.531M (± 0.4%) i/s -     83.047M in   5.023968s

Comparison:
         With Freeze: 16530577.3 i/s
      Without Freeze: 11567258.0 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.361k i/100ms
      String#squeeze   158.307k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     33.861k (± 0.6%) i/s -    171.411k in   5.062358s
      String#squeeze      1.571M (± 1.5%) i/s -      7.915M in   5.040555s

Comparison:
      String#squeeze:  1570674.9 i/s
 String#gsub/regex+/:    33861.1 i/s - 46.39x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   285.554k i/100ms
       String#match?   798.914k i/100ms
  String#start_with?   869.863k i/100ms
Calculating -------------------------------------
           String#=~      2.870M (± 1.0%) i/s -     14.563M in   5.075396s
       String#match?      7.934M (± 0.5%) i/s -     39.946M in   5.034712s
  String#start_with?      8.689M (± 0.2%) i/s -     43.493M in   5.005831s

Comparison:
  String#start_with?:  8688548.7 i/s
       String#match?:  7934223.9 i/s - 1.10x  (± 0.00) slower
           String#=~:  2869693.7 i/s - 3.03x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   225.023k i/100ms
    String#[0, n] ==    86.486k i/100ms
   String#[RANGE] ==    77.868k i/100ms
   String#[0...n] ==    46.926k i/100ms
Calculating -------------------------------------
  String#start_with?      2.012M (± 1.2%) i/s -     10.126M in   5.032791s
    String#[0, n] ==    844.661k (± 0.6%) i/s -      4.238M in   5.017365s
   String#[RANGE] ==    779.268k (± 0.4%) i/s -      3.971M in   5.096239s
   String#[0...n] ==    473.470k (± 0.7%) i/s -      2.393M in   5.054912s

Comparison:
  String#start_with?:  2012318.0 i/s
    String#[0, n] ==:   844661.0 i/s - 2.38x  (± 0.00) slower
   String#[RANGE] ==:   779267.6 i/s - 2.58x  (± 0.00) slower
   String#[0...n] ==:   473469.6 i/s - 4.25x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   175.170k i/100ms
 String#sub!'string'   126.718k i/100ms
String#gsub!'string'    78.014k i/100ms
  String#[/regexp/]=   154.871k i/100ms
 String#sub!/regexp/   116.346k i/100ms
String#gsub!/regexp/    60.049k i/100ms
Calculating -------------------------------------
  String#['string']=      1.810M (± 0.3%) i/s -      9.109M in   5.033675s
 String#sub!'string'      1.267M (± 0.4%) i/s -      6.463M in   5.099665s
String#gsub!'string'    781.273k (± 0.4%) i/s -      3.979M in   5.092681s
  String#[/regexp/]=      1.542M (± 0.4%) i/s -      7.744M in   5.021043s
 String#sub!/regexp/      1.148M (± 0.6%) i/s -      5.817M in   5.066833s
String#gsub!/regexp/    606.705k (± 0.5%) i/s -      3.062M in   5.047869s

Comparison:
  String#['string']=:  1809598.8 i/s
  String#[/regexp/]=:  1542242.5 i/s - 1.17x  (± 0.00) slower
 String#sub!'string':  1267283.9 i/s - 1.43x  (± 0.00) slower
 String#sub!/regexp/:  1148160.1 i/s - 1.58x  (± 0.00) slower
String#gsub!'string':   781272.8 i/s - 2.32x  (± 0.00) slower
String#gsub!/regexp/:   606705.3 i/s - 2.98x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   142.976k i/100ms
        String#chomp   559.703k i/100ms
String#delete_suffix   608.074k i/100ms
Calculating -------------------------------------
          String#sub      1.444M (± 0.4%) i/s -      7.292M in   5.049700s
        String#chomp      5.631M (± 0.3%) i/s -     28.545M in   5.069200s
String#delete_suffix      6.108M (± 0.4%) i/s -     31.012M in   5.077434s

Comparison:
String#delete_suffix:  6107858.8 i/s
        String#chomp:  5631073.3 i/s - 1.08x  (± 0.00) slower
          String#sub:  1444027.0 i/s - 4.23x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   625.404k i/100ms
          String#sub   137.518k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.275M (± 0.4%) i/s -     31.896M in   5.083439s
          String#sub      1.368M (± 1.1%) i/s -      6.876M in   5.026910s

Comparison:
String#delete_prefix:  6274525.4 i/s
          String#sub:  1367992.3 i/s - 4.59x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   606.772k i/100ms
    String#unpack[0]   448.470k i/100ms
Calculating -------------------------------------
      String#unpack1      6.072M (± 0.3%) i/s -     30.945M in   5.096643s
    String#unpack[0]      4.448M (± 0.4%) i/s -     22.424M in   5.040925s

Comparison:
      String#unpack1:  6071776.4 i/s
    String#unpack[0]:  4448347.3 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.688k i/100ms
          Time.parse     9.531k i/100ms
Calculating -------------------------------------
        Time.iso8601    277.842k (± 0.4%) i/s -      1.412M in   5.082404s
          Time.parse     95.243k (± 0.6%) i/s -    476.550k in   5.003671s

Comparison:
        Time.iso8601:   277842.1 i/s
          Time.parse:    95243.1 i/s - 2.92x  (± 0.00) slower

