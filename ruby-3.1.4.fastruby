$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       609.395k i/100ms
Function with splat arguments
                         8.115k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          6.028M (± 0.1%) i/s -     30.470M in   5.054537s
Function with splat arguments
                         80.303k (± 5.4%) i/s -    405.750k in   5.074496s

Comparison:
Function with single Array argument:  6028202.1 i/s
Function with splat arguments:    80302.8 i/s - 75.07x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.025M i/100ms
Sequential Assignment
                         1.023M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.256M (± 0.0%) i/s -     52.288M in   5.098473s
Sequential Assignment
                         10.218M (± 0.1%) i/s -     51.130M in   5.003901s

Comparison:
 Parallel Assignment: 10255643.1 i/s
Sequential Assignment: 10218055.3 i/s - 1.00x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   356.912k i/100ms
       attr_accessor   421.713k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.579M (± 0.1%) i/s -     18.203M in   5.085983s
       attr_accessor      4.207M (± 0.1%) i/s -     21.086M in   5.012004s

Comparison:
       attr_accessor:  4207033.6 i/s
   getter_and_setter:  3578959.2 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    72.499k i/100ms
         respond_to?   579.494k i/100ms
Calculating -------------------------------------
      begin...rescue    719.477k (± 0.5%) i/s -      3.625M in   5.038461s
         respond_to?      5.793M (± 0.1%) i/s -     28.975M in   5.001447s

Comparison:
         respond_to?:  5793268.9 i/s
      begin...rescue:   719477.4 i/s - 8.05x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   234.369k i/100ms
             &method    88.295k i/100ms
Calculating -------------------------------------
              normal      2.357M (± 0.7%) i/s -     11.953M in   5.071766s
             &method    885.871k (± 0.3%) i/s -      4.503M in   5.083230s

Comparison:
              normal:  2356838.0 i/s
             &method:   885871.2 i/s - 2.66x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       178.000  i/100ms
       define_method   227.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.981k (±20.2%) i/s -      8.722k in   5.043099s
       define_method      2.384k (±24.0%) i/s -      9.988k in   5.033377s

Comparison:
       define_method:     2384.0 i/s
module_eval with string:     1981.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   135.601k i/100ms
       Kernel#format   159.640k i/100ms
            String#%   141.741k i/100ms
Calculating -------------------------------------
         Float#round      1.379M (± 1.9%) i/s -      6.916M in   5.018458s
       Kernel#format      1.595M (± 0.1%) i/s -      7.982M in   5.004566s
            String#%      1.425M (± 0.1%) i/s -      7.229M in   5.074532s

Comparison:
       Kernel#format:  1594945.1 i/s
            String#%:  1424524.6 i/s - 1.12x  (± 0.00) slower
         Float#round:  1378558.9 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   707.716k i/100ms
          OpenStruct   369.786k i/100ms
Calculating -------------------------------------
                Hash      7.075M (± 0.1%) i/s -     35.386M in   5.001451s
          OpenStruct      3.697M (± 0.1%) i/s -     18.489M in   5.001610s

Comparison:
                Hash:  7075110.7 i/s
          OpenStruct:  3696676.2 i/s - 1.91x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   918.576k i/100ms
          OpenStruct     8.244k i/100ms
Calculating -------------------------------------
                Hash      9.894M (± 0.6%) i/s -     49.603M in   5.013431s
          OpenStruct     84.040k (± 3.3%) i/s -    428.688k in   5.106714s

Comparison:
                Hash:  9894395.5 i/s
          OpenStruct:    84040.1 i/s - 117.73x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   481.351k i/100ms
  ancestors.include?    90.004k i/100ms
Calculating -------------------------------------
  less than or equal      4.816M (± 0.1%) i/s -     24.549M in   5.097666s
  ancestors.include?    899.773k (± 0.1%) i/s -      4.500M in   5.001491s

Comparison:
  less than or equal:  4815716.0 i/s
  ancestors.include?:   899773.0 i/s - 5.35x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.599  (± 0.0%) i/s -      3.000  in   5.006572s
         Kernel loop      0.175  (± 0.0%) i/s -      1.000  in   5.716393s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 3.43x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.231M i/100ms
         Array#first     1.131M i/100ms
Calculating -------------------------------------
           Array#[0]     12.314M (± 0.0%) i/s -     62.796M in   5.099479s
         Array#first     11.337M (± 0.0%) i/s -     57.670M in   5.086855s

Comparison:
           Array#[0]: 12314260.5 i/s
         Array#first: 11337124.0 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.399M i/100ms
          Array#last     1.131M i/100ms
Calculating -------------------------------------
          Array#[-1]     13.995M (± 0.1%) i/s -     71.339M in   5.097304s
          Array#last     11.311M (± 0.1%) i/s -     56.565M in   5.000739s

Comparison:
          Array#[-1]: 13995451.9 i/s
          Array#last: 11311280.1 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    69.091k i/100ms
Calculating -------------------------------------
                find      0.205  (± 0.0%) i/s -      2.000  in   9.748245s
             bsearch    690.971k (± 0.1%) i/s -      3.524M in   5.099551s

Comparison:
             bsearch:   690971.0 i/s
                find:        0.2 i/s - 3367876.89x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    13.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    134.727  (± 2.2%) i/s -    676.000  in   5.020923s
        Array#insert      1.317  (± 0.0%) i/s -      7.000  in   5.318799s

Comparison:
       Array#unshift:      134.7 i/s
        Array#insert:        1.3 i/s - 102.27x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.907M i/100ms
          Array#size     1.921M i/100ms
         Array#count     1.416M i/100ms
Calculating -------------------------------------
        Array#length     19.084M (± 0.2%) i/s -     97.242M in   5.095560s
          Array#size     19.216M (± 0.3%) i/s -     97.995M in   5.099655s
         Array#count     14.158M (± 0.1%) i/s -     70.824M in   5.002345s

Comparison:
          Array#size: 19216069.3 i/s
        Array#length: 19083739.9 i/s - 1.01x  (± 0.00) slower
         Array#count: 14158214.0 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    33.706k i/100ms
        Array#sample   850.225k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    336.952k (± 0.4%) i/s -      1.685M in   5.001678s
        Array#sample      8.500M (± 0.2%) i/s -     42.511M in   5.001308s

Comparison:
        Array#sample:  8500048.1 i/s
 Array#shuffle.first:   336952.3 i/s - 25.23x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    50.865k i/100ms
          Date.parse    25.345k i/100ms
Calculating -------------------------------------
        Date.iso8601    511.141k (± 0.4%) i/s -      2.594M in   5.075229s
          Date.parse    252.867k (± 0.2%) i/s -      1.267M in   5.011551s

Comparison:
        Date.iso8601:   511141.1 i/s
          Date.parse:   252867.2 i/s - 2.02x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    13.328k i/100ms
           Array#map    18.671k i/100ms
Calculating -------------------------------------
   Array#each + push    133.277k (± 0.2%) i/s -    666.400k in   5.000127s
           Array#map    186.828k (± 0.1%) i/s -    952.221k in   5.096785s

Comparison:
           Array#map:   186828.0 i/s
   Array#each + push:   133277.2 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    23.147k i/100ms
               #each    25.274k i/100ms
Calculating -------------------------------------
            For loop    231.573k (± 0.0%) i/s -      1.180M in   5.097743s
               #each    252.748k (± 0.0%) i/s -      1.289M in   5.099841s

Comparison:
               #each:   252747.9 i/s
            For loop:   231572.5 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    29.397k i/100ms
     each_with_index    14.882k i/100ms
Calculating -------------------------------------
          While Loop    288.813k (± 0.1%) i/s -      1.470M in   5.089273s
     each_with_index    149.128k (± 0.1%) i/s -    758.982k in   5.089479s

Comparison:
          While Loop:   288813.5 i/s
     each_with_index:   149127.9 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    82.372k i/100ms
      inject to_proc     1.534k i/100ms
        inject block     1.575k i/100ms
Calculating -------------------------------------
       inject symbol    823.718k (± 0.0%) i/s -      4.119M in   5.000014s
      inject to_proc     15.357k (± 0.1%) i/s -     78.234k in   5.094353s
        inject block     14.984k (± 0.1%) i/s -     75.600k in   5.045337s

Comparison:
       inject symbol:   823717.8 i/s
      inject to_proc:    15357.0 i/s - 53.64x  (± 0.00) slower
        inject block:    14984.1 i/s - 54.97x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     5.166k i/100ms
   Array#map.flatten     2.818k i/100ms
      Array#flat_map     6.708k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     51.702k (± 0.1%) i/s -    263.466k in   5.095877s
   Array#map.flatten     28.157k (± 0.1%) i/s -    140.900k in   5.004111s
      Array#flat_map     67.029k (± 0.1%) i/s -    335.400k in   5.003816s

Comparison:
      Array#flat_map:    67029.0 i/s
Array#map.flatten(1):    51701.8 i/s - 1.30x  (± 0.00) slower
   Array#map.flatten:    28156.9 i/s - 2.38x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    24.188k i/100ms
  Array#reverse_each    25.227k i/100ms
Calculating -------------------------------------
  Array#reverse.each    241.660k (± 0.1%) i/s -      1.209M in   5.004571s
  Array#reverse_each    252.178k (± 0.1%) i/s -      1.261M in   5.001834s

Comparison:
  Array#reverse_each:   252177.6 i/s
  Array#reverse.each:   241659.6 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        14.793k i/100ms
   Enumerable#detect    61.212k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        148.046k (± 0.1%) i/s -      2.973M in  20.084346s
   Enumerable#detect    612.004k (± 0.1%) i/s -     12.242M in  20.003794s

Comparison:
   Enumerable#detect:   612004.3 i/s
Enumerable#select.first:   148045.5 i/s - 4.13x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       172.148k i/100ms
Enumerable#select.last
                        12.837k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.725M (± 0.3%) i/s -      8.780M in   5.090663s
Enumerable#select.last
                        126.674k (± 0.1%) i/s -    641.850k in   5.066943s

Comparison:
Enumerable#reverse.detect:  1724654.2 i/s
Enumerable#select.last:   126674.3 i/s - 13.61x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.411k i/100ms
  Enumerable#sort_by     3.332k i/100ms
     Enumerable#sort     1.791k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         34.099k (± 0.2%) i/s -    170.550k in   5.001573s
  Enumerable#sort_by     33.254k (± 0.2%) i/s -    166.600k in   5.009984s
     Enumerable#sort     17.951k (± 0.2%) i/s -     91.341k in   5.088413s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    34099.4 i/s
  Enumerable#sort_by:    33253.8 i/s - 1.03x  (± 0.00) slower
     Enumerable#sort:    17950.9 i/s - 1.90x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    13.016k i/100ms
Enumerable#sort_by...first
                         6.138k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    131.628k (± 0.1%) i/s -    663.816k in   5.043120s
Enumerable#sort_by...first
                         61.890k (± 0.2%) i/s -    313.038k in   5.058018s

Comparison:
   Enumerable#min_by:   131628.1 i/s
Enumerable#sort_by...first:    61889.8 i/s - 2.13x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   259.204k i/100ms
            Hash#dup   191.536k i/100ms
Calculating -------------------------------------
              Hash[]      2.614M (± 2.5%) i/s -     13.219M in   5.061238s
            Hash#dup      2.080M (± 2.0%) i/s -     10.534M in   5.065558s

Comparison:
              Hash[]:  2613527.6 i/s
            Hash#dup:  2080493.8 i/s - 1.26x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.259M i/100ms
  Hash#fetch, symbol   992.272k i/100ms
     Hash#[], string     1.065M i/100ms
  Hash#fetch, string   593.438k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     12.588M (± 0.0%) i/s -     62.952M in   5.000930s
  Hash#fetch, symbol      9.922M (± 0.0%) i/s -     49.614M in   5.000395s
     Hash#[], string     10.650M (± 0.1%) i/s -     53.264M in   5.001479s
  Hash#fetch, string      5.932M (± 0.1%) i/s -     29.672M in   5.001753s

Comparison:
     Hash#[], symbol: 12588108.9 i/s
     Hash#[], string: 10649753.0 i/s - 1.18x  (± 0.00) slower
  Hash#fetch, symbol:  9921937.0 i/s - 1.27x  (± 0.00) slower
  Hash#fetch, string:  5932302.1 i/s - 2.12x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   702.614k i/100ms
             Hash#[]   802.263k i/100ms
          Hash#[] ||   719.672k i/100ms
          Hash#[] &&   321.087k i/100ms
          Hash#fetch   484.647k i/100ms
 Hash#fetch fallback   270.964k i/100ms
Calculating -------------------------------------
            Hash#dig      7.026M (± 0.1%) i/s -     35.131M in   5.000455s
             Hash#[]      8.026M (± 0.3%) i/s -     40.915M in   5.097927s
          Hash#[] ||      7.200M (± 0.1%) i/s -     36.703M in   5.097500s
          Hash#[] &&      3.210M (± 0.1%) i/s -     16.054M in   5.001718s
          Hash#fetch      4.843M (± 0.1%) i/s -     24.232M in   5.003317s
 Hash#fetch fallback      2.713M (± 0.1%) i/s -     13.819M in   5.092971s

Comparison:
             Hash#[]:  8025943.8 i/s
          Hash#[] ||:  7200259.8 i/s - 1.11x  (± 0.00) slower
            Hash#dig:  7025509.2 i/s - 1.14x  (± 0.00) slower
          Hash#fetch:  4843261.9 i/s - 1.66x  (± 0.00) slower
          Hash#[] &&:  3209772.5 i/s - 2.50x  (± 0.00) slower
 Hash#fetch fallback:  2713380.3 i/s - 2.96x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.204M i/100ms
  Hash#fetch + block     1.173M i/100ms
    Hash#fetch + arg   836.972k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     12.054M (± 0.1%) i/s -     61.412M in   5.094632s
  Hash#fetch + block     11.723M (± 0.1%) i/s -     58.631M in   5.001297s
    Hash#fetch + arg      8.376M (± 0.1%) i/s -     42.686M in   5.096432s

Comparison:
  Hash#fetch + const: 12054230.3 i/s
  Hash#fetch + block: 11723225.5 i/s - 1.03x  (± 0.00) slower
    Hash#fetch + arg:  8375583.8 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    18.827k i/100ms
         sort + to_h     8.917k i/100ms
Calculating -------------------------------------
      sort_by + to_h    189.425k (± 0.6%) i/s -    960.177k in   5.069085s
         sort + to_h     88.816k (± 0.5%) i/s -    445.850k in   5.020075s

Comparison:
      sort_by + to_h:   189425.4 i/s
         sort + to_h:    88816.1 i/s - 2.13x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   130.903k i/100ms
       Hash#each_key   141.414k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.329M (± 0.2%) i/s -      6.676M in   5.024127s
       Hash#each_key      1.415M (± 0.2%) i/s -      7.212M in   5.098286s

Comparison:
       Hash#each_key:  1414621.9 i/s
      Hash#keys.each:  1328805.2 i/s - 1.06x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   889.000  i/100ms
           Hash#key?   892.559k i/100ms
Calculating -------------------------------------
  Hash#keys.include?      8.764k (± 3.5%) i/s -     44.450k in   5.078754s
           Hash#key?      8.928M (± 0.1%) i/s -     45.521M in   5.098897s

Comparison:
           Hash#key?:  8927529.2 i/s
  Hash#keys.include?:     8764.3 i/s - 1018.63x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     2.955k i/100ms
            Hash#[]=     6.788k i/100ms
Calculating -------------------------------------
         Hash#merge!     29.633k (± 0.1%) i/s -    150.705k in   5.085696s
            Hash#[]=     67.796k (± 0.3%) i/s -    339.400k in   5.006234s

Comparison:
            Hash#[]=:    67796.1 i/s
         Hash#merge!:    29633.2 i/s - 2.29x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.741k i/100ms
      Hash#merge({})     2.983k i/100ms
 Hash#dup#merge!({})     2.206k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         37.081k (± 0.3%) i/s -    187.050k in   5.044371s
      Hash#merge({})     29.660k (± 0.2%) i/s -    149.150k in   5.028592s
 Hash#dup#merge!({})     22.032k (± 0.2%) i/s -    110.300k in   5.006261s

Comparison:
{}#merge!(Hash) do end:    37081.3 i/s
      Hash#merge({}):    29660.5 i/s - 1.25x  (± 0.00) slower
 Hash#dup#merge!({}):    22032.5 i/s - 1.68x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   282.388k i/100ms
          Hash#merge   251.997k i/100ms
Calculating -------------------------------------
        Hash#**other      2.822M (± 0.1%) i/s -     14.119M in   5.003951s
          Hash#merge      2.525M (± 0.1%) i/s -     12.852M in   5.089903s

Comparison:
        Hash#**other:  2821652.8 i/s
          Hash#merge:  2524971.4 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.097k i/100ms
         Hash#merge!     2.895k i/100ms
Calculating -------------------------------------
          Hash#merge     10.886k (± 1.4%) i/s -     54.850k in   5.039709s
         Hash#merge!     28.930k (± 0.1%) i/s -    144.750k in   5.003537s

Comparison:
         Hash#merge!:    28929.6 i/s
          Hash#merge:    10885.7 i/s - 2.66x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      312.849k i/100ms
Array#each             164.545k i/100ms
Array#each_w/_object   119.112k i/100ms
Hash#select-include     50.081k i/100ms
Calculating -------------------------------------
Hash#native-slice         3.127M (± 0.1%) i/s -     15.642M in   5.001640s
Array#each                1.646M (± 0.2%) i/s -      8.392M in   5.099691s
Array#each_w/_object      1.194M (± 0.1%) i/s -      6.075M in   5.089485s
Hash#select-include     506.834k (± 1.3%) i/s -      2.554M in   5.040196s

Comparison:
Hash#native-slice   :  3127469.0 i/s
Array#each          :  1645558.3 i/s - 1.90x  (± 0.00) slower
Array#each_w/_object:  1193582.9 i/s - 2.62x  (± 0.00) slower
Hash#select-include :   506833.6 i/s - 6.17x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   843.000  i/100ms
         Hash#value?   710.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      8.321k (± 4.4%) i/s -     42.150k in   5.077557s
         Hash#value?      7.067k (± 0.2%) i/s -     35.500k in   5.023070s

Comparison:
Hash#values.include?:     8320.9 i/s
         Hash#value?:     7067.4 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   503.783k i/100ms
                send   348.024k i/100ms
      method_missing   265.369k i/100ms
Calculating -------------------------------------
                call      5.045M (± 0.1%) i/s -     25.693M in   5.093217s
                send      3.484M (± 0.1%) i/s -     17.749M in   5.094170s
      method_missing      2.652M (± 0.1%) i/s -     13.268M in   5.004120s

Comparison:
                call:  5044540.3 i/s
                send:  3484226.0 i/s - 1.45x  (± 0.00) slower
      method_missing:  2651506.2 i/s - 1.90x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     5.709k i/100ms
      Symbol#to_proc     6.196k i/100ms
Calculating -------------------------------------
               Block     56.983k (± 0.1%) i/s -    285.450k in   5.009402s
      Symbol#to_proc     61.875k (± 0.1%) i/s -    309.800k in   5.006869s

Comparison:
      Symbol#to_proc:    61875.1 i/s
               Block:    56982.9 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   793.192k i/100ms
       block + yield   851.555k i/100ms
        unused block     1.098M i/100ms
               yield     1.075M i/100ms
Calculating -------------------------------------
          block.call      7.936M (± 0.1%) i/s -     40.453M in   5.097311s
       block + yield      8.516M (± 0.1%) i/s -     43.429M in   5.099470s
        unused block     10.987M (± 0.1%) i/s -     56.022M in   5.098917s
               yield     10.752M (± 0.0%) i/s -     53.765M in   5.000649s

Comparison:
        unused block: 10987068.6 i/s
               yield: 10751626.2 i/s - 1.02x  (± 0.00) slower
       block + yield:  8516437.1 i/s - 1.29x  (± 0.00) slower
          block.call:  7936107.0 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   239.969k i/100ms
      range#include?     9.689k i/100ms
       range#member?     9.685k i/100ms
       plain compare   352.594k i/100ms
Calculating -------------------------------------
        range#cover?      2.400M (± 0.1%) i/s -     11.998M in   4.999974s
      range#include?     97.370k (± 1.3%) i/s -    494.139k in   5.075734s
       range#member?     97.196k (± 0.7%) i/s -    493.935k in   5.082047s
       plain compare      3.527M (± 0.1%) i/s -     17.982M in   5.098279s

Comparison:
       plain compare:  3527132.2 i/s
        range#cover?:  2399703.8 i/s - 1.47x  (± 0.00) slower
      range#include?:    97370.1 i/s - 36.22x  (± 0.00) slower
       range#member?:    97196.4 i/s - 36.29x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   740.315k i/100ms
           String#=~   462.032k i/100ms
          Regexp#===   430.517k i/100ms
        String#match   357.247k i/100ms
Calculating -------------------------------------
       String#match?      7.444M (± 0.0%) i/s -     37.756M in   5.072037s
           String#=~      4.647M (± 0.1%) i/s -     23.564M in   5.070905s
          Regexp#===      4.307M (± 0.1%) i/s -     21.956M in   5.098362s
        String#match      3.571M (± 0.1%) i/s -     17.862M in   5.002518s

Comparison:
       String#match?:  7443966.7 i/s
           String#=~:  4646836.1 i/s - 1.60x  (± 0.00) slower
          Regexp#===:  4306556.5 i/s - 1.73x  (± 0.00) slower
        String#match:  3570675.4 i/s - 2.08x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   449.220k i/100ms
      String#casecmp   641.704k i/100ms
Calculating -------------------------------------
String#downcase + ==      4.771M (± 1.9%) i/s -     24.258M in   5.086777s
      String#casecmp      6.416M (± 0.1%) i/s -     32.085M in   5.000814s

Comparison:
      String#casecmp:  6416001.2 i/s
String#downcase + ==:  4770689.8 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   429.548k i/100ms
       String#concat   460.085k i/100ms
       String#append   497.545k i/100ms
         "foo" "bar"     1.001M i/100ms
  "#{'foo'}#{'bar'}"   987.559k i/100ms
Calculating -------------------------------------
            String#+      4.298M (± 0.1%) i/s -     21.907M in   5.097500s
       String#concat      4.600M (± 0.1%) i/s -     23.004M in   5.000774s
       String#append      4.969M (± 0.4%) i/s -     24.877M in   5.006961s
         "foo" "bar"     10.013M (± 0.1%) i/s -     50.071M in   5.000676s
  "#{'foo'}#{'bar'}"      9.873M (± 0.1%) i/s -     49.378M in   5.001164s

Comparison:
         "foo" "bar": 10012884.1 i/s
  "#{'foo'}#{'bar'}":  9873300.8 i/s - 1.01x  (± 0.00) slower
       String#append:  4968617.5 i/s - 2.02x  (± 0.00) slower
       String#concat:  4600140.0 i/s - 2.18x  (± 0.00) slower
            String#+:  4297589.4 i/s - 2.33x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@   834.445k i/100ms
          String#dup   423.145k i/100ms
Calculating -------------------------------------
           String#+@      8.298M (± 0.2%) i/s -     41.722M in   5.028303s
          String#dup      4.229M (± 0.1%) i/s -     21.157M in   5.003003s

Comparison:
           String#+@:  8297504.5 i/s
          String#dup:  4228914.0 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   143.070k i/100ms
       String#match?   321.607k i/100ms
    String#end_with?   436.731k i/100ms
Calculating -------------------------------------
           String#=~      1.434M (± 0.2%) i/s -      7.297M in   5.088423s
       String#match?      3.218M (± 0.0%) i/s -     16.402M in   5.096920s
    String#end_with?      4.349M (± 2.4%) i/s -     21.837M in   5.024169s

Comparison:
    String#end_with?:  4348938.4 i/s
       String#match?:  3218013.8 i/s - 1.35x  (± 0.00) slower
           String#=~:  1433962.3 i/s - 3.03x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    84.147k i/100ms
          String#sub   107.321k i/100ms
String#dup["string"]=
                       145.267k i/100ms
Calculating -------------------------------------
         String#gsub    834.652k (± 0.8%) i/s -      4.207M in   5.041131s
          String#sub      1.061M (± 0.8%) i/s -      5.366M in   5.056284s
String#dup["string"]=
                          1.439M (± 0.5%) i/s -      7.263M in   5.047739s

Comparison:
String#dup["string"]=:  1438960.4 i/s
          String#sub:  1061331.6 i/s - 1.36x  (± 0.00) slower
         String#gsub:   834652.1 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    74.316k i/100ms
           String#tr   279.945k i/100ms
Calculating -------------------------------------
         String#gsub    739.994k (± 0.5%) i/s -      3.716M in   5.021510s
           String#tr      2.799M (± 0.1%) i/s -     13.997M in   5.000564s

Comparison:
           String#tr:  2799135.5 i/s
         String#gsub:   739994.2 i/s - 3.78x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   966.353k i/100ms
         With Freeze     1.581M i/100ms
Calculating -------------------------------------
      Without Freeze      9.659M (± 0.1%) i/s -     48.318M in   5.002097s
         With Freeze     15.803M (± 0.1%) i/s -     79.056M in   5.002514s

Comparison:
         With Freeze: 15803204.4 i/s
      Without Freeze:  9659487.5 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.547k i/100ms
      String#squeeze   107.827k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     25.651k (± 0.5%) i/s -    129.897k in   5.064212s
      String#squeeze      1.079M (± 0.4%) i/s -      5.499M in   5.098546s

Comparison:
      String#squeeze:  1078594.6 i/s
 String#gsub/regex+/:    25650.8 i/s - 42.05x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   216.550k i/100ms
       String#match?   601.328k i/100ms
  String#start_with?   698.309k i/100ms
Calculating -------------------------------------
           String#=~      2.168M (± 0.2%) i/s -     11.044M in   5.094070s
       String#match?      6.014M (± 0.0%) i/s -     30.668M in   5.099732s
  String#start_with?      6.972M (± 0.1%) i/s -     34.915M in   5.008046s

Comparison:
  String#start_with?:  6971877.2 i/s
       String#match?:  6013596.7 i/s - 1.16x  (± 0.00) slower
           String#=~:  2168031.4 i/s - 3.22x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   157.518k i/100ms
    String#[0, n] ==    58.273k i/100ms
   String#[RANGE] ==    53.654k i/100ms
   String#[0...n] ==    34.405k i/100ms
Calculating -------------------------------------
  String#start_with?      1.602M (± 0.2%) i/s -      8.033M in   5.013384s
    String#[0, n] ==    583.501k (± 0.1%) i/s -      2.972M in   5.093274s
   String#[RANGE] ==    533.936k (± 0.2%) i/s -      2.683M in   5.024403s
   String#[0...n] ==    344.962k (± 0.1%) i/s -      1.755M in   5.086518s

Comparison:
  String#start_with?:  1602399.8 i/s
    String#[0, n] ==:   583500.8 i/s - 2.75x  (± 0.00) slower
   String#[RANGE] ==:   533936.5 i/s - 3.00x  (± 0.00) slower
   String#[0...n] ==:   344962.5 i/s - 4.65x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   136.707k i/100ms
 String#sub!'string'    96.195k i/100ms
String#gsub!'string'    60.344k i/100ms
  String#[/regexp/]=   116.402k i/100ms
 String#sub!/regexp/    93.479k i/100ms
String#gsub!/regexp/    48.501k i/100ms
Calculating -------------------------------------
  String#['string']=      1.365M (± 0.4%) i/s -      6.835M in   5.008290s
 String#sub!'string'    955.394k (± 0.9%) i/s -      4.810M in   5.034740s
String#gsub!'string'    591.277k (± 0.3%) i/s -      2.957M in   5.000829s
  String#[/regexp/]=      1.178M (± 1.5%) i/s -      5.937M in   5.041982s
 String#sub!/regexp/    969.453k (± 0.9%) i/s -      4.861M in   5.014501s
String#gsub!/regexp/    481.036k (± 0.6%) i/s -      2.425M in   5.041487s

Comparison:
  String#['string']=:  1364825.7 i/s
  String#[/regexp/]=:  1177660.1 i/s - 1.16x  (± 0.00) slower
 String#sub!/regexp/:   969452.6 i/s - 1.41x  (± 0.00) slower
 String#sub!'string':   955394.0 i/s - 1.43x  (± 0.00) slower
String#gsub!'string':   591277.4 i/s - 2.31x  (± 0.00) slower
String#gsub!/regexp/:   481035.7 i/s - 2.84x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   118.760k i/100ms
        String#chomp   410.652k i/100ms
String#delete_suffix   429.997k i/100ms
Calculating -------------------------------------
          String#sub      1.165M (± 0.6%) i/s -      5.938M in   5.094967s
        String#chomp      4.097M (± 0.9%) i/s -     20.533M in   5.011755s
String#delete_suffix      4.296M (± 0.1%) i/s -     21.500M in   5.004417s

Comparison:
String#delete_suffix:  4296176.6 i/s
        String#chomp:  4097225.0 i/s - 1.05x  (± 0.00) slower
          String#sub:  1165499.4 i/s - 3.69x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   460.876k i/100ms
          String#sub   117.722k i/100ms
Calculating -------------------------------------
String#delete_prefix      4.611M (± 0.1%) i/s -     23.505M in   5.097016s
          String#sub      1.193M (± 0.4%) i/s -      6.004M in   5.033884s

Comparison:
String#delete_prefix:  4611460.8 i/s
          String#sub:  1192700.2 i/s - 3.87x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   448.953k i/100ms
    String#unpack[0]   343.209k i/100ms
Calculating -------------------------------------
      String#unpack1      4.488M (± 0.1%) i/s -     22.448M in   5.002088s
    String#unpack[0]      3.437M (± 0.1%) i/s -     17.504M in   5.092033s

Comparison:
      String#unpack1:  4487659.7 i/s
    String#unpack[0]:  3437461.2 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    21.932k i/100ms
          Time.parse     7.303k i/100ms
Calculating -------------------------------------
        Time.iso8601    218.842k (± 0.6%) i/s -      1.097M in   5.011075s
          Time.parse     73.326k (± 0.6%) i/s -    372.453k in   5.079626s

Comparison:
        Time.iso8601:   218842.1 i/s
          Time.parse:    73325.7 i/s - 2.98x  (± 0.00) slower

