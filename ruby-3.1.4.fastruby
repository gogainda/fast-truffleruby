$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       609.431k i/100ms
Function with splat arguments
                         9.771k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          6.080M (± 0.1%) i/s -     30.472M in   5.012014s
Function with splat arguments
                         92.216k (± 7.4%) i/s -    459.237k in   5.014292s

Comparison:
Function with single Array argument:  6079705.4 i/s
Function with splat arguments:    92215.7 i/s - 65.93x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.024M i/100ms
Sequential Assignment
                       899.694k i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.249M (± 0.1%) i/s -     52.246M in   5.097472s
Sequential Assignment
                          8.971M (± 0.4%) i/s -     44.985M in   5.014353s

Comparison:
 Parallel Assignment: 10249425.2 i/s
Sequential Assignment:  8971334.6 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   366.215k i/100ms
       attr_accessor   419.937k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.669M (± 0.1%) i/s -     18.677M in   5.090982s
       attr_accessor      4.202M (± 0.1%) i/s -     21.417M in   5.097093s

Comparison:
       attr_accessor:  4201766.2 i/s
   getter_and_setter:  3668638.9 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    73.481k i/100ms
         respond_to?   608.740k i/100ms
Calculating -------------------------------------
      begin...rescue    737.547k (± 0.4%) i/s -      3.748M in   5.081142s
         respond_to?      6.080M (± 0.3%) i/s -     30.437M in   5.005774s

Comparison:
         respond_to?:  6080425.9 i/s
      begin...rescue:   737547.1 i/s - 8.24x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   237.841k i/100ms
             &method    89.441k i/100ms
Calculating -------------------------------------
              normal      2.376M (± 0.1%) i/s -     11.892M in   5.004451s
             &method    894.080k (± 0.2%) i/s -      4.472M in   5.001855s

Comparison:
              normal:  2376296.9 i/s
             &method:   894080.5 i/s - 2.66x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       184.000  i/100ms
       define_method   230.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.970k (±20.4%) i/s -      8.648k in   5.016550s
       define_method      2.374k (±24.3%) i/s -      9.890k in   5.012409s

Comparison:
       define_method:     2374.0 i/s
module_eval with string:     1970.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   143.914k i/100ms
       Kernel#format   159.888k i/100ms
            String#%   141.847k i/100ms
Calculating -------------------------------------
         Float#round      1.437M (± 0.4%) i/s -      7.196M in   5.008179s
       Kernel#format      1.599M (± 0.1%) i/s -      8.154M in   5.099598s
            String#%      1.420M (± 0.1%) i/s -      7.234M in   5.095550s

Comparison:
       Kernel#format:  1599006.8 i/s
         Float#round:  1436811.7 i/s - 1.11x  (± 0.00) slower
            String#%:  1419709.7 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   700.800k i/100ms
          OpenStruct   376.285k i/100ms
Calculating -------------------------------------
                Hash      7.010M (± 0.1%) i/s -     35.741M in   5.098575s
          OpenStruct      3.764M (± 0.1%) i/s -     19.191M in   5.098716s

Comparison:
                Hash:  7009961.7 i/s
          OpenStruct:  3763799.2 i/s - 1.86x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   883.780k i/100ms
          OpenStruct     8.417k i/100ms
Calculating -------------------------------------
                Hash      9.560M (± 0.2%) i/s -     48.608M in   5.084480s
          OpenStruct     85.142k (± 2.7%) i/s -    429.267k in   5.045483s

Comparison:
                Hash:  9560081.1 i/s
          OpenStruct:    85142.2 i/s - 112.28x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   461.343k i/100ms
  ancestors.include?    89.849k i/100ms
Calculating -------------------------------------
  less than or equal      4.614M (± 0.1%) i/s -     23.528M in   5.099143s
  ancestors.include?    897.900k (± 0.1%) i/s -      4.492M in   5.003289s

Comparison:
  less than or equal:  4614206.7 i/s
  ancestors.include?:   897899.7 i/s - 5.14x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.599  (± 0.0%) i/s -      3.000  in   5.007790s
         Kernel loop      0.173  (± 0.0%) i/s -      1.000  in   5.777668s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 3.46x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.410M i/100ms
         Array#first     1.197M i/100ms
Calculating -------------------------------------
           Array#[0]     14.100M (± 0.0%) i/s -     71.903M in   5.099564s
         Array#first     11.967M (± 0.0%) i/s -     61.026M in   5.099413s

Comparison:
           Array#[0]: 14099855.7 i/s
         Array#first: 11967198.2 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.357M i/100ms
          Array#last     1.139M i/100ms
Calculating -------------------------------------
          Array#[-1]     13.569M (± 0.0%) i/s -     67.845M in   4.999979s
          Array#last     11.379M (± 0.1%) i/s -     56.943M in   5.004393s

Comparison:
          Array#[-1]: 13568989.9 i/s
          Array#last: 11378655.3 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    69.148k i/100ms
Calculating -------------------------------------
                find      0.188  (± 0.0%) i/s -      1.000  in   5.325905s
             bsearch    688.908k (± 0.2%) i/s -      3.457M in   5.018689s

Comparison:
             bsearch:   688907.7 i/s
                find:        0.2 i/s - 3669056.67x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    14.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    143.964  (± 2.8%) i/s -    728.000  in   5.060427s
        Array#insert      1.321  (± 0.0%) i/s -      7.000  in   5.311525s

Comparison:
       Array#unshift:      144.0 i/s
        Array#insert:        1.3 i/s - 108.94x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.890M i/100ms
          Array#size     1.889M i/100ms
         Array#count     1.411M i/100ms
Calculating -------------------------------------
        Array#length     18.931M (± 0.1%) i/s -     96.390M in   5.091633s
          Array#size     18.905M (± 0.4%) i/s -     96.330M in   5.095465s
         Array#count     14.117M (± 0.1%) i/s -     71.973M in   5.098172s

Comparison:
        Array#length: 18931126.8 i/s
          Array#size: 18905386.1 i/s - same-ish: difference falls within error
         Array#count: 14117482.7 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    34.076k i/100ms
        Array#sample   907.081k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    339.950k (± 0.7%) i/s -      1.704M in   5.012183s
        Array#sample      9.071M (± 0.0%) i/s -     45.354M in   5.000158s

Comparison:
        Array#sample:  9070523.7 i/s
 Array#shuffle.first:   339950.1 i/s - 26.68x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    50.487k i/100ms
          Date.parse    25.264k i/100ms
Calculating -------------------------------------
        Date.iso8601    506.429k (± 0.5%) i/s -      2.575M in   5.084424s
          Date.parse    252.365k (± 0.6%) i/s -      1.263M in   5.005619s

Comparison:
        Date.iso8601:   506429.4 i/s
          Date.parse:   252365.4 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    13.871k i/100ms
           Array#map    19.131k i/100ms
Calculating -------------------------------------
   Array#each + push    138.659k (± 0.2%) i/s -    693.550k in   5.001879s
           Array#map    190.939k (± 0.1%) i/s -    956.550k in   5.009727s

Comparison:
           Array#map:   190938.8 i/s
   Array#each + push:   138658.5 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    21.503k i/100ms
               #each    23.634k i/100ms
Calculating -------------------------------------
            For loop    214.999k (± 0.3%) i/s -      1.075M in   5.000785s
               #each    236.308k (± 0.0%) i/s -      1.182M in   5.000675s

Comparison:
               #each:   236308.2 i/s
            For loop:   214998.9 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    28.996k i/100ms
     each_with_index    14.909k i/100ms
Calculating -------------------------------------
          While Loop    288.424k (± 0.1%) i/s -      1.450M in   5.026621s
     each_with_index    149.271k (± 0.1%) i/s -    760.359k in   5.093803s

Comparison:
          While Loop:   288424.5 i/s
     each_with_index:   149271.4 i/s - 1.93x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    82.018k i/100ms
      inject to_proc     1.536k i/100ms
        inject block     1.573k i/100ms
Calculating -------------------------------------
       inject symbol    820.186k (± 0.0%) i/s -      4.183M in   5.099961s
      inject to_proc     15.352k (± 0.2%) i/s -     76.800k in   5.002486s
        inject block     15.732k (± 0.3%) i/s -     80.223k in   5.099270s

Comparison:
       inject symbol:   820186.4 i/s
        inject block:    15732.4 i/s - 52.13x  (± 0.00) slower
      inject to_proc:    15352.4 i/s - 53.42x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     5.160k i/100ms
   Array#map.flatten     2.822k i/100ms
      Array#flat_map     6.699k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     51.710k (± 0.1%) i/s -    263.160k in   5.089151s
   Array#map.flatten     28.202k (± 0.4%) i/s -    141.100k in   5.003182s
      Array#flat_map     66.976k (± 0.1%) i/s -    334.950k in   5.001055s

Comparison:
      Array#flat_map:    66975.9 i/s
Array#map.flatten(1):    51710.0 i/s - 1.30x  (± 0.00) slower
   Array#map.flatten:    28202.4 i/s - 2.37x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    22.625k i/100ms
  Array#reverse_each    23.418k i/100ms
Calculating -------------------------------------
  Array#reverse.each    226.253k (± 0.2%) i/s -      1.131M in   4.999937s
  Array#reverse_each    234.319k (± 0.1%) i/s -      1.194M in   5.096973s

Comparison:
  Array#reverse_each:   234319.4 i/s
  Array#reverse.each:   226253.4 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        15.442k i/100ms
   Enumerable#detect    61.360k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        154.194k (± 0.2%) i/s -      3.088M in  20.029371s
   Enumerable#detect    611.351k (± 0.8%) i/s -     12.272M in  20.075022s

Comparison:
   Enumerable#detect:   611351.2 i/s
Enumerable#select.first:   154194.4 i/s - 3.96x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       175.986k i/100ms
Enumerable#select.last
                        12.583k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.753M (± 0.4%) i/s -      8.799M in   5.020787s
Enumerable#select.last
                        125.808k (± 0.1%) i/s -    629.150k in   5.000885s

Comparison:
Enumerable#reverse.detect:  1752608.3 i/s
Enumerable#select.last:   125808.0 i/s - 13.93x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.405k i/100ms
  Enumerable#sort_by     3.293k i/100ms
     Enumerable#sort     1.810k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         34.122k (± 0.2%) i/s -    173.655k in   5.089310s
  Enumerable#sort_by     32.975k (± 0.2%) i/s -    167.943k in   5.093047s
     Enumerable#sort     18.099k (± 0.2%) i/s -     90.500k in   5.000400s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    34121.6 i/s
  Enumerable#sort_by:    32975.1 i/s - 1.03x  (± 0.00) slower
     Enumerable#sort:    18098.6 i/s - 1.89x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    13.252k i/100ms
Enumerable#sort_by...first
                         6.168k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    132.550k (± 0.1%) i/s -    675.852k in   5.098861s
Enumerable#sort_by...first
                         61.922k (± 0.3%) i/s -    314.568k in   5.080100s

Comparison:
   Enumerable#min_by:   132549.7 i/s
Enumerable#sort_by...first:    61922.2 i/s - 2.14x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   259.372k i/100ms
            Hash#dup   180.463k i/100ms
Calculating -------------------------------------
              Hash[]      2.634M (± 2.5%) i/s -     13.228M in   5.025351s
            Hash#dup      1.940M (± 2.8%) i/s -      9.745M in   5.026787s

Comparison:
              Hash[]:  2633921.8 i/s
            Hash#dup:  1940209.8 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.262M i/100ms
  Hash#fetch, symbol   978.231k i/100ms
     Hash#[], string     1.055M i/100ms
  Hash#fetch, string   601.601k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     12.617M (± 0.0%) i/s -     64.340M in   5.099534s
  Hash#fetch, symbol      9.780M (± 0.0%) i/s -     48.912M in   5.001055s
     Hash#[], string     10.549M (± 0.0%) i/s -     53.787M in   5.098961s
  Hash#fetch, string      6.010M (± 0.1%) i/s -     30.080M in   5.004601s

Comparison:
     Hash#[], symbol: 12616854.8 i/s
     Hash#[], string: 10548550.6 i/s - 1.20x  (± 0.00) slower
  Hash#fetch, symbol:  9780247.6 i/s - 1.29x  (± 0.00) slower
  Hash#fetch, string:  6010482.9 i/s - 2.10x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   688.013k i/100ms
             Hash#[]   788.603k i/100ms
          Hash#[] ||   711.327k i/100ms
          Hash#[] &&   309.154k i/100ms
          Hash#fetch   481.503k i/100ms
 Hash#fetch fallback   284.770k i/100ms
Calculating -------------------------------------
            Hash#dig      6.910M (± 0.4%) i/s -     35.089M in   5.078059s
             Hash#[]      7.867M (± 0.3%) i/s -     39.430M in   5.011990s
          Hash#[] ||      7.118M (± 0.2%) i/s -     36.278M in   5.096678s
          Hash#[] &&      3.093M (± 0.2%) i/s -     15.767M in   5.098220s
          Hash#fetch      4.819M (± 0.1%) i/s -     24.557M in   5.095790s
 Hash#fetch fallback      2.844M (± 0.1%) i/s -     14.238M in   5.005979s

Comparison:
             Hash#[]:  7867222.2 i/s
          Hash#[] ||:  7117923.0 i/s - 1.11x  (± 0.00) slower
            Hash#dig:  6909953.9 i/s - 1.14x  (± 0.00) slower
          Hash#fetch:  4819016.6 i/s - 1.63x  (± 0.00) slower
          Hash#[] &&:  3092627.4 i/s - 2.54x  (± 0.00) slower
 Hash#fetch fallback:  2844300.8 i/s - 2.77x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.223M i/100ms
  Hash#fetch + block     1.172M i/100ms
    Hash#fetch + arg   842.990k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     12.227M (± 0.4%) i/s -     61.160M in   5.001943s
  Hash#fetch + block     11.737M (± 0.1%) i/s -     59.794M in   5.094671s
    Hash#fetch + arg      8.425M (± 0.1%) i/s -     42.150M in   5.002630s

Comparison:
  Hash#fetch + const: 12227429.8 i/s
  Hash#fetch + block: 11736579.1 i/s - 1.04x  (± 0.00) slower
    Hash#fetch + arg:  8425472.6 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    19.829k i/100ms
         sort + to_h     9.505k i/100ms
Calculating -------------------------------------
      sort_by + to_h    198.129k (± 0.4%) i/s -    991.450k in   5.004133s
         sort + to_h     95.149k (± 0.2%) i/s -    484.755k in   5.094721s

Comparison:
      sort_by + to_h:   198129.4 i/s
         sort + to_h:    95148.8 i/s - 2.08x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   138.544k i/100ms
       Hash#each_key   144.780k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.390M (± 0.2%) i/s -      7.066M in   5.082584s
       Hash#each_key      1.449M (± 0.0%) i/s -      7.384M in   5.096538s

Comparison:
       Hash#each_key:  1448783.6 i/s
      Hash#keys.each:  1390190.8 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     2.558k i/100ms
           Hash#key?   763.397k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     25.301k (± 4.6%) i/s -    127.900k in   5.069867s
           Hash#key?      7.633M (± 0.0%) i/s -     38.170M in   5.000652s

Comparison:
           Hash#key?:  7632976.6 i/s
  Hash#keys.include?:    25301.0 i/s - 301.69x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     2.976k i/100ms
            Hash#[]=     6.787k i/100ms
Calculating -------------------------------------
         Hash#merge!     29.773k (± 0.1%) i/s -    151.776k in   5.097854s
            Hash#[]=     68.098k (± 0.5%) i/s -    346.137k in   5.083052s

Comparison:
            Hash#[]=:    68097.9 i/s
         Hash#merge!:    29772.6 i/s - 2.29x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.749k i/100ms
      Hash#merge({})     2.918k i/100ms
 Hash#dup#merge!({})     2.227k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         37.301k (± 0.1%) i/s -    187.450k in   5.025334s
      Hash#merge({})     29.306k (± 1.7%) i/s -    148.818k in   5.079611s
 Hash#dup#merge!({})     22.127k (± 0.2%) i/s -    111.350k in   5.032288s

Comparison:
{}#merge!(Hash) do end:    37301.0 i/s
      Hash#merge({}):    29306.0 i/s - 1.27x  (± 0.00) slower
 Hash#dup#merge!({}):    22127.2 i/s - 1.69x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   281.057k i/100ms
          Hash#merge   251.580k i/100ms
Calculating -------------------------------------
        Hash#**other      2.820M (± 0.1%) i/s -     14.334M in   5.082376s
          Hash#merge      2.517M (± 0.1%) i/s -     12.831M in   5.098002s

Comparison:
        Hash#**other:  2820321.3 i/s
          Hash#merge:  2516787.6 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.127k i/100ms
         Hash#merge!     2.919k i/100ms
Calculating -------------------------------------
          Hash#merge     11.524k (± 0.6%) i/s -     58.604k in   5.085536s
         Hash#merge!     29.121k (± 1.5%) i/s -    145.950k in   5.013031s

Comparison:
         Hash#merge!:    29121.2 i/s
          Hash#merge:    11524.0 i/s - 2.53x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      310.802k i/100ms
Array#each             161.720k i/100ms
Array#each_w/_object   118.554k i/100ms
Hash#select-include     52.897k i/100ms
Calculating -------------------------------------
Hash#native-slice         3.115M (± 0.1%) i/s -     15.851M in   5.087944s
Array#each                1.641M (± 0.2%) i/s -      8.248M in   5.025105s
Array#each_w/_object      1.188M (± 0.2%) i/s -      6.046M in   5.091466s
Hash#select-include     528.518k (± 1.8%) i/s -      2.645M in   5.005949s

Comparison:
Hash#native-slice   :  3115389.1 i/s
Array#each          :  1641312.7 i/s - 1.90x  (± 0.00) slower
Array#each_w/_object:  1187533.7 i/s - 2.62x  (± 0.00) slower
Hash#select-include :   528517.6 i/s - 5.89x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     5.872k i/100ms
         Hash#value?    14.217k i/100ms
Calculating -------------------------------------
Hash#values.include?     57.369k (± 6.2%) i/s -    287.728k in   5.049002s
         Hash#value?    142.094k (± 0.4%) i/s -    710.850k in   5.002739s

Comparison:
         Hash#value?:   142094.3 i/s
Hash#values.include?:    57368.9 i/s - 2.48x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   523.549k i/100ms
                send   349.863k i/100ms
      method_missing   264.324k i/100ms
Calculating -------------------------------------
                call      5.267M (± 0.4%) i/s -     26.701M in   5.069471s
                send      3.522M (± 0.1%) i/s -     17.843M in   5.066601s
      method_missing      2.660M (± 0.1%) i/s -     13.481M in   5.067639s

Comparison:
                call:  5267101.4 i/s
                send:  3521696.6 i/s - 1.50x  (± 0.00) slower
      method_missing:  2660123.7 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     5.770k i/100ms
      Symbol#to_proc     6.219k i/100ms
Calculating -------------------------------------
               Block     57.678k (± 0.1%) i/s -    288.500k in   5.001940s
      Symbol#to_proc     62.092k (± 0.1%) i/s -    310.950k in   5.007891s

Comparison:
      Symbol#to_proc:    62092.1 i/s
               Block:    57677.7 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   776.334k i/100ms
       block + yield   839.076k i/100ms
        unused block     1.068M i/100ms
               yield     1.052M i/100ms
Calculating -------------------------------------
          block.call      7.764M (± 0.1%) i/s -     39.593M in   5.099796s
       block + yield      8.393M (± 0.1%) i/s -     42.793M in   5.098801s
        unused block     10.535M (± 1.1%) i/s -     53.417M in   5.070977s
               yield     10.165M (± 0.0%) i/s -     51.570M in   5.073333s

Comparison:
        unused block: 10535229.1 i/s
               yield: 10164955.2 i/s - 1.04x  (± 0.00) slower
       block + yield:  8392736.3 i/s - 1.26x  (± 0.00) slower
          block.call:  7763653.1 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   239.944k i/100ms
      range#include?     9.451k i/100ms
       range#member?     9.357k i/100ms
       plain compare   358.157k i/100ms
Calculating -------------------------------------
        range#cover?      2.400M (± 0.1%) i/s -     12.237M in   5.099657s
      range#include?     95.443k (± 1.3%) i/s -    482.001k in   5.050972s
       range#member?     95.688k (± 0.7%) i/s -    486.564k in   5.085100s
       plain compare      3.604M (± 0.1%) i/s -     18.266M in   5.068085s

Comparison:
       plain compare:  3604127.0 i/s
        range#cover?:  2399602.5 i/s - 1.50x  (± 0.00) slower
       range#member?:    95688.5 i/s - 37.67x  (± 0.00) slower
      range#include?:    95443.3 i/s - 37.76x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   753.355k i/100ms
           String#=~   445.407k i/100ms
          Regexp#===   426.464k i/100ms
        String#match   348.167k i/100ms
Calculating -------------------------------------
       String#match?      7.535M (± 0.1%) i/s -     38.421M in   5.098685s
           String#=~      4.638M (± 0.1%) i/s -     23.607M in   5.090055s
          Regexp#===      4.282M (± 0.1%) i/s -     21.750M in   5.079223s
        String#match      3.464M (± 0.1%) i/s -     17.408M in   5.025786s

Comparison:
       String#match?:  7535498.8 i/s
           String#=~:  4637790.9 i/s - 1.62x  (± 0.00) slower
          Regexp#===:  4282091.1 i/s - 1.76x  (± 0.00) slower
        String#match:  3463809.2 i/s - 2.18x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   473.970k i/100ms
      String#casecmp   611.803k i/100ms
Calculating -------------------------------------
String#downcase + ==      4.743M (± 0.1%) i/s -     24.172M in   5.096939s
      String#casecmp      6.112M (± 0.1%) i/s -     30.590M in   5.004683s

Comparison:
      String#casecmp:  6112309.7 i/s
String#downcase + ==:  4742548.6 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   426.234k i/100ms
       String#concat   450.602k i/100ms
       String#append   483.297k i/100ms
         "foo" "bar"   952.243k i/100ms
  "#{'foo'}#{'bar'}"   954.563k i/100ms
Calculating -------------------------------------
            String#+      4.264M (± 0.1%) i/s -     21.738M in   5.098585s
       String#concat      4.501M (± 0.1%) i/s -     22.530M in   5.006051s
       String#append      4.826M (± 0.1%) i/s -     24.165M in   5.006786s
         "foo" "bar"      9.506M (± 0.1%) i/s -     47.612M in   5.008512s
  "#{'foo'}#{'bar'}"      9.531M (± 0.2%) i/s -     47.728M in   5.007844s

Comparison:
  "#{'foo'}#{'bar'}":  9530732.8 i/s
         "foo" "bar":  9506253.2 i/s - same-ish: difference falls within error
       String#append:  4826422.5 i/s - 1.97x  (± 0.00) slower
       String#concat:  4500576.9 i/s - 2.12x  (± 0.00) slower
            String#+:  4263526.5 i/s - 2.24x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@   831.115k i/100ms
          String#dup   424.378k i/100ms
Calculating -------------------------------------
           String#+@      8.309M (± 0.1%) i/s -     41.556M in   5.001428s
          String#dup      4.239M (± 0.3%) i/s -     21.219M in   5.005367s

Comparison:
           String#+@:  8308786.2 i/s
          String#dup:  4239275.4 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   142.745k i/100ms
       String#match?   321.685k i/100ms
    String#end_with?   452.290k i/100ms
Calculating -------------------------------------
           String#=~      1.431M (± 0.1%) i/s -      7.280M in   5.087050s
       String#match?      3.217M (± 0.1%) i/s -     16.084M in   5.000117s
    String#end_with?      4.523M (± 0.1%) i/s -     22.614M in   4.999902s

Comparison:
    String#end_with?:  4522991.2 i/s
       String#match?:  3216775.9 i/s - 1.41x  (± 0.00) slower
           String#=~:  1431086.4 i/s - 3.16x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    83.115k i/100ms
          String#sub   104.748k i/100ms
String#dup["string"]=
                       145.672k i/100ms
Calculating -------------------------------------
         String#gsub    848.757k (± 0.6%) i/s -      4.322M in   5.092300s
          String#sub      1.048M (± 0.8%) i/s -      5.342M in   5.098023s
String#dup["string"]=
                          1.414M (± 0.6%) i/s -      7.138M in   5.047197s

Comparison:
String#dup["string"]=:  1414288.0 i/s
          String#sub:  1047948.7 i/s - 1.35x  (± 0.00) slower
         String#gsub:   848756.7 i/s - 1.67x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    73.774k i/100ms
           String#tr   270.596k i/100ms
Calculating -------------------------------------
         String#gsub    738.984k (± 0.6%) i/s -      3.762M in   5.091581s
           String#tr      2.702M (± 0.3%) i/s -     13.530M in   5.007225s

Comparison:
           String#tr:  2702080.4 i/s
         String#gsub:   738984.4 i/s - 3.66x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   922.996k i/100ms
         With Freeze     1.545M i/100ms
Calculating -------------------------------------
      Without Freeze      8.865M (± 0.1%) i/s -     45.227M in   5.101869s
         With Freeze     15.448M (± 0.1%) i/s -     78.770M in   5.099061s

Comparison:
         With Freeze: 15447871.7 i/s
      Without Freeze:  8864754.7 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.589k i/100ms
      String#squeeze   109.747k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     25.773k (± 0.2%) i/s -    129.450k in   5.022697s
      String#squeeze      1.106M (± 0.4%) i/s -      5.597M in   5.062549s

Comparison:
      String#squeeze:  1105606.5 i/s
 String#gsub/regex+/:    25773.1 i/s - 42.90x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   215.110k i/100ms
       String#match?   596.998k i/100ms
  String#start_with?   702.963k i/100ms
Calculating -------------------------------------
           String#=~      2.139M (± 0.2%) i/s -     10.756M in   5.029011s
       String#match?      5.905M (± 0.0%) i/s -     29.850M in   5.055115s
  String#start_with?      6.929M (± 0.1%) i/s -     35.148M in   5.072721s

Comparison:
  String#start_with?:  6928863.3 i/s
       String#match?:  5904890.5 i/s - 1.17x  (± 0.00) slower
           String#=~:  2138702.4 i/s - 3.24x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   160.742k i/100ms
    String#[0, n] ==    57.195k i/100ms
   String#[RANGE] ==    53.566k i/100ms
   String#[0...n] ==    34.520k i/100ms
Calculating -------------------------------------
  String#start_with?      1.606M (± 0.2%) i/s -      8.037M in   5.005978s
    String#[0, n] ==    579.115k (± 0.2%) i/s -      2.917M in   5.036927s
   String#[RANGE] ==    536.372k (± 0.2%) i/s -      2.732M in   5.093246s
   String#[0...n] ==    344.502k (± 0.1%) i/s -      1.726M in   5.010132s

Comparison:
  String#start_with?:  1605506.5 i/s
    String#[0, n] ==:   579115.3 i/s - 2.77x  (± 0.00) slower
   String#[RANGE] ==:   536371.9 i/s - 2.99x  (± 0.00) slower
   String#[0...n] ==:   344502.2 i/s - 4.66x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   139.201k i/100ms
 String#sub!'string'    97.048k i/100ms
String#gsub!'string'    59.452k i/100ms
  String#[/regexp/]=   116.587k i/100ms
 String#sub!/regexp/    95.771k i/100ms
String#gsub!/regexp/    47.687k i/100ms
Calculating -------------------------------------
  String#['string']=      1.399M (± 0.6%) i/s -      7.099M in   5.074018s
 String#sub!'string'    965.172k (± 1.2%) i/s -      4.852M in   5.028257s
String#gsub!'string'    595.023k (± 0.8%) i/s -      3.032M in   5.096016s
  String#[/regexp/]=      1.159M (± 0.5%) i/s -      5.829M in   5.028811s
 String#sub!/regexp/    976.473k (± 0.4%) i/s -      4.884M in   5.002101s
String#gsub!/regexp/    486.627k (± 0.9%) i/s -      2.480M in   5.096163s

Comparison:
  String#['string']=:  1399194.0 i/s
  String#[/regexp/]=:  1159218.7 i/s - 1.21x  (± 0.00) slower
 String#sub!/regexp/:   976472.8 i/s - 1.43x  (± 0.00) slower
 String#sub!'string':   965171.5 i/s - 1.45x  (± 0.00) slower
String#gsub!'string':   595023.0 i/s - 2.35x  (± 0.00) slower
String#gsub!/regexp/:   486626.8 i/s - 2.88x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   120.442k i/100ms
        String#chomp   412.938k i/100ms
String#delete_suffix   448.851k i/100ms
Calculating -------------------------------------
          String#sub      1.175M (± 0.4%) i/s -      5.902M in   5.022545s
        String#chomp      4.124M (± 0.1%) i/s -     20.647M in   5.005953s
String#delete_suffix      4.482M (± 0.4%) i/s -     22.443M in   5.007454s

Comparison:
String#delete_suffix:  4481899.6 i/s
        String#chomp:  4124471.1 i/s - 1.09x  (± 0.00) slower
          String#sub:  1175055.5 i/s - 3.81x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   465.195k i/100ms
          String#sub   120.599k i/100ms
Calculating -------------------------------------
String#delete_prefix      4.645M (± 0.1%) i/s -     23.260M in   5.007536s
          String#sub      1.213M (± 0.4%) i/s -      6.151M in   5.072188s

Comparison:
String#delete_prefix:  4644951.0 i/s
          String#sub:  1212620.3 i/s - 3.83x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   444.614k i/100ms
    String#unpack[0]   343.354k i/100ms
Calculating -------------------------------------
      String#unpack1      4.446M (± 0.1%) i/s -     22.231M in   5.000472s
    String#unpack[0]      3.434M (± 0.3%) i/s -     17.511M in   5.099528s

Comparison:
      String#unpack1:  4445724.1 i/s
    String#unpack[0]:  3433894.2 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    21.859k i/100ms
          Time.parse     7.347k i/100ms
Calculating -------------------------------------
        Time.iso8601    217.929k (± 0.6%) i/s -      1.093M in   5.015356s
          Time.parse     73.080k (± 0.7%) i/s -    367.350k in   5.026955s

Comparison:
        Time.iso8601:   217928.6 i/s
          Time.parse:    73080.3 i/s - 2.98x  (± 0.00) slower

