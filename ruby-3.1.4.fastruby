$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       760.792k i/100ms
Function with splat arguments
                        17.775k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.637M (± 0.4%) i/s -     38.800M in   5.080407s
Function with splat arguments
                        190.641k (±12.2%) i/s -    942.075k in   5.026134s

Comparison:
Function with single Array argument:  7637415.6 i/s
Function with splat arguments:   190640.9 i/s - 40.06x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.000M i/100ms
Sequential Assignment
                         1.012M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.042M (± 0.2%) i/s -     51.010M in   5.079535s
Sequential Assignment
                         10.090M (± 1.0%) i/s -     50.577M in   5.012880s

Comparison:
Sequential Assignment: 10090496.2 i/s
 Parallel Assignment: 10042228.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   477.178k i/100ms
       attr_accessor   559.293k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.716M (± 2.6%) i/s -     23.859M in   5.062913s
       attr_accessor      5.555M (± 0.5%) i/s -     27.965M in   5.034449s

Comparison:
       attr_accessor:  5554816.1 i/s
   getter_and_setter:  4715978.6 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    87.730k i/100ms
         respond_to?   768.608k i/100ms
Calculating -------------------------------------
      begin...rescue    887.495k (± 0.9%) i/s -      4.474M in   5.041811s
         respond_to?      7.626M (± 0.2%) i/s -     38.430M in   5.039355s

Comparison:
         respond_to?:  7626102.5 i/s
      begin...rescue:   887495.3 i/s - 8.59x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   293.091k i/100ms
             &method   122.067k i/100ms
Calculating -------------------------------------
              normal      2.977M (± 0.3%) i/s -     14.948M in   5.021371s
             &method      1.220M (± 0.9%) i/s -      6.103M in   5.002356s

Comparison:
              normal:  2976837.6 i/s
             &method:  1220188.2 i/s - 2.44x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       218.000  i/100ms
       define_method   282.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.079k (±26.6%) i/s -      8.720k in   5.072305s
       define_method      3.254k (±16.2%) i/s -     16.074k in   5.065669s

Comparison:
       define_method:     3254.0 i/s
module_eval with string:     2079.0 i/s - 1.57x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   256.736k i/100ms
       Kernel#format   206.427k i/100ms
            String#%   175.505k i/100ms
Calculating -------------------------------------
         Float#round      2.619M (± 1.6%) i/s -     13.094M in   5.000436s
       Kernel#format      2.046M (± 3.1%) i/s -     10.321M in   5.051144s
            String#%      1.779M (± 0.7%) i/s -      8.951M in   5.032077s

Comparison:
         Float#round:  2619155.7 i/s
       Kernel#format:  2045756.0 i/s - 1.28x  (± 0.00) slower
            String#%:  1778827.0 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   909.597k i/100ms
          OpenStruct   497.919k i/100ms
Calculating -------------------------------------
                Hash      9.008M (± 0.4%) i/s -     45.480M in   5.049129s
          OpenStruct      4.909M (± 0.3%) i/s -     24.896M in   5.071873s

Comparison:
                Hash:  9007632.2 i/s
          OpenStruct:  4908687.1 i/s - 1.84x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.097M i/100ms
          OpenStruct    10.808k i/100ms
Calculating -------------------------------------
                Hash     11.536M (± 0.6%) i/s -     58.144M in   5.040338s
          OpenStruct    113.123k (± 2.9%) i/s -    572.824k in   5.068114s

Comparison:
                Hash: 11536090.2 i/s
          OpenStruct:   113123.0 i/s - 101.98x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   604.922k i/100ms
  ancestors.include?   123.565k i/100ms
Calculating -------------------------------------
  less than or equal      5.813M (± 0.4%) i/s -     29.641M in   5.099417s
  ancestors.include?      1.226M (± 0.8%) i/s -      6.178M in   5.038221s

Comparison:
  less than or equal:  5812752.2 i/s
  ancestors.include?:  1226362.5 i/s - 4.74x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.771  (± 0.0%) i/s -      4.000  in   5.285562s
         Kernel loop      0.232  (± 0.0%) i/s -      2.000  in   8.632943s

Comparison:
          While Loop:        0.8 i/s
         Kernel loop:        0.2 i/s - 3.33x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.530M i/100ms
         Array#first     1.320M i/100ms
Calculating -------------------------------------
           Array#[0]     15.286M (± 0.3%) i/s -     76.491M in   5.004082s
         Array#first     13.183M (± 0.6%) i/s -     65.990M in   5.005791s

Comparison:
           Array#[0]: 15285874.9 i/s
         Array#first: 13183202.5 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.559M i/100ms
          Array#last     1.309M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.563M (± 1.8%) i/s -     77.958M in   5.011202s
          Array#last     13.205M (± 0.4%) i/s -     66.747M in   5.054804s

Comparison:
          Array#[-1]: 15562715.0 i/s
          Array#last: 13204968.2 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    96.106k i/100ms
Calculating -------------------------------------
                find      0.275  (± 0.0%) i/s -      2.000  in   7.282498s
             bsearch    962.137k (± 1.1%) i/s -      4.901M in   5.094939s

Comparison:
             bsearch:   962136.7 i/s
                find:        0.3 i/s - 3503379.11x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    18.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    189.140  (± 2.1%) i/s -    954.000  in   5.046382s
        Array#insert      1.436  (± 0.0%) i/s -      8.000  in   5.572162s

Comparison:
       Array#unshift:      189.1 i/s
        Array#insert:        1.4 i/s - 131.69x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.128M i/100ms
          Array#size     2.116M i/100ms
         Array#count     1.641M i/100ms
Calculating -------------------------------------
        Array#length     21.237M (± 0.4%) i/s -    106.415M in   5.010999s
          Array#size     21.062M (± 0.5%) i/s -    105.781M in   5.022424s
         Array#count     16.295M (± 1.5%) i/s -     82.055M in   5.036757s

Comparison:
        Array#length: 21236596.6 i/s
          Array#size: 21062289.7 i/s - same-ish: difference falls within error
         Array#count: 16295128.0 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.167k i/100ms
        Array#sample     1.010M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    453.768k (± 0.5%) i/s -      2.304M in   5.076530s
        Array#sample     10.430M (± 0.3%) i/s -     52.508M in   5.034291s

Comparison:
        Array#sample: 10430193.3 i/s
 Array#shuffle.first:   453768.0 i/s - 22.99x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    64.353k i/100ms
          Date.parse    32.438k i/100ms
Calculating -------------------------------------
        Date.iso8601    643.726k (± 0.6%) i/s -      3.282M in   5.098658s
          Date.parse    322.966k (± 0.4%) i/s -      1.622M in   5.021962s

Comparison:
        Date.iso8601:   643726.0 i/s
          Date.parse:   322966.5 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.644k i/100ms
           Array#map    25.712k i/100ms
Calculating -------------------------------------
   Array#each + push    186.193k (± 1.2%) i/s -    932.200k in   5.007353s
           Array#map    256.041k (± 2.2%) i/s -      1.286M in   5.023700s

Comparison:
           Array#map:   256041.4 i/s
   Array#each + push:   186193.3 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    28.771k i/100ms
               #each    31.616k i/100ms
Calculating -------------------------------------
            For loop    288.105k (± 0.3%) i/s -      1.467M in   5.093041s
               #each    315.986k (± 0.3%) i/s -      1.581M in   5.002802s

Comparison:
               #each:   315986.1 i/s
            For loop:   288105.3 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.815k i/100ms
     each_with_index    18.731k i/100ms
Calculating -------------------------------------
          While Loop    275.891k (± 0.2%) i/s -      1.391M in   5.040961s
     each_with_index    187.935k (± 0.3%) i/s -    955.281k in   5.083080s

Comparison:
          While Loop:   275891.5 i/s
     each_with_index:   187935.0 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol   123.992k i/100ms
      inject to_proc     1.763k i/100ms
        inject block     1.995k i/100ms
Calculating -------------------------------------
       inject symbol      1.247M (± 0.7%) i/s -      6.324M in   5.072001s
      inject to_proc     17.642k (± 0.2%) i/s -     89.913k in   5.096550s
        inject block     19.941k (± 0.3%) i/s -     99.750k in   5.002394s

Comparison:
       inject symbol:  1246824.0 i/s
        inject block:    19940.6 i/s - 62.53x  (± 0.00) slower
      inject to_proc:    17642.0 i/s - 70.67x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.953k i/100ms
   Array#map.flatten     4.090k i/100ms
      Array#flat_map     9.030k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     72.440k (± 0.8%) i/s -    368.509k in   5.087471s
   Array#map.flatten     42.167k (± 1.6%) i/s -    212.680k in   5.045233s
      Array#flat_map     94.861k (± 0.7%) i/s -    478.590k in   5.045408s

Comparison:
      Array#flat_map:    94861.0 i/s
Array#map.flatten(1):    72439.7 i/s - 1.31x  (± 0.00) slower
   Array#map.flatten:    42166.5 i/s - 2.25x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    30.558k i/100ms
  Array#reverse_each    31.293k i/100ms
Calculating -------------------------------------
  Array#reverse.each    305.165k (± 0.3%) i/s -      1.528M in   5.006857s
  Array#reverse_each    313.445k (± 0.3%) i/s -      1.596M in   5.091670s

Comparison:
  Array#reverse_each:   313444.8 i/s
  Array#reverse.each:   305164.7 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.281k i/100ms
   Enumerable#detect    82.928k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        202.488k (± 1.1%) i/s -      4.056M in  20.034628s
   Enumerable#detect    829.927k (± 0.5%) i/s -     16.669M in  20.084894s

Comparison:
   Enumerable#detect:   829927.0 i/s
Enumerable#select.first:   202487.7 i/s - 4.10x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       244.269k i/100ms
Enumerable#select.last
                        18.189k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.420M (± 0.6%) i/s -     12.213M in   5.047872s
Enumerable#select.last
                        181.315k (± 0.3%) i/s -    909.450k in   5.015905s

Comparison:
Enumerable#reverse.detect:  2419623.3 i/s
Enumerable#select.last:   181314.9 i/s - 13.34x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.963k i/100ms
  Enumerable#sort_by     4.864k i/100ms
     Enumerable#sort     2.368k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         50.760k (± 1.0%) i/s -    258.076k in   5.084802s
  Enumerable#sort_by     49.799k (± 1.4%) i/s -    252.928k in   5.080020s
     Enumerable#sort     23.776k (± 0.3%) i/s -    120.768k in   5.079458s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    50759.7 i/s
  Enumerable#sort_by:    49799.1 i/s - same-ish: difference falls within error
     Enumerable#sort:    23775.9 i/s - 2.13x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.349k i/100ms
Enumerable#sort_by...first
                         8.627k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    173.610k (± 0.3%) i/s -    884.799k in   5.096508s
Enumerable#sort_by...first
                         86.462k (± 0.3%) i/s -    439.977k in   5.088716s

Comparison:
   Enumerable#min_by:   173610.2 i/s
Enumerable#sort_by...first:    86462.1 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   430.986k i/100ms
            Hash#dup   321.254k i/100ms
Calculating -------------------------------------
              Hash[]      4.041M (± 2.4%) i/s -     20.256M in   5.014913s
            Hash#dup      3.253M (± 1.1%) i/s -     16.384M in   5.037492s

Comparison:
              Hash[]:  4041452.3 i/s
            Hash#dup:  3252800.8 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.434M i/100ms
  Hash#fetch, symbol     1.178M i/100ms
     Hash#[], string     1.232M i/100ms
  Hash#fetch, string   778.178k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.182M (± 1.8%) i/s -     71.685M in   5.056523s
  Hash#fetch, symbol     11.804M (± 0.3%) i/s -     60.061M in   5.088412s
     Hash#[], string     12.311M (± 0.4%) i/s -     61.612M in   5.004787s
  Hash#fetch, string      7.789M (± 0.3%) i/s -     39.687M in   5.095447s

Comparison:
     Hash#[], symbol: 14182015.6 i/s
     Hash#[], string: 12310845.9 i/s - 1.15x  (± 0.00) slower
  Hash#fetch, symbol: 11803569.9 i/s - 1.20x  (± 0.00) slower
  Hash#fetch, string:  7788791.9 i/s - 1.82x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   897.641k i/100ms
             Hash#[]   987.679k i/100ms
          Hash#[] ||   871.264k i/100ms
          Hash#[] &&   407.072k i/100ms
          Hash#fetch   607.094k i/100ms
 Hash#fetch fallback   394.192k i/100ms
Calculating -------------------------------------
            Hash#dig      8.945M (± 0.7%) i/s -     44.882M in   5.017843s
             Hash#[]      9.827M (± 2.7%) i/s -     49.384M in   5.029369s
          Hash#[] ||      8.502M (± 0.2%) i/s -     42.692M in   5.021384s
          Hash#[] &&      3.652M (± 4.3%) i/s -     18.318M in   5.028371s
          Hash#fetch      6.133M (± 4.0%) i/s -     30.962M in   5.057800s
 Hash#fetch fallback      3.878M (± 0.6%) i/s -     19.710M in   5.082812s

Comparison:
             Hash#[]:  9826649.8 i/s
            Hash#dig:  8944992.8 i/s - 1.10x  (± 0.00) slower
          Hash#[] ||:  8502045.5 i/s - 1.16x  (± 0.00) slower
          Hash#fetch:  6133281.5 i/s - 1.60x  (± 0.00) slower
 Hash#fetch fallback:  3877837.4 i/s - 2.53x  (± 0.00) slower
          Hash#[] &&:  3651646.4 i/s - 2.69x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.462M i/100ms
  Hash#fetch + block     1.341M i/100ms
    Hash#fetch + arg     1.097M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.502M (± 0.4%) i/s -     73.102M in   5.040944s
  Hash#fetch + block     13.470M (± 1.2%) i/s -     68.394M in   5.078245s
    Hash#fetch + arg     10.934M (± 0.2%) i/s -     54.850M in   5.016240s

Comparison:
  Hash#fetch + const: 14501977.9 i/s
  Hash#fetch + block: 13470212.8 i/s - 1.08x  (± 0.00) slower
    Hash#fetch + arg: 10934472.8 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.839k i/100ms
         sort + to_h    11.545k i/100ms
Calculating -------------------------------------
      sort_by + to_h    274.128k (± 4.6%) i/s -      1.392M in   5.093000s
         sort + to_h    117.460k (± 0.7%) i/s -    588.795k in   5.012970s

Comparison:
      sort_by + to_h:   274127.6 i/s
         sort + to_h:   117460.0 i/s - 2.33x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   192.460k i/100ms
       Hash#each_key   194.203k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.917M (± 0.9%) i/s -      9.623M in   5.019900s
       Hash#each_key      1.930M (± 2.2%) i/s -      9.710M in   5.032520s

Comparison:
       Hash#each_key:  1930464.6 i/s
      Hash#keys.each:  1917113.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.562k i/100ms
           Hash#key?   935.713k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     15.504k (± 4.4%) i/s -     78.100k in   5.049524s
           Hash#key?      9.354M (± 0.3%) i/s -     46.786M in   5.001525s

Comparison:
           Hash#key?:  9354347.5 i/s
  Hash#keys.include?:    15503.5 i/s - 603.37x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.163k i/100ms
            Hash#[]=    10.315k i/100ms
Calculating -------------------------------------
         Hash#merge!     41.747k (± 0.5%) i/s -    212.313k in   5.085817s
            Hash#[]=    102.227k (± 0.6%) i/s -    515.750k in   5.045325s

Comparison:
            Hash#[]=:   102227.5 i/s
         Hash#merge!:    41747.3 i/s - 2.45x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         5.178k i/100ms
      Hash#merge({})     4.182k i/100ms
 Hash#dup#merge!({})     2.740k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         51.926k (± 0.3%) i/s -    264.078k in   5.085738s
      Hash#merge({})     41.362k (± 0.3%) i/s -    209.100k in   5.055393s
 Hash#dup#merge!({})     27.091k (± 2.0%) i/s -    137.000k in   5.059217s

Comparison:
{}#merge!(Hash) do end:    51925.6 i/s
      Hash#merge({}):    41362.2 i/s - 1.26x  (± 0.00) slower
 Hash#dup#merge!({}):    27090.7 i/s - 1.92x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   396.947k i/100ms
          Hash#merge   370.761k i/100ms
Calculating -------------------------------------
        Hash#**other      3.941M (± 0.6%) i/s -     19.847M in   5.036009s
          Hash#merge      3.694M (± 0.5%) i/s -     18.538M in   5.018318s

Comparison:
        Hash#**other:  3941242.3 i/s
          Hash#merge:  3694185.1 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.716k i/100ms
         Hash#merge!     4.076k i/100ms
Calculating -------------------------------------
          Hash#merge     15.777k (± 3.2%) i/s -     78.936k in   5.008351s
         Hash#merge!     40.684k (± 0.4%) i/s -    203.800k in   5.009423s

Comparison:
         Hash#merge!:    40684.1 i/s
          Hash#merge:    15777.0 i/s - 2.58x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      425.987k i/100ms
Array#each             228.244k i/100ms
Array#each_w/_object   171.087k i/100ms
Hash#select-include     76.290k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.245M (± 0.8%) i/s -     21.299M in   5.018316s
Array#each                2.314M (± 2.0%) i/s -     11.640M in   5.033598s
Array#each_w/_object      1.712M (± 0.8%) i/s -      8.725M in   5.095675s
Hash#select-include     796.065k (± 0.5%) i/s -      4.043M in   5.079298s

Comparison:
Hash#native-slice   :  4244624.7 i/s
Array#each          :  2313599.8 i/s - 1.83x  (± 0.00) slower
Array#each_w/_object:  1712442.2 i/s - 2.48x  (± 0.00) slower
Hash#select-include :   796065.4 i/s - 5.33x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.097k i/100ms
         Hash#value?   853.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     10.660k (± 3.9%) i/s -     53.753k in   5.050724s
         Hash#value?      8.474k (± 0.6%) i/s -     42.650k in   5.032912s

Comparison:
Hash#values.include?:    10660.5 i/s
         Hash#value?:     8474.5 i/s - 1.26x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   666.576k i/100ms
                send   488.412k i/100ms
      method_missing   388.826k i/100ms
Calculating -------------------------------------
                call      6.680M (± 0.5%) i/s -     33.995M in   5.089103s
                send      5.022M (± 0.3%) i/s -     25.397M in   5.057343s
      method_missing      3.848M (± 0.4%) i/s -     19.441M in   5.052932s

Comparison:
                call:  6680193.4 i/s
                send:  5021943.9 i/s - 1.33x  (± 0.00) slower
      method_missing:  3847577.2 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     8.662k i/100ms
      Symbol#to_proc     9.334k i/100ms
Calculating -------------------------------------
               Block     86.492k (± 0.4%) i/s -    433.100k in   5.007496s
      Symbol#to_proc     93.032k (± 0.3%) i/s -    466.700k in   5.016624s

Comparison:
      Symbol#to_proc:    93031.5 i/s
               Block:    86491.5 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   923.398k i/100ms
       block + yield   954.858k i/100ms
        unused block     1.300M i/100ms
               yield     1.144M i/100ms
Calculating -------------------------------------
          block.call      9.330M (± 0.3%) i/s -     47.093M in   5.047434s
       block + yield      9.541M (± 0.3%) i/s -     47.743M in   5.004021s
        unused block     13.034M (± 0.3%) i/s -     66.312M in   5.087586s
               yield     11.454M (± 0.5%) i/s -     58.365M in   5.095685s

Comparison:
        unused block: 13034152.9 i/s
               yield: 11453979.0 i/s - 1.14x  (± 0.00) slower
       block + yield:  9540984.2 i/s - 1.37x  (± 0.00) slower
          block.call:  9330215.2 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   310.923k i/100ms
      range#include?    12.747k i/100ms
       range#member?    12.879k i/100ms
       plain compare   531.834k i/100ms
Calculating -------------------------------------
        range#cover?      3.184M (± 0.2%) i/s -     16.168M in   5.078250s
      range#include?    126.692k (± 0.3%) i/s -    637.350k in   5.030754s
       range#member?    129.300k (± 1.2%) i/s -    656.829k in   5.080603s
       plain compare      5.280M (± 0.3%) i/s -     26.592M in   5.036236s

Comparison:
       plain compare:  5280123.2 i/s
        range#cover?:  3183783.6 i/s - 1.66x  (± 0.00) slower
       range#member?:   129299.8 i/s - 40.84x  (± 0.00) slower
      range#include?:   126691.9 i/s - 41.68x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   947.873k i/100ms
           String#=~   652.417k i/100ms
          Regexp#===   600.373k i/100ms
        String#match   491.473k i/100ms
Calculating -------------------------------------
       String#match?      9.399M (± 0.3%) i/s -     47.394M in   5.042262s
           String#=~      6.422M (± 0.9%) i/s -     32.621M in   5.079806s
          Regexp#===      6.027M (± 0.5%) i/s -     30.619M in   5.080087s
        String#match      4.894M (± 0.5%) i/s -     24.574M in   5.021693s

Comparison:
       String#match?:  9399357.0 i/s
           String#=~:  6422207.6 i/s - 1.46x  (± 0.00) slower
          Regexp#===:  6027431.3 i/s - 1.56x  (± 0.00) slower
        String#match:  4893612.7 i/s - 1.92x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   654.006k i/100ms
      String#casecmp   784.326k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.544M (± 0.8%) i/s -     33.354M in   5.097330s
      String#casecmp      7.879M (± 0.5%) i/s -     40.001M in   5.077146s

Comparison:
      String#casecmp:  7878737.7 i/s
String#downcase + ==:  6543900.8 i/s - 1.20x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   569.634k i/100ms
       String#concat   603.043k i/100ms
       String#append   652.966k i/100ms
         "foo" "bar"     1.147M i/100ms
  "#{'foo'}#{'bar'}"     1.159M i/100ms
Calculating -------------------------------------
            String#+      5.823M (± 0.5%) i/s -     29.621M in   5.087177s
       String#concat      6.039M (± 0.3%) i/s -     30.755M in   5.092781s
       String#append      6.496M (± 0.4%) i/s -     32.648M in   5.025731s
         "foo" "bar"     11.432M (± 0.3%) i/s -     57.327M in   5.014769s
  "#{'foo'}#{'bar'}"     11.490M (± 0.3%) i/s -     57.937M in   5.042573s

Comparison:
  "#{'foo'}#{'bar'}": 11489712.0 i/s
         "foo" "bar": 11431643.6 i/s - same-ish: difference falls within error
       String#append:  6496324.5 i/s - 1.77x  (± 0.00) slower
       String#concat:  6039023.4 i/s - 1.90x  (± 0.00) slower
            String#+:  5822809.6 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@   993.868k i/100ms
          String#dup   562.937k i/100ms
Calculating -------------------------------------
           String#+@      9.938M (± 0.2%) i/s -     49.693M in   5.000199s
          String#dup      5.789M (± 0.7%) i/s -     29.273M in   5.056594s

Comparison:
           String#+@:  9938318.7 i/s
          String#dup:  5789273.7 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   186.807k i/100ms
       String#match?   438.715k i/100ms
    String#end_with?   616.611k i/100ms
Calculating -------------------------------------
           String#=~      1.860M (± 0.3%) i/s -      9.340M in   5.020473s
       String#match?      4.368M (± 0.3%) i/s -     21.936M in   5.022273s
    String#end_with?      6.145M (± 0.5%) i/s -     30.831M in   5.017294s

Comparison:
    String#end_with?:  6145029.6 i/s
       String#match?:  4367743.0 i/s - 1.41x  (± 0.00) slower
           String#=~:  1860466.3 i/s - 3.30x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   106.373k i/100ms
          String#sub   129.968k i/100ms
String#dup["string"]=
                       172.656k i/100ms
Calculating -------------------------------------
         String#gsub      1.080M (± 0.8%) i/s -      5.425M in   5.021838s
          String#sub      1.301M (± 2.1%) i/s -      6.628M in   5.097944s
String#dup["string"]=
                          1.768M (± 0.7%) i/s -      8.978M in   5.077293s

Comparison:
String#dup["string"]=:  1768365.8 i/s
          String#sub:  1300811.7 i/s - 1.36x  (± 0.00) slower
         String#gsub:  1080353.7 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    98.256k i/100ms
           String#tr   351.625k i/100ms
Calculating -------------------------------------
         String#gsub    990.675k (± 0.3%) i/s -      5.011M in   5.058275s
           String#tr      3.522M (± 0.6%) i/s -     17.933M in   5.091261s

Comparison:
           String#tr:  3522408.2 i/s
         String#gsub:   990675.4 i/s - 3.56x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.155M i/100ms
         With Freeze     1.666M i/100ms
Calculating -------------------------------------
      Without Freeze     11.511M (± 1.6%) i/s -     57.755M in   5.018916s
         With Freeze     16.693M (± 0.3%) i/s -     84.961M in   5.089637s

Comparison:
         With Freeze: 16692990.9 i/s
      Without Freeze: 11510857.2 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.351k i/100ms
      String#squeeze   154.981k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     33.471k (± 0.4%) i/s -    167.550k in   5.005864s
      String#squeeze      1.552M (± 1.5%) i/s -      7.904M in   5.093421s

Comparison:
      String#squeeze:  1552162.0 i/s
 String#gsub/regex+/:    33471.3 i/s - 46.37x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   258.656k i/100ms
       String#match?   650.130k i/100ms
  String#start_with?   881.429k i/100ms
Calculating -------------------------------------
           String#=~      2.604M (± 0.4%) i/s -     13.191M in   5.065554s
       String#match?      6.416M (± 1.8%) i/s -     32.506M in   5.068024s
  String#start_with?      8.714M (± 1.9%) i/s -     44.071M in   5.059392s

Comparison:
  String#start_with?:  8714393.9 i/s
       String#match?:  6416247.2 i/s - 1.36x  (± 0.00) slower
           String#=~:  2604192.4 i/s - 3.35x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   209.875k i/100ms
    String#[0, n] ==    84.996k i/100ms
   String#[RANGE] ==    75.648k i/100ms
   String#[0...n] ==    46.756k i/100ms
Calculating -------------------------------------
  String#start_with?      2.004M (± 2.3%) i/s -     10.074M in   5.029318s
    String#[0, n] ==    847.059k (± 0.8%) i/s -      4.250M in   5.017467s
   String#[RANGE] ==    765.645k (± 0.7%) i/s -      3.858M in   5.039175s
   String#[0...n] ==    468.616k (± 0.7%) i/s -      2.385M in   5.088774s

Comparison:
  String#start_with?:  2004116.7 i/s
    String#[0, n] ==:   847059.3 i/s - 2.37x  (± 0.00) slower
   String#[RANGE] ==:   765645.1 i/s - 2.62x  (± 0.00) slower
   String#[0...n] ==:   468616.0 i/s - 4.28x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   170.880k i/100ms
 String#sub!'string'   122.546k i/100ms
String#gsub!'string'    75.403k i/100ms
  String#[/regexp/]=   142.139k i/100ms
 String#sub!/regexp/   107.219k i/100ms
String#gsub!/regexp/    57.190k i/100ms
Calculating -------------------------------------
  String#['string']=      1.765M (± 0.6%) i/s -      8.886M in   5.034223s
 String#sub!'string'      1.234M (± 0.5%) i/s -      6.250M in   5.065135s
String#gsub!'string'    749.425k (± 2.8%) i/s -      3.770M in   5.035437s
  String#[/regexp/]=      1.405M (± 0.6%) i/s -      7.107M in   5.057676s
 String#sub!/regexp/      1.069M (± 0.3%) i/s -      5.361M in   5.015285s
String#gsub!/regexp/    576.207k (± 0.7%) i/s -      2.917M in   5.062159s

Comparison:
  String#['string']=:  1765125.8 i/s
  String#[/regexp/]=:  1405227.8 i/s - 1.26x  (± 0.00) slower
 String#sub!'string':  1233922.7 i/s - 1.43x  (± 0.00) slower
 String#sub!/regexp/:  1068935.1 i/s - 1.65x  (± 0.00) slower
String#gsub!'string':   749425.3 i/s - 2.36x  (± 0.00) slower
String#gsub!/regexp/:   576207.3 i/s - 3.06x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   138.644k i/100ms
        String#chomp   550.425k i/100ms
String#delete_suffix   590.869k i/100ms
Calculating -------------------------------------
          String#sub      1.372M (± 0.3%) i/s -      6.932M in   5.052747s
        String#chomp      5.483M (± 0.5%) i/s -     27.521M in   5.019631s
String#delete_suffix      5.920M (± 1.2%) i/s -     30.134M in   5.090948s

Comparison:
String#delete_suffix:  5920108.3 i/s
        String#chomp:  5482846.5 i/s - 1.08x  (± 0.00) slower
          String#sub:  1371981.7 i/s - 4.32x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   618.626k i/100ms
          String#sub   141.269k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.296M (± 0.4%) i/s -     31.550M in   5.011027s
          String#sub      1.409M (± 0.4%) i/s -      7.063M in   5.012657s

Comparison:
String#delete_prefix:  6296187.4 i/s
          String#sub:  1409146.7 i/s - 4.47x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   604.138k i/100ms
    String#unpack[0]   442.702k i/100ms
Calculating -------------------------------------
      String#unpack1      6.058M (± 0.4%) i/s -     30.811M in   5.086184s
    String#unpack[0]      4.407M (± 0.7%) i/s -     22.135M in   5.022813s

Comparison:
      String#unpack1:  6057868.2 i/s
    String#unpack[0]:  4407105.0 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.807k i/100ms
          Time.parse     9.461k i/100ms
Calculating -------------------------------------
        Time.iso8601    276.600k (± 0.5%) i/s -      1.390M in   5.026686s
          Time.parse     94.600k (± 0.8%) i/s -    473.050k in   5.000850s

Comparison:
        Time.iso8601:   276599.5 i/s
          Time.parse:    94599.8 i/s - 2.92x  (± 0.00) slower

