$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       559.438k i/100ms
Function with splat arguments
                        19.620k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          5.595M (± 1.4%) i/s -     27.972M in   5.000175s
Function with splat arguments
                        172.673k (±11.3%) i/s -    863.280k in   5.075853s

Comparison:
Function with single Array argument:  5595343.8 i/s
Function with splat arguments:   172673.0 i/s - 32.40x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   910.208k i/100ms
Sequential Assignment
                       937.697k i/100ms
Calculating -------------------------------------
 Parallel Assignment      9.106M (± 0.2%) i/s -     46.421M in   5.097896s
Sequential Assignment
                          9.379M (± 0.1%) i/s -     47.823M in   5.098888s

Comparison:
Sequential Assignment:  9379025.0 i/s
 Parallel Assignment:  9105867.3 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   357.318k i/100ms
       attr_accessor   426.491k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.625M (± 1.9%) i/s -     18.223M in   5.028869s
       attr_accessor      4.337M (± 0.3%) i/s -     21.751M in   5.014850s

Comparison:
       attr_accessor:  4337367.7 i/s
   getter_and_setter:  3625158.1 i/s - 1.20x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    74.507k i/100ms
         respond_to?   581.826k i/100ms
Calculating -------------------------------------
      begin...rescue    716.566k (± 3.2%) i/s -      3.651M in   5.100390s
         respond_to?      5.783M (± 0.8%) i/s -     29.091M in   5.030681s

Comparison:
         respond_to?:  5783114.1 i/s
      begin...rescue:   716566.2 i/s - 8.07x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   243.875k i/100ms
             &method    89.797k i/100ms
Calculating -------------------------------------
              normal      2.442M (± 0.8%) i/s -     12.438M in   5.094210s
             &method    883.781k (± 0.6%) i/s -      4.490M in   5.080433s

Comparison:
              normal:  2441667.4 i/s
             &method:   883780.8 i/s - 2.76x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       190.000  i/100ms
       define_method   241.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.009k (±20.5%) i/s -      9.120k in   5.123369s
       define_method      2.608k (±17.5%) i/s -     12.050k in   5.010413s

Comparison:
       define_method:     2608.3 i/s
module_eval with string:     2008.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   138.250k i/100ms
       Kernel#format   152.886k i/100ms
            String#%   133.805k i/100ms
Calculating -------------------------------------
         Float#round      1.377M (± 0.1%) i/s -      6.912M in   5.020866s
       Kernel#format      1.529M (± 0.2%) i/s -      7.797M in   5.098941s
            String#%      1.345M (± 0.1%) i/s -      6.824M in   5.074809s

Comparison:
       Kernel#format:  1529185.7 i/s
         Float#round:  1376755.8 i/s - 1.11x  (± 0.00) slower
            String#%:  1344694.7 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   661.242k i/100ms
          OpenStruct   365.249k i/100ms
Calculating -------------------------------------
                Hash      6.579M (± 1.2%) i/s -     33.062M in   5.026464s
          OpenStruct      3.646M (± 1.8%) i/s -     18.262M in   5.010243s

Comparison:
                Hash:  6578717.1 i/s
          OpenStruct:  3646399.5 i/s - 1.80x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   854.737k i/100ms
          OpenStruct     8.572k i/100ms
Calculating -------------------------------------
                Hash      9.184M (± 0.4%) i/s -     46.156M in   5.025815s
          OpenStruct     86.296k (± 2.4%) i/s -    437.172k in   5.068978s

Comparison:
                Hash:  9183872.1 i/s
          OpenStruct:    86296.4 i/s - 106.42x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   478.495k i/100ms
  ancestors.include?    98.270k i/100ms
Calculating -------------------------------------
  less than or equal      4.785M (± 0.1%) i/s -     23.925M in   5.000134s
  ancestors.include?    989.290k (± 0.4%) i/s -      5.012M in   5.066095s

Comparison:
  less than or equal:  4784829.8 i/s
  ancestors.include?:   989289.7 i/s - 4.84x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.459  (± 0.0%) i/s -      3.000  in   6.531614s
         Kernel loop      0.168  (± 0.0%) i/s -      1.000  in   5.940895s

Comparison:
          While Loop:        0.5 i/s
         Kernel loop:        0.2 i/s - 2.73x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.273M i/100ms
         Array#first     1.054M i/100ms
Calculating -------------------------------------
           Array#[0]     12.725M (± 0.1%) i/s -     63.658M in   5.002461s
         Array#first     10.552M (± 0.1%) i/s -     53.729M in   5.091732s

Comparison:
           Array#[0]: 12725271.2 i/s
         Array#first: 10552142.1 i/s - 1.21x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.295M i/100ms
          Array#last     1.041M i/100ms
Calculating -------------------------------------
          Array#[-1]     12.958M (± 0.2%) i/s -     66.044M in   5.096896s
          Array#last     10.412M (± 0.1%) i/s -     52.063M in   5.000482s

Comparison:
          Array#[-1]: 12957822.3 i/s
          Array#last: 10411602.4 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    74.414k i/100ms
Calculating -------------------------------------
                find      0.204  (± 0.0%) i/s -      2.000  in   9.815212s
             bsearch    744.242k (± 0.1%) i/s -      3.795M in   5.099303s

Comparison:
             bsearch:   744241.9 i/s
                find:        0.2 i/s - 3652445.04x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    14.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    146.278  (± 2.7%) i/s -    742.000  in   5.075898s
        Array#insert      1.150  (± 0.0%) i/s -      6.000  in   5.215914s

Comparison:
       Array#unshift:      146.3 i/s
        Array#insert:        1.2 i/s - 127.16x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.892M i/100ms
          Array#size     1.886M i/100ms
         Array#count     1.331M i/100ms
Calculating -------------------------------------
        Array#length     18.982M (± 0.5%) i/s -     96.487M in   5.083154s
          Array#size     18.878M (± 0.7%) i/s -     96.191M in   5.095691s
         Array#count     13.250M (± 0.1%) i/s -     66.551M in   5.022687s

Comparison:
        Array#length: 18982166.1 i/s
          Array#size: 18877840.2 i/s - same-ish: difference falls within error
         Array#count: 13250176.2 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    33.634k i/100ms
        Array#sample   827.767k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    335.835k (± 0.3%) i/s -      1.682M in   5.007547s
        Array#sample      8.278M (± 0.1%) i/s -     42.216M in   5.099631s

Comparison:
        Array#sample:  8278273.3 i/s
 Array#shuffle.first:   335835.3 i/s - 24.65x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    47.754k i/100ms
          Date.parse    23.758k i/100ms
Calculating -------------------------------------
        Date.iso8601    476.124k (± 1.5%) i/s -      2.388M in   5.015992s
          Date.parse    243.250k (± 0.6%) i/s -      1.235M in   5.078992s

Comparison:
        Date.iso8601:   476124.4 i/s
          Date.parse:   243250.1 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    14.271k i/100ms
           Array#map    20.052k i/100ms
Calculating -------------------------------------
   Array#each + push    141.999k (± 1.7%) i/s -    713.550k in   5.026616s
           Array#map    200.474k (± 0.2%) i/s -      1.003M in   5.001156s

Comparison:
           Array#map:   200474.1 i/s
   Array#each + push:   141999.5 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    22.081k i/100ms
               #each    24.426k i/100ms
Calculating -------------------------------------
            For loop    220.120k (± 0.1%) i/s -      1.104M in   5.015686s
               #each    244.491k (± 0.1%) i/s -      1.246M in   5.095185s

Comparison:
               #each:   244491.1 i/s
            For loop:   220119.5 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    24.661k i/100ms
     each_with_index    14.401k i/100ms
Calculating -------------------------------------
          While Loop    246.572k (± 0.2%) i/s -      1.233M in   5.000786s
     each_with_index    144.088k (± 0.6%) i/s -    734.451k in   5.097408s

Comparison:
          While Loop:   246572.3 i/s
     each_with_index:   144088.5 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    71.436k i/100ms
      inject to_proc     1.640k i/100ms
        inject block     1.520k i/100ms
Calculating -------------------------------------
       inject symbol    715.905k (± 0.0%) i/s -      3.643M in   5.088993s
      inject to_proc     16.405k (± 0.1%) i/s -     83.640k in   5.098512s
        inject block     15.192k (± 0.3%) i/s -     76.000k in   5.002831s

Comparison:
       inject symbol:   715905.3 i/s
      inject to_proc:    16404.8 i/s - 43.64x  (± 0.00) slower
        inject block:    15191.5 i/s - 47.13x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     5.518k i/100ms
   Array#map.flatten     3.018k i/100ms
      Array#flat_map     7.105k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     54.572k (± 2.1%) i/s -    275.900k in   5.057897s
   Array#map.flatten     30.074k (± 0.8%) i/s -    150.900k in   5.017882s
      Array#flat_map     69.624k (± 1.9%) i/s -    355.250k in   5.104422s

Comparison:
      Array#flat_map:    69624.4 i/s
Array#map.flatten(1):    54572.4 i/s - 1.28x  (± 0.00) slower
   Array#map.flatten:    30074.4 i/s - 2.32x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    23.527k i/100ms
  Array#reverse_each    24.196k i/100ms
Calculating -------------------------------------
  Array#reverse.each    235.302k (± 0.1%) i/s -      1.200M in   5.099319s
  Array#reverse_each    241.847k (± 0.1%) i/s -      1.210M in   5.002340s

Comparison:
  Array#reverse_each:   241847.0 i/s
  Array#reverse.each:   235301.6 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        15.568k i/100ms
   Enumerable#detect    59.482k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        153.685k (± 2.2%) i/s -      3.082M in  20.066849s
   Enumerable#detect    598.653k (± 0.2%) i/s -     12.015M in  20.070714s

Comparison:
   Enumerable#detect:   598653.5 i/s
Enumerable#select.first:   153685.2 i/s - 3.90x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       177.301k i/100ms
Enumerable#select.last
                        14.501k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.759M (± 2.2%) i/s -      8.865M in   5.042711s
Enumerable#select.last
                        142.806k (± 2.3%) i/s -    725.050k in   5.079926s

Comparison:
Enumerable#reverse.detect:  1758920.3 i/s
Enumerable#select.last:   142806.3 i/s - 12.32x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.792k i/100ms
  Enumerable#sort_by     3.611k i/100ms
     Enumerable#sort     1.856k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         37.036k (± 2.7%) i/s -    185.808k in   5.020712s
  Enumerable#sort_by     35.805k (± 1.8%) i/s -    180.550k in   5.044302s
     Enumerable#sort     18.543k (± 0.2%) i/s -     92.800k in   5.004580s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    37035.8 i/s
  Enumerable#sort_by:    35804.8 i/s - same-ish: difference falls within error
     Enumerable#sort:    18543.1 i/s - 2.00x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    13.738k i/100ms
Enumerable#sort_by...first
                         6.681k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    137.076k (± 1.2%) i/s -    686.900k in   5.011920s
Enumerable#sort_by...first
                         65.486k (± 3.6%) i/s -    327.369k in   5.005920s

Comparison:
   Enumerable#min_by:   137076.1 i/s
Enumerable#sort_by...first:    65486.0 i/s - 2.09x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   267.287k i/100ms
            Hash#dup   218.507k i/100ms
Calculating -------------------------------------
              Hash[]      2.830M (± 3.3%) i/s -     14.166M in   5.012037s
            Hash#dup      2.256M (± 3.0%) i/s -     11.362M in   5.040391s

Comparison:
              Hash[]:  2829630.0 i/s
            Hash#dup:  2256462.6 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.167M i/100ms
  Hash#fetch, symbol   826.428k i/100ms
     Hash#[], string   898.001k i/100ms
  Hash#fetch, string   578.658k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     11.671M (± 0.2%) i/s -     58.360M in   5.000614s
  Hash#fetch, symbol      8.275M (± 0.0%) i/s -     42.148M in   5.093671s
     Hash#[], string      8.958M (± 0.1%) i/s -     44.900M in   5.012294s
  Hash#fetch, string      5.782M (± 0.1%) i/s -     28.933M in   5.004174s

Comparison:
     Hash#[], symbol: 11670572.9 i/s
     Hash#[], string:  8957987.9 i/s - 1.30x  (± 0.00) slower
  Hash#fetch, symbol:  8274549.3 i/s - 1.41x  (± 0.00) slower
  Hash#fetch, string:  5781760.4 i/s - 2.02x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   675.692k i/100ms
             Hash#[]   731.435k i/100ms
          Hash#[] ||   620.815k i/100ms
          Hash#[] &&   323.199k i/100ms
          Hash#fetch   504.847k i/100ms
 Hash#fetch fallback   307.375k i/100ms
Calculating -------------------------------------
            Hash#dig      6.755M (± 0.1%) i/s -     33.785M in   5.001774s
             Hash#[]      7.304M (± 0.4%) i/s -     36.572M in   5.007261s
          Hash#[] ||      6.210M (± 0.7%) i/s -     31.662M in   5.098678s
          Hash#[] &&      3.260M (± 0.8%) i/s -     16.483M in   5.056128s
          Hash#fetch      5.051M (± 0.4%) i/s -     25.747M in   5.097450s
 Hash#fetch fallback      3.061M (± 0.4%) i/s -     15.369M in   5.021576s

Comparison:
             Hash#[]:  7303880.6 i/s
            Hash#dig:  6754532.4 i/s - 1.08x  (± 0.00) slower
          Hash#[] ||:  6210050.1 i/s - 1.18x  (± 0.00) slower
          Hash#fetch:  5051081.4 i/s - 1.45x  (± 0.00) slower
          Hash#[] &&:  3260218.4 i/s - 2.24x  (± 0.00) slower
 Hash#fetch fallback:  3060583.7 i/s - 2.39x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.146M i/100ms
  Hash#fetch + block     1.163M i/100ms
    Hash#fetch + arg   854.932k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     11.482M (± 0.1%) i/s -     58.441M in   5.089865s
  Hash#fetch + block     11.660M (± 0.1%) i/s -     59.328M in   5.088123s
    Hash#fetch + arg      8.512M (± 0.5%) i/s -     42.747M in   5.022341s

Comparison:
  Hash#fetch + block: 11660024.5 i/s
  Hash#fetch + const: 11481916.4 i/s - 1.02x  (± 0.00) slower
    Hash#fetch + arg:  8511509.0 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    20.454k i/100ms
         sort + to_h     9.037k i/100ms
Calculating -------------------------------------
      sort_by + to_h    205.726k (± 2.4%) i/s -      1.043M in   5.073762s
         sort + to_h     89.456k (± 1.1%) i/s -    451.850k in   5.051636s

Comparison:
      sort_by + to_h:   205725.8 i/s
         sort + to_h:    89456.5 i/s - 2.30x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   150.342k i/100ms
       Hash#each_key   160.916k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.503M (± 0.3%) i/s -      7.517M in   5.001156s
       Hash#each_key      1.611M (± 0.1%) i/s -      8.207M in   5.095115s

Comparison:
       Hash#each_key:  1610703.1 i/s
      Hash#keys.each:  1503087.2 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.002k i/100ms
           Hash#key?   759.505k i/100ms
Calculating -------------------------------------
  Hash#keys.include?      9.708k (± 4.2%) i/s -     49.098k in   5.067101s
           Hash#key?      7.595M (± 0.2%) i/s -     37.975M in   4.999990s

Comparison:
           Hash#key?:  7595104.4 i/s
  Hash#keys.include?:     9708.4 i/s - 782.32x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.052k i/100ms
            Hash#[]=     7.428k i/100ms
Calculating -------------------------------------
         Hash#merge!     29.424k (± 2.5%) i/s -    149.548k in   5.085752s
            Hash#[]=     74.858k (± 0.8%) i/s -    378.828k in   5.060948s

Comparison:
            Hash#[]=:    74858.2 i/s
         Hash#merge!:    29423.6 i/s - 2.54x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.744k i/100ms
      Hash#merge({})     2.927k i/100ms
 Hash#dup#merge!({})     2.091k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         37.791k (± 1.9%) i/s -    190.944k in   5.054690s
      Hash#merge({})     30.756k (± 0.5%) i/s -    155.131k in   5.044106s
 Hash#dup#merge!({})     21.929k (± 0.9%) i/s -    110.823k in   5.054068s

Comparison:
{}#merge!(Hash) do end:    37791.1 i/s
      Hash#merge({}):    30755.8 i/s - 1.23x  (± 0.00) slower
 Hash#dup#merge!({}):    21929.3 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   276.416k i/100ms
          Hash#merge   252.175k i/100ms
Calculating -------------------------------------
        Hash#**other      2.772M (± 0.2%) i/s -     14.097M in   5.085320s
          Hash#merge      2.557M (± 1.1%) i/s -     12.861M in   5.030682s

Comparison:
        Hash#**other:  2772150.2 i/s
          Hash#merge:  2556835.7 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.204k i/100ms
         Hash#merge!     2.985k i/100ms
Calculating -------------------------------------
          Hash#merge     11.958k (± 1.8%) i/s -     60.200k in   5.035899s
         Hash#merge!     29.225k (± 3.1%) i/s -    146.265k in   5.009756s

Comparison:
         Hash#merge!:    29225.1 i/s
          Hash#merge:    11958.1 i/s - 2.44x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      314.328k i/100ms
Array#each             170.768k i/100ms
Array#each_w/_object   120.736k i/100ms
Hash#select-include     52.324k i/100ms
Calculating -------------------------------------
Hash#native-slice         3.158M (± 2.1%) i/s -     16.031M in   5.078211s
Array#each                1.707M (± 0.5%) i/s -      8.538M in   5.001539s
Array#each_w/_object      1.215M (± 0.3%) i/s -      6.158M in   5.067719s
Hash#select-include     549.329k (± 2.8%) i/s -      2.773M in   5.052355s

Comparison:
Hash#native-slice   :  3158297.7 i/s
Array#each          :  1707202.8 i/s - 1.85x  (± 0.00) slower
Array#each_w/_object:  1215059.3 i/s - 2.60x  (± 0.00) slower
Hash#select-include :   549329.4 i/s - 5.75x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   964.000  i/100ms
         Hash#value?   845.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      9.544k (± 4.2%) i/s -     48.200k in   5.060995s
         Hash#value?      8.459k (± 0.3%) i/s -     43.095k in   5.094747s

Comparison:
Hash#values.include?:     9544.2 i/s
         Hash#value?:     8458.8 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   526.740k i/100ms
                send   335.108k i/100ms
      method_missing   259.748k i/100ms
Calculating -------------------------------------
                call      5.298M (± 0.6%) i/s -     26.864M in   5.070833s
                send      3.337M (± 0.4%) i/s -     16.755M in   5.021634s
      method_missing      2.585M (± 0.3%) i/s -     12.987M in   5.023409s

Comparison:
                call:  5297873.7 i/s
                send:  3336691.1 i/s - 1.59x  (± 0.00) slower
      method_missing:  2585396.7 i/s - 2.05x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     6.929k i/100ms
      Symbol#to_proc     7.410k i/100ms
Calculating -------------------------------------
               Block     69.560k (± 1.1%) i/s -    353.379k in   5.080810s
      Symbol#to_proc     78.734k (± 0.5%) i/s -    400.140k in   5.082291s

Comparison:
      Symbol#to_proc:    78734.2 i/s
               Block:    69560.2 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   761.324k i/100ms
       block + yield   782.368k i/100ms
        unused block     1.069M i/100ms
               yield     1.034M i/100ms
Calculating -------------------------------------
          block.call      7.609M (± 0.1%) i/s -     38.066M in   5.002555s
       block + yield      7.817M (± 0.1%) i/s -     39.118M in   5.004070s
        unused block     10.670M (± 0.2%) i/s -     53.430M in   5.007427s
               yield     10.388M (± 0.3%) i/s -     52.737M in   5.076667s

Comparison:
        unused block: 10670248.5 i/s
               yield: 10388221.1 i/s - 1.03x  (± 0.00) slower
       block + yield:  7817323.6 i/s - 1.36x  (± 0.00) slower
          block.call:  7609363.2 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   243.850k i/100ms
      range#include?     9.454k i/100ms
       range#member?     9.503k i/100ms
       plain compare   360.282k i/100ms
Calculating -------------------------------------
        range#cover?      2.437M (± 0.4%) i/s -     12.192M in   5.003726s
      range#include?     95.418k (± 1.4%) i/s -    482.154k in   5.054047s
       range#member?     94.801k (± 2.2%) i/s -    475.150k in   5.014874s
       plain compare      3.601M (± 0.1%) i/s -     18.014M in   5.002381s

Comparison:
       plain compare:  3601112.3 i/s
        range#cover?:  2436717.3 i/s - 1.48x  (± 0.00) slower
      range#include?:    95418.2 i/s - 37.74x  (± 0.00) slower
       range#member?:    94801.0 i/s - 37.99x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   704.882k i/100ms
           String#=~   494.396k i/100ms
          Regexp#===   449.546k i/100ms
        String#match   338.464k i/100ms
Calculating -------------------------------------
       String#match?      7.061M (± 0.1%) i/s -     35.949M in   5.091311s
           String#=~      4.917M (± 0.1%) i/s -     24.720M in   5.027079s
          Regexp#===      4.487M (± 0.4%) i/s -     22.477M in   5.009170s
        String#match      3.367M (± 0.2%) i/s -     16.923M in   5.025628s

Comparison:
       String#match?:  7060864.1 i/s
           String#=~:  4917338.6 i/s - 1.44x  (± 0.00) slower
          Regexp#===:  4487317.7 i/s - 1.57x  (± 0.00) slower
        String#match:  3367396.3 i/s - 2.10x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   495.677k i/100ms
      String#casecmp   634.882k i/100ms
Calculating -------------------------------------
String#downcase + ==      4.964M (± 0.7%) i/s -     25.280M in   5.092766s
      String#casecmp      6.342M (± 0.4%) i/s -     31.744M in   5.005388s

Comparison:
      String#casecmp:  6342082.9 i/s
String#downcase + ==:  4964057.3 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   459.922k i/100ms
       String#concat   469.958k i/100ms
       String#append   515.897k i/100ms
         "foo" "bar"   987.673k i/100ms
  "#{'foo'}#{'bar'}"   980.041k i/100ms
Calculating -------------------------------------
            String#+      4.590M (± 0.3%) i/s -     22.996M in   5.010375s
       String#concat      4.701M (± 0.5%) i/s -     23.968M in   5.098797s
       String#append      5.135M (± 1.4%) i/s -     25.795M in   5.024447s
         "foo" "bar"      9.861M (± 0.5%) i/s -     49.384M in   5.008288s
  "#{'foo'}#{'bar'}"      9.850M (± 0.1%) i/s -     49.982M in   5.074504s

Comparison:
         "foo" "bar":  9860679.6 i/s
  "#{'foo'}#{'bar'}":  9849667.1 i/s - same-ish: difference falls within error
       String#append:  5135001.7 i/s - 1.92x  (± 0.00) slower
       String#concat:  4700825.5 i/s - 2.10x  (± 0.00) slower
            String#+:  4589729.8 i/s - 2.15x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@   808.297k i/100ms
          String#dup   432.300k i/100ms
Calculating -------------------------------------
           String#+@      8.080M (± 0.4%) i/s -     40.415M in   5.002164s
          String#dup      4.317M (± 0.2%) i/s -     21.615M in   5.007300s

Comparison:
           String#+@:  8079586.5 i/s
          String#dup:  4316710.6 i/s - 1.87x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   146.338k i/100ms
       String#match?   334.213k i/100ms
    String#end_with?   478.880k i/100ms
Calculating -------------------------------------
           String#=~      1.476M (± 0.2%) i/s -      7.463M in   5.055832s
       String#match?      3.341M (± 0.1%) i/s -     16.711M in   5.000955s
    String#end_with?      4.786M (± 0.4%) i/s -     23.944M in   5.002882s

Comparison:
    String#end_with?:  4786129.4 i/s
       String#match?:  3341493.6 i/s - 1.43x  (± 0.00) slower
           String#=~:  1476168.6 i/s - 3.24x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    78.145k i/100ms
          String#sub   104.566k i/100ms
String#dup["string"]=
                       138.916k i/100ms
Calculating -------------------------------------
         String#gsub    778.146k (± 0.6%) i/s -      3.907M in   5.021417s
          String#sub      1.048M (± 3.4%) i/s -      5.333M in   5.093241s
String#dup["string"]=
                          1.415M (± 0.3%) i/s -      7.085M in   5.006294s

Comparison:
String#dup["string"]=:  1415172.9 i/s
          String#sub:  1048294.4 i/s - 1.35x  (± 0.00) slower
         String#gsub:   778145.6 i/s - 1.82x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    72.555k i/100ms
           String#tr   279.959k i/100ms
Calculating -------------------------------------
         String#gsub    719.111k (± 2.4%) i/s -      3.628M in   5.047538s
           String#tr      2.795M (± 0.5%) i/s -     13.998M in   5.008490s

Comparison:
           String#tr:  2794901.7 i/s
         String#gsub:   719110.6 i/s - 3.89x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   926.828k i/100ms
         With Freeze     1.434M i/100ms
Calculating -------------------------------------
      Without Freeze      9.291M (± 0.5%) i/s -     47.268M in   5.087844s
         With Freeze     14.273M (± 1.8%) i/s -     71.718M in   5.026761s

Comparison:
         With Freeze: 14272718.6 i/s
      Without Freeze:  9290707.4 i/s - 1.54x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.570k i/100ms
      String#squeeze   132.419k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     25.609k (± 1.8%) i/s -    128.500k in   5.019420s
      String#squeeze      1.330M (± 0.6%) i/s -      6.753M in   5.078070s

Comparison:
      String#squeeze:  1329958.4 i/s
 String#gsub/regex+/:    25609.3 i/s - 51.93x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   213.771k i/100ms
       String#match?   578.941k i/100ms
  String#start_with?   631.851k i/100ms
Calculating -------------------------------------
           String#=~      2.151M (± 0.8%) i/s -     10.902M in   5.068728s
       String#match?      5.791M (± 0.1%) i/s -     29.526M in   5.098187s
  String#start_with?      6.369M (± 0.3%) i/s -     32.224M in   5.059906s

Comparison:
  String#start_with?:  6368654.6 i/s
       String#match?:  5791471.7 i/s - 1.10x  (± 0.00) slower
           String#=~:  2151055.1 i/s - 2.96x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   184.818k i/100ms
    String#[0, n] ==    67.070k i/100ms
   String#[RANGE] ==    61.300k i/100ms
   String#[0...n] ==    35.287k i/100ms
Calculating -------------------------------------
  String#start_with?      1.852M (± 0.8%) i/s -      9.426M in   5.088442s
    String#[0, n] ==    675.589k (± 0.7%) i/s -      3.421M in   5.063337s
   String#[RANGE] ==    612.319k (± 0.2%) i/s -      3.065M in   5.005594s
   String#[0...n] ==    355.827k (± 0.6%) i/s -      1.800M in   5.057819s

Comparison:
  String#start_with?:  1852490.0 i/s
    String#[0, n] ==:   675589.0 i/s - 2.74x  (± 0.00) slower
   String#[RANGE] ==:   612318.6 i/s - 3.03x  (± 0.00) slower
   String#[0...n] ==:   355826.8 i/s - 5.21x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   134.046k i/100ms
 String#sub!'string'    90.556k i/100ms
String#gsub!'string'    56.971k i/100ms
  String#[/regexp/]=   114.043k i/100ms
 String#sub!/regexp/    93.234k i/100ms
String#gsub!/regexp/    44.576k i/100ms
Calculating -------------------------------------
  String#['string']=      1.348M (± 1.4%) i/s -      6.836M in   5.074141s
 String#sub!'string'    910.945k (± 1.7%) i/s -      4.618M in   5.071363s
String#gsub!'string'    569.739k (± 2.5%) i/s -      2.906M in   5.103025s
  String#[/regexp/]=      1.206M (± 1.6%) i/s -      6.044M in   5.013565s
 String#sub!/regexp/    921.554k (± 2.2%) i/s -      4.662M in   5.061080s
String#gsub!/regexp/    468.590k (± 1.1%) i/s -      2.363M in   5.042446s

Comparison:
  String#['string']=:  1347545.8 i/s
  String#[/regexp/]=:  1205894.8 i/s - 1.12x  (± 0.00) slower
 String#sub!/regexp/:   921553.9 i/s - 1.46x  (± 0.00) slower
 String#sub!'string':   910945.4 i/s - 1.48x  (± 0.00) slower
String#gsub!'string':   569738.9 i/s - 2.37x  (± 0.00) slower
String#gsub!/regexp/:   468589.8 i/s - 2.88x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   120.175k i/100ms
        String#chomp   426.460k i/100ms
String#delete_suffix   470.295k i/100ms
Calculating -------------------------------------
          String#sub      1.165M (± 2.0%) i/s -      5.889M in   5.055648s
        String#chomp      4.256M (± 0.3%) i/s -     21.323M in   5.010093s
String#delete_suffix      4.662M (± 1.0%) i/s -     23.515M in   5.044671s

Comparison:
String#delete_suffix:  4661765.8 i/s
        String#chomp:  4256039.5 i/s - 1.10x  (± 0.00) slower
          String#sub:  1165243.5 i/s - 4.00x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   482.922k i/100ms
          String#sub   113.777k i/100ms
Calculating -------------------------------------
String#delete_prefix      4.795M (± 1.0%) i/s -     24.146M in   5.036503s
          String#sub      1.198M (± 0.9%) i/s -      6.030M in   5.034973s

Comparison:
String#delete_prefix:  4794676.2 i/s
          String#sub:  1197764.2 i/s - 4.00x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   452.560k i/100ms
    String#unpack[0]   351.114k i/100ms
Calculating -------------------------------------
      String#unpack1      4.523M (± 0.1%) i/s -     22.628M in   5.002976s
    String#unpack[0]      3.519M (± 0.5%) i/s -     17.907M in   5.088227s

Comparison:
      String#unpack1:  4522911.2 i/s
    String#unpack[0]:  3519364.8 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    22.259k i/100ms
          Time.parse     7.368k i/100ms
Calculating -------------------------------------
        Time.iso8601    221.014k (± 0.4%) i/s -      1.113M in   5.035749s
          Time.parse     73.653k (± 1.0%) i/s -    368.400k in   5.002302s

Comparison:
        Time.iso8601:   221014.0 i/s
          Time.parse:    73653.3 i/s - 3.00x  (± 0.00) slower

