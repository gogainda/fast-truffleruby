$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       768.937k i/100ms
Function with splat arguments
                        25.424k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.696M (± 1.1%) i/s -     39.216M in   5.096490s
Function with splat arguments
                        255.354k (± 5.9%) i/s -      1.271M in   5.001926s

Comparison:
Function with single Array argument:  7695593.7 i/s
Function with splat arguments:   255353.8 i/s - 30.14x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.010M i/100ms
Sequential Assignment
                         1.011M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.059M (± 0.4%) i/s -     50.495M in   5.020165s
Sequential Assignment
                         10.061M (± 2.7%) i/s -     50.533M in   5.027058s

Comparison:
Sequential Assignment: 10060548.7 i/s
 Parallel Assignment: 10058628.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   465.656k i/100ms
       attr_accessor   550.056k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.637M (± 0.5%) i/s -     23.283M in   5.020746s
       attr_accessor      5.477M (± 1.4%) i/s -     27.503M in   5.022183s

Comparison:
       attr_accessor:  5477499.6 i/s
   getter_and_setter:  4637443.9 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    85.935k i/100ms
         respond_to?   747.053k i/100ms
Calculating -------------------------------------
      begin...rescue    867.141k (± 1.9%) i/s -      4.383M in   5.056210s
         respond_to?      7.484M (± 0.4%) i/s -     38.100M in   5.090750s

Comparison:
         respond_to?:  7484218.3 i/s
      begin...rescue:   867141.1 i/s - 8.63x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   293.507k i/100ms
             &method   120.623k i/100ms
Calculating -------------------------------------
              normal      2.977M (± 0.8%) i/s -     14.969M in   5.028279s
             &method      1.196M (± 2.5%) i/s -      6.031M in   5.047410s

Comparison:
              normal:  2977155.6 i/s
             &method:  1195740.3 i/s - 2.49x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       259.000  i/100ms
       define_method   249.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.293k (±21.6%) i/s -     10.101k in   5.082806s
       define_method      3.244k (±21.8%) i/s -     14.691k in   5.089020s

Comparison:
       define_method:     3244.3 i/s
module_eval with string:     2292.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   261.933k i/100ms
       Kernel#format   205.430k i/100ms
            String#%   175.646k i/100ms
Calculating -------------------------------------
         Float#round      2.663M (± 0.5%) i/s -     13.359M in   5.015676s
       Kernel#format      2.077M (± 0.5%) i/s -     10.477M in   5.044573s
            String#%      1.791M (± 0.7%) i/s -      8.958M in   5.002841s

Comparison:
         Float#round:  2663439.1 i/s
       Kernel#format:  2076934.4 i/s - 1.28x  (± 0.00) slower
            String#%:  1790665.3 i/s - 1.49x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   910.783k i/100ms
          OpenStruct   503.215k i/100ms
Calculating -------------------------------------
                Hash      9.016M (± 2.3%) i/s -     45.539M in   5.053804s
          OpenStruct      4.985M (± 3.2%) i/s -     25.161M in   5.053275s

Comparison:
                Hash:  9016120.7 i/s
          OpenStruct:  4985155.2 i/s - 1.81x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.094M i/100ms
          OpenStruct    11.383k i/100ms
Calculating -------------------------------------
                Hash     11.624M (± 0.3%) i/s -     59.091M in   5.083386s
          OpenStruct    115.413k (± 2.4%) i/s -    580.533k in   5.032980s

Comparison:
                Hash: 11624458.4 i/s
          OpenStruct:   115413.1 i/s - 100.72x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   569.121k i/100ms
  ancestors.include?   121.883k i/100ms
Calculating -------------------------------------
  less than or equal      5.994M (± 4.5%) i/s -     30.163M in   5.045879s
  ancestors.include?      1.228M (± 0.7%) i/s -      6.216M in   5.061104s

Comparison:
  less than or equal:  5993871.5 i/s
  ancestors.include?:  1228251.4 i/s - 4.88x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.577  (± 0.0%) i/s -      3.000  in   5.209369s
         Kernel loop      0.206  (± 0.0%) i/s -      2.000  in   9.731808s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 2.81x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.516M i/100ms
         Array#first     1.271M i/100ms
Calculating -------------------------------------
           Array#[0]     15.270M (± 0.4%) i/s -     77.296M in   5.062183s
         Array#first     12.786M (± 1.9%) i/s -     64.838M in   5.073241s

Comparison:
           Array#[0]: 15269692.2 i/s
         Array#first: 12785535.4 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.514M i/100ms
          Array#last     1.307M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.488M (± 0.3%) i/s -     78.729M in   5.083397s
          Array#last     13.030M (± 3.0%) i/s -     65.362M in   5.022093s

Comparison:
          Array#[-1]: 15487611.4 i/s
          Array#last: 13029988.6 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    96.457k i/100ms
Calculating -------------------------------------
                find      0.276  (± 0.0%) i/s -      2.000  in   7.241536s
             bsearch    969.228k (± 0.3%) i/s -      4.919M in   5.075531s

Comparison:
             bsearch:   969227.8 i/s
                find:        0.3 i/s - 3509347.26x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    18.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    182.244  (± 2.2%) i/s -    918.000  in   5.039779s
        Array#insert      1.457  (± 0.0%) i/s -      8.000  in   5.489938s

Comparison:
       Array#unshift:      182.2 i/s
        Array#insert:        1.5 i/s - 125.06x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.132M i/100ms
          Array#size     2.149M i/100ms
         Array#count     1.592M i/100ms
Calculating -------------------------------------
        Array#length     21.236M (± 0.3%) i/s -    106.600M in   5.019888s
          Array#size     21.484M (± 0.4%) i/s -    107.474M in   5.002709s
         Array#count     15.924M (± 0.3%) i/s -     81.188M in   5.098568s

Comparison:
          Array#size: 21483656.3 i/s
        Array#length: 21235855.7 i/s - 1.01x  (± 0.00) slower
         Array#count: 15923796.1 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.467k i/100ms
        Array#sample     1.046M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    458.236k (± 0.7%) i/s -      2.319M in   5.060567s
        Array#sample     10.359M (± 0.2%) i/s -     52.308M in   5.049667s

Comparison:
        Array#sample: 10358843.0 i/s
 Array#shuffle.first:   458235.9 i/s - 22.61x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    63.940k i/100ms
          Date.parse    31.694k i/100ms
Calculating -------------------------------------
        Date.iso8601    637.175k (± 0.8%) i/s -      3.197M in   5.017766s
          Date.parse    321.285k (± 0.2%) i/s -      1.616M in   5.031039s

Comparison:
        Date.iso8601:   637174.7 i/s
          Date.parse:   321285.2 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.580k i/100ms
           Array#map    25.338k i/100ms
Calculating -------------------------------------
   Array#each + push    185.426k (± 0.6%) i/s -    929.000k in   5.010253s
           Array#map    254.302k (± 0.6%) i/s -      1.292M in   5.081687s

Comparison:
           Array#map:   254301.6 i/s
   Array#each + push:   185425.6 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    28.822k i/100ms
               #each    31.683k i/100ms
Calculating -------------------------------------
            For loop    288.558k (± 0.5%) i/s -      1.470M in   5.094169s
               #each    316.686k (± 0.3%) i/s -      1.584M in   5.002330s

Comparison:
               #each:   316685.8 i/s
            For loop:   288557.9 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.570k i/100ms
     each_with_index    17.814k i/100ms
Calculating -------------------------------------
          While Loop    275.533k (± 0.3%) i/s -      1.378M in   5.003086s
     each_with_index    177.526k (± 2.0%) i/s -    890.700k in   5.019657s

Comparison:
          While Loop:   275532.6 i/s
     each_with_index:   177525.6 i/s - 1.55x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol   124.451k i/100ms
      inject to_proc     1.765k i/100ms
        inject block     2.001k i/100ms
Calculating -------------------------------------
       inject symbol      1.243M (± 0.7%) i/s -      6.223M in   5.006914s
      inject to_proc     17.592k (± 0.5%) i/s -     88.250k in   5.016650s
        inject block     19.946k (± 0.6%) i/s -    100.050k in   5.016144s

Comparison:
       inject symbol:  1242850.1 i/s
        inject block:    19946.3 i/s - 62.31x  (± 0.00) slower
      inject to_proc:    17591.8 i/s - 70.65x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     7.063k i/100ms
   Array#map.flatten     4.223k i/100ms
      Array#flat_map     8.974k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     73.748k (± 1.0%) i/s -    374.339k in   5.076386s
   Array#map.flatten     43.182k (± 0.7%) i/s -    219.596k in   5.085600s
      Array#flat_map     94.585k (± 0.7%) i/s -    475.622k in   5.028749s

Comparison:
      Array#flat_map:    94585.2 i/s
Array#map.flatten(1):    73748.4 i/s - 1.28x  (± 0.00) slower
   Array#map.flatten:    43181.8 i/s - 2.19x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    30.378k i/100ms
  Array#reverse_each    31.089k i/100ms
Calculating -------------------------------------
  Array#reverse.each    303.395k (± 1.0%) i/s -      1.519M in   5.006886s
  Array#reverse_each    311.681k (± 0.3%) i/s -      1.586M in   5.087097s

Comparison:
  Array#reverse_each:   311681.3 i/s
  Array#reverse.each:   303395.1 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        19.221k i/100ms
   Enumerable#detect    83.756k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        191.656k (± 0.4%) i/s -      3.844M in  20.058102s
   Enumerable#detect    835.361k (± 0.6%) i/s -     16.751M in  20.053419s

Comparison:
   Enumerable#detect:   835361.3 i/s
Enumerable#select.first:   191656.3 i/s - 4.36x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       241.951k i/100ms
Enumerable#select.last
                        18.299k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.415M (± 0.7%) i/s -     12.098M in   5.009131s
Enumerable#select.last
                        182.571k (± 0.7%) i/s -    914.950k in   5.011757s

Comparison:
Enumerable#reverse.detect:  2415214.7 i/s
Enumerable#select.last:   182570.6 i/s - 13.23x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         5.063k i/100ms
  Enumerable#sort_by     4.826k i/100ms
     Enumerable#sort     2.339k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         51.106k (± 1.1%) i/s -    258.213k in   5.053081s
  Enumerable#sort_by     49.252k (± 0.9%) i/s -    250.952k in   5.095728s
     Enumerable#sort     23.626k (± 0.2%) i/s -    119.289k in   5.048996s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    51106.4 i/s
  Enumerable#sort_by:    49251.8 i/s - 1.04x  (± 0.00) slower
     Enumerable#sort:    23626.4 i/s - 2.16x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.560k i/100ms
Enumerable#sort_by...first
                         8.816k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    174.653k (± 0.4%) i/s -    878.000k in   5.027199s
Enumerable#sort_by...first
                         88.443k (± 0.9%) i/s -    449.616k in   5.084069s

Comparison:
   Enumerable#min_by:   174653.0 i/s
Enumerable#sort_by...first:    88443.3 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   420.178k i/100ms
            Hash#dup   299.466k i/100ms
Calculating -------------------------------------
              Hash[]      4.027M (± 2.1%) i/s -     20.169M in   5.010489s
            Hash#dup      2.964M (± 3.0%) i/s -     14.973M in   5.057344s

Comparison:
              Hash[]:  4026871.3 i/s
            Hash#dup:  2963789.8 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.427M i/100ms
  Hash#fetch, symbol     1.180M i/100ms
     Hash#[], string     1.233M i/100ms
  Hash#fetch, string   784.995k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.302M (± 0.3%) i/s -     72.765M in   5.087631s
  Hash#fetch, symbol     11.792M (± 0.6%) i/s -     58.984M in   5.002118s
     Hash#[], string     12.344M (± 0.3%) i/s -     62.868M in   5.092998s
  Hash#fetch, string      7.840M (± 0.3%) i/s -     39.250M in   5.006113s

Comparison:
     Hash#[], symbol: 14302467.7 i/s
     Hash#[], string: 12344174.0 i/s - 1.16x  (± 0.00) slower
  Hash#fetch, symbol: 11792146.4 i/s - 1.21x  (± 0.00) slower
  Hash#fetch, string:  7840419.3 i/s - 1.82x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   884.209k i/100ms
             Hash#[]     1.001M i/100ms
          Hash#[] ||   909.753k i/100ms
          Hash#[] &&   384.404k i/100ms
          Hash#fetch   599.895k i/100ms
 Hash#fetch fallback   388.884k i/100ms
Calculating -------------------------------------
            Hash#dig      8.841M (± 0.9%) i/s -     44.210M in   5.000785s
             Hash#[]      9.853M (± 3.6%) i/s -     50.060M in   5.087692s
          Hash#[] ||      9.314M (± 1.2%) i/s -     47.307M in   5.079689s
          Hash#[] &&      3.759M (± 0.6%) i/s -     18.836M in   5.011287s
          Hash#fetch      6.320M (± 0.4%) i/s -     31.794M in   5.030853s
 Hash#fetch fallback      3.910M (± 1.6%) i/s -     19.833M in   5.073672s

Comparison:
             Hash#[]:  9852596.2 i/s
          Hash#[] ||:  9314418.5 i/s - 1.06x  (± 0.00) slower
            Hash#dig:  8841485.7 i/s - 1.11x  (± 0.00) slower
          Hash#fetch:  6320010.4 i/s - 1.56x  (± 0.00) slower
 Hash#fetch fallback:  3910051.4 i/s - 2.52x  (± 0.00) slower
          Hash#[] &&:  3758830.5 i/s - 2.62x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.463M i/100ms
  Hash#fetch + block     1.453M i/100ms
    Hash#fetch + arg     1.096M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.522M (± 0.5%) i/s -     73.142M in   5.036663s
  Hash#fetch + block     14.298M (± 2.2%) i/s -     72.662M in   5.084525s
    Hash#fetch + arg     10.852M (± 0.4%) i/s -     54.820M in   5.051690s

Comparison:
  Hash#fetch + const: 14522297.4 i/s
  Hash#fetch + block: 14298251.3 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 10852075.5 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.247k i/100ms
         sort + to_h    11.553k i/100ms
Calculating -------------------------------------
      sort_by + to_h    272.270k (± 0.4%) i/s -      1.362M in   5.003753s
         sort + to_h    113.287k (± 0.4%) i/s -    577.650k in   5.099082s

Comparison:
      sort_by + to_h:   272270.0 i/s
         sort + to_h:   113286.6 i/s - 2.40x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   193.064k i/100ms
       Hash#each_key   191.457k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.903M (± 0.2%) i/s -      9.653M in   5.073877s
       Hash#each_key      1.898M (± 0.2%) i/s -      9.573M in   5.043599s

Comparison:
      Hash#keys.each:  1902534.8 i/s
       Hash#each_key:  1898027.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     5.863k i/100ms
           Hash#key?   934.932k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     58.317k (± 5.4%) i/s -    293.150k in   5.050118s
           Hash#key?      9.343M (± 0.3%) i/s -     46.747M in   5.003539s

Comparison:
           Hash#key?:  9342804.8 i/s
  Hash#keys.include?:    58317.0 i/s - 160.21x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.139k i/100ms
            Hash#[]=    10.025k i/100ms
Calculating -------------------------------------
         Hash#merge!     41.489k (± 0.4%) i/s -    211.089k in   5.087923s
            Hash#[]=    101.849k (± 0.9%) i/s -    511.275k in   5.020310s

Comparison:
            Hash#[]=:   101849.5 i/s
         Hash#merge!:    41488.9 i/s - 2.45x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         5.219k i/100ms
      Hash#merge({})     4.149k i/100ms
 Hash#dup#merge!({})     2.741k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         51.242k (± 2.2%) i/s -    260.950k in   5.095361s
      Hash#merge({})     41.429k (± 0.4%) i/s -    207.450k in   5.007427s
 Hash#dup#merge!({})     27.173k (± 0.3%) i/s -    137.050k in   5.043624s

Comparison:
{}#merge!(Hash) do end:    51242.1 i/s
      Hash#merge({}):    41429.2 i/s - 1.24x  (± 0.00) slower
 Hash#dup#merge!({}):    27173.2 i/s - 1.89x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   399.232k i/100ms
          Hash#merge   377.253k i/100ms
Calculating -------------------------------------
        Hash#**other      3.992M (± 0.4%) i/s -     19.962M in   5.000857s
          Hash#merge      3.698M (± 0.8%) i/s -     18.863M in   5.100805s

Comparison:
        Hash#**other:  3991705.3 i/s
          Hash#merge:  3698215.6 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.699k i/100ms
         Hash#merge!     4.075k i/100ms
Calculating -------------------------------------
          Hash#merge     16.640k (± 0.7%) i/s -     83.251k in   5.003419s
         Hash#merge!     41.015k (± 0.5%) i/s -    207.825k in   5.067185s

Comparison:
         Hash#merge!:    41015.0 i/s
          Hash#merge:    16639.6 i/s - 2.46x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      421.595k i/100ms
Array#each             233.181k i/100ms
Array#each_w/_object   176.192k i/100ms
Hash#select-include     78.998k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.203M (± 0.5%) i/s -     21.080M in   5.015143s
Array#each                2.326M (± 2.6%) i/s -     11.659M in   5.017203s
Array#each_w/_object      1.749M (± 0.6%) i/s -      8.810M in   5.035902s
Hash#select-include     791.817k (± 0.5%) i/s -      4.029M in   5.088310s

Comparison:
Hash#native-slice   :  4203308.2 i/s
Array#each          :  2325751.1 i/s - 1.81x  (± 0.00) slower
Array#each_w/_object:  1749422.2 i/s - 2.40x  (± 0.00) slower
Hash#select-include :   791817.0 i/s - 5.31x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.107k i/100ms
         Hash#value?   841.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     10.791k (± 3.0%) i/s -     54.243k in   5.031985s
         Hash#value?      8.327k (± 0.8%) i/s -     42.050k in   5.050193s

Comparison:
Hash#values.include?:    10790.7 i/s
         Hash#value?:     8326.9 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   644.282k i/100ms
                send   496.909k i/100ms
      method_missing   383.716k i/100ms
Calculating -------------------------------------
                call      6.703M (± 0.6%) i/s -     34.147M in   5.094335s
                send      5.009M (± 0.5%) i/s -     25.342M in   5.059333s
      method_missing      3.830M (± 0.4%) i/s -     19.186M in   5.009409s

Comparison:
                call:  6703174.5 i/s
                send:  5009134.7 i/s - 1.34x  (± 0.00) slower
      method_missing:  3830022.5 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     8.593k i/100ms
      Symbol#to_proc     9.300k i/100ms
Calculating -------------------------------------
               Block     86.508k (± 0.5%) i/s -    438.243k in   5.066056s
      Symbol#to_proc     92.469k (± 0.7%) i/s -    465.000k in   5.028960s

Comparison:
      Symbol#to_proc:    92468.6 i/s
               Block:    86507.9 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   930.258k i/100ms
       block + yield   953.283k i/100ms
        unused block     1.296M i/100ms
               yield     1.169M i/100ms
Calculating -------------------------------------
          block.call      9.364M (± 0.5%) i/s -     47.443M in   5.066508s
       block + yield      9.582M (± 0.5%) i/s -     48.617M in   5.074093s
        unused block     13.048M (± 0.4%) i/s -     66.115M in   5.067083s
               yield     11.683M (± 1.2%) i/s -     59.637M in   5.105446s

Comparison:
        unused block: 13048207.0 i/s
               yield: 11682902.0 i/s - 1.12x  (± 0.00) slower
       block + yield:  9581713.6 i/s - 1.36x  (± 0.00) slower
          block.call:  9364290.2 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   318.047k i/100ms
      range#include?    12.907k i/100ms
       range#member?    12.988k i/100ms
       plain compare   530.280k i/100ms
Calculating -------------------------------------
        range#cover?      3.183M (± 0.5%) i/s -     16.220M in   5.095362s
      range#include?    128.027k (± 0.9%) i/s -    645.350k in   5.041185s
       range#member?    130.417k (± 0.4%) i/s -    662.388k in   5.079078s
       plain compare      5.260M (± 0.4%) i/s -     26.514M in   5.040423s

Comparison:
       plain compare:  5260345.7 i/s
        range#cover?:  3183432.9 i/s - 1.65x  (± 0.00) slower
       range#member?:   130416.7 i/s - 40.33x  (± 0.00) slower
      range#include?:   128026.8 i/s - 41.09x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   920.089k i/100ms
           String#=~   652.115k i/100ms
          Regexp#===   603.734k i/100ms
        String#match   485.733k i/100ms
Calculating -------------------------------------
       String#match?      9.224M (± 0.4%) i/s -     46.925M in   5.087088s
           String#=~      6.579M (± 0.9%) i/s -     33.258M in   5.055510s
          Regexp#===      5.996M (± 0.5%) i/s -     30.187M in   5.034182s
        String#match      4.847M (± 0.5%) i/s -     24.287M in   5.010261s

Comparison:
       String#match?:  9224421.4 i/s
           String#=~:  6579081.4 i/s - 1.40x  (± 0.00) slower
          Regexp#===:  5996470.5 i/s - 1.54x  (± 0.00) slower
        String#match:  4847496.0 i/s - 1.90x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   650.282k i/100ms
      String#casecmp   798.289k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.508M (± 0.5%) i/s -     33.164M in   5.095818s
      String#casecmp      7.923M (± 1.2%) i/s -     39.914M in   5.038413s

Comparison:
      String#casecmp:  7923210.9 i/s
String#downcase + ==:  6508303.2 i/s - 1.22x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   578.809k i/100ms
       String#concat   600.800k i/100ms
       String#append   648.522k i/100ms
         "foo" "bar"     1.170M i/100ms
  "#{'foo'}#{'bar'}"     1.117M i/100ms
Calculating -------------------------------------
            String#+      5.789M (± 0.2%) i/s -     29.519M in   5.099196s
       String#concat      6.018M (± 0.3%) i/s -     30.641M in   5.091288s
       String#append      6.448M (± 0.6%) i/s -     32.426M in   5.028778s
         "foo" "bar"     11.660M (± 0.5%) i/s -     58.476M in   5.015115s
  "#{'foo'}#{'bar'}"     11.166M (± 0.3%) i/s -     55.859M in   5.002620s

Comparison:
         "foo" "bar": 11660102.0 i/s
  "#{'foo'}#{'bar'}": 11166074.4 i/s - 1.04x  (± 0.00) slower
       String#append:  6448325.0 i/s - 1.81x  (± 0.00) slower
       String#concat:  6018334.1 i/s - 1.94x  (± 0.00) slower
            String#+:  5789022.5 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@     1.008M i/100ms
          String#dup   572.580k i/100ms
Calculating -------------------------------------
           String#+@     10.027M (± 1.9%) i/s -     50.393M in   5.028042s
          String#dup      5.687M (± 2.3%) i/s -     28.629M in   5.037512s

Comparison:
           String#+@: 10026549.0 i/s
          String#dup:  5686552.0 i/s - 1.76x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   183.240k i/100ms
       String#match?   436.454k i/100ms
    String#end_with?   595.765k i/100ms
Calculating -------------------------------------
           String#=~      1.820M (± 1.9%) i/s -      9.162M in   5.035986s
       String#match?      4.369M (± 0.3%) i/s -     22.259M in   5.094824s
    String#end_with?      5.961M (± 2.9%) i/s -     29.788M in   5.002010s

Comparison:
    String#end_with?:  5960940.8 i/s
       String#match?:  4369027.6 i/s - 1.36x  (± 0.00) slower
           String#=~:  1820048.1 i/s - 3.28x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   108.843k i/100ms
          String#sub   135.524k i/100ms
String#dup["string"]=
                       177.600k i/100ms
Calculating -------------------------------------
         String#gsub      1.091M (± 0.2%) i/s -      5.551M in   5.088925s
          String#sub      1.366M (± 0.8%) i/s -      6.912M in   5.061736s
String#dup["string"]=
                          1.761M (± 0.8%) i/s -      8.880M in   5.041811s

Comparison:
String#dup["string"]=:  1761392.6 i/s
          String#sub:  1365574.5 i/s - 1.29x  (± 0.00) slower
         String#gsub:  1090801.4 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    99.456k i/100ms
           String#tr   349.523k i/100ms
Calculating -------------------------------------
         String#gsub    990.705k (± 0.3%) i/s -      4.973M in   5.019501s
           String#tr      3.484M (± 1.9%) i/s -     17.476M in   5.017924s

Comparison:
           String#tr:  3484054.4 i/s
         String#gsub:   990705.0 i/s - 3.52x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.110M i/100ms
         With Freeze     1.591M i/100ms
Calculating -------------------------------------
      Without Freeze     11.059M (± 0.4%) i/s -     55.480M in   5.016980s
         With Freeze     15.787M (± 2.0%) i/s -     79.565M in   5.042255s

Comparison:
         With Freeze: 15786523.2 i/s
      Without Freeze: 11058700.0 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.345k i/100ms
      String#squeeze   158.293k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     33.570k (± 0.3%) i/s -    170.595k in   5.081774s
      String#squeeze      1.569M (± 1.7%) i/s -      7.915M in   5.045761s

Comparison:
      String#squeeze:  1569015.3 i/s
 String#gsub/regex+/:    33570.3 i/s - 46.74x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   253.193k i/100ms
       String#match?   615.790k i/100ms
  String#start_with?   877.209k i/100ms
Calculating -------------------------------------
           String#=~      2.533M (± 0.9%) i/s -     12.913M in   5.097705s
       String#match?      6.267M (± 0.9%) i/s -     31.405M in   5.011502s
  String#start_with?      8.766M (± 0.6%) i/s -     43.860M in   5.003764s

Comparison:
  String#start_with?:  8765781.3 i/s
       String#match?:  6267168.6 i/s - 1.40x  (± 0.00) slower
           String#=~:  2533289.2 i/s - 3.46x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   206.745k i/100ms
    String#[0, n] ==    84.649k i/100ms
   String#[RANGE] ==    75.128k i/100ms
   String#[0...n] ==    45.864k i/100ms
Calculating -------------------------------------
  String#start_with?      2.040M (± 3.0%) i/s -     10.337M in   5.071970s
    String#[0, n] ==    840.868k (± 0.4%) i/s -      4.232M in   5.033513s
   String#[RANGE] ==    754.710k (± 0.7%) i/s -      3.832M in   5.077067s
   String#[0...n] ==    458.294k (± 1.0%) i/s -      2.293M in   5.004267s

Comparison:
  String#start_with?:  2039924.6 i/s
    String#[0, n] ==:   840868.4 i/s - 2.43x  (± 0.00) slower
   String#[RANGE] ==:   754709.6 i/s - 2.70x  (± 0.00) slower
   String#[0...n] ==:   458294.4 i/s - 4.45x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   180.124k i/100ms
 String#sub!'string'   125.633k i/100ms
String#gsub!'string'    77.289k i/100ms
  String#[/regexp/]=   153.585k i/100ms
 String#sub!/regexp/   114.645k i/100ms
String#gsub!/regexp/    60.344k i/100ms
Calculating -------------------------------------
  String#['string']=      1.776M (± 0.6%) i/s -      9.006M in   5.071789s
 String#sub!'string'      1.248M (± 0.6%) i/s -      6.282M in   5.035251s
String#gsub!'string'    766.504k (± 0.6%) i/s -      3.864M in   5.041852s
  String#[/regexp/]=      1.523M (± 2.1%) i/s -      7.679M in   5.045366s
 String#sub!/regexp/      1.127M (± 0.9%) i/s -      5.732M in   5.084578s
String#gsub!/regexp/    604.798k (± 0.8%) i/s -      3.078M in   5.088891s

Comparison:
  String#['string']=:  1775809.0 i/s
  String#[/regexp/]=:  1522831.4 i/s - 1.17x  (± 0.00) slower
 String#sub!'string':  1247576.6 i/s - 1.42x  (± 0.00) slower
 String#sub!/regexp/:  1127463.4 i/s - 1.58x  (± 0.00) slower
String#gsub!'string':   766503.7 i/s - 2.32x  (± 0.00) slower
String#gsub!/regexp/:   604798.5 i/s - 2.94x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   135.130k i/100ms
        String#chomp   553.336k i/100ms
String#delete_suffix   596.855k i/100ms
Calculating -------------------------------------
          String#sub      1.347M (± 0.3%) i/s -      6.756M in   5.017636s
        String#chomp      5.516M (± 2.4%) i/s -     27.667M in   5.018737s
String#delete_suffix      5.991M (± 3.2%) i/s -     30.440M in   5.087356s

Comparison:
String#delete_suffix:  5991019.2 i/s
        String#chomp:  5516406.6 i/s - 1.09x  (± 0.00) slower
          String#sub:  1346565.7 i/s - 4.45x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   623.677k i/100ms
          String#sub   138.744k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.197M (± 4.0%) i/s -     31.184M in   5.042124s
          String#sub      1.394M (± 0.7%) i/s -      7.076M in   5.077242s

Comparison:
String#delete_prefix:  6196698.8 i/s
          String#sub:  1393726.3 i/s - 4.45x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   572.434k i/100ms
    String#unpack[0]   443.601k i/100ms
Calculating -------------------------------------
      String#unpack1      5.737M (± 0.5%) i/s -     29.194M in   5.088556s
    String#unpack[0]      4.429M (± 0.7%) i/s -     22.180M in   5.008754s

Comparison:
      String#unpack1:  5737350.8 i/s
    String#unpack[0]:  4428502.2 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.896k i/100ms
          Time.parse     9.568k i/100ms
Calculating -------------------------------------
        Time.iso8601    278.487k (± 0.8%) i/s -      1.395M in   5.008866s
          Time.parse     96.385k (± 0.9%) i/s -    487.968k in   5.063146s

Comparison:
        Time.iso8601:   278486.5 i/s
          Time.parse:    96384.9 i/s - 2.89x  (± 0.00) slower

