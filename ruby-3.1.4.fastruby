$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       759.580k i/100ms
Function with splat arguments
                        28.526k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.558M (± 0.4%) i/s -     37.979M in   5.024822s
Function with splat arguments
                        231.780k (± 5.5%) i/s -      1.170M in   5.066729s

Comparison:
Function with single Array argument:  7558388.5 i/s
Function with splat arguments:   231779.9 i/s - 32.61x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   989.272k i/100ms
Sequential Assignment
                         1.011M i/100ms
Calculating -------------------------------------
 Parallel Assignment      9.911M (± 0.6%) i/s -     50.453M in   5.090744s
Sequential Assignment
                         10.132M (± 0.2%) i/s -     51.567M in   5.089298s

Comparison:
Sequential Assignment: 10132445.7 i/s
 Parallel Assignment:  9911039.9 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   469.972k i/100ms
       attr_accessor   554.584k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.675M (± 0.3%) i/s -     23.499M in   5.026216s
       attr_accessor      5.570M (± 0.3%) i/s -     28.284M in   5.078248s

Comparison:
       attr_accessor:  5569661.8 i/s
   getter_and_setter:  4675241.4 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    88.394k i/100ms
         respond_to?   753.226k i/100ms
Calculating -------------------------------------
      begin...rescue    883.248k (± 0.5%) i/s -      4.420M in   5.004033s
         respond_to?      7.654M (± 0.2%) i/s -     38.415M in   5.018893s

Comparison:
         respond_to?:  7654015.3 i/s
      begin...rescue:   883248.1 i/s - 8.67x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   293.745k i/100ms
             &method   119.607k i/100ms
Calculating -------------------------------------
              normal      2.972M (± 0.4%) i/s -     14.981M in   5.041357s
             &method      1.193M (± 0.4%) i/s -      5.980M in   5.014683s

Comparison:
              normal:  2971671.8 i/s
             &method:  1192587.6 i/s - 2.49x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       261.000  i/100ms
       define_method   321.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.285k (±21.0%) i/s -     10.962k in   5.453611s
       define_method      3.241k (±19.9%) i/s -     14.766k in   5.049325s

Comparison:
       define_method:     3241.0 i/s
module_eval with string:     2285.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   262.735k i/100ms
       Kernel#format   202.526k i/100ms
            String#%   175.501k i/100ms
Calculating -------------------------------------
         Float#round      2.647M (± 0.3%) i/s -     13.399M in   5.061327s
       Kernel#format      2.040M (± 0.5%) i/s -     10.329M in   5.063473s
            String#%      1.763M (± 0.7%) i/s -      8.951M in   5.075808s

Comparison:
         Float#round:  2647455.6 i/s
       Kernel#format:  2039912.7 i/s - 1.30x  (± 0.00) slower
            String#%:  1763465.6 i/s - 1.50x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   889.265k i/100ms
          OpenStruct   498.429k i/100ms
Calculating -------------------------------------
                Hash      8.910M (± 0.7%) i/s -     45.353M in   5.090304s
          OpenStruct      4.982M (± 0.3%) i/s -     24.921M in   5.002375s

Comparison:
                Hash:  8910045.0 i/s
          OpenStruct:  4981977.9 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.087M i/100ms
          OpenStruct    11.270k i/100ms
Calculating -------------------------------------
                Hash     11.576M (± 0.4%) i/s -     58.692M in   5.070173s
          OpenStruct    112.389k (± 3.4%) i/s -    563.500k in   5.019624s

Comparison:
                Hash: 11576123.9 i/s
          OpenStruct:   112388.9 i/s - 103.00x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   576.099k i/100ms
  ancestors.include?   124.331k i/100ms
Calculating -------------------------------------
  less than or equal      5.964M (± 0.3%) i/s -     29.957M in   5.022831s
  ancestors.include?      1.225M (± 0.4%) i/s -      6.217M in   5.074096s

Comparison:
  less than or equal:  5964248.3 i/s
  ancestors.include?:  1225173.7 i/s - 4.87x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.625  (± 0.0%) i/s -      4.000  in   6.400624s
         Kernel loop      0.204  (± 0.0%) i/s -      2.000  in   9.791320s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 3.06x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.512M i/100ms
         Array#first     1.305M i/100ms
Calculating -------------------------------------
           Array#[0]     15.031M (± 0.3%) i/s -     75.603M in   5.030018s
         Array#first     13.067M (± 0.2%) i/s -     66.575M in   5.094872s

Comparison:
           Array#[0]: 15030500.2 i/s
         Array#first: 13067086.9 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.510M i/100ms
          Array#last     1.291M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.015M (± 0.4%) i/s -     75.486M in   5.027289s
          Array#last     12.999M (± 0.2%) i/s -     65.862M in   5.066584s

Comparison:
          Array#[-1]: 15015368.0 i/s
          Array#last: 12999297.5 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    91.183k i/100ms
Calculating -------------------------------------
                find      0.269  (± 0.0%) i/s -      2.000  in   7.430880s
             bsearch    913.775k (± 0.9%) i/s -      4.650M in   5.089612s

Comparison:
             bsearch:   913775.2 i/s
                find:        0.3 i/s - 3395074.42x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    18.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    189.782  (± 2.1%) i/s -    954.000  in   5.029622s
        Array#insert      1.440  (± 0.0%) i/s -      8.000  in   5.555685s

Comparison:
       Array#unshift:      189.8 i/s
        Array#insert:        1.4 i/s - 131.79x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.119M i/100ms
          Array#size     2.123M i/100ms
         Array#count     1.620M i/100ms
Calculating -------------------------------------
        Array#length     21.226M (± 0.6%) i/s -    108.065M in   5.091263s
          Array#size     21.184M (± 0.3%) i/s -    106.139M in   5.010308s
         Array#count     16.224M (± 1.1%) i/s -     82.608M in   5.092426s

Comparison:
        Array#length: 21226285.6 i/s
          Array#size: 21184388.4 i/s - same-ish: difference falls within error
         Array#count: 16223758.3 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.153k i/100ms
        Array#sample     1.041M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    451.371k (± 0.5%) i/s -      2.258M in   5.001877s
        Array#sample     10.412M (± 0.3%) i/s -     53.088M in   5.098957s

Comparison:
        Array#sample: 10411607.6 i/s
 Array#shuffle.first:   451371.1 i/s - 23.07x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    62.638k i/100ms
          Date.parse    31.682k i/100ms
Calculating -------------------------------------
        Date.iso8601    623.057k (± 0.9%) i/s -      3.132M in   5.027099s
          Date.parse    315.546k (± 0.7%) i/s -      1.584M in   5.020445s

Comparison:
        Date.iso8601:   623056.6 i/s
          Date.parse:   315545.8 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.584k i/100ms
           Array#map    25.494k i/100ms
Calculating -------------------------------------
   Array#each + push    186.024k (± 0.4%) i/s -    947.784k in   5.095048s
           Array#map    255.394k (± 0.4%) i/s -      1.300M in   5.091009s

Comparison:
           Array#map:   255393.6 i/s
   Array#each + push:   186023.8 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    28.766k i/100ms
               #each    31.546k i/100ms
Calculating -------------------------------------
            For loop    289.057k (± 0.5%) i/s -      1.467M in   5.075476s
               #each    315.216k (± 0.8%) i/s -      1.577M in   5.004237s

Comparison:
               #each:   315216.5 i/s
            For loop:   289056.6 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.579k i/100ms
     each_with_index    17.993k i/100ms
Calculating -------------------------------------
          While Loop    275.542k (± 0.1%) i/s -      1.379M in   5.004505s
     each_with_index    180.079k (± 0.2%) i/s -    917.643k in   5.095808s

Comparison:
          While Loop:   275542.1 i/s
     each_with_index:   180078.7 i/s - 1.53x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol   124.847k i/100ms
      inject to_proc     1.757k i/100ms
        inject block     1.929k i/100ms
Calculating -------------------------------------
       inject symbol      1.246M (± 0.7%) i/s -      6.242M in   5.009948s
      inject to_proc     17.659k (± 0.3%) i/s -     89.607k in   5.074276s
        inject block     19.310k (± 0.3%) i/s -     98.379k in   5.094834s

Comparison:
       inject symbol:  1246055.3 i/s
        inject block:    19309.8 i/s - 64.53x  (± 0.00) slower
      inject to_proc:    17659.2 i/s - 70.56x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     7.031k i/100ms
   Array#map.flatten     4.201k i/100ms
      Array#flat_map     9.012k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     73.126k (± 1.2%) i/s -    365.612k in   5.000455s
   Array#map.flatten     42.949k (± 0.4%) i/s -    218.452k in   5.086378s
      Array#flat_map     93.944k (± 1.2%) i/s -    477.636k in   5.085101s

Comparison:
      Array#flat_map:    93943.9 i/s
Array#map.flatten(1):    73126.4 i/s - 1.28x  (± 0.00) slower
   Array#map.flatten:    42949.1 i/s - 2.19x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    28.914k i/100ms
  Array#reverse_each    30.951k i/100ms
Calculating -------------------------------------
  Array#reverse.each    289.990k (± 0.2%) i/s -      1.475M in   5.085069s
  Array#reverse_each    309.340k (± 0.3%) i/s -      1.548M in   5.002807s

Comparison:
  Array#reverse_each:   309339.6 i/s
  Array#reverse.each:   289990.2 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.312k i/100ms
   Enumerable#detect    82.453k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        202.692k (± 0.5%) i/s -      4.062M in  20.042807s
   Enumerable#detect    829.995k (± 0.5%) i/s -     16.656M in  20.067464s

Comparison:
   Enumerable#detect:   829995.0 i/s
Enumerable#select.first:   202692.0 i/s - 4.09x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       244.132k i/100ms
Enumerable#select.last
                        18.262k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.440M (± 0.5%) i/s -     12.207M in   5.001901s
Enumerable#select.last
                        185.107k (± 0.4%) i/s -    931.362k in   5.031541s

Comparison:
Enumerable#reverse.detect:  2440464.4 i/s
Enumerable#select.last:   185107.4 i/s - 13.18x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         5.129k i/100ms
  Enumerable#sort_by     5.049k i/100ms
     Enumerable#sort     2.407k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         52.237k (± 1.2%) i/s -    261.579k in   5.008277s
  Enumerable#sort_by     49.917k (± 1.4%) i/s -    252.450k in   5.058335s
     Enumerable#sort     24.066k (± 0.4%) i/s -    120.350k in   5.000911s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    52236.7 i/s
  Enumerable#sort_by:    49917.3 i/s - 1.05x  (± 0.00) slower
     Enumerable#sort:    24066.0 i/s - 2.17x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    16.905k i/100ms
Enumerable#sort_by...first
                         8.789k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    169.672k (± 0.3%) i/s -    862.155k in   5.081373s
Enumerable#sort_by...first
                         87.330k (± 0.5%) i/s -    439.450k in   5.032226s

Comparison:
   Enumerable#min_by:   169671.5 i/s
Enumerable#sort_by...first:    87329.8 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   424.488k i/100ms
            Hash#dup   306.375k i/100ms
Calculating -------------------------------------
              Hash[]      4.216M (± 1.9%) i/s -     21.224M in   5.036322s
            Hash#dup      3.017M (± 0.5%) i/s -     15.319M in   5.076810s

Comparison:
              Hash[]:  4215659.0 i/s
            Hash#dup:  3017475.4 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.424M i/100ms
  Hash#fetch, symbol     1.170M i/100ms
     Hash#[], string     1.242M i/100ms
  Hash#fetch, string   775.136k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.247M (± 0.3%) i/s -     72.641M in   5.098700s
  Hash#fetch, symbol     11.721M (± 0.3%) i/s -     59.671M in   5.091162s
     Hash#[], string     12.324M (± 3.1%) i/s -     62.122M in   5.046496s
  Hash#fetch, string      7.760M (± 0.7%) i/s -     39.532M in   5.094868s

Comparison:
     Hash#[], symbol: 14247181.9 i/s
     Hash#[], string: 12324247.3 i/s - 1.16x  (± 0.00) slower
  Hash#fetch, symbol: 11720523.9 i/s - 1.22x  (± 0.00) slower
  Hash#fetch, string:  7759538.8 i/s - 1.84x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   877.782k i/100ms
             Hash#[]     1.016M i/100ms
          Hash#[] ||   954.039k i/100ms
          Hash#[] &&   385.148k i/100ms
          Hash#fetch   612.675k i/100ms
 Hash#fetch fallback   387.394k i/100ms
Calculating -------------------------------------
            Hash#dig      8.991M (± 1.0%) i/s -     45.645M in   5.077232s
             Hash#[]      9.787M (± 0.9%) i/s -     49.765M in   5.085442s
          Hash#[] ||      8.711M (± 1.8%) i/s -     43.886M in   5.039552s
          Hash#[] &&      4.027M (± 0.9%) i/s -     20.413M in   5.068981s
          Hash#fetch      6.001M (± 1.3%) i/s -     30.021M in   5.003230s
 Hash#fetch fallback      3.915M (± 1.1%) i/s -     19.757M in   5.046981s

Comparison:
             Hash#[]:  9786511.8 i/s
            Hash#dig:  8991053.9 i/s - 1.09x  (± 0.00) slower
          Hash#[] ||:  8711038.7 i/s - 1.12x  (± 0.00) slower
          Hash#fetch:  6001283.7 i/s - 1.63x  (± 0.00) slower
          Hash#[] &&:  4027341.9 i/s - 2.43x  (± 0.00) slower
 Hash#fetch fallback:  3915070.4 i/s - 2.50x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.459M i/100ms
  Hash#fetch + block     1.457M i/100ms
    Hash#fetch + arg     1.091M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.581M (± 0.4%) i/s -     72.939M in   5.002510s
  Hash#fetch + block     14.448M (± 0.5%) i/s -     72.848M in   5.042308s
    Hash#fetch + arg     10.908M (± 0.3%) i/s -     54.567M in   5.002375s

Comparison:
  Hash#fetch + const: 14580676.8 i/s
  Hash#fetch + block: 14447834.4 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 10908317.7 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    28.225k i/100ms
         sort + to_h    12.588k i/100ms
Calculating -------------------------------------
      sort_by + to_h    282.147k (± 0.6%) i/s -      1.411M in   5.002012s
         sort + to_h    126.985k (± 0.5%) i/s -    641.988k in   5.055743s

Comparison:
      sort_by + to_h:   282147.0 i/s
         sort + to_h:   126985.2 i/s - 2.22x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   186.264k i/100ms
       Hash#each_key   196.464k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.901M (± 0.6%) i/s -      9.686M in   5.096338s
       Hash#each_key      1.951M (± 1.1%) i/s -      9.823M in   5.034460s

Comparison:
       Hash#each_key:  1951438.6 i/s
      Hash#keys.each:  1900591.3 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.284k i/100ms
           Hash#key?     1.016M i/100ms
Calculating -------------------------------------
  Hash#keys.include?     12.708k (± 4.2%) i/s -     64.200k in   5.062318s
           Hash#key?     10.194M (± 0.3%) i/s -     51.806M in   5.081764s

Comparison:
           Hash#key?: 10194489.9 i/s
  Hash#keys.include?:    12708.1 i/s - 802.20x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.169k i/100ms
            Hash#[]=    10.126k i/100ms
Calculating -------------------------------------
         Hash#merge!     41.715k (± 0.4%) i/s -    212.619k in   5.097075s
            Hash#[]=    102.024k (± 0.8%) i/s -    516.426k in   5.062146s

Comparison:
            Hash#[]=:   102024.4 i/s
         Hash#merge!:    41714.8 i/s - 2.45x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         5.160k i/100ms
      Hash#merge({})     4.167k i/100ms
 Hash#dup#merge!({})     2.731k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         51.905k (± 0.3%) i/s -    263.160k in   5.070121s
      Hash#merge({})     41.426k (± 0.5%) i/s -    208.350k in   5.029525s
 Hash#dup#merge!({})     27.345k (± 0.8%) i/s -    139.281k in   5.093848s

Comparison:
{}#merge!(Hash) do end:    51904.6 i/s
      Hash#merge({}):    41426.3 i/s - 1.25x  (± 0.00) slower
 Hash#dup#merge!({}):    27344.7 i/s - 1.90x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   394.323k i/100ms
          Hash#merge   366.625k i/100ms
Calculating -------------------------------------
        Hash#**other      4.005M (± 0.5%) i/s -     20.110M in   5.021477s
          Hash#merge      3.660M (± 0.4%) i/s -     18.331M in   5.009062s

Comparison:
        Hash#**other:  4004992.4 i/s
          Hash#merge:  3659670.3 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.695k i/100ms
         Hash#merge!     4.046k i/100ms
Calculating -------------------------------------
          Hash#merge     16.806k (± 0.8%) i/s -     84.750k in   5.043188s
         Hash#merge!     40.742k (± 0.5%) i/s -    206.346k in   5.064830s

Comparison:
         Hash#merge!:    40742.2 i/s
          Hash#merge:    16805.9 i/s - 2.42x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      424.547k i/100ms
Array#each             231.861k i/100ms
Array#each_w/_object   173.319k i/100ms
Hash#select-include     78.443k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.319M (± 0.5%) i/s -     21.652M in   5.013272s
Array#each                2.348M (± 0.7%) i/s -     11.825M in   5.036186s
Array#each_w/_object      1.720M (± 0.3%) i/s -      8.666M in   5.037036s
Hash#select-include     789.012k (± 0.6%) i/s -      4.001M in   5.070582s

Comparison:
Hash#native-slice   :  4319040.9 i/s
Array#each          :  2348121.5 i/s - 1.84x  (± 0.00) slower
Array#each_w/_object:  1720463.3 i/s - 2.51x  (± 0.00) slower
Hash#select-include :   789012.1 i/s - 5.47x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     5.846k i/100ms
         Hash#value?     7.303k i/100ms
Calculating -------------------------------------
Hash#values.include?     58.160k (± 5.2%) i/s -    292.300k in   5.047347s
         Hash#value?     71.591k (± 2.5%) i/s -    365.150k in   5.103694s

Comparison:
         Hash#value?:    71591.1 i/s
Hash#values.include?:    58160.3 i/s - 1.23x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   665.399k i/100ms
                send   496.565k i/100ms
      method_missing   384.771k i/100ms
Calculating -------------------------------------
                call      6.668M (± 0.3%) i/s -     33.935M in   5.089362s
                send      5.018M (± 0.9%) i/s -     25.325M in   5.046791s
      method_missing      3.830M (± 0.6%) i/s -     19.239M in   5.022902s

Comparison:
                call:  6667963.5 i/s
                send:  5018413.8 i/s - 1.33x  (± 0.00) slower
      method_missing:  3830332.5 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     8.742k i/100ms
      Symbol#to_proc     9.311k i/100ms
Calculating -------------------------------------
               Block     86.651k (± 0.3%) i/s -    437.100k in   5.044431s
      Symbol#to_proc     92.889k (± 0.3%) i/s -    465.550k in   5.011974s

Comparison:
      Symbol#to_proc:    92888.6 i/s
               Block:    86650.8 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   925.605k i/100ms
       block + yield   964.592k i/100ms
        unused block     1.278M i/100ms
               yield     1.172M i/100ms
Calculating -------------------------------------
          block.call      9.245M (± 0.3%) i/s -     46.280M in   5.006235s
       block + yield      9.691M (± 0.3%) i/s -     49.194M in   5.076191s
        unused block     12.835M (± 0.2%) i/s -     65.189M in   5.078796s
               yield     11.567M (± 0.3%) i/s -     58.591M in   5.065443s

Comparison:
        unused block: 12835479.8 i/s
               yield: 11566931.9 i/s - 1.11x  (± 0.00) slower
       block + yield:  9691251.7 i/s - 1.32x  (± 0.00) slower
          block.call:  9244584.6 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   321.234k i/100ms
      range#include?    12.746k i/100ms
       range#member?    12.714k i/100ms
       plain compare   528.693k i/100ms
Calculating -------------------------------------
        range#cover?      3.189M (± 0.8%) i/s -     16.062M in   5.036712s
      range#include?    129.495k (± 0.5%) i/s -    650.046k in   5.019963s
       range#member?    129.213k (± 0.3%) i/s -    648.414k in   5.018221s
       plain compare      5.299M (± 0.4%) i/s -     26.963M in   5.088002s

Comparison:
       plain compare:  5299487.7 i/s
        range#cover?:  3189150.8 i/s - 1.66x  (± 0.00) slower
      range#include?:   129495.2 i/s - 40.92x  (± 0.00) slower
       range#member?:   129213.2 i/s - 41.01x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   941.234k i/100ms
           String#=~   654.523k i/100ms
          Regexp#===   590.086k i/100ms
        String#match   481.101k i/100ms
Calculating -------------------------------------
       String#match?      9.411M (± 0.5%) i/s -     47.062M in   5.000601s
           String#=~      6.481M (± 0.4%) i/s -     32.726M in   5.049565s
          Regexp#===      5.916M (± 0.5%) i/s -     30.094M in   5.087233s
        String#match      4.801M (± 0.5%) i/s -     24.055M in   5.010085s

Comparison:
       String#match?:  9411465.0 i/s
           String#=~:  6481114.9 i/s - 1.45x  (± 0.00) slower
          Regexp#===:  5915822.8 i/s - 1.59x  (± 0.00) slower
        String#match:  4801436.4 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   654.321k i/100ms
      String#casecmp   801.675k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.531M (± 0.6%) i/s -     32.716M in   5.009474s
      String#casecmp      8.028M (± 0.5%) i/s -     40.885M in   5.092918s

Comparison:
      String#casecmp:  8028124.6 i/s
String#downcase + ==:  6531053.4 i/s - 1.23x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   591.691k i/100ms
       String#concat   609.979k i/100ms
       String#append   656.346k i/100ms
         "foo" "bar"     1.169M i/100ms
  "#{'foo'}#{'bar'}"     1.154M i/100ms
Calculating -------------------------------------
            String#+      5.859M (± 4.5%) i/s -     29.585M in   5.064429s
       String#concat      6.095M (± 0.3%) i/s -     30.499M in   5.003598s
       String#append      6.532M (± 0.3%) i/s -     32.817M in   5.023974s
         "foo" "bar"     11.633M (± 0.5%) i/s -     58.433M in   5.023210s
  "#{'foo'}#{'bar'}"     11.659M (± 0.3%) i/s -     58.831M in   5.046155s

Comparison:
  "#{'foo'}#{'bar'}": 11658704.8 i/s
         "foo" "bar": 11632832.4 i/s - same-ish: difference falls within error
       String#append:  6532199.8 i/s - 1.78x  (± 0.00) slower
       String#concat:  6095468.9 i/s - 1.91x  (± 0.00) slower
            String#+:  5858860.1 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@   981.809k i/100ms
          String#dup   570.120k i/100ms
Calculating -------------------------------------
           String#+@      9.995M (± 0.3%) i/s -     50.072M in   5.010034s
          String#dup      5.640M (± 0.4%) i/s -     28.506M in   5.054258s

Comparison:
           String#+@:  9994503.9 i/s
          String#dup:  5640106.1 i/s - 1.77x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   174.097k i/100ms
       String#match?   387.038k i/100ms
    String#end_with?   600.184k i/100ms
Calculating -------------------------------------
           String#=~      1.735M (± 0.6%) i/s -      8.705M in   5.018796s
       String#match?      3.846M (± 0.4%) i/s -     19.352M in   5.032352s
    String#end_with?      6.073M (± 0.3%) i/s -     30.609M in   5.040055s

Comparison:
    String#end_with?:  6073296.8 i/s
       String#match?:  3845550.2 i/s - 1.58x  (± 0.00) slower
           String#=~:  1734515.0 i/s - 3.50x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   108.182k i/100ms
          String#sub   134.666k i/100ms
String#dup["string"]=
                       174.692k i/100ms
Calculating -------------------------------------
         String#gsub      1.079M (± 0.5%) i/s -      5.409M in   5.012484s
          String#sub      1.359M (± 0.6%) i/s -      6.868M in   5.054891s
String#dup["string"]=
                          1.748M (± 0.8%) i/s -      8.909M in   5.096035s

Comparison:
String#dup["string"]=:  1748403.5 i/s
          String#sub:  1358721.3 i/s - 1.29x  (± 0.00) slower
         String#gsub:  1079154.4 i/s - 1.62x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    99.064k i/100ms
           String#tr   359.007k i/100ms
Calculating -------------------------------------
         String#gsub    973.569k (± 0.5%) i/s -      4.953M in   5.087815s
           String#tr      3.595M (± 0.6%) i/s -     18.309M in   5.093680s

Comparison:
           String#tr:  3594669.2 i/s
         String#gsub:   973569.0 i/s - 3.69x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.160M i/100ms
         With Freeze     1.668M i/100ms
Calculating -------------------------------------
      Without Freeze     11.561M (± 0.3%) i/s -     57.999M in   5.016835s
         With Freeze     16.695M (± 0.4%) i/s -     85.068M in   5.095350s

Comparison:
         With Freeze: 16695465.0 i/s
      Without Freeze: 11560992.6 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.345k i/100ms
      String#squeeze   155.876k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     33.635k (± 0.3%) i/s -    170.595k in   5.071953s
      String#squeeze      1.548M (± 0.7%) i/s -      7.794M in   5.036080s

Comparison:
      String#squeeze:  1547671.5 i/s
 String#gsub/regex+/:    33635.2 i/s - 46.01x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   260.214k i/100ms
       String#match?   638.173k i/100ms
  String#start_with?   873.633k i/100ms
Calculating -------------------------------------
           String#=~      2.598M (± 0.4%) i/s -     13.011M in   5.008967s
       String#match?      6.420M (± 0.3%) i/s -     32.547M in   5.069350s
  String#start_with?      8.749M (± 0.3%) i/s -     44.555M in   5.092529s

Comparison:
  String#start_with?:  8749216.7 i/s
       String#match?:  6420368.9 i/s - 1.36x  (± 0.00) slower
           String#=~:  2597514.0 i/s - 3.37x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   195.028k i/100ms
    String#[0, n] ==    85.186k i/100ms
   String#[RANGE] ==    75.584k i/100ms
   String#[0...n] ==    46.626k i/100ms
Calculating -------------------------------------
  String#start_with?      2.052M (± 1.2%) i/s -     10.336M in   5.038983s
    String#[0, n] ==    837.973k (± 0.5%) i/s -      4.259M in   5.082986s
   String#[RANGE] ==    762.676k (± 0.5%) i/s -      3.855M in   5.054434s
   String#[0...n] ==    468.033k (± 0.7%) i/s -      2.378M in   5.080920s

Comparison:
  String#start_with?:  2051571.7 i/s
    String#[0, n] ==:   837972.5 i/s - 2.45x  (± 0.00) slower
   String#[RANGE] ==:   762676.2 i/s - 2.69x  (± 0.00) slower
   String#[0...n] ==:   468033.0 i/s - 4.38x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   176.554k i/100ms
 String#sub!'string'   124.820k i/100ms
String#gsub!'string'    75.206k i/100ms
  String#[/regexp/]=   146.648k i/100ms
 String#sub!/regexp/   113.651k i/100ms
String#gsub!/regexp/    58.388k i/100ms
Calculating -------------------------------------
  String#['string']=      1.747M (± 0.9%) i/s -      8.828M in   5.052662s
 String#sub!'string'      1.252M (± 0.4%) i/s -      6.366M in   5.085138s
String#gsub!'string'    760.017k (± 1.0%) i/s -      3.836M in   5.047102s
  String#[/regexp/]=      1.465M (± 0.4%) i/s -      7.332M in   5.005277s
 String#sub!/regexp/      1.134M (± 0.3%) i/s -      5.683M in   5.011675s
String#gsub!/regexp/    582.777k (± 0.5%) i/s -      2.919M in   5.009581s

Comparison:
  String#['string']=:  1747273.8 i/s
  String#[/regexp/]=:  1464953.9 i/s - 1.19x  (± 0.00) slower
 String#sub!'string':  1251865.7 i/s - 1.40x  (± 0.00) slower
 String#sub!/regexp/:  1133876.5 i/s - 1.54x  (± 0.00) slower
String#gsub!'string':   760017.0 i/s - 2.30x  (± 0.00) slower
String#gsub!/regexp/:   582776.9 i/s - 3.00x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   134.214k i/100ms
        String#chomp   543.033k i/100ms
String#delete_suffix   595.209k i/100ms
Calculating -------------------------------------
          String#sub      1.343M (± 0.2%) i/s -      6.845M in   5.097079s
        String#chomp      5.488M (± 0.3%) i/s -     27.695M in   5.046427s
String#delete_suffix      5.958M (± 0.8%) i/s -     30.356M in   5.095045s

Comparison:
String#delete_suffix:  5958280.4 i/s
        String#chomp:  5488016.4 i/s - 1.09x  (± 0.00) slower
          String#sub:  1342912.8 i/s - 4.44x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   630.585k i/100ms
          String#sub   135.989k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.322M (± 0.5%) i/s -     32.160M in   5.087466s
          String#sub      1.369M (± 0.4%) i/s -      6.935M in   5.067963s

Comparison:
String#delete_prefix:  6321526.1 i/s
          String#sub:  1368513.0 i/s - 4.62x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   602.371k i/100ms
    String#unpack[0]   445.922k i/100ms
Calculating -------------------------------------
      String#unpack1      6.002M (± 0.4%) i/s -     30.119M in   5.018523s
    String#unpack[0]      4.499M (± 0.9%) i/s -     22.742M in   5.055442s

Comparison:
      String#unpack1:  6001566.1 i/s
    String#unpack[0]:  4498877.8 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    26.656k i/100ms
          Time.parse     9.253k i/100ms
Calculating -------------------------------------
        Time.iso8601    265.843k (± 0.4%) i/s -      1.333M in   5.013569s
          Time.parse     92.432k (± 0.9%) i/s -    462.650k in   5.005669s

Comparison:
        Time.iso8601:   265842.6 i/s
          Time.parse:    92432.4 i/s - 2.88x  (± 0.00) slower

