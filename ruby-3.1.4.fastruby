$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       611.688k i/100ms
Function with splat arguments
                        18.295k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          6.117M (± 0.2%) i/s -     30.584M in   5.000002s
Function with splat arguments
                        184.246k (± 6.3%) i/s -    933.045k in   5.090875s

Comparison:
Function with single Array argument:  6116897.6 i/s
Function with splat arguments:   184245.9 i/s - 33.20x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   934.929k i/100ms
Sequential Assignment
                       941.180k i/100ms
Calculating -------------------------------------
 Parallel Assignment      9.340M (± 0.2%) i/s -     46.746M in   5.004906s
Sequential Assignment
                          9.404M (± 0.1%) i/s -     47.059M in   5.003970s

Comparison:
Sequential Assignment:  9404347.1 i/s
 Parallel Assignment:  9340176.7 i/s - 1.01x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   377.591k i/100ms
       attr_accessor   429.735k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.768M (± 0.1%) i/s -     18.880M in   5.009882s
       attr_accessor      4.371M (± 0.5%) i/s -     21.916M in   5.014123s

Comparison:
       attr_accessor:  4371070.1 i/s
   getter_and_setter:  3768465.1 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    73.478k i/100ms
         respond_to?   603.592k i/100ms
Calculating -------------------------------------
      begin...rescue    731.063k (± 2.9%) i/s -      3.674M in   5.029740s
         respond_to?      6.037M (± 0.1%) i/s -     30.783M in   5.098790s

Comparison:
         respond_to?:  6037363.0 i/s
      begin...rescue:   731062.6 i/s - 8.26x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   244.745k i/100ms
             &method    87.401k i/100ms
Calculating -------------------------------------
              normal      2.449M (± 0.1%) i/s -     12.482M in   5.097765s
             &method    870.600k (± 0.4%) i/s -      4.370M in   5.019652s

Comparison:
              normal:  2448525.7 i/s
             &method:   870600.3 i/s - 2.81x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       187.000  i/100ms
       define_method   238.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.027k (±19.1%) i/s -      9.724k in   5.374003s
       define_method      2.590k (±16.9%) i/s -     12.138k in   5.064599s

Comparison:
       define_method:     2590.2 i/s
module_eval with string:     2026.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   139.963k i/100ms
       Kernel#format   151.181k i/100ms
            String#%   132.668k i/100ms
Calculating -------------------------------------
         Float#round      1.393M (± 0.1%) i/s -      6.998M in   5.023361s
       Kernel#format      1.511M (± 0.2%) i/s -      7.559M in   5.003679s
            String#%      1.333M (± 0.3%) i/s -      6.766M in   5.074500s

Comparison:
       Kernel#format:  1510703.6 i/s
         Float#round:  1393122.1 i/s - 1.08x  (± 0.00) slower
            String#%:  1333362.4 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   678.474k i/100ms
          OpenStruct   364.032k i/100ms
Calculating -------------------------------------
                Hash      6.779M (± 0.3%) i/s -     33.924M in   5.004634s
          OpenStruct      3.641M (± 0.1%) i/s -     18.566M in   5.099283s

Comparison:
                Hash:  6778502.1 i/s
          OpenStruct:  3640834.8 i/s - 1.86x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   852.391k i/100ms
          OpenStruct     8.483k i/100ms
Calculating -------------------------------------
                Hash      9.092M (± 0.3%) i/s -     46.029M in   5.062780s
          OpenStruct     85.037k (± 2.4%) i/s -    432.633k in   5.090640s

Comparison:
                Hash:  9091733.5 i/s
          OpenStruct:    85036.8 i/s - 106.92x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   482.061k i/100ms
  ancestors.include?    98.453k i/100ms
Calculating -------------------------------------
  less than or equal      4.818M (± 0.1%) i/s -     24.103M in   5.002529s
  ancestors.include?    983.628k (± 0.2%) i/s -      4.923M in   5.004602s

Comparison:
  less than or equal:  4818182.7 i/s
  ancestors.include?:   983627.9 i/s - 4.90x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.461  (± 0.0%) i/s -      3.000  in   6.502441s
         Kernel loop      0.178  (± 0.0%) i/s -      1.000  in   5.618458s

Comparison:
          While Loop:        0.5 i/s
         Kernel loop:        0.2 i/s - 2.59x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.256M i/100ms
         Array#first     1.029M i/100ms
Calculating -------------------------------------
           Array#[0]     12.569M (± 0.1%) i/s -     64.071M in   5.097726s
         Array#first     10.304M (± 0.1%) i/s -     52.459M in   5.091037s

Comparison:
           Array#[0]: 12568619.6 i/s
         Array#first: 10304255.0 i/s - 1.22x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.185M i/100ms
          Array#last     1.041M i/100ms
Calculating -------------------------------------
          Array#[-1]     11.828M (± 0.3%) i/s -     59.274M in   5.011180s
          Array#last     10.414M (± 0.1%) i/s -     53.108M in   5.099605s

Comparison:
          Array#[-1]: 11828388.9 i/s
          Array#last: 10414112.6 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    74.578k i/100ms
Calculating -------------------------------------
                find      0.205  (± 0.0%) i/s -      2.000  in   9.756199s
             bsearch    745.735k (± 0.1%) i/s -      3.729M in   5.000301s

Comparison:
             bsearch:   745735.3 i/s
                find:        0.2 i/s - 3637771.05x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    13.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    132.987  (± 2.3%) i/s -    676.000  in   5.086231s
        Array#insert      1.150  (± 0.0%) i/s -      6.000  in   5.217702s

Comparison:
       Array#unshift:      133.0 i/s
        Array#insert:        1.1 i/s - 115.65x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.871M i/100ms
          Array#size     1.895M i/100ms
         Array#count     1.299M i/100ms
Calculating -------------------------------------
        Array#length     18.657M (± 0.5%) i/s -     93.541M in   5.013918s
          Array#size     18.979M (± 0.6%) i/s -     96.664M in   5.093386s
         Array#count     12.986M (± 0.1%) i/s -     64.940M in   5.000719s

Comparison:
          Array#size: 18979041.8 i/s
        Array#length: 18656838.1 i/s - 1.02x  (± 0.00) slower
         Array#count: 12986180.2 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    33.756k i/100ms
        Array#sample   787.474k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    336.971k (± 0.3%) i/s -      1.688M in   5.008790s
        Array#sample      7.875M (± 0.0%) i/s -     40.161M in   5.099702s

Comparison:
        Array#sample:  7875201.0 i/s
 Array#shuffle.first:   336971.4 i/s - 23.37x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    46.326k i/100ms
          Date.parse    23.831k i/100ms
Calculating -------------------------------------
        Date.iso8601    461.016k (± 0.6%) i/s -      2.316M in   5.024493s
          Date.parse    237.808k (± 0.5%) i/s -      1.192M in   5.010677s

Comparison:
        Date.iso8601:   461016.4 i/s
          Date.parse:   237808.3 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    14.231k i/100ms
           Array#map    20.189k i/100ms
Calculating -------------------------------------
   Array#each + push    142.194k (± 0.2%) i/s -    711.550k in   5.004091s
           Array#map    201.291k (± 0.2%) i/s -      1.009M in   5.014889s

Comparison:
           Array#map:   201291.1 i/s
   Array#each + push:   142194.3 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    22.015k i/100ms
               #each    24.381k i/100ms
Calculating -------------------------------------
            For loop    220.052k (± 0.3%) i/s -      1.101M in   5.002293s
               #each    243.862k (± 0.1%) i/s -      1.243M in   5.098911s

Comparison:
               #each:   243862.2 i/s
            For loop:   220051.6 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    24.540k i/100ms
     each_with_index    13.779k i/100ms
Calculating -------------------------------------
          While Loop    245.674k (± 0.1%) i/s -      1.252M in   5.094315s
     each_with_index    137.772k (± 0.2%) i/s -    688.950k in   5.000667s

Comparison:
          While Loop:   245674.1 i/s
     each_with_index:   137772.0 i/s - 1.78x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    71.739k i/100ms
      inject to_proc     1.605k i/100ms
        inject block     1.573k i/100ms
Calculating -------------------------------------
       inject symbol    717.227k (± 0.0%) i/s -      3.587M in   5.001137s
      inject to_proc     16.040k (± 0.1%) i/s -     80.250k in   5.003251s
        inject block     15.771k (± 0.3%) i/s -     80.223k in   5.086939s

Comparison:
       inject symbol:   717226.9 i/s
      inject to_proc:    16039.6 i/s - 44.72x  (± 0.00) slower
        inject block:    15770.5 i/s - 45.48x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     5.518k i/100ms
   Array#map.flatten     3.005k i/100ms
      Array#flat_map     7.085k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     55.097k (± 0.2%) i/s -    275.900k in   5.007581s
   Array#map.flatten     29.863k (± 0.5%) i/s -    150.250k in   5.031498s
      Array#flat_map     70.884k (± 0.1%) i/s -    361.335k in   5.097528s

Comparison:
      Array#flat_map:    70884.5 i/s
Array#map.flatten(1):    55096.6 i/s - 1.29x  (± 0.00) slower
   Array#map.flatten:    29862.7 i/s - 2.37x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    21.501k i/100ms
  Array#reverse_each    22.151k i/100ms
Calculating -------------------------------------
  Array#reverse.each    214.884k (± 0.1%) i/s -      1.075M in   5.002931s
  Array#reverse_each    220.797k (± 0.1%) i/s -      1.108M in   5.016143s

Comparison:
  Array#reverse_each:   220797.2 i/s
  Array#reverse.each:   214884.3 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        14.068k i/100ms
   Enumerable#detect    62.077k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        141.786k (± 0.1%) i/s -      2.842M in  20.042443s
   Enumerable#detect    620.396k (± 0.1%) i/s -     12.415M in  20.012086s

Comparison:
   Enumerable#detect:   620396.2 i/s
Enumerable#select.first:   141786.1 i/s - 4.38x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       179.124k i/100ms
Enumerable#select.last
                        13.908k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.761M (± 0.2%) i/s -      8.956M in   5.084511s
Enumerable#select.last
                        139.021k (± 0.2%) i/s -    695.400k in   5.002141s

Comparison:
Enumerable#reverse.detect:  1761477.1 i/s
Enumerable#select.last:   139021.0 i/s - 12.67x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.803k i/100ms
  Enumerable#sort_by     3.648k i/100ms
     Enumerable#sort     1.873k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         38.012k (± 0.2%) i/s -    190.150k in   5.002431s
  Enumerable#sort_by     36.543k (± 0.2%) i/s -    186.048k in   5.091268s
     Enumerable#sort     18.706k (± 0.2%) i/s -     93.650k in   5.006399s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    38011.7 i/s
  Enumerable#sort_by:    36542.7 i/s - 1.04x  (± 0.00) slower
     Enumerable#sort:    18706.2 i/s - 2.03x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    13.783k i/100ms
Enumerable#sort_by...first
                         6.458k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    137.714k (± 0.1%) i/s -    689.150k in   5.004205s
Enumerable#sort_by...first
                         65.798k (± 0.2%) i/s -    329.358k in   5.005583s

Comparison:
   Enumerable#min_by:   137714.3 i/s
Enumerable#sort_by...first:    65798.4 i/s - 2.09x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   293.079k i/100ms
            Hash#dup   228.052k i/100ms
Calculating -------------------------------------
              Hash[]      2.876M (± 1.2%) i/s -     14.654M in   5.095264s
            Hash#dup      1.992M (± 5.4%) i/s -     10.034M in   5.053466s

Comparison:
              Hash[]:  2876391.6 i/s
            Hash#dup:  1992309.4 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.172M i/100ms
  Hash#fetch, symbol   961.300k i/100ms
     Hash#[], string   920.085k i/100ms
  Hash#fetch, string   610.232k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     11.719M (± 0.2%) i/s -     58.619M in   5.002184s
  Hash#fetch, symbol      9.585M (± 0.0%) i/s -     48.065M in   5.014426s
     Hash#[], string      9.198M (± 0.1%) i/s -     46.004M in   5.001447s
  Hash#fetch, string      6.096M (± 0.1%) i/s -     30.512M in   5.005264s

Comparison:
     Hash#[], symbol: 11718733.4 i/s
  Hash#fetch, symbol:  9585346.8 i/s - 1.22x  (± 0.00) slower
     Hash#[], string:  9198195.4 i/s - 1.27x  (± 0.00) slower
  Hash#fetch, string:  6095905.9 i/s - 1.92x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   716.458k i/100ms
             Hash#[]   760.810k i/100ms
          Hash#[] ||   706.112k i/100ms
          Hash#[] &&   324.991k i/100ms
          Hash#fetch   508.528k i/100ms
 Hash#fetch fallback   308.115k i/100ms
Calculating -------------------------------------
            Hash#dig      7.207M (± 0.6%) i/s -     36.539M in   5.070333s
             Hash#[]      7.652M (± 0.5%) i/s -     38.801M in   5.070572s
          Hash#[] ||      6.162M (± 0.5%) i/s -     31.069M in   5.042553s
          Hash#[] &&      3.249M (± 0.4%) i/s -     16.250M in   5.001705s
          Hash#fetch      5.072M (± 0.4%) i/s -     25.426M in   5.013582s
 Hash#fetch fallback      3.073M (± 0.6%) i/s -     15.406M in   5.013482s

Comparison:
             Hash#[]:  7652429.3 i/s
            Hash#dig:  7206761.0 i/s - 1.06x  (± 0.00) slower
          Hash#[] ||:  6161527.2 i/s - 1.24x  (± 0.00) slower
          Hash#fetch:  5071586.3 i/s - 1.51x  (± 0.00) slower
          Hash#[] &&:  3248848.7 i/s - 2.36x  (± 0.00) slower
 Hash#fetch fallback:  3072961.1 i/s - 2.49x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.147M i/100ms
  Hash#fetch + block     1.115M i/100ms
    Hash#fetch + arg   839.506k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     11.447M (± 0.3%) i/s -     57.371M in   5.011856s
  Hash#fetch + block     11.152M (± 0.0%) i/s -     56.860M in   5.098635s
    Hash#fetch + arg      8.384M (± 0.1%) i/s -     41.975M in   5.006573s

Comparison:
  Hash#fetch + const: 11447154.8 i/s
  Hash#fetch + block: 11151937.6 i/s - 1.03x  (± 0.00) slower
    Hash#fetch + arg:  8384052.8 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    20.450k i/100ms
         sort + to_h     8.549k i/100ms
Calculating -------------------------------------
      sort_by + to_h    204.696k (± 0.9%) i/s -      1.043M in   5.095505s
         sort + to_h     85.480k (± 0.5%) i/s -    427.450k in   5.000725s

Comparison:
      sort_by + to_h:   204695.6 i/s
         sort + to_h:    85479.7 i/s - 2.39x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   149.921k i/100ms
       Hash#each_key   158.631k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.508M (± 0.1%) i/s -      7.646M in   5.070184s
       Hash#each_key      1.575M (± 0.1%) i/s -      7.932M in   5.035559s

Comparison:
       Hash#each_key:  1575108.5 i/s
      Hash#keys.each:  1508029.5 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.000k i/100ms
           Hash#key?   687.240k i/100ms
Calculating -------------------------------------
  Hash#keys.include?      9.689k (± 4.8%) i/s -     49.000k in   5.069527s
           Hash#key?      6.872M (± 0.1%) i/s -     34.362M in   5.000428s

Comparison:
           Hash#key?:  6871823.1 i/s
  Hash#keys.include?:     9689.2 i/s - 709.22x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     2.998k i/100ms
            Hash#[]=     7.440k i/100ms
Calculating -------------------------------------
         Hash#merge!     29.951k (± 0.3%) i/s -    149.900k in   5.004830s
            Hash#[]=     74.659k (± 0.4%) i/s -    379.440k in   5.082393s

Comparison:
            Hash#[]=:    74658.7 i/s
         Hash#merge!:    29951.4 i/s - 2.49x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.716k i/100ms
      Hash#merge({})     2.924k i/100ms
 Hash#dup#merge!({})     2.099k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         37.023k (± 0.1%) i/s -    185.800k in   5.018471s
      Hash#merge({})     29.015k (± 0.2%) i/s -    146.200k in   5.038845s
 Hash#dup#merge!({})     20.865k (± 1.4%) i/s -    104.950k in   5.031004s

Comparison:
{}#merge!(Hash) do end:    37023.3 i/s
      Hash#merge({}):    29014.7 i/s - 1.28x  (± 0.00) slower
 Hash#dup#merge!({}):    20864.8 i/s - 1.77x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   277.715k i/100ms
          Hash#merge   255.285k i/100ms
Calculating -------------------------------------
        Hash#**other      2.779M (± 0.5%) i/s -     14.163M in   5.097591s
          Hash#merge      2.489M (± 0.9%) i/s -     12.509M in   5.026577s

Comparison:
        Hash#**other:  2778545.8 i/s
          Hash#merge:  2488772.3 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.186k i/100ms
         Hash#merge!     2.970k i/100ms
Calculating -------------------------------------
          Hash#merge     11.594k (± 1.5%) i/s -     58.114k in   5.013330s
         Hash#merge!     30.067k (± 0.2%) i/s -    151.470k in   5.037750s

Comparison:
         Hash#merge!:    30067.1 i/s
          Hash#merge:    11594.5 i/s - 2.59x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      307.872k i/100ms
Array#each             168.809k i/100ms
Array#each_w/_object   120.806k i/100ms
Hash#select-include     56.058k i/100ms
Calculating -------------------------------------
Hash#native-slice         3.080M (± 0.3%) i/s -     15.701M in   5.098348s
Array#each                1.699M (± 0.2%) i/s -      8.609M in   5.068153s
Array#each_w/_object      1.199M (± 0.5%) i/s -      6.040M in   5.036389s
Hash#select-include     542.163k (± 2.0%) i/s -      2.747M in   5.068528s

Comparison:
Hash#native-slice   :  3079744.5 i/s
Array#each          :  1698704.2 i/s - 1.81x  (± 0.00) slower
Array#each_w/_object:  1199362.3 i/s - 2.57x  (± 0.00) slower
Hash#select-include :   542163.2 i/s - 5.68x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   909.000  i/100ms
         Hash#value?   808.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      8.954k (± 4.9%) i/s -     45.450k in   5.090670s
         Hash#value?      8.059k (± 1.4%) i/s -     40.400k in   5.013965s

Comparison:
Hash#values.include?:     8954.1 i/s
         Hash#value?:     8059.4 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   523.764k i/100ms
                send   340.002k i/100ms
      method_missing   266.168k i/100ms
Calculating -------------------------------------
                call      5.225M (± 0.7%) i/s -     26.188M in   5.012620s
                send      3.405M (± 0.3%) i/s -     17.340M in   5.092588s
      method_missing      2.656M (± 0.1%) i/s -     13.308M in   5.010032s

Comparison:
                call:  5224730.4 i/s
                send:  3404991.5 i/s - 1.53x  (± 0.00) slower
      method_missing:  2656354.7 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     6.711k i/100ms
      Symbol#to_proc     7.804k i/100ms
Calculating -------------------------------------
               Block     66.982k (± 0.8%) i/s -    335.550k in   5.009868s
      Symbol#to_proc     77.872k (± 0.3%) i/s -    390.200k in   5.010832s

Comparison:
      Symbol#to_proc:    77872.0 i/s
               Block:    66982.5 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   766.103k i/100ms
       block + yield   826.261k i/100ms
        unused block     1.028M i/100ms
               yield     1.014M i/100ms
Calculating -------------------------------------
          block.call      7.652M (± 0.1%) i/s -     38.305M in   5.005655s
       block + yield      8.257M (± 0.1%) i/s -     41.313M in   5.003441s
        unused block     10.266M (± 0.1%) i/s -     51.384M in   5.005143s
               yield     10.314M (± 0.4%) i/s -     51.717M in   5.014114s

Comparison:
               yield: 10314346.0 i/s
        unused block: 10266301.7 i/s - same-ish: difference falls within error
       block + yield:  8256943.0 i/s - 1.25x  (± 0.00) slower
          block.call:  7652381.2 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   242.580k i/100ms
      range#include?     9.346k i/100ms
       range#member?     9.321k i/100ms
       plain compare   357.892k i/100ms
Calculating -------------------------------------
        range#cover?      2.422M (± 0.1%) i/s -     12.129M in   5.006928s
      range#include?     94.356k (± 0.4%) i/s -    476.646k in   5.051644s
       range#member?     94.235k (± 0.4%) i/s -    475.371k in   5.044612s
       plain compare      3.570M (± 0.4%) i/s -     17.895M in   5.012929s

Comparison:
       plain compare:  3569748.1 i/s
        range#cover?:  2422445.3 i/s - 1.47x  (± 0.00) slower
      range#include?:    94356.2 i/s - 37.83x  (± 0.00) slower
       range#member?:    94235.1 i/s - 37.88x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   758.736k i/100ms
           String#=~   480.322k i/100ms
          Regexp#===   462.070k i/100ms
        String#match   344.499k i/100ms
Calculating -------------------------------------
       String#match?      7.587M (± 0.1%) i/s -     37.937M in   5.000348s
           String#=~      4.785M (± 2.3%) i/s -     24.016M in   5.022398s
          Regexp#===      4.633M (± 0.2%) i/s -     23.566M in   5.086257s
        String#match      3.436M (± 0.3%) i/s -     17.225M in   5.012491s

Comparison:
       String#match?:  7586835.2 i/s
           String#=~:  4784843.7 i/s - 1.59x  (± 0.00) slower
          Regexp#===:  4633200.4 i/s - 1.64x  (± 0.00) slower
        String#match:  3436430.1 i/s - 2.21x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   497.894k i/100ms
      String#casecmp   646.691k i/100ms
Calculating -------------------------------------
String#downcase + ==      4.978M (± 0.2%) i/s -     24.895M in   5.001103s
      String#casecmp      6.461M (± 0.1%) i/s -     32.335M in   5.004519s

Comparison:
      String#casecmp:  6461081.4 i/s
String#downcase + ==:  4977866.0 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   470.559k i/100ms
       String#concat   477.889k i/100ms
       String#append   513.452k i/100ms
         "foo" "bar"   999.757k i/100ms
  "#{'foo'}#{'bar'}"     1.005M i/100ms
Calculating -------------------------------------
            String#+      4.707M (± 0.4%) i/s -     23.999M in   5.099032s
       String#concat      4.766M (± 0.3%) i/s -     23.894M in   5.013493s
       String#append      5.136M (± 0.1%) i/s -     26.186M in   5.099027s
         "foo" "bar"      9.985M (± 0.2%) i/s -     49.988M in   5.006228s
  "#{'foo'}#{'bar'}"     10.049M (± 0.2%) i/s -     51.233M in   5.098353s

Comparison:
  "#{'foo'}#{'bar'}": 10048947.0 i/s
         "foo" "bar":  9985155.6 i/s - 1.01x  (± 0.00) slower
       String#append:  5135504.2 i/s - 1.96x  (± 0.00) slower
       String#concat:  4766076.5 i/s - 2.11x  (± 0.00) slower
            String#+:  4706554.5 i/s - 2.14x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@   794.550k i/100ms
          String#dup   440.899k i/100ms
Calculating -------------------------------------
           String#+@      7.860M (± 0.5%) i/s -     39.728M in   5.054847s
          String#dup      4.400M (± 0.4%) i/s -     22.045M in   5.010091s

Comparison:
           String#+@:  7859522.1 i/s
          String#dup:  4400169.1 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   143.648k i/100ms
       String#match?   332.484k i/100ms
    String#end_with?   481.417k i/100ms
Calculating -------------------------------------
           String#=~      1.434M (± 0.1%) i/s -      7.182M in   5.007511s
       String#match?      3.324M (± 0.2%) i/s -     16.624M in   5.001348s
    String#end_with?      4.814M (± 0.4%) i/s -     24.071M in   5.000569s

Comparison:
    String#end_with?:  4813703.8 i/s
       String#match?:  3323956.4 i/s - 1.45x  (± 0.00) slower
           String#=~:  1434328.1 i/s - 3.36x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    77.240k i/100ms
          String#sub    98.039k i/100ms
String#dup["string"]=
                       138.113k i/100ms
Calculating -------------------------------------
         String#gsub    763.021k (± 0.3%) i/s -      3.862M in   5.061507s
          String#sub    983.559k (± 1.4%) i/s -      5.000M in   5.084611s
String#dup["string"]=
                          1.364M (± 0.3%) i/s -      6.906M in   5.062359s

Comparison:
String#dup["string"]=:  1364130.7 i/s
          String#sub:   983559.3 i/s - 1.39x  (± 0.00) slower
         String#gsub:   763021.1 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    70.773k i/100ms
           String#tr   281.539k i/100ms
Calculating -------------------------------------
         String#gsub    718.390k (± 1.1%) i/s -      3.609M in   5.024990s
           String#tr      2.808M (± 0.5%) i/s -     14.077M in   5.013344s

Comparison:
           String#tr:  2807976.0 i/s
         String#gsub:   718389.6 i/s - 3.91x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   925.481k i/100ms
         With Freeze     1.404M i/100ms
Calculating -------------------------------------
      Without Freeze      9.263M (± 0.1%) i/s -     47.200M in   5.095546s
         With Freeze     14.062M (± 0.1%) i/s -     71.579M in   5.090194s

Comparison:
         With Freeze: 14062235.9 i/s
      Without Freeze:  9262908.6 i/s - 1.52x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.538k i/100ms
      String#squeeze   132.673k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     25.262k (± 0.4%) i/s -    126.900k in   5.023498s
      String#squeeze      1.325M (± 0.6%) i/s -      6.634M in   5.008041s

Comparison:
      String#squeeze:  1324652.9 i/s
 String#gsub/regex+/:    25261.8 i/s - 52.44x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   209.043k i/100ms
       String#match?   603.475k i/100ms
  String#start_with?   672.332k i/100ms
Calculating -------------------------------------
           String#=~      2.098M (± 0.2%) i/s -     10.661M in   5.081508s
       String#match?      6.029M (± 0.1%) i/s -     30.174M in   5.004908s
  String#start_with?      6.708M (± 0.2%) i/s -     33.617M in   5.011165s

Comparison:
  String#start_with?:  6708381.5 i/s
       String#match?:  6028835.7 i/s - 1.11x  (± 0.00) slower
           String#=~:  2098044.3 i/s - 3.20x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   184.395k i/100ms
    String#[0, n] ==    68.020k i/100ms
   String#[RANGE] ==    60.956k i/100ms
   String#[0...n] ==    35.496k i/100ms
Calculating -------------------------------------
  String#start_with?      1.845M (± 0.2%) i/s -      9.404M in   5.096834s
    String#[0, n] ==    679.079k (± 0.2%) i/s -      3.401M in   5.008265s
   String#[RANGE] ==    610.527k (± 0.2%) i/s -      3.109M in   5.091952s
   String#[0...n] ==    350.655k (± 0.2%) i/s -      1.775M in   5.061396s

Comparison:
  String#start_with?:  1845103.3 i/s
    String#[0, n] ==:   679079.2 i/s - 2.72x  (± 0.00) slower
   String#[RANGE] ==:   610527.2 i/s - 3.02x  (± 0.00) slower
   String#[0...n] ==:   350655.1 i/s - 5.26x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   128.755k i/100ms
 String#sub!'string'    90.876k i/100ms
String#gsub!'string'    56.740k i/100ms
  String#[/regexp/]=   119.644k i/100ms
 String#sub!/regexp/    94.286k i/100ms
String#gsub!/regexp/    44.872k i/100ms
Calculating -------------------------------------
  String#['string']=      1.329M (± 0.8%) i/s -      6.695M in   5.038274s
 String#sub!'string'    908.045k (± 0.7%) i/s -      4.544M in   5.004149s
String#gsub!'string'    574.074k (± 0.5%) i/s -      2.894M in   5.040839s
  String#[/regexp/]=      1.183M (± 1.3%) i/s -      5.982M in   5.055628s
 String#sub!/regexp/    923.260k (± 1.0%) i/s -      4.620M in   5.004494s
String#gsub!/regexp/    457.191k (± 0.7%) i/s -      2.288M in   5.005776s

Comparison:
  String#['string']=:  1328966.4 i/s
  String#[/regexp/]=:  1183482.3 i/s - 1.12x  (± 0.00) slower
 String#sub!/regexp/:   923260.4 i/s - 1.44x  (± 0.00) slower
 String#sub!'string':   908045.1 i/s - 1.46x  (± 0.00) slower
String#gsub!'string':   574073.6 i/s - 2.31x  (± 0.00) slower
String#gsub!/regexp/:   457190.7 i/s - 2.91x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   112.438k i/100ms
        String#chomp   425.405k i/100ms
String#delete_suffix   441.298k i/100ms
Calculating -------------------------------------
          String#sub      1.143M (± 0.7%) i/s -      5.734M in   5.018567s
        String#chomp      4.246M (± 0.2%) i/s -     21.270M in   5.010064s
String#delete_suffix      4.406M (± 0.1%) i/s -     22.065M in   5.008221s

Comparison:
String#delete_suffix:  4405742.3 i/s
        String#chomp:  4245525.1 i/s - 1.04x  (± 0.00) slower
          String#sub:  1142684.9 i/s - 3.86x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   476.171k i/100ms
          String#sub   116.657k i/100ms
Calculating -------------------------------------
String#delete_prefix      4.772M (± 0.3%) i/s -     24.285M in   5.089244s
          String#sub      1.162M (± 0.5%) i/s -      5.833M in   5.017984s

Comparison:
String#delete_prefix:  4771804.0 i/s
          String#sub:  1162417.6 i/s - 4.11x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   428.264k i/100ms
    String#unpack[0]   348.189k i/100ms
Calculating -------------------------------------
      String#unpack1      4.293M (± 1.0%) i/s -     21.841M in   5.088684s
    String#unpack[0]      3.497M (± 0.1%) i/s -     17.758M in   5.078026s

Comparison:
      String#unpack1:  4292572.3 i/s
    String#unpack[0]:  3496959.9 i/s - 1.23x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    21.995k i/100ms
          Time.parse     7.439k i/100ms
Calculating -------------------------------------
        Time.iso8601    218.531k (± 0.6%) i/s -      1.100M in   5.032675s
          Time.parse     73.940k (± 0.5%) i/s -    371.950k in   5.030545s

Comparison:
        Time.iso8601:   218531.3 i/s
          Time.parse:    73940.5 i/s - 2.96x  (± 0.00) slower

