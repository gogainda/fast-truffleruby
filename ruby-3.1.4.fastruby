$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       766.189k i/100ms
Function with splat arguments
                        24.980k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.635M (± 2.2%) i/s -     38.309M in   5.020128s
Function with splat arguments
                        224.991k (± 6.7%) i/s -      1.124M in   5.022721s

Comparison:
Function with single Array argument:  7635475.5 i/s
Function with splat arguments:   224990.7 i/s - 33.94x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.009M i/100ms
Sequential Assignment
                       965.556k i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.040M (± 0.5%) i/s -     50.452M in   5.024956s
Sequential Assignment
                         10.071M (± 1.3%) i/s -     51.174M in   5.082060s

Comparison:
Sequential Assignment: 10071327.9 i/s
 Parallel Assignment: 10040435.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   477.983k i/100ms
       attr_accessor   556.546k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.770M (± 0.5%) i/s -     23.899M in   5.010338s
       attr_accessor      5.584M (± 0.5%) i/s -     28.384M in   5.083514s

Comparison:
       attr_accessor:  5583639.7 i/s
   getter_and_setter:  4770099.5 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    88.651k i/100ms
         respond_to?   764.350k i/100ms
Calculating -------------------------------------
      begin...rescue    897.509k (± 0.8%) i/s -      4.521M in   5.037795s
         respond_to?      7.639M (± 0.3%) i/s -     38.218M in   5.003296s

Comparison:
         respond_to?:  7638539.3 i/s
      begin...rescue:   897509.1 i/s - 8.51x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   295.259k i/100ms
             &method   119.793k i/100ms
Calculating -------------------------------------
              normal      2.990M (± 0.5%) i/s -     15.058M in   5.035715s
             &method      1.197M (± 0.8%) i/s -      5.990M in   5.003763s

Comparison:
              normal:  2990348.1 i/s
             &method:  1197109.1 i/s - 2.50x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       249.000  i/100ms
       define_method   331.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.247k (±22.4%) i/s -      9.960k in   5.019748s
       define_method      3.144k (±17.7%) i/s -     14.564k in   5.061838s

Comparison:
       define_method:     3144.1 i/s
module_eval with string:     2247.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   259.032k i/100ms
       Kernel#format   207.599k i/100ms
            String#%   178.709k i/100ms
Calculating -------------------------------------
         Float#round      2.640M (± 0.5%) i/s -     13.211M in   5.004101s
       Kernel#format      2.080M (± 0.5%) i/s -     10.588M in   5.091463s
            String#%      1.783M (± 0.1%) i/s -      8.935M in   5.011256s

Comparison:
         Float#round:  2640019.1 i/s
       Kernel#format:  2079533.6 i/s - 1.27x  (± 0.00) slower
            String#%:  1783079.7 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   904.692k i/100ms
          OpenStruct   493.963k i/100ms
Calculating -------------------------------------
                Hash      9.027M (± 1.0%) i/s -     45.235M in   5.011690s
          OpenStruct      4.952M (± 0.4%) i/s -     25.192M in   5.087398s

Comparison:
                Hash:  9026666.3 i/s
          OpenStruct:  4951929.7 i/s - 1.82x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.081M i/100ms
          OpenStruct    11.227k i/100ms
Calculating -------------------------------------
                Hash     11.490M (± 0.3%) i/s -     58.383M in   5.081440s
          OpenStruct    113.550k (± 2.4%) i/s -    572.577k in   5.045262s

Comparison:
                Hash: 11489625.7 i/s
          OpenStruct:   113550.2 i/s - 101.19x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   581.298k i/100ms
  ancestors.include?   123.393k i/100ms
Calculating -------------------------------------
  less than or equal      5.783M (± 0.8%) i/s -     29.065M in   5.026148s
  ancestors.include?      1.232M (± 0.7%) i/s -      6.170M in   5.006189s

Comparison:
  less than or equal:  5783084.7 i/s
  ancestors.include?:  1232459.2 i/s - 4.69x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.728  (± 0.0%) i/s -      4.000  in   5.535394s
         Kernel loop      0.214  (± 0.0%) i/s -      2.000  in   9.335037s

Comparison:
          While Loop:        0.7 i/s
         Kernel loop:        0.2 i/s - 3.40x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.532M i/100ms
         Array#first     1.299M i/100ms
Calculating -------------------------------------
           Array#[0]     15.319M (± 0.3%) i/s -     76.596M in   5.000063s
         Array#first     13.181M (± 0.3%) i/s -     66.236M in   5.025128s

Comparison:
           Array#[0]: 15319223.4 i/s
         Array#first: 13181031.2 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.558M i/100ms
          Array#last     1.274M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.585M (± 0.3%) i/s -     79.472M in   5.099379s
          Array#last     12.805M (± 0.2%) i/s -     64.976M in   5.074329s

Comparison:
          Array#[-1]: 15584775.2 i/s
          Array#last: 12804954.9 i/s - 1.22x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    96.889k i/100ms
Calculating -------------------------------------
                find      0.258  (± 0.0%) i/s -      2.000  in   7.746267s
             bsearch    965.604k (± 1.4%) i/s -      4.844M in   5.018075s

Comparison:
             bsearch:   965603.7 i/s
                find:        0.3 i/s - 3739911.82x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    18.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    190.343  (± 2.1%) i/s -    954.000  in   5.014512s
        Array#insert      1.436  (± 0.0%) i/s -      8.000  in   5.571367s

Comparison:
       Array#unshift:      190.3 i/s
        Array#insert:        1.4 i/s - 132.56x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.138M i/100ms
          Array#size     2.114M i/100ms
         Array#count     1.647M i/100ms
Calculating -------------------------------------
        Array#length     21.260M (± 0.5%) i/s -    106.892M in   5.028098s
          Array#size     21.146M (± 0.5%) i/s -    107.820M in   5.098965s
         Array#count     16.451M (± 0.4%) i/s -     82.354M in   5.006150s

Comparison:
        Array#length: 21259614.3 i/s
          Array#size: 21145924.6 i/s - same-ish: difference falls within error
         Array#count: 16450776.9 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.404k i/100ms
        Array#sample     1.040M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    454.765k (± 0.5%) i/s -      2.316M in   5.092006s
        Array#sample     10.383M (± 0.5%) i/s -     51.992M in   5.007365s

Comparison:
        Array#sample: 10383393.1 i/s
 Array#shuffle.first:   454764.8 i/s - 22.83x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    64.075k i/100ms
          Date.parse    32.575k i/100ms
Calculating -------------------------------------
        Date.iso8601    640.181k (± 0.5%) i/s -      3.204M in   5.004552s
          Date.parse    324.816k (± 0.5%) i/s -      1.629M in   5.014501s

Comparison:
        Date.iso8601:   640180.7 i/s
          Date.parse:   324815.8 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.561k i/100ms
           Array#map    25.617k i/100ms
Calculating -------------------------------------
   Array#each + push    185.953k (± 0.5%) i/s -    946.611k in   5.090730s
           Array#map    256.273k (± 0.6%) i/s -      1.306M in   5.098150s

Comparison:
           Array#map:   256272.7 i/s
   Array#each + push:   185952.9 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    28.848k i/100ms
               #each    31.007k i/100ms
Calculating -------------------------------------
            For loop    288.462k (± 0.3%) i/s -      1.442M in   5.000354s
               #each    310.281k (± 0.3%) i/s -      1.581M in   5.096568s

Comparison:
               #each:   310281.1 i/s
            For loop:   288461.8 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    28.154k i/100ms
     each_with_index    18.717k i/100ms
Calculating -------------------------------------
          While Loop    274.651k (± 1.0%) i/s -      1.380M in   5.023375s
     each_with_index    187.470k (± 0.2%) i/s -    954.567k in   5.091851s

Comparison:
          While Loop:   274651.3 i/s
     each_with_index:   187470.0 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol   123.914k i/100ms
      inject to_proc     1.765k i/100ms
        inject block     2.003k i/100ms
Calculating -------------------------------------
       inject symbol      1.240M (± 1.3%) i/s -      6.320M in   5.098463s
      inject to_proc     17.655k (± 0.4%) i/s -     90.015k in   5.098669s
        inject block     19.891k (± 3.2%) i/s -    100.150k in   5.040759s

Comparison:
       inject symbol:  1239734.3 i/s
        inject block:    19891.1 i/s - 62.33x  (± 0.00) slower
      inject to_proc:    17654.9 i/s - 70.22x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.985k i/100ms
   Array#map.flatten     4.171k i/100ms
      Array#flat_map     8.914k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     69.858k (± 0.5%) i/s -    356.235k in   5.099535s
   Array#map.flatten     41.652k (± 0.8%) i/s -    208.550k in   5.007218s
      Array#flat_map     89.851k (± 0.6%) i/s -    454.614k in   5.059838s

Comparison:
      Array#flat_map:    89850.6 i/s
Array#map.flatten(1):    69858.0 i/s - 1.29x  (± 0.00) slower
   Array#map.flatten:    41652.5 i/s - 2.16x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    30.477k i/100ms
  Array#reverse_each    31.563k i/100ms
Calculating -------------------------------------
  Array#reverse.each    304.207k (± 0.7%) i/s -      1.524M in   5.009480s
  Array#reverse_each    315.056k (± 0.4%) i/s -      1.578M in   5.009189s

Comparison:
  Array#reverse_each:   315056.4 i/s
  Array#reverse.each:   304207.3 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.090k i/100ms
   Enumerable#detect    83.554k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        200.598k (± 0.4%) i/s -      4.018M in  20.030413s
   Enumerable#detect    831.612k (± 0.4%) i/s -     16.711M in  20.094836s

Comparison:
   Enumerable#detect:   831611.9 i/s
Enumerable#select.first:   200597.5 i/s - 4.15x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       241.491k i/100ms
Enumerable#select.last
                        18.411k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.429M (± 0.7%) i/s -     12.316M in   5.071590s
Enumerable#select.last
                        184.292k (± 0.5%) i/s -    938.961k in   5.095078s

Comparison:
Enumerable#reverse.detect:  2428561.2 i/s
Enumerable#select.last:   184291.8 i/s - 13.18x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         5.197k i/100ms
  Enumerable#sort_by     5.118k i/100ms
     Enumerable#sort     2.380k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         51.513k (± 2.1%) i/s -    259.850k in   5.046709s
  Enumerable#sort_by     49.984k (± 1.4%) i/s -    250.782k in   5.018322s
     Enumerable#sort     23.693k (± 0.8%) i/s -    119.000k in   5.022857s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    51513.4 i/s
  Enumerable#sort_by:    49983.7 i/s - same-ish: difference falls within error
     Enumerable#sort:    23693.1 i/s - 2.17x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.428k i/100ms
Enumerable#sort_by...first
                         8.802k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    174.385k (± 0.3%) i/s -    888.828k in   5.096983s
Enumerable#sort_by...first
                         88.085k (± 0.9%) i/s -    448.902k in   5.096700s

Comparison:
   Enumerable#min_by:   174385.0 i/s
Enumerable#sort_by...first:    88085.0 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   413.760k i/100ms
            Hash#dup   319.422k i/100ms
Calculating -------------------------------------
              Hash[]      4.097M (± 2.3%) i/s -     20.688M in   5.052430s
            Hash#dup      3.039M (± 0.7%) i/s -     15.332M in   5.045589s

Comparison:
              Hash[]:  4096670.3 i/s
            Hash#dup:  3038890.1 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.441M i/100ms
  Hash#fetch, symbol     1.181M i/100ms
     Hash#[], string     1.231M i/100ms
  Hash#fetch, string   789.676k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.294M (± 0.2%) i/s -     72.040M in   5.040035s
  Hash#fetch, symbol     11.771M (± 0.2%) i/s -     59.050M in   5.016591s
     Hash#[], string     12.350M (± 0.5%) i/s -     62.761M in   5.082067s
  Hash#fetch, string      7.904M (± 0.4%) i/s -     40.273M in   5.095543s

Comparison:
     Hash#[], symbol: 14293657.6 i/s
     Hash#[], string: 12349765.2 i/s - 1.16x  (± 0.00) slower
  Hash#fetch, symbol: 11770941.8 i/s - 1.21x  (± 0.00) slower
  Hash#fetch, string:  7903824.2 i/s - 1.81x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   887.097k i/100ms
             Hash#[]     1.004M i/100ms
          Hash#[] ||   888.747k i/100ms
          Hash#[] &&   387.376k i/100ms
          Hash#fetch   594.188k i/100ms
 Hash#fetch fallback   378.638k i/100ms
Calculating -------------------------------------
            Hash#dig      9.070M (± 1.1%) i/s -     46.129M in   5.086255s
             Hash#[]     10.616M (± 0.5%) i/s -     53.229M in   5.014045s
          Hash#[] ||      9.389M (± 0.6%) i/s -     47.104M in   5.017247s
          Hash#[] &&      4.128M (± 1.6%) i/s -     20.918M in   5.068683s
          Hash#fetch      5.991M (± 0.5%) i/s -     30.304M in   5.058022s
 Hash#fetch fallback      3.870M (± 2.9%) i/s -     19.689M in   5.092225s

Comparison:
             Hash#[]: 10616209.2 i/s
          Hash#[] ||:  9388730.7 i/s - 1.13x  (± 0.00) slower
            Hash#dig:  9070405.2 i/s - 1.17x  (± 0.00) slower
          Hash#fetch:  5991329.0 i/s - 1.77x  (± 0.00) slower
          Hash#[] &&:  4127959.0 i/s - 2.57x  (± 0.00) slower
 Hash#fetch fallback:  3870138.7 i/s - 2.74x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.456M i/100ms
  Hash#fetch + block     1.460M i/100ms
    Hash#fetch + arg     1.096M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.448M (± 0.2%) i/s -     72.823M in   5.040304s
  Hash#fetch + block     14.310M (± 0.2%) i/s -     72.998M in   5.101184s
    Hash#fetch + arg     10.933M (± 0.2%) i/s -     54.815M in   5.013834s

Comparison:
  Hash#fetch + const: 14448132.6 i/s
  Hash#fetch + block: 14310116.1 i/s - 1.01x  (± 0.00) slower
    Hash#fetch + arg: 10932876.7 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    28.201k i/100ms
         sort + to_h    12.401k i/100ms
Calculating -------------------------------------
      sort_by + to_h    280.313k (± 1.1%) i/s -      1.410M in   5.030967s
         sort + to_h    125.271k (± 1.7%) i/s -    632.451k in   5.050196s

Comparison:
      sort_by + to_h:   280312.7 i/s
         sort + to_h:   125271.4 i/s - 2.24x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   197.352k i/100ms
       Hash#each_key   194.215k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.901M (± 0.7%) i/s -      9.670M in   5.086847s
       Hash#each_key      1.933M (± 0.7%) i/s -      9.711M in   5.022778s

Comparison:
       Hash#each_key:  1933448.8 i/s
      Hash#keys.each:  1901118.9 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?    14.812k i/100ms
           Hash#key?   932.330k i/100ms
Calculating -------------------------------------
  Hash#keys.include?    146.235k (± 8.1%) i/s -    725.788k in   5.028052s
           Hash#key?      9.310M (± 0.4%) i/s -     46.616M in   5.007383s

Comparison:
           Hash#key?:  9309735.5 i/s
  Hash#keys.include?:   146235.5 i/s - 63.66x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.128k i/100ms
            Hash#[]=    10.237k i/100ms
Calculating -------------------------------------
         Hash#merge!     41.249k (± 0.4%) i/s -    206.400k in   5.003811s
            Hash#[]=    102.434k (± 1.0%) i/s -    522.087k in   5.097277s

Comparison:
            Hash#[]=:   102434.0 i/s
         Hash#merge!:    41249.3 i/s - 2.48x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         5.216k i/100ms
      Hash#merge({})     4.159k i/100ms
 Hash#dup#merge!({})     2.736k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         52.228k (± 0.2%) i/s -    266.016k in   5.093368s
      Hash#merge({})     41.884k (± 1.0%) i/s -    212.109k in   5.064778s
 Hash#dup#merge!({})     27.365k (± 0.4%) i/s -    139.536k in   5.099077s

Comparison:
{}#merge!(Hash) do end:    52228.1 i/s
      Hash#merge({}):    41884.1 i/s - 1.25x  (± 0.00) slower
 Hash#dup#merge!({}):    27365.3 i/s - 1.91x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   388.439k i/100ms
          Hash#merge   368.817k i/100ms
Calculating -------------------------------------
        Hash#**other      3.877M (± 0.3%) i/s -     19.422M in   5.009766s
          Hash#merge      3.632M (± 4.0%) i/s -     18.441M in   5.088661s

Comparison:
        Hash#**other:  3876845.6 i/s
          Hash#merge:  3631739.9 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.699k i/100ms
         Hash#merge!     4.063k i/100ms
Calculating -------------------------------------
          Hash#merge     16.612k (± 0.7%) i/s -     83.251k in   5.011697s
         Hash#merge!     40.483k (± 0.2%) i/s -    203.150k in   5.018184s

Comparison:
         Hash#merge!:    40483.0 i/s
          Hash#merge:    16612.3 i/s - 2.44x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      426.035k i/100ms
Array#each             231.556k i/100ms
Array#each_w/_object   174.110k i/100ms
Hash#select-include     78.020k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.323M (± 0.6%) i/s -     21.728M in   5.026503s
Array#each                2.341M (± 0.5%) i/s -     11.809M in   5.045233s
Array#each_w/_object      1.758M (± 0.9%) i/s -      8.880M in   5.051612s
Hash#select-include     769.615k (± 1.0%) i/s -      3.901M in   5.069295s

Comparison:
Hash#native-slice   :  4322814.4 i/s
Array#each          :  2340763.9 i/s - 1.85x  (± 0.00) slower
Array#each_w/_object:  1757906.0 i/s - 2.46x  (± 0.00) slower
Hash#select-include :   769614.8 i/s - 5.62x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.110k i/100ms
         Hash#value?   845.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     10.816k (± 4.2%) i/s -     54.390k in   5.038138s
         Hash#value?      8.237k (± 1.5%) i/s -     41.405k in   5.027875s

Comparison:
Hash#values.include?:    10815.9 i/s
         Hash#value?:     8236.9 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   662.808k i/100ms
                send   475.875k i/100ms
      method_missing   385.291k i/100ms
Calculating -------------------------------------
                call      6.651M (± 0.1%) i/s -     33.803M in   5.082178s
                send      4.735M (± 0.3%) i/s -     23.794M in   5.024849s
      method_missing      3.839M (± 0.5%) i/s -     19.265M in   5.018800s

Comparison:
                call:  6651337.1 i/s
                send:  4735274.9 i/s - 1.40x  (± 0.00) slower
      method_missing:  3838565.2 i/s - 1.73x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     8.752k i/100ms
      Symbol#to_proc     9.324k i/100ms
Calculating -------------------------------------
               Block     86.996k (± 0.6%) i/s -    437.600k in   5.030311s
      Symbol#to_proc     92.179k (± 0.2%) i/s -    466.200k in   5.057563s

Comparison:
      Symbol#to_proc:    92179.1 i/s
               Block:    86995.6 i/s - 1.06x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   936.379k i/100ms
       block + yield   978.454k i/100ms
        unused block     1.295M i/100ms
               yield     1.155M i/100ms
Calculating -------------------------------------
          block.call      9.301M (± 4.3%) i/s -     46.819M in   5.046833s
       block + yield      9.785M (± 0.3%) i/s -     48.923M in   5.000037s
        unused block     12.989M (± 0.2%) i/s -     66.031M in   5.083536s
               yield     11.584M (± 0.2%) i/s -     58.915M in   5.085989s

Comparison:
        unused block: 12989177.4 i/s
               yield: 11583806.3 i/s - 1.12x  (± 0.00) slower
       block + yield:  9784570.3 i/s - 1.33x  (± 0.00) slower
          block.call:  9300852.1 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   312.787k i/100ms
      range#include?    12.615k i/100ms
       range#member?    12.982k i/100ms
       plain compare   534.458k i/100ms
Calculating -------------------------------------
        range#cover?      3.163M (± 0.9%) i/s -     15.952M in   5.044323s
      range#include?    129.607k (± 0.3%) i/s -    655.980k in   5.061363s
       range#member?    129.068k (± 0.5%) i/s -    649.100k in   5.029262s
       plain compare      5.281M (± 0.4%) i/s -     26.723M in   5.059905s

Comparison:
       plain compare:  5281400.8 i/s
        range#cover?:  3162674.8 i/s - 1.67x  (± 0.00) slower
      range#include?:   129607.0 i/s - 40.75x  (± 0.00) slower
       range#member?:   129068.2 i/s - 40.92x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   941.316k i/100ms
           String#=~   655.895k i/100ms
          Regexp#===   592.670k i/100ms
        String#match   486.881k i/100ms
Calculating -------------------------------------
       String#match?      9.450M (± 1.0%) i/s -     48.007M in   5.080478s
           String#=~      6.623M (± 0.4%) i/s -     33.451M in   5.050677s
          Regexp#===      5.931M (± 0.3%) i/s -     30.226M in   5.096126s
        String#match      4.897M (± 0.3%) i/s -     24.831M in   5.070226s

Comparison:
       String#match?:  9450267.8 i/s
           String#=~:  6623102.5 i/s - 1.43x  (± 0.00) slower
          Regexp#===:  5931262.2 i/s - 1.59x  (± 0.00) slower
        String#match:  4897436.7 i/s - 1.93x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   640.524k i/100ms
      String#casecmp   800.448k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.402M (± 0.4%) i/s -     32.026M in   5.002609s
      String#casecmp      7.968M (± 0.9%) i/s -     40.022M in   5.023411s

Comparison:
      String#casecmp:  7967876.1 i/s
String#downcase + ==:  6402027.0 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   583.181k i/100ms
       String#concat   599.464k i/100ms
       String#append   649.572k i/100ms
         "foo" "bar"     1.170M i/100ms
  "#{'foo'}#{'bar'}"     1.146M i/100ms
Calculating -------------------------------------
            String#+      5.869M (± 0.2%) i/s -     29.742M in   5.067370s
       String#concat      6.002M (± 0.2%) i/s -     30.573M in   5.093399s
       String#append      6.349M (± 1.3%) i/s -     31.829M in   5.014266s
         "foo" "bar"     11.695M (± 0.3%) i/s -     58.504M in   5.002576s
  "#{'foo'}#{'bar'}"     11.705M (± 0.4%) i/s -     59.597M in   5.091754s

Comparison:
  "#{'foo'}#{'bar'}": 11704793.6 i/s
         "foo" "bar": 11694987.5 i/s - same-ish: difference falls within error
       String#append:  6348820.1 i/s - 1.84x  (± 0.00) slower
       String#concat:  6002430.3 i/s - 1.95x  (± 0.00) slower
            String#+:  5869389.6 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@     1.003M i/100ms
          String#dup   574.038k i/100ms
Calculating -------------------------------------
           String#+@      9.992M (± 0.4%) i/s -     50.130M in   5.017257s
          String#dup      5.699M (± 0.7%) i/s -     28.702M in   5.036529s

Comparison:
           String#+@:  9991716.0 i/s
          String#dup:  5699010.9 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   174.963k i/100ms
       String#match?   385.367k i/100ms
    String#end_with?   606.138k i/100ms
Calculating -------------------------------------
           String#=~      1.764M (± 0.5%) i/s -      8.923M in   5.059896s
       String#match?      3.840M (± 0.5%) i/s -     19.268M in   5.018396s
    String#end_with?      6.038M (± 0.9%) i/s -     30.307M in   5.019679s

Comparison:
    String#end_with?:  6038094.6 i/s
       String#match?:  3839638.8 i/s - 1.57x  (± 0.00) slower
           String#=~:  1763540.3 i/s - 3.42x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   107.487k i/100ms
          String#sub   131.731k i/100ms
String#dup["string"]=
                       176.015k i/100ms
Calculating -------------------------------------
         String#gsub      1.094M (± 0.5%) i/s -      5.482M in   5.011617s
          String#sub      1.352M (± 0.6%) i/s -      6.850M in   5.065355s
String#dup["string"]=
                          1.761M (± 0.7%) i/s -      8.977M in   5.098178s

Comparison:
String#dup["string"]=:  1760858.1 i/s
          String#sub:  1352367.5 i/s - 1.30x  (± 0.00) slower
         String#gsub:  1093854.4 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    98.662k i/100ms
           String#tr   355.635k i/100ms
Calculating -------------------------------------
         String#gsub    989.062k (± 0.4%) i/s -      5.032M in   5.087502s
           String#tr      3.574M (± 0.5%) i/s -     18.137M in   5.075384s

Comparison:
           String#tr:  3573692.8 i/s
         String#gsub:   989062.3 i/s - 3.61x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.149M i/100ms
         With Freeze     1.662M i/100ms
Calculating -------------------------------------
      Without Freeze     11.493M (± 0.5%) i/s -     57.468M in   5.000365s
         With Freeze     16.652M (± 0.4%) i/s -     84.771M in   5.090778s

Comparison:
         With Freeze: 16652161.3 i/s
      Without Freeze: 11493005.1 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.328k i/100ms
      String#squeeze   153.343k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     33.508k (± 0.4%) i/s -    169.728k in   5.065401s
      String#squeeze      1.543M (± 0.7%) i/s -      7.820M in   5.067698s

Comparison:
      String#squeeze:  1543282.5 i/s
 String#gsub/regex+/:    33507.9 i/s - 46.06x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   255.273k i/100ms
       String#match?   638.138k i/100ms
  String#start_with?   848.276k i/100ms
Calculating -------------------------------------
           String#=~      2.547M (± 0.6%) i/s -     12.764M in   5.011694s
       String#match?      6.423M (± 0.2%) i/s -     32.545M in   5.067051s
  String#start_with?      8.480M (± 0.5%) i/s -     42.414M in   5.001929s

Comparison:
  String#start_with?:  8479677.3 i/s
       String#match?:  6422907.5 i/s - 1.32x  (± 0.00) slower
           String#=~:  2546864.0 i/s - 3.33x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   198.356k i/100ms
    String#[0, n] ==    86.240k i/100ms
   String#[RANGE] ==    76.654k i/100ms
   String#[0...n] ==    47.283k i/100ms
Calculating -------------------------------------
  String#start_with?      2.014M (± 1.6%) i/s -     10.116M in   5.024412s
    String#[0, n] ==    849.545k (± 0.9%) i/s -      4.312M in   5.076100s
   String#[RANGE] ==    758.864k (± 0.6%) i/s -      3.833M in   5.050738s
   String#[0...n] ==    474.761k (± 0.7%) i/s -      2.411M in   5.079522s

Comparison:
  String#start_with?:  2013925.1 i/s
    String#[0, n] ==:   849545.0 i/s - 2.37x  (± 0.00) slower
   String#[RANGE] ==:   758864.3 i/s - 2.65x  (± 0.00) slower
   String#[0...n] ==:   474761.1 i/s - 4.24x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   169.395k i/100ms
 String#sub!'string'   125.032k i/100ms
String#gsub!'string'    77.005k i/100ms
  String#[/regexp/]=   151.374k i/100ms
 String#sub!/regexp/   112.411k i/100ms
String#gsub!/regexp/    57.658k i/100ms
Calculating -------------------------------------
  String#['string']=      1.731M (± 0.7%) i/s -      8.809M in   5.089110s
 String#sub!'string'      1.248M (± 0.4%) i/s -      6.252M in   5.009121s
String#gsub!'string'    758.481k (± 3.0%) i/s -      3.850M in   5.081846s
  String#[/regexp/]=      1.501M (± 0.5%) i/s -      7.569M in   5.043637s
 String#sub!/regexp/      1.122M (± 0.6%) i/s -      5.621M in   5.007523s
String#gsub!/regexp/    591.732k (± 0.7%) i/s -      2.998M in   5.067131s

Comparison:
  String#['string']=:  1730943.6 i/s
  String#[/regexp/]=:  1500687.5 i/s - 1.15x  (± 0.00) slower
 String#sub!'string':  1248064.4 i/s - 1.39x  (± 0.00) slower
 String#sub!/regexp/:  1122467.3 i/s - 1.54x  (± 0.00) slower
String#gsub!'string':   758481.2 i/s - 2.28x  (± 0.00) slower
String#gsub!/regexp/:   591731.5 i/s - 2.93x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   133.891k i/100ms
        String#chomp   539.626k i/100ms
String#delete_suffix   592.109k i/100ms
Calculating -------------------------------------
          String#sub      1.327M (± 0.4%) i/s -      6.695M in   5.043488s
        String#chomp      5.415M (± 0.3%) i/s -     27.521M in   5.082318s
String#delete_suffix      5.860M (± 0.5%) i/s -     29.605M in   5.051873s

Comparison:
String#delete_suffix:  5860438.0 i/s
        String#chomp:  5415080.9 i/s - 1.08x  (± 0.00) slower
          String#sub:  1327389.1 i/s - 4.42x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   602.923k i/100ms
          String#sub   145.526k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.304M (± 0.6%) i/s -     31.955M in   5.069413s
          String#sub      1.453M (± 0.5%) i/s -      7.276M in   5.006753s

Comparison:
String#delete_prefix:  6303690.5 i/s
          String#sub:  1453338.5 i/s - 4.34x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   600.524k i/100ms
    String#unpack[0]   443.745k i/100ms
Calculating -------------------------------------
      String#unpack1      5.983M (± 0.4%) i/s -     30.026M in   5.018676s
    String#unpack[0]      4.428M (± 0.4%) i/s -     22.187M in   5.011086s

Comparison:
      String#unpack1:  5982983.2 i/s
    String#unpack[0]:  4427703.3 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.746k i/100ms
          Time.parse     9.391k i/100ms
Calculating -------------------------------------
        Time.iso8601    276.609k (± 1.4%) i/s -      1.387M in   5.016506s
          Time.parse     93.591k (± 0.9%) i/s -    469.550k in   5.017437s

Comparison:
        Time.iso8601:   276608.8 i/s
          Time.parse:    93591.2 i/s - 2.96x  (± 0.00) slower

