$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       578.757k i/100ms
Function with splat arguments
                        11.767k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          5.780M (± 0.1%) i/s -     28.938M in   5.006198s
Function with splat arguments
                        113.654k (± 7.0%) i/s -    564.816k in   5.002579s

Comparison:
Function with single Array argument:  5780406.6 i/s
Function with splat arguments:   113653.9 i/s - 50.86x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.011M i/100ms
Sequential Assignment
                         1.033M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.111M (± 0.4%) i/s -     51.562M in   5.099803s
Sequential Assignment
                         10.322M (± 0.1%) i/s -     51.627M in   5.001445s

Comparison:
Sequential Assignment: 10322394.9 i/s
 Parallel Assignment: 10110793.8 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   361.594k i/100ms
       attr_accessor   403.980k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.613M (± 0.5%) i/s -     18.080M in   5.004606s
       attr_accessor      4.038M (± 0.1%) i/s -     20.199M in   5.002452s

Comparison:
       attr_accessor:  4037824.1 i/s
   getter_and_setter:  3612700.5 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    72.606k i/100ms
         respond_to?   600.751k i/100ms
Calculating -------------------------------------
      begin...rescue    731.417k (± 0.6%) i/s -      3.703M in   5.062855s
         respond_to?      6.005M (± 0.1%) i/s -     30.038M in   5.001937s

Comparison:
         respond_to?:  6005187.3 i/s
      begin...rescue:   731417.5 i/s - 8.21x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   229.211k i/100ms
             &method    87.543k i/100ms
Calculating -------------------------------------
              normal      2.289M (± 0.1%) i/s -     11.461M in   5.005818s
             &method    873.114k (± 0.1%) i/s -      4.377M in   5.013270s

Comparison:
              normal:  2289448.0 i/s
             &method:   873113.5 i/s - 2.62x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       189.000  i/100ms
       define_method   225.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.917k (±19.6%) i/s -      8.505k in   5.034369s
       define_method      2.299k (±24.4%) i/s -      9.900k in   5.075134s

Comparison:
       define_method:     2298.6 i/s
module_eval with string:     1917.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   139.644k i/100ms
       Kernel#format   147.617k i/100ms
            String#%   132.171k i/100ms
Calculating -------------------------------------
         Float#round      1.395M (± 0.1%) i/s -      6.982M in   5.006026s
       Kernel#format      1.504M (± 0.1%) i/s -      7.528M in   5.007235s
            String#%      1.331M (± 0.6%) i/s -      6.741M in   5.063779s

Comparison:
       Kernel#format:  1503520.2 i/s
         Float#round:  1394759.7 i/s - 1.08x  (± 0.00) slower
            String#%:  1331213.7 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   676.655k i/100ms
          OpenStruct   358.214k i/100ms
Calculating -------------------------------------
                Hash      6.775M (± 0.1%) i/s -     34.509M in   5.093621s
          OpenStruct      3.581M (± 0.1%) i/s -     17.911M in   5.001357s

Comparison:
                Hash:  6775027.0 i/s
          OpenStruct:  3581169.8 i/s - 1.89x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   879.869k i/100ms
          OpenStruct     8.320k i/100ms
Calculating -------------------------------------
                Hash      9.490M (± 0.2%) i/s -     47.513M in   5.006534s
          OpenStruct     84.191k (± 2.7%) i/s -    424.320k in   5.043554s

Comparison:
                Hash:  9490209.3 i/s
          OpenStruct:    84191.3 i/s - 112.72x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   451.325k i/100ms
  ancestors.include?    86.737k i/100ms
Calculating -------------------------------------
  less than or equal      4.520M (± 0.1%) i/s -     23.018M in   5.092255s
  ancestors.include?    866.369k (± 0.1%) i/s -      4.337M in   5.005783s

Comparison:
  less than or equal:  4520115.8 i/s
  ancestors.include?:   866368.9 i/s - 5.22x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.595  (± 0.0%) i/s -      3.000  in   5.045346s
         Kernel loop      0.175  (± 0.0%) i/s -      1.000  in   5.711597s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 3.40x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.337M i/100ms
         Array#first     1.217M i/100ms
Calculating -------------------------------------
           Array#[0]     13.410M (± 1.0%) i/s -     68.192M in   5.085724s
         Array#first     12.159M (± 0.1%) i/s -     60.843M in   5.003872s

Comparison:
           Array#[0]: 13409924.0 i/s
         Array#first: 12159103.0 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.371M i/100ms
          Array#last     1.107M i/100ms
Calculating -------------------------------------
          Array#[-1]     13.709M (± 0.1%) i/s -     68.546M in   5.000091s
          Array#last     11.060M (± 0.4%) i/s -     55.330M in   5.002772s

Comparison:
          Array#[-1]: 13708855.7 i/s
          Array#last: 11059992.1 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    70.557k i/100ms
Calculating -------------------------------------
                find      0.203  (± 0.0%) i/s -      2.000  in   9.875021s
             bsearch    705.482k (± 0.0%) i/s -      3.528M in   5.000622s

Comparison:
             bsearch:   705482.4 i/s
                find:        0.2 i/s - 3483326.33x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    13.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    131.993  (± 2.3%) i/s -    663.000  in   5.025961s
        Array#insert      1.266  (± 0.0%) i/s -      7.000  in   5.548064s

Comparison:
       Array#unshift:      132.0 i/s
        Array#insert:        1.3 i/s - 104.25x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.833M i/100ms
          Array#size     1.859M i/100ms
         Array#count     1.392M i/100ms
Calculating -------------------------------------
        Array#length     18.295M (± 0.5%) i/s -     91.628M in   5.008358s
          Array#size     18.570M (± 0.4%) i/s -     92.927M in   5.004129s
         Array#count     13.946M (± 0.4%) i/s -     71.017M in   5.092563s

Comparison:
          Array#size: 18570233.1 i/s
        Array#length: 18295406.1 i/s - 1.02x  (± 0.00) slower
         Array#count: 13945501.3 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    33.298k i/100ms
        Array#sample   845.161k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    332.061k (± 0.8%) i/s -      1.665M in   5.014127s
        Array#sample      8.453M (± 0.0%) i/s -     43.103M in   5.099427s

Comparison:
        Array#sample:  8452559.8 i/s
 Array#shuffle.first:   332061.0 i/s - 25.45x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    49.159k i/100ms
          Date.parse    24.560k i/100ms
Calculating -------------------------------------
        Date.iso8601    491.687k (± 0.2%) i/s -      2.507M in   5.099006s
          Date.parse    248.189k (± 0.6%) i/s -      1.253M in   5.046984s

Comparison:
        Date.iso8601:   491687.3 i/s
          Date.parse:   248189.3 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    13.258k i/100ms
           Array#map    18.590k i/100ms
Calculating -------------------------------------
   Array#each + push    133.422k (± 0.3%) i/s -    676.158k in   5.067837s
           Array#map    186.422k (± 0.1%) i/s -    948.090k in   5.085718s

Comparison:
           Array#map:   186422.5 i/s
   Array#each + push:   133422.3 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    22.929k i/100ms
               #each    25.227k i/100ms
Calculating -------------------------------------
            For loop    229.616k (± 0.0%) i/s -      1.169M in   5.092762s
               #each    252.496k (± 0.4%) i/s -      1.287M in   5.095501s

Comparison:
               #each:   252496.0 i/s
            For loop:   229615.9 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    28.581k i/100ms
     each_with_index    14.495k i/100ms
Calculating -------------------------------------
          While Loop    284.222k (± 0.1%) i/s -      1.429M in   5.027933s
     each_with_index    145.299k (± 0.0%) i/s -    739.245k in   5.087734s

Comparison:
          While Loop:   284222.4 i/s
     each_with_index:   145299.5 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    82.511k i/100ms
      inject to_proc     1.461k i/100ms
        inject block     1.532k i/100ms
Calculating -------------------------------------
       inject symbol    825.465k (± 0.0%) i/s -      4.208M in   5.097810s
      inject to_proc     14.640k (± 0.2%) i/s -     74.511k in   5.089613s
        inject block     15.331k (± 0.1%) i/s -     78.132k in   5.096451s

Comparison:
       inject symbol:   825464.7 i/s
        inject block:    15330.7 i/s - 53.84x  (± 0.00) slower
      inject to_proc:    14639.9 i/s - 56.38x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     5.032k i/100ms
   Array#map.flatten     2.689k i/100ms
      Array#flat_map     6.501k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     50.517k (± 0.1%) i/s -    256.632k in   5.080086s
   Array#map.flatten     27.046k (± 1.1%) i/s -    137.139k in   5.071127s
      Array#flat_map     64.812k (± 0.4%) i/s -    325.050k in   5.015350s

Comparison:
      Array#flat_map:    64811.9 i/s
Array#map.flatten(1):    50517.3 i/s - 1.28x  (± 0.00) slower
   Array#map.flatten:    27046.2 i/s - 2.40x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    24.165k i/100ms
  Array#reverse_each    25.005k i/100ms
Calculating -------------------------------------
  Array#reverse.each    241.372k (± 0.3%) i/s -      1.208M in   5.005817s
  Array#reverse_each    250.056k (± 0.0%) i/s -      1.275M in   5.099878s

Comparison:
  Array#reverse_each:   250056.0 i/s
  Array#reverse.each:   241371.7 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        15.071k i/100ms
   Enumerable#detect    58.924k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        151.275k (± 0.5%) i/s -      3.029M in  20.025408s
   Enumerable#detect    589.045k (± 0.1%) i/s -     11.785M in  20.006623s

Comparison:
   Enumerable#detect:   589045.5 i/s
Enumerable#select.first:   151274.8 i/s - 3.89x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       169.414k i/100ms
Enumerable#select.last
                        12.456k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.697M (± 0.7%) i/s -      8.640M in   5.090991s
Enumerable#select.last
                        118.872k (± 0.4%) i/s -    597.888k in   5.029744s

Comparison:
Enumerable#reverse.detect:  1697225.6 i/s
Enumerable#select.last:   118872.4 i/s - 14.28x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.291k i/100ms
  Enumerable#sort_by     3.239k i/100ms
     Enumerable#sort     1.787k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         33.146k (± 0.5%) i/s -    167.841k in   5.063812s
  Enumerable#sort_by     32.668k (± 0.5%) i/s -    165.189k in   5.056748s
     Enumerable#sort     17.888k (± 0.2%) i/s -     91.137k in   5.095015s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    33146.0 i/s
  Enumerable#sort_by:    32667.8 i/s - 1.01x  (± 0.00) slower
     Enumerable#sort:    17887.6 i/s - 1.85x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    12.775k i/100ms
Enumerable#sort_by...first
                         6.208k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    127.777k (± 0.1%) i/s -    651.525k in   5.098910s
Enumerable#sort_by...first
                         61.288k (± 1.0%) i/s -    310.400k in   5.065102s

Comparison:
   Enumerable#min_by:   127777.3 i/s
Enumerable#sort_by...first:    61287.8 i/s - 2.08x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   276.130k i/100ms
            Hash#dup   214.489k i/100ms
Calculating -------------------------------------
              Hash[]      2.673M (± 2.6%) i/s -     13.530M in   5.064362s
            Hash#dup      2.029M (± 3.2%) i/s -     10.295M in   5.078549s

Comparison:
              Hash[]:  2673438.6 i/s
            Hash#dup:  2029240.5 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.229M i/100ms
  Hash#fetch, symbol   994.866k i/100ms
     Hash#[], string     1.070M i/100ms
  Hash#fetch, string   573.133k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     12.273M (± 0.2%) i/s -     61.436M in   5.005802s
  Hash#fetch, symbol      9.949M (± 0.1%) i/s -     49.743M in   4.999975s
     Hash#[], string     10.695M (± 0.0%) i/s -     53.497M in   5.002054s
  Hash#fetch, string      5.728M (± 0.1%) i/s -     28.657M in   5.002559s

Comparison:
     Hash#[], symbol: 12272929.1 i/s
     Hash#[], string: 10694980.2 i/s - 1.15x  (± 0.00) slower
  Hash#fetch, symbol:  9948718.2 i/s - 1.23x  (± 0.00) slower
  Hash#fetch, string:  5728401.0 i/s - 2.14x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   659.072k i/100ms
             Hash#[]   749.389k i/100ms
          Hash#[] ||   681.482k i/100ms
          Hash#[] &&   303.349k i/100ms
          Hash#fetch   466.843k i/100ms
 Hash#fetch fallback   273.476k i/100ms
Calculating -------------------------------------
            Hash#dig      6.587M (± 0.1%) i/s -     32.954M in   5.002906s
             Hash#[]      7.482M (± 0.3%) i/s -     37.469M in   5.007829s
          Hash#[] ||      6.812M (± 0.2%) i/s -     34.074M in   5.002047s
          Hash#[] &&      3.037M (± 0.1%) i/s -     15.471M in   5.093967s
          Hash#fetch      4.667M (± 0.1%) i/s -     23.342M in   5.002011s
 Hash#fetch fallback      2.734M (± 0.1%) i/s -     13.674M in   5.002175s

Comparison:
             Hash#[]:  7482266.9 i/s
          Hash#[] ||:  6812052.4 i/s - 1.10x  (± 0.00) slower
            Hash#dig:  6586903.2 i/s - 1.14x  (± 0.00) slower
          Hash#fetch:  4666563.3 i/s - 1.60x  (± 0.00) slower
          Hash#[] &&:  3037085.7 i/s - 2.46x  (± 0.00) slower
 Hash#fetch fallback:  2733572.5 i/s - 2.74x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.183M i/100ms
  Hash#fetch + block     1.122M i/100ms
    Hash#fetch + arg   809.926k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     11.852M (± 0.2%) i/s -     60.333M in   5.090490s
  Hash#fetch + block     11.211M (± 0.4%) i/s -     56.082M in   5.002665s
    Hash#fetch + arg      8.093M (± 0.1%) i/s -     40.496M in   5.004034s

Comparison:
  Hash#fetch + const: 11852075.4 i/s
  Hash#fetch + block: 11210541.7 i/s - 1.06x  (± 0.00) slower
    Hash#fetch + arg:  8092733.6 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    18.139k i/100ms
         sort + to_h     8.273k i/100ms
Calculating -------------------------------------
      sort_by + to_h    180.187k (± 0.9%) i/s -    906.950k in   5.033757s
         sort + to_h     82.488k (± 0.1%) i/s -    413.650k in   5.014681s

Comparison:
      sort_by + to_h:   180187.3 i/s
         sort + to_h:    82487.9 i/s - 2.18x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   130.805k i/100ms
       Hash#each_key   135.520k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.307M (± 0.3%) i/s -      6.540M in   5.004137s
       Hash#each_key      1.349M (± 0.1%) i/s -      6.776M in   5.021615s

Comparison:
       Hash#each_key:  1349367.0 i/s
      Hash#keys.each:  1306981.3 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   741.000  i/100ms
           Hash#key?   832.788k i/100ms
Calculating -------------------------------------
  Hash#keys.include?      7.335k (± 3.6%) i/s -     37.050k in   5.058795s
           Hash#key?      8.333M (± 0.2%) i/s -     42.472M in   5.097122s

Comparison:
           Hash#key?:  8332603.1 i/s
  Hash#keys.include?:     7334.8 i/s - 1136.03x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     2.851k i/100ms
            Hash#[]=     6.617k i/100ms
Calculating -------------------------------------
         Hash#merge!     28.486k (± 0.4%) i/s -    142.550k in   5.004369s
            Hash#[]=     66.542k (± 0.8%) i/s -    337.467k in   5.071817s

Comparison:
            Hash#[]=:    66542.0 i/s
         Hash#merge!:    28485.6 i/s - 2.34x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.559k i/100ms
      Hash#merge({})     2.824k i/100ms
 Hash#dup#merge!({})     2.074k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         35.374k (± 0.1%) i/s -    177.950k in   5.030475s
      Hash#merge({})     28.218k (± 0.1%) i/s -    141.200k in   5.003891s
 Hash#dup#merge!({})     20.759k (± 1.7%) i/s -    105.774k in   5.096804s

Comparison:
{}#merge!(Hash) do end:    35374.4 i/s
      Hash#merge({}):    28218.1 i/s - 1.25x  (± 0.00) slower
 Hash#dup#merge!({}):    20759.0 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   266.758k i/100ms
          Hash#merge   239.928k i/100ms
Calculating -------------------------------------
        Hash#**other      2.670M (± 0.1%) i/s -     13.605M in   5.094677s
          Hash#merge      2.399M (± 0.2%) i/s -     11.996M in   5.000881s

Comparison:
        Hash#**other:  2670369.9 i/s
          Hash#merge:  2398862.9 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.134k i/100ms
         Hash#merge!     2.806k i/100ms
Calculating -------------------------------------
          Hash#merge     11.287k (± 0.5%) i/s -     56.700k in   5.023696s
         Hash#merge!     28.077k (± 0.1%) i/s -    143.106k in   5.096886s

Comparison:
         Hash#merge!:    28077.2 i/s
          Hash#merge:    11286.8 i/s - 2.49x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      289.627k i/100ms
Array#each             156.382k i/100ms
Array#each_w/_object   112.929k i/100ms
Hash#select-include     52.470k i/100ms
Calculating -------------------------------------
Hash#native-slice         2.896M (± 0.1%) i/s -     14.481M in   5.000790s
Array#each                1.564M (± 0.2%) i/s -      7.819M in   5.001025s
Array#each_w/_object      1.126M (± 0.4%) i/s -      5.646M in   5.015701s
Hash#select-include     525.363k (± 0.2%) i/s -      2.676M in   5.093590s

Comparison:
Hash#native-slice   :  2895814.1 i/s
Array#each          :  1563505.3 i/s - 1.85x  (± 0.00) slower
Array#each_w/_object:  1125774.9 i/s - 2.57x  (± 0.00) slower
Hash#select-include :   525362.8 i/s - 5.51x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   733.000  i/100ms
         Hash#value?   631.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      7.245k (± 4.6%) i/s -     36.650k in   5.071681s
         Hash#value?      6.314k (± 0.1%) i/s -     32.181k in   5.097012s

Comparison:
Hash#values.include?:     7244.9 i/s
         Hash#value?:     6313.7 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   503.641k i/100ms
                send   348.772k i/100ms
      method_missing   262.093k i/100ms
Calculating -------------------------------------
                call      5.036M (± 0.0%) i/s -     25.182M in   5.000324s
                send      3.488M (± 0.4%) i/s -     17.439M in   5.000340s
      method_missing      2.622M (± 0.1%) i/s -     13.367M in   5.098810s

Comparison:
                call:  5036084.4 i/s
                send:  3487539.6 i/s - 1.44x  (± 0.00) slower
      method_missing:  2621542.4 i/s - 1.92x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     5.606k i/100ms
      Symbol#to_proc     6.000k i/100ms
Calculating -------------------------------------
               Block     56.071k (± 0.1%) i/s -    285.906k in   5.099044s
      Symbol#to_proc     59.901k (± 0.1%) i/s -    300.000k in   5.008274s

Comparison:
      Symbol#to_proc:    59900.9 i/s
               Block:    56070.6 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   761.450k i/100ms
       block + yield   813.930k i/100ms
        unused block     1.042M i/100ms
               yield     1.084M i/100ms
Calculating -------------------------------------
          block.call      7.620M (± 0.1%) i/s -     38.834M in   5.096595s
       block + yield      8.147M (± 0.0%) i/s -     41.510M in   5.095249s
        unused block     10.423M (± 0.3%) i/s -     53.116M in   5.096051s
               yield     10.825M (± 0.3%) i/s -     54.211M in   5.008043s

Comparison:
               yield: 10824818.1 i/s
        unused block: 10423152.3 i/s - 1.04x  (± 0.00) slower
       block + yield:  8146890.8 i/s - 1.33x  (± 0.00) slower
          block.call:  7619588.9 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   223.063k i/100ms
      range#include?     9.453k i/100ms
       range#member?     9.423k i/100ms
       plain compare   341.571k i/100ms
Calculating -------------------------------------
        range#cover?      2.230M (± 0.1%) i/s -     11.153M in   5.000345s
      range#include?     96.213k (± 1.0%) i/s -    482.103k in   5.011369s
       range#member?     96.386k (± 0.1%) i/s -    489.996k in   5.083699s
       plain compare      3.416M (± 0.1%) i/s -     17.420M in   5.099275s

Comparison:
       plain compare:  3416199.2 i/s
        range#cover?:  2230477.1 i/s - 1.53x  (± 0.00) slower
       range#member?:    96385.9 i/s - 35.44x  (± 0.00) slower
      range#include?:    96213.1 i/s - 35.51x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   720.783k i/100ms
           String#=~   439.754k i/100ms
          Regexp#===   414.480k i/100ms
        String#match   339.335k i/100ms
Calculating -------------------------------------
       String#match?      7.207M (± 0.0%) i/s -     36.039M in   5.000466s
           String#=~      4.404M (± 0.1%) i/s -     22.427M in   5.092858s
          Regexp#===      4.146M (± 0.1%) i/s -     21.138M in   5.098744s
        String#match      3.393M (± 0.1%) i/s -     16.967M in   5.000452s

Comparison:
       String#match?:  7207159.1 i/s
           String#=~:  4403711.2 i/s - 1.64x  (± 0.00) slower
          Regexp#===:  4145827.1 i/s - 1.74x  (± 0.00) slower
        String#match:  3393046.3 i/s - 2.12x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   446.696k i/100ms
      String#casecmp   594.877k i/100ms
Calculating -------------------------------------
String#downcase + ==      4.460M (± 0.3%) i/s -     22.335M in   5.008372s
      String#casecmp      5.945M (± 0.1%) i/s -     29.744M in   5.003227s

Comparison:
      String#casecmp:  5944937.9 i/s
String#downcase + ==:  4459533.3 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   409.687k i/100ms
       String#concat   434.974k i/100ms
       String#append   472.818k i/100ms
         "foo" "bar"   965.637k i/100ms
  "#{'foo'}#{'bar'}"   975.711k i/100ms
Calculating -------------------------------------
            String#+      4.094M (± 0.4%) i/s -     20.484M in   5.003967s
       String#concat      4.347M (± 0.1%) i/s -     21.749M in   5.002665s
       String#append      4.729M (± 0.1%) i/s -     24.114M in   5.099030s
         "foo" "bar"      9.651M (± 0.1%) i/s -     48.282M in   5.002646s
  "#{'foo'}#{'bar'}"      9.735M (± 0.1%) i/s -     48.786M in   5.011379s

Comparison:
  "#{'foo'}#{'bar'}":  9734961.1 i/s
         "foo" "bar":  9651269.0 i/s - 1.01x  (± 0.00) slower
       String#append:  4729080.9 i/s - 2.06x  (± 0.00) slower
       String#concat:  4347424.1 i/s - 2.24x  (± 0.00) slower
            String#+:  4093687.2 i/s - 2.38x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@   799.525k i/100ms
          String#dup   403.549k i/100ms
Calculating -------------------------------------
           String#+@      7.991M (± 0.0%) i/s -     39.976M in   5.002586s
          String#dup      4.035M (± 0.1%) i/s -     20.177M in   5.001070s

Comparison:
           String#+@:  7991118.7 i/s
          String#dup:  4034628.1 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   139.655k i/100ms
       String#match?   308.502k i/100ms
    String#end_with?   444.966k i/100ms
Calculating -------------------------------------
           String#=~      1.399M (± 0.1%) i/s -      7.122M in   5.092095s
       String#match?      3.083M (± 0.0%) i/s -     15.425M in   5.002665s
    String#end_with?      4.445M (± 0.1%) i/s -     22.248M in   5.004964s

Comparison:
    String#end_with?:  4445248.2 i/s
       String#match?:  3083376.6 i/s - 1.44x  (± 0.00) slower
           String#=~:  1398719.6 i/s - 3.18x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    82.998k i/100ms
          String#sub   103.266k i/100ms
String#dup["string"]=
                       138.729k i/100ms
Calculating -------------------------------------
         String#gsub    827.889k (± 0.6%) i/s -      4.150M in   5.012813s
          String#sub      1.039M (± 0.5%) i/s -      5.267M in   5.067504s
String#dup["string"]=
                          1.388M (± 0.5%) i/s -      7.075M in   5.097958s

Comparison:
String#dup["string"]=:  1387878.6 i/s
          String#sub:  1039305.1 i/s - 1.34x  (± 0.00) slower
         String#gsub:   827889.0 i/s - 1.68x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    71.473k i/100ms
           String#tr   265.969k i/100ms
Calculating -------------------------------------
         String#gsub    703.624k (± 0.5%) i/s -      3.574M in   5.079061s
           String#tr      2.655M (± 0.5%) i/s -     13.298M in   5.009454s

Comparison:
           String#tr:  2654728.5 i/s
         String#gsub:   703624.0 i/s - 3.77x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   922.595k i/100ms
         With Freeze     1.563M i/100ms
Calculating -------------------------------------
      Without Freeze      9.236M (± 0.1%) i/s -     47.052M in   5.094592s
         With Freeze     15.624M (± 0.1%) i/s -     78.139M in   5.001071s

Comparison:
         With Freeze: 15624498.3 i/s
      Without Freeze:  9235747.2 i/s - 1.69x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.486k i/100ms
      String#squeeze   107.143k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     24.907k (± 0.2%) i/s -    126.786k in   5.090365s
      String#squeeze      1.075M (± 0.1%) i/s -      5.464M in   5.081148s

Comparison:
      String#squeeze:  1075405.8 i/s
 String#gsub/regex+/:    24907.2 i/s - 43.18x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   209.108k i/100ms
       String#match?   566.732k i/100ms
  String#start_with?   655.390k i/100ms
Calculating -------------------------------------
           String#=~      2.095M (± 0.1%) i/s -     10.665M in   5.090883s
       String#match?      5.668M (± 0.0%) i/s -     28.903M in   5.099774s
  String#start_with?      6.550M (± 0.1%) i/s -     32.770M in   5.002716s

Comparison:
  String#start_with?:  6550346.7 i/s
       String#match?:  5667572.6 i/s - 1.16x  (± 0.00) slower
           String#=~:  2094827.4 i/s - 3.13x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   153.043k i/100ms
    String#[0, n] ==    55.300k i/100ms
   String#[RANGE] ==    50.373k i/100ms
   String#[0...n] ==    32.405k i/100ms
Calculating -------------------------------------
  String#start_with?      1.530M (± 0.1%) i/s -      7.652M in   5.002167s
    String#[0, n] ==    552.368k (± 0.1%) i/s -      2.765M in   5.005726s
   String#[RANGE] ==    502.978k (± 0.1%) i/s -      2.519M in   5.007478s
   String#[0...n] ==    324.952k (± 0.1%) i/s -      1.653M in   5.085844s

Comparison:
  String#start_with?:  1529770.2 i/s
    String#[0, n] ==:   552368.2 i/s - 2.77x  (± 0.00) slower
   String#[RANGE] ==:   502978.2 i/s - 3.04x  (± 0.00) slower
   String#[0...n] ==:   324952.2 i/s - 4.71x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   136.102k i/100ms
 String#sub!'string'    94.104k i/100ms
String#gsub!'string'    58.866k i/100ms
  String#[/regexp/]=   116.612k i/100ms
 String#sub!/regexp/    92.054k i/100ms
String#gsub!/regexp/    47.799k i/100ms
Calculating -------------------------------------
  String#['string']=      1.347M (± 0.4%) i/s -      6.805M in   5.053726s
 String#sub!'string'    963.756k (± 1.7%) i/s -      4.893M in   5.078824s
String#gsub!'string'    589.019k (± 0.5%) i/s -      3.002M in   5.096997s
  String#[/regexp/]=      1.166M (± 1.0%) i/s -      5.831M in   5.001595s
 String#sub!/regexp/    933.168k (± 0.7%) i/s -      4.695M in   5.031201s
String#gsub!/regexp/    478.100k (± 0.4%) i/s -      2.438M in   5.098913s

Comparison:
  String#['string']=:  1346568.8 i/s
  String#[/regexp/]=:  1165869.2 i/s - 1.15x  (± 0.00) slower
 String#sub!'string':   963755.7 i/s - 1.40x  (± 0.00) slower
 String#sub!/regexp/:   933167.8 i/s - 1.44x  (± 0.00) slower
String#gsub!'string':   589018.9 i/s - 2.29x  (± 0.00) slower
String#gsub!/regexp/:   478099.6 i/s - 2.82x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   114.867k i/100ms
        String#chomp   394.799k i/100ms
String#delete_suffix   416.530k i/100ms
Calculating -------------------------------------
          String#sub      1.133M (± 0.9%) i/s -      5.743M in   5.069690s
        String#chomp      3.941M (± 0.1%) i/s -     19.740M in   5.009453s
String#delete_suffix      4.162M (± 0.1%) i/s -     20.826M in   5.004317s

Comparison:
String#delete_suffix:  4161709.1 i/s
        String#chomp:  3940542.5 i/s - 1.06x  (± 0.00) slower
          String#sub:  1132975.9 i/s - 3.67x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   437.578k i/100ms
          String#sub   115.565k i/100ms
Calculating -------------------------------------
String#delete_prefix      4.373M (± 0.1%) i/s -     21.879M in   5.003227s
          String#sub      1.164M (± 0.3%) i/s -      5.894M in   5.062912s

Comparison:
String#delete_prefix:  4372960.8 i/s
          String#sub:  1164124.3 i/s - 3.76x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   425.219k i/100ms
    String#unpack[0]   328.230k i/100ms
Calculating -------------------------------------
      String#unpack1      4.245M (± 1.0%) i/s -     21.261M in   5.008768s
    String#unpack[0]      3.284M (± 0.1%) i/s -     16.740M in   5.096816s

Comparison:
      String#unpack1:  4245217.2 i/s
    String#unpack[0]:  3284352.2 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    21.827k i/100ms
          Time.parse     7.416k i/100ms
Calculating -------------------------------------
        Time.iso8601    218.099k (± 0.3%) i/s -      1.091M in   5.003954s
          Time.parse     73.991k (± 0.3%) i/s -    370.800k in   5.011447s

Comparison:
        Time.iso8601:   218099.0 i/s
          Time.parse:    73991.2 i/s - 2.95x  (± 0.00) slower

