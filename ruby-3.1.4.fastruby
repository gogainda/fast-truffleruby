$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       603.037k i/100ms
Function with splat arguments
                         9.887k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          6.019M (± 0.1%) i/s -     30.152M in   5.009465s
Function with splat arguments
                         86.152k (± 5.9%) i/s -    435.028k in   5.072976s

Comparison:
Function with single Array argument:  6018979.8 i/s
Function with splat arguments:    86151.5 i/s - 69.87x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   976.078k i/100ms
Sequential Assignment
                       999.396k i/100ms
Calculating -------------------------------------
 Parallel Assignment      9.808M (± 0.1%) i/s -     49.780M in   5.075246s
Sequential Assignment
                          9.968M (± 0.3%) i/s -     49.970M in   5.012942s

Comparison:
Sequential Assignment:  9968260.6 i/s
 Parallel Assignment:  9808398.0 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   352.227k i/100ms
       attr_accessor   416.591k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.521M (± 0.1%) i/s -     17.611M in   5.001625s
       attr_accessor      4.168M (± 0.1%) i/s -     21.246M in   5.097893s

Comparison:
       attr_accessor:  4167636.2 i/s
   getter_and_setter:  3521128.4 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    70.674k i/100ms
         respond_to?   616.743k i/100ms
Calculating -------------------------------------
      begin...rescue    720.188k (± 1.7%) i/s -      3.604M in   5.006201s
         respond_to?      6.163M (± 0.3%) i/s -     30.837M in   5.003940s

Comparison:
         respond_to?:  6162628.6 i/s
      begin...rescue:   720188.2 i/s - 8.56x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   228.527k i/100ms
             &method    89.097k i/100ms
Calculating -------------------------------------
              normal      2.285M (± 0.1%) i/s -     11.426M in   5.001368s
             &method    880.851k (± 0.2%) i/s -      4.455M in   5.057465s

Comparison:
              normal:  2284647.2 i/s
             &method:   880851.5 i/s - 2.59x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       184.000  i/100ms
       define_method   226.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.981k (±20.2%) i/s -      8.832k in   5.078307s
       define_method      2.408k (±23.3%) i/s -     10.170k in   5.035098s

Comparison:
       define_method:     2408.2 i/s
module_eval with string:     1981.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   143.819k i/100ms
       Kernel#format   159.577k i/100ms
            String#%   141.282k i/100ms
Calculating -------------------------------------
         Float#round      1.439M (± 0.1%) i/s -      7.335M in   5.097059s
       Kernel#format      1.595M (± 0.2%) i/s -      7.979M in   5.000960s
            String#%      1.421M (± 0.1%) i/s -      7.205M in   5.071312s

Comparison:
       Kernel#format:  1595469.0 i/s
         Float#round:  1439021.5 i/s - 1.11x  (± 0.00) slower
            String#%:  1420814.0 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   693.551k i/100ms
          OpenStruct   376.543k i/100ms
Calculating -------------------------------------
                Hash      6.938M (± 0.1%) i/s -     35.371M in   5.098259s
          OpenStruct      3.767M (± 0.1%) i/s -     19.204M in   5.097862s

Comparison:
                Hash:  6937881.6 i/s
          OpenStruct:  3767010.3 i/s - 1.84x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   863.758k i/100ms
          OpenStruct     8.278k i/100ms
Calculating -------------------------------------
                Hash      9.227M (± 0.6%) i/s -     46.643M in   5.055179s
          OpenStruct     84.434k (± 2.9%) i/s -    422.178k in   5.004531s

Comparison:
                Hash:  9227140.4 i/s
          OpenStruct:    84433.9 i/s - 109.28x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   444.272k i/100ms
  ancestors.include?    89.737k i/100ms
Calculating -------------------------------------
  less than or equal      4.484M (± 2.2%) i/s -     22.658M in   5.054793s
  ancestors.include?    897.565k (± 0.2%) i/s -      4.577M in   5.098910s

Comparison:
  less than or equal:  4484439.1 i/s
  ancestors.include?:   897564.8 i/s - 5.00x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.600  (± 0.0%) i/s -      4.000  in   6.666265s
         Kernel loop      0.174  (± 0.0%) i/s -      1.000  in   5.757650s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 3.45x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.408M i/100ms
         Array#first     1.244M i/100ms
Calculating -------------------------------------
           Array#[0]     14.075M (± 0.0%) i/s -     70.396M in   5.001382s
         Array#first     12.444M (± 0.0%) i/s -     63.423M in   5.096707s

Comparison:
           Array#[0]: 14075251.0 i/s
         Array#first: 12443986.0 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.397M i/100ms
          Array#last     1.132M i/100ms
Calculating -------------------------------------
          Array#[-1]     13.980M (± 0.0%) i/s -     71.234M in   5.095220s
          Array#last     11.322M (± 0.0%) i/s -     56.623M in   5.001287s

Comparison:
          Array#[-1]: 13980483.3 i/s
          Array#last: 11321606.5 i/s - 1.23x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    70.197k i/100ms
Calculating -------------------------------------
                find      0.207  (± 0.0%) i/s -      2.000  in   9.673339s
             bsearch    702.016k (± 0.2%) i/s -      3.580M in   5.099689s

Comparison:
             bsearch:   702016.2 i/s
                find:        0.2 i/s - 3395420.19x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    14.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    141.594  (± 2.8%) i/s -    714.000  in   5.047395s
        Array#insert      1.230  (± 0.0%) i/s -      6.000  in   5.133075s

Comparison:
       Array#unshift:      141.6 i/s
        Array#insert:        1.2 i/s - 115.12x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.736M i/100ms
          Array#size     1.924M i/100ms
         Array#count     1.409M i/100ms
Calculating -------------------------------------
        Array#length     17.392M (± 0.0%) i/s -     88.561M in   5.092009s
          Array#size     19.230M (± 0.2%) i/s -     96.201M in   5.002719s
         Array#count     14.087M (± 0.1%) i/s -     70.445M in   5.000866s

Comparison:
          Array#size: 19229798.5 i/s
        Array#length: 17392164.1 i/s - 1.11x  (± 0.00) slower
         Array#count: 14086500.8 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    33.528k i/100ms
        Array#sample   871.055k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    340.536k (± 1.2%) i/s -      1.710M in   5.022013s
        Array#sample      8.744M (± 0.0%) i/s -     44.424M in   5.080577s

Comparison:
        Array#sample:  8743851.4 i/s
 Array#shuffle.first:   340535.8 i/s - 25.68x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    50.052k i/100ms
          Date.parse    25.049k i/100ms
Calculating -------------------------------------
        Date.iso8601    508.790k (± 0.2%) i/s -      2.553M in   5.017125s
          Date.parse    249.819k (± 0.3%) i/s -      1.252M in   5.013479s

Comparison:
        Date.iso8601:   508790.4 i/s
          Date.parse:   249818.8 i/s - 2.04x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    13.496k i/100ms
           Array#map    19.019k i/100ms
Calculating -------------------------------------
   Array#each + push    134.679k (± 0.5%) i/s -    674.800k in   5.010543s
           Array#map    190.084k (± 0.2%) i/s -    950.950k in   5.002808s

Comparison:
           Array#map:   190084.3 i/s
   Array#each + push:   134678.9 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    23.161k i/100ms
               #each    25.290k i/100ms
Calculating -------------------------------------
            For loop    231.541k (± 0.1%) i/s -      1.158M in   5.001497s
               #each    252.739k (± 0.0%) i/s -      1.264M in   5.003180s

Comparison:
               #each:   252739.3 i/s
            For loop:   231540.7 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    28.989k i/100ms
     each_with_index    14.934k i/100ms
Calculating -------------------------------------
          While Loop    288.428k (± 0.0%) i/s -      1.449M in   5.025341s
     each_with_index    149.500k (± 0.1%) i/s -    761.634k in   5.094560s

Comparison:
          While Loop:   288428.2 i/s
     each_with_index:   149499.5 i/s - 1.93x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    82.741k i/100ms
      inject to_proc     1.534k i/100ms
        inject block     1.588k i/100ms
Calculating -------------------------------------
       inject symbol    827.184k (± 0.0%) i/s -      4.137M in   5.001369s
      inject to_proc     15.362k (± 0.1%) i/s -     78.234k in   5.092675s
        inject block     15.896k (± 0.1%) i/s -     80.988k in   5.094863s

Comparison:
       inject symbol:   827183.6 i/s
        inject block:    15896.0 i/s - 52.04x  (± 0.00) slower
      inject to_proc:    15362.1 i/s - 53.85x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     5.160k i/100ms
   Array#map.flatten     2.804k i/100ms
      Array#flat_map     6.705k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     51.708k (± 0.1%) i/s -    263.160k in   5.089348s
   Array#map.flatten     28.102k (± 0.3%) i/s -    143.004k in   5.088694s
      Array#flat_map     66.990k (± 0.1%) i/s -    335.250k in   5.004482s

Comparison:
      Array#flat_map:    66990.0 i/s
Array#map.flatten(1):    51708.0 i/s - 1.30x  (± 0.00) slower
   Array#map.flatten:    28102.5 i/s - 2.38x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    22.123k i/100ms
  Array#reverse_each    22.871k i/100ms
Calculating -------------------------------------
  Array#reverse.each    220.757k (± 0.1%) i/s -      1.106M in   5.010725s
  Array#reverse_each    228.631k (± 0.1%) i/s -      1.144M in   5.001744s

Comparison:
  Array#reverse_each:   228630.7 i/s
  Array#reverse.each:   220757.0 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        15.473k i/100ms
   Enumerable#detect    60.946k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        154.062k (± 0.7%) i/s -      3.095M in  20.087656s
   Enumerable#detect    612.094k (± 0.1%) i/s -     12.250M in  20.013508s

Comparison:
   Enumerable#detect:   612094.3 i/s
Enumerable#select.first:   154061.9 i/s - 3.97x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       176.716k i/100ms
Enumerable#select.last
                        12.937k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.764M (± 0.2%) i/s -      8.836M in   5.009265s
Enumerable#select.last
                        129.382k (± 0.1%) i/s -    659.787k in   5.099548s

Comparison:
Enumerable#reverse.detect:  1763901.1 i/s
Enumerable#select.last:   129381.8 i/s - 13.63x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.240k i/100ms
  Enumerable#sort_by     3.170k i/100ms
     Enumerable#sort     1.740k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         32.313k (± 0.3%) i/s -    162.000k in   5.013438s
  Enumerable#sort_by     31.596k (± 0.4%) i/s -    158.500k in   5.016555s
     Enumerable#sort     17.379k (± 0.2%) i/s -     87.000k in   5.006121s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    32313.4 i/s
  Enumerable#sort_by:    31595.8 i/s - 1.02x  (± 0.00) slower
     Enumerable#sort:    17378.8 i/s - 1.86x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    13.287k i/100ms
Enumerable#sort_by...first
                         6.100k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    132.968k (± 0.1%) i/s -    677.637k in   5.096228s
Enumerable#sort_by...first
                         62.577k (± 1.1%) i/s -    317.200k in   5.069517s

Comparison:
   Enumerable#min_by:   132968.4 i/s
Enumerable#sort_by...first:    62577.0 i/s - 2.12x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   279.299k i/100ms
            Hash#dup   216.544k i/100ms
Calculating -------------------------------------
              Hash[]      2.385M (± 2.9%) i/s -     12.010M in   5.041164s
            Hash#dup      1.932M (± 1.5%) i/s -      9.744M in   5.044967s

Comparison:
              Hash[]:  2384502.9 i/s
            Hash#dup:  1931979.4 i/s - 1.23x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.295M i/100ms
  Hash#fetch, symbol     1.030M i/100ms
     Hash#[], string     1.083M i/100ms
  Hash#fetch, string   590.153k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     12.929M (± 0.1%) i/s -     64.750M in   5.008069s
  Hash#fetch, symbol     10.307M (± 0.1%) i/s -     52.554M in   5.098737s
     Hash#[], string     10.783M (± 0.0%) i/s -     54.161M in   5.022737s
  Hash#fetch, string      5.903M (± 0.1%) i/s -     30.098M in   5.098525s

Comparison:
     Hash#[], symbol: 12929139.6 i/s
     Hash#[], string: 10783235.2 i/s - 1.20x  (± 0.00) slower
  Hash#fetch, symbol: 10307358.7 i/s - 1.25x  (± 0.00) slower
  Hash#fetch, string:  5903242.0 i/s - 2.19x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   691.033k i/100ms
             Hash#[]   785.917k i/100ms
          Hash#[] ||   580.687k i/100ms
          Hash#[] &&   318.203k i/100ms
          Hash#fetch   481.969k i/100ms
 Hash#fetch fallback   284.700k i/100ms
Calculating -------------------------------------
            Hash#dig      6.913M (± 0.2%) i/s -     35.243M in   5.098023s
             Hash#[]      7.860M (± 0.2%) i/s -     40.082M in   5.099808s
          Hash#[] ||      5.963M (± 5.3%) i/s -     30.196M in   5.076652s
          Hash#[] &&      3.183M (± 0.2%) i/s -     16.228M in   5.098667s
          Hash#fetch      4.823M (± 0.2%) i/s -     24.580M in   5.096255s
 Hash#fetch fallback      2.843M (± 0.1%) i/s -     14.235M in   5.007774s

Comparison:
             Hash#[]:  7859502.4 i/s
            Hash#dig:  6913028.5 i/s - 1.14x  (± 0.00) slower
          Hash#[] ||:  5963390.1 i/s - 1.32x  (± 0.00) slower
          Hash#fetch:  4823244.9 i/s - 1.63x  (± 0.00) slower
          Hash#[] &&:  3182868.8 i/s - 2.47x  (± 0.00) slower
 Hash#fetch fallback:  2842581.3 i/s - 2.76x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.223M i/100ms
  Hash#fetch + block     1.181M i/100ms
    Hash#fetch + arg   842.456k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     12.221M (± 0.1%) i/s -     61.169M in   5.005319s
  Hash#fetch + block     11.804M (± 0.1%) i/s -     59.056M in   5.003255s
    Hash#fetch + arg      8.403M (± 0.2%) i/s -     42.123M in   5.013018s

Comparison:
  Hash#fetch + const: 12220813.7 i/s
  Hash#fetch + block: 11803615.5 i/s - 1.04x  (± 0.00) slower
    Hash#fetch + arg:  8402715.5 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    19.402k i/100ms
         sort + to_h     8.474k i/100ms
Calculating -------------------------------------
      sort_by + to_h    192.059k (± 1.3%) i/s -    970.100k in   5.051952s
         sort + to_h     85.150k (± 0.2%) i/s -    432.174k in   5.075448s

Comparison:
      sort_by + to_h:   192059.0 i/s
         sort + to_h:    85150.2 i/s - 2.26x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   134.231k i/100ms
       Hash#each_key   143.269k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.344M (± 0.5%) i/s -      6.846M in   5.093110s
       Hash#each_key      1.429M (± 0.1%) i/s -      7.163M in   5.011675s

Comparison:
       Hash#each_key:  1429353.0 i/s
      Hash#keys.each:  1344156.6 i/s - 1.06x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.163k i/100ms
           Hash#key?   770.387k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     11.467k (± 4.6%) i/s -     58.150k in   5.084025s
           Hash#key?      7.704M (± 0.0%) i/s -     39.290M in   5.099689s

Comparison:
           Hash#key?:  7704341.3 i/s
  Hash#keys.include?:    11467.5 i/s - 671.84x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     2.957k i/100ms
            Hash#[]=     6.694k i/100ms
Calculating -------------------------------------
         Hash#merge!     29.553k (± 0.1%) i/s -    147.850k in   5.002927s
            Hash#[]=     67.237k (± 0.4%) i/s -    341.394k in   5.077574s

Comparison:
            Hash#[]=:    67236.6 i/s
         Hash#merge!:    29552.7 i/s - 2.28x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.752k i/100ms
      Hash#merge({})     3.155k i/100ms
 Hash#dup#merge!({})     2.298k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         37.926k (± 1.7%) i/s -    191.352k in   5.046848s
      Hash#merge({})     31.323k (± 0.3%) i/s -    157.750k in   5.036292s
 Hash#dup#merge!({})     22.869k (± 0.5%) i/s -    114.900k in   5.024352s

Comparison:
{}#merge!(Hash) do end:    37925.9 i/s
      Hash#merge({}):    31322.9 i/s - 1.21x  (± 0.00) slower
 Hash#dup#merge!({}):    22869.3 i/s - 1.66x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   281.206k i/100ms
          Hash#merge   251.085k i/100ms
Calculating -------------------------------------
        Hash#**other      2.807M (± 0.2%) i/s -     14.060M in   5.008711s
          Hash#merge      2.504M (± 0.2%) i/s -     12.554M in   5.014192s

Comparison:
        Hash#**other:  2807186.2 i/s
          Hash#merge:  2503758.4 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.101k i/100ms
         Hash#merge!     2.895k i/100ms
Calculating -------------------------------------
          Hash#merge     11.522k (± 0.5%) i/s -     58.353k in   5.064774s
         Hash#merge!     28.958k (± 0.3%) i/s -    147.645k in   5.098701s

Comparison:
         Hash#merge!:    28957.7 i/s
          Hash#merge:    11521.7 i/s - 2.51x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      314.032k i/100ms
Array#each             164.486k i/100ms
Array#each_w/_object   118.701k i/100ms
Hash#select-include     52.701k i/100ms
Calculating -------------------------------------
Hash#native-slice         3.137M (± 0.1%) i/s -     15.702M in   5.005963s
Array#each                1.654M (± 0.2%) i/s -      8.389M in   5.072195s
Array#each_w/_object      1.191M (± 0.3%) i/s -      6.054M in   5.084881s
Hash#select-include     521.509k (± 2.9%) i/s -      2.635M in   5.057363s

Comparison:
Hash#native-slice   :  3136580.5 i/s
Array#each          :  1653885.4 i/s - 1.90x  (± 0.00) slower
Array#each_w/_object:  1190547.9 i/s - 2.63x  (± 0.00) slower
Hash#select-include :   521509.2 i/s - 6.01x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.833k i/100ms
         Hash#value?     1.714k i/100ms
Calculating -------------------------------------
Hash#values.include?     18.259k (± 5.5%) i/s -     91.650k in   5.040670s
         Hash#value?     17.060k (± 0.3%) i/s -     85.700k in   5.023610s

Comparison:
Hash#values.include?:    18258.6 i/s
         Hash#value?:    17059.6 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   524.238k i/100ms
                send   357.260k i/100ms
      method_missing   265.670k i/100ms
Calculating -------------------------------------
                call      5.247M (± 0.1%) i/s -     26.736M in   5.095512s
                send      3.576M (± 0.1%) i/s -     18.220M in   5.094981s
      method_missing      2.654M (± 0.1%) i/s -     13.284M in   5.005964s

Comparison:
                call:  5247000.4 i/s
                send:  3576120.5 i/s - 1.47x  (± 0.00) slower
      method_missing:  2653535.5 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     5.745k i/100ms
      Symbol#to_proc     6.211k i/100ms
Calculating -------------------------------------
               Block     57.462k (± 0.1%) i/s -    292.995k in   5.098901s
      Symbol#to_proc     62.144k (± 0.1%) i/s -    316.761k in   5.097177s

Comparison:
      Symbol#to_proc:    62144.4 i/s
               Block:    57462.5 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   793.373k i/100ms
       block + yield   851.775k i/100ms
        unused block     1.098M i/100ms
               yield     1.073M i/100ms
Calculating -------------------------------------
          block.call      7.937M (± 0.1%) i/s -     40.462M in   5.097586s
       block + yield      8.520M (± 0.0%) i/s -     43.441M in   5.098763s
        unused block     11.007M (± 0.1%) i/s -     56.004M in   5.087956s
               yield     10.726M (± 0.0%) i/s -     54.706M in   5.100090s

Comparison:
        unused block: 11007267.9 i/s
               yield: 10726391.7 i/s - 1.03x  (± 0.00) slower
       block + yield:  8519818.0 i/s - 1.29x  (± 0.00) slower
          block.call:  7937491.9 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   239.771k i/100ms
      range#include?     9.452k i/100ms
       range#member?     9.519k i/100ms
       plain compare   361.467k i/100ms
Calculating -------------------------------------
        range#cover?      2.398M (± 0.1%) i/s -     12.228M in   5.098814s
      range#include?     95.381k (± 0.5%) i/s -    482.052k in   5.054052s
       range#member?     95.898k (± 1.0%) i/s -    485.469k in   5.062935s
       plain compare      3.610M (± 0.1%) i/s -     18.073M in   5.006274s

Comparison:
       plain compare:  3610143.8 i/s
        range#cover?:  2398269.6 i/s - 1.51x  (± 0.00) slower
       range#member?:    95897.9 i/s - 37.65x  (± 0.00) slower
      range#include?:    95381.5 i/s - 37.85x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   759.925k i/100ms
           String#=~   466.186k i/100ms
          Regexp#===   429.778k i/100ms
        String#match   356.034k i/100ms
Calculating -------------------------------------
       String#match?      7.597M (± 0.0%) i/s -     37.996M in   5.001498s
           String#=~      4.639M (± 0.1%) i/s -     23.309M in   5.024839s
          Regexp#===      4.296M (± 0.1%) i/s -     21.489M in   5.002326s
        String#match      3.553M (± 0.1%) i/s -     17.802M in   5.010853s

Comparison:
       String#match?:  7596976.1 i/s
           String#=~:  4638818.2 i/s - 1.64x  (± 0.00) slower
          Regexp#===:  4295784.1 i/s - 1.77x  (± 0.00) slower
        String#match:  3552632.3 i/s - 2.14x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   484.239k i/100ms
      String#casecmp   640.743k i/100ms
Calculating -------------------------------------
String#downcase + ==      4.837M (± 0.1%) i/s -     24.212M in   5.005626s
      String#casecmp      6.405M (± 0.1%) i/s -     32.037M in   5.002122s

Comparison:
      String#casecmp:  6404717.5 i/s
String#downcase + ==:  4836952.0 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   426.976k i/100ms
       String#concat   457.893k i/100ms
       String#append   492.297k i/100ms
         "foo" "bar"   995.390k i/100ms
  "#{'foo'}#{'bar'}"   996.812k i/100ms
Calculating -------------------------------------
            String#+      4.270M (± 0.1%) i/s -     21.776M in   5.099663s
       String#concat      4.576M (± 0.1%) i/s -     22.895M in   5.002867s
       String#append      4.923M (± 0.1%) i/s -     25.107M in   5.099866s
         "foo" "bar"      9.933M (± 0.1%) i/s -     49.770M in   5.010725s
  "#{'foo'}#{'bar'}"      9.939M (± 0.1%) i/s -     49.841M in   5.014536s

Comparison:
  "#{'foo'}#{'bar'}":  9939241.0 i/s
         "foo" "bar":  9932601.5 i/s - same-ish: difference falls within error
       String#append:  4923102.3 i/s - 2.02x  (± 0.00) slower
       String#concat:  4576307.8 i/s - 2.17x  (± 0.00) slower
            String#+:  4270046.4 i/s - 2.33x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@   839.718k i/100ms
          String#dup   410.194k i/100ms
Calculating -------------------------------------
           String#+@      8.403M (± 0.1%) i/s -     42.826M in   5.096267s
          String#dup      4.101M (± 0.1%) i/s -     20.510M in   5.001753s

Comparison:
           String#+@:  8403337.6 i/s
          String#dup:  4100505.4 i/s - 2.05x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   143.927k i/100ms
       String#match?   324.819k i/100ms
    String#end_with?   456.726k i/100ms
Calculating -------------------------------------
           String#=~      1.441M (± 0.3%) i/s -      7.340M in   5.095429s
       String#match?      3.248M (± 0.0%) i/s -     16.566M in   5.099714s
    String#end_with?      4.561M (± 0.1%) i/s -     22.836M in   5.007351s

Comparison:
    String#end_with?:  4560564.5 i/s
       String#match?:  3248372.3 i/s - 1.40x  (± 0.00) slower
           String#=~:  1440570.3 i/s - 3.17x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    84.928k i/100ms
          String#sub   108.040k i/100ms
String#dup["string"]=
                       144.760k i/100ms
Calculating -------------------------------------
         String#gsub    849.851k (± 0.4%) i/s -      4.331M in   5.096675s
          String#sub      1.049M (± 0.8%) i/s -      5.294M in   5.049067s
String#dup["string"]=
                          1.440M (± 0.6%) i/s -      7.238M in   5.026126s

Comparison:
String#dup["string"]=:  1440122.5 i/s
          String#sub:  1048569.3 i/s - 1.37x  (± 0.00) slower
         String#gsub:   849850.7 i/s - 1.69x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    73.797k i/100ms
           String#tr   276.072k i/100ms
Calculating -------------------------------------
         String#gsub    752.052k (± 0.6%) i/s -      3.764M in   5.004653s
           String#tr      2.756M (± 0.1%) i/s -     13.804M in   5.008456s

Comparison:
           String#tr:  2756060.9 i/s
         String#gsub:   752052.5 i/s - 3.66x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   959.003k i/100ms
         With Freeze     1.572M i/100ms
Calculating -------------------------------------
      Without Freeze      9.590M (± 0.1%) i/s -     47.950M in   5.000246s
         With Freeze     15.782M (± 0.0%) i/s -     80.183M in   5.080696s

Comparison:
         With Freeze: 15781808.9 i/s
      Without Freeze:  9589563.6 i/s - 1.65x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.591k i/100ms
      String#squeeze   109.138k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     25.762k (± 0.6%) i/s -    129.550k in   5.028966s
      String#squeeze      1.108M (± 0.2%) i/s -      5.566M in   5.022661s

Comparison:
      String#squeeze:  1108190.6 i/s
 String#gsub/regex+/:    25761.5 i/s - 43.02x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   216.527k i/100ms
       String#match?   594.334k i/100ms
  String#start_with?   684.790k i/100ms
Calculating -------------------------------------
           String#=~      2.176M (± 0.2%) i/s -     11.043M in   5.074579s
       String#match?      5.942M (± 0.0%) i/s -     29.717M in   5.001523s
  String#start_with?      6.853M (± 0.1%) i/s -     34.924M in   5.096016s

Comparison:
  String#start_with?:  6853259.5 i/s
       String#match?:  5941530.8 i/s - 1.15x  (± 0.00) slower
           String#=~:  2176123.6 i/s - 3.15x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   160.534k i/100ms
    String#[0, n] ==    58.556k i/100ms
   String#[RANGE] ==    53.681k i/100ms
   String#[0...n] ==    34.475k i/100ms
Calculating -------------------------------------
  String#start_with?      1.603M (± 0.2%) i/s -      8.027M in   5.006315s
    String#[0, n] ==    584.376k (± 0.1%) i/s -      2.928M in   5.010142s
   String#[RANGE] ==    536.225k (± 0.2%) i/s -      2.684M in   5.005474s
   String#[0...n] ==    344.797k (± 0.1%) i/s -      1.758M in   5.099316s

Comparison:
  String#start_with?:  1603319.0 i/s
    String#[0, n] ==:   584375.9 i/s - 2.74x  (± 0.00) slower
   String#[RANGE] ==:   536224.5 i/s - 2.99x  (± 0.00) slower
   String#[0...n] ==:   344796.6 i/s - 4.65x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   139.331k i/100ms
 String#sub!'string'    92.089k i/100ms
String#gsub!'string'    58.711k i/100ms
  String#[/regexp/]=   119.262k i/100ms
 String#sub!/regexp/    91.601k i/100ms
String#gsub!/regexp/    48.290k i/100ms
Calculating -------------------------------------
  String#['string']=      1.409M (± 0.3%) i/s -      7.106M in   5.042762s
 String#sub!'string'    928.425k (± 1.0%) i/s -      4.697M in   5.059128s
String#gsub!'string'    597.127k (± 0.9%) i/s -      2.994M in   5.014829s
  String#[/regexp/]=      1.177M (± 1.4%) i/s -      5.963M in   5.068125s
 String#sub!/regexp/    923.549k (± 1.3%) i/s -      4.672M in   5.059205s
String#gsub!/regexp/    478.158k (± 0.6%) i/s -      2.414M in   5.049751s

Comparison:
  String#['string']=:  1409136.7 i/s
  String#[/regexp/]=:  1176823.9 i/s - 1.20x  (± 0.00) slower
 String#sub!'string':   928425.3 i/s - 1.52x  (± 0.00) slower
 String#sub!/regexp/:   923549.2 i/s - 1.53x  (± 0.00) slower
String#gsub!'string':   597127.2 i/s - 2.36x  (± 0.00) slower
String#gsub!/regexp/:   478157.7 i/s - 2.95x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   117.354k i/100ms
        String#chomp   400.438k i/100ms
String#delete_suffix   453.410k i/100ms
Calculating -------------------------------------
          String#sub      1.169M (± 0.5%) i/s -      5.868M in   5.019312s
        String#chomp      4.008M (± 0.1%) i/s -     20.422M in   5.095161s
String#delete_suffix      4.536M (± 0.1%) i/s -     23.124M in   5.097313s

Comparison:
String#delete_suffix:  4536492.6 i/s
        String#chomp:  4008186.4 i/s - 1.13x  (± 0.00) slower
          String#sub:  1169058.2 i/s - 3.88x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   463.631k i/100ms
          String#sub   119.333k i/100ms
Calculating -------------------------------------
String#delete_prefix      4.632M (± 0.1%) i/s -     23.182M in   5.004419s
          String#sub      1.183M (± 0.7%) i/s -      5.967M in   5.044303s

Comparison:
String#delete_prefix:  4632225.4 i/s
          String#sub:  1182904.8 i/s - 3.92x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   445.143k i/100ms
    String#unpack[0]   341.146k i/100ms
Calculating -------------------------------------
      String#unpack1      4.457M (± 0.1%) i/s -     22.702M in   5.093627s
    String#unpack[0]      3.423M (± 0.1%) i/s -     17.398M in   5.082731s

Comparison:
      String#unpack1:  4457003.7 i/s
    String#unpack[0]:  3423054.5 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    21.932k i/100ms
          Time.parse     7.380k i/100ms
Calculating -------------------------------------
        Time.iso8601    222.572k (± 0.7%) i/s -      1.119M in   5.025757s
          Time.parse     74.443k (± 2.4%) i/s -    376.380k in   5.058766s

Comparison:
        Time.iso8601:   222572.2 i/s
          Time.parse:    74443.3 i/s - 2.99x  (± 0.00) slower

