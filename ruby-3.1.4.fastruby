$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       568.846k i/100ms
Function with splat arguments
                        22.730k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          5.690M (± 0.6%) i/s -     29.011M in   5.098385s
Function with splat arguments
                        225.659k (± 5.7%) i/s -      1.136M in   5.061884s

Comparison:
Function with single Array argument:  5690489.8 i/s
Function with splat arguments:   225658.8 i/s - 25.22x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   917.971k i/100ms
Sequential Assignment
                       941.182k i/100ms
Calculating -------------------------------------
 Parallel Assignment      9.189M (± 0.2%) i/s -     46.817M in   5.094658s
Sequential Assignment
                          9.430M (± 0.1%) i/s -     48.000M in   5.090156s

Comparison:
Sequential Assignment:  9430036.7 i/s
 Parallel Assignment:  9189372.9 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   370.720k i/100ms
       attr_accessor   436.192k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.660M (± 1.9%) i/s -     18.536M in   5.065929s
       attr_accessor      4.368M (± 0.3%) i/s -     22.246M in   5.092923s

Comparison:
       attr_accessor:  4368018.2 i/s
   getter_and_setter:  3660346.1 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    66.834k i/100ms
         respond_to?   596.038k i/100ms
Calculating -------------------------------------
      begin...rescue    673.735k (± 1.1%) i/s -      3.409M in   5.059798s
         respond_to?      5.956M (± 0.1%) i/s -     29.802M in   5.003971s

Comparison:
         respond_to?:  5955652.7 i/s
      begin...rescue:   673735.0 i/s - 8.84x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              normal   236.968k i/100ms
             &method    88.696k i/100ms
Calculating -------------------------------------
              normal      2.364M (± 0.1%) i/s -     11.848M in   5.011313s
             &method    885.269k (± 0.4%) i/s -      4.435M in   5.009643s

Comparison:
              normal:  2364331.6 i/s
             &method:   885269.1 i/s - 2.67x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       203.000  i/100ms
       define_method   243.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.995k (±19.8%) i/s -      9.135k in   5.110440s
       define_method      2.596k (±16.6%) i/s -     12.150k in   5.035152s

Comparison:
       define_method:     2595.6 i/s
module_eval with string:     1995.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Float#round   138.497k i/100ms
       Kernel#format   150.953k i/100ms
            String#%   132.985k i/100ms
Calculating -------------------------------------
         Float#round      1.377M (± 0.3%) i/s -      6.925M in   5.029432s
       Kernel#format      1.508M (± 0.3%) i/s -      7.548M in   5.005479s
            String#%      1.338M (± 0.1%) i/s -      6.782M in   5.070445s

Comparison:
       Kernel#format:  1507895.5 i/s
         Float#round:  1376881.7 i/s - 1.10x  (± 0.00) slower
            String#%:  1337602.1 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   693.595k i/100ms
          OpenStruct   355.595k i/100ms
Calculating -------------------------------------
                Hash      6.951M (± 0.2%) i/s -     35.373M in   5.089108s
          OpenStruct      3.555M (± 0.1%) i/s -     17.780M in   5.001798s

Comparison:
                Hash:  6950828.8 i/s
          OpenStruct:  3554673.8 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                Hash   853.068k i/100ms
          OpenStruct     8.498k i/100ms
Calculating -------------------------------------
                Hash      9.124M (± 0.6%) i/s -     46.066M in   5.048891s
          OpenStruct     85.662k (± 2.2%) i/s -    433.398k in   5.061852s

Comparison:
                Hash:  9124223.1 i/s
          OpenStruct:    85662.4 i/s - 106.51x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   466.776k i/100ms
  ancestors.include?    96.916k i/100ms
Calculating -------------------------------------
  less than or equal      4.652M (± 0.5%) i/s -     23.339M in   5.017081s
  ancestors.include?    980.158k (± 0.2%) i/s -      4.943M in   5.042804s

Comparison:
  less than or equal:  4652011.2 i/s
  ancestors.include?:   980157.6 i/s - 4.75x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.459  (± 0.0%) i/s -      3.000  in   6.529268s
         Kernel loop      0.178  (± 0.0%) i/s -      1.000  in   5.615486s

Comparison:
          While Loop:        0.5 i/s
         Kernel loop:        0.2 i/s - 2.58x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.304M i/100ms
         Array#first     1.105M i/100ms
Calculating -------------------------------------
           Array#[0]     13.050M (± 0.2%) i/s -     66.516M in   5.096932s
         Array#first     11.093M (± 0.3%) i/s -     56.358M in   5.080535s

Comparison:
           Array#[0]: 13050224.6 i/s
         Array#first: 11092933.1 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.251M i/100ms
          Array#last     1.100M i/100ms
Calculating -------------------------------------
          Array#[-1]     12.470M (± 0.1%) i/s -     62.550M in   5.015929s
          Array#last     11.016M (± 0.3%) i/s -     56.108M in   5.093232s

Comparison:
          Array#[-1]: 12470257.4 i/s
          Array#last: 11016318.0 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    74.504k i/100ms
Calculating -------------------------------------
                find      0.199  (± 0.0%) i/s -      1.000  in   5.037381s
             bsearch    744.922k (± 0.3%) i/s -      3.725M in   5.000828s

Comparison:
             bsearch:   744921.9 i/s
                find:        0.2 i/s - 3752455.45x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    14.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    145.297  (± 2.8%) i/s -    728.000  in   5.013669s
        Array#insert      1.151  (± 0.0%) i/s -      6.000  in   5.212062s

Comparison:
       Array#unshift:      145.3 i/s
        Array#insert:        1.2 i/s - 126.22x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.901M i/100ms
          Array#size     1.874M i/100ms
         Array#count     1.312M i/100ms
Calculating -------------------------------------
        Array#length     18.975M (± 0.5%) i/s -     95.064M in   5.010219s
          Array#size     18.705M (± 0.7%) i/s -     93.685M in   5.008772s
         Array#count     13.155M (± 0.3%) i/s -     66.932M in   5.088082s

Comparison:
        Array#length: 18974588.2 i/s
          Array#size: 18705126.3 i/s - 1.01x  (± 0.00) slower
         Array#count: 13154805.0 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    34.604k i/100ms
        Array#sample   708.330k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    346.196k (± 0.8%) i/s -      1.765M in   5.098018s
        Array#sample      7.078M (± 0.0%) i/s -     35.416M in   5.003689s

Comparison:
        Array#sample:  7078078.5 i/s
 Array#shuffle.first:   346196.4 i/s - 20.45x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    47.398k i/100ms
          Date.parse    24.303k i/100ms
Calculating -------------------------------------
        Date.iso8601    474.076k (± 0.5%) i/s -      2.417M in   5.099094s
          Date.parse    242.607k (± 0.1%) i/s -      1.215M in   5.008731s

Comparison:
        Date.iso8601:   474075.6 i/s
          Date.parse:   242606.8 i/s - 1.95x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    14.133k i/100ms
           Array#map    19.415k i/100ms
Calculating -------------------------------------
   Array#each + push    141.294k (± 0.4%) i/s -    706.650k in   5.001371s
           Array#map    194.561k (± 0.3%) i/s -    990.165k in   5.089283s

Comparison:
           Array#map:   194560.7 i/s
   Array#each + push:   141293.9 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            For loop    22.079k i/100ms
               #each    24.377k i/100ms
Calculating -------------------------------------
            For loop    220.070k (± 0.1%) i/s -      1.104M in   5.016350s
               #each    243.788k (± 0.1%) i/s -      1.243M in   5.099623s

Comparison:
               #each:   243788.1 i/s
            For loop:   220070.5 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          While Loop    24.518k i/100ms
     each_with_index    14.190k i/100ms
Calculating -------------------------------------
          While Loop    245.259k (± 0.1%) i/s -      1.250M in   5.098368s
     each_with_index    142.407k (± 1.1%) i/s -    723.690k in   5.082536s

Comparison:
          While Loop:   245258.6 i/s
     each_with_index:   142406.8 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    71.273k i/100ms
      inject to_proc     1.706k i/100ms
        inject block     1.559k i/100ms
Calculating -------------------------------------
       inject symbol    712.740k (± 0.0%) i/s -      3.635M in   5.099931s
      inject to_proc     17.066k (± 0.2%) i/s -     87.006k in   5.098143s
        inject block     15.593k (± 0.3%) i/s -     79.509k in   5.099079s

Comparison:
       inject symbol:   712739.7 i/s
      inject to_proc:    17066.3 i/s - 41.76x  (± 0.00) slower
        inject block:    15593.0 i/s - 45.71x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     5.505k i/100ms
   Array#map.flatten     3.015k i/100ms
      Array#flat_map     7.031k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     55.092k (± 0.4%) i/s -    280.755k in   5.096137s
   Array#map.flatten     30.271k (± 0.4%) i/s -    153.765k in   5.079665s
      Array#flat_map     70.956k (± 0.2%) i/s -    358.581k in   5.053582s

Comparison:
      Array#flat_map:    70956.0 i/s
Array#map.flatten(1):    55092.4 i/s - 1.29x  (± 0.00) slower
   Array#map.flatten:    30271.2 i/s - 2.34x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    23.646k i/100ms
  Array#reverse_each    24.326k i/100ms
Calculating -------------------------------------
  Array#reverse.each    236.046k (± 0.3%) i/s -      1.182M in   5.008807s
  Array#reverse_each    243.159k (± 0.1%) i/s -      1.216M in   5.002074s

Comparison:
  Array#reverse_each:   243159.2 i/s
  Array#reverse.each:   236046.1 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        15.647k i/100ms
   Enumerable#detect    61.227k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        155.450k (± 0.6%) i/s -      3.114M in  20.031365s
   Enumerable#detect    614.281k (± 0.2%) i/s -     12.307M in  20.034278s

Comparison:
   Enumerable#detect:   614281.2 i/s
Enumerable#select.first:   155450.0 i/s - 3.95x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       173.267k i/100ms
Enumerable#select.last
                        14.306k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.771M (± 0.7%) i/s -      9.010M in   5.088332s
Enumerable#select.last
                        142.758k (± 0.5%) i/s -    715.300k in   5.010726s

Comparison:
Enumerable#reverse.detect:  1770794.4 i/s
Enumerable#select.last:   142757.9 i/s - 12.40x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.820k i/100ms
  Enumerable#sort_by     3.615k i/100ms
     Enumerable#sort     1.872k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         37.928k (± 0.4%) i/s -    191.000k in   5.035909s
  Enumerable#sort_by     36.009k (± 0.3%) i/s -    180.750k in   5.019588s
     Enumerable#sort     18.659k (± 0.3%) i/s -     93.600k in   5.016387s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    37928.2 i/s
  Enumerable#sort_by:    36009.2 i/s - 1.05x  (± 0.00) slower
     Enumerable#sort:    18659.1 i/s - 2.03x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    13.246k i/100ms
Enumerable#sort_by...first
                         6.544k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    132.426k (± 0.1%) i/s -    662.300k in   5.001300s
Enumerable#sort_by...first
                         65.325k (± 0.6%) i/s -    327.200k in   5.008957s

Comparison:
   Enumerable#min_by:   132425.6 i/s
Enumerable#sort_by...first:    65325.2 i/s - 2.03x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   294.759k i/100ms
            Hash#dup   236.383k i/100ms
Calculating -------------------------------------
              Hash[]      2.841M (± 3.6%) i/s -     14.443M in   5.090539s
            Hash#dup      2.046M (± 3.1%) i/s -     10.401M in   5.088376s

Comparison:
              Hash[]:  2840886.7 i/s
            Hash#dup:  2046394.3 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.094M i/100ms
  Hash#fetch, symbol   945.379k i/100ms
     Hash#[], string   897.907k i/100ms
  Hash#fetch, string   606.763k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     10.949M (± 0.1%) i/s -     55.813M in   5.097408s
  Hash#fetch, symbol      9.435M (± 0.3%) i/s -     47.269M in   5.010206s
     Hash#[], string      8.972M (± 0.1%) i/s -     44.895M in   5.003890s
  Hash#fetch, string      6.064M (± 0.4%) i/s -     30.338M in   5.003032s

Comparison:
     Hash#[], symbol: 10949302.1 i/s
  Hash#fetch, symbol:  9434608.5 i/s - 1.16x  (± 0.00) slower
     Hash#[], string:  8972094.2 i/s - 1.22x  (± 0.00) slower
  Hash#fetch, string:  6064036.0 i/s - 1.81x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   697.724k i/100ms
             Hash#[]   768.719k i/100ms
          Hash#[] ||   701.416k i/100ms
          Hash#[] &&   322.600k i/100ms
          Hash#fetch   497.517k i/100ms
 Hash#fetch fallback   306.477k i/100ms
Calculating -------------------------------------
            Hash#dig      6.970M (± 0.4%) i/s -     34.886M in   5.005335s
             Hash#[]      7.667M (± 2.6%) i/s -     38.436M in   5.016835s
          Hash#[] ||      7.013M (± 0.6%) i/s -     35.071M in   5.001253s
          Hash#[] &&      3.224M (± 0.4%) i/s -     16.130M in   5.003552s
          Hash#fetch      5.063M (± 0.3%) i/s -     25.373M in   5.011887s
 Hash#fetch fallback      3.073M (± 0.2%) i/s -     15.630M in   5.086861s

Comparison:
             Hash#[]:  7666770.3 i/s
          Hash#[] ||:  7012678.9 i/s - 1.09x  (± 0.00) slower
            Hash#dig:  6969911.9 i/s - 1.10x  (± 0.00) slower
          Hash#fetch:  5062677.6 i/s - 1.51x  (± 0.00) slower
          Hash#[] &&:  3223767.9 i/s - 2.38x  (± 0.00) slower
 Hash#fetch fallback:  3072694.6 i/s - 2.50x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.070M i/100ms
  Hash#fetch + block     1.089M i/100ms
    Hash#fetch + arg   854.718k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     10.671M (± 0.3%) i/s -     53.510M in   5.014315s
  Hash#fetch + block     10.941M (± 0.1%) i/s -     55.533M in   5.075895s
    Hash#fetch + arg      8.530M (± 0.2%) i/s -     42.736M in   5.009842s

Comparison:
  Hash#fetch + block: 10940578.4 i/s
  Hash#fetch + const: 10671488.6 i/s - 1.03x  (± 0.00) slower
    Hash#fetch + arg:  8530429.6 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    19.848k i/100ms
         sort + to_h     8.557k i/100ms
Calculating -------------------------------------
      sort_by + to_h    199.813k (± 0.8%) i/s -      1.012M in   5.066314s
         sort + to_h     85.794k (± 0.2%) i/s -    436.407k in   5.086740s

Comparison:
      sort_by + to_h:   199812.9 i/s
         sort + to_h:    85793.5 i/s - 2.33x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   151.379k i/100ms
       Hash#each_key   158.690k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.522M (± 0.2%) i/s -      7.720M in   5.073060s
       Hash#each_key      1.586M (± 0.1%) i/s -      7.934M in   5.003141s

Comparison:
       Hash#each_key:  1585905.2 i/s
      Hash#keys.each:  1521835.8 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.058k i/100ms
           Hash#key?   672.800k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     10.474k (± 4.0%) i/s -     52.900k in   5.060232s
           Hash#key?      6.726M (± 0.2%) i/s -     33.640M in   5.001859s

Comparison:
           Hash#key?:  6725528.6 i/s
  Hash#keys.include?:    10474.3 i/s - 642.10x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     2.929k i/100ms
            Hash#[]=     7.348k i/100ms
Calculating -------------------------------------
         Hash#merge!     29.281k (± 0.8%) i/s -    146.450k in   5.001905s
            Hash#[]=     73.987k (± 0.7%) i/s -    374.748k in   5.065313s

Comparison:
            Hash#[]=:    73987.3 i/s
         Hash#merge!:    29280.7 i/s - 2.53x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.719k i/100ms
      Hash#merge({})     2.938k i/100ms
 Hash#dup#merge!({})     2.103k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         37.102k (± 0.4%) i/s -    185.950k in   5.011957s
      Hash#merge({})     29.128k (± 0.8%) i/s -    146.900k in   5.043621s
 Hash#dup#merge!({})     20.938k (± 0.1%) i/s -    105.150k in   5.021909s

Comparison:
{}#merge!(Hash) do end:    37101.9 i/s
      Hash#merge({}):    29127.7 i/s - 1.27x  (± 0.00) slower
 Hash#dup#merge!({}):    20938.3 i/s - 1.77x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   273.805k i/100ms
          Hash#merge   247.999k i/100ms
Calculating -------------------------------------
        Hash#**other      2.734M (± 0.9%) i/s -     13.690M in   5.007943s
          Hash#merge      2.527M (± 1.1%) i/s -     12.648M in   5.006397s

Comparison:
        Hash#**other:  2733913.7 i/s
          Hash#merge:  2526669.7 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.102k i/100ms
         Hash#merge!     2.758k i/100ms
Calculating -------------------------------------
          Hash#merge     10.767k (± 1.4%) i/s -     53.998k in   5.016397s
         Hash#merge!     27.973k (± 1.9%) i/s -    140.658k in   5.030251s

Comparison:
         Hash#merge!:    27972.7 i/s
          Hash#merge:    10766.6 i/s - 2.60x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      316.226k i/100ms
Array#each             170.764k i/100ms
Array#each_w/_object   118.005k i/100ms
Hash#select-include     56.712k i/100ms
Calculating -------------------------------------
Hash#native-slice         3.141M (± 0.5%) i/s -     15.811M in   5.033190s
Array#each                1.707M (± 0.4%) i/s -      8.538M in   5.003199s
Array#each_w/_object      1.209M (± 0.8%) i/s -      6.136M in   5.075340s
Hash#select-include     568.211k (± 0.2%) i/s -      2.892M in   5.090225s

Comparison:
Hash#native-slice   :  3141477.7 i/s
Array#each          :  1706571.2 i/s - 1.84x  (± 0.00) slower
Array#each_w/_object:  1209112.9 i/s - 2.60x  (± 0.00) slower
Hash#select-include :   568211.3 i/s - 5.53x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.315k i/100ms
         Hash#value?     1.205k i/100ms
Calculating -------------------------------------
Hash#values.include?     13.062k (± 4.7%) i/s -     65.750k in   5.047626s
         Hash#value?     12.058k (± 0.2%) i/s -     61.455k in   5.096828s

Comparison:
Hash#values.include?:    13061.9 i/s
         Hash#value?:    12057.6 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
                call   522.658k i/100ms
                send   347.834k i/100ms
      method_missing   268.303k i/100ms
Calculating -------------------------------------
                call      5.174M (± 6.6%) i/s -     26.133M in   5.079618s
                send      3.493M (± 0.2%) i/s -     17.740M in   5.079244s
      method_missing      2.659M (± 0.1%) i/s -     13.415M in   5.045869s

Comparison:
                call:  5174242.5 i/s
                send:  3492563.4 i/s - 1.48x  (± 0.00) slower
      method_missing:  2658642.4 i/s - 1.95x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
               Block     6.850k i/100ms
      Symbol#to_proc     7.934k i/100ms
Calculating -------------------------------------
               Block     69.153k (± 0.2%) i/s -    349.350k in   5.051860s
      Symbol#to_proc     79.380k (± 0.8%) i/s -    404.634k in   5.097795s

Comparison:
      Symbol#to_proc:    79379.9 i/s
               Block:    69153.0 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          block.call   808.450k i/100ms
       block + yield   859.488k i/100ms
        unused block     1.095M i/100ms
               yield     1.048M i/100ms
Calculating -------------------------------------
          block.call      8.062M (± 0.3%) i/s -     40.422M in   5.013988s
       block + yield      8.573M (± 0.5%) i/s -     42.974M in   5.013071s
        unused block     10.946M (± 0.5%) i/s -     54.753M in   5.002325s
               yield     10.458M (± 0.2%) i/s -     52.416M in   5.012034s

Comparison:
        unused block: 10945804.9 i/s
               yield: 10458091.0 i/s - 1.05x  (± 0.00) slower
       block + yield:  8572676.9 i/s - 1.28x  (± 0.00) slower
          block.call:  8062007.3 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   242.807k i/100ms
      range#include?     8.103k i/100ms
       range#member?     8.182k i/100ms
       plain compare   357.690k i/100ms
Calculating -------------------------------------
        range#cover?      2.426M (± 0.2%) i/s -     12.140M in   5.005102s
      range#include?     81.789k (± 0.8%) i/s -    413.253k in   5.053047s
       range#member?     82.263k (± 1.1%) i/s -    417.282k in   5.073168s
       plain compare      3.575M (± 0.2%) i/s -     17.884M in   5.002987s

Comparison:
       plain compare:  3574776.6 i/s
        range#cover?:  2425609.7 i/s - 1.47x  (± 0.00) slower
       range#member?:    82263.2 i/s - 43.46x  (± 0.00) slower
      range#include?:    81788.6 i/s - 43.71x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
       String#match?   750.452k i/100ms
           String#=~   482.341k i/100ms
          Regexp#===   437.904k i/100ms
        String#match   328.930k i/100ms
Calculating -------------------------------------
       String#match?      7.501M (± 0.1%) i/s -     37.523M in   5.002026s
           String#=~      4.727M (± 0.7%) i/s -     24.117M in   5.102376s
          Regexp#===      4.352M (± 0.4%) i/s -     21.895M in   5.031321s
        String#match      3.278M (± 0.2%) i/s -     16.446M in   5.016499s

Comparison:
       String#match?:  7501482.7 i/s
           String#=~:  4726859.4 i/s - 1.59x  (± 0.00) slower
          Regexp#===:  4351838.7 i/s - 1.72x  (± 0.00) slower
        String#match:  3278490.7 i/s - 2.29x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   501.367k i/100ms
      String#casecmp   644.697k i/100ms
Calculating -------------------------------------
String#downcase + ==      5.027M (± 0.3%) i/s -     25.570M in   5.086981s
      String#casecmp      6.427M (± 0.3%) i/s -     32.235M in   5.015874s

Comparison:
      String#casecmp:  6426634.8 i/s
String#downcase + ==:  5026544.0 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
            String#+   445.397k i/100ms
       String#concat   466.451k i/100ms
       String#append   512.413k i/100ms
         "foo" "bar"   995.821k i/100ms
  "#{'foo'}#{'bar'}"   956.394k i/100ms
Calculating -------------------------------------
            String#+      4.447M (± 0.4%) i/s -     22.270M in   5.008082s
       String#concat      4.659M (± 0.3%) i/s -     23.323M in   5.005756s
       String#append      5.112M (± 0.4%) i/s -     25.621M in   5.011826s
         "foo" "bar"      9.912M (± 0.8%) i/s -     49.791M in   5.023730s
  "#{'foo'}#{'bar'}"      9.543M (± 0.2%) i/s -     47.820M in   5.011059s

Comparison:
         "foo" "bar":  9911742.9 i/s
  "#{'foo'}#{'bar'}":  9542878.5 i/s - 1.04x  (± 0.00) slower
       String#append:  5112120.1 i/s - 1.94x  (± 0.00) slower
       String#concat:  4659196.0 i/s - 2.13x  (± 0.00) slower
            String#+:  4446857.5 i/s - 2.23x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#+@   783.574k i/100ms
          String#dup   438.560k i/100ms
Calculating -------------------------------------
           String#+@      7.877M (± 0.4%) i/s -     39.962M in   5.073505s
          String#dup      4.385M (± 0.2%) i/s -     21.928M in   5.001182s

Comparison:
           String#+@:  7876793.8 i/s
          String#dup:  4384579.2 i/s - 1.80x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   144.536k i/100ms
       String#match?   332.849k i/100ms
    String#end_with?   481.675k i/100ms
Calculating -------------------------------------
           String#=~      1.444M (± 0.5%) i/s -      7.227M in   5.003753s
       String#match?      3.347M (± 0.1%) i/s -     16.975M in   5.072536s
    String#end_with?      4.804M (± 0.9%) i/s -     24.084M in   5.013257s

Comparison:
    String#end_with?:  4804407.6 i/s
       String#match?:  3346513.4 i/s - 1.44x  (± 0.00) slower
           String#=~:  1444314.5 i/s - 3.33x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    76.286k i/100ms
          String#sub    97.670k i/100ms
String#dup["string"]=
                       117.159k i/100ms
Calculating -------------------------------------
         String#gsub    776.119k (± 0.3%) i/s -      3.891M in   5.012930s
          String#sub    973.533k (± 1.4%) i/s -      4.884M in   5.017264s
String#dup["string"]=
                          1.184M (± 0.2%) i/s -      5.975M in   5.047050s

Comparison:
String#dup["string"]=:  1183885.5 i/s
          String#sub:   973533.5 i/s - 1.22x  (± 0.00) slower
         String#gsub:   776119.1 i/s - 1.53x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    69.073k i/100ms
           String#tr   278.310k i/100ms
Calculating -------------------------------------
         String#gsub    687.526k (± 0.1%) i/s -      3.454M in   5.023311s
           String#tr      2.779M (± 0.4%) i/s -     13.916M in   5.007947s

Comparison:
           String#tr:  2778722.0 i/s
         String#gsub:   687525.9 i/s - 4.04x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   934.680k i/100ms
         With Freeze     1.458M i/100ms
Calculating -------------------------------------
      Without Freeze      9.362M (± 0.1%) i/s -     47.669M in   5.091786s
         With Freeze     14.605M (± 0.2%) i/s -     74.366M in   5.091914s

Comparison:
         With Freeze: 14604836.7 i/s
      Without Freeze:  9361885.8 i/s - 1.56x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.564k i/100ms
      String#squeeze   132.975k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     25.659k (± 0.4%) i/s -    130.764k in   5.096324s
      String#squeeze      1.330M (± 0.1%) i/s -      6.782M in   5.099430s

Comparison:
      String#squeeze:  1329900.6 i/s
 String#gsub/regex+/:    25658.9 i/s - 51.83x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
           String#=~   209.996k i/100ms
       String#match?   608.374k i/100ms
  String#start_with?   710.858k i/100ms
Calculating -------------------------------------
           String#=~      2.142M (± 0.3%) i/s -     10.710M in   5.000027s
       String#match?      6.087M (± 0.1%) i/s -     31.027M in   5.097075s
  String#start_with?      7.085M (± 0.1%) i/s -     35.543M in   5.016781s

Comparison:
  String#start_with?:  7084809.5 i/s
       String#match?:  6087232.9 i/s - 1.16x  (± 0.00) slower
           String#=~:  2141965.3 i/s - 3.31x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   185.283k i/100ms
    String#[0, n] ==    67.949k i/100ms
   String#[RANGE] ==    61.080k i/100ms
   String#[0...n] ==    35.410k i/100ms
Calculating -------------------------------------
  String#start_with?      1.848M (± 0.3%) i/s -      9.264M in   5.012344s
    String#[0, n] ==    678.424k (± 0.3%) i/s -      3.397M in   5.007906s
   String#[RANGE] ==    609.605k (± 0.7%) i/s -      3.054M in   5.010048s
   String#[0...n] ==    350.999k (± 0.1%) i/s -      1.770M in   5.044182s

Comparison:
  String#start_with?:  1848288.0 i/s
    String#[0, n] ==:   678424.4 i/s - 2.72x  (± 0.00) slower
   String#[RANGE] ==:   609605.5 i/s - 3.03x  (± 0.00) slower
   String#[0...n] ==:   350998.8 i/s - 5.27x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   114.660k i/100ms
 String#sub!'string'    87.929k i/100ms
String#gsub!'string'    57.115k i/100ms
  String#[/regexp/]=   107.312k i/100ms
 String#sub!/regexp/    84.720k i/100ms
String#gsub!/regexp/    45.516k i/100ms
Calculating -------------------------------------
  String#['string']=      1.163M (± 0.7%) i/s -      5.848M in   5.027021s
 String#sub!'string'    911.328k (± 0.5%) i/s -      4.572M in   5.017341s
String#gsub!'string'    574.683k (± 0.5%) i/s -      2.913M in   5.068759s
  String#[/regexp/]=      1.074M (± 0.8%) i/s -      5.473M in   5.095468s
 String#sub!/regexp/    858.850k (± 0.5%) i/s -      4.321M in   5.030956s
String#gsub!/regexp/    450.136k (± 0.3%) i/s -      2.276M in   5.055844s

Comparison:
  String#['string']=:  1163300.8 i/s
  String#[/regexp/]=:  1074154.4 i/s - 1.08x  (± 0.00) slower
 String#sub!'string':   911327.5 i/s - 1.28x  (± 0.00) slower
 String#sub!/regexp/:   858849.7 i/s - 1.35x  (± 0.00) slower
String#gsub!'string':   574683.0 i/s - 2.02x  (± 0.00) slower
String#gsub!/regexp/:   450136.2 i/s - 2.58x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
          String#sub   109.668k i/100ms
        String#chomp   419.282k i/100ms
String#delete_suffix   465.541k i/100ms
Calculating -------------------------------------
          String#sub      1.094M (± 2.5%) i/s -      5.483M in   5.016026s
        String#chomp      4.188M (± 0.3%) i/s -     20.964M in   5.005845s
String#delete_suffix      4.659M (± 0.1%) i/s -     23.743M in   5.096260s

Comparison:
String#delete_suffix:  4658832.5 i/s
        String#chomp:  4187967.8 i/s - 1.11x  (± 0.00) slower
          String#sub:  1093867.0 i/s - 4.26x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   482.633k i/100ms
          String#sub   113.712k i/100ms
Calculating -------------------------------------
String#delete_prefix      4.824M (± 0.2%) i/s -     24.132M in   5.002714s
          String#sub      1.124M (± 3.0%) i/s -      5.686M in   5.062298s

Comparison:
String#delete_prefix:  4823729.5 i/s
          String#sub:  1124161.4 i/s - 4.29x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   452.839k i/100ms
    String#unpack[0]   341.893k i/100ms
Calculating -------------------------------------
      String#unpack1      4.529M (± 0.6%) i/s -     23.095M in   5.099068s
    String#unpack[0]      3.485M (± 0.5%) i/s -     17.437M in   5.004055s

Comparison:
      String#unpack1:  4529410.4 i/s
    String#unpack[0]:  3484587.3 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    22.070k i/100ms
          Time.parse     7.472k i/100ms
Calculating -------------------------------------
        Time.iso8601    220.002k (± 0.5%) i/s -      1.104M in   5.015980s
          Time.parse     74.506k (± 0.5%) i/s -    373.600k in   5.014517s

Comparison:
        Time.iso8601:   220002.0 i/s
          Time.parse:    74505.5 i/s - 2.95x  (± 0.00) slower

