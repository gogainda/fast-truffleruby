$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       771.655k i/100ms
Function with splat arguments
                        22.991k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.767M (± 0.4%) i/s -     39.354M in   5.067000s
Function with splat arguments
                        237.197k (± 6.9%) i/s -      1.196M in   5.072190s

Comparison:
Function with single Array argument:  7766954.6 i/s
Function with splat arguments:   237197.1 i/s - 32.74x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   976.902k i/100ms
Sequential Assignment
                         1.013M i/100ms
Calculating -------------------------------------
 Parallel Assignment      9.762M (± 0.3%) i/s -     48.845M in   5.003735s
Sequential Assignment
                         10.168M (± 0.3%) i/s -     51.650M in   5.079507s

Comparison:
Sequential Assignment: 10168377.8 i/s
 Parallel Assignment:  9761803.3 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   467.489k i/100ms
       attr_accessor   547.062k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.676M (± 0.4%) i/s -     23.842M in   5.099160s
       attr_accessor      5.391M (± 1.6%) i/s -     27.353M in   5.075598s

Comparison:
       attr_accessor:  5390700.5 i/s
   getter_and_setter:  4675753.7 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    88.191k i/100ms
         respond_to?   781.585k i/100ms
Calculating -------------------------------------
      begin...rescue    889.000k (± 0.8%) i/s -      4.498M in   5.059677s
         respond_to?      7.804M (± 0.3%) i/s -     39.079M in   5.007841s

Comparison:
         respond_to?:  7803664.6 i/s
      begin...rescue:   889000.0 i/s - 8.78x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              normal   295.349k i/100ms
             &method   124.815k i/100ms
Calculating -------------------------------------
              normal      2.959M (± 0.4%) i/s -     15.063M in   5.090006s
             &method      1.244M (± 3.1%) i/s -      6.241M in   5.021593s

Comparison:
              normal:  2959326.9 i/s
             &method:  1244203.5 i/s - 2.38x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       226.000  i/100ms
       define_method   286.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.163k (±21.4%) i/s -      9.492k in   5.014456s
       define_method      3.241k (±20.6%) i/s -     15.730k in   5.425631s

Comparison:
       define_method:     3241.3 i/s
module_eval with string:     2162.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Float#round   252.099k i/100ms
       Kernel#format   200.109k i/100ms
            String#%   170.818k i/100ms
Calculating -------------------------------------
         Float#round      2.514M (± 0.2%) i/s -     12.605M in   5.014342s
       Kernel#format      1.997M (± 0.4%) i/s -     10.005M in   5.009330s
            String#%      1.704M (± 2.5%) i/s -      8.541M in   5.016770s

Comparison:
         Float#round:  2513792.7 i/s
       Kernel#format:  1997396.5 i/s - 1.26x  (± 0.00) slower
            String#%:  1703671.0 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash   920.788k i/100ms
          OpenStruct   503.883k i/100ms
Calculating -------------------------------------
                Hash      9.170M (± 1.7%) i/s -     46.039M in   5.021973s
          OpenStruct      5.005M (± 1.6%) i/s -     25.194M in   5.035664s

Comparison:
                Hash:  9170441.9 i/s
          OpenStruct:  5004572.9 i/s - 1.83x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.077M i/100ms
          OpenStruct     9.511k i/100ms
Calculating -------------------------------------
                Hash     10.768M (± 0.5%) i/s -     53.861M in   5.002033s
          OpenStruct     92.461k (± 2.7%) i/s -    466.039k in   5.044281s

Comparison:
                Hash: 10768141.8 i/s
          OpenStruct:    92460.8 i/s - 116.46x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   584.903k i/100ms
  ancestors.include?   118.950k i/100ms
Calculating -------------------------------------
  less than or equal      5.914M (± 1.2%) i/s -     29.830M in   5.044741s
  ancestors.include?      1.187M (± 1.5%) i/s -      5.948M in   5.012671s

Comparison:
  less than or equal:  5913962.7 i/s
  ancestors.include?:  1186753.9 i/s - 4.98x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.841  (± 0.0%) i/s -      5.000  in   5.951276s
         Kernel loop      0.228  (± 0.0%) i/s -      2.000  in   8.780733s

Comparison:
          While Loop:        0.8 i/s
         Kernel loop:        0.2 i/s - 3.69x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.553M i/100ms
         Array#first     1.332M i/100ms
Calculating -------------------------------------
           Array#[0]     15.622M (± 0.4%) i/s -     79.208M in   5.070317s
         Array#first     13.312M (± 0.3%) i/s -     66.582M in   5.001665s

Comparison:
           Array#[0]: 15622082.4 i/s
         Array#first: 13312146.5 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.544M i/100ms
          Array#last     1.332M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.554M (± 0.3%) i/s -     78.768M in   5.064232s
          Array#last     13.310M (± 0.2%) i/s -     66.598M in   5.003634s

Comparison:
          Array#[-1]: 15553929.9 i/s
          Array#last: 13310097.9 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    99.685k i/100ms
Calculating -------------------------------------
                find      0.276  (± 0.0%) i/s -      2.000  in   7.237719s
             bsearch    998.299k (± 0.9%) i/s -      5.084M in   5.093031s

Comparison:
             bsearch:   998299.1 i/s
                find:        0.3 i/s - 3612703.68x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    19.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    195.863  (± 2.6%) i/s -    988.000  in   5.047786s
        Array#insert      1.445  (± 0.0%) i/s -      8.000  in   5.536967s

Comparison:
       Array#unshift:      195.9 i/s
        Array#insert:        1.4 i/s - 135.55x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.080M i/100ms
          Array#size     2.102M i/100ms
         Array#count     1.624M i/100ms
Calculating -------------------------------------
        Array#length     20.903M (± 0.3%) i/s -    106.066M in   5.074101s
          Array#size     21.080M (± 0.3%) i/s -    107.209M in   5.085884s
         Array#count     16.160M (± 0.4%) i/s -     81.206M in   5.025285s

Comparison:
          Array#size: 21079788.3 i/s
        Array#length: 20903493.5 i/s - 1.01x  (± 0.00) slower
         Array#count: 16159750.4 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.657k i/100ms
        Array#sample     1.041M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    456.144k (± 0.4%) i/s -      2.283M in   5.004772s
        Array#sample     10.443M (± 0.1%) i/s -     53.091M in   5.083885s

Comparison:
        Array#sample: 10442993.7 i/s
 Array#shuffle.first:   456143.6 i/s - 22.89x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    64.367k i/100ms
          Date.parse    32.186k i/100ms
Calculating -------------------------------------
        Date.iso8601    637.558k (± 1.8%) i/s -      3.218M in   5.049591s
          Date.parse    322.984k (± 0.4%) i/s -      1.641M in   5.082344s

Comparison:
        Date.iso8601:   637557.6 i/s
          Date.parse:   322983.7 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.317k i/100ms
           Array#map    25.236k i/100ms
Calculating -------------------------------------
   Array#each + push    183.523k (± 0.6%) i/s -    934.167k in   5.090377s
           Array#map    251.217k (± 1.5%) i/s -      1.262M in   5.023876s

Comparison:
           Array#map:   251217.4 i/s
   Array#each + push:   183522.6 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            For loop    29.860k i/100ms
               #each    32.691k i/100ms
Calculating -------------------------------------
            For loop    298.449k (± 0.6%) i/s -      1.493M in   5.002690s
               #each    327.100k (± 0.4%) i/s -      1.667M in   5.097124s

Comparison:
               #each:   327099.6 i/s
            For loop:   298449.2 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop    28.434k i/100ms
     each_with_index    19.301k i/100ms
Calculating -------------------------------------
          While Loop    275.253k (± 0.6%) i/s -      1.393M in   5.061957s
     each_with_index    193.028k (± 1.3%) i/s -    965.050k in   5.000474s

Comparison:
          While Loop:   275252.6 i/s
     each_with_index:   193028.2 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    93.117k i/100ms
      inject to_proc     2.213k i/100ms
        inject block     2.148k i/100ms
Calculating -------------------------------------
       inject symbol      1.137M (±15.7%) i/s -      5.587M in   5.042862s
      inject to_proc     22.146k (± 0.2%) i/s -    112.863k in   5.096341s
        inject block     21.610k (± 0.5%) i/s -    109.548k in   5.069405s

Comparison:
       inject symbol:  1137037.8 i/s
      inject to_proc:    22146.0 i/s - 51.34x  (± 0.00) slower
        inject block:    21610.2 i/s - 52.62x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.829k i/100ms
   Array#map.flatten     3.982k i/100ms
      Array#flat_map     9.564k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     68.549k (± 0.9%) i/s -    348.279k in   5.081069s
   Array#map.flatten     39.470k (± 4.1%) i/s -    199.100k in   5.054672s
      Array#flat_map     96.193k (± 0.7%) i/s -    487.764k in   5.070888s

Comparison:
      Array#flat_map:    96193.4 i/s
Array#map.flatten(1):    68549.4 i/s - 1.40x  (± 0.00) slower
   Array#map.flatten:    39469.6 i/s - 2.44x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    31.090k i/100ms
  Array#reverse_each    32.226k i/100ms
Calculating -------------------------------------
  Array#reverse.each    311.421k (± 0.4%) i/s -      1.586M in   5.091552s
  Array#reverse_each    321.875k (± 0.8%) i/s -      1.611M in   5.006321s

Comparison:
  Array#reverse_each:   321875.3 i/s
  Array#reverse.each:   311420.6 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.892k i/100ms
   Enumerable#detect    81.252k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        208.188k (± 0.6%) i/s -      4.178M in  20.071177s
   Enumerable#detect    822.432k (± 0.9%) i/s -     16.494M in  20.057139s

Comparison:
   Enumerable#detect:   822432.4 i/s
Enumerable#select.first:   208187.7 i/s - 3.95x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       246.150k i/100ms
Enumerable#select.last
                        19.074k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.431M (± 1.8%) i/s -     12.308M in   5.065298s
Enumerable#select.last
                        189.875k (± 0.7%) i/s -    953.700k in   5.023027s

Comparison:
Enumerable#reverse.detect:  2430615.6 i/s
Enumerable#select.last:   189874.8 i/s - 12.80x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.923k i/100ms
  Enumerable#sort_by     4.769k i/100ms
     Enumerable#sort     2.376k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         49.405k (± 1.1%) i/s -    251.073k in   5.082545s
  Enumerable#sort_by     48.622k (± 1.5%) i/s -    247.988k in   5.101465s
     Enumerable#sort     23.238k (± 0.6%) i/s -    116.424k in   5.010342s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    49405.3 i/s
  Enumerable#sort_by:    48622.3 i/s - same-ish: difference falls within error
     Enumerable#sort:    23237.6 i/s - 2.13x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.522k i/100ms
Enumerable#sort_by...first
                         8.675k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    175.133k (± 0.5%) i/s -    876.100k in   5.002598s
Enumerable#sort_by...first
                         87.706k (± 0.8%) i/s -    442.425k in   5.044712s

Comparison:
   Enumerable#min_by:   175133.3 i/s
Enumerable#sort_by...first:    87706.0 i/s - 2.00x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   418.364k i/100ms
            Hash#dup   290.107k i/100ms
Calculating -------------------------------------
              Hash[]      3.902M (± 1.4%) i/s -     19.663M in   5.039535s
            Hash#dup      2.834M (± 1.7%) i/s -     14.215M in   5.017635s

Comparison:
              Hash[]:  3902497.5 i/s
            Hash#dup:  2833854.9 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.394M i/100ms
  Hash#fetch, symbol     1.144M i/100ms
     Hash#[], string     1.243M i/100ms
  Hash#fetch, string   792.531k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     13.947M (± 0.8%) i/s -     71.114M in   5.099249s
  Hash#fetch, symbol     11.341M (± 0.4%) i/s -     57.215M in   5.044964s
     Hash#[], string     12.476M (± 0.4%) i/s -     63.414M in   5.083024s
  Hash#fetch, string      7.957M (± 0.5%) i/s -     40.419M in   5.079741s

Comparison:
     Hash#[], symbol: 13946847.9 i/s
     Hash#[], string: 12475884.6 i/s - 1.12x  (± 0.00) slower
  Hash#fetch, symbol: 11341250.1 i/s - 1.23x  (± 0.00) slower
  Hash#fetch, string:  7957097.8 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   881.753k i/100ms
             Hash#[]     1.039M i/100ms
          Hash#[] ||   898.866k i/100ms
          Hash#[] &&   414.792k i/100ms
          Hash#fetch   607.431k i/100ms
 Hash#fetch fallback   394.156k i/100ms
Calculating -------------------------------------
            Hash#dig      8.631M (± 1.0%) i/s -     43.206M in   5.006642s
             Hash#[]     10.405M (± 0.5%) i/s -     52.980M in   5.091978s
          Hash#[] ||      9.178M (± 0.7%) i/s -     46.741M in   5.092864s
          Hash#[] &&      3.850M (± 3.8%) i/s -     19.495M in   5.069827s
          Hash#fetch      5.997M (± 0.7%) i/s -     30.372M in   5.064629s
 Hash#fetch fallback      3.826M (± 0.9%) i/s -     19.314M in   5.047830s

Comparison:
             Hash#[]: 10404899.8 i/s
          Hash#[] ||:  9178171.9 i/s - 1.13x  (± 0.00) slower
            Hash#dig:  8630644.3 i/s - 1.21x  (± 0.00) slower
          Hash#fetch:  5997101.2 i/s - 1.73x  (± 0.00) slower
          Hash#[] &&:  3850483.0 i/s - 2.70x  (± 0.00) slower
 Hash#fetch fallback:  3826406.4 i/s - 2.72x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.448M i/100ms
  Hash#fetch + block     1.453M i/100ms
    Hash#fetch + arg     1.098M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.623M (± 0.9%) i/s -     73.832M in   5.049215s
  Hash#fetch + block     14.545M (± 0.6%) i/s -     74.088M in   5.093931s
    Hash#fetch + arg     10.860M (± 0.4%) i/s -     54.913M in   5.056343s

Comparison:
  Hash#fetch + const: 14623499.2 i/s
  Hash#fetch + block: 14544879.0 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 10860374.0 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.277k i/100ms
         sort + to_h    10.981k i/100ms
Calculating -------------------------------------
      sort_by + to_h    275.296k (± 0.9%) i/s -      1.391M in   5.053584s
         sort + to_h    110.484k (± 1.1%) i/s -    560.031k in   5.069511s

Comparison:
      sort_by + to_h:   275295.7 i/s
         sort + to_h:   110484.2 i/s - 2.49x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   192.008k i/100ms
       Hash#each_key   200.883k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.916M (± 0.5%) i/s -      9.600M in   5.010963s
       Hash#each_key      1.997M (± 0.6%) i/s -     10.044M in   5.030304s

Comparison:
       Hash#each_key:  1996808.3 i/s
      Hash#keys.each:  1915935.7 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     5.839k i/100ms
           Hash#key?   922.607k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     58.111k (± 5.5%) i/s -    291.950k in   5.048026s
           Hash#key?      9.270M (± 1.7%) i/s -     47.053M in   5.077382s

Comparison:
           Hash#key?:  9269999.6 i/s
  Hash#keys.include?:    58110.8 i/s - 159.52x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.010k i/100ms
            Hash#[]=    10.314k i/100ms
Calculating -------------------------------------
         Hash#merge!     39.851k (± 0.8%) i/s -    200.500k in   5.031614s
            Hash#[]=    102.194k (± 0.9%) i/s -    515.700k in   5.046706s

Comparison:
            Hash#[]=:   102194.0 i/s
         Hash#merge!:    39850.9 i/s - 2.56x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.843k i/100ms
      Hash#merge({})     3.948k i/100ms
 Hash#dup#merge!({})     2.868k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         46.351k (± 0.7%) i/s -    232.464k in   5.015618s
      Hash#merge({})     38.996k (± 1.6%) i/s -    197.400k in   5.063602s
 Hash#dup#merge!({})     28.491k (± 0.7%) i/s -    143.400k in   5.033461s

Comparison:
{}#merge!(Hash) do end:    46350.6 i/s
      Hash#merge({}):    38995.5 i/s - 1.19x  (± 0.00) slower
 Hash#dup#merge!({}):    28490.7 i/s - 1.63x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   391.293k i/100ms
          Hash#merge   368.874k i/100ms
Calculating -------------------------------------
        Hash#**other      3.918M (± 0.5%) i/s -     19.956M in   5.092990s
          Hash#merge      3.670M (± 0.6%) i/s -     18.444M in   5.025701s

Comparison:
        Hash#**other:  3918399.1 i/s
          Hash#merge:  3670023.4 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.486k i/100ms
         Hash#merge!     3.924k i/100ms
Calculating -------------------------------------
          Hash#merge     15.023k (± 4.0%) i/s -     75.786k in   5.053163s
         Hash#merge!     39.305k (± 0.7%) i/s -    200.124k in   5.091835s

Comparison:
         Hash#merge!:    39304.6 i/s
          Hash#merge:    15022.5 i/s - 2.62x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      418.428k i/100ms
Array#each             228.121k i/100ms
Array#each_w/_object   176.647k i/100ms
Hash#select-include     68.874k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.128M (± 0.4%) i/s -     20.921M in   5.068812s
Array#each                2.287M (± 0.8%) i/s -     11.634M in   5.086807s
Array#each_w/_object      1.742M (± 0.5%) i/s -      8.832M in   5.070478s
Hash#select-include     684.499k (± 1.9%) i/s -      3.444M in   5.032760s

Comparison:
Hash#native-slice   :  4127534.9 i/s
Array#each          :  2287269.5 i/s - 1.80x  (± 0.00) slower
Array#each_w/_object:  1741965.1 i/s - 2.37x  (± 0.00) slower
Hash#select-include :   684499.0 i/s - 6.03x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.926k i/100ms
         Hash#value?     1.690k i/100ms
Calculating -------------------------------------
Hash#values.include?     19.173k (± 3.8%) i/s -     96.300k in   5.031569s
         Hash#value?     16.929k (± 0.7%) i/s -     86.190k in   5.091648s

Comparison:
Hash#values.include?:    19173.3 i/s
         Hash#value?:    16928.6 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                call   661.923k i/100ms
                send   512.320k i/100ms
      method_missing   395.250k i/100ms
Calculating -------------------------------------
                call      6.675M (± 0.7%) i/s -     33.758M in   5.057325s
                send      5.151M (± 0.4%) i/s -     26.128M in   5.072246s
      method_missing      3.896M (± 0.5%) i/s -     19.762M in   5.072716s

Comparison:
                call:  6675458.1 i/s
                send:  5151333.1 i/s - 1.30x  (± 0.00) slower
      method_missing:  3895950.0 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
               Block     9.072k i/100ms
      Symbol#to_proc    10.331k i/100ms
Calculating -------------------------------------
               Block     91.085k (± 0.5%) i/s -    462.672k in   5.079696s
      Symbol#to_proc    103.012k (± 0.6%) i/s -    516.550k in   5.014640s

Comparison:
      Symbol#to_proc:   103011.6 i/s
               Block:    91085.1 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          block.call   933.998k i/100ms
       block + yield   984.912k i/100ms
        unused block     1.275M i/100ms
               yield     1.171M i/100ms
Calculating -------------------------------------
          block.call      9.346M (± 0.3%) i/s -     47.634M in   5.096922s
       block + yield      9.841M (± 0.4%) i/s -     49.246M in   5.004046s
        unused block     12.861M (± 0.3%) i/s -     65.012M in   5.055069s
               yield     11.732M (± 0.2%) i/s -     59.736M in   5.091650s

Comparison:
        unused block: 12860817.7 i/s
               yield: 11732203.7 i/s - 1.10x  (± 0.00) slower
       block + yield:  9841298.9 i/s - 1.31x  (± 0.00) slower
          block.call:  9345700.2 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   325.346k i/100ms
      range#include?    12.107k i/100ms
       range#member?    12.056k i/100ms
       plain compare   524.550k i/100ms
Calculating -------------------------------------
        range#cover?      3.242M (± 0.7%) i/s -     16.267M in   5.018277s
      range#include?    123.252k (± 0.4%) i/s -    617.457k in   5.009779s
       range#member?    123.033k (± 1.3%) i/s -    626.912k in   5.096465s
       plain compare      5.251M (± 0.3%) i/s -     26.752M in   5.094796s

Comparison:
       plain compare:  5250902.8 i/s
        range#cover?:  3241747.7 i/s - 1.62x  (± 0.00) slower
      range#include?:   123252.0 i/s - 42.60x  (± 0.00) slower
       range#member?:   123032.5 i/s - 42.68x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       String#match?   910.576k i/100ms
           String#=~   646.062k i/100ms
          Regexp#===   566.551k i/100ms
        String#match   464.769k i/100ms
Calculating -------------------------------------
       String#match?      9.116M (± 0.4%) i/s -     46.439M in   5.094078s
           String#=~      6.373M (± 0.3%) i/s -     32.303M in   5.068486s
          Regexp#===      5.638M (± 1.9%) i/s -     28.328M in   5.026139s
        String#match      4.690M (± 0.4%) i/s -     23.703M in   5.054172s

Comparison:
       String#match?:  9116468.2 i/s
           String#=~:  6373385.4 i/s - 1.43x  (± 0.00) slower
          Regexp#===:  5638125.8 i/s - 1.62x  (± 0.00) slower
        String#match:  4689899.7 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   655.491k i/100ms
      String#casecmp   777.710k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.521M (± 0.5%) i/s -     32.775M in   5.025816s
      String#casecmp      7.776M (± 0.6%) i/s -     38.886M in   5.000624s

Comparison:
      String#casecmp:  7776370.7 i/s
String#downcase + ==:  6521411.8 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            String#+   597.047k i/100ms
       String#concat   624.104k i/100ms
       String#append   676.305k i/100ms
         "foo" "bar"     1.155M i/100ms
  "#{'foo'}#{'bar'}"     1.154M i/100ms
Calculating -------------------------------------
            String#+      5.952M (± 0.3%) i/s -     29.852M in   5.015723s
       String#concat      6.247M (± 0.5%) i/s -     31.829M in   5.095027s
       String#append      6.788M (± 0.4%) i/s -     34.492M in   5.081611s
         "foo" "bar"     11.571M (± 0.3%) i/s -     58.913M in   5.091599s
  "#{'foo'}#{'bar'}"     11.566M (± 0.4%) i/s -     58.841M in   5.087665s

Comparison:
         "foo" "bar": 11570793.3 i/s
  "#{'foo'}#{'bar'}": 11565502.7 i/s - same-ish: difference falls within error
       String#append:  6787623.8 i/s - 1.70x  (± 0.00) slower
       String#concat:  6247264.2 i/s - 1.85x  (± 0.00) slower
            String#+:  5951798.1 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#+@     1.009M i/100ms
          String#dup   581.536k i/100ms
Calculating -------------------------------------
           String#+@     10.130M (± 0.3%) i/s -     51.480M in   5.082042s
          String#dup      5.858M (± 0.3%) i/s -     29.658M in   5.063202s

Comparison:
           String#+@: 10129929.1 i/s
          String#dup:  5857666.2 i/s - 1.73x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   185.592k i/100ms
       String#match?   428.978k i/100ms
    String#end_with?   630.456k i/100ms
Calculating -------------------------------------
           String#=~      1.867M (± 2.4%) i/s -      9.465M in   5.073642s
       String#match?      4.288M (± 0.4%) i/s -     21.449M in   5.002666s
    String#end_with?      6.267M (± 0.5%) i/s -     31.523M in   5.029941s

Comparison:
    String#end_with?:  6267198.9 i/s
       String#match?:  4287551.7 i/s - 1.46x  (± 0.00) slower
           String#=~:  1866786.5 i/s - 3.36x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   112.905k i/100ms
          String#sub   139.727k i/100ms
String#dup["string"]=
                       186.021k i/100ms
Calculating -------------------------------------
         String#gsub      1.116M (± 1.2%) i/s -      5.645M in   5.058832s
          String#sub      1.349M (± 0.4%) i/s -      6.847M in   5.076620s
String#dup["string"]=
                          1.826M (± 0.5%) i/s -      9.301M in   5.094160s

Comparison:
String#dup["string"]=:  1825876.9 i/s
          String#sub:  1348684.5 i/s - 1.35x  (± 0.00) slower
         String#gsub:  1116068.0 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   105.879k i/100ms
           String#tr   343.263k i/100ms
Calculating -------------------------------------
         String#gsub      1.058M (± 0.7%) i/s -      5.294M in   5.003755s
           String#tr      3.436M (± 0.5%) i/s -     17.506M in   5.094677s

Comparison:
           String#tr:  3436301.4 i/s
         String#gsub:  1058042.1 i/s - 3.25x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.166M i/100ms
         With Freeze     1.688M i/100ms
Calculating -------------------------------------
      Without Freeze     11.681M (± 0.6%) i/s -     59.482M in   5.092553s
         With Freeze     16.846M (± 0.5%) i/s -     84.396M in   5.009987s

Comparison:
         With Freeze: 16846015.9 i/s
      Without Freeze: 11680704.0 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.216k i/100ms
      String#squeeze   151.902k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     32.398k (± 2.3%) i/s -    164.016k in   5.065091s
      String#squeeze      1.511M (± 1.3%) i/s -      7.595M in   5.028910s

Comparison:
      String#squeeze:  1510547.1 i/s
 String#gsub/regex+/:    32398.0 i/s - 46.62x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   279.558k i/100ms
       String#match?   760.011k i/100ms
  String#start_with?   868.211k i/100ms
Calculating -------------------------------------
           String#=~      2.822M (± 1.9%) i/s -     14.257M in   5.053450s
       String#match?      7.574M (± 1.6%) i/s -     38.001M in   5.018321s
  String#start_with?      8.673M (± 0.4%) i/s -     43.411M in   5.005266s

Comparison:
  String#start_with?:  8673139.9 i/s
       String#match?:  7574306.3 i/s - 1.15x  (± 0.00) slower
           String#=~:  2822478.4 i/s - 3.07x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   194.164k i/100ms
    String#[0, n] ==    80.345k i/100ms
   String#[RANGE] ==    75.068k i/100ms
   String#[0...n] ==    47.357k i/100ms
Calculating -------------------------------------
  String#start_with?      1.891M (± 0.7%) i/s -      9.514M in   5.030600s
    String#[0, n] ==    817.350k (± 0.8%) i/s -      4.098M in   5.013625s
   String#[RANGE] ==    750.753k (± 1.2%) i/s -      3.753M in   5.000214s
   String#[0...n] ==    470.210k (± 0.7%) i/s -      2.368M in   5.035991s

Comparison:
  String#start_with?:  1891335.9 i/s
    String#[0, n] ==:   817349.9 i/s - 2.31x  (± 0.00) slower
   String#[RANGE] ==:   750752.9 i/s - 2.52x  (± 0.00) slower
   String#[0...n] ==:   470209.8 i/s - 4.02x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   186.535k i/100ms
 String#sub!'string'   126.364k i/100ms
String#gsub!'string'    78.518k i/100ms
  String#[/regexp/]=   153.738k i/100ms
 String#sub!/regexp/   114.638k i/100ms
String#gsub!/regexp/    60.646k i/100ms
Calculating -------------------------------------
  String#['string']=      1.849M (± 0.6%) i/s -      9.327M in   5.043364s
 String#sub!'string'      1.233M (± 1.1%) i/s -      6.192M in   5.023265s
String#gsub!'string'    765.711k (± 0.9%) i/s -      3.847M in   5.025023s
  String#[/regexp/]=      1.500M (± 0.6%) i/s -      7.533M in   5.020897s
 String#sub!/regexp/      1.149M (± 0.4%) i/s -      5.847M in   5.086764s
String#gsub!/regexp/    605.927k (± 0.4%) i/s -      3.032M in   5.004484s

Comparison:
  String#['string']=:  1849378.9 i/s
  String#[/regexp/]=:  1500416.6 i/s - 1.23x  (± 0.00) slower
 String#sub!'string':  1232768.3 i/s - 1.50x  (± 0.00) slower
 String#sub!/regexp/:  1149383.8 i/s - 1.61x  (± 0.00) slower
String#gsub!'string':   765711.5 i/s - 2.42x  (± 0.00) slower
String#gsub!/regexp/:   605927.0 i/s - 3.05x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          String#sub   143.032k i/100ms
        String#chomp   552.490k i/100ms
String#delete_suffix   602.048k i/100ms
Calculating -------------------------------------
          String#sub      1.412M (± 0.6%) i/s -      7.152M in   5.065711s
        String#chomp      5.572M (± 0.4%) i/s -     28.177M in   5.056526s
String#delete_suffix      6.025M (± 0.6%) i/s -     30.704M in   5.096306s

Comparison:
String#delete_suffix:  6025101.6 i/s
        String#chomp:  5572495.2 i/s - 1.08x  (± 0.00) slower
          String#sub:  1411824.0 i/s - 4.27x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   625.267k i/100ms
          String#sub   146.933k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.223M (± 1.6%) i/s -     31.263M in   5.024961s
          String#sub      1.481M (± 0.6%) i/s -      7.494M in   5.061266s

Comparison:
String#delete_prefix:  6223471.5 i/s
          String#sub:  1480626.8 i/s - 4.20x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   621.137k i/100ms
    String#unpack[0]   472.099k i/100ms
Calculating -------------------------------------
      String#unpack1      6.222M (± 0.6%) i/s -     31.678M in   5.091378s
    String#unpack[0]      4.793M (± 0.8%) i/s -     24.077M in   5.023212s

Comparison:
      String#unpack1:  6222098.0 i/s
    String#unpack[0]:  4793489.2 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.597k i/100ms
          Time.parse     9.297k i/100ms
Calculating -------------------------------------
        Time.iso8601    273.428k (± 0.6%) i/s -      1.380M in   5.046648s
          Time.parse     93.427k (± 0.7%) i/s -    474.147k in   5.075295s

Comparison:
        Time.iso8601:   273427.9 i/s
          Time.parse:    93426.7 i/s - 2.93x  (± 0.00) slower

