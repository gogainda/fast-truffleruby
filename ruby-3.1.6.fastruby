$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       769.830k i/100ms
Function with splat arguments
                        20.602k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.710M (± 0.5%) i/s -     39.261M in   5.092460s
Function with splat arguments
                        197.714k (± 9.6%) i/s -    988.896k in   5.052437s

Comparison:
Function with single Array argument:  7709887.4 i/s
Function with splat arguments:   197713.6 i/s - 39.00x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.016M i/100ms
Sequential Assignment
                         1.033M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.126M (± 0.5%) i/s -     50.796M in   5.016696s
Sequential Assignment
                         10.305M (± 0.4%) i/s -     51.655M in   5.012834s

Comparison:
Sequential Assignment: 10304619.1 i/s
 Parallel Assignment: 10125628.8 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   468.734k i/100ms
       attr_accessor   451.474k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.744M (± 0.5%) i/s -     23.905M in   5.039100s
       attr_accessor      4.382M (± 3.2%) i/s -     22.122M in   5.053991s

Comparison:
   getter_and_setter:  4744095.2 i/s
       attr_accessor:  4381821.5 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    88.082k i/100ms
         respond_to?   754.794k i/100ms
Calculating -------------------------------------
      begin...rescue    887.634k (± 0.6%) i/s -      4.492M in   5.061045s
         respond_to?      7.515M (± 0.6%) i/s -     37.740M in   5.022047s

Comparison:
         respond_to?:  7515108.1 i/s
      begin...rescue:   887634.4 i/s - 8.47x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              normal   292.954k i/100ms
             &method   116.904k i/100ms
Calculating -------------------------------------
              normal      2.921M (± 0.5%) i/s -     14.648M in   5.014677s
             &method      1.169M (± 0.5%) i/s -      5.845M in   5.001785s

Comparison:
              normal:  2921026.9 i/s
             &method:  1168653.0 i/s - 2.50x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       232.000  i/100ms
       define_method   313.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.330k (±16.8%) i/s -     10.904k in   5.016421s
       define_method      3.174k (±17.8%) i/s -     14.711k in   5.090081s

Comparison:
       define_method:     3173.6 i/s
module_eval with string:     2330.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Float#round   253.741k i/100ms
       Kernel#format   197.604k i/100ms
            String#%   167.286k i/100ms
Calculating -------------------------------------
         Float#round      2.546M (± 0.5%) i/s -     12.941M in   5.082426s
       Kernel#format      1.985M (± 0.7%) i/s -     10.078M in   5.076382s
            String#%      1.724M (± 0.9%) i/s -      8.699M in   5.047484s

Comparison:
         Float#round:  2546249.5 i/s
       Kernel#format:  1985335.4 i/s - 1.28x  (± 0.00) slower
            String#%:  1723559.0 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash   873.999k i/100ms
          OpenStruct   478.855k i/100ms
Calculating -------------------------------------
                Hash      8.788M (± 1.1%) i/s -     44.574M in   5.072940s
          OpenStruct      4.842M (± 0.5%) i/s -     24.422M in   5.043801s

Comparison:
                Hash:  8787674.3 i/s
          OpenStruct:  4842023.9 i/s - 1.81x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.117M i/100ms
          OpenStruct     9.674k i/100ms
Calculating -------------------------------------
                Hash     11.154M (± 0.3%) i/s -     55.829M in   5.005212s
          OpenStruct     94.157k (± 3.0%) i/s -    474.026k in   5.039113s

Comparison:
                Hash: 11154260.0 i/s
          OpenStruct:    94157.2 i/s - 118.46x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   598.858k i/100ms
  ancestors.include?   126.281k i/100ms
Calculating -------------------------------------
  less than or equal      6.036M (± 0.9%) i/s -     30.542M in   5.060518s
  ancestors.include?      1.241M (± 2.5%) i/s -      6.314M in   5.090233s

Comparison:
  less than or equal:  6035756.0 i/s
  ancestors.include?:  1241291.9 i/s - 4.86x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.805  (± 0.0%) i/s -      4.000  in   5.001477s
         Kernel loop      0.213  (± 0.0%) i/s -      2.000  in   9.404401s

Comparison:
          While Loop:        0.8 i/s
         Kernel loop:        0.2 i/s - 3.78x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.546M i/100ms
         Array#first     1.310M i/100ms
Calculating -------------------------------------
           Array#[0]     15.432M (± 0.4%) i/s -     77.311M in   5.009695s
         Array#first     13.085M (± 0.2%) i/s -     65.486M in   5.004528s

Comparison:
           Array#[0]: 15432478.1 i/s
         Array#first: 13085432.7 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.519M i/100ms
          Array#last     1.330M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.102M (± 2.0%) i/s -     75.940M in   5.030685s
          Array#last     13.276M (± 2.8%) i/s -     66.515M in   5.014822s

Comparison:
          Array#[-1]: 15102399.1 i/s
          Array#last: 13276122.9 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    97.242k i/100ms
Calculating -------------------------------------
                find      0.268  (± 0.0%) i/s -      2.000  in   7.468742s
             bsearch    972.467k (± 1.5%) i/s -      4.959M in   5.100943s

Comparison:
             bsearch:   972467.0 i/s
                find:        0.3 i/s - 3631546.43x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    19.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    190.640  (± 2.6%) i/s -    969.000  in   5.086046s
        Array#insert      1.430  (± 0.0%) i/s -      8.000  in   5.594028s

Comparison:
       Array#unshift:      190.6 i/s
        Array#insert:        1.4 i/s - 133.30x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.145M i/100ms
          Array#size     2.099M i/100ms
         Array#count     1.586M i/100ms
Calculating -------------------------------------
        Array#length     21.318M (± 1.8%) i/s -    107.267M in   5.033559s
          Array#size     21.132M (± 0.4%) i/s -    107.051M in   5.065805s
         Array#count     16.364M (± 1.0%) i/s -     82.476M in   5.040625s

Comparison:
        Array#length: 21318351.9 i/s
          Array#size: 21132387.1 i/s - same-ish: difference falls within error
         Array#count: 16363879.9 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.724k i/100ms
        Array#sample     1.052M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    458.482k (± 0.6%) i/s -      2.332M in   5.086345s
        Array#sample     10.497M (± 0.5%) i/s -     52.615M in   5.012596s

Comparison:
        Array#sample: 10496716.6 i/s
 Array#shuffle.first:   458481.6 i/s - 22.89x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    62.322k i/100ms
          Date.parse    31.137k i/100ms
Calculating -------------------------------------
        Date.iso8601    624.365k (± 0.4%) i/s -      3.178M in   5.090741s
          Date.parse    311.738k (± 0.6%) i/s -      1.588M in   5.094164s

Comparison:
        Date.iso8601:   624365.2 i/s
          Date.parse:   311737.6 i/s - 2.00x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.088k i/100ms
           Array#map    27.057k i/100ms
Calculating -------------------------------------
   Array#each + push    180.395k (± 0.4%) i/s -    904.400k in   5.013540s
           Array#map    270.130k (± 0.5%) i/s -      1.353M in   5.008290s

Comparison:
           Array#map:   270130.2 i/s
   Array#each + push:   180394.7 i/s - 1.50x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            For loop    28.824k i/100ms
               #each    32.149k i/100ms
Calculating -------------------------------------
            For loop    288.769k (± 0.3%) i/s -      1.470M in   5.090714s
               #each    321.361k (± 0.4%) i/s -      1.607M in   5.002101s

Comparison:
               #each:   321360.7 i/s
            For loop:   288768.9 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.869k i/100ms
     each_with_index    18.905k i/100ms
Calculating -------------------------------------
          While Loop    278.255k (± 0.2%) i/s -      1.393M in   5.007849s
     each_with_index    188.776k (± 0.6%) i/s -    945.250k in   5.007430s

Comparison:
          While Loop:   278254.7 i/s
     each_with_index:   188776.4 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    71.988k i/100ms
      inject to_proc     2.057k i/100ms
        inject block     1.964k i/100ms
Calculating -------------------------------------
       inject symbol    722.362k (± 0.3%) i/s -      3.671M in   5.082538s
      inject to_proc     20.662k (± 0.6%) i/s -    104.907k in   5.077534s
        inject block     19.695k (± 0.1%) i/s -    100.164k in   5.085895s

Comparison:
       inject symbol:   722362.2 i/s
      inject to_proc:    20661.9 i/s - 34.96x  (± 0.00) slower
        inject block:    19694.5 i/s - 36.68x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     7.515k i/100ms
   Array#map.flatten     3.878k i/100ms
      Array#flat_map     9.650k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     75.257k (± 0.3%) i/s -    383.265k in   5.092817s
   Array#map.flatten     38.771k (± 0.3%) i/s -    193.900k in   5.001149s
      Array#flat_map     96.068k (± 2.1%) i/s -    482.500k in   5.025106s

Comparison:
      Array#flat_map:    96068.4 i/s
Array#map.flatten(1):    75256.6 i/s - 1.28x  (± 0.00) slower
   Array#map.flatten:    38771.4 i/s - 2.48x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    30.622k i/100ms
  Array#reverse_each    31.886k i/100ms
Calculating -------------------------------------
  Array#reverse.each    305.445k (± 0.6%) i/s -      1.531M in   5.012876s
  Array#reverse_each    322.295k (± 0.4%) i/s -      1.626M in   5.045726s

Comparison:
  Array#reverse_each:   322295.2 i/s
  Array#reverse.each:   305444.9 i/s - 1.06x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        19.059k i/100ms
   Enumerable#detect    80.032k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        191.059k (± 0.5%) i/s -      3.831M in  20.051167s
   Enumerable#detect    799.239k (± 0.5%) i/s -     16.006M in  20.027672s

Comparison:
   Enumerable#detect:   799238.6 i/s
Enumerable#select.first:   191059.5 i/s - 4.18x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       235.415k i/100ms
Enumerable#select.last
                        17.940k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.379M (± 0.9%) i/s -     12.006M in   5.046322s
Enumerable#select.last
                        178.675k (± 0.4%) i/s -    897.000k in   5.020368s

Comparison:
Enumerable#reverse.detect:  2379384.7 i/s
Enumerable#select.last:   178675.4 i/s - 13.32x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.773k i/100ms
  Enumerable#sort_by     4.661k i/100ms
     Enumerable#sort     2.415k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         48.067k (± 1.8%) i/s -    243.423k in   5.065885s
  Enumerable#sort_by     46.719k (± 0.7%) i/s -    237.711k in   5.088398s
     Enumerable#sort     24.397k (± 0.9%) i/s -    123.165k in   5.048679s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    48066.6 i/s
  Enumerable#sort_by:    46718.9 i/s - 1.03x  (± 0.00) slower
     Enumerable#sort:    24397.3 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    16.781k i/100ms
Enumerable#sort_by...first
                         8.175k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    167.813k (± 0.4%) i/s -    839.050k in   4.999969s
Enumerable#sort_by...first
                         82.060k (± 0.8%) i/s -    416.925k in   5.081010s

Comparison:
   Enumerable#min_by:   167813.3 i/s
Enumerable#sort_by...first:    82060.4 i/s - 2.04x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   410.730k i/100ms
            Hash#dup   321.283k i/100ms
Calculating -------------------------------------
              Hash[]      4.104M (± 2.2%) i/s -     20.536M in   5.005873s
            Hash#dup      3.126M (± 2.8%) i/s -     15.743M in   5.041025s

Comparison:
              Hash[]:  4104439.6 i/s
            Hash#dup:  3125603.4 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.388M i/100ms
  Hash#fetch, symbol     1.146M i/100ms
     Hash#[], string     1.214M i/100ms
  Hash#fetch, string   745.121k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     13.923M (± 0.5%) i/s -     70.805M in   5.085558s
  Hash#fetch, symbol     11.592M (± 0.4%) i/s -     58.450M in   5.042496s
     Hash#[], string     12.328M (± 0.5%) i/s -     61.938M in   5.024492s
  Hash#fetch, string      7.438M (± 0.6%) i/s -     37.256M in   5.009389s

Comparison:
     Hash#[], symbol: 13923135.0 i/s
     Hash#[], string: 12327655.1 i/s - 1.13x  (± 0.00) slower
  Hash#fetch, symbol: 11591594.0 i/s - 1.20x  (± 0.00) slower
  Hash#fetch, string:  7437550.3 i/s - 1.87x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   811.722k i/100ms
             Hash#[]   983.372k i/100ms
          Hash#[] ||   887.639k i/100ms
          Hash#[] &&   388.068k i/100ms
          Hash#fetch   581.015k i/100ms
 Hash#fetch fallback   389.433k i/100ms
Calculating -------------------------------------
            Hash#dig      8.075M (± 0.5%) i/s -     40.586M in   5.026532s
             Hash#[]     10.152M (± 2.0%) i/s -     51.135M in   5.038900s
          Hash#[] ||      8.897M (± 1.4%) i/s -     45.270M in   5.089102s
          Hash#[] &&      3.647M (± 0.9%) i/s -     18.239M in   5.001485s
          Hash#fetch      5.914M (± 0.5%) i/s -     29.632M in   5.010235s
 Hash#fetch fallback      3.701M (± 2.6%) i/s -     18.693M in   5.053975s

Comparison:
             Hash#[]: 10152251.9 i/s
          Hash#[] ||:  8897174.9 i/s - 1.14x  (± 0.00) slower
            Hash#dig:  8074584.8 i/s - 1.26x  (± 0.00) slower
          Hash#fetch:  5914406.2 i/s - 1.72x  (± 0.00) slower
 Hash#fetch fallback:  3701069.8 i/s - 2.74x  (± 0.00) slower
          Hash#[] &&:  3647061.6 i/s - 2.78x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.395M i/100ms
  Hash#fetch + block     1.427M i/100ms
    Hash#fetch + arg     1.080M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.349M (± 0.7%) i/s -     72.524M in   5.054729s
  Hash#fetch + block     14.259M (± 1.3%) i/s -     71.334M in   5.003556s
    Hash#fetch + arg     10.808M (± 0.8%) i/s -     55.094M in   5.097719s

Comparison:
  Hash#fetch + const: 14348528.9 i/s
  Hash#fetch + block: 14258939.2 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 10808212.8 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    26.122k i/100ms
         sort + to_h    10.894k i/100ms
Calculating -------------------------------------
      sort_by + to_h    260.276k (± 0.3%) i/s -      1.306M in   5.018183s
         sort + to_h    110.244k (± 1.1%) i/s -    555.594k in   5.040291s

Comparison:
      sort_by + to_h:   260276.3 i/s
         sort + to_h:   110243.8 i/s - 2.36x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   188.687k i/100ms
       Hash#each_key   188.315k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.841M (± 2.2%) i/s -      9.246M in   5.025851s
       Hash#each_key      1.845M (± 0.4%) i/s -      9.227M in   5.002096s

Comparison:
       Hash#each_key:  1844747.8 i/s
      Hash#keys.each:  1840592.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.274k i/100ms
           Hash#key?     1.012M i/100ms
Calculating -------------------------------------
  Hash#keys.include?     12.616k (± 3.6%) i/s -     63.700k in   5.056530s
           Hash#key?     10.201M (± 0.4%) i/s -     51.612M in   5.059719s

Comparison:
           Hash#key?: 10200830.1 i/s
  Hash#keys.include?:    12616.1 i/s - 808.56x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.798k i/100ms
            Hash#[]=    10.246k i/100ms
Calculating -------------------------------------
         Hash#merge!     37.772k (± 0.6%) i/s -    189.900k in   5.027795s
            Hash#[]=    101.487k (± 3.0%) i/s -    512.300k in   5.053221s

Comparison:
            Hash#[]=:   101487.1 i/s
         Hash#merge!:    37771.6 i/s - 2.69x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.479k i/100ms
      Hash#merge({})     3.766k i/100ms
 Hash#dup#merge!({})     2.756k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         44.557k (± 0.9%) i/s -    223.950k in   5.026578s
      Hash#merge({})     37.607k (± 0.8%) i/s -    188.300k in   5.007452s
 Hash#dup#merge!({})     27.293k (± 0.9%) i/s -    137.800k in   5.049303s

Comparison:
{}#merge!(Hash) do end:    44557.0 i/s
      Hash#merge({}):    37606.7 i/s - 1.18x  (± 0.00) slower
 Hash#dup#merge!({}):    27293.2 i/s - 1.63x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   367.689k i/100ms
          Hash#merge   322.255k i/100ms
Calculating -------------------------------------
        Hash#**other      3.701M (± 0.6%) i/s -     18.752M in   5.067588s
          Hash#merge      3.214M (± 0.8%) i/s -     16.113M in   5.013027s

Comparison:
        Hash#**other:  3700550.9 i/s
          Hash#merge:  3214385.2 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.653k i/100ms
         Hash#merge!     3.724k i/100ms
Calculating -------------------------------------
          Hash#merge     16.159k (± 2.3%) i/s -     80.997k in   5.015063s
         Hash#merge!     36.755k (± 0.5%) i/s -    186.200k in   5.066080s

Comparison:
         Hash#merge!:    36755.3 i/s
          Hash#merge:    16159.4 i/s - 2.27x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      421.324k i/100ms
Array#each             205.007k i/100ms
Array#each_w/_object   166.649k i/100ms
Hash#select-include     75.068k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.335M (± 0.9%) i/s -     21.909M in   5.054408s
Array#each                2.056M (± 0.3%) i/s -     10.455M in   5.084230s
Array#each_w/_object      1.659M (± 0.5%) i/s -      8.332M in   5.023395s
Hash#select-include     747.279k (± 0.7%) i/s -      3.753M in   5.023028s

Comparison:
Hash#native-slice   :  4334947.1 i/s
Array#each          :  2056443.1 i/s - 2.11x  (± 0.00) slower
Array#each_w/_object:  1658771.7 i/s - 2.61x  (± 0.00) slower
Hash#select-include :   747278.8 i/s - 5.80x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     2.559k i/100ms
         Hash#value?     2.307k i/100ms
Calculating -------------------------------------
Hash#values.include?     25.261k (± 4.8%) i/s -    127.950k in   5.081501s
         Hash#value?     23.288k (± 2.2%) i/s -    117.657k in   5.054804s

Comparison:
Hash#values.include?:    25261.2 i/s
         Hash#value?:    23287.9 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                call   659.206k i/100ms
                send   516.354k i/100ms
      method_missing   373.214k i/100ms
Calculating -------------------------------------
                call      6.579M (± 0.4%) i/s -     32.960M in   5.009711s
                send      5.230M (± 0.7%) i/s -     26.334M in   5.035808s
      method_missing      3.700M (± 0.8%) i/s -     18.661M in   5.044177s

Comparison:
                call:  6579380.3 i/s
                send:  5229585.6 i/s - 1.26x  (± 0.00) slower
      method_missing:  3699725.6 i/s - 1.78x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
               Block     9.109k i/100ms
      Symbol#to_proc     9.118k i/100ms
Calculating -------------------------------------
               Block     90.886k (± 0.5%) i/s -    455.450k in   5.011376s
      Symbol#to_proc     91.298k (± 0.5%) i/s -    465.018k in   5.093551s

Comparison:
      Symbol#to_proc:    91298.1 i/s
               Block:    90885.8 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          block.call   941.224k i/100ms
       block + yield     1.003M i/100ms
        unused block     1.295M i/100ms
               yield     1.163M i/100ms
Calculating -------------------------------------
          block.call      9.446M (± 0.4%) i/s -     48.002M in   5.081854s
       block + yield     10.131M (± 0.3%) i/s -     51.171M in   5.051102s
        unused block     12.995M (± 0.3%) i/s -     66.068M in   5.084125s
               yield     11.754M (± 0.3%) i/s -     59.327M in   5.047288s

Comparison:
        unused block: 12995069.7 i/s
               yield: 11754288.3 i/s - 1.11x  (± 0.00) slower
       block + yield: 10130726.3 i/s - 1.28x  (± 0.00) slower
          block.call:  9446037.3 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   319.682k i/100ms
      range#include?    12.292k i/100ms
       range#member?    12.410k i/100ms
       plain compare   505.809k i/100ms
Calculating -------------------------------------
        range#cover?      3.159M (± 2.2%) i/s -     15.984M in   5.062586s
      range#include?    123.163k (± 1.4%) i/s -    626.892k in   5.090906s
       range#member?    123.744k (± 0.5%) i/s -    620.500k in   5.014484s
       plain compare      4.941M (± 0.4%) i/s -     24.785M in   5.015706s

Comparison:
       plain compare:  4941471.3 i/s
        range#cover?:  3158964.4 i/s - 1.56x  (± 0.00) slower
       range#member?:   123744.3 i/s - 39.93x  (± 0.00) slower
      range#include?:   123163.1 i/s - 40.12x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       String#match?   926.862k i/100ms
           String#=~   627.390k i/100ms
          Regexp#===   598.895k i/100ms
        String#match   487.665k i/100ms
Calculating -------------------------------------
       String#match?      9.156M (± 0.9%) i/s -     46.343M in   5.062148s
           String#=~      6.250M (± 2.7%) i/s -     31.370M in   5.023378s
          Regexp#===      5.994M (± 0.8%) i/s -     30.544M in   5.096385s
        String#match      4.873M (± 0.5%) i/s -     24.383M in   5.003928s

Comparison:
       String#match?:  9155648.4 i/s
           String#=~:  6249877.9 i/s - 1.46x  (± 0.00) slower
          Regexp#===:  5993600.1 i/s - 1.53x  (± 0.00) slower
        String#match:  4872951.8 i/s - 1.88x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   632.704k i/100ms
      String#casecmp   810.131k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.298M (± 0.5%) i/s -     31.635M in   5.023041s
      String#casecmp      8.127M (± 0.7%) i/s -     41.317M in   5.083918s

Comparison:
      String#casecmp:  8127361.7 i/s
String#downcase + ==:  6298196.2 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            String#+   549.054k i/100ms
       String#concat   611.028k i/100ms
       String#append   665.974k i/100ms
         "foo" "bar"     1.158M i/100ms
  "#{'foo'}#{'bar'}"     1.109M i/100ms
Calculating -------------------------------------
            String#+      5.497M (± 0.5%) i/s -     28.002M in   5.094398s
       String#concat      6.109M (± 0.9%) i/s -     30.551M in   5.001795s
       String#append      6.738M (± 0.8%) i/s -     33.965M in   5.041369s
         "foo" "bar"     11.614M (± 0.5%) i/s -     59.042M in   5.083786s
  "#{'foo'}#{'bar'}"     11.060M (± 2.1%) i/s -     55.443M in   5.015551s

Comparison:
         "foo" "bar": 11614050.4 i/s
  "#{'foo'}#{'bar'}": 11059751.4 i/s - 1.05x  (± 0.00) slower
       String#append:  6737627.9 i/s - 1.72x  (± 0.00) slower
       String#concat:  6108531.8 i/s - 1.90x  (± 0.00) slower
            String#+:  5496723.5 i/s - 2.11x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#+@     1.010M i/100ms
          String#dup   561.701k i/100ms
Calculating -------------------------------------
           String#+@     10.059M (± 0.5%) i/s -     50.523M in   5.022654s
          String#dup      5.497M (± 0.7%) i/s -     27.523M in   5.006821s

Comparison:
           String#+@: 10059248.9 i/s
          String#dup:  5497435.0 i/s - 1.83x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   186.674k i/100ms
       String#match?   420.336k i/100ms
    String#end_with?   605.663k i/100ms
Calculating -------------------------------------
           String#=~      1.874M (± 0.3%) i/s -      9.520M in   5.080564s
       String#match?      4.170M (± 0.6%) i/s -     21.017M in   5.040084s
    String#end_with?      6.057M (± 0.5%) i/s -     30.889M in   5.099666s

Comparison:
    String#end_with?:  6057206.1 i/s
       String#match?:  4170069.3 i/s - 1.45x  (± 0.00) slower
           String#=~:  1873896.2 i/s - 3.23x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   108.757k i/100ms
          String#sub   129.871k i/100ms
String#dup["string"]=
                       174.222k i/100ms
Calculating -------------------------------------
         String#gsub      1.088M (± 1.1%) i/s -      5.547M in   5.098524s
          String#sub      1.337M (± 0.5%) i/s -      6.753M in   5.049830s
String#dup["string"]=
                          1.749M (± 0.5%) i/s -      8.885M in   5.079686s

Comparison:
String#dup["string"]=:  1749234.9 i/s
          String#sub:  1337370.5 i/s - 1.31x  (± 0.00) slower
         String#gsub:  1088015.0 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   101.099k i/100ms
           String#tr   334.079k i/100ms
Calculating -------------------------------------
         String#gsub      1.016M (± 1.0%) i/s -      5.156M in   5.073324s
           String#tr      3.359M (± 0.7%) i/s -     17.038M in   5.072117s

Comparison:
           String#tr:  3359317.1 i/s
         String#gsub:  1016418.3 i/s - 3.31x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.166M i/100ms
         With Freeze     1.686M i/100ms
Calculating -------------------------------------
      Without Freeze     11.647M (± 0.4%) i/s -     58.304M in   5.005829s
         With Freeze     16.867M (± 0.3%) i/s -     86.011M in   5.099402s

Comparison:
         With Freeze: 16866981.0 i/s
      Without Freeze: 11647325.2 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.609k i/100ms
      String#squeeze   161.113k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     36.119k (± 0.7%) i/s -    184.059k in   5.096209s
      String#squeeze      1.576M (± 1.1%) i/s -      7.895M in   5.009601s

Comparison:
      String#squeeze:  1576057.9 i/s
 String#gsub/regex+/:    36118.8 i/s - 43.64x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   285.820k i/100ms
       String#match?   720.703k i/100ms
  String#start_with?   876.545k i/100ms
Calculating -------------------------------------
           String#=~      2.869M (± 0.5%) i/s -     14.577M in   5.080458s
       String#match?      7.227M (± 0.5%) i/s -     36.756M in   5.085844s
  String#start_with?      8.584M (± 0.7%) i/s -     42.951M in   5.004110s

Comparison:
  String#start_with?:  8583524.5 i/s
       String#match?:  7227299.6 i/s - 1.19x  (± 0.00) slower
           String#=~:  2869259.4 i/s - 2.99x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   204.460k i/100ms
    String#[0, n] ==    84.452k i/100ms
   String#[RANGE] ==    77.929k i/100ms
   String#[0...n] ==    42.956k i/100ms
Calculating -------------------------------------
  String#start_with?      2.032M (± 1.1%) i/s -     10.223M in   5.032219s
    String#[0, n] ==    848.527k (± 0.7%) i/s -      4.307M in   5.076176s
   String#[RANGE] ==    791.865k (± 0.5%) i/s -      3.974M in   5.019159s
   String#[0...n] ==    432.221k (± 1.0%) i/s -      2.191M in   5.069098s

Comparison:
  String#start_with?:  2031777.0 i/s
    String#[0, n] ==:   848527.2 i/s - 2.39x  (± 0.00) slower
   String#[RANGE] ==:   791864.5 i/s - 2.57x  (± 0.00) slower
   String#[0...n] ==:   432220.6 i/s - 4.70x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   176.398k i/100ms
 String#sub!'string'   122.035k i/100ms
String#gsub!'string'    76.040k i/100ms
  String#[/regexp/]=   149.874k i/100ms
 String#sub!/regexp/   111.337k i/100ms
String#gsub!/regexp/    60.445k i/100ms
Calculating -------------------------------------
  String#['string']=      1.749M (± 0.5%) i/s -      8.820M in   5.041552s
 String#sub!'string'      1.223M (± 0.9%) i/s -      6.224M in   5.089951s
String#gsub!'string'    768.755k (± 0.6%) i/s -      3.878M in   5.044752s
  String#[/regexp/]=      1.522M (± 0.7%) i/s -      7.644M in   5.022000s
 String#sub!/regexp/      1.147M (± 0.7%) i/s -      5.790M in   5.045739s
String#gsub!/regexp/    600.811k (± 1.8%) i/s -      3.022M in   5.032147s

Comparison:
  String#['string']=:  1749487.1 i/s
  String#[/regexp/]=:  1522097.7 i/s - 1.15x  (± 0.00) slower
 String#sub!'string':  1222852.0 i/s - 1.43x  (± 0.00) slower
 String#sub!/regexp/:  1147468.4 i/s - 1.52x  (± 0.00) slower
String#gsub!'string':   768754.8 i/s - 2.28x  (± 0.00) slower
String#gsub!/regexp/:   600811.0 i/s - 2.91x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          String#sub   142.723k i/100ms
        String#chomp   537.052k i/100ms
String#delete_suffix   612.958k i/100ms
Calculating -------------------------------------
          String#sub      1.422M (± 0.6%) i/s -      7.136M in   5.017590s
        String#chomp      5.350M (± 1.0%) i/s -     26.853M in   5.019504s
String#delete_suffix      6.080M (± 0.7%) i/s -     30.648M in   5.040901s

Comparison:
String#delete_suffix:  6080116.2 i/s
        String#chomp:  5350183.5 i/s - 1.14x  (± 0.00) slower
          String#sub:  1422274.8 i/s - 4.27x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   595.674k i/100ms
          String#sub   142.598k i/100ms
Calculating -------------------------------------
String#delete_prefix      5.980M (± 0.9%) i/s -     30.379M in   5.080420s
          String#sub      1.418M (± 0.3%) i/s -      7.130M in   5.026799s

Comparison:
String#delete_prefix:  5980135.9 i/s
          String#sub:  1418389.7 i/s - 4.22x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   608.988k i/100ms
    String#unpack[0]   461.566k i/100ms
Calculating -------------------------------------
      String#unpack1      6.044M (± 0.3%) i/s -     30.449M in   5.037903s
    String#unpack[0]      4.612M (± 0.6%) i/s -     23.078M in   5.004052s

Comparison:
      String#unpack1:  6044130.3 i/s
    String#unpack[0]:  4612068.5 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    26.615k i/100ms
          Time.parse     9.121k i/100ms
Calculating -------------------------------------
        Time.iso8601    270.209k (± 0.5%) i/s -      1.357M in   5.023527s
          Time.parse     90.871k (± 0.6%) i/s -    456.050k in   5.018859s

Comparison:
        Time.iso8601:   270208.9 i/s
          Time.parse:    90870.6 i/s - 2.97x  (± 0.00) slower

