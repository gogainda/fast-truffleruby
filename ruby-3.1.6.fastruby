$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       753.098k i/100ms
Function with splat arguments
                        22.152k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.514M (± 2.0%) i/s -     37.655M in   5.013542s
Function with splat arguments
                        228.609k (± 7.6%) i/s -      1.152M in   5.077690s

Comparison:
Function with single Array argument:  7514143.8 i/s
Function with splat arguments:   228608.6 i/s - 32.87x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.020M i/100ms
Sequential Assignment
                         1.034M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.186M (± 0.4%) i/s -     51.009M in   5.007701s
Sequential Assignment
                         10.306M (± 0.8%) i/s -     51.720M in   5.018568s

Comparison:
Sequential Assignment: 10306328.9 i/s
 Parallel Assignment: 10186350.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   427.571k i/100ms
       attr_accessor   462.452k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.398M (± 0.7%) i/s -     22.234M in   5.056138s
       attr_accessor      4.555M (± 1.2%) i/s -     23.123M in   5.076848s

Comparison:
       attr_accessor:  4555140.1 i/s
   getter_and_setter:  4397560.0 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    87.575k i/100ms
         respond_to?   755.489k i/100ms
Calculating -------------------------------------
      begin...rescue    878.761k (± 2.5%) i/s -      4.466M in   5.086293s
         respond_to?      7.506M (± 0.8%) i/s -     37.774M in   5.032559s

Comparison:
         respond_to?:  7506461.9 i/s
      begin...rescue:   878760.9 i/s - 8.54x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              normal   297.404k i/100ms
             &method   117.057k i/100ms
Calculating -------------------------------------
              normal      2.960M (± 0.7%) i/s -     14.870M in   5.023411s
             &method      1.186M (± 0.8%) i/s -      5.970M in   5.034762s

Comparison:
              normal:  2960323.0 i/s
             &method:  1185821.1 i/s - 2.50x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       245.000  i/100ms
       define_method   310.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.290k (±17.2%) i/s -     10.780k in   5.066673s
       define_method      3.205k (±19.8%) i/s -     14.570k in   5.043414s

Comparison:
       define_method:     3205.1 i/s
module_eval with string:     2289.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Float#round   252.121k i/100ms
       Kernel#format   203.414k i/100ms
            String#%   170.209k i/100ms
Calculating -------------------------------------
         Float#round      2.525M (± 0.9%) i/s -     12.858M in   5.092141s
       Kernel#format      1.992M (± 0.9%) i/s -      9.967M in   5.005145s
            String#%      1.706M (± 1.0%) i/s -      8.681M in   5.088419s

Comparison:
         Float#round:  2525317.9 i/s
       Kernel#format:  1991554.9 i/s - 1.27x  (± 0.00) slower
            String#%:  1706119.0 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash   863.418k i/100ms
          OpenStruct   492.881k i/100ms
Calculating -------------------------------------
                Hash      8.556M (± 1.0%) i/s -     43.171M in   5.046012s
          OpenStruct      4.826M (± 0.6%) i/s -     24.151M in   5.004648s

Comparison:
                Hash:  8556293.4 i/s
          OpenStruct:  4825902.8 i/s - 1.77x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.115M i/100ms
          OpenStruct     9.861k i/100ms
Calculating -------------------------------------
                Hash     11.149M (± 0.3%) i/s -     55.744M in   4.999953s
          OpenStruct     94.810k (± 2.7%) i/s -    483.189k in   5.100258s

Comparison:
                Hash: 11149032.4 i/s
          OpenStruct:    94809.6 i/s - 117.59x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   583.441k i/100ms
  ancestors.include?   128.271k i/100ms
Calculating -------------------------------------
  less than or equal      5.923M (± 1.3%) i/s -     29.755M in   5.024422s
  ancestors.include?      1.254M (± 1.0%) i/s -      6.285M in   5.012768s

Comparison:
  less than or equal:  5923199.1 i/s
  ancestors.include?:  1253985.6 i/s - 4.72x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.640  (± 0.0%) i/s -      4.000  in   6.247453s
         Kernel loop      0.212  (± 0.0%) i/s -      2.000  in   9.422680s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 3.02x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.555M i/100ms
         Array#first     1.333M i/100ms
Calculating -------------------------------------
           Array#[0]     15.530M (± 0.4%) i/s -     77.733M in   5.005382s
         Array#first     13.312M (± 0.3%) i/s -     66.669M in   5.008128s

Comparison:
           Array#[0]: 15530038.3 i/s
         Array#first: 13312274.3 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.261M i/100ms
          Array#last     1.071M i/100ms
Calculating -------------------------------------
          Array#[-1]     12.660M (± 0.2%) i/s -     64.320M in   5.080725s
          Array#last     10.751M (± 0.4%) i/s -     54.636M in   5.082173s

Comparison:
          Array#[-1]: 12659634.6 i/s
          Array#last: 10750680.9 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    96.328k i/100ms
Calculating -------------------------------------
                find      0.238  (± 0.0%) i/s -      2.000  in   8.389180s
             bsearch    963.315k (± 1.1%) i/s -      4.816M in   5.000415s

Comparison:
             bsearch:   963314.8 i/s
                find:        0.2 i/s - 4040702.25x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    19.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    189.824  (± 2.1%) i/s -    950.000  in   5.007103s
        Array#insert      1.427  (± 0.0%) i/s -      8.000  in   5.606251s

Comparison:
       Array#unshift:      189.8 i/s
        Array#insert:        1.4 i/s - 133.02x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.166M i/100ms
          Array#size     2.112M i/100ms
         Array#count     1.651M i/100ms
Calculating -------------------------------------
        Array#length     21.527M (± 0.5%) i/s -    108.286M in   5.030394s
          Array#size     21.160M (± 0.8%) i/s -    107.724M in   5.091338s
         Array#count     15.873M (± 0.9%) i/s -     80.896M in   5.096856s

Comparison:
        Array#length: 21526902.1 i/s
          Array#size: 21159596.3 i/s - 1.02x  (± 0.00) slower
         Array#count: 15873232.9 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    46.266k i/100ms
        Array#sample     1.017M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    465.087k (± 0.4%) i/s -      2.360M in   5.073481s
        Array#sample     10.130M (± 0.3%) i/s -     50.856M in   5.020580s

Comparison:
        Array#sample: 10129573.9 i/s
 Array#shuffle.first:   465087.2 i/s - 21.78x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    62.082k i/100ms
          Date.parse    30.920k i/100ms
Calculating -------------------------------------
        Date.iso8601    625.349k (± 0.6%) i/s -      3.166M in   5.063280s
          Date.parse    308.602k (± 0.9%) i/s -      1.546M in   5.010078s

Comparison:
        Date.iso8601:   625348.8 i/s
          Date.parse:   308602.2 i/s - 2.03x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    17.840k i/100ms
           Array#map    25.393k i/100ms
Calculating -------------------------------------
   Array#each + push    180.119k (± 0.2%) i/s -    909.840k in   5.051349s
           Array#map    253.638k (± 0.9%) i/s -      1.270M in   5.006177s

Comparison:
           Array#map:   253638.3 i/s
   Array#each + push:   180118.7 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            For loop    28.951k i/100ms
               #each    32.399k i/100ms
Calculating -------------------------------------
            For loop    290.089k (± 0.4%) i/s -      1.477M in   5.089890s
               #each    323.420k (± 0.8%) i/s -      1.620M in   5.009133s

Comparison:
               #each:   323420.3 i/s
            For loop:   290089.4 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.072k i/100ms
     each_with_index    18.983k i/100ms
Calculating -------------------------------------
          While Loop    271.832k (± 0.2%) i/s -      1.381M in   5.079151s
     each_with_index    189.134k (± 0.3%) i/s -    949.150k in   5.018431s

Comparison:
          While Loop:   271832.0 i/s
     each_with_index:   189134.5 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    71.941k i/100ms
      inject to_proc     2.071k i/100ms
        inject block     1.977k i/100ms
Calculating -------------------------------------
       inject symbol    719.638k (± 1.1%) i/s -      3.669M in   5.098990s
      inject to_proc     20.716k (± 0.5%) i/s -    105.621k in   5.098744s
        inject block     19.776k (± 0.4%) i/s -    100.827k in   5.098502s

Comparison:
       inject symbol:   719637.7 i/s
      inject to_proc:    20715.6 i/s - 34.74x  (± 0.00) slower
        inject block:    19776.1 i/s - 36.39x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     7.462k i/100ms
   Array#map.flatten     3.899k i/100ms
      Array#flat_map     9.613k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     75.598k (± 0.7%) i/s -    380.562k in   5.034231s
   Array#map.flatten     39.015k (± 0.9%) i/s -    198.849k in   5.097195s
      Array#flat_map     96.259k (± 0.5%) i/s -    490.263k in   5.093325s

Comparison:
      Array#flat_map:    96258.5 i/s
Array#map.flatten(1):    75598.2 i/s - 1.27x  (± 0.00) slower
   Array#map.flatten:    39014.9 i/s - 2.47x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    31.309k i/100ms
  Array#reverse_each    32.354k i/100ms
Calculating -------------------------------------
  Array#reverse.each    312.732k (± 0.7%) i/s -      1.565M in   5.005958s
  Array#reverse_each    322.457k (± 0.4%) i/s -      1.618M in   5.016884s

Comparison:
  Array#reverse_each:   322456.8 i/s
  Array#reverse.each:   312732.3 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        19.704k i/100ms
   Enumerable#detect    80.820k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        196.989k (± 0.7%) i/s -      3.941M in  20.006346s
   Enumerable#detect    808.881k (± 0.4%) i/s -     16.245M in  20.083436s

Comparison:
   Enumerable#detect:   808881.1 i/s
Enumerable#select.first:   196988.9 i/s - 4.11x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       236.715k i/100ms
Enumerable#select.last
                        18.200k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.348M (± 1.2%) i/s -     11.836M in   5.041194s
Enumerable#select.last
                        180.216k (± 0.3%) i/s -    910.000k in   5.049548s

Comparison:
Enumerable#reverse.detect:  2348149.7 i/s
Enumerable#select.last:   180215.7 i/s - 13.03x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         5.054k i/100ms
  Enumerable#sort_by     4.911k i/100ms
     Enumerable#sort     2.399k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         49.787k (± 1.6%) i/s -    252.700k in   5.076957s
  Enumerable#sort_by     46.443k (± 1.3%) i/s -    235.728k in   5.076414s
     Enumerable#sort     23.706k (± 0.5%) i/s -    119.950k in   5.060030s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    49787.0 i/s
  Enumerable#sort_by:    46443.2 i/s - 1.07x  (± 0.00) slower
     Enumerable#sort:    23706.0 i/s - 2.10x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.114k i/100ms
Enumerable#sort_by...first
                         8.484k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    171.190k (± 0.5%) i/s -    872.814k in   5.098606s
Enumerable#sort_by...first
                         84.183k (± 0.5%) i/s -    424.200k in   5.039142s

Comparison:
   Enumerable#min_by:   171190.4 i/s
Enumerable#sort_by...first:    84183.1 i/s - 2.03x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   423.553k i/100ms
            Hash#dup   319.421k i/100ms
Calculating -------------------------------------
              Hash[]      3.852M (± 2.7%) i/s -     19.483M in   5.061670s
            Hash#dup      2.851M (± 1.5%) i/s -     14.374M in   5.042816s

Comparison:
              Hash[]:  3851856.7 i/s
            Hash#dup:  2851054.9 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.400M i/100ms
  Hash#fetch, symbol     1.197M i/100ms
     Hash#[], string     1.212M i/100ms
  Hash#fetch, string   711.038k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     13.985M (± 0.5%) i/s -     69.982M in   5.004112s
  Hash#fetch, symbol     11.955M (± 0.5%) i/s -     59.854M in   5.006533s
     Hash#[], string     12.303M (± 0.8%) i/s -     61.826M in   5.025576s
  Hash#fetch, string      7.215M (± 0.5%) i/s -     36.263M in   5.026382s

Comparison:
     Hash#[], symbol: 13985198.7 i/s
     Hash#[], string: 12303025.2 i/s - 1.14x  (± 0.00) slower
  Hash#fetch, symbol: 11955423.5 i/s - 1.17x  (± 0.00) slower
  Hash#fetch, string:  7214675.1 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   818.031k i/100ms
             Hash#[]   974.984k i/100ms
          Hash#[] ||   852.408k i/100ms
          Hash#[] &&   362.592k i/100ms
          Hash#fetch   594.683k i/100ms
 Hash#fetch fallback   383.769k i/100ms
Calculating -------------------------------------
            Hash#dig      8.008M (± 0.3%) i/s -     40.084M in   5.005562s
             Hash#[]      9.637M (± 1.4%) i/s -     48.749M in   5.059616s
          Hash#[] ||      8.752M (± 0.4%) i/s -     44.325M in   5.064620s
          Hash#[] &&      3.791M (± 2.1%) i/s -     19.217M in   5.071834s
          Hash#fetch      6.062M (± 0.8%) i/s -     30.329M in   5.003513s
 Hash#fetch fallback      3.790M (± 0.8%) i/s -     19.188M in   5.063740s

Comparison:
             Hash#[]:  9636832.1 i/s
          Hash#[] ||:  8752068.5 i/s - 1.10x  (± 0.00) slower
            Hash#dig:  8007886.6 i/s - 1.20x  (± 0.00) slower
          Hash#fetch:  6061896.4 i/s - 1.59x  (± 0.00) slower
          Hash#[] &&:  3790648.7 i/s - 2.54x  (± 0.00) slower
 Hash#fetch fallback:  3789648.9 i/s - 2.54x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.460M i/100ms
  Hash#fetch + block     1.434M i/100ms
    Hash#fetch + arg     1.085M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.192M (± 1.6%) i/s -     71.553M in   5.042936s
  Hash#fetch + block     14.353M (± 1.6%) i/s -     73.125M in   5.095953s
    Hash#fetch + arg     10.659M (± 2.4%) i/s -     54.253M in   5.092822s

Comparison:
  Hash#fetch + block: 14353466.4 i/s
  Hash#fetch + const: 14192118.0 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 10659111.4 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    25.790k i/100ms
         sort + to_h    10.926k i/100ms
Calculating -------------------------------------
      sort_by + to_h    257.511k (± 0.6%) i/s -      1.290M in   5.007753s
         sort + to_h    109.408k (± 0.5%) i/s -    557.226k in   5.093205s

Comparison:
      sort_by + to_h:   257510.6 i/s
         sort + to_h:   109408.3 i/s - 2.35x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   185.160k i/100ms
       Hash#each_key   177.449k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.895M (± 0.3%) i/s -      9.628M in   5.080046s
       Hash#each_key      1.757M (± 0.7%) i/s -      8.872M in   5.049461s

Comparison:
      Hash#keys.each:  1895339.4 i/s
       Hash#each_key:  1757196.9 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.270k i/100ms
           Hash#key?   984.506k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     12.263k (± 3.5%) i/s -     62.230k in   5.081263s
           Hash#key?      9.939M (± 0.5%) i/s -     50.210M in   5.052139s

Comparison:
           Hash#key?:  9938592.3 i/s
  Hash#keys.include?:    12263.4 i/s - 810.43x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.758k i/100ms
            Hash#[]=    10.067k i/100ms
Calculating -------------------------------------
         Hash#merge!     37.559k (± 1.0%) i/s -    187.900k in   5.003296s
            Hash#[]=    101.770k (± 0.8%) i/s -    513.417k in   5.045259s

Comparison:
            Hash#[]=:   101769.7 i/s
         Hash#merge!:    37558.8 i/s - 2.71x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.432k i/100ms
      Hash#merge({})     3.787k i/100ms
 Hash#dup#merge!({})     2.791k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         44.371k (± 0.4%) i/s -    226.032k in   5.094154s
      Hash#merge({})     37.847k (± 1.2%) i/s -    189.350k in   5.003879s
 Hash#dup#merge!({})     27.521k (± 1.1%) i/s -    139.550k in   5.071297s

Comparison:
{}#merge!(Hash) do end:    44371.4 i/s
      Hash#merge({}):    37846.6 i/s - 1.17x  (± 0.00) slower
 Hash#dup#merge!({}):    27521.1 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   380.305k i/100ms
          Hash#merge   328.265k i/100ms
Calculating -------------------------------------
        Hash#**other      3.773M (± 0.7%) i/s -     19.015M in   5.040000s
          Hash#merge      3.318M (± 0.9%) i/s -     16.742M in   5.046648s

Comparison:
        Hash#**other:  3773041.1 i/s
          Hash#merge:  3317626.2 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.596k i/100ms
         Hash#merge!     3.655k i/100ms
Calculating -------------------------------------
          Hash#merge     16.491k (± 2.2%) i/s -     82.992k in   5.035082s
         Hash#merge!     36.983k (± 0.3%) i/s -    186.405k in   5.040344s

Comparison:
         Hash#merge!:    36982.9 i/s
          Hash#merge:    16490.7 i/s - 2.24x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      436.351k i/100ms
Array#each             211.876k i/100ms
Array#each_w/_object   165.733k i/100ms
Hash#select-include     75.910k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.281M (± 2.3%) i/s -     21.818M in   5.099155s
Array#each                2.055M (± 0.7%) i/s -     10.382M in   5.052352s
Array#each_w/_object      1.668M (± 0.5%) i/s -      8.452M in   5.067409s
Hash#select-include     751.777k (± 2.2%) i/s -      3.796M in   5.051310s

Comparison:
Hash#native-slice   :  4281176.0 i/s
Array#each          :  2054984.5 i/s - 2.08x  (± 0.00) slower
Array#each_w/_object:  1668029.6 i/s - 2.57x  (± 0.00) slower
Hash#select-include :   751777.1 i/s - 5.69x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.093k i/100ms
         Hash#value?   852.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     10.966k (± 2.2%) i/s -     55.743k in   5.086061s
         Hash#value?      8.533k (± 0.7%) i/s -     43.452k in   5.092549s

Comparison:
Hash#values.include?:    10966.2 i/s
         Hash#value?:     8532.9 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                call   655.634k i/100ms
                send   513.895k i/100ms
      method_missing   379.024k i/100ms
Calculating -------------------------------------
                call      6.560M (± 0.6%) i/s -     33.437M in   5.097546s
                send      5.231M (± 0.7%) i/s -     26.209M in   5.010302s
      method_missing      3.763M (± 1.1%) i/s -     18.951M in   5.037282s

Comparison:
                call:  6559778.8 i/s
                send:  5231234.6 i/s - 1.25x  (± 0.00) slower
      method_missing:  3762696.8 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
               Block     9.077k i/100ms
      Symbol#to_proc     9.123k i/100ms
Calculating -------------------------------------
               Block     91.470k (± 0.4%) i/s -    462.927k in   5.061032s
      Symbol#to_proc     90.702k (± 0.5%) i/s -    456.150k in   5.029184s

Comparison:
               Block:    91470.2 i/s
      Symbol#to_proc:    90702.5 i/s - 1.01x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          block.call   953.643k i/100ms
       block + yield     1.009M i/100ms
        unused block     1.289M i/100ms
               yield     1.177M i/100ms
Calculating -------------------------------------
          block.call      9.588M (± 0.4%) i/s -     48.636M in   5.072786s
       block + yield     10.145M (± 0.3%) i/s -     51.467M in   5.073423s
        unused block     12.879M (± 0.5%) i/s -     64.474M in   5.006250s
               yield     11.829M (± 0.3%) i/s -     60.030M in   5.074701s

Comparison:
        unused block: 12879037.0 i/s
               yield: 11829415.1 i/s - 1.09x  (± 0.00) slower
       block + yield: 10144566.8 i/s - 1.27x  (± 0.00) slower
          block.call:  9587712.2 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   315.768k i/100ms
      range#include?    12.406k i/100ms
       range#member?    12.433k i/100ms
       plain compare   511.659k i/100ms
Calculating -------------------------------------
        range#cover?      3.158M (± 0.2%) i/s -     16.104M in   5.098733s
      range#include?    124.503k (± 0.6%) i/s -    632.706k in   5.082036s
       range#member?    125.135k (± 0.4%) i/s -    634.083k in   5.067307s
       plain compare      5.029M (± 1.7%) i/s -     25.583M in   5.088210s

Comparison:
       plain compare:  5029281.7 i/s
        range#cover?:  3158474.5 i/s - 1.59x  (± 0.00) slower
       range#member?:   125134.7 i/s - 40.19x  (± 0.00) slower
      range#include?:   124503.4 i/s - 40.39x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       String#match?   927.291k i/100ms
           String#=~   622.468k i/100ms
          Regexp#===   591.339k i/100ms
        String#match   483.419k i/100ms
Calculating -------------------------------------
       String#match?      8.929M (± 0.5%) i/s -     45.437M in   5.088768s
           String#=~      6.191M (± 0.6%) i/s -     31.123M in   5.027313s
          Regexp#===      5.876M (± 0.4%) i/s -     29.567M in   5.031629s
        String#match      4.816M (± 0.3%) i/s -     24.171M in   5.018762s

Comparison:
       String#match?:  8929198.8 i/s
           String#=~:  6191054.8 i/s - 1.44x  (± 0.00) slower
          Regexp#===:  5876311.4 i/s - 1.52x  (± 0.00) slower
        String#match:  4816171.6 i/s - 1.85x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   631.419k i/100ms
      String#casecmp   811.009k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.315M (± 0.7%) i/s -     32.202M in   5.099206s
      String#casecmp      8.133M (± 0.6%) i/s -     41.361M in   5.085731s

Comparison:
      String#casecmp:  8133102.0 i/s
String#downcase + ==:  6315456.7 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            String#+   545.314k i/100ms
       String#concat   607.217k i/100ms
       String#append   665.126k i/100ms
         "foo" "bar"     1.175M i/100ms
  "#{'foo'}#{'bar'}"     1.174M i/100ms
Calculating -------------------------------------
            String#+      5.503M (± 1.1%) i/s -     27.811M in   5.054028s
       String#concat      5.994M (± 0.8%) i/s -     30.361M in   5.065684s
       String#append      6.666M (± 0.5%) i/s -     33.921M in   5.088594s
         "foo" "bar"     11.705M (± 0.3%) i/s -     58.741M in   5.018442s
  "#{'foo'}#{'bar'}"     11.715M (± 0.3%) i/s -     58.703M in   5.010800s

Comparison:
  "#{'foo'}#{'bar'}": 11715293.5 i/s
         "foo" "bar": 11705203.2 i/s - same-ish: difference falls within error
       String#append:  6666354.6 i/s - 1.76x  (± 0.00) slower
       String#concat:  5993825.5 i/s - 1.95x  (± 0.00) slower
            String#+:  5503425.7 i/s - 2.13x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#+@     1.014M i/100ms
          String#dup   554.868k i/100ms
Calculating -------------------------------------
           String#+@     10.061M (± 0.4%) i/s -     50.682M in   5.037494s
          String#dup      5.595M (± 0.9%) i/s -     28.298M in   5.058474s

Comparison:
           String#+@: 10061137.6 i/s
          String#dup:  5594693.6 i/s - 1.80x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   185.979k i/100ms
       String#match?   410.483k i/100ms
    String#end_with?   610.231k i/100ms
Calculating -------------------------------------
           String#=~      1.880M (± 0.6%) i/s -      9.485M in   5.044137s
       String#match?      4.173M (± 0.9%) i/s -     20.935M in   5.017596s
    String#end_with?      6.064M (± 0.5%) i/s -     30.512M in   5.031780s

Comparison:
    String#end_with?:  6063907.0 i/s
       String#match?:  4172611.6 i/s - 1.45x  (± 0.00) slower
           String#=~:  1880450.5 i/s - 3.22x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   108.876k i/100ms
          String#sub   136.307k i/100ms
String#dup["string"]=
                       175.619k i/100ms
Calculating -------------------------------------
         String#gsub      1.107M (± 0.6%) i/s -      5.553M in   5.017277s
          String#sub      1.338M (± 0.5%) i/s -      6.815M in   5.094040s
String#dup["string"]=
                          1.742M (± 0.7%) i/s -      8.781M in   5.041620s

Comparison:
String#dup["string"]=:  1741774.1 i/s
          String#sub:  1337943.4 i/s - 1.30x  (± 0.00) slower
         String#gsub:  1106746.3 i/s - 1.57x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   100.416k i/100ms
           String#tr   333.748k i/100ms
Calculating -------------------------------------
         String#gsub      1.022M (± 0.5%) i/s -      5.121M in   5.011351s
           String#tr      3.370M (± 0.3%) i/s -     17.021M in   5.051024s

Comparison:
           String#tr:  3369865.7 i/s
         String#gsub:  1021947.6 i/s - 3.30x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.144M i/100ms
         With Freeze     1.659M i/100ms
Calculating -------------------------------------
      Without Freeze     11.347M (± 0.3%) i/s -     57.179M in   5.039156s
         With Freeze     16.650M (± 0.2%) i/s -     84.610M in   5.081827s

Comparison:
         With Freeze: 16649522.7 i/s
      Without Freeze: 11347062.6 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.551k i/100ms
      String#squeeze   159.169k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     35.551k (± 0.6%) i/s -    181.101k in   5.094218s
      String#squeeze      1.582M (± 0.7%) i/s -      7.958M in   5.030853s

Comparison:
      String#squeeze:  1581997.8 i/s
 String#gsub/regex+/:    35551.4 i/s - 44.50x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   284.083k i/100ms
       String#match?   721.934k i/100ms
  String#start_with?   861.821k i/100ms
Calculating -------------------------------------
           String#=~      2.838M (± 0.4%) i/s -     14.204M in   5.004284s
       String#match?      7.293M (± 0.1%) i/s -     36.819M in   5.048391s
  String#start_with?      8.740M (± 0.4%) i/s -     43.953M in   5.029272s

Comparison:
  String#start_with?:  8739584.7 i/s
       String#match?:  7293156.1 i/s - 1.20x  (± 0.00) slower
           String#=~:  2838439.3 i/s - 3.08x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   201.456k i/100ms
    String#[0, n] ==    87.008k i/100ms
   String#[RANGE] ==    79.962k i/100ms
   String#[0...n] ==    43.437k i/100ms
Calculating -------------------------------------
  String#start_with?      2.078M (± 1.4%) i/s -     10.476M in   5.043234s
    String#[0, n] ==    868.548k (± 0.7%) i/s -      4.350M in   5.009060s
   String#[RANGE] ==    789.966k (± 0.3%) i/s -      3.998M in   5.061151s
   String#[0...n] ==    434.290k (± 0.8%) i/s -      2.172M in   5.001248s

Comparison:
  String#start_with?:  2077573.2 i/s
    String#[0, n] ==:   868547.6 i/s - 2.39x  (± 0.00) slower
   String#[RANGE] ==:   789966.4 i/s - 2.63x  (± 0.00) slower
   String#[0...n] ==:   434290.5 i/s - 4.78x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   171.407k i/100ms
 String#sub!'string'   121.923k i/100ms
String#gsub!'string'    77.728k i/100ms
  String#[/regexp/]=   150.050k i/100ms
 String#sub!/regexp/   113.921k i/100ms
String#gsub!/regexp/    61.344k i/100ms
Calculating -------------------------------------
  String#['string']=      1.732M (± 0.7%) i/s -      8.742M in   5.048464s
 String#sub!'string'      1.227M (± 0.5%) i/s -      6.218M in   5.067300s
String#gsub!'string'    761.133k (± 0.6%) i/s -      3.809M in   5.004128s
  String#[/regexp/]=      1.506M (± 0.5%) i/s -      7.653M in   5.080408s
 String#sub!/regexp/      1.128M (± 0.3%) i/s -      5.696M in   5.051366s
String#gsub!/regexp/    608.325k (± 0.8%) i/s -      3.067M in   5.042354s

Comparison:
  String#['string']=:  1731652.4 i/s
  String#[/regexp/]=:  1506319.4 i/s - 1.15x  (± 0.00) slower
 String#sub!'string':  1227129.5 i/s - 1.41x  (± 0.00) slower
 String#sub!/regexp/:  1127635.6 i/s - 1.54x  (± 0.00) slower
String#gsub!'string':   761133.2 i/s - 2.28x  (± 0.00) slower
String#gsub!/regexp/:   608324.8 i/s - 2.85x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          String#sub   140.216k i/100ms
        String#chomp   535.107k i/100ms
String#delete_suffix   601.099k i/100ms
Calculating -------------------------------------
          String#sub      1.413M (± 0.8%) i/s -      7.151M in   5.060633s
        String#chomp      5.338M (± 0.5%) i/s -     26.755M in   5.011976s
String#delete_suffix      5.983M (± 1.0%) i/s -     30.055M in   5.023576s

Comparison:
String#delete_suffix:  5983384.6 i/s
        String#chomp:  5338422.2 i/s - 1.12x  (± 0.00) slower
          String#sub:  1413161.3 i/s - 4.23x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   591.464k i/100ms
          String#sub   143.889k i/100ms
Calculating -------------------------------------
String#delete_prefix      5.901M (± 1.2%) i/s -     29.573M in   5.011974s
          String#sub      1.446M (± 0.5%) i/s -      7.338M in   5.073775s

Comparison:
String#delete_prefix:  5901323.1 i/s
          String#sub:  1446363.3 i/s - 4.08x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   604.369k i/100ms
    String#unpack[0]   461.282k i/100ms
Calculating -------------------------------------
      String#unpack1      6.002M (± 0.4%) i/s -     30.218M in   5.035088s
    String#unpack[0]      4.602M (± 0.6%) i/s -     23.064M in   5.012440s

Comparison:
      String#unpack1:  6001681.3 i/s
    String#unpack[0]:  4601539.5 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    26.328k i/100ms
          Time.parse     8.977k i/100ms
Calculating -------------------------------------
        Time.iso8601    265.618k (± 0.4%) i/s -      1.343M in   5.055201s
          Time.parse     89.585k (± 0.5%) i/s -    448.850k in   5.010441s

Comparison:
        Time.iso8601:   265617.9 i/s
          Time.parse:    89585.1 i/s - 2.96x  (± 0.00) slower

