$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       766.789k i/100ms
Function with splat arguments
                        24.680k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.708M (± 0.7%) i/s -     39.106M in   5.073972s
Function with splat arguments
                        245.923k (± 6.3%) i/s -      1.234M in   5.044001s

Comparison:
Function with single Array argument:  7707659.6 i/s
Function with splat arguments:   245922.6 i/s - 31.34x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.017M i/100ms
Sequential Assignment
                         1.011M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.188M (± 0.4%) i/s -     51.890M in   5.093146s
Sequential Assignment
                          9.952M (± 0.5%) i/s -     50.544M in   5.079146s

Comparison:
 Parallel Assignment: 10188287.0 i/s
Sequential Assignment:  9951515.1 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   488.754k i/100ms
       attr_accessor   561.252k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.897M (± 0.5%) i/s -     24.926M in   5.089775s
       attr_accessor      5.632M (± 1.0%) i/s -     28.624M in   5.083105s

Comparison:
       attr_accessor:  5631816.4 i/s
   getter_and_setter:  4897472.1 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    88.679k i/100ms
         respond_to?   779.105k i/100ms
Calculating -------------------------------------
      begin...rescue    891.519k (± 0.4%) i/s -      4.523M in   5.073039s
         respond_to?      7.790M (± 0.3%) i/s -     38.955M in   5.000907s

Comparison:
         respond_to?:  7789708.9 i/s
      begin...rescue:   891519.0 i/s - 8.74x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              normal   299.346k i/100ms
             &method   123.995k i/100ms
Calculating -------------------------------------
              normal      2.960M (± 0.8%) i/s -     14.967M in   5.057097s
             &method      1.227M (± 0.9%) i/s -      6.200M in   5.055277s

Comparison:
              normal:  2959874.8 i/s
             &method:  1226502.0 i/s - 2.41x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       262.000  i/100ms
       define_method   294.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.343k (±22.5%) i/s -     10.218k in   5.084383s
       define_method      3.207k (±19.6%) i/s -     14.406k in   5.021391s

Comparison:
       define_method:     3206.6 i/s
module_eval with string:     2343.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Float#round   261.946k i/100ms
       Kernel#format   201.821k i/100ms
            String#%   170.413k i/100ms
Calculating -------------------------------------
         Float#round      2.637M (± 0.4%) i/s -     13.359M in   5.066994s
       Kernel#format      2.028M (± 0.4%) i/s -     10.293M in   5.076013s
            String#%      1.724M (± 0.5%) i/s -      8.691M in   5.041285s

Comparison:
         Float#round:  2636558.3 i/s
       Kernel#format:  2027779.2 i/s - 1.30x  (± 0.00) slower
            String#%:  1724016.1 i/s - 1.53x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash   900.655k i/100ms
          OpenStruct   497.806k i/100ms
Calculating -------------------------------------
                Hash      9.112M (± 0.3%) i/s -     45.933M in   5.040751s
          OpenStruct      5.017M (± 1.2%) i/s -     25.388M in   5.060889s

Comparison:
                Hash:  9112478.5 i/s
          OpenStruct:  5017360.6 i/s - 1.82x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.114M i/100ms
          OpenStruct     9.743k i/100ms
Calculating -------------------------------------
                Hash     11.133M (± 0.2%) i/s -     55.700M in   5.003119s
          OpenStruct     99.809k (± 2.0%) i/s -    506.636k in   5.078022s

Comparison:
                Hash: 11133192.0 i/s
          OpenStruct:    99808.6 i/s - 111.55x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   597.960k i/100ms
  ancestors.include?   119.873k i/100ms
Calculating -------------------------------------
  less than or equal      5.944M (± 0.3%) i/s -     29.898M in   5.029605s
  ancestors.include?      1.196M (± 1.6%) i/s -      5.994M in   5.013661s

Comparison:
  less than or equal:  5944450.1 i/s
  ancestors.include?:  1195796.2 i/s - 4.97x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.715  (± 0.0%) i/s -      4.000  in   5.595375s
         Kernel loop      0.228  (± 0.0%) i/s -      2.000  in   8.784922s

Comparison:
          While Loop:        0.7 i/s
         Kernel loop:        0.2 i/s - 3.14x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.571M i/100ms
         Array#first     1.314M i/100ms
Calculating -------------------------------------
           Array#[0]     15.703M (± 0.4%) i/s -     78.547M in   5.002236s
         Array#first     13.102M (± 0.3%) i/s -     65.691M in   5.014016s

Comparison:
           Array#[0]: 15702645.8 i/s
         Array#first: 13101568.4 i/s - 1.20x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.553M i/100ms
          Array#last     1.330M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.554M (± 0.7%) i/s -     79.215M in   5.093150s
          Array#last     13.317M (± 0.1%) i/s -     67.827M in   5.093320s

Comparison:
          Array#[-1]: 15554003.4 i/s
          Array#last: 13316948.7 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    97.015k i/100ms
Calculating -------------------------------------
                find      0.266  (± 0.0%) i/s -      2.000  in   7.517658s
             bsearch    984.072k (± 1.3%) i/s -      4.948M in   5.028682s

Comparison:
             bsearch:   984071.6 i/s
                find:        0.3 i/s - 3698955.37x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    19.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    195.806  (± 2.6%) i/s -    988.000  in   5.049240s
        Array#insert      1.445  (± 0.0%) i/s -      8.000  in   5.537655s

Comparison:
       Array#unshift:      195.8 i/s
        Array#insert:        1.4 i/s - 135.54x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.089M i/100ms
          Array#size     2.104M i/100ms
         Array#count     1.637M i/100ms
Calculating -------------------------------------
        Array#length     20.923M (± 0.4%) i/s -    106.562M in   5.093056s
          Array#size     21.108M (± 0.3%) i/s -    107.279M in   5.082348s
         Array#count     16.505M (± 0.5%) i/s -     83.479M in   5.057962s

Comparison:
          Array#size: 21108294.8 i/s
        Array#length: 20923351.5 i/s - 1.01x  (± 0.00) slower
         Array#count: 16504796.5 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.991k i/100ms
        Array#sample     1.038M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    459.037k (± 3.0%) i/s -      2.300M in   5.015141s
        Array#sample     10.333M (± 0.5%) i/s -     51.907M in   5.023571s

Comparison:
        Array#sample: 10332912.8 i/s
 Array#shuffle.first:   459036.8 i/s - 22.51x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    64.515k i/100ms
          Date.parse    32.536k i/100ms
Calculating -------------------------------------
        Date.iso8601    645.454k (± 0.5%) i/s -      3.290M in   5.097719s
          Date.parse    324.315k (± 0.4%) i/s -      1.627M in   5.016190s

Comparison:
        Date.iso8601:   645454.1 i/s
          Date.parse:   324315.3 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.614k i/100ms
           Array#map    26.507k i/100ms
Calculating -------------------------------------
   Array#each + push    185.359k (± 0.5%) i/s -    930.700k in   5.021168s
           Array#map    266.082k (± 0.2%) i/s -      1.352M in   5.080629s

Comparison:
           Array#map:   266081.7 i/s
   Array#each + push:   185359.2 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            For loop    27.655k i/100ms
               #each    31.574k i/100ms
Calculating -------------------------------------
            For loop    277.381k (± 0.5%) i/s -      1.410M in   5.084848s
               #each    318.542k (± 0.3%) i/s -      1.610M in   5.055175s

Comparison:
               #each:   318541.8 i/s
            For loop:   277381.5 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.451k i/100ms
     each_with_index    18.667k i/100ms
Calculating -------------------------------------
          While Loop    274.268k (± 0.3%) i/s -      1.373M in   5.004453s
     each_with_index    187.304k (± 0.4%) i/s -    952.017k in   5.082807s

Comparison:
          While Loop:   274268.2 i/s
     each_with_index:   187304.2 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    92.950k i/100ms
      inject to_proc     2.212k i/100ms
        inject block     2.111k i/100ms
Calculating -------------------------------------
       inject symbol    939.137k (± 5.2%) i/s -      4.740M in   5.058020s
      inject to_proc     22.160k (± 0.4%) i/s -    112.812k in   5.090872s
        inject block     21.179k (± 0.4%) i/s -    107.661k in   5.083364s

Comparison:
       inject symbol:   939137.2 i/s
      inject to_proc:    22160.1 i/s - 42.38x  (± 0.00) slower
        inject block:    21179.4 i/s - 44.34x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.837k i/100ms
   Array#map.flatten     4.025k i/100ms
      Array#flat_map     9.697k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     69.282k (± 0.9%) i/s -    348.687k in   5.033295s
   Array#map.flatten     40.292k (± 0.5%) i/s -    205.275k in   5.094881s
      Array#flat_map     97.383k (± 0.4%) i/s -    494.547k in   5.078458s

Comparison:
      Array#flat_map:    97382.9 i/s
Array#map.flatten(1):    69281.5 i/s - 1.41x  (± 0.00) slower
   Array#map.flatten:    40291.6 i/s - 2.42x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    30.385k i/100ms
  Array#reverse_each    31.587k i/100ms
Calculating -------------------------------------
  Array#reverse.each    306.093k (± 0.7%) i/s -      1.550M in   5.062879s
  Array#reverse_each    315.740k (± 0.4%) i/s -      1.579M in   5.002152s

Comparison:
  Array#reverse_each:   315740.2 i/s
  Array#reverse.each:   306093.3 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        21.074k i/100ms
   Enumerable#detect    83.505k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        210.514k (± 0.8%) i/s -      4.215M in  20.022788s
   Enumerable#detect    833.556k (± 0.7%) i/s -     16.701M in  20.036851s

Comparison:
   Enumerable#detect:   833556.4 i/s
Enumerable#select.first:   210513.8 i/s - 3.96x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       245.383k i/100ms
Enumerable#select.last
                        19.340k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.427M (± 0.3%) i/s -     12.269M in   5.054754s
Enumerable#select.last
                        192.970k (± 0.6%) i/s -    967.000k in   5.011348s

Comparison:
Enumerable#reverse.detect:  2427274.1 i/s
Enumerable#select.last:   192970.3 i/s - 12.58x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         5.082k i/100ms
  Enumerable#sort_by     4.731k i/100ms
     Enumerable#sort     2.443k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         50.762k (± 0.4%) i/s -    254.100k in   5.005838s
  Enumerable#sort_by     48.571k (± 1.7%) i/s -    246.012k in   5.066496s
     Enumerable#sort     24.606k (± 0.5%) i/s -    124.593k in   5.063634s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    50761.5 i/s
  Enumerable#sort_by:    48571.1 i/s - 1.05x  (± 0.00) slower
     Enumerable#sort:    24606.1 i/s - 2.06x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    18.102k i/100ms
Enumerable#sort_by...first
                         9.021k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    180.948k (± 0.4%) i/s -    905.100k in   5.002096s
Enumerable#sort_by...first
                         88.854k (± 0.9%) i/s -    451.050k in   5.076750s

Comparison:
   Enumerable#min_by:   180947.8 i/s
Enumerable#sort_by...first:    88854.1 i/s - 2.04x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   400.138k i/100ms
            Hash#dup   300.674k i/100ms
Calculating -------------------------------------
              Hash[]      3.726M (± 1.9%) i/s -     18.806M in   5.049481s
            Hash#dup      2.885M (± 1.1%) i/s -     14.432M in   5.003419s

Comparison:
              Hash[]:  3725915.5 i/s
            Hash#dup:  2884838.1 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.437M i/100ms
  Hash#fetch, symbol     1.182M i/100ms
     Hash#[], string     1.242M i/100ms
  Hash#fetch, string   798.913k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.384M (± 0.2%) i/s -     73.286M in   5.095106s
  Hash#fetch, symbol     11.912M (± 0.4%) i/s -     60.274M in   5.060157s
     Hash#[], string     12.389M (± 0.4%) i/s -     62.123M in   5.014318s
  Hash#fetch, string      7.996M (± 0.5%) i/s -     40.745M in   5.095565s

Comparison:
     Hash#[], symbol: 14383674.0 i/s
     Hash#[], string: 12389307.1 i/s - 1.16x  (± 0.00) slower
  Hash#fetch, symbol: 11911683.6 i/s - 1.21x  (± 0.00) slower
  Hash#fetch, string:  7996325.0 i/s - 1.80x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   846.729k i/100ms
             Hash#[]     1.039M i/100ms
          Hash#[] ||   946.969k i/100ms
          Hash#[] &&   385.043k i/100ms
          Hash#fetch   403.384k i/100ms
 Hash#fetch fallback   298.264k i/100ms
Calculating -------------------------------------
            Hash#dig      8.321M (± 0.9%) i/s -     42.336M in   5.088334s
             Hash#[]     10.222M (± 0.3%) i/s -     51.972M in   5.084508s
          Hash#[] ||      8.994M (± 1.5%) i/s -     45.455M in   5.055095s
          Hash#[] &&      4.021M (± 5.5%) i/s -     20.407M in   5.090116s
          Hash#fetch      5.713M (± 0.3%) i/s -     28.640M in   5.012822s
 Hash#fetch fallback      3.588M (± 0.2%) i/s -     18.194M in   5.070938s

Comparison:
             Hash#[]: 10221794.6 i/s
          Hash#[] ||:  8993912.1 i/s - 1.14x  (± 0.00) slower
            Hash#dig:  8321030.2 i/s - 1.23x  (± 0.00) slower
          Hash#fetch:  5713468.3 i/s - 1.79x  (± 0.00) slower
          Hash#[] &&:  4020523.7 i/s - 2.54x  (± 0.00) slower
 Hash#fetch fallback:  3587934.3 i/s - 2.85x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.447M i/100ms
  Hash#fetch + block     1.460M i/100ms
    Hash#fetch + arg     1.094M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.463M (± 0.9%) i/s -     72.336M in   5.001796s
  Hash#fetch + block     14.382M (± 0.3%) i/s -     73.025M in   5.077728s
    Hash#fetch + arg     10.956M (± 1.6%) i/s -     55.774M in   5.092031s

Comparison:
  Hash#fetch + const: 14463407.4 i/s
  Hash#fetch + block: 14381554.3 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 10956286.1 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.903k i/100ms
         sort + to_h    11.618k i/100ms
Calculating -------------------------------------
      sort_by + to_h    280.815k (± 0.4%) i/s -      1.423M in   5.067674s
         sort + to_h    116.363k (± 0.4%) i/s -    592.518k in   5.092062s

Comparison:
      sort_by + to_h:   280815.2 i/s
         sort + to_h:   116363.0 i/s - 2.41x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   177.241k i/100ms
       Hash#each_key   207.616k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.776M (± 0.9%) i/s -      9.039M in   5.091301s
       Hash#each_key      2.054M (± 0.4%) i/s -     10.381M in   5.054979s

Comparison:
       Hash#each_key:  2053613.0 i/s
      Hash#keys.each:  1775575.9 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.242k i/100ms
           Hash#key?     1.005M i/100ms
Calculating -------------------------------------
  Hash#keys.include?     12.575k (± 4.9%) i/s -     63.342k in   5.051268s
           Hash#key?     10.178M (± 0.5%) i/s -     51.269M in   5.037188s

Comparison:
           Hash#key?: 10178420.9 i/s
  Hash#keys.include?:    12575.4 i/s - 809.39x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.988k i/100ms
            Hash#[]=    10.239k i/100ms
Calculating -------------------------------------
         Hash#merge!     39.880k (± 0.4%) i/s -    203.388k in   5.100088s
            Hash#[]=    102.744k (± 0.7%) i/s -    522.189k in   5.082685s

Comparison:
            Hash#[]=:   102744.1 i/s
         Hash#merge!:    39879.9 i/s - 2.58x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.749k i/100ms
      Hash#merge({})     3.956k i/100ms
 Hash#dup#merge!({})     2.927k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         48.144k (± 0.6%) i/s -    242.199k in   5.030923s
      Hash#merge({})     39.772k (± 0.5%) i/s -    201.756k in   5.072954s
 Hash#dup#merge!({})     29.034k (± 0.5%) i/s -    146.350k in   5.040749s

Comparison:
{}#merge!(Hash) do end:    48143.6 i/s
      Hash#merge({}):    39771.8 i/s - 1.21x  (± 0.00) slower
 Hash#dup#merge!({}):    29034.3 i/s - 1.66x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   400.520k i/100ms
          Hash#merge   371.654k i/100ms
Calculating -------------------------------------
        Hash#**other      3.970M (± 0.6%) i/s -     20.026M in   5.044668s
          Hash#merge      3.686M (± 0.4%) i/s -     18.583M in   5.041425s

Comparison:
        Hash#**other:  3969866.4 i/s
          Hash#merge:  3686070.8 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.664k i/100ms
         Hash#merge!     3.958k i/100ms
Calculating -------------------------------------
          Hash#merge     16.470k (± 1.4%) i/s -     83.200k in   5.052587s
         Hash#merge!     39.638k (± 0.8%) i/s -    201.858k in   5.092900s

Comparison:
         Hash#merge!:    39637.8 i/s
          Hash#merge:    16469.9 i/s - 2.41x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      420.463k i/100ms
Array#each             229.450k i/100ms
Array#each_w/_object   174.523k i/100ms
Hash#select-include     72.077k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.217M (± 0.7%) i/s -     21.444M in   5.085716s
Array#each                2.307M (± 2.5%) i/s -     11.702M in   5.074960s
Array#each_w/_object      1.750M (± 0.4%) i/s -      8.901M in   5.086034s
Hash#select-include     724.825k (± 0.4%) i/s -      3.676M in   5.071547s

Comparison:
Hash#native-slice   :  4216637.0 i/s
Array#each          :  2307494.9 i/s - 1.83x  (± 0.00) slower
Array#each_w/_object:  1750056.7 i/s - 2.41x  (± 0.00) slower
Hash#select-include :   724824.6 i/s - 5.82x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.080k i/100ms
         Hash#value?   844.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     10.698k (± 3.5%) i/s -     54.000k in   5.055172s
         Hash#value?      8.420k (± 1.4%) i/s -     42.200k in   5.013150s

Comparison:
Hash#values.include?:    10697.5 i/s
         Hash#value?:     8419.8 i/s - 1.27x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                call   669.643k i/100ms
                send   527.336k i/100ms
      method_missing   394.294k i/100ms
Calculating -------------------------------------
                call      6.722M (± 0.5%) i/s -     34.152M in   5.080509s
                send      5.304M (± 0.4%) i/s -     26.894M in   5.070208s
      method_missing      3.946M (± 0.5%) i/s -     20.109M in   5.096360s

Comparison:
                call:  6722301.1 i/s
                send:  5304441.1 i/s - 1.27x  (± 0.00) slower
      method_missing:  3945869.0 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
               Block     9.008k i/100ms
      Symbol#to_proc    10.272k i/100ms
Calculating -------------------------------------
               Block     89.772k (± 1.8%) i/s -    450.400k in   5.018885s
      Symbol#to_proc    102.527k (± 0.6%) i/s -    513.600k in   5.009585s

Comparison:
      Symbol#to_proc:   102526.8 i/s
               Block:    89772.2 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          block.call   938.355k i/100ms
       block + yield   995.682k i/100ms
        unused block     1.298M i/100ms
               yield     1.191M i/100ms
Calculating -------------------------------------
          block.call      9.414M (± 0.2%) i/s -     47.856M in   5.083498s
       block + yield      9.983M (± 0.1%) i/s -     50.780M in   5.086763s
        unused block     13.008M (± 0.1%) i/s -     66.201M in   5.089213s
               yield     11.875M (± 0.3%) i/s -     59.530M in   5.013283s

Comparison:
        unused block: 13008066.8 i/s
               yield: 11874592.2 i/s - 1.10x  (± 0.00) slower
       block + yield:  9982753.2 i/s - 1.30x  (± 0.00) slower
          block.call:  9414033.0 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   327.458k i/100ms
      range#include?    12.618k i/100ms
       range#member?    12.660k i/100ms
       plain compare   534.061k i/100ms
Calculating -------------------------------------
        range#cover?      3.262M (± 0.7%) i/s -     16.373M in   5.019794s
      range#include?    127.955k (± 0.6%) i/s -    643.518k in   5.029450s
       range#member?    128.719k (± 0.5%) i/s -    645.660k in   5.016177s
       plain compare      5.272M (± 0.5%) i/s -     26.703M in   5.065202s

Comparison:
       plain compare:  5272004.2 i/s
        range#cover?:  3261815.7 i/s - 1.62x  (± 0.00) slower
       range#member?:   128719.3 i/s - 40.96x  (± 0.00) slower
      range#include?:   127954.9 i/s - 41.20x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       String#match?   909.208k i/100ms
           String#=~   644.691k i/100ms
          Regexp#===   563.703k i/100ms
        String#match   460.699k i/100ms
Calculating -------------------------------------
       String#match?      9.132M (± 0.5%) i/s -     46.370M in   5.077830s
           String#=~      6.449M (± 0.4%) i/s -     32.879M in   5.098129s
          Regexp#===      5.590M (± 2.0%) i/s -     28.185M in   5.043844s
        String#match      4.624M (± 0.4%) i/s -     23.496M in   5.080918s

Comparison:
       String#match?:  9131976.2 i/s
           String#=~:  6449380.0 i/s - 1.42x  (± 0.00) slower
          Regexp#===:  5590483.9 i/s - 1.63x  (± 0.00) slower
        String#match:  4624384.5 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   646.283k i/100ms
      String#casecmp   779.143k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.463M (± 1.0%) i/s -     32.314M in   5.000387s
      String#casecmp      7.876M (± 0.8%) i/s -     39.736M in   5.045860s

Comparison:
      String#casecmp:  7875543.5 i/s
String#downcase + ==:  6463018.2 i/s - 1.22x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            String#+   604.455k i/100ms
       String#concat   627.071k i/100ms
       String#append   680.008k i/100ms
         "foo" "bar"     1.146M i/100ms
  "#{'foo'}#{'bar'}"     1.163M i/100ms
Calculating -------------------------------------
            String#+      6.044M (± 0.4%) i/s -     30.223M in   5.000756s
       String#concat      6.277M (± 0.2%) i/s -     31.981M in   5.094580s
       String#append      6.816M (± 0.4%) i/s -     34.680M in   5.088274s
         "foo" "bar"     11.431M (± 1.1%) i/s -     57.282M in   5.011860s
  "#{'foo'}#{'bar'}"     11.593M (± 0.4%) i/s -     58.165M in   5.017161s

Comparison:
  "#{'foo'}#{'bar'}": 11593353.9 i/s
         "foo" "bar": 11430882.3 i/s - same-ish: difference falls within error
       String#append:  6815843.9 i/s - 1.70x  (± 0.00) slower
       String#concat:  6277407.3 i/s - 1.85x  (± 0.00) slower
            String#+:  6043754.0 i/s - 1.92x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#+@   996.224k i/100ms
          String#dup   555.737k i/100ms
Calculating -------------------------------------
           String#+@      9.980M (± 0.4%) i/s -     50.807M in   5.091224s
          String#dup      5.555M (± 0.6%) i/s -     27.787M in   5.002744s

Comparison:
           String#+@:  9979592.8 i/s
          String#dup:  5554518.2 i/s - 1.80x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   188.823k i/100ms
       String#match?   431.651k i/100ms
    String#end_with?   622.726k i/100ms
Calculating -------------------------------------
           String#=~      1.892M (± 0.4%) i/s -      9.630M in   5.088820s
       String#match?      4.307M (± 0.5%) i/s -     21.583M in   5.011306s
    String#end_with?      6.256M (± 0.4%) i/s -     31.759M in   5.076383s

Comparison:
    String#end_with?:  6256346.1 i/s
       String#match?:  4306871.8 i/s - 1.45x  (± 0.00) slower
           String#=~:  1892416.7 i/s - 3.31x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   111.535k i/100ms
          String#sub   135.869k i/100ms
String#dup["string"]=
                       178.635k i/100ms
Calculating -------------------------------------
         String#gsub      1.123M (± 0.7%) i/s -      5.688M in   5.065865s
          String#sub      1.349M (± 0.6%) i/s -      6.793M in   5.034469s
String#dup["string"]=
                          1.793M (± 0.6%) i/s -      9.110M in   5.081783s

Comparison:
String#dup["string"]=:  1792814.4 i/s
          String#sub:  1349435.5 i/s - 1.33x  (± 0.00) slower
         String#gsub:  1122913.1 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   105.149k i/100ms
           String#tr   348.748k i/100ms
Calculating -------------------------------------
         String#gsub      1.052M (± 0.5%) i/s -      5.363M in   5.098791s
           String#tr      3.486M (± 0.9%) i/s -     17.437M in   5.003210s

Comparison:
           String#tr:  3485569.8 i/s
         String#gsub:  1051769.1 i/s - 3.31x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.159M i/100ms
         With Freeze     1.689M i/100ms
Calculating -------------------------------------
      Without Freeze     11.593M (± 0.3%) i/s -     59.096M in   5.097791s
         With Freeze     16.902M (± 0.3%) i/s -     86.133M in   5.096045s

Comparison:
         With Freeze: 16902006.5 i/s
      Without Freeze: 11592634.3 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.443k i/100ms
      String#squeeze   156.258k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     34.368k (± 0.8%) i/s -    172.150k in   5.009346s
      String#squeeze      1.562M (± 0.2%) i/s -      7.813M in   5.002186s

Comparison:
      String#squeeze:  1561905.9 i/s
 String#gsub/regex+/:    34367.9 i/s - 45.45x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   287.168k i/100ms
       String#match?   759.700k i/100ms
  String#start_with?   866.390k i/100ms
Calculating -------------------------------------
           String#=~      2.858M (± 1.7%) i/s -     14.358M in   5.026233s
       String#match?      7.592M (± 0.5%) i/s -     37.985M in   5.003098s
  String#start_with?      8.674M (± 0.5%) i/s -     44.186M in   5.093912s

Comparison:
  String#start_with?:  8674495.8 i/s
       String#match?:  7592492.8 i/s - 1.14x  (± 0.00) slower
           String#=~:  2857540.7 i/s - 3.04x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   192.979k i/100ms
    String#[0, n] ==    81.939k i/100ms
   String#[RANGE] ==    77.749k i/100ms
   String#[0...n] ==    46.707k i/100ms
Calculating -------------------------------------
  String#start_with?      1.894M (± 0.6%) i/s -      9.649M in   5.094496s
    String#[0, n] ==    814.680k (± 0.5%) i/s -      4.097M in   5.029010s
   String#[RANGE] ==    753.300k (± 0.7%) i/s -      3.810M in   5.057610s
   String#[0...n] ==    469.106k (± 1.6%) i/s -      2.382M in   5.079144s

Comparison:
  String#start_with?:  1894057.0 i/s
    String#[0, n] ==:   814680.3 i/s - 2.32x  (± 0.00) slower
   String#[RANGE] ==:   753300.0 i/s - 2.51x  (± 0.00) slower
   String#[0...n] ==:   469105.6 i/s - 4.04x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   185.864k i/100ms
 String#sub!'string'   126.145k i/100ms
String#gsub!'string'    78.315k i/100ms
  String#[/regexp/]=   153.018k i/100ms
 String#sub!/regexp/   113.686k i/100ms
String#gsub!/regexp/    61.897k i/100ms
Calculating -------------------------------------
  String#['string']=      1.803M (± 1.5%) i/s -      9.107M in   5.053493s
 String#sub!'string'      1.267M (± 1.1%) i/s -      6.433M in   5.078679s
String#gsub!'string'    785.360k (± 0.6%) i/s -      3.994M in   5.085856s
  String#[/regexp/]=      1.538M (± 0.5%) i/s -      7.804M in   5.074759s
 String#sub!/regexp/      1.130M (± 0.6%) i/s -      5.684M in   5.029945s
String#gsub!/regexp/    607.040k (± 0.7%) i/s -      3.095M in   5.098501s

Comparison:
  String#['string']=:  1802645.1 i/s
  String#[/regexp/]=:  1537831.7 i/s - 1.17x  (± 0.00) slower
 String#sub!'string':  1266891.3 i/s - 1.42x  (± 0.00) slower
 String#sub!/regexp/:  1130134.3 i/s - 1.60x  (± 0.00) slower
String#gsub!'string':   785359.8 i/s - 2.30x  (± 0.00) slower
String#gsub!/regexp/:   607040.4 i/s - 2.97x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          String#sub   144.847k i/100ms
        String#chomp   568.494k i/100ms
String#delete_suffix   620.252k i/100ms
Calculating -------------------------------------
          String#sub      1.445M (± 2.8%) i/s -      7.242M in   5.015678s
        String#chomp      5.685M (± 0.2%) i/s -     28.993M in   5.099661s
String#delete_suffix      6.173M (± 0.2%) i/s -     31.013M in   5.023844s

Comparison:
String#delete_suffix:  6173113.7 i/s
        String#chomp:  5685342.5 i/s - 1.09x  (± 0.00) slower
          String#sub:  1445257.5 i/s - 4.27x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   629.674k i/100ms
          String#sub   149.807k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.289M (± 0.4%) i/s -     31.484M in   5.006393s
          String#sub      1.492M (± 0.4%) i/s -      7.490M in   5.019876s

Comparison:
String#delete_prefix:  6288780.9 i/s
          String#sub:  1492158.9 i/s - 4.21x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   623.807k i/100ms
    String#unpack[0]   474.071k i/100ms
Calculating -------------------------------------
      String#unpack1      6.257M (± 0.6%) i/s -     31.814M in   5.084940s
    String#unpack[0]      4.745M (± 0.6%) i/s -     24.178M in   5.095291s

Comparison:
      String#unpack1:  6256799.2 i/s
    String#unpack[0]:  4745238.5 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.774k i/100ms
          Time.parse     9.249k i/100ms
Calculating -------------------------------------
        Time.iso8601    278.774k (± 0.3%) i/s -      1.416M in   5.081127s
          Time.parse     92.779k (± 0.3%) i/s -    471.699k in   5.084139s

Comparison:
        Time.iso8601:   278773.9 i/s
          Time.parse:    92779.5 i/s - 3.00x  (± 0.00) slower

