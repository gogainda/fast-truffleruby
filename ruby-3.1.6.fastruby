$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       761.518k i/100ms
Function with splat arguments
                        26.701k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.596M (± 0.5%) i/s -     38.076M in   5.012514s
Function with splat arguments
                        263.015k (± 6.4%) i/s -      1.308M in   5.003103s

Comparison:
Function with single Array argument:  7596393.8 i/s
Function with splat arguments:   263015.5 i/s - 28.88x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.016M i/100ms
Sequential Assignment
                       973.533k i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.199M (± 0.5%) i/s -     51.835M in   5.082410s
Sequential Assignment
                          9.924M (± 0.6%) i/s -     49.650M in   5.003239s

Comparison:
 Parallel Assignment: 10199104.5 i/s
Sequential Assignment:  9923917.2 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   476.755k i/100ms
       attr_accessor   547.304k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.765M (± 0.2%) i/s -     23.838M in   5.003095s
       attr_accessor      5.421M (± 0.7%) i/s -     27.365M in   5.048632s

Comparison:
       attr_accessor:  5420625.6 i/s
   getter_and_setter:  4764630.4 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    88.892k i/100ms
         respond_to?   778.484k i/100ms
Calculating -------------------------------------
      begin...rescue    892.432k (± 1.2%) i/s -      4.533M in   5.080699s
         respond_to?      7.726M (± 0.6%) i/s -     38.924M in   5.038016s

Comparison:
         respond_to?:  7726347.2 i/s
      begin...rescue:   892431.7 i/s - 8.66x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              normal   305.639k i/100ms
             &method   124.127k i/100ms
Calculating -------------------------------------
              normal      3.042M (± 3.0%) i/s -     15.282M in   5.028742s
             &method      1.238M (± 0.6%) i/s -      6.206M in   5.014834s

Comparison:
              normal:  3042381.9 i/s
             &method:  1237643.6 i/s - 2.46x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       269.000  i/100ms
       define_method   265.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.413k (±16.2%) i/s -     11.298k in   5.016010s
       define_method      3.309k (±19.3%) i/s -     15.105k in   5.051042s

Comparison:
       define_method:     3308.9 i/s
module_eval with string:     2413.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Float#round   263.547k i/100ms
       Kernel#format   201.298k i/100ms
            String#%   168.551k i/100ms
Calculating -------------------------------------
         Float#round      2.642M (± 0.3%) i/s -     13.441M in   5.087050s
       Kernel#format      2.008M (± 0.6%) i/s -     10.065M in   5.013635s
            String#%      1.697M (± 0.3%) i/s -      8.596M in   5.066505s

Comparison:
         Float#round:  2642203.8 i/s
       Kernel#format:  2007571.8 i/s - 1.32x  (± 0.00) slower
            String#%:  1696668.1 i/s - 1.56x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash   901.660k i/100ms
          OpenStruct   511.324k i/100ms
Calculating -------------------------------------
                Hash      9.059M (± 0.5%) i/s -     45.985M in   5.076396s
          OpenStruct      5.075M (± 0.8%) i/s -     25.566M in   5.038055s

Comparison:
                Hash:  9058775.2 i/s
          OpenStruct:  5074940.8 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.081M i/100ms
          OpenStruct    11.677k i/100ms
Calculating -------------------------------------
                Hash     11.709M (± 0.3%) i/s -     59.462M in   5.078169s
          OpenStruct    118.622k (± 2.5%) i/s -    595.527k in   5.023489s

Comparison:
                Hash: 11709430.5 i/s
          OpenStruct:   118621.5 i/s - 98.71x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   575.347k i/100ms
  ancestors.include?   121.169k i/100ms
Calculating -------------------------------------
  less than or equal      5.775M (± 0.6%) i/s -     29.343M in   5.081433s
  ancestors.include?      1.193M (± 1.3%) i/s -      6.058M in   5.078011s

Comparison:
  less than or equal:  5774684.1 i/s
  ancestors.include?:  1193277.1 i/s - 4.84x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.693  (± 0.0%) i/s -      4.000  in   5.825820s
         Kernel loop      0.222  (± 0.0%) i/s -      2.000  in   8.998405s

Comparison:
          While Loop:        0.7 i/s
         Kernel loop:        0.2 i/s - 3.12x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.563M i/100ms
         Array#first     1.320M i/100ms
Calculating -------------------------------------
           Array#[0]     15.692M (± 0.7%) i/s -     79.697M in   5.079280s
         Array#first     13.086M (± 0.2%) i/s -     65.991M in   5.042861s

Comparison:
           Array#[0]: 15691525.2 i/s
         Array#first: 13086052.8 i/s - 1.20x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.553M i/100ms
          Array#last     1.333M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.527M (± 0.8%) i/s -     77.642M in   5.000734s
          Array#last     13.301M (± 0.3%) i/s -     66.670M in   5.012398s

Comparison:
          Array#[-1]: 15527286.0 i/s
          Array#last: 13301082.9 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    99.568k i/100ms
Calculating -------------------------------------
                find      0.274  (± 0.0%) i/s -      2.000  in   7.289042s
             bsearch    991.486k (± 2.4%) i/s -      4.978M in   5.024355s

Comparison:
             bsearch:   991486.3 i/s
                find:        0.3 i/s - 3613491.91x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    19.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    197.248  (± 2.0%) i/s -    988.000  in   5.011328s
        Array#insert      1.440  (± 0.0%) i/s -      8.000  in   5.557002s

Comparison:
       Array#unshift:      197.2 i/s
        Array#insert:        1.4 i/s - 137.01x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.086M i/100ms
          Array#size     2.100M i/100ms
         Array#count     1.624M i/100ms
Calculating -------------------------------------
        Array#length     20.865M (± 0.6%) i/s -    106.392M in   5.099333s
          Array#size     20.997M (± 0.4%) i/s -    104.986M in   5.000060s
         Array#count     16.452M (± 0.5%) i/s -     82.827M in   5.034702s

Comparison:
          Array#size: 20997347.9 i/s
        Array#length: 20864536.8 i/s - same-ish: difference falls within error
         Array#count: 16451606.3 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    46.122k i/100ms
        Array#sample     1.039M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    464.442k (± 0.5%) i/s -      2.352M in   5.064764s
        Array#sample     10.447M (± 0.2%) i/s -     52.991M in   5.072285s

Comparison:
        Array#sample: 10447274.0 i/s
 Array#shuffle.first:   464441.9 i/s - 22.49x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    65.093k i/100ms
          Date.parse    32.732k i/100ms
Calculating -------------------------------------
        Date.iso8601    652.560k (± 0.5%) i/s -      3.320M in   5.087382s
          Date.parse    327.220k (± 1.3%) i/s -      1.637M in   5.002468s

Comparison:
        Date.iso8601:   652560.0 i/s
          Date.parse:   327219.8 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    19.108k i/100ms
           Array#map    26.987k i/100ms
Calculating -------------------------------------
   Array#each + push    188.902k (± 0.4%) i/s -    955.400k in   5.057735s
           Array#map    270.343k (± 1.1%) i/s -      1.376M in   5.091724s

Comparison:
           Array#map:   270343.3 i/s
   Array#each + push:   188902.0 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            For loop    29.837k i/100ms
               #each    32.664k i/100ms
Calculating -------------------------------------
            For loop    298.205k (± 0.7%) i/s -      1.492M in   5.003014s
               #each    326.663k (± 0.5%) i/s -      1.666M in   5.099802s

Comparison:
               #each:   326662.6 i/s
            For loop:   298204.8 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop    28.240k i/100ms
     each_with_index    19.370k i/100ms
Calculating -------------------------------------
          While Loop    276.676k (± 1.4%) i/s -      1.384M in   5.002368s
     each_with_index    194.886k (± 0.4%) i/s -    987.870k in   5.069052s

Comparison:
          While Loop:   276675.7 i/s
     each_with_index:   194886.4 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       inject symbol   107.931k i/100ms
      inject to_proc     2.156k i/100ms
        inject block     2.030k i/100ms
Calculating -------------------------------------
       inject symbol      1.007M (±14.3%) i/s -      4.965M in   5.015702s
      inject to_proc     21.638k (± 0.3%) i/s -    109.956k in   5.081560s
        inject block     20.328k (± 0.4%) i/s -    103.530k in   5.093099s

Comparison:
       inject symbol:  1006791.4 i/s
      inject to_proc:    21638.4 i/s - 46.53x  (± 0.00) slower
        inject block:    20327.8 i/s - 49.53x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.850k i/100ms
   Array#map.flatten     4.008k i/100ms
      Array#flat_map     9.595k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     69.028k (± 0.5%) i/s -    349.350k in   5.061164s
   Array#map.flatten     39.940k (± 0.6%) i/s -    200.400k in   5.017705s
      Array#flat_map     95.940k (± 0.2%) i/s -    479.750k in   5.000534s

Comparison:
      Array#flat_map:    95940.1 i/s
Array#map.flatten(1):    69027.6 i/s - 1.39x  (± 0.00) slower
   Array#map.flatten:    39939.9 i/s - 2.40x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    31.826k i/100ms
  Array#reverse_each    32.424k i/100ms
Calculating -------------------------------------
  Array#reverse.each    318.241k (± 0.5%) i/s -      1.591M in   5.000443s
  Array#reverse_each    324.754k (± 0.9%) i/s -      1.654M in   5.092316s

Comparison:
  Array#reverse_each:   324754.1 i/s
  Array#reverse.each:   318241.5 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.909k i/100ms
   Enumerable#detect    83.252k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        209.399k (± 1.5%) i/s -      4.203M in  20.075561s
   Enumerable#detect    831.834k (± 0.8%) i/s -     16.650M in  20.017674s

Comparison:
   Enumerable#detect:   831834.4 i/s
Enumerable#select.first:   209399.2 i/s - 3.97x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       248.123k i/100ms
Enumerable#select.last
                        18.561k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.460M (± 0.5%) i/s -     12.406M in   5.043447s
Enumerable#select.last
                        184.910k (± 0.5%) i/s -    928.050k in   5.019049s

Comparison:
Enumerable#reverse.detect:  2459909.8 i/s
Enumerable#select.last:   184909.9 i/s - 13.30x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.950k i/100ms
  Enumerable#sort_by     4.887k i/100ms
     Enumerable#sort     2.426k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         50.971k (± 2.2%) i/s -    257.400k in   5.052476s
  Enumerable#sort_by     48.308k (± 0.9%) i/s -    244.350k in   5.058522s
     Enumerable#sort     24.462k (± 0.6%) i/s -    123.726k in   5.057977s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    50970.6 i/s
  Enumerable#sort_by:    48308.5 i/s - 1.06x  (± 0.00) slower
     Enumerable#sort:    24462.4 i/s - 2.08x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    18.000k i/100ms
Enumerable#sort_by...first
                         8.749k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    179.939k (± 0.5%) i/s -    900.000k in   5.001826s
Enumerable#sort_by...first
                         87.880k (± 0.5%) i/s -    446.199k in   5.077502s

Comparison:
   Enumerable#min_by:   179938.6 i/s
Enumerable#sort_by...first:    87880.3 i/s - 2.05x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   421.748k i/100ms
            Hash#dup   330.921k i/100ms
Calculating -------------------------------------
              Hash[]      3.755M (± 2.4%) i/s -     18.979M in   5.057356s
            Hash#dup      3.202M (± 1.3%) i/s -     16.215M in   5.065433s

Comparison:
              Hash[]:  3754742.1 i/s
            Hash#dup:  3201628.2 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.440M i/100ms
  Hash#fetch, symbol     1.180M i/100ms
     Hash#[], string     1.239M i/100ms
  Hash#fetch, string   790.509k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.384M (± 0.8%) i/s -     71.984M in   5.004931s
  Hash#fetch, symbol     11.852M (± 0.3%) i/s -     60.198M in   5.078995s
     Hash#[], string     12.375M (± 0.5%) i/s -     61.963M in   5.007234s
  Hash#fetch, string      7.928M (± 0.4%) i/s -     40.316M in   5.085326s

Comparison:
     Hash#[], symbol: 14383566.2 i/s
     Hash#[], string: 12375047.3 i/s - 1.16x  (± 0.00) slower
  Hash#fetch, symbol: 11852469.2 i/s - 1.21x  (± 0.00) slower
  Hash#fetch, string:  7928028.2 i/s - 1.81x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   868.375k i/100ms
             Hash#[]   998.532k i/100ms
          Hash#[] ||   885.301k i/100ms
          Hash#[] &&   387.364k i/100ms
          Hash#fetch   605.979k i/100ms
 Hash#fetch fallback   388.461k i/100ms
Calculating -------------------------------------
            Hash#dig      8.644M (± 0.5%) i/s -     43.419M in   5.023042s
             Hash#[]     10.467M (± 0.6%) i/s -     52.922M in   5.056409s
          Hash#[] ||      9.104M (± 0.9%) i/s -     46.036M in   5.056906s
          Hash#[] &&      3.891M (± 1.0%) i/s -     19.756M in   5.077229s
          Hash#fetch      6.001M (± 1.2%) i/s -     30.299M in   5.049771s
 Hash#fetch fallback      3.898M (± 0.6%) i/s -     19.812M in   5.082300s

Comparison:
             Hash#[]: 10466793.8 i/s
          Hash#[] ||:  9104203.3 i/s - 1.15x  (± 0.00) slower
            Hash#dig:  8644114.1 i/s - 1.21x  (± 0.00) slower
          Hash#fetch:  6000832.2 i/s - 1.74x  (± 0.00) slower
 Hash#fetch fallback:  3898292.4 i/s - 2.68x  (± 0.00) slower
          Hash#[] &&:  3891435.9 i/s - 2.69x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.452M i/100ms
  Hash#fetch + block     1.440M i/100ms
    Hash#fetch + arg     1.094M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.471M (± 0.5%) i/s -     72.623M in   5.018659s
  Hash#fetch + block     14.394M (± 0.4%) i/s -     71.995M in   5.001849s
    Hash#fetch + arg     10.956M (± 1.0%) i/s -     55.786M in   5.092211s

Comparison:
  Hash#fetch + const: 14470959.1 i/s
  Hash#fetch + block: 14393882.3 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 10956306.1 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    26.913k i/100ms
         sort + to_h    11.086k i/100ms
Calculating -------------------------------------
      sort_by + to_h    271.673k (± 0.7%) i/s -      1.373M in   5.052490s
         sort + to_h    109.946k (± 1.2%) i/s -    554.300k in   5.042284s

Comparison:
      sort_by + to_h:   271673.4 i/s
         sort + to_h:   109945.6 i/s - 2.47x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   189.371k i/100ms
       Hash#each_key   185.253k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.901M (± 0.5%) i/s -      9.658M in   5.081003s
       Hash#each_key      1.844M (± 1.2%) i/s -      9.263M in   5.023526s

Comparison:
      Hash#keys.each:  1900833.3 i/s
       Hash#each_key:  1844134.3 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     5.439k i/100ms
           Hash#key?   937.191k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     53.849k (± 5.4%) i/s -    271.950k in   5.070828s
           Hash#key?      9.279M (± 0.4%) i/s -     46.860M in   5.050205s

Comparison:
           Hash#key?:  9278900.3 i/s
  Hash#keys.include?:    53849.5 i/s - 172.31x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.995k i/100ms
            Hash#[]=    10.400k i/100ms
Calculating -------------------------------------
         Hash#merge!     39.736k (± 0.8%) i/s -    199.750k in   5.027242s
            Hash#[]=    103.404k (± 1.9%) i/s -    520.000k in   5.030719s

Comparison:
            Hash#[]=:   103404.1 i/s
         Hash#merge!:    39736.3 i/s - 2.60x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.735k i/100ms
      Hash#merge({})     4.014k i/100ms
 Hash#dup#merge!({})     2.926k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         47.902k (± 0.7%) i/s -    241.485k in   5.041491s
      Hash#merge({})     39.860k (± 0.7%) i/s -    200.700k in   5.035375s
 Hash#dup#merge!({})     29.040k (± 0.6%) i/s -    146.300k in   5.038153s

Comparison:
{}#merge!(Hash) do end:    47902.1 i/s
      Hash#merge({}):    39859.7 i/s - 1.20x  (± 0.00) slower
 Hash#dup#merge!({}):    29039.5 i/s - 1.65x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   397.058k i/100ms
          Hash#merge   371.219k i/100ms
Calculating -------------------------------------
        Hash#**other      3.966M (± 0.4%) i/s -     19.853M in   5.006368s
          Hash#merge      3.701M (± 0.5%) i/s -     18.561M in   5.015830s

Comparison:
        Hash#**other:  3965584.4 i/s
          Hash#merge:  3700575.1 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.719k i/100ms
         Hash#merge!     3.959k i/100ms
Calculating -------------------------------------
          Hash#merge     17.040k (± 0.9%) i/s -     85.950k in   5.044354s
         Hash#merge!     39.737k (± 0.5%) i/s -    201.909k in   5.081306s

Comparison:
         Hash#merge!:    39736.8 i/s
          Hash#merge:    17040.4 i/s - 2.33x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      408.994k i/100ms
Array#each             227.915k i/100ms
Array#each_w/_object   175.321k i/100ms
Hash#select-include     72.440k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.167M (± 0.9%) i/s -     20.859M in   5.005753s
Array#each                2.251M (± 0.5%) i/s -     11.396M in   5.062662s
Array#each_w/_object      1.736M (± 0.4%) i/s -      8.766M in   5.049638s
Hash#select-include     725.878k (± 0.5%) i/s -      3.694M in   5.089752s

Comparison:
Hash#native-slice   :  4167312.8 i/s
Array#each          :  2251000.5 i/s - 1.85x  (± 0.00) slower
Array#each_w/_object:  1736007.3 i/s - 2.40x  (± 0.00) slower
Hash#select-include :   725877.6 i/s - 5.74x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.069k i/100ms
         Hash#value?   845.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     10.577k (± 3.4%) i/s -     53.450k in   5.060435s
         Hash#value?      8.490k (± 0.6%) i/s -     43.095k in   5.075885s

Comparison:
Hash#values.include?:    10576.7 i/s
         Hash#value?:     8490.4 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                call   663.268k i/100ms
                send   527.734k i/100ms
      method_missing   391.627k i/100ms
Calculating -------------------------------------
                call      6.665M (± 0.2%) i/s -     33.827M in   5.075396s
                send      5.259M (± 2.2%) i/s -     26.387M in   5.019889s
      method_missing      3.913M (± 0.4%) i/s -     19.581M in   5.004309s

Comparison:
                call:  6664849.4 i/s
                send:  5259394.6 i/s - 1.27x  (± 0.00) slower
      method_missing:  3912958.7 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
               Block     9.103k i/100ms
      Symbol#to_proc    10.299k i/100ms
Calculating -------------------------------------
               Block     91.179k (± 0.5%) i/s -    464.253k in   5.091794s
      Symbol#to_proc    102.120k (± 1.1%) i/s -    514.950k in   5.043205s

Comparison:
      Symbol#to_proc:   102120.2 i/s
               Block:    91179.3 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          block.call   943.947k i/100ms
       block + yield   983.943k i/100ms
        unused block     1.307M i/100ms
               yield     1.187M i/100ms
Calculating -------------------------------------
          block.call      9.439M (± 0.6%) i/s -     47.197M in   5.000162s
       block + yield      9.844M (± 1.5%) i/s -     50.181M in   5.098966s
        unused block     13.081M (± 0.4%) i/s -     66.643M in   5.094795s
               yield     11.849M (± 0.7%) i/s -     59.355M in   5.009520s

Comparison:
        unused block: 13080766.2 i/s
               yield: 11849061.4 i/s - 1.10x  (± 0.00) slower
       block + yield:  9843980.6 i/s - 1.33x  (± 0.00) slower
          block.call:  9439484.6 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   328.014k i/100ms
      range#include?    12.803k i/100ms
       range#member?    12.691k i/100ms
       plain compare   531.879k i/100ms
Calculating -------------------------------------
        range#cover?      3.289M (± 0.3%) i/s -     16.729M in   5.086622s
      range#include?    128.236k (± 0.4%) i/s -    652.953k in   5.091897s
       range#member?    128.684k (± 0.7%) i/s -    647.241k in   5.029925s
       plain compare      5.280M (± 2.2%) i/s -     26.594M in   5.039232s

Comparison:
       plain compare:  5280334.7 i/s
        range#cover?:  3288801.4 i/s - 1.61x  (± 0.00) slower
       range#member?:   128684.4 i/s - 41.03x  (± 0.00) slower
      range#include?:   128235.9 i/s - 41.18x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       String#match?   917.468k i/100ms
           String#=~   639.459k i/100ms
          Regexp#===   562.761k i/100ms
        String#match   468.668k i/100ms
Calculating -------------------------------------
       String#match?      9.141M (± 0.5%) i/s -     45.873M in   5.018817s
           String#=~      6.365M (± 0.4%) i/s -     31.973M in   5.022966s
          Regexp#===      5.587M (± 0.5%) i/s -     28.138M in   5.036591s
        String#match      4.642M (± 0.4%) i/s -     23.433M in   5.048411s

Comparison:
       String#match?:  9140536.8 i/s
           String#=~:  6365444.5 i/s - 1.44x  (± 0.00) slower
          Regexp#===:  5586864.3 i/s - 1.64x  (± 0.00) slower
        String#match:  4641832.4 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   647.151k i/100ms
      String#casecmp   806.875k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.460M (± 0.5%) i/s -     32.358M in   5.009395s
      String#casecmp      8.053M (± 1.9%) i/s -     40.344M in   5.011538s

Comparison:
      String#casecmp:  8053349.9 i/s
String#downcase + ==:  6459569.5 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            String#+   604.845k i/100ms
       String#concat   627.659k i/100ms
       String#append   680.930k i/100ms
         "foo" "bar"     1.166M i/100ms
  "#{'foo'}#{'bar'}"     1.161M i/100ms
Calculating -------------------------------------
            String#+      6.060M (± 0.5%) i/s -     30.847M in   5.090600s
       String#concat      6.287M (± 0.6%) i/s -     32.011M in   5.092115s
       String#append      6.803M (± 0.4%) i/s -     34.046M in   5.004593s
         "foo" "bar"     11.613M (± 0.3%) i/s -     58.279M in   5.018520s
  "#{'foo'}#{'bar'}"     11.613M (± 0.2%) i/s -     59.205M in   5.098221s

Comparison:
  "#{'foo'}#{'bar'}": 11613000.3 i/s
         "foo" "bar": 11612872.6 i/s - same-ish: difference falls within error
       String#append:  6803187.3 i/s - 1.71x  (± 0.00) slower
       String#concat:  6286550.5 i/s - 1.85x  (± 0.00) slower
            String#+:  6059783.2 i/s - 1.92x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#+@     1.016M i/100ms
          String#dup   586.019k i/100ms
Calculating -------------------------------------
           String#+@     10.129M (± 0.6%) i/s -     50.786M in   5.014095s
          String#dup      5.854M (± 0.3%) i/s -     29.301M in   5.005528s

Comparison:
           String#+@: 10129150.1 i/s
          String#dup:  5853772.8 i/s - 1.73x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   186.412k i/100ms
       String#match?   427.353k i/100ms
    String#end_with?   610.605k i/100ms
Calculating -------------------------------------
           String#=~      1.880M (± 0.4%) i/s -      9.507M in   5.057382s
       String#match?      4.271M (± 0.5%) i/s -     21.368M in   5.002532s
    String#end_with?      6.158M (± 0.5%) i/s -     31.141M in   5.056936s

Comparison:
    String#end_with?:  6158227.5 i/s
       String#match?:  4271485.8 i/s - 1.44x  (± 0.00) slower
           String#=~:  1879854.5 i/s - 3.28x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   113.716k i/100ms
          String#sub   136.313k i/100ms
String#dup["string"]=
                       176.952k i/100ms
Calculating -------------------------------------
         String#gsub      1.147M (± 0.5%) i/s -      5.800M in   5.054831s
          String#sub      1.360M (± 0.6%) i/s -      6.816M in   5.010334s
String#dup["string"]=
                          1.797M (± 0.5%) i/s -      9.025M in   5.021452s

Comparison:
String#dup["string"]=:  1797240.1 i/s
          String#sub:  1360361.0 i/s - 1.32x  (± 0.00) slower
         String#gsub:  1147349.4 i/s - 1.57x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   105.745k i/100ms
           String#tr   344.292k i/100ms
Calculating -------------------------------------
         String#gsub      1.063M (± 0.9%) i/s -      5.393M in   5.071501s
           String#tr      3.438M (± 0.5%) i/s -     17.215M in   5.007858s

Comparison:
           String#tr:  3437598.6 i/s
         String#gsub:  1063473.9 i/s - 3.23x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.160M i/100ms
         With Freeze     1.654M i/100ms
Calculating -------------------------------------
      Without Freeze     11.580M (± 0.5%) i/s -     57.989M in   5.007822s
         With Freeze     16.570M (± 0.3%) i/s -     84.331M in   5.089402s

Comparison:
         With Freeze: 16570199.5 i/s
      Without Freeze: 11579890.2 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.443k i/100ms
      String#squeeze   156.549k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     34.583k (± 0.7%) i/s -    175.593k in   5.077623s
      String#squeeze      1.568M (± 0.5%) i/s -      7.984M in   5.091261s

Comparison:
      String#squeeze:  1568212.8 i/s
 String#gsub/regex+/:    34583.3 i/s - 45.35x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   284.581k i/100ms
       String#match?   756.751k i/100ms
  String#start_with?   851.627k i/100ms
Calculating -------------------------------------
           String#=~      2.866M (± 0.5%) i/s -     14.514M in   5.064188s
       String#match?      7.563M (± 1.1%) i/s -     37.838M in   5.003469s
  String#start_with?      8.555M (± 0.4%) i/s -     43.433M in   5.077197s

Comparison:
  String#start_with?:  8554641.6 i/s
       String#match?:  7563171.3 i/s - 1.13x  (± 0.00) slower
           String#=~:  2865999.2 i/s - 2.98x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   209.586k i/100ms
    String#[0, n] ==    81.295k i/100ms
   String#[RANGE] ==    75.787k i/100ms
   String#[0...n] ==    47.770k i/100ms
Calculating -------------------------------------
  String#start_with?      1.958M (± 1.4%) i/s -      9.851M in   5.031461s
    String#[0, n] ==    816.345k (± 1.3%) i/s -      4.146M in   5.079611s
   String#[RANGE] ==    757.667k (± 0.7%) i/s -      3.789M in   5.001574s
   String#[0...n] ==    468.960k (± 1.2%) i/s -      2.388M in   5.093944s

Comparison:
  String#start_with?:  1958151.4 i/s
    String#[0, n] ==:   816345.2 i/s - 2.40x  (± 0.00) slower
   String#[RANGE] ==:   757667.3 i/s - 2.58x  (± 0.00) slower
   String#[0...n] ==:   468960.1 i/s - 4.18x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   180.427k i/100ms
 String#sub!'string'   127.745k i/100ms
String#gsub!'string'    77.318k i/100ms
  String#[/regexp/]=   153.536k i/100ms
 String#sub!/regexp/   115.242k i/100ms
String#gsub!/regexp/    61.041k i/100ms
Calculating -------------------------------------
  String#['string']=      1.845M (± 0.9%) i/s -      9.382M in   5.085945s
 String#sub!'string'      1.279M (± 0.4%) i/s -      6.515M in   5.094776s
String#gsub!'string'    772.106k (± 0.2%) i/s -      3.866M in   5.006985s
  String#[/regexp/]=      1.519M (± 0.5%) i/s -      7.677M in   5.052730s
 String#sub!/regexp/      1.149M (± 1.1%) i/s -      5.762M in   5.015658s
String#gsub!/regexp/    614.448k (± 0.9%) i/s -      3.113M in   5.066855s

Comparison:
  String#['string']=:  1844870.3 i/s
  String#[/regexp/]=:  1519369.7 i/s - 1.21x  (± 0.00) slower
 String#sub!'string':  1278778.7 i/s - 1.44x  (± 0.00) slower
 String#sub!/regexp/:  1148967.6 i/s - 1.61x  (± 0.00) slower
String#gsub!'string':   772105.8 i/s - 2.39x  (± 0.00) slower
String#gsub!/regexp/:   614447.6 i/s - 3.00x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          String#sub   144.061k i/100ms
        String#chomp   565.648k i/100ms
String#delete_suffix   615.322k i/100ms
Calculating -------------------------------------
          String#sub      1.423M (± 0.5%) i/s -      7.203M in   5.060753s
        String#chomp      5.634M (± 0.3%) i/s -     28.282M in   5.019859s
String#delete_suffix      6.161M (± 0.3%) i/s -     31.381M in   5.093562s

Comparison:
String#delete_suffix:  6161039.3 i/s
        String#chomp:  5634162.6 i/s - 1.09x  (± 0.00) slower
          String#sub:  1423346.0 i/s - 4.33x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   619.666k i/100ms
          String#sub   146.330k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.196M (± 0.2%) i/s -     30.983M in   5.000821s
          String#sub      1.464M (± 0.3%) i/s -      7.463M in   5.098851s

Comparison:
String#delete_prefix:  6195661.7 i/s
          String#sub:  1463639.8 i/s - 4.23x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   628.424k i/100ms
    String#unpack[0]   480.068k i/100ms
Calculating -------------------------------------
      String#unpack1      6.293M (± 0.6%) i/s -     32.050M in   5.092976s
    String#unpack[0]      4.825M (± 0.5%) i/s -     24.483M in   5.074724s

Comparison:
      String#unpack1:  6293109.4 i/s
    String#unpack[0]:  4824697.1 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    28.239k i/100ms
          Time.parse     9.606k i/100ms
Calculating -------------------------------------
        Time.iso8601    283.032k (± 0.4%) i/s -      1.440M in   5.088506s
          Time.parse     96.027k (± 0.5%) i/s -    480.300k in   5.001851s

Comparison:
        Time.iso8601:   283032.3 i/s
          Time.parse:    96026.8 i/s - 2.95x  (± 0.00) slower

