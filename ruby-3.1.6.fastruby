$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       750.726k i/100ms
Function with splat arguments
                        24.193k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.472M (± 2.5%) i/s -     37.536M in   5.027211s
Function with splat arguments
                        245.961k (± 6.8%) i/s -      1.234M in   5.047724s

Comparison:
Function with single Array argument:  7472170.1 i/s
Function with splat arguments:   245960.8 i/s - 30.38x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.020M i/100ms
Sequential Assignment
                         1.014M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.183M (± 0.9%) i/s -     50.996M in   5.008346s
Sequential Assignment
                          9.955M (± 2.5%) i/s -     50.707M in   5.097211s

Comparison:
 Parallel Assignment: 10183083.1 i/s
Sequential Assignment:  9955217.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   463.532k i/100ms
       attr_accessor   543.629k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.623M (± 2.4%) i/s -     23.177M in   5.016684s
       attr_accessor      5.450M (± 0.5%) i/s -     27.725M in   5.086828s

Comparison:
       attr_accessor:  5450490.1 i/s
   getter_and_setter:  4622872.0 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    88.758k i/100ms
         respond_to?   791.624k i/100ms
Calculating -------------------------------------
      begin...rescue    895.365k (± 1.2%) i/s -      4.527M in   5.056356s
         respond_to?      7.849M (± 0.4%) i/s -     39.581M in   5.043037s

Comparison:
         respond_to?:  7848827.0 i/s
      begin...rescue:   895365.0 i/s - 8.77x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              normal   310.333k i/100ms
             &method   123.344k i/100ms
Calculating -------------------------------------
              normal      3.101M (± 0.5%) i/s -     15.517M in   5.004686s
             &method      1.246M (± 2.0%) i/s -      6.291M in   5.049547s

Comparison:
              normal:  3100512.5 i/s
             &method:  1246343.9 i/s - 2.49x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       245.000  i/100ms
       define_method   319.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.302k (±17.3%) i/s -     10.780k in   5.048393s
       define_method      3.218k (±18.9%) i/s -     14.674k in   5.059744s

Comparison:
       define_method:     3218.2 i/s
module_eval with string:     2301.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Float#round   262.171k i/100ms
       Kernel#format   201.031k i/100ms
            String#%   172.121k i/100ms
Calculating -------------------------------------
         Float#round      2.613M (± 0.7%) i/s -     13.109M in   5.017127s
       Kernel#format      2.012M (± 2.5%) i/s -     10.052M in   5.000277s
            String#%      1.725M (± 0.5%) i/s -      8.778M in   5.090110s

Comparison:
         Float#round:  2612895.0 i/s
       Kernel#format:  2011678.5 i/s - 1.30x  (± 0.00) slower
            String#%:  1724591.4 i/s - 1.52x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash   910.509k i/100ms
          OpenStruct   513.417k i/100ms
Calculating -------------------------------------
                Hash      9.204M (± 0.8%) i/s -     46.436M in   5.045617s
          OpenStruct      5.042M (± 2.4%) i/s -     25.671M in   5.094740s

Comparison:
                Hash:  9203847.9 i/s
          OpenStruct:  5041825.8 i/s - 1.83x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.067M i/100ms
          OpenStruct     9.858k i/100ms
Calculating -------------------------------------
                Hash     10.831M (± 0.3%) i/s -     54.393M in   5.022241s
          OpenStruct     96.094k (± 2.9%) i/s -    483.042k in   5.031100s

Comparison:
                Hash: 10830578.5 i/s
          OpenStruct:    96093.8 i/s - 112.71x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   582.951k i/100ms
  ancestors.include?   120.066k i/100ms
Calculating -------------------------------------
  less than or equal      5.895M (± 1.0%) i/s -     29.731M in   5.043954s
  ancestors.include?      1.195M (± 2.6%) i/s -      6.003M in   5.028024s

Comparison:
  less than or equal:  5894818.0 i/s
  ancestors.include?:  1194850.2 i/s - 4.93x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.853  (± 0.0%) i/s -      5.000  in   5.878185s
         Kernel loop      0.228  (± 0.0%) i/s -      2.000  in   8.780031s

Comparison:
          While Loop:        0.9 i/s
         Kernel loop:        0.2 i/s - 3.75x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.546M i/100ms
         Array#first     1.327M i/100ms
Calculating -------------------------------------
           Array#[0]     15.697M (± 0.4%) i/s -     78.823M in   5.021583s
         Array#first     13.260M (± 0.3%) i/s -     66.371M in   5.005562s

Comparison:
           Array#[0]: 15696979.1 i/s
         Array#first: 13259577.2 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.547M i/100ms
          Array#last     1.324M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.450M (± 0.7%) i/s -     77.335M in   5.005890s
          Array#last     13.241M (± 0.7%) i/s -     66.219M in   5.001307s

Comparison:
          Array#[-1]: 15449623.8 i/s
          Array#last: 13241019.8 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    95.164k i/100ms
Calculating -------------------------------------
                find      0.262  (± 0.0%) i/s -      2.000  in   7.641894s
             bsearch    951.227k (± 1.4%) i/s -      4.758M in   5.003125s

Comparison:
             bsearch:   951226.7 i/s
                find:        0.3 i/s - 3634583.58x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    18.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    191.211  (± 2.6%) i/s -    972.000  in   5.086637s
        Array#insert      1.435  (± 0.0%) i/s -      8.000  in   5.577094s

Comparison:
       Array#unshift:      191.2 i/s
        Array#insert:        1.4 i/s - 133.29x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.086M i/100ms
          Array#size     2.110M i/100ms
         Array#count     1.626M i/100ms
Calculating -------------------------------------
        Array#length     20.694M (± 2.8%) i/s -    104.316M in   5.045340s
          Array#size     21.070M (± 2.4%) i/s -    105.507M in   5.010632s
         Array#count     16.189M (± 1.8%) i/s -     81.283M in   5.022784s

Comparison:
          Array#size: 21070070.8 i/s
        Array#length: 20693946.5 i/s - same-ish: difference falls within error
         Array#count: 16188875.2 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.731k i/100ms
        Array#sample     1.044M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    458.894k (± 0.4%) i/s -      2.332M in   5.082470s
        Array#sample     10.370M (± 3.0%) i/s -     52.175M in   5.036895s

Comparison:
        Array#sample: 10369730.4 i/s
 Array#shuffle.first:   458894.1 i/s - 22.60x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    64.226k i/100ms
          Date.parse    32.583k i/100ms
Calculating -------------------------------------
        Date.iso8601    640.388k (± 1.8%) i/s -      3.211M in   5.016410s
          Date.parse    324.595k (± 0.4%) i/s -      1.629M in   5.019116s

Comparison:
        Date.iso8601:   640388.4 i/s
          Date.parse:   324594.6 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.977k i/100ms
           Array#map    26.665k i/100ms
Calculating -------------------------------------
   Array#each + push    190.319k (± 0.5%) i/s -    967.827k in   5.085427s
           Array#map    264.755k (± 3.4%) i/s -      1.333M in   5.042819s

Comparison:
           Array#map:   264755.1 i/s
   Array#each + push:   190318.6 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            For loop    29.685k i/100ms
               #each    32.064k i/100ms
Calculating -------------------------------------
            For loop    296.140k (± 0.6%) i/s -      1.484M in   5.012146s
               #each    319.068k (± 3.0%) i/s -      1.603M in   5.029908s

Comparison:
               #each:   319068.2 i/s
            For loop:   296139.8 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.252k i/100ms
     each_with_index    19.218k i/100ms
Calculating -------------------------------------
          While Loop    274.428k (± 0.2%) i/s -      1.390M in   5.064551s
     each_with_index    192.822k (± 0.7%) i/s -    980.118k in   5.083255s

Comparison:
          While Loop:   274428.4 i/s
     each_with_index:   192822.3 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    91.966k i/100ms
      inject to_proc     2.204k i/100ms
        inject block     2.035k i/100ms
Calculating -------------------------------------
       inject symbol      1.006M (±14.6%) i/s -      4.966M in   5.026958s
      inject to_proc     22.039k (± 2.7%) i/s -    112.404k in   5.104718s
        inject block     21.183k (± 3.3%) i/s -    105.820k in   5.001890s

Comparison:
       inject symbol:  1005550.4 i/s
      inject to_proc:    22039.0 i/s - 45.63x  (± 0.00) slower
        inject block:    21183.4 i/s - 47.47x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.931k i/100ms
   Array#map.flatten     4.030k i/100ms
      Array#flat_map     9.672k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     69.502k (± 0.6%) i/s -    353.481k in   5.086086s
   Array#map.flatten     39.785k (± 0.5%) i/s -    201.500k in   5.064826s
      Array#flat_map     97.242k (± 0.3%) i/s -    493.272k in   5.072694s

Comparison:
      Array#flat_map:    97241.7 i/s
Array#map.flatten(1):    69502.1 i/s - 1.40x  (± 0.00) slower
   Array#map.flatten:    39785.1 i/s - 2.44x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    31.536k i/100ms
  Array#reverse_each    32.241k i/100ms
Calculating -------------------------------------
  Array#reverse.each    314.605k (± 2.2%) i/s -      1.577M in   5.014925s
  Array#reverse_each    323.890k (± 0.5%) i/s -      1.644M in   5.076820s

Comparison:
  Array#reverse_each:   323889.8 i/s
  Array#reverse.each:   314605.5 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.556k i/100ms
   Enumerable#detect    83.057k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        204.890k (± 1.6%) i/s -      4.111M in  20.071325s
   Enumerable#detect    830.420k (± 1.6%) i/s -     16.611M in  20.008982s

Comparison:
   Enumerable#detect:   830420.0 i/s
Enumerable#select.first:   204889.9 i/s - 4.05x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       243.218k i/100ms
Enumerable#select.last
                        19.016k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.403M (± 0.6%) i/s -     12.161M in   5.061486s
Enumerable#select.last
                        188.382k (± 2.9%) i/s -    950.800k in   5.052003s

Comparison:
Enumerable#reverse.detect:  2402729.1 i/s
Enumerable#select.last:   188381.6 i/s - 12.75x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.897k i/100ms
  Enumerable#sort_by     4.731k i/100ms
     Enumerable#sort     2.425k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         50.061k (± 1.5%) i/s -    254.644k in   5.087791s
  Enumerable#sort_by     47.373k (± 1.4%) i/s -    241.281k in   5.094121s
     Enumerable#sort     23.724k (± 3.1%) i/s -    118.825k in   5.014447s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    50061.3 i/s
  Enumerable#sort_by:    47373.3 i/s - 1.06x  (± 0.00) slower
     Enumerable#sort:    23724.3 i/s - 2.11x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.830k i/100ms
Enumerable#sort_by...first
                         8.769k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    178.332k (± 0.4%) i/s -    909.330k in   5.099191s
Enumerable#sort_by...first
                         87.152k (± 0.6%) i/s -    438.450k in   5.031032s

Comparison:
   Enumerable#min_by:   178331.9 i/s
Enumerable#sort_by...first:    87152.3 i/s - 2.05x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   410.871k i/100ms
            Hash#dup   306.457k i/100ms
Calculating -------------------------------------
              Hash[]      4.099M (± 2.7%) i/s -     20.544M in   5.015640s
            Hash#dup      2.928M (± 3.2%) i/s -     14.710M in   5.029882s

Comparison:
              Hash[]:  4098993.1 i/s
            Hash#dup:  2927534.7 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.418M i/100ms
  Hash#fetch, symbol     1.182M i/100ms
     Hash#[], string     1.241M i/100ms
  Hash#fetch, string   786.263k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.101M (± 2.7%) i/s -     70.913M in   5.032820s
  Hash#fetch, symbol     11.942M (± 0.5%) i/s -     60.261M in   5.046332s
     Hash#[], string     12.438M (± 0.2%) i/s -     63.266M in   5.086602s
  Hash#fetch, string      7.872M (± 0.3%) i/s -     40.099M in   5.093717s

Comparison:
     Hash#[], symbol: 14101255.0 i/s
     Hash#[], string: 12437811.8 i/s - 1.13x  (± 0.00) slower
  Hash#fetch, symbol: 11941952.6 i/s - 1.18x  (± 0.00) slower
  Hash#fetch, string:  7872416.3 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   868.259k i/100ms
             Hash#[]     1.017M i/100ms
          Hash#[] ||   921.402k i/100ms
          Hash#[] &&   375.993k i/100ms
          Hash#fetch   581.414k i/100ms
 Hash#fetch fallback   389.926k i/100ms
Calculating -------------------------------------
            Hash#dig      8.729M (± 0.8%) i/s -     44.281M in   5.073460s
             Hash#[]     10.163M (± 1.6%) i/s -     50.873M in   5.006967s
          Hash#[] ||      8.898M (± 1.3%) i/s -     45.149M in   5.075035s
          Hash#[] &&      4.214M (± 2.7%) i/s -     21.056M in   5.000441s
          Hash#fetch      6.063M (± 4.2%) i/s -     30.815M in   5.092750s
 Hash#fetch fallback      3.953M (± 2.5%) i/s -     19.886M in   5.034691s

Comparison:
             Hash#[]: 10163050.8 i/s
          Hash#[] ||:  8897822.5 i/s - 1.14x  (± 0.00) slower
            Hash#dig:  8728577.7 i/s - 1.16x  (± 0.00) slower
          Hash#fetch:  6063369.4 i/s - 1.68x  (± 0.00) slower
          Hash#[] &&:  4213992.9 i/s - 2.41x  (± 0.00) slower
 Hash#fetch fallback:  3952709.5 i/s - 2.57x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.440M i/100ms
  Hash#fetch + block     1.463M i/100ms
    Hash#fetch + arg     1.082M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.272M (± 0.4%) i/s -     72.007M in   5.045495s
  Hash#fetch + block     14.517M (± 0.2%) i/s -     73.164M in   5.039864s
    Hash#fetch + arg     10.828M (± 0.2%) i/s -     55.158M in   5.093929s

Comparison:
  Hash#fetch + block: 14517128.4 i/s
  Hash#fetch + const: 14271743.3 i/s - 1.02x  (± 0.00) slower
    Hash#fetch + arg: 10828284.9 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.715k i/100ms
         sort + to_h    10.868k i/100ms
Calculating -------------------------------------
      sort_by + to_h    276.206k (± 0.3%) i/s -      1.386M in   5.017130s
         sort + to_h    108.971k (± 1.2%) i/s -    554.268k in   5.087134s

Comparison:
      sort_by + to_h:   276206.3 i/s
         sort + to_h:   108971.2 i/s - 2.53x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   198.532k i/100ms
       Hash#each_key   203.146k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.905M (± 0.3%) i/s -      9.530M in   5.001306s
       Hash#each_key      2.048M (± 0.4%) i/s -     10.360M in   5.058725s

Comparison:
       Hash#each_key:  2048060.5 i/s
      Hash#keys.each:  1905423.7 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     2.248k i/100ms
           Hash#key?   931.116k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     21.846k (± 4.9%) i/s -    110.152k in   5.057728s
           Hash#key?      9.319M (± 0.4%) i/s -     47.487M in   5.095674s

Comparison:
           Hash#key?:  9319231.0 i/s
  Hash#keys.include?:    21845.5 i/s - 426.60x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.026k i/100ms
            Hash#[]=    10.678k i/100ms
Calculating -------------------------------------
         Hash#merge!     39.749k (± 0.3%) i/s -    201.300k in   5.064367s
            Hash#[]=    103.897k (± 3.5%) i/s -    523.222k in   5.043271s

Comparison:
            Hash#[]=:   103896.9 i/s
         Hash#merge!:    39748.6 i/s - 2.61x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.738k i/100ms
      Hash#merge({})     3.958k i/100ms
 Hash#dup#merge!({})     2.904k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         47.189k (± 0.3%) i/s -    236.900k in   5.020246s
      Hash#merge({})     39.501k (± 0.2%) i/s -    197.900k in   5.010052s
 Hash#dup#merge!({})     28.920k (± 0.9%) i/s -    145.200k in   5.021195s

Comparison:
{}#merge!(Hash) do end:    47189.3 i/s
      Hash#merge({}):    39500.8 i/s - 1.19x  (± 0.00) slower
 Hash#dup#merge!({}):    28919.7 i/s - 1.63x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   397.882k i/100ms
          Hash#merge   364.354k i/100ms
Calculating -------------------------------------
        Hash#**other      3.899M (± 3.6%) i/s -     19.496M in   5.007898s
          Hash#merge      3.690M (± 0.6%) i/s -     18.582M in   5.035479s

Comparison:
        Hash#**other:  3899155.9 i/s
          Hash#merge:  3690346.7 i/s - 1.06x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.676k i/100ms
         Hash#merge!     3.971k i/100ms
Calculating -------------------------------------
          Hash#merge     16.779k (± 0.7%) i/s -     85.476k in   5.094356s
         Hash#merge!     39.616k (± 0.4%) i/s -    198.550k in   5.011947s

Comparison:
         Hash#merge!:    39615.9 i/s
          Hash#merge:    16779.3 i/s - 2.36x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      423.625k i/100ms
Array#each             231.464k i/100ms
Array#each_w/_object   173.452k i/100ms
Hash#select-include     72.527k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.230M (± 0.4%) i/s -     21.181M in   5.007270s
Array#each                2.315M (± 0.3%) i/s -     11.805M in   5.098596s
Array#each_w/_object      1.717M (± 0.4%) i/s -      8.673M in   5.051563s
Hash#select-include     730.683k (± 0.3%) i/s -      3.699M in   5.062269s

Comparison:
Hash#native-slice   :  4230168.6 i/s
Array#each          :  2315297.5 i/s - 1.83x  (± 0.00) slower
Array#each_w/_object:  1716850.3 i/s - 2.46x  (± 0.00) slower
Hash#select-include :   730682.7 i/s - 5.79x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     7.296k i/100ms
         Hash#value?    12.366k i/100ms
Calculating -------------------------------------
Hash#values.include?     71.856k (± 5.1%) i/s -    364.800k in   5.095662s
         Hash#value?    125.399k (± 1.4%) i/s -    630.666k in   5.030318s

Comparison:
         Hash#value?:   125398.6 i/s
Hash#values.include?:    71855.6 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                call   666.518k i/100ms
                send   522.001k i/100ms
      method_missing   389.454k i/100ms
Calculating -------------------------------------
                call      6.685M (± 0.2%) i/s -     33.992M in   5.085264s
                send      5.195M (± 0.3%) i/s -     26.100M in   5.023969s
      method_missing      3.879M (± 1.0%) i/s -     19.473M in   5.019890s

Comparison:
                call:  6684518.3 i/s
                send:  5195141.0 i/s - 1.29x  (± 0.00) slower
      method_missing:  3879492.2 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
               Block     9.007k i/100ms
      Symbol#to_proc    10.274k i/100ms
Calculating -------------------------------------
               Block     89.725k (± 0.5%) i/s -    450.350k in   5.019339s
      Symbol#to_proc    101.635k (± 4.0%) i/s -    513.700k in   5.064174s

Comparison:
      Symbol#to_proc:   101634.9 i/s
               Block:    89725.2 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          block.call   930.242k i/100ms
       block + yield   996.471k i/100ms
        unused block     1.308M i/100ms
               yield     1.188M i/100ms
Calculating -------------------------------------
          block.call      9.453M (± 0.2%) i/s -     47.442M in   5.018656s
       block + yield      9.996M (± 0.1%) i/s -     50.820M in   5.083804s
        unused block     13.106M (± 0.2%) i/s -     66.720M in   5.090721s
               yield     11.842M (± 1.9%) i/s -     59.388M in   5.017077s

Comparison:
        unused block: 13106230.4 i/s
               yield: 11842115.6 i/s - 1.11x  (± 0.00) slower
       block + yield:  9996475.9 i/s - 1.31x  (± 0.00) slower
          block.call:  9453223.5 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   315.411k i/100ms
      range#include?    12.771k i/100ms
       range#member?    12.785k i/100ms
       plain compare   528.687k i/100ms
Calculating -------------------------------------
        range#cover?      3.212M (± 1.1%) i/s -     16.086M in   5.008893s
      range#include?    127.959k (± 0.5%) i/s -    651.321k in   5.090218s
       range#member?    127.197k (± 0.4%) i/s -    639.250k in   5.025737s
       plain compare      5.286M (± 0.4%) i/s -     26.434M in   5.001352s

Comparison:
       plain compare:  5285523.5 i/s
        range#cover?:  3211868.4 i/s - 1.65x  (± 0.00) slower
      range#include?:   127959.1 i/s - 41.31x  (± 0.00) slower
       range#member?:   127197.4 i/s - 41.55x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       String#match?   910.025k i/100ms
           String#=~   637.369k i/100ms
          Regexp#===   568.350k i/100ms
        String#match   475.223k i/100ms
Calculating -------------------------------------
       String#match?      9.025M (± 0.4%) i/s -     45.501M in   5.041569s
           String#=~      6.514M (± 0.9%) i/s -     33.143M in   5.088065s
          Regexp#===      5.714M (± 0.4%) i/s -     28.986M in   5.073067s
        String#match      4.712M (± 0.3%) i/s -     23.761M in   5.042526s

Comparison:
       String#match?:  9025364.3 i/s
           String#=~:  6514437.3 i/s - 1.39x  (± 0.00) slower
          Regexp#===:  5713745.0 i/s - 1.58x  (± 0.00) slower
        String#match:  4712182.4 i/s - 1.92x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   646.431k i/100ms
      String#casecmp   814.212k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.452M (± 0.5%) i/s -     32.322M in   5.009975s
      String#casecmp      8.137M (± 1.2%) i/s -     40.711M in   5.003833s

Comparison:
      String#casecmp:  8137098.8 i/s
String#downcase + ==:  6451573.5 i/s - 1.26x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            String#+   601.856k i/100ms
       String#concat   626.389k i/100ms
       String#append   679.134k i/100ms
         "foo" "bar"     1.175M i/100ms
  "#{'foo'}#{'bar'}"     1.164M i/100ms
Calculating -------------------------------------
            String#+      5.966M (± 2.9%) i/s -     30.093M in   5.048805s
       String#concat      6.255M (± 0.5%) i/s -     31.319M in   5.007566s
       String#append      6.700M (± 3.5%) i/s -     33.957M in   5.076071s
         "foo" "bar"     11.697M (± 0.5%) i/s -     58.756M in   5.023182s
  "#{'foo'}#{'bar'}"     11.611M (± 0.3%) i/s -     58.193M in   5.011762s

Comparison:
         "foo" "bar": 11697373.2 i/s
  "#{'foo'}#{'bar'}": 11611433.0 i/s - same-ish: difference falls within error
       String#append:  6699722.9 i/s - 1.75x  (± 0.00) slower
       String#concat:  6254592.2 i/s - 1.87x  (± 0.00) slower
            String#+:  5966048.5 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#+@   989.573k i/100ms
          String#dup   584.908k i/100ms
Calculating -------------------------------------
           String#+@     10.067M (± 0.4%) i/s -     50.468M in   5.013476s
          String#dup      5.880M (± 0.3%) i/s -     29.830M in   5.073554s

Comparison:
           String#+@: 10066713.5 i/s
          String#dup:  5879625.5 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   188.349k i/100ms
       String#match?   428.492k i/100ms
    String#end_with?   620.105k i/100ms
Calculating -------------------------------------
           String#=~      1.869M (± 3.1%) i/s -      9.417M in   5.043423s
       String#match?      4.301M (± 0.4%) i/s -     21.853M in   5.080856s
    String#end_with?      6.188M (± 0.3%) i/s -     31.005M in   5.010180s

Comparison:
    String#end_with?:  6188497.1 i/s
       String#match?:  4301138.7 i/s - 1.44x  (± 0.00) slower
           String#=~:  1869490.6 i/s - 3.31x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   114.854k i/100ms
          String#sub   134.415k i/100ms
String#dup["string"]=
                       181.546k i/100ms
Calculating -------------------------------------
         String#gsub      1.137M (± 0.4%) i/s -      5.743M in   5.050852s
          String#sub      1.353M (± 2.8%) i/s -      6.855M in   5.069647s
String#dup["string"]=
                          1.791M (± 0.7%) i/s -      9.077M in   5.067762s

Comparison:
String#dup["string"]=:  1791281.9 i/s
          String#sub:  1353453.1 i/s - 1.32x  (± 0.00) slower
         String#gsub:  1136995.6 i/s - 1.58x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   105.896k i/100ms
           String#tr   347.703k i/100ms
Calculating -------------------------------------
         String#gsub      1.053M (± 2.1%) i/s -      5.295M in   5.032567s
           String#tr      3.472M (± 0.6%) i/s -     17.385M in   5.007933s

Comparison:
           String#tr:  3471645.7 i/s
         String#gsub:  1052641.7 i/s - 3.30x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.168M i/100ms
         With Freeze     1.683M i/100ms
Calculating -------------------------------------
      Without Freeze     11.730M (± 0.4%) i/s -     59.553M in   5.077177s
         With Freeze     16.866M (± 0.6%) i/s -     85.834M in   5.089427s

Comparison:
         With Freeze: 16865747.7 i/s
      Without Freeze: 11729783.5 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.373k i/100ms
      String#squeeze   155.312k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     33.991k (± 0.4%) i/s -    172.023k in   5.060912s
      String#squeeze      1.555M (± 0.6%) i/s -      7.921M in   5.092816s

Comparison:
      String#squeeze:  1555361.5 i/s
 String#gsub/regex+/:    33991.1 i/s - 45.76x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   285.709k i/100ms
       String#match?   761.883k i/100ms
  String#start_with?   872.243k i/100ms
Calculating -------------------------------------
           String#=~      2.839M (± 1.5%) i/s -     14.285M in   5.033425s
       String#match?      7.602M (± 0.6%) i/s -     38.094M in   5.011425s
  String#start_with?      8.753M (± 1.9%) i/s -     44.484M in   5.084557s

Comparison:
  String#start_with?:  8752667.7 i/s
       String#match?:  7601745.5 i/s - 1.15x  (± 0.00) slower
           String#=~:  2838852.2 i/s - 3.08x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   192.680k i/100ms
    String#[0, n] ==    83.546k i/100ms
   String#[RANGE] ==    76.732k i/100ms
   String#[0...n] ==    47.862k i/100ms
Calculating -------------------------------------
  String#start_with?      1.876M (± 3.2%) i/s -      9.441M in   5.038136s
    String#[0, n] ==    833.783k (± 1.0%) i/s -      4.177M in   5.010576s
   String#[RANGE] ==    756.579k (± 0.9%) i/s -      3.837M in   5.071396s
   String#[0...n] ==    479.461k (± 1.1%) i/s -      2.441M in   5.091709s

Comparison:
  String#start_with?:  1876217.1 i/s
    String#[0, n] ==:   833782.8 i/s - 2.25x  (± 0.00) slower
   String#[RANGE] ==:   756578.8 i/s - 2.48x  (± 0.00) slower
   String#[0...n] ==:   479461.0 i/s - 3.91x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   177.050k i/100ms
 String#sub!'string'   129.896k i/100ms
String#gsub!'string'    78.298k i/100ms
  String#[/regexp/]=   155.528k i/100ms
 String#sub!/regexp/   114.785k i/100ms
String#gsub!/regexp/    60.283k i/100ms
Calculating -------------------------------------
  String#['string']=      1.783M (± 2.1%) i/s -      9.030M in   5.065688s
 String#sub!'string'      1.271M (± 0.7%) i/s -      6.365M in   5.008708s
String#gsub!'string'    781.537k (± 3.4%) i/s -      3.915M in   5.016143s
  String#[/regexp/]=      1.542M (± 0.8%) i/s -      7.776M in   5.043836s
 String#sub!/regexp/      1.127M (± 0.6%) i/s -      5.739M in   5.093964s
String#gsub!/regexp/    601.619k (± 0.9%) i/s -      3.014M in   5.010463s

Comparison:
  String#['string']=:  1783404.3 i/s
  String#[/regexp/]=:  1541868.7 i/s - 1.16x  (± 0.00) slower
 String#sub!'string':  1270822.2 i/s - 1.40x  (± 0.00) slower
 String#sub!/regexp/:  1126718.2 i/s - 1.58x  (± 0.00) slower
String#gsub!'string':   781537.3 i/s - 2.28x  (± 0.00) slower
String#gsub!/regexp/:   601619.1 i/s - 2.96x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          String#sub   143.811k i/100ms
        String#chomp   569.129k i/100ms
String#delete_suffix   615.680k i/100ms
Calculating -------------------------------------
          String#sub      1.439M (± 0.3%) i/s -      7.334M in   5.097175s
        String#chomp      5.685M (± 0.3%) i/s -     28.456M in   5.005418s
String#delete_suffix      6.112M (± 2.7%) i/s -     30.784M in   5.041059s

Comparison:
String#delete_suffix:  6111885.8 i/s
        String#chomp:  5685183.3 i/s - 1.08x  (± 0.00) slower
          String#sub:  1438916.2 i/s - 4.25x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   624.308k i/100ms
          String#sub   151.482k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.205M (± 1.7%) i/s -     31.215M in   5.032125s
          String#sub      1.493M (± 0.5%) i/s -      7.574M in   5.074323s

Comparison:
String#delete_prefix:  6205354.5 i/s
          String#sub:  1492677.1 i/s - 4.16x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   632.057k i/100ms
    String#unpack[0]   481.101k i/100ms
Calculating -------------------------------------
      String#unpack1      6.328M (± 0.5%) i/s -     32.235M in   5.094408s
    String#unpack[0]      4.778M (± 3.5%) i/s -     24.055M in   5.041314s

Comparison:
      String#unpack1:  6327693.4 i/s
    String#unpack[0]:  4778331.5 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    28.331k i/100ms
          Time.parse     9.440k i/100ms
Calculating -------------------------------------
        Time.iso8601    285.123k (± 0.6%) i/s -      1.445M in   5.067740s
          Time.parse     94.945k (± 2.9%) i/s -    481.440k in   5.075730s

Comparison:
        Time.iso8601:   285122.8 i/s
          Time.parse:    94944.6 i/s - 3.00x  (± 0.00) slower

