$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       769.986k i/100ms
Function with splat arguments
                        26.717k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.690M (± 0.4%) i/s -     38.499M in   5.006278s
Function with splat arguments
                        229.997k (± 6.9%) i/s -      1.149M in   5.023640s

Comparison:
Function with single Array argument:  7690307.0 i/s
Function with splat arguments:   229997.0 i/s - 33.44x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.007M i/100ms
Sequential Assignment
                         1.000M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.110M (± 0.2%) i/s -     51.361M in   5.080450s
Sequential Assignment
                         10.017M (± 0.2%) i/s -     51.024M in   5.093922s

Comparison:
 Parallel Assignment: 10109634.3 i/s
Sequential Assignment: 10016607.0 i/s - 1.01x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   480.920k i/100ms
       attr_accessor   560.979k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.839M (± 0.4%) i/s -     24.527M in   5.069029s
       attr_accessor      5.581M (± 1.7%) i/s -     28.049M in   5.027333s

Comparison:
       attr_accessor:  5581063.6 i/s
   getter_and_setter:  4838655.8 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    88.676k i/100ms
         respond_to?   784.383k i/100ms
Calculating -------------------------------------
      begin...rescue    886.275k (± 0.7%) i/s -      4.434M in   5.002961s
         respond_to?      7.844M (± 1.0%) i/s -     39.219M in   5.000502s

Comparison:
         respond_to?:  7843782.9 i/s
      begin...rescue:   886274.8 i/s - 8.85x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              normal   298.663k i/100ms
             &method   123.124k i/100ms
Calculating -------------------------------------
              normal      3.002M (± 0.5%) i/s -     15.232M in   5.073990s
             &method      1.228M (± 0.5%) i/s -      6.156M in   5.015196s

Comparison:
              normal:  3002004.7 i/s
             &method:  1227543.9 i/s - 2.45x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       259.000  i/100ms
       define_method   293.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.273k (±22.9%) i/s -     10.101k in   5.011438s
       define_method      3.215k (±19.5%) i/s -     14.650k in   5.072024s

Comparison:
       define_method:     3215.2 i/s
module_eval with string:     2273.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Float#round   264.071k i/100ms
       Kernel#format   198.782k i/100ms
            String#%   170.810k i/100ms
Calculating -------------------------------------
         Float#round      2.613M (± 0.6%) i/s -     13.204M in   5.052979s
       Kernel#format      1.981M (± 0.4%) i/s -      9.939M in   5.017637s
            String#%      1.704M (± 0.3%) i/s -      8.540M in   5.011736s

Comparison:
         Float#round:  2613103.3 i/s
       Kernel#format:  1980866.2 i/s - 1.32x  (± 0.00) slower
            String#%:  1704111.2 i/s - 1.53x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash   905.373k i/100ms
          OpenStruct   500.519k i/100ms
Calculating -------------------------------------
                Hash      9.106M (± 0.7%) i/s -     46.174M in   5.070734s
          OpenStruct      4.987M (± 0.7%) i/s -     25.026M in   5.018290s

Comparison:
                Hash:  9106437.7 i/s
          OpenStruct:  4987216.3 i/s - 1.83x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.095M i/100ms
          OpenStruct    11.619k i/100ms
Calculating -------------------------------------
                Hash     11.497M (± 0.3%) i/s -     58.061M in   5.050031s
          OpenStruct    116.444k (± 2.7%) i/s -    592.569k in   5.092802s

Comparison:
                Hash: 11497154.5 i/s
          OpenStruct:   116443.8 i/s - 98.74x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   587.750k i/100ms
  ancestors.include?   120.141k i/100ms
Calculating -------------------------------------
  less than or equal      5.745M (± 1.2%) i/s -     28.800M in   5.013544s
  ancestors.include?      1.187M (± 1.2%) i/s -      6.007M in   5.061340s

Comparison:
  less than or equal:  5745239.9 i/s
  ancestors.include?:  1187030.3 i/s - 4.84x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.614  (± 0.0%) i/s -      4.000  in   6.522661s
         Kernel loop      0.212  (± 0.0%) i/s -      2.000  in   9.429588s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 2.89x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.532M i/100ms
         Array#first     1.329M i/100ms
Calculating -------------------------------------
           Array#[0]     15.306M (± 0.4%) i/s -     76.618M in   5.005762s
         Array#first     13.256M (± 0.5%) i/s -     66.452M in   5.013155s

Comparison:
           Array#[0]: 15306248.4 i/s
         Array#first: 13255866.8 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.553M i/100ms
          Array#last     1.333M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.564M (± 0.2%) i/s -     79.195M in   5.088482s
          Array#last     13.267M (± 1.5%) i/s -     66.648M in   5.024747s

Comparison:
          Array#[-1]: 15563733.5 i/s
          Array#last: 13267398.7 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    97.923k i/100ms
Calculating -------------------------------------
                find      0.263  (± 0.0%) i/s -      2.000  in   7.601429s
             bsearch    979.377k (± 1.3%) i/s -      4.896M in   5.000122s

Comparison:
             bsearch:   979376.5 i/s
                find:        0.3 i/s - 3722329.71x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    19.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    196.719  (± 2.5%) i/s -    988.000  in   5.025606s
        Array#insert      1.446  (± 0.0%) i/s -      8.000  in   5.533369s

Comparison:
       Array#unshift:      196.7 i/s
        Array#insert:        1.4 i/s - 136.06x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.089M i/100ms
          Array#size     2.101M i/100ms
         Array#count     1.649M i/100ms
Calculating -------------------------------------
        Array#length     20.935M (± 0.4%) i/s -    106.543M in   5.089150s
          Array#size     21.004M (± 0.5%) i/s -    105.049M in   5.001429s
         Array#count     16.311M (± 0.2%) i/s -     82.467M in   5.056079s

Comparison:
          Array#size: 21004162.8 i/s
        Array#length: 20935490.8 i/s - same-ish: difference falls within error
         Array#count: 16310567.5 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.341k i/100ms
        Array#sample     1.026M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    459.700k (± 0.8%) i/s -      2.312M in   5.030548s
        Array#sample     10.271M (± 0.4%) i/s -     52.351M in   5.097061s

Comparison:
        Array#sample: 10271058.4 i/s
 Array#shuffle.first:   459699.6 i/s - 22.34x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    64.731k i/100ms
          Date.parse    32.642k i/100ms
Calculating -------------------------------------
        Date.iso8601    649.577k (± 0.6%) i/s -      3.301M in   5.082392s
          Date.parse    325.643k (± 3.4%) i/s -      1.632M in   5.019128s

Comparison:
        Date.iso8601:   649577.0 i/s
          Date.parse:   325643.4 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    19.033k i/100ms
           Array#map    26.641k i/100ms
Calculating -------------------------------------
   Array#each + push    187.905k (± 0.8%) i/s -    951.650k in   5.064820s
           Array#map    265.115k (± 0.3%) i/s -      1.332M in   5.024482s

Comparison:
           Array#map:   265114.7 i/s
   Array#each + push:   187905.3 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            For loop    29.804k i/100ms
               #each    32.527k i/100ms
Calculating -------------------------------------
            For loop    298.697k (± 0.3%) i/s -      1.520M in   5.088836s
               #each    325.410k (± 1.0%) i/s -      1.659M in   5.098349s

Comparison:
               #each:   325409.7 i/s
            For loop:   298696.5 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.394k i/100ms
     each_with_index    19.291k i/100ms
Calculating -------------------------------------
          While Loop    287.336k (± 0.3%) i/s -      1.452M in   5.052940s
     each_with_index    193.805k (± 0.4%) i/s -    983.841k in   5.076538s

Comparison:
          While Loop:   287336.3 i/s
     each_with_index:   193805.3 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    93.120k i/100ms
      inject to_proc     2.193k i/100ms
        inject block     2.040k i/100ms
Calculating -------------------------------------
       inject symbol      1.098M (±16.7%) i/s -      5.401M in   5.052928s
      inject to_proc     22.056k (± 0.2%) i/s -    111.843k in   5.070921s
        inject block     20.455k (± 0.4%) i/s -    104.040k in   5.086481s

Comparison:
       inject symbol:  1098354.3 i/s
      inject to_proc:    22055.9 i/s - 49.80x  (± 0.00) slower
        inject block:    20454.6 i/s - 53.70x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.899k i/100ms
   Array#map.flatten     3.996k i/100ms
      Array#flat_map     9.700k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     69.447k (± 1.6%) i/s -    351.849k in   5.067840s
   Array#map.flatten     40.278k (± 0.6%) i/s -    203.796k in   5.059857s
      Array#flat_map     96.846k (± 0.5%) i/s -    485.000k in   5.008037s

Comparison:
      Array#flat_map:    96846.5 i/s
Array#map.flatten(1):    69447.0 i/s - 1.39x  (± 0.00) slower
   Array#map.flatten:    40278.5 i/s - 2.40x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    31.627k i/100ms
  Array#reverse_each    32.423k i/100ms
Calculating -------------------------------------
  Array#reverse.each    316.747k (± 0.4%) i/s -      1.613M in   5.092409s
  Array#reverse_each    324.803k (± 0.4%) i/s -      1.654M in   5.091096s

Comparison:
  Array#reverse_each:   324803.2 i/s
  Array#reverse.each:   316747.0 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.854k i/100ms
   Enumerable#detect    83.379k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        208.359k (± 0.4%) i/s -      4.171M in  20.017669s
   Enumerable#detect    834.277k (± 1.4%) i/s -     16.759M in  20.092626s

Comparison:
   Enumerable#detect:   834277.4 i/s
Enumerable#select.first:   208359.3 i/s - 4.00x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       243.063k i/100ms
Enumerable#select.last
                        18.958k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.436M (± 0.5%) i/s -     12.396M in   5.089141s
Enumerable#select.last
                        189.657k (± 0.7%) i/s -    966.858k in   5.098189s

Comparison:
Enumerable#reverse.detect:  2435880.0 i/s
Enumerable#select.last:   189656.7 i/s - 12.84x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.991k i/100ms
  Enumerable#sort_by     4.713k i/100ms
     Enumerable#sort     2.377k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         50.182k (± 0.9%) i/s -    254.541k in   5.072708s
  Enumerable#sort_by     48.883k (± 0.9%) i/s -    245.076k in   5.013905s
     Enumerable#sort     24.277k (± 0.4%) i/s -    123.604k in   5.091410s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    50182.4 i/s
  Enumerable#sort_by:    48882.9 i/s - 1.03x  (± 0.00) slower
     Enumerable#sort:    24277.4 i/s - 2.07x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.963k i/100ms
Enumerable#sort_by...first
                         8.773k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    180.139k (± 0.7%) i/s -    916.113k in   5.085833s
Enumerable#sort_by...first
                         88.617k (± 1.3%) i/s -    447.423k in   5.049798s

Comparison:
   Enumerable#min_by:   180139.0 i/s
Enumerable#sort_by...first:    88617.3 i/s - 2.03x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   406.880k i/100ms
            Hash#dup   325.255k i/100ms
Calculating -------------------------------------
              Hash[]      3.988M (± 2.7%) i/s -     19.937M in   5.002247s
            Hash#dup      3.201M (± 1.4%) i/s -     16.263M in   5.081556s

Comparison:
              Hash[]:  3988312.5 i/s
            Hash#dup:  3200951.1 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.437M i/100ms
  Hash#fetch, symbol     1.195M i/100ms
     Hash#[], string     1.252M i/100ms
  Hash#fetch, string   793.680k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.370M (± 0.5%) i/s -     71.873M in   5.001765s
  Hash#fetch, symbol     11.874M (± 1.5%) i/s -     59.746M in   5.033131s
     Hash#[], string     12.552M (± 0.2%) i/s -     63.869M in   5.088539s
  Hash#fetch, string      7.965M (± 0.2%) i/s -     40.478M in   5.081988s

Comparison:
     Hash#[], symbol: 14369855.1 i/s
     Hash#[], string: 12551573.7 i/s - 1.14x  (± 0.00) slower
  Hash#fetch, symbol: 11873621.2 i/s - 1.21x  (± 0.00) slower
  Hash#fetch, string:  7964968.6 i/s - 1.80x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   885.415k i/100ms
             Hash#[]     1.026M i/100ms
          Hash#[] ||   924.347k i/100ms
          Hash#[] &&   404.566k i/100ms
          Hash#fetch   603.973k i/100ms
 Hash#fetch fallback   390.350k i/100ms
Calculating -------------------------------------
            Hash#dig      8.771M (± 0.7%) i/s -     44.271M in   5.047700s
             Hash#[]     10.413M (± 1.8%) i/s -     52.323M in   5.026383s
          Hash#[] ||      9.175M (± 2.7%) i/s -     46.217M in   5.040937s
          Hash#[] &&      4.079M (± 3.4%) i/s -     20.633M in   5.063656s
          Hash#fetch      6.247M (± 1.2%) i/s -     31.407M in   5.028348s
 Hash#fetch fallback      3.858M (± 5.2%) i/s -     19.518M in   5.079649s

Comparison:
             Hash#[]: 10413080.4 i/s
          Hash#[] ||:  9175011.2 i/s - 1.13x  (± 0.00) slower
            Hash#dig:  8770863.5 i/s - 1.19x  (± 0.00) slower
          Hash#fetch:  6246797.4 i/s - 1.67x  (± 0.00) slower
          Hash#[] &&:  4079305.9 i/s - 2.55x  (± 0.00) slower
 Hash#fetch fallback:  3858137.3 i/s - 2.70x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.446M i/100ms
  Hash#fetch + block     1.452M i/100ms
    Hash#fetch + arg     1.107M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.628M (± 0.5%) i/s -     73.731M in   5.040317s
  Hash#fetch + block     14.405M (± 0.4%) i/s -     72.588M in   5.039157s
    Hash#fetch + arg     11.066M (± 0.5%) i/s -     55.370M in   5.003947s

Comparison:
  Hash#fetch + const: 14628472.8 i/s
  Hash#fetch + block: 14405109.1 i/s - 1.02x  (± 0.00) slower
    Hash#fetch + arg: 11065615.9 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.551k i/100ms
         sort + to_h    11.264k i/100ms
Calculating -------------------------------------
      sort_by + to_h    275.424k (± 0.8%) i/s -      1.378M in   5.001857s
         sort + to_h    113.080k (± 0.3%) i/s -    574.464k in   5.080188s

Comparison:
      sort_by + to_h:   275424.0 i/s
         sort + to_h:   113080.1 i/s - 2.44x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   189.812k i/100ms
       Hash#each_key   210.680k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.916M (± 0.3%) i/s -      9.680M in   5.052576s
       Hash#each_key      2.047M (± 0.6%) i/s -     10.323M in   5.043385s

Comparison:
       Hash#each_key:  2046973.4 i/s
      Hash#keys.each:  1915954.8 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.264k i/100ms
           Hash#key?     1.018M i/100ms
Calculating -------------------------------------
  Hash#keys.include?     12.556k (± 4.3%) i/s -     63.200k in   5.044072s
           Hash#key?     10.255M (± 0.6%) i/s -     51.943M in   5.065327s

Comparison:
           Hash#key?: 10254956.4 i/s
  Hash#keys.include?:    12556.4 i/s - 816.71x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.958k i/100ms
            Hash#[]=    10.010k i/100ms
Calculating -------------------------------------
         Hash#merge!     39.236k (± 0.7%) i/s -    197.900k in   5.044107s
            Hash#[]=    103.450k (± 1.2%) i/s -    520.520k in   5.032342s

Comparison:
            Hash#[]=:   103450.2 i/s
         Hash#merge!:    39236.1 i/s - 2.64x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.726k i/100ms
      Hash#merge({})     3.972k i/100ms
 Hash#dup#merge!({})     2.924k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         47.469k (± 0.5%) i/s -    241.026k in   5.077713s
      Hash#merge({})     39.815k (± 0.6%) i/s -    202.572k in   5.087944s
 Hash#dup#merge!({})     29.014k (± 0.5%) i/s -    146.200k in   5.039170s

Comparison:
{}#merge!(Hash) do end:    47468.7 i/s
      Hash#merge({}):    39815.4 i/s - 1.19x  (± 0.00) slower
 Hash#dup#merge!({}):    29013.5 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   391.777k i/100ms
          Hash#merge   362.373k i/100ms
Calculating -------------------------------------
        Hash#**other      3.905M (± 0.6%) i/s -     19.589M in   5.016102s
          Hash#merge      3.625M (± 0.6%) i/s -     18.481M in   5.098060s

Comparison:
        Hash#**other:  3905323.5 i/s
          Hash#merge:  3625249.0 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.683k i/100ms
         Hash#merge!     3.989k i/100ms
Calculating -------------------------------------
          Hash#merge     16.735k (± 2.0%) i/s -     84.150k in   5.030564s
         Hash#merge!     40.327k (± 0.2%) i/s -    203.439k in   5.044771s

Comparison:
         Hash#merge!:    40326.9 i/s
          Hash#merge:    16735.0 i/s - 2.41x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      412.921k i/100ms
Array#each             229.657k i/100ms
Array#each_w/_object   174.929k i/100ms
Hash#select-include     73.280k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.151M (± 0.4%) i/s -     21.059M in   5.073314s
Array#each                2.286M (± 0.6%) i/s -     11.483M in   5.022777s
Array#each_w/_object      1.742M (± 0.5%) i/s -      8.746M in   5.021001s
Hash#select-include     732.814k (± 1.8%) i/s -      3.664M in   5.001671s

Comparison:
Hash#native-slice   :  4150990.5 i/s
Array#each          :  2286229.5 i/s - 1.82x  (± 0.00) slower
Array#each_w/_object:  1742026.5 i/s - 2.38x  (± 0.00) slower
Hash#select-include :   732814.1 i/s - 5.66x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.072k i/100ms
         Hash#value?   849.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     10.756k (± 3.8%) i/s -     54.672k in   5.091660s
         Hash#value?      8.510k (± 0.6%) i/s -     43.299k in   5.087957s

Comparison:
Hash#values.include?:    10755.9 i/s
         Hash#value?:     8510.4 i/s - 1.26x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                call   671.364k i/100ms
                send   528.014k i/100ms
      method_missing   393.453k i/100ms
Calculating -------------------------------------
                call      6.744M (± 0.4%) i/s -     34.240M in   5.076754s
                send      5.264M (± 0.6%) i/s -     26.401M in   5.015634s
      method_missing      3.933M (± 0.6%) i/s -     19.673M in   5.001899s

Comparison:
                call:  6744467.5 i/s
                send:  5263846.1 i/s - 1.28x  (± 0.00) slower
      method_missing:  3933185.0 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
               Block     9.137k i/100ms
      Symbol#to_proc    10.362k i/100ms
Calculating -------------------------------------
               Block     91.270k (± 0.5%) i/s -    456.850k in   5.005629s
      Symbol#to_proc    103.479k (± 0.6%) i/s -    518.100k in   5.006995s

Comparison:
      Symbol#to_proc:   103479.5 i/s
               Block:    91269.6 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          block.call   926.531k i/100ms
       block + yield     1.003M i/100ms
        unused block     1.304M i/100ms
               yield     1.190M i/100ms
Calculating -------------------------------------
          block.call      9.265M (± 0.4%) i/s -     47.253M in   5.100047s
       block + yield     10.039M (± 0.3%) i/s -     51.140M in   5.094213s
        unused block     13.039M (± 0.4%) i/s -     65.196M in   5.000137s
               yield     11.930M (± 0.4%) i/s -     60.709M in   5.088734s

Comparison:
        unused block: 13039070.8 i/s
               yield: 11930182.2 i/s - 1.09x  (± 0.00) slower
       block + yield: 10039001.5 i/s - 1.30x  (± 0.00) slower
          block.call:  9265390.2 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   325.753k i/100ms
      range#include?    12.783k i/100ms
       range#member?    12.713k i/100ms
       plain compare   533.413k i/100ms
Calculating -------------------------------------
        range#cover?      3.260M (± 1.3%) i/s -     16.613M in   5.097707s
      range#include?    129.532k (± 0.7%) i/s -    651.933k in   5.033205s
       range#member?    128.504k (± 0.7%) i/s -    648.363k in   5.045727s
       plain compare      5.310M (± 0.4%) i/s -     26.671M in   5.022793s

Comparison:
       plain compare:  5310012.7 i/s
        range#cover?:  3259569.4 i/s - 1.63x  (± 0.00) slower
      range#include?:   129532.4 i/s - 40.99x  (± 0.00) slower
       range#member?:   128503.8 i/s - 41.32x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       String#match?   916.752k i/100ms
           String#=~   641.069k i/100ms
          Regexp#===   561.729k i/100ms
        String#match   463.335k i/100ms
Calculating -------------------------------------
       String#match?      9.160M (± 0.5%) i/s -     45.838M in   5.004219s
           String#=~      6.372M (± 0.8%) i/s -     32.053M in   5.030774s
          Regexp#===      5.605M (± 0.4%) i/s -     28.086M in   5.011255s
        String#match      4.634M (± 0.5%) i/s -     23.630M in   5.099653s

Comparison:
       String#match?:  9160025.1 i/s
           String#=~:  6371849.4 i/s - 1.44x  (± 0.00) slower
          Regexp#===:  5604769.5 i/s - 1.63x  (± 0.00) slower
        String#match:  4633803.8 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   639.051k i/100ms
      String#casecmp   788.626k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.379M (± 0.3%) i/s -     31.953M in   5.009356s
      String#casecmp      7.857M (± 0.2%) i/s -     39.431M in   5.018345s

Comparison:
      String#casecmp:  7857474.6 i/s
String#downcase + ==:  6378639.8 i/s - 1.23x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            String#+   600.858k i/100ms
       String#concat   627.392k i/100ms
       String#append   677.882k i/100ms
         "foo" "bar"     1.189M i/100ms
  "#{'foo'}#{'bar'}"     1.190M i/100ms
Calculating -------------------------------------
            String#+      6.044M (± 0.4%) i/s -     30.644M in   5.070006s
       String#concat      6.264M (± 0.4%) i/s -     31.370M in   5.007907s
       String#append      6.765M (± 0.4%) i/s -     33.894M in   5.010379s
         "foo" "bar"     11.882M (± 0.3%) i/s -     59.461M in   5.004340s
  "#{'foo'}#{'bar'}"     11.881M (± 0.3%) i/s -     59.480M in   5.006474s

Comparison:
         "foo" "bar": 11882080.9 i/s
  "#{'foo'}#{'bar'}": 11880771.1 i/s - same-ish: difference falls within error
       String#append:  6764893.4 i/s - 1.76x  (± 0.00) slower
       String#concat:  6264134.8 i/s - 1.90x  (± 0.00) slower
            String#+:  6044249.6 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#+@     1.006M i/100ms
          String#dup   587.655k i/100ms
Calculating -------------------------------------
           String#+@     10.076M (± 0.3%) i/s -     51.299M in   5.091352s
          String#dup      5.881M (± 0.3%) i/s -     29.970M in   5.096189s

Comparison:
           String#+@: 10075908.7 i/s
          String#dup:  5880997.9 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   183.452k i/100ms
       String#match?   414.838k i/100ms
    String#end_with?   609.187k i/100ms
Calculating -------------------------------------
           String#=~      1.850M (± 0.4%) i/s -      9.356M in   5.058058s
       String#match?      4.154M (± 0.4%) i/s -     21.157M in   5.092849s
    String#end_with?      6.084M (± 0.4%) i/s -     30.459M in   5.006815s

Comparison:
    String#end_with?:  6083690.7 i/s
       String#match?:  4154285.1 i/s - 1.46x  (± 0.00) slower
           String#=~:  1849759.4 i/s - 3.29x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   112.429k i/100ms
          String#sub   135.147k i/100ms
String#dup["string"]=
                       179.789k i/100ms
Calculating -------------------------------------
         String#gsub      1.153M (± 0.5%) i/s -      5.846M in   5.072099s
          String#sub      1.373M (± 0.5%) i/s -      6.892M in   5.019432s
String#dup["string"]=
                          1.818M (± 0.6%) i/s -      9.169M in   5.042579s

Comparison:
String#dup["string"]=:  1818432.9 i/s
          String#sub:  1373192.5 i/s - 1.32x  (± 0.00) slower
         String#gsub:  1152667.6 i/s - 1.58x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   102.473k i/100ms
           String#tr   332.109k i/100ms
Calculating -------------------------------------
         String#gsub      1.027M (± 0.6%) i/s -      5.226M in   5.089727s
           String#tr      3.313M (± 0.5%) i/s -     16.605M in   5.012762s

Comparison:
           String#tr:  3312703.1 i/s
         String#gsub:  1026830.9 i/s - 3.23x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.155M i/100ms
         With Freeze     1.682M i/100ms
Calculating -------------------------------------
      Without Freeze     11.635M (± 0.3%) i/s -     58.886M in   5.061163s
         With Freeze     16.854M (± 0.6%) i/s -     85.757M in   5.088514s

Comparison:
         With Freeze: 16853676.2 i/s
      Without Freeze: 11634916.7 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.473k i/100ms
      String#squeeze   155.512k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     34.551k (± 0.7%) i/s -    173.650k in   5.026172s
      String#squeeze      1.553M (± 0.6%) i/s -      7.776M in   5.005895s

Comparison:
      String#squeeze:  1553347.6 i/s
 String#gsub/regex+/:    34550.7 i/s - 44.96x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   285.532k i/100ms
       String#match?   758.604k i/100ms
  String#start_with?   870.750k i/100ms
Calculating -------------------------------------
           String#=~      2.871M (± 1.6%) i/s -     14.562M in   5.073396s
       String#match?      7.510M (± 0.5%) i/s -     37.930M in   5.050424s
  String#start_with?      8.748M (± 0.5%) i/s -     44.408M in   5.076282s

Comparison:
  String#start_with?:  8748389.7 i/s
       String#match?:  7510460.7 i/s - 1.16x  (± 0.00) slower
           String#=~:  2871045.4 i/s - 3.05x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   192.657k i/100ms
    String#[0, n] ==    82.741k i/100ms
   String#[RANGE] ==    76.684k i/100ms
   String#[0...n] ==    46.726k i/100ms
Calculating -------------------------------------
  String#start_with?      1.960M (± 0.7%) i/s -      9.826M in   5.014187s
    String#[0, n] ==    811.076k (± 0.4%) i/s -      4.137M in   5.100784s
   String#[RANGE] ==    748.854k (± 0.5%) i/s -      3.758M in   5.017816s
   String#[0...n] ==    470.516k (± 0.8%) i/s -      2.383M in   5.065013s

Comparison:
  String#start_with?:  1959639.0 i/s
    String#[0, n] ==:   811076.0 i/s - 2.42x  (± 0.00) slower
   String#[RANGE] ==:   748853.8 i/s - 2.62x  (± 0.00) slower
   String#[0...n] ==:   470515.9 i/s - 4.16x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   181.002k i/100ms
 String#sub!'string'   127.868k i/100ms
String#gsub!'string'    78.090k i/100ms
  String#[/regexp/]=   153.415k i/100ms
 String#sub!/regexp/   114.488k i/100ms
String#gsub!/regexp/    60.725k i/100ms
Calculating -------------------------------------
  String#['string']=      1.872M (± 0.3%) i/s -      9.412M in   5.027038s
 String#sub!'string'      1.276M (± 0.4%) i/s -      6.393M in   5.011851s
String#gsub!'string'    780.092k (± 0.4%) i/s -      3.904M in   5.005254s
  String#[/regexp/]=      1.533M (± 0.6%) i/s -      7.671M in   5.005181s
 String#sub!/regexp/      1.154M (± 0.7%) i/s -      5.839M in   5.060431s
String#gsub!/regexp/    610.534k (± 1.3%) i/s -      3.097M in   5.073529s

Comparison:
  String#['string']=:  1872317.9 i/s
  String#[/regexp/]=:  1532611.3 i/s - 1.22x  (± 0.00) slower
 String#sub!'string':  1275677.1 i/s - 1.47x  (± 0.00) slower
 String#sub!/regexp/:  1153887.4 i/s - 1.62x  (± 0.00) slower
String#gsub!'string':   780092.2 i/s - 2.40x  (± 0.00) slower
String#gsub!/regexp/:   610533.8 i/s - 3.07x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          String#sub   144.365k i/100ms
        String#chomp   571.693k i/100ms
String#delete_suffix   601.967k i/100ms
Calculating -------------------------------------
          String#sub      1.431M (± 0.5%) i/s -      7.218M in   5.043689s
        String#chomp      5.712M (± 0.2%) i/s -     28.585M in   5.004000s
String#delete_suffix      6.014M (± 0.4%) i/s -     30.098M in   5.004849s

Comparison:
String#delete_suffix:  6013954.9 i/s
        String#chomp:  5712382.6 i/s - 1.05x  (± 0.00) slower
          String#sub:  1431175.2 i/s - 4.20x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   617.677k i/100ms
          String#sub   143.930k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.174M (± 0.4%) i/s -     30.884M in   5.002147s
          String#sub      1.455M (± 0.5%) i/s -      7.340M in   5.046377s

Comparison:
String#delete_prefix:  6174219.5 i/s
          String#sub:  1454637.5 i/s - 4.24x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   632.946k i/100ms
    String#unpack[0]   481.829k i/100ms
Calculating -------------------------------------
      String#unpack1      6.358M (± 0.5%) i/s -     32.280M in   5.076926s
    String#unpack[0]      4.831M (± 0.2%) i/s -     24.573M in   5.086118s

Comparison:
      String#unpack1:  6358387.3 i/s
    String#unpack[0]:  4831467.6 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.617k i/100ms
          Time.parse     9.427k i/100ms
Calculating -------------------------------------
        Time.iso8601    277.520k (± 1.1%) i/s -      1.408M in   5.075840s
          Time.parse     93.455k (± 1.4%) i/s -    471.350k in   5.044686s

Comparison:
        Time.iso8601:   277519.9 i/s
          Time.parse:    93455.2 i/s - 2.97x  (± 0.00) slower

