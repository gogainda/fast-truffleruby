$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       777.144k i/100ms
Function with splat arguments
                        24.200k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.789M (± 0.2%) i/s -     39.634M in   5.088578s
Function with splat arguments
                        249.527k (± 5.9%) i/s -      1.258M in   5.068379s

Comparison:
Function with single Array argument:  7788932.0 i/s
Function with splat arguments:   249526.9 i/s - 31.21x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   993.650k i/100ms
Sequential Assignment
                         1.011M i/100ms
Calculating -------------------------------------
 Parallel Assignment      9.922M (± 0.3%) i/s -     49.682M in   5.007288s
Sequential Assignment
                         10.158M (± 0.6%) i/s -     51.577M in   5.077791s

Comparison:
Sequential Assignment: 10157796.3 i/s
 Parallel Assignment:  9922147.9 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   485.850k i/100ms
       attr_accessor   560.960k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.829M (± 3.0%) i/s -     24.292M in   5.035744s
       attr_accessor      5.567M (± 3.1%) i/s -     28.048M in   5.043526s

Comparison:
       attr_accessor:  5567488.6 i/s
   getter_and_setter:  4829071.6 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    87.309k i/100ms
         respond_to?   776.635k i/100ms
Calculating -------------------------------------
      begin...rescue    886.662k (± 0.5%) i/s -      4.453M in   5.022065s
         respond_to?      7.744M (± 0.3%) i/s -     38.832M in   5.014267s

Comparison:
         respond_to?:  7744343.9 i/s
      begin...rescue:   886661.7 i/s - 8.73x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              normal   310.679k i/100ms
             &method   121.885k i/100ms
Calculating -------------------------------------
              normal      3.154M (± 0.8%) i/s -     15.845M in   5.023784s
             &method      1.223M (± 0.5%) i/s -      6.216M in   5.081443s

Comparison:
              normal:  3154109.5 i/s
             &method:  1223329.9 i/s - 2.58x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       247.000  i/100ms
       define_method   318.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.345k (±16.9%) i/s -     11.115k in   5.076700s
       define_method      3.210k (±19.5%) i/s -     14.628k in   5.073258s

Comparison:
       define_method:     3209.6 i/s
module_eval with string:     2345.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Float#round   259.245k i/100ms
       Kernel#format   201.770k i/100ms
            String#%   172.400k i/100ms
Calculating -------------------------------------
         Float#round      2.591M (± 0.4%) i/s -     12.962M in   5.003243s
       Kernel#format      2.017M (± 0.5%) i/s -     10.088M in   5.000801s
            String#%      1.726M (± 0.6%) i/s -      8.792M in   5.095721s

Comparison:
         Float#round:  2590822.8 i/s
       Kernel#format:  2017426.0 i/s - 1.28x  (± 0.00) slower
            String#%:  1725507.0 i/s - 1.50x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash   919.268k i/100ms
          OpenStruct   516.684k i/100ms
Calculating -------------------------------------
                Hash      9.102M (± 2.7%) i/s -     45.963M in   5.054028s
          OpenStruct      5.025M (± 0.7%) i/s -     25.318M in   5.038956s

Comparison:
                Hash:  9102387.6 i/s
          OpenStruct:  5024572.3 i/s - 1.81x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.091M i/100ms
          OpenStruct    11.473k i/100ms
Calculating -------------------------------------
                Hash     11.657M (± 0.7%) i/s -     58.934M in   5.055776s
          OpenStruct    116.520k (± 3.2%) i/s -    585.123k in   5.026856s

Comparison:
                Hash: 11657343.4 i/s
          OpenStruct:   116520.5 i/s - 100.05x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   588.673k i/100ms
  ancestors.include?   119.489k i/100ms
Calculating -------------------------------------
  less than or equal      5.833M (± 0.8%) i/s -     29.434M in   5.046325s
  ancestors.include?      1.186M (± 0.5%) i/s -      5.974M in   5.036328s

Comparison:
  less than or equal:  5833100.4 i/s
  ancestors.include?:  1186303.9 i/s - 4.92x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.559  (± 0.0%) i/s -      3.000  in   5.372629s
         Kernel loop      0.225  (± 0.0%) i/s -      2.000  in   8.870201s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 2.48x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.542M i/100ms
         Array#first     1.327M i/100ms
Calculating -------------------------------------
           Array#[0]     15.411M (± 0.3%) i/s -     77.088M in   5.002146s
         Array#first     13.281M (± 0.3%) i/s -     67.653M in   5.094082s

Comparison:
           Array#[0]: 15411186.1 i/s
         Array#first: 13280896.3 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.518M i/100ms
          Array#last     1.336M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.143M (± 1.7%) i/s -     75.908M in   5.014232s
          Array#last     13.329M (± 0.5%) i/s -     66.777M in   5.009984s

Comparison:
          Array#[-1]: 15143293.5 i/s
          Array#last: 13329157.2 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    99.264k i/100ms
Calculating -------------------------------------
                find      0.286  (± 0.0%) i/s -      2.000  in   7.004044s
             bsearch    991.572k (± 1.4%) i/s -      4.963M in   5.006479s

Comparison:
             bsearch:   991572.4 i/s
                find:        0.3 i/s - 3472432.50x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    19.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    194.868  (± 5.6%) i/s -    988.000  in   5.089297s
        Array#insert      1.435  (± 0.0%) i/s -      8.000  in   5.576797s

Comparison:
       Array#unshift:      194.9 i/s
        Array#insert:        1.4 i/s - 135.84x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.092M i/100ms
          Array#size     2.106M i/100ms
         Array#count     1.649M i/100ms
Calculating -------------------------------------
        Array#length     20.845M (± 0.5%) i/s -    104.612M in   5.018674s
          Array#size     20.982M (± 0.6%) i/s -    105.297M in   5.018512s
         Array#count     16.279M (± 0.6%) i/s -     82.426M in   5.063627s

Comparison:
          Array#size: 20982487.1 i/s
        Array#length: 20845078.9 i/s - same-ish: difference falls within error
         Array#count: 16278661.2 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.627k i/100ms
        Array#sample     1.002M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    457.108k (± 1.0%) i/s -      2.327M in   5.091135s
        Array#sample     10.028M (± 0.3%) i/s -     51.126M in   5.098277s

Comparison:
        Array#sample: 10028097.9 i/s
 Array#shuffle.first:   457107.9 i/s - 21.94x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    64.804k i/100ms
          Date.parse    32.441k i/100ms
Calculating -------------------------------------
        Date.iso8601    646.140k (± 0.5%) i/s -      3.240M in   5.014815s
          Date.parse    321.943k (± 0.5%) i/s -      1.622M in   5.038441s

Comparison:
        Date.iso8601:   646140.1 i/s
          Date.parse:   321943.3 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.763k i/100ms
           Array#map    26.899k i/100ms
Calculating -------------------------------------
   Array#each + push    190.815k (± 0.5%) i/s -    956.913k in   5.015021s
           Array#map    269.646k (± 0.5%) i/s -      1.372M in   5.087697s

Comparison:
           Array#map:   269646.2 i/s
   Array#each + push:   190814.9 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            For loop    29.842k i/100ms
               #each    32.568k i/100ms
Calculating -------------------------------------
            For loop    298.012k (± 0.5%) i/s -      1.492M in   5.006966s
               #each    326.496k (± 0.4%) i/s -      1.661M in   5.087332s

Comparison:
               #each:   326495.8 i/s
            For loop:   298011.8 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.139k i/100ms
     each_with_index    19.374k i/100ms
Calculating -------------------------------------
          While Loop    274.490k (± 0.4%) i/s -      1.384M in   5.042497s
     each_with_index    193.667k (± 0.5%) i/s -    968.700k in   5.001987s

Comparison:
          While Loop:   274489.7 i/s
     each_with_index:   193667.4 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    92.804k i/100ms
      inject to_proc     2.180k i/100ms
        inject block     2.051k i/100ms
Calculating -------------------------------------
       inject symbol      1.125M (±16.1%) i/s -      5.475M in   5.000985s
      inject to_proc     21.833k (± 0.5%) i/s -    111.180k in   5.092380s
        inject block     20.603k (± 0.3%) i/s -    104.601k in   5.076994s

Comparison:
       inject symbol:  1125094.2 i/s
      inject to_proc:    21833.2 i/s - 51.53x  (± 0.00) slower
        inject block:    20603.1 i/s - 54.61x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.894k i/100ms
   Array#map.flatten     4.019k i/100ms
      Array#flat_map     9.659k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     69.564k (± 0.5%) i/s -    351.594k in   5.054368s
   Array#map.flatten     39.401k (± 0.6%) i/s -    200.950k in   5.100287s
      Array#flat_map     96.406k (± 0.3%) i/s -    482.950k in   5.009590s

Comparison:
      Array#flat_map:    96406.1 i/s
Array#map.flatten(1):    69563.9 i/s - 1.39x  (± 0.00) slower
   Array#map.flatten:    39401.0 i/s - 2.45x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    30.311k i/100ms
  Array#reverse_each    31.410k i/100ms
Calculating -------------------------------------
  Array#reverse.each    305.299k (± 0.4%) i/s -      1.546M in   5.063501s
  Array#reverse_each    315.123k (± 0.2%) i/s -      1.602M in   5.083470s

Comparison:
  Array#reverse_each:   315123.1 i/s
  Array#reverse.each:   305298.8 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.251k i/100ms
   Enumerable#detect    83.018k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        208.041k (± 0.7%) i/s -      4.172M in  20.053437s
   Enumerable#detect    827.827k (± 2.4%) i/s -     16.604M in  20.070126s

Comparison:
   Enumerable#detect:   827826.9 i/s
Enumerable#select.first:   208040.6 i/s - 3.98x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       241.116k i/100ms
Enumerable#select.last
                        19.082k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.444M (± 0.6%) i/s -     12.297M in   5.032486s
Enumerable#select.last
                        192.297k (± 0.8%) i/s -    973.182k in   5.061158s

Comparison:
Enumerable#reverse.detect:  2443598.8 i/s
Enumerable#select.last:   192297.2 i/s - 12.71x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.986k i/100ms
  Enumerable#sort_by     4.705k i/100ms
     Enumerable#sort     2.420k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         49.507k (± 2.5%) i/s -    249.300k in   5.039452s
  Enumerable#sort_by     45.758k (± 3.3%) i/s -    230.545k in   5.044672s
     Enumerable#sort     24.115k (± 1.1%) i/s -    121.000k in   5.018303s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    49506.6 i/s
  Enumerable#sort_by:    45758.5 i/s - 1.08x  (± 0.00) slower
     Enumerable#sort:    24115.0 i/s - 2.05x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.871k i/100ms
Enumerable#sort_by...first
                         8.777k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    178.050k (± 1.8%) i/s -    893.550k in   5.020416s
Enumerable#sort_by...first
                         86.647k (± 2.9%) i/s -    438.850k in   5.069539s

Comparison:
   Enumerable#min_by:   178050.0 i/s
Enumerable#sort_by...first:    86646.9 i/s - 2.05x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   408.901k i/100ms
            Hash#dup   322.629k i/100ms
Calculating -------------------------------------
              Hash[]      4.332M (± 2.8%) i/s -     21.672M in   5.007122s
            Hash#dup      3.259M (± 1.0%) i/s -     16.454M in   5.049846s

Comparison:
              Hash[]:  4332117.4 i/s
            Hash#dup:  3258676.5 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.436M i/100ms
  Hash#fetch, symbol     1.178M i/100ms
     Hash#[], string     1.250M i/100ms
  Hash#fetch, string   803.880k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.338M (± 0.4%) i/s -     71.790M in   5.007172s
  Hash#fetch, symbol     11.861M (± 0.3%) i/s -     60.079M in   5.065277s
     Hash#[], string     12.400M (± 0.2%) i/s -     62.514M in   5.041395s
  Hash#fetch, string      8.033M (± 0.3%) i/s -     40.194M in   5.003507s

Comparison:
     Hash#[], symbol: 14337528.4 i/s
     Hash#[], string: 12400248.7 i/s - 1.16x  (± 0.00) slower
  Hash#fetch, symbol: 11861041.5 i/s - 1.21x  (± 0.00) slower
  Hash#fetch, string:  8033223.8 i/s - 1.78x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   779.550k i/100ms
             Hash#[]   969.182k i/100ms
          Hash#[] ||   889.740k i/100ms
          Hash#[] &&   373.983k i/100ms
          Hash#fetch   607.732k i/100ms
 Hash#fetch fallback   379.890k i/100ms
Calculating -------------------------------------
            Hash#dig      8.714M (± 3.7%) i/s -     43.655M in   5.017771s
             Hash#[]     10.934M (± 1.2%) i/s -     55.243M in   5.053152s
          Hash#[] ||      9.309M (± 2.3%) i/s -     47.156M in   5.068475s
          Hash#[] &&      3.810M (± 0.5%) i/s -     19.073M in   5.006471s
          Hash#fetch      6.128M (± 1.3%) i/s -     30.994M in   5.058991s
 Hash#fetch fallback      3.860M (± 0.6%) i/s -     19.374M in   5.020037s

Comparison:
             Hash#[]: 10934041.6 i/s
          Hash#[] ||:  9308844.7 i/s - 1.17x  (± 0.00) slower
            Hash#dig:  8713926.8 i/s - 1.25x  (± 0.00) slower
          Hash#fetch:  6127610.9 i/s - 1.78x  (± 0.00) slower
 Hash#fetch fallback:  3859565.9 i/s - 2.83x  (± 0.00) slower
          Hash#[] &&:  3809792.8 i/s - 2.87x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.438M i/100ms
  Hash#fetch + block     1.425M i/100ms
    Hash#fetch + arg     1.072M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.606M (± 0.4%) i/s -     73.356M in   5.022294s
  Hash#fetch + block     14.417M (± 0.7%) i/s -     72.666M in   5.040479s
    Hash#fetch + arg     10.789M (± 0.4%) i/s -     54.673M in   5.067397s

Comparison:
  Hash#fetch + const: 14606322.2 i/s
  Hash#fetch + block: 14417081.2 i/s - 1.01x  (± 0.00) slower
    Hash#fetch + arg: 10789286.9 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.705k i/100ms
         sort + to_h    10.874k i/100ms
Calculating -------------------------------------
      sort_by + to_h    276.513k (± 0.7%) i/s -      1.385M in   5.009985s
         sort + to_h    110.637k (± 0.5%) i/s -    554.574k in   5.012653s

Comparison:
      sort_by + to_h:   276513.0 i/s
         sort + to_h:   110637.5 i/s - 2.50x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   192.913k i/100ms
       Hash#each_key   202.943k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.932M (± 0.6%) i/s -      9.839M in   5.092382s
       Hash#each_key      1.976M (± 0.6%) i/s -      9.944M in   5.032301s

Comparison:
       Hash#each_key:  1976152.8 i/s
      Hash#keys.each:  1932079.3 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.244k i/100ms
           Hash#key?     1.020M i/100ms
Calculating -------------------------------------
  Hash#keys.include?     12.469k (± 4.9%) i/s -     62.200k in   5.002688s
           Hash#key?     10.264M (± 0.5%) i/s -     52.000M in   5.066187s

Comparison:
           Hash#key?: 10264340.1 i/s
  Hash#keys.include?:    12468.9 i/s - 823.20x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.997k i/100ms
            Hash#[]=    10.353k i/100ms
Calculating -------------------------------------
         Hash#merge!     39.634k (± 0.5%) i/s -    199.850k in   5.042482s
            Hash#[]=    100.732k (± 1.3%) i/s -    507.297k in   5.036949s

Comparison:
            Hash#[]=:   100732.3 i/s
         Hash#merge!:    39634.1 i/s - 2.54x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.853k i/100ms
      Hash#merge({})     3.932k i/100ms
 Hash#dup#merge!({})     2.891k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         47.142k (± 3.3%) i/s -    237.797k in   5.050548s
      Hash#merge({})     39.260k (± 0.6%) i/s -    196.600k in   5.007762s
 Hash#dup#merge!({})     28.676k (± 0.5%) i/s -    144.550k in   5.040879s

Comparison:
{}#merge!(Hash) do end:    47142.4 i/s
      Hash#merge({}):    39260.3 i/s - 1.20x  (± 0.00) slower
 Hash#dup#merge!({}):    28676.2 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   391.144k i/100ms
          Hash#merge   361.024k i/100ms
Calculating -------------------------------------
        Hash#**other      3.916M (± 0.5%) i/s -     19.948M in   5.094183s
          Hash#merge      3.626M (± 0.6%) i/s -     18.412M in   5.078627s

Comparison:
        Hash#**other:  3915992.0 i/s
          Hash#merge:  3625550.5 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.646k i/100ms
         Hash#merge!     3.974k i/100ms
Calculating -------------------------------------
          Hash#merge     16.519k (± 1.1%) i/s -     83.946k in   5.082498s
         Hash#merge!     39.765k (± 0.5%) i/s -    202.674k in   5.096985s

Comparison:
         Hash#merge!:    39764.6 i/s
          Hash#merge:    16518.6 i/s - 2.41x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      416.752k i/100ms
Array#each             233.111k i/100ms
Array#each_w/_object   175.299k i/100ms
Hash#select-include     73.253k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.180M (± 1.2%) i/s -     21.254M in   5.085458s
Array#each                2.305M (± 0.7%) i/s -     11.656M in   5.056097s
Array#each_w/_object      1.745M (± 0.4%) i/s -      8.765M in   5.022809s
Hash#select-include     732.542k (± 1.0%) i/s -      3.663M in   5.000446s

Comparison:
Hash#native-slice   :  4180037.5 i/s
Array#each          :  2305376.2 i/s - 1.81x  (± 0.00) slower
Array#each_w/_object:  1745060.8 i/s - 2.40x  (± 0.00) slower
Hash#select-include :   732541.5 i/s - 5.71x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.073k i/100ms
         Hash#value?   831.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     10.800k (± 3.4%) i/s -     54.723k in   5.073886s
         Hash#value?      8.428k (± 0.6%) i/s -     42.381k in   5.028927s

Comparison:
Hash#values.include?:    10799.8 i/s
         Hash#value?:     8427.8 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                call   670.861k i/100ms
                send   528.017k i/100ms
      method_missing   388.525k i/100ms
Calculating -------------------------------------
                call      6.715M (± 0.5%) i/s -     34.214M in   5.095013s
                send      5.221M (± 0.9%) i/s -     26.401M in   5.056983s
      method_missing      3.859M (± 0.5%) i/s -     19.426M in   5.034361s

Comparison:
                call:  6715325.1 i/s
                send:  5221125.3 i/s - 1.29x  (± 0.00) slower
      method_missing:  3858843.4 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
               Block     9.205k i/100ms
      Symbol#to_proc    10.454k i/100ms
Calculating -------------------------------------
               Block     91.249k (± 3.4%) i/s -    460.250k in   5.050896s
      Symbol#to_proc    103.370k (± 0.6%) i/s -    522.700k in   5.056743s

Comparison:
      Symbol#to_proc:   103370.5 i/s
               Block:    91248.6 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          block.call   946.715k i/100ms
       block + yield   993.858k i/100ms
        unused block     1.299M i/100ms
               yield     1.185M i/100ms
Calculating -------------------------------------
          block.call      9.418M (± 3.0%) i/s -     47.336M in   5.031262s
       block + yield      9.928M (± 0.6%) i/s -     49.693M in   5.005332s
        unused block     13.068M (± 0.4%) i/s -     66.246M in   5.069560s
               yield     11.887M (± 0.4%) i/s -     60.445M in   5.085123s

Comparison:
        unused block: 13067539.1 i/s
               yield: 11886839.9 i/s - 1.10x  (± 0.00) slower
       block + yield:  9928339.7 i/s - 1.32x  (± 0.00) slower
          block.call:  9418162.6 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   325.127k i/100ms
      range#include?    12.781k i/100ms
       range#member?    12.785k i/100ms
       plain compare   535.985k i/100ms
Calculating -------------------------------------
        range#cover?      3.276M (± 1.4%) i/s -     16.581M in   5.063180s
      range#include?    127.634k (± 0.9%) i/s -    639.050k in   5.007341s
       range#member?    126.781k (± 2.4%) i/s -    639.250k in   5.045565s
       plain compare      5.330M (± 0.6%) i/s -     26.799M in   5.027741s

Comparison:
       plain compare:  5330491.4 i/s
        range#cover?:  3275551.3 i/s - 1.63x  (± 0.00) slower
      range#include?:   127633.8 i/s - 41.76x  (± 0.00) slower
       range#member?:   126780.5 i/s - 42.05x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       String#match?   917.485k i/100ms
           String#=~   642.272k i/100ms
          Regexp#===   573.482k i/100ms
        String#match   470.550k i/100ms
Calculating -------------------------------------
       String#match?      9.134M (± 0.7%) i/s -     45.874M in   5.022512s
           String#=~      6.425M (± 0.5%) i/s -     32.756M in   5.098303s
          Regexp#===      5.654M (± 3.1%) i/s -     28.674M in   5.076797s
        String#match      4.701M (± 0.5%) i/s -     23.528M in   5.004434s

Comparison:
       String#match?:  9134176.7 i/s
           String#=~:  6424992.6 i/s - 1.42x  (± 0.00) slower
          Regexp#===:  5653874.9 i/s - 1.62x  (± 0.00) slower
        String#match:  4701467.8 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   651.370k i/100ms
      String#casecmp   809.225k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.479M (± 0.5%) i/s -     32.568M in   5.026704s
      String#casecmp      8.059M (± 1.1%) i/s -     40.461M in   5.021281s

Comparison:
      String#casecmp:  8058965.5 i/s
String#downcase + ==:  6479232.8 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            String#+   609.640k i/100ms
       String#concat   629.886k i/100ms
       String#append   678.620k i/100ms
         "foo" "bar"     1.186M i/100ms
  "#{'foo'}#{'bar'}"     1.186M i/100ms
Calculating -------------------------------------
            String#+      6.037M (± 1.0%) i/s -     30.482M in   5.049261s
       String#concat      6.266M (± 1.9%) i/s -     31.494M in   5.028560s
       String#append      6.777M (± 0.5%) i/s -     33.931M in   5.006903s
         "foo" "bar"     11.851M (± 0.6%) i/s -     59.320M in   5.005680s
  "#{'foo'}#{'bar'}"     11.848M (± 0.4%) i/s -     59.283M in   5.003694s

Comparison:
         "foo" "bar": 11850988.2 i/s
  "#{'foo'}#{'bar'}": 11848006.1 i/s - same-ish: difference falls within error
       String#append:  6776999.5 i/s - 1.75x  (± 0.00) slower
       String#concat:  6265542.3 i/s - 1.89x  (± 0.00) slower
            String#+:  6037496.0 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#+@     1.013M i/100ms
          String#dup   574.426k i/100ms
Calculating -------------------------------------
           String#+@     10.129M (± 0.1%) i/s -     51.643M in   5.098622s
          String#dup      5.746M (± 0.2%) i/s -     29.296M in   5.098530s

Comparison:
           String#+@: 10128908.5 i/s
          String#dup:  5745943.9 i/s - 1.76x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   187.839k i/100ms
       String#match?   427.231k i/100ms
    String#end_with?   616.529k i/100ms
Calculating -------------------------------------
           String#=~      1.863M (± 0.3%) i/s -      9.392M in   5.040663s
       String#match?      4.270M (± 0.5%) i/s -     21.362M in   5.003202s
    String#end_with?      6.190M (± 0.3%) i/s -     31.443M in   5.079376s

Comparison:
    String#end_with?:  6190391.4 i/s
       String#match?:  4269704.0 i/s - 1.45x  (± 0.00) slower
           String#=~:  1863254.9 i/s - 3.32x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   110.938k i/100ms
          String#sub   137.938k i/100ms
String#dup["string"]=
                       182.017k i/100ms
Calculating -------------------------------------
         String#gsub      1.128M (± 2.2%) i/s -      5.658M in   5.017739s
          String#sub      1.413M (± 0.6%) i/s -      7.173M in   5.074901s
String#dup["string"]=
                          1.816M (± 0.3%) i/s -      9.101M in   5.012673s

Comparison:
String#dup["string"]=:  1815586.3 i/s
          String#sub:  1413433.5 i/s - 1.28x  (± 0.00) slower
         String#gsub:  1128169.1 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   105.512k i/100ms
           String#tr   343.703k i/100ms
Calculating -------------------------------------
         String#gsub      1.057M (± 0.5%) i/s -      5.381M in   5.091843s
           String#tr      3.440M (± 0.6%) i/s -     17.529M in   5.096270s

Comparison:
           String#tr:  3439668.1 i/s
         String#gsub:  1056834.8 i/s - 3.25x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.155M i/100ms
         With Freeze     1.694M i/100ms
Calculating -------------------------------------
      Without Freeze     11.547M (± 0.4%) i/s -     57.751M in   5.001539s
         With Freeze     16.866M (± 0.8%) i/s -     84.714M in   5.022987s

Comparison:
         With Freeze: 16866372.0 i/s
      Without Freeze: 11546947.1 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.411k i/100ms
      String#squeeze   156.700k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     34.288k (± 0.6%) i/s -    173.961k in   5.073691s
      String#squeeze      1.571M (± 1.5%) i/s -      7.992M in   5.088662s

Comparison:
      String#squeeze:  1570898.3 i/s
 String#gsub/regex+/:    34288.3 i/s - 45.81x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   282.941k i/100ms
       String#match?   749.237k i/100ms
  String#start_with?   862.587k i/100ms
Calculating -------------------------------------
           String#=~      2.815M (± 0.5%) i/s -     14.147M in   5.025873s
       String#match?      7.529M (± 0.6%) i/s -     38.211M in   5.075684s
  String#start_with?      8.600M (± 0.2%) i/s -     43.129M in   5.015136s

Comparison:
  String#start_with?:  8599868.6 i/s
       String#match?:  7528506.3 i/s - 1.14x  (± 0.00) slower
           String#=~:  2814916.2 i/s - 3.06x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   197.807k i/100ms
    String#[0, n] ==    82.790k i/100ms
   String#[RANGE] ==    76.861k i/100ms
   String#[0...n] ==    48.567k i/100ms
Calculating -------------------------------------
  String#start_with?      1.894M (± 3.6%) i/s -      9.495M in   5.022078s
    String#[0, n] ==    816.462k (± 1.1%) i/s -      4.140M in   5.070628s
   String#[RANGE] ==    754.273k (± 0.9%) i/s -      3.843M in   5.095419s
   String#[0...n] ==    472.788k (± 1.3%) i/s -      2.380M in   5.034335s

Comparison:
  String#start_with?:  1893672.5 i/s
    String#[0, n] ==:   816462.0 i/s - 2.32x  (± 0.00) slower
   String#[RANGE] ==:   754273.5 i/s - 2.51x  (± 0.00) slower
   String#[0...n] ==:   472788.5 i/s - 4.01x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   180.678k i/100ms
 String#sub!'string'   125.613k i/100ms
String#gsub!'string'    78.620k i/100ms
  String#[/regexp/]=   152.912k i/100ms
 String#sub!/regexp/   115.618k i/100ms
String#gsub!/regexp/    61.025k i/100ms
Calculating -------------------------------------
  String#['string']=      1.822M (± 0.9%) i/s -      9.215M in   5.056467s
 String#sub!'string'      1.253M (± 0.7%) i/s -      6.281M in   5.011610s
String#gsub!'string'    780.063k (± 0.6%) i/s -      3.931M in   5.039523s
  String#[/regexp/]=      1.520M (± 2.0%) i/s -      7.646M in   5.032431s
 String#sub!/regexp/      1.146M (± 2.3%) i/s -      5.781M in   5.048572s
String#gsub!/regexp/    610.674k (± 0.6%) i/s -      3.112M in   5.096652s

Comparison:
  String#['string']=:  1822474.8 i/s
  String#[/regexp/]=:  1519940.9 i/s - 1.20x  (± 0.00) slower
 String#sub!'string':  1253280.1 i/s - 1.45x  (± 0.00) slower
 String#sub!/regexp/:  1145777.5 i/s - 1.59x  (± 0.00) slower
String#gsub!'string':   780063.4 i/s - 2.34x  (± 0.00) slower
String#gsub!/regexp/:   610674.3 i/s - 2.98x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          String#sub   143.190k i/100ms
        String#chomp   562.959k i/100ms
String#delete_suffix   612.162k i/100ms
Calculating -------------------------------------
          String#sub      1.422M (± 0.5%) i/s -      7.160M in   5.034486s
        String#chomp      5.633M (± 0.5%) i/s -     28.711M in   5.097348s
String#delete_suffix      6.102M (± 2.4%) i/s -     30.608M in   5.019552s

Comparison:
String#delete_suffix:  6101881.8 i/s
        String#chomp:  5632662.2 i/s - 1.08x  (± 0.00) slower
          String#sub:  1422134.5 i/s - 4.29x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   604.741k i/100ms
          String#sub   146.442k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.186M (± 0.5%) i/s -     31.447M in   5.083591s
          String#sub      1.455M (± 0.6%) i/s -      7.322M in   5.031543s

Comparison:
String#delete_prefix:  6186064.6 i/s
          String#sub:  1455289.0 i/s - 4.25x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   625.502k i/100ms
    String#unpack[0]   471.821k i/100ms
Calculating -------------------------------------
      String#unpack1      6.240M (± 0.5%) i/s -     31.275M in   5.012553s
    String#unpack[0]      4.707M (± 0.6%) i/s -     23.591M in   5.012586s

Comparison:
      String#unpack1:  6239529.5 i/s
    String#unpack[0]:  4706536.3 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.769k i/100ms
          Time.parse     9.477k i/100ms
Calculating -------------------------------------
        Time.iso8601    276.213k (± 0.5%) i/s -      1.388M in   5.026882s
          Time.parse     93.742k (± 0.7%) i/s -    473.850k in   5.055134s

Comparison:
        Time.iso8601:   276213.2 i/s
          Time.parse:    93741.7 i/s - 2.95x  (± 0.00) slower

