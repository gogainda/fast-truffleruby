$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       764.040k i/100ms
Function with splat arguments
                        25.174k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.597M (± 2.2%) i/s -     38.202M in   5.031200s
Function with splat arguments
                        260.670k (± 5.7%) i/s -      1.309M in   5.046024s

Comparison:
Function with single Array argument:  7597169.2 i/s
Function with splat arguments:   260670.0 i/s - 29.14x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.022M i/100ms
Sequential Assignment
                         1.036M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.194M (± 0.8%) i/s -     51.121M in   5.014935s
Sequential Assignment
                         10.287M (± 1.0%) i/s -     51.808M in   5.036775s

Comparison:
Sequential Assignment: 10287166.4 i/s
 Parallel Assignment: 10194378.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   448.992k i/100ms
       attr_accessor   491.767k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.510M (± 0.5%) i/s -     22.899M in   5.076875s
       attr_accessor      4.877M (± 0.5%) i/s -     24.588M in   5.041784s

Comparison:
       attr_accessor:  4877047.5 i/s
   getter_and_setter:  4510469.5 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    89.693k i/100ms
         respond_to?   758.781k i/100ms
Calculating -------------------------------------
      begin...rescue    899.103k (± 0.6%) i/s -      4.574M in   5.087832s
         respond_to?      7.603M (± 0.6%) i/s -     38.698M in   5.090126s

Comparison:
         respond_to?:  7602812.3 i/s
      begin...rescue:   899102.6 i/s - 8.46x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              normal   295.615k i/100ms
             &method   118.414k i/100ms
Calculating -------------------------------------
              normal      2.985M (± 1.2%) i/s -     15.076M in   5.051340s
             &method      1.204M (± 0.7%) i/s -      6.039M in   5.016175s

Comparison:
              normal:  2985094.9 i/s
             &method:  1203983.8 i/s - 2.48x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       262.000  i/100ms
       define_method   293.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.371k (±21.3%) i/s -     10.480k in   5.047981s
       define_method      3.217k (±19.0%) i/s -     14.650k in   5.035623s

Comparison:
       define_method:     3217.4 i/s
module_eval with string:     2370.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Float#round   251.647k i/100ms
       Kernel#format   201.448k i/100ms
            String#%   173.000k i/100ms
Calculating -------------------------------------
         Float#round      2.573M (± 0.2%) i/s -     13.086M in   5.085644s
       Kernel#format      1.968M (± 1.4%) i/s -      9.871M in   5.017752s
            String#%      1.738M (± 0.5%) i/s -      8.823M in   5.075425s

Comparison:
         Float#round:  2573067.5 i/s
       Kernel#format:  1967618.5 i/s - 1.31x  (± 0.00) slower
            String#%:  1738421.9 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash   879.892k i/100ms
          OpenStruct   495.746k i/100ms
Calculating -------------------------------------
                Hash      8.827M (± 1.5%) i/s -     44.874M in   5.085073s
          OpenStruct      4.925M (± 0.4%) i/s -     24.787M in   5.033251s

Comparison:
                Hash:  8826771.5 i/s
          OpenStruct:  4924800.0 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.121M i/100ms
          OpenStruct     9.792k i/100ms
Calculating -------------------------------------
                Hash     11.253M (± 0.6%) i/s -     57.187M in   5.081908s
          OpenStruct     95.974k (± 1.9%) i/s -    479.808k in   5.001184s

Comparison:
                Hash: 11253459.7 i/s
          OpenStruct:    95973.5 i/s - 117.26x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   599.914k i/100ms
  ancestors.include?   127.042k i/100ms
Calculating -------------------------------------
  less than or equal      6.072M (± 2.0%) i/s -     30.596M in   5.041309s
  ancestors.include?      1.246M (± 1.0%) i/s -      6.352M in   5.100128s

Comparison:
  less than or equal:  6071903.1 i/s
  ancestors.include?:  1245591.8 i/s - 4.87x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.615  (± 0.0%) i/s -      4.000  in   6.504370s
         Kernel loop      0.214  (± 0.0%) i/s -      2.000  in   9.339441s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 2.87x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.445M i/100ms
         Array#first     1.299M i/100ms
Calculating -------------------------------------
           Array#[0]     14.555M (± 0.8%) i/s -     73.674M in   5.061944s
         Array#first     13.026M (± 0.3%) i/s -     66.269M in   5.087443s

Comparison:
           Array#[0]: 14555362.8 i/s
         Array#first: 13026104.5 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.544M i/100ms
          Array#last     1.316M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.425M (± 0.3%) i/s -     77.184M in   5.004022s
          Array#last     13.186M (± 0.5%) i/s -     67.140M in   5.091777s

Comparison:
          Array#[-1]: 15424605.5 i/s
          Array#last: 13186256.7 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    96.254k i/100ms
Calculating -------------------------------------
                find      0.260  (± 0.0%) i/s -      2.000  in   7.703694s
             bsearch    964.898k (± 1.2%) i/s -      4.909M in   5.088310s

Comparison:
             bsearch:   964898.1 i/s
                find:        0.3 i/s - 3716630.07x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    19.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    190.856  (± 3.1%) i/s -    969.000  in   5.081758s
        Array#insert      1.433  (± 0.0%) i/s -      8.000  in   5.582342s

Comparison:
       Array#unshift:      190.9 i/s
        Array#insert:        1.4 i/s - 133.17x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.138M i/100ms
          Array#size     2.104M i/100ms
         Array#count     1.651M i/100ms
Calculating -------------------------------------
        Array#length     21.336M (± 0.6%) i/s -    106.908M in   5.010772s
          Array#size     21.019M (± 0.4%) i/s -    105.195M in   5.004745s
         Array#count     16.494M (± 0.9%) i/s -     82.564M in   5.006113s

Comparison:
        Array#length: 21336423.5 i/s
          Array#size: 21019411.5 i/s - 1.02x  (± 0.00) slower
         Array#count: 16493994.8 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    46.226k i/100ms
        Array#sample     1.056M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    459.404k (± 2.0%) i/s -      2.311M in   5.033379s
        Array#sample     10.463M (± 0.4%) i/s -     52.825M in   5.048912s

Comparison:
        Array#sample: 10462740.8 i/s
 Array#shuffle.first:   459404.2 i/s - 22.77x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    62.289k i/100ms
          Date.parse    31.348k i/100ms
Calculating -------------------------------------
        Date.iso8601    625.835k (± 0.4%) i/s -      3.177M in   5.076088s
          Date.parse    312.816k (± 0.9%) i/s -      1.567M in   5.011048s

Comparison:
        Date.iso8601:   625835.4 i/s
          Date.parse:   312815.8 i/s - 2.00x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.410k i/100ms
           Array#map    27.043k i/100ms
Calculating -------------------------------------
   Array#each + push    183.963k (± 0.6%) i/s -    920.500k in   5.003880s
           Array#map    270.766k (± 0.5%) i/s -      1.379M in   5.093813s

Comparison:
           Array#map:   270766.2 i/s
   Array#each + push:   183963.2 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            For loop    27.857k i/100ms
               #each    31.845k i/100ms
Calculating -------------------------------------
            For loop    278.923k (± 0.4%) i/s -      1.421M in   5.093649s
               #each    318.549k (± 0.5%) i/s -      1.624M in   5.098526s

Comparison:
               #each:   318549.2 i/s
            For loop:   278922.7 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.188k i/100ms
     each_with_index    18.896k i/100ms
Calculating -------------------------------------
          While Loop    271.957k (± 0.4%) i/s -      1.387M in   5.098617s
     each_with_index    187.996k (± 0.4%) i/s -    944.800k in   5.025734s

Comparison:
          While Loop:   271957.4 i/s
     each_with_index:   187995.5 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    71.809k i/100ms
      inject to_proc     2.056k i/100ms
        inject block     2.010k i/100ms
Calculating -------------------------------------
       inject symbol    718.904k (± 0.6%) i/s -      3.662M in   5.094401s
      inject to_proc     20.699k (± 0.8%) i/s -    104.856k in   5.066166s
        inject block     20.091k (± 0.6%) i/s -    100.500k in   5.002508s

Comparison:
       inject symbol:   718904.3 i/s
      inject to_proc:    20698.6 i/s - 34.73x  (± 0.00) slower
        inject block:    20090.7 i/s - 35.78x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     7.497k i/100ms
   Array#map.flatten     3.901k i/100ms
      Array#flat_map     9.638k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     74.640k (± 0.8%) i/s -    374.850k in   5.022463s
   Array#map.flatten     38.717k (± 0.6%) i/s -    195.050k in   5.038041s
      Array#flat_map     96.327k (± 1.3%) i/s -    481.900k in   5.003562s

Comparison:
      Array#flat_map:    96327.0 i/s
Array#map.flatten(1):    74639.6 i/s - 1.29x  (± 0.00) slower
   Array#map.flatten:    38717.0 i/s - 2.49x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    31.467k i/100ms
  Array#reverse_each    32.280k i/100ms
Calculating -------------------------------------
  Array#reverse.each    314.637k (± 0.9%) i/s -      1.573M in   5.000975s
  Array#reverse_each    322.716k (± 0.5%) i/s -      1.614M in   5.001415s

Comparison:
  Array#reverse_each:   322716.2 i/s
  Array#reverse.each:   314636.5 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        18.695k i/100ms
   Enumerable#detect    79.801k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        189.290k (± 1.4%) i/s -      3.795M in  20.053320s
   Enumerable#detect    801.272k (± 0.4%) i/s -     16.040M in  20.018478s

Comparison:
   Enumerable#detect:   801272.4 i/s
Enumerable#select.first:   189290.1 i/s - 4.23x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       236.258k i/100ms
Enumerable#select.last
                        18.080k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.370M (± 0.6%) i/s -     12.049M in   5.083844s
Enumerable#select.last
                        180.551k (± 0.4%) i/s -    904.000k in   5.006986s

Comparison:
Enumerable#reverse.detect:  2370168.7 i/s
Enumerable#select.last:   180550.6 i/s - 13.13x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.925k i/100ms
  Enumerable#sort_by     4.802k i/100ms
     Enumerable#sort     2.517k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         50.940k (± 1.2%) i/s -    256.100k in   5.028152s
  Enumerable#sort_by     48.225k (± 4.4%) i/s -    244.902k in   5.090625s
     Enumerable#sort     25.239k (± 0.4%) i/s -    128.367k in   5.086189s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    50940.4 i/s
  Enumerable#sort_by:    48225.4 i/s - 1.06x  (± 0.00) slower
     Enumerable#sort:    25238.7 i/s - 2.02x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    16.941k i/100ms
Enumerable#sort_by...first
                         8.397k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    169.319k (± 1.0%) i/s -    847.050k in   5.003239s
Enumerable#sort_by...first
                         84.136k (± 0.7%) i/s -    428.247k in   5.090193s

Comparison:
   Enumerable#min_by:   169319.0 i/s
Enumerable#sort_by...first:    84136.0 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   417.450k i/100ms
            Hash#dup   301.383k i/100ms
Calculating -------------------------------------
              Hash[]      4.026M (± 2.8%) i/s -     20.455M in   5.084920s
            Hash#dup      2.891M (± 0.6%) i/s -     14.466M in   5.004844s

Comparison:
              Hash[]:  4025935.6 i/s
            Hash#dup:  2890569.0 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.395M i/100ms
  Hash#fetch, symbol     1.179M i/100ms
     Hash#[], string     1.210M i/100ms
  Hash#fetch, string   741.948k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     13.986M (± 0.4%) i/s -     71.135M in   5.086282s
  Hash#fetch, symbol     11.929M (± 0.8%) i/s -     60.151M in   5.042778s
     Hash#[], string     12.200M (± 0.8%) i/s -     61.722M in   5.059649s
  Hash#fetch, string      7.269M (± 0.6%) i/s -     36.355M in   5.001632s

Comparison:
     Hash#[], symbol: 13985771.4 i/s
     Hash#[], string: 12199606.6 i/s - 1.15x  (± 0.00) slower
  Hash#fetch, symbol: 11929000.8 i/s - 1.17x  (± 0.00) slower
  Hash#fetch, string:  7268958.9 i/s - 1.92x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   807.190k i/100ms
             Hash#[]   956.636k i/100ms
          Hash#[] ||   859.257k i/100ms
          Hash#[] &&   361.059k i/100ms
          Hash#fetch   584.915k i/100ms
 Hash#fetch fallback   386.786k i/100ms
Calculating -------------------------------------
            Hash#dig      7.992M (± 0.5%) i/s -     40.360M in   5.050072s
             Hash#[]      9.666M (± 1.2%) i/s -     48.788M in   5.048182s
          Hash#[] ||      8.774M (± 3.6%) i/s -     43.822M in   5.001317s
          Hash#[] &&      3.811M (± 1.4%) i/s -     19.136M in   5.022044s
          Hash#fetch      5.912M (± 0.8%) i/s -     29.831M in   5.045787s
 Hash#fetch fallback      3.786M (± 0.6%) i/s -     18.953M in   5.006798s

Comparison:
             Hash#[]:  9665893.2 i/s
          Hash#[] ||:  8773876.2 i/s - 1.10x  (± 0.00) slower
            Hash#dig:  7992047.6 i/s - 1.21x  (± 0.00) slower
          Hash#fetch:  5912351.0 i/s - 1.63x  (± 0.00) slower
          Hash#[] &&:  3811214.9 i/s - 2.54x  (± 0.00) slower
 Hash#fetch fallback:  3785510.8 i/s - 2.55x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.424M i/100ms
  Hash#fetch + block     1.409M i/100ms
    Hash#fetch + arg     1.065M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.056M (± 0.9%) i/s -     71.188M in   5.065023s
  Hash#fetch + block     14.306M (± 1.0%) i/s -     71.863M in   5.023889s
    Hash#fetch + arg     10.549M (± 1.2%) i/s -     53.236M in   5.047194s

Comparison:
  Hash#fetch + block: 14305944.0 i/s
  Hash#fetch + const: 14055952.1 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 10549238.3 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    26.649k i/100ms
         sort + to_h    12.347k i/100ms
Calculating -------------------------------------
      sort_by + to_h    266.100k (± 2.5%) i/s -      1.332M in   5.011103s
         sort + to_h    123.512k (± 1.1%) i/s -    629.697k in   5.098859s

Comparison:
      sort_by + to_h:   266100.3 i/s
         sort + to_h:   123511.7 i/s - 2.15x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   183.428k i/100ms
       Hash#each_key   181.525k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.877M (± 1.3%) i/s -      9.538M in   5.081850s
       Hash#each_key      1.842M (± 0.9%) i/s -      9.258M in   5.027666s

Comparison:
      Hash#keys.each:  1877224.8 i/s
       Hash#each_key:  1841530.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     7.983k i/100ms
           Hash#key?   935.086k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     79.226k (± 5.2%) i/s -    399.150k in   5.059483s
           Hash#key?      9.290M (± 0.6%) i/s -     46.754M in   5.032727s

Comparison:
           Hash#key?:  9290437.6 i/s
  Hash#keys.include?:    79225.9 i/s - 117.27x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.826k i/100ms
            Hash#[]=    10.328k i/100ms
Calculating -------------------------------------
         Hash#merge!     38.442k (± 0.6%) i/s -    195.126k in   5.076115s
            Hash#[]=    104.032k (± 1.5%) i/s -    526.728k in   5.064294s

Comparison:
            Hash#[]=:   104032.2 i/s
         Hash#merge!:    38441.6 i/s - 2.71x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.420k i/100ms
      Hash#merge({})     3.832k i/100ms
 Hash#dup#merge!({})     2.763k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         44.367k (± 0.9%) i/s -    225.420k in   5.081255s
      Hash#merge({})     38.219k (± 0.4%) i/s -    191.600k in   5.013336s
 Hash#dup#merge!({})     27.524k (± 0.4%) i/s -    138.150k in   5.019352s

Comparison:
{}#merge!(Hash) do end:    44366.8 i/s
      Hash#merge({}):    38218.7 i/s - 1.16x  (± 0.00) slower
 Hash#dup#merge!({}):    27524.0 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   381.359k i/100ms
          Hash#merge   328.437k i/100ms
Calculating -------------------------------------
        Hash#**other      3.824M (± 0.6%) i/s -     19.449M in   5.086707s
          Hash#merge      3.273M (± 0.4%) i/s -     16.422M in   5.018006s

Comparison:
        Hash#**other:  3823702.9 i/s
          Hash#merge:  3272639.9 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.662k i/100ms
         Hash#merge!     3.737k i/100ms
Calculating -------------------------------------
          Hash#merge     16.534k (± 2.7%) i/s -     83.100k in   5.030018s
         Hash#merge!     37.106k (± 0.7%) i/s -    186.850k in   5.035798s

Comparison:
         Hash#merge!:    37105.9 i/s
          Hash#merge:    16534.2 i/s - 2.24x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      419.884k i/100ms
Array#each             205.182k i/100ms
Array#each_w/_object   166.621k i/100ms
Hash#select-include     76.034k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.299M (± 0.6%) i/s -     21.834M in   5.079048s
Array#each                2.021M (± 0.9%) i/s -     10.259M in   5.077044s
Array#each_w/_object      1.640M (± 2.6%) i/s -      8.331M in   5.083505s
Hash#select-include     757.463k (± 1.6%) i/s -      3.802M in   5.020389s

Comparison:
Hash#native-slice   :  4298990.6 i/s
Array#each          :  2020853.0 i/s - 2.13x  (± 0.00) slower
Array#each_w/_object:  1640126.2 i/s - 2.62x  (± 0.00) slower
Hash#select-include :   757462.7 i/s - 5.68x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.541k i/100ms
         Hash#value?     1.226k i/100ms
Calculating -------------------------------------
Hash#values.include?     15.338k (± 2.4%) i/s -     77.050k in   5.026996s
         Hash#value?     12.298k (± 0.3%) i/s -     62.526k in   5.084165s

Comparison:
Hash#values.include?:    15337.6 i/s
         Hash#value?:    12298.3 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                call   581.745k i/100ms
                send   476.196k i/100ms
      method_missing   354.867k i/100ms
Calculating -------------------------------------
                call      5.857M (± 0.3%) i/s -     29.669M in   5.065537s
                send      4.773M (± 0.9%) i/s -     24.286M in   5.088122s
      method_missing      3.507M (± 0.5%) i/s -     17.743M in   5.060117s

Comparison:
                call:  5857071.5 i/s
                send:  4773463.7 i/s - 1.23x  (± 0.00) slower
      method_missing:  3506586.9 i/s - 1.67x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
               Block     9.367k i/100ms
      Symbol#to_proc     9.161k i/100ms
Calculating -------------------------------------
               Block     93.634k (± 0.5%) i/s -    468.350k in   5.002050s
      Symbol#to_proc     91.169k (± 0.5%) i/s -    458.050k in   5.024310s

Comparison:
               Block:    93634.3 i/s
      Symbol#to_proc:    91168.9 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          block.call   950.104k i/100ms
       block + yield     1.011M i/100ms
        unused block     1.303M i/100ms
               yield     1.178M i/100ms
Calculating -------------------------------------
          block.call      9.526M (± 0.4%) i/s -     48.455M in   5.086983s
       block + yield     10.130M (± 0.3%) i/s -     51.586M in   5.092334s
        unused block     12.966M (± 0.4%) i/s -     65.172M in   5.026627s
               yield     11.779M (± 0.3%) i/s -     60.068M in   5.099459s

Comparison:
        unused block: 12965667.8 i/s
               yield: 11779480.8 i/s - 1.10x  (± 0.00) slower
       block + yield: 10130332.2 i/s - 1.28x  (± 0.00) slower
          block.call:  9525505.3 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   318.001k i/100ms
      range#include?    12.466k i/100ms
       range#member?    12.415k i/100ms
       plain compare   501.261k i/100ms
Calculating -------------------------------------
        range#cover?      3.128M (± 2.4%) i/s -     15.900M in   5.086967s
      range#include?    125.341k (± 0.5%) i/s -    635.766k in   5.072430s
       range#member?    125.863k (± 0.5%) i/s -    633.165k in   5.030739s
       plain compare      4.906M (± 0.6%) i/s -     24.562M in   5.006455s

Comparison:
       plain compare:  4906209.7 i/s
        range#cover?:  3127612.5 i/s - 1.57x  (± 0.00) slower
       range#member?:   125863.1 i/s - 38.98x  (± 0.00) slower
      range#include?:   125341.2 i/s - 39.14x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       String#match?   927.983k i/100ms
           String#=~   625.231k i/100ms
          Regexp#===   592.337k i/100ms
        String#match   484.406k i/100ms
Calculating -------------------------------------
       String#match?      9.187M (± 0.4%) i/s -     46.399M in   5.050784s
           String#=~      6.229M (± 0.9%) i/s -     31.262M in   5.019048s
          Regexp#===      5.939M (± 0.4%) i/s -     30.209M in   5.086542s
        String#match      4.838M (± 0.6%) i/s -     24.220M in   5.006705s

Comparison:
       String#match?:  9186712.0 i/s
           String#=~:  6229064.8 i/s - 1.47x  (± 0.00) slower
          Regexp#===:  5939162.1 i/s - 1.55x  (± 0.00) slower
        String#match:  4837721.5 i/s - 1.90x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   627.611k i/100ms
      String#casecmp   807.347k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.220M (± 1.1%) i/s -     31.381M in   5.045310s
      String#casecmp      8.083M (± 0.6%) i/s -     41.175M in   5.094040s

Comparison:
      String#casecmp:  8083191.3 i/s
String#downcase + ==:  6220478.8 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            String#+   548.607k i/100ms
       String#concat   609.406k i/100ms
       String#append   648.640k i/100ms
         "foo" "bar"     1.154M i/100ms
  "#{'foo'}#{'bar'}"     1.168M i/100ms
Calculating -------------------------------------
            String#+      5.565M (± 2.4%) i/s -     27.979M in   5.030418s
       String#concat      6.087M (± 0.5%) i/s -     30.470M in   5.006153s
       String#append      6.493M (± 0.4%) i/s -     33.081M in   5.095215s
         "foo" "bar"     11.482M (± 0.4%) i/s -     57.695M in   5.024774s
  "#{'foo'}#{'bar'}"     11.682M (± 0.2%) i/s -     59.550M in   5.097810s

Comparison:
  "#{'foo'}#{'bar'}": 11681511.5 i/s
         "foo" "bar": 11482291.5 i/s - 1.02x  (± 0.00) slower
       String#append:  6492608.2 i/s - 1.80x  (± 0.00) slower
       String#concat:  6086724.8 i/s - 1.92x  (± 0.00) slower
            String#+:  5565420.5 i/s - 2.10x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#+@     1.007M i/100ms
          String#dup   556.690k i/100ms
Calculating -------------------------------------
           String#+@     10.056M (± 0.2%) i/s -     50.358M in   5.007976s
          String#dup      5.525M (± 0.4%) i/s -     27.834M in   5.037634s

Comparison:
           String#+@: 10055549.7 i/s
          String#dup:  5525408.2 i/s - 1.82x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   183.090k i/100ms
       String#match?   415.959k i/100ms
    String#end_with?   607.715k i/100ms
Calculating -------------------------------------
           String#=~      1.848M (± 2.6%) i/s -      9.338M in   5.055934s
       String#match?      4.176M (± 0.6%) i/s -     21.214M in   5.079860s
    String#end_with?      6.059M (± 0.7%) i/s -     30.386M in   5.014868s

Comparison:
    String#end_with?:  6059404.3 i/s
       String#match?:  4176218.1 i/s - 1.45x  (± 0.00) slower
           String#=~:  1848282.5 i/s - 3.28x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   110.433k i/100ms
          String#sub   135.489k i/100ms
String#dup["string"]=
                       174.496k i/100ms
Calculating -------------------------------------
         String#gsub      1.116M (± 0.3%) i/s -      5.632M in   5.045343s
          String#sub      1.345M (± 0.5%) i/s -      6.774M in   5.037812s
String#dup["string"]=
                          1.731M (± 0.3%) i/s -      8.725M in   5.039038s

Comparison:
String#dup["string"]=:  1731460.1 i/s
          String#sub:  1344759.1 i/s - 1.29x  (± 0.00) slower
         String#gsub:  1116305.2 i/s - 1.55x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   102.571k i/100ms
           String#tr   340.766k i/100ms
Calculating -------------------------------------
         String#gsub      1.013M (± 0.6%) i/s -      5.129M in   5.061880s
           String#tr      3.416M (± 0.7%) i/s -     17.379M in   5.087901s

Comparison:
           String#tr:  3415936.8 i/s
         String#gsub:  1013210.1 i/s - 3.37x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.163M i/100ms
         With Freeze     1.684M i/100ms
Calculating -------------------------------------
      Without Freeze     11.582M (± 0.4%) i/s -     58.125M in   5.018556s
         With Freeze     16.870M (± 0.3%) i/s -     85.890M in   5.091231s

Comparison:
         With Freeze: 16870276.5 i/s
      Without Freeze: 11582318.3 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.608k i/100ms
      String#squeeze   158.326k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     35.983k (± 0.7%) i/s -    180.400k in   5.013704s
      String#squeeze      1.576M (± 0.8%) i/s -      7.916M in   5.024098s

Comparison:
      String#squeeze:  1575768.0 i/s
 String#gsub/regex+/:    35983.2 i/s - 43.79x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   286.776k i/100ms
       String#match?   704.568k i/100ms
  String#start_with?   842.723k i/100ms
Calculating -------------------------------------
           String#=~      2.877M (± 0.3%) i/s -     14.626M in   5.083734s
       String#match?      7.034M (± 0.5%) i/s -     35.228M in   5.008204s
  String#start_with?      8.468M (± 0.2%) i/s -     42.979M in   5.075395s

Comparison:
  String#start_with?:  8468131.2 i/s
       String#match?:  7034304.6 i/s - 1.20x  (± 0.00) slower
           String#=~:  2876956.1 i/s - 2.94x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   206.630k i/100ms
    String#[0, n] ==    86.931k i/100ms
   String#[RANGE] ==    80.657k i/100ms
   String#[0...n] ==    43.418k i/100ms
Calculating -------------------------------------
  String#start_with?      2.018M (± 1.1%) i/s -     10.125M in   5.018440s
    String#[0, n] ==    858.147k (± 0.7%) i/s -      4.347M in   5.065271s
   String#[RANGE] ==    798.544k (± 0.5%) i/s -      4.033M in   5.050405s
   String#[0...n] ==    438.951k (± 0.4%) i/s -      2.214M in   5.044665s

Comparison:
  String#start_with?:  2017779.0 i/s
    String#[0, n] ==:   858146.5 i/s - 2.35x  (± 0.00) slower
   String#[RANGE] ==:   798543.7 i/s - 2.53x  (± 0.00) slower
   String#[0...n] ==:   438950.9 i/s - 4.60x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   173.542k i/100ms
 String#sub!'string'   127.141k i/100ms
String#gsub!'string'    77.446k i/100ms
  String#[/regexp/]=   154.373k i/100ms
 String#sub!/regexp/   114.960k i/100ms
String#gsub!/regexp/    61.703k i/100ms
Calculating -------------------------------------
  String#['string']=      1.743M (± 0.2%) i/s -      8.851M in   5.078151s
 String#sub!'string'      1.256M (± 3.5%) i/s -      6.357M in   5.067485s
String#gsub!'string'    786.378k (± 0.6%) i/s -      3.950M in   5.022871s
  String#[/regexp/]=      1.538M (± 0.4%) i/s -      7.719M in   5.018938s
 String#sub!/regexp/      1.185M (± 1.4%) i/s -      5.978M in   5.043854s
String#gsub!/regexp/    621.789k (± 0.7%) i/s -      3.147M in   5.061218s

Comparison:
  String#['string']=:  1742891.7 i/s
  String#[/regexp/]=:  1537935.6 i/s - 1.13x  (± 0.00) slower
 String#sub!'string':  1256233.9 i/s - 1.39x  (± 0.00) slower
 String#sub!/regexp/:  1185433.0 i/s - 1.47x  (± 0.00) slower
String#gsub!'string':   786377.8 i/s - 2.22x  (± 0.00) slower
String#gsub!/regexp/:   621789.1 i/s - 2.80x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          String#sub   145.262k i/100ms
        String#chomp   537.968k i/100ms
String#delete_suffix   607.671k i/100ms
Calculating -------------------------------------
          String#sub      1.459M (± 0.6%) i/s -      7.408M in   5.078507s
        String#chomp      5.332M (± 0.7%) i/s -     26.898M in   5.045398s
String#delete_suffix      6.067M (± 1.0%) i/s -     30.384M in   5.008587s

Comparison:
String#delete_suffix:  6066900.8 i/s
        String#chomp:  5331505.0 i/s - 1.14x  (± 0.00) slower
          String#sub:  1458820.7 i/s - 4.16x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   605.078k i/100ms
          String#sub   148.707k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.002M (± 1.2%) i/s -     30.254M in   5.041194s
          String#sub      1.477M (± 0.6%) i/s -      7.435M in   5.032564s

Comparison:
String#delete_prefix:  6002180.4 i/s
          String#sub:  1477499.2 i/s - 4.06x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   604.787k i/100ms
    String#unpack[0]   459.712k i/100ms
Calculating -------------------------------------
      String#unpack1      6.015M (± 0.4%) i/s -     30.239M in   5.027594s
    String#unpack[0]      4.581M (± 2.6%) i/s -     22.986M in   5.021225s

Comparison:
      String#unpack1:  6014778.9 i/s
    String#unpack[0]:  4581133.8 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.733k i/100ms
          Time.parse     9.413k i/100ms
Calculating -------------------------------------
        Time.iso8601    279.576k (± 0.8%) i/s -      1.414M in   5.059356s
          Time.parse     94.030k (± 2.5%) i/s -    470.650k in   5.008737s

Comparison:
        Time.iso8601:   279576.3 i/s
          Time.parse:    94029.7 i/s - 2.97x  (± 0.00) slower

