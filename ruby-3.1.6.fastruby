$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       758.144k i/100ms
Function with splat arguments
                        23.269k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.596M (± 1.2%) i/s -     38.665M in   5.090831s
Function with splat arguments
                        189.553k (± 9.0%) i/s -    954.029k in   5.074391s

Comparison:
Function with single Array argument:  7596307.8 i/s
Function with splat arguments:   189553.4 i/s - 40.07x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.017M i/100ms
Sequential Assignment
                         1.033M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.188M (± 0.3%) i/s -     51.880M in   5.092394s
Sequential Assignment
                         10.341M (± 0.3%) i/s -     52.671M in   5.093653s

Comparison:
Sequential Assignment: 10340633.7 i/s
 Parallel Assignment: 10187779.3 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   468.670k i/100ms
       attr_accessor   490.860k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.676M (± 0.5%) i/s -     23.434M in   5.011447s
       attr_accessor      4.888M (± 0.8%) i/s -     24.543M in   5.020999s

Comparison:
       attr_accessor:  4888412.1 i/s
   getter_and_setter:  4676106.7 i/s - 1.05x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    90.622k i/100ms
         respond_to?   752.463k i/100ms
Calculating -------------------------------------
      begin...rescue    903.983k (± 2.4%) i/s -      4.531M in   5.015631s
         respond_to?      7.446M (± 0.6%) i/s -     37.623M in   5.053264s

Comparison:
         respond_to?:  7445571.9 i/s
      begin...rescue:   903982.5 i/s - 8.24x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              normal   296.898k i/100ms
             &method   118.734k i/100ms
Calculating -------------------------------------
              normal      2.967M (± 1.1%) i/s -     14.845M in   5.004111s
             &method      1.181M (± 0.3%) i/s -      5.937M in   5.027121s

Comparison:
              normal:  2966906.7 i/s
             &method:  1180946.3 i/s - 2.51x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       230.000  i/100ms
       define_method   311.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.255k (±19.1%) i/s -     10.580k in   5.079823s
       define_method      3.204k (±19.3%) i/s -     14.617k in   5.087324s

Comparison:
       define_method:     3204.2 i/s
module_eval with string:     2255.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Float#round   255.427k i/100ms
       Kernel#format   201.716k i/100ms
            String#%   171.347k i/100ms
Calculating -------------------------------------
         Float#round      2.554M (± 0.1%) i/s -     13.027M in   5.100143s
       Kernel#format      2.009M (± 0.4%) i/s -     10.086M in   5.019596s
            String#%      1.717M (± 0.2%) i/s -      8.739M in   5.089833s

Comparison:
         Float#round:  2554203.5 i/s
       Kernel#format:  2009310.4 i/s - 1.27x  (± 0.00) slower
            String#%:  1716901.9 i/s - 1.49x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash   870.545k i/100ms
          OpenStruct   488.465k i/100ms
Calculating -------------------------------------
                Hash      8.764M (± 0.8%) i/s -     44.398M in   5.066216s
          OpenStruct      4.854M (± 0.5%) i/s -     24.423M in   5.031281s

Comparison:
                Hash:  8764130.8 i/s
          OpenStruct:  4854405.5 i/s - 1.81x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.114M i/100ms
          OpenStruct     9.444k i/100ms
Calculating -------------------------------------
                Hash     11.150M (± 0.1%) i/s -     56.789M in   5.093347s
          OpenStruct     93.404k (± 2.8%) i/s -    472.200k in   5.059312s

Comparison:
                Hash: 11149729.0 i/s
          OpenStruct:    93404.1 i/s - 119.37x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   604.564k i/100ms
  ancestors.include?   126.013k i/100ms
Calculating -------------------------------------
  less than or equal      5.914M (± 2.9%) i/s -     29.624M in   5.014589s
  ancestors.include?      1.265M (± 0.7%) i/s -      6.427M in   5.081599s

Comparison:
  less than or equal:  5913701.7 i/s
  ancestors.include?:  1264753.9 i/s - 4.68x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.644  (± 0.0%) i/s -      4.000  in   6.218679s
         Kernel loop      0.215  (± 0.0%) i/s -      2.000  in   9.309647s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 3.00x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.541M i/100ms
         Array#first     1.342M i/100ms
Calculating -------------------------------------
           Array#[0]     15.368M (± 2.0%) i/s -     77.052M in   5.015910s
         Array#first     13.359M (± 0.5%) i/s -     67.106M in   5.023548s

Comparison:
           Array#[0]: 15368327.2 i/s
         Array#first: 13358545.7 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.529M i/100ms
          Array#last     1.333M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.324M (± 0.4%) i/s -     77.969M in   5.088140s
          Array#last     13.307M (± 0.7%) i/s -     66.630M in   5.007316s

Comparison:
          Array#[-1]: 15323992.6 i/s
          Array#last: 13307156.2 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    96.287k i/100ms
Calculating -------------------------------------
                find      0.266  (± 0.0%) i/s -      2.000  in   7.523272s
             bsearch    972.900k (± 1.3%) i/s -      4.911M in   5.048286s

Comparison:
             bsearch:   972900.4 i/s
                find:        0.3 i/s - 3659685.08x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    18.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    189.749  (± 2.6%) i/s -    954.000  in   5.030965s
        Array#insert      1.412  (± 0.0%) i/s -      8.000  in   5.666490s

Comparison:
       Array#unshift:      189.7 i/s
        Array#insert:        1.4 i/s - 134.39x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.163M i/100ms
          Array#size     2.101M i/100ms
         Array#count     1.624M i/100ms
Calculating -------------------------------------
        Array#length     21.395M (± 2.4%) i/s -    108.136M in   5.057580s
          Array#size     21.110M (± 0.4%) i/s -    107.135M in   5.075062s
         Array#count     16.443M (± 0.7%) i/s -     82.808M in   5.036388s

Comparison:
        Array#length: 21395436.2 i/s
          Array#size: 21110400.0 i/s - same-ish: difference falls within error
         Array#count: 16442722.2 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    46.363k i/100ms
        Array#sample     1.047M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    465.569k (± 0.6%) i/s -      2.365M in   5.078932s
        Array#sample     10.456M (± 0.2%) i/s -     52.364M in   5.007955s

Comparison:
        Array#sample: 10456143.6 i/s
 Array#shuffle.first:   465569.3 i/s - 22.46x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    63.231k i/100ms
          Date.parse    31.108k i/100ms
Calculating -------------------------------------
        Date.iso8601    629.778k (± 0.5%) i/s -      3.162M in   5.020221s
          Date.parse    312.389k (± 0.5%) i/s -      1.587M in   5.078782s

Comparison:
        Date.iso8601:   629778.3 i/s
          Date.parse:   312389.0 i/s - 2.02x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.313k i/100ms
           Array#map    27.017k i/100ms
Calculating -------------------------------------
   Array#each + push    182.234k (± 0.5%) i/s -    915.650k in   5.024744s
           Array#map    270.094k (± 1.0%) i/s -      1.351M in   5.001979s

Comparison:
           Array#map:   270093.5 i/s
   Array#each + push:   182233.8 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            For loop    28.982k i/100ms
               #each    32.494k i/100ms
Calculating -------------------------------------
            For loop    289.174k (± 1.0%) i/s -      1.449M in   5.011736s
               #each    325.592k (± 0.2%) i/s -      1.657M in   5.089802s

Comparison:
               #each:   325592.3 i/s
            For loop:   289174.0 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.411k i/100ms
     each_with_index    19.033k i/100ms
Calculating -------------------------------------
          While Loop    272.778k (± 0.3%) i/s -      1.371M in   5.024470s
     each_with_index    190.347k (± 0.3%) i/s -    970.683k in   5.099591s

Comparison:
          While Loop:   272778.1 i/s
     each_with_index:   190346.5 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    71.937k i/100ms
      inject to_proc     2.034k i/100ms
        inject block     1.944k i/100ms
Calculating -------------------------------------
       inject symbol    713.908k (± 3.0%) i/s -      3.597M in   5.043249s
      inject to_proc     20.281k (± 0.6%) i/s -    101.700k in   5.014607s
        inject block     19.438k (± 0.5%) i/s -     97.200k in   5.000711s

Comparison:
       inject symbol:   713908.2 i/s
      inject to_proc:    20281.5 i/s - 35.20x  (± 0.00) slower
        inject block:    19437.7 i/s - 36.73x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     7.523k i/100ms
   Array#map.flatten     3.870k i/100ms
      Array#flat_map     9.479k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     74.577k (± 0.6%) i/s -    376.150k in   5.043978s
   Array#map.flatten     38.629k (± 0.6%) i/s -    193.500k in   5.009383s
      Array#flat_map     95.120k (± 0.9%) i/s -    483.429k in   5.082774s

Comparison:
      Array#flat_map:    95119.6 i/s
Array#map.flatten(1):    74576.6 i/s - 1.28x  (± 0.00) slower
   Array#map.flatten:    38629.1 i/s - 2.46x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    30.630k i/100ms
  Array#reverse_each    31.501k i/100ms
Calculating -------------------------------------
  Array#reverse.each    306.142k (± 0.5%) i/s -      1.532M in   5.002707s
  Array#reverse_each    313.294k (± 2.2%) i/s -      1.575M in   5.030321s

Comparison:
  Array#reverse_each:   313293.7 i/s
  Array#reverse.each:   306141.9 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        19.740k i/100ms
   Enumerable#detect    79.275k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        196.613k (± 1.1%) i/s -      3.948M in  20.082694s
   Enumerable#detect    796.480k (± 0.6%) i/s -     15.934M in  20.006623s

Comparison:
   Enumerable#detect:   796479.9 i/s
Enumerable#select.first:   196613.2 i/s - 4.05x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       234.071k i/100ms
Enumerable#select.last
                        17.957k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.373M (± 0.5%) i/s -     11.938M in   5.030638s
Enumerable#select.last
                        178.897k (± 0.2%) i/s -    897.850k in   5.018839s

Comparison:
Enumerable#reverse.detect:  2373051.9 i/s
Enumerable#select.last:   178896.6 i/s - 13.26x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.784k i/100ms
  Enumerable#sort_by     4.642k i/100ms
     Enumerable#sort     2.349k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         48.242k (± 1.5%) i/s -    243.984k in   5.058587s
  Enumerable#sort_by     46.318k (± 1.7%) i/s -    232.100k in   5.012560s
     Enumerable#sort     23.718k (± 0.5%) i/s -    119.799k in   5.051011s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    48242.3 i/s
  Enumerable#sort_by:    46317.6 i/s - 1.04x  (± 0.00) slower
     Enumerable#sort:    23718.4 i/s - 2.03x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.084k i/100ms
Enumerable#sort_by...first
                         8.312k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    170.461k (± 0.2%) i/s -    854.200k in   5.011139s
Enumerable#sort_by...first
                         82.074k (± 2.1%) i/s -    415.600k in   5.066136s

Comparison:
   Enumerable#min_by:   170460.9 i/s
Enumerable#sort_by...first:    82074.2 i/s - 2.08x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   410.828k i/100ms
            Hash#dup   291.592k i/100ms
Calculating -------------------------------------
              Hash[]      4.022M (± 2.7%) i/s -     20.131M in   5.008434s
            Hash#dup      2.911M (± 0.8%) i/s -     14.580M in   5.008920s

Comparison:
              Hash[]:  4022081.3 i/s
            Hash#dup:  2910907.3 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.414M i/100ms
  Hash#fetch, symbol     1.201M i/100ms
     Hash#[], string     1.251M i/100ms
  Hash#fetch, string   723.974k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.125M (± 0.4%) i/s -     70.718M in   5.006788s
  Hash#fetch, symbol     11.930M (± 0.4%) i/s -     60.065M in   5.034690s
     Hash#[], string     12.526M (± 0.6%) i/s -     63.785M in   5.092405s
  Hash#fetch, string      7.314M (± 0.7%) i/s -     36.923M in   5.048621s

Comparison:
     Hash#[], symbol: 14124765.6 i/s
     Hash#[], string: 12525976.4 i/s - 1.13x  (± 0.00) slower
  Hash#fetch, symbol: 11930444.3 i/s - 1.18x  (± 0.00) slower
  Hash#fetch, string:  7313737.7 i/s - 1.93x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   788.060k i/100ms
             Hash#[]   953.883k i/100ms
          Hash#[] ||   850.266k i/100ms
          Hash#[] &&   345.934k i/100ms
          Hash#fetch   584.115k i/100ms
 Hash#fetch fallback   381.142k i/100ms
Calculating -------------------------------------
            Hash#dig      7.958M (± 0.6%) i/s -     40.191M in   5.050865s
             Hash#[]      9.477M (± 1.1%) i/s -     47.694M in   5.033236s
          Hash#[] ||      8.448M (± 0.7%) i/s -     42.513M in   5.032868s
          Hash#[] &&      3.747M (± 3.1%) i/s -     19.026M in   5.082687s
          Hash#fetch      6.051M (± 3.5%) i/s -     30.374M in   5.025637s
 Hash#fetch fallback      3.841M (± 1.3%) i/s -     19.438M in   5.062106s

Comparison:
             Hash#[]:  9476957.5 i/s
          Hash#[] ||:  8447583.0 i/s - 1.12x  (± 0.00) slower
            Hash#dig:  7957555.3 i/s - 1.19x  (± 0.00) slower
          Hash#fetch:  6051101.1 i/s - 1.57x  (± 0.00) slower
 Hash#fetch fallback:  3840622.9 i/s - 2.47x  (± 0.00) slower
          Hash#[] &&:  3747071.8 i/s - 2.53x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.412M i/100ms
  Hash#fetch + block     1.402M i/100ms
    Hash#fetch + arg     1.057M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.106M (± 0.7%) i/s -     70.622M in   5.006816s
  Hash#fetch + block     14.331M (± 0.7%) i/s -     72.903M in   5.087490s
    Hash#fetch + arg     10.389M (± 1.8%) i/s -     52.842M in   5.087836s

Comparison:
  Hash#fetch + block: 14330503.8 i/s
  Hash#fetch + const: 14105877.1 i/s - 1.02x  (± 0.00) slower
    Hash#fetch + arg: 10389199.7 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    26.132k i/100ms
         sort + to_h    11.480k i/100ms
Calculating -------------------------------------
      sort_by + to_h    260.813k (± 0.4%) i/s -      1.307M in   5.009781s
         sort + to_h    113.905k (± 0.8%) i/s -    574.000k in   5.039606s

Comparison:
      sort_by + to_h:   260813.3 i/s
         sort + to_h:   113904.8 i/s - 2.29x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   182.325k i/100ms
       Hash#each_key   189.538k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.817M (± 0.4%) i/s -      9.116M in   5.016224s
       Hash#each_key      1.843M (± 0.7%) i/s -      9.287M in   5.039073s

Comparison:
       Hash#each_key:  1843169.0 i/s
      Hash#keys.each:  1817378.4 i/s - 1.01x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.261k i/100ms
           Hash#key?     1.035M i/100ms
Calculating -------------------------------------
  Hash#keys.include?     12.507k (± 3.7%) i/s -     63.050k in   5.049153s
           Hash#key?     10.179M (± 0.5%) i/s -     51.734M in   5.082557s

Comparison:
           Hash#key?: 10178948.2 i/s
  Hash#keys.include?:    12507.2 i/s - 813.85x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.822k i/100ms
            Hash#[]=    10.325k i/100ms
Calculating -------------------------------------
         Hash#merge!     37.784k (± 0.7%) i/s -    191.100k in   5.058023s
            Hash#[]=    101.961k (± 0.8%) i/s -    516.250k in   5.063521s

Comparison:
            Hash#[]=:   101961.4 i/s
         Hash#merge!:    37783.6 i/s - 2.70x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.477k i/100ms
      Hash#merge({})     3.764k i/100ms
 Hash#dup#merge!({})     2.732k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         44.440k (± 1.1%) i/s -    223.850k in   5.037738s
      Hash#merge({})     39.297k (± 1.2%) i/s -    199.492k in   5.077239s
 Hash#dup#merge!({})     27.919k (± 0.6%) i/s -    142.064k in   5.088619s

Comparison:
{}#merge!(Hash) do end:    44440.4 i/s
      Hash#merge({}):    39297.0 i/s - 1.13x  (± 0.00) slower
 Hash#dup#merge!({}):    27918.9 i/s - 1.59x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   374.510k i/100ms
          Hash#merge   327.459k i/100ms
Calculating -------------------------------------
        Hash#**other      3.779M (± 1.0%) i/s -     19.100M in   5.055258s
          Hash#merge      3.307M (± 0.4%) i/s -     16.700M in   5.050386s

Comparison:
        Hash#**other:  3778646.3 i/s
          Hash#merge:  3306823.3 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.599k i/100ms
         Hash#merge!     3.716k i/100ms
Calculating -------------------------------------
          Hash#merge     16.208k (± 2.9%) i/s -     81.549k in   5.035546s
         Hash#merge!     36.708k (± 0.3%) i/s -    185.800k in   5.061599s

Comparison:
         Hash#merge!:    36708.1 i/s
          Hash#merge:    16208.5 i/s - 2.26x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      430.828k i/100ms
Array#each             203.468k i/100ms
Array#each_w/_object   166.348k i/100ms
Hash#select-include     74.129k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.277M (± 0.5%) i/s -     21.541M in   5.037296s
Array#each                1.987M (± 0.5%) i/s -      9.970M in   5.017484s
Array#each_w/_object      1.659M (± 0.3%) i/s -      8.317M in   5.014778s
Hash#select-include     738.732k (± 1.2%) i/s -      3.706M in   5.018082s

Comparison:
Hash#native-slice   :  4276511.0 i/s
Array#each          :  1987092.3 i/s - 2.15x  (± 0.00) slower
Array#each_w/_object:  1658594.3 i/s - 2.58x  (± 0.00) slower
Hash#select-include :   738731.7 i/s - 5.79x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.338k i/100ms
         Hash#value?     1.029k i/100ms
Calculating -------------------------------------
Hash#values.include?     13.221k (± 4.2%) i/s -     66.900k in   5.071120s
         Hash#value?     10.369k (± 0.7%) i/s -     52.479k in   5.061153s

Comparison:
Hash#values.include?:    13221.1 i/s
         Hash#value?:    10369.5 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                call   649.792k i/100ms
                send   516.781k i/100ms
      method_missing   378.474k i/100ms
Calculating -------------------------------------
                call      6.497M (± 0.7%) i/s -     32.490M in   5.000637s
                send      5.224M (± 0.5%) i/s -     26.356M in   5.045069s
      method_missing      3.750M (± 0.7%) i/s -     18.924M in   5.045980s

Comparison:
                call:  6497375.8 i/s
                send:  5224234.1 i/s - 1.24x  (± 0.00) slower
      method_missing:  3750423.0 i/s - 1.73x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
               Block     9.394k i/100ms
      Symbol#to_proc     9.136k i/100ms
Calculating -------------------------------------
               Block     93.822k (± 0.3%) i/s -    469.700k in   5.006344s
      Symbol#to_proc     90.910k (± 0.6%) i/s -    456.800k in   5.024942s

Comparison:
               Block:    93821.9 i/s
      Symbol#to_proc:    90909.6 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          block.call   957.578k i/100ms
       block + yield   991.124k i/100ms
        unused block     1.304M i/100ms
               yield     1.183M i/100ms
Calculating -------------------------------------
          block.call      9.625M (± 0.4%) i/s -     48.836M in   5.073823s
       block + yield      9.935M (± 0.4%) i/s -     50.547M in   5.088128s
        unused block     13.036M (± 0.4%) i/s -     65.206M in   5.002215s
               yield     11.846M (± 0.3%) i/s -     60.346M in   5.094369s

Comparison:
        unused block: 13035719.6 i/s
               yield: 11845758.0 i/s - 1.10x  (± 0.00) slower
       block + yield:  9934568.6 i/s - 1.31x  (± 0.00) slower
          block.call:  9625342.4 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   309.495k i/100ms
      range#include?    12.358k i/100ms
       range#member?    12.371k i/100ms
       plain compare   491.283k i/100ms
Calculating -------------------------------------
        range#cover?      3.132M (± 0.7%) i/s -     15.784M in   5.040180s
      range#include?    123.108k (± 2.1%) i/s -    617.900k in   5.021618s
       range#member?    123.281k (± 0.6%) i/s -    618.550k in   5.017596s
       plain compare      4.919M (± 1.9%) i/s -     25.055M in   5.095805s

Comparison:
       plain compare:  4918649.4 i/s
        range#cover?:  3131839.3 i/s - 1.57x  (± 0.00) slower
       range#member?:   123280.9 i/s - 39.90x  (± 0.00) slower
      range#include?:   123108.0 i/s - 39.95x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       String#match?   920.793k i/100ms
           String#=~   630.786k i/100ms
          Regexp#===   594.979k i/100ms
        String#match   483.760k i/100ms
Calculating -------------------------------------
       String#match?      9.201M (± 0.7%) i/s -     46.040M in   5.004066s
           String#=~      6.299M (± 0.9%) i/s -     31.539M in   5.007299s
          Regexp#===      5.984M (± 0.5%) i/s -     30.344M in   5.070746s
        String#match      4.846M (± 0.4%) i/s -     24.672M in   5.091408s

Comparison:
       String#match?:  9200848.2 i/s
           String#=~:  6299229.2 i/s - 1.46x  (± 0.00) slower
          Regexp#===:  5984286.4 i/s - 1.54x  (± 0.00) slower
        String#match:  4845844.6 i/s - 1.90x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   622.422k i/100ms
      String#casecmp   805.136k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.242M (± 1.9%) i/s -     31.744M in   5.087679s
      String#casecmp      8.004M (± 3.3%) i/s -     40.257M in   5.036363s

Comparison:
      String#casecmp:  8003723.0 i/s
String#downcase + ==:  6241957.2 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            String#+   550.467k i/100ms
       String#concat   602.122k i/100ms
       String#append   663.850k i/100ms
         "foo" "bar"     1.153M i/100ms
  "#{'foo'}#{'bar'}"     1.160M i/100ms
Calculating -------------------------------------
            String#+      5.457M (± 1.5%) i/s -     27.523M in   5.044845s
       String#concat      5.959M (± 0.6%) i/s -     30.106M in   5.052481s
       String#append      6.586M (± 0.6%) i/s -     33.192M in   5.040305s
         "foo" "bar"     11.492M (± 0.5%) i/s -     57.660M in   5.017382s
  "#{'foo'}#{'bar'}"     11.494M (± 0.7%) i/s -     58.002M in   5.046320s

Comparison:
  "#{'foo'}#{'bar'}": 11494434.8 i/s
         "foo" "bar": 11492186.0 i/s - same-ish: difference falls within error
       String#append:  6585634.8 i/s - 1.75x  (± 0.00) slower
       String#concat:  5958878.6 i/s - 1.93x  (± 0.00) slower
            String#+:  5457073.5 i/s - 2.11x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#+@     1.011M i/100ms
          String#dup   562.072k i/100ms
Calculating -------------------------------------
           String#+@     10.070M (± 0.5%) i/s -     50.527M in   5.017832s
          String#dup      5.618M (± 0.6%) i/s -     28.104M in   5.002394s

Comparison:
           String#+@: 10069676.5 i/s
          String#dup:  5618206.7 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   186.776k i/100ms
       String#match?   410.292k i/100ms
    String#end_with?   609.461k i/100ms
Calculating -------------------------------------
           String#=~      1.846M (± 1.5%) i/s -      9.339M in   5.059196s
       String#match?      4.138M (± 0.5%) i/s -     20.925M in   5.056734s
    String#end_with?      6.059M (± 0.7%) i/s -     30.473M in   5.029466s

Comparison:
    String#end_with?:  6059222.0 i/s
       String#match?:  4138145.5 i/s - 1.46x  (± 0.00) slower
           String#=~:  1846333.0 i/s - 3.28x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   109.663k i/100ms
          String#sub   135.000k i/100ms
String#dup["string"]=
                       176.155k i/100ms
Calculating -------------------------------------
         String#gsub      1.119M (± 0.6%) i/s -      5.702M in   5.095208s
          String#sub      1.386M (± 0.4%) i/s -      7.020M in   5.063930s
String#dup["string"]=
                          1.752M (± 0.5%) i/s -      8.808M in   5.028634s

Comparison:
String#dup["string"]=:  1751567.6 i/s
          String#sub:  1386302.2 i/s - 1.26x  (± 0.00) slower
         String#gsub:  1119227.2 i/s - 1.56x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    99.783k i/100ms
           String#tr   332.662k i/100ms
Calculating -------------------------------------
         String#gsub      1.016M (± 0.4%) i/s -      5.089M in   5.010460s
           String#tr      3.345M (± 0.5%) i/s -     16.966M in   5.071901s

Comparison:
           String#tr:  3345139.3 i/s
         String#gsub:  1015675.5 i/s - 3.29x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.161M i/100ms
         With Freeze     1.678M i/100ms
Calculating -------------------------------------
      Without Freeze     11.618M (± 0.4%) i/s -     59.206M in   5.095961s
         With Freeze     16.848M (± 0.6%) i/s -     85.566M in   5.078975s

Comparison:
         With Freeze: 16847605.8 i/s
      Without Freeze: 11618407.1 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.568k i/100ms
      String#squeeze   159.274k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     35.385k (± 0.7%) i/s -    178.400k in   5.041957s
      String#squeeze      1.593M (± 2.1%) i/s -      7.964M in   5.001349s

Comparison:
      String#squeeze:  1593100.7 i/s
 String#gsub/regex+/:    35384.7 i/s - 45.02x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   284.450k i/100ms
       String#match?   723.075k i/100ms
  String#start_with?   875.167k i/100ms
Calculating -------------------------------------
           String#=~      2.869M (± 0.4%) i/s -     14.507M in   5.057056s
       String#match?      7.221M (± 1.7%) i/s -     36.154M in   5.008408s
  String#start_with?      8.728M (± 0.5%) i/s -     43.758M in   5.013748s

Comparison:
  String#start_with?:  8727919.2 i/s
       String#match?:  7220736.9 i/s - 1.21x  (± 0.00) slower
           String#=~:  2868691.7 i/s - 3.04x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   197.045k i/100ms
    String#[0, n] ==    87.055k i/100ms
   String#[RANGE] ==    80.368k i/100ms
   String#[0...n] ==    44.819k i/100ms
Calculating -------------------------------------
  String#start_with?      2.053M (± 1.8%) i/s -     10.443M in   5.088135s
    String#[0, n] ==    851.781k (± 0.8%) i/s -      4.266M in   5.008276s
   String#[RANGE] ==    799.570k (± 0.8%) i/s -      4.018M in   5.026016s
   String#[0...n] ==    428.683k (± 0.6%) i/s -      2.151M in   5.018595s

Comparison:
  String#start_with?:  2053150.3 i/s
    String#[0, n] ==:   851781.4 i/s - 2.41x  (± 0.00) slower
   String#[RANGE] ==:   799570.1 i/s - 2.57x  (± 0.00) slower
   String#[0...n] ==:   428683.4 i/s - 4.79x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   174.251k i/100ms
 String#sub!'string'   125.781k i/100ms
String#gsub!'string'    77.893k i/100ms
  String#[/regexp/]=   154.663k i/100ms
 String#sub!/regexp/   113.745k i/100ms
String#gsub!/regexp/    62.043k i/100ms
Calculating -------------------------------------
  String#['string']=      1.736M (± 1.6%) i/s -      8.713M in   5.018839s
 String#sub!'string'      1.268M (± 0.4%) i/s -      6.415M in   5.060533s
String#gsub!'string'    777.313k (± 0.3%) i/s -      3.895M in   5.010447s
  String#[/regexp/]=      1.538M (± 0.2%) i/s -      7.733M in   5.028225s
 String#sub!/regexp/      1.173M (± 0.5%) i/s -      5.915M in   5.042968s
String#gsub!/regexp/    618.339k (± 0.5%) i/s -      3.102M in   5.017028s

Comparison:
  String#['string']=:  1736455.2 i/s
  String#[/regexp/]=:  1537953.4 i/s - 1.13x  (± 0.00) slower
 String#sub!'string':  1267642.9 i/s - 1.37x  (± 0.00) slower
 String#sub!/regexp/:  1172894.6 i/s - 1.48x  (± 0.00) slower
String#gsub!'string':   777313.4 i/s - 2.23x  (± 0.00) slower
String#gsub!/regexp/:   618339.2 i/s - 2.81x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          String#sub   144.842k i/100ms
        String#chomp   527.219k i/100ms
String#delete_suffix   609.015k i/100ms
Calculating -------------------------------------
          String#sub      1.455M (± 0.6%) i/s -      7.387M in   5.078706s
        String#chomp      5.323M (± 0.5%) i/s -     26.888M in   5.051306s
String#delete_suffix      6.027M (± 1.0%) i/s -     30.451M in   5.053077s

Comparison:
String#delete_suffix:  6026789.2 i/s
        String#chomp:  5323136.8 i/s - 1.13x  (± 0.00) slower
          String#sub:  1454544.4 i/s - 4.14x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   592.429k i/100ms
          String#sub   148.528k i/100ms
Calculating -------------------------------------
String#delete_prefix      5.997M (± 1.4%) i/s -     30.214M in   5.039130s
          String#sub      1.472M (± 0.7%) i/s -      7.426M in   5.046280s

Comparison:
String#delete_prefix:  5997015.4 i/s
          String#sub:  1471723.5 i/s - 4.07x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   593.158k i/100ms
    String#unpack[0]   458.484k i/100ms
Calculating -------------------------------------
      String#unpack1      5.906M (± 0.5%) i/s -     29.658M in   5.021958s
    String#unpack[0]      4.552M (± 0.6%) i/s -     22.924M in   5.036425s

Comparison:
      String#unpack1:  5905767.1 i/s
    String#unpack[0]:  4551833.1 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    26.958k i/100ms
          Time.parse     9.155k i/100ms
Calculating -------------------------------------
        Time.iso8601    271.257k (± 0.5%) i/s -      1.375M in   5.068582s
          Time.parse     91.487k (± 1.1%) i/s -    457.750k in   5.004124s

Comparison:
        Time.iso8601:   271256.6 i/s
          Time.parse:    91486.8 i/s - 2.96x  (± 0.00) slower

