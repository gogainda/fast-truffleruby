$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       768.110k i/100ms
Function with splat arguments
                        26.088k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.669M (± 2.4%) i/s -     38.406M in   5.011243s
Function with splat arguments
                        272.224k (± 6.5%) i/s -      1.357M in   5.011525s

Comparison:
Function with single Array argument:  7668805.8 i/s
Function with splat arguments:   272223.9 i/s - 28.17x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.016M i/100ms
Sequential Assignment
                         1.014M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.195M (± 0.8%) i/s -     51.823M in   5.083634s
Sequential Assignment
                         10.143M (± 0.6%) i/s -     51.694M in   5.096596s

Comparison:
 Parallel Assignment: 10194799.8 i/s
Sequential Assignment: 10143252.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   465.595k i/100ms
       attr_accessor   556.485k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.799M (± 0.5%) i/s -     24.211M in   5.045519s
       attr_accessor      5.590M (± 0.3%) i/s -     28.381M in   5.077028s

Comparison:
       attr_accessor:  5590086.5 i/s
   getter_and_setter:  4798630.0 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    88.150k i/100ms
         respond_to?   790.766k i/100ms
Calculating -------------------------------------
      begin...rescue    888.068k (± 1.0%) i/s -      4.496M in   5.062830s
         respond_to?      7.886M (± 0.8%) i/s -     39.538M in   5.014055s

Comparison:
         respond_to?:  7885990.4 i/s
      begin...rescue:   888068.5 i/s - 8.88x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              normal   311.893k i/100ms
             &method   121.899k i/100ms
Calculating -------------------------------------
              normal      3.103M (± 3.4%) i/s -     15.595M in   5.033069s
             &method      1.222M (± 0.5%) i/s -      6.217M in   5.089396s

Comparison:
              normal:  3102812.1 i/s
             &method:  1221561.3 i/s - 2.54x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       266.000  i/100ms
       define_method   260.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.383k (±20.2%) i/s -     10.640k in   5.048263s
       define_method      3.296k (±19.8%) i/s -     14.820k in   5.001469s

Comparison:
       define_method:     3296.1 i/s
module_eval with string:     2383.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Float#round   250.404k i/100ms
       Kernel#format   200.812k i/100ms
            String#%   170.824k i/100ms
Calculating -------------------------------------
         Float#round      2.541M (± 0.9%) i/s -     12.771M in   5.025617s
       Kernel#format      1.997M (± 0.6%) i/s -     10.041M in   5.028400s
            String#%      1.714M (± 0.3%) i/s -      8.712M in   5.083937s

Comparison:
         Float#round:  2541322.0 i/s
       Kernel#format:  1996858.9 i/s - 1.27x  (± 0.00) slower
            String#%:  1713658.0 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash   860.932k i/100ms
          OpenStruct   485.794k i/100ms
Calculating -------------------------------------
                Hash      8.770M (± 1.2%) i/s -     43.908M in   5.007465s
          OpenStruct      4.858M (± 3.4%) i/s -     24.290M in   5.007431s

Comparison:
                Hash:  8769703.7 i/s
          OpenStruct:  4857919.2 i/s - 1.81x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.115M i/100ms
          OpenStruct    10.046k i/100ms
Calculating -------------------------------------
                Hash     11.200M (± 0.5%) i/s -     56.880M in   5.078449s
          OpenStruct     98.972k (± 2.0%) i/s -    502.300k in   5.077108s

Comparison:
                Hash: 11200495.7 i/s
          OpenStruct:    98972.4 i/s - 113.17x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   579.007k i/100ms
  ancestors.include?   121.478k i/100ms
Calculating -------------------------------------
  less than or equal      5.696M (± 1.3%) i/s -     28.950M in   5.083583s
  ancestors.include?      1.196M (± 0.7%) i/s -      6.074M in   5.080815s

Comparison:
  less than or equal:  5695829.4 i/s
  ancestors.include?:  1195515.6 i/s - 4.76x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.719  (± 0.0%) i/s -      4.000  in   5.610795s
         Kernel loop      0.224  (± 0.0%) i/s -      2.000  in   8.941680s

Comparison:
          While Loop:        0.7 i/s
         Kernel loop:        0.2 i/s - 3.21x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.571M i/100ms
         Array#first     1.327M i/100ms
Calculating -------------------------------------
           Array#[0]     15.649M (± 2.8%) i/s -     78.574M in   5.025886s
         Array#first     13.286M (± 0.1%) i/s -     67.685M in   5.094579s

Comparison:
           Array#[0]: 15649177.2 i/s
         Array#first: 13285773.5 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.556M i/100ms
          Array#last     1.315M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.461M (± 3.8%) i/s -     77.800M in   5.041369s
          Array#last     13.111M (± 0.2%) i/s -     65.768M in   5.016110s

Comparison:
          Array#[-1]: 15461166.1 i/s
          Array#last: 13111474.5 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    95.357k i/100ms
Calculating -------------------------------------
                find      0.268  (± 0.0%) i/s -      2.000  in   7.460219s
             bsearch    956.007k (± 0.4%) i/s -      4.863M in   5.087086s

Comparison:
             bsearch:   956006.5 i/s
                find:        0.3 i/s - 3566007.45x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    19.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    197.192  (± 2.5%) i/s -    988.000  in   5.013661s
        Array#insert      1.445  (± 0.0%) i/s -      8.000  in   5.535487s

Comparison:
       Array#unshift:      197.2 i/s
        Array#insert:        1.4 i/s - 136.44x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.092M i/100ms
          Array#size     1.968M i/100ms
         Array#count     1.611M i/100ms
Calculating -------------------------------------
        Array#length     20.859M (± 0.3%) i/s -    104.593M in   5.014310s
          Array#size     20.929M (± 0.2%) i/s -    106.259M in   5.077159s
         Array#count     16.209M (± 0.4%) i/s -     82.146M in   5.067922s

Comparison:
          Array#size: 20928836.7 i/s
        Array#length: 20859222.5 i/s - same-ish: difference falls within error
         Array#count: 16209344.1 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    46.332k i/100ms
        Array#sample     1.041M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    458.283k (± 5.2%) i/s -      2.317M in   5.073843s
        Array#sample     10.362M (± 0.4%) i/s -     52.047M in   5.023081s

Comparison:
        Array#sample: 10361734.3 i/s
 Array#shuffle.first:   458282.6 i/s - 22.61x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    64.866k i/100ms
          Date.parse    32.261k i/100ms
Calculating -------------------------------------
        Date.iso8601    648.448k (± 0.6%) i/s -      3.243M in   5.001801s
          Date.parse    321.277k (± 0.6%) i/s -      1.613M in   5.020953s

Comparison:
        Date.iso8601:   648447.9 i/s
          Date.parse:   321276.7 i/s - 2.02x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.777k i/100ms
           Array#map    26.851k i/100ms
Calculating -------------------------------------
   Array#each + push    187.187k (± 2.5%) i/s -    938.850k in   5.019174s
           Array#map    268.411k (± 0.5%) i/s -      1.343M in   5.001984s

Comparison:
           Array#map:   268411.3 i/s
   Array#each + push:   187187.1 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            For loop    29.873k i/100ms
               #each    32.617k i/100ms
Calculating -------------------------------------
            For loop    298.991k (± 0.3%) i/s -      1.524M in   5.095603s
               #each    326.743k (± 0.4%) i/s -      1.663M in   5.091139s

Comparison:
               #each:   326743.5 i/s
            For loop:   298990.8 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.349k i/100ms
     each_with_index    18.860k i/100ms
Calculating -------------------------------------
          While Loop    273.954k (± 0.3%) i/s -      1.395M in   5.091418s
     each_with_index    188.540k (± 0.4%) i/s -    943.000k in   5.001669s

Comparison:
          While Loop:   273953.9 i/s
     each_with_index:   188540.0 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    93.186k i/100ms
      inject to_proc     2.201k i/100ms
        inject block     2.140k i/100ms
Calculating -------------------------------------
       inject symbol      1.126M (±16.2%) i/s -      5.498M in   5.015503s
      inject to_proc     22.097k (± 1.0%) i/s -    112.251k in   5.080354s
        inject block     21.463k (± 0.4%) i/s -    109.140k in   5.085083s

Comparison:
       inject symbol:  1126430.7 i/s
      inject to_proc:    22097.5 i/s - 50.98x  (± 0.00) slower
        inject block:    21463.1 i/s - 52.48x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.982k i/100ms
   Array#map.flatten     4.003k i/100ms
      Array#flat_map     9.613k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     69.693k (± 0.5%) i/s -    349.100k in   5.009209s
   Array#map.flatten     40.378k (± 0.5%) i/s -    204.153k in   5.056189s
      Array#flat_map     96.027k (± 0.6%) i/s -    480.650k in   5.005549s

Comparison:
      Array#flat_map:    96027.3 i/s
Array#map.flatten(1):    69693.5 i/s - 1.38x  (± 0.00) slower
   Array#map.flatten:    40377.9 i/s - 2.38x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    31.772k i/100ms
  Array#reverse_each    32.413k i/100ms
Calculating -------------------------------------
  Array#reverse.each    318.192k (± 0.4%) i/s -      1.620M in   5.092518s
  Array#reverse_each    324.337k (± 0.7%) i/s -      1.653M in   5.096990s

Comparison:
  Array#reverse_each:   324337.1 i/s
  Array#reverse.each:   318192.5 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.895k i/100ms
   Enumerable#detect    83.349k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        208.557k (± 0.6%) i/s -      4.179M in  20.038321s
   Enumerable#detect    830.700k (± 1.8%) i/s -     16.670M in  20.075339s

Comparison:
   Enumerable#detect:   830700.0 i/s
Enumerable#select.first:   208557.3 i/s - 3.98x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       247.154k i/100ms
Enumerable#select.last
                        19.439k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.442M (± 0.5%) i/s -     12.358M in   5.060636s
Enumerable#select.last
                        194.177k (± 0.6%) i/s -    971.950k in   5.005637s

Comparison:
Enumerable#reverse.detect:  2441979.2 i/s
Enumerable#select.last:   194177.3 i/s - 12.58x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.846k i/100ms
  Enumerable#sort_by     4.851k i/100ms
     Enumerable#sort     2.380k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         49.861k (± 0.6%) i/s -    251.992k in   5.054076s
  Enumerable#sort_by     47.037k (± 0.4%) i/s -    237.699k in   5.053588s
     Enumerable#sort     24.422k (± 0.4%) i/s -    123.760k in   5.067653s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    49861.3 i/s
  Enumerable#sort_by:    47036.6 i/s - 1.06x  (± 0.00) slower
     Enumerable#sort:    24421.9 i/s - 2.04x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.980k i/100ms
Enumerable#sort_by...first
                         9.014k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    179.506k (± 0.4%) i/s -    899.000k in   5.008275s
Enumerable#sort_by...first
                         89.726k (± 0.5%) i/s -    450.700k in   5.023194s

Comparison:
   Enumerable#min_by:   179505.9 i/s
Enumerable#sort_by...first:    89725.9 i/s - 2.00x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   406.934k i/100ms
            Hash#dup   297.286k i/100ms
Calculating -------------------------------------
              Hash[]      3.564M (± 0.8%) i/s -     17.905M in   5.023745s
            Hash#dup      2.884M (± 0.7%) i/s -     14.567M in   5.050875s

Comparison:
              Hash[]:  3564334.3 i/s
            Hash#dup:  2884188.0 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.428M i/100ms
  Hash#fetch, symbol     1.129M i/100ms
     Hash#[], string     1.242M i/100ms
  Hash#fetch, string   787.575k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.302M (± 3.6%) i/s -     71.423M in   5.001906s
  Hash#fetch, symbol     11.299M (± 0.5%) i/s -     57.586M in   5.096550s
     Hash#[], string     12.437M (± 0.5%) i/s -     63.318M in   5.091071s
  Hash#fetch, string      7.879M (± 0.6%) i/s -     40.166M in   5.098136s

Comparison:
     Hash#[], symbol: 14301933.7 i/s
     Hash#[], string: 12437296.9 i/s - 1.15x  (± 0.00) slower
  Hash#fetch, symbol: 11299391.7 i/s - 1.27x  (± 0.00) slower
  Hash#fetch, string:  7878880.2 i/s - 1.82x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   721.700k i/100ms
             Hash#[]     1.020M i/100ms
          Hash#[] ||   935.093k i/100ms
          Hash#[] &&   385.042k i/100ms
          Hash#fetch   593.705k i/100ms
 Hash#fetch fallback   384.904k i/100ms
Calculating -------------------------------------
            Hash#dig      7.413M (± 1.0%) i/s -     37.528M in   5.062881s
             Hash#[]     10.432M (± 0.7%) i/s -     53.019M in   5.082494s
          Hash#[] ||      8.902M (± 2.3%) i/s -     44.884M in   5.044883s
          Hash#[] &&      3.939M (± 3.0%) i/s -     20.022M in   5.087371s
          Hash#fetch      6.124M (± 0.5%) i/s -     30.873M in   5.041209s
 Hash#fetch fallback      3.907M (± 0.9%) i/s -     19.630M in   5.024821s

Comparison:
             Hash#[]: 10432142.3 i/s
          Hash#[] ||:  8902481.3 i/s - 1.17x  (± 0.00) slower
            Hash#dig:  7413136.2 i/s - 1.41x  (± 0.00) slower
          Hash#fetch:  6124195.8 i/s - 1.70x  (± 0.00) slower
          Hash#[] &&:  3939140.7 i/s - 2.65x  (± 0.00) slower
 Hash#fetch fallback:  3906967.8 i/s - 2.67x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.458M i/100ms
  Hash#fetch + block     1.443M i/100ms
    Hash#fetch + arg     1.107M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.487M (± 3.8%) i/s -     72.877M in   5.039278s
  Hash#fetch + block     14.592M (± 0.6%) i/s -     73.612M in   5.044867s
    Hash#fetch + arg     10.964M (± 3.4%) i/s -     55.369M in   5.057885s

Comparison:
  Hash#fetch + block: 14591883.0 i/s
  Hash#fetch + const: 14486582.5 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 10963714.0 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.919k i/100ms
         sort + to_h    11.320k i/100ms
Calculating -------------------------------------
      sort_by + to_h    280.287k (± 0.5%) i/s -      1.424M in   5.080148s
         sort + to_h    112.832k (± 0.6%) i/s -    566.000k in   5.016494s

Comparison:
      sort_by + to_h:   280287.2 i/s
         sort + to_h:   112831.7 i/s - 2.48x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   193.307k i/100ms
       Hash#each_key   204.858k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.927M (± 0.4%) i/s -      9.665M in   5.015930s
       Hash#each_key      1.975M (± 0.3%) i/s -     10.038M in   5.083640s

Comparison:
       Hash#each_key:  1974600.2 i/s
      Hash#keys.each:  1926967.6 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.227k i/100ms
           Hash#key?     1.016M i/100ms
Calculating -------------------------------------
  Hash#keys.include?     12.161k (± 3.8%) i/s -     61.350k in   5.052743s
           Hash#key?     10.064M (± 0.3%) i/s -     50.802M in   5.047972s

Comparison:
           Hash#key?: 10063887.7 i/s
  Hash#keys.include?:    12161.3 i/s - 827.54x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.014k i/100ms
            Hash#[]=     9.949k i/100ms
Calculating -------------------------------------
         Hash#merge!     39.253k (± 3.4%) i/s -    196.686k in   5.017476s
            Hash#[]=     99.565k (± 1.2%) i/s -    507.399k in   5.097019s

Comparison:
            Hash#[]=:    99565.1 i/s
         Hash#merge!:    39253.4 i/s - 2.54x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.814k i/100ms
      Hash#merge({})     4.000k i/100ms
 Hash#dup#merge!({})     2.920k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         48.719k (± 0.4%) i/s -    245.514k in   5.039434s
      Hash#merge({})     39.720k (± 0.4%) i/s -    200.000k in   5.035328s
 Hash#dup#merge!({})     29.013k (± 0.3%) i/s -    146.000k in   5.032258s

Comparison:
{}#merge!(Hash) do end:    48719.3 i/s
      Hash#merge({}):    39720.2 i/s - 1.23x  (± 0.00) slower
 Hash#dup#merge!({}):    29013.1 i/s - 1.68x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   397.421k i/100ms
          Hash#merge   368.355k i/100ms
Calculating -------------------------------------
        Hash#**other      3.981M (± 0.6%) i/s -     20.268M in   5.091153s
          Hash#merge      3.697M (± 0.6%) i/s -     18.786M in   5.081075s

Comparison:
        Hash#**other:  3981271.1 i/s
          Hash#merge:  3697389.7 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.627k i/100ms
         Hash#merge!     4.059k i/100ms
Calculating -------------------------------------
          Hash#merge     16.150k (± 3.3%) i/s -     81.350k in   5.044051s
         Hash#merge!     39.836k (± 3.1%) i/s -    202.950k in   5.100826s

Comparison:
         Hash#merge!:    39836.0 i/s
          Hash#merge:    16149.7 i/s - 2.47x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      427.053k i/100ms
Array#each             232.424k i/100ms
Array#each_w/_object   175.678k i/100ms
Hash#select-include     73.816k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.243M (± 0.5%) i/s -     21.353M in   5.032351s
Array#each                2.318M (± 0.8%) i/s -     11.621M in   5.013106s
Array#each_w/_object      1.769M (± 0.4%) i/s -      8.960M in   5.065895s
Hash#select-include     738.014k (± 0.6%) i/s -      3.691M in   5.001160s

Comparison:
Hash#native-slice   :  4243174.1 i/s
Array#each          :  2318311.3 i/s - 1.83x  (± 0.00) slower
Array#each_w/_object:  1768639.5 i/s - 2.40x  (± 0.00) slower
Hash#select-include :   738014.3 i/s - 5.75x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.109k i/100ms
         Hash#value?   855.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     11.098k (± 3.0%) i/s -     55.450k in   5.001132s
         Hash#value?      8.566k (± 0.4%) i/s -     43.605k in   5.090357s

Comparison:
Hash#values.include?:    11098.1 i/s
         Hash#value?:     8566.3 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                call   666.767k i/100ms
                send   526.874k i/100ms
      method_missing   390.278k i/100ms
Calculating -------------------------------------
                call      6.701M (± 0.2%) i/s -     34.005M in   5.074943s
                send      5.248M (± 1.6%) i/s -     26.344M in   5.021000s
      method_missing      3.903M (± 0.5%) i/s -     19.904M in   5.099980s

Comparison:
                call:  6700612.1 i/s
                send:  5248242.4 i/s - 1.28x  (± 0.00) slower
      method_missing:  3902913.5 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
               Block     9.164k i/100ms
      Symbol#to_proc    10.411k i/100ms
Calculating -------------------------------------
               Block     91.594k (± 0.3%) i/s -    458.200k in   5.002562s
      Symbol#to_proc    103.790k (± 0.6%) i/s -    520.550k in   5.015604s

Comparison:
      Symbol#to_proc:   103789.8 i/s
               Block:    91594.0 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          block.call   945.341k i/100ms
       block + yield   992.912k i/100ms
        unused block     1.270M i/100ms
               yield     1.189M i/100ms
Calculating -------------------------------------
          block.call      9.459M (± 0.2%) i/s -     48.212M in   5.096976s
       block + yield      9.877M (± 3.1%) i/s -     49.646M in   5.032387s
        unused block     12.730M (± 0.5%) i/s -     64.791M in   5.089766s
               yield     11.876M (± 0.2%) i/s -     59.461M in   5.006784s

Comparison:
        unused block: 12729990.5 i/s
               yield: 11876182.0 i/s - 1.07x  (± 0.00) slower
       block + yield:  9877488.1 i/s - 1.29x  (± 0.00) slower
          block.call:  9459042.5 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   323.490k i/100ms
      range#include?    12.839k i/100ms
       range#member?    12.681k i/100ms
       plain compare   529.458k i/100ms
Calculating -------------------------------------
        range#cover?      3.291M (± 0.5%) i/s -     16.498M in   5.013028s
      range#include?    127.980k (± 0.8%) i/s -    641.950k in   5.016341s
       range#member?    126.643k (± 0.5%) i/s -    634.050k in   5.006751s
       plain compare      5.253M (± 0.6%) i/s -     26.473M in   5.039598s

Comparison:
       plain compare:  5253179.9 i/s
        range#cover?:  3291096.7 i/s - 1.60x  (± 0.00) slower
      range#include?:   127980.0 i/s - 41.05x  (± 0.00) slower
       range#member?:   126642.8 i/s - 41.48x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       String#match?   915.266k i/100ms
           String#=~   646.798k i/100ms
          Regexp#===   568.003k i/100ms
        String#match   473.633k i/100ms
Calculating -------------------------------------
       String#match?      9.179M (± 0.5%) i/s -     46.679M in   5.085341s
           String#=~      6.498M (± 1.0%) i/s -     32.987M in   5.077102s
          Regexp#===      5.709M (± 0.2%) i/s -     28.968M in   5.074197s
        String#match      4.732M (± 0.2%) i/s -     23.682M in   5.004145s

Comparison:
       String#match?:  9179290.2 i/s
           String#=~:  6497845.6 i/s - 1.41x  (± 0.00) slower
          Regexp#===:  5708929.9 i/s - 1.61x  (± 0.00) slower
        String#match:  4732431.1 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   650.348k i/100ms
      String#casecmp   782.952k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.547M (± 0.5%) i/s -     33.168M in   5.066618s
      String#casecmp      7.874M (± 0.2%) i/s -     39.931M in   5.071287s

Comparison:
      String#casecmp:  7873885.9 i/s
String#downcase + ==:  6546511.4 i/s - 1.20x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            String#+   600.491k i/100ms
       String#concat   627.912k i/100ms
       String#append   677.522k i/100ms
         "foo" "bar"     1.163M i/100ms
  "#{'foo'}#{'bar'}"     1.188M i/100ms
Calculating -------------------------------------
            String#+      6.044M (± 0.5%) i/s -     30.625M in   5.067073s
       String#concat      6.278M (± 0.5%) i/s -     32.024M in   5.100852s
       String#append      6.778M (± 0.3%) i/s -     34.554M in   5.097635s
         "foo" "bar"     11.629M (± 0.2%) i/s -     59.299M in   5.099178s
  "#{'foo'}#{'bar'}"     11.860M (± 0.2%) i/s -     59.384M in   5.006964s

Comparison:
  "#{'foo'}#{'bar'}": 11860305.4 i/s
         "foo" "bar": 11629100.4 i/s - 1.02x  (± 0.00) slower
       String#append:  6778439.3 i/s - 1.75x  (± 0.00) slower
       String#concat:  6278202.2 i/s - 1.89x  (± 0.00) slower
            String#+:  6044082.6 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#+@     1.009M i/100ms
          String#dup   579.414k i/100ms
Calculating -------------------------------------
           String#+@     10.074M (± 0.4%) i/s -     50.463M in   5.009254s
          String#dup      5.779M (± 0.3%) i/s -     28.971M in   5.012787s

Comparison:
           String#+@: 10074100.3 i/s
          String#dup:  5779427.7 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   188.149k i/100ms
       String#match?   427.963k i/100ms
    String#end_with?   625.808k i/100ms
Calculating -------------------------------------
           String#=~      1.898M (± 0.5%) i/s -      9.596M in   5.055076s
       String#match?      4.292M (± 0.4%) i/s -     21.826M in   5.085532s
    String#end_with?      6.252M (± 0.6%) i/s -     31.290M in   5.004961s

Comparison:
    String#end_with?:  6252074.5 i/s
       String#match?:  4291891.1 i/s - 1.46x  (± 0.00) slower
           String#=~:  1898261.4 i/s - 3.29x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   114.200k i/100ms
          String#sub   136.636k i/100ms
String#dup["string"]=
                       183.860k i/100ms
Calculating -------------------------------------
         String#gsub      1.142M (± 0.5%) i/s -      5.710M in   5.000711s
          String#sub      1.387M (± 0.2%) i/s -      6.968M in   5.023964s
String#dup["string"]=
                          1.809M (± 0.2%) i/s -      9.193M in   5.081096s

Comparison:
String#dup["string"]=:  1809265.6 i/s
          String#sub:  1387046.3 i/s - 1.30x  (± 0.00) slower
         String#gsub:  1141871.6 i/s - 1.58x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   104.310k i/100ms
           String#tr   340.390k i/100ms
Calculating -------------------------------------
         String#gsub      1.049M (± 0.3%) i/s -      5.320M in   5.072437s
           String#tr      3.407M (± 0.4%) i/s -     17.360M in   5.095023s

Comparison:
           String#tr:  3407294.4 i/s
         String#gsub:  1048779.7 i/s - 3.25x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.171M i/100ms
         With Freeze     1.685M i/100ms
Calculating -------------------------------------
      Without Freeze     11.740M (± 0.3%) i/s -     59.746M in   5.089371s
         With Freeze     16.829M (± 0.2%) i/s -     84.226M in   5.004696s

Comparison:
         With Freeze: 16829443.0 i/s
      Without Freeze: 11739546.1 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.461k i/100ms
      String#squeeze   157.972k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     34.492k (± 0.5%) i/s -    173.050k in   5.017290s
      String#squeeze      1.580M (± 0.7%) i/s -      8.057M in   5.098882s

Comparison:
      String#squeeze:  1580149.0 i/s
 String#gsub/regex+/:    34491.7 i/s - 45.81x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   283.528k i/100ms
       String#match?   759.366k i/100ms
  String#start_with?   869.339k i/100ms
Calculating -------------------------------------
           String#=~      2.840M (± 0.3%) i/s -     14.460M in   5.092096s
       String#match?      7.579M (± 0.4%) i/s -     37.968M in   5.009937s
  String#start_with?      8.687M (± 0.4%) i/s -     43.467M in   5.003765s

Comparison:
  String#start_with?:  8686964.5 i/s
       String#match?:  7578711.3 i/s - 1.15x  (± 0.00) slower
           String#=~:  2839703.5 i/s - 3.06x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   192.062k i/100ms
    String#[0, n] ==    82.986k i/100ms
   String#[RANGE] ==    77.192k i/100ms
   String#[0...n] ==    48.147k i/100ms
Calculating -------------------------------------
  String#start_with?      1.973M (± 0.4%) i/s -      9.987M in   5.061287s
    String#[0, n] ==    827.404k (± 1.4%) i/s -      4.149M in   5.015771s
   String#[RANGE] ==    750.670k (± 0.9%) i/s -      3.782M in   5.039145s
   String#[0...n] ==    473.571k (± 0.8%) i/s -      2.407M in   5.083731s

Comparison:
  String#start_with?:  1973285.9 i/s
    String#[0, n] ==:   827403.8 i/s - 2.38x  (± 0.00) slower
   String#[RANGE] ==:   750669.8 i/s - 2.63x  (± 0.00) slower
   String#[0...n] ==:   473571.3 i/s - 4.17x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   185.825k i/100ms
 String#sub!'string'   126.923k i/100ms
String#gsub!'string'    78.151k i/100ms
  String#[/regexp/]=   151.772k i/100ms
 String#sub!/regexp/   114.686k i/100ms
String#gsub!/regexp/    61.327k i/100ms
Calculating -------------------------------------
  String#['string']=      1.812M (± 0.6%) i/s -      9.105M in   5.023941s
 String#sub!'string'      1.271M (± 0.5%) i/s -      6.473M in   5.094879s
String#gsub!'string'    770.783k (± 0.3%) i/s -      3.908M in   5.069624s
  String#[/regexp/]=      1.514M (± 0.5%) i/s -      7.589M in   5.012895s
 String#sub!/regexp/      1.148M (± 0.6%) i/s -      5.849M in   5.093818s
String#gsub!/regexp/    607.195k (± 3.1%) i/s -      3.066M in   5.055990s

Comparison:
  String#['string']=:  1812468.0 i/s
  String#[/regexp/]=:  1513855.9 i/s - 1.20x  (± 0.00) slower
 String#sub!'string':  1270531.6 i/s - 1.43x  (± 0.00) slower
 String#sub!/regexp/:  1148297.3 i/s - 1.58x  (± 0.00) slower
String#gsub!'string':   770783.4 i/s - 2.35x  (± 0.00) slower
String#gsub!/regexp/:   607194.7 i/s - 2.98x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          String#sub   139.746k i/100ms
        String#chomp   563.233k i/100ms
String#delete_suffix   603.309k i/100ms
Calculating -------------------------------------
          String#sub      1.388M (± 0.4%) i/s -      6.987M in   5.034144s
        String#chomp      5.635M (± 0.5%) i/s -     28.725M in   5.097666s
String#delete_suffix      6.023M (± 0.2%) i/s -     30.165M in   5.008019s

Comparison:
String#delete_suffix:  6023462.6 i/s
        String#chomp:  5635046.9 i/s - 1.07x  (± 0.00) slower
          String#sub:  1388008.1 i/s - 4.34x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   616.133k i/100ms
          String#sub   147.035k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.173M (± 0.2%) i/s -     31.423M in   5.090456s
          String#sub      1.484M (± 0.4%) i/s -      7.499M in   5.052922s

Comparison:
String#delete_prefix:  6172905.9 i/s
          String#sub:  1484070.8 i/s - 4.16x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   624.216k i/100ms
    String#unpack[0]   475.622k i/100ms
Calculating -------------------------------------
      String#unpack1      6.275M (± 0.6%) i/s -     31.835M in   5.073453s
    String#unpack[0]      4.751M (± 0.2%) i/s -     23.781M in   5.005111s

Comparison:
      String#unpack1:  6275032.3 i/s
    String#unpack[0]:  4751376.6 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.964k i/100ms
          Time.parse     9.519k i/100ms
Calculating -------------------------------------
        Time.iso8601    277.423k (± 3.0%) i/s -      1.398M in   5.045580s
          Time.parse     94.939k (± 0.6%) i/s -    475.950k in   5.013429s

Comparison:
        Time.iso8601:   277422.9 i/s
          Time.parse:    94939.1 i/s - 2.92x  (± 0.00) slower

