$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       776.032k i/100ms
Function with splat arguments
                        25.477k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.766M (± 0.6%) i/s -     39.578M in   5.096666s
Function with splat arguments
                        229.613k (± 5.9%) i/s -      1.146M in   5.017367s

Comparison:
Function with single Array argument:  7765708.1 i/s
Function with splat arguments:   229613.4 i/s - 33.82x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.019M i/100ms
Sequential Assignment
                       983.324k i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.221M (± 0.3%) i/s -     51.957M in   5.083593s
Sequential Assignment
                          9.815M (± 0.2%) i/s -     49.166M in   5.009163s

Comparison:
 Parallel Assignment: 10220677.0 i/s
Sequential Assignment:  9815275.3 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   478.128k i/100ms
       attr_accessor   556.248k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.807M (± 0.2%) i/s -     24.385M in   5.072933s
       attr_accessor      5.537M (± 1.9%) i/s -     27.812M in   5.024919s

Comparison:
       attr_accessor:  5537289.8 i/s
   getter_and_setter:  4806804.1 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    89.536k i/100ms
         respond_to?   740.739k i/100ms
Calculating -------------------------------------
      begin...rescue    895.474k (± 0.8%) i/s -      4.566M in   5.099711s
         respond_to?      7.420M (± 0.2%) i/s -     37.778M in   5.091135s

Comparison:
         respond_to?:  7420316.9 i/s
      begin...rescue:   895473.5 i/s - 8.29x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              normal   320.488k i/100ms
             &method   123.596k i/100ms
Calculating -------------------------------------
              normal      3.192M (± 0.9%) i/s -     16.024M in   5.020024s
             &method      1.241M (± 2.3%) i/s -      6.303M in   5.081348s

Comparison:
              normal:  3192370.0 i/s
             &method:  1241255.4 i/s - 2.57x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       253.000  i/100ms
       define_method   259.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.342k (±21.4%) i/s -     10.373k in   5.067102s
       define_method      3.269k (±21.4%) i/s -     14.763k in   5.072013s

Comparison:
       define_method:     3268.6 i/s
module_eval with string:     2341.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Float#round   261.481k i/100ms
       Kernel#format   204.115k i/100ms
            String#%   172.916k i/100ms
Calculating -------------------------------------
         Float#round      2.634M (± 0.5%) i/s -     13.336M in   5.062321s
       Kernel#format      2.028M (± 0.7%) i/s -     10.206M in   5.032101s
            String#%      1.734M (± 0.6%) i/s -      8.819M in   5.085092s

Comparison:
         Float#round:  2634329.2 i/s
       Kernel#format:  2028238.1 i/s - 1.30x  (± 0.00) slower
            String#%:  1734288.3 i/s - 1.52x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash   921.907k i/100ms
          OpenStruct   466.712k i/100ms
Calculating -------------------------------------
                Hash      9.230M (± 0.4%) i/s -     47.017M in   5.094093s
          OpenStruct      4.572M (± 0.5%) i/s -     22.869M in   5.002318s

Comparison:
                Hash:  9229902.0 i/s
          OpenStruct:  4571788.5 i/s - 2.02x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.056M i/100ms
          OpenStruct    11.683k i/100ms
Calculating -------------------------------------
                Hash     11.274M (± 0.3%) i/s -     57.007M in   5.056795s
          OpenStruct    117.942k (± 2.6%) i/s -    595.833k in   5.055487s

Comparison:
                Hash: 11273503.3 i/s
          OpenStruct:   117942.1 i/s - 95.59x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   572.739k i/100ms
  ancestors.include?   120.845k i/100ms
Calculating -------------------------------------
  less than or equal      5.815M (± 1.2%) i/s -     29.210M in   5.024120s
  ancestors.include?      1.201M (± 0.8%) i/s -      6.042M in   5.032177s

Comparison:
  less than or equal:  5814704.5 i/s
  ancestors.include?:  1200805.7 i/s - 4.84x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.730  (± 0.0%) i/s -      4.000  in   5.492839s
         Kernel loop      0.214  (± 0.0%) i/s -      2.000  in   9.332008s

Comparison:
          While Loop:        0.7 i/s
         Kernel loop:        0.2 i/s - 3.41x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.568M i/100ms
         Array#first     1.264M i/100ms
Calculating -------------------------------------
           Array#[0]     15.691M (± 0.3%) i/s -     79.985M in   5.097474s
         Array#first     12.672M (± 0.3%) i/s -     64.447M in   5.085645s

Comparison:
           Array#[0]: 15691136.7 i/s
         Array#first: 12672429.9 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.531M i/100ms
          Array#last     1.329M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.319M (± 0.3%) i/s -     78.100M in   5.098346s
          Array#last     13.294M (± 0.3%) i/s -     67.783M in   5.099004s

Comparison:
          Array#[-1]: 15318810.4 i/s
          Array#last: 13293543.0 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    98.319k i/100ms
Calculating -------------------------------------
                find      0.268  (± 0.0%) i/s -      2.000  in   7.465615s
             bsearch    983.331k (± 1.1%) i/s -      4.916M in   4.999977s

Comparison:
             bsearch:   983331.0 i/s
                find:        0.3 i/s - 3670584.70x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    18.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    185.828  (± 2.2%) i/s -    936.000  in   5.039622s
        Array#insert      1.446  (± 0.0%) i/s -      8.000  in   5.535043s

Comparison:
       Array#unshift:      185.8 i/s
        Array#insert:        1.4 i/s - 128.55x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.063M i/100ms
          Array#size     2.069M i/100ms
         Array#count     1.625M i/100ms
Calculating -------------------------------------
        Array#length     20.546M (± 0.4%) i/s -    103.163M in   5.021141s
          Array#size     20.670M (± 0.4%) i/s -    103.460M in   5.005453s
         Array#count     16.367M (± 0.1%) i/s -     82.890M in   5.064544s

Comparison:
          Array#size: 20669757.0 i/s
        Array#length: 20545956.0 i/s - same-ish: difference falls within error
         Array#count: 16366741.2 i/s - 1.26x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    46.105k i/100ms
        Array#sample     1.045M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    460.720k (± 0.6%) i/s -      2.305M in   5.003739s
        Array#sample     10.411M (± 0.5%) i/s -     52.236M in   5.017370s

Comparison:
        Array#sample: 10411275.6 i/s
 Array#shuffle.first:   460720.2 i/s - 22.60x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    65.146k i/100ms
          Date.parse    32.926k i/100ms
Calculating -------------------------------------
        Date.iso8601    657.107k (± 0.6%) i/s -      3.322M in   5.056337s
          Date.parse    329.406k (± 0.3%) i/s -      1.679M in   5.097777s

Comparison:
        Date.iso8601:   657107.3 i/s
          Date.parse:   329405.8 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    19.045k i/100ms
           Array#map    26.230k i/100ms
Calculating -------------------------------------
   Array#each + push    190.987k (± 0.8%) i/s -    971.295k in   5.085975s
           Array#map    259.610k (± 5.6%) i/s -      1.312M in   5.075824s

Comparison:
           Array#map:   259610.4 i/s
   Array#each + push:   190986.8 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            For loop    29.832k i/100ms
               #each    32.683k i/100ms
Calculating -------------------------------------
            For loop    298.414k (± 0.5%) i/s -      1.521M in   5.098551s
               #each    326.940k (± 0.4%) i/s -      1.667M in   5.098369s

Comparison:
               #each:   326940.0 i/s
            For loop:   298413.7 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.620k i/100ms
     each_with_index    19.424k i/100ms
Calculating -------------------------------------
          While Loop    281.495k (± 1.4%) i/s -      1.409M in   5.005058s
     each_with_index    194.072k (± 0.3%) i/s -    971.200k in   5.004381s

Comparison:
          While Loop:   281495.4 i/s
     each_with_index:   194072.3 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    93.378k i/100ms
      inject to_proc     2.215k i/100ms
        inject block     2.152k i/100ms
Calculating -------------------------------------
       inject symbol      1.299M (± 1.3%) i/s -      6.536M in   5.034008s
      inject to_proc     22.056k (± 0.6%) i/s -    110.750k in   5.021429s
        inject block     21.647k (± 0.5%) i/s -    109.752k in   5.070083s

Comparison:
       inject symbol:  1298671.0 i/s
      inject to_proc:    22056.2 i/s - 58.88x  (± 0.00) slower
        inject block:    21647.5 i/s - 59.99x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.913k i/100ms
   Array#map.flatten     4.032k i/100ms
      Array#flat_map     9.540k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     69.000k (± 0.2%) i/s -    345.650k in   5.009429s
   Array#map.flatten     40.113k (± 0.5%) i/s -    201.600k in   5.025970s
      Array#flat_map     95.197k (± 0.3%) i/s -    477.000k in   5.010694s

Comparison:
      Array#flat_map:    95197.0 i/s
Array#map.flatten(1):    69000.2 i/s - 1.38x  (± 0.00) slower
   Array#map.flatten:    40112.9 i/s - 2.37x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    31.683k i/100ms
  Array#reverse_each    32.457k i/100ms
Calculating -------------------------------------
  Array#reverse.each    316.822k (± 0.5%) i/s -      1.584M in   5.000278s
  Array#reverse_each    324.556k (± 0.7%) i/s -      1.655M in   5.100470s

Comparison:
  Array#reverse_each:   324555.6 i/s
  Array#reverse.each:   316822.0 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.460k i/100ms
   Enumerable#detect    83.283k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        205.619k (± 0.5%) i/s -      4.112M in  20.000989s
   Enumerable#detect    831.388k (± 0.6%) i/s -     16.657M in  20.035478s

Comparison:
   Enumerable#detect:   831387.9 i/s
Enumerable#select.first:   205619.1 i/s - 4.04x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       244.131k i/100ms
Enumerable#select.last
                        19.186k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.398M (± 0.8%) i/s -     12.207M in   5.090295s
Enumerable#select.last
                        190.939k (± 0.9%) i/s -    959.300k in   5.024538s

Comparison:
Enumerable#reverse.detect:  2398153.2 i/s
Enumerable#select.last:   190939.1 i/s - 12.56x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.943k i/100ms
  Enumerable#sort_by     4.807k i/100ms
     Enumerable#sort     2.423k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         50.076k (± 1.2%) i/s -    252.093k in   5.034932s
  Enumerable#sort_by     48.405k (± 1.0%) i/s -    245.157k in   5.065221s
     Enumerable#sort     24.445k (± 0.5%) i/s -    123.573k in   5.055196s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    50076.0 i/s
  Enumerable#sort_by:    48405.3 i/s - 1.03x  (± 0.00) slower
     Enumerable#sort:    24445.4 i/s - 2.05x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.743k i/100ms
Enumerable#sort_by...first
                         8.550k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    176.953k (± 0.5%) i/s -    887.150k in   5.013605s
Enumerable#sort_by...first
                         86.441k (± 0.8%) i/s -    436.050k in   5.044824s

Comparison:
   Enumerable#min_by:   176953.0 i/s
Enumerable#sort_by...first:    86441.0 i/s - 2.05x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   415.948k i/100ms
            Hash#dup   302.395k i/100ms
Calculating -------------------------------------
              Hash[]      4.150M (± 1.5%) i/s -     20.797M in   5.012684s
            Hash#dup      3.254M (± 1.0%) i/s -     16.329M in   5.018770s

Comparison:
              Hash[]:  4149821.3 i/s
            Hash#dup:  3253994.9 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.432M i/100ms
  Hash#fetch, symbol     1.190M i/100ms
     Hash#[], string     1.229M i/100ms
  Hash#fetch, string   794.137k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.321M (± 0.4%) i/s -     73.033M in   5.099744s
  Hash#fetch, symbol     11.779M (± 0.5%) i/s -     59.501M in   5.051518s
     Hash#[], string     12.361M (± 0.2%) i/s -     62.685M in   5.071059s
  Hash#fetch, string      7.981M (± 0.4%) i/s -     40.501M in   5.074855s

Comparison:
     Hash#[], symbol: 14321104.4 i/s
     Hash#[], string: 12361426.9 i/s - 1.16x  (± 0.00) slower
  Hash#fetch, symbol: 11779062.0 i/s - 1.22x  (± 0.00) slower
  Hash#fetch, string:  7980824.3 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   836.663k i/100ms
             Hash#[]     1.042M i/100ms
          Hash#[] ||   919.319k i/100ms
          Hash#[] &&   400.865k i/100ms
          Hash#fetch   619.419k i/100ms
 Hash#fetch fallback   391.433k i/100ms
Calculating -------------------------------------
            Hash#dig      8.372M (± 1.0%) i/s -     42.670M in   5.097174s
             Hash#[]     10.049M (± 0.4%) i/s -     51.066M in   5.081649s
          Hash#[] ||      9.272M (± 1.9%) i/s -     46.885M in   5.058567s
          Hash#[] &&      3.996M (± 2.7%) i/s -     20.043M in   5.019923s
          Hash#fetch      6.068M (± 2.1%) i/s -     30.352M in   5.003870s
 Hash#fetch fallback      3.930M (± 0.6%) i/s -     19.963M in   5.079344s

Comparison:
             Hash#[]: 10049210.7 i/s
          Hash#[] ||:  9271887.9 i/s - 1.08x  (± 0.00) slower
            Hash#dig:  8372116.0 i/s - 1.20x  (± 0.00) slower
          Hash#fetch:  6068455.8 i/s - 1.66x  (± 0.00) slower
          Hash#[] &&:  3995734.0 i/s - 2.51x  (± 0.00) slower
 Hash#fetch fallback:  3930415.3 i/s - 2.56x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.455M i/100ms
  Hash#fetch + block     1.463M i/100ms
    Hash#fetch + arg     1.097M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.491M (± 0.7%) i/s -     72.738M in   5.019735s
  Hash#fetch + block     14.437M (± 0.5%) i/s -     73.142M in   5.066507s
    Hash#fetch + arg     11.021M (± 0.9%) i/s -     55.950M in   5.076948s

Comparison:
  Hash#fetch + const: 14491084.3 i/s
  Hash#fetch + block: 14436738.3 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 11021316.8 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    28.008k i/100ms
         sort + to_h    11.977k i/100ms
Calculating -------------------------------------
      sort_by + to_h    281.373k (± 0.6%) i/s -      1.428M in   5.076749s
         sort + to_h    119.321k (± 1.6%) i/s -    598.850k in   5.020158s

Comparison:
      sort_by + to_h:   281373.2 i/s
         sort + to_h:   119321.2 i/s - 2.36x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   194.133k i/100ms
       Hash#each_key   207.395k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.973M (± 0.7%) i/s -      9.901M in   5.017260s
       Hash#each_key      2.068M (± 0.8%) i/s -     10.370M in   5.015872s

Comparison:
       Hash#each_key:  2067534.0 i/s
      Hash#keys.each:  1973437.3 i/s - 1.05x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.240k i/100ms
           Hash#key?     1.001M i/100ms
Calculating -------------------------------------
  Hash#keys.include?     12.289k (± 4.7%) i/s -     62.000k in   5.056998s
           Hash#key?     10.040M (± 0.5%) i/s -     51.041M in   5.084055s

Comparison:
           Hash#key?: 10039681.0 i/s
  Hash#keys.include?:    12289.5 i/s - 816.93x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.022k i/100ms
            Hash#[]=    10.391k i/100ms
Calculating -------------------------------------
         Hash#merge!     39.906k (± 1.3%) i/s -    201.100k in   5.040299s
            Hash#[]=    103.977k (± 0.9%) i/s -    529.941k in   5.097108s

Comparison:
            Hash#[]=:   103976.6 i/s
         Hash#merge!:    39905.7 i/s - 2.61x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.826k i/100ms
      Hash#merge({})     3.999k i/100ms
 Hash#dup#merge!({})     2.916k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         47.847k (± 0.7%) i/s -    241.300k in   5.043355s
      Hash#merge({})     39.890k (± 0.4%) i/s -    199.950k in   5.012583s
 Hash#dup#merge!({})     29.132k (± 0.2%) i/s -    145.800k in   5.004853s

Comparison:
{}#merge!(Hash) do end:    47847.3 i/s
      Hash#merge({}):    39890.1 i/s - 1.20x  (± 0.00) slower
 Hash#dup#merge!({}):    29131.9 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   390.060k i/100ms
          Hash#merge   364.098k i/100ms
Calculating -------------------------------------
        Hash#**other      3.913M (± 0.5%) i/s -     19.893M in   5.084433s
          Hash#merge      3.666M (± 0.6%) i/s -     18.569M in   5.065261s

Comparison:
        Hash#**other:  3912638.4 i/s
          Hash#merge:  3666106.1 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.622k i/100ms
         Hash#merge!     4.014k i/100ms
Calculating -------------------------------------
          Hash#merge     16.481k (± 1.7%) i/s -     82.722k in   5.020659s
         Hash#merge!     40.271k (± 0.7%) i/s -    204.714k in   5.083670s

Comparison:
         Hash#merge!:    40270.8 i/s
          Hash#merge:    16480.9 i/s - 2.44x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      417.743k i/100ms
Array#each             231.421k i/100ms
Array#each_w/_object   175.356k i/100ms
Hash#select-include     71.464k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.178M (± 0.7%) i/s -     20.887M in   5.000148s
Array#each                2.293M (± 0.5%) i/s -     11.571M in   5.046062s
Array#each_w/_object      1.757M (± 0.5%) i/s -      8.943M in   5.090366s
Hash#select-include     720.149k (± 1.2%) i/s -      3.645M in   5.061758s

Comparison:
Hash#native-slice   :  4177503.4 i/s
Array#each          :  2293139.6 i/s - 1.82x  (± 0.00) slower
Array#each_w/_object:  1756920.6 i/s - 2.38x  (± 0.00) slower
Hash#select-include :   720149.3 i/s - 5.80x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.108k i/100ms
         Hash#value?   838.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     10.711k (± 3.3%) i/s -     54.292k in   5.075386s
         Hash#value?      8.386k (± 0.6%) i/s -     42.738k in   5.096613s

Comparison:
Hash#values.include?:    10710.6 i/s
         Hash#value?:     8385.9 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                call   666.883k i/100ms
                send   526.014k i/100ms
      method_missing   390.635k i/100ms
Calculating -------------------------------------
                call      6.718M (± 0.1%) i/s -     34.011M in   5.062430s
                send      5.230M (± 0.4%) i/s -     26.301M in   5.028484s
      method_missing      3.878M (± 0.3%) i/s -     19.532M in   5.036351s

Comparison:
                call:  6718331.6 i/s
                send:  5230419.1 i/s - 1.28x  (± 0.00) slower
      method_missing:  3878187.0 i/s - 1.73x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
               Block     9.155k i/100ms
      Symbol#to_proc    10.365k i/100ms
Calculating -------------------------------------
               Block     92.042k (± 0.2%) i/s -    466.905k in   5.072771s
      Symbol#to_proc    103.692k (± 0.3%) i/s -    528.615k in   5.097972s

Comparison:
      Symbol#to_proc:   103692.3 i/s
               Block:    92041.9 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          block.call   941.520k i/100ms
       block + yield   984.051k i/100ms
        unused block     1.269M i/100ms
               yield     1.143M i/100ms
Calculating -------------------------------------
          block.call      9.419M (± 0.3%) i/s -     48.018M in   5.097851s
       block + yield      9.871M (± 0.1%) i/s -     50.187M in   5.084222s
        unused block     12.721M (± 0.3%) i/s -     64.736M in   5.088827s
               yield     11.394M (± 0.2%) i/s -     57.135M in   5.014584s

Comparison:
        unused block: 12721413.1 i/s
               yield: 11393745.9 i/s - 1.12x  (± 0.00) slower
       block + yield:  9871061.5 i/s - 1.29x  (± 0.00) slower
          block.call:  9419268.2 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   331.513k i/100ms
      range#include?    12.690k i/100ms
       range#member?    12.646k i/100ms
       plain compare   524.226k i/100ms
Calculating -------------------------------------
        range#cover?      3.264M (± 1.4%) i/s -     16.576M in   5.079451s
      range#include?    129.555k (± 0.8%) i/s -    659.880k in   5.093796s
       range#member?    128.421k (± 0.4%) i/s -    644.946k in   5.022208s
       plain compare      5.211M (± 0.3%) i/s -     26.211M in   5.030031s

Comparison:
       plain compare:  5210995.0 i/s
        range#cover?:  3263913.8 i/s - 1.60x  (± 0.00) slower
      range#include?:   129554.9 i/s - 40.22x  (± 0.00) slower
       range#member?:   128421.0 i/s - 40.58x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       String#match?   919.695k i/100ms
           String#=~   647.517k i/100ms
          Regexp#===   570.389k i/100ms
        String#match   465.170k i/100ms
Calculating -------------------------------------
       String#match?      9.144M (± 0.5%) i/s -     45.985M in   5.029031s
           String#=~      6.475M (± 0.6%) i/s -     32.376M in   5.000594s
          Regexp#===      5.695M (± 0.2%) i/s -     28.519M in   5.008003s
        String#match      4.721M (± 0.5%) i/s -     23.724M in   5.025332s

Comparison:
       String#match?:  9144111.6 i/s
           String#=~:  6474675.6 i/s - 1.41x  (± 0.00) slower
          Regexp#===:  5694796.6 i/s - 1.61x  (± 0.00) slower
        String#match:  4720923.1 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   650.815k i/100ms
      String#casecmp   797.223k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.483M (± 0.5%) i/s -     32.541M in   5.019683s
      String#casecmp      7.928M (± 1.1%) i/s -     39.861M in   5.028390s

Comparison:
      String#casecmp:  7928184.6 i/s
String#downcase + ==:  6482764.4 i/s - 1.22x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            String#+   591.889k i/100ms
       String#concat   608.239k i/100ms
       String#append   669.262k i/100ms
         "foo" "bar"     1.175M i/100ms
  "#{'foo'}#{'bar'}"     1.178M i/100ms
Calculating -------------------------------------
            String#+      5.952M (± 0.6%) i/s -     30.186M in   5.071870s
       String#concat      6.092M (± 0.4%) i/s -     31.020M in   5.092175s
       String#append      6.672M (± 0.4%) i/s -     33.463M in   5.015661s
         "foo" "bar"     11.737M (± 0.4%) i/s -     58.747M in   5.005550s
  "#{'foo'}#{'bar'}"     11.730M (± 0.4%) i/s -     58.898M in   5.021417s

Comparison:
         "foo" "bar": 11736539.7 i/s
  "#{'foo'}#{'bar'}": 11729562.4 i/s - same-ish: difference falls within error
       String#append:  6671821.1 i/s - 1.76x  (± 0.00) slower
       String#concat:  6091849.9 i/s - 1.93x  (± 0.00) slower
            String#+:  5951916.8 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#+@   993.092k i/100ms
          String#dup   577.809k i/100ms
Calculating -------------------------------------
           String#+@      9.936M (± 0.2%) i/s -     50.648M in   5.097658s
          String#dup      5.738M (± 0.2%) i/s -     28.890M in   5.035249s

Comparison:
           String#+@:  9935507.4 i/s
          String#dup:  5737665.1 i/s - 1.73x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   188.618k i/100ms
       String#match?   430.987k i/100ms
    String#end_with?   627.117k i/100ms
Calculating -------------------------------------
           String#=~      1.891M (± 0.5%) i/s -      9.620M in   5.086159s
       String#match?      4.319M (± 0.3%) i/s -     21.980M in   5.089392s
    String#end_with?      6.298M (± 0.2%) i/s -     31.983M in   5.078420s

Comparison:
    String#end_with?:  6297846.5 i/s
       String#match?:  4318894.7 i/s - 1.46x  (± 0.00) slower
           String#=~:  1891370.2 i/s - 3.33x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   115.378k i/100ms
          String#sub   141.817k i/100ms
String#dup["string"]=
                       182.845k i/100ms
Calculating -------------------------------------
         String#gsub      1.146M (± 1.2%) i/s -      5.769M in   5.032816s
          String#sub      1.386M (± 0.5%) i/s -      6.949M in   5.014605s
String#dup["string"]=
                          1.830M (± 0.5%) i/s -      9.325M in   5.094744s

Comparison:
String#dup["string"]=:  1830385.0 i/s
          String#sub:  1385788.7 i/s - 1.32x  (± 0.00) slower
         String#gsub:  1146440.4 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   105.230k i/100ms
           String#tr   351.280k i/100ms
Calculating -------------------------------------
         String#gsub      1.071M (± 0.5%) i/s -      5.367M in   5.013354s
           String#tr      3.508M (± 0.2%) i/s -     17.564M in   5.006770s

Comparison:
           String#tr:  3508064.2 i/s
         String#gsub:  1070513.6 i/s - 3.28x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.167M i/100ms
         With Freeze     1.639M i/100ms
Calculating -------------------------------------
      Without Freeze     11.687M (± 0.4%) i/s -     59.493M in   5.090379s
         With Freeze     16.429M (± 0.2%) i/s -     83.605M in   5.088894s

Comparison:
         With Freeze: 16428946.1 i/s
      Without Freeze: 11687432.8 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.441k i/100ms
      String#squeeze   155.757k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     34.531k (± 0.6%) i/s -    175.491k in   5.082292s
      String#squeeze      1.572M (± 0.8%) i/s -      7.944M in   5.054547s

Comparison:
      String#squeeze:  1571688.0 i/s
 String#gsub/regex+/:    34531.1 i/s - 45.52x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   285.149k i/100ms
       String#match?   757.497k i/100ms
  String#start_with?   866.660k i/100ms
Calculating -------------------------------------
           String#=~      2.849M (± 0.5%) i/s -     14.257M in   5.003642s
       String#match?      7.589M (± 0.5%) i/s -     38.632M in   5.090822s
  String#start_with?      8.676M (± 0.4%) i/s -     44.200M in   5.094518s

Comparison:
  String#start_with?:  8676094.7 i/s
       String#match?:  7588782.7 i/s - 1.14x  (± 0.00) slower
           String#=~:  2849493.1 i/s - 3.04x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   188.902k i/100ms
    String#[0, n] ==    81.423k i/100ms
   String#[RANGE] ==    77.264k i/100ms
   String#[0...n] ==    47.853k i/100ms
Calculating -------------------------------------
  String#start_with?      1.917M (± 0.8%) i/s -      9.634M in   5.025315s
    String#[0, n] ==    815.271k (± 1.0%) i/s -      4.153M in   5.093962s
   String#[RANGE] ==    757.942k (± 0.6%) i/s -      3.863M in   5.097172s
   String#[0...n] ==    473.379k (± 0.8%) i/s -      2.393M in   5.054715s

Comparison:
  String#start_with?:  1917223.3 i/s
    String#[0, n] ==:   815270.9 i/s - 2.35x  (± 0.00) slower
   String#[RANGE] ==:   757942.2 i/s - 2.53x  (± 0.00) slower
   String#[0...n] ==:   473379.4 i/s - 4.05x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   178.248k i/100ms
 String#sub!'string'   124.143k i/100ms
String#gsub!'string'    77.689k i/100ms
  String#[/regexp/]=   153.266k i/100ms
 String#sub!/regexp/   114.723k i/100ms
String#gsub!/regexp/    60.683k i/100ms
Calculating -------------------------------------
  String#['string']=      1.808M (± 0.6%) i/s -      9.091M in   5.028881s
 String#sub!'string'      1.265M (± 0.6%) i/s -      6.331M in   5.003537s
String#gsub!'string'    775.863k (± 0.2%) i/s -      3.884M in   5.006644s
  String#[/regexp/]=      1.523M (± 0.3%) i/s -      7.663M in   5.031137s
 String#sub!/regexp/      1.140M (± 0.6%) i/s -      5.736M in   5.031109s
String#gsub!/regexp/    605.794k (± 0.7%) i/s -      3.034M in   5.008775s

Comparison:
  String#['string']=:  1807744.7 i/s
  String#[/regexp/]=:  1523185.4 i/s - 1.19x  (± 0.00) slower
 String#sub!'string':  1265411.8 i/s - 1.43x  (± 0.00) slower
 String#sub!/regexp/:  1140180.3 i/s - 1.59x  (± 0.00) slower
String#gsub!'string':   775862.6 i/s - 2.33x  (± 0.00) slower
String#gsub!/regexp/:   605793.8 i/s - 2.98x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          String#sub   144.614k i/100ms
        String#chomp   557.706k i/100ms
String#delete_suffix   599.998k i/100ms
Calculating -------------------------------------
          String#sub      1.435M (± 0.6%) i/s -      7.231M in   5.040383s
        String#chomp      5.574M (± 0.6%) i/s -     27.885M in   5.002922s
String#delete_suffix      5.983M (± 0.5%) i/s -     30.000M in   5.013925s

Comparison:
String#delete_suffix:  5983492.3 i/s
        String#chomp:  5573993.5 i/s - 1.07x  (± 0.00) slower
          String#sub:  1434612.4 i/s - 4.17x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   623.717k i/100ms
          String#sub   147.959k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.217M (± 0.5%) i/s -     31.186M in   5.016690s
          String#sub      1.474M (± 0.7%) i/s -      7.398M in   5.018587s

Comparison:
String#delete_prefix:  6216606.2 i/s
          String#sub:  1474175.4 i/s - 4.22x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   622.485k i/100ms
    String#unpack[0]   472.982k i/100ms
Calculating -------------------------------------
      String#unpack1      6.237M (± 0.6%) i/s -     31.747M in   5.090497s
    String#unpack[0]      4.767M (± 0.7%) i/s -     24.122M in   5.060722s

Comparison:
      String#unpack1:  6236670.4 i/s
    String#unpack[0]:  4766753.5 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.701k i/100ms
          Time.parse     9.153k i/100ms
Calculating -------------------------------------
        Time.iso8601    276.717k (± 0.4%) i/s -      1.385M in   5.005356s
          Time.parse     92.438k (± 0.5%) i/s -    466.803k in   5.050031s

Comparison:
        Time.iso8601:   276717.3 i/s
          Time.parse:    92437.7 i/s - 2.99x  (± 0.00) slower

