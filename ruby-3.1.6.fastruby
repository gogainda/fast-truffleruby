$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       759.137k i/100ms
Function with splat arguments
                        23.266k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.601M (± 0.6%) i/s -     38.716M in   5.094046s
Function with splat arguments
                        231.416k (±12.7%) i/s -      1.140M in   5.028918s

Comparison:
Function with single Array argument:  7600555.1 i/s
Function with splat arguments:   231416.0 i/s - 32.84x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   981.459k i/100ms
Sequential Assignment
                       990.925k i/100ms
Calculating -------------------------------------
 Parallel Assignment      9.819M (± 0.5%) i/s -     50.054M in   5.097704s
Sequential Assignment
                          9.860M (± 2.6%) i/s -     49.546M in   5.029104s

Comparison:
Sequential Assignment:  9860066.3 i/s
 Parallel Assignment:  9819235.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   483.519k i/100ms
       attr_accessor   552.000k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.839M (± 0.4%) i/s -     24.659M in   5.095877s
       attr_accessor      5.496M (± 4.0%) i/s -     27.600M in   5.033331s

Comparison:
       attr_accessor:  5495846.3 i/s
   getter_and_setter:  4839192.6 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    87.891k i/100ms
         respond_to?   786.455k i/100ms
Calculating -------------------------------------
      begin...rescue    873.846k (± 4.7%) i/s -      4.395M in   5.042992s
         respond_to?      7.814M (± 1.1%) i/s -     39.323M in   5.032894s

Comparison:
         respond_to?:  7814076.7 i/s
      begin...rescue:   873845.9 i/s - 8.94x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              normal   306.897k i/100ms
             &method   123.401k i/100ms
Calculating -------------------------------------
              normal      3.053M (± 1.4%) i/s -     15.345M in   5.027454s
             &method      1.231M (± 0.5%) i/s -      6.170M in   5.011978s

Comparison:
              normal:  3052802.6 i/s
             &method:  1231097.0 i/s - 2.48x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       256.000  i/100ms
       define_method   298.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.373k (±22.2%) i/s -     10.240k in   5.013230s
       define_method      3.259k (±19.0%) i/s -     14.900k in   5.059473s

Comparison:
       define_method:     3259.3 i/s
module_eval with string:     2373.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Float#round   260.162k i/100ms
       Kernel#format   193.313k i/100ms
            String#%   163.748k i/100ms
Calculating -------------------------------------
         Float#round      2.599M (± 0.5%) i/s -     13.008M in   5.004257s
       Kernel#format      1.923M (± 0.3%) i/s -      9.666M in   5.025512s
            String#%      1.653M (± 0.3%) i/s -      8.351M in   5.053583s

Comparison:
         Float#round:  2599480.3 i/s
       Kernel#format:  1923334.2 i/s - 1.35x  (± 0.00) slower
            String#%:  1652536.4 i/s - 1.57x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash   890.534k i/100ms
          OpenStruct   519.023k i/100ms
Calculating -------------------------------------
                Hash      8.801M (± 0.5%) i/s -     44.527M in   5.059467s
          OpenStruct      5.056M (± 0.5%) i/s -     25.432M in   5.030456s

Comparison:
                Hash:  8800850.6 i/s
          OpenStruct:  5055765.5 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.112M i/100ms
          OpenStruct    10.021k i/100ms
Calculating -------------------------------------
                Hash     11.135M (± 0.4%) i/s -     56.736M in   5.095473s
          OpenStruct     99.740k (± 2.5%) i/s -    501.050k in   5.026771s

Comparison:
                Hash: 11134703.6 i/s
          OpenStruct:    99740.4 i/s - 111.64x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   580.230k i/100ms
  ancestors.include?   117.889k i/100ms
Calculating -------------------------------------
  less than or equal      5.951M (± 1.1%) i/s -     30.172M in   5.070436s
  ancestors.include?      1.182M (± 0.4%) i/s -      6.012M in   5.085305s

Comparison:
  less than or equal:  5951340.9 i/s
  ancestors.include?:  1182315.3 i/s - 5.03x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.678  (± 0.0%) i/s -      4.000  in   5.906449s
         Kernel loop      0.228  (± 0.0%) i/s -      2.000  in   8.780730s

Comparison:
          While Loop:        0.7 i/s
         Kernel loop:        0.2 i/s - 2.97x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.570M i/100ms
         Array#first     1.313M i/100ms
Calculating -------------------------------------
           Array#[0]     15.447M (± 0.2%) i/s -     78.483M in   5.080939s
         Array#first     13.103M (± 1.0%) i/s -     65.631M in   5.009392s

Comparison:
           Array#[0]: 15446559.4 i/s
         Array#first: 13102860.6 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.559M i/100ms
          Array#last     1.321M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.587M (± 0.6%) i/s -     77.944M in   5.000808s
          Array#last     13.157M (± 0.4%) i/s -     66.040M in   5.019495s

Comparison:
          Array#[-1]: 15586943.6 i/s
          Array#last: 13156948.7 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    99.758k i/100ms
Calculating -------------------------------------
                find      0.263  (± 0.0%) i/s -      2.000  in   7.608819s
             bsearch    992.897k (± 1.6%) i/s -      4.988M in   5.024875s

Comparison:
             bsearch:   992897.4 i/s
                find:        0.3 i/s - 3777382.88x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    19.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    196.664  (± 2.5%) i/s -    988.000  in   5.027550s
        Array#insert      1.433  (± 0.0%) i/s -      8.000  in   5.582652s

Comparison:
       Array#unshift:      196.7 i/s
        Array#insert:        1.4 i/s - 137.23x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.065M i/100ms
          Array#size     2.079M i/100ms
         Array#count     1.629M i/100ms
Calculating -------------------------------------
        Array#length     20.732M (± 0.2%) i/s -    105.319M in   5.080001s
          Array#size     20.856M (± 0.4%) i/s -    106.007M in   5.082854s
         Array#count     16.123M (± 0.5%) i/s -     81.450M in   5.052036s

Comparison:
          Array#size: 20856021.3 i/s
        Array#length: 20732168.7 i/s - same-ish: difference falls within error
         Array#count: 16122782.4 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    46.337k i/100ms
        Array#sample     1.042M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    461.155k (± 0.7%) i/s -      2.317M in   5.024266s
        Array#sample     10.363M (± 0.3%) i/s -     52.096M in   5.027233s

Comparison:
        Array#sample: 10362783.8 i/s
 Array#shuffle.first:   461155.4 i/s - 22.47x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    63.824k i/100ms
          Date.parse    32.268k i/100ms
Calculating -------------------------------------
        Date.iso8601    647.830k (± 0.6%) i/s -      3.255M in   5.024678s
          Date.parse    321.802k (± 0.5%) i/s -      1.613M in   5.013783s

Comparison:
        Date.iso8601:   647829.8 i/s
          Date.parse:   321801.6 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.850k i/100ms
           Array#map    27.057k i/100ms
Calculating -------------------------------------
   Array#each + push    189.971k (± 0.6%) i/s -    961.350k in   5.060689s
           Array#map    270.340k (± 0.6%) i/s -      1.353M in   5.004422s

Comparison:
           Array#map:   270339.7 i/s
   Array#each + push:   189970.6 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            For loop    29.683k i/100ms
               #each    32.538k i/100ms
Calculating -------------------------------------
            For loop    297.191k (± 0.3%) i/s -      1.514M in   5.093867s
               #each    326.312k (± 0.2%) i/s -      1.659M in   5.085454s

Comparison:
               #each:   326312.0 i/s
            For loop:   297190.7 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.396k i/100ms
     each_with_index    19.181k i/100ms
Calculating -------------------------------------
          While Loop    275.473k (± 0.5%) i/s -      1.397M in   5.072137s
     each_with_index    192.124k (± 0.5%) i/s -    978.231k in   5.091790s

Comparison:
          While Loop:   275473.1 i/s
     each_with_index:   192123.5 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    93.260k i/100ms
      inject to_proc     2.180k i/100ms
        inject block     2.079k i/100ms
Calculating -------------------------------------
       inject symbol    958.399k (± 8.7%) i/s -      4.850M in   5.090113s
      inject to_proc     21.963k (± 0.7%) i/s -    111.180k in   5.062499s
        inject block     20.954k (± 0.4%) i/s -    106.029k in   5.060189s

Comparison:
       inject symbol:   958398.5 i/s
      inject to_proc:    21962.7 i/s - 43.64x  (± 0.00) slower
        inject block:    20953.8 i/s - 45.74x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.912k i/100ms
   Array#map.flatten     4.027k i/100ms
      Array#flat_map     7.923k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     69.613k (± 0.5%) i/s -    352.512k in   5.064011s
   Array#map.flatten     39.778k (± 0.5%) i/s -    201.350k in   5.061969s
      Array#flat_map     79.299k (± 0.4%) i/s -    404.073k in   5.095624s

Comparison:
      Array#flat_map:    79299.1 i/s
Array#map.flatten(1):    69613.0 i/s - 1.14x  (± 0.00) slower
   Array#map.flatten:    39778.1 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    31.671k i/100ms
  Array#reverse_each    32.496k i/100ms
Calculating -------------------------------------
  Array#reverse.each    316.827k (± 0.6%) i/s -      1.615M in   5.098315s
  Array#reverse_each    325.507k (± 0.5%) i/s -      1.657M in   5.091561s

Comparison:
  Array#reverse_each:   325506.7 i/s
  Array#reverse.each:   316826.6 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        21.036k i/100ms
   Enumerable#detect    82.721k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        209.907k (± 0.6%) i/s -      4.207M in  20.043946s
   Enumerable#detect    822.134k (± 0.7%) i/s -     16.461M in  20.023874s

Comparison:
   Enumerable#detect:   822134.4 i/s
Enumerable#select.first:   209907.1 i/s - 3.92x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       240.238k i/100ms
Enumerable#select.last
                        18.775k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.414M (± 0.6%) i/s -     12.252M in   5.075815s
Enumerable#select.last
                        187.351k (± 1.7%) i/s -    938.750k in   5.012201s

Comparison:
Enumerable#reverse.detect:  2413917.3 i/s
Enumerable#select.last:   187350.9 i/s - 12.88x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.995k i/100ms
  Enumerable#sort_by     4.795k i/100ms
     Enumerable#sort     2.397k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         50.044k (± 4.1%) i/s -    249.750k in   5.001329s
  Enumerable#sort_by     48.333k (± 1.4%) i/s -    244.545k in   5.060620s
     Enumerable#sort     24.829k (± 0.5%) i/s -    124.644k in   5.020259s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    50044.0 i/s
  Enumerable#sort_by:    48333.1 i/s - same-ish: difference falls within error
     Enumerable#sort:    24828.9 i/s - 2.02x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    18.053k i/100ms
Enumerable#sort_by...first
                         8.833k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    180.153k (± 0.6%) i/s -    902.650k in   5.010664s
Enumerable#sort_by...first
                         87.086k (± 1.3%) i/s -    441.650k in   5.072259s

Comparison:
   Enumerable#min_by:   180153.5 i/s
Enumerable#sort_by...first:    87085.6 i/s - 2.07x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   417.400k i/100ms
            Hash#dup   324.364k i/100ms
Calculating -------------------------------------
              Hash[]      4.071M (± 2.5%) i/s -     20.453M in   5.026708s
            Hash#dup      3.314M (± 1.1%) i/s -     16.867M in   5.090843s

Comparison:
              Hash[]:  4071136.7 i/s
            Hash#dup:  3313625.0 i/s - 1.23x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.430M i/100ms
  Hash#fetch, symbol     1.182M i/100ms
     Hash#[], string     1.166M i/100ms
  Hash#fetch, string   798.609k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.267M (± 0.3%) i/s -     71.524M in   5.013271s
  Hash#fetch, symbol     11.895M (± 0.5%) i/s -     60.302M in   5.069825s
     Hash#[], string     11.580M (± 0.2%) i/s -     58.306M in   5.034861s
  Hash#fetch, string      7.977M (± 0.4%) i/s -     39.930M in   5.006059s

Comparison:
     Hash#[], symbol: 14267073.3 i/s
  Hash#fetch, symbol: 11894606.0 i/s - 1.20x  (± 0.00) slower
     Hash#[], string: 11580425.9 i/s - 1.23x  (± 0.00) slower
  Hash#fetch, string:  7976577.7 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   863.686k i/100ms
             Hash#[]     1.028M i/100ms
          Hash#[] ||   929.466k i/100ms
          Hash#[] &&   394.900k i/100ms
          Hash#fetch   610.253k i/100ms
 Hash#fetch fallback   384.413k i/100ms
Calculating -------------------------------------
            Hash#dig      8.597M (± 0.5%) i/s -     43.184M in   5.023577s
             Hash#[]     10.278M (± 1.7%) i/s -     52.422M in   5.102026s
          Hash#[] ||      9.315M (± 1.3%) i/s -     47.403M in   5.089574s
          Hash#[] &&      4.013M (± 1.8%) i/s -     20.140M in   5.019740s
          Hash#fetch      5.716M (± 1.1%) i/s -     28.682M in   5.018016s
 Hash#fetch fallback      3.906M (± 0.7%) i/s -     19.605M in   5.020010s

Comparison:
             Hash#[]: 10277704.2 i/s
          Hash#[] ||:  9315283.5 i/s - 1.10x  (± 0.00) slower
            Hash#dig:  8596521.7 i/s - 1.20x  (± 0.00) slower
          Hash#fetch:  5716475.2 i/s - 1.80x  (± 0.00) slower
          Hash#[] &&:  4013398.2 i/s - 2.56x  (± 0.00) slower
 Hash#fetch fallback:  3905600.2 i/s - 2.63x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.435M i/100ms
  Hash#fetch + block     1.417M i/100ms
    Hash#fetch + arg     1.098M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.425M (± 2.5%) i/s -     73.197M in   5.077701s
  Hash#fetch + block     14.132M (± 0.5%) i/s -     70.838M in   5.012808s
    Hash#fetch + arg     11.016M (± 0.5%) i/s -     56.019M in   5.085514s

Comparison:
  Hash#fetch + const: 14425274.4 i/s
  Hash#fetch + block: 14131751.6 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 11015800.6 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    28.029k i/100ms
         sort + to_h    12.132k i/100ms
Calculating -------------------------------------
      sort_by + to_h    280.514k (± 0.5%) i/s -      1.429M in   5.096042s
         sort + to_h    121.061k (± 0.4%) i/s -    606.600k in   5.010779s

Comparison:
      sort_by + to_h:   280513.6 i/s
         sort + to_h:   121061.4 i/s - 2.32x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   186.247k i/100ms
       Hash#each_key   210.384k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.925M (± 0.7%) i/s -      9.685M in   5.030165s
       Hash#each_key      2.068M (± 0.6%) i/s -     10.519M in   5.086304s

Comparison:
       Hash#each_key:  2068214.6 i/s
      Hash#keys.each:  1925444.9 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.281k i/100ms
           Hash#key?     1.019M i/100ms
Calculating -------------------------------------
  Hash#keys.include?     12.312k (± 5.1%) i/s -     61.488k in   5.008175s
           Hash#key?     10.236M (± 0.4%) i/s -     51.973M in   5.077708s

Comparison:
           Hash#key?: 10235801.5 i/s
  Hash#keys.include?:    12311.6 i/s - 831.40x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.952k i/100ms
            Hash#[]=    10.469k i/100ms
Calculating -------------------------------------
         Hash#merge!     39.480k (± 3.1%) i/s -    197.600k in   5.011026s
            Hash#[]=    104.972k (± 0.9%) i/s -    533.919k in   5.086768s

Comparison:
            Hash#[]=:   104971.5 i/s
         Hash#merge!:    39480.1 i/s - 2.66x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.774k i/100ms
      Hash#merge({})     3.970k i/100ms
 Hash#dup#merge!({})     2.905k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         47.492k (± 0.9%) i/s -    238.700k in   5.026454s
      Hash#merge({})     39.562k (± 0.4%) i/s -    198.500k in   5.017468s
 Hash#dup#merge!({})     28.938k (± 0.5%) i/s -    145.250k in   5.019456s

Comparison:
{}#merge!(Hash) do end:    47492.4 i/s
      Hash#merge({}):    39562.5 i/s - 1.20x  (± 0.00) slower
 Hash#dup#merge!({}):    28938.1 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   387.947k i/100ms
          Hash#merge   357.849k i/100ms
Calculating -------------------------------------
        Hash#**other      3.836M (± 0.7%) i/s -     19.397M in   5.056865s
          Hash#merge      3.585M (± 0.5%) i/s -     18.250M in   5.091158s

Comparison:
        Hash#**other:  3836040.0 i/s
          Hash#merge:  3584811.0 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.636k i/100ms
         Hash#merge!     3.934k i/100ms
Calculating -------------------------------------
          Hash#merge     16.497k (± 3.3%) i/s -     83.436k in   5.064258s
         Hash#merge!     39.629k (± 0.7%) i/s -    200.634k in   5.063067s

Comparison:
         Hash#merge!:    39628.9 i/s
          Hash#merge:    16497.0 i/s - 2.40x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      425.279k i/100ms
Array#each             231.349k i/100ms
Array#each_w/_object   178.128k i/100ms
Hash#select-include     72.172k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.202M (± 1.2%) i/s -     21.264M in   5.061505s
Array#each                2.291M (± 0.6%) i/s -     11.567M in   5.049167s
Array#each_w/_object      1.753M (± 0.3%) i/s -      8.906M in   5.082136s
Hash#select-include     726.113k (± 0.3%) i/s -      3.681M in   5.069193s

Comparison:
Hash#native-slice   :  4201713.4 i/s
Array#each          :  2291034.4 i/s - 1.83x  (± 0.00) slower
Array#each_w/_object:  1752502.9 i/s - 2.40x  (± 0.00) slower
Hash#select-include :   726112.7 i/s - 5.79x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.114k i/100ms
         Hash#value?   840.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     10.892k (± 3.9%) i/s -     54.586k in   5.019997s
         Hash#value?      8.406k (± 1.3%) i/s -     42.840k in   5.096937s

Comparison:
Hash#values.include?:    10891.8 i/s
         Hash#value?:     8406.5 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                call   658.518k i/100ms
                send   519.690k i/100ms
      method_missing   386.621k i/100ms
Calculating -------------------------------------
                call      6.594M (± 0.7%) i/s -     33.584M in   5.093682s
                send      5.214M (± 0.4%) i/s -     26.504M in   5.083698s
      method_missing      3.868M (± 0.8%) i/s -     19.718M in   5.097590s

Comparison:
                call:  6593658.0 i/s
                send:  5213657.6 i/s - 1.26x  (± 0.00) slower
      method_missing:  3868269.1 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
               Block     9.074k i/100ms
      Symbol#to_proc    10.245k i/100ms
Calculating -------------------------------------
               Block     90.528k (± 0.8%) i/s -    453.700k in   5.012060s
      Symbol#to_proc    101.625k (± 0.5%) i/s -    512.250k in   5.040727s

Comparison:
      Symbol#to_proc:   101625.1 i/s
               Block:    90527.6 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          block.call   944.496k i/100ms
       block + yield     1.003M i/100ms
        unused block     1.308M i/100ms
               yield     1.177M i/100ms
Calculating -------------------------------------
          block.call      9.447M (± 0.4%) i/s -     48.169M in   5.098945s
       block + yield     10.037M (± 0.3%) i/s -     51.168M in   5.098185s
        unused block     13.095M (± 0.4%) i/s -     66.715M in   5.094756s
               yield     11.595M (± 0.4%) i/s -     58.868M in   5.076922s

Comparison:
        unused block: 13095023.1 i/s
               yield: 11595453.8 i/s - 1.13x  (± 0.00) slower
       block + yield: 10036617.3 i/s - 1.30x  (± 0.00) slower
          block.call:  9447073.8 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   324.622k i/100ms
      range#include?    12.730k i/100ms
       range#member?    12.719k i/100ms
       plain compare   531.685k i/100ms
Calculating -------------------------------------
        range#cover?      3.266M (± 1.1%) i/s -     16.556M in   5.069448s
      range#include?    127.190k (± 0.6%) i/s -    636.500k in   5.004511s
       range#member?    126.537k (± 0.6%) i/s -    635.950k in   5.026000s
       plain compare      5.356M (± 0.4%) i/s -     27.116M in   5.062684s

Comparison:
       plain compare:  5356147.3 i/s
        range#cover?:  3266226.5 i/s - 1.64x  (± 0.00) slower
      range#include?:   127189.9 i/s - 42.11x  (± 0.00) slower
       range#member?:   126537.4 i/s - 42.33x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       String#match?   900.347k i/100ms
           String#=~   640.723k i/100ms
          Regexp#===   566.963k i/100ms
        String#match   467.519k i/100ms
Calculating -------------------------------------
       String#match?      9.033M (± 0.7%) i/s -     45.918M in   5.083422s
           String#=~      6.378M (± 0.5%) i/s -     32.036M in   5.023222s
          Regexp#===      5.676M (± 0.5%) i/s -     28.915M in   5.094350s
        String#match      4.705M (± 0.2%) i/s -     23.843M in   5.068017s

Comparison:
       String#match?:  9033247.0 i/s
           String#=~:  6377776.2 i/s - 1.42x  (± 0.00) slower
          Regexp#===:  5676044.8 i/s - 1.59x  (± 0.00) slower
        String#match:  4704720.6 i/s - 1.92x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   653.380k i/100ms
      String#casecmp   813.720k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.548M (± 0.4%) i/s -     33.322M in   5.088682s
      String#casecmp      8.132M (± 0.3%) i/s -     40.686M in   5.003119s

Comparison:
      String#casecmp:  8132178.8 i/s
String#downcase + ==:  6548462.2 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            String#+   590.251k i/100ms
       String#concat   616.239k i/100ms
       String#append   660.421k i/100ms
         "foo" "bar"     1.140M i/100ms
  "#{'foo'}#{'bar'}"     1.149M i/100ms
Calculating -------------------------------------
            String#+      5.961M (± 0.5%) i/s -     30.103M in   5.050370s
       String#concat      6.213M (± 0.2%) i/s -     31.428M in   5.058664s
       String#append      6.615M (± 0.2%) i/s -     33.681M in   5.091547s
         "foo" "bar"     11.381M (± 0.2%) i/s -     57.022M in   5.010404s
  "#{'foo'}#{'bar'}"     11.452M (± 0.7%) i/s -     57.470M in   5.018412s

Comparison:
  "#{'foo'}#{'bar'}": 11452478.6 i/s
         "foo" "bar": 11380699.4 i/s - same-ish: difference falls within error
       String#append:  6615210.7 i/s - 1.73x  (± 0.00) slower
       String#concat:  6212776.3 i/s - 1.84x  (± 0.00) slower
            String#+:  5960654.2 i/s - 1.92x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#+@     1.003M i/100ms
          String#dup   574.097k i/100ms
Calculating -------------------------------------
           String#+@     10.015M (± 0.4%) i/s -     50.125M in   5.005264s
          String#dup      5.741M (± 0.5%) i/s -     29.279M in   5.099673s

Comparison:
           String#+@: 10014693.9 i/s
          String#dup:  5741463.4 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   187.060k i/100ms
       String#match?   430.654k i/100ms
    String#end_with?   608.587k i/100ms
Calculating -------------------------------------
           String#=~      1.871M (± 0.4%) i/s -      9.353M in   5.000116s
       String#match?      4.310M (± 0.8%) i/s -     21.963M in   5.096447s
    String#end_with?      6.071M (± 0.5%) i/s -     30.429M in   5.012676s

Comparison:
    String#end_with?:  6070639.5 i/s
       String#match?:  4309823.5 i/s - 1.41x  (± 0.00) slower
           String#=~:  1870593.2 i/s - 3.25x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   112.149k i/100ms
          String#sub   138.117k i/100ms
String#dup["string"]=
                       179.665k i/100ms
Calculating -------------------------------------
         String#gsub      1.122M (± 0.7%) i/s -      5.607M in   5.000137s
          String#sub      1.387M (± 1.0%) i/s -      7.044M in   5.077575s
String#dup["string"]=
                          1.789M (± 0.6%) i/s -      8.983M in   5.021091s

Comparison:
String#dup["string"]=:  1789167.2 i/s
          String#sub:  1387402.4 i/s - 1.29x  (± 0.00) slower
         String#gsub:  1121517.4 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   106.666k i/100ms
           String#tr   343.625k i/100ms
Calculating -------------------------------------
         String#gsub      1.067M (± 0.4%) i/s -      5.440M in   5.098726s
           String#tr      3.436M (± 0.5%) i/s -     17.181M in   5.000402s

Comparison:
           String#tr:  3436066.1 i/s
         String#gsub:  1066948.1 i/s - 3.22x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.160M i/100ms
         With Freeze     1.695M i/100ms
Calculating -------------------------------------
      Without Freeze     11.598M (± 0.6%) i/s -     59.140M in   5.099162s
         With Freeze     16.903M (± 0.4%) i/s -     84.726M in   5.012470s

Comparison:
         With Freeze: 16903253.4 i/s
      Without Freeze: 11598456.8 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.432k i/100ms
      String#squeeze   156.174k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     34.385k (± 0.4%) i/s -    175.032k in   5.090434s
      String#squeeze      1.555M (± 0.5%) i/s -      7.809M in   5.022534s

Comparison:
      String#squeeze:  1554767.0 i/s
 String#gsub/regex+/:    34385.1 i/s - 45.22x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   287.019k i/100ms
       String#match?   757.105k i/100ms
  String#start_with?   869.861k i/100ms
Calculating -------------------------------------
           String#=~      2.872M (± 0.6%) i/s -     14.638M in   5.096472s
       String#match?      7.607M (± 0.5%) i/s -     38.612M in   5.075870s
  String#start_with?      8.715M (± 0.4%) i/s -     44.363M in   5.090556s

Comparison:
  String#start_with?:  8714881.3 i/s
       String#match?:  7607239.9 i/s - 1.15x  (± 0.00) slower
           String#=~:  2872289.5 i/s - 3.03x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   193.333k i/100ms
    String#[0, n] ==    82.510k i/100ms
   String#[RANGE] ==    75.881k i/100ms
   String#[0...n] ==    47.381k i/100ms
Calculating -------------------------------------
  String#start_with?      1.907M (± 2.2%) i/s -      9.667M in   5.072452s
    String#[0, n] ==    837.858k (± 0.9%) i/s -      4.208M in   5.022747s
   String#[RANGE] ==    762.470k (± 0.8%) i/s -      3.870M in   5.075807s
   String#[0...n] ==    468.602k (± 0.7%) i/s -      2.369M in   5.055851s

Comparison:
  String#start_with?:  1906721.5 i/s
    String#[0, n] ==:   837857.8 i/s - 2.28x  (± 0.00) slower
   String#[RANGE] ==:   762469.6 i/s - 2.50x  (± 0.00) slower
   String#[0...n] ==:   468602.1 i/s - 4.07x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   182.160k i/100ms
 String#sub!'string'   127.374k i/100ms
String#gsub!'string'    78.320k i/100ms
  String#[/regexp/]=   152.782k i/100ms
 String#sub!/regexp/   112.678k i/100ms
String#gsub!/regexp/    61.340k i/100ms
Calculating -------------------------------------
  String#['string']=      1.844M (± 0.6%) i/s -      9.290M in   5.038056s
 String#sub!'string'      1.273M (± 0.5%) i/s -      6.369M in   5.002278s
String#gsub!'string'    786.907k (± 0.6%) i/s -      3.994M in   5.076167s
  String#[/regexp/]=      1.543M (± 0.5%) i/s -      7.792M in   5.050023s
 String#sub!/regexp/      1.146M (± 0.6%) i/s -      5.747M in   5.014436s
String#gsub!/regexp/    609.173k (± 0.5%) i/s -      3.067M in   5.034796s

Comparison:
  String#['string']=:  1844060.3 i/s
  String#[/regexp/]=:  1542985.3 i/s - 1.20x  (± 0.00) slower
 String#sub!'string':  1273197.4 i/s - 1.45x  (± 0.00) slower
 String#sub!/regexp/:  1146046.5 i/s - 1.61x  (± 0.00) slower
String#gsub!'string':   786907.0 i/s - 2.34x  (± 0.00) slower
String#gsub!/regexp/:   609173.2 i/s - 3.03x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          String#sub   143.996k i/100ms
        String#chomp   562.769k i/100ms
String#delete_suffix   613.637k i/100ms
Calculating -------------------------------------
          String#sub      1.426M (± 0.2%) i/s -      7.200M in   5.049445s
        String#chomp      5.610M (± 0.4%) i/s -     28.138M in   5.015589s
String#delete_suffix      6.119M (± 0.5%) i/s -     30.682M in   5.013917s

Comparison:
String#delete_suffix:  6119464.9 i/s
        String#chomp:  5610302.5 i/s - 1.09x  (± 0.00) slower
          String#sub:  1425866.2 i/s - 4.29x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   633.607k i/100ms
          String#sub   147.171k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.318M (± 0.5%) i/s -     31.680M in   5.014072s
          String#sub      1.483M (± 0.5%) i/s -      7.506M in   5.061697s

Comparison:
String#delete_prefix:  6318470.0 i/s
          String#sub:  1482881.9 i/s - 4.26x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   630.531k i/100ms
    String#unpack[0]   474.991k i/100ms
Calculating -------------------------------------
      String#unpack1      6.308M (± 0.5%) i/s -     32.157M in   5.097629s
    String#unpack[0]      4.858M (± 0.5%) i/s -     24.700M in   5.084519s

Comparison:
      String#unpack1:  6308388.4 i/s
    String#unpack[0]:  4857924.9 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.303k i/100ms
          Time.parse     9.248k i/100ms
Calculating -------------------------------------
        Time.iso8601    271.776k (± 1.3%) i/s -      1.365M in   5.024007s
          Time.parse     93.221k (± 0.4%) i/s -    471.648k in   5.059553s

Comparison:
        Time.iso8601:   271776.1 i/s
          Time.parse:    93220.7 i/s - 2.92x  (± 0.00) slower

