$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       767.539k i/100ms
Function with splat arguments
                        18.703k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.653M (± 3.6%) i/s -     38.377M in   5.022841s
Function with splat arguments
                        194.075k (± 8.1%) i/s -    972.556k in   5.054197s

Comparison:
Function with single Array argument:  7653296.6 i/s
Function with splat arguments:   194074.8 i/s - 39.43x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.020M i/100ms
Sequential Assignment
                         1.012M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.199M (± 0.3%) i/s -     52.005M in   5.098938s
Sequential Assignment
                         10.161M (± 0.3%) i/s -     51.606M in   5.078940s

Comparison:
 Parallel Assignment: 10199337.1 i/s
Sequential Assignment: 10160965.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   485.954k i/100ms
       attr_accessor   564.303k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.838M (± 3.8%) i/s -     24.298M in   5.031264s
       attr_accessor      5.567M (± 0.3%) i/s -     28.215M in   5.068115s

Comparison:
       attr_accessor:  5567252.8 i/s
   getter_and_setter:  4837950.9 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    88.784k i/100ms
         respond_to?   786.371k i/100ms
Calculating -------------------------------------
      begin...rescue    883.665k (± 1.3%) i/s -      4.439M in   5.024424s
         respond_to?      7.865M (± 0.4%) i/s -     40.105M in   5.099520s

Comparison:
         respond_to?:  7864607.2 i/s
      begin...rescue:   883665.5 i/s - 8.90x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              normal   303.738k i/100ms
             &method   122.534k i/100ms
Calculating -------------------------------------
              normal      3.012M (± 4.4%) i/s -     15.187M in   5.055836s
             &method      1.240M (± 0.5%) i/s -      6.249M in   5.041682s

Comparison:
              normal:  3011748.5 i/s
             &method:  1239543.3 i/s - 2.43x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       232.000  i/100ms
       define_method   292.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.212k (±21.1%) i/s -      9.744k in   5.005620s
       define_method      3.217k (±20.4%) i/s -     14.600k in   5.126275s

Comparison:
       define_method:     3216.6 i/s
module_eval with string:     2212.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Float#round   262.463k i/100ms
       Kernel#format   202.604k i/100ms
            String#%   172.408k i/100ms
Calculating -------------------------------------
         Float#round      2.639M (± 0.5%) i/s -     13.386M in   5.072367s
       Kernel#format      2.006M (± 0.4%) i/s -     10.130M in   5.050931s
            String#%      1.729M (± 0.4%) i/s -      8.793M in   5.085890s

Comparison:
         Float#round:  2638994.9 i/s
       Kernel#format:  2005650.4 i/s - 1.32x  (± 0.00) slower
            String#%:  1728891.6 i/s - 1.53x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash   919.946k i/100ms
          OpenStruct   509.598k i/100ms
Calculating -------------------------------------
                Hash      9.219M (± 0.6%) i/s -     46.917M in   5.089392s
          OpenStruct      5.036M (± 0.9%) i/s -     25.480M in   5.059810s

Comparison:
                Hash:  9218923.3 i/s
          OpenStruct:  5036166.4 i/s - 1.83x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.105M i/100ms
          OpenStruct    11.126k i/100ms
Calculating -------------------------------------
                Hash     11.678M (± 1.1%) i/s -     58.589M in   5.017488s
          OpenStruct    114.566k (± 3.7%) i/s -    578.552k in   5.057365s

Comparison:
                Hash: 11678235.5 i/s
          OpenStruct:   114566.0 i/s - 101.93x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   554.318k i/100ms
  ancestors.include?   120.541k i/100ms
Calculating -------------------------------------
  less than or equal      5.779M (± 0.5%) i/s -     29.379M in   5.084006s
  ancestors.include?      1.200M (± 0.8%) i/s -      6.027M in   5.022030s

Comparison:
  less than or equal:  5778835.0 i/s
  ancestors.include?:  1200203.2 i/s - 4.81x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.595  (± 0.0%) i/s -      3.000  in   5.045854s
         Kernel loop      0.212  (± 0.0%) i/s -      2.000  in   9.431624s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 2.81x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.563M i/100ms
         Array#first     1.313M i/100ms
Calculating -------------------------------------
           Array#[0]     15.639M (± 0.2%) i/s -     79.731M in   5.098242s
         Array#first     13.131M (± 0.3%) i/s -     65.655M in   4.999912s

Comparison:
           Array#[0]: 15638947.5 i/s
         Array#first: 13131255.0 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.555M i/100ms
          Array#last     1.322M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.556M (± 0.5%) i/s -     79.304M in   5.098166s
          Array#last     13.307M (± 0.2%) i/s -     67.440M in   5.068126s

Comparison:
          Array#[-1]: 15555815.0 i/s
          Array#last: 13306678.6 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    97.056k i/100ms
Calculating -------------------------------------
                find      0.265  (± 0.0%) i/s -      2.000  in   7.552492s
             bsearch    969.867k (± 1.5%) i/s -      4.853M in   5.004687s

Comparison:
             bsearch:   969867.5 i/s
                find:        0.3 i/s - 3662422.66x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    18.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    191.576  (± 2.1%) i/s -    972.000  in   5.076534s
        Array#insert      1.430  (± 0.0%) i/s -      8.000  in   5.595979s

Comparison:
       Array#unshift:      191.6 i/s
        Array#insert:        1.4 i/s - 134.00x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.084M i/100ms
          Array#size     2.049M i/100ms
         Array#count     1.638M i/100ms
Calculating -------------------------------------
        Array#length     20.838M (± 0.4%) i/s -    104.191M in   5.000280s
          Array#size     20.545M (± 0.3%) i/s -    104.478M in   5.085284s
         Array#count     16.457M (± 0.6%) i/s -     83.521M in   5.075209s

Comparison:
        Array#length: 20837512.8 i/s
          Array#size: 20545369.8 i/s - 1.01x  (± 0.00) slower
         Array#count: 16457320.3 i/s - 1.27x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.556k i/100ms
        Array#sample     1.047M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    456.892k (± 0.6%) i/s -      2.323M in   5.085309s
        Array#sample     10.365M (± 1.6%) i/s -     52.348M in   5.051880s

Comparison:
        Array#sample: 10365189.1 i/s
 Array#shuffle.first:   456892.1 i/s - 22.69x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    64.265k i/100ms
          Date.parse    32.625k i/100ms
Calculating -------------------------------------
        Date.iso8601    645.831k (± 0.7%) i/s -      3.278M in   5.075119s
          Date.parse    323.389k (± 1.5%) i/s -      1.631M in   5.045486s

Comparison:
        Date.iso8601:   645830.8 i/s
          Date.parse:   323389.2 i/s - 2.00x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.878k i/100ms
           Array#map    26.774k i/100ms
Calculating -------------------------------------
   Array#each + push    187.899k (± 1.2%) i/s -    943.900k in   5.024175s
           Array#map    267.126k (± 0.6%) i/s -      1.339M in   5.011712s

Comparison:
           Array#map:   267125.7 i/s
   Array#each + push:   187898.8 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            For loop    29.240k i/100ms
               #each    32.385k i/100ms
Calculating -------------------------------------
            For loop    290.052k (± 0.5%) i/s -      1.462M in   5.040611s
               #each    324.728k (± 0.4%) i/s -      1.652M in   5.086300s

Comparison:
               #each:   324728.1 i/s
            For loop:   290052.1 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.488k i/100ms
     each_with_index    18.979k i/100ms
Calculating -------------------------------------
          While Loop    274.107k (± 0.4%) i/s -      1.374M in   5.014172s
     each_with_index    190.791k (± 0.6%) i/s -    967.929k in   5.073394s

Comparison:
          While Loop:   274107.3 i/s
     each_with_index:   190791.3 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    93.386k i/100ms
      inject to_proc     1.977k i/100ms
        inject block     1.799k i/100ms
Calculating -------------------------------------
       inject symbol    957.954k (± 9.5%) i/s -      4.763M in   5.005768s
      inject to_proc     19.773k (± 0.5%) i/s -    100.827k in   5.099463s
        inject block     17.975k (± 0.8%) i/s -     89.950k in   5.004644s

Comparison:
       inject symbol:   957954.3 i/s
      inject to_proc:    19772.6 i/s - 48.45x  (± 0.00) slower
        inject block:    17974.6 i/s - 53.29x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.920k i/100ms
   Array#map.flatten     4.014k i/100ms
      Array#flat_map     9.723k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     69.300k (± 0.6%) i/s -    352.920k in   5.092832s
   Array#map.flatten     39.684k (± 0.7%) i/s -    200.700k in   5.057711s
      Array#flat_map     97.102k (± 0.5%) i/s -    486.150k in   5.006740s

Comparison:
      Array#flat_map:    97101.6 i/s
Array#map.flatten(1):    69300.0 i/s - 1.40x  (± 0.00) slower
   Array#map.flatten:    39684.0 i/s - 2.45x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    30.777k i/100ms
  Array#reverse_each    32.314k i/100ms
Calculating -------------------------------------
  Array#reverse.each    310.020k (± 0.5%) i/s -      1.570M in   5.063115s
  Array#reverse_each    323.549k (± 0.4%) i/s -      1.648M in   5.093632s

Comparison:
  Array#reverse_each:   323548.6 i/s
  Array#reverse.each:   310019.7 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.866k i/100ms
   Enumerable#detect    83.432k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        208.842k (± 0.3%) i/s -      4.194M in  20.082658s
   Enumerable#detect    834.216k (± 0.7%) i/s -     16.686M in  20.003457s

Comparison:
   Enumerable#detect:   834215.7 i/s
Enumerable#select.first:   208842.1 i/s - 3.99x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       239.082k i/100ms
Enumerable#select.last
                        18.980k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.419M (± 0.7%) i/s -     12.193M in   5.041767s
Enumerable#select.last
                        188.614k (± 0.4%) i/s -    949.000k in   5.031524s

Comparison:
Enumerable#reverse.detect:  2418570.2 i/s
Enumerable#select.last:   188614.1 i/s - 12.82x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         5.068k i/100ms
  Enumerable#sort_by     4.598k i/100ms
     Enumerable#sort     2.539k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         51.086k (± 0.8%) i/s -    258.468k in   5.059746s
  Enumerable#sort_by     48.479k (± 1.3%) i/s -    243.694k in   5.027709s
     Enumerable#sort     24.527k (± 0.6%) i/s -    124.411k in   5.072523s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    51086.2 i/s
  Enumerable#sort_by:    48478.6 i/s - 1.05x  (± 0.00) slower
     Enumerable#sort:    24527.3 i/s - 2.08x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.954k i/100ms
Enumerable#sort_by...first
                         8.641k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    179.543k (± 1.1%) i/s -    897.700k in   5.000532s
Enumerable#sort_by...first
                         85.758k (± 0.7%) i/s -    432.050k in   5.038220s

Comparison:
   Enumerable#min_by:   179542.6 i/s
Enumerable#sort_by...first:    85758.2 i/s - 2.09x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   403.779k i/100ms
            Hash#dup   293.889k i/100ms
Calculating -------------------------------------
              Hash[]      4.062M (± 2.5%) i/s -     20.593M in   5.073330s
            Hash#dup      3.019M (± 7.3%) i/s -     15.282M in   5.093242s

Comparison:
              Hash[]:  4061734.2 i/s
            Hash#dup:  3018589.2 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.403M i/100ms
  Hash#fetch, symbol     1.189M i/100ms
     Hash#[], string     1.222M i/100ms
  Hash#fetch, string   798.808k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.017M (± 0.4%) i/s -     70.174M in   5.006552s
  Hash#fetch, symbol     11.890M (± 0.6%) i/s -     60.618M in   5.098254s
     Hash#[], string     12.216M (± 0.3%) i/s -     61.091M in   5.000817s
  Hash#fetch, string      7.992M (± 0.6%) i/s -     40.739M in   5.097697s

Comparison:
     Hash#[], symbol: 14016659.0 i/s
     Hash#[], string: 12216335.9 i/s - 1.15x  (± 0.00) slower
  Hash#fetch, symbol: 11890487.3 i/s - 1.18x  (± 0.00) slower
  Hash#fetch, string:  7991938.5 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   867.927k i/100ms
             Hash#[]     1.016M i/100ms
          Hash#[] ||   904.015k i/100ms
          Hash#[] &&   389.976k i/100ms
          Hash#fetch   611.793k i/100ms
 Hash#fetch fallback   391.062k i/100ms
Calculating -------------------------------------
            Hash#dig      8.658M (± 1.0%) i/s -     43.396M in   5.012867s
             Hash#[]      9.923M (± 2.3%) i/s -     49.768M in   5.018487s
          Hash#[] ||      9.442M (± 1.4%) i/s -     47.913M in   5.075679s
          Hash#[] &&      3.893M (± 1.3%) i/s -     19.499M in   5.009698s
          Hash#fetch      6.074M (± 0.9%) i/s -     30.590M in   5.036931s
 Hash#fetch fallback      3.878M (± 0.9%) i/s -     19.553M in   5.042514s

Comparison:
             Hash#[]:  9922768.7 i/s
          Hash#[] ||:  9441523.1 i/s - 1.05x  (± 0.00) slower
            Hash#dig:  8657844.1 i/s - 1.15x  (± 0.00) slower
          Hash#fetch:  6073587.1 i/s - 1.63x  (± 0.00) slower
          Hash#[] &&:  3892862.0 i/s - 2.55x  (± 0.00) slower
 Hash#fetch fallback:  3877960.6 i/s - 2.56x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.424M i/100ms
  Hash#fetch + block     1.439M i/100ms
    Hash#fetch + arg     1.096M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.147M (± 0.1%) i/s -     71.200M in   5.032779s
  Hash#fetch + block     14.401M (± 1.2%) i/s -     73.392M in   5.097247s
    Hash#fetch + arg     10.863M (± 0.4%) i/s -     54.799M in   5.044642s

Comparison:
  Hash#fetch + block: 14400597.5 i/s
  Hash#fetch + const: 14147225.4 i/s - 1.02x  (± 0.00) slower
    Hash#fetch + arg: 10862978.0 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.815k i/100ms
         sort + to_h    11.127k i/100ms
Calculating -------------------------------------
      sort_by + to_h    277.865k (± 1.3%) i/s -      1.391M in   5.006079s
         sort + to_h    111.522k (± 1.8%) i/s -    567.477k in   5.090158s

Comparison:
      sort_by + to_h:   277865.0 i/s
         sort + to_h:   111522.0 i/s - 2.49x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   192.588k i/100ms
       Hash#each_key   175.252k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.926M (± 0.7%) i/s -      9.822M in   5.100263s
       Hash#each_key      1.789M (± 0.8%) i/s -      9.113M in   5.092968s

Comparison:
      Hash#keys.each:  1925869.5 i/s
       Hash#each_key:  1789451.7 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.485k i/100ms
           Hash#key?   939.632k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     14.674k (± 3.5%) i/s -     74.250k in   5.066871s
           Hash#key?      9.351M (± 3.9%) i/s -     46.982M in   5.033958s

Comparison:
           Hash#key?:  9351226.5 i/s
  Hash#keys.include?:    14674.4 i/s - 637.25x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.044k i/100ms
            Hash#[]=    10.372k i/100ms
Calculating -------------------------------------
         Hash#merge!     40.168k (± 0.8%) i/s -    202.200k in   5.034184s
            Hash#[]=    103.528k (± 0.9%) i/s -    518.600k in   5.009685s

Comparison:
            Hash#[]=:   103528.2 i/s
         Hash#merge!:    40167.8 i/s - 2.58x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.840k i/100ms
      Hash#merge({})     3.996k i/100ms
 Hash#dup#merge!({})     2.916k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         47.476k (± 0.3%) i/s -    242.000k in   5.097379s
      Hash#merge({})     39.775k (± 0.3%) i/s -    199.800k in   5.023359s
 Hash#dup#merge!({})     28.902k (± 0.6%) i/s -    145.800k in   5.044754s

Comparison:
{}#merge!(Hash) do end:    47475.9 i/s
      Hash#merge({}):    39774.5 i/s - 1.19x  (± 0.00) slower
 Hash#dup#merge!({}):    28902.3 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   367.877k i/100ms
          Hash#merge   352.489k i/100ms
Calculating -------------------------------------
        Hash#**other      3.746M (± 0.6%) i/s -     18.762M in   5.008244s
          Hash#merge      3.516M (± 0.8%) i/s -     17.624M in   5.013587s

Comparison:
        Hash#**other:  3746286.2 i/s
          Hash#merge:  3515582.2 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.652k i/100ms
         Hash#merge!     4.030k i/100ms
Calculating -------------------------------------
          Hash#merge     16.741k (± 2.1%) i/s -     84.252k in   5.035075s
         Hash#merge!     39.696k (± 0.4%) i/s -    201.500k in   5.076163s

Comparison:
         Hash#merge!:    39695.9 i/s
          Hash#merge:    16740.6 i/s - 2.37x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      419.748k i/100ms
Array#each             230.010k i/100ms
Array#each_w/_object   174.843k i/100ms
Hash#select-include     71.522k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.207M (± 1.1%) i/s -     21.407M in   5.088654s
Array#each                2.304M (± 0.6%) i/s -     11.731M in   5.091066s
Array#each_w/_object      1.725M (± 0.5%) i/s -      8.742M in   5.066980s
Hash#select-include     695.297k (± 2.5%) i/s -      3.505M in   5.043694s

Comparison:
Hash#native-slice   :  4207375.7 i/s
Array#each          :  2304208.3 i/s - 1.83x  (± 0.00) slower
Array#each_w/_object:  1725367.3 i/s - 2.44x  (± 0.00) slower
Hash#select-include :   695297.0 i/s - 6.05x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.123k i/100ms
         Hash#value?   848.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     10.850k (± 3.3%) i/s -     55.027k in   5.078170s
         Hash#value?      8.453k (± 0.5%) i/s -     42.400k in   5.016283s

Comparison:
Hash#values.include?:    10849.6 i/s
         Hash#value?:     8452.7 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                call   656.802k i/100ms
                send   523.893k i/100ms
      method_missing   386.942k i/100ms
Calculating -------------------------------------
                call      6.699M (± 0.4%) i/s -     33.497M in   5.000489s
                send      5.235M (± 1.0%) i/s -     26.195M in   5.004148s
      method_missing      3.859M (± 0.9%) i/s -     19.347M in   5.014418s

Comparison:
                call:  6698856.2 i/s
                send:  5235174.8 i/s - 1.28x  (± 0.00) slower
      method_missing:  3858612.6 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
               Block     9.098k i/100ms
      Symbol#to_proc    10.264k i/100ms
Calculating -------------------------------------
               Block     90.944k (± 0.3%) i/s -    454.900k in   5.002018s
      Symbol#to_proc    102.679k (± 0.4%) i/s -    523.464k in   5.098140s

Comparison:
      Symbol#to_proc:   102679.1 i/s
               Block:    90944.3 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          block.call   943.789k i/100ms
       block + yield     1.001M i/100ms
        unused block     1.308M i/100ms
               yield     1.189M i/100ms
Calculating -------------------------------------
          block.call      9.430M (± 0.3%) i/s -     47.189M in   5.004492s
       block + yield     10.010M (± 0.4%) i/s -     51.037M in   5.098718s
        unused block     13.088M (± 1.4%) i/s -     66.712M in   5.098112s
               yield     11.877M (± 0.2%) i/s -     59.438M in   5.004495s

Comparison:
        unused block: 13088493.5 i/s
               yield: 11877029.6 i/s - 1.10x  (± 0.00) slower
       block + yield: 10009940.5 i/s - 1.31x  (± 0.00) slower
          block.call:  9429507.8 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   329.170k i/100ms
      range#include?    12.517k i/100ms
       range#member?    12.404k i/100ms
       plain compare   525.400k i/100ms
Calculating -------------------------------------
        range#cover?      3.222M (± 1.7%) i/s -     16.129M in   5.006639s
      range#include?    125.412k (± 1.1%) i/s -    638.367k in   5.090796s
       range#member?    123.940k (± 4.2%) i/s -    620.200k in   5.016149s
       plain compare      5.253M (± 0.5%) i/s -     26.270M in   5.001091s

Comparison:
       plain compare:  5252976.1 i/s
        range#cover?:  3222471.7 i/s - 1.63x  (± 0.00) slower
      range#include?:   125411.6 i/s - 41.89x  (± 0.00) slower
       range#member?:   123939.5 i/s - 42.38x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       String#match?   913.847k i/100ms
           String#=~   651.435k i/100ms
          Regexp#===   551.005k i/100ms
        String#match   474.864k i/100ms
Calculating -------------------------------------
       String#match?      9.208M (± 0.4%) i/s -     46.606M in   5.061750s
           String#=~      6.468M (± 0.6%) i/s -     32.572M in   5.035941s
          Regexp#===      5.487M (± 3.0%) i/s -     27.550M in   5.026426s
        String#match      4.725M (± 0.6%) i/s -     23.743M in   5.025290s

Comparison:
       String#match?:  9207685.9 i/s
           String#=~:  6468071.9 i/s - 1.42x  (± 0.00) slower
          Regexp#===:  5487476.7 i/s - 1.68x  (± 0.00) slower
        String#match:  4724922.4 i/s - 1.95x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   653.717k i/100ms
      String#casecmp   810.853k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.540M (± 2.6%) i/s -     32.686M in   5.001574s
      String#casecmp      8.111M (± 0.5%) i/s -     41.354M in   5.098620s

Comparison:
      String#casecmp:  8110924.1 i/s
String#downcase + ==:  6540235.4 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            String#+   589.168k i/100ms
       String#concat   610.129k i/100ms
       String#append   648.304k i/100ms
         "foo" "bar"     1.135M i/100ms
  "#{'foo'}#{'bar'}"     1.171M i/100ms
Calculating -------------------------------------
            String#+      5.903M (± 0.4%) i/s -     30.048M in   5.090361s
       String#concat      6.101M (± 0.3%) i/s -     30.506M in   5.000109s
       String#append      6.512M (± 0.4%) i/s -     33.064M in   5.077080s
         "foo" "bar"     11.348M (± 0.8%) i/s -     56.769M in   5.002959s
  "#{'foo'}#{'bar'}"     11.714M (± 0.5%) i/s -     58.569M in   4.999906s

Comparison:
  "#{'foo'}#{'bar'}": 11714350.0 i/s
         "foo" "bar": 11347796.7 i/s - 1.03x  (± 0.00) slower
       String#append:  6512399.7 i/s - 1.80x  (± 0.00) slower
       String#concat:  6101226.4 i/s - 1.92x  (± 0.00) slower
            String#+:  5902922.1 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#+@   992.568k i/100ms
          String#dup   549.902k i/100ms
Calculating -------------------------------------
           String#+@     10.040M (± 0.2%) i/s -     50.621M in   5.042175s
          String#dup      5.492M (± 0.3%) i/s -     27.495M in   5.006205s

Comparison:
           String#+@: 10039567.8 i/s
          String#dup:  5492250.4 i/s - 1.83x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   187.757k i/100ms
       String#match?   430.779k i/100ms
    String#end_with?   629.386k i/100ms
Calculating -------------------------------------
           String#=~      1.891M (± 0.6%) i/s -      9.576M in   5.065017s
       String#match?      4.298M (± 0.7%) i/s -     21.539M in   5.011974s
    String#end_with?      6.295M (± 0.6%) i/s -     32.099M in   5.098830s

Comparison:
    String#end_with?:  6295496.4 i/s
       String#match?:  4297687.8 i/s - 1.46x  (± 0.00) slower
           String#=~:  1890618.0 i/s - 3.33x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   110.459k i/100ms
          String#sub   131.207k i/100ms
String#dup["string"]=
                       174.116k i/100ms
Calculating -------------------------------------
         String#gsub      1.128M (± 0.7%) i/s -      5.744M in   5.092046s
          String#sub      1.386M (± 0.3%) i/s -      6.954M in   5.015857s
String#dup["string"]=
                          1.768M (± 0.4%) i/s -      8.880M in   5.024052s

Comparison:
String#dup["string"]=:  1767503.7 i/s
          String#sub:  1386413.2 i/s - 1.27x  (± 0.00) slower
         String#gsub:  1128067.7 i/s - 1.57x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   105.782k i/100ms
           String#tr   349.335k i/100ms
Calculating -------------------------------------
         String#gsub      1.056M (± 0.5%) i/s -      5.289M in   5.008700s
           String#tr      3.490M (± 0.3%) i/s -     17.467M in   5.004625s

Comparison:
           String#tr:  3490149.6 i/s
         String#gsub:  1056013.7 i/s - 3.31x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.156M i/100ms
         With Freeze     1.685M i/100ms
Calculating -------------------------------------
      Without Freeze     11.599M (± 0.4%) i/s -     58.971M in   5.084093s
         With Freeze     16.891M (± 0.3%) i/s -     85.943M in   5.088054s

Comparison:
         With Freeze: 16891251.1 i/s
      Without Freeze: 11599328.1 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.410k i/100ms
      String#squeeze   154.343k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     34.004k (± 1.0%) i/s -    170.500k in   5.014675s
      String#squeeze      1.555M (± 1.0%) i/s -      7.871M in   5.061484s

Comparison:
      String#squeeze:  1555322.3 i/s
 String#gsub/regex+/:    34003.8 i/s - 45.74x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   286.933k i/100ms
       String#match?   759.358k i/100ms
  String#start_with?   881.854k i/100ms
Calculating -------------------------------------
           String#=~      2.874M (± 0.6%) i/s -     14.634M in   5.091058s
       String#match?      7.580M (± 1.0%) i/s -     37.968M in   5.009339s
  String#start_with?      8.752M (± 0.5%) i/s -     44.093M in   5.038272s

Comparison:
  String#start_with?:  8751774.9 i/s
       String#match?:  7580280.6 i/s - 1.15x  (± 0.00) slower
           String#=~:  2874470.8 i/s - 3.04x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   188.812k i/100ms
    String#[0, n] ==    81.319k i/100ms
   String#[RANGE] ==    75.821k i/100ms
   String#[0...n] ==    46.442k i/100ms
Calculating -------------------------------------
  String#start_with?      1.884M (± 0.9%) i/s -      9.441M in   5.012215s
    String#[0, n] ==    811.476k (± 1.2%) i/s -      4.066M in   5.011278s
   String#[RANGE] ==    745.490k (± 1.2%) i/s -      3.791M in   5.085995s
   String#[0...n] ==    463.961k (± 0.8%) i/s -      2.322M in   5.005238s

Comparison:
  String#start_with?:  1883686.0 i/s
    String#[0, n] ==:   811475.7 i/s - 2.32x  (± 0.00) slower
   String#[RANGE] ==:   745490.5 i/s - 2.53x  (± 0.00) slower
   String#[0...n] ==:   463960.9 i/s - 4.06x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   177.005k i/100ms
 String#sub!'string'   123.710k i/100ms
String#gsub!'string'    76.858k i/100ms
  String#[/regexp/]=   155.303k i/100ms
 String#sub!/regexp/   113.557k i/100ms
String#gsub!/regexp/    60.640k i/100ms
Calculating -------------------------------------
  String#['string']=      1.836M (± 0.6%) i/s -      9.204M in   5.013760s
 String#sub!'string'      1.248M (± 0.7%) i/s -      6.309M in   5.055658s
String#gsub!'string'    779.020k (± 0.7%) i/s -      3.920M in   5.031917s
  String#[/regexp/]=      1.565M (± 0.7%) i/s -      7.920M in   5.062862s
 String#sub!/regexp/      1.156M (± 1.0%) i/s -      5.791M in   5.011500s
String#gsub!/regexp/    618.781k (± 0.8%) i/s -      3.153M in   5.096277s

Comparison:
  String#['string']=:  1835856.4 i/s
  String#[/regexp/]=:  1564506.7 i/s - 1.17x  (± 0.00) slower
 String#sub!'string':  1248009.1 i/s - 1.47x  (± 0.00) slower
 String#sub!/regexp/:  1155733.3 i/s - 1.59x  (± 0.00) slower
String#gsub!'string':   779020.4 i/s - 2.36x  (± 0.00) slower
String#gsub!/regexp/:   618780.6 i/s - 2.97x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          String#sub   145.658k i/100ms
        String#chomp   549.474k i/100ms
String#delete_suffix   597.404k i/100ms
Calculating -------------------------------------
          String#sub      1.466M (± 0.6%) i/s -      7.429M in   5.069017s
        String#chomp      5.475M (± 0.7%) i/s -     27.474M in   5.018194s
String#delete_suffix      5.971M (± 0.4%) i/s -     29.870M in   5.002537s

Comparison:
String#delete_suffix:  5971089.8 i/s
        String#chomp:  5475084.3 i/s - 1.09x  (± 0.00) slower
          String#sub:  1465535.4 i/s - 4.07x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   612.146k i/100ms
          String#sub   151.082k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.097M (± 0.5%) i/s -     30.607M in   5.020232s
          String#sub      1.525M (± 0.3%) i/s -      7.705M in   5.054124s

Comparison:
String#delete_prefix:  6096945.6 i/s
          String#sub:  1524543.3 i/s - 4.00x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   626.482k i/100ms
    String#unpack[0]   468.811k i/100ms
Calculating -------------------------------------
      String#unpack1      6.271M (± 0.4%) i/s -     31.951M in   5.094909s
    String#unpack[0]      4.671M (± 0.4%) i/s -     23.441M in   5.018831s

Comparison:
      String#unpack1:  6271176.9 i/s
    String#unpack[0]:  4670593.5 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.812k i/100ms
          Time.parse     9.374k i/100ms
Calculating -------------------------------------
        Time.iso8601    275.890k (± 0.7%) i/s -      1.391M in   5.040653s
          Time.parse     93.682k (± 0.6%) i/s -    468.700k in   5.003286s

Comparison:
        Time.iso8601:   275890.0 i/s
          Time.parse:    93682.0 i/s - 2.94x  (± 0.00) slower

