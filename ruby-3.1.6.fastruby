$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       771.973k i/100ms
Function with splat arguments
                        24.188k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.691M (± 1.9%) i/s -     38.599M in   5.020873s
Function with splat arguments
                        246.380k (± 5.0%) i/s -      1.234M in   5.024437s

Comparison:
Function with single Array argument:  7690770.4 i/s
Function with splat arguments:   246380.0 i/s - 31.22x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.022M i/100ms
Sequential Assignment
                         1.003M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.209M (± 0.6%) i/s -     51.110M in   5.006545s
Sequential Assignment
                         10.061M (± 0.2%) i/s -     51.167M in   5.085747s

Comparison:
 Parallel Assignment: 10209027.0 i/s
Sequential Assignment: 10060909.0 i/s - 1.01x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   475.752k i/100ms
       attr_accessor   554.409k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.802M (± 0.4%) i/s -     24.263M in   5.053177s
       attr_accessor      5.619M (± 0.4%) i/s -     28.275M in   5.032419s

Comparison:
       attr_accessor:  5618644.3 i/s
   getter_and_setter:  4801698.1 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    88.064k i/100ms
         respond_to?   773.592k i/100ms
Calculating -------------------------------------
      begin...rescue    893.631k (± 1.3%) i/s -      4.491M in   5.026747s
         respond_to?      7.719M (± 0.5%) i/s -     38.680M in   5.010911s

Comparison:
         respond_to?:  7719288.0 i/s
      begin...rescue:   893631.4 i/s - 8.64x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              normal   300.383k i/100ms
             &method   122.233k i/100ms
Calculating -------------------------------------
              normal      3.008M (± 0.4%) i/s -     15.320M in   5.092512s
             &method      1.226M (± 0.5%) i/s -      6.234M in   5.083290s

Comparison:
              normal:  3008299.6 i/s
             &method:  1226379.2 i/s - 2.45x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       260.000  i/100ms
       define_method   292.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.311k (±22.5%) i/s -     10.400k in   5.061143s
       define_method      3.273k (±19.7%) i/s -     14.892k in   5.062130s

Comparison:
       define_method:     3272.5 i/s
module_eval with string:     2311.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Float#round   260.176k i/100ms
       Kernel#format   203.613k i/100ms
            String#%   171.588k i/100ms
Calculating -------------------------------------
         Float#round      2.600M (± 2.8%) i/s -     13.009M in   5.008800s
       Kernel#format      2.031M (± 0.4%) i/s -     10.181M in   5.011921s
            String#%      1.726M (± 0.6%) i/s -      8.751M in   5.069047s

Comparison:
         Float#round:  2599536.9 i/s
       Kernel#format:  2031319.3 i/s - 1.28x  (± 0.00) slower
            String#%:  1726427.0 i/s - 1.51x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash   906.072k i/100ms
          OpenStruct   508.655k i/100ms
Calculating -------------------------------------
                Hash      9.195M (± 0.4%) i/s -     46.210M in   5.025419s
          OpenStruct      5.057M (± 0.5%) i/s -     25.433M in   5.029127s

Comparison:
                Hash:  9195320.7 i/s
          OpenStruct:  5057194.7 i/s - 1.82x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.117M i/100ms
          OpenStruct     9.951k i/100ms
Calculating -------------------------------------
                Hash     11.128M (± 0.4%) i/s -     55.837M in   5.017588s
          OpenStruct     98.065k (± 2.3%) i/s -    497.550k in   5.076427s

Comparison:
                Hash: 11128452.2 i/s
          OpenStruct:    98064.8 i/s - 113.48x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   580.492k i/100ms
  ancestors.include?   119.057k i/100ms
Calculating -------------------------------------
  less than or equal      5.614M (± 0.8%) i/s -     28.444M in   5.066943s
  ancestors.include?      1.191M (± 0.5%) i/s -      6.072M in   5.099142s

Comparison:
  less than or equal:  5614046.2 i/s
  ancestors.include?:  1190804.3 i/s - 4.71x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.702  (± 0.0%) i/s -      4.000  in   5.711347s
         Kernel loop      0.227  (± 0.0%) i/s -      2.000  in   8.792422s

Comparison:
          While Loop:        0.7 i/s
         Kernel loop:        0.2 i/s - 3.09x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.571M i/100ms
         Array#first     1.327M i/100ms
Calculating -------------------------------------
           Array#[0]     15.715M (± 0.2%) i/s -     80.137M in   5.099415s
         Array#first     13.261M (± 0.4%) i/s -     66.340M in   5.002740s

Comparison:
           Array#[0]: 15714947.6 i/s
         Array#first: 13260982.9 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.483M i/100ms
          Array#last     1.332M i/100ms
Calculating -------------------------------------
          Array#[-1]     14.857M (± 0.5%) i/s -     75.633M in   5.090775s
          Array#last     13.307M (± 0.6%) i/s -     66.593M in   5.004621s

Comparison:
          Array#[-1]: 14857243.7 i/s
          Array#last: 13306712.2 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    99.498k i/100ms
Calculating -------------------------------------
                find      0.269  (± 0.0%) i/s -      2.000  in   7.424698s
             bsearch    993.325k (± 1.4%) i/s -      4.975M in   5.009308s

Comparison:
             bsearch:   993324.8 i/s
                find:        0.3 i/s - 3687562.79x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    19.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    196.147  (± 3.1%) i/s -    988.000  in   5.041288s
        Array#insert      1.442  (± 0.0%) i/s -      8.000  in   5.546189s

Comparison:
       Array#unshift:      196.1 i/s
        Array#insert:        1.4 i/s - 135.98x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.093M i/100ms
          Array#size     2.105M i/100ms
         Array#count     1.624M i/100ms
Calculating -------------------------------------
        Array#length     20.893M (± 0.7%) i/s -    104.654M in   5.009361s
          Array#size     21.004M (± 0.5%) i/s -    105.275M in   5.012157s
         Array#count     16.061M (± 0.5%) i/s -     81.190M in   5.055253s

Comparison:
          Array#size: 21004398.0 i/s
        Array#length: 20892579.6 i/s - same-ish: difference falls within error
         Array#count: 16060929.8 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    46.188k i/100ms
        Array#sample     1.020M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    461.209k (± 0.4%) i/s -      2.309M in   5.007381s
        Array#sample     10.223M (± 0.4%) i/s -     52.008M in   5.087635s

Comparison:
        Array#sample: 10222572.1 i/s
 Array#shuffle.first:   461208.6 i/s - 22.16x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    64.982k i/100ms
          Date.parse    32.622k i/100ms
Calculating -------------------------------------
        Date.iso8601    651.845k (± 1.2%) i/s -      3.314M in   5.084988s
          Date.parse    322.370k (± 3.6%) i/s -      1.631M in   5.067959s

Comparison:
        Date.iso8601:   651845.2 i/s
          Date.parse:   322369.9 i/s - 2.02x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.667k i/100ms
           Array#map    27.009k i/100ms
Calculating -------------------------------------
   Array#each + push    188.142k (± 0.6%) i/s -    952.017k in   5.060301s
           Array#map    270.401k (± 0.5%) i/s -      1.377M in   5.094271s

Comparison:
           Array#map:   270401.4 i/s
   Array#each + push:   188142.1 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            For loop    29.742k i/100ms
               #each    31.697k i/100ms
Calculating -------------------------------------
            For loop    297.254k (± 0.5%) i/s -      1.487M in   5.002941s
               #each    322.957k (± 0.7%) i/s -      1.617M in   5.005688s

Comparison:
               #each:   322956.5 i/s
            For loop:   297253.7 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.564k i/100ms
     each_with_index    18.753k i/100ms
Calculating -------------------------------------
          While Loop    273.836k (± 0.3%) i/s -      1.378M in   5.032999s
     each_with_index    187.541k (± 0.4%) i/s -    956.403k in   5.099792s

Comparison:
          While Loop:   273835.8 i/s
     each_with_index:   187541.3 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       inject symbol   130.005k i/100ms
      inject to_proc     2.206k i/100ms
        inject block     2.083k i/100ms
Calculating -------------------------------------
       inject symbol      1.196M (±13.3%) i/s -      5.980M in   5.107342s
      inject to_proc     22.080k (± 0.4%) i/s -    112.506k in   5.095555s
        inject block     20.933k (± 3.2%) i/s -    106.233k in   5.081061s

Comparison:
       inject symbol:  1195895.6 i/s
      inject to_proc:    22079.7 i/s - 54.16x  (± 0.00) slower
        inject block:    20933.0 i/s - 57.13x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.907k i/100ms
   Array#map.flatten     3.997k i/100ms
      Array#flat_map     9.665k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     69.450k (± 0.5%) i/s -    352.257k in   5.072216s
   Array#map.flatten     39.750k (± 1.3%) i/s -    199.850k in   5.028559s
      Array#flat_map     95.697k (± 0.4%) i/s -    483.250k in   5.049865s

Comparison:
      Array#flat_map:    95697.2 i/s
Array#map.flatten(1):    69450.4 i/s - 1.38x  (± 0.00) slower
   Array#map.flatten:    39750.2 i/s - 2.41x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    31.725k i/100ms
  Array#reverse_each    32.420k i/100ms
Calculating -------------------------------------
  Array#reverse.each    316.309k (± 0.7%) i/s -      1.586M in   5.015157s
  Array#reverse_each    324.806k (± 0.5%) i/s -      1.653M in   5.090626s

Comparison:
  Array#reverse_each:   324806.3 i/s
  Array#reverse.each:   316308.6 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        21.057k i/100ms
   Enumerable#detect    82.094k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        209.984k (± 0.8%) i/s -      4.211M in  20.057037s
   Enumerable#detect    835.574k (± 0.9%) i/s -     16.747M in  20.044194s

Comparison:
   Enumerable#detect:   835574.0 i/s
Enumerable#select.first:   209983.6 i/s - 3.98x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       242.034k i/100ms
Enumerable#select.last
                        18.661k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.401M (± 1.0%) i/s -     12.102M in   5.039761s
Enumerable#select.last
                        184.926k (± 0.4%) i/s -    933.050k in   5.045616s

Comparison:
Enumerable#reverse.detect:  2401471.6 i/s
Enumerable#select.last:   184926.2 i/s - 12.99x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         5.005k i/100ms
  Enumerable#sort_by     4.913k i/100ms
     Enumerable#sort     2.443k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         50.307k (± 2.8%) i/s -    255.255k in   5.078350s
  Enumerable#sort_by     50.090k (± 0.9%) i/s -    250.563k in   5.002674s
     Enumerable#sort     24.749k (± 0.5%) i/s -    124.593k in   5.034315s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    50306.6 i/s
  Enumerable#sort_by:    50090.2 i/s - same-ish: difference falls within error
     Enumerable#sort:    24749.4 i/s - 2.03x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    18.108k i/100ms
Enumerable#sort_by...first
                         8.766k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    181.351k (± 0.2%) i/s -    923.508k in   5.092390s
Enumerable#sort_by...first
                         87.205k (± 0.8%) i/s -    438.300k in   5.026437s

Comparison:
   Enumerable#min_by:   181351.1 i/s
Enumerable#sort_by...first:    87204.6 i/s - 2.08x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   408.813k i/100ms
            Hash#dup   305.136k i/100ms
Calculating -------------------------------------
              Hash[]      4.096M (± 2.0%) i/s -     20.849M in   5.092080s
            Hash#dup      3.074M (± 1.3%) i/s -     15.562M in   5.063158s

Comparison:
              Hash[]:  4096101.0 i/s
            Hash#dup:  3074108.4 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.430M i/100ms
  Hash#fetch, symbol     1.177M i/100ms
     Hash#[], string     1.231M i/100ms
  Hash#fetch, string   787.581k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.299M (± 0.5%) i/s -     71.505M in   5.000877s
  Hash#fetch, symbol     11.661M (± 0.6%) i/s -     58.864M in   5.048291s
     Hash#[], string     12.362M (± 0.5%) i/s -     62.795M in   5.079709s
  Hash#fetch, string      7.857M (± 0.4%) i/s -     39.379M in   5.011839s

Comparison:
     Hash#[], symbol: 14298792.3 i/s
     Hash#[], string: 12362203.1 i/s - 1.16x  (± 0.00) slower
  Hash#fetch, symbol: 11660607.1 i/s - 1.23x  (± 0.00) slower
  Hash#fetch, string:  7857347.8 i/s - 1.82x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   870.199k i/100ms
             Hash#[]     1.017M i/100ms
          Hash#[] ||   924.561k i/100ms
          Hash#[] &&   385.148k i/100ms
          Hash#fetch   600.845k i/100ms
 Hash#fetch fallback   397.841k i/100ms
Calculating -------------------------------------
            Hash#dig      8.595M (± 0.6%) i/s -     43.510M in   5.062153s
             Hash#[]     10.027M (± 2.5%) i/s -     50.870M in   5.076569s
          Hash#[] ||      9.418M (± 3.7%) i/s -     47.153M in   5.014382s
          Hash#[] &&      3.890M (± 3.0%) i/s -     19.643M in   5.054132s
          Hash#fetch      5.890M (± 0.8%) i/s -     30.042M in   5.101123s
 Hash#fetch fallback      3.947M (± 1.1%) i/s -     19.892M in   5.040266s

Comparison:
             Hash#[]: 10027368.7 i/s
          Hash#[] ||:  9417807.5 i/s - 1.06x  (± 0.00) slower
            Hash#dig:  8595449.5 i/s - 1.17x  (± 0.00) slower
          Hash#fetch:  5889723.1 i/s - 1.70x  (± 0.00) slower
 Hash#fetch fallback:  3947101.2 i/s - 2.54x  (± 0.00) slower
          Hash#[] &&:  3889920.6 i/s - 2.58x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.455M i/100ms
  Hash#fetch + block     1.454M i/100ms
    Hash#fetch + arg     1.093M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.637M (± 0.4%) i/s -     74.219M in   5.070619s
  Hash#fetch + block     14.553M (± 1.2%) i/s -     74.162M in   5.096876s
    Hash#fetch + arg     10.866M (± 3.2%) i/s -     54.669M in   5.036798s

Comparison:
  Hash#fetch + const: 14637207.2 i/s
  Hash#fetch + block: 14552665.0 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 10866274.0 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.789k i/100ms
         sort + to_h    11.452k i/100ms
Calculating -------------------------------------
      sort_by + to_h    279.775k (± 0.4%) i/s -      1.417M in   5.065706s
         sort + to_h    113.571k (± 3.9%) i/s -    572.600k in   5.051019s

Comparison:
      sort_by + to_h:   279775.0 i/s
         sort + to_h:   113570.9 i/s - 2.46x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   189.842k i/100ms
       Hash#each_key   208.112k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.897M (± 1.2%) i/s -      9.492M in   5.004785s
       Hash#each_key      2.058M (± 0.6%) i/s -     10.406M in   5.057297s

Comparison:
       Hash#each_key:  2057622.3 i/s
      Hash#keys.each:  1896909.7 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.713k i/100ms
           Hash#key?   912.227k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     16.970k (± 5.1%) i/s -     85.650k in   5.061835s
           Hash#key?      9.151M (± 0.6%) i/s -     46.524M in   5.083951s

Comparison:
           Hash#key?:  9151373.5 i/s
  Hash#keys.include?:    16970.3 i/s - 539.26x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.987k i/100ms
            Hash#[]=    10.304k i/100ms
Calculating -------------------------------------
         Hash#merge!     40.247k (± 0.5%) i/s -    203.337k in   5.052411s
            Hash#[]=    104.725k (± 0.9%) i/s -    525.504k in   5.018384s

Comparison:
            Hash#[]=:   104725.2 i/s
         Hash#merge!:    40246.7 i/s - 2.60x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.701k i/100ms
      Hash#merge({})     3.995k i/100ms
 Hash#dup#merge!({})     2.908k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         47.275k (± 1.8%) i/s -    239.751k in   5.073167s
      Hash#merge({})     39.849k (± 0.2%) i/s -    199.750k in   5.012647s
 Hash#dup#merge!({})     29.086k (± 0.2%) i/s -    148.308k in   5.098904s

Comparison:
{}#merge!(Hash) do end:    47275.0 i/s
      Hash#merge({}):    39849.4 i/s - 1.19x  (± 0.00) slower
 Hash#dup#merge!({}):    29086.4 i/s - 1.63x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   392.708k i/100ms
          Hash#merge   370.200k i/100ms
Calculating -------------------------------------
        Hash#**other      3.964M (± 0.5%) i/s -     20.028M in   5.052026s
          Hash#merge      3.681M (± 0.3%) i/s -     18.510M in   5.028710s

Comparison:
        Hash#**other:  3964474.4 i/s
          Hash#merge:  3680906.5 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.537k i/100ms
         Hash#merge!     3.953k i/100ms
Calculating -------------------------------------
          Hash#merge     16.330k (± 1.4%) i/s -     82.998k in   5.083507s
         Hash#merge!     39.706k (± 1.5%) i/s -    201.603k in   5.078699s

Comparison:
         Hash#merge!:    39705.6 i/s
          Hash#merge:    16330.0 i/s - 2.43x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      422.462k i/100ms
Array#each             229.585k i/100ms
Array#each_w/_object   169.030k i/100ms
Hash#select-include     73.658k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.242M (± 0.5%) i/s -     21.546M in   5.078781s
Array#each                2.326M (± 0.5%) i/s -     11.709M in   5.034279s
Array#each_w/_object      1.759M (± 0.4%) i/s -      8.959M in   5.092752s
Hash#select-include     731.619k (± 0.9%) i/s -      3.683M in   5.034303s

Comparison:
Hash#native-slice   :  4242375.3 i/s
Array#each          :  2325879.5 i/s - 1.82x  (± 0.00) slower
Array#each_w/_object:  1759116.5 i/s - 2.41x  (± 0.00) slower
Hash#select-include :   731618.6 i/s - 5.80x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.090k i/100ms
         Hash#value?   849.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     11.046k (± 3.6%) i/s -     55.590k in   5.039902s
         Hash#value?      8.506k (± 0.2%) i/s -     43.299k in   5.090653s

Comparison:
Hash#values.include?:    11046.3 i/s
         Hash#value?:     8505.6 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                call   668.341k i/100ms
                send   525.812k i/100ms
      method_missing   383.567k i/100ms
Calculating -------------------------------------
                call      6.700M (± 0.5%) i/s -     34.085M in   5.087586s
                send      5.258M (± 0.3%) i/s -     26.291M in   5.000087s
      method_missing      3.807M (± 0.5%) i/s -     19.178M in   5.038067s

Comparison:
                call:  6699863.1 i/s
                send:  5258091.5 i/s - 1.27x  (± 0.00) slower
      method_missing:  3806781.2 i/s - 1.76x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
               Block     9.110k i/100ms
      Symbol#to_proc    10.411k i/100ms
Calculating -------------------------------------
               Block     92.152k (± 0.5%) i/s -    464.610k in   5.041896s
      Symbol#to_proc    103.714k (± 0.6%) i/s -    520.550k in   5.019309s

Comparison:
      Symbol#to_proc:   103713.7 i/s
               Block:    92152.0 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          block.call   926.514k i/100ms
       block + yield     1.003M i/100ms
        unused block     1.310M i/100ms
               yield     1.184M i/100ms
Calculating -------------------------------------
          block.call      9.267M (± 0.5%) i/s -     47.252M in   5.099086s
       block + yield     10.025M (± 0.4%) i/s -     50.156M in   5.003374s
        unused block     13.086M (± 0.2%) i/s -     65.477M in   5.003507s
               yield     11.870M (± 0.3%) i/s -     60.375M in   5.086479s

Comparison:
        unused block: 13086263.3 i/s
               yield: 11869808.9 i/s - 1.10x  (± 0.00) slower
       block + yield: 10024513.8 i/s - 1.31x  (± 0.00) slower
          block.call:  9267057.7 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   325.647k i/100ms
      range#include?    12.724k i/100ms
       range#member?    12.722k i/100ms
       plain compare   527.620k i/100ms
Calculating -------------------------------------
        range#cover?      3.262M (± 0.9%) i/s -     16.608M in   5.092380s
      range#include?    127.060k (± 0.6%) i/s -    636.200k in   5.007302s
       range#member?    126.983k (± 0.4%) i/s -    636.100k in   5.009397s
       plain compare      5.311M (± 0.4%) i/s -     26.909M in   5.066650s

Comparison:
       plain compare:  5311015.6 i/s
        range#cover?:  3261592.8 i/s - 1.63x  (± 0.00) slower
      range#include?:   127059.7 i/s - 41.80x  (± 0.00) slower
       range#member?:   126983.2 i/s - 41.82x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       String#match?   905.214k i/100ms
           String#=~   649.135k i/100ms
          Regexp#===   565.827k i/100ms
        String#match   473.113k i/100ms
Calculating -------------------------------------
       String#match?      9.017M (± 0.5%) i/s -     45.261M in   5.019508s
           String#=~      6.476M (± 0.6%) i/s -     32.457M in   5.012080s
          Regexp#===      5.653M (± 0.4%) i/s -     28.291M in   5.004501s
        String#match      4.737M (± 0.4%) i/s -     24.129M in   5.093738s

Comparison:
       String#match?:  9017180.6 i/s
           String#=~:  6475923.1 i/s - 1.39x  (± 0.00) slower
          Regexp#===:  5653256.4 i/s - 1.60x  (± 0.00) slower
        String#match:  4737041.8 i/s - 1.90x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   642.708k i/100ms
      String#casecmp   792.372k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.472M (± 0.3%) i/s -     32.778M in   5.064846s
      String#casecmp      7.850M (± 0.5%) i/s -     39.619M in   5.047330s

Comparison:
      String#casecmp:  7849629.2 i/s
String#downcase + ==:  6471746.0 i/s - 1.21x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            String#+   574.010k i/100ms
       String#concat   622.773k i/100ms
       String#append   672.035k i/100ms
         "foo" "bar"     1.164M i/100ms
  "#{'foo'}#{'bar'}"     1.180M i/100ms
Calculating -------------------------------------
            String#+      5.935M (± 2.5%) i/s -     29.849M in   5.032796s
       String#concat      6.224M (± 0.6%) i/s -     31.139M in   5.002883s
       String#append      6.738M (± 1.1%) i/s -     34.274M in   5.086987s
         "foo" "bar"     11.573M (± 0.4%) i/s -     58.177M in   5.026980s
  "#{'foo'}#{'bar'}"     11.791M (± 0.4%) i/s -     58.984M in   5.002415s

Comparison:
  "#{'foo'}#{'bar'}": 11791287.8 i/s
         "foo" "bar": 11573021.6 i/s - 1.02x  (± 0.00) slower
       String#append:  6738347.6 i/s - 1.75x  (± 0.00) slower
       String#concat:  6224402.9 i/s - 1.89x  (± 0.00) slower
            String#+:  5934773.1 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#+@     1.012M i/100ms
          String#dup   580.809k i/100ms
Calculating -------------------------------------
           String#+@     10.117M (± 0.2%) i/s -     50.600M in   5.001515s
          String#dup      5.788M (± 2.8%) i/s -     29.040M in   5.021705s

Comparison:
           String#+@: 10116887.9 i/s
          String#dup:  5788196.8 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   186.314k i/100ms
       String#match?   431.924k i/100ms
    String#end_with?   605.350k i/100ms
Calculating -------------------------------------
           String#=~      1.874M (± 0.7%) i/s -      9.502M in   5.069936s
       String#match?      4.323M (± 0.3%) i/s -     22.028M in   5.095236s
    String#end_with?      6.136M (± 0.3%) i/s -     30.873M in   5.031854s

Comparison:
    String#end_with?:  6135544.3 i/s
       String#match?:  4323328.1 i/s - 1.42x  (± 0.00) slower
           String#=~:  1874268.4 i/s - 3.27x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   113.385k i/100ms
          String#sub   141.293k i/100ms
String#dup["string"]=
                       181.077k i/100ms
Calculating -------------------------------------
         String#gsub      1.139M (± 1.0%) i/s -      5.783M in   5.079242s
          String#sub      1.421M (± 0.6%) i/s -      7.206M in   5.070514s
String#dup["string"]=
                          1.823M (± 0.7%) i/s -      9.235M in   5.066227s

Comparison:
String#dup["string"]=:  1822938.0 i/s
          String#sub:  1421199.3 i/s - 1.28x  (± 0.00) slower
         String#gsub:  1138591.3 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   105.449k i/100ms
           String#tr   341.591k i/100ms
Calculating -------------------------------------
         String#gsub      1.058M (± 0.6%) i/s -      5.378M in   5.084009s
           String#tr      3.400M (± 0.4%) i/s -     17.080M in   5.024139s

Comparison:
           String#tr:  3399560.9 i/s
         String#gsub:  1057840.5 i/s - 3.21x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.140M i/100ms
         With Freeze     1.655M i/100ms
Calculating -------------------------------------
      Without Freeze     11.374M (± 0.5%) i/s -     57.003M in   5.011625s
         With Freeze     16.541M (± 0.3%) i/s -     82.763M in   5.003564s

Comparison:
         With Freeze: 16540893.3 i/s
      Without Freeze: 11374399.9 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.465k i/100ms
      String#squeeze   156.495k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     34.548k (± 0.9%) i/s -    173.250k in   5.015081s
      String#squeeze      1.552M (± 2.8%) i/s -      7.825M in   5.045830s

Comparison:
      String#squeeze:  1552182.7 i/s
 String#gsub/regex+/:    34548.5 i/s - 44.93x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   282.805k i/100ms
       String#match?   757.337k i/100ms
  String#start_with?   872.251k i/100ms
Calculating -------------------------------------
           String#=~      2.887M (± 0.5%) i/s -     14.706M in   5.094322s
       String#match?      7.550M (± 0.8%) i/s -     37.867M in   5.015514s
  String#start_with?      8.742M (± 0.4%) i/s -     44.485M in   5.088490s

Comparison:
  String#start_with?:  8742403.5 i/s
       String#match?:  7550453.4 i/s - 1.16x  (± 0.00) slower
           String#=~:  2886794.8 i/s - 3.03x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   193.227k i/100ms
    String#[0, n] ==    81.760k i/100ms
   String#[RANGE] ==    77.074k i/100ms
   String#[0...n] ==    47.734k i/100ms
Calculating -------------------------------------
  String#start_with?      1.961M (± 0.6%) i/s -      9.855M in   5.026735s
    String#[0, n] ==    818.513k (± 0.6%) i/s -      4.170M in   5.094500s
   String#[RANGE] ==    755.124k (± 0.7%) i/s -      3.777M in   5.001561s
   String#[0...n] ==    464.944k (± 0.7%) i/s -      2.339M in   5.030921s

Comparison:
  String#start_with?:  1960507.1 i/s
    String#[0, n] ==:   818513.2 i/s - 2.40x  (± 0.00) slower
   String#[RANGE] ==:   755124.0 i/s - 2.60x  (± 0.00) slower
   String#[0...n] ==:   464943.6 i/s - 4.22x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   182.737k i/100ms
 String#sub!'string'   126.598k i/100ms
String#gsub!'string'    75.950k i/100ms
  String#[/regexp/]=   154.915k i/100ms
 String#sub!/regexp/   113.914k i/100ms
String#gsub!/regexp/    60.661k i/100ms
Calculating -------------------------------------
  String#['string']=      1.831M (± 0.5%) i/s -      9.320M in   5.090097s
 String#sub!'string'      1.270M (± 0.6%) i/s -      6.456M in   5.085731s
String#gsub!'string'    782.854k (± 0.6%) i/s -      3.949M in   5.045056s
  String#[/regexp/]=      1.552M (± 0.8%) i/s -      7.901M in   5.089479s
 String#sub!/regexp/      1.155M (± 0.3%) i/s -      5.810M in   5.030830s
String#gsub!/regexp/    606.582k (± 0.5%) i/s -      3.033M in   5.000340s

Comparison:
  String#['string']=:  1830962.5 i/s
  String#[/regexp/]=:  1552461.3 i/s - 1.18x  (± 0.00) slower
 String#sub!'string':  1269574.9 i/s - 1.44x  (± 0.00) slower
 String#sub!/regexp/:  1154814.4 i/s - 1.59x  (± 0.00) slower
String#gsub!'string':   782854.0 i/s - 2.34x  (± 0.00) slower
String#gsub!/regexp/:   606582.4 i/s - 3.02x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          String#sub   144.517k i/100ms
        String#chomp   553.365k i/100ms
String#delete_suffix   617.472k i/100ms
Calculating -------------------------------------
          String#sub      1.447M (± 0.3%) i/s -      7.370M in   5.093731s
        String#chomp      5.672M (± 0.6%) i/s -     28.775M in   5.073259s
String#delete_suffix      6.160M (± 0.2%) i/s -     30.874M in   5.011936s

Comparison:
String#delete_suffix:  6160041.8 i/s
        String#chomp:  5672090.7 i/s - 1.09x  (± 0.00) slower
          String#sub:  1446962.9 i/s - 4.26x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   610.003k i/100ms
          String#sub   147.212k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.259M (± 0.5%) i/s -     31.720M in   5.068292s
          String#sub      1.485M (± 0.6%) i/s -      7.508M in   5.056219s

Comparison:
String#delete_prefix:  6258715.3 i/s
          String#sub:  1484916.5 i/s - 4.21x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   619.759k i/100ms
    String#unpack[0]   486.151k i/100ms
Calculating -------------------------------------
      String#unpack1      6.175M (± 2.9%) i/s -     30.988M in   5.023429s
    String#unpack[0]      4.847M (± 0.9%) i/s -     24.308M in   5.015105s

Comparison:
      String#unpack1:  6174648.0 i/s
    String#unpack[0]:  4847253.2 i/s - 1.27x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.762k i/100ms
          Time.parse     9.362k i/100ms
Calculating -------------------------------------
        Time.iso8601    277.373k (± 0.6%) i/s -      1.388M in   5.004632s
          Time.parse     93.597k (± 4.0%) i/s -    468.100k in   5.011349s

Comparison:
        Time.iso8601:   277372.9 i/s
          Time.parse:    93597.0 i/s - 2.96x  (± 0.00) slower

