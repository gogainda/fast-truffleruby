$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       772.854k i/100ms
Function with splat arguments
                        19.240k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.781M (± 0.6%) i/s -     39.416M in   5.065642s
Function with splat arguments
                        191.721k (± 9.0%) i/s -    962.000k in   5.062241s

Comparison:
Function with single Array argument:  7781261.2 i/s
Function with splat arguments:   191721.1 i/s - 40.59x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.013M i/100ms
Sequential Assignment
                         1.016M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.135M (± 0.3%) i/s -     51.644M in   5.095705s
Sequential Assignment
                          9.767M (± 2.7%) i/s -     49.783M in   5.100913s

Comparison:
 Parallel Assignment: 10134890.4 i/s
Sequential Assignment:  9766503.7 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   478.891k i/100ms
       attr_accessor   557.140k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.820M (± 0.5%) i/s -     24.423M in   5.067478s
       attr_accessor      5.512M (± 0.5%) i/s -     27.857M in   5.054018s

Comparison:
       attr_accessor:  5511992.4 i/s
   getter_and_setter:  4819752.6 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    87.261k i/100ms
         respond_to?   781.277k i/100ms
Calculating -------------------------------------
      begin...rescue    878.445k (± 1.9%) i/s -      4.450M in   5.067992s
         respond_to?      7.795M (± 0.8%) i/s -     39.064M in   5.011755s

Comparison:
         respond_to?:  7795009.0 i/s
      begin...rescue:   878445.0 i/s - 8.87x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              normal   290.752k i/100ms
             &method   126.274k i/100ms
Calculating -------------------------------------
              normal      2.907M (± 0.8%) i/s -     14.538M in   5.001202s
             &method      1.236M (± 0.6%) i/s -      6.187M in   5.007102s

Comparison:
              normal:  2907004.5 i/s
             &method:  1235770.1 i/s - 2.35x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       239.000  i/100ms
       define_method   341.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.223k (±20.6%) i/s -     10.038k in   5.037336s
       define_method      3.161k (±18.2%) i/s -     14.322k in   5.002865s

Comparison:
       define_method:     3160.9 i/s
module_eval with string:     2223.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Float#round   260.608k i/100ms
       Kernel#format   202.554k i/100ms
            String#%   171.512k i/100ms
Calculating -------------------------------------
         Float#round      2.582M (± 0.5%) i/s -     13.030M in   5.047545s
       Kernel#format      2.024M (± 0.5%) i/s -     10.128M in   5.002809s
            String#%      1.736M (± 0.4%) i/s -      8.747M in   5.039374s

Comparison:
         Float#round:  2581587.8 i/s
       Kernel#format:  2024450.9 i/s - 1.28x  (± 0.00) slower
            String#%:  1735776.4 i/s - 1.49x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash   883.837k i/100ms
          OpenStruct   499.956k i/100ms
Calculating -------------------------------------
                Hash      8.907M (± 0.4%) i/s -     45.076M in   5.060758s
          OpenStruct      5.040M (± 0.5%) i/s -     25.498M in   5.059457s

Comparison:
                Hash:  8907074.5 i/s
          OpenStruct:  5039752.5 i/s - 1.77x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.114M i/100ms
          OpenStruct     9.597k i/100ms
Calculating -------------------------------------
                Hash     11.122M (± 0.4%) i/s -     55.708M in   5.008814s
          OpenStruct     94.389k (± 3.6%) i/s -    479.850k in   5.090627s

Comparison:
                Hash: 11122214.6 i/s
          OpenStruct:    94389.2 i/s - 117.83x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   586.648k i/100ms
  ancestors.include?   120.410k i/100ms
Calculating -------------------------------------
  less than or equal      5.728M (± 0.6%) i/s -     28.746M in   5.018472s
  ancestors.include?      1.214M (± 1.2%) i/s -      6.141M in   5.059676s

Comparison:
  less than or equal:  5728183.9 i/s
  ancestors.include?:  1213869.9 i/s - 4.72x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.733  (± 0.0%) i/s -      4.000  in   5.460684s
         Kernel loop      0.228  (± 0.0%) i/s -      2.000  in   8.771962s

Comparison:
          While Loop:        0.7 i/s
         Kernel loop:        0.2 i/s - 3.22x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.572M i/100ms
         Array#first     1.276M i/100ms
Calculating -------------------------------------
           Array#[0]     15.547M (± 0.5%) i/s -     78.586M in   5.054700s
         Array#first     12.741M (± 0.3%) i/s -     63.819M in   5.009118s

Comparison:
           Array#[0]: 15547356.2 i/s
         Array#first: 12740606.8 i/s - 1.22x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.555M i/100ms
          Array#last     1.307M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.555M (± 0.3%) i/s -     79.310M in   5.098843s
          Array#last     13.022M (± 0.3%) i/s -     65.352M in   5.018514s

Comparison:
          Array#[-1]: 15554584.3 i/s
          Array#last: 13022200.7 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    98.319k i/100ms
Calculating -------------------------------------
                find      0.285  (± 0.0%) i/s -      2.000  in   7.014324s
             bsearch    984.028k (± 0.9%) i/s -      5.014M in   5.096071s

Comparison:
             bsearch:   984027.7 i/s
                find:        0.3 i/s - 3451133.04x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    19.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    195.382  (± 2.6%) i/s -    988.000  in   5.060526s
        Array#insert      1.439  (± 0.0%) i/s -      8.000  in   5.560443s

Comparison:
       Array#unshift:      195.4 i/s
        Array#insert:        1.4 i/s - 135.80x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.084M i/100ms
          Array#size     2.097M i/100ms
         Array#count     1.633M i/100ms
Calculating -------------------------------------
        Array#length     20.742M (± 0.4%) i/s -    104.205M in   5.024016s
          Array#size     20.909M (± 0.5%) i/s -    104.849M in   5.014699s
         Array#count     16.258M (± 2.2%) i/s -     81.647M in   5.024671s

Comparison:
          Array#size: 20908687.0 i/s
        Array#length: 20741878.3 i/s - same-ish: difference falls within error
         Array#count: 16258459.4 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.324k i/100ms
        Array#sample     1.041M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    455.045k (± 0.6%) i/s -      2.312M in   5.079930s
        Array#sample     10.340M (± 0.6%) i/s -     52.039M in   5.032864s

Comparison:
        Array#sample: 10340216.6 i/s
 Array#shuffle.first:   455045.2 i/s - 22.72x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    63.257k i/100ms
          Date.parse    32.102k i/100ms
Calculating -------------------------------------
        Date.iso8601    631.670k (± 1.0%) i/s -      3.163M in   5.007669s
          Date.parse    319.832k (± 1.9%) i/s -      1.605M in   5.020508s

Comparison:
        Date.iso8601:   631669.9 i/s
          Date.parse:   319832.1 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.772k i/100ms
           Array#map    26.852k i/100ms
Calculating -------------------------------------
   Array#each + push    191.332k (± 0.4%) i/s -    957.372k in   5.003805s
           Array#map    269.196k (± 0.3%) i/s -      1.369M in   5.087251s

Comparison:
           Array#map:   269195.6 i/s
   Array#each + push:   191332.4 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            For loop    29.050k i/100ms
               #each    32.198k i/100ms
Calculating -------------------------------------
            For loop    289.871k (± 0.4%) i/s -      1.452M in   5.010934s
               #each    321.482k (± 2.1%) i/s -      1.610M in   5.010286s

Comparison:
               #each:   321481.6 i/s
            For loop:   289870.7 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.396k i/100ms
     each_with_index    19.274k i/100ms
Calculating -------------------------------------
          While Loop    273.947k (± 0.2%) i/s -      1.370M in   5.000250s
     each_with_index    193.214k (± 0.3%) i/s -    982.974k in   5.087540s

Comparison:
          While Loop:   273947.2 i/s
     each_with_index:   193214.2 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       inject symbol   129.558k i/100ms
      inject to_proc     2.198k i/100ms
        inject block     2.141k i/100ms
Calculating -------------------------------------
       inject symbol      1.301M (± 0.9%) i/s -      6.607M in   5.079481s
      inject to_proc     22.070k (± 0.9%) i/s -    112.098k in   5.079531s
        inject block     21.618k (± 0.4%) i/s -    109.191k in   5.051099s

Comparison:
       inject symbol:  1300911.2 i/s
      inject to_proc:    22070.5 i/s - 58.94x  (± 0.00) slower
        inject block:    21617.6 i/s - 60.18x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.490k i/100ms
   Array#map.flatten     3.856k i/100ms
      Array#flat_map     9.676k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     66.504k (± 2.9%) i/s -    337.480k in   5.078884s
   Array#map.flatten     38.709k (± 1.8%) i/s -    196.656k in   5.081892s
      Array#flat_map     97.068k (± 0.6%) i/s -    493.476k in   5.083981s

Comparison:
      Array#flat_map:    97068.2 i/s
Array#map.flatten(1):    66504.2 i/s - 1.46x  (± 0.00) slower
   Array#map.flatten:    38709.4 i/s - 2.51x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    30.645k i/100ms
  Array#reverse_each    31.903k i/100ms
Calculating -------------------------------------
  Array#reverse.each    307.050k (± 0.5%) i/s -      1.563M in   5.090170s
  Array#reverse_each    319.195k (± 0.4%) i/s -      1.627M in   5.097465s

Comparison:
  Array#reverse_each:   319194.8 i/s
  Array#reverse.each:   307049.9 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.955k i/100ms
   Enumerable#detect    83.117k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        208.427k (± 1.9%) i/s -      4.170M in  20.016581s
   Enumerable#detect    827.172k (± 0.8%) i/s -     16.623M in  20.098030s

Comparison:
   Enumerable#detect:   827171.8 i/s
Enumerable#select.first:   208427.0 i/s - 3.97x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       242.194k i/100ms
Enumerable#select.last
                        18.703k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.391M (± 0.8%) i/s -     12.110M in   5.065860s
Enumerable#select.last
                        186.313k (± 0.7%) i/s -    935.150k in   5.019479s

Comparison:
Enumerable#reverse.detect:  2390591.2 i/s
Enumerable#select.last:   186313.4 i/s - 12.83x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         5.010k i/100ms
  Enumerable#sort_by     4.926k i/100ms
     Enumerable#sort     2.388k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         50.008k (± 2.2%) i/s -    250.500k in   5.011637s
  Enumerable#sort_by     49.262k (± 1.0%) i/s -    246.300k in   5.000248s
     Enumerable#sort     23.549k (± 0.5%) i/s -    119.400k in   5.070392s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    50008.3 i/s
  Enumerable#sort_by:    49262.4 i/s - same-ish: difference falls within error
     Enumerable#sort:    23549.0 i/s - 2.12x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.586k i/100ms
Enumerable#sort_by...first
                         8.822k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    175.785k (± 0.3%) i/s -    879.300k in   5.002157s
Enumerable#sort_by...first
                         87.106k (± 0.7%) i/s -    441.100k in   5.064200s

Comparison:
   Enumerable#min_by:   175785.5 i/s
Enumerable#sort_by...first:    87106.0 i/s - 2.02x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   363.109k i/100ms
            Hash#dup   247.218k i/100ms
Calculating -------------------------------------
              Hash[]      3.806M (± 5.5%) i/s -     19.245M in   5.074195s
            Hash#dup      2.645M (± 6.6%) i/s -     13.350M in   5.070566s

Comparison:
              Hash[]:  3805809.8 i/s
            Hash#dup:  2645308.6 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.438M i/100ms
  Hash#fetch, symbol     1.176M i/100ms
     Hash#[], string     1.241M i/100ms
  Hash#fetch, string   785.291k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.361M (± 0.4%) i/s -     71.902M in   5.006959s
  Hash#fetch, symbol     11.721M (± 0.3%) i/s -     58.820M in   5.018399s
     Hash#[], string     12.413M (± 0.4%) i/s -     63.305M in   5.099942s
  Hash#fetch, string      7.807M (± 0.3%) i/s -     39.265M in   5.029287s

Comparison:
     Hash#[], symbol: 14360736.1 i/s
     Hash#[], string: 12413013.5 i/s - 1.16x  (± 0.00) slower
  Hash#fetch, symbol: 11721027.5 i/s - 1.23x  (± 0.00) slower
  Hash#fetch, string:  7807260.2 i/s - 1.84x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   883.930k i/100ms
             Hash#[]     1.037M i/100ms
          Hash#[] ||   919.616k i/100ms
          Hash#[] &&   383.385k i/100ms
          Hash#fetch   597.552k i/100ms
 Hash#fetch fallback   392.918k i/100ms
Calculating -------------------------------------
            Hash#dig      8.649M (± 6.4%) i/s -     43.313M in   5.044368s
             Hash#[]     10.093M (± 1.6%) i/s -     50.828M in   5.037621s
          Hash#[] ||      9.180M (± 3.5%) i/s -     45.981M in   5.016995s
          Hash#[] &&      3.924M (± 0.7%) i/s -     19.936M in   5.080381s
          Hash#fetch      6.056M (± 1.0%) i/s -     30.475M in   5.032764s
 Hash#fetch fallback      3.962M (± 0.8%) i/s -     20.039M in   5.057667s

Comparison:
             Hash#[]: 10092508.4 i/s
          Hash#[] ||:  9179885.1 i/s - 1.10x  (± 0.00) slower
            Hash#dig:  8649108.0 i/s - 1.17x  (± 0.00) slower
          Hash#fetch:  6055917.8 i/s - 1.67x  (± 0.00) slower
 Hash#fetch fallback:  3962307.1 i/s - 2.55x  (± 0.00) slower
          Hash#[] &&:  3924304.9 i/s - 2.57x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.413M i/100ms
  Hash#fetch + block     1.454M i/100ms
    Hash#fetch + arg     1.101M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.159M (± 0.7%) i/s -     72.074M in   5.090420s
  Hash#fetch + block     14.687M (± 0.8%) i/s -     74.171M in   5.050512s
    Hash#fetch + arg     11.001M (± 1.0%) i/s -     55.038M in   5.003680s

Comparison:
  Hash#fetch + block: 14686672.4 i/s
  Hash#fetch + const: 14159313.1 i/s - 1.04x  (± 0.00) slower
    Hash#fetch + arg: 11000667.0 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.391k i/100ms
         sort + to_h    11.471k i/100ms
Calculating -------------------------------------
      sort_by + to_h    276.159k (± 0.6%) i/s -      1.397M in   5.058626s
         sort + to_h    114.664k (± 0.9%) i/s -    573.550k in   5.002393s

Comparison:
      sort_by + to_h:   276159.1 i/s
         sort + to_h:   114664.2 i/s - 2.41x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   192.120k i/100ms
       Hash#each_key   190.469k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.882M (± 0.8%) i/s -      9.414M in   5.003458s
       Hash#each_key      1.881M (± 3.6%) i/s -      9.523M in   5.072005s

Comparison:
      Hash#keys.each:  1881587.0 i/s
       Hash#each_key:  1880613.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.184k i/100ms
           Hash#key?     1.006M i/100ms
Calculating -------------------------------------
  Hash#keys.include?     11.704k (± 2.7%) i/s -     59.200k in   5.062077s
           Hash#key?     10.039M (± 0.3%) i/s -     50.286M in   5.008917s

Comparison:
           Hash#key?: 10039405.8 i/s
  Hash#keys.include?:    11704.3 i/s - 857.76x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.952k i/100ms
            Hash#[]=     9.812k i/100ms
Calculating -------------------------------------
         Hash#merge!     39.300k (± 0.8%) i/s -    197.600k in   5.028282s
            Hash#[]=     98.810k (± 4.4%) i/s -    500.412k in   5.078189s

Comparison:
            Hash#[]=:    98809.7 i/s
         Hash#merge!:    39300.1 i/s - 2.51x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.735k i/100ms
      Hash#merge({})     3.954k i/100ms
 Hash#dup#merge!({})     2.904k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         46.585k (± 0.9%) i/s -    236.750k in   5.082584s
      Hash#merge({})     39.266k (± 0.5%) i/s -    197.700k in   5.035069s
 Hash#dup#merge!({})     28.615k (± 1.0%) i/s -    145.200k in   5.074826s

Comparison:
{}#merge!(Hash) do end:    46584.7 i/s
      Hash#merge({}):    39265.7 i/s - 1.19x  (± 0.00) slower
 Hash#dup#merge!({}):    28614.6 i/s - 1.63x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   387.905k i/100ms
          Hash#merge   358.923k i/100ms
Calculating -------------------------------------
        Hash#**other      3.895M (± 0.5%) i/s -     19.783M in   5.079677s
          Hash#merge      3.594M (± 0.8%) i/s -     18.305M in   5.094146s

Comparison:
        Hash#**other:  3894686.8 i/s
          Hash#merge:  3593575.8 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.665k i/100ms
         Hash#merge!     3.903k i/100ms
Calculating -------------------------------------
          Hash#merge     15.387k (± 5.8%) i/s -     78.255k in   5.104015s
         Hash#merge!     39.250k (± 1.0%) i/s -    199.053k in   5.071955s

Comparison:
         Hash#merge!:    39249.8 i/s
          Hash#merge:    15386.8 i/s - 2.55x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      421.853k i/100ms
Array#each             230.413k i/100ms
Array#each_w/_object   176.293k i/100ms
Hash#select-include     70.273k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.251M (± 0.8%) i/s -     21.515M in   5.061668s
Array#each                2.289M (± 0.7%) i/s -     11.521M in   5.033758s
Array#each_w/_object      1.754M (± 0.7%) i/s -      8.815M in   5.026555s
Hash#select-include     690.135k (± 3.5%) i/s -      3.514M in   5.098098s

Comparison:
Hash#native-slice   :  4250767.8 i/s
Array#each          :  2288790.3 i/s - 1.86x  (± 0.00) slower
Array#each_w/_object:  1753700.2 i/s - 2.42x  (± 0.00) slower
Hash#select-include :   690135.0 i/s - 6.16x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.079k i/100ms
         Hash#value?   849.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     10.438k (± 3.5%) i/s -     52.871k in   5.072261s
         Hash#value?      8.494k (± 1.1%) i/s -     43.299k in   5.098387s

Comparison:
Hash#values.include?:    10438.1 i/s
         Hash#value?:     8493.7 i/s - 1.23x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                call   637.134k i/100ms
                send   507.882k i/100ms
      method_missing   375.515k i/100ms
Calculating -------------------------------------
                call      6.380M (± 0.7%) i/s -     32.494M in   5.093334s
                send      5.106M (± 0.8%) i/s -     25.902M in   5.073582s
      method_missing      3.788M (± 0.6%) i/s -     19.151M in   5.055487s

Comparison:
                call:  6379994.1 i/s
                send:  5105569.8 i/s - 1.25x  (± 0.00) slower
      method_missing:  3788374.4 i/s - 1.68x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
               Block     9.137k i/100ms
      Symbol#to_proc    10.300k i/100ms
Calculating -------------------------------------
               Block     91.314k (± 0.3%) i/s -    456.850k in   5.003085s
      Symbol#to_proc    102.626k (± 0.4%) i/s -    515.000k in   5.018307s

Comparison:
      Symbol#to_proc:   102626.3 i/s
               Block:    91314.3 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          block.call   942.954k i/100ms
       block + yield   994.022k i/100ms
        unused block     1.307M i/100ms
               yield     1.167M i/100ms
Calculating -------------------------------------
          block.call      9.413M (± 0.6%) i/s -     47.148M in   5.008863s
       block + yield      9.940M (± 0.1%) i/s -     49.701M in   5.000149s
        unused block     13.066M (± 0.2%) i/s -     65.357M in   5.002231s
               yield     11.668M (± 0.2%) i/s -     58.338M in   4.999943s

Comparison:
        unused block: 13065625.6 i/s
               yield: 11667846.0 i/s - 1.12x  (± 0.00) slower
       block + yield:  9939936.6 i/s - 1.31x  (± 0.00) slower
          block.call:  9413258.6 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   319.713k i/100ms
      range#include?    12.563k i/100ms
       range#member?    12.628k i/100ms
       plain compare   534.703k i/100ms
Calculating -------------------------------------
        range#cover?      3.236M (± 1.0%) i/s -     16.305M in   5.039361s
      range#include?    125.958k (± 1.0%) i/s -    640.713k in   5.087175s
       range#member?    126.480k (± 0.9%) i/s -    644.028k in   5.092354s
       plain compare      5.344M (± 0.5%) i/s -     26.735M in   5.002722s

Comparison:
       plain compare:  5344233.0 i/s
        range#cover?:  3235936.9 i/s - 1.65x  (± 0.00) slower
       range#member?:   126480.4 i/s - 42.25x  (± 0.00) slower
      range#include?:   125958.2 i/s - 42.43x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       String#match?   914.196k i/100ms
           String#=~   646.917k i/100ms
          Regexp#===   568.245k i/100ms
        String#match   471.371k i/100ms
Calculating -------------------------------------
       String#match?      9.086M (± 0.8%) i/s -     45.710M in   5.030894s
           String#=~      6.441M (± 0.6%) i/s -     32.346M in   5.022026s
          Regexp#===      5.704M (± 0.2%) i/s -     28.980M in   5.080526s
        String#match      4.725M (± 0.4%) i/s -     24.040M in   5.087446s

Comparison:
       String#match?:  9086362.6 i/s
           String#=~:  6441012.9 i/s - 1.41x  (± 0.00) slower
          Regexp#===:  5704260.5 i/s - 1.59x  (± 0.00) slower
        String#match:  4725430.6 i/s - 1.92x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   652.785k i/100ms
      String#casecmp   808.520k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.436M (± 3.0%) i/s -     32.639M in   5.076493s
      String#casecmp      8.031M (± 2.3%) i/s -     40.426M in   5.036786s

Comparison:
      String#casecmp:  8031115.0 i/s
String#downcase + ==:  6436255.9 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            String#+   602.486k i/100ms
       String#concat   627.158k i/100ms
       String#append   677.394k i/100ms
         "foo" "bar"     1.178M i/100ms
  "#{'foo'}#{'bar'}"     1.177M i/100ms
Calculating -------------------------------------
            String#+      6.030M (± 0.4%) i/s -     30.727M in   5.095862s
       String#concat      6.261M (± 0.7%) i/s -     31.358M in   5.008630s
       String#append      6.771M (± 0.5%) i/s -     33.870M in   5.001971s
         "foo" "bar"     11.826M (± 0.2%) i/s -     60.095M in   5.081461s
  "#{'foo'}#{'bar'}"     11.862M (± 0.5%) i/s -     60.028M in   5.060805s

Comparison:
  "#{'foo'}#{'bar'}": 11861789.9 i/s
         "foo" "bar": 11826364.1 i/s - same-ish: difference falls within error
       String#append:  6771435.5 i/s - 1.75x  (± 0.00) slower
       String#concat:  6261059.9 i/s - 1.89x  (± 0.00) slower
            String#+:  6029872.3 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#+@     1.012M i/100ms
          String#dup   585.523k i/100ms
Calculating -------------------------------------
           String#+@     10.105M (± 0.3%) i/s -     50.624M in   5.009631s
          String#dup      5.811M (± 0.5%) i/s -     29.276M in   5.037920s

Comparison:
           String#+@: 10105465.4 i/s
          String#dup:  5811323.9 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   184.206k i/100ms
       String#match?   431.586k i/100ms
    String#end_with?   628.983k i/100ms
Calculating -------------------------------------
           String#=~      1.866M (± 1.0%) i/s -      9.395M in   5.033788s
       String#match?      4.307M (± 0.5%) i/s -     21.579M in   5.010734s
    String#end_with?      6.255M (± 0.5%) i/s -     31.449M in   5.027759s

Comparison:
    String#end_with?:  6255250.6 i/s
       String#match?:  4306732.3 i/s - 1.45x  (± 0.00) slower
           String#=~:  1866486.4 i/s - 3.35x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   112.440k i/100ms
          String#sub   136.985k i/100ms
String#dup["string"]=
                       176.343k i/100ms
Calculating -------------------------------------
         String#gsub      1.147M (± 0.9%) i/s -      5.734M in   5.001036s
          String#sub      1.417M (± 0.7%) i/s -      7.123M in   5.028051s
String#dup["string"]=
                          1.809M (± 1.1%) i/s -      9.170M in   5.070052s

Comparison:
String#dup["string"]=:  1808849.9 i/s
          String#sub:  1416758.0 i/s - 1.28x  (± 0.00) slower
         String#gsub:  1146742.1 i/s - 1.58x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   105.512k i/100ms
           String#tr   337.973k i/100ms
Calculating -------------------------------------
         String#gsub      1.046M (± 1.0%) i/s -      5.276M in   5.043453s
           String#tr      3.377M (± 0.6%) i/s -     16.899M in   5.004041s

Comparison:
           String#tr:  3377127.0 i/s
         String#gsub:  1046124.9 i/s - 3.23x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.114M i/100ms
         With Freeze     1.693M i/100ms
Calculating -------------------------------------
      Without Freeze     11.104M (± 0.3%) i/s -     55.694M in   5.015762s
         With Freeze     16.840M (± 2.1%) i/s -     84.647M in   5.029178s

Comparison:
         With Freeze: 16840046.1 i/s
      Without Freeze: 11103791.0 i/s - 1.52x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.349k i/100ms
      String#squeeze   154.470k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     34.098k (± 1.4%) i/s -    170.799k in   5.010033s
      String#squeeze      1.545M (± 1.6%) i/s -      7.724M in   4.999843s

Comparison:
      String#squeeze:  1545130.9 i/s
 String#gsub/regex+/:    34098.2 i/s - 45.31x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   279.461k i/100ms
       String#match?   759.714k i/100ms
  String#start_with?   863.288k i/100ms
Calculating -------------------------------------
           String#=~      2.818M (± 0.9%) i/s -     14.253M in   5.058827s
       String#match?      7.603M (± 0.4%) i/s -     38.745M in   5.096290s
  String#start_with?      8.625M (± 1.1%) i/s -     43.164M in   5.005123s

Comparison:
  String#start_with?:  8625142.3 i/s
       String#match?:  7602785.6 i/s - 1.13x  (± 0.00) slower
           String#=~:  2817579.2 i/s - 3.06x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   193.336k i/100ms
    String#[0, n] ==    81.859k i/100ms
   String#[RANGE] ==    76.713k i/100ms
   String#[0...n] ==    47.720k i/100ms
Calculating -------------------------------------
  String#start_with?      1.935M (± 2.2%) i/s -      9.860M in   5.097923s
    String#[0, n] ==    820.597k (± 1.0%) i/s -      4.175M in   5.088020s
   String#[RANGE] ==    756.727k (± 0.7%) i/s -      3.836M in   5.069013s
   String#[0...n] ==    471.511k (± 0.9%) i/s -      2.386M in   5.060732s

Comparison:
  String#start_with?:  1935037.8 i/s
    String#[0, n] ==:   820596.9 i/s - 2.36x  (± 0.00) slower
   String#[RANGE] ==:   756726.5 i/s - 2.56x  (± 0.00) slower
   String#[0...n] ==:   471510.5 i/s - 4.10x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   178.727k i/100ms
 String#sub!'string'   125.412k i/100ms
String#gsub!'string'    77.314k i/100ms
  String#[/regexp/]=   154.843k i/100ms
 String#sub!/regexp/   113.672k i/100ms
String#gsub!/regexp/    60.038k i/100ms
Calculating -------------------------------------
  String#['string']=      1.804M (± 0.8%) i/s -      9.115M in   5.053635s
 String#sub!'string'      1.254M (± 1.5%) i/s -      6.396M in   5.100330s
String#gsub!'string'    776.110k (± 0.8%) i/s -      3.943M in   5.080821s
  String#[/regexp/]=      1.574M (± 1.3%) i/s -      7.897M in   5.019464s
 String#sub!/regexp/      1.139M (± 1.5%) i/s -      5.797M in   5.092222s
String#gsub!/regexp/    600.481k (± 1.3%) i/s -      3.062M in   5.100088s

Comparison:
  String#['string']=:  1803780.5 i/s
  String#[/regexp/]=:  1573541.1 i/s - 1.15x  (± 0.00) slower
 String#sub!'string':  1254333.2 i/s - 1.44x  (± 0.00) slower
 String#sub!/regexp/:  1138708.6 i/s - 1.58x  (± 0.00) slower
String#gsub!'string':   776109.7 i/s - 2.32x  (± 0.00) slower
String#gsub!/regexp/:   600481.3 i/s - 3.00x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          String#sub   146.183k i/100ms
        String#chomp   557.564k i/100ms
String#delete_suffix   599.158k i/100ms
Calculating -------------------------------------
          String#sub      1.466M (± 0.4%) i/s -      7.455M in   5.083979s
        String#chomp      5.535M (± 0.5%) i/s -     27.878M in   5.037036s
String#delete_suffix      5.994M (± 0.5%) i/s -     30.557M in   5.097899s

Comparison:
String#delete_suffix:  5994187.8 i/s
        String#chomp:  5534792.0 i/s - 1.08x  (± 0.00) slower
          String#sub:  1466465.8 i/s - 4.09x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   618.031k i/100ms
          String#sub   148.471k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.197M (± 0.4%) i/s -     31.520M in   5.086741s
          String#sub      1.502M (± 1.1%) i/s -      7.572M in   5.043333s

Comparison:
String#delete_prefix:  6196535.2 i/s
          String#sub:  1501582.9 i/s - 4.13x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   619.796k i/100ms
    String#unpack[0]   473.440k i/100ms
Calculating -------------------------------------
      String#unpack1      6.189M (± 0.5%) i/s -     30.990M in   5.007395s
    String#unpack[0]      4.709M (± 0.5%) i/s -     23.672M in   5.027307s

Comparison:
      String#unpack1:  6188974.2 i/s
    String#unpack[0]:  4708792.8 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    26.703k i/100ms
          Time.parse     9.445k i/100ms
Calculating -------------------------------------
        Time.iso8601    272.486k (± 2.3%) i/s -      1.362M in   5.000588s
          Time.parse     92.462k (± 6.5%) i/s -    462.805k in   5.038525s

Comparison:
        Time.iso8601:   272486.2 i/s
          Time.parse:    92461.8 i/s - 2.95x  (± 0.00) slower

