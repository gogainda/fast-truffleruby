$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       762.172k i/100ms
Function with splat arguments
                        26.235k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.632M (± 0.6%) i/s -     38.871M in   5.093237s
Function with splat arguments
                        258.120k (± 6.0%) i/s -      1.286M in   5.006036s

Comparison:
Function with single Array argument:  7632143.4 i/s
Function with splat arguments:   258119.6 i/s - 29.57x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.012M i/100ms
Sequential Assignment
                       995.224k i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.144M (± 0.3%) i/s -     51.612M in   5.087881s
Sequential Assignment
                          9.896M (± 1.0%) i/s -     49.761M in   5.028867s

Comparison:
 Parallel Assignment: 10144277.3 i/s
Sequential Assignment:  9896058.0 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   479.965k i/100ms
       attr_accessor   557.109k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.827M (± 0.4%) i/s -     24.478M in   5.071414s
       attr_accessor      5.563M (± 0.6%) i/s -     27.855M in   5.007602s

Comparison:
       attr_accessor:  5562832.1 i/s
   getter_and_setter:  4826797.6 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    86.930k i/100ms
         respond_to?   779.318k i/100ms
Calculating -------------------------------------
      begin...rescue    877.005k (± 1.8%) i/s -      4.433M in   5.057089s
         respond_to?      7.799M (± 0.3%) i/s -     39.745M in   5.095981s

Comparison:
         respond_to?:  7799402.7 i/s
      begin...rescue:   877004.9 i/s - 8.89x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              normal   298.140k i/100ms
             &method   124.999k i/100ms
Calculating -------------------------------------
              normal      2.985M (± 0.4%) i/s -     15.205M in   5.094524s
             &method      1.239M (± 0.6%) i/s -      6.250M in   5.046359s

Comparison:
              normal:  2984657.1 i/s
             &method:  1238550.0 i/s - 2.41x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       256.000  i/100ms
       define_method   314.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.323k (±16.7%) i/s -     11.008k in   5.068467s
       define_method      3.116k (±19.5%) i/s -     14.444k in   5.040209s

Comparison:
       define_method:     3115.8 i/s
module_eval with string:     2323.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Float#round   261.219k i/100ms
       Kernel#format   191.255k i/100ms
            String#%   163.990k i/100ms
Calculating -------------------------------------
         Float#round      2.604M (± 0.7%) i/s -     13.061M in   5.015881s
       Kernel#format      1.926M (± 0.4%) i/s -      9.754M in   5.064248s
            String#%      1.658M (± 0.5%) i/s -      8.363M in   5.044252s

Comparison:
         Float#round:  2604050.1 i/s
       Kernel#format:  1926081.4 i/s - 1.35x  (± 0.00) slower
            String#%:  1658059.1 i/s - 1.57x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash   889.351k i/100ms
          OpenStruct   504.820k i/100ms
Calculating -------------------------------------
                Hash      8.904M (± 0.4%) i/s -     45.357M in   5.093813s
          OpenStruct      5.018M (± 1.6%) i/s -     25.241M in   5.031186s

Comparison:
                Hash:  8904466.0 i/s
          OpenStruct:  5018220.8 i/s - 1.77x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.094M i/100ms
          OpenStruct     9.969k i/100ms
Calculating -------------------------------------
                Hash     11.031M (± 1.5%) i/s -     55.776M in   5.057493s
          OpenStruct     98.552k (± 1.8%) i/s -    498.450k in   5.059333s

Comparison:
                Hash: 11031050.7 i/s
          OpenStruct:    98551.8 i/s - 111.93x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   561.151k i/100ms
  ancestors.include?   117.195k i/100ms
Calculating -------------------------------------
  less than or equal      5.626M (± 0.5%) i/s -     28.619M in   5.087313s
  ancestors.include?      1.180M (± 0.9%) i/s -      5.977M in   5.065502s

Comparison:
  less than or equal:  5625663.2 i/s
  ancestors.include?:  1180022.0 i/s - 4.77x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.656  (± 0.0%) i/s -      4.000  in   6.110784s
         Kernel loop      0.227  (± 0.0%) i/s -      2.000  in   8.824505s

Comparison:
          While Loop:        0.7 i/s
         Kernel loop:        0.2 i/s - 2.89x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.537M i/100ms
         Array#first     1.310M i/100ms
Calculating -------------------------------------
           Array#[0]     15.367M (± 0.4%) i/s -     78.365M in   5.099755s
         Array#first     13.075M (± 0.6%) i/s -     65.521M in   5.011360s

Comparison:
           Array#[0]: 15366661.9 i/s
         Array#first: 13074939.6 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.532M i/100ms
          Array#last     1.273M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.439M (± 0.2%) i/s -     78.150M in   5.061869s
          Array#last     12.714M (± 0.1%) i/s -     63.672M in   5.008147s

Comparison:
          Array#[-1]: 15439065.9 i/s
          Array#last: 12713684.0 i/s - 1.21x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    98.746k i/100ms
Calculating -------------------------------------
                find      0.285  (± 0.0%) i/s -      2.000  in   7.023910s
             bsearch    989.968k (± 1.8%) i/s -      5.036M in   5.088950s

Comparison:
             bsearch:   989967.7 i/s
                find:        0.3 i/s - 3476718.64x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    15.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    159.330  (± 2.5%) i/s -    810.000  in   5.086472s
        Array#insert      1.421  (± 0.0%) i/s -      8.000  in   5.631939s

Comparison:
       Array#unshift:      159.3 i/s
        Array#insert:        1.4 i/s - 112.15x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.028M i/100ms
          Array#size     2.081M i/100ms
         Array#count     1.612M i/100ms
Calculating -------------------------------------
        Array#length     20.216M (± 0.9%) i/s -    101.399M in   5.016299s
          Array#size     20.770M (± 0.4%) i/s -    104.041M in   5.009204s
         Array#count     16.097M (± 0.4%) i/s -     80.592M in   5.006737s

Comparison:
          Array#size: 20770194.2 i/s
        Array#length: 20215582.7 i/s - 1.03x  (± 0.00) slower
         Array#count: 16096937.8 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    44.988k i/100ms
        Array#sample     1.009M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    449.401k (± 1.6%) i/s -      2.249M in   5.006785s
        Array#sample     10.109M (± 0.2%) i/s -     51.455M in   5.089835s

Comparison:
        Array#sample: 10109344.3 i/s
 Array#shuffle.first:   449400.7 i/s - 22.50x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    64.741k i/100ms
          Date.parse    32.471k i/100ms
Calculating -------------------------------------
        Date.iso8601    646.333k (± 0.3%) i/s -      3.237M in   5.008388s
          Date.parse    326.528k (± 0.4%) i/s -      1.656M in   5.071692s

Comparison:
        Date.iso8601:   646333.5 i/s
          Date.parse:   326528.3 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.610k i/100ms
           Array#map    26.809k i/100ms
Calculating -------------------------------------
   Array#each + push    190.171k (± 0.9%) i/s -    967.720k in   5.089106s
           Array#map    266.531k (± 0.4%) i/s -      1.340M in   5.029337s

Comparison:
           Array#map:   266531.1 i/s
   Array#each + push:   190171.5 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            For loop    29.628k i/100ms
               #each    32.106k i/100ms
Calculating -------------------------------------
            For loop    295.574k (± 1.4%) i/s -      1.481M in   5.012936s
               #each    320.310k (± 0.5%) i/s -      1.605M in   5.011822s

Comparison:
               #each:   320310.1 i/s
            For loop:   295573.7 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.978k i/100ms
     each_with_index    18.589k i/100ms
Calculating -------------------------------------
          While Loop    272.651k (± 0.2%) i/s -      1.371M in   5.028147s
     each_with_index    186.609k (± 0.3%) i/s -    948.039k in   5.080396s

Comparison:
          While Loop:   272651.0 i/s
     each_with_index:   186608.7 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    92.677k i/100ms
      inject to_proc     2.197k i/100ms
        inject block     2.143k i/100ms
Calculating -------------------------------------
       inject symbol      1.102M (±16.6%) i/s -      5.468M in   5.097880s
      inject to_proc     22.044k (± 0.1%) i/s -    112.047k in   5.082938s
        inject block     21.484k (± 0.2%) i/s -    109.293k in   5.087278s

Comparison:
       inject symbol:  1102310.0 i/s
      inject to_proc:    22043.8 i/s - 50.01x  (± 0.00) slower
        inject block:    21483.7 i/s - 51.31x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.751k i/100ms
   Array#map.flatten     3.932k i/100ms
      Array#flat_map     9.679k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     67.867k (± 0.7%) i/s -    344.301k in   5.073445s
   Array#map.flatten     38.914k (± 2.4%) i/s -    196.600k in   5.055245s
      Array#flat_map     96.251k (± 0.8%) i/s -    483.950k in   5.028284s

Comparison:
      Array#flat_map:    96251.3 i/s
Array#map.flatten(1):    67866.9 i/s - 1.42x  (± 0.00) slower
   Array#map.flatten:    38914.5 i/s - 2.47x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    31.333k i/100ms
  Array#reverse_each    32.075k i/100ms
Calculating -------------------------------------
  Array#reverse.each    312.404k (± 1.4%) i/s -      1.567M in   5.015915s
  Array#reverse_each    321.465k (± 0.4%) i/s -      1.636M in   5.088729s

Comparison:
  Array#reverse_each:   321465.3 i/s
  Array#reverse.each:   312403.6 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.656k i/100ms
   Enumerable#detect    82.422k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        206.681k (± 1.1%) i/s -      4.152M in  20.090691s
   Enumerable#detect    824.476k (± 1.5%) i/s -     16.567M in  20.098869s

Comparison:
   Enumerable#detect:   824476.2 i/s
Enumerable#select.first:   206681.5 i/s - 3.99x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       242.123k i/100ms
Enumerable#select.last
                        19.244k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.428M (± 0.5%) i/s -     12.348M in   5.086181s
Enumerable#select.last
                        192.388k (± 0.4%) i/s -    962.200k in   5.001406s

Comparison:
Enumerable#reverse.detect:  2427868.2 i/s
Enumerable#select.last:   192388.3 i/s - 12.62x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.855k i/100ms
  Enumerable#sort_by     4.726k i/100ms
     Enumerable#sort     2.387k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         50.111k (± 1.6%) i/s -    252.460k in   5.039260s
  Enumerable#sort_by     47.799k (± 0.6%) i/s -    241.026k in   5.042738s
     Enumerable#sort     24.266k (± 1.0%) i/s -    121.737k in   5.017209s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    50110.9 i/s
  Enumerable#sort_by:    47798.5 i/s - 1.05x  (± 0.00) slower
     Enumerable#sort:    24266.3 i/s - 2.07x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.629k i/100ms
Enumerable#sort_by...first
                         8.590k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    176.327k (± 0.3%) i/s -    899.079k in   5.098967s
Enumerable#sort_by...first
                         86.889k (± 0.5%) i/s -    438.090k in   5.042090s

Comparison:
   Enumerable#min_by:   176327.3 i/s
Enumerable#sort_by...first:    86888.5 i/s - 2.03x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   431.987k i/100ms
            Hash#dup   295.237k i/100ms
Calculating -------------------------------------
              Hash[]      3.638M (± 1.2%) i/s -     18.575M in   5.107094s
            Hash#dup      3.275M (± 0.8%) i/s -     16.533M in   5.049335s

Comparison:
              Hash[]:  3637742.5 i/s
            Hash#dup:  3274554.7 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.433M i/100ms
  Hash#fetch, symbol     1.123M i/100ms
     Hash#[], string     1.228M i/100ms
  Hash#fetch, string   792.464k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.344M (± 0.8%) i/s -     73.067M in   5.094233s
  Hash#fetch, symbol     11.202M (± 0.4%) i/s -     56.147M in   5.012418s
     Hash#[], string     12.401M (± 0.4%) i/s -     62.614M in   5.049289s
  Hash#fetch, string      7.911M (± 0.6%) i/s -     39.623M in   5.009122s

Comparison:
     Hash#[], symbol: 14344018.8 i/s
     Hash#[], string: 12400752.7 i/s - 1.16x  (± 0.00) slower
  Hash#fetch, symbol: 11201707.9 i/s - 1.28x  (± 0.00) slower
  Hash#fetch, string:  7910507.7 i/s - 1.81x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   858.923k i/100ms
             Hash#[]     1.017M i/100ms
          Hash#[] ||   932.300k i/100ms
          Hash#[] &&   410.989k i/100ms
          Hash#fetch   588.517k i/100ms
 Hash#fetch fallback   387.830k i/100ms
Calculating -------------------------------------
            Hash#dig      8.659M (± 0.7%) i/s -     43.805M in   5.059271s
             Hash#[]     10.411M (± 0.6%) i/s -     52.876M in   5.078888s
          Hash#[] ||      9.444M (± 1.1%) i/s -     47.547M in   5.035133s
          Hash#[] &&      3.869M (± 0.5%) i/s -     19.727M in   5.098621s
          Hash#fetch      5.858M (± 0.1%) i/s -     29.426M in   5.023154s
 Hash#fetch fallback      3.805M (± 0.5%) i/s -     19.392M in   5.096535s

Comparison:
             Hash#[]: 10411240.5 i/s
          Hash#[] ||:  9444374.2 i/s - 1.10x  (± 0.00) slower
            Hash#dig:  8658800.4 i/s - 1.20x  (± 0.00) slower
          Hash#fetch:  5858048.8 i/s - 1.78x  (± 0.00) slower
          Hash#[] &&:  3869280.7 i/s - 2.69x  (± 0.00) slower
 Hash#fetch fallback:  3804933.7 i/s - 2.74x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.421M i/100ms
  Hash#fetch + block     1.441M i/100ms
    Hash#fetch + arg     1.091M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.223M (± 0.5%) i/s -     72.481M in   5.096335s
  Hash#fetch + block     14.384M (± 0.5%) i/s -     72.048M in   5.008972s
    Hash#fetch + arg     10.829M (± 1.4%) i/s -     54.564M in   5.039833s

Comparison:
  Hash#fetch + block: 14384061.2 i/s
  Hash#fetch + const: 14222574.0 i/s - 1.01x  (± 0.00) slower
    Hash#fetch + arg: 10828934.8 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    28.111k i/100ms
         sort + to_h    11.904k i/100ms
Calculating -------------------------------------
      sort_by + to_h    280.437k (± 1.3%) i/s -      1.406M in   5.012925s
         sort + to_h    118.828k (± 0.4%) i/s -    595.200k in   5.009006s

Comparison:
      sort_by + to_h:   280437.0 i/s
         sort + to_h:   118827.6 i/s - 2.36x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   193.956k i/100ms
       Hash#each_key   207.384k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.934M (± 1.2%) i/s -      9.698M in   5.015583s
       Hash#each_key      2.070M (± 1.5%) i/s -     10.369M in   5.010118s

Comparison:
       Hash#each_key:  2070112.7 i/s
      Hash#keys.each:  1933838.3 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.202k i/100ms
           Hash#key?     1.032M i/100ms
Calculating -------------------------------------
  Hash#keys.include?     11.755k (± 3.7%) i/s -     58.898k in   5.018066s
           Hash#key?     10.228M (± 0.5%) i/s -     51.603M in   5.045145s

Comparison:
           Hash#key?: 10228431.2 i/s
  Hash#keys.include?:    11755.2 i/s - 870.12x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.028k i/100ms
            Hash#[]=    10.200k i/100ms
Calculating -------------------------------------
         Hash#merge!     39.736k (± 1.0%) i/s -    201.400k in   5.068916s
            Hash#[]=    103.953k (± 0.6%) i/s -    520.200k in   5.004394s

Comparison:
            Hash#[]=:   103952.6 i/s
         Hash#merge!:    39736.3 i/s - 2.62x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.729k i/100ms
      Hash#merge({})     3.965k i/100ms
 Hash#dup#merge!({})     2.890k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         47.732k (± 1.3%) i/s -    241.179k in   5.053576s
      Hash#merge({})     39.353k (± 1.6%) i/s -    198.250k in   5.039200s
 Hash#dup#merge!({})     28.887k (± 1.0%) i/s -    144.500k in   5.002836s

Comparison:
{}#merge!(Hash) do end:    47732.5 i/s
      Hash#merge({}):    39352.7 i/s - 1.21x  (± 0.00) slower
 Hash#dup#merge!({}):    28886.6 i/s - 1.65x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   385.746k i/100ms
          Hash#merge   357.897k i/100ms
Calculating -------------------------------------
        Hash#**other      3.877M (± 1.8%) i/s -     19.673M in   5.076107s
          Hash#merge      3.544M (± 0.6%) i/s -     17.895M in   5.049678s

Comparison:
        Hash#**other:  3876968.7 i/s
          Hash#merge:  3543890.8 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.652k i/100ms
         Hash#merge!     3.932k i/100ms
Calculating -------------------------------------
          Hash#merge     16.628k (± 1.4%) i/s -     84.252k in   5.068063s
         Hash#merge!     39.359k (± 1.4%) i/s -    200.532k in   5.096013s

Comparison:
         Hash#merge!:    39359.3 i/s
          Hash#merge:    16627.7 i/s - 2.37x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      417.798k i/100ms
Array#each             228.163k i/100ms
Array#each_w/_object   174.786k i/100ms
Hash#select-include     72.001k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.158M (± 0.8%) i/s -     20.890M in   5.023894s
Array#each                2.303M (± 0.9%) i/s -     11.636M in   5.053072s
Array#each_w/_object      1.748M (± 0.6%) i/s -      8.739M in   5.000750s
Hash#select-include     724.198k (± 0.2%) i/s -      3.672M in   5.070525s

Comparison:
Hash#native-slice   :  4158400.4 i/s
Array#each          :  2303015.8 i/s - 1.81x  (± 0.00) slower
Array#each_w/_object:  1747671.0 i/s - 2.38x  (± 0.00) slower
Hash#select-include :   724198.4 i/s - 5.74x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     4.027k i/100ms
         Hash#value?     4.402k i/100ms
Calculating -------------------------------------
Hash#values.include?     40.014k (± 5.3%) i/s -    201.350k in   5.051967s
         Hash#value?     44.119k (± 0.4%) i/s -    224.502k in   5.088708s

Comparison:
         Hash#value?:    44118.5 i/s
Hash#values.include?:    40013.9 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                call   668.663k i/100ms
                send   526.953k i/100ms
      method_missing   390.620k i/100ms
Calculating -------------------------------------
                call      6.692M (± 0.4%) i/s -     34.102M in   5.096156s
                send      5.229M (± 0.8%) i/s -     26.348M in   5.039138s
      method_missing      3.902M (± 1.7%) i/s -     19.531M in   5.007307s

Comparison:
                call:  6691789.6 i/s
                send:  5228972.4 i/s - 1.28x  (± 0.00) slower
      method_missing:  3901729.6 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
               Block     8.672k i/100ms
      Symbol#to_proc     9.859k i/100ms
Calculating -------------------------------------
               Block     87.463k (± 0.3%) i/s -    442.272k in   5.056746s
      Symbol#to_proc     97.251k (± 2.1%) i/s -    492.950k in   5.071300s

Comparison:
      Symbol#to_proc:    97251.3 i/s
               Block:    87462.9 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          block.call   830.354k i/100ms
       block + yield   868.918k i/100ms
        unused block     1.096M i/100ms
               yield     1.018M i/100ms
Calculating -------------------------------------
          block.call      8.263M (± 1.7%) i/s -     41.518M in   5.025929s
       block + yield      8.682M (± 0.3%) i/s -     43.446M in   5.003992s
        unused block     10.942M (± 1.1%) i/s -     54.795M in   5.008552s
               yield     10.159M (± 0.3%) i/s -     50.912M in   5.011381s

Comparison:
        unused block: 10941695.5 i/s
               yield: 10159449.5 i/s - 1.08x  (± 0.00) slower
       block + yield:  8682323.2 i/s - 1.26x  (± 0.00) slower
          block.call:  8263286.9 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   324.676k i/100ms
      range#include?    12.614k i/100ms
       range#member?    12.626k i/100ms
       plain compare   528.873k i/100ms
Calculating -------------------------------------
        range#cover?      3.206M (± 0.4%) i/s -     16.234M in   5.063342s
      range#include?    126.865k (± 1.2%) i/s -    643.314k in   5.071608s
       range#member?    126.865k (± 0.6%) i/s -    643.926k in   5.075874s
       plain compare      5.296M (± 0.4%) i/s -     26.973M in   5.092659s

Comparison:
       plain compare:  5296444.9 i/s
        range#cover?:  3206189.6 i/s - 1.65x  (± 0.00) slower
       range#member?:   126865.3 i/s - 41.75x  (± 0.00) slower
      range#include?:   126864.6 i/s - 41.75x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       String#match?   907.085k i/100ms
           String#=~   642.170k i/100ms
          Regexp#===   567.175k i/100ms
        String#match   459.495k i/100ms
Calculating -------------------------------------
       String#match?      9.090M (± 0.5%) i/s -     46.261M in   5.089215s
           String#=~      6.370M (± 2.1%) i/s -     32.108M in   5.043302s
          Regexp#===      5.655M (± 0.5%) i/s -     28.359M in   5.014922s
        String#match      4.678M (± 0.4%) i/s -     23.434M in   5.009487s

Comparison:
       String#match?:  9090287.8 i/s
           String#=~:  6369607.2 i/s - 1.43x  (± 0.00) slower
          Regexp#===:  5655039.0 i/s - 1.61x  (± 0.00) slower
        String#match:  4678047.3 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   640.834k i/100ms
      String#casecmp   807.672k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.479M (± 0.5%) i/s -     32.683M in   5.044465s
      String#casecmp      8.033M (± 1.2%) i/s -     40.384M in   5.027727s

Comparison:
      String#casecmp:  8033376.7 i/s
String#downcase + ==:  6479056.6 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            String#+   591.485k i/100ms
       String#concat   616.281k i/100ms
       String#append   666.399k i/100ms
         "foo" "bar"     1.154M i/100ms
  "#{'foo'}#{'bar'}"     1.152M i/100ms
Calculating -------------------------------------
            String#+      5.903M (± 2.4%) i/s -     29.574M in   5.013893s
       String#concat      6.160M (± 1.3%) i/s -     30.814M in   5.003078s
       String#append      6.649M (± 2.0%) i/s -     33.320M in   5.013371s
         "foo" "bar"     11.559M (± 0.4%) i/s -     58.864M in   5.092451s
  "#{'foo'}#{'bar'}"     11.489M (± 0.4%) i/s -     57.600M in   5.013575s

Comparison:
         "foo" "bar": 11559336.8 i/s
  "#{'foo'}#{'bar'}": 11489060.1 i/s - same-ish: difference falls within error
       String#append:  6649115.3 i/s - 1.74x  (± 0.00) slower
       String#concat:  6160179.5 i/s - 1.88x  (± 0.00) slower
            String#+:  5902522.4 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#+@   999.999k i/100ms
          String#dup   581.228k i/100ms
Calculating -------------------------------------
           String#+@     10.000M (± 0.4%) i/s -     50.000M in   5.000297s
          String#dup      5.795M (± 0.6%) i/s -     29.061M in   5.014851s

Comparison:
           String#+@:  9999520.5 i/s
          String#dup:  5795282.0 i/s - 1.73x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   187.030k i/100ms
       String#match?   426.815k i/100ms
    String#end_with?   612.037k i/100ms
Calculating -------------------------------------
           String#=~      1.872M (± 0.9%) i/s -      9.539M in   5.096979s
       String#match?      4.285M (± 0.2%) i/s -     21.768M in   5.080397s
    String#end_with?      6.136M (± 0.4%) i/s -     31.214M in   5.087168s

Comparison:
    String#end_with?:  6135886.8 i/s
       String#match?:  4284636.2 i/s - 1.43x  (± 0.00) slower
           String#=~:  1871567.7 i/s - 3.28x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   112.154k i/100ms
          String#sub   134.440k i/100ms
String#dup["string"]=
                       177.480k i/100ms
Calculating -------------------------------------
         String#gsub      1.124M (± 0.7%) i/s -      5.720M in   5.087321s
          String#sub      1.381M (± 0.5%) i/s -      6.991M in   5.062624s
String#dup["string"]=
                          1.781M (± 0.5%) i/s -      9.051M in   5.081656s

Comparison:
String#dup["string"]=:  1781260.3 i/s
          String#sub:  1380916.3 i/s - 1.29x  (± 0.00) slower
         String#gsub:  1124386.2 i/s - 1.58x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   101.656k i/100ms
           String#tr   312.257k i/100ms
Calculating -------------------------------------
         String#gsub      1.024M (± 1.8%) i/s -      5.184M in   5.065203s
           String#tr      3.168M (± 0.6%) i/s -     15.925M in   5.026969s

Comparison:
           String#tr:  3168063.3 i/s
         String#gsub:  1023918.5 i/s - 3.09x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.148M i/100ms
         With Freeze     1.682M i/100ms
Calculating -------------------------------------
      Without Freeze     11.506M (± 1.0%) i/s -     58.543M in   5.088424s
         With Freeze     16.699M (± 2.4%) i/s -     84.120M in   5.040539s

Comparison:
         With Freeze: 16699032.2 i/s
      Without Freeze: 11506398.8 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.367k i/100ms
      String#squeeze   156.807k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     34.216k (± 0.7%) i/s -    171.717k in   5.018826s
      String#squeeze      1.565M (± 0.8%) i/s -      7.840M in   5.010554s

Comparison:
      String#squeeze:  1564864.0 i/s
 String#gsub/regex+/:    34216.5 i/s - 45.73x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   281.371k i/100ms
       String#match?   745.382k i/100ms
  String#start_with?   853.816k i/100ms
Calculating -------------------------------------
           String#=~      2.808M (± 1.1%) i/s -     14.069M in   5.010640s
       String#match?      7.508M (± 1.1%) i/s -     38.014M in   5.064120s
  String#start_with?      8.543M (± 1.5%) i/s -     43.545M in   5.098357s

Comparison:
  String#start_with?:  8543042.4 i/s
       String#match?:  7507513.9 i/s - 1.14x  (± 0.00) slower
           String#=~:  2808116.9 i/s - 3.04x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   196.593k i/100ms
    String#[0, n] ==    82.086k i/100ms
   String#[RANGE] ==    76.885k i/100ms
   String#[0...n] ==    47.713k i/100ms
Calculating -------------------------------------
  String#start_with?      1.892M (± 2.3%) i/s -      9.633M in   5.093455s
    String#[0, n] ==    808.193k (± 2.1%) i/s -      4.104M in   5.080659s
   String#[RANGE] ==    751.730k (± 2.2%) i/s -      3.767M in   5.014142s
   String#[0...n] ==    474.060k (± 1.3%) i/s -      2.386M in   5.033209s

Comparison:
  String#start_with?:  1892214.3 i/s
    String#[0, n] ==:   808193.5 i/s - 2.34x  (± 0.00) slower
   String#[RANGE] ==:   751730.1 i/s - 2.52x  (± 0.00) slower
   String#[0...n] ==:   474060.3 i/s - 3.99x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   179.129k i/100ms
 String#sub!'string'   127.269k i/100ms
String#gsub!'string'    77.636k i/100ms
  String#[/regexp/]=   155.901k i/100ms
 String#sub!/regexp/   112.644k i/100ms
String#gsub!/regexp/    61.306k i/100ms
Calculating -------------------------------------
  String#['string']=      1.823M (± 2.2%) i/s -      9.136M in   5.013228s
 String#sub!'string'      1.264M (± 0.7%) i/s -      6.363M in   5.032816s
String#gsub!'string'    767.519k (± 2.1%) i/s -      3.882M in   5.060175s
  String#[/regexp/]=      1.555M (± 0.6%) i/s -      7.795M in   5.014631s
 String#sub!/regexp/      1.152M (± 0.5%) i/s -      5.857M in   5.083038s
String#gsub!/regexp/    613.459k (± 0.3%) i/s -      3.127M in   5.096727s

Comparison:
  String#['string']=:  1823311.2 i/s
  String#[/regexp/]=:  1554510.2 i/s - 1.17x  (± 0.00) slower
 String#sub!'string':  1264460.3 i/s - 1.44x  (± 0.00) slower
 String#sub!/regexp/:  1152388.4 i/s - 1.58x  (± 0.00) slower
String#gsub!'string':   767519.2 i/s - 2.38x  (± 0.00) slower
String#gsub!/regexp/:   613458.9 i/s - 2.97x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          String#sub   141.595k i/100ms
        String#chomp   556.231k i/100ms
String#delete_suffix   608.407k i/100ms
Calculating -------------------------------------
          String#sub      1.419M (± 0.3%) i/s -      7.221M in   5.090223s
        String#chomp      5.562M (± 0.5%) i/s -     27.812M in   5.000172s
String#delete_suffix      6.078M (± 0.2%) i/s -     30.420M in   5.005090s

Comparison:
String#delete_suffix:  6077900.7 i/s
        String#chomp:  5562233.9 i/s - 1.09x  (± 0.00) slower
          String#sub:  1418687.1 i/s - 4.28x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   621.523k i/100ms
          String#sub   146.989k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.193M (± 0.4%) i/s -     31.076M in   5.017748s
          String#sub      1.466M (± 1.1%) i/s -      7.349M in   5.013267s

Comparison:
String#delete_prefix:  6193346.6 i/s
          String#sub:  1466201.1 i/s - 4.22x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   580.191k i/100ms
    String#unpack[0]   450.752k i/100ms
Calculating -------------------------------------
      String#unpack1      5.878M (± 1.6%) i/s -     29.590M in   5.035308s
    String#unpack[0]      4.558M (± 1.6%) i/s -     22.988M in   5.044930s

Comparison:
      String#unpack1:  5878045.6 i/s
    String#unpack[0]:  4557952.6 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    28.089k i/100ms
          Time.parse     9.505k i/100ms
Calculating -------------------------------------
        Time.iso8601    280.022k (± 0.4%) i/s -      1.404M in   5.015576s
          Time.parse     95.663k (± 0.5%) i/s -    484.755k in   5.067440s

Comparison:
        Time.iso8601:   280021.9 i/s
          Time.parse:    95663.5 i/s - 2.93x  (± 0.00) slower

