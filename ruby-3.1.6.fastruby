$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       769.197k i/100ms
Function with splat arguments
                        17.944k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.740M (± 0.3%) i/s -     39.229M in   5.068522s
Function with splat arguments
                        184.127k (± 5.8%) i/s -    933.088k in   5.089905s

Comparison:
Function with single Array argument:  7739809.9 i/s
Function with splat arguments:   184127.0 i/s - 42.04x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.017M i/100ms
Sequential Assignment
                       985.707k i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.145M (± 0.4%) i/s -     50.838M in   5.011317s
Sequential Assignment
                          9.833M (± 0.5%) i/s -     49.285M in   5.012258s

Comparison:
 Parallel Assignment: 10144853.1 i/s
Sequential Assignment:  9833234.6 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   479.186k i/100ms
       attr_accessor   555.099k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.790M (± 0.5%) i/s -     23.959M in   5.002579s
       attr_accessor      5.521M (± 0.7%) i/s -     27.755M in   5.027151s

Comparison:
       attr_accessor:  5521250.3 i/s
   getter_and_setter:  4789511.8 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    86.238k i/100ms
         respond_to?   776.304k i/100ms
Calculating -------------------------------------
      begin...rescue    872.072k (± 0.8%) i/s -      4.398M in   5.043634s
         respond_to?      7.761M (± 0.2%) i/s -     38.815M in   5.001568s

Comparison:
         respond_to?:  7760653.6 i/s
      begin...rescue:   872071.7 i/s - 8.90x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              normal   319.146k i/100ms
             &method   122.369k i/100ms
Calculating -------------------------------------
              normal      3.170M (± 1.2%) i/s -     15.957M in   5.034299s
             &method      1.224M (± 0.7%) i/s -      6.118M in   4.999973s

Comparison:
              normal:  3170193.7 i/s
             &method:  1223749.6 i/s - 2.59x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       222.000  i/100ms
       define_method   288.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.044k (±25.8%) i/s -      8.658k in   5.083479s
       define_method      3.270k (±16.7%) i/s -     16.128k in   5.066004s

Comparison:
       define_method:     3269.8 i/s
module_eval with string:     2043.9 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Float#round   260.810k i/100ms
       Kernel#format   193.307k i/100ms
            String#%   163.581k i/100ms
Calculating -------------------------------------
         Float#round      2.608M (± 0.9%) i/s -     13.040M in   5.001485s
       Kernel#format      1.921M (± 0.5%) i/s -      9.665M in   5.031783s
            String#%      1.647M (± 0.4%) i/s -      8.343M in   5.064253s

Comparison:
         Float#round:  2607530.9 i/s
       Kernel#format:  1920908.6 i/s - 1.36x  (± 0.00) slower
            String#%:  1647378.4 i/s - 1.58x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash   902.314k i/100ms
          OpenStruct   502.698k i/100ms
Calculating -------------------------------------
                Hash      9.131M (± 2.1%) i/s -     46.018M in   5.042361s
          OpenStruct      4.976M (± 0.8%) i/s -     25.135M in   5.051230s

Comparison:
                Hash:  9130678.5 i/s
          OpenStruct:  4976307.1 i/s - 1.83x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.078M i/100ms
          OpenStruct    10.966k i/100ms
Calculating -------------------------------------
                Hash     11.394M (± 0.7%) i/s -     57.144M in   5.015419s
          OpenStruct    110.204k (± 5.3%) i/s -    559.266k in   5.090580s

Comparison:
                Hash: 11394172.8 i/s
          OpenStruct:   110204.4 i/s - 103.39x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   581.764k i/100ms
  ancestors.include?   119.695k i/100ms
Calculating -------------------------------------
  less than or equal      5.736M (± 0.8%) i/s -     29.088M in   5.071334s
  ancestors.include?      1.173M (± 1.8%) i/s -      5.865M in   5.001822s

Comparison:
  less than or equal:  5736203.2 i/s
  ancestors.include?:  1172957.1 i/s - 4.89x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.635  (± 0.0%) i/s -      4.000  in   6.303818s
         Kernel loop      0.211  (± 0.0%) i/s -      2.000  in   9.460774s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 3.00x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   684.931k i/100ms
         Array#first   575.024k i/100ms
Calculating -------------------------------------
           Array#[0]      7.616M (± 0.6%) i/s -     38.356M in   5.036660s
         Array#first      5.733M (± 0.4%) i/s -     28.751M in   5.014902s

Comparison:
           Array#[0]:  7615672.6 i/s
         Array#first:  5733248.6 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.550M i/100ms
          Array#last     1.332M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.501M (± 0.4%) i/s -     77.505M in   5.000099s
          Array#last     13.290M (± 0.4%) i/s -     66.582M in   5.009937s

Comparison:
          Array#[-1]: 15500951.5 i/s
          Array#last: 13290177.4 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    99.392k i/100ms
Calculating -------------------------------------
                find      0.269  (± 0.0%) i/s -      2.000  in   7.431520s
             bsearch    989.790k (± 1.4%) i/s -      4.970M in   5.021892s

Comparison:
             bsearch:   989790.0 i/s
                find:        0.3 i/s - 3677821.29x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    19.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    194.209  (± 3.1%) i/s -    988.000  in   5.091787s
        Array#insert      1.447  (± 0.0%) i/s -      8.000  in   5.528863s

Comparison:
       Array#unshift:      194.2 i/s
        Array#insert:        1.4 i/s - 134.22x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.086M i/100ms
          Array#size     2.096M i/100ms
         Array#count     1.621M i/100ms
Calculating -------------------------------------
        Array#length     20.869M (± 0.7%) i/s -    106.392M in   5.098430s
          Array#size     20.929M (± 1.3%) i/s -    104.797M in   5.008166s
         Array#count     16.253M (± 0.4%) i/s -     82.695M in   5.087972s

Comparison:
          Array#size: 20928707.8 i/s
        Array#length: 20868643.3 i/s - same-ish: difference falls within error
         Array#count: 16253249.2 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    44.450k i/100ms
        Array#sample     1.036M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    447.274k (± 0.4%) i/s -      2.267M in   5.068454s
        Array#sample     10.401M (± 1.6%) i/s -     52.858M in   5.083150s

Comparison:
        Array#sample: 10401448.3 i/s
 Array#shuffle.first:   447273.6 i/s - 23.26x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    64.215k i/100ms
          Date.parse    32.097k i/100ms
Calculating -------------------------------------
        Date.iso8601    646.061k (± 0.3%) i/s -      3.275M in   5.069184s
          Date.parse    321.407k (± 0.6%) i/s -      1.637M in   5.093238s

Comparison:
        Date.iso8601:   646061.4 i/s
          Date.parse:   321407.1 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.792k i/100ms
           Array#map    26.883k i/100ms
Calculating -------------------------------------
   Array#each + push    189.418k (± 1.1%) i/s -    958.392k in   5.060322s
           Array#map    267.696k (± 1.5%) i/s -      1.344M in   5.022357s

Comparison:
           Array#map:   267695.8 i/s
   Array#each + push:   189417.6 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            For loop    29.792k i/100ms
               #each    32.449k i/100ms
Calculating -------------------------------------
            For loop    298.085k (± 0.4%) i/s -      1.519M in   5.097278s
               #each    325.482k (± 0.4%) i/s -      1.655M in   5.084525s

Comparison:
               #each:   325482.4 i/s
            For loop:   298084.6 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop    28.298k i/100ms
     each_with_index    19.078k i/100ms
Calculating -------------------------------------
          While Loop    274.428k (± 0.4%) i/s -      1.387M in   5.052758s
     each_with_index    192.760k (± 0.5%) i/s -    972.978k in   5.047747s

Comparison:
          While Loop:   274428.2 i/s
     each_with_index:   192760.3 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    93.338k i/100ms
      inject to_proc     2.208k i/100ms
        inject block     2.151k i/100ms
Calculating -------------------------------------
       inject symbol    964.057k (±10.5%) i/s -      4.854M in   5.076978s
      inject to_proc     22.090k (± 1.1%) i/s -    112.608k in   5.098277s
        inject block     21.490k (± 1.4%) i/s -    107.550k in   5.005712s

Comparison:
       inject symbol:   964056.8 i/s
      inject to_proc:    22090.5 i/s - 43.64x  (± 0.00) slower
        inject block:    21489.8 i/s - 44.86x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.647k i/100ms
   Array#map.flatten     3.937k i/100ms
      Array#flat_map     9.520k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     67.698k (± 0.5%) i/s -    338.997k in   5.007597s
   Array#map.flatten     39.268k (± 0.8%) i/s -    196.850k in   5.013321s
      Array#flat_map     95.763k (± 0.5%) i/s -    485.520k in   5.070163s

Comparison:
      Array#flat_map:    95763.0 i/s
Array#map.flatten(1):    67698.2 i/s - 1.41x  (± 0.00) slower
   Array#map.flatten:    39268.1 i/s - 2.44x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    31.238k i/100ms
  Array#reverse_each    32.441k i/100ms
Calculating -------------------------------------
  Array#reverse.each    312.147k (± 0.5%) i/s -      1.562M in   5.003883s
  Array#reverse_each    324.414k (± 0.5%) i/s -      1.622M in   5.000056s

Comparison:
  Array#reverse_each:   324413.7 i/s
  Array#reverse.each:   312146.6 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.913k i/100ms
   Enumerable#detect    82.552k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        208.731k (± 0.5%) i/s -      4.183M in  20.038762s
   Enumerable#detect    824.511k (± 1.4%) i/s -     16.510M in  20.028733s

Comparison:
   Enumerable#detect:   824511.5 i/s
Enumerable#select.first:   208731.0 i/s - 3.95x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       240.710k i/100ms
Enumerable#select.last
                        19.017k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.426M (± 0.4%) i/s -     12.276M in   5.059596s
Enumerable#select.last
                        189.723k (± 1.1%) i/s -    950.850k in   5.012440s

Comparison:
Enumerable#reverse.detect:  2426363.5 i/s
Enumerable#select.last:   189722.7 i/s - 12.79x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.906k i/100ms
  Enumerable#sort_by     4.730k i/100ms
     Enumerable#sort     2.443k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         49.316k (± 1.6%) i/s -    250.206k in   5.074860s
  Enumerable#sort_by     46.573k (± 1.4%) i/s -    236.500k in   5.079016s
     Enumerable#sort     24.204k (± 1.2%) i/s -    122.150k in   5.047271s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    49315.7 i/s
  Enumerable#sort_by:    46573.2 i/s - 1.06x  (± 0.00) slower
     Enumerable#sort:    24204.5 i/s - 2.04x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.834k i/100ms
Enumerable#sort_by...first
                         8.700k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    179.280k (± 0.2%) i/s -    909.534k in   5.073263s
Enumerable#sort_by...first
                         87.196k (± 1.5%) i/s -    443.700k in   5.089695s

Comparison:
   Enumerable#min_by:   179280.4 i/s
Enumerable#sort_by...first:    87196.0 i/s - 2.06x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   400.862k i/100ms
            Hash#dup   282.061k i/100ms
Calculating -------------------------------------
              Hash[]      3.714M (± 1.5%) i/s -     18.841M in   5.073784s
            Hash#dup      2.765M (± 2.8%) i/s -     13.821M in   5.003033s

Comparison:
              Hash[]:  3714133.9 i/s
            Hash#dup:  2764652.4 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.437M i/100ms
  Hash#fetch, symbol     1.185M i/100ms
     Hash#[], string     1.245M i/100ms
  Hash#fetch, string   789.374k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.398M (± 0.3%) i/s -     73.284M in   5.090088s
  Hash#fetch, symbol     11.886M (± 0.3%) i/s -     60.420M in   5.083303s
     Hash#[], string     12.432M (± 1.4%) i/s -     62.252M in   5.008413s
  Hash#fetch, string      7.899M (± 0.7%) i/s -     40.258M in   5.096590s

Comparison:
     Hash#[], symbol: 14397569.3 i/s
     Hash#[], string: 12432249.2 i/s - 1.16x  (± 0.00) slower
  Hash#fetch, symbol: 11886071.3 i/s - 1.21x  (± 0.00) slower
  Hash#fetch, string:  7899396.6 i/s - 1.82x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   867.215k i/100ms
             Hash#[]     1.010M i/100ms
          Hash#[] ||   930.200k i/100ms
          Hash#[] &&   396.084k i/100ms
          Hash#fetch   624.516k i/100ms
 Hash#fetch fallback   403.360k i/100ms
Calculating -------------------------------------
            Hash#dig      8.648M (± 0.6%) i/s -     43.361M in   5.014301s
             Hash#[]      9.657M (± 3.6%) i/s -     48.503M in   5.029050s
          Hash#[] ||      9.353M (± 1.8%) i/s -     47.440M in   5.073994s
          Hash#[] &&      4.096M (± 0.4%) i/s -     20.596M in   5.028415s
          Hash#fetch      6.126M (± 0.4%) i/s -     31.226M in   5.097222s
 Hash#fetch fallback      3.946M (± 1.7%) i/s -     19.765M in   5.010917s

Comparison:
             Hash#[]:  9657293.7 i/s
          Hash#[] ||:  9352811.6 i/s - same-ish: difference falls within error
            Hash#dig:  8647736.5 i/s - 1.12x  (± 0.00) slower
          Hash#fetch:  6126149.5 i/s - 1.58x  (± 0.00) slower
          Hash#[] &&:  4096058.7 i/s - 2.36x  (± 0.00) slower
 Hash#fetch fallback:  3945610.7 i/s - 2.45x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.429M i/100ms
  Hash#fetch + block     1.460M i/100ms
    Hash#fetch + arg     1.053M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.370M (± 0.9%) i/s -     72.867M in   5.071177s
  Hash#fetch + block     14.479M (± 0.4%) i/s -     73.014M in   5.042890s
    Hash#fetch + arg     10.572M (± 0.5%) i/s -     53.690M in   5.078816s

Comparison:
  Hash#fetch + block: 14478876.5 i/s
  Hash#fetch + const: 14370122.7 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 10571623.1 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.649k i/100ms
         sort + to_h    10.818k i/100ms
Calculating -------------------------------------
      sort_by + to_h    273.716k (± 1.3%) i/s -      1.382M in   5.051572s
         sort + to_h    107.874k (± 1.1%) i/s -    540.900k in   5.014797s

Comparison:
      sort_by + to_h:   273716.3 i/s
         sort + to_h:   107874.0 i/s - 2.54x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   189.630k i/100ms
       Hash#each_key   207.111k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.890M (± 1.5%) i/s -      9.482M in   5.017401s
       Hash#each_key      2.061M (± 0.7%) i/s -     10.356M in   5.025281s

Comparison:
       Hash#each_key:  2060788.0 i/s
      Hash#keys.each:  1890204.2 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.171k i/100ms
           Hash#key?   978.341k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     12.181k (± 4.3%) i/s -     60.892k in   5.009376s
           Hash#key?      9.855M (± 0.2%) i/s -     49.895M in   5.062927s

Comparison:
           Hash#key?:  9855099.7 i/s
  Hash#keys.include?:    12181.0 i/s - 809.05x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.026k i/100ms
            Hash#[]=    10.173k i/100ms
Calculating -------------------------------------
         Hash#merge!     40.059k (± 0.5%) i/s -    201.300k in   5.025171s
            Hash#[]=    101.109k (± 1.2%) i/s -    508.650k in   5.031509s

Comparison:
            Hash#[]=:   101108.9 i/s
         Hash#merge!:    40059.5 i/s - 2.52x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.748k i/100ms
      Hash#merge({})     3.939k i/100ms
 Hash#dup#merge!({})     2.873k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         47.430k (± 0.6%) i/s -    237.400k in   5.005403s
      Hash#merge({})     39.762k (± 0.7%) i/s -    200.889k in   5.052531s
 Hash#dup#merge!({})     28.860k (± 1.5%) i/s -    146.523k in   5.078256s

Comparison:
{}#merge!(Hash) do end:    47430.3 i/s
      Hash#merge({}):    39761.8 i/s - 1.19x  (± 0.00) slower
 Hash#dup#merge!({}):    28860.0 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   394.294k i/100ms
          Hash#merge   365.608k i/100ms
Calculating -------------------------------------
        Hash#**other      3.895M (± 0.3%) i/s -     19.715M in   5.062074s
          Hash#merge      3.684M (± 0.7%) i/s -     18.646M in   5.061709s

Comparison:
        Hash#**other:  3894622.2 i/s
          Hash#merge:  3683912.5 i/s - 1.06x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.616k i/100ms
         Hash#merge!     3.993k i/100ms
Calculating -------------------------------------
          Hash#merge     16.192k (± 2.5%) i/s -     82.416k in   5.092996s
         Hash#merge!     39.717k (± 1.7%) i/s -    199.650k in   5.028408s

Comparison:
         Hash#merge!:    39717.1 i/s
          Hash#merge:    16192.1 i/s - 2.45x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      419.585k i/100ms
Array#each             230.958k i/100ms
Array#each_w/_object   174.963k i/100ms
Hash#select-include     72.106k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.123M (± 0.5%) i/s -     20.979M in   5.088680s
Array#each                2.276M (± 0.3%) i/s -     11.548M in   5.073885s
Array#each_w/_object      1.748M (± 0.5%) i/s -      8.748M in   5.004515s
Hash#select-include     720.353k (± 1.7%) i/s -      3.605M in   5.006349s

Comparison:
Hash#native-slice   :  4122816.1 i/s
Array#each          :  2275973.6 i/s - 1.81x  (± 0.00) slower
Array#each_w/_object:  1748094.7 i/s - 2.36x  (± 0.00) slower
Hash#select-include :   720353.4 i/s - 5.72x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.063k i/100ms
         Hash#value?   828.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     10.601k (± 3.4%) i/s -     53.150k in   5.020386s
         Hash#value?      8.400k (± 2.1%) i/s -     42.228k in   5.029265s

Comparison:
Hash#values.include?:    10601.2 i/s
         Hash#value?:     8400.4 i/s - 1.26x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                call   668.370k i/100ms
                send   531.044k i/100ms
      method_missing   393.477k i/100ms
Calculating -------------------------------------
                call      6.683M (± 0.5%) i/s -     33.418M in   5.000747s
                send      5.272M (± 1.2%) i/s -     26.552M in   5.037038s
      method_missing      3.935M (± 0.3%) i/s -     19.674M in   4.999906s

Comparison:
                call:  6682860.5 i/s
                send:  5272244.9 i/s - 1.27x  (± 0.00) slower
      method_missing:  3934890.8 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
               Block     8.596k i/100ms
      Symbol#to_proc     9.973k i/100ms
Calculating -------------------------------------
               Block     86.911k (± 0.2%) i/s -    438.396k in   5.044189s
      Symbol#to_proc     99.493k (± 0.5%) i/s -    498.650k in   5.012026s

Comparison:
      Symbol#to_proc:    99493.3 i/s
               Block:    86911.3 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          block.call   946.480k i/100ms
       block + yield   896.544k i/100ms
        unused block     1.306M i/100ms
               yield     1.191M i/100ms
Calculating -------------------------------------
          block.call      9.444M (± 0.8%) i/s -     47.324M in   5.011437s
       block + yield      9.210M (± 1.3%) i/s -     46.620M in   5.062657s
        unused block     13.062M (± 1.0%) i/s -     65.320M in   5.001210s
               yield     11.875M (± 1.0%) i/s -     59.536M in   5.014153s

Comparison:
        unused block: 13062303.7 i/s
               yield: 11874802.6 i/s - 1.10x  (± 0.00) slower
          block.call:  9443790.7 i/s - 1.38x  (± 0.00) slower
       block + yield:  9210300.8 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   321.033k i/100ms
      range#include?    12.704k i/100ms
       range#member?    12.610k i/100ms
       plain compare   533.344k i/100ms
Calculating -------------------------------------
        range#cover?      3.224M (± 1.2%) i/s -     16.373M in   5.078732s
      range#include?    125.851k (± 1.7%) i/s -    635.200k in   5.048680s
       range#member?    125.572k (± 0.7%) i/s -    630.500k in   5.021258s
       plain compare      5.317M (± 0.3%) i/s -     26.667M in   5.015542s

Comparison:
       plain compare:  5316951.5 i/s
        range#cover?:  3224234.9 i/s - 1.65x  (± 0.00) slower
      range#include?:   125851.3 i/s - 42.25x  (± 0.00) slower
       range#member?:   125571.9 i/s - 42.34x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       String#match?   917.671k i/100ms
           String#=~   643.766k i/100ms
          Regexp#===   562.686k i/100ms
        String#match   467.397k i/100ms
Calculating -------------------------------------
       String#match?      9.166M (± 0.5%) i/s -     45.884M in   5.006190s
           String#=~      6.409M (± 0.6%) i/s -     32.188M in   5.022405s
          Regexp#===      5.607M (± 1.6%) i/s -     28.134M in   5.018728s
        String#match      4.651M (± 1.2%) i/s -     23.370M in   5.025513s

Comparison:
       String#match?:  9165592.3 i/s
           String#=~:  6409156.9 i/s - 1.43x  (± 0.00) slower
          Regexp#===:  5607450.8 i/s - 1.63x  (± 0.00) slower
        String#match:  4650919.5 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   651.352k i/100ms
      String#casecmp   810.269k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.530M (± 0.6%) i/s -     33.219M in   5.087450s
      String#casecmp      8.148M (± 0.5%) i/s -     41.324M in   5.071704s

Comparison:
      String#casecmp:  8148117.9 i/s
String#downcase + ==:  6529842.9 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            String#+   594.284k i/100ms
       String#concat   618.080k i/100ms
       String#append   675.040k i/100ms
         "foo" "bar"     1.183M i/100ms
  "#{'foo'}#{'bar'}"     1.159M i/100ms
Calculating -------------------------------------
            String#+      5.958M (± 0.5%) i/s -     30.308M in   5.087395s
       String#concat      6.188M (± 0.4%) i/s -     31.522M in   5.094052s
       String#append      6.732M (± 1.5%) i/s -     33.752M in   5.015020s
         "foo" "bar"     11.814M (± 1.1%) i/s -     59.149M in   5.007419s
  "#{'foo'}#{'bar'}"     11.614M (± 0.9%) i/s -     59.103M in   5.089194s

Comparison:
         "foo" "bar": 11813985.2 i/s
  "#{'foo'}#{'bar'}": 11614471.6 i/s - same-ish: difference falls within error
       String#append:  6731672.5 i/s - 1.75x  (± 0.00) slower
       String#concat:  6188131.0 i/s - 1.91x  (± 0.00) slower
            String#+:  5957714.7 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#+@     1.012M i/100ms
          String#dup   581.952k i/100ms
Calculating -------------------------------------
           String#+@     10.114M (± 0.5%) i/s -     50.590M in   5.002229s
          String#dup      5.864M (± 0.5%) i/s -     29.680M in   5.061138s

Comparison:
           String#+@: 10113820.0 i/s
          String#dup:  5864352.9 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   184.463k i/100ms
       String#match?   432.436k i/100ms
    String#end_with?   610.417k i/100ms
Calculating -------------------------------------
           String#=~      1.839M (± 0.5%) i/s -      9.223M in   5.016107s
       String#match?      4.312M (± 0.5%) i/s -     21.622M in   5.014761s
    String#end_with?      6.190M (± 2.2%) i/s -     31.131M in   5.032115s

Comparison:
    String#end_with?:  6189777.6 i/s
       String#match?:  4311742.0 i/s - 1.44x  (± 0.00) slower
           String#=~:  1838761.7 i/s - 3.37x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   112.001k i/100ms
          String#sub   139.904k i/100ms
String#dup["string"]=
                       180.499k i/100ms
Calculating -------------------------------------
         String#gsub      1.129M (± 1.7%) i/s -      5.712M in   5.059641s
          String#sub      1.384M (± 1.0%) i/s -      6.995M in   5.053110s
String#dup["string"]=
                          1.784M (± 0.6%) i/s -      9.025M in   5.059228s

Comparison:
String#dup["string"]=:  1783921.7 i/s
          String#sub:  1384492.9 i/s - 1.29x  (± 0.00) slower
         String#gsub:  1129297.4 i/s - 1.58x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   104.524k i/100ms
           String#tr   345.117k i/100ms
Calculating -------------------------------------
         String#gsub      1.048M (± 0.7%) i/s -      5.331M in   5.087019s
           String#tr      3.467M (± 0.4%) i/s -     17.601M in   5.076649s

Comparison:
           String#tr:  3467115.0 i/s
         String#gsub:  1047967.1 i/s - 3.31x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.158M i/100ms
         With Freeze     1.688M i/100ms
Calculating -------------------------------------
      Without Freeze     11.488M (± 1.5%) i/s -     57.905M in   5.041695s
         With Freeze     16.893M (± 0.8%) i/s -     86.063M in   5.095014s

Comparison:
         With Freeze: 16892711.6 i/s
      Without Freeze: 11487978.9 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.361k i/100ms
      String#squeeze   153.719k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     34.072k (± 1.0%) i/s -    171.411k in   5.031393s
      String#squeeze      1.555M (± 1.3%) i/s -      7.840M in   5.043675s

Comparison:
      String#squeeze:  1554617.4 i/s
 String#gsub/regex+/:    34072.0 i/s - 45.63x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   275.567k i/100ms
       String#match?   747.255k i/100ms
  String#start_with?   876.135k i/100ms
Calculating -------------------------------------
           String#=~      2.751M (± 2.3%) i/s -     13.778M in   5.012290s
       String#match?      7.463M (± 0.5%) i/s -     37.363M in   5.006493s
  String#start_with?      8.760M (± 1.4%) i/s -     43.807M in   5.002018s

Comparison:
  String#start_with?:  8759528.6 i/s
       String#match?:  7463071.4 i/s - 1.17x  (± 0.00) slower
           String#=~:  2750530.2 i/s - 3.18x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   194.259k i/100ms
    String#[0, n] ==    82.661k i/100ms
   String#[RANGE] ==    74.646k i/100ms
   String#[0...n] ==    48.283k i/100ms
Calculating -------------------------------------
  String#start_with?      1.938M (± 1.9%) i/s -      9.713M in   5.012948s
    String#[0, n] ==    837.051k (± 0.6%) i/s -      4.216M in   5.036566s
   String#[RANGE] ==    748.287k (± 0.5%) i/s -      3.807M in   5.087662s
   String#[0...n] ==    472.806k (± 1.3%) i/s -      2.366M in   5.004786s

Comparison:
  String#start_with?:  1938368.9 i/s
    String#[0, n] ==:   837050.9 i/s - 2.32x  (± 0.00) slower
   String#[RANGE] ==:   748287.0 i/s - 2.59x  (± 0.00) slower
   String#[0...n] ==:   472806.0 i/s - 4.10x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   179.956k i/100ms
 String#sub!'string'   127.068k i/100ms
String#gsub!'string'    78.154k i/100ms
  String#[/regexp/]=   156.734k i/100ms
 String#sub!/regexp/   115.549k i/100ms
String#gsub!/regexp/    61.454k i/100ms
Calculating -------------------------------------
  String#['string']=      1.833M (± 0.5%) i/s -      9.178M in   5.008082s
 String#sub!'string'      1.256M (± 1.3%) i/s -      6.353M in   5.059316s
String#gsub!'string'    779.468k (± 0.6%) i/s -      3.908M in   5.013503s
  String#[/regexp/]=      1.536M (± 0.4%) i/s -      7.837M in   5.101115s
 String#sub!/regexp/      1.142M (± 1.9%) i/s -      5.777M in   5.062152s
String#gsub!/regexp/    605.466k (± 0.6%) i/s -      3.073M in   5.075131s

Comparison:
  String#['string']=:  1832627.3 i/s
  String#[/regexp/]=:  1536295.3 i/s - 1.19x  (± 0.00) slower
 String#sub!'string':  1256022.1 i/s - 1.46x  (± 0.00) slower
 String#sub!/regexp/:  1141729.6 i/s - 1.61x  (± 0.00) slower
String#gsub!'string':   779467.7 i/s - 2.35x  (± 0.00) slower
String#gsub!/regexp/:   605466.3 i/s - 3.03x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          String#sub   146.008k i/100ms
        String#chomp   569.577k i/100ms
String#delete_suffix   623.348k i/100ms
Calculating -------------------------------------
          String#sub      1.455M (± 0.3%) i/s -      7.300M in   5.017814s
        String#chomp      5.659M (± 1.6%) i/s -     28.479M in   5.033487s
String#delete_suffix      6.178M (± 0.5%) i/s -     31.167M in   5.045177s

Comparison:
String#delete_suffix:  6177817.4 i/s
        String#chomp:  5659357.0 i/s - 1.09x  (± 0.00) slower
          String#sub:  1454912.1 i/s - 4.25x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   629.859k i/100ms
          String#sub   149.361k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.264M (± 0.3%) i/s -     31.493M in   5.028043s
          String#sub      1.489M (± 6.1%) i/s -      7.468M in   5.047016s

Comparison:
String#delete_prefix:  6263527.1 i/s
          String#sub:  1489140.6 i/s - 4.21x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   623.373k i/100ms
    String#unpack[0]   472.852k i/100ms
Calculating -------------------------------------
      String#unpack1      6.215M (± 0.5%) i/s -     31.169M in   5.015341s
    String#unpack[0]      4.717M (± 0.5%) i/s -     23.643M in   5.012634s

Comparison:
      String#unpack1:  6214810.1 i/s
    String#unpack[0]:  4716705.1 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.754k i/100ms
          Time.parse     9.379k i/100ms
Calculating -------------------------------------
        Time.iso8601    277.280k (± 0.4%) i/s -      1.388M in   5.004763s
          Time.parse     94.504k (± 0.5%) i/s -    478.329k in   5.061636s

Comparison:
        Time.iso8601:   277280.4 i/s
          Time.parse:    94503.6 i/s - 2.93x  (± 0.00) slower

