$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       768.505k i/100ms
Function with splat arguments
                        24.905k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.684M (± 2.0%) i/s -     38.425M in   5.003018s
Function with splat arguments
                        267.656k (± 5.2%) i/s -      1.345M in   5.044240s

Comparison:
Function with single Array argument:  7683768.2 i/s
Function with splat arguments:   267656.5 i/s - 28.71x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.020M i/100ms
Sequential Assignment
                         1.008M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.163M (± 0.4%) i/s -     51.013M in   5.019742s
Sequential Assignment
                         10.127M (± 0.6%) i/s -     51.395M in   5.075002s

Comparison:
 Parallel Assignment: 10162728.1 i/s
Sequential Assignment: 10127385.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   466.636k i/100ms
       attr_accessor   497.675k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.680M (± 0.7%) i/s -     23.798M in   5.085716s
       attr_accessor      5.002M (± 0.8%) i/s -     25.381M in   5.074848s

Comparison:
       attr_accessor:  5001771.6 i/s
   getter_and_setter:  4679705.6 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    89.472k i/100ms
         respond_to?   754.264k i/100ms
Calculating -------------------------------------
      begin...rescue    892.782k (± 2.2%) i/s -      4.474M in   5.013743s
         respond_to?      7.553M (± 2.0%) i/s -     38.467M in   5.095373s

Comparison:
         respond_to?:  7552821.1 i/s
      begin...rescue:   892781.6 i/s - 8.46x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              normal   297.447k i/100ms
             &method   119.626k i/100ms
Calculating -------------------------------------
              normal      2.960M (± 1.0%) i/s -     14.872M in   5.024630s
             &method      1.199M (± 0.6%) i/s -      6.101M in   5.088112s

Comparison:
              normal:  2960199.0 i/s
             &method:  1199091.9 i/s - 2.47x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       261.000  i/100ms
       define_method   289.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.336k (±21.4%) i/s -     10.440k in   5.068842s
       define_method      3.205k (±19.2%) i/s -     14.450k in   5.000649s

Comparison:
       define_method:     3204.7 i/s
module_eval with string:     2336.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Float#round   257.206k i/100ms
       Kernel#format   199.659k i/100ms
            String#%   172.881k i/100ms
Calculating -------------------------------------
         Float#round      2.558M (± 0.6%) i/s -     12.860M in   5.027495s
       Kernel#format      2.010M (± 0.5%) i/s -     10.183M in   5.067111s
            String#%      1.728M (± 0.6%) i/s -      8.644M in   5.001281s

Comparison:
         Float#round:  2558081.0 i/s
       Kernel#format:  2009605.4 i/s - 1.27x  (± 0.00) slower
            String#%:  1728433.9 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash   863.806k i/100ms
          OpenStruct   494.429k i/100ms
Calculating -------------------------------------
                Hash      8.761M (± 0.7%) i/s -     44.054M in   5.028520s
          OpenStruct      4.900M (± 0.6%) i/s -     24.721M in   5.045368s

Comparison:
                Hash:  8761294.1 i/s
          OpenStruct:  4900025.3 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.101M i/100ms
          OpenStruct     9.734k i/100ms
Calculating -------------------------------------
                Hash     11.053M (± 0.3%) i/s -     56.162M in   5.081315s
          OpenStruct     95.643k (± 2.3%) i/s -    486.700k in   5.091430s

Comparison:
                Hash: 11052736.3 i/s
          OpenStruct:    95643.1 i/s - 115.56x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   601.287k i/100ms
  ancestors.include?   127.048k i/100ms
Calculating -------------------------------------
  less than or equal      6.051M (± 0.4%) i/s -     30.666M in   5.067867s
  ancestors.include?      1.260M (± 0.6%) i/s -      6.352M in   5.043772s

Comparison:
  less than or equal:  6051097.5 i/s
  ancestors.include?:  1259503.0 i/s - 4.80x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.663  (± 0.0%) i/s -      4.000  in   6.050112s
         Kernel loop      0.215  (± 0.0%) i/s -      2.000  in   9.301608s

Comparison:
          While Loop:        0.7 i/s
         Kernel loop:        0.2 i/s - 3.09x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.489M i/100ms
         Array#first     1.325M i/100ms
Calculating -------------------------------------
           Array#[0]     14.761M (± 0.2%) i/s -     74.440M in   5.042877s
         Array#first     13.208M (± 0.1%) i/s -     66.264M in   5.016980s

Comparison:
           Array#[0]: 14761492.8 i/s
         Array#first: 13207942.9 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.532M i/100ms
          Array#last     1.329M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.269M (± 0.3%) i/s -     76.592M in   5.016086s
          Array#last     13.296M (± 0.9%) i/s -     66.475M in   5.000127s

Comparison:
          Array#[-1]: 15269401.7 i/s
          Array#last: 13295759.1 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    95.760k i/100ms
Calculating -------------------------------------
                find      0.266  (± 0.0%) i/s -      2.000  in   7.510458s
             bsearch    969.115k (± 0.8%) i/s -      4.884M in   5.039735s

Comparison:
             bsearch:   969114.7 i/s
                find:        0.3 i/s - 3639247.41x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    17.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    172.241  (± 4.1%) i/s -    867.000  in   5.042945s
        Array#insert      1.416  (± 0.0%) i/s -      8.000  in   5.651364s

Comparison:
       Array#unshift:      172.2 i/s
        Array#insert:        1.4 i/s - 121.66x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.157M i/100ms
          Array#size     2.113M i/100ms
         Array#count     1.618M i/100ms
Calculating -------------------------------------
        Array#length     21.496M (± 0.4%) i/s -    107.853M in   5.017521s
          Array#size     21.099M (± 0.5%) i/s -    105.648M in   5.007409s
         Array#count     16.183M (± 0.4%) i/s -     82.497M in   5.097804s

Comparison:
        Array#length: 21495782.4 i/s
          Array#size: 21098689.6 i/s - 1.02x  (± 0.00) slower
         Array#count: 16183000.3 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    46.390k i/100ms
        Array#sample     1.038M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    465.985k (± 0.5%) i/s -      2.366M in   5.077318s
        Array#sample     10.366M (± 0.4%) i/s -     51.888M in   5.005656s

Comparison:
        Array#sample: 10366033.6 i/s
 Array#shuffle.first:   465984.8 i/s - 22.25x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    61.868k i/100ms
          Date.parse    31.440k i/100ms
Calculating -------------------------------------
        Date.iso8601    617.209k (± 0.3%) i/s -      3.093M in   5.011962s
          Date.parse    314.026k (± 0.4%) i/s -      1.572M in   5.006042s

Comparison:
        Date.iso8601:   617209.3 i/s
          Date.parse:   314026.4 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.024k i/100ms
           Array#map    26.437k i/100ms
Calculating -------------------------------------
   Array#each + push    180.707k (± 0.3%) i/s -    919.224k in   5.086863s
           Array#map    264.410k (± 0.6%) i/s -      1.348M in   5.099429s

Comparison:
           Array#map:   264410.5 i/s
   Array#each + push:   180706.7 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            For loop    28.959k i/100ms
               #each    32.528k i/100ms
Calculating -------------------------------------
            For loop    289.465k (± 0.3%) i/s -      1.448M in   5.002215s
               #each    324.576k (± 0.4%) i/s -      1.626M in   5.010936s

Comparison:
               #each:   324576.2 i/s
            For loop:   289465.3 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.046k i/100ms
     each_with_index    18.867k i/100ms
Calculating -------------------------------------
          While Loop    272.535k (± 0.4%) i/s -      1.379M in   5.061231s
     each_with_index    187.878k (± 0.5%) i/s -    943.350k in   5.021198s

Comparison:
          While Loop:   272535.2 i/s
     each_with_index:   187878.4 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    72.071k i/100ms
      inject to_proc     2.069k i/100ms
        inject block     1.968k i/100ms
Calculating -------------------------------------
       inject symbol    720.448k (± 0.6%) i/s -      3.604M in   5.001986s
      inject to_proc     20.716k (± 0.5%) i/s -    105.519k in   5.093630s
        inject block     19.696k (± 0.1%) i/s -    100.368k in   5.095884s

Comparison:
       inject symbol:   720448.4 i/s
      inject to_proc:    20716.4 i/s - 34.78x  (± 0.00) slower
        inject block:    19695.9 i/s - 36.58x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     7.516k i/100ms
   Array#map.flatten     3.848k i/100ms
      Array#flat_map     9.682k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     74.688k (± 0.6%) i/s -    375.800k in   5.031790s
   Array#map.flatten     38.626k (± 0.9%) i/s -    196.248k in   5.081152s
      Array#flat_map     96.206k (± 0.9%) i/s -    484.100k in   5.032316s

Comparison:
      Array#flat_map:    96205.9 i/s
Array#map.flatten(1):    74687.6 i/s - 1.29x  (± 0.00) slower
   Array#map.flatten:    38625.7 i/s - 2.49x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    31.507k i/100ms
  Array#reverse_each    32.231k i/100ms
Calculating -------------------------------------
  Array#reverse.each    314.594k (± 0.3%) i/s -      1.575M in   5.007614s
  Array#reverse_each    321.174k (± 1.0%) i/s -      1.612M in   5.018200s

Comparison:
  Array#reverse_each:   321173.6 i/s
  Array#reverse.each:   314593.6 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        19.384k i/100ms
   Enumerable#detect    80.187k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        193.630k (± 0.4%) i/s -      3.877M in  20.021988s
   Enumerable#detect    801.205k (± 0.4%) i/s -     16.037M in  20.016943s

Comparison:
   Enumerable#detect:   801204.6 i/s
Enumerable#select.first:   193630.2 i/s - 4.14x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       239.845k i/100ms
Enumerable#select.last
                        18.164k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.375M (± 0.4%) i/s -     11.992M in   5.050367s
Enumerable#select.last
                        181.507k (± 0.3%) i/s -    908.200k in   5.003715s

Comparison:
Enumerable#reverse.detect:  2374577.2 i/s
Enumerable#select.last:   181507.0 i/s - 13.08x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.792k i/100ms
  Enumerable#sort_by     4.710k i/100ms
     Enumerable#sort     2.410k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         48.674k (± 1.6%) i/s -    244.392k in   5.022311s
  Enumerable#sort_by     47.010k (± 1.5%) i/s -    235.500k in   5.010791s
     Enumerable#sort     23.918k (± 0.5%) i/s -    120.500k in   5.038045s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    48673.7 i/s
  Enumerable#sort_by:    47009.6 i/s - 1.04x  (± 0.00) slower
     Enumerable#sort:    23918.5 i/s - 2.03x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    16.836k i/100ms
Enumerable#sort_by...first
                         8.380k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    168.863k (± 0.6%) i/s -    858.636k in   5.085000s
Enumerable#sort_by...first
                         83.720k (± 0.5%) i/s -    419.000k in   5.004936s

Comparison:
   Enumerable#min_by:   168863.1 i/s
Enumerable#sort_by...first:    83719.8 i/s - 2.02x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   403.197k i/100ms
            Hash#dup   314.557k i/100ms
Calculating -------------------------------------
              Hash[]      4.045M (± 1.5%) i/s -     20.563M in   5.084826s
            Hash#dup      3.201M (± 0.9%) i/s -     16.042M in   5.011378s

Comparison:
              Hash[]:  4044833.6 i/s
            Hash#dup:  3201441.3 i/s - 1.26x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.365M i/100ms
  Hash#fetch, symbol     1.199M i/100ms
     Hash#[], string     1.244M i/100ms
  Hash#fetch, string   736.837k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     13.590M (± 0.1%) i/s -     68.258M in   5.022521s
  Hash#fetch, symbol     11.939M (± 0.2%) i/s -     59.958M in   5.021962s
     Hash#[], string     12.311M (± 0.5%) i/s -     62.208M in   5.053342s
  Hash#fetch, string      7.356M (± 0.6%) i/s -     36.842M in   5.008350s

Comparison:
     Hash#[], symbol: 13590374.0 i/s
     Hash#[], string: 12310672.1 i/s - 1.10x  (± 0.00) slower
  Hash#fetch, symbol: 11939150.2 i/s - 1.14x  (± 0.00) slower
  Hash#fetch, string:  7356389.4 i/s - 1.85x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   797.903k i/100ms
             Hash#[]   983.500k i/100ms
          Hash#[] ||   842.476k i/100ms
          Hash#[] &&   385.083k i/100ms
          Hash#fetch   605.270k i/100ms
 Hash#fetch fallback   376.597k i/100ms
Calculating -------------------------------------
            Hash#dig      8.058M (± 0.5%) i/s -     40.693M in   5.050221s
             Hash#[]      9.735M (± 0.7%) i/s -     49.175M in   5.051752s
          Hash#[] ||      8.696M (± 0.8%) i/s -     43.809M in   5.037890s
          Hash#[] &&      3.967M (± 3.1%) i/s -     20.024M in   5.052283s
          Hash#fetch      6.223M (± 0.6%) i/s -     31.474M in   5.057586s
 Hash#fetch fallback      3.798M (± 1.4%) i/s -     19.206M in   5.058387s

Comparison:
             Hash#[]:  9734713.1 i/s
          Hash#[] ||:  8696461.6 i/s - 1.12x  (± 0.00) slower
            Hash#dig:  8057883.8 i/s - 1.21x  (± 0.00) slower
          Hash#fetch:  6223395.9 i/s - 1.56x  (± 0.00) slower
          Hash#[] &&:  3967309.2 i/s - 2.45x  (± 0.00) slower
 Hash#fetch fallback:  3797696.4 i/s - 2.56x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.439M i/100ms
  Hash#fetch + block     1.436M i/100ms
    Hash#fetch + arg     1.086M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.017M (± 0.7%) i/s -     70.519M in   5.031136s
  Hash#fetch + block     14.346M (± 1.2%) i/s -     71.777M in   5.004102s
    Hash#fetch + arg     10.546M (± 1.5%) i/s -     53.235M in   5.048990s

Comparison:
  Hash#fetch + block: 14345815.1 i/s
  Hash#fetch + const: 14017228.5 i/s - 1.02x  (± 0.00) slower
    Hash#fetch + arg: 10546032.2 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    25.992k i/100ms
         sort + to_h    10.839k i/100ms
Calculating -------------------------------------
      sort_by + to_h    257.761k (± 1.4%) i/s -      1.300M in   5.042991s
         sort + to_h    108.575k (± 1.1%) i/s -    552.789k in   5.091983s

Comparison:
      sort_by + to_h:   257760.7 i/s
         sort + to_h:   108575.5 i/s - 2.37x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   184.541k i/100ms
       Hash#each_key   185.993k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.845M (± 0.4%) i/s -      9.227M in   5.002337s
       Hash#each_key      1.853M (± 0.7%) i/s -      9.300M in   5.019638s

Comparison:
       Hash#each_key:  1852748.2 i/s
      Hash#keys.each:  1844572.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.457k i/100ms
           Hash#key?   939.746k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     14.670k (± 4.5%) i/s -     74.307k in   5.077837s
           Hash#key?      9.331M (± 0.6%) i/s -     46.987M in   5.035691s

Comparison:
           Hash#key?:  9331179.2 i/s
  Hash#keys.include?:    14669.6 i/s - 636.09x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.797k i/100ms
            Hash#[]=    10.209k i/100ms
Calculating -------------------------------------
         Hash#merge!     37.725k (± 0.6%) i/s -    189.850k in   5.032690s
            Hash#[]=    101.309k (± 0.8%) i/s -    510.450k in   5.038859s

Comparison:
            Hash#[]=:   101309.2 i/s
         Hash#merge!:    37724.7 i/s - 2.69x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.413k i/100ms
      Hash#merge({})     3.776k i/100ms
 Hash#dup#merge!({})     2.739k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         44.660k (± 0.8%) i/s -    225.063k in   5.039877s
      Hash#merge({})     37.957k (± 0.9%) i/s -    192.576k in   5.073952s
 Hash#dup#merge!({})     27.389k (± 0.5%) i/s -    136.950k in   5.000248s

Comparison:
{}#merge!(Hash) do end:    44659.5 i/s
      Hash#merge({}):    37957.0 i/s - 1.18x  (± 0.00) slower
 Hash#dup#merge!({}):    27389.2 i/s - 1.63x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   360.098k i/100ms
          Hash#merge   329.771k i/100ms
Calculating -------------------------------------
        Hash#**other      3.616M (± 1.0%) i/s -     18.365M in   5.079372s
          Hash#merge      3.304M (± 0.4%) i/s -     16.818M in   5.089858s

Comparison:
        Hash#**other:  3615990.5 i/s
          Hash#merge:  3304333.4 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.680k i/100ms
         Hash#merge!     3.682k i/100ms
Calculating -------------------------------------
          Hash#merge     16.775k (± 0.8%) i/s -     84.000k in   5.007942s
         Hash#merge!     36.507k (± 0.2%) i/s -    184.100k in   5.042891s

Comparison:
         Hash#merge!:    36506.9 i/s
          Hash#merge:    16774.5 i/s - 2.18x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      428.024k i/100ms
Array#each             212.655k i/100ms
Array#each_w/_object   169.236k i/100ms
Hash#select-include     76.333k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.287M (± 0.8%) i/s -     21.829M in   5.092133s
Array#each                2.082M (± 1.1%) i/s -     10.420M in   5.005470s
Array#each_w/_object      1.661M (± 0.6%) i/s -      8.462M in   5.095968s
Hash#select-include     761.771k (± 0.4%) i/s -      3.817M in   5.010298s

Comparison:
Hash#native-slice   :  4287140.3 i/s
Array#each          :  2081995.2 i/s - 2.06x  (± 0.00) slower
Array#each_w/_object:  1660559.4 i/s - 2.58x  (± 0.00) slower
Hash#select-include :   761770.8 i/s - 5.63x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.116k i/100ms
         Hash#value?   849.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     11.024k (± 4.1%) i/s -     55.800k in   5.071303s
         Hash#value?      8.525k (± 0.5%) i/s -     43.299k in   5.079418s

Comparison:
Hash#values.include?:    11024.3 i/s
         Hash#value?:     8524.6 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                call   594.297k i/100ms
                send   485.684k i/100ms
      method_missing   353.696k i/100ms
Calculating -------------------------------------
                call      5.953M (± 0.4%) i/s -     30.309M in   5.091289s
                send      4.736M (± 0.5%) i/s -     23.799M in   5.025404s
      method_missing      3.513M (± 0.4%) i/s -     17.685M in   5.034590s

Comparison:
                call:  5953239.8 i/s
                send:  4735782.0 i/s - 1.26x  (± 0.00) slower
      method_missing:  3512706.9 i/s - 1.69x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
               Block     9.369k i/100ms
      Symbol#to_proc     9.159k i/100ms
Calculating -------------------------------------
               Block     93.830k (± 0.7%) i/s -    477.819k in   5.092634s
      Symbol#to_proc     91.254k (± 0.4%) i/s -    457.950k in   5.018493s

Comparison:
               Block:    93830.5 i/s
      Symbol#to_proc:    91253.8 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          block.call   839.087k i/100ms
       block + yield   988.954k i/100ms
        unused block     1.305M i/100ms
               yield     1.140M i/100ms
Calculating -------------------------------------
          block.call      8.798M (± 0.2%) i/s -     44.472M in   5.054942s
       block + yield      9.896M (± 0.5%) i/s -     50.437M in   5.096875s
        unused block     13.020M (± 0.4%) i/s -     65.246M in   5.011488s
               yield     11.290M (± 0.5%) i/s -     57.017M in   5.050575s

Comparison:
        unused block: 13019591.0 i/s
               yield: 11289545.8 i/s - 1.15x  (± 0.00) slower
       block + yield:  9895829.7 i/s - 1.32x  (± 0.00) slower
          block.call:  8797685.2 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   316.915k i/100ms
      range#include?    12.298k i/100ms
       range#member?    12.306k i/100ms
       plain compare   494.183k i/100ms
Calculating -------------------------------------
        range#cover?      3.203M (± 0.5%) i/s -     16.163M in   5.046379s
      range#include?    124.912k (± 0.5%) i/s -    627.198k in   5.021243s
       range#member?    125.264k (± 1.2%) i/s -    627.606k in   5.011037s
       plain compare      4.943M (± 0.6%) i/s -     25.203M in   5.099024s

Comparison:
       plain compare:  4942960.3 i/s
        range#cover?:  3202915.6 i/s - 1.54x  (± 0.00) slower
       range#member?:   125264.2 i/s - 39.46x  (± 0.00) slower
      range#include?:   124911.8 i/s - 39.57x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       String#match?   920.995k i/100ms
           String#=~   615.263k i/100ms
          Regexp#===   592.953k i/100ms
        String#match   487.133k i/100ms
Calculating -------------------------------------
       String#match?      9.237M (± 0.5%) i/s -     46.971M in   5.085193s
           String#=~      6.233M (± 0.8%) i/s -     31.378M in   5.034653s
          Regexp#===      5.999M (± 0.6%) i/s -     30.241M in   5.041429s
        String#match      4.839M (± 0.6%) i/s -     24.357M in   5.033219s

Comparison:
       String#match?:  9237044.3 i/s
           String#=~:  6232857.3 i/s - 1.48x  (± 0.00) slower
          Regexp#===:  5998644.3 i/s - 1.54x  (± 0.00) slower
        String#match:  4839364.8 i/s - 1.91x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   639.403k i/100ms
      String#casecmp   818.298k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.406M (± 0.5%) i/s -     32.610M in   5.090961s
      String#casecmp      8.154M (± 0.5%) i/s -     40.915M in   5.017678s

Comparison:
      String#casecmp:  8154374.0 i/s
String#downcase + ==:  6405573.1 i/s - 1.27x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            String#+   555.402k i/100ms
       String#concat   601.344k i/100ms
       String#append   664.580k i/100ms
         "foo" "bar"     1.178M i/100ms
  "#{'foo'}#{'bar'}"     1.173M i/100ms
Calculating -------------------------------------
            String#+      5.490M (± 0.6%) i/s -     27.770M in   5.058840s
       String#concat      6.060M (± 0.6%) i/s -     30.669M in   5.060973s
       String#append      6.657M (± 0.7%) i/s -     33.894M in   5.091920s
         "foo" "bar"     11.694M (± 0.6%) i/s -     58.923M in   5.038933s
  "#{'foo'}#{'bar'}"     11.671M (± 0.6%) i/s -     58.670M in   5.027152s

Comparison:
         "foo" "bar": 11693910.6 i/s
  "#{'foo'}#{'bar'}": 11671041.2 i/s - same-ish: difference falls within error
       String#append:  6656661.0 i/s - 1.76x  (± 0.00) slower
       String#concat:  6060032.6 i/s - 1.93x  (± 0.00) slower
            String#+:  5489619.9 i/s - 2.13x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#+@     1.011M i/100ms
          String#dup   560.076k i/100ms
Calculating -------------------------------------
           String#+@     10.102M (± 0.3%) i/s -     50.568M in   5.005688s
          String#dup      5.598M (± 0.5%) i/s -     28.004M in   5.002837s

Comparison:
           String#+@: 10102201.5 i/s
          String#dup:  5597743.3 i/s - 1.80x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   183.301k i/100ms
       String#match?   419.811k i/100ms
    String#end_with?   596.801k i/100ms
Calculating -------------------------------------
           String#=~      1.855M (± 0.6%) i/s -      9.348M in   5.039874s
       String#match?      4.171M (± 0.6%) i/s -     20.991M in   5.032150s
    String#end_with?      6.106M (± 0.9%) i/s -     31.034M in   5.082960s

Comparison:
    String#end_with?:  6105940.2 i/s
       String#match?:  4171467.5 i/s - 1.46x  (± 0.00) slower
           String#=~:  1854954.8 i/s - 3.29x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   109.428k i/100ms
          String#sub   130.205k i/100ms
String#dup["string"]=
                       176.454k i/100ms
Calculating -------------------------------------
         String#gsub      1.106M (± 0.7%) i/s -      5.581M in   5.044638s
          String#sub      1.345M (± 0.5%) i/s -      6.771M in   5.034534s
String#dup["string"]=
                          1.766M (± 0.4%) i/s -      8.999M in   5.094889s

Comparison:
String#dup["string"]=:  1766340.3 i/s
          String#sub:  1344874.5 i/s - 1.31x  (± 0.00) slower
         String#gsub:  1106342.1 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    99.683k i/100ms
           String#tr   335.524k i/100ms
Calculating -------------------------------------
         String#gsub      1.010M (± 0.5%) i/s -      5.084M in   5.035755s
           String#tr      3.336M (± 0.4%) i/s -     16.776M in   5.029571s

Comparison:
           String#tr:  3335565.9 i/s
         String#gsub:  1009576.7 i/s - 3.30x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.172M i/100ms
         With Freeze     1.686M i/100ms
Calculating -------------------------------------
      Without Freeze     11.703M (± 0.5%) i/s -     58.575M in   5.005238s
         With Freeze     16.855M (± 0.4%) i/s -     84.288M in   5.001007s

Comparison:
         With Freeze: 16854504.9 i/s
      Without Freeze: 11702997.2 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.598k i/100ms
      String#squeeze   158.551k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     36.182k (± 0.6%) i/s -    183.498k in   5.071775s
      String#squeeze      1.593M (± 0.5%) i/s -      8.086M in   5.074704s

Comparison:
      String#squeeze:  1593447.7 i/s
 String#gsub/regex+/:    36181.7 i/s - 44.04x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   284.247k i/100ms
       String#match?   725.017k i/100ms
  String#start_with?   881.283k i/100ms
Calculating -------------------------------------
           String#=~      2.849M (± 0.8%) i/s -     14.497M in   5.087766s
       String#match?      7.230M (± 1.6%) i/s -     36.251M in   5.015433s
  String#start_with?      8.822M (± 0.4%) i/s -     44.945M in   5.094676s

Comparison:
  String#start_with?:  8822202.5 i/s
       String#match?:  7229843.6 i/s - 1.22x  (± 0.00) slower
           String#=~:  2849475.6 i/s - 3.10x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   199.542k i/100ms
    String#[0, n] ==    88.568k i/100ms
   String#[RANGE] ==    79.773k i/100ms
   String#[0...n] ==    42.723k i/100ms
Calculating -------------------------------------
  String#start_with?      2.028M (± 0.9%) i/s -     10.177M in   5.017957s
    String#[0, n] ==    856.673k (± 1.0%) i/s -      4.340M in   5.066436s
   String#[RANGE] ==    793.790k (± 0.9%) i/s -      3.989M in   5.025259s
   String#[0...n] ==    423.496k (± 0.6%) i/s -      2.136M in   5.044281s

Comparison:
  String#start_with?:  2028223.0 i/s
    String#[0, n] ==:   856673.3 i/s - 2.37x  (± 0.00) slower
   String#[RANGE] ==:   793790.4 i/s - 2.56x  (± 0.00) slower
   String#[0...n] ==:   423496.2 i/s - 4.79x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   171.657k i/100ms
 String#sub!'string'   121.253k i/100ms
String#gsub!'string'    76.977k i/100ms
  String#[/regexp/]=   151.811k i/100ms
 String#sub!/regexp/   115.245k i/100ms
String#gsub!/regexp/    61.320k i/100ms
Calculating -------------------------------------
  String#['string']=      1.773M (± 0.9%) i/s -      8.926M in   5.034939s
 String#sub!'string'      1.237M (± 0.5%) i/s -      6.184M in   5.000336s
String#gsub!'string'    772.169k (± 0.5%) i/s -      3.926M in   5.084280s
  String#[/regexp/]=      1.506M (± 0.2%) i/s -      7.591M in   5.041506s
 String#sub!/regexp/      1.107M (± 0.7%) i/s -      5.647M in   5.099884s
String#gsub!/regexp/    609.872k (± 0.3%) i/s -      3.066M in   5.027315s

Comparison:
  String#['string']=:  1772994.0 i/s
  String#[/regexp/]=:  1505621.0 i/s - 1.18x  (± 0.00) slower
 String#sub!'string':  1236732.7 i/s - 1.43x  (± 0.00) slower
 String#sub!/regexp/:  1107332.3 i/s - 1.60x  (± 0.00) slower
String#gsub!'string':   772168.5 i/s - 2.30x  (± 0.00) slower
String#gsub!/regexp/:   609872.5 i/s - 2.91x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          String#sub   140.381k i/100ms
        String#chomp   537.880k i/100ms
String#delete_suffix   596.042k i/100ms
Calculating -------------------------------------
          String#sub      1.390M (± 0.7%) i/s -      7.019M in   5.050771s
        String#chomp      5.368M (± 1.0%) i/s -     26.894M in   5.010844s
String#delete_suffix      5.929M (± 0.4%) i/s -     29.802M in   5.026307s

Comparison:
String#delete_suffix:  5929337.3 i/s
        String#chomp:  5367687.0 i/s - 1.10x  (± 0.00) slower
          String#sub:  1389768.7 i/s - 4.27x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   603.277k i/100ms
          String#sub   143.567k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.112M (± 0.5%) i/s -     30.767M in   5.034081s
          String#sub      1.427M (± 0.4%) i/s -      7.178M in   5.030001s

Comparison:
String#delete_prefix:  6111936.9 i/s
          String#sub:  1427128.1 i/s - 4.28x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   590.741k i/100ms
    String#unpack[0]   467.761k i/100ms
Calculating -------------------------------------
      String#unpack1      5.891M (± 0.5%) i/s -     29.537M in   5.014331s
    String#unpack[0]      4.636M (± 0.4%) i/s -     23.388M in   5.045052s

Comparison:
      String#unpack1:  5890692.6 i/s
    String#unpack[0]:  4635916.1 i/s - 1.27x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.452k i/100ms
          Time.parse     9.149k i/100ms
Calculating -------------------------------------
        Time.iso8601    275.158k (± 0.2%) i/s -      1.400M in   5.088192s
          Time.parse     91.175k (± 0.4%) i/s -    457.450k in   5.017366s

Comparison:
        Time.iso8601:   275158.3 i/s
          Time.parse:    91174.8 i/s - 3.02x  (± 0.00) slower

