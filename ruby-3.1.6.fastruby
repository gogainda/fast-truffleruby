$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       769.848k i/100ms
Function with splat arguments
                        23.483k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.695M (± 0.6%) i/s -     38.492M in   5.002503s
Function with splat arguments
                        226.087k (± 7.8%) i/s -      1.127M in   5.022395s

Comparison:
Function with single Array argument:  7694874.2 i/s
Function with splat arguments:   226086.9 i/s - 34.04x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   995.468k i/100ms
Sequential Assignment
                         1.011M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.006M (± 0.4%) i/s -     50.769M in   5.074080s
Sequential Assignment
                          9.947M (± 1.0%) i/s -     50.553M in   5.082661s

Comparison:
 Parallel Assignment: 10005662.1 i/s
Sequential Assignment:  9947179.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   409.385k i/100ms
       attr_accessor   551.492k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.084M (± 2.1%) i/s -     20.469M in   5.014706s
       attr_accessor      5.462M (± 0.4%) i/s -     27.575M in   5.048117s

Comparison:
       attr_accessor:  5462437.0 i/s
   getter_and_setter:  4083530.1 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    90.118k i/100ms
         respond_to?   788.307k i/100ms
Calculating -------------------------------------
      begin...rescue    901.546k (± 0.5%) i/s -      4.596M in   5.098078s
         respond_to?      7.898M (± 0.3%) i/s -     40.204M in   5.090556s

Comparison:
         respond_to?:  7897774.8 i/s
      begin...rescue:   901546.3 i/s - 8.76x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              normal   267.520k i/100ms
             &method   123.651k i/100ms
Calculating -------------------------------------
              normal      2.688M (± 0.3%) i/s -     13.644M in   5.075081s
             &method      1.240M (± 0.4%) i/s -      6.306M in   5.086880s

Comparison:
              normal:  2688365.8 i/s
             &method:  1239720.3 i/s - 2.17x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       237.000  i/100ms
       define_method   297.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.282k (±21.8%) i/s -      9.954k in   5.039108s
       define_method      3.259k (±19.0%) i/s -     14.850k in   5.058322s

Comparison:
       define_method:     3259.4 i/s
module_eval with string:     2281.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Float#round   256.598k i/100ms
       Kernel#format   203.031k i/100ms
            String#%   172.945k i/100ms
Calculating -------------------------------------
         Float#round      2.622M (± 1.3%) i/s -     13.343M in   5.089051s
       Kernel#format      2.029M (± 0.4%) i/s -     10.152M in   5.004213s
            String#%      1.739M (± 0.4%) i/s -      8.820M in   5.071200s

Comparison:
         Float#round:  2622387.3 i/s
       Kernel#format:  2028630.9 i/s - 1.29x  (± 0.00) slower
            String#%:  1739302.3 i/s - 1.51x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash   904.829k i/100ms
          OpenStruct   516.895k i/100ms
Calculating -------------------------------------
                Hash      9.211M (± 0.4%) i/s -     46.146M in   5.009892s
          OpenStruct      5.120M (± 0.4%) i/s -     25.845M in   5.047704s

Comparison:
                Hash:  9211188.4 i/s
          OpenStruct:  5120178.0 i/s - 1.80x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.112M i/100ms
          OpenStruct     9.873k i/100ms
Calculating -------------------------------------
                Hash     11.117M (± 0.4%) i/s -     55.602M in   5.001740s
          OpenStruct     95.291k (± 2.8%) i/s -    483.777k in   5.080957s

Comparison:
                Hash: 11116629.3 i/s
          OpenStruct:    95290.9 i/s - 116.66x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   593.630k i/100ms
  ancestors.include?    89.363k i/100ms
Calculating -------------------------------------
  less than or equal      5.738M (± 1.0%) i/s -     29.088M in   5.069688s
  ancestors.include?    890.551k (± 1.0%) i/s -      4.468M in   5.017766s

Comparison:
  less than or equal:  5738144.2 i/s
  ancestors.include?:   890551.2 i/s - 6.44x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.664  (± 0.0%) i/s -      4.000  in   6.026343s
         Kernel loop      0.222  (± 0.0%) i/s -      2.000  in   8.989769s

Comparison:
          While Loop:        0.7 i/s
         Kernel loop:        0.2 i/s - 2.98x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.518M i/100ms
         Array#first     1.328M i/100ms
Calculating -------------------------------------
           Array#[0]     15.155M (± 0.4%) i/s -     75.905M in   5.008657s
         Array#first     13.252M (± 0.3%) i/s -     66.411M in   5.011358s

Comparison:
           Array#[0]: 15154918.0 i/s
         Array#first: 13252302.4 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.558M i/100ms
          Array#last     1.255M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.594M (± 0.3%) i/s -     79.452M in   5.094937s
          Array#last     12.741M (± 0.2%) i/s -     63.986M in   5.021891s

Comparison:
          Array#[-1]: 15594388.5 i/s
          Array#last: 12741404.3 i/s - 1.22x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    99.404k i/100ms
Calculating -------------------------------------
                find      0.264  (± 0.0%) i/s -      2.000  in   7.575474s
             bsearch    992.498k (± 1.4%) i/s -      4.970M in   5.008856s

Comparison:
             bsearch:   992497.7 i/s
                find:        0.3 i/s - 3759313.23x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    19.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    196.543  (± 2.5%) i/s -    988.000  in   5.030538s
        Array#insert      1.449  (± 0.0%) i/s -      8.000  in   5.521504s

Comparison:
       Array#unshift:      196.5 i/s
        Array#insert:        1.4 i/s - 135.64x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.090M i/100ms
          Array#size     2.106M i/100ms
         Array#count     1.628M i/100ms
Calculating -------------------------------------
        Array#length     20.915M (± 0.5%) i/s -    106.586M in   5.096387s
          Array#size     21.021M (± 0.4%) i/s -    105.276M in   5.008157s
         Array#count     16.325M (± 0.6%) i/s -     83.032M in   5.086523s

Comparison:
          Array#size: 21021131.8 i/s
        Array#length: 20914669.0 i/s - same-ish: difference falls within error
         Array#count: 16324503.5 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    46.102k i/100ms
        Array#sample     1.043M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    457.680k (± 1.4%) i/s -      2.305M in   5.037552s
        Array#sample     10.460M (± 0.4%) i/s -     53.200M in   5.086177s

Comparison:
        Array#sample: 10459766.6 i/s
 Array#shuffle.first:   457679.8 i/s - 22.85x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    64.288k i/100ms
          Date.parse    31.879k i/100ms
Calculating -------------------------------------
        Date.iso8601    649.416k (± 0.3%) i/s -      3.279M in   5.048721s
          Date.parse    321.073k (± 0.5%) i/s -      1.626M in   5.063874s

Comparison:
        Date.iso8601:   649416.0 i/s
          Date.parse:   321073.2 i/s - 2.02x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.623k i/100ms
           Array#map    27.027k i/100ms
Calculating -------------------------------------
   Array#each + push    189.985k (± 0.7%) i/s -    968.396k in   5.097464s
           Array#map    269.405k (± 0.5%) i/s -      1.351M in   5.016177s

Comparison:
           Array#map:   269405.2 i/s
   Array#each + push:   189985.2 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            For loop    29.719k i/100ms
               #each    32.417k i/100ms
Calculating -------------------------------------
            For loop    297.403k (± 0.5%) i/s -      1.516M in   5.096465s
               #each    324.503k (± 0.3%) i/s -      1.653M in   5.094822s

Comparison:
               #each:   324503.1 i/s
            For loop:   297403.1 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop    28.195k i/100ms
     each_with_index    19.263k i/100ms
Calculating -------------------------------------
          While Loop    273.685k (± 0.3%) i/s -      1.382M in   5.048035s
     each_with_index    194.120k (± 0.5%) i/s -    982.413k in   5.060984s

Comparison:
          While Loop:   273685.0 i/s
     each_with_index:   194120.0 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    93.236k i/100ms
      inject to_proc     2.200k i/100ms
        inject block     2.066k i/100ms
Calculating -------------------------------------
       inject symbol      1.043M (±15.7%) i/s -      5.128M in   5.027448s
      inject to_proc     22.029k (± 1.1%) i/s -    112.200k in   5.093871s
        inject block     20.751k (± 0.6%) i/s -    105.366k in   5.077801s

Comparison:
       inject symbol:  1042536.4 i/s
      inject to_proc:    22029.1 i/s - 47.33x  (± 0.00) slower
        inject block:    20751.2 i/s - 50.24x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.845k i/100ms
   Array#map.flatten     4.010k i/100ms
      Array#flat_map     9.586k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     69.198k (± 0.5%) i/s -    349.095k in   5.044989s
   Array#map.flatten     39.490k (± 0.4%) i/s -    200.500k in   5.077279s
      Array#flat_map     96.054k (± 0.4%) i/s -    488.886k in   5.089820s

Comparison:
      Array#flat_map:    96053.7 i/s
Array#map.flatten(1):    69198.2 i/s - 1.39x  (± 0.00) slower
   Array#map.flatten:    39490.1 i/s - 2.43x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    30.519k i/100ms
  Array#reverse_each    31.407k i/100ms
Calculating -------------------------------------
  Array#reverse.each    306.876k (± 0.2%) i/s -      1.556M in   5.072009s
  Array#reverse_each    316.019k (± 0.4%) i/s -      1.602M in   5.068630s

Comparison:
  Array#reverse_each:   316019.1 i/s
  Array#reverse.each:   306875.9 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        21.006k i/100ms
   Enumerable#detect    81.730k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        209.400k (± 1.0%) i/s -      4.201M in  20.064968s
   Enumerable#detect    818.595k (± 0.5%) i/s -     16.428M in  20.068642s

Comparison:
   Enumerable#detect:   818595.3 i/s
Enumerable#select.first:   209399.9 i/s - 3.91x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       248.683k i/100ms
Enumerable#select.last
                        18.546k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.436M (± 0.6%) i/s -     12.185M in   5.002337s
Enumerable#select.last
                        189.482k (± 0.9%) i/s -    964.392k in   5.090008s

Comparison:
Enumerable#reverse.detect:  2436045.1 i/s
Enumerable#select.last:   189481.9 i/s - 12.86x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.842k i/100ms
  Enumerable#sort_by     4.702k i/100ms
     Enumerable#sort     2.385k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         47.613k (± 0.7%) i/s -    242.100k in   5.085026s
  Enumerable#sort_by     46.757k (± 0.8%) i/s -    235.100k in   5.028452s
     Enumerable#sort     24.191k (± 0.6%) i/s -    121.635k in   5.028252s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    47613.0 i/s
  Enumerable#sort_by:    46756.6 i/s - 1.02x  (± 0.00) slower
     Enumerable#sort:    24191.2 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.893k i/100ms
Enumerable#sort_by...first
                         8.498k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    178.869k (± 1.9%) i/s -    894.650k in   5.003685s
Enumerable#sort_by...first
                         87.559k (± 0.9%) i/s -    441.896k in   5.047244s

Comparison:
   Enumerable#min_by:   178868.6 i/s
Enumerable#sort_by...first:    87558.9 i/s - 2.04x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   428.184k i/100ms
            Hash#dup   302.021k i/100ms
Calculating -------------------------------------
              Hash[]      4.129M (± 1.3%) i/s -     20.981M in   5.082758s
            Hash#dup      3.204M (± 2.3%) i/s -     16.309M in   5.092291s

Comparison:
              Hash[]:  4128646.1 i/s
            Hash#dup:  3204333.0 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.443M i/100ms
  Hash#fetch, symbol     1.182M i/100ms
     Hash#[], string     1.250M i/100ms
  Hash#fetch, string   777.917k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.428M (± 0.4%) i/s -     73.595M in   5.100813s
  Hash#fetch, symbol     11.801M (± 1.5%) i/s -     59.111M in   5.010257s
     Hash#[], string     12.356M (± 0.5%) i/s -     62.516M in   5.059843s
  Hash#fetch, string      7.847M (± 0.7%) i/s -     39.674M in   5.056153s

Comparison:
     Hash#[], symbol: 14428393.3 i/s
     Hash#[], string: 12355691.0 i/s - 1.17x  (± 0.00) slower
  Hash#fetch, symbol: 11800684.0 i/s - 1.22x  (± 0.00) slower
  Hash#fetch, string:  7847030.7 i/s - 1.84x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   862.479k i/100ms
             Hash#[]     1.025M i/100ms
          Hash#[] ||   882.353k i/100ms
          Hash#[] &&   382.962k i/100ms
          Hash#fetch   597.275k i/100ms
 Hash#fetch fallback   389.519k i/100ms
Calculating -------------------------------------
            Hash#dig      8.645M (± 0.3%) i/s -     43.986M in   5.088017s
             Hash#[]     10.227M (± 0.5%) i/s -     51.269M in   5.013346s
          Hash#[] ||      9.645M (± 0.8%) i/s -     48.529M in   5.032051s
          Hash#[] &&      3.874M (± 1.3%) i/s -     19.531M in   5.041903s
          Hash#fetch      6.114M (± 0.8%) i/s -     31.058M in   5.079788s
 Hash#fetch fallback      3.944M (± 0.7%) i/s -     19.865M in   5.036638s

Comparison:
             Hash#[]: 10226799.9 i/s
          Hash#[] ||:  9644624.0 i/s - 1.06x  (± 0.00) slower
            Hash#dig:  8645191.9 i/s - 1.18x  (± 0.00) slower
          Hash#fetch:  6114437.4 i/s - 1.67x  (± 0.00) slower
 Hash#fetch fallback:  3944399.8 i/s - 2.59x  (± 0.00) slower
          Hash#[] &&:  3874400.0 i/s - 2.64x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.445M i/100ms
  Hash#fetch + block     1.418M i/100ms
    Hash#fetch + arg     1.108M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.618M (± 0.5%) i/s -     73.712M in   5.042793s
  Hash#fetch + block     14.192M (± 0.7%) i/s -     72.323M in   5.096448s
    Hash#fetch + arg     11.076M (± 0.5%) i/s -     55.403M in   5.002329s

Comparison:
  Hash#fetch + const: 14617635.5 i/s
  Hash#fetch + block: 14191524.6 i/s - 1.03x  (± 0.00) slower
    Hash#fetch + arg: 11075828.0 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.529k i/100ms
         sort + to_h    10.869k i/100ms
Calculating -------------------------------------
      sort_by + to_h    272.380k (± 4.3%) i/s -      1.376M in   5.065606s
         sort + to_h    109.360k (± 0.6%) i/s -    554.319k in   5.068907s

Comparison:
      sort_by + to_h:   272379.8 i/s
         sort + to_h:   109360.4 i/s - 2.49x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   180.220k i/100ms
       Hash#each_key   207.159k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.834M (± 0.7%) i/s -      9.191M in   5.013104s
       Hash#each_key      2.028M (± 0.5%) i/s -     10.151M in   5.005794s

Comparison:
       Hash#each_key:  2027865.2 i/s
      Hash#keys.each:  1833519.2 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     2.289k i/100ms
           Hash#key?   937.545k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     22.153k (± 4.5%) i/s -    112.161k in   5.076278s
           Hash#key?      9.460M (± 0.3%) i/s -     47.815M in   5.054490s

Comparison:
           Hash#key?:  9459952.6 i/s
  Hash#keys.include?:    22152.8 i/s - 427.03x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.014k i/100ms
            Hash#[]=    10.363k i/100ms
Calculating -------------------------------------
         Hash#merge!     39.895k (± 1.9%) i/s -    200.700k in   5.032742s
            Hash#[]=    103.686k (± 1.6%) i/s -    528.513k in   5.098474s

Comparison:
            Hash#[]=:   103685.8 i/s
         Hash#merge!:    39895.2 i/s - 2.60x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.718k i/100ms
      Hash#merge({})     3.939k i/100ms
 Hash#dup#merge!({})     2.900k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         47.448k (± 0.5%) i/s -    240.618k in   5.071323s
      Hash#merge({})     39.157k (± 0.6%) i/s -    196.950k in   5.029949s
 Hash#dup#merge!({})     28.738k (± 0.4%) i/s -    145.000k in   5.045718s

Comparison:
{}#merge!(Hash) do end:    47448.0 i/s
      Hash#merge({}):    39156.9 i/s - 1.21x  (± 0.00) slower
 Hash#dup#merge!({}):    28737.8 i/s - 1.65x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   388.573k i/100ms
          Hash#merge   362.296k i/100ms
Calculating -------------------------------------
        Hash#**other      3.883M (± 0.2%) i/s -     19.429M in   5.003607s
          Hash#merge      3.570M (± 0.6%) i/s -     18.115M in   5.074432s

Comparison:
        Hash#**other:  3882948.2 i/s
          Hash#merge:  3569937.7 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.635k i/100ms
         Hash#merge!     3.944k i/100ms
Calculating -------------------------------------
          Hash#merge     16.671k (± 1.5%) i/s -     83.385k in   5.002913s
         Hash#merge!     39.584k (± 0.4%) i/s -    201.144k in   5.081547s

Comparison:
         Hash#merge!:    39583.8 i/s
          Hash#merge:    16670.9 i/s - 2.37x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      424.464k i/100ms
Array#each             224.337k i/100ms
Array#each_w/_object   177.674k i/100ms
Hash#select-include     71.430k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.238M (± 0.3%) i/s -     21.223M in   5.008425s
Array#each                2.196M (± 0.2%) i/s -     10.993M in   5.006568s
Array#each_w/_object      1.762M (± 0.2%) i/s -      8.884M in   5.043267s
Hash#select-include     720.106k (± 0.8%) i/s -      3.643M in   5.059218s

Comparison:
Hash#native-slice   :  4237546.6 i/s
Array#each          :  2195624.0 i/s - 1.93x  (± 0.00) slower
Array#each_w/_object:  1761507.5 i/s - 2.41x  (± 0.00) slower
Hash#select-include :   720105.7 i/s - 5.88x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     3.298k i/100ms
         Hash#value?     3.296k i/100ms
Calculating -------------------------------------
Hash#values.include?     32.703k (± 5.1%) i/s -    164.900k in   5.061914s
         Hash#value?     33.441k (± 0.6%) i/s -    168.096k in   5.026779s

Comparison:
         Hash#value?:    33441.2 i/s
Hash#values.include?:    32702.9 i/s - same-ish: difference falls within error

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                call   639.610k i/100ms
                send   527.652k i/100ms
      method_missing   384.648k i/100ms
Calculating -------------------------------------
                call      6.451M (± 0.4%) i/s -     32.620M in   5.056810s
                send      5.268M (± 0.2%) i/s -     26.383M in   5.008201s
      method_missing      3.829M (± 0.3%) i/s -     19.232M in   5.022332s

Comparison:
                call:  6450844.9 i/s
                send:  5267900.0 i/s - 1.22x  (± 0.00) slower
      method_missing:  3829416.9 i/s - 1.68x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
               Block     8.752k i/100ms
      Symbol#to_proc     9.970k i/100ms
Calculating -------------------------------------
               Block     88.066k (± 0.6%) i/s -    446.352k in   5.068624s
      Symbol#to_proc     99.512k (± 0.5%) i/s -    498.500k in   5.009565s

Comparison:
      Symbol#to_proc:    99512.1 i/s
               Block:    88065.5 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          block.call   944.989k i/100ms
       block + yield     1.002M i/100ms
        unused block     1.304M i/100ms
               yield     1.191M i/100ms
Calculating -------------------------------------
          block.call      9.455M (± 0.3%) i/s -     48.194M in   5.097270s
       block + yield     10.027M (± 0.3%) i/s -     51.087M in   5.094786s
        unused block     13.042M (± 0.3%) i/s -     65.222M in   5.000939s
               yield     11.933M (± 0.2%) i/s -     60.760M in   5.091970s

Comparison:
        unused block: 13042024.3 i/s
               yield: 11932578.6 i/s - 1.09x  (± 0.00) slower
       block + yield: 10027425.5 i/s - 1.30x  (± 0.00) slower
          block.call:  9455063.2 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   326.564k i/100ms
      range#include?    12.523k i/100ms
       range#member?    12.536k i/100ms
       plain compare   529.618k i/100ms
Calculating -------------------------------------
        range#cover?      3.295M (± 0.8%) i/s -     16.655M in   5.054260s
      range#include?    125.857k (± 0.4%) i/s -    638.673k in   5.074676s
       range#member?    125.715k (± 0.5%) i/s -    639.336k in   5.085697s
       plain compare      5.307M (± 0.4%) i/s -     27.011M in   5.089629s

Comparison:
       plain compare:  5307062.2 i/s
        range#cover?:  3295386.1 i/s - 1.61x  (± 0.00) slower
      range#include?:   125856.6 i/s - 42.17x  (± 0.00) slower
       range#member?:   125715.3 i/s - 42.21x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       String#match?   912.628k i/100ms
           String#=~   646.941k i/100ms
          Regexp#===   563.686k i/100ms
        String#match   464.703k i/100ms
Calculating -------------------------------------
       String#match?      9.078M (± 0.8%) i/s -     45.631M in   5.026782s
           String#=~      6.449M (± 0.6%) i/s -     32.347M in   5.016108s
          Regexp#===      5.637M (± 0.4%) i/s -     28.748M in   5.099500s
        String#match      4.662M (± 0.4%) i/s -     23.700M in   5.083451s

Comparison:
       String#match?:  9078211.8 i/s
           String#=~:  6448888.6 i/s - 1.41x  (± 0.00) slower
          Regexp#===:  5637495.6 i/s - 1.61x  (± 0.00) slower
        String#match:  4662223.6 i/s - 1.95x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   656.224k i/100ms
      String#casecmp   810.055k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.581M (± 1.5%) i/s -     33.467M in   5.086282s
      String#casecmp      8.048M (± 0.5%) i/s -     40.503M in   5.033042s

Comparison:
      String#casecmp:  8047605.1 i/s
String#downcase + ==:  6581432.7 i/s - 1.22x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            String#+   599.629k i/100ms
       String#concat   629.341k i/100ms
       String#append   674.870k i/100ms
         "foo" "bar"     1.181M i/100ms
  "#{'foo'}#{'bar'}"     1.183M i/100ms
Calculating -------------------------------------
            String#+      6.018M (± 0.6%) i/s -     30.581M in   5.081558s
       String#concat      6.258M (± 0.5%) i/s -     31.467M in   5.028703s
       String#append      6.746M (± 0.5%) i/s -     33.744M in   5.002196s
         "foo" "bar"     11.769M (± 2.0%) i/s -     59.067M in   5.020913s
  "#{'foo'}#{'bar'}"     11.829M (± 0.5%) i/s -     59.155M in   5.000993s

Comparison:
  "#{'foo'}#{'bar'}": 11828940.3 i/s
         "foo" "bar": 11769240.9 i/s - same-ish: difference falls within error
       String#append:  6745879.1 i/s - 1.75x  (± 0.00) slower
       String#concat:  6257634.6 i/s - 1.89x  (± 0.00) slower
            String#+:  6018279.0 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#+@     1.001M i/100ms
          String#dup   573.369k i/100ms
Calculating -------------------------------------
           String#+@     10.020M (± 0.2%) i/s -     51.075M in   5.097583s
          String#dup      5.722M (± 0.3%) i/s -     28.668M in   5.010676s

Comparison:
           String#+@: 10019543.0 i/s
          String#dup:  5721516.4 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   190.488k i/100ms
       String#match?   427.855k i/100ms
    String#end_with?   588.039k i/100ms
Calculating -------------------------------------
           String#=~      1.866M (± 0.6%) i/s -      9.334M in   5.001878s
       String#match?      4.283M (± 0.3%) i/s -     21.821M in   5.095228s
    String#end_with?      5.881M (± 0.3%) i/s -     29.990M in   5.099443s

Comparison:
    String#end_with?:  5881089.3 i/s
       String#match?:  4282585.5 i/s - 1.37x  (± 0.00) slower
           String#=~:  1866138.9 i/s - 3.15x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   113.829k i/100ms
          String#sub   141.821k i/100ms
String#dup["string"]=
                       180.602k i/100ms
Calculating -------------------------------------
         String#gsub      1.141M (± 4.4%) i/s -      5.691M in   5.003052s
          String#sub      1.413M (± 0.6%) i/s -      7.091M in   5.019457s
String#dup["string"]=
                          1.794M (± 0.9%) i/s -      9.030M in   5.033993s

Comparison:
String#dup["string"]=:  1793981.5 i/s
          String#sub:  1412759.3 i/s - 1.27x  (± 0.00) slower
         String#gsub:  1140706.0 i/s - 1.57x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   105.377k i/100ms
           String#tr   343.044k i/100ms
Calculating -------------------------------------
         String#gsub      1.061M (± 0.6%) i/s -      5.374M in   5.064384s
           String#tr      3.447M (± 0.4%) i/s -     17.495M in   5.075605s

Comparison:
           String#tr:  3446990.3 i/s
         String#gsub:  1061218.5 i/s - 3.25x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.161M i/100ms
         With Freeze     1.693M i/100ms
Calculating -------------------------------------
      Without Freeze     11.600M (± 0.5%) i/s -     58.048M in   5.004120s
         With Freeze     16.941M (± 0.3%) i/s -     86.332M in   5.096158s

Comparison:
         With Freeze: 16940859.4 i/s
      Without Freeze: 11600209.5 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.432k i/100ms
      String#squeeze   156.248k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     34.298k (± 0.5%) i/s -    171.600k in   5.003303s
      String#squeeze      1.573M (± 0.4%) i/s -      7.969M in   5.067030s

Comparison:
      String#squeeze:  1572676.3 i/s
 String#gsub/regex+/:    34298.4 i/s - 45.85x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   285.602k i/100ms
       String#match?   759.375k i/100ms
  String#start_with?   866.965k i/100ms
Calculating -------------------------------------
           String#=~      2.881M (± 0.5%) i/s -     14.566M in   5.056175s
       String#match?      7.610M (± 0.6%) i/s -     38.728M in   5.089169s
  String#start_with?      8.665M (± 0.4%) i/s -     43.348M in   5.002497s

Comparison:
  String#start_with?:  8665449.9 i/s
       String#match?:  7610157.5 i/s - 1.14x  (± 0.00) slower
           String#=~:  2880851.3 i/s - 3.01x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   205.551k i/100ms
    String#[0, n] ==    82.617k i/100ms
   String#[RANGE] ==    78.437k i/100ms
   String#[0...n] ==    47.260k i/100ms
Calculating -------------------------------------
  String#start_with?      1.965M (± 1.1%) i/s -      9.866M in   5.022127s
    String#[0, n] ==    836.039k (± 1.7%) i/s -      4.213M in   5.041247s
   String#[RANGE] ==    773.650k (± 0.9%) i/s -      3.922M in   5.069723s
   String#[0...n] ==    481.066k (± 1.5%) i/s -      2.410M in   5.011380s

Comparison:
  String#start_with?:  1964825.3 i/s
    String#[0, n] ==:   836038.9 i/s - 2.35x  (± 0.00) slower
   String#[RANGE] ==:   773650.2 i/s - 2.54x  (± 0.00) slower
   String#[0...n] ==:   481065.8 i/s - 4.08x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   181.705k i/100ms
 String#sub!'string'   131.490k i/100ms
String#gsub!'string'    78.835k i/100ms
  String#[/regexp/]=   155.715k i/100ms
 String#sub!/regexp/   116.998k i/100ms
String#gsub!/regexp/    60.668k i/100ms
Calculating -------------------------------------
  String#['string']=      1.828M (± 0.4%) i/s -      9.267M in   5.068235s
 String#sub!'string'      1.298M (± 0.6%) i/s -      6.574M in   5.063809s
String#gsub!'string'    795.102k (± 0.3%) i/s -      4.021M in   5.056727s
  String#[/regexp/]=      1.567M (± 0.3%) i/s -      7.941M in   5.066632s
 String#sub!/regexp/      1.145M (± 0.7%) i/s -      5.733M in   5.006616s
String#gsub!/regexp/    617.019k (± 1.2%) i/s -      3.094M in   5.015288s

Comparison:
  String#['string']=:  1828468.3 i/s
  String#[/regexp/]=:  1567418.4 i/s - 1.17x  (± 0.00) slower
 String#sub!'string':  1298375.7 i/s - 1.41x  (± 0.00) slower
 String#sub!/regexp/:  1145121.7 i/s - 1.60x  (± 0.00) slower
String#gsub!'string':   795102.5 i/s - 2.30x  (± 0.00) slower
String#gsub!/regexp/:   617019.1 i/s - 2.96x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          String#sub   145.389k i/100ms
        String#chomp   547.230k i/100ms
String#delete_suffix   599.335k i/100ms
Calculating -------------------------------------
          String#sub      1.451M (± 0.5%) i/s -      7.269M in   5.009766s
        String#chomp      5.468M (± 0.3%) i/s -     27.362M in   5.003548s
String#delete_suffix      6.003M (± 0.5%) i/s -     30.566M in   5.092251s

Comparison:
String#delete_suffix:  6002620.4 i/s
        String#chomp:  5468462.4 i/s - 1.10x  (± 0.00) slower
          String#sub:  1451097.3 i/s - 4.14x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   635.811k i/100ms
          String#sub   150.054k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.344M (± 0.3%) i/s -     31.791M in   5.010978s
          String#sub      1.514M (± 0.6%) i/s -      7.653M in   5.055492s

Comparison:
String#delete_prefix:  6344224.2 i/s
          String#sub:  1513803.4 i/s - 4.19x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   626.006k i/100ms
    String#unpack[0]   482.843k i/100ms
Calculating -------------------------------------
      String#unpack1      6.242M (± 0.5%) i/s -     31.300M in   5.014323s
    String#unpack[0]      4.812M (± 0.5%) i/s -     24.142M in   5.017251s

Comparison:
      String#unpack1:  6242316.1 i/s
    String#unpack[0]:  4811943.8 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.452k i/100ms
          Time.parse     9.287k i/100ms
Calculating -------------------------------------
        Time.iso8601    273.622k (± 0.4%) i/s -      1.373M in   5.016476s
          Time.parse     92.561k (± 0.6%) i/s -    464.350k in   5.016844s

Comparison:
        Time.iso8601:   273622.1 i/s
          Time.parse:    92561.5 i/s - 2.96x  (± 0.00) slower

