$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       773.510k i/100ms
Function with splat arguments
                        26.968k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.745M (± 0.6%) i/s -     39.449M in   5.093693s
Function with splat arguments
                        262.479k (± 5.6%) i/s -      1.321M in   5.056319s

Comparison:
Function with single Array argument:  7744964.0 i/s
Function with splat arguments:   262479.3 i/s - 29.51x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.015M i/100ms
Sequential Assignment
                         1.013M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.157M (± 1.0%) i/s -     51.775M in   5.097872s
Sequential Assignment
                         10.181M (± 0.4%) i/s -     51.682M in   5.076522s

Comparison:
Sequential Assignment: 10180714.8 i/s
 Parallel Assignment: 10157259.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   483.189k i/100ms
       attr_accessor   565.452k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.834M (± 0.4%) i/s -     24.643M in   5.097800s
       attr_accessor      5.630M (± 1.5%) i/s -     28.273M in   5.022578s

Comparison:
       attr_accessor:  5630476.0 i/s
   getter_and_setter:  4834054.1 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    88.344k i/100ms
         respond_to?   782.075k i/100ms
Calculating -------------------------------------
      begin...rescue    887.674k (± 1.7%) i/s -      4.506M in   5.077237s
         respond_to?      7.876M (± 0.8%) i/s -     39.886M in   5.064393s

Comparison:
         respond_to?:  7876226.7 i/s
      begin...rescue:   887674.2 i/s - 8.87x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              normal   311.362k i/100ms
             &method   121.708k i/100ms
Calculating -------------------------------------
              normal      3.113M (± 0.3%) i/s -     15.879M in   5.100516s
             &method      1.237M (± 3.4%) i/s -      6.207M in   5.025106s

Comparison:
              normal:  3113332.3 i/s
             &method:  1237000.8 i/s - 2.52x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       255.000  i/100ms
       define_method   293.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.375k (±21.0%) i/s -     10.455k in   5.034290s
       define_method      3.205k (±19.8%) i/s -     14.650k in   5.008128s

Comparison:
       define_method:     3205.4 i/s
module_eval with string:     2374.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Float#round   262.310k i/100ms
       Kernel#format   202.211k i/100ms
            String#%   171.613k i/100ms
Calculating -------------------------------------
         Float#round      2.635M (± 0.3%) i/s -     13.378M in   5.077510s
       Kernel#format      2.014M (± 1.2%) i/s -     10.111M in   5.019885s
            String#%      1.716M (± 1.6%) i/s -      8.581M in   5.002943s

Comparison:
         Float#round:  2634749.8 i/s
       Kernel#format:  2014411.8 i/s - 1.31x  (± 0.00) slower
            String#%:  1715605.1 i/s - 1.54x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash   872.139k i/100ms
          OpenStruct   470.023k i/100ms
Calculating -------------------------------------
                Hash      8.886M (± 0.3%) i/s -     44.479M in   5.005831s
          OpenStruct      4.640M (± 1.6%) i/s -     23.501M in   5.066542s

Comparison:
                Hash:  8885526.0 i/s
          OpenStruct:  4639730.0 i/s - 1.92x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.071M i/100ms
          OpenStruct    11.630k i/100ms
Calculating -------------------------------------
                Hash     11.338M (± 0.4%) i/s -     56.737M in   5.004075s
          OpenStruct    117.723k (± 2.7%) i/s -    593.130k in   5.042094s

Comparison:
                Hash: 11338222.9 i/s
          OpenStruct:   117723.5 i/s - 96.31x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   593.874k i/100ms
  ancestors.include?   120.150k i/100ms
Calculating -------------------------------------
  less than or equal      5.844M (± 0.4%) i/s -     29.694M in   5.081124s
  ancestors.include?      1.193M (± 1.0%) i/s -      6.008M in   5.036140s

Comparison:
  less than or equal:  5844033.7 i/s
  ancestors.include?:  1192997.3 i/s - 4.90x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.546  (± 0.0%) i/s -      3.000  in   5.497142s
         Kernel loop      0.228  (± 0.0%) i/s -      2.000  in   8.774987s

Comparison:
          While Loop:        0.5 i/s
         Kernel loop:        0.2 i/s - 2.39x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.570M i/100ms
         Array#first     1.327M i/100ms
Calculating -------------------------------------
           Array#[0]     15.691M (± 0.3%) i/s -     78.503M in   5.003246s
         Array#first     13.275M (± 0.4%) i/s -     67.654M in   5.096540s

Comparison:
           Array#[0]: 15690625.2 i/s
         Array#first: 13274624.7 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.494M i/100ms
          Array#last     1.292M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.441M (± 1.4%) i/s -     77.710M in   5.033611s
          Array#last     12.904M (± 0.2%) i/s -     64.577M in   5.004311s

Comparison:
          Array#[-1]: 15441245.7 i/s
          Array#last: 12904313.9 i/s - 1.20x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    98.930k i/100ms
Calculating -------------------------------------
                find      0.285  (± 0.0%) i/s -      2.000  in   7.018715s
             bsearch    984.812k (± 2.2%) i/s -      4.946M in   5.025411s

Comparison:
             bsearch:   984811.9 i/s
                find:        0.3 i/s - 3456023.88x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    19.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    192.701  (± 4.2%) i/s -    969.000  in   5.037147s
        Array#insert      1.422  (± 0.0%) i/s -      8.000  in   5.626399s

Comparison:
       Array#unshift:      192.7 i/s
        Array#insert:        1.4 i/s - 135.52x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.086M i/100ms
          Array#size     2.092M i/100ms
         Array#count     1.647M i/100ms
Calculating -------------------------------------
        Array#length     20.934M (± 0.3%) i/s -    106.407M in   5.083057s
          Array#size     21.055M (± 0.4%) i/s -    106.693M in   5.067385s
         Array#count     16.501M (± 0.4%) i/s -     84.005M in   5.090837s

Comparison:
          Array#size: 21055246.1 i/s
        Array#length: 20933936.2 i/s - same-ish: difference falls within error
         Array#count: 16501457.9 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.564k i/100ms
        Array#sample     1.044M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    456.498k (± 0.8%) i/s -      2.324M in   5.090732s
        Array#sample     10.460M (± 0.3%) i/s -     53.238M in   5.089744s

Comparison:
        Array#sample: 10459954.0 i/s
 Array#shuffle.first:   456497.8 i/s - 22.91x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    64.862k i/100ms
          Date.parse    32.563k i/100ms
Calculating -------------------------------------
        Date.iso8601    647.337k (± 0.2%) i/s -      3.243M in   5.009938s
          Date.parse    324.646k (± 1.6%) i/s -      1.628M in   5.016545s

Comparison:
        Date.iso8601:   647337.2 i/s
          Date.parse:   324646.2 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    19.097k i/100ms
           Array#map    26.170k i/100ms
Calculating -------------------------------------
   Array#each + push    191.173k (± 0.4%) i/s -    973.947k in   5.094652s
           Array#map    261.025k (± 6.4%) i/s -      1.308M in   5.050401s

Comparison:
           Array#map:   261024.7 i/s
   Array#each + push:   191173.2 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            For loop    29.832k i/100ms
               #each    32.675k i/100ms
Calculating -------------------------------------
            For loop    298.105k (± 1.6%) i/s -      1.492M in   5.004953s
               #each    326.854k (± 0.6%) i/s -      1.666M in   5.098559s

Comparison:
               #each:   326854.1 i/s
            For loop:   298105.2 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.464k i/100ms
     each_with_index    18.630k i/100ms
Calculating -------------------------------------
          While Loop    274.693k (± 0.3%) i/s -      1.401M in   5.099080s
     each_with_index    188.621k (± 0.9%) i/s -    950.130k in   5.037669s

Comparison:
          While Loop:   274692.9 i/s
     each_with_index:   188621.0 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    92.614k i/100ms
      inject to_proc     2.199k i/100ms
        inject block     2.096k i/100ms
Calculating -------------------------------------
       inject symbol    965.870k (±10.7%) i/s -      4.816M in   5.031206s
      inject to_proc     21.974k (± 2.0%) i/s -    109.950k in   5.005890s
        inject block     21.046k (± 0.8%) i/s -    106.896k in   5.079482s

Comparison:
       inject symbol:   965870.2 i/s
      inject to_proc:    21973.5 i/s - 43.96x  (± 0.00) slower
        inject block:    21046.0 i/s - 45.89x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.874k i/100ms
   Array#map.flatten     4.004k i/100ms
      Array#flat_map     9.584k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     68.551k (± 0.3%) i/s -    343.700k in   5.013835s
   Array#map.flatten     39.529k (± 0.4%) i/s -    200.200k in   5.064699s
      Array#flat_map     95.926k (± 0.4%) i/s -    488.784k in   5.095515s

Comparison:
      Array#flat_map:    95926.0 i/s
Array#map.flatten(1):    68551.1 i/s - 1.40x  (± 0.00) slower
   Array#map.flatten:    39529.0 i/s - 2.43x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    31.669k i/100ms
  Array#reverse_each    32.217k i/100ms
Calculating -------------------------------------
  Array#reverse.each    317.426k (± 0.5%) i/s -      1.615M in   5.088303s
  Array#reverse_each    324.671k (± 1.0%) i/s -      1.643M in   5.061232s

Comparison:
  Array#reverse_each:   324670.8 i/s
  Array#reverse.each:   317425.6 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        21.017k i/100ms
   Enumerable#detect    83.110k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        209.637k (± 0.4%) i/s -      4.203M in  20.051287s
   Enumerable#detect    830.406k (± 0.6%) i/s -     16.622M in  20.017402s

Comparison:
   Enumerable#detect:   830405.8 i/s
Enumerable#select.first:   209636.7 i/s - 3.96x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       245.435k i/100ms
Enumerable#select.last
                        18.614k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.431M (± 0.6%) i/s -     12.272M in   5.048964s
Enumerable#select.last
                        185.763k (± 1.8%) i/s -    930.700k in   5.011975s

Comparison:
Enumerable#reverse.detect:  2430622.6 i/s
Enumerable#select.last:   185763.0 i/s - 13.08x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.942k i/100ms
  Enumerable#sort_by     4.914k i/100ms
     Enumerable#sort     2.438k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         51.875k (± 1.7%) i/s -    261.926k in   5.050696s
  Enumerable#sort_by     48.544k (± 1.5%) i/s -    245.700k in   5.062539s
     Enumerable#sort     24.668k (± 0.6%) i/s -    124.338k in   5.040641s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    51875.1 i/s
  Enumerable#sort_by:    48543.7 i/s - 1.07x  (± 0.00) slower
     Enumerable#sort:    24667.9 i/s - 2.10x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.399k i/100ms
Enumerable#sort_by...first
                         8.303k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    172.754k (± 2.7%) i/s -    869.950k in   5.040127s
Enumerable#sort_by...first
                         82.704k (± 2.1%) i/s -    415.150k in   5.021941s

Comparison:
   Enumerable#min_by:   172754.1 i/s
Enumerable#sort_by...first:    82704.4 i/s - 2.09x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   426.163k i/100ms
            Hash#dup   296.093k i/100ms
Calculating -------------------------------------
              Hash[]      4.059M (± 2.0%) i/s -     20.456M in   5.041751s
            Hash#dup      3.022M (± 1.0%) i/s -     15.397M in   5.095217s

Comparison:
              Hash[]:  4058813.8 i/s
            Hash#dup:  3022095.2 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.437M i/100ms
  Hash#fetch, symbol     1.162M i/100ms
     Hash#[], string     1.244M i/100ms
  Hash#fetch, string   775.103k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.347M (± 0.6%) i/s -     71.837M in   5.007362s
  Hash#fetch, symbol     11.848M (± 0.4%) i/s -     59.282M in   5.003589s
     Hash#[], string     12.486M (± 0.4%) i/s -     63.467M in   5.083077s
  Hash#fetch, string      7.917M (± 1.8%) i/s -     40.305M in   5.092783s

Comparison:
     Hash#[], symbol: 14346880.3 i/s
     Hash#[], string: 12486149.3 i/s - 1.15x  (± 0.00) slower
  Hash#fetch, symbol: 11848155.0 i/s - 1.21x  (± 0.00) slower
  Hash#fetch, string:  7917009.9 i/s - 1.81x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   863.243k i/100ms
             Hash#[]   999.343k i/100ms
          Hash#[] ||   864.110k i/100ms
          Hash#[] &&   374.126k i/100ms
          Hash#fetch   587.205k i/100ms
 Hash#fetch fallback   384.005k i/100ms
Calculating -------------------------------------
            Hash#dig      8.471M (± 0.7%) i/s -     43.162M in   5.095383s
             Hash#[]     10.353M (± 0.7%) i/s -     51.966M in   5.019709s
          Hash#[] ||      9.017M (± 0.2%) i/s -     45.798M in   5.078854s
          Hash#[] &&      3.737M (± 1.5%) i/s -     18.706M in   5.006310s
          Hash#fetch      5.870M (± 0.9%) i/s -     29.360M in   5.001894s
 Hash#fetch fallback      3.916M (± 0.9%) i/s -     19.584M in   5.001266s

Comparison:
             Hash#[]: 10352880.5 i/s
          Hash#[] ||:  9017407.6 i/s - 1.15x  (± 0.00) slower
            Hash#dig:  8471197.4 i/s - 1.22x  (± 0.00) slower
          Hash#fetch:  5870311.1 i/s - 1.76x  (± 0.00) slower
 Hash#fetch fallback:  3916168.8 i/s - 2.64x  (± 0.00) slower
          Hash#[] &&:  3737452.5 i/s - 2.77x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.449M i/100ms
  Hash#fetch + block     1.401M i/100ms
    Hash#fetch + arg     1.077M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.501M (± 1.5%) i/s -     73.904M in   5.097594s
  Hash#fetch + block     14.099M (± 0.4%) i/s -     71.432M in   5.066475s
    Hash#fetch + arg     10.661M (± 0.6%) i/s -     53.852M in   5.051648s

Comparison:
  Hash#fetch + const: 14501263.6 i/s
  Hash#fetch + block: 14099300.1 i/s - 1.03x  (± 0.00) slower
    Hash#fetch + arg: 10660683.4 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    28.065k i/100ms
         sort + to_h    11.425k i/100ms
Calculating -------------------------------------
      sort_by + to_h    280.894k (± 0.6%) i/s -      1.431M in   5.095766s
         sort + to_h    112.933k (± 5.0%) i/s -    571.250k in   5.074366s

Comparison:
      sort_by + to_h:   280894.1 i/s
         sort + to_h:   112932.6 i/s - 2.49x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   195.906k i/100ms
       Hash#each_key   205.533k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.973M (± 0.8%) i/s -      9.991M in   5.063947s
       Hash#each_key      2.054M (± 2.0%) i/s -     10.277M in   5.004480s

Comparison:
       Hash#each_key:  2054414.6 i/s
      Hash#keys.each:  1973149.1 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.237k i/100ms
           Hash#key?     1.014M i/100ms
Calculating -------------------------------------
  Hash#keys.include?     12.261k (± 3.9%) i/s -     61.850k in   5.053409s
           Hash#key?      9.990M (± 0.6%) i/s -     50.693M in   5.074352s

Comparison:
           Hash#key?:  9990330.7 i/s
  Hash#keys.include?:    12260.7 i/s - 814.83x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.999k i/100ms
            Hash#[]=    10.353k i/100ms
Calculating -------------------------------------
         Hash#merge!     39.801k (± 0.6%) i/s -    199.950k in   5.023936s
            Hash#[]=    103.966k (± 0.8%) i/s -    528.003k in   5.078923s

Comparison:
            Hash#[]=:   103966.1 i/s
         Hash#merge!:    39801.0 i/s - 2.61x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.609k i/100ms
      Hash#merge({})     3.938k i/100ms
 Hash#dup#merge!({})     2.866k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         46.229k (± 0.9%) i/s -    235.059k in   5.085089s
      Hash#merge({})     39.227k (± 0.4%) i/s -    196.900k in   5.019662s
 Hash#dup#merge!({})     28.294k (± 2.3%) i/s -    143.300k in   5.067498s

Comparison:
{}#merge!(Hash) do end:    46229.2 i/s
      Hash#merge({}):    39226.5 i/s - 1.18x  (± 0.00) slower
 Hash#dup#merge!({}):    28294.1 i/s - 1.63x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   392.857k i/100ms
          Hash#merge   367.762k i/100ms
Calculating -------------------------------------
        Hash#**other      3.938M (± 3.3%) i/s -     20.036M in   5.094395s
          Hash#merge      3.594M (± 0.3%) i/s -     18.020M in   5.014029s

Comparison:
        Hash#**other:  3938038.2 i/s
          Hash#merge:  3594024.1 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.674k i/100ms
         Hash#merge!     3.986k i/100ms
Calculating -------------------------------------
          Hash#merge     16.372k (± 2.9%) i/s -     82.026k in   5.014697s
         Hash#merge!     40.189k (± 0.5%) i/s -    203.286k in   5.058382s

Comparison:
         Hash#merge!:    40189.0 i/s
          Hash#merge:    16371.9 i/s - 2.45x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      417.308k i/100ms
Array#each             231.640k i/100ms
Array#each_w/_object   176.226k i/100ms
Hash#select-include     72.990k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.152M (± 2.4%) i/s -     20.865M in   5.028261s
Array#each                2.312M (± 0.4%) i/s -     11.582M in   5.010475s
Array#each_w/_object      1.737M (± 0.5%) i/s -      8.811M in   5.073148s
Hash#select-include     737.954k (± 0.7%) i/s -      3.722M in   5.044566s

Comparison:
Hash#native-slice   :  4152239.9 i/s
Array#each          :  2311589.5 i/s - 1.80x  (± 0.00) slower
Array#each_w/_object:  1736903.7 i/s - 2.39x  (± 0.00) slower
Hash#select-include :   737953.6 i/s - 5.63x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     2.656k i/100ms
         Hash#value?     2.326k i/100ms
Calculating -------------------------------------
Hash#values.include?     25.871k (± 5.3%) i/s -    130.144k in   5.050192s
         Hash#value?     23.468k (± 0.9%) i/s -    118.626k in   5.055242s

Comparison:
Hash#values.include?:    25871.3 i/s
         Hash#value?:    23467.8 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                call   662.756k i/100ms
                send   512.944k i/100ms
      method_missing   386.743k i/100ms
Calculating -------------------------------------
                call      6.642M (± 1.5%) i/s -     33.801M in   5.089962s
                send      5.131M (± 1.9%) i/s -     25.647M in   5.000255s
      method_missing      3.881M (± 0.6%) i/s -     19.724M in   5.082883s

Comparison:
                call:  6642267.8 i/s
                send:  5131117.9 i/s - 1.29x  (± 0.00) slower
      method_missing:  3880578.3 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
               Block     9.028k i/100ms
      Symbol#to_proc    10.230k i/100ms
Calculating -------------------------------------
               Block     90.587k (± 0.6%) i/s -    460.428k in   5.082893s
      Symbol#to_proc    101.283k (± 1.3%) i/s -    511.500k in   5.051111s

Comparison:
      Symbol#to_proc:   101282.5 i/s
               Block:    90586.7 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          block.call   927.368k i/100ms
       block + yield     1.001M i/100ms
        unused block     1.310M i/100ms
               yield     1.171M i/100ms
Calculating -------------------------------------
          block.call      9.258M (± 1.6%) i/s -     46.368M in   5.009828s
       block + yield     10.010M (± 0.5%) i/s -     50.059M in   5.001151s
        unused block     13.079M (± 0.4%) i/s -     65.515M in   5.009288s
               yield     11.677M (± 1.4%) i/s -     58.545M in   5.014688s

Comparison:
        unused block: 13078893.9 i/s
               yield: 11677153.8 i/s - 1.12x  (± 0.00) slower
       block + yield: 10009763.2 i/s - 1.31x  (± 0.00) slower
          block.call:  9257975.3 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   325.600k i/100ms
      range#include?    12.723k i/100ms
       range#member?    12.588k i/100ms
       plain compare   532.465k i/100ms
Calculating -------------------------------------
        range#cover?      3.263M (± 0.4%) i/s -     16.606M in   5.088655s
      range#include?    129.592k (± 0.6%) i/s -    648.873k in   5.007224s
       range#member?    128.928k (± 2.5%) i/s -    654.576k in   5.080686s
       plain compare      5.301M (± 0.4%) i/s -     26.623M in   5.022138s

Comparison:
       plain compare:  5301245.8 i/s
        range#cover?:  3263312.5 i/s - 1.62x  (± 0.00) slower
      range#include?:   129591.6 i/s - 40.91x  (± 0.00) slower
       range#member?:   128927.8 i/s - 41.12x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       String#match?   905.569k i/100ms
           String#=~   647.773k i/100ms
          Regexp#===   565.697k i/100ms
        String#match   472.227k i/100ms
Calculating -------------------------------------
       String#match?      9.072M (± 0.8%) i/s -     46.184M in   5.090994s
           String#=~      6.410M (± 0.6%) i/s -     32.389M in   5.053303s
          Regexp#===      5.646M (± 0.6%) i/s -     28.285M in   5.010177s
        String#match      4.678M (± 2.0%) i/s -     23.611M in   5.049051s

Comparison:
       String#match?:  9072228.7 i/s
           String#=~:  6409600.9 i/s - 1.42x  (± 0.00) slower
          Regexp#===:  5645654.4 i/s - 1.61x  (± 0.00) slower
        String#match:  4678441.7 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   646.127k i/100ms
      String#casecmp   789.835k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.496M (± 0.1%) i/s -     32.952M in   5.072704s
      String#casecmp      7.837M (± 1.0%) i/s -     39.492M in   5.039429s

Comparison:
      String#casecmp:  7837319.9 i/s
String#downcase + ==:  6496045.6 i/s - 1.21x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            String#+   601.295k i/100ms
       String#concat   623.643k i/100ms
       String#append   666.785k i/100ms
         "foo" "bar"     1.186M i/100ms
  "#{'foo'}#{'bar'}"     1.174M i/100ms
Calculating -------------------------------------
            String#+      6.005M (± 0.6%) i/s -     30.065M in   5.007182s
       String#concat      6.170M (± 1.9%) i/s -     31.182M in   5.055726s
       String#append      6.608M (± 3.4%) i/s -     33.339M in   5.052166s
         "foo" "bar"     11.843M (± 0.4%) i/s -     59.292M in   5.006486s
  "#{'foo'}#{'bar'}"     11.725M (± 0.4%) i/s -     58.689M in   5.005767s

Comparison:
         "foo" "bar": 11843160.8 i/s
  "#{'foo'}#{'bar'}": 11724524.5 i/s - 1.01x  (± 0.00) slower
       String#append:  6607878.4 i/s - 1.79x  (± 0.00) slower
       String#concat:  6170150.1 i/s - 1.92x  (± 0.00) slower
            String#+:  6004559.3 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#+@   984.363k i/100ms
          String#dup   583.538k i/100ms
Calculating -------------------------------------
           String#+@      9.877M (± 0.4%) i/s -     50.203M in   5.082990s
          String#dup      5.799M (± 0.5%) i/s -     29.177M in   5.031187s

Comparison:
           String#+@:  9876736.9 i/s
          String#dup:  5799339.0 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   189.333k i/100ms
       String#match?   427.037k i/100ms
    String#end_with?   625.608k i/100ms
Calculating -------------------------------------
           String#=~      1.903M (± 0.5%) i/s -      9.656M in   5.074186s
       String#match?      4.270M (± 0.1%) i/s -     21.352M in   5.000887s
    String#end_with?      6.200M (± 1.9%) i/s -     31.280M in   5.047435s

Comparison:
    String#end_with?:  6199755.4 i/s
       String#match?:  4269621.3 i/s - 1.45x  (± 0.00) slower
           String#=~:  1903006.7 i/s - 3.26x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   115.171k i/100ms
          String#sub   140.146k i/100ms
String#dup["string"]=
                       184.098k i/100ms
Calculating -------------------------------------
         String#gsub      1.146M (± 0.7%) i/s -      5.759M in   5.025616s
          String#sub      1.379M (± 0.5%) i/s -      7.007M in   5.080273s
String#dup["string"]=
                          1.815M (± 0.6%) i/s -      9.205M in   5.071216s

Comparison:
String#dup["string"]=:  1815203.0 i/s
          String#sub:  1379353.1 i/s - 1.32x  (± 0.00) slower
         String#gsub:  1145899.8 i/s - 1.58x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   103.482k i/100ms
           String#tr   335.439k i/100ms
Calculating -------------------------------------
         String#gsub      1.041M (± 1.2%) i/s -      5.278M in   5.070515s
           String#tr      3.345M (± 0.6%) i/s -     16.772M in   5.014619s

Comparison:
           String#tr:  3344724.4 i/s
         String#gsub:  1040994.7 i/s - 3.21x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.144M i/100ms
         With Freeze     1.637M i/100ms
Calculating -------------------------------------
      Without Freeze     11.615M (± 0.5%) i/s -     58.360M in   5.024819s
         With Freeze     16.372M (± 0.3%) i/s -     83.470M in   5.098260s

Comparison:
         With Freeze: 16372400.9 i/s
      Without Freeze: 11614670.8 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.441k i/100ms
      String#squeeze   155.632k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     34.651k (± 0.5%) i/s -    175.491k in   5.064699s
      String#squeeze      1.569M (± 0.4%) i/s -      7.937M in   5.058552s

Comparison:
      String#squeeze:  1569102.0 i/s
 String#gsub/regex+/:    34650.9 i/s - 45.28x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   282.601k i/100ms
       String#match?   753.783k i/100ms
  String#start_with?   857.747k i/100ms
Calculating -------------------------------------
           String#=~      2.820M (± 0.2%) i/s -     14.130M in   5.011258s
       String#match?      7.467M (± 1.3%) i/s -     37.689M in   5.048653s
  String#start_with?      8.523M (± 1.4%) i/s -     42.887M in   5.032914s

Comparison:
  String#start_with?:  8523201.8 i/s
       String#match?:  7466550.8 i/s - 1.14x  (± 0.00) slower
           String#=~:  2819672.2 i/s - 3.02x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   195.887k i/100ms
    String#[0, n] ==    82.667k i/100ms
   String#[RANGE] ==    75.272k i/100ms
   String#[0...n] ==    47.647k i/100ms
Calculating -------------------------------------
  String#start_with?      1.889M (± 0.4%) i/s -      9.598M in   5.080972s
    String#[0, n] ==    813.209k (± 0.9%) i/s -      4.133M in   5.083152s
   String#[RANGE] ==    751.460k (± 0.7%) i/s -      3.764M in   5.008631s
   String#[0...n] ==    468.599k (± 1.4%) i/s -      2.382M in   5.085126s

Comparison:
  String#start_with?:  1889129.5 i/s
    String#[0, n] ==:   813209.4 i/s - 2.32x  (± 0.00) slower
   String#[RANGE] ==:   751460.3 i/s - 2.51x  (± 0.00) slower
   String#[0...n] ==:   468598.8 i/s - 4.03x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   183.633k i/100ms
 String#sub!'string'   128.165k i/100ms
String#gsub!'string'    78.006k i/100ms
  String#[/regexp/]=   155.548k i/100ms
 String#sub!/regexp/   115.147k i/100ms
String#gsub!/regexp/    61.378k i/100ms
Calculating -------------------------------------
  String#['string']=      1.860M (± 0.6%) i/s -      9.365M in   5.034697s
 String#sub!'string'      1.256M (± 0.4%) i/s -      6.280M in   5.001625s
String#gsub!'string'    777.324k (± 0.5%) i/s -      3.900M in   5.017749s
  String#[/regexp/]=      1.528M (± 0.5%) i/s -      7.777M in   5.089226s
 String#sub!/regexp/      1.143M (± 1.7%) i/s -      5.757M in   5.038941s
String#gsub!/regexp/    608.075k (± 0.5%) i/s -      3.069M in   5.047022s

Comparison:
  String#['string']=:  1860209.4 i/s
  String#[/regexp/]=:  1528252.3 i/s - 1.22x  (± 0.00) slower
 String#sub!'string':  1255630.9 i/s - 1.48x  (± 0.00) slower
 String#sub!/regexp/:  1142923.4 i/s - 1.63x  (± 0.00) slower
String#gsub!'string':   777324.2 i/s - 2.39x  (± 0.00) slower
String#gsub!/regexp/:   608075.2 i/s - 3.06x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          String#sub   143.528k i/100ms
        String#chomp   551.458k i/100ms
String#delete_suffix   593.728k i/100ms
Calculating -------------------------------------
          String#sub      1.436M (± 0.7%) i/s -      7.320M in   5.096584s
        String#chomp      5.587M (± 0.6%) i/s -     28.124M in   5.034207s
String#delete_suffix      5.991M (± 1.2%) i/s -     30.280M in   5.055158s

Comparison:
String#delete_suffix:  5990907.2 i/s
        String#chomp:  5586853.6 i/s - 1.07x  (± 0.00) slower
          String#sub:  1436306.0 i/s - 4.17x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   630.352k i/100ms
          String#sub   148.260k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.287M (± 2.2%) i/s -     31.518M in   5.015562s
          String#sub      1.489M (± 0.6%) i/s -      7.561M in   5.078508s

Comparison:
String#delete_prefix:  6287217.6 i/s
          String#sub:  1488927.4 i/s - 4.22x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   628.437k i/100ms
    String#unpack[0]   485.362k i/100ms
Calculating -------------------------------------
      String#unpack1      6.333M (± 0.5%) i/s -     32.050M in   5.060879s
    String#unpack[0]      4.840M (± 0.5%) i/s -     24.268M in   5.014476s

Comparison:
      String#unpack1:  6333094.7 i/s
    String#unpack[0]:  4839738.8 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.996k i/100ms
          Time.parse     9.737k i/100ms
Calculating -------------------------------------
        Time.iso8601    280.230k (± 0.3%) i/s -      1.428M in   5.095112s
          Time.parse     96.767k (± 0.5%) i/s -    486.850k in   5.031286s

Comparison:
        Time.iso8601:   280230.4 i/s
          Time.parse:    96767.3 i/s - 2.90x  (± 0.00) slower

