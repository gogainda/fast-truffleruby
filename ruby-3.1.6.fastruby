$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       773.456k i/100ms
Function with splat arguments
                        24.951k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.712M (± 2.5%) i/s -     38.673M in   5.018093s
Function with splat arguments
                        281.277k (± 5.5%) i/s -      1.422M in   5.078733s

Comparison:
Function with single Array argument:  7711942.5 i/s
Function with splat arguments:   281276.5 i/s - 27.42x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.020M i/100ms
Sequential Assignment
                         1.014M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.207M (± 0.3%) i/s -     52.029M in   5.097245s
Sequential Assignment
                          9.770M (± 0.7%) i/s -     49.688M in   5.085872s

Comparison:
 Parallel Assignment: 10207326.8 i/s
Sequential Assignment:  9770201.1 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   481.505k i/100ms
       attr_accessor   547.724k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.812M (± 0.6%) i/s -     24.075M in   5.003175s
       attr_accessor      5.516M (± 0.4%) i/s -     27.934M in   5.063981s

Comparison:
       attr_accessor:  5516302.5 i/s
   getter_and_setter:  4812144.2 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    88.899k i/100ms
         respond_to?   777.437k i/100ms
Calculating -------------------------------------
      begin...rescue    894.435k (± 1.0%) i/s -      4.534M in   5.069428s
         respond_to?      7.779M (± 0.5%) i/s -     39.649M in   5.097320s

Comparison:
         respond_to?:  7778649.8 i/s
      begin...rescue:   894435.3 i/s - 8.70x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              normal   309.545k i/100ms
             &method   125.468k i/100ms
Calculating -------------------------------------
              normal      3.097M (± 0.4%) i/s -     15.787M in   5.097802s
             &method      1.238M (± 1.8%) i/s -      6.273M in   5.068435s

Comparison:
              normal:  3096839.3 i/s
             &method:  1238174.2 i/s - 2.50x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       264.000  i/100ms
       define_method   293.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.318k (±22.0%) i/s -     10.296k in   5.115794s
       define_method      3.155k (±19.1%) i/s -     14.357k in   5.047553s

Comparison:
       define_method:     3154.6 i/s
module_eval with string:     2317.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Float#round   262.312k i/100ms
       Kernel#format   201.328k i/100ms
            String#%   170.781k i/100ms
Calculating -------------------------------------
         Float#round      2.638M (± 0.5%) i/s -     13.378M in   5.072304s
       Kernel#format      2.014M (± 0.4%) i/s -     10.268M in   5.098555s
            String#%      1.708M (± 0.2%) i/s -      8.710M in   5.099200s

Comparison:
         Float#round:  2637518.9 i/s
       Kernel#format:  2013891.1 i/s - 1.31x  (± 0.00) slower
            String#%:  1708084.6 i/s - 1.54x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash   889.136k i/100ms
          OpenStruct   504.457k i/100ms
Calculating -------------------------------------
                Hash      8.912M (± 0.2%) i/s -     45.346M in   5.088347s
          OpenStruct      5.023M (± 0.5%) i/s -     25.223M in   5.021512s

Comparison:
                Hash:  8911766.8 i/s
          OpenStruct:  5023072.4 i/s - 1.77x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.101M i/100ms
          OpenStruct    10.080k i/100ms
Calculating -------------------------------------
                Hash     10.973M (± 0.4%) i/s -     55.045M in   5.016711s
          OpenStruct     99.591k (± 1.9%) i/s -    504.000k in   5.062472s

Comparison:
                Hash: 10972559.0 i/s
          OpenStruct:    99590.7 i/s - 110.18x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   605.860k i/100ms
  ancestors.include?   117.129k i/100ms
Calculating -------------------------------------
  less than or equal      6.082M (± 0.7%) i/s -     30.899M in   5.080282s
  ancestors.include?      1.192M (± 2.2%) i/s -      5.974M in   5.014396s

Comparison:
  less than or equal:  6082411.2 i/s
  ancestors.include?:  1191935.4 i/s - 5.10x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.715  (± 0.0%) i/s -      4.000  in   5.670644s
         Kernel loop      0.227  (± 0.0%) i/s -      2.000  in   8.792011s

Comparison:
          While Loop:        0.7 i/s
         Kernel loop:        0.2 i/s - 3.14x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.574M i/100ms
         Array#first     1.289M i/100ms
Calculating -------------------------------------
           Array#[0]     15.727M (± 0.4%) i/s -     78.699M in   5.004016s
         Array#first     12.883M (± 0.3%) i/s -     64.440M in   5.002113s

Comparison:
           Array#[0]: 15727385.1 i/s
         Array#first: 12882734.9 i/s - 1.22x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.558M i/100ms
          Array#last     1.338M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.591M (± 0.2%) i/s -     79.468M in   5.097041s
          Array#last     13.228M (± 2.2%) i/s -     66.903M in   5.060374s

Comparison:
          Array#[-1]: 15591072.2 i/s
          Array#last: 13228137.4 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    99.306k i/100ms
Calculating -------------------------------------
                find      0.269  (± 0.0%) i/s -      2.000  in   7.430275s
             bsearch    996.036k (± 0.3%) i/s -      5.065M in   5.084800s

Comparison:
             bsearch:   996035.6 i/s
                find:        0.3 i/s - 3700396.78x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    19.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    197.039  (± 2.5%) i/s -    988.000  in   5.018250s
        Array#insert      1.452  (± 0.0%) i/s -      8.000  in   5.509900s

Comparison:
       Array#unshift:      197.0 i/s
        Array#insert:        1.5 i/s - 135.71x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.094M i/100ms
          Array#size     2.102M i/100ms
         Array#count     1.650M i/100ms
Calculating -------------------------------------
        Array#length     20.865M (± 0.5%) i/s -    104.681M in   5.017073s
          Array#size     21.012M (± 0.3%) i/s -    105.119M in   5.002761s
         Array#count     16.290M (± 0.6%) i/s -     82.522M in   5.065927s

Comparison:
          Array#size: 21012435.1 i/s
        Array#length: 20865414.0 i/s - same-ish: difference falls within error
         Array#count: 16290193.4 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    46.058k i/100ms
        Array#sample     1.021M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    463.310k (± 0.6%) i/s -      2.349M in   5.070119s
        Array#sample     10.236M (± 0.3%) i/s -     52.095M in   5.089445s

Comparison:
        Array#sample: 10236065.7 i/s
 Array#shuffle.first:   463310.1 i/s - 22.09x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    63.426k i/100ms
          Date.parse    32.263k i/100ms
Calculating -------------------------------------
        Date.iso8601    638.276k (± 0.2%) i/s -      3.235M in   5.067944s
          Date.parse    323.367k (± 0.2%) i/s -      1.645M in   5.088395s

Comparison:
        Date.iso8601:   638275.6 i/s
          Date.parse:   323366.8 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.837k i/100ms
           Array#map    26.918k i/100ms
Calculating -------------------------------------
   Array#each + push    189.974k (± 1.2%) i/s -    960.687k in   5.057702s
           Array#map    269.105k (± 0.5%) i/s -      1.346M in   5.001498s

Comparison:
           Array#map:   269105.0 i/s
   Array#each + push:   189974.3 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            For loop    29.858k i/100ms
               #each    32.605k i/100ms
Calculating -------------------------------------
            For loop    298.402k (± 0.5%) i/s -      1.493M in   5.003094s
               #each    325.056k (± 2.1%) i/s -      1.630M in   5.017865s

Comparison:
               #each:   325055.8 i/s
            For loop:   298401.9 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop    28.417k i/100ms
     each_with_index    18.649k i/100ms
Calculating -------------------------------------
          While Loop    274.542k (± 0.2%) i/s -      1.392M in   5.071863s
     each_with_index    186.128k (± 0.3%) i/s -    932.450k in   5.009770s

Comparison:
          While Loop:   274542.2 i/s
     each_with_index:   186128.2 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    93.423k i/100ms
      inject to_proc     2.179k i/100ms
        inject block     2.120k i/100ms
Calculating -------------------------------------
       inject symbol      1.022M (±15.2%) i/s -      5.045M in   5.033681s
      inject to_proc     21.916k (± 0.6%) i/s -    111.129k in   5.070775s
        inject block     21.364k (± 0.4%) i/s -    108.120k in   5.060841s

Comparison:
       inject symbol:  1022442.3 i/s
      inject to_proc:    21916.3 i/s - 46.65x  (± 0.00) slower
        inject block:    21364.4 i/s - 47.86x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.866k i/100ms
   Array#map.flatten     3.997k i/100ms
      Array#flat_map     9.590k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     68.585k (± 0.6%) i/s -    343.300k in   5.005669s
   Array#map.flatten     39.653k (± 0.5%) i/s -    199.850k in   5.040043s
      Array#flat_map     95.608k (± 0.3%) i/s -    479.500k in   5.015344s

Comparison:
      Array#flat_map:    95607.6 i/s
Array#map.flatten(1):    68584.6 i/s - 1.39x  (± 0.00) slower
   Array#map.flatten:    39653.5 i/s - 2.41x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    31.299k i/100ms
  Array#reverse_each    32.416k i/100ms
Calculating -------------------------------------
  Array#reverse.each    312.956k (± 0.4%) i/s -      1.565M in   5.000604s
  Array#reverse_each    324.312k (± 0.4%) i/s -      1.653M in   5.097677s

Comparison:
  Array#reverse_each:   324312.2 i/s
  Array#reverse.each:   312956.1 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.921k i/100ms
   Enumerable#detect    82.786k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        208.328k (± 1.2%) i/s -      4.184M in  20.087597s
   Enumerable#detect    831.716k (± 0.6%) i/s -     16.640M in  20.007520s

Comparison:
   Enumerable#detect:   831716.4 i/s
Enumerable#select.first:   208328.5 i/s - 3.99x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       243.593k i/100ms
Enumerable#select.last
                        18.829k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.452M (± 0.6%) i/s -     12.423M in   5.067551s
Enumerable#select.last
                        187.169k (± 2.2%) i/s -    941.450k in   5.032656s

Comparison:
Enumerable#reverse.detect:  2451623.2 i/s
Enumerable#select.last:   187169.4 i/s - 13.10x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         5.009k i/100ms
  Enumerable#sort_by     4.830k i/100ms
     Enumerable#sort     2.476k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         50.527k (± 3.1%) i/s -    255.459k in   5.061532s
  Enumerable#sort_by     48.664k (± 1.8%) i/s -    246.330k in   5.063531s
     Enumerable#sort     24.672k (± 0.6%) i/s -    123.800k in   5.018072s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    50526.7 i/s
  Enumerable#sort_by:    48664.1 i/s - same-ish: difference falls within error
     Enumerable#sort:    24671.8 i/s - 2.05x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.709k i/100ms
Enumerable#sort_by...first
                         8.647k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    177.449k (± 0.6%) i/s -    903.159k in   5.089869s
Enumerable#sort_by...first
                         85.300k (± 0.3%) i/s -    432.350k in   5.068621s

Comparison:
   Enumerable#min_by:   177449.0 i/s
Enumerable#sort_by...first:    85300.3 i/s - 2.08x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   416.318k i/100ms
            Hash#dup   299.773k i/100ms
Calculating -------------------------------------
              Hash[]      4.142M (± 1.4%) i/s -     20.816M in   5.026680s
            Hash#dup      3.111M (± 0.9%) i/s -     15.588M in   5.011178s

Comparison:
              Hash[]:  4141838.1 i/s
            Hash#dup:  3110915.9 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.443M i/100ms
  Hash#fetch, symbol     1.149M i/100ms
     Hash#[], string     1.241M i/100ms
  Hash#fetch, string   766.396k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.422M (± 0.2%) i/s -     72.134M in   5.001563s
  Hash#fetch, symbol     11.364M (± 4.0%) i/s -     57.430M in   5.065065s
     Hash#[], string     12.429M (± 0.2%) i/s -     63.287M in   5.091962s
  Hash#fetch, string      7.720M (± 2.0%) i/s -     39.086M in   5.065526s

Comparison:
     Hash#[], symbol: 14422325.0 i/s
     Hash#[], string: 12428886.4 i/s - 1.16x  (± 0.00) slower
  Hash#fetch, symbol: 11363973.2 i/s - 1.27x  (± 0.00) slower
  Hash#fetch, string:  7719719.0 i/s - 1.87x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   769.096k i/100ms
             Hash#[]     1.023M i/100ms
          Hash#[] ||     1.003M i/100ms
          Hash#[] &&   431.182k i/100ms
          Hash#fetch   626.311k i/100ms
 Hash#fetch fallback   389.542k i/100ms
Calculating -------------------------------------
            Hash#dig      7.855M (± 1.5%) i/s -     39.993M in   5.092696s
             Hash#[]     10.131M (± 3.2%) i/s -     51.167M in   5.055550s
          Hash#[] ||      9.472M (± 1.6%) i/s -     48.156M in   5.085263s
          Hash#[] &&      4.190M (± 1.4%) i/s -     21.128M in   5.043096s
          Hash#fetch      6.062M (± 1.1%) i/s -     30.689M in   5.062911s
 Hash#fetch fallback      3.961M (± 0.6%) i/s -     19.867M in   5.015354s

Comparison:
             Hash#[]: 10131194.6 i/s
          Hash#[] ||:  9472043.7 i/s - 1.07x  (± 0.00) slower
            Hash#dig:  7854877.4 i/s - 1.29x  (± 0.00) slower
          Hash#fetch:  6062340.9 i/s - 1.67x  (± 0.00) slower
          Hash#[] &&:  4190226.9 i/s - 2.42x  (± 0.00) slower
 Hash#fetch fallback:  3961289.7 i/s - 2.56x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.463M i/100ms
  Hash#fetch + block     1.466M i/100ms
    Hash#fetch + arg     1.099M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.674M (± 0.3%) i/s -     74.603M in   5.083910s
  Hash#fetch + block     14.461M (± 0.5%) i/s -     73.284M in   5.067669s
    Hash#fetch + arg     11.099M (± 0.6%) i/s -     56.028M in   5.048149s

Comparison:
  Hash#fetch + const: 14674397.2 i/s
  Hash#fetch + block: 14461376.8 i/s - 1.01x  (± 0.00) slower
    Hash#fetch + arg: 11099014.5 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    28.126k i/100ms
         sort + to_h    11.562k i/100ms
Calculating -------------------------------------
      sort_by + to_h    279.772k (± 0.7%) i/s -      1.406M in   5.026808s
         sort + to_h    114.283k (± 2.9%) i/s -    578.100k in   5.063832s

Comparison:
      sort_by + to_h:   279772.1 i/s
         sort + to_h:   114282.8 i/s - 2.45x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   193.445k i/100ms
       Hash#each_key   184.664k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.947M (± 0.5%) i/s -      9.866M in   5.066060s
       Hash#each_key      1.840M (± 1.2%) i/s -      9.233M in   5.019935s

Comparison:
      Hash#keys.each:  1947451.0 i/s
       Hash#each_key:  1839595.8 i/s - 1.06x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.190k i/100ms
           Hash#key?     1.002M i/100ms
Calculating -------------------------------------
  Hash#keys.include?     12.002k (± 4.5%) i/s -     60.690k in   5.069270s
           Hash#key?     10.034M (± 0.8%) i/s -     51.120M in   5.094990s

Comparison:
           Hash#key?: 10033978.8 i/s
  Hash#keys.include?:    12001.6 i/s - 836.05x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.931k i/100ms
            Hash#[]=    10.702k i/100ms
Calculating -------------------------------------
         Hash#merge!     39.355k (± 0.3%) i/s -    200.481k in   5.094227s
            Hash#[]=    106.796k (± 0.9%) i/s -    535.100k in   5.010919s

Comparison:
            Hash#[]=:   106796.1 i/s
         Hash#merge!:    39354.9 i/s - 2.71x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.748k i/100ms
      Hash#merge({})     3.933k i/100ms
 Hash#dup#merge!({})     2.917k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         46.827k (± 0.6%) i/s -    237.400k in   5.069890s
      Hash#merge({})     39.108k (± 0.4%) i/s -    196.650k in   5.028495s
 Hash#dup#merge!({})     28.907k (± 0.6%) i/s -    145.850k in   5.045756s

Comparison:
{}#merge!(Hash) do end:    46827.1 i/s
      Hash#merge({}):    39107.9 i/s - 1.20x  (± 0.00) slower
 Hash#dup#merge!({}):    28906.5 i/s - 1.62x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   395.931k i/100ms
          Hash#merge   360.363k i/100ms
Calculating -------------------------------------
        Hash#**other      3.848M (± 4.6%) i/s -     19.401M in   5.057651s
          Hash#merge      3.649M (± 0.4%) i/s -     18.379M in   5.036217s

Comparison:
        Hash#**other:  3847746.6 i/s
          Hash#merge:  3649333.1 i/s - 1.05x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.644k i/100ms
         Hash#merge!     4.019k i/100ms
Calculating -------------------------------------
          Hash#merge     16.555k (± 0.9%) i/s -     83.844k in   5.064969s
         Hash#merge!     39.891k (± 0.8%) i/s -    200.950k in   5.037865s

Comparison:
         Hash#merge!:    39890.7 i/s
          Hash#merge:    16555.0 i/s - 2.41x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      421.959k i/100ms
Array#each             230.389k i/100ms
Array#each_w/_object   176.781k i/100ms
Hash#select-include     72.492k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.192M (± 0.5%) i/s -     21.098M in   5.033405s
Array#each                2.288M (± 1.5%) i/s -     11.519M in   5.034860s
Array#each_w/_object      1.766M (± 0.7%) i/s -      8.839M in   5.006571s
Hash#select-include     733.138k (± 0.4%) i/s -      3.697M in   5.042914s

Comparison:
Hash#native-slice   :  4191694.2 i/s
Array#each          :  2288487.1 i/s - 1.83x  (± 0.00) slower
Array#each_w/_object:  1765583.9 i/s - 2.37x  (± 0.00) slower
Hash#select-include :   733138.3 i/s - 5.72x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.603k i/100ms
         Hash#value?     1.290k i/100ms
Calculating -------------------------------------
Hash#values.include?     15.437k (± 4.4%) i/s -     78.547k in   5.099716s
         Hash#value?     12.911k (± 0.3%) i/s -     65.790k in   5.095735s

Comparison:
Hash#values.include?:    15436.5 i/s
         Hash#value?:    12910.9 i/s - 1.20x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                call   670.288k i/100ms
                send   527.247k i/100ms
      method_missing   389.812k i/100ms
Calculating -------------------------------------
                call      6.715M (± 0.2%) i/s -     34.185M in   5.091014s
                send      5.257M (± 2.3%) i/s -     26.362M in   5.018309s
      method_missing      3.918M (± 0.7%) i/s -     19.880M in   5.074788s

Comparison:
                call:  6714748.9 i/s
                send:  5256533.9 i/s - 1.28x  (± 0.00) slower
      method_missing:  3917666.9 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
               Block     9.108k i/100ms
      Symbol#to_proc    10.375k i/100ms
Calculating -------------------------------------
               Block     91.528k (± 0.5%) i/s -    464.508k in   5.075161s
      Symbol#to_proc    103.744k (± 0.2%) i/s -    518.750k in   5.000309s

Comparison:
      Symbol#to_proc:   103743.9 i/s
               Block:    91527.9 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          block.call   946.974k i/100ms
       block + yield     1.001M i/100ms
        unused block     1.310M i/100ms
               yield     1.188M i/100ms
Calculating -------------------------------------
          block.call      9.436M (± 1.9%) i/s -     47.349M in   5.020008s
       block + yield     10.013M (± 0.3%) i/s -     51.034M in   5.096760s
        unused block     13.074M (± 0.4%) i/s -     65.503M in   5.010342s
               yield     11.868M (± 0.3%) i/s -     59.401M in   5.005121s

Comparison:
        unused block: 13073722.2 i/s
               yield: 11868090.8 i/s - 1.10x  (± 0.00) slower
       block + yield: 10013096.7 i/s - 1.31x  (± 0.00) slower
          block.call:  9436094.6 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   325.237k i/100ms
      range#include?    12.558k i/100ms
       range#member?    12.586k i/100ms
       plain compare   528.811k i/100ms
Calculating -------------------------------------
        range#cover?      3.271M (± 0.5%) i/s -     16.587M in   5.070387s
      range#include?    126.031k (± 2.3%) i/s -    640.458k in   5.084755s
       range#member?    125.696k (± 0.7%) i/s -    629.300k in   5.006780s
       plain compare      5.269M (± 0.5%) i/s -     26.441M in   5.017856s

Comparison:
       plain compare:  5269416.9 i/s
        range#cover?:  3271451.3 i/s - 1.61x  (± 0.00) slower
      range#include?:   126031.0 i/s - 41.81x  (± 0.00) slower
       range#member?:   125695.7 i/s - 41.92x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       String#match?   912.982k i/100ms
           String#=~   646.106k i/100ms
          Regexp#===   569.955k i/100ms
        String#match   477.063k i/100ms
Calculating -------------------------------------
       String#match?      9.162M (± 0.5%) i/s -     46.562M in   5.081970s
           String#=~      6.554M (± 0.8%) i/s -     32.951M in   5.028294s
          Regexp#===      5.702M (± 0.5%) i/s -     29.068M in   5.098266s
        String#match      4.732M (± 0.2%) i/s -     23.853M in   5.041058s

Comparison:
       String#match?:  9162427.1 i/s
           String#=~:  6553608.0 i/s - 1.40x  (± 0.00) slower
          Regexp#===:  5701638.7 i/s - 1.61x  (± 0.00) slower
        String#match:  4731797.7 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   646.435k i/100ms
      String#casecmp   810.661k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.477M (± 0.1%) i/s -     32.968M in   5.089887s
      String#casecmp      8.093M (± 2.0%) i/s -     40.533M in   5.010749s

Comparison:
      String#casecmp:  8093013.4 i/s
String#downcase + ==:  6477208.1 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            String#+   600.813k i/100ms
       String#concat   628.950k i/100ms
       String#append   679.007k i/100ms
         "foo" "bar"     1.192M i/100ms
  "#{'foo'}#{'bar'}"     1.194M i/100ms
Calculating -------------------------------------
            String#+      6.080M (± 0.7%) i/s -     30.641M in   5.039725s
       String#concat      6.292M (± 0.5%) i/s -     32.076M in   5.098095s
       String#append      6.816M (± 0.5%) i/s -     34.629M in   5.080490s
         "foo" "bar"     11.894M (± 2.0%) i/s -     59.612M in   5.014148s
  "#{'foo'}#{'bar'}"     11.935M (± 0.5%) i/s -     59.687M in   5.000917s

Comparison:
  "#{'foo'}#{'bar'}": 11935460.2 i/s
         "foo" "bar": 11894158.8 i/s - same-ish: difference falls within error
       String#append:  6816322.1 i/s - 1.75x  (± 0.00) slower
       String#concat:  6291982.4 i/s - 1.90x  (± 0.00) slower
            String#+:  6080273.2 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#+@     1.014M i/100ms
          String#dup   582.771k i/100ms
Calculating -------------------------------------
           String#+@     10.140M (± 0.3%) i/s -     50.723M in   5.002171s
          String#dup      5.826M (± 0.8%) i/s -     29.139M in   5.002156s

Comparison:
           String#+@: 10140240.5 i/s
          String#dup:  5825594.7 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   187.174k i/100ms
       String#match?   429.984k i/100ms
    String#end_with?   616.947k i/100ms
Calculating -------------------------------------
           String#=~      1.874M (± 0.5%) i/s -      9.546M in   5.094238s
       String#match?      4.275M (± 2.3%) i/s -     21.499M in   5.032718s
    String#end_with?      6.138M (± 4.1%) i/s -     30.847M in   5.036720s

Comparison:
    String#end_with?:  6138247.2 i/s
       String#match?:  4274623.3 i/s - 1.44x  (± 0.00) slower
           String#=~:  1873899.3 i/s - 3.28x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   114.913k i/100ms
          String#sub   135.188k i/100ms
String#dup["string"]=
                       178.252k i/100ms
Calculating -------------------------------------
         String#gsub      1.154M (± 0.3%) i/s -      5.861M in   5.079059s
          String#sub      1.395M (± 0.3%) i/s -      7.030M in   5.040780s
String#dup["string"]=
                          1.830M (± 0.4%) i/s -      9.269M in   5.066060s

Comparison:
String#dup["string"]=:  1829680.1 i/s
          String#sub:  1394591.2 i/s - 1.31x  (± 0.00) slower
         String#gsub:  1153879.8 i/s - 1.59x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   107.578k i/100ms
           String#tr   344.638k i/100ms
Calculating -------------------------------------
         String#gsub      1.076M (± 0.4%) i/s -      5.486M in   5.099781s
           String#tr      3.427M (± 2.0%) i/s -     17.232M in   5.030038s

Comparison:
           String#tr:  3427438.5 i/s
         String#gsub:  1075843.3 i/s - 3.19x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.165M i/100ms
         With Freeze     1.690M i/100ms
Calculating -------------------------------------
      Without Freeze     11.738M (± 0.4%) i/s -     59.436M in   5.063751s
         With Freeze     16.904M (± 0.5%) i/s -     86.175M in   5.097984s

Comparison:
         With Freeze: 16904134.4 i/s
      Without Freeze: 11737744.4 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.456k i/100ms
      String#squeeze   156.476k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     34.419k (± 0.7%) i/s -    172.800k in   5.020774s
      String#squeeze      1.578M (± 0.6%) i/s -      7.980M in   5.058821s

Comparison:
      String#squeeze:  1577558.2 i/s
 String#gsub/regex+/:    34418.6 i/s - 45.83x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   284.805k i/100ms
       String#match?   758.225k i/100ms
  String#start_with?   883.392k i/100ms
Calculating -------------------------------------
           String#=~      2.849M (± 0.5%) i/s -     14.525M in   5.097790s
       String#match?      7.534M (± 2.9%) i/s -     37.911M in   5.036899s
  String#start_with?      8.793M (± 0.5%) i/s -     44.170M in   5.023325s

Comparison:
  String#start_with?:  8793165.5 i/s
       String#match?:  7534466.7 i/s - 1.17x  (± 0.00) slower
           String#=~:  2849343.9 i/s - 3.09x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   210.502k i/100ms
    String#[0, n] ==    81.994k i/100ms
   String#[RANGE] ==    75.465k i/100ms
   String#[0...n] ==    47.966k i/100ms
Calculating -------------------------------------
  String#start_with?      1.943M (± 1.5%) i/s -      9.894M in   5.093060s
    String#[0, n] ==    806.626k (± 1.0%) i/s -      4.100M in   5.083081s
   String#[RANGE] ==    753.043k (± 0.7%) i/s -      3.773M in   5.010944s
   String#[0...n] ==    464.005k (± 0.8%) i/s -      2.350M in   5.065649s

Comparison:
  String#start_with?:  1942978.1 i/s
    String#[0, n] ==:   806625.7 i/s - 2.41x  (± 0.00) slower
   String#[RANGE] ==:   753043.4 i/s - 2.58x  (± 0.00) slower
   String#[0...n] ==:   464004.6 i/s - 4.19x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   182.614k i/100ms
 String#sub!'string'   125.672k i/100ms
String#gsub!'string'    77.847k i/100ms
  String#[/regexp/]=   154.133k i/100ms
 String#sub!/regexp/   114.835k i/100ms
String#gsub!/regexp/    60.681k i/100ms
Calculating -------------------------------------
  String#['string']=      1.852M (± 1.0%) i/s -      9.313M in   5.030249s
 String#sub!'string'      1.277M (± 2.1%) i/s -      6.409M in   5.022456s
String#gsub!'string'    786.536k (± 0.5%) i/s -      3.970M in   5.047851s
  String#[/regexp/]=      1.532M (± 0.5%) i/s -      7.707M in   5.030064s
 String#sub!/regexp/      1.147M (± 0.3%) i/s -      5.742M in   5.007339s
String#gsub!/regexp/    611.882k (± 0.7%) i/s -      3.095M in   5.057992s

Comparison:
  String#['string']=:  1851654.0 i/s
  String#[/regexp/]=:  1532163.4 i/s - 1.21x  (± 0.00) slower
 String#sub!'string':  1276756.8 i/s - 1.45x  (± 0.00) slower
 String#sub!/regexp/:  1146678.5 i/s - 1.61x  (± 0.00) slower
String#gsub!'string':   786535.6 i/s - 2.35x  (± 0.00) slower
String#gsub!/regexp/:   611882.2 i/s - 3.03x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          String#sub   145.991k i/100ms
        String#chomp   563.506k i/100ms
String#delete_suffix   600.127k i/100ms
Calculating -------------------------------------
          String#sub      1.448M (± 0.2%) i/s -      7.300M in   5.041194s
        String#chomp      5.632M (± 0.5%) i/s -     28.175M in   5.002669s
String#delete_suffix      5.995M (± 0.3%) i/s -     30.006M in   5.005175s

Comparison:
String#delete_suffix:  5995119.9 i/s
        String#chomp:  5632208.1 i/s - 1.06x  (± 0.00) slower
          String#sub:  1447987.2 i/s - 4.14x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   629.524k i/100ms
          String#sub   148.068k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.285M (± 1.9%) i/s -     31.476M in   5.010135s
          String#sub      1.480M (± 0.4%) i/s -      7.403M in   5.001247s

Comparison:
String#delete_prefix:  6285188.6 i/s
          String#sub:  1480338.1 i/s - 4.25x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   635.067k i/100ms
    String#unpack[0]   465.509k i/100ms
Calculating -------------------------------------
      String#unpack1      6.331M (± 0.3%) i/s -     31.753M in   5.015512s
    String#unpack[0]      4.806M (± 0.6%) i/s -     24.206M in   5.036779s

Comparison:
      String#unpack1:  6331102.7 i/s
    String#unpack[0]:  4806141.7 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.313k i/100ms
          Time.parse     9.280k i/100ms
Calculating -------------------------------------
        Time.iso8601    272.234k (± 2.1%) i/s -      1.366M in   5.019075s
          Time.parse     91.756k (± 1.3%) i/s -    464.000k in   5.057693s

Comparison:
        Time.iso8601:   272233.5 i/s
          Time.parse:    91756.2 i/s - 2.97x  (± 0.00) slower

