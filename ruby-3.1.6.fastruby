$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       746.829k i/100ms
Function with splat arguments
                        21.414k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.547M (± 0.4%) i/s -     38.088M in   5.046573s
Function with splat arguments
                        204.148k (± 7.2%) i/s -      1.028M in   5.066422s

Comparison:
Function with single Array argument:  7547491.1 i/s
Function with splat arguments:   204148.3 i/s - 36.97x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.005M i/100ms
Sequential Assignment
                       978.375k i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.226M (± 0.3%) i/s -     51.240M in   5.010958s
Sequential Assignment
                         10.102M (± 0.5%) i/s -     50.876M in   5.036162s

Comparison:
 Parallel Assignment: 10225646.5 i/s
Sequential Assignment: 10102335.3 i/s - 1.01x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   472.116k i/100ms
       attr_accessor   537.248k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.780M (± 0.4%) i/s -     24.078M in   5.037476s
       attr_accessor      5.368M (± 0.7%) i/s -     26.862M in   5.004357s

Comparison:
       attr_accessor:  5368089.2 i/s
   getter_and_setter:  4779840.9 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    86.107k i/100ms
         respond_to?   768.240k i/100ms
Calculating -------------------------------------
      begin...rescue    872.269k (± 0.7%) i/s -      4.391M in   5.034739s
         respond_to?      7.687M (± 0.5%) i/s -     39.180M in   5.097162s

Comparison:
         respond_to?:  7686879.7 i/s
      begin...rescue:   872269.2 i/s - 8.81x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              normal   291.808k i/100ms
             &method   121.731k i/100ms
Calculating -------------------------------------
              normal      2.925M (± 0.2%) i/s -     14.882M in   5.087971s
             &method      1.221M (± 0.4%) i/s -      6.208M in   5.083417s

Comparison:
              normal:  2924993.0 i/s
             &method:  1221304.9 i/s - 2.39x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       241.000  i/100ms
       define_method   319.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.340k (±20.9%) i/s -     11.086k in   5.391978s
       define_method      3.200k (±18.8%) i/s -     14.674k in   5.069595s

Comparison:
       define_method:     3200.5 i/s
module_eval with string:     2339.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Float#round   259.314k i/100ms
       Kernel#format   200.293k i/100ms
            String#%   170.461k i/100ms
Calculating -------------------------------------
         Float#round      2.609M (± 0.5%) i/s -     13.225M in   5.068797s
       Kernel#format      1.992M (± 0.8%) i/s -     10.015M in   5.026797s
            String#%      1.707M (± 0.5%) i/s -      8.694M in   5.094349s

Comparison:
         Float#round:  2609157.3 i/s
       Kernel#format:  1992384.1 i/s - 1.31x  (± 0.00) slower
            String#%:  1706551.4 i/s - 1.53x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash   896.446k i/100ms
          OpenStruct   492.755k i/100ms
Calculating -------------------------------------
                Hash      8.998M (± 0.4%) i/s -     45.719M in   5.081095s
          OpenStruct      4.890M (± 1.4%) i/s -     24.638M in   5.039313s

Comparison:
                Hash:  8997958.9 i/s
          OpenStruct:  4890172.1 i/s - 1.84x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.101M i/100ms
          OpenStruct     9.642k i/100ms
Calculating -------------------------------------
                Hash     11.059M (± 0.4%) i/s -     56.174M in   5.079458s
          OpenStruct     97.382k (± 3.2%) i/s -    491.742k in   5.055072s

Comparison:
                Hash: 11059288.0 i/s
          OpenStruct:    97382.2 i/s - 113.57x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   588.252k i/100ms
  ancestors.include?   119.369k i/100ms
Calculating -------------------------------------
  less than or equal      5.852M (± 1.1%) i/s -     29.413M in   5.026338s
  ancestors.include?      1.174M (± 1.0%) i/s -      5.968M in   5.085030s

Comparison:
  less than or equal:  5852399.8 i/s
  ancestors.include?:  1173849.5 i/s - 4.99x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.694  (± 0.0%) i/s -      4.000  in   5.816849s
         Kernel loop      0.203  (± 0.0%) i/s -      2.000  in   9.853376s

Comparison:
          While Loop:        0.7 i/s
         Kernel loop:        0.2 i/s - 3.42x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.540M i/100ms
         Array#first     1.170M i/100ms
Calculating -------------------------------------
           Array#[0]     15.433M (± 0.4%) i/s -     78.557M in   5.090166s
         Array#first     11.692M (± 0.2%) i/s -     58.515M in   5.004770s

Comparison:
           Array#[0]: 15433223.6 i/s
         Array#first: 11691921.9 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.539M i/100ms
          Array#last     1.318M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.361M (± 0.7%) i/s -     76.931M in   5.008445s
          Array#last     13.161M (± 0.4%) i/s -     65.909M in   5.007823s

Comparison:
          Array#[-1]: 15360918.0 i/s
          Array#last: 13161421.1 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    99.250k i/100ms
Calculating -------------------------------------
                find      0.268  (± 0.0%) i/s -      2.000  in   7.466009s
             bsearch    981.922k (± 3.6%) i/s -      4.962M in   5.061685s

Comparison:
             bsearch:   981921.6 i/s
                find:        0.3 i/s - 3665517.93x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    18.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    185.961  (± 2.2%) i/s -    936.000  in   5.036069s
        Array#insert      1.421  (± 0.0%) i/s -      8.000  in   5.628748s

Comparison:
       Array#unshift:      186.0 i/s
        Array#insert:        1.4 i/s - 130.83x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.076M i/100ms
          Array#size     2.090M i/100ms
         Array#count     1.611M i/100ms
Calculating -------------------------------------
        Array#length     20.794M (± 0.3%) i/s -    105.880M in   5.091805s
          Array#size     20.865M (± 0.2%) i/s -    104.513M in   5.009036s
         Array#count     16.124M (± 0.4%) i/s -     82.148M in   5.094971s

Comparison:
          Array#size: 20864920.0 i/s
        Array#length: 20794321.2 i/s - same-ish: difference falls within error
         Array#count: 16123530.0 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.856k i/100ms
        Array#sample     1.023M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    457.251k (± 0.6%) i/s -      2.293M in   5.014483s
        Array#sample     10.399M (± 0.2%) i/s -     52.149M in   5.014972s

Comparison:
        Array#sample: 10398647.0 i/s
 Array#shuffle.first:   457251.0 i/s - 22.74x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    64.696k i/100ms
          Date.parse    32.137k i/100ms
Calculating -------------------------------------
        Date.iso8601    641.857k (± 0.9%) i/s -      3.235M in   5.040159s
          Date.parse    320.475k (± 0.4%) i/s -      1.607M in   5.014059s

Comparison:
        Date.iso8601:   641857.1 i/s
          Date.parse:   320475.0 i/s - 2.00x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    17.580k i/100ms
           Array#map    26.819k i/100ms
Calculating -------------------------------------
   Array#each + push    174.241k (± 2.9%) i/s -    879.000k in   5.049471s
           Array#map    268.039k (± 0.5%) i/s -      1.341M in   5.002935s

Comparison:
           Array#map:   268038.9 i/s
   Array#each + push:   174241.3 i/s - 1.54x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            For loop    29.686k i/100ms
               #each    32.364k i/100ms
Calculating -------------------------------------
            For loop    297.201k (± 0.4%) i/s -      1.514M in   5.094213s
               #each    324.273k (± 0.4%) i/s -      1.651M in   5.090146s

Comparison:
               #each:   324272.7 i/s
            For loop:   297201.3 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.176k i/100ms
     each_with_index    19.142k i/100ms
Calculating -------------------------------------
          While Loop    274.224k (± 0.8%) i/s -      1.386M in   5.054464s
     each_with_index    191.354k (± 0.4%) i/s -    957.100k in   5.001796s

Comparison:
          While Loop:   274224.3 i/s
     each_with_index:   191354.1 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    92.324k i/100ms
      inject to_proc     2.198k i/100ms
        inject block     2.116k i/100ms
Calculating -------------------------------------
       inject symbol    974.354k (±12.4%) i/s -      4.893M in   5.084830s
      inject to_proc     21.946k (± 0.4%) i/s -    109.900k in   5.007924s
        inject block     21.229k (± 0.3%) i/s -    107.916k in   5.083561s

Comparison:
       inject symbol:   974353.9 i/s
      inject to_proc:    21945.6 i/s - 44.40x  (± 0.00) slower
        inject block:    21228.7 i/s - 45.90x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.656k i/100ms
   Array#map.flatten     3.945k i/100ms
      Array#flat_map     9.548k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     67.105k (± 0.8%) i/s -    339.456k in   5.058936s
   Array#map.flatten     39.376k (± 0.7%) i/s -    197.250k in   5.009584s
      Array#flat_map     95.093k (± 1.1%) i/s -    477.400k in   5.020964s

Comparison:
      Array#flat_map:    95092.5 i/s
Array#map.flatten(1):    67104.7 i/s - 1.42x  (± 0.00) slower
   Array#map.flatten:    39376.3 i/s - 2.41x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    31.423k i/100ms
  Array#reverse_each    32.260k i/100ms
Calculating -------------------------------------
  Array#reverse.each    312.553k (± 0.7%) i/s -      1.571M in   5.027087s
  Array#reverse_each    322.907k (± 0.5%) i/s -      1.645M in   5.095267s

Comparison:
  Array#reverse_each:   322906.9 i/s
  Array#reverse.each:   312553.1 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.499k i/100ms
   Enumerable#detect    82.644k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        205.011k (± 0.4%) i/s -      4.120M in  20.098343s
   Enumerable#detect    828.789k (± 1.6%) i/s -     16.611M in  20.048733s

Comparison:
   Enumerable#detect:   828788.9 i/s
Enumerable#select.first:   205011.0 i/s - 4.04x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       242.315k i/100ms
Enumerable#select.last
                        19.099k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.418M (± 1.4%) i/s -     12.116M in   5.012486s
Enumerable#select.last
                        190.766k (± 0.4%) i/s -    954.950k in   5.005940s

Comparison:
Enumerable#reverse.detect:  2417660.7 i/s
Enumerable#select.last:   190766.1 i/s - 12.67x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.920k i/100ms
  Enumerable#sort_by     4.919k i/100ms
     Enumerable#sort     2.369k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         50.163k (± 1.0%) i/s -    250.920k in   5.002602s
  Enumerable#sort_by     48.939k (± 0.6%) i/s -    245.950k in   5.025782s
     Enumerable#sort     24.272k (± 0.7%) i/s -    123.188k in   5.075617s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    50163.2 i/s
  Enumerable#sort_by:    48939.2 i/s - 1.03x  (± 0.00) slower
     Enumerable#sort:    24271.6 i/s - 2.07x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.935k i/100ms
Enumerable#sort_by...first
                         8.930k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    179.435k (± 0.5%) i/s -    914.685k in   5.097719s
Enumerable#sort_by...first
                         88.793k (± 0.5%) i/s -    446.500k in   5.028682s

Comparison:
   Enumerable#min_by:   179434.8 i/s
Enumerable#sort_by...first:    88793.2 i/s - 2.02x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   422.384k i/100ms
            Hash#dup   295.544k i/100ms
Calculating -------------------------------------
              Hash[]      3.651M (± 0.7%) i/s -     18.585M in   5.091042s
            Hash#dup      3.055M (± 1.2%) i/s -     15.368M in   5.031358s

Comparison:
              Hash[]:  3650710.1 i/s
            Hash#dup:  3054914.5 i/s - 1.20x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.425M i/100ms
  Hash#fetch, symbol     1.155M i/100ms
     Hash#[], string     1.228M i/100ms
  Hash#fetch, string   792.667k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.209M (± 0.5%) i/s -     71.236M in   5.013474s
  Hash#fetch, symbol     11.442M (± 0.4%) i/s -     57.730M in   5.045432s
     Hash#[], string     12.251M (± 0.2%) i/s -     61.409M in   5.012534s
  Hash#fetch, string      7.917M (± 0.3%) i/s -     39.633M in   5.006081s

Comparison:
     Hash#[], symbol: 14209296.6 i/s
     Hash#[], string: 12251150.8 i/s - 1.16x  (± 0.00) slower
  Hash#fetch, symbol: 11442194.4 i/s - 1.24x  (± 0.00) slower
  Hash#fetch, string:  7917108.9 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   861.098k i/100ms
             Hash#[]     1.019M i/100ms
          Hash#[] ||   941.292k i/100ms
          Hash#[] &&   416.503k i/100ms
          Hash#fetch   599.564k i/100ms
 Hash#fetch fallback   394.353k i/100ms
Calculating -------------------------------------
            Hash#dig      8.600M (± 0.7%) i/s -     43.055M in   5.006391s
             Hash#[]      9.918M (± 4.3%) i/s -     49.914M in   5.042274s
          Hash#[] ||      9.052M (± 0.9%) i/s -     46.123M in   5.095761s
          Hash#[] &&      4.153M (± 0.6%) i/s -     20.825M in   5.014571s
          Hash#fetch      6.430M (± 3.3%) i/s -     32.376M in   5.040782s
 Hash#fetch fallback      3.918M (± 0.8%) i/s -     19.718M in   5.032580s

Comparison:
             Hash#[]:  9917818.4 i/s
          Hash#[] ||:  9052029.3 i/s - 1.10x  (± 0.00) slower
            Hash#dig:  8600445.7 i/s - 1.15x  (± 0.00) slower
          Hash#fetch:  6430066.3 i/s - 1.54x  (± 0.00) slower
          Hash#[] &&:  4153087.4 i/s - 2.39x  (± 0.00) slower
 Hash#fetch fallback:  3918279.2 i/s - 2.53x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.427M i/100ms
  Hash#fetch + block     1.450M i/100ms
    Hash#fetch + arg     1.090M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.513M (± 0.3%) i/s -     72.771M in   5.014383s
  Hash#fetch + block     14.585M (± 1.1%) i/s -     73.947M in   5.070693s
    Hash#fetch + arg     10.910M (± 0.8%) i/s -     55.613M in   5.097629s

Comparison:
  Hash#fetch + block: 14585294.2 i/s
  Hash#fetch + const: 14512530.7 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 10910470.4 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.930k i/100ms
         sort + to_h    11.859k i/100ms
Calculating -------------------------------------
      sort_by + to_h    277.295k (± 2.4%) i/s -      1.396M in   5.039230s
         sort + to_h    117.509k (± 0.7%) i/s -    592.950k in   5.046234s

Comparison:
      sort_by + to_h:   277295.2 i/s
         sort + to_h:   117509.0 i/s - 2.36x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   193.615k i/100ms
       Hash#each_key   208.829k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.925M (± 0.7%) i/s -      9.681M in   5.030478s
       Hash#each_key      2.012M (± 0.6%) i/s -     10.233M in   5.086583s

Comparison:
       Hash#each_key:  2011753.4 i/s
      Hash#keys.each:  1924518.6 i/s - 1.05x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.231k i/100ms
           Hash#key?   987.166k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     11.811k (± 5.4%) i/s -     59.088k in   5.018185s
           Hash#key?      9.879M (± 0.5%) i/s -     50.345M in   5.096507s

Comparison:
           Hash#key?:  9878718.4 i/s
  Hash#keys.include?:    11810.8 i/s - 836.42x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.955k i/100ms
            Hash#[]=    10.245k i/100ms
Calculating -------------------------------------
         Hash#merge!     38.954k (± 0.5%) i/s -    197.750k in   5.076708s
            Hash#[]=    101.880k (± 1.1%) i/s -    512.250k in   5.028663s

Comparison:
            Hash#[]=:   101879.6 i/s
         Hash#merge!:    38953.5 i/s - 2.62x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.775k i/100ms
      Hash#merge({})     3.880k i/100ms
 Hash#dup#merge!({})     2.870k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         46.953k (± 0.7%) i/s -    238.750k in   5.085079s
      Hash#merge({})     38.541k (± 2.0%) i/s -    194.000k in   5.035804s
 Hash#dup#merge!({})     28.412k (± 0.7%) i/s -    143.500k in   5.050899s

Comparison:
{}#merge!(Hash) do end:    46953.1 i/s
      Hash#merge({}):    38540.9 i/s - 1.22x  (± 0.00) slower
 Hash#dup#merge!({}):    28412.0 i/s - 1.65x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   384.260k i/100ms
          Hash#merge   359.238k i/100ms
Calculating -------------------------------------
        Hash#**other      3.822M (± 0.8%) i/s -     19.213M in   5.026606s
          Hash#merge      3.559M (± 0.6%) i/s -     17.962M in   5.046775s

Comparison:
        Hash#**other:  3822490.6 i/s
          Hash#merge:  3559224.3 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.447k i/100ms
         Hash#merge!     3.895k i/100ms
Calculating -------------------------------------
          Hash#merge     14.378k (± 2.1%) i/s -     72.350k in   5.034309s
         Hash#merge!     38.655k (± 0.6%) i/s -    194.750k in   5.038370s

Comparison:
         Hash#merge!:    38654.9 i/s
          Hash#merge:    14378.0 i/s - 2.69x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      405.917k i/100ms
Array#each             221.756k i/100ms
Array#each_w/_object   172.302k i/100ms
Hash#select-include     72.097k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.068M (± 0.5%) i/s -     20.702M in   5.089416s
Array#each                2.238M (± 0.5%) i/s -     11.310M in   5.052864s
Array#each_w/_object      1.722M (± 0.4%) i/s -      8.615M in   5.002783s
Hash#select-include     714.811k (± 0.9%) i/s -      3.605M in   5.043464s

Comparison:
Hash#native-slice   :  4067697.2 i/s
Array#each          :  2238304.8 i/s - 1.82x  (± 0.00) slower
Array#each_w/_object:  1722094.9 i/s - 2.36x  (± 0.00) slower
Hash#select-include :   714810.6 i/s - 5.69x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.084k i/100ms
         Hash#value?   847.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     10.909k (± 3.6%) i/s -     55.284k in   5.075272s
         Hash#value?      8.477k (± 0.4%) i/s -     43.197k in   5.095782s

Comparison:
Hash#values.include?:    10909.2 i/s
         Hash#value?:     8477.1 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                call   656.212k i/100ms
                send   517.606k i/100ms
      method_missing   387.079k i/100ms
Calculating -------------------------------------
                call      6.554M (± 0.5%) i/s -     32.811M in   5.006622s
                send      5.158M (± 0.6%) i/s -     25.880M in   5.018126s
      method_missing      3.853M (± 0.6%) i/s -     19.354M in   5.022866s

Comparison:
                call:  6553618.0 i/s
                send:  5157562.0 i/s - 1.27x  (± 0.00) slower
      method_missing:  3853299.4 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
               Block     9.058k i/100ms
      Symbol#to_proc    10.290k i/100ms
Calculating -------------------------------------
               Block     90.039k (± 0.4%) i/s -    452.900k in   5.030124s
      Symbol#to_proc    102.246k (± 0.4%) i/s -    514.500k in   5.032053s

Comparison:
      Symbol#to_proc:   102246.0 i/s
               Block:    90038.8 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          block.call   906.411k i/100ms
       block + yield   971.201k i/100ms
        unused block     1.291M i/100ms
               yield     1.153M i/100ms
Calculating -------------------------------------
          block.call      9.061M (± 0.2%) i/s -     45.321M in   5.001919s
       block + yield      9.714M (± 0.3%) i/s -     49.531M in   5.099177s
        unused block     12.917M (± 0.3%) i/s -     65.843M in   5.097212s
               yield     11.535M (± 0.2%) i/s -     58.809M in   5.098401s

Comparison:
        unused block: 12917494.3 i/s
               yield: 11534732.6 i/s - 1.12x  (± 0.00) slower
       block + yield:  9713640.7 i/s - 1.33x  (± 0.00) slower
          block.call:  9060675.4 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   321.596k i/100ms
      range#include?    12.524k i/100ms
       range#member?    12.354k i/100ms
       plain compare   526.730k i/100ms
Calculating -------------------------------------
        range#cover?      3.195M (± 1.1%) i/s -     16.080M in   5.032795s
      range#include?    127.649k (± 1.1%) i/s -    638.724k in   5.004381s
       range#member?    127.914k (± 0.5%) i/s -    642.408k in   5.022297s
       plain compare      5.290M (± 0.5%) i/s -     26.863M in   5.077960s

Comparison:
       plain compare:  5290317.3 i/s
        range#cover?:  3195397.1 i/s - 1.66x  (± 0.00) slower
       range#member?:   127914.4 i/s - 41.36x  (± 0.00) slower
      range#include?:   127648.9 i/s - 41.44x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       String#match?   916.729k i/100ms
           String#=~   637.737k i/100ms
          Regexp#===   568.959k i/100ms
        String#match   464.906k i/100ms
Calculating -------------------------------------
       String#match?      9.128M (± 2.6%) i/s -     45.836M in   5.025355s
           String#=~      6.413M (± 0.8%) i/s -     32.525M in   5.071648s
          Regexp#===      5.682M (± 0.6%) i/s -     28.448M in   5.006737s
        String#match      4.705M (± 0.5%) i/s -     23.710M in   5.039121s

Comparison:
       String#match?:  9128056.6 i/s
           String#=~:  6413406.9 i/s - 1.42x  (± 0.00) slower
          Regexp#===:  5682137.6 i/s - 1.61x  (± 0.00) slower
        String#match:  4705324.2 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   640.417k i/100ms
      String#casecmp   802.268k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.388M (± 0.3%) i/s -     32.021M in   5.013050s
      String#casecmp      8.004M (± 0.2%) i/s -     40.113M in   5.011408s

Comparison:
      String#casecmp:  8004458.4 i/s
String#downcase + ==:  6387554.0 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            String#+   596.031k i/100ms
       String#concat   617.535k i/100ms
       String#append   661.439k i/100ms
         "foo" "bar"     1.107M i/100ms
  "#{'foo'}#{'bar'}"     1.159M i/100ms
Calculating -------------------------------------
            String#+      5.963M (± 0.4%) i/s -     30.398M in   5.098110s
       String#concat      6.179M (± 0.7%) i/s -     31.494M in   5.097034s
       String#append      6.627M (± 0.6%) i/s -     33.733M in   5.090481s
         "foo" "bar"     11.021M (± 0.3%) i/s -     55.352M in   5.022482s
  "#{'foo'}#{'bar'}"     11.605M (± 0.5%) i/s -     59.098M in   5.092407s

Comparison:
  "#{'foo'}#{'bar'}": 11605467.5 i/s
         "foo" "bar": 11020890.5 i/s - 1.05x  (± 0.00) slower
       String#append:  6626965.0 i/s - 1.75x  (± 0.00) slower
       String#concat:  6179247.3 i/s - 1.88x  (± 0.00) slower
            String#+:  5962601.4 i/s - 1.95x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#+@   993.967k i/100ms
          String#dup   568.474k i/100ms
Calculating -------------------------------------
           String#+@      9.939M (± 1.0%) i/s -     50.692M in   5.101090s
          String#dup      5.683M (± 2.6%) i/s -     28.424M in   5.005482s

Comparison:
           String#+@:  9938562.8 i/s
          String#dup:  5682770.9 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   186.786k i/100ms
       String#match?   428.356k i/100ms
    String#end_with?   613.349k i/100ms
Calculating -------------------------------------
           String#=~      1.870M (± 1.8%) i/s -      9.526M in   5.097123s
       String#match?      4.273M (± 0.7%) i/s -     21.418M in   5.012989s
    String#end_with?      6.147M (± 0.7%) i/s -     31.281M in   5.089044s

Comparison:
    String#end_with?:  6146987.0 i/s
       String#match?:  4272704.7 i/s - 1.44x  (± 0.00) slower
           String#=~:  1869565.1 i/s - 3.29x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   111.814k i/100ms
          String#sub   137.691k i/100ms
String#dup["string"]=
                       178.610k i/100ms
Calculating -------------------------------------
         String#gsub      1.124M (± 0.4%) i/s -      5.703M in   5.071253s
          String#sub      1.402M (± 0.4%) i/s -      7.022M in   5.010124s
String#dup["string"]=
                          1.795M (± 0.4%) i/s -      9.109M in   5.073884s

Comparison:
String#dup["string"]=:  1795316.7 i/s
          String#sub:  1401629.7 i/s - 1.28x  (± 0.00) slower
         String#gsub:  1124499.0 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   104.669k i/100ms
           String#tr   341.729k i/100ms
Calculating -------------------------------------
         String#gsub      1.035M (± 0.5%) i/s -      5.233M in   5.056985s
           String#tr      3.409M (± 0.4%) i/s -     17.086M in   5.012044s

Comparison:
           String#tr:  3409126.0 i/s
         String#gsub:  1034918.8 i/s - 3.29x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.125M i/100ms
         With Freeze     1.603M i/100ms
Calculating -------------------------------------
      Without Freeze     11.266M (± 0.3%) i/s -     57.400M in   5.094840s
         With Freeze     16.020M (± 0.2%) i/s -     80.133M in   5.001958s

Comparison:
         With Freeze: 16020450.1 i/s
      Without Freeze: 11266482.7 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.385k i/100ms
      String#squeeze   158.065k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     33.820k (± 0.5%) i/s -    169.250k in   5.004520s
      String#squeeze      1.600M (± 1.5%) i/s -      8.061M in   5.040122s

Comparison:
      String#squeeze:  1599776.2 i/s
 String#gsub/regex+/:    33820.3 i/s - 47.30x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   280.069k i/100ms
       String#match?   723.727k i/100ms
  String#start_with?   848.678k i/100ms
Calculating -------------------------------------
           String#=~      2.796M (± 0.8%) i/s -     14.003M in   5.009261s
       String#match?      7.249M (± 0.2%) i/s -     36.910M in   5.091618s
  String#start_with?      8.507M (± 0.3%) i/s -     43.283M in   5.087724s

Comparison:
  String#start_with?:  8507334.8 i/s
       String#match?:  7249205.5 i/s - 1.17x  (± 0.00) slower
           String#=~:  2795673.8 i/s - 3.04x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   190.654k i/100ms
    String#[0, n] ==    79.742k i/100ms
   String#[RANGE] ==    76.215k i/100ms
   String#[0...n] ==    47.520k i/100ms
Calculating -------------------------------------
  String#start_with?      1.901M (± 1.4%) i/s -      9.533M in   5.016183s
    String#[0, n] ==    803.229k (± 0.9%) i/s -      4.067M in   5.063517s
   String#[RANGE] ==    744.141k (± 0.6%) i/s -      3.735M in   5.018782s
   String#[0...n] ==    466.684k (± 0.6%) i/s -      2.376M in   5.091400s

Comparison:
  String#start_with?:  1900746.1 i/s
    String#[0, n] ==:   803228.6 i/s - 2.37x  (± 0.00) slower
   String#[RANGE] ==:   744141.2 i/s - 2.55x  (± 0.00) slower
   String#[0...n] ==:   466683.9 i/s - 4.07x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   180.330k i/100ms
 String#sub!'string'   124.036k i/100ms
String#gsub!'string'    75.762k i/100ms
  String#[/regexp/]=   151.311k i/100ms
 String#sub!/regexp/   111.724k i/100ms
String#gsub!/regexp/    61.175k i/100ms
Calculating -------------------------------------
  String#['string']=      1.814M (± 0.6%) i/s -      9.197M in   5.070191s
 String#sub!'string'      1.253M (± 0.6%) i/s -      6.326M in   5.050485s
String#gsub!'string'    765.608k (± 0.4%) i/s -      3.864M in   5.046861s
  String#[/regexp/]=      1.508M (± 1.4%) i/s -      7.566M in   5.016942s
 String#sub!/regexp/      1.143M (± 1.4%) i/s -      5.810M in   5.083418s
String#gsub!/regexp/    604.686k (± 0.7%) i/s -      3.059M in   5.058662s

Comparison:
  String#['string']=:  1813959.8 i/s
  String#[/regexp/]=:  1508340.6 i/s - 1.20x  (± 0.00) slower
 String#sub!'string':  1252560.6 i/s - 1.45x  (± 0.00) slower
 String#sub!/regexp/:  1143114.5 i/s - 1.59x  (± 0.00) slower
String#gsub!'string':   765608.4 i/s - 2.37x  (± 0.00) slower
String#gsub!/regexp/:   604685.8 i/s - 3.00x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          String#sub   142.822k i/100ms
        String#chomp   552.582k i/100ms
String#delete_suffix   613.669k i/100ms
Calculating -------------------------------------
          String#sub      1.430M (± 0.5%) i/s -      7.284M in   5.095257s
        String#chomp      5.516M (± 0.5%) i/s -     27.629M in   5.009172s
String#delete_suffix      6.118M (± 0.4%) i/s -     30.683M in   5.015577s

Comparison:
String#delete_suffix:  6117755.6 i/s
        String#chomp:  5515843.1 i/s - 1.11x  (± 0.00) slower
          String#sub:  1429590.4 i/s - 4.28x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   630.031k i/100ms
          String#sub   147.826k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.258M (± 0.8%) i/s -     31.502M in   5.034060s
          String#sub      1.476M (± 0.5%) i/s -      7.391M in   5.008376s

Comparison:
String#delete_prefix:  6258101.5 i/s
          String#sub:  1475821.0 i/s - 4.24x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   587.052k i/100ms
    String#unpack[0]   465.068k i/100ms
Calculating -------------------------------------
      String#unpack1      5.860M (± 0.4%) i/s -     29.353M in   5.008639s
    String#unpack[0]      4.639M (± 0.4%) i/s -     23.253M in   5.012686s

Comparison:
      String#unpack1:  5860496.4 i/s
    String#unpack[0]:  4638997.8 i/s - 1.26x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.245k i/100ms
          Time.parse     9.390k i/100ms
Calculating -------------------------------------
        Time.iso8601    271.634k (± 0.5%) i/s -      1.362M in   5.015158s
          Time.parse     93.864k (± 0.5%) i/s -    469.500k in   5.002046s

Comparison:
        Time.iso8601:   271633.8 i/s
          Time.parse:    93864.4 i/s - 2.89x  (± 0.00) slower

