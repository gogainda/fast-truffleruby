$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       771.611k i/100ms
Function with splat arguments
                        25.830k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.695M (± 0.5%) i/s -     38.581M in   5.013705s
Function with splat arguments
                        260.983k (± 6.6%) i/s -      1.317M in   5.078157s

Comparison:
Function with single Array argument:  7695222.5 i/s
Function with splat arguments:   260983.2 i/s - 29.49x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.020M i/100ms
Sequential Assignment
                         1.010M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.190M (± 0.5%) i/s -     50.984M in   5.003383s
Sequential Assignment
                         10.162M (± 0.3%) i/s -     51.500M in   5.067832s

Comparison:
 Parallel Assignment: 10190235.7 i/s
Sequential Assignment: 10162185.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   486.733k i/100ms
       attr_accessor   562.466k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.865M (± 0.2%) i/s -     24.337M in   5.002168s
       attr_accessor      5.564M (± 0.4%) i/s -     28.123M in   5.054546s

Comparison:
       attr_accessor:  5564045.2 i/s
   getter_and_setter:  4865246.6 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    88.104k i/100ms
         respond_to?   773.921k i/100ms
Calculating -------------------------------------
      begin...rescue    881.919k (± 1.3%) i/s -      4.493M in   5.095866s
         respond_to?      7.806M (± 0.4%) i/s -     39.470M in   5.056190s

Comparison:
         respond_to?:  7806406.4 i/s
      begin...rescue:   881918.6 i/s - 8.85x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              normal   300.127k i/100ms
             &method   121.652k i/100ms
Calculating -------------------------------------
              normal      3.001M (± 0.6%) i/s -     15.006M in   5.000547s
             &method      1.242M (± 0.6%) i/s -      6.326M in   5.092783s

Comparison:
              normal:  3001053.7 i/s
             &method:  1242173.8 i/s - 2.42x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       259.000  i/100ms
       define_method   256.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.355k (±21.7%) i/s -     10.360k in   5.009974s
       define_method      3.302k (±20.4%) i/s -     14.848k in   5.009741s

Comparison:
       define_method:     3301.9 i/s
module_eval with string:     2355.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Float#round   262.108k i/100ms
       Kernel#format   201.740k i/100ms
            String#%   170.942k i/100ms
Calculating -------------------------------------
         Float#round      2.621M (± 0.4%) i/s -     13.105M in   5.000318s
       Kernel#format      2.023M (± 0.4%) i/s -     10.289M in   5.085049s
            String#%      1.716M (± 0.7%) i/s -      8.718M in   5.080345s

Comparison:
         Float#round:  2620952.2 i/s
       Kernel#format:  2023364.2 i/s - 1.30x  (± 0.00) slower
            String#%:  1716109.5 i/s - 1.53x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash   925.619k i/100ms
          OpenStruct   507.918k i/100ms
Calculating -------------------------------------
                Hash      9.164M (± 4.3%) i/s -     46.281M in   5.062989s
          OpenStruct      5.071M (± 0.6%) i/s -     25.396M in   5.008522s

Comparison:
                Hash:  9164211.5 i/s
          OpenStruct:  5070726.0 i/s - 1.81x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.054M i/100ms
          OpenStruct    11.582k i/100ms
Calculating -------------------------------------
                Hash     11.261M (± 0.3%) i/s -     56.941M in   5.056472s
          OpenStruct    116.821k (± 2.8%) i/s -    590.682k in   5.060196s

Comparison:
                Hash: 11261137.1 i/s
          OpenStruct:   116821.3 i/s - 96.40x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   563.157k i/100ms
  ancestors.include?   119.275k i/100ms
Calculating -------------------------------------
  less than or equal      5.699M (± 4.1%) i/s -     28.721M in   5.051271s
  ancestors.include?      1.194M (± 0.6%) i/s -      6.083M in   5.096274s

Comparison:
  less than or equal:  5699004.6 i/s
  ancestors.include?:  1193664.6 i/s - 4.77x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.555  (± 0.0%) i/s -      3.000  in   5.400989s
         Kernel loop      0.228  (± 0.0%) i/s -      2.000  in   8.789993s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 2.44x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.489M i/100ms
         Array#first     1.318M i/100ms
Calculating -------------------------------------
           Array#[0]     14.889M (± 0.4%) i/s -     74.460M in   5.001167s
         Array#first     13.255M (± 0.4%) i/s -     67.213M in   5.070919s

Comparison:
           Array#[0]: 14888715.0 i/s
         Array#first: 13254684.6 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.552M i/100ms
          Array#last     1.328M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.468M (± 0.6%) i/s -     77.588M in   5.016146s
          Array#last     13.251M (± 0.3%) i/s -     66.377M in   5.009377s

Comparison:
          Array#[-1]: 15468132.4 i/s
          Array#last: 13250664.9 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    99.266k i/100ms
Calculating -------------------------------------
                find      0.285  (± 0.0%) i/s -      2.000  in   7.013162s
             bsearch    994.984k (± 0.9%) i/s -      5.063M in   5.088489s

Comparison:
             bsearch:   994984.0 i/s
                find:        0.3 i/s - 3488991.17x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    19.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    196.732  (± 2.0%) i/s -    988.000  in   5.024686s
        Array#insert      1.432  (± 0.0%) i/s -      8.000  in   5.586882s

Comparison:
       Array#unshift:      196.7 i/s
        Array#insert:        1.4 i/s - 137.39x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.091M i/100ms
          Array#size     2.095M i/100ms
         Array#count     1.632M i/100ms
Calculating -------------------------------------
        Array#length     20.883M (± 0.3%) i/s -    104.555M in   5.006715s
          Array#size     20.856M (± 0.7%) i/s -    104.756M in   5.023052s
         Array#count     16.445M (± 0.5%) i/s -     83.245M in   5.062084s

Comparison:
        Array#length: 20883107.6 i/s
          Array#size: 20856262.8 i/s - same-ish: difference falls within error
         Array#count: 16445106.1 i/s - 1.27x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    46.118k i/100ms
        Array#sample     1.039M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    461.426k (± 0.7%) i/s -      2.352M in   5.097538s
        Array#sample     10.412M (± 0.2%) i/s -     52.981M in   5.088507s

Comparison:
        Array#sample: 10411988.2 i/s
 Array#shuffle.first:   461425.6 i/s - 22.56x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    64.339k i/100ms
          Date.parse    32.250k i/100ms
Calculating -------------------------------------
        Date.iso8601    642.155k (± 0.4%) i/s -      3.217M in   5.009691s
          Date.parse    322.261k (± 0.3%) i/s -      1.612M in   5.003749s

Comparison:
        Date.iso8601:   642155.2 i/s
          Date.parse:   322260.8 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.973k i/100ms
           Array#map    26.097k i/100ms
Calculating -------------------------------------
   Array#each + push    188.801k (± 0.7%) i/s -    948.650k in   5.024868s
           Array#map    260.719k (± 0.7%) i/s -      1.305M in   5.005074s

Comparison:
           Array#map:   260719.5 i/s
   Array#each + push:   188800.8 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            For loop    29.819k i/100ms
               #each    32.633k i/100ms
Calculating -------------------------------------
            For loop    297.992k (± 0.7%) i/s -      1.491M in   5.003550s
               #each    326.566k (± 0.8%) i/s -      1.664M in   5.096636s

Comparison:
               #each:   326566.5 i/s
            For loop:   297992.4 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.323k i/100ms
     each_with_index    19.422k i/100ms
Calculating -------------------------------------
          While Loop    274.046k (± 0.7%) i/s -      1.393M in   5.085039s
     each_with_index    194.158k (± 0.4%) i/s -    971.100k in   5.001700s

Comparison:
          While Loop:   274046.4 i/s
     each_with_index:   194157.6 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    93.209k i/100ms
      inject to_proc     2.212k i/100ms
        inject block     2.151k i/100ms
Calculating -------------------------------------
       inject symbol      1.030M (±15.7%) i/s -      5.126M in   5.086122s
      inject to_proc     22.145k (± 0.5%) i/s -    112.812k in   5.094302s
        inject block     21.647k (± 0.4%) i/s -    109.701k in   5.067869s

Comparison:
       inject symbol:  1030093.6 i/s
      inject to_proc:    22145.4 i/s - 46.52x  (± 0.00) slower
        inject block:    21646.7 i/s - 47.59x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.782k i/100ms
   Array#map.flatten     3.998k i/100ms
      Array#flat_map     9.564k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     68.756k (± 0.5%) i/s -    345.882k in   5.030737s
   Array#map.flatten     39.866k (± 0.2%) i/s -    199.900k in   5.014349s
      Array#flat_map     95.648k (± 0.4%) i/s -    487.764k in   5.099642s

Comparison:
      Array#flat_map:    95647.9 i/s
Array#map.flatten(1):    68755.7 i/s - 1.39x  (± 0.00) slower
   Array#map.flatten:    39865.8 i/s - 2.40x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    31.506k i/100ms
  Array#reverse_each    32.487k i/100ms
Calculating -------------------------------------
  Array#reverse.each    315.548k (± 0.5%) i/s -      1.607M in   5.092256s
  Array#reverse_each    325.653k (± 0.3%) i/s -      1.657M in   5.087773s

Comparison:
  Array#reverse_each:   325653.3 i/s
  Array#reverse.each:   315548.4 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        21.024k i/100ms
   Enumerable#detect    84.307k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        210.188k (± 0.5%) i/s -      4.205M in  20.005375s
   Enumerable#detect    832.709k (± 0.6%) i/s -     16.693M in  20.047180s

Comparison:
   Enumerable#detect:   832709.2 i/s
Enumerable#select.first:   210187.9 i/s - 3.96x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       243.321k i/100ms
Enumerable#select.last
                        19.260k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.431M (± 0.6%) i/s -     12.166M in   5.004638s
Enumerable#select.last
                        191.655k (± 0.8%) i/s -    963.000k in   5.024975s

Comparison:
Enumerable#reverse.detect:  2431049.7 i/s
Enumerable#select.last:   191654.6 i/s - 12.68x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.941k i/100ms
  Enumerable#sort_by     4.785k i/100ms
     Enumerable#sort     2.452k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         49.591k (± 1.8%) i/s -    251.991k in   5.083033s
  Enumerable#sort_by     48.895k (± 0.9%) i/s -    248.820k in   5.089279s
     Enumerable#sort     24.516k (± 0.6%) i/s -    122.600k in   5.000979s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    49591.4 i/s
  Enumerable#sort_by:    48895.2 i/s - same-ish: difference falls within error
     Enumerable#sort:    24516.0 i/s - 2.02x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.456k i/100ms
Enumerable#sort_by...first
                         8.466k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    174.544k (± 0.2%) i/s -    872.800k in   5.000491s
Enumerable#sort_by...first
                         84.467k (± 0.7%) i/s -    423.300k in   5.011690s

Comparison:
   Enumerable#min_by:   174543.5 i/s
Enumerable#sort_by...first:    84467.2 i/s - 2.07x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   413.131k i/100ms
            Hash#dup   291.263k i/100ms
Calculating -------------------------------------
              Hash[]      3.629M (± 0.4%) i/s -     18.178M in   5.008944s
            Hash#dup      3.171M (± 1.1%) i/s -     16.019M in   5.052231s

Comparison:
              Hash[]:  3629134.5 i/s
            Hash#dup:  3171155.1 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.394M i/100ms
  Hash#fetch, symbol     1.190M i/100ms
     Hash#[], string     1.248M i/100ms
  Hash#fetch, string   796.669k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.312M (± 0.3%) i/s -     72.464M in   5.063079s
  Hash#fetch, symbol     11.911M (± 0.3%) i/s -     60.667M in   5.093487s
     Hash#[], string     12.484M (± 0.2%) i/s -     63.663M in   5.099549s
  Hash#fetch, string      7.967M (± 0.5%) i/s -     39.833M in   5.000063s

Comparison:
     Hash#[], symbol: 14312336.2 i/s
     Hash#[], string: 12484029.0 i/s - 1.15x  (± 0.00) slower
  Hash#fetch, symbol: 11910851.8 i/s - 1.20x  (± 0.00) slower
  Hash#fetch, string:  7966773.7 i/s - 1.80x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   883.034k i/100ms
             Hash#[]   966.599k i/100ms
          Hash#[] ||   911.393k i/100ms
          Hash#[] &&   384.360k i/100ms
          Hash#fetch   615.036k i/100ms
 Hash#fetch fallback   385.732k i/100ms
Calculating -------------------------------------
            Hash#dig      8.747M (± 0.5%) i/s -     44.152M in   5.047899s
             Hash#[]     10.143M (± 1.3%) i/s -     51.230M in   5.051400s
          Hash#[] ||      9.183M (± 2.1%) i/s -     46.481M in   5.064062s
          Hash#[] &&      3.971M (± 2.6%) i/s -     19.987M in   5.036895s
          Hash#fetch      5.960M (± 1.0%) i/s -     30.137M in   5.057118s
 Hash#fetch fallback      3.853M (± 1.1%) i/s -     19.287M in   5.006125s

Comparison:
             Hash#[]: 10143360.9 i/s
          Hash#[] ||:  9182705.7 i/s - 1.10x  (± 0.00) slower
            Hash#dig:  8746781.3 i/s - 1.16x  (± 0.00) slower
          Hash#fetch:  5959892.5 i/s - 1.70x  (± 0.00) slower
          Hash#[] &&:  3970609.8 i/s - 2.55x  (± 0.00) slower
 Hash#fetch fallback:  3853059.7 i/s - 2.63x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.445M i/100ms
  Hash#fetch + block     1.451M i/100ms
    Hash#fetch + arg     1.098M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.494M (± 0.7%) i/s -     73.686M in   5.084160s
  Hash#fetch + block     14.667M (± 1.0%) i/s -     74.011M in   5.046712s
    Hash#fetch + arg     10.993M (± 0.4%) i/s -     56.009M in   5.095069s

Comparison:
  Hash#fetch + block: 14666796.4 i/s
  Hash#fetch + const: 14493968.2 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 10992933.7 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.795k i/100ms
         sort + to_h    11.150k i/100ms
Calculating -------------------------------------
      sort_by + to_h    275.818k (± 0.4%) i/s -      1.390M in   5.038707s
         sort + to_h    111.639k (± 0.6%) i/s -    568.650k in   5.093804s

Comparison:
      sort_by + to_h:   275818.3 i/s
         sort + to_h:   111639.3 i/s - 2.47x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   190.159k i/100ms
       Hash#each_key   212.536k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.888M (± 0.3%) i/s -      9.508M in   5.036206s
       Hash#each_key      2.106M (± 0.7%) i/s -     10.627M in   5.046452s

Comparison:
       Hash#each_key:  2105902.1 i/s
      Hash#keys.each:  1887935.9 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.176k i/100ms
           Hash#key?     1.001M i/100ms
Calculating -------------------------------------
  Hash#keys.include?     11.819k (± 3.2%) i/s -     59.976k in   5.080662s
           Hash#key?     10.121M (± 0.4%) i/s -     51.035M in   5.042407s

Comparison:
           Hash#key?: 10121326.3 i/s
  Hash#keys.include?:    11818.7 i/s - 856.38x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.974k i/100ms
            Hash#[]=    10.274k i/100ms
Calculating -------------------------------------
         Hash#merge!     39.642k (± 0.5%) i/s -    198.700k in   5.012419s
            Hash#[]=    103.411k (± 1.2%) i/s -    523.974k in   5.067678s

Comparison:
            Hash#[]=:   103411.3 i/s
         Hash#merge!:    39642.4 i/s - 2.61x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.765k i/100ms
      Hash#merge({})     3.988k i/100ms
 Hash#dup#merge!({})     2.927k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         47.381k (± 0.3%) i/s -    238.250k in   5.028476s
      Hash#merge({})     39.834k (± 0.4%) i/s -    199.400k in   5.005844s
 Hash#dup#merge!({})     28.993k (± 0.7%) i/s -    146.350k in   5.047957s

Comparison:
{}#merge!(Hash) do end:    47380.6 i/s
      Hash#merge({}):    39834.2 i/s - 1.19x  (± 0.00) slower
 Hash#dup#merge!({}):    28993.3 i/s - 1.63x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   389.385k i/100ms
          Hash#merge   359.576k i/100ms
Calculating -------------------------------------
        Hash#**other      3.841M (± 0.3%) i/s -     19.469M in   5.068911s
          Hash#merge      3.623M (± 0.3%) i/s -     18.338M in   5.061516s

Comparison:
        Hash#**other:  3840956.3 i/s
          Hash#merge:  3623143.4 i/s - 1.06x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.661k i/100ms
         Hash#merge!     3.954k i/100ms
Calculating -------------------------------------
          Hash#merge     16.754k (± 1.3%) i/s -     84.711k in   5.056977s
         Hash#merge!     39.636k (± 0.7%) i/s -    201.654k in   5.087842s

Comparison:
         Hash#merge!:    39636.2 i/s
          Hash#merge:    16754.0 i/s - 2.37x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      418.752k i/100ms
Array#each             228.797k i/100ms
Array#each_w/_object   173.562k i/100ms
Hash#select-include     71.012k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.234M (± 0.7%) i/s -     21.356M in   5.044120s
Array#each                2.309M (± 0.4%) i/s -     11.669M in   5.053770s
Array#each_w/_object      1.755M (± 0.6%) i/s -      8.852M in   5.042616s
Hash#select-include     711.592k (± 0.9%) i/s -      3.622M in   5.089867s

Comparison:
Hash#native-slice   :  4234137.4 i/s
Array#each          :  2308932.8 i/s - 1.83x  (± 0.00) slower
Array#each_w/_object:  1755425.9 i/s - 2.41x  (± 0.00) slower
Hash#select-include :   711591.9 i/s - 5.95x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.712k i/100ms
         Hash#value?     1.439k i/100ms
Calculating -------------------------------------
Hash#values.include?     16.962k (± 3.6%) i/s -     85.600k in   5.053945s
         Hash#value?     14.589k (± 0.4%) i/s -     73.389k in   5.030473s

Comparison:
Hash#values.include?:    16961.6 i/s
         Hash#value?:    14589.2 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                call   661.183k i/100ms
                send   525.005k i/100ms
      method_missing   389.015k i/100ms
Calculating -------------------------------------
                call      6.616M (± 0.4%) i/s -     33.720M in   5.096711s
                send      5.268M (± 1.0%) i/s -     26.775M in   5.083142s
      method_missing      3.867M (± 1.1%) i/s -     19.451M in   5.030222s

Comparison:
                call:  6616212.7 i/s
                send:  5267988.8 i/s - 1.26x  (± 0.00) slower
      method_missing:  3867277.0 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
               Block     9.181k i/100ms
      Symbol#to_proc    10.406k i/100ms
Calculating -------------------------------------
               Block     91.057k (± 0.5%) i/s -    459.050k in   5.041495s
      Symbol#to_proc    103.613k (± 0.5%) i/s -    520.300k in   5.021698s

Comparison:
      Symbol#to_proc:   103613.2 i/s
               Block:    91056.5 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          block.call   944.049k i/100ms
       block + yield   986.667k i/100ms
        unused block     1.306M i/100ms
               yield     1.194M i/100ms
Calculating -------------------------------------
          block.call      9.432M (± 0.3%) i/s -     47.202M in   5.004503s
       block + yield      9.839M (± 1.6%) i/s -     49.333M in   5.015661s
        unused block     13.050M (± 0.4%) i/s -     65.304M in   5.004136s
               yield     11.941M (± 0.2%) i/s -     59.707M in   5.000301s

Comparison:
        unused block: 13050337.6 i/s
               yield: 11940700.0 i/s - 1.09x  (± 0.00) slower
       block + yield:  9838614.8 i/s - 1.33x  (± 0.00) slower
          block.call:  9432096.9 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   323.236k i/100ms
      range#include?    12.801k i/100ms
       range#member?    12.757k i/100ms
       plain compare   531.763k i/100ms
Calculating -------------------------------------
        range#cover?      3.295M (± 0.9%) i/s -     16.485M in   5.003222s
      range#include?    127.215k (± 0.7%) i/s -    640.050k in   5.031509s
       range#member?    127.693k (± 0.6%) i/s -    650.607k in   5.095271s
       plain compare      5.292M (± 0.5%) i/s -     26.588M in   5.024197s

Comparison:
       plain compare:  5292131.4 i/s
        range#cover?:  3295165.0 i/s - 1.61x  (± 0.00) slower
       range#member?:   127692.7 i/s - 41.44x  (± 0.00) slower
      range#include?:   127215.3 i/s - 41.60x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       String#match?   916.706k i/100ms
           String#=~   647.212k i/100ms
          Regexp#===   564.114k i/100ms
        String#match   474.265k i/100ms
Calculating -------------------------------------
       String#match?      9.130M (± 0.3%) i/s -     45.835M in   5.020408s
           String#=~      6.462M (± 0.6%) i/s -     32.361M in   5.008342s
          Regexp#===      5.637M (± 0.4%) i/s -     28.206M in   5.003955s
        String#match      4.737M (± 0.4%) i/s -     23.713M in   5.006509s

Comparison:
       String#match?:  9129856.1 i/s
           String#=~:  6461564.4 i/s - 1.41x  (± 0.00) slower
          Regexp#===:  5636774.8 i/s - 1.62x  (± 0.00) slower
        String#match:  4736575.1 i/s - 1.93x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   652.804k i/100ms
      String#casecmp   815.584k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.551M (± 0.4%) i/s -     33.293M in   5.082345s
      String#casecmp      8.101M (± 2.4%) i/s -     40.779M in   5.037244s

Comparison:
      String#casecmp:  8100873.1 i/s
String#downcase + ==:  6550848.3 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            String#+   593.454k i/100ms
       String#concat   616.806k i/100ms
       String#append   668.436k i/100ms
         "foo" "bar"     1.168M i/100ms
  "#{'foo'}#{'bar'}"     1.167M i/100ms
Calculating -------------------------------------
            String#+      5.900M (± 0.4%) i/s -     29.673M in   5.029361s
       String#concat      6.182M (± 0.4%) i/s -     31.457M in   5.088941s
       String#append      6.671M (± 0.2%) i/s -     33.422M in   5.009737s
         "foo" "bar"     11.698M (± 0.3%) i/s -     59.554M in   5.090793s
  "#{'foo'}#{'bar'}"     11.667M (± 0.2%) i/s -     58.333M in   4.999952s

Comparison:
         "foo" "bar": 11698435.1 i/s
  "#{'foo'}#{'bar'}": 11666785.8 i/s - same-ish: difference falls within error
       String#append:  6671407.9 i/s - 1.75x  (± 0.00) slower
       String#concat:  6181559.0 i/s - 1.89x  (± 0.00) slower
            String#+:  5900010.7 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#+@     1.013M i/100ms
          String#dup   576.441k i/100ms
Calculating -------------------------------------
           String#+@     10.131M (± 0.3%) i/s -     51.662M in   5.099563s
          String#dup      5.786M (± 0.3%) i/s -     29.398M in   5.081091s

Comparison:
           String#+@: 10130768.3 i/s
          String#dup:  5785908.7 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   187.699k i/100ms
       String#match?   426.456k i/100ms
    String#end_with?   621.129k i/100ms
Calculating -------------------------------------
           String#=~      1.848M (± 3.7%) i/s -      9.385M in   5.086938s
       String#match?      4.302M (± 0.5%) i/s -     21.749M in   5.055248s
    String#end_with?      6.186M (± 0.5%) i/s -     31.056M in   5.020823s

Comparison:
    String#end_with?:  6185665.6 i/s
       String#match?:  4302430.7 i/s - 1.44x  (± 0.00) slower
           String#=~:  1848089.2 i/s - 3.35x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   113.612k i/100ms
          String#sub   133.658k i/100ms
String#dup["string"]=
                       179.189k i/100ms
Calculating -------------------------------------
         String#gsub      1.136M (± 0.5%) i/s -      5.681M in   5.001821s
          String#sub      1.354M (± 0.2%) i/s -      6.817M in   5.035256s
String#dup["string"]=
                          1.785M (± 0.6%) i/s -      8.959M in   5.019861s

Comparison:
String#dup["string"]=:  1784875.5 i/s
          String#sub:  1353769.6 i/s - 1.32x  (± 0.00) slower
         String#gsub:  1135731.8 i/s - 1.57x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   105.186k i/100ms
           String#tr   347.007k i/100ms
Calculating -------------------------------------
         String#gsub      1.056M (± 0.3%) i/s -      5.364M in   5.080212s
           String#tr      3.463M (± 0.5%) i/s -     17.350M in   5.010338s

Comparison:
           String#tr:  3463009.3 i/s
         String#gsub:  1055968.3 i/s - 3.28x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.169M i/100ms
         With Freeze     1.682M i/100ms
Calculating -------------------------------------
      Without Freeze     11.690M (± 1.6%) i/s -     58.454M in   5.001506s
         With Freeze     16.884M (± 0.5%) i/s -     85.799M in   5.081897s

Comparison:
         With Freeze: 16883661.6 i/s
      Without Freeze: 11690437.8 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.435k i/100ms
      String#squeeze   155.861k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     34.588k (± 0.5%) i/s -    175.185k in   5.065033s
      String#squeeze      1.571M (± 0.8%) i/s -      7.949M in   5.058943s

Comparison:
      String#squeeze:  1571362.3 i/s
 String#gsub/regex+/:    34588.2 i/s - 45.43x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   281.899k i/100ms
       String#match?   733.475k i/100ms
  String#start_with?   860.440k i/100ms
Calculating -------------------------------------
           String#=~      2.822M (± 0.6%) i/s -     14.377M in   5.095453s
       String#match?      7.345M (± 0.5%) i/s -     37.407M in   5.093326s
  String#start_with?      8.606M (± 0.7%) i/s -     43.882M in   5.099303s

Comparison:
  String#start_with?:  8605967.2 i/s
       String#match?:  7344550.4 i/s - 1.17x  (± 0.00) slower
           String#=~:  2821598.2 i/s - 3.05x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   197.314k i/100ms
    String#[0, n] ==    83.590k i/100ms
   String#[RANGE] ==    76.820k i/100ms
   String#[0...n] ==    48.771k i/100ms
Calculating -------------------------------------
  String#start_with?      1.861M (± 0.6%) i/s -      9.471M in   5.090478s
    String#[0, n] ==    831.368k (± 1.1%) i/s -      4.180M in   5.027811s
   String#[RANGE] ==    762.476k (± 0.8%) i/s -      3.841M in   5.037886s
   String#[0...n] ==    472.148k (± 1.0%) i/s -      2.390M in   5.062032s

Comparison:
  String#start_with?:  1860604.5 i/s
    String#[0, n] ==:   831368.2 i/s - 2.24x  (± 0.00) slower
   String#[RANGE] ==:   762475.6 i/s - 2.44x  (± 0.00) slower
   String#[0...n] ==:   472147.9 i/s - 3.94x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   180.592k i/100ms
 String#sub!'string'   124.629k i/100ms
String#gsub!'string'    78.379k i/100ms
  String#[/regexp/]=   152.739k i/100ms
 String#sub!/regexp/   113.384k i/100ms
String#gsub!/regexp/    60.264k i/100ms
Calculating -------------------------------------
  String#['string']=      1.822M (± 0.9%) i/s -      9.210M in   5.055237s
 String#sub!'string'      1.258M (± 0.7%) i/s -      6.356M in   5.054108s
String#gsub!'string'    785.228k (± 0.5%) i/s -      3.997M in   5.090815s
  String#[/regexp/]=      1.534M (± 0.5%) i/s -      7.790M in   5.079372s
 String#sub!/regexp/      1.154M (± 0.7%) i/s -      5.783M in   5.009981s
String#gsub!/regexp/    619.154k (± 0.6%) i/s -      3.134M in   5.061491s

Comparison:
  String#['string']=:  1822050.3 i/s
  String#[/regexp/]=:  1533627.3 i/s - 1.19x  (± 0.00) slower
 String#sub!'string':  1257669.2 i/s - 1.45x  (± 0.00) slower
 String#sub!/regexp/:  1154276.3 i/s - 1.58x  (± 0.00) slower
String#gsub!'string':   785227.5 i/s - 2.32x  (± 0.00) slower
String#gsub!/regexp/:   619154.5 i/s - 2.94x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          String#sub   142.934k i/100ms
        String#chomp   566.835k i/100ms
String#delete_suffix   614.156k i/100ms
Calculating -------------------------------------
          String#sub      1.425M (± 0.6%) i/s -      7.147M in   5.013885s
        String#chomp      5.643M (± 0.5%) i/s -     28.342M in   5.022992s
String#delete_suffix      6.158M (± 0.5%) i/s -     31.322M in   5.086631s

Comparison:
String#delete_suffix:  6157850.2 i/s
        String#chomp:  5642533.8 i/s - 1.09x  (± 0.00) slower
          String#sub:  1425437.2 i/s - 4.32x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   632.045k i/100ms
          String#sub   144.942k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.317M (± 0.6%) i/s -     31.602M in   5.003124s
          String#sub      1.458M (± 3.0%) i/s -      7.392M in   5.076075s

Comparison:
String#delete_prefix:  6316740.1 i/s
          String#sub:  1457827.8 i/s - 4.33x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   626.452k i/100ms
    String#unpack[0]   471.588k i/100ms
Calculating -------------------------------------
      String#unpack1      6.264M (± 0.5%) i/s -     31.323M in   5.000453s
    String#unpack[0]      4.737M (± 0.4%) i/s -     24.051M in   5.076953s

Comparison:
      String#unpack1:  6264103.2 i/s
    String#unpack[0]:  4737380.2 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    28.115k i/100ms
          Time.parse     9.542k i/100ms
Calculating -------------------------------------
        Time.iso8601    279.160k (± 1.1%) i/s -      1.406M in   5.036285s
          Time.parse     95.891k (± 0.6%) i/s -    486.642k in   5.075125s

Comparison:
        Time.iso8601:   279159.5 i/s
          Time.parse:    95890.9 i/s - 2.91x  (± 0.00) slower

