$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       762.101k i/100ms
Function with splat arguments
                        24.966k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.599M (± 0.8%) i/s -     38.105M in   5.014805s
Function with splat arguments
                        261.557k (± 8.9%) i/s -      1.298M in   5.018120s

Comparison:
Function with single Array argument:  7599071.3 i/s
Function with splat arguments:   261556.7 i/s - 29.05x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.017M i/100ms
Sequential Assignment
                       985.932k i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.177M (± 0.5%) i/s -     51.876M in   5.097342s
Sequential Assignment
                          9.908M (± 0.3%) i/s -     50.283M in   5.075058s

Comparison:
 Parallel Assignment: 10177321.7 i/s
Sequential Assignment:  9907839.8 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   482.689k i/100ms
       attr_accessor   553.737k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.852M (± 0.5%) i/s -     24.617M in   5.074045s
       attr_accessor      5.541M (± 2.7%) i/s -     27.687M in   5.001525s

Comparison:
       attr_accessor:  5540652.0 i/s
   getter_and_setter:  4851712.9 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    88.529k i/100ms
         respond_to?   786.842k i/100ms
Calculating -------------------------------------
      begin...rescue    895.023k (± 3.5%) i/s -      4.515M in   5.052049s
         respond_to?      7.863M (± 0.5%) i/s -     39.342M in   5.003580s

Comparison:
         respond_to?:  7862986.1 i/s
      begin...rescue:   895023.4 i/s - 8.79x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              normal   314.183k i/100ms
             &method   123.726k i/100ms
Calculating -------------------------------------
              normal      3.170M (± 2.0%) i/s -     16.023M in   5.057137s
             &method      1.243M (± 0.7%) i/s -      6.310M in   5.074687s

Comparison:
              normal:  3169956.7 i/s
             &method:  1243492.9 i/s - 2.55x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       246.000  i/100ms
       define_method   287.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.297k (±22.3%) i/s -     10.086k in   5.056040s
       define_method      3.205k (±20.6%) i/s -     14.350k in   5.003843s

Comparison:
       define_method:     3205.0 i/s
module_eval with string:     2296.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Float#round   261.876k i/100ms
       Kernel#format   199.871k i/100ms
            String#%   171.017k i/100ms
Calculating -------------------------------------
         Float#round      2.627M (± 0.4%) i/s -     13.356M in   5.084641s
       Kernel#format      1.993M (± 2.5%) i/s -      9.994M in   5.017720s
            String#%      1.702M (± 2.8%) i/s -      8.551M in   5.028991s

Comparison:
         Float#round:  2626723.4 i/s
       Kernel#format:  1993001.4 i/s - 1.32x  (± 0.00) slower
            String#%:  1701983.9 i/s - 1.54x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash   918.747k i/100ms
          OpenStruct   458.893k i/100ms
Calculating -------------------------------------
                Hash      9.207M (± 0.6%) i/s -     46.856M in   5.089313s
          OpenStruct      4.654M (± 1.0%) i/s -     23.404M in   5.029058s

Comparison:
                Hash:  9207083.4 i/s
          OpenStruct:  4654095.8 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.098M i/100ms
          OpenStruct    11.681k i/100ms
Calculating -------------------------------------
                Hash     11.665M (± 0.5%) i/s -     59.275M in   5.081720s
          OpenStruct    117.067k (± 2.8%) i/s -    595.731k in   5.092893s

Comparison:
                Hash: 11664597.0 i/s
          OpenStruct:   117066.9 i/s - 99.64x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   594.782k i/100ms
  ancestors.include?   119.208k i/100ms
Calculating -------------------------------------
  less than or equal      5.873M (± 1.1%) i/s -     29.739M in   5.064438s
  ancestors.include?      1.191M (± 0.6%) i/s -      5.960M in   5.005644s

Comparison:
  less than or equal:  5872871.3 i/s
  ancestors.include?:  1190784.7 i/s - 4.93x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.667  (± 0.0%) i/s -      4.000  in   6.015817s
         Kernel loop      0.225  (± 0.0%) i/s -      2.000  in   8.869840s

Comparison:
          While Loop:        0.7 i/s
         Kernel loop:        0.2 i/s - 2.96x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.563M i/100ms
         Array#first     1.281M i/100ms
Calculating -------------------------------------
           Array#[0]     15.646M (± 1.6%) i/s -     79.735M in   5.097650s
         Array#first     13.207M (± 2.1%) i/s -     66.601M in   5.045341s

Comparison:
           Array#[0]: 15645923.5 i/s
         Array#first: 13206958.5 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.552M i/100ms
          Array#last     1.331M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.566M (± 0.5%) i/s -     79.136M in   5.084075s
          Array#last     13.277M (± 0.5%) i/s -     66.525M in   5.010657s

Comparison:
          Array#[-1]: 15565806.9 i/s
          Array#last: 13277081.4 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    98.289k i/100ms
Calculating -------------------------------------
                find      0.287  (± 0.0%) i/s -      2.000  in   6.966870s
             bsearch    983.580k (± 1.1%) i/s -      5.013M in   5.097097s

Comparison:
             bsearch:   983579.7 i/s
                find:        0.3 i/s - 3426235.41x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    18.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    195.683  (± 2.6%) i/s -    990.000  in   5.062424s
        Array#insert      1.429  (± 0.0%) i/s -      8.000  in   5.601475s

Comparison:
       Array#unshift:      195.7 i/s
        Array#insert:        1.4 i/s - 136.98x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.091M i/100ms
          Array#size     2.104M i/100ms
         Array#count     1.635M i/100ms
Calculating -------------------------------------
        Array#length     20.824M (± 2.6%) i/s -    104.534M in   5.024221s
          Array#size     20.972M (± 1.9%) i/s -    105.175M in   5.016923s
         Array#count     16.416M (± 0.9%) i/s -     83.402M in   5.081064s

Comparison:
          Array#size: 20972493.3 i/s
        Array#length: 20823654.9 i/s - same-ish: difference falls within error
         Array#count: 16415733.0 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.992k i/100ms
        Array#sample     1.040M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    461.721k (± 0.7%) i/s -      2.346M in   5.080350s
        Array#sample     10.410M (± 0.4%) i/s -     53.049M in   5.095964s

Comparison:
        Array#sample: 10410173.8 i/s
 Array#shuffle.first:   461721.4 i/s - 22.55x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    65.391k i/100ms
          Date.parse    32.818k i/100ms
Calculating -------------------------------------
        Date.iso8601    651.022k (± 0.5%) i/s -      3.270M in   5.022316s
          Date.parse    326.597k (± 0.8%) i/s -      1.641M in   5.024574s

Comparison:
        Date.iso8601:   651021.6 i/s
          Date.parse:   326597.0 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.660k i/100ms
           Array#map    26.900k i/100ms
Calculating -------------------------------------
   Array#each + push    190.326k (± 0.7%) i/s -    951.660k in   5.000379s
           Array#map    268.254k (± 1.2%) i/s -      1.345M in   5.014710s

Comparison:
           Array#map:   268253.8 i/s
   Array#each + push:   190326.4 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            For loop    29.331k i/100ms
               #each    32.447k i/100ms
Calculating -------------------------------------
            For loop    291.327k (± 2.0%) i/s -      1.467M in   5.036214s
               #each    325.551k (± 0.8%) i/s -      1.655M in   5.083375s

Comparison:
               #each:   325550.7 i/s
            For loop:   291326.6 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.052k i/100ms
     each_with_index    19.176k i/100ms
Calculating -------------------------------------
          While Loop    273.553k (± 0.4%) i/s -      1.380M in   5.043530s
     each_with_index    192.275k (± 0.2%) i/s -    977.976k in   5.086348s

Comparison:
          While Loop:   273553.3 i/s
     each_with_index:   192275.5 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    93.038k i/100ms
      inject to_proc     2.211k i/100ms
        inject block     2.141k i/100ms
Calculating -------------------------------------
       inject symbol    937.589k (± 5.5%) i/s -      4.745M in   5.072148s
      inject to_proc     22.033k (± 1.6%) i/s -    110.550k in   5.018904s
        inject block     21.671k (± 0.4%) i/s -    109.191k in   5.038790s

Comparison:
       inject symbol:   937589.1 i/s
      inject to_proc:    22032.7 i/s - 42.55x  (± 0.00) slower
        inject block:    21670.5 i/s - 43.27x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     7.024k i/100ms
   Array#map.flatten     4.016k i/100ms
      Array#flat_map     9.240k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     69.461k (± 1.3%) i/s -    351.200k in   5.057039s
   Array#map.flatten     40.279k (± 0.7%) i/s -    204.816k in   5.085201s
      Array#flat_map     95.315k (± 0.4%) i/s -    480.480k in   5.041058s

Comparison:
      Array#flat_map:    95315.0 i/s
Array#map.flatten(1):    69460.8 i/s - 1.37x  (± 0.00) slower
   Array#map.flatten:    40279.1 i/s - 2.37x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    31.258k i/100ms
  Array#reverse_each    32.407k i/100ms
Calculating -------------------------------------
  Array#reverse.each    312.481k (± 0.6%) i/s -      1.563M in   5.001761s
  Array#reverse_each    324.571k (± 0.5%) i/s -      1.653M in   5.092281s

Comparison:
  Array#reverse_each:   324570.7 i/s
  Array#reverse.each:   312480.8 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.977k i/100ms
   Enumerable#detect    82.865k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        209.287k (± 0.7%) i/s -      4.195M in  20.047063s
   Enumerable#detect    825.443k (± 1.6%) i/s -     16.573M in  20.083658s

Comparison:
   Enumerable#detect:   825442.5 i/s
Enumerable#select.first:   209286.7 i/s - 3.94x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       243.793k i/100ms
Enumerable#select.last
                        19.010k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.415M (± 2.8%) i/s -     12.190M in   5.051267s
Enumerable#select.last
                        189.477k (± 0.7%) i/s -    950.500k in   5.016732s

Comparison:
Enumerable#reverse.detect:  2415223.7 i/s
Enumerable#select.last:   189476.9 i/s - 12.75x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.583k i/100ms
  Enumerable#sort_by     4.002k i/100ms
     Enumerable#sort     2.212k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         46.963k (± 2.5%) i/s -    238.316k in   5.078001s
  Enumerable#sort_by     42.666k (± 3.0%) i/s -    216.108k in   5.070312s
     Enumerable#sort     23.219k (± 0.8%) i/s -    117.236k in   5.049507s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    46962.5 i/s
  Enumerable#sort_by:    42665.6 i/s - 1.10x  (± 0.00) slower
     Enumerable#sort:    23218.8 i/s - 2.02x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.967k i/100ms
Enumerable#sort_by...first
                         8.813k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    177.669k (± 3.2%) i/s -    898.350k in   5.062213s
Enumerable#sort_by...first
                         88.246k (± 4.1%) i/s -    440.650k in   5.004379s

Comparison:
   Enumerable#min_by:   177668.6 i/s
Enumerable#sort_by...first:    88246.5 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   423.241k i/100ms
            Hash#dup   302.056k i/100ms
Calculating -------------------------------------
              Hash[]      3.700M (± 1.9%) i/s -     18.623M in   5.035220s
            Hash#dup      2.889M (± 0.7%) i/s -     14.499M in   5.018553s

Comparison:
              Hash[]:  3699888.1 i/s
            Hash#dup:  2889165.9 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.367M i/100ms
  Hash#fetch, symbol     1.183M i/100ms
     Hash#[], string     1.246M i/100ms
  Hash#fetch, string   789.697k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     13.898M (± 0.3%) i/s -     69.721M in   5.016707s
  Hash#fetch, symbol     11.893M (± 0.8%) i/s -     60.354M in   5.075148s
     Hash#[], string     12.434M (± 0.4%) i/s -     62.308M in   5.011285s
  Hash#fetch, string      7.899M (± 0.2%) i/s -     40.275M in   5.098830s

Comparison:
     Hash#[], symbol: 13897901.6 i/s
     Hash#[], string: 12433853.5 i/s - 1.12x  (± 0.00) slower
  Hash#fetch, symbol: 11892745.9 i/s - 1.17x  (± 0.00) slower
  Hash#fetch, string:  7898825.9 i/s - 1.76x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   862.956k i/100ms
             Hash#[]     1.016M i/100ms
          Hash#[] ||   928.851k i/100ms
          Hash#[] &&   368.594k i/100ms
          Hash#fetch   590.565k i/100ms
 Hash#fetch fallback   388.139k i/100ms
Calculating -------------------------------------
            Hash#dig      8.458M (± 0.6%) i/s -     43.148M in   5.101840s
             Hash#[]      9.790M (± 4.8%) i/s -     49.807M in   5.099742s
          Hash#[] ||      9.361M (± 0.7%) i/s -     47.371M in   5.060701s
          Hash#[] &&      3.989M (± 0.8%) i/s -     20.273M in   5.082548s
          Hash#fetch      6.001M (± 1.4%) i/s -     30.119M in   5.020279s
 Hash#fetch fallback      3.889M (± 2.7%) i/s -     19.795M in   5.094316s

Comparison:
             Hash#[]:  9789502.6 i/s
          Hash#[] ||:  9361115.9 i/s - same-ish: difference falls within error
            Hash#dig:  8457584.9 i/s - 1.16x  (± 0.00) slower
          Hash#fetch:  6000593.3 i/s - 1.63x  (± 0.00) slower
          Hash#[] &&:  3988964.4 i/s - 2.45x  (± 0.00) slower
 Hash#fetch fallback:  3889143.8 i/s - 2.52x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.454M i/100ms
  Hash#fetch + block     1.434M i/100ms
    Hash#fetch + arg     1.092M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.529M (± 0.5%) i/s -     72.685M in   5.002990s
  Hash#fetch + block     14.414M (± 0.5%) i/s -     73.153M in   5.075159s
    Hash#fetch + arg     10.956M (± 0.5%) i/s -     55.676M in   5.082172s

Comparison:
  Hash#fetch + const: 14528662.0 i/s
  Hash#fetch + block: 14414266.9 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 10955548.9 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.679k i/100ms
         sort + to_h    11.094k i/100ms
Calculating -------------------------------------
      sort_by + to_h    274.941k (± 0.3%) i/s -      1.384M in   5.033679s
         sort + to_h    110.236k (± 1.8%) i/s -    554.700k in   5.033684s

Comparison:
      sort_by + to_h:   274940.5 i/s
         sort + to_h:   110236.0 i/s - 2.49x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   194.706k i/100ms
       Hash#each_key   204.558k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.886M (± 0.4%) i/s -      9.541M in   5.059629s
       Hash#each_key      2.029M (± 2.1%) i/s -     10.228M in   5.044373s

Comparison:
       Hash#each_key:  2028637.7 i/s
      Hash#keys.each:  1885662.6 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.221k i/100ms
           Hash#key?   987.118k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     12.129k (± 3.5%) i/s -     61.050k in   5.040212s
           Hash#key?      9.840M (± 2.2%) i/s -     49.356M in   5.018554s

Comparison:
           Hash#key?:  9839933.4 i/s
  Hash#keys.include?:    12129.2 i/s - 811.26x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.025k i/100ms
            Hash#[]=    10.387k i/100ms
Calculating -------------------------------------
         Hash#merge!     40.458k (± 0.5%) i/s -    205.275k in   5.073920s
            Hash#[]=    101.762k (± 1.0%) i/s -    508.963k in   5.001995s

Comparison:
            Hash#[]=:   101761.6 i/s
         Hash#merge!:    40457.9 i/s - 2.52x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.847k i/100ms
      Hash#merge({})     3.934k i/100ms
 Hash#dup#merge!({})     2.916k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         47.394k (± 0.6%) i/s -    237.503k in   5.011487s
      Hash#merge({})     39.058k (± 0.6%) i/s -    196.700k in   5.036315s
 Hash#dup#merge!({})     28.939k (± 3.0%) i/s -    145.800k in   5.043988s

Comparison:
{}#merge!(Hash) do end:    47393.6 i/s
      Hash#merge({}):    39057.7 i/s - 1.21x  (± 0.00) slower
 Hash#dup#merge!({}):    28938.6 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   396.343k i/100ms
          Hash#merge   363.308k i/100ms
Calculating -------------------------------------
        Hash#**other      3.967M (± 0.7%) i/s -     20.213M in   5.095178s
          Hash#merge      3.623M (± 0.6%) i/s -     18.165M in   5.014070s

Comparison:
        Hash#**other:  3967401.2 i/s
          Hash#merge:  3623019.0 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.694k i/100ms
         Hash#merge!     3.969k i/100ms
Calculating -------------------------------------
          Hash#merge     16.627k (± 2.0%) i/s -     84.700k in   5.096237s
         Hash#merge!     39.001k (± 3.1%) i/s -    198.450k in   5.094144s

Comparison:
         Hash#merge!:    39001.4 i/s
          Hash#merge:    16626.6 i/s - 2.35x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      416.373k i/100ms
Array#each             231.931k i/100ms
Array#each_w/_object   175.077k i/100ms
Hash#select-include     71.571k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.248M (± 0.6%) i/s -     21.651M in   5.096832s
Array#each                2.279M (± 2.7%) i/s -     11.597M in   5.091607s
Array#each_w/_object      1.762M (± 0.9%) i/s -      8.929M in   5.068413s
Hash#select-include     715.814k (± 1.5%) i/s -      3.579M in   5.000450s

Comparison:
Hash#native-slice   :  4248144.8 i/s
Array#each          :  2279479.5 i/s - 1.86x  (± 0.00) slower
Array#each_w/_object:  1761820.4 i/s - 2.41x  (± 0.00) slower
Hash#select-include :   715813.6 i/s - 5.93x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.042k i/100ms
         Hash#value?   831.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     10.408k (± 3.9%) i/s -     52.100k in   5.014433s
         Hash#value?      8.158k (± 4.1%) i/s -     40.719k in   5.001766s

Comparison:
Hash#values.include?:    10407.8 i/s
         Hash#value?:     8158.0 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                call   671.514k i/100ms
                send   529.742k i/100ms
      method_missing   387.668k i/100ms
Calculating -------------------------------------
                call      6.722M (± 0.6%) i/s -     34.247M in   5.094730s
                send      5.242M (± 0.5%) i/s -     26.487M in   5.052820s
      method_missing      3.932M (± 0.6%) i/s -     19.771M in   5.027992s

Comparison:
                call:  6722311.3 i/s
                send:  5242203.8 i/s - 1.28x  (± 0.00) slower
      method_missing:  3932359.8 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
               Block     9.121k i/100ms
      Symbol#to_proc    10.300k i/100ms
Calculating -------------------------------------
               Block     91.008k (± 0.3%) i/s -    456.050k in   5.011125s
      Symbol#to_proc    102.290k (± 1.9%) i/s -    515.000k in   5.036743s

Comparison:
      Symbol#to_proc:   102289.8 i/s
               Block:    91008.4 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          block.call   937.520k i/100ms
       block + yield   994.289k i/100ms
        unused block     1.275M i/100ms
               yield     1.173M i/100ms
Calculating -------------------------------------
          block.call      9.320M (± 2.5%) i/s -     46.876M in   5.032980s
       block + yield      9.948M (± 0.3%) i/s -     50.709M in   5.097475s
        unused block     12.766M (± 0.3%) i/s -     65.012M in   5.092532s
               yield     11.867M (± 0.3%) i/s -     59.818M in   5.040897s

Comparison:
        unused block: 12766254.1 i/s
               yield: 11866604.9 i/s - 1.08x  (± 0.00) slower
       block + yield:  9947905.1 i/s - 1.28x  (± 0.00) slower
          block.call:  9320161.4 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   328.317k i/100ms
      range#include?    12.597k i/100ms
       range#member?    12.490k i/100ms
       plain compare   507.037k i/100ms
Calculating -------------------------------------
        range#cover?      3.239M (± 0.5%) i/s -     16.416M in   5.067865s
      range#include?    124.001k (± 1.1%) i/s -    629.850k in   5.080017s
       range#member?    124.358k (± 0.9%) i/s -    624.500k in   5.022211s
       plain compare      5.084M (± 0.2%) i/s -     25.859M in   5.086387s

Comparison:
       plain compare:  5083969.5 i/s
        range#cover?:  3239289.3 i/s - 1.57x  (± 0.00) slower
       range#member?:   124358.3 i/s - 40.88x  (± 0.00) slower
      range#include?:   124000.8 i/s - 41.00x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       String#match?   917.056k i/100ms
           String#=~   642.735k i/100ms
          Regexp#===   569.797k i/100ms
        String#match   472.548k i/100ms
Calculating -------------------------------------
       String#match?      9.141M (± 0.4%) i/s -     45.853M in   5.016438s
           String#=~      6.362M (± 0.6%) i/s -     32.137M in   5.051938s
          Regexp#===      5.676M (± 0.4%) i/s -     28.490M in   5.019422s
        String#match      4.692M (± 0.2%) i/s -     23.627M in   5.035620s

Comparison:
       String#match?:  9140663.1 i/s
           String#=~:  6361516.6 i/s - 1.44x  (± 0.00) slower
          Regexp#===:  5676010.6 i/s - 1.61x  (± 0.00) slower
        String#match:  4692071.5 i/s - 1.95x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   649.941k i/100ms
      String#casecmp   795.317k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.455M (± 2.8%) i/s -     32.497M in   5.038993s
      String#casecmp      7.941M (± 1.3%) i/s -     39.766M in   5.008809s

Comparison:
      String#casecmp:  7940732.8 i/s
String#downcase + ==:  6454949.2 i/s - 1.23x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            String#+   585.194k i/100ms
       String#concat   620.399k i/100ms
       String#append   669.779k i/100ms
         "foo" "bar"     1.175M i/100ms
  "#{'foo'}#{'bar'}"     1.177M i/100ms
Calculating -------------------------------------
            String#+      5.893M (± 0.5%) i/s -     29.845M in   5.064299s
       String#concat      6.211M (± 0.4%) i/s -     31.640M in   5.094157s
       String#append      6.708M (± 0.5%) i/s -     34.159M in   5.092548s
         "foo" "bar"     11.740M (± 0.5%) i/s -     58.749M in   5.004392s
  "#{'foo'}#{'bar'}"     11.684M (± 2.4%) i/s -     58.863M in   5.041315s

Comparison:
         "foo" "bar": 11739891.9 i/s
  "#{'foo'}#{'bar'}": 11683681.2 i/s - same-ish: difference falls within error
       String#append:  6707751.2 i/s - 1.75x  (± 0.00) slower
       String#concat:  6211210.5 i/s - 1.89x  (± 0.00) slower
            String#+:  5893349.0 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#+@   952.141k i/100ms
          String#dup   587.471k i/100ms
Calculating -------------------------------------
           String#+@      9.645M (± 0.5%) i/s -     48.559M in   5.034927s
          String#dup      5.844M (± 0.5%) i/s -     29.374M in   5.026799s

Comparison:
           String#+@:  9644688.9 i/s
          String#dup:  5843554.1 i/s - 1.65x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   187.872k i/100ms
       String#match?   424.119k i/100ms
    String#end_with?   607.721k i/100ms
Calculating -------------------------------------
           String#=~      1.873M (± 0.7%) i/s -      9.394M in   5.015940s
       String#match?      4.281M (± 2.8%) i/s -     21.630M in   5.057559s
    String#end_with?      6.109M (± 0.6%) i/s -     30.994M in   5.073243s

Comparison:
    String#end_with?:  6109451.8 i/s
       String#match?:  4280920.8 i/s - 1.43x  (± 0.00) slower
           String#=~:  1872849.8 i/s - 3.26x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   113.033k i/100ms
          String#sub   141.499k i/100ms
String#dup["string"]=
                       181.303k i/100ms
Calculating -------------------------------------
         String#gsub      1.134M (± 0.3%) i/s -      5.765M in   5.085357s
          String#sub      1.347M (± 1.2%) i/s -      6.792M in   5.043530s
String#dup["string"]=
                          1.778M (± 0.6%) i/s -      9.065M in   5.098855s

Comparison:
String#dup["string"]=:  1777947.8 i/s
          String#sub:  1346864.8 i/s - 1.32x  (± 0.00) slower
         String#gsub:  1133597.6 i/s - 1.57x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   104.494k i/100ms
           String#tr   333.691k i/100ms
Calculating -------------------------------------
         String#gsub      1.044M (± 1.2%) i/s -      5.225M in   5.005174s
           String#tr      3.398M (± 0.5%) i/s -     17.018M in   5.008939s

Comparison:
           String#tr:  3397656.8 i/s
         String#gsub:  1044015.1 i/s - 3.25x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.158M i/100ms
         With Freeze     1.692M i/100ms
Calculating -------------------------------------
      Without Freeze     11.624M (± 0.7%) i/s -     59.075M in   5.082321s
         With Freeze     16.928M (± 0.3%) i/s -     86.280M in   5.097060s

Comparison:
         With Freeze: 16927595.1 i/s
      Without Freeze: 11624065.7 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.436k i/100ms
      String#squeeze   157.829k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     34.456k (± 0.5%) i/s -    175.236k in   5.085968s
      String#squeeze      1.567M (± 0.4%) i/s -      7.891M in   5.034851s

Comparison:
      String#squeeze:  1567389.4 i/s
 String#gsub/regex+/:    34455.7 i/s - 45.49x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   284.943k i/100ms
       String#match?   756.081k i/100ms
  String#start_with?   871.761k i/100ms
Calculating -------------------------------------
           String#=~      2.837M (± 0.9%) i/s -     14.247M in   5.022290s
       String#match?      7.561M (± 1.1%) i/s -     37.804M in   5.000725s
  String#start_with?      8.787M (± 2.6%) i/s -     44.460M in   5.063812s

Comparison:
  String#start_with?:  8786895.3 i/s
       String#match?:  7560624.3 i/s - 1.16x  (± 0.00) slower
           String#=~:  2837029.5 i/s - 3.10x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   203.489k i/100ms
    String#[0, n] ==    83.900k i/100ms
   String#[RANGE] ==    75.953k i/100ms
   String#[0...n] ==    47.579k i/100ms
Calculating -------------------------------------
  String#start_with?      1.895M (± 0.4%) i/s -      9.564M in   5.046570s
    String#[0, n] ==    819.580k (± 0.7%) i/s -      4.111M in   5.016327s
   String#[RANGE] ==    755.204k (± 0.5%) i/s -      3.798M in   5.028787s
   String#[0...n] ==    474.629k (± 1.0%) i/s -      2.379M in   5.012735s

Comparison:
  String#start_with?:  1895177.0 i/s
    String#[0, n] ==:   819579.5 i/s - 2.31x  (± 0.00) slower
   String#[RANGE] ==:   755203.5 i/s - 2.51x  (± 0.00) slower
   String#[0...n] ==:   474629.0 i/s - 3.99x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   182.234k i/100ms
 String#sub!'string'   126.657k i/100ms
String#gsub!'string'    78.644k i/100ms
  String#[/regexp/]=   154.593k i/100ms
 String#sub!/regexp/   115.175k i/100ms
String#gsub!/regexp/    59.723k i/100ms
Calculating -------------------------------------
  String#['string']=      1.860M (± 0.5%) i/s -      9.476M in   5.095906s
 String#sub!'string'      1.299M (± 0.7%) i/s -      6.586M in   5.072302s
String#gsub!'string'    788.839k (± 0.4%) i/s -      4.011M in   5.084550s
  String#[/regexp/]=      1.582M (± 1.7%) i/s -      8.039M in   5.081683s
 String#sub!/regexp/      1.145M (± 1.0%) i/s -      5.759M in   5.030916s
String#gsub!/regexp/    603.061k (± 1.7%) i/s -      3.046M in   5.052225s

Comparison:
  String#['string']=:  1859610.7 i/s
  String#[/regexp/]=:  1582445.7 i/s - 1.18x  (± 0.00) slower
 String#sub!'string':  1298521.1 i/s - 1.43x  (± 0.00) slower
 String#sub!/regexp/:  1144791.2 i/s - 1.62x  (± 0.00) slower
String#gsub!'string':   788839.4 i/s - 2.36x  (± 0.00) slower
String#gsub!/regexp/:   603061.2 i/s - 3.08x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          String#sub   147.843k i/100ms
        String#chomp   559.578k i/100ms
String#delete_suffix   598.090k i/100ms
Calculating -------------------------------------
          String#sub      1.476M (± 0.8%) i/s -      7.392M in   5.008772s
        String#chomp      5.601M (± 0.5%) i/s -     28.538M in   5.095156s
String#delete_suffix      6.018M (± 0.5%) i/s -     30.503M in   5.068749s

Comparison:
String#delete_suffix:  6017942.1 i/s
        String#chomp:  5601270.7 i/s - 1.07x  (± 0.00) slower
          String#sub:  1475942.4 i/s - 4.08x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   635.247k i/100ms
          String#sub   153.679k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.348M (± 0.6%) i/s -     31.762M in   5.003694s
          String#sub      1.534M (± 0.7%) i/s -      7.684M in   5.008828s

Comparison:
String#delete_prefix:  6348010.7 i/s
          String#sub:  1534154.7 i/s - 4.14x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   611.148k i/100ms
    String#unpack[0]   469.195k i/100ms
Calculating -------------------------------------
      String#unpack1      6.123M (± 0.5%) i/s -     31.169M in   5.090366s
    String#unpack[0]      4.734M (± 0.7%) i/s -     23.929M in   5.055153s

Comparison:
      String#unpack1:  6123174.0 i/s
    String#unpack[0]:  4733808.6 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    28.274k i/100ms
          Time.parse     9.480k i/100ms
Calculating -------------------------------------
        Time.iso8601    280.287k (± 3.4%) i/s -      1.414M in   5.051409s
          Time.parse     94.259k (± 2.5%) i/s -    474.000k in   5.032081s

Comparison:
        Time.iso8601:   280286.5 i/s
          Time.parse:    94258.7 i/s - 2.97x  (± 0.00) slower

