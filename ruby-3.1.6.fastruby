$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       776.122k i/100ms
Function with splat arguments
                        28.630k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.746M (± 0.7%) i/s -     38.806M in   5.010133s
Function with splat arguments
                        281.639k (± 5.2%) i/s -      1.432M in   5.103587s

Comparison:
Function with single Array argument:  7745897.5 i/s
Function with splat arguments:   281639.4 i/s - 27.50x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.020M i/100ms
Sequential Assignment
                         1.016M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.258M (± 1.4%) i/s -     52.015M in   5.071619s
Sequential Assignment
                         10.193M (± 1.0%) i/s -     51.797M in   5.082240s

Comparison:
 Parallel Assignment: 10258160.6 i/s
Sequential Assignment: 10192898.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   471.563k i/100ms
       attr_accessor   557.500k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.737M (± 0.6%) i/s -     24.050M in   5.077623s
       attr_accessor      5.530M (± 0.7%) i/s -     27.875M in   5.040593s

Comparison:
       attr_accessor:  5530349.0 i/s
   getter_and_setter:  4736559.7 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    88.673k i/100ms
         respond_to?   778.634k i/100ms
Calculating -------------------------------------
      begin...rescue    887.687k (± 0.7%) i/s -      4.522M in   5.094758s
         respond_to?      7.788M (± 0.3%) i/s -     39.710M in   5.099219s

Comparison:
         respond_to?:  7787609.6 i/s
      begin...rescue:   887687.1 i/s - 8.77x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              normal   295.384k i/100ms
             &method   119.274k i/100ms
Calculating -------------------------------------
              normal      2.960M (± 0.9%) i/s -     15.065M in   5.089242s
             &method      1.234M (± 0.7%) i/s -      6.202M in   5.026925s

Comparison:
              normal:  2960311.8 i/s
             &method:  1233858.3 i/s - 2.40x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       268.000  i/100ms
       define_method   298.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.406k (±20.4%) i/s -     10.720k in   5.061095s
       define_method      3.268k (±18.8%) i/s -     14.900k in   5.032351s

Comparison:
       define_method:     3268.2 i/s
module_eval with string:     2405.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Float#round   265.614k i/100ms
       Kernel#format   203.816k i/100ms
            String#%   173.301k i/100ms
Calculating -------------------------------------
         Float#round      2.659M (± 1.2%) i/s -     13.546M in   5.094917s
       Kernel#format      2.039M (± 1.3%) i/s -     10.395M in   5.098283s
            String#%      1.742M (± 1.2%) i/s -      8.838M in   5.073049s

Comparison:
         Float#round:  2659162.3 i/s
       Kernel#format:  2039184.2 i/s - 1.30x  (± 0.00) slower
            String#%:  1742484.7 i/s - 1.53x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash   918.345k i/100ms
          OpenStruct   509.051k i/100ms
Calculating -------------------------------------
                Hash      9.153M (± 1.5%) i/s -     45.917M in   5.017474s
          OpenStruct      5.057M (± 1.5%) i/s -     25.453M in   5.034065s

Comparison:
                Hash:  9153434.4 i/s
          OpenStruct:  5057273.7 i/s - 1.81x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.117M i/100ms
          OpenStruct    10.128k i/100ms
Calculating -------------------------------------
                Hash     11.187M (± 1.3%) i/s -     56.978M in   5.094002s
          OpenStruct    100.460k (± 2.3%) i/s -    506.400k in   5.043543s

Comparison:
                Hash: 11186981.8 i/s
          OpenStruct:   100460.4 i/s - 111.36x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   595.264k i/100ms
  ancestors.include?   120.944k i/100ms
Calculating -------------------------------------
  less than or equal      5.912M (± 1.9%) i/s -     29.763M in   5.036330s
  ancestors.include?      1.203M (± 1.3%) i/s -      6.047M in   5.027865s

Comparison:
  less than or equal:  5911818.2 i/s
  ancestors.include?:  1202933.7 i/s - 4.91x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.753  (± 0.0%) i/s -      4.000  in   5.308720s
         Kernel loop      0.225  (± 0.0%) i/s -      2.000  in   8.896454s

Comparison:
          While Loop:        0.8 i/s
         Kernel loop:        0.2 i/s - 3.35x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.573M i/100ms
         Array#first     1.328M i/100ms
Calculating -------------------------------------
           Array#[0]     15.732M (± 0.4%) i/s -     80.214M in   5.098814s
         Array#first     13.267M (± 1.1%) i/s -     66.392M in   5.004755s

Comparison:
           Array#[0]: 15732178.9 i/s
         Array#first: 13267266.8 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.567M i/100ms
          Array#last     1.344M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.646M (± 1.3%) i/s -     78.339M in   5.007763s
          Array#last     13.394M (± 0.9%) i/s -     67.202M in   5.017879s

Comparison:
          Array#[-1]: 15646050.0 i/s
          Array#last: 13393540.4 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   100.031k i/100ms
Calculating -------------------------------------
                find      0.270  (± 0.0%) i/s -      2.000  in   7.399193s
             bsearch      1.004M (± 1.1%) i/s -      5.102M in   5.082098s

Comparison:
             bsearch:  1003959.8 i/s
                find:        0.3 i/s - 3714235.83x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    19.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    199.440  (± 2.5%) i/s -      1.007k in   5.053000s
        Array#insert      1.458  (± 0.0%) i/s -      8.000  in   5.488785s

Comparison:
       Array#unshift:      199.4 i/s
        Array#insert:        1.5 i/s - 136.82x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.091M i/100ms
          Array#size     2.138M i/100ms
         Array#count     1.665M i/100ms
Calculating -------------------------------------
        Array#length     21.062M (± 1.3%) i/s -    106.648M in   5.064363s
          Array#size     21.219M (± 1.3%) i/s -    106.884M in   5.037902s
         Array#count     16.438M (± 1.6%) i/s -     83.230M in   5.064562s

Comparison:
          Array#size: 21219361.5 i/s
        Array#length: 21062029.0 i/s - same-ish: difference falls within error
         Array#count: 16437915.5 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    46.441k i/100ms
        Array#sample     1.060M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    469.106k (± 1.3%) i/s -      2.368M in   5.049778s
        Array#sample     10.480M (± 0.8%) i/s -     53.025M in   5.060041s

Comparison:
        Array#sample: 10479731.1 i/s
 Array#shuffle.first:   469105.8 i/s - 22.34x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    66.121k i/100ms
          Date.parse    32.698k i/100ms
Calculating -------------------------------------
        Date.iso8601    654.187k (± 0.8%) i/s -      3.306M in   5.054003s
          Date.parse    329.722k (± 1.3%) i/s -      1.668M in   5.058407s

Comparison:
        Date.iso8601:   654186.6 i/s
          Date.parse:   329721.7 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    19.094k i/100ms
           Array#map    27.075k i/100ms
Calculating -------------------------------------
   Array#each + push    192.014k (± 1.6%) i/s -    973.794k in   5.072740s
           Array#map    271.347k (± 1.3%) i/s -      1.381M in   5.089687s

Comparison:
           Array#map:   271346.6 i/s
   Array#each + push:   192014.2 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            For loop    25.595k i/100ms
               #each    28.681k i/100ms
Calculating -------------------------------------
            For loop    257.607k (± 1.4%) i/s -      1.305M in   5.068149s
               #each    288.263k (± 1.9%) i/s -      1.463M in   5.076109s

Comparison:
               #each:   288262.6 i/s
            For loop:   257606.9 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop    28.276k i/100ms
     each_with_index    19.172k i/100ms
Calculating -------------------------------------
          While Loop    275.833k (± 1.2%) i/s -      1.386M in   5.023792s
     each_with_index    194.180k (± 1.2%) i/s -    977.772k in   5.036063s

Comparison:
          While Loop:   275832.8 i/s
     each_with_index:   194179.6 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    94.642k i/100ms
      inject to_proc     2.233k i/100ms
        inject block     2.146k i/100ms
Calculating -------------------------------------
       inject symbol      1.002M (±12.6%) i/s -      5.016M in   5.068823s
      inject to_proc     22.458k (± 1.5%) i/s -    113.883k in   5.072069s
        inject block     21.678k (± 1.4%) i/s -    109.446k in   5.049743s

Comparison:
       inject symbol:  1002443.4 i/s
      inject to_proc:    22458.2 i/s - 44.64x  (± 0.00) slower
        inject block:    21678.0 i/s - 46.24x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.992k i/100ms
   Array#map.flatten     4.099k i/100ms
      Array#flat_map     9.738k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     69.865k (± 1.0%) i/s -    349.600k in   5.004393s
   Array#map.flatten     39.706k (± 1.2%) i/s -    200.851k in   5.059240s
      Array#flat_map     97.068k (± 0.8%) i/s -    486.900k in   5.016389s

Comparison:
      Array#flat_map:    97067.9 i/s
Array#map.flatten(1):    69865.3 i/s - 1.39x  (± 0.00) slower
   Array#map.flatten:    39706.0 i/s - 2.44x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    31.941k i/100ms
  Array#reverse_each    32.623k i/100ms
Calculating -------------------------------------
  Array#reverse.each    320.402k (± 1.3%) i/s -      1.629M in   5.085056s
  Array#reverse_each    327.002k (± 1.5%) i/s -      1.664M in   5.089124s

Comparison:
  Array#reverse_each:   327001.8 i/s
  Array#reverse.each:   320402.0 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        21.115k i/100ms
   Enumerable#detect    83.186k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        210.524k (± 1.3%) i/s -      4.223M in  20.063089s
   Enumerable#detect    843.026k (± 1.6%) i/s -     16.887M in  20.036317s

Comparison:
   Enumerable#detect:   843025.6 i/s
Enumerable#select.first:   210524.3 i/s - 4.00x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       245.792k i/100ms
Enumerable#select.last
                        19.221k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.442M (± 1.3%) i/s -     12.290M in   5.032792s
Enumerable#select.last
                        190.127k (± 1.4%) i/s -    961.050k in   5.055801s

Comparison:
Enumerable#reverse.detect:  2442305.0 i/s
Enumerable#select.last:   190127.4 i/s - 12.85x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         5.092k i/100ms
  Enumerable#sort_by     5.066k i/100ms
     Enumerable#sort     2.455k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         52.528k (± 2.0%) i/s -    264.784k in   5.042714s
  Enumerable#sort_by     49.716k (± 1.8%) i/s -    253.300k in   5.096582s
     Enumerable#sort     24.809k (± 1.4%) i/s -    125.205k in   5.047759s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    52528.5 i/s
  Enumerable#sort_by:    49715.7 i/s - 1.06x  (± 0.00) slower
     Enumerable#sort:    24808.9 i/s - 2.12x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.856k i/100ms
Enumerable#sort_by...first
                         9.184k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    177.974k (± 1.5%) i/s -    892.800k in   5.017625s
Enumerable#sort_by...first
                         90.681k (± 1.5%) i/s -    459.200k in   5.065047s

Comparison:
   Enumerable#min_by:   177973.7 i/s
Enumerable#sort_by...first:    90680.6 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   396.287k i/100ms
            Hash#dup   294.619k i/100ms
Calculating -------------------------------------
              Hash[]      3.672M (± 3.3%) i/s -     18.625M in   5.077858s
            Hash#dup      2.843M (± 1.0%) i/s -     14.436M in   5.078010s

Comparison:
              Hash[]:  3671745.7 i/s
            Hash#dup:  2843208.1 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.458M i/100ms
  Hash#fetch, symbol     1.199M i/100ms
     Hash#[], string     1.253M i/100ms
  Hash#fetch, string   811.262k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.555M (± 1.6%) i/s -     72.892M in   5.009204s
  Hash#fetch, symbol     11.769M (± 0.9%) i/s -     59.966M in   5.095878s
     Hash#[], string     12.590M (± 1.6%) i/s -     63.881M in   5.075046s
  Hash#fetch, string      8.121M (± 1.4%) i/s -     41.374M in   5.095578s

Comparison:
     Hash#[], symbol: 14555208.7 i/s
     Hash#[], string: 12590338.5 i/s - 1.16x  (± 0.00) slower
  Hash#fetch, symbol: 11768512.2 i/s - 1.24x  (± 0.00) slower
  Hash#fetch, string:  8121137.6 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   896.975k i/100ms
             Hash#[]     1.037M i/100ms
          Hash#[] ||   906.324k i/100ms
          Hash#[] &&   397.986k i/100ms
          Hash#fetch   621.971k i/100ms
 Hash#fetch fallback   397.801k i/100ms
Calculating -------------------------------------
            Hash#dig      8.865M (± 1.1%) i/s -     44.849M in   5.059428s
             Hash#[]     10.555M (± 3.5%) i/s -     52.896M in   5.018074s
          Hash#[] ||      9.515M (± 2.8%) i/s -     48.035M in   5.052516s
          Hash#[] &&      4.156M (± 2.5%) i/s -     21.093M in   5.078910s
          Hash#fetch      6.243M (± 1.9%) i/s -     31.721M in   5.082352s
 Hash#fetch fallback      3.953M (± 1.2%) i/s -     19.890M in   5.032805s

Comparison:
             Hash#[]: 10554603.2 i/s
          Hash#[] ||:  9514932.3 i/s - 1.11x  (± 0.00) slower
            Hash#dig:  8865432.8 i/s - 1.19x  (± 0.00) slower
          Hash#fetch:  6243426.3 i/s - 1.69x  (± 0.00) slower
          Hash#[] &&:  4155759.6 i/s - 2.54x  (± 0.00) slower
 Hash#fetch fallback:  3952636.9 i/s - 2.67x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.446M i/100ms
  Hash#fetch + block     1.477M i/100ms
    Hash#fetch + arg     1.103M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.369M (± 1.5%) i/s -     72.291M in   5.032065s
  Hash#fetch + block     14.776M (± 1.2%) i/s -     75.326M in   5.098710s
    Hash#fetch + arg     11.026M (± 1.3%) i/s -     55.149M in   5.002591s

Comparison:
  Hash#fetch + block: 14775904.6 i/s
  Hash#fetch + const: 14369184.1 i/s - 1.03x  (± 0.00) slower
    Hash#fetch + arg: 11025904.9 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.992k i/100ms
         sort + to_h    11.013k i/100ms
Calculating -------------------------------------
      sort_by + to_h    278.145k (± 1.4%) i/s -      1.400M in   5.032804s
         sort + to_h    110.808k (± 1.8%) i/s -    561.663k in   5.070464s

Comparison:
      sort_by + to_h:   278145.4 i/s
         sort + to_h:   110808.3 i/s - 2.51x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   166.493k i/100ms
       Hash#each_key   189.173k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.672M (± 1.1%) i/s -      8.491M in   5.080225s
       Hash#each_key      1.966M (± 1.2%) i/s -      9.837M in   5.004257s

Comparison:
       Hash#each_key:  1966002.3 i/s
      Hash#keys.each:  1671594.6 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     2.673k i/100ms
           Hash#key?   959.492k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     27.307k (± 5.4%) i/s -    136.323k in   5.014264s
           Hash#key?      9.542M (± 1.3%) i/s -     47.975M in   5.028760s

Comparison:
           Hash#key?:  9541540.1 i/s
  Hash#keys.include?:    27306.7 i/s - 349.42x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.013k i/100ms
            Hash#[]=    10.772k i/100ms
Calculating -------------------------------------
         Hash#merge!     39.935k (± 1.2%) i/s -    200.650k in   5.025139s
            Hash#[]=    106.727k (± 1.1%) i/s -    538.600k in   5.047169s

Comparison:
            Hash#[]=:   106726.6 i/s
         Hash#merge!:    39935.1 i/s - 2.67x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.864k i/100ms
      Hash#merge({})     4.051k i/100ms
 Hash#dup#merge!({})     2.962k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         47.863k (± 1.3%) i/s -    243.200k in   5.082075s
      Hash#merge({})     40.151k (± 1.2%) i/s -    202.550k in   5.045359s
 Hash#dup#merge!({})     29.519k (± 1.6%) i/s -    148.100k in   5.018434s

Comparison:
{}#merge!(Hash) do end:    47862.6 i/s
      Hash#merge({}):    40151.4 i/s - 1.19x  (± 0.00) slower
 Hash#dup#merge!({}):    29519.0 i/s - 1.62x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   399.278k i/100ms
          Hash#merge   368.251k i/100ms
Calculating -------------------------------------
        Hash#**other      3.947M (± 1.1%) i/s -     19.964M in   5.058344s
          Hash#merge      3.714M (± 1.3%) i/s -     18.781M in   5.057861s

Comparison:
        Hash#**other:  3947202.2 i/s
          Hash#merge:  3713787.1 i/s - 1.06x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.673k i/100ms
         Hash#merge!     3.953k i/100ms
Calculating -------------------------------------
          Hash#merge     16.824k (± 1.2%) i/s -     85.323k in   5.072263s
         Hash#merge!     39.990k (± 1.3%) i/s -    201.603k in   5.042068s

Comparison:
         Hash#merge!:    39990.3 i/s
          Hash#merge:    16824.0 i/s - 2.38x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      416.106k i/100ms
Array#each             232.666k i/100ms
Array#each_w/_object   176.729k i/100ms
Hash#select-include     71.924k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.157M (± 1.4%) i/s -     20.805M in   5.006042s
Array#each                2.306M (± 1.7%) i/s -     11.633M in   5.047339s
Array#each_w/_object      1.754M (± 0.8%) i/s -      8.836M in   5.038626s
Hash#select-include     717.169k (± 1.4%) i/s -      3.596M in   5.015384s

Comparison:
Hash#native-slice   :  4156804.6 i/s
Array#each          :  2305512.4 i/s - 1.80x  (± 0.00) slower
Array#each_w/_object:  1753852.9 i/s - 2.37x  (± 0.00) slower
Hash#select-include :   717168.6 i/s - 5.80x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.140k i/100ms
         Hash#value?   868.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     11.187k (± 4.5%) i/s -     55.860k in   5.004225s
         Hash#value?      8.734k (± 1.0%) i/s -     44.268k in   5.069168s

Comparison:
Hash#values.include?:    11186.6 i/s
         Hash#value?:     8733.7 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                call   672.505k i/100ms
                send   532.960k i/100ms
      method_missing   393.576k i/100ms
Calculating -------------------------------------
                call      6.768M (± 1.3%) i/s -     34.298M in   5.068332s
                send      5.277M (± 1.4%) i/s -     26.648M in   5.051034s
      method_missing      3.936M (± 1.5%) i/s -     19.679M in   5.001036s

Comparison:
                call:  6768143.9 i/s
                send:  5276764.6 i/s - 1.28x  (± 0.00) slower
      method_missing:  3935805.8 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
               Block     8.954k i/100ms
      Symbol#to_proc     9.949k i/100ms
Calculating -------------------------------------
               Block     89.983k (± 1.4%) i/s -    456.654k in   5.075859s
      Symbol#to_proc    100.165k (± 1.7%) i/s -    507.399k in   5.067034s

Comparison:
      Symbol#to_proc:   100165.4 i/s
               Block:    89983.1 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          block.call   951.720k i/100ms
       block + yield   974.660k i/100ms
        unused block     1.317M i/100ms
               yield     1.189M i/100ms
Calculating -------------------------------------
          block.call      9.493M (± 0.8%) i/s -     47.586M in   5.013066s
       block + yield      9.651M (± 2.7%) i/s -     48.733M in   5.053333s
        unused block     13.240M (± 1.4%) i/s -     67.149M in   5.072743s
               yield     11.900M (± 1.1%) i/s -     60.662M in   5.098196s

Comparison:
        unused block: 13239809.6 i/s
               yield: 11900258.1 i/s - 1.11x  (± 0.00) slower
       block + yield:  9651426.5 i/s - 1.37x  (± 0.00) slower
          block.call:  9493038.7 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   332.840k i/100ms
      range#include?    12.613k i/100ms
       range#member?    12.586k i/100ms
       plain compare   534.123k i/100ms
Calculating -------------------------------------
        range#cover?      3.302M (± 1.6%) i/s -     16.642M in   5.040977s
      range#include?    128.430k (± 1.3%) i/s -    643.263k in   5.009481s
       range#member?    128.135k (± 1.4%) i/s -    641.886k in   5.010458s
       plain compare      5.353M (± 1.8%) i/s -     27.240M in   5.090643s

Comparison:
       plain compare:  5352750.0 i/s
        range#cover?:  3302144.7 i/s - 1.62x  (± 0.00) slower
      range#include?:   128430.4 i/s - 41.68x  (± 0.00) slower
       range#member?:   128134.9 i/s - 41.77x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       String#match?   920.431k i/100ms
           String#=~   650.053k i/100ms
          Regexp#===   579.038k i/100ms
        String#match   474.703k i/100ms
Calculating -------------------------------------
       String#match?      9.154M (± 1.0%) i/s -     46.022M in   5.027821s
           String#=~      6.589M (± 1.5%) i/s -     33.153M in   5.032685s
          Regexp#===      5.794M (± 1.8%) i/s -     29.531M in   5.098724s
        String#match      4.810M (± 1.4%) i/s -     24.210M in   5.033713s

Comparison:
       String#match?:  9154254.2 i/s
           String#=~:  6588876.6 i/s - 1.39x  (± 0.00) slower
          Regexp#===:  5793614.6 i/s - 1.58x  (± 0.00) slower
        String#match:  4810434.6 i/s - 1.90x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   663.759k i/100ms
      String#casecmp   825.575k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.608M (± 1.2%) i/s -     33.188M in   5.022962s
      String#casecmp      8.187M (± 1.0%) i/s -     41.279M in   5.042550s

Comparison:
      String#casecmp:  8186895.1 i/s
String#downcase + ==:  6608174.9 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            String#+   597.419k i/100ms
       String#concat   629.814k i/100ms
       String#append   682.909k i/100ms
         "foo" "bar"     1.188M i/100ms
  "#{'foo'}#{'bar'}"     1.188M i/100ms
Calculating -------------------------------------
            String#+      5.950M (± 1.2%) i/s -     29.871M in   5.020768s
       String#concat      6.266M (± 2.0%) i/s -     31.491M in   5.027857s
       String#append      6.794M (± 1.4%) i/s -     34.145M in   5.026614s
         "foo" "bar"     11.878M (± 1.3%) i/s -     59.398M in   5.001404s
  "#{'foo'}#{'bar'}"     11.931M (± 1.5%) i/s -     60.588M in   5.079302s

Comparison:
  "#{'foo'}#{'bar'}": 11931147.8 i/s
         "foo" "bar": 11878181.6 i/s - same-ish: difference falls within error
       String#append:  6794225.4 i/s - 1.76x  (± 0.00) slower
       String#concat:  6265641.4 i/s - 1.90x  (± 0.00) slower
            String#+:  5950290.4 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#+@     1.023M i/100ms
          String#dup   581.116k i/100ms
Calculating -------------------------------------
           String#+@     10.316M (± 1.8%) i/s -     52.174M in   5.059350s
          String#dup      5.826M (± 1.5%) i/s -     29.637M in   5.088033s

Comparison:
           String#+@: 10315719.0 i/s
          String#dup:  5826208.4 i/s - 1.77x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   189.569k i/100ms
       String#match?   435.316k i/100ms
    String#end_with?   614.287k i/100ms
Calculating -------------------------------------
           String#=~      1.888M (± 1.5%) i/s -      9.478M in   5.021583s
       String#match?      4.397M (± 1.6%) i/s -     22.201M in   5.050940s
    String#end_with?      6.188M (± 1.4%) i/s -     31.329M in   5.064096s

Comparison:
    String#end_with?:  6187638.4 i/s
       String#match?:  4396556.9 i/s - 1.41x  (± 0.00) slower
           String#=~:  1887991.0 i/s - 3.28x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   114.471k i/100ms
          String#sub   141.099k i/100ms
String#dup["string"]=
                       183.259k i/100ms
Calculating -------------------------------------
         String#gsub      1.152M (± 1.6%) i/s -      5.838M in   5.067203s
          String#sub      1.423M (± 1.5%) i/s -      7.196M in   5.058244s
String#dup["string"]=
                          1.840M (± 1.4%) i/s -      9.346M in   5.080510s

Comparison:
String#dup["string"]=:  1839980.0 i/s
          String#sub:  1422957.8 i/s - 1.29x  (± 0.00) slower
         String#gsub:  1152425.6 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   106.256k i/100ms
           String#tr   343.859k i/100ms
Calculating -------------------------------------
         String#gsub      1.076M (± 1.4%) i/s -      5.419M in   5.039398s
           String#tr      3.426M (± 1.3%) i/s -     17.193M in   5.019286s

Comparison:
           String#tr:  3425938.2 i/s
         String#gsub:  1075536.6 i/s - 3.19x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.190M i/100ms
         With Freeze     1.698M i/100ms
Calculating -------------------------------------
      Without Freeze     11.907M (± 1.2%) i/s -     60.681M in   5.097055s
         With Freeze     17.153M (± 1.5%) i/s -     86.591M in   5.049232s

Comparison:
         With Freeze: 17153367.4 i/s
      Without Freeze: 11906845.2 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.483k i/100ms
      String#squeeze   160.578k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     34.838k (± 1.1%) i/s -    177.633k in   5.099369s
      String#squeeze      1.583M (± 1.4%) i/s -      8.029M in   5.071305s

Comparison:
      String#squeeze:  1583490.7 i/s
 String#gsub/regex+/:    34838.4 i/s - 45.45x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   288.783k i/100ms
       String#match?   766.370k i/100ms
  String#start_with?   876.636k i/100ms
Calculating -------------------------------------
           String#=~      2.877M (± 1.7%) i/s -     14.439M in   5.020359s
       String#match?      7.674M (± 3.6%) i/s -     39.085M in   5.100589s
  String#start_with?      8.800M (± 1.5%) i/s -     44.708M in   5.081547s

Comparison:
  String#start_with?:  8800169.2 i/s
       String#match?:  7673759.2 i/s - 1.15x  (± 0.00) slower
           String#=~:  2876910.4 i/s - 3.06x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   191.266k i/100ms
    String#[0, n] ==    82.308k i/100ms
   String#[RANGE] ==    77.479k i/100ms
   String#[0...n] ==    48.832k i/100ms
Calculating -------------------------------------
  String#start_with?      1.978M (± 1.4%) i/s -      9.946M in   5.029387s
    String#[0, n] ==    835.021k (± 2.0%) i/s -      4.198M in   5.029012s
   String#[RANGE] ==    775.089k (± 1.3%) i/s -      3.951M in   5.098846s
   String#[0...n] ==    473.370k (± 0.8%) i/s -      2.393M in   5.055080s

Comparison:
  String#start_with?:  1977925.2 i/s
    String#[0, n] ==:   835021.2 i/s - 2.37x  (± 0.00) slower
   String#[RANGE] ==:   775089.4 i/s - 2.55x  (± 0.00) slower
   String#[0...n] ==:   473369.7 i/s - 4.18x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   181.035k i/100ms
 String#sub!'string'   128.686k i/100ms
String#gsub!'string'    78.196k i/100ms
  String#[/regexp/]=   159.484k i/100ms
 String#sub!/regexp/   116.900k i/100ms
String#gsub!/regexp/    62.942k i/100ms
Calculating -------------------------------------
  String#['string']=      1.873M (± 1.1%) i/s -      9.414M in   5.026388s
 String#sub!'string'      1.275M (± 1.0%) i/s -      6.434M in   5.048903s
String#gsub!'string'    789.606k (± 1.2%) i/s -      3.988M in   5.051385s
  String#[/regexp/]=      1.578M (± 1.0%) i/s -      7.974M in   5.055156s
 String#sub!/regexp/      1.162M (± 1.4%) i/s -      5.845M in   5.030250s
String#gsub!/regexp/    621.445k (± 1.3%) i/s -      3.147M in   5.065012s

Comparison:
  String#['string']=:  1873117.8 i/s
  String#[/regexp/]=:  1577584.9 i/s - 1.19x  (± 0.00) slower
 String#sub!'string':  1274514.2 i/s - 1.47x  (± 0.00) slower
 String#sub!/regexp/:  1162192.6 i/s - 1.61x  (± 0.00) slower
String#gsub!'string':   789606.1 i/s - 2.37x  (± 0.00) slower
String#gsub!/regexp/:   621445.2 i/s - 3.01x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          String#sub   145.464k i/100ms
        String#chomp   568.832k i/100ms
String#delete_suffix   603.650k i/100ms
Calculating -------------------------------------
          String#sub      1.442M (± 1.7%) i/s -      7.273M in   5.044139s
        String#chomp      5.608M (± 1.3%) i/s -     28.442M in   5.072815s
String#delete_suffix      6.086M (± 1.6%) i/s -     30.786M in   5.059459s

Comparison:
String#delete_suffix:  6086387.5 i/s
        String#chomp:  5607554.7 i/s - 1.09x  (± 0.00) slower
          String#sub:  1442327.4 i/s - 4.22x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   554.973k i/100ms
          String#sub   146.635k i/100ms
Calculating -------------------------------------
String#delete_prefix      5.491M (± 1.5%) i/s -     27.749M in   5.054993s
          String#sub      1.490M (± 1.3%) i/s -      7.478M in   5.020042s

Comparison:
String#delete_prefix:  5490624.1 i/s
          String#sub:  1489968.5 i/s - 3.69x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   628.700k i/100ms
    String#unpack[0]   482.136k i/100ms
Calculating -------------------------------------
      String#unpack1      6.333M (± 1.5%) i/s -     32.064M in   5.063698s
    String#unpack[0]      4.814M (± 1.4%) i/s -     24.107M in   5.008544s

Comparison:
      String#unpack1:  6333400.4 i/s
    String#unpack[0]:  4814053.8 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    28.814k i/100ms
          Time.parse     9.815k i/100ms
Calculating -------------------------------------
        Time.iso8601    287.559k (± 1.6%) i/s -      1.441M in   5.011394s
          Time.parse     97.986k (± 3.1%) i/s -    490.750k in   5.013968s

Comparison:
        Time.iso8601:   287558.6 i/s
          Time.parse:    97985.8 i/s - 2.93x  (± 0.00) slower

