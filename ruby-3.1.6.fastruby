$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       773.794k i/100ms
Function with splat arguments
                        24.387k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.691M (± 1.4%) i/s -     38.690M in   5.031342s
Function with splat arguments
                        247.665k (± 7.2%) i/s -      1.244M in   5.060363s

Comparison:
Function with single Array argument:  7691445.1 i/s
Function with splat arguments:   247665.4 i/s - 31.06x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   995.791k i/100ms
Sequential Assignment
                       995.229k i/100ms
Calculating -------------------------------------
 Parallel Assignment      9.917M (± 1.4%) i/s -     49.790M in   5.021404s
Sequential Assignment
                          9.921M (± 0.3%) i/s -     49.761M in   5.015709s

Comparison:
Sequential Assignment:  9921238.6 i/s
 Parallel Assignment:  9917412.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   454.074k i/100ms
       attr_accessor   551.583k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.551M (± 0.5%) i/s -     23.158M in   5.089070s
       attr_accessor      5.509M (± 0.5%) i/s -     27.579M in   5.006316s

Comparison:
       attr_accessor:  5509026.4 i/s
   getter_and_setter:  4550601.1 i/s - 1.21x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    87.878k i/100ms
         respond_to?   784.546k i/100ms
Calculating -------------------------------------
      begin...rescue    881.494k (± 1.4%) i/s -      4.482M in   5.085367s
         respond_to?      7.804M (± 1.4%) i/s -     39.227M in   5.027625s

Comparison:
         respond_to?:  7803901.8 i/s
      begin...rescue:   881493.5 i/s - 8.85x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              normal   297.790k i/100ms
             &method   123.567k i/100ms
Calculating -------------------------------------
              normal      2.998M (± 0.6%) i/s -     15.187M in   5.066458s
             &method      1.229M (± 0.6%) i/s -      6.178M in   5.027407s

Comparison:
              normal:  2997720.9 i/s
             &method:  1228978.0 i/s - 2.44x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       260.000  i/100ms
       define_method   255.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.337k (±21.9%) i/s -     10.400k in   5.107972s
       define_method      3.258k (±21.7%) i/s -     14.535k in   5.027322s

Comparison:
       define_method:     3258.4 i/s
module_eval with string:     2336.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Float#round   262.119k i/100ms
       Kernel#format   200.947k i/100ms
            String#%   171.177k i/100ms
Calculating -------------------------------------
         Float#round      2.617M (± 0.5%) i/s -     13.106M in   5.008738s
       Kernel#format      2.014M (± 0.5%) i/s -     10.248M in   5.089328s
            String#%      1.718M (± 0.5%) i/s -      8.730M in   5.081523s

Comparison:
         Float#round:  2616693.6 i/s
       Kernel#format:  2013741.7 i/s - 1.30x  (± 0.00) slower
            String#%:  1718036.5 i/s - 1.52x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash   890.919k i/100ms
          OpenStruct   496.642k i/100ms
Calculating -------------------------------------
                Hash      9.080M (± 0.9%) i/s -     45.437M in   5.004663s
          OpenStruct      5.084M (± 0.3%) i/s -     25.825M in   5.080087s

Comparison:
                Hash:  9079604.0 i/s
          OpenStruct:  5083711.0 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.107M i/100ms
          OpenStruct     9.904k i/100ms
Calculating -------------------------------------
                Hash     11.065M (± 2.3%) i/s -     55.357M in   5.005702s
          OpenStruct     97.498k (± 2.7%) i/s -    495.200k in   5.082724s

Comparison:
                Hash: 11064821.3 i/s
          OpenStruct:    97498.2 i/s - 113.49x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   592.538k i/100ms
  ancestors.include?   119.835k i/100ms
Calculating -------------------------------------
  less than or equal      5.828M (± 0.9%) i/s -     29.627M in   5.083580s
  ancestors.include?      1.191M (± 0.6%) i/s -      5.992M in   5.031939s

Comparison:
  less than or equal:  5828405.6 i/s
  ancestors.include?:  1190792.9 i/s - 4.89x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.707  (± 0.0%) i/s -      4.000  in   5.702273s
         Kernel loop      0.226  (± 0.0%) i/s -      2.000  in   8.834799s

Comparison:
          While Loop:        0.7 i/s
         Kernel loop:        0.2 i/s - 3.12x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.572M i/100ms
         Array#first     1.326M i/100ms
Calculating -------------------------------------
           Array#[0]     15.690M (± 0.6%) i/s -     78.614M in   5.010741s
         Array#first     13.269M (± 0.4%) i/s -     67.605M in   5.094945s

Comparison:
           Array#[0]: 15689654.2 i/s
         Array#first: 13269294.0 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.555M i/100ms
          Array#last     1.317M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.543M (± 0.5%) i/s -     77.762M in   5.003040s
          Array#last     13.147M (± 0.2%) i/s -     65.874M in   5.010781s

Comparison:
          Array#[-1]: 15543375.9 i/s
          Array#last: 13146555.0 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    98.637k i/100ms
Calculating -------------------------------------
                find      0.262  (± 0.0%) i/s -      2.000  in   7.631726s
             bsearch    985.434k (± 1.2%) i/s -      4.932M in   5.005462s

Comparison:
             bsearch:   985434.4 i/s
                find:        0.3 i/s - 3760280.36x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    18.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    192.711  (± 3.6%) i/s -    972.000  in   5.051154s
        Array#insert      1.433  (± 0.0%) i/s -      8.000  in   5.584526s

Comparison:
       Array#unshift:      192.7 i/s
        Array#insert:        1.4 i/s - 134.52x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.086M i/100ms
          Array#size     2.100M i/100ms
         Array#count     1.643M i/100ms
Calculating -------------------------------------
        Array#length     20.930M (± 0.4%) i/s -    106.389M in   5.083265s
          Array#size     21.065M (± 0.4%) i/s -    107.081M in   5.083474s
         Array#count     16.421M (± 0.4%) i/s -     82.154M in   5.003050s

Comparison:
          Array#size: 21064834.6 i/s
        Array#length: 20929550.8 i/s - same-ish: difference falls within error
         Array#count: 16421134.2 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.900k i/100ms
        Array#sample     1.043M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    462.710k (± 0.8%) i/s -      2.341M in   5.059406s
        Array#sample     10.456M (± 0.4%) i/s -     53.176M in   5.085783s

Comparison:
        Array#sample: 10456033.2 i/s
 Array#shuffle.first:   462710.4 i/s - 22.60x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    64.755k i/100ms
          Date.parse    32.518k i/100ms
Calculating -------------------------------------
        Date.iso8601    641.025k (± 2.4%) i/s -      3.238M in   5.054078s
          Date.parse    324.501k (± 1.5%) i/s -      1.626M in   5.011693s

Comparison:
        Date.iso8601:   641025.1 i/s
          Date.parse:   324501.2 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.831k i/100ms
           Array#map    26.358k i/100ms
Calculating -------------------------------------
   Array#each + push    187.289k (± 2.2%) i/s -    941.550k in   5.030042s
           Array#map    263.654k (± 0.6%) i/s -      1.344M in   5.098758s

Comparison:
           Array#map:   263653.9 i/s
   Array#each + push:   187289.4 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            For loop    29.798k i/100ms
               #each    32.561k i/100ms
Calculating -------------------------------------
            For loop    298.066k (± 0.4%) i/s -      1.520M in   5.098592s
               #each    324.674k (± 3.2%) i/s -      1.628M in   5.020919s

Comparison:
               #each:   324674.2 i/s
            For loop:   298066.1 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.683k i/100ms
     each_with_index    18.955k i/100ms
Calculating -------------------------------------
          While Loop    276.119k (± 0.4%) i/s -      1.384M in   5.012934s
     each_with_index    192.681k (± 0.4%) i/s -    966.705k in   5.017212s

Comparison:
          While Loop:   276119.3 i/s
     each_with_index:   192680.8 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       inject symbol   124.911k i/100ms
      inject to_proc     2.205k i/100ms
        inject block     2.083k i/100ms
Calculating -------------------------------------
       inject symbol    977.229k (±12.5%) i/s -      4.872M in   5.046746s
      inject to_proc     21.971k (± 1.5%) i/s -    110.250k in   5.019315s
        inject block     20.794k (± 1.3%) i/s -    104.150k in   5.009512s

Comparison:
       inject symbol:   977229.2 i/s
      inject to_proc:    21970.7 i/s - 44.48x  (± 0.00) slower
        inject block:    20794.1 i/s - 47.00x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.913k i/100ms
   Array#map.flatten     4.021k i/100ms
      Array#flat_map     9.692k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     69.604k (± 0.5%) i/s -    352.563k in   5.065427s
   Array#map.flatten     39.742k (± 0.7%) i/s -    201.050k in   5.059102s
      Array#flat_map     96.541k (± 0.7%) i/s -    484.600k in   5.019889s

Comparison:
      Array#flat_map:    96541.1 i/s
Array#map.flatten(1):    69603.7 i/s - 1.39x  (± 0.00) slower
   Array#map.flatten:    39742.2 i/s - 2.43x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    31.461k i/100ms
  Array#reverse_each    32.424k i/100ms
Calculating -------------------------------------
  Array#reverse.each    313.616k (± 2.5%) i/s -      1.573M in   5.019137s
  Array#reverse_each    323.608k (± 0.6%) i/s -      1.621M in   5.009963s

Comparison:
  Array#reverse_each:   323608.4 i/s
  Array#reverse.each:   313615.5 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.907k i/100ms
   Enumerable#detect    82.938k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        208.301k (± 0.7%) i/s -      4.181M in  20.075019s
   Enumerable#detect    830.579k (± 0.8%) i/s -     16.671M in  20.072375s

Comparison:
   Enumerable#detect:   830579.5 i/s
Enumerable#select.first:   208300.9 i/s - 3.99x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       244.345k i/100ms
Enumerable#select.last
                        19.145k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.457M (± 1.1%) i/s -     12.462M in   5.071586s
Enumerable#select.last
                        189.886k (± 1.4%) i/s -    957.250k in   5.042274s

Comparison:
Enumerable#reverse.detect:  2457433.6 i/s
Enumerable#select.last:   189886.3 i/s - 12.94x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         5.054k i/100ms
  Enumerable#sort_by     4.953k i/100ms
     Enumerable#sort     2.471k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         50.311k (± 2.2%) i/s -    252.700k in   5.025276s
  Enumerable#sort_by     49.336k (± 0.5%) i/s -    247.650k in   5.019798s
     Enumerable#sort     24.287k (± 0.2%) i/s -    123.550k in   5.087170s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    50311.1 i/s
  Enumerable#sort_by:    49335.8 i/s - same-ish: difference falls within error
     Enumerable#sort:    24286.7 i/s - 2.07x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    18.048k i/100ms
Enumerable#sort_by...first
                         8.969k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    180.794k (± 0.4%) i/s -    920.448k in   5.091236s
Enumerable#sort_by...first
                         88.573k (± 1.7%) i/s -    448.450k in   5.064760s

Comparison:
   Enumerable#min_by:   180793.7 i/s
Enumerable#sort_by...first:    88573.0 i/s - 2.04x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   426.425k i/100ms
            Hash#dup   307.055k i/100ms
Calculating -------------------------------------
              Hash[]      4.156M (± 1.6%) i/s -     20.895M in   5.028608s
            Hash#dup      3.155M (± 1.2%) i/s -     15.967M in   5.061931s

Comparison:
              Hash[]:  4156230.0 i/s
            Hash#dup:  3154735.1 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.438M i/100ms
  Hash#fetch, symbol     1.177M i/100ms
     Hash#[], string     1.232M i/100ms
  Hash#fetch, string   789.400k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.506M (± 0.4%) i/s -     73.318M in   5.054440s
  Hash#fetch, symbol     11.752M (± 0.5%) i/s -     58.849M in   5.007550s
     Hash#[], string     12.373M (± 0.4%) i/s -     62.835M in   5.078706s
  Hash#fetch, string      7.867M (± 0.4%) i/s -     39.470M in   5.017094s

Comparison:
     Hash#[], symbol: 14505918.6 i/s
     Hash#[], string: 12372574.5 i/s - 1.17x  (± 0.00) slower
  Hash#fetch, symbol: 11752219.6 i/s - 1.23x  (± 0.00) slower
  Hash#fetch, string:  7867236.1 i/s - 1.84x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   871.409k i/100ms
             Hash#[]     1.041M i/100ms
          Hash#[] ||   895.078k i/100ms
          Hash#[] &&   388.645k i/100ms
          Hash#fetch   587.067k i/100ms
 Hash#fetch fallback   392.113k i/100ms
Calculating -------------------------------------
            Hash#dig      8.656M (± 0.8%) i/s -     43.570M in   5.033678s
             Hash#[]      9.797M (± 4.3%) i/s -     48.940M in   5.004837s
          Hash#[] ||      8.873M (± 3.7%) i/s -     44.754M in   5.052236s
          Hash#[] &&      4.263M (± 1.3%) i/s -     21.375M in   5.014899s
          Hash#fetch      5.985M (± 0.4%) i/s -     29.940M in   5.002322s
 Hash#fetch fallback      3.932M (± 1.7%) i/s -     19.998M in   5.087599s

Comparison:
             Hash#[]:  9797454.3 i/s
          Hash#[] ||:  8873209.4 i/s - 1.10x  (± 0.00) slower
            Hash#dig:  8656309.8 i/s - 1.13x  (± 0.00) slower
          Hash#fetch:  5985407.7 i/s - 1.64x  (± 0.00) slower
          Hash#[] &&:  4263144.5 i/s - 2.30x  (± 0.00) slower
 Hash#fetch fallback:  3931905.2 i/s - 2.49x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.445M i/100ms
  Hash#fetch + block     1.457M i/100ms
    Hash#fetch + arg     1.092M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.615M (± 0.5%) i/s -     73.686M in   5.041994s
  Hash#fetch + block     14.456M (± 0.5%) i/s -     72.870M in   5.040806s
    Hash#fetch + arg     10.823M (± 1.0%) i/s -     54.582M in   5.043806s

Comparison:
  Hash#fetch + const: 14614854.7 i/s
  Hash#fetch + block: 14456393.8 i/s - 1.01x  (± 0.00) slower
    Hash#fetch + arg: 10822708.6 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.878k i/100ms
         sort + to_h    11.226k i/100ms
Calculating -------------------------------------
      sort_by + to_h    277.553k (± 0.7%) i/s -      1.394M in   5.022371s
         sort + to_h    110.570k (± 0.3%) i/s -    561.300k in   5.076464s

Comparison:
      sort_by + to_h:   277552.9 i/s
         sort + to_h:   110570.0 i/s - 2.51x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   184.899k i/100ms
       Hash#each_key   206.944k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.897M (± 0.4%) i/s -      9.615M in   5.067847s
       Hash#each_key      2.044M (± 4.0%) i/s -     10.347M in   5.072515s

Comparison:
       Hash#each_key:  2044331.8 i/s
      Hash#keys.each:  1897239.9 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     4.937k i/100ms
           Hash#key?   927.206k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     50.676k (± 7.8%) i/s -    251.787k in   5.010186s
           Hash#key?      9.410M (± 1.0%) i/s -     47.288M in   5.025712s

Comparison:
           Hash#key?:  9410014.6 i/s
  Hash#keys.include?:    50676.1 i/s - 185.69x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.937k i/100ms
            Hash#[]=    10.185k i/100ms
Calculating -------------------------------------
         Hash#merge!     39.463k (± 0.5%) i/s -    200.787k in   5.088182s
            Hash#[]=    104.218k (± 1.2%) i/s -    529.620k in   5.082593s

Comparison:
            Hash#[]=:   104218.5 i/s
         Hash#merge!:    39462.5 i/s - 2.64x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.794k i/100ms
      Hash#merge({})     3.990k i/100ms
 Hash#dup#merge!({})     2.900k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         47.684k (± 0.6%) i/s -    239.700k in   5.027040s
      Hash#merge({})     39.688k (± 0.4%) i/s -    199.500k in   5.026849s
 Hash#dup#merge!({})     29.133k (± 0.5%) i/s -    147.900k in   5.076821s

Comparison:
{}#merge!(Hash) do end:    47683.9 i/s
      Hash#merge({}):    39687.5 i/s - 1.20x  (± 0.00) slower
 Hash#dup#merge!({}):    29133.3 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   389.727k i/100ms
          Hash#merge   363.440k i/100ms
Calculating -------------------------------------
        Hash#**other      3.902M (± 0.7%) i/s -     19.876M in   5.094173s
          Hash#merge      3.598M (± 1.0%) i/s -     18.172M in   5.051343s

Comparison:
        Hash#**other:  3901908.9 i/s
          Hash#merge:  3597822.6 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.692k i/100ms
         Hash#merge!     3.951k i/100ms
Calculating -------------------------------------
          Hash#merge     16.710k (± 1.9%) i/s -     84.600k in   5.064786s
         Hash#merge!     39.291k (± 0.6%) i/s -    197.550k in   5.027992s

Comparison:
         Hash#merge!:    39291.3 i/s
          Hash#merge:    16709.9 i/s - 2.35x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      416.448k i/100ms
Array#each             231.277k i/100ms
Array#each_w/_object   173.478k i/100ms
Hash#select-include     72.616k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.157M (± 0.6%) i/s -     20.822M in   5.008684s
Array#each                2.296M (± 0.8%) i/s -     11.564M in   5.036444s
Array#each_w/_object      1.740M (± 0.6%) i/s -      8.847M in   5.084665s
Hash#select-include     725.863k (± 0.8%) i/s -      3.631M in   5.002396s

Comparison:
Hash#native-slice   :  4157415.3 i/s
Array#each          :  2296199.7 i/s - 1.81x  (± 0.00) slower
Array#each_w/_object:  1740078.7 i/s - 2.39x  (± 0.00) slower
Hash#select-include :   725863.1 i/s - 5.73x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.068k i/100ms
         Hash#value?   834.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     10.811k (± 3.2%) i/s -     54.468k in   5.043980s
         Hash#value?      8.435k (± 0.9%) i/s -     42.534k in   5.042845s

Comparison:
Hash#values.include?:    10810.7 i/s
         Hash#value?:     8435.1 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                call   670.181k i/100ms
                send   527.102k i/100ms
      method_missing   390.130k i/100ms
Calculating -------------------------------------
                call      6.718M (± 0.4%) i/s -     34.179M in   5.088101s
                send      5.275M (± 0.3%) i/s -     26.882M in   5.095757s
      method_missing      3.905M (± 0.7%) i/s -     19.897M in   5.095872s

Comparison:
                call:  6717570.4 i/s
                send:  5275449.7 i/s - 1.27x  (± 0.00) slower
      method_missing:  3904658.8 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
               Block     9.115k i/100ms
      Symbol#to_proc    10.379k i/100ms
Calculating -------------------------------------
               Block     90.882k (± 1.6%) i/s -    455.750k in   5.016095s
      Symbol#to_proc    103.524k (± 0.4%) i/s -    518.950k in   5.012952s

Comparison:
      Symbol#to_proc:   103523.6 i/s
               Block:    90882.2 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          block.call   946.888k i/100ms
       block + yield   997.909k i/100ms
        unused block     1.314M i/100ms
               yield     1.186M i/100ms
Calculating -------------------------------------
          block.call      9.462M (± 0.3%) i/s -     47.344M in   5.003799s
       block + yield      9.977M (± 0.3%) i/s -     49.895M in   5.000942s
        unused block     13.137M (± 0.2%) i/s -     66.996M in   5.099638s
               yield     11.877M (± 0.2%) i/s -     60.470M in   5.091509s

Comparison:
        unused block: 13137447.6 i/s
               yield: 11876664.1 i/s - 1.11x  (± 0.00) slower
       block + yield:  9977297.9 i/s - 1.32x  (± 0.00) slower
          block.call:  9461776.5 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   320.087k i/100ms
      range#include?    12.577k i/100ms
       range#member?    12.597k i/100ms
       plain compare   526.923k i/100ms
Calculating -------------------------------------
        range#cover?      3.246M (± 0.7%) i/s -     16.324M in   5.029378s
      range#include?    127.520k (± 0.8%) i/s -    641.427k in   5.030301s
       range#member?    127.415k (± 0.7%) i/s -    642.447k in   5.042418s
       plain compare      5.220M (± 0.6%) i/s -     26.346M in   5.047329s

Comparison:
       plain compare:  5220024.7 i/s
        range#cover?:  3245979.7 i/s - 1.61x  (± 0.00) slower
      range#include?:   127520.5 i/s - 40.93x  (± 0.00) slower
       range#member?:   127415.1 i/s - 40.97x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       String#match?   915.205k i/100ms
           String#=~   657.631k i/100ms
          Regexp#===   572.663k i/100ms
        String#match   474.205k i/100ms
Calculating -------------------------------------
       String#match?      9.130M (± 1.3%) i/s -     45.760M in   5.012789s
           String#=~      6.463M (± 1.3%) i/s -     32.882M in   5.088300s
          Regexp#===      5.745M (± 0.5%) i/s -     29.206M in   5.083420s
        String#match      4.716M (± 1.3%) i/s -     23.710M in   5.028346s

Comparison:
       String#match?:  9130340.9 i/s
           String#=~:  6463206.5 i/s - 1.41x  (± 0.00) slower
          Regexp#===:  5745439.3 i/s - 1.59x  (± 0.00) slower
        String#match:  4716224.9 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   660.930k i/100ms
      String#casecmp   808.969k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.578M (± 0.6%) i/s -     33.046M in   5.024126s
      String#casecmp      8.114M (± 0.4%) i/s -     41.257M in   5.084560s

Comparison:
      String#casecmp:  8114380.4 i/s
String#downcase + ==:  6577822.2 i/s - 1.23x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            String#+   565.240k i/100ms
       String#concat   605.534k i/100ms
       String#append   646.754k i/100ms
         "foo" "bar"     1.150M i/100ms
  "#{'foo'}#{'bar'}"     1.149M i/100ms
Calculating -------------------------------------
            String#+      5.722M (± 0.6%) i/s -     28.827M in   5.038485s
       String#concat      6.037M (± 0.9%) i/s -     30.277M in   5.015595s
       String#append      6.453M (± 0.4%) i/s -     32.338M in   5.011709s
         "foo" "bar"     11.319M (± 0.4%) i/s -     57.498M in   5.079921s
  "#{'foo'}#{'bar'}"     11.474M (± 0.2%) i/s -     57.431M in   5.005141s

Comparison:
  "#{'foo'}#{'bar'}": 11474484.7 i/s
         "foo" "bar": 11318833.4 i/s - 1.01x  (± 0.00) slower
       String#append:  6452539.1 i/s - 1.78x  (± 0.00) slower
       String#concat:  6037028.9 i/s - 1.90x  (± 0.00) slower
            String#+:  5721633.7 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#+@     1.015M i/100ms
          String#dup   581.064k i/100ms
Calculating -------------------------------------
           String#+@     10.087M (± 1.6%) i/s -     50.729M in   5.030796s
          String#dup      5.851M (± 0.7%) i/s -     29.634M in   5.064910s

Comparison:
           String#+@: 10086656.7 i/s
          String#dup:  5851177.6 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   186.102k i/100ms
       String#match?   431.411k i/100ms
    String#end_with?   622.417k i/100ms
Calculating -------------------------------------
           String#=~      1.858M (± 0.5%) i/s -      9.305M in   5.006968s
       String#match?      4.305M (± 1.4%) i/s -     21.571M in   5.011721s
    String#end_with?      6.197M (± 0.4%) i/s -     31.121M in   5.022004s

Comparison:
    String#end_with?:  6196991.5 i/s
       String#match?:  4304899.7 i/s - 1.44x  (± 0.00) slower
           String#=~:  1858470.6 i/s - 3.33x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   113.212k i/100ms
          String#sub   133.810k i/100ms
String#dup["string"]=
                       177.804k i/100ms
Calculating -------------------------------------
         String#gsub      1.135M (± 0.7%) i/s -      5.774M in   5.085539s
          String#sub      1.352M (± 0.6%) i/s -      6.824M in   5.048992s
String#dup["string"]=
                          1.781M (± 1.7%) i/s -      9.068M in   5.093077s

Comparison:
String#dup["string"]=:  1781015.5 i/s
          String#sub:  1351662.2 i/s - 1.32x  (± 0.00) slower
         String#gsub:  1135387.4 i/s - 1.57x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   105.387k i/100ms
           String#tr   349.515k i/100ms
Calculating -------------------------------------
         String#gsub      1.070M (± 0.6%) i/s -      5.375M in   5.021607s
           String#tr      3.503M (± 0.4%) i/s -     17.825M in   5.088094s

Comparison:
           String#tr:  3503389.8 i/s
         String#gsub:  1070366.2 i/s - 3.27x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.171M i/100ms
         With Freeze     1.646M i/100ms
Calculating -------------------------------------
      Without Freeze     11.723M (± 0.4%) i/s -     59.740M in   5.095885s
         With Freeze     16.618M (± 0.4%) i/s -     83.940M in   5.051174s

Comparison:
         With Freeze: 16618158.0 i/s
      Without Freeze: 11723349.1 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.416k i/100ms
      String#squeeze   155.834k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     34.363k (± 0.8%) i/s -    174.216k in   5.070225s
      String#squeeze      1.560M (± 1.5%) i/s -      7.948M in   5.095915s

Comparison:
      String#squeeze:  1559954.8 i/s
 String#gsub/regex+/:    34362.7 i/s - 45.40x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   284.793k i/100ms
       String#match?   757.534k i/100ms
  String#start_with?   866.732k i/100ms
Calculating -------------------------------------
           String#=~      2.819M (± 1.7%) i/s -     14.240M in   5.053322s
       String#match?      7.553M (± 0.6%) i/s -     37.877M in   5.015208s
  String#start_with?      8.649M (± 0.7%) i/s -     43.337M in   5.010703s

Comparison:
  String#start_with?:  8649265.7 i/s
       String#match?:  7552600.6 i/s - 1.15x  (± 0.00) slower
           String#=~:  2818771.3 i/s - 3.07x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   196.318k i/100ms
    String#[0, n] ==    84.333k i/100ms
   String#[RANGE] ==    76.148k i/100ms
   String#[0...n] ==    47.680k i/100ms
Calculating -------------------------------------
  String#start_with?      1.966M (± 1.7%) i/s -     10.012M in   5.093400s
    String#[0, n] ==    828.709k (± 1.1%) i/s -      4.217M in   5.088837s
   String#[RANGE] ==    749.056k (± 0.8%) i/s -      3.807M in   5.083293s
   String#[0...n] ==    472.391k (± 1.1%) i/s -      2.384M in   5.047275s

Comparison:
  String#start_with?:  1966273.1 i/s
    String#[0, n] ==:   828708.8 i/s - 2.37x  (± 0.00) slower
   String#[RANGE] ==:   749055.6 i/s - 2.63x  (± 0.00) slower
   String#[0...n] ==:   472390.8 i/s - 4.16x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   181.214k i/100ms
 String#sub!'string'   126.821k i/100ms
String#gsub!'string'    78.501k i/100ms
  String#[/regexp/]=   156.289k i/100ms
 String#sub!/regexp/   114.659k i/100ms
String#gsub!/regexp/    60.720k i/100ms
Calculating -------------------------------------
  String#['string']=      1.849M (± 1.3%) i/s -      9.242M in   5.000370s
 String#sub!'string'      1.277M (± 0.4%) i/s -      6.468M in   5.063351s
String#gsub!'string'    777.699k (± 0.5%) i/s -      3.925M in   5.047108s
  String#[/regexp/]=      1.529M (± 0.3%) i/s -      7.658M in   5.007981s
 String#sub!/regexp/      1.103M (± 2.7%) i/s -      5.618M in   5.096816s
String#gsub!/regexp/    605.285k (± 0.3%) i/s -      3.036M in   5.015871s

Comparison:
  String#['string']=:  1848592.3 i/s
  String#[/regexp/]=:  1529201.8 i/s - 1.21x  (± 0.00) slower
 String#sub!'string':  1277412.6 i/s - 1.45x  (± 0.00) slower
 String#sub!/regexp/:  1103269.0 i/s - 1.68x  (± 0.00) slower
String#gsub!'string':   777699.0 i/s - 2.38x  (± 0.00) slower
String#gsub!/regexp/:   605284.8 i/s - 3.05x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          String#sub   146.064k i/100ms
        String#chomp   548.422k i/100ms
String#delete_suffix   602.999k i/100ms
Calculating -------------------------------------
          String#sub      1.465M (± 0.5%) i/s -      7.449M in   5.085341s
        String#chomp      5.479M (± 1.6%) i/s -     27.421M in   5.006163s
String#delete_suffix      6.023M (± 0.3%) i/s -     30.150M in   5.005891s

Comparison:
String#delete_suffix:  6022937.8 i/s
        String#chomp:  5478924.9 i/s - 1.10x  (± 0.00) slower
          String#sub:  1464886.7 i/s - 4.11x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   633.603k i/100ms
          String#sub   152.847k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.308M (± 1.6%) i/s -     31.680M in   5.023812s
          String#sub      1.521M (± 0.9%) i/s -      7.642M in   5.023540s

Comparison:
String#delete_prefix:  6307888.8 i/s
          String#sub:  1521419.1 i/s - 4.15x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   625.607k i/100ms
    String#unpack[0]   465.898k i/100ms
Calculating -------------------------------------
      String#unpack1      6.257M (± 0.3%) i/s -     31.906M in   5.099153s
    String#unpack[0]      4.634M (± 0.4%) i/s -     23.295M in   5.027126s

Comparison:
      String#unpack1:  6257173.7 i/s
    String#unpack[0]:  4633927.3 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.159k i/100ms
          Time.parse     9.387k i/100ms
Calculating -------------------------------------
        Time.iso8601    271.943k (± 0.6%) i/s -      1.385M in   5.093531s
          Time.parse     94.485k (± 0.7%) i/s -    478.737k in   5.067059s

Comparison:
        Time.iso8601:   271943.3 i/s
          Time.parse:    94485.3 i/s - 2.88x  (± 0.00) slower

