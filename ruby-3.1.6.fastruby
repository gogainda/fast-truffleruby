$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       771.356k i/100ms
Function with splat arguments
                        25.654k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.692M (± 1.0%) i/s -     38.568M in   5.014621s
Function with splat arguments
                        267.496k (± 6.3%) i/s -      1.334M in   5.014507s

Comparison:
Function with single Array argument:  7691949.7 i/s
Function with splat arguments:   267496.1 i/s - 28.76x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.013M i/100ms
Sequential Assignment
                         1.040M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.198M (± 0.4%) i/s -     51.655M in   5.065099s
Sequential Assignment
                         10.353M (± 0.7%) i/s -     52.013M in   5.024324s

Comparison:
Sequential Assignment: 10352858.3 i/s
 Parallel Assignment: 10198401.2 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   467.781k i/100ms
       attr_accessor   503.950k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.670M (± 0.6%) i/s -     23.389M in   5.008140s
       attr_accessor      4.968M (± 0.6%) i/s -     25.198M in   5.072154s

Comparison:
       attr_accessor:  4968020.2 i/s
   getter_and_setter:  4670378.0 i/s - 1.06x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    90.442k i/100ms
         respond_to?   751.511k i/100ms
Calculating -------------------------------------
      begin...rescue    890.665k (± 3.7%) i/s -      4.522M in   5.085234s
         respond_to?      7.490M (± 1.1%) i/s -     37.576M in   5.017656s

Comparison:
         respond_to?:  7489605.8 i/s
      begin...rescue:   890665.0 i/s - 8.41x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              normal   298.222k i/100ms
             &method   118.526k i/100ms
Calculating -------------------------------------
              normal      2.972M (± 1.0%) i/s -     14.911M in   5.018109s
             &method      1.175M (± 0.8%) i/s -      5.926M in   5.043311s

Comparison:
              normal:  2971753.5 i/s
             &method:  1175165.5 i/s - 2.53x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       243.000  i/100ms
       define_method   318.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.318k (±16.8%) i/s -     10.935k in   5.058080s
       define_method      3.159k (±17.8%) i/s -     14.628k in   5.106800s

Comparison:
       define_method:     3158.6 i/s
module_eval with string:     2317.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Float#round   252.302k i/100ms
       Kernel#format   201.138k i/100ms
            String#%   172.080k i/100ms
Calculating -------------------------------------
         Float#round      2.540M (± 0.5%) i/s -     12.867M in   5.066372s
       Kernel#format      1.988M (± 0.6%) i/s -     10.057M in   5.060135s
            String#%      1.722M (± 0.2%) i/s -      8.776M in   5.096367s

Comparison:
         Float#round:  2539839.6 i/s
       Kernel#format:  1987545.0 i/s - 1.28x  (± 0.00) slower
            String#%:  1722037.4 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash   884.707k i/100ms
          OpenStruct   483.885k i/100ms
Calculating -------------------------------------
                Hash      8.746M (± 1.2%) i/s -     44.235M in   5.058306s
          OpenStruct      4.779M (± 0.4%) i/s -     24.194M in   5.062788s

Comparison:
                Hash:  8746354.4 i/s
          OpenStruct:  4778904.5 i/s - 1.83x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.044M i/100ms
          OpenStruct     9.450k i/100ms
Calculating -------------------------------------
                Hash     10.410M (± 0.4%) i/s -     52.224M in   5.016838s
          OpenStruct     93.233k (± 2.9%) i/s -    472.500k in   5.072015s

Comparison:
                Hash: 10409885.6 i/s
          OpenStruct:    93232.8 i/s - 111.65x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   601.118k i/100ms
  ancestors.include?   129.399k i/100ms
Calculating -------------------------------------
  less than or equal      6.114M (± 0.6%) i/s -     30.657M in   5.014086s
  ancestors.include?      1.278M (± 0.5%) i/s -      6.470M in   5.061612s

Comparison:
  less than or equal:  6114436.4 i/s
  ancestors.include?:  1278265.3 i/s - 4.78x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.705  (± 0.0%) i/s -      4.000  in   5.675874s
         Kernel loop      0.216  (± 0.0%) i/s -      2.000  in   9.253949s

Comparison:
          While Loop:        0.7 i/s
         Kernel loop:        0.2 i/s - 3.26x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.561M i/100ms
         Array#first     1.340M i/100ms
Calculating -------------------------------------
           Array#[0]     15.504M (± 1.3%) i/s -     78.049M in   5.034870s
         Array#first     13.360M (± 0.7%) i/s -     66.999M in   5.015081s

Comparison:
           Array#[0]: 15504323.7 i/s
         Array#first: 13360145.5 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.524M i/100ms
          Array#last     1.313M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.260M (± 0.3%) i/s -     77.733M in   5.093794s
          Array#last     13.131M (± 0.7%) i/s -     65.662M in   5.000725s

Comparison:
          Array#[-1]: 15260418.9 i/s
          Array#last: 13131088.4 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    97.568k i/100ms
Calculating -------------------------------------
                find      0.258  (± 0.0%) i/s -      2.000  in   7.757869s
             bsearch    972.442k (± 1.6%) i/s -      4.878M in   5.017972s

Comparison:
             bsearch:   972442.0 i/s
                find:        0.3 i/s - 3772038.66x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    19.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    191.666  (± 2.6%) i/s -    969.000  in   5.058946s
        Array#insert      1.448  (± 0.0%) i/s -      8.000  in   5.525093s

Comparison:
       Array#unshift:      191.7 i/s
        Array#insert:        1.4 i/s - 132.36x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.157M i/100ms
          Array#size     2.079M i/100ms
         Array#count     1.620M i/100ms
Calculating -------------------------------------
        Array#length     21.418M (± 0.7%) i/s -    107.825M in   5.034665s
          Array#size     20.606M (± 0.4%) i/s -    103.927M in   5.043532s
         Array#count     16.511M (± 0.9%) i/s -     82.607M in   5.003609s

Comparison:
        Array#length: 21417596.9 i/s
          Array#size: 20606288.4 i/s - 1.04x  (± 0.00) slower
         Array#count: 16510783.4 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.897k i/100ms
        Array#sample     1.050M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    463.052k (± 0.9%) i/s -      2.341M in   5.055438s
        Array#sample     10.519M (± 0.5%) i/s -     53.543M in   5.090451s

Comparison:
        Array#sample: 10518652.9 i/s
 Array#shuffle.first:   463052.1 i/s - 22.72x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    61.611k i/100ms
          Date.parse    31.201k i/100ms
Calculating -------------------------------------
        Date.iso8601    622.927k (± 0.5%) i/s -      3.142M in   5.044297s
          Date.parse    311.521k (± 0.5%) i/s -      1.560M in   5.007952s

Comparison:
        Date.iso8601:   622926.6 i/s
          Date.parse:   311521.4 i/s - 2.00x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.103k i/100ms
           Array#map    27.014k i/100ms
Calculating -------------------------------------
   Array#each + push    182.809k (± 0.4%) i/s -    923.253k in   5.050471s
           Array#map    270.691k (± 0.5%) i/s -      1.378M in   5.089725s

Comparison:
           Array#map:   270691.0 i/s
   Array#each + push:   182808.7 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            For loop    27.300k i/100ms
               #each    31.888k i/100ms
Calculating -------------------------------------
            For loop    286.170k (± 0.3%) i/s -      1.447M in   5.056147s
               #each    319.110k (± 0.4%) i/s -      1.626M in   5.096397s

Comparison:
               #each:   319109.8 i/s
            For loop:   286169.9 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.118k i/100ms
     each_with_index    18.786k i/100ms
Calculating -------------------------------------
          While Loop    270.856k (± 0.4%) i/s -      1.356M in   5.006038s
     each_with_index    187.331k (± 0.5%) i/s -    939.300k in   5.014265s

Comparison:
          While Loop:   270856.4 i/s
     each_with_index:   187330.8 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    71.976k i/100ms
      inject to_proc     2.050k i/100ms
        inject block     1.963k i/100ms
Calculating -------------------------------------
       inject symbol    720.439k (± 1.1%) i/s -      3.671M in   5.095841s
      inject to_proc     20.707k (± 0.5%) i/s -    104.550k in   5.049127s
        inject block     19.555k (± 0.4%) i/s -     98.150k in   5.019173s

Comparison:
       inject symbol:   720439.4 i/s
      inject to_proc:    20707.1 i/s - 34.79x  (± 0.00) slower
        inject block:    19555.4 i/s - 36.84x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     7.456k i/100ms
   Array#map.flatten     3.797k i/100ms
      Array#flat_map     9.467k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     74.007k (± 0.5%) i/s -    372.800k in   5.037513s
   Array#map.flatten     37.841k (± 0.6%) i/s -    189.850k in   5.017178s
      Array#flat_map     95.414k (± 2.2%) i/s -    482.817k in   5.063055s

Comparison:
      Array#flat_map:    95413.9 i/s
Array#map.flatten(1):    74006.5 i/s - 1.29x  (± 0.00) slower
   Array#map.flatten:    37841.4 i/s - 2.52x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    30.726k i/100ms
  Array#reverse_each    31.701k i/100ms
Calculating -------------------------------------
  Array#reverse.each    306.376k (± 0.5%) i/s -      1.536M in   5.014562s
  Array#reverse_each    316.991k (± 0.4%) i/s -      1.585M in   5.000401s

Comparison:
  Array#reverse_each:   316990.7 i/s
  Array#reverse.each:   306376.0 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        19.270k i/100ms
   Enumerable#detect    78.221k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        193.577k (± 0.7%) i/s -      3.873M in  20.009827s
   Enumerable#detect    793.710k (± 1.1%) i/s -     15.879M in  20.008323s

Comparison:
   Enumerable#detect:   793709.8 i/s
Enumerable#select.first:   193577.1 i/s - 4.10x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       235.935k i/100ms
Enumerable#select.last
                        17.906k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.330M (± 2.0%) i/s -     11.797M in   5.065167s
Enumerable#select.last
                        179.114k (± 0.6%) i/s -    913.206k in   5.098681s

Comparison:
Enumerable#reverse.detect:  2329969.7 i/s
Enumerable#select.last:   179113.7 i/s - 13.01x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.981k i/100ms
  Enumerable#sort_by     4.751k i/100ms
     Enumerable#sort     2.407k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         48.507k (± 1.7%) i/s -    244.069k in   5.033146s
  Enumerable#sort_by     47.781k (± 1.1%) i/s -    242.301k in   5.071731s
     Enumerable#sort     24.159k (± 0.2%) i/s -    122.757k in   5.081190s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    48507.0 i/s
  Enumerable#sort_by:    47780.8 i/s - same-ish: difference falls within error
     Enumerable#sort:    24159.2 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.018k i/100ms
Enumerable#sort_by...first
                         8.337k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    170.038k (± 0.7%) i/s -    850.900k in   5.004404s
Enumerable#sort_by...first
                         84.040k (± 0.5%) i/s -    425.187k in   5.059477s

Comparison:
   Enumerable#min_by:   170038.4 i/s
Enumerable#sort_by...first:    84040.0 i/s - 2.02x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   414.596k i/100ms
            Hash#dup   311.230k i/100ms
Calculating -------------------------------------
              Hash[]      3.957M (± 2.1%) i/s -     19.901M in   5.031330s
            Hash#dup      3.117M (± 1.1%) i/s -     15.873M in   5.093384s

Comparison:
              Hash[]:  3956982.9 i/s
            Hash#dup:  3116683.0 i/s - 1.27x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.389M i/100ms
  Hash#fetch, symbol     1.195M i/100ms
     Hash#[], string     1.226M i/100ms
  Hash#fetch, string   740.461k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     13.880M (± 0.3%) i/s -     69.461M in   5.004465s
  Hash#fetch, symbol     11.811M (± 2.5%) i/s -     59.774M in   5.064196s
     Hash#[], string     12.241M (± 0.5%) i/s -     61.304M in   5.008279s
  Hash#fetch, string      7.447M (± 0.8%) i/s -     37.764M in   5.071342s

Comparison:
     Hash#[], symbol: 13879959.4 i/s
     Hash#[], string: 12240806.8 i/s - 1.13x  (± 0.00) slower
  Hash#fetch, symbol: 11811370.1 i/s - 1.18x  (± 0.00) slower
  Hash#fetch, string:  7446882.3 i/s - 1.86x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   804.790k i/100ms
             Hash#[]   979.565k i/100ms
          Hash#[] ||   859.301k i/100ms
          Hash#[] &&   370.491k i/100ms
          Hash#fetch   589.235k i/100ms
 Hash#fetch fallback   384.666k i/100ms
Calculating -------------------------------------
            Hash#dig      7.749M (± 0.7%) i/s -     39.435M in   5.089238s
             Hash#[]      9.596M (± 0.9%) i/s -     47.999M in   5.002247s
          Hash#[] ||      8.433M (± 0.9%) i/s -     42.965M in   5.095509s
          Hash#[] &&      3.678M (± 0.7%) i/s -     18.525M in   5.036498s
          Hash#fetch      5.989M (± 0.9%) i/s -     30.051M in   5.018146s
 Hash#fetch fallback      3.854M (± 1.0%) i/s -     19.618M in   5.091408s

Comparison:
             Hash#[]:  9596277.0 i/s
          Hash#[] ||:  8432649.0 i/s - 1.14x  (± 0.00) slower
            Hash#dig:  7749080.1 i/s - 1.24x  (± 0.00) slower
          Hash#fetch:  5988966.4 i/s - 1.60x  (± 0.00) slower
 Hash#fetch fallback:  3853550.2 i/s - 2.49x  (± 0.00) slower
          Hash#[] &&:  3678220.5 i/s - 2.61x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.444M i/100ms
  Hash#fetch + block     1.408M i/100ms
    Hash#fetch + arg     1.079M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.246M (± 1.3%) i/s -     72.199M in   5.068689s
  Hash#fetch + block     14.155M (± 0.6%) i/s -     71.792M in   5.071955s
    Hash#fetch + arg     10.535M (± 1.1%) i/s -     52.865M in   5.018573s

Comparison:
  Hash#fetch + const: 14246282.2 i/s
  Hash#fetch + block: 14155113.7 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 10535282.0 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    26.616k i/100ms
         sort + to_h    11.947k i/100ms
Calculating -------------------------------------
      sort_by + to_h    265.886k (± 0.5%) i/s -      1.331M in   5.005283s
         sort + to_h    119.048k (± 0.6%) i/s -    597.350k in   5.017900s

Comparison:
      sort_by + to_h:   265886.1 i/s
         sort + to_h:   119048.1 i/s - 2.23x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   187.260k i/100ms
       Hash#each_key   186.478k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.896M (± 0.5%) i/s -      9.550M in   5.036436s
       Hash#each_key      1.848M (± 0.5%) i/s -      9.324M in   5.046903s

Comparison:
      Hash#keys.each:  1896274.9 i/s
       Hash#each_key:  1847506.0 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.679k i/100ms
           Hash#key?   916.067k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     16.741k (± 4.1%) i/s -     83.950k in   5.025065s
           Hash#key?      9.277M (± 0.5%) i/s -     46.719M in   5.036056s

Comparison:
           Hash#key?:  9277183.2 i/s
  Hash#keys.include?:    16740.8 i/s - 554.17x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.865k i/100ms
            Hash#[]=    10.426k i/100ms
Calculating -------------------------------------
         Hash#merge!     38.553k (± 0.3%) i/s -    193.250k in   5.012621s
            Hash#[]=    104.191k (± 3.2%) i/s -    521.300k in   5.009688s

Comparison:
            Hash#[]=:   104190.9 i/s
         Hash#merge!:    38553.1 i/s - 2.70x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.431k i/100ms
      Hash#merge({})     3.819k i/100ms
 Hash#dup#merge!({})     2.843k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         44.062k (± 0.9%) i/s -    221.550k in   5.028571s
      Hash#merge({})     38.017k (± 0.4%) i/s -    190.950k in   5.022807s
 Hash#dup#merge!({})     28.200k (± 0.8%) i/s -    142.150k in   5.041204s

Comparison:
{}#merge!(Hash) do end:    44061.6 i/s
      Hash#merge({}):    38017.1 i/s - 1.16x  (± 0.00) slower
 Hash#dup#merge!({}):    28199.5 i/s - 1.56x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   372.554k i/100ms
          Hash#merge   327.988k i/100ms
Calculating -------------------------------------
        Hash#**other      3.718M (± 0.8%) i/s -     18.628M in   5.009977s
          Hash#merge      3.306M (± 0.6%) i/s -     16.727M in   5.059404s

Comparison:
        Hash#**other:  3718348.3 i/s
          Hash#merge:  3306301.8 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.662k i/100ms
         Hash#merge!     3.718k i/100ms
Calculating -------------------------------------
          Hash#merge     16.374k (± 1.8%) i/s -     83.100k in   5.076985s
         Hash#merge!     37.094k (± 0.4%) i/s -    185.900k in   5.011663s

Comparison:
         Hash#merge!:    37094.1 i/s
          Hash#merge:    16373.6 i/s - 2.27x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      426.970k i/100ms
Array#each             202.982k i/100ms
Array#each_w/_object   164.585k i/100ms
Hash#select-include     72.147k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.330M (± 1.7%) i/s -     21.775M in   5.030171s
Array#each                2.056M (± 1.6%) i/s -     10.352M in   5.037355s
Array#each_w/_object      1.643M (± 0.4%) i/s -      8.229M in   5.009738s
Hash#select-include     723.370k (± 0.9%) i/s -      3.679M in   5.087004s

Comparison:
Hash#native-slice   :  4330336.7 i/s
Array#each          :  2055574.1 i/s - 2.11x  (± 0.00) slower
Array#each_w/_object:  1642682.8 i/s - 2.64x  (± 0.00) slower
Hash#select-include :   723370.5 i/s - 5.99x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     2.660k i/100ms
         Hash#value?     2.536k i/100ms
Calculating -------------------------------------
Hash#values.include?     26.369k (± 5.4%) i/s -    133.000k in   5.063810s
         Hash#value?     25.401k (± 0.9%) i/s -    129.336k in   5.092249s

Comparison:
Hash#values.include?:    26369.1 i/s
         Hash#value?:    25400.8 i/s - same-ish: difference falls within error

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                call   652.256k i/100ms
                send   516.137k i/100ms
      method_missing   376.988k i/100ms
Calculating -------------------------------------
                call      6.585M (± 0.4%) i/s -     33.265M in   5.051545s
                send      5.192M (± 1.5%) i/s -     26.323M in   5.071049s
      method_missing      3.773M (± 0.6%) i/s -     19.226M in   5.095367s

Comparison:
                call:  6585240.3 i/s
                send:  5192048.6 i/s - 1.27x  (± 0.00) slower
      method_missing:  3773460.8 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
               Block     9.385k i/100ms
      Symbol#to_proc     9.176k i/100ms
Calculating -------------------------------------
               Block     93.846k (± 0.5%) i/s -    469.250k in   5.000332s
      Symbol#to_proc     90.986k (± 0.5%) i/s -    458.800k in   5.042661s

Comparison:
               Block:    93846.2 i/s
      Symbol#to_proc:    90986.2 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          block.call   959.688k i/100ms
       block + yield     1.006M i/100ms
        unused block     1.295M i/100ms
               yield     1.173M i/100ms
Calculating -------------------------------------
          block.call      9.527M (± 3.0%) i/s -     47.984M in   5.042299s
       block + yield     10.050M (± 0.7%) i/s -     50.277M in   5.003063s
        unused block     12.925M (± 0.5%) i/s -     64.760M in   5.010417s
               yield     11.700M (± 0.4%) i/s -     58.631M in   5.011440s

Comparison:
        unused block: 12925326.0 i/s
               yield: 11699596.7 i/s - 1.10x  (± 0.00) slower
       block + yield: 10049753.5 i/s - 1.29x  (± 0.00) slower
          block.call:  9527473.0 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   319.286k i/100ms
      range#include?    12.460k i/100ms
       range#member?    12.463k i/100ms
       plain compare   501.494k i/100ms
Calculating -------------------------------------
        range#cover?      3.113M (± 0.4%) i/s -     15.645M in   5.025110s
      range#include?    124.145k (± 2.2%) i/s -    623.000k in   5.021252s
       range#member?    124.737k (± 0.6%) i/s -    635.613k in   5.095832s
       plain compare      4.944M (± 0.7%) i/s -     25.075M in   5.071584s

Comparison:
       plain compare:  4944420.2 i/s
        range#cover?:  3113419.1 i/s - 1.59x  (± 0.00) slower
       range#member?:   124736.9 i/s - 39.64x  (± 0.00) slower
      range#include?:   124145.4 i/s - 39.83x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       String#match?   934.202k i/100ms
           String#=~   629.016k i/100ms
          Regexp#===   592.666k i/100ms
        String#match   479.726k i/100ms
Calculating -------------------------------------
       String#match?      9.316M (± 0.5%) i/s -     46.710M in   5.013959s
           String#=~      6.311M (± 0.6%) i/s -     32.080M in   5.083618s
          Regexp#===      6.003M (± 0.5%) i/s -     30.226M in   5.035257s
        String#match      4.798M (± 0.6%) i/s -     24.466M in   5.099047s

Comparison:
       String#match?:  9316217.6 i/s
           String#=~:  6310662.7 i/s - 1.48x  (± 0.00) slower
          Regexp#===:  6003002.7 i/s - 1.55x  (± 0.00) slower
        String#match:  4798305.7 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   632.782k i/100ms
      String#casecmp   804.631k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.312M (± 0.4%) i/s -     31.639M in   5.012719s
      String#casecmp      7.991M (± 2.9%) i/s -     40.232M in   5.040008s

Comparison:
      String#casecmp:  7990979.8 i/s
String#downcase + ==:  6311876.0 i/s - 1.27x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            String#+   545.100k i/100ms
       String#concat   598.683k i/100ms
       String#append   651.971k i/100ms
         "foo" "bar"     1.136M i/100ms
  "#{'foo'}#{'bar'}"     1.140M i/100ms
Calculating -------------------------------------
            String#+      5.434M (± 0.8%) i/s -     27.255M in   5.015846s
       String#concat      6.011M (± 0.3%) i/s -     30.533M in   5.079310s
       String#append      6.539M (± 0.3%) i/s -     33.251M in   5.085022s
         "foo" "bar"     11.344M (± 0.2%) i/s -     56.818M in   5.008898s
  "#{'foo'}#{'bar'}"     11.384M (± 0.3%) i/s -     57.025M in   5.009380s

Comparison:
  "#{'foo'}#{'bar'}": 11383681.1 i/s
         "foo" "bar": 11343560.5 i/s - same-ish: difference falls within error
       String#append:  6538961.2 i/s - 1.74x  (± 0.00) slower
       String#concat:  6011262.8 i/s - 1.89x  (± 0.00) slower
            String#+:  5434088.7 i/s - 2.09x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#+@   988.376k i/100ms
          String#dup   559.711k i/100ms
Calculating -------------------------------------
           String#+@      9.885M (± 0.3%) i/s -     50.407M in   5.099459s
          String#dup      5.562M (± 0.7%) i/s -     27.986M in   5.031676s

Comparison:
           String#+@:  9884910.9 i/s
          String#dup:  5562154.0 i/s - 1.78x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   187.069k i/100ms
       String#match?   415.811k i/100ms
    String#end_with?   617.608k i/100ms
Calculating -------------------------------------
           String#=~      1.879M (± 0.6%) i/s -      9.541M in   5.078291s
       String#match?      4.130M (± 0.4%) i/s -     20.791M in   5.033540s
    String#end_with?      6.121M (± 0.3%) i/s -     30.880M in   5.044816s

Comparison:
    String#end_with?:  6121281.0 i/s
       String#match?:  4130472.8 i/s - 1.48x  (± 0.00) slower
           String#=~:  1878759.0 i/s - 3.26x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   110.985k i/100ms
          String#sub   138.260k i/100ms
String#dup["string"]=
                       177.324k i/100ms
Calculating -------------------------------------
         String#gsub      1.115M (± 0.5%) i/s -      5.660M in   5.075188s
          String#sub      1.376M (± 1.8%) i/s -      6.913M in   5.026742s
String#dup["string"]=
                          1.771M (± 0.5%) i/s -      8.866M in   5.005588s

Comparison:
String#dup["string"]=:  1771301.9 i/s
          String#sub:  1375754.3 i/s - 1.29x  (± 0.00) slower
         String#gsub:  1115305.5 i/s - 1.59x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   100.156k i/100ms
           String#tr   335.624k i/100ms
Calculating -------------------------------------
         String#gsub    994.809k (± 0.6%) i/s -      5.008M in   5.034117s
           String#tr      3.388M (± 0.5%) i/s -     17.117M in   5.052464s

Comparison:
           String#tr:  3387903.3 i/s
         String#gsub:   994809.1 i/s - 3.41x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.175M i/100ms
         With Freeze     1.693M i/100ms
Calculating -------------------------------------
      Without Freeze     11.575M (± 2.5%) i/s -     58.766M in   5.080522s
         With Freeze     16.834M (± 0.5%) i/s -     84.666M in   5.029512s

Comparison:
         With Freeze: 16834329.3 i/s
      Without Freeze: 11575211.1 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.477k i/100ms
      String#squeeze   159.069k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     34.807k (± 0.6%) i/s -    177.327k in   5.094822s
      String#squeeze      1.583M (± 0.5%) i/s -      7.953M in   5.025821s

Comparison:
      String#squeeze:  1582563.7 i/s
 String#gsub/regex+/:    34806.8 i/s - 45.47x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   284.706k i/100ms
       String#match?   724.075k i/100ms
  String#start_with?   871.875k i/100ms
Calculating -------------------------------------
           String#=~      2.843M (± 0.6%) i/s -     14.235M in   5.007508s
       String#match?      7.220M (± 0.7%) i/s -     36.204M in   5.014434s
  String#start_with?      8.712M (± 1.1%) i/s -     43.594M in   5.004486s

Comparison:
  String#start_with?:  8712035.9 i/s
       String#match?:  7220241.5 i/s - 1.21x  (± 0.00) slower
           String#=~:  2842894.4 i/s - 3.06x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   201.824k i/100ms
    String#[0, n] ==    86.590k i/100ms
   String#[RANGE] ==    80.093k i/100ms
   String#[0...n] ==    43.460k i/100ms
Calculating -------------------------------------
  String#start_with?      1.958M (± 1.5%) i/s -      9.889M in   5.052685s
    String#[0, n] ==    850.817k (± 1.5%) i/s -      4.330M in   5.089727s
   String#[RANGE] ==    787.225k (± 0.7%) i/s -      4.005M in   5.087320s
   String#[0...n] ==    430.078k (± 0.6%) i/s -      2.173M in   5.052780s

Comparison:
  String#start_with?:  1957635.7 i/s
    String#[0, n] ==:   850817.4 i/s - 2.30x  (± 0.00) slower
   String#[RANGE] ==:   787224.8 i/s - 2.49x  (± 0.00) slower
   String#[0...n] ==:   430078.0 i/s - 4.55x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   172.106k i/100ms
 String#sub!'string'   123.674k i/100ms
String#gsub!'string'    76.386k i/100ms
  String#[/regexp/]=   153.306k i/100ms
 String#sub!/regexp/   115.633k i/100ms
String#gsub!/regexp/    61.305k i/100ms
Calculating -------------------------------------
  String#['string']=      1.769M (± 2.1%) i/s -      8.950M in   5.062123s
 String#sub!'string'      1.249M (± 0.6%) i/s -      6.307M in   5.051964s
String#gsub!'string'    769.632k (± 0.6%) i/s -      3.896M in   5.061920s
  String#[/regexp/]=      1.524M (± 0.5%) i/s -      7.665M in   5.029654s
 String#sub!/regexp/      1.121M (± 0.9%) i/s -      5.666M in   5.054220s
String#gsub!/regexp/    606.819k (± 0.6%) i/s -      3.065M in   5.051520s

Comparison:
  String#['string']=:  1768866.2 i/s
  String#[/regexp/]=:  1524056.2 i/s - 1.16x  (± 0.00) slower
 String#sub!'string':  1248546.6 i/s - 1.42x  (± 0.00) slower
 String#sub!/regexp/:  1121143.8 i/s - 1.58x  (± 0.00) slower
String#gsub!'string':   769632.4 i/s - 2.30x  (± 0.00) slower
String#gsub!/regexp/:   606819.2 i/s - 2.91x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          String#sub   143.331k i/100ms
        String#chomp   538.867k i/100ms
String#delete_suffix   618.013k i/100ms
Calculating -------------------------------------
          String#sub      1.425M (± 0.5%) i/s -      7.167M in   5.029283s
        String#chomp      5.343M (± 0.6%) i/s -     26.943M in   5.043125s
String#delete_suffix      6.130M (± 0.6%) i/s -     30.901M in   5.041257s

Comparison:
String#delete_suffix:  6129795.0 i/s
        String#chomp:  5342801.4 i/s - 1.15x  (± 0.00) slower
          String#sub:  1425007.6 i/s - 4.30x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   586.749k i/100ms
          String#sub   145.039k i/100ms
Calculating -------------------------------------
String#delete_prefix      5.997M (± 0.3%) i/s -     30.511M in   5.088145s
          String#sub      1.456M (± 0.8%) i/s -      7.397M in   5.079717s

Comparison:
String#delete_prefix:  5996542.5 i/s
          String#sub:  1456275.3 i/s - 4.12x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   603.603k i/100ms
    String#unpack[0]   464.824k i/100ms
Calculating -------------------------------------
      String#unpack1      5.990M (± 0.3%) i/s -     30.180M in   5.038412s
    String#unpack[0]      4.625M (± 0.6%) i/s -     23.241M in   5.024808s

Comparison:
      String#unpack1:  5990070.2 i/s
    String#unpack[0]:  4625443.9 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.396k i/100ms
          Time.parse     9.164k i/100ms
Calculating -------------------------------------
        Time.iso8601    274.109k (± 0.5%) i/s -      1.397M in   5.097360s
          Time.parse     91.469k (± 0.6%) i/s -    458.200k in   5.009530s

Comparison:
        Time.iso8601:   274108.9 i/s
          Time.parse:    91468.9 i/s - 3.00x  (± 0.00) slower

