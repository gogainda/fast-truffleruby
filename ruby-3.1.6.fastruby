$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       750.134k i/100ms
Function with splat arguments
                        25.463k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.456M (± 2.0%) i/s -     37.507M in   5.033017s
Function with splat arguments
                        252.624k (± 7.4%) i/s -      1.273M in   5.074581s

Comparison:
Function with single Array argument:  7455505.8 i/s
Function with splat arguments:   252623.5 i/s - 29.51x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.018M i/100ms
Sequential Assignment
                         1.033M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.188M (± 0.8%) i/s -     51.934M in   5.098036s
Sequential Assignment
                         10.299M (± 1.8%) i/s -     51.648M in   5.016626s

Comparison:
Sequential Assignment: 10298871.0 i/s
 Parallel Assignment: 10187699.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   435.839k i/100ms
       attr_accessor   451.174k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.395M (± 0.9%) i/s -     22.228M in   5.057893s
       attr_accessor      4.506M (± 0.7%) i/s -     22.559M in   5.007000s

Comparison:
       attr_accessor:  4505665.8 i/s
   getter_and_setter:  4395034.8 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    88.822k i/100ms
         respond_to?   753.654k i/100ms
Calculating -------------------------------------
      begin...rescue    894.233k (± 1.2%) i/s -      4.530M in   5.066418s
         respond_to?      7.530M (± 1.2%) i/s -     37.683M in   5.005256s

Comparison:
         respond_to?:  7529671.9 i/s
      begin...rescue:   894232.7 i/s - 8.42x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              normal   298.216k i/100ms
             &method   118.074k i/100ms
Calculating -------------------------------------
              normal      2.962M (± 0.2%) i/s -     14.911M in   5.033619s
             &method      1.180M (± 0.6%) i/s -      5.904M in   5.001674s

Comparison:
              normal:  2962255.0 i/s
             &method:  1180384.3 i/s - 2.51x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       261.000  i/100ms
       define_method   316.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.329k (±17.3%) i/s -     10.962k in   5.049787s
       define_method      3.200k (±19.4%) i/s -     14.536k in   5.027927s

Comparison:
       define_method:     3200.4 i/s
module_eval with string:     2328.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Float#round   251.845k i/100ms
       Kernel#format   201.724k i/100ms
            String#%   172.061k i/100ms
Calculating -------------------------------------
         Float#round      2.549M (± 0.3%) i/s -     12.844M in   5.038868s
       Kernel#format      2.035M (± 0.7%) i/s -     10.288M in   5.054563s
            String#%      1.722M (± 0.5%) i/s -      8.775M in   5.096268s

Comparison:
         Float#round:  2549032.5 i/s
       Kernel#format:  2035461.4 i/s - 1.25x  (± 0.00) slower
            String#%:  1721916.8 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash   876.333k i/100ms
          OpenStruct   495.578k i/100ms
Calculating -------------------------------------
                Hash      8.770M (± 1.6%) i/s -     44.693M in   5.097302s
          OpenStruct      4.921M (± 0.5%) i/s -     24.779M in   5.035466s

Comparison:
                Hash:  8770094.7 i/s
          OpenStruct:  4920986.5 i/s - 1.78x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.123M i/100ms
          OpenStruct     9.872k i/100ms
Calculating -------------------------------------
                Hash     11.236M (± 0.3%) i/s -     57.289M in   5.098642s
          OpenStruct     96.992k (± 2.0%) i/s -    493.600k in   5.091162s

Comparison:
                Hash: 11236189.9 i/s
          OpenStruct:    96991.8 i/s - 115.85x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   602.557k i/100ms
  ancestors.include?   126.902k i/100ms
Calculating -------------------------------------
  less than or equal      6.050M (± 0.5%) i/s -     30.730M in   5.079929s
  ancestors.include?      1.262M (± 0.8%) i/s -      6.345M in   5.027416s

Comparison:
  less than or equal:  6049504.5 i/s
  ancestors.include?:  1262188.9 i/s - 4.79x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.793  (± 0.0%) i/s -      4.000  in   5.075685s
         Kernel loop      0.215  (± 0.0%) i/s -      2.000  in   9.314239s

Comparison:
          While Loop:        0.8 i/s
         Kernel loop:        0.2 i/s - 3.69x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.558M i/100ms
         Array#first     1.341M i/100ms
Calculating -------------------------------------
           Array#[0]     15.515M (± 0.7%) i/s -     77.881M in   5.020035s
         Array#first     13.394M (± 0.5%) i/s -     67.062M in   5.006847s

Comparison:
           Array#[0]: 15514942.5 i/s
         Array#first: 13394425.8 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.541M i/100ms
          Array#last     1.306M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.350M (± 0.3%) i/s -     77.074M in   5.021194s
          Array#last     13.308M (± 0.8%) i/s -     66.581M in   5.003291s

Comparison:
          Array#[-1]: 15349847.4 i/s
          Array#last: 13308448.3 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    96.818k i/100ms
Calculating -------------------------------------
                find      0.265  (± 0.0%) i/s -      2.000  in   7.539675s
             bsearch    965.335k (± 1.3%) i/s -      4.841M in   5.015607s

Comparison:
             bsearch:   965335.5 i/s
                find:        0.3 i/s - 3639138.09x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    19.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    190.550  (± 2.1%) i/s -    969.000  in   5.088136s
        Array#insert      1.438  (± 0.0%) i/s -      8.000  in   5.563375s

Comparison:
       Array#unshift:      190.6 i/s
        Array#insert:        1.4 i/s - 132.51x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.151M i/100ms
          Array#size     2.108M i/100ms
         Array#count     1.588M i/100ms
Calculating -------------------------------------
        Array#length     21.421M (± 0.5%) i/s -    107.560M in   5.021248s
          Array#size     21.019M (± 0.4%) i/s -    105.416M in   5.015316s
         Array#count     15.949M (± 2.2%) i/s -     80.975M in   5.079931s

Comparison:
        Array#length: 21421441.9 i/s
          Array#size: 21019177.9 i/s - 1.02x  (± 0.00) slower
         Array#count: 15948929.8 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    46.280k i/100ms
        Array#sample     1.039M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    465.459k (± 0.7%) i/s -      2.360M in   5.071088s
        Array#sample     10.384M (± 0.4%) i/s -     52.970M in   5.101293s

Comparison:
        Array#sample: 10383898.7 i/s
 Array#shuffle.first:   465458.9 i/s - 22.31x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    62.250k i/100ms
          Date.parse    31.174k i/100ms
Calculating -------------------------------------
        Date.iso8601    624.743k (± 0.5%) i/s -      3.175M in   5.081838s
          Date.parse    308.157k (± 0.2%) i/s -      1.559M in   5.058158s

Comparison:
        Date.iso8601:   624743.1 i/s
          Date.parse:   308157.2 i/s - 2.03x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.344k i/100ms
           Array#map    26.889k i/100ms
Calculating -------------------------------------
   Array#each + push    183.749k (± 0.2%) i/s -    935.544k in   5.091452s
           Array#map    269.243k (± 0.6%) i/s -      1.371M in   5.093487s

Comparison:
           Array#map:   269243.2 i/s
   Array#each + push:   183748.5 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            For loop    27.306k i/100ms
               #each    30.878k i/100ms
Calculating -------------------------------------
            For loop    273.137k (± 0.3%) i/s -      1.393M in   5.098610s
               #each    308.934k (± 0.4%) i/s -      1.575M in   5.097543s

Comparison:
               #each:   308933.5 i/s
            For loop:   273136.9 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.183k i/100ms
     each_with_index    18.722k i/100ms
Calculating -------------------------------------
          While Loop    271.915k (± 0.3%) i/s -      1.386M in   5.098434s
     each_with_index    187.428k (± 0.4%) i/s -    954.822k in   5.094427s

Comparison:
          While Loop:   271915.3 i/s
     each_with_index:   187428.3 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    72.155k i/100ms
      inject to_proc     2.015k i/100ms
        inject block     1.952k i/100ms
Calculating -------------------------------------
       inject symbol    721.054k (± 0.6%) i/s -      3.608M in   5.003650s
      inject to_proc     20.137k (± 0.8%) i/s -    100.750k in   5.003633s
        inject block     19.429k (± 1.4%) i/s -     97.600k in   5.024583s

Comparison:
       inject symbol:   721054.1 i/s
      inject to_proc:    20136.6 i/s - 35.81x  (± 0.00) slower
        inject block:    19428.5 i/s - 37.11x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     7.624k i/100ms
   Array#map.flatten     3.898k i/100ms
      Array#flat_map     9.534k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     74.425k (± 1.3%) i/s -    373.576k in   5.020355s
   Array#map.flatten     39.038k (± 0.9%) i/s -    198.798k in   5.092847s
      Array#flat_map     95.532k (± 0.7%) i/s -    486.234k in   5.090011s

Comparison:
      Array#flat_map:    95532.2 i/s
Array#map.flatten(1):    74424.9 i/s - 1.28x  (± 0.00) slower
   Array#map.flatten:    39037.7 i/s - 2.45x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    31.173k i/100ms
  Array#reverse_each    31.381k i/100ms
Calculating -------------------------------------
  Array#reverse.each    311.118k (± 0.4%) i/s -      1.559M in   5.009918s
  Array#reverse_each    318.857k (± 0.4%) i/s -      1.600M in   5.019341s

Comparison:
  Array#reverse_each:   318857.3 i/s
  Array#reverse.each:   311118.3 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        19.310k i/100ms
   Enumerable#detect    78.950k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        193.371k (± 0.6%) i/s -      3.881M in  20.072533s
   Enumerable#detect    794.226k (± 0.6%) i/s -     15.948M in  20.080600s

Comparison:
   Enumerable#detect:   794226.4 i/s
Enumerable#select.first:   193371.4 i/s - 4.11x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       234.387k i/100ms
Enumerable#select.last
                        18.190k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.376M (± 0.8%) i/s -     11.954M in   5.031615s
Enumerable#select.last
                        181.216k (± 1.3%) i/s -    909.500k in   5.019742s

Comparison:
Enumerable#reverse.detect:  2375876.8 i/s
Enumerable#select.last:   181216.3 i/s - 13.11x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.896k i/100ms
  Enumerable#sort_by     4.791k i/100ms
     Enumerable#sort     2.404k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         49.892k (± 2.6%) i/s -    249.696k in   5.008166s
  Enumerable#sort_by     47.163k (± 0.9%) i/s -    239.550k in   5.079617s
     Enumerable#sort     23.983k (± 0.3%) i/s -    120.200k in   5.011953s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    49891.6 i/s
  Enumerable#sort_by:    47163.2 i/s - 1.06x  (± 0.00) slower
     Enumerable#sort:    23982.9 i/s - 2.08x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    16.996k i/100ms
Enumerable#sort_by...first
                         8.587k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    169.240k (± 1.6%) i/s -    849.800k in   5.022722s
Enumerable#sort_by...first
                         84.991k (± 0.7%) i/s -    429.350k in   5.051966s

Comparison:
   Enumerable#min_by:   169239.6 i/s
Enumerable#sort_by...first:    84990.9 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   415.902k i/100ms
            Hash#dup   317.541k i/100ms
Calculating -------------------------------------
              Hash[]      4.097M (± 1.4%) i/s -     20.795M in   5.076192s
            Hash#dup      2.972M (± 1.7%) i/s -     14.924M in   5.022297s

Comparison:
              Hash[]:  4097342.5 i/s
            Hash#dup:  2972460.7 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.377M i/100ms
  Hash#fetch, symbol     1.195M i/100ms
     Hash#[], string     1.232M i/100ms
  Hash#fetch, string   742.287k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     13.773M (± 0.2%) i/s -     70.209M in   5.097487s
  Hash#fetch, symbol     11.953M (± 0.2%) i/s -     60.952M in   5.099518s
     Hash#[], string     12.417M (± 0.7%) i/s -     62.854M in   5.062388s
  Hash#fetch, string      7.360M (± 0.8%) i/s -     37.114M in   5.043274s

Comparison:
     Hash#[], symbol: 13773270.9 i/s
     Hash#[], string: 12416535.3 i/s - 1.11x  (± 0.00) slower
  Hash#fetch, symbol: 11952527.8 i/s - 1.15x  (± 0.00) slower
  Hash#fetch, string:  7359694.6 i/s - 1.87x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   783.862k i/100ms
             Hash#[]   962.630k i/100ms
          Hash#[] ||   864.652k i/100ms
          Hash#[] &&   366.172k i/100ms
          Hash#fetch   581.687k i/100ms
 Hash#fetch fallback   387.108k i/100ms
Calculating -------------------------------------
            Hash#dig      7.962M (± 0.7%) i/s -     39.977M in   5.021095s
             Hash#[]      9.591M (± 1.1%) i/s -     48.132M in   5.019097s
          Hash#[] ||      8.682M (± 0.6%) i/s -     44.097M in   5.079258s
          Hash#[] &&      3.611M (± 1.1%) i/s -     18.309M in   5.070397s
          Hash#fetch      6.040M (± 0.5%) i/s -     30.248M in   5.008064s
 Hash#fetch fallback      3.823M (± 1.1%) i/s -     19.355M in   5.062984s

Comparison:
             Hash#[]:  9590852.6 i/s
          Hash#[] ||:  8682145.0 i/s - 1.10x  (± 0.00) slower
            Hash#dig:  7962220.2 i/s - 1.20x  (± 0.00) slower
          Hash#fetch:  6039976.7 i/s - 1.59x  (± 0.00) slower
 Hash#fetch fallback:  3823370.3 i/s - 2.51x  (± 0.00) slower
          Hash#[] &&:  3611340.8 i/s - 2.66x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.409M i/100ms
  Hash#fetch + block     1.413M i/100ms
    Hash#fetch + arg     1.076M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.043M (± 0.4%) i/s -     70.450M in   5.016808s
  Hash#fetch + block     13.755M (± 0.6%) i/s -     69.251M in   5.034919s
    Hash#fetch + arg     10.530M (± 1.0%) i/s -     52.726M in   5.007953s

Comparison:
  Hash#fetch + const: 14043013.8 i/s
  Hash#fetch + block: 13754744.0 i/s - 1.02x  (± 0.00) slower
    Hash#fetch + arg: 10529596.3 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    26.094k i/100ms
         sort + to_h    11.457k i/100ms
Calculating -------------------------------------
      sort_by + to_h    261.086k (± 0.5%) i/s -      1.331M in   5.097279s
         sort + to_h    113.589k (± 2.3%) i/s -    572.850k in   5.045981s

Comparison:
      sort_by + to_h:   261085.9 i/s
         sort + to_h:   113589.4 i/s - 2.30x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   187.319k i/100ms
       Hash#each_key   173.760k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.829M (± 0.4%) i/s -      9.179M in   5.018041s
       Hash#each_key      1.713M (± 0.4%) i/s -      8.688M in   5.070722s

Comparison:
      Hash#keys.each:  1829161.9 i/s
       Hash#each_key:  1713399.6 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.278k i/100ms
           Hash#key?     1.032M i/100ms
Calculating -------------------------------------
  Hash#keys.include?     12.666k (± 4.0%) i/s -     63.900k in   5.054687s
           Hash#key?     10.289M (± 0.5%) i/s -     51.584M in   5.013685s

Comparison:
           Hash#key?: 10288897.8 i/s
  Hash#keys.include?:    12666.3 i/s - 812.30x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.798k i/100ms
            Hash#[]=    10.318k i/100ms
Calculating -------------------------------------
         Hash#merge!     37.578k (± 0.5%) i/s -    189.900k in   5.053588s
            Hash#[]=    102.905k (± 0.8%) i/s -    515.900k in   5.013700s

Comparison:
            Hash#[]=:   102905.0 i/s
         Hash#merge!:    37578.2 i/s - 2.74x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.503k i/100ms
      Hash#merge({})     3.826k i/100ms
 Hash#dup#merge!({})     2.756k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         45.075k (± 0.5%) i/s -    229.653k in   5.095015s
      Hash#merge({})     38.112k (± 0.6%) i/s -    191.300k in   5.019605s
 Hash#dup#merge!({})     27.543k (± 2.0%) i/s -    137.800k in   5.005468s

Comparison:
{}#merge!(Hash) do end:    45075.2 i/s
      Hash#merge({}):    38111.9 i/s - 1.18x  (± 0.00) slower
 Hash#dup#merge!({}):    27542.7 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   369.015k i/100ms
          Hash#merge   327.740k i/100ms
Calculating -------------------------------------
        Hash#**other      3.726M (± 0.8%) i/s -     18.820M in   5.051585s
          Hash#merge      3.268M (± 0.6%) i/s -     16.387M in   5.014356s

Comparison:
        Hash#**other:  3725757.4 i/s
          Hash#merge:  3268142.7 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.650k i/100ms
         Hash#merge!     3.744k i/100ms
Calculating -------------------------------------
          Hash#merge     16.330k (± 0.7%) i/s -     82.500k in   5.052401s
         Hash#merge!     36.947k (± 0.3%) i/s -    187.200k in   5.066707s

Comparison:
         Hash#merge!:    36947.3 i/s
          Hash#merge:    16329.6 i/s - 2.26x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      422.045k i/100ms
Array#each             206.323k i/100ms
Array#each_w/_object   165.565k i/100ms
Hash#select-include     74.027k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.197M (± 0.9%) i/s -     21.102M in   5.028360s
Array#each                2.057M (± 0.7%) i/s -     10.316M in   5.016090s
Array#each_w/_object      1.657M (± 0.4%) i/s -      8.444M in   5.096955s
Hash#select-include     743.035k (± 0.5%) i/s -      3.775M in   5.081157s

Comparison:
Hash#native-slice   :  4197038.8 i/s
Array#each          :  2056701.1 i/s - 2.04x  (± 0.00) slower
Array#each_w/_object:  1656669.5 i/s - 2.53x  (± 0.00) slower
Hash#select-include :   743035.3 i/s - 5.65x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.348k i/100ms
         Hash#value?     1.045k i/100ms
Calculating -------------------------------------
Hash#values.include?     13.276k (± 3.9%) i/s -     67.400k in   5.086289s
         Hash#value?     10.445k (± 0.5%) i/s -     52.250k in   5.002516s

Comparison:
Hash#values.include?:    13276.2 i/s
         Hash#value?:    10445.0 i/s - 1.27x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                call   657.243k i/100ms
                send   528.637k i/100ms
      method_missing   372.981k i/100ms
Calculating -------------------------------------
                call      6.561M (± 0.5%) i/s -     32.862M in   5.008649s
                send      5.177M (± 1.2%) i/s -     25.903M in   5.004524s
      method_missing      3.781M (± 0.4%) i/s -     19.022M in   5.031232s

Comparison:
                call:  6561278.6 i/s
                send:  5176678.8 i/s - 1.27x  (± 0.00) slower
      method_missing:  3780843.9 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
               Block     9.416k i/100ms
      Symbol#to_proc     9.075k i/100ms
Calculating -------------------------------------
               Block     93.915k (± 0.4%) i/s -    470.800k in   5.013128s
      Symbol#to_proc     90.722k (± 0.3%) i/s -    453.750k in   5.001595s

Comparison:
               Block:    93915.1 i/s
      Symbol#to_proc:    90721.8 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          block.call   952.135k i/100ms
       block + yield     1.006M i/100ms
        unused block     1.300M i/100ms
               yield     1.179M i/100ms
Calculating -------------------------------------
          block.call      9.577M (± 0.8%) i/s -     48.559M in   5.070678s
       block + yield     10.110M (± 0.1%) i/s -     51.314M in   5.075459s
        unused block     12.988M (± 0.2%) i/s -     64.992M in   5.004068s
               yield     11.792M (± 0.5%) i/s -     60.133M in   5.099620s

Comparison:
        unused block: 12987842.5 i/s
               yield: 11791990.9 i/s - 1.10x  (± 0.00) slower
       block + yield: 10110159.3 i/s - 1.28x  (± 0.00) slower
          block.call:  9576979.2 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   308.485k i/100ms
      range#include?    12.511k i/100ms
       range#member?    12.511k i/100ms
       plain compare   492.392k i/100ms
Calculating -------------------------------------
        range#cover?      3.115M (± 0.7%) i/s -     15.733M in   5.051500s
      range#include?    123.007k (± 2.1%) i/s -    625.550k in   5.088090s
       range#member?    123.434k (± 0.6%) i/s -    625.550k in   5.068054s
       plain compare      4.745M (± 1.6%) i/s -     24.127M in   5.086507s

Comparison:
       plain compare:  4744531.4 i/s
        range#cover?:  3114616.2 i/s - 1.52x  (± 0.00) slower
       range#member?:   123433.8 i/s - 38.44x  (± 0.00) slower
      range#include?:   123007.3 i/s - 38.57x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       String#match?   925.214k i/100ms
           String#=~   627.682k i/100ms
          Regexp#===   600.684k i/100ms
        String#match   483.358k i/100ms
Calculating -------------------------------------
       String#match?      9.102M (± 1.1%) i/s -     46.261M in   5.083057s
           String#=~      6.301M (± 0.7%) i/s -     32.012M in   5.080273s
          Regexp#===      5.942M (± 0.5%) i/s -     30.034M in   5.054963s
        String#match      4.834M (± 0.6%) i/s -     24.168M in   4.999944s

Comparison:
       String#match?:  9102005.3 i/s
           String#=~:  6301466.0 i/s - 1.44x  (± 0.00) slower
          Regexp#===:  5941687.8 i/s - 1.53x  (± 0.00) slower
        String#match:  4833827.1 i/s - 1.88x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   620.353k i/100ms
      String#casecmp   787.071k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.217M (± 0.5%) i/s -     31.638M in   5.089419s
      String#casecmp      7.858M (± 0.3%) i/s -     39.354M in   5.008433s

Comparison:
      String#casecmp:  7857544.2 i/s
String#downcase + ==:  6216594.2 i/s - 1.26x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            String#+   552.408k i/100ms
       String#concat   605.485k i/100ms
       String#append   663.421k i/100ms
         "foo" "bar"     1.113M i/100ms
  "#{'foo'}#{'bar'}"     1.176M i/100ms
Calculating -------------------------------------
            String#+      5.560M (± 0.6%) i/s -     28.173M in   5.067207s
       String#concat      6.101M (± 1.1%) i/s -     30.880M in   5.061913s
       String#append      6.636M (± 0.7%) i/s -     33.834M in   5.098625s
         "foo" "bar"     11.140M (± 1.3%) i/s -     56.755M in   5.095870s
  "#{'foo'}#{'bar'}"     11.772M (± 0.5%) i/s -     59.981M in   5.095182s

Comparison:
  "#{'foo'}#{'bar'}": 11772333.8 i/s
         "foo" "bar": 11139626.7 i/s - 1.06x  (± 0.00) slower
       String#append:  6636291.6 i/s - 1.77x  (± 0.00) slower
       String#concat:  6101160.6 i/s - 1.93x  (± 0.00) slower
            String#+:  5560010.2 i/s - 2.12x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#+@     1.004M i/100ms
          String#dup   565.214k i/100ms
Calculating -------------------------------------
           String#+@     10.040M (± 0.6%) i/s -     51.189M in   5.098752s
          String#dup      5.530M (± 2.3%) i/s -     27.695M in   5.011190s

Comparison:
           String#+@: 10039863.6 i/s
          String#dup:  5530161.4 i/s - 1.82x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   186.291k i/100ms
       String#match?   410.330k i/100ms
    String#end_with?   609.555k i/100ms
Calculating -------------------------------------
           String#=~      1.882M (± 0.6%) i/s -      9.501M in   5.049482s
       String#match?      4.133M (± 0.8%) i/s -     20.927M in   5.063704s
    String#end_with?      6.122M (± 0.6%) i/s -     31.087M in   5.077832s

Comparison:
    String#end_with?:  6122348.6 i/s
       String#match?:  4133011.8 i/s - 1.48x  (± 0.00) slower
           String#=~:  1881614.4 i/s - 3.25x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   108.390k i/100ms
          String#sub   130.745k i/100ms
String#dup["string"]=
                       173.513k i/100ms
Calculating -------------------------------------
         String#gsub      1.099M (± 0.7%) i/s -      5.528M in   5.030956s
          String#sub      1.358M (± 0.6%) i/s -      6.799M in   5.006905s
String#dup["string"]=
                          1.748M (± 0.6%) i/s -      8.849M in   5.061684s

Comparison:
String#dup["string"]=:  1748319.3 i/s
          String#sub:  1357920.9 i/s - 1.29x  (± 0.00) slower
         String#gsub:  1098826.6 i/s - 1.59x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   101.558k i/100ms
           String#tr   343.222k i/100ms
Calculating -------------------------------------
         String#gsub      1.019M (± 0.3%) i/s -      5.179M in   5.081441s
           String#tr      3.432M (± 0.7%) i/s -     17.161M in   5.000008s

Comparison:
           String#tr:  3432372.4 i/s
         String#gsub:  1019296.1 i/s - 3.37x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.156M i/100ms
         With Freeze     1.690M i/100ms
Calculating -------------------------------------
      Without Freeze     11.544M (± 0.4%) i/s -     57.783M in   5.005670s
         With Freeze     16.864M (± 0.5%) i/s -     84.524M in   5.012051s

Comparison:
         With Freeze: 16864461.4 i/s
      Without Freeze: 11543664.7 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.527k i/100ms
      String#squeeze   157.893k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     35.182k (± 0.6%) i/s -    176.350k in   5.012663s
      String#squeeze      1.590M (± 0.5%) i/s -      8.053M in   5.063166s

Comparison:
      String#squeeze:  1590458.9 i/s
 String#gsub/regex+/:    35182.0 i/s - 45.21x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   282.302k i/100ms
       String#match?   723.483k i/100ms
  String#start_with?   871.228k i/100ms
Calculating -------------------------------------
           String#=~      2.836M (± 1.1%) i/s -     14.397M in   5.077281s
       String#match?      7.227M (± 0.5%) i/s -     36.174M in   5.005643s
  String#start_with?      8.727M (± 0.4%) i/s -     44.433M in   5.091219s

Comparison:
  String#start_with?:  8727441.3 i/s
       String#match?:  7226885.9 i/s - 1.21x  (± 0.00) slower
           String#=~:  2836037.7 i/s - 3.08x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   198.539k i/100ms
    String#[0, n] ==    86.381k i/100ms
   String#[RANGE] ==    78.421k i/100ms
   String#[0...n] ==    43.916k i/100ms
Calculating -------------------------------------
  String#start_with?      2.033M (± 2.4%) i/s -     10.324M in   5.081718s
    String#[0, n] ==    857.097k (± 1.2%) i/s -      4.319M in   5.039873s
   String#[RANGE] ==    792.158k (± 0.8%) i/s -      3.999M in   5.049152s
   String#[0...n] ==    437.232k (± 1.1%) i/s -      2.196M in   5.022620s

Comparison:
  String#start_with?:  2032761.4 i/s
    String#[0, n] ==:   857097.5 i/s - 2.37x  (± 0.00) slower
   String#[RANGE] ==:   792158.0 i/s - 2.57x  (± 0.00) slower
   String#[0...n] ==:   437231.8 i/s - 4.65x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   173.892k i/100ms
 String#sub!'string'   123.756k i/100ms
String#gsub!'string'    76.267k i/100ms
  String#[/regexp/]=   149.364k i/100ms
 String#sub!/regexp/   116.019k i/100ms
String#gsub!/regexp/    60.832k i/100ms
Calculating -------------------------------------
  String#['string']=      1.769M (± 0.6%) i/s -      8.868M in   5.013411s
 String#sub!'string'      1.223M (± 0.5%) i/s -      6.188M in   5.060225s
String#gsub!'string'    762.467k (± 0.4%) i/s -      3.813M in   5.001413s
  String#[/regexp/]=      1.503M (± 0.6%) i/s -      7.618M in   5.069595s
 String#sub!/regexp/      1.138M (± 0.6%) i/s -      5.801M in   5.099808s
String#gsub!/regexp/    609.004k (± 0.5%) i/s -      3.102M in   5.094404s

Comparison:
  String#['string']=:  1769008.3 i/s
  String#[/regexp/]=:  1502660.5 i/s - 1.18x  (± 0.00) slower
 String#sub!'string':  1222856.4 i/s - 1.45x  (± 0.00) slower
 String#sub!/regexp/:  1137519.0 i/s - 1.56x  (± 0.00) slower
String#gsub!'string':   762467.1 i/s - 2.32x  (± 0.00) slower
String#gsub!/regexp/:   609003.6 i/s - 2.90x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          String#sub   140.596k i/100ms
        String#chomp   534.092k i/100ms
String#delete_suffix   611.677k i/100ms
Calculating -------------------------------------
          String#sub      1.423M (± 0.5%) i/s -      7.170M in   5.039452s
        String#chomp      5.337M (± 0.5%) i/s -     26.705M in   5.003690s
String#delete_suffix      6.066M (± 0.6%) i/s -     30.584M in   5.041750s

Comparison:
String#delete_suffix:  6066310.9 i/s
        String#chomp:  5337118.8 i/s - 1.14x  (± 0.00) slower
          String#sub:  1422883.6 i/s - 4.26x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   600.563k i/100ms
          String#sub   142.934k i/100ms
Calculating -------------------------------------
String#delete_prefix      5.973M (± 1.7%) i/s -     30.028M in   5.028690s
          String#sub      1.443M (± 0.5%) i/s -      7.290M in   5.053510s

Comparison:
String#delete_prefix:  5973032.5 i/s
          String#sub:  1442523.3 i/s - 4.14x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   605.028k i/100ms
    String#unpack[0]   462.608k i/100ms
Calculating -------------------------------------
      String#unpack1      6.039M (± 0.3%) i/s -     30.251M in   5.009692s
    String#unpack[0]      4.638M (± 2.3%) i/s -     23.593M in   5.090046s

Comparison:
      String#unpack1:  6038646.7 i/s
    String#unpack[0]:  4638058.5 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.112k i/100ms
          Time.parse     9.075k i/100ms
Calculating -------------------------------------
        Time.iso8601    272.411k (± 1.0%) i/s -      1.383M in   5.076394s
          Time.parse     90.968k (± 0.5%) i/s -    462.825k in   5.087926s

Comparison:
        Time.iso8601:   272411.0 i/s
          Time.parse:    90968.0 i/s - 2.99x  (± 0.00) slower

