$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       748.189k i/100ms
Function with splat arguments
                        26.926k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.725M (± 0.4%) i/s -     38.906M in   5.036174s
Function with splat arguments
                        270.482k (± 5.8%) i/s -      1.346M in   5.002996s

Comparison:
Function with single Array argument:  7725425.7 i/s
Function with splat arguments:   270481.8 i/s - 28.56x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.010M i/100ms
Sequential Assignment
                         1.015M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.197M (± 0.8%) i/s -     51.521M in   5.053107s
Sequential Assignment
                         10.161M (± 0.4%) i/s -     51.762M in   5.094410s

Comparison:
 Parallel Assignment: 10196624.2 i/s
Sequential Assignment: 10160640.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   483.922k i/100ms
       attr_accessor   558.190k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.837M (± 0.3%) i/s -     24.196M in   5.002196s
       attr_accessor      5.519M (± 0.5%) i/s -     27.910M in   5.056788s

Comparison:
       attr_accessor:  5519378.2 i/s
   getter_and_setter:  4837145.1 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    88.207k i/100ms
         respond_to?   788.546k i/100ms
Calculating -------------------------------------
      begin...rescue    888.806k (± 2.8%) i/s -      4.499M in   5.066210s
         respond_to?      7.898M (± 0.3%) i/s -     40.216M in   5.091971s

Comparison:
         respond_to?:  7897971.5 i/s
      begin...rescue:   888805.6 i/s - 8.89x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              normal   298.556k i/100ms
             &method   125.013k i/100ms
Calculating -------------------------------------
              normal      2.984M (± 0.5%) i/s -     14.928M in   5.002236s
             &method      1.239M (± 0.3%) i/s -      6.251M in   5.043756s

Comparison:
              normal:  2984293.3 i/s
             &method:  1239296.9 i/s - 2.41x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       267.000  i/100ms
       define_method   258.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.396k (±21.1%) i/s -     10.680k in   5.062170s
       define_method      3.288k (±19.9%) i/s -     14.964k in   5.067647s

Comparison:
       define_method:     3287.9 i/s
module_eval with string:     2396.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Float#round   262.232k i/100ms
       Kernel#format   197.516k i/100ms
            String#%   172.479k i/100ms
Calculating -------------------------------------
         Float#round      2.583M (± 0.7%) i/s -     13.112M in   5.076468s
       Kernel#format      1.975M (± 1.5%) i/s -      9.876M in   5.002659s
            String#%      1.697M (± 1.2%) i/s -      8.624M in   5.082363s

Comparison:
         Float#round:  2582944.2 i/s
       Kernel#format:  1974548.3 i/s - 1.31x  (± 0.00) slower
            String#%:  1697102.1 i/s - 1.52x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash   902.201k i/100ms
          OpenStruct   503.455k i/100ms
Calculating -------------------------------------
                Hash      8.971M (± 0.4%) i/s -     45.110M in   5.028362s
          OpenStruct      5.075M (± 0.7%) i/s -     25.676M in   5.059896s

Comparison:
                Hash:  8971300.4 i/s
          OpenStruct:  5074699.7 i/s - 1.77x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.101M i/100ms
          OpenStruct    11.669k i/100ms
Calculating -------------------------------------
                Hash     11.706M (± 0.2%) i/s -     59.431M in   5.076989s
          OpenStruct    117.808k (± 2.6%) i/s -    595.119k in   5.054938s

Comparison:
                Hash: 11706090.3 i/s
          OpenStruct:   117808.0 i/s - 99.37x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   584.909k i/100ms
  ancestors.include?   120.389k i/100ms
Calculating -------------------------------------
  less than or equal      5.926M (± 1.1%) i/s -     29.830M in   5.034218s
  ancestors.include?      1.195M (± 1.5%) i/s -      6.019M in   5.039611s

Comparison:
  less than or equal:  5926203.6 i/s
  ancestors.include?:  1194705.9 i/s - 4.96x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.591  (± 0.0%) i/s -      3.000  in   5.083354s
         Kernel loop      0.228  (± 0.0%) i/s -      2.000  in   8.770217s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 2.59x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.572M i/100ms
         Array#first     1.326M i/100ms
Calculating -------------------------------------
           Array#[0]     15.709M (± 0.3%) i/s -     78.575M in   5.001997s
         Array#first     13.294M (± 0.3%) i/s -     67.614M in   5.086174s

Comparison:
           Array#[0]: 15708866.6 i/s
         Array#first: 13293764.2 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.539M i/100ms
          Array#last     1.331M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.578M (± 0.4%) i/s -     78.501M in   5.039281s
          Array#last     13.286M (± 0.8%) i/s -     66.565M in   5.010490s

Comparison:
          Array#[-1]: 15578058.6 i/s
          Array#last: 13285879.4 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    99.666k i/100ms
Calculating -------------------------------------
                find      0.267  (± 0.0%) i/s -      2.000  in   7.480392s
             bsearch    996.363k (± 1.2%) i/s -      4.983M in   5.002234s

Comparison:
             bsearch:   996363.4 i/s
                find:        0.3 i/s - 3726512.59x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    17.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    182.012  (± 2.2%) i/s -    918.000  in   5.046350s
        Array#insert      1.435  (± 0.0%) i/s -      8.000  in   5.576103s

Comparison:
       Array#unshift:      182.0 i/s
        Array#insert:        1.4 i/s - 126.86x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.125M i/100ms
          Array#size     2.105M i/100ms
         Array#count     1.640M i/100ms
Calculating -------------------------------------
        Array#length     21.243M (± 0.4%) i/s -    106.235M in   5.000997s
          Array#size     20.923M (± 0.4%) i/s -    105.242M in   5.030059s
         Array#count     16.395M (± 0.5%) i/s -     82.002M in   5.001795s

Comparison:
        Array#length: 21243002.3 i/s
          Array#size: 20922935.5 i/s - 1.02x  (± 0.00) slower
         Array#count: 16394848.1 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    46.414k i/100ms
        Array#sample     1.014M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    463.567k (± 0.5%) i/s -      2.321M in   5.006324s
        Array#sample     10.197M (± 0.3%) i/s -     51.723M in   5.072479s

Comparison:
        Array#sample: 10196858.2 i/s
 Array#shuffle.first:   463566.6 i/s - 22.00x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    64.223k i/100ms
          Date.parse    32.526k i/100ms
Calculating -------------------------------------
        Date.iso8601    647.061k (± 0.5%) i/s -      3.275M in   5.062065s
          Date.parse    323.252k (± 2.6%) i/s -      1.626M in   5.034996s

Comparison:
        Date.iso8601:   647061.0 i/s
          Date.parse:   323251.7 i/s - 2.00x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    19.023k i/100ms
           Array#map    26.812k i/100ms
Calculating -------------------------------------
   Array#each + push    191.501k (± 1.3%) i/s -    970.173k in   5.067107s
           Array#map    269.445k (± 0.7%) i/s -      1.367M in   5.075172s

Comparison:
           Array#map:   269444.9 i/s
   Array#each + push:   191500.8 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            For loop    29.757k i/100ms
               #each    32.481k i/100ms
Calculating -------------------------------------
            For loop    297.217k (± 0.4%) i/s -      1.488M in   5.006044s
               #each    324.983k (± 0.6%) i/s -      1.657M in   5.097463s

Comparison:
               #each:   324983.5 i/s
            For loop:   297216.7 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.416k i/100ms
     each_with_index    19.237k i/100ms
Calculating -------------------------------------
          While Loop    281.151k (± 0.4%) i/s -      1.426M in   5.070779s
     each_with_index    192.875k (± 0.3%) i/s -    981.087k in   5.086690s

Comparison:
          While Loop:   281151.3 i/s
     each_with_index:   192875.0 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    93.126k i/100ms
      inject to_proc     2.210k i/100ms
        inject block     2.106k i/100ms
Calculating -------------------------------------
       inject symbol      1.045M (±16.5%) i/s -      5.122M in   5.021482s
      inject to_proc     21.994k (± 0.4%) i/s -    110.500k in   5.024185s
        inject block     21.078k (± 0.5%) i/s -    107.406k in   5.095854s

Comparison:
       inject symbol:  1045311.3 i/s
      inject to_proc:    21993.9 i/s - 47.53x  (± 0.00) slower
        inject block:    21077.6 i/s - 49.59x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.905k i/100ms
   Array#map.flatten     4.022k i/100ms
      Array#flat_map     9.686k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     69.308k (± 0.7%) i/s -    352.155k in   5.081245s
   Array#map.flatten     39.735k (± 3.0%) i/s -    201.100k in   5.066738s
      Array#flat_map     96.509k (± 0.7%) i/s -    484.300k in   5.018473s

Comparison:
      Array#flat_map:    96508.9 i/s
Array#map.flatten(1):    69308.5 i/s - 1.39x  (± 0.00) slower
   Array#map.flatten:    39734.5 i/s - 2.43x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    30.787k i/100ms
  Array#reverse_each    31.920k i/100ms
Calculating -------------------------------------
  Array#reverse.each    313.407k (± 0.5%) i/s -      1.570M in   5.010009s
  Array#reverse_each    320.588k (± 0.2%) i/s -      1.628M in   5.077950s

Comparison:
  Array#reverse_each:   320587.6 i/s
  Array#reverse.each:   313406.6 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.757k i/100ms
   Enumerable#detect    82.462k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        208.815k (± 0.9%) i/s -      4.193M in  20.081357s
   Enumerable#detect    824.636k (± 0.3%) i/s -     16.492M in  19.999852s

Comparison:
   Enumerable#detect:   824635.9 i/s
Enumerable#select.first:   208815.0 i/s - 3.95x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       244.766k i/100ms
Enumerable#select.last
                        18.405k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.455M (± 0.6%) i/s -     12.483M in   5.084012s
Enumerable#select.last
                        184.359k (± 0.4%) i/s -    938.655k in   5.091530s

Comparison:
Enumerable#reverse.detect:  2455443.5 i/s
Enumerable#select.last:   184359.3 i/s - 13.32x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         5.105k i/100ms
  Enumerable#sort_by     4.830k i/100ms
     Enumerable#sort     2.401k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         51.121k (± 0.4%) i/s -    260.355k in   5.093031s
  Enumerable#sort_by     48.372k (± 0.5%) i/s -    246.330k in   5.092592s
     Enumerable#sort     24.436k (± 2.4%) i/s -    122.451k in   5.014599s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    51120.8 i/s
  Enumerable#sort_by:    48371.6 i/s - 1.06x  (± 0.00) slower
     Enumerable#sort:    24435.8 i/s - 2.09x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    18.077k i/100ms
Enumerable#sort_by...first
                         9.024k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    180.568k (± 0.5%) i/s -    903.850k in   5.005710s
Enumerable#sort_by...first
                         90.222k (± 0.7%) i/s -    451.200k in   5.001237s

Comparison:
   Enumerable#min_by:   180567.6 i/s
Enumerable#sort_by...first:    90221.7 i/s - 2.00x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   420.684k i/100ms
            Hash#dup   307.646k i/100ms
Calculating -------------------------------------
              Hash[]      3.998M (± 2.6%) i/s -     20.193M in   5.054352s
            Hash#dup      2.954M (± 1.5%) i/s -     15.075M in   5.104024s

Comparison:
              Hash[]:  3997750.2 i/s
            Hash#dup:  2954198.1 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.439M i/100ms
  Hash#fetch, symbol     1.187M i/100ms
     Hash#[], string     1.245M i/100ms
  Hash#fetch, string   804.076k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.307M (± 2.8%) i/s -     71.960M in   5.034514s
  Hash#fetch, symbol     11.879M (± 0.4%) i/s -     60.546M in   5.096791s
     Hash#[], string     12.473M (± 0.2%) i/s -     63.516M in   5.092164s
  Hash#fetch, string      7.924M (± 4.2%) i/s -     40.204M in   5.084384s

Comparison:
     Hash#[], symbol: 14306857.2 i/s
     Hash#[], string: 12473285.6 i/s - 1.15x  (± 0.00) slower
  Hash#fetch, symbol: 11879354.0 i/s - 1.20x  (± 0.00) slower
  Hash#fetch, string:  7924247.6 i/s - 1.81x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   872.722k i/100ms
             Hash#[]     1.019M i/100ms
          Hash#[] ||   888.940k i/100ms
          Hash#[] &&   393.591k i/100ms
          Hash#fetch   612.235k i/100ms
 Hash#fetch fallback   399.473k i/100ms
Calculating -------------------------------------
            Hash#dig      8.759M (± 0.7%) i/s -     44.509M in   5.081885s
             Hash#[]     10.261M (± 1.5%) i/s -     51.958M in   5.065094s
          Hash#[] ||      9.370M (± 1.9%) i/s -     47.114M in   5.029799s
          Hash#[] &&      3.816M (± 2.1%) i/s -     19.286M in   5.056268s
          Hash#fetch      6.052M (± 1.1%) i/s -     30.612M in   5.058593s
 Hash#fetch fallback      3.908M (± 0.8%) i/s -     19.574M in   5.009154s

Comparison:
             Hash#[]: 10260620.9 i/s
          Hash#[] ||:  9370279.0 i/s - 1.10x  (± 0.00) slower
            Hash#dig:  8758755.9 i/s - 1.17x  (± 0.00) slower
          Hash#fetch:  6052159.6 i/s - 1.70x  (± 0.00) slower
 Hash#fetch fallback:  3907947.3 i/s - 2.63x  (± 0.00) slower
          Hash#[] &&:  3816134.9 i/s - 2.69x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.449M i/100ms
  Hash#fetch + block     1.426M i/100ms
    Hash#fetch + arg     1.091M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.670M (± 0.5%) i/s -     73.916M in   5.038660s
  Hash#fetch + block     14.303M (± 0.5%) i/s -     72.706M in   5.083246s
    Hash#fetch + arg     10.972M (± 0.5%) i/s -     55.616M in   5.069130s

Comparison:
  Hash#fetch + const: 14670042.4 i/s
  Hash#fetch + block: 14303497.0 i/s - 1.03x  (± 0.00) slower
    Hash#fetch + arg: 10971885.3 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.826k i/100ms
         sort + to_h    11.419k i/100ms
Calculating -------------------------------------
      sort_by + to_h    278.174k (± 1.3%) i/s -      1.391M in   5.002500s
         sort + to_h    113.399k (± 0.5%) i/s -    570.950k in   5.034998s

Comparison:
      sort_by + to_h:   278173.5 i/s
         sort + to_h:   113399.1 i/s - 2.45x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   187.898k i/100ms
       Hash#each_key   208.428k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.980M (± 0.3%) i/s -      9.959M in   5.029216s
       Hash#each_key      2.026M (± 0.3%) i/s -     10.213M in   5.039913s

Comparison:
       Hash#each_key:  2026439.8 i/s
      Hash#keys.each:  1980167.4 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.214k i/100ms
           Hash#key?   998.967k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     11.722k (± 3.5%) i/s -     59.486k in   5.081273s
           Hash#key?      9.976M (± 0.6%) i/s -     49.948M in   5.006886s

Comparison:
           Hash#key?:  9976239.0 i/s
  Hash#keys.include?:    11722.1 i/s - 851.06x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.004k i/100ms
            Hash#[]=    10.566k i/100ms
Calculating -------------------------------------
         Hash#merge!     39.787k (± 0.8%) i/s -    200.200k in   5.032111s
            Hash#[]=    104.612k (± 1.0%) i/s -    528.300k in   5.050581s

Comparison:
            Hash#[]=:   104612.4 i/s
         Hash#merge!:    39786.8 i/s - 2.63x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.745k i/100ms
      Hash#merge({})     4.019k i/100ms
 Hash#dup#merge!({})     2.914k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         47.563k (± 0.5%) i/s -    241.995k in   5.087984s
      Hash#merge({})     39.971k (± 0.5%) i/s -    200.950k in   5.027592s
 Hash#dup#merge!({})     29.008k (± 0.4%) i/s -    145.700k in   5.022847s

Comparison:
{}#merge!(Hash) do end:    47563.3 i/s
      Hash#merge({}):    39970.6 i/s - 1.19x  (± 0.00) slower
 Hash#dup#merge!({}):    29007.8 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   396.825k i/100ms
          Hash#merge   365.179k i/100ms
Calculating -------------------------------------
        Hash#**other      3.944M (± 0.3%) i/s -     19.841M in   5.031150s
          Hash#merge      3.655M (± 0.6%) i/s -     18.624M in   5.095570s

Comparison:
        Hash#**other:  3943729.4 i/s
          Hash#merge:  3655110.2 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.695k i/100ms
         Hash#merge!     3.952k i/100ms
Calculating -------------------------------------
          Hash#merge     16.697k (± 1.1%) i/s -     84.750k in   5.076295s
         Hash#merge!     39.525k (± 0.7%) i/s -    201.552k in   5.099623s

Comparison:
         Hash#merge!:    39524.8 i/s
          Hash#merge:    16697.5 i/s - 2.37x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      416.690k i/100ms
Array#each             229.663k i/100ms
Array#each_w/_object   176.257k i/100ms
Hash#select-include     72.448k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.160M (± 0.5%) i/s -     20.834M in   5.008853s
Array#each                2.290M (± 0.4%) i/s -     11.483M in   5.014819s
Array#each_w/_object      1.761M (± 0.4%) i/s -      8.813M in   5.005149s
Hash#select-include     725.682k (± 0.6%) i/s -      3.695M in   5.091727s

Comparison:
Hash#native-slice   :  4159622.4 i/s
Array#each          :  2289877.2 i/s - 1.82x  (± 0.00) slower
Array#each_w/_object:  1760779.2 i/s - 2.36x  (± 0.00) slower
Hash#select-include :   725682.3 i/s - 5.73x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     9.272k i/100ms
         Hash#value?    17.465k i/100ms
Calculating -------------------------------------
Hash#values.include?     90.807k (± 9.1%) i/s -    454.328k in   5.077860s
         Hash#value?    170.706k (± 1.1%) i/s -    855.785k in   5.013774s

Comparison:
         Hash#value?:   170706.1 i/s
Hash#values.include?:    90807.4 i/s - 1.88x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                call   662.702k i/100ms
                send   528.162k i/100ms
      method_missing   392.638k i/100ms
Calculating -------------------------------------
                call      6.666M (± 0.4%) i/s -     33.798M in   5.070379s
                send      5.267M (± 0.5%) i/s -     26.408M in   5.013963s
      method_missing      3.943M (± 0.6%) i/s -     20.025M in   5.079102s

Comparison:
                call:  6665865.9 i/s
                send:  5267037.5 i/s - 1.27x  (± 0.00) slower
      method_missing:  3942662.6 i/s - 1.69x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
               Block     9.164k i/100ms
      Symbol#to_proc    10.388k i/100ms
Calculating -------------------------------------
               Block     91.420k (± 2.3%) i/s -    458.200k in   5.015091s
      Symbol#to_proc    103.273k (± 0.6%) i/s -    519.400k in   5.029568s

Comparison:
      Symbol#to_proc:   103273.5 i/s
               Block:    91420.2 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          block.call   940.672k i/100ms
       block + yield   996.305k i/100ms
        unused block     1.140M i/100ms
               yield   959.363k i/100ms
Calculating -------------------------------------
          block.call      9.379M (± 0.7%) i/s -     47.034M in   5.015081s
       block + yield      9.981M (± 0.3%) i/s -     50.812M in   5.090711s
        unused block     11.385M (± 0.3%) i/s -     56.983M in   5.005175s
               yield      9.614M (± 0.4%) i/s -     48.928M in   5.089226s

Comparison:
        unused block: 11384955.7 i/s
       block + yield:  9981340.1 i/s - 1.14x  (± 0.00) slower
               yield:  9614067.7 i/s - 1.18x  (± 0.00) slower
          block.call:  9378877.9 i/s - 1.21x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   322.720k i/100ms
      range#include?    12.619k i/100ms
       range#member?    12.608k i/100ms
       plain compare   533.585k i/100ms
Calculating -------------------------------------
        range#cover?      3.235M (± 0.4%) i/s -     16.459M in   5.087425s
      range#include?    126.278k (± 0.4%) i/s -    643.569k in   5.096529s
       range#member?    126.444k (± 0.4%) i/s -    643.008k in   5.085402s
       plain compare      5.291M (± 0.4%) i/s -     26.679M in   5.042455s

Comparison:
       plain compare:  5291025.2 i/s
        range#cover?:  3235226.7 i/s - 1.64x  (± 0.00) slower
       range#member?:   126444.4 i/s - 41.84x  (± 0.00) slower
      range#include?:   126278.0 i/s - 41.90x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       String#match?   916.757k i/100ms
           String#=~   651.855k i/100ms
          Regexp#===   572.525k i/100ms
        String#match   469.537k i/100ms
Calculating -------------------------------------
       String#match?      9.196M (± 0.4%) i/s -     46.755M in   5.084460s
           String#=~      6.555M (± 0.5%) i/s -     33.245M in   5.071662s
          Regexp#===      5.712M (± 0.2%) i/s -     28.626M in   5.011520s
        String#match      4.721M (± 0.4%) i/s -     23.946M in   5.072744s

Comparison:
       String#match?:  9195750.3 i/s
           String#=~:  6555169.6 i/s - 1.40x  (± 0.00) slower
          Regexp#===:  5712121.0 i/s - 1.61x  (± 0.00) slower
        String#match:  4720676.2 i/s - 1.95x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   646.972k i/100ms
      String#casecmp   799.309k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.470M (± 0.8%) i/s -     32.996M in   5.100387s
      String#casecmp      8.042M (± 1.3%) i/s -     40.765M in   5.069727s

Comparison:
      String#casecmp:  8042161.0 i/s
String#downcase + ==:  6469675.4 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            String#+   596.839k i/100ms
       String#concat   619.555k i/100ms
       String#append   669.205k i/100ms
         "foo" "bar"     1.169M i/100ms
  "#{'foo'}#{'bar'}"     1.170M i/100ms
Calculating -------------------------------------
            String#+      5.935M (± 0.5%) i/s -     29.842M in   5.028476s
       String#concat      6.175M (± 0.9%) i/s -     30.978M in   5.017168s
       String#append      6.728M (± 0.6%) i/s -     34.129M in   5.073089s
         "foo" "bar"     11.693M (± 0.4%) i/s -     58.463M in   4.999945s
  "#{'foo'}#{'bar'}"     11.662M (± 0.5%) i/s -     58.506M in   5.016754s

Comparison:
         "foo" "bar": 11692830.6 i/s
  "#{'foo'}#{'bar'}": 11662325.5 i/s - same-ish: difference falls within error
       String#append:  6727761.2 i/s - 1.74x  (± 0.00) slower
       String#concat:  6174908.1 i/s - 1.89x  (± 0.00) slower
            String#+:  5934719.7 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#+@     1.002M i/100ms
          String#dup   582.531k i/100ms
Calculating -------------------------------------
           String#+@     10.024M (± 0.5%) i/s -     51.117M in   5.099624s
          String#dup      5.846M (± 0.6%) i/s -     29.709M in   5.082082s

Comparison:
           String#+@: 10024004.7 i/s
          String#dup:  5846027.9 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   186.520k i/100ms
       String#match?   427.626k i/100ms
    String#end_with?   626.256k i/100ms
Calculating -------------------------------------
           String#=~      1.875M (± 0.4%) i/s -      9.513M in   5.072528s
       String#match?      4.292M (± 0.3%) i/s -     21.809M in   5.081213s
    String#end_with?      6.268M (± 0.3%) i/s -     31.939M in   5.095623s

Comparison:
    String#end_with?:  6267990.0 i/s
       String#match?:  4292100.5 i/s - 1.46x  (± 0.00) slower
           String#=~:  1875337.2 i/s - 3.34x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   113.655k i/100ms
          String#sub   137.472k i/100ms
String#dup["string"]=
                       180.261k i/100ms
Calculating -------------------------------------
         String#gsub      1.137M (± 0.5%) i/s -      5.796M in   5.098237s
          String#sub      1.394M (± 0.6%) i/s -      7.011M in   5.030487s
String#dup["string"]=
                          1.808M (± 0.7%) i/s -      9.193M in   5.086257s

Comparison:
String#dup["string"]=:  1807573.3 i/s
          String#sub:  1393771.6 i/s - 1.30x  (± 0.00) slower
         String#gsub:  1136968.2 i/s - 1.59x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   106.206k i/100ms
           String#tr   339.811k i/100ms
Calculating -------------------------------------
         String#gsub      1.047M (± 0.7%) i/s -      5.310M in   5.072128s
           String#tr      3.413M (± 0.1%) i/s -     17.330M in   5.077235s

Comparison:
           String#tr:  3413351.6 i/s
         String#gsub:  1047013.3 i/s - 3.26x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.150M i/100ms
         With Freeze     1.688M i/100ms
Calculating -------------------------------------
      Without Freeze     11.494M (± 0.4%) i/s -     57.511M in   5.003449s
         With Freeze     16.896M (± 0.4%) i/s -     86.073M in   5.094416s

Comparison:
         With Freeze: 16895780.6 i/s
      Without Freeze: 11494466.7 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.404k i/100ms
      String#squeeze   156.455k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     34.024k (± 3.6%) i/s -    170.200k in   5.009817s
      String#squeeze      1.573M (± 0.8%) i/s -      7.979M in   5.074101s

Comparison:
      String#squeeze:  1572636.6 i/s
 String#gsub/regex+/:    34024.0 i/s - 46.22x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   286.691k i/100ms
       String#match?   759.832k i/100ms
  String#start_with?   871.987k i/100ms
Calculating -------------------------------------
           String#=~      2.866M (± 0.3%) i/s -     14.335M in   5.001475s
       String#match?      7.536M (± 0.5%) i/s -     37.992M in   5.041680s
  String#start_with?      8.743M (± 0.5%) i/s -     44.471M in   5.086636s

Comparison:
  String#start_with?:  8743006.1 i/s
       String#match?:  7535721.3 i/s - 1.16x  (± 0.00) slower
           String#=~:  2866084.8 i/s - 3.05x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   189.042k i/100ms
    String#[0, n] ==    82.746k i/100ms
   String#[RANGE] ==    77.113k i/100ms
   String#[0...n] ==    47.812k i/100ms
Calculating -------------------------------------
  String#start_with?      1.962M (± 1.5%) i/s -      9.830M in   5.010215s
    String#[0, n] ==    820.134k (± 1.3%) i/s -      4.137M in   5.045581s
   String#[RANGE] ==    752.777k (± 0.8%) i/s -      3.779M in   5.019781s
   String#[0...n] ==    480.000k (± 1.0%) i/s -      2.438M in   5.080517s

Comparison:
  String#start_with?:  1962431.7 i/s
    String#[0, n] ==:   820133.9 i/s - 2.39x  (± 0.00) slower
   String#[RANGE] ==:   752776.7 i/s - 2.61x  (± 0.00) slower
   String#[0...n] ==:   480000.2 i/s - 4.09x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   181.638k i/100ms
 String#sub!'string'   129.690k i/100ms
String#gsub!'string'    78.366k i/100ms
  String#[/regexp/]=   154.032k i/100ms
 String#sub!/regexp/   116.457k i/100ms
String#gsub!/regexp/    61.896k i/100ms
Calculating -------------------------------------
  String#['string']=      1.841M (± 0.4%) i/s -      9.264M in   5.030750s
 String#sub!'string'      1.277M (± 0.7%) i/s -      6.484M in   5.079343s
String#gsub!'string'    783.630k (± 0.7%) i/s -      3.918M in   5.000437s
  String#[/regexp/]=      1.544M (± 0.4%) i/s -      7.856M in   5.088036s
 String#sub!/regexp/      1.144M (± 0.6%) i/s -      5.823M in   5.088192s
String#gsub!/regexp/    614.432k (± 0.7%) i/s -      3.095M in   5.037085s

Comparison:
  String#['string']=:  1841410.8 i/s
  String#[/regexp/]=:  1543969.3 i/s - 1.19x  (± 0.00) slower
 String#sub!'string':  1276700.9 i/s - 1.44x  (± 0.00) slower
 String#sub!/regexp/:  1144420.7 i/s - 1.61x  (± 0.00) slower
String#gsub!'string':   783629.9 i/s - 2.35x  (± 0.00) slower
String#gsub!/regexp/:   614432.4 i/s - 3.00x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          String#sub   143.333k i/100ms
        String#chomp   562.373k i/100ms
String#delete_suffix   606.258k i/100ms
Calculating -------------------------------------
          String#sub      1.448M (± 0.4%) i/s -      7.310M in   5.049915s
        String#chomp      5.600M (± 0.5%) i/s -     28.119M in   5.020931s
String#delete_suffix      6.070M (± 0.2%) i/s -     30.919M in   5.093985s

Comparison:
String#delete_suffix:  6069758.4 i/s
        String#chomp:  5600431.6 i/s - 1.08x  (± 0.00) slower
          String#sub:  1447572.1 i/s - 4.19x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   634.334k i/100ms
          String#sub   148.982k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.353M (± 0.3%) i/s -     32.351M in   5.092671s
          String#sub      1.489M (± 0.6%) i/s -      7.449M in   5.003972s

Comparison:
String#delete_prefix:  6352535.1 i/s
          String#sub:  1488687.3 i/s - 4.27x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   635.444k i/100ms
    String#unpack[0]   482.955k i/100ms
Calculating -------------------------------------
      String#unpack1      6.321M (± 2.8%) i/s -     31.772M in   5.031010s
    String#unpack[0]      4.805M (± 2.7%) i/s -     24.148M in   5.030009s

Comparison:
      String#unpack1:  6321474.7 i/s
    String#unpack[0]:  4805048.1 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.311k i/100ms
          Time.parse     9.416k i/100ms
Calculating -------------------------------------
        Time.iso8601    273.405k (± 0.5%) i/s -      1.393M in   5.094641s
          Time.parse     93.944k (± 0.5%) i/s -    470.800k in   5.011622s

Comparison:
        Time.iso8601:   273404.6 i/s
          Time.parse:    93943.7 i/s - 2.91x  (± 0.00) slower

