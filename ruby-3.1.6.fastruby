$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       766.319k i/100ms
Function with splat arguments
                        23.655k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.695M (± 2.1%) i/s -     39.082M in   5.081427s
Function with splat arguments
                        248.756k (± 7.0%) i/s -      1.254M in   5.071560s

Comparison:
Function with single Array argument:  7695091.2 i/s
Function with splat arguments:   248756.2 i/s - 30.93x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.018M i/100ms
Sequential Assignment
                         1.015M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.198M (± 0.6%) i/s -     51.930M in   5.092214s
Sequential Assignment
                         10.149M (± 0.4%) i/s -     50.764M in   5.001801s

Comparison:
 Parallel Assignment: 10198158.6 i/s
Sequential Assignment: 10149337.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   487.028k i/100ms
       attr_accessor   556.767k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.870M (± 0.4%) i/s -     24.351M in   5.000393s
       attr_accessor      5.574M (± 0.4%) i/s -     28.395M in   5.094424s

Comparison:
       attr_accessor:  5573870.9 i/s
   getter_and_setter:  4869964.8 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    86.781k i/100ms
         respond_to?   759.488k i/100ms
Calculating -------------------------------------
      begin...rescue    884.923k (± 0.9%) i/s -      4.426M in   5.001749s
         respond_to?      7.802M (± 0.6%) i/s -     39.493M in   5.062348s

Comparison:
         respond_to?:  7801635.1 i/s
      begin...rescue:   884923.0 i/s - 8.82x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              normal   309.859k i/100ms
             &method   125.561k i/100ms
Calculating -------------------------------------
              normal      3.110M (± 1.1%) i/s -     15.803M in   5.081563s
             &method      1.243M (± 0.8%) i/s -      6.278M in   5.052557s

Comparison:
              normal:  3110198.1 i/s
             &method:  1242629.1 i/s - 2.50x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       239.000  i/100ms
       define_method   316.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.274k (±17.4%) i/s -     10.755k in   5.079111s
       define_method      3.182k (±19.0%) i/s -     14.536k in   5.054560s

Comparison:
       define_method:     3182.3 i/s
module_eval with string:     2273.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Float#round   261.056k i/100ms
       Kernel#format   201.482k i/100ms
            String#%   171.584k i/100ms
Calculating -------------------------------------
         Float#round      2.594M (± 0.4%) i/s -     13.053M in   5.032137s
       Kernel#format      1.989M (± 0.3%) i/s -     10.074M in   5.063742s
            String#%      1.714M (± 0.6%) i/s -      8.579M in   5.005817s

Comparison:
         Float#round:  2593923.2 i/s
       Kernel#format:  1989477.9 i/s - 1.30x  (± 0.00) slower
            String#%:  1713909.5 i/s - 1.51x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash   897.161k i/100ms
          OpenStruct   500.087k i/100ms
Calculating -------------------------------------
                Hash      9.077M (± 0.5%) i/s -     45.755M in   5.040991s
          OpenStruct      4.987M (± 0.5%) i/s -     25.004M in   5.013652s

Comparison:
                Hash:  9076871.5 i/s
          OpenStruct:  4987370.9 i/s - 1.82x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.114M i/100ms
          OpenStruct     9.730k i/100ms
Calculating -------------------------------------
                Hash     11.128M (± 0.3%) i/s -     55.720M in   5.007280s
          OpenStruct     95.392k (± 2.7%) i/s -    476.770k in   5.001799s

Comparison:
                Hash: 11127892.5 i/s
          OpenStruct:    95392.1 i/s - 116.65x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   594.048k i/100ms
  ancestors.include?   120.341k i/100ms
Calculating -------------------------------------
  less than or equal      5.958M (± 1.4%) i/s -     30.296M in   5.085982s
  ancestors.include?      1.194M (± 0.9%) i/s -      6.017M in   5.038610s

Comparison:
  less than or equal:  5958048.6 i/s
  ancestors.include?:  1194275.5 i/s - 4.99x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.625  (± 0.0%) i/s -      4.000  in   6.403326s
         Kernel loop      0.228  (± 0.0%) i/s -      2.000  in   8.772745s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 2.74x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.565M i/100ms
         Array#first     1.293M i/100ms
Calculating -------------------------------------
           Array#[0]     15.643M (± 0.4%) i/s -     78.246M in   5.002214s
         Array#first     12.895M (± 0.2%) i/s -     64.673M in   5.015591s

Comparison:
           Array#[0]: 15642528.4 i/s
         Array#first: 12894522.0 i/s - 1.21x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.557M i/100ms
          Array#last     1.318M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.516M (± 0.4%) i/s -     77.838M in   5.016764s
          Array#last     13.148M (± 0.4%) i/s -     65.878M in   5.010591s

Comparison:
          Array#[-1]: 15515739.0 i/s
          Array#last: 13148056.0 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    99.821k i/100ms
Calculating -------------------------------------
                find      0.276  (± 0.0%) i/s -      2.000  in   7.253176s
             bsearch    995.109k (± 0.9%) i/s -      4.991M in   5.016044s

Comparison:
             bsearch:   995109.3 i/s
                find:        0.3 i/s - 3608848.75x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    19.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    195.879  (± 2.6%) i/s -    988.000  in   5.047136s
        Array#insert      1.438  (± 0.0%) i/s -      8.000  in   5.563541s

Comparison:
       Array#unshift:      195.9 i/s
        Array#insert:        1.4 i/s - 136.21x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.074M i/100ms
          Array#size     2.085M i/100ms
         Array#count     1.626M i/100ms
Calculating -------------------------------------
        Array#length     20.730M (± 0.3%) i/s -    103.693M in   5.002154s
          Array#size     20.811M (± 1.0%) i/s -    104.259M in   5.010301s
         Array#count     16.351M (± 0.4%) i/s -     82.917M in   5.071022s

Comparison:
          Array#size: 20811106.9 i/s
        Array#length: 20729867.7 i/s - same-ish: difference falls within error
         Array#count: 16351444.0 i/s - 1.27x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.887k i/100ms
        Array#sample     1.027M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    458.856k (± 0.6%) i/s -      2.294M in   5.000361s
        Array#sample     10.297M (± 0.4%) i/s -     52.360M in   5.084923s

Comparison:
        Array#sample: 10297316.4 i/s
 Array#shuffle.first:   458856.1 i/s - 22.44x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    63.654k i/100ms
          Date.parse    32.379k i/100ms
Calculating -------------------------------------
        Date.iso8601    640.843k (± 0.4%) i/s -      3.246M in   5.065831s
          Date.parse    324.194k (± 0.5%) i/s -      1.651M in   5.093769s

Comparison:
        Date.iso8601:   640843.2 i/s
          Date.parse:   324194.0 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.738k i/100ms
           Array#map    26.468k i/100ms
Calculating -------------------------------------
   Array#each + push    190.354k (± 0.9%) i/s -    955.638k in   5.020684s
           Array#map    264.884k (± 0.6%) i/s -      1.350M in   5.096244s

Comparison:
           Array#map:   264883.8 i/s
   Array#each + push:   190354.4 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            For loop    29.750k i/100ms
               #each    32.288k i/100ms
Calculating -------------------------------------
            For loop    296.254k (± 0.8%) i/s -      1.488M in   5.021322s
               #each    323.469k (± 0.7%) i/s -      1.647M in   5.090949s

Comparison:
               #each:   323469.2 i/s
            For loop:   296254.4 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.512k i/100ms
     each_with_index    18.778k i/100ms
Calculating -------------------------------------
          While Loop    278.364k (± 1.8%) i/s -      1.403M in   5.042280s
     each_with_index    188.980k (± 0.5%) i/s -    957.678k in   5.067765s

Comparison:
          While Loop:   278363.7 i/s
     each_with_index:   188979.8 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    92.943k i/100ms
      inject to_proc     2.210k i/100ms
        inject block     2.133k i/100ms
Calculating -------------------------------------
       inject symbol    990.594k (±13.4%) i/s -      4.926M in   5.045910s
      inject to_proc     22.080k (± 0.7%) i/s -    110.500k in   5.004736s
        inject block     21.425k (± 0.4%) i/s -    108.783k in   5.077554s

Comparison:
       inject symbol:   990593.6 i/s
      inject to_proc:    22080.1 i/s - 44.86x  (± 0.00) slower
        inject block:    21424.7 i/s - 46.24x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.903k i/100ms
   Array#map.flatten     3.985k i/100ms
      Array#flat_map     9.457k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     69.466k (± 0.6%) i/s -    352.053k in   5.068212s
   Array#map.flatten     39.351k (± 1.2%) i/s -    199.250k in   5.064153s
      Array#flat_map     94.513k (± 0.9%) i/s -    472.850k in   5.003433s

Comparison:
      Array#flat_map:    94512.6 i/s
Array#map.flatten(1):    69465.8 i/s - 1.36x  (± 0.00) slower
   Array#map.flatten:    39350.9 i/s - 2.40x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    30.987k i/100ms
  Array#reverse_each    32.177k i/100ms
Calculating -------------------------------------
  Array#reverse.each    311.276k (± 0.5%) i/s -      1.580M in   5.077118s
  Array#reverse_each    320.793k (± 2.2%) i/s -      1.609M in   5.018131s

Comparison:
  Array#reverse_each:   320792.6 i/s
  Array#reverse.each:   311275.9 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        12.629k i/100ms
   Enumerable#detect    80.399k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        128.649k (± 0.2%) i/s -      2.576M in  20.025988s
   Enumerable#detect    810.577k (± 1.3%) i/s -     16.241M in  20.039199s

Comparison:
   Enumerable#detect:   810577.2 i/s
Enumerable#select.first:   128649.1 i/s - 6.30x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       247.700k i/100ms
Enumerable#select.last
                        18.765k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.464M (± 0.7%) i/s -     12.385M in   5.026891s
Enumerable#select.last
                        186.996k (± 0.2%) i/s -    938.250k in   5.017525s

Comparison:
Enumerable#reverse.detect:  2463854.1 i/s
Enumerable#select.last:   186995.7 i/s - 13.18x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.622k i/100ms
  Enumerable#sort_by     4.885k i/100ms
     Enumerable#sort     2.400k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         49.664k (± 1.2%) i/s -    249.588k in   5.026237s
  Enumerable#sort_by     47.253k (± 0.4%) i/s -    239.365k in   5.065714s
     Enumerable#sort     23.931k (± 0.4%) i/s -    120.000k in   5.014493s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    49664.3 i/s
  Enumerable#sort_by:    47252.9 i/s - 1.05x  (± 0.00) slower
     Enumerable#sort:    23930.9 i/s - 2.08x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.723k i/100ms
Enumerable#sort_by...first
                         8.920k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    177.363k (± 0.6%) i/s -    903.873k in   5.096329s
Enumerable#sort_by...first
                         85.012k (± 1.6%) i/s -    428.160k in   5.037782s

Comparison:
   Enumerable#min_by:   177363.5 i/s
Enumerable#sort_by...first:    85011.7 i/s - 2.09x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   419.379k i/100ms
            Hash#dup   302.875k i/100ms
Calculating -------------------------------------
              Hash[]      4.238M (± 1.4%) i/s -     21.388M in   5.047454s
            Hash#dup      3.238M (± 1.2%) i/s -     16.355M in   5.051697s

Comparison:
              Hash[]:  4238310.0 i/s
            Hash#dup:  3238034.9 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.438M i/100ms
  Hash#fetch, symbol     1.173M i/100ms
     Hash#[], string     1.248M i/100ms
  Hash#fetch, string   795.056k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.376M (± 1.0%) i/s -     71.890M in   5.001188s
  Hash#fetch, symbol     11.787M (± 0.4%) i/s -     59.824M in   5.075365s
     Hash#[], string     12.464M (± 0.2%) i/s -     62.406M in   5.007005s
  Hash#fetch, string      7.964M (± 0.8%) i/s -     40.548M in   5.091733s

Comparison:
     Hash#[], symbol: 14375937.8 i/s
     Hash#[], string: 12463734.2 i/s - 1.15x  (± 0.00) slower
  Hash#fetch, symbol: 11787254.0 i/s - 1.22x  (± 0.00) slower
  Hash#fetch, string:  7964054.0 i/s - 1.81x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   855.723k i/100ms
             Hash#[]     1.033M i/100ms
          Hash#[] ||   898.845k i/100ms
          Hash#[] &&   377.480k i/100ms
          Hash#fetch   594.542k i/100ms
 Hash#fetch fallback   391.375k i/100ms
Calculating -------------------------------------
            Hash#dig      8.636M (± 0.4%) i/s -     43.642M in   5.053467s
             Hash#[]     10.275M (± 2.9%) i/s -     51.626M in   5.028911s
          Hash#[] ||      8.774M (± 0.4%) i/s -     44.043M in   5.019688s
          Hash#[] &&      3.907M (± 3.2%) i/s -     19.629M in   5.029768s
          Hash#fetch      6.034M (± 1.1%) i/s -     30.322M in   5.025832s
 Hash#fetch fallback      3.950M (± 0.8%) i/s -     19.960M in   5.053221s

Comparison:
             Hash#[]: 10275213.9 i/s
          Hash#[] ||:  8774269.8 i/s - 1.17x  (± 0.00) slower
            Hash#dig:  8636155.5 i/s - 1.19x  (± 0.00) slower
          Hash#fetch:  6033923.6 i/s - 1.70x  (± 0.00) slower
 Hash#fetch fallback:  3950249.8 i/s - 2.60x  (± 0.00) slower
          Hash#[] &&:  3906554.7 i/s - 2.63x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.459M i/100ms
  Hash#fetch + block     1.460M i/100ms
    Hash#fetch + arg     1.100M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.590M (± 0.9%) i/s -     72.945M in   4.999995s
  Hash#fetch + block     14.629M (± 0.3%) i/s -     74.484M in   5.091563s
    Hash#fetch + arg     11.024M (± 0.5%) i/s -     56.115M in   5.090329s

Comparison:
  Hash#fetch + block: 14629121.4 i/s
  Hash#fetch + const: 14590228.7 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 11024034.0 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.356k i/100ms
         sort + to_h    11.221k i/100ms
Calculating -------------------------------------
      sort_by + to_h    272.850k (± 0.5%) i/s -      1.368M in   5.013110s
         sort + to_h    111.961k (± 1.1%) i/s -    561.050k in   5.011734s

Comparison:
      sort_by + to_h:   272850.2 i/s
         sort + to_h:   111960.9 i/s - 2.44x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   192.967k i/100ms
       Hash#each_key   205.006k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.878M (± 1.1%) i/s -      9.455M in   5.036465s
       Hash#each_key      2.034M (± 0.5%) i/s -     10.250M in   5.040601s

Comparison:
       Hash#each_key:  2033601.7 i/s
      Hash#keys.each:  1877599.4 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     3.009k i/100ms
           Hash#key?   943.167k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     29.009k (± 4.8%) i/s -    147.441k in   5.098590s
           Hash#key?      9.497M (± 0.6%) i/s -     48.102M in   5.065327s

Comparison:
           Hash#key?:  9496556.5 i/s
  Hash#keys.include?:    29009.2 i/s - 327.36x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.005k i/100ms
            Hash#[]=    10.142k i/100ms
Calculating -------------------------------------
         Hash#merge!     39.541k (± 0.5%) i/s -    200.250k in   5.064553s
            Hash#[]=    101.153k (± 0.9%) i/s -    507.100k in   5.013586s

Comparison:
            Hash#[]=:   101152.6 i/s
         Hash#merge!:    39540.6 i/s - 2.56x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.705k i/100ms
      Hash#merge({})     3.947k i/100ms
 Hash#dup#merge!({})     2.906k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         47.514k (± 0.7%) i/s -    239.955k in   5.050455s
      Hash#merge({})     39.451k (± 0.7%) i/s -    197.350k in   5.002657s
 Hash#dup#merge!({})     28.857k (± 0.7%) i/s -    145.300k in   5.035342s

Comparison:
{}#merge!(Hash) do end:    47514.0 i/s
      Hash#merge({}):    39450.8 i/s - 1.20x  (± 0.00) slower
 Hash#dup#merge!({}):    28857.5 i/s - 1.65x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   394.769k i/100ms
          Hash#merge   365.984k i/100ms
Calculating -------------------------------------
        Hash#**other      3.932M (± 1.0%) i/s -     19.738M in   5.020461s
          Hash#merge      3.693M (± 0.6%) i/s -     18.665M in   5.055023s

Comparison:
        Hash#**other:  3932036.0 i/s
          Hash#merge:  3692540.9 i/s - 1.06x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.659k i/100ms
         Hash#merge!     3.964k i/100ms
Calculating -------------------------------------
          Hash#merge     15.524k (± 2.6%) i/s -     77.973k in   5.026013s
         Hash#merge!     39.530k (± 0.4%) i/s -    198.200k in   5.013939s

Comparison:
         Hash#merge!:    39530.3 i/s
          Hash#merge:    15524.0 i/s - 2.55x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      422.525k i/100ms
Array#each             232.845k i/100ms
Array#each_w/_object   174.418k i/100ms
Hash#select-include     71.582k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.208M (± 1.7%) i/s -     21.126M in   5.022136s
Array#each                2.294M (± 0.5%) i/s -     11.642M in   5.076061s
Array#each_w/_object      1.759M (± 0.5%) i/s -      8.895M in   5.057990s
Hash#select-include     709.669k (± 0.3%) i/s -      3.579M in   5.043387s

Comparison:
Hash#native-slice   :  4207905.9 i/s
Array#each          :  2293625.4 i/s - 1.83x  (± 0.00) slower
Array#each_w/_object:  1758719.0 i/s - 2.39x  (± 0.00) slower
Hash#select-include :   709668.6 i/s - 5.93x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     2.542k i/100ms
         Hash#value?     2.375k i/100ms
Calculating -------------------------------------
Hash#values.include?     25.346k (± 4.6%) i/s -    127.100k in   5.028656s
         Hash#value?     23.762k (± 0.2%) i/s -    121.125k in   5.097383s

Comparison:
Hash#values.include?:    25346.0 i/s
         Hash#value?:    23762.3 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                call   664.374k i/100ms
                send   530.417k i/100ms
      method_missing   387.470k i/100ms
Calculating -------------------------------------
                call      6.634M (± 0.6%) i/s -     33.219M in   5.007793s
                send      5.288M (± 0.6%) i/s -     26.521M in   5.015601s
      method_missing      3.839M (± 1.5%) i/s -     19.374M in   5.048179s

Comparison:
                call:  6633615.9 i/s
                send:  5287870.2 i/s - 1.25x  (± 0.00) slower
      method_missing:  3838702.9 i/s - 1.73x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
               Block     9.022k i/100ms
      Symbol#to_proc    10.268k i/100ms
Calculating -------------------------------------
               Block     90.402k (± 0.5%) i/s -    460.122k in   5.089863s
      Symbol#to_proc    102.109k (± 1.1%) i/s -    513.400k in   5.028650s

Comparison:
      Symbol#to_proc:   102108.8 i/s
               Block:    90401.8 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          block.call   892.426k i/100ms
       block + yield   979.613k i/100ms
        unused block     1.305M i/100ms
               yield     1.158M i/100ms
Calculating -------------------------------------
          block.call      9.276M (± 0.1%) i/s -     46.406M in   5.002846s
       block + yield      9.794M (± 0.2%) i/s -     48.981M in   5.001199s
        unused block     13.067M (± 0.4%) i/s -     66.532M in   5.091695s
               yield     11.604M (± 0.1%) i/s -     59.083M in   5.091453s

Comparison:
        unused block: 13066940.6 i/s
               yield: 11604387.6 i/s - 1.13x  (± 0.00) slower
       block + yield:  9793808.7 i/s - 1.33x  (± 0.00) slower
          block.call:  9275961.4 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   322.971k i/100ms
      range#include?    12.718k i/100ms
       range#member?    12.726k i/100ms
       plain compare   528.700k i/100ms
Calculating -------------------------------------
        range#cover?      3.246M (± 0.7%) i/s -     16.472M in   5.075096s
      range#include?    129.096k (± 0.8%) i/s -    648.618k in   5.024606s
       range#member?    129.155k (± 0.8%) i/s -    649.026k in   5.025484s
       plain compare      5.236M (± 0.6%) i/s -     26.435M in   5.048454s

Comparison:
       plain compare:  5236436.8 i/s
        range#cover?:  3245700.5 i/s - 1.61x  (± 0.00) slower
       range#member?:   129155.3 i/s - 40.54x  (± 0.00) slower
      range#include?:   129096.1 i/s - 40.56x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       String#match?   918.538k i/100ms
           String#=~   645.118k i/100ms
          Regexp#===   566.283k i/100ms
        String#match   471.511k i/100ms
Calculating -------------------------------------
       String#match?      9.126M (± 0.5%) i/s -     45.927M in   5.032398s
           String#=~      6.399M (± 0.8%) i/s -     32.256M in   5.040860s
          Regexp#===      5.648M (± 0.5%) i/s -     28.314M in   5.013455s
        String#match      4.734M (± 0.4%) i/s -     24.047M in   5.080059s

Comparison:
       String#match?:  9126480.4 i/s
           String#=~:  6399353.5 i/s - 1.43x  (± 0.00) slower
          Regexp#===:  5647748.5 i/s - 1.62x  (± 0.00) slower
        String#match:  4733680.1 i/s - 1.93x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   645.455k i/100ms
      String#casecmp   805.450k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.480M (± 0.2%) i/s -     32.918M in   5.080298s
      String#casecmp      8.053M (± 0.6%) i/s -     40.272M in   5.000912s

Comparison:
      String#casecmp:  8053356.3 i/s
String#downcase + ==:  6479608.4 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            String#+   606.525k i/100ms
       String#concat   628.677k i/100ms
       String#append   678.631k i/100ms
         "foo" "bar"     1.183M i/100ms
  "#{'foo'}#{'bar'}"     1.189M i/100ms
Calculating -------------------------------------
            String#+      6.035M (± 1.3%) i/s -     30.326M in   5.025509s
       String#concat      6.276M (± 0.6%) i/s -     31.434M in   5.008766s
       String#append      6.792M (± 0.6%) i/s -     34.610M in   5.095656s
         "foo" "bar"     11.880M (± 0.2%) i/s -     60.338M in   5.079035s
  "#{'foo'}#{'bar'}"     11.886M (± 0.3%) i/s -     59.430M in   5.000218s

Comparison:
  "#{'foo'}#{'bar'}": 11885605.7 i/s
         "foo" "bar": 11879790.6 i/s - same-ish: difference falls within error
       String#append:  6792333.3 i/s - 1.75x  (± 0.00) slower
       String#concat:  6275994.6 i/s - 1.89x  (± 0.00) slower
            String#+:  6035485.1 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#+@     1.010M i/100ms
          String#dup   586.377k i/100ms
Calculating -------------------------------------
           String#+@     10.107M (± 0.2%) i/s -     51.535M in   5.098963s
          String#dup      5.856M (± 0.3%) i/s -     29.319M in   5.006985s

Comparison:
           String#+@: 10107061.2 i/s
          String#dup:  5855636.8 i/s - 1.73x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   186.287k i/100ms
       String#match?   430.102k i/100ms
    String#end_with?   597.613k i/100ms
Calculating -------------------------------------
           String#=~      1.867M (± 1.6%) i/s -      9.501M in   5.090948s
       String#match?      4.310M (± 0.9%) i/s -     21.935M in   5.089262s
    String#end_with?      5.918M (± 0.6%) i/s -     29.881M in   5.048959s

Comparison:
    String#end_with?:  5918369.2 i/s
       String#match?:  4310436.7 i/s - 1.37x  (± 0.00) slower
           String#=~:  1866668.2 i/s - 3.17x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   113.441k i/100ms
          String#sub   135.493k i/100ms
String#dup["string"]=
                       179.796k i/100ms
Calculating -------------------------------------
         String#gsub      1.148M (± 1.5%) i/s -      5.785M in   5.039630s
          String#sub      1.387M (± 0.7%) i/s -      7.046M in   5.079542s
String#dup["string"]=
                          1.809M (± 0.6%) i/s -      9.170M in   5.069193s

Comparison:
String#dup["string"]=:  1808942.4 i/s
          String#sub:  1387121.7 i/s - 1.30x  (± 0.00) slower
         String#gsub:  1148278.5 i/s - 1.58x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   106.393k i/100ms
           String#tr   343.527k i/100ms
Calculating -------------------------------------
         String#gsub      1.064M (± 0.2%) i/s -      5.320M in   5.001465s
           String#tr      3.442M (± 0.2%) i/s -     17.520M in   5.090354s

Comparison:
           String#tr:  3441796.2 i/s
         String#gsub:  1063624.6 i/s - 3.24x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.120M i/100ms
         With Freeze     1.638M i/100ms
Calculating -------------------------------------
      Without Freeze     11.174M (± 0.6%) i/s -     56.007M in   5.012379s
         With Freeze     16.380M (± 0.3%) i/s -     83.528M in   5.099294s

Comparison:
         With Freeze: 16380429.3 i/s
      Without Freeze: 11174240.3 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.437k i/100ms
      String#squeeze   156.527k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     34.401k (± 0.7%) i/s -    175.287k in   5.095653s
      String#squeeze      1.581M (± 0.5%) i/s -      7.983M in   5.048942s

Comparison:
      String#squeeze:  1581144.4 i/s
 String#gsub/regex+/:    34401.0 i/s - 45.96x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   285.702k i/100ms
       String#match?   755.861k i/100ms
  String#start_with?   829.839k i/100ms
Calculating -------------------------------------
           String#=~      2.829M (± 1.6%) i/s -     14.285M in   5.050293s
       String#match?      7.550M (± 0.6%) i/s -     37.793M in   5.006139s
  String#start_with?      8.285M (± 0.7%) i/s -     41.492M in   5.008555s

Comparison:
  String#start_with?:  8284645.0 i/s
       String#match?:  7549652.9 i/s - 1.10x  (± 0.00) slower
           String#=~:  2829365.2 i/s - 2.93x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   192.975k i/100ms
    String#[0, n] ==    82.489k i/100ms
   String#[RANGE] ==    79.601k i/100ms
   String#[0...n] ==    48.230k i/100ms
Calculating -------------------------------------
  String#start_with?      1.945M (± 1.0%) i/s -      9.842M in   5.060200s
    String#[0, n] ==    831.342k (± 1.3%) i/s -      4.207M in   5.061248s
   String#[RANGE] ==    768.111k (± 0.8%) i/s -      3.900M in   5.078290s
   String#[0...n] ==    468.994k (± 0.5%) i/s -      2.363M in   5.039147s

Comparison:
  String#start_with?:  1945138.9 i/s
    String#[0, n] ==:   831341.5 i/s - 2.34x  (± 0.00) slower
   String#[RANGE] ==:   768111.2 i/s - 2.53x  (± 0.00) slower
   String#[0...n] ==:   468993.7 i/s - 4.15x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   181.093k i/100ms
 String#sub!'string'   126.043k i/100ms
String#gsub!'string'    79.081k i/100ms
  String#[/regexp/]=   160.088k i/100ms
 String#sub!/regexp/   115.519k i/100ms
String#gsub!/regexp/    61.792k i/100ms
Calculating -------------------------------------
  String#['string']=      1.868M (± 0.3%) i/s -      9.417M in   5.042448s
 String#sub!'string'      1.277M (± 0.4%) i/s -      6.428M in   5.033457s
String#gsub!'string'    779.963k (± 0.2%) i/s -      3.954M in   5.069563s
  String#[/regexp/]=      1.585M (± 0.3%) i/s -      8.004M in   5.051101s
 String#sub!/regexp/      1.148M (± 0.5%) i/s -      5.776M in   5.030666s
String#gsub!/regexp/    615.778k (± 1.7%) i/s -      3.090M in   5.018887s

Comparison:
  String#['string']=:  1867529.4 i/s
  String#[/regexp/]=:  1584696.2 i/s - 1.18x  (± 0.00) slower
 String#sub!'string':  1277117.7 i/s - 1.46x  (± 0.00) slower
 String#sub!/regexp/:  1148176.7 i/s - 1.63x  (± 0.00) slower
String#gsub!'string':   779962.8 i/s - 2.39x  (± 0.00) slower
String#gsub!/regexp/:   615777.7 i/s - 3.03x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          String#sub   146.888k i/100ms
        String#chomp   560.712k i/100ms
String#delete_suffix   608.926k i/100ms
Calculating -------------------------------------
          String#sub      1.472M (± 0.2%) i/s -      7.491M in   5.089673s
        String#chomp      5.608M (± 0.4%) i/s -     28.596M in   5.098834s
String#delete_suffix      6.090M (± 0.5%) i/s -     31.055M in   5.099454s

Comparison:
String#delete_suffix:  6090041.1 i/s
        String#chomp:  5608482.8 i/s - 1.09x  (± 0.00) slower
          String#sub:  1471866.8 i/s - 4.14x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   616.430k i/100ms
          String#sub   151.611k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.180M (± 0.5%) i/s -     31.438M in   5.087525s
          String#sub      1.516M (± 0.6%) i/s -      7.581M in   5.001405s

Comparison:
String#delete_prefix:  6179544.7 i/s
          String#sub:  1515733.0 i/s - 4.08x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   634.059k i/100ms
    String#unpack[0]   482.827k i/100ms
Calculating -------------------------------------
      String#unpack1      6.337M (± 1.6%) i/s -     31.703M in   5.004639s
    String#unpack[0]      4.813M (± 0.6%) i/s -     24.141M in   5.015845s

Comparison:
      String#unpack1:  6336500.7 i/s
    String#unpack[0]:  4813182.6 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    28.008k i/100ms
          Time.parse     9.588k i/100ms
Calculating -------------------------------------
        Time.iso8601    281.026k (± 0.6%) i/s -      1.428M in   5.083026s
          Time.parse     95.928k (± 0.8%) i/s -    488.988k in   5.097796s

Comparison:
        Time.iso8601:   281026.4 i/s
          Time.parse:    95928.1 i/s - 2.93x  (± 0.00) slower

