$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       736.845k i/100ms
Function with splat arguments
                        23.160k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.254M (± 0.5%) i/s -     36.842M in   5.078784s
Function with splat arguments
                        200.460k (± 6.8%) i/s -    995.880k in   5.000133s

Comparison:
Function with single Array argument:  7254343.3 i/s
Function with splat arguments:   200460.5 i/s - 36.19x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.004M i/100ms
Sequential Assignment
                         1.012M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.038M (± 0.2%) i/s -     50.192M in   5.000443s
Sequential Assignment
                         10.107M (± 0.4%) i/s -     50.618M in   5.008078s

Comparison:
Sequential Assignment: 10107375.8 i/s
 Parallel Assignment: 10037617.0 i/s - 1.01x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   475.050k i/100ms
       attr_accessor   546.066k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.734M (± 3.3%) i/s -     23.752M in   5.024968s
       attr_accessor      5.286M (± 1.2%) i/s -     26.757M in   5.062655s

Comparison:
       attr_accessor:  5286037.7 i/s
   getter_and_setter:  4733505.5 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    86.956k i/100ms
         respond_to?   780.322k i/100ms
Calculating -------------------------------------
      begin...rescue    875.272k (± 0.7%) i/s -      4.435M in   5.066983s
         respond_to?      7.841M (± 0.2%) i/s -     39.796M in   5.075463s

Comparison:
         respond_to?:  7840967.3 i/s
      begin...rescue:   875271.9 i/s - 8.96x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              normal   300.694k i/100ms
             &method   124.148k i/100ms
Calculating -------------------------------------
              normal      3.035M (± 0.5%) i/s -     15.335M in   5.052839s
             &method      1.230M (± 0.5%) i/s -      6.207M in   5.045543s

Comparison:
              normal:  3035069.5 i/s
             &method:  1230308.7 i/s - 2.47x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       231.000  i/100ms
       define_method   320.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.346k (±20.8%) i/s -     11.088k in   5.394828s
       define_method      3.237k (±18.5%) i/s -     14.720k in   5.018031s

Comparison:
       define_method:     3236.8 i/s
module_eval with string:     2346.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Float#round   251.345k i/100ms
       Kernel#format   192.919k i/100ms
            String#%   164.842k i/100ms
Calculating -------------------------------------
         Float#round      2.530M (± 0.3%) i/s -     12.819M in   5.066828s
       Kernel#format      1.920M (± 0.5%) i/s -      9.646M in   5.023241s
            String#%      1.653M (± 0.3%) i/s -      8.407M in   5.084975s

Comparison:
         Float#round:  2529926.9 i/s
       Kernel#format:  1920308.7 i/s - 1.32x  (± 0.00) slower
            String#%:  1653306.0 i/s - 1.53x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash   908.675k i/100ms
          OpenStruct   512.571k i/100ms
Calculating -------------------------------------
                Hash      9.060M (± 0.5%) i/s -     45.434M in   5.015122s
          OpenStruct      5.081M (± 0.8%) i/s -     25.629M in   5.044738s

Comparison:
                Hash:  9059574.4 i/s
          OpenStruct:  5080594.0 i/s - 1.78x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.099M i/100ms
          OpenStruct    11.697k i/100ms
Calculating -------------------------------------
                Hash     11.668M (± 1.5%) i/s -     59.335M in   5.086726s
          OpenStruct    117.343k (± 2.7%) i/s -    596.547k in   5.087519s

Comparison:
                Hash: 11667508.4 i/s
          OpenStruct:   117343.4 i/s - 99.43x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   597.331k i/100ms
  ancestors.include?   121.118k i/100ms
Calculating -------------------------------------
  less than or equal      5.873M (± 0.6%) i/s -     29.867M in   5.085698s
  ancestors.include?      1.189M (± 1.4%) i/s -      6.056M in   5.094881s

Comparison:
  less than or equal:  5872837.4 i/s
  ancestors.include?:  1188871.6 i/s - 4.94x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.720  (± 0.0%) i/s -      4.000  in   5.685900s
         Kernel loop      0.228  (± 0.0%) i/s -      2.000  in   8.761704s

Comparison:
          While Loop:        0.7 i/s
         Kernel loop:        0.2 i/s - 3.15x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.571M i/100ms
         Array#first     1.323M i/100ms
Calculating -------------------------------------
           Array#[0]     15.723M (± 0.3%) i/s -     80.109M in   5.095144s
         Array#first     13.228M (± 1.0%) i/s -     66.174M in   5.003040s

Comparison:
           Array#[0]: 15722639.3 i/s
         Array#first: 13228042.9 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.556M i/100ms
          Array#last     1.332M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.566M (± 0.4%) i/s -     79.343M in   5.097144s
          Array#last     13.298M (± 0.6%) i/s -     66.599M in   5.008260s

Comparison:
          Array#[-1]: 15566290.9 i/s
          Array#last: 13298415.8 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    99.549k i/100ms
Calculating -------------------------------------
                find      0.267  (± 0.0%) i/s -      2.000  in   7.479163s
             bsearch    996.614k (± 1.0%) i/s -      5.077M in   5.094757s

Comparison:
             bsearch:   996613.8 i/s
                find:        0.3 i/s - 3726905.62x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    19.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    197.151  (± 2.0%) i/s -    988.000  in   5.014074s
        Array#insert      1.450  (± 0.0%) i/s -      8.000  in   5.519122s

Comparison:
       Array#unshift:      197.2 i/s
        Array#insert:        1.4 i/s - 136.00x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.089M i/100ms
          Array#size     2.097M i/100ms
         Array#count     1.636M i/100ms
Calculating -------------------------------------
        Array#length     20.877M (± 0.4%) i/s -    104.467M in   5.004102s
          Array#size     20.962M (± 0.4%) i/s -    104.844M in   5.001678s
         Array#count     16.264M (± 0.4%) i/s -     81.814M in   5.030304s

Comparison:
          Array#size: 20962117.7 i/s
        Array#length: 20876624.1 i/s - same-ish: difference falls within error
         Array#count: 16264425.2 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.813k i/100ms
        Array#sample     1.046M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    460.745k (± 0.5%) i/s -      2.336M in   5.071185s
        Array#sample     10.528M (± 0.2%) i/s -     53.344M in   5.066704s

Comparison:
        Array#sample: 10528342.3 i/s
 Array#shuffle.first:   460745.2 i/s - 22.85x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    64.695k i/100ms
          Date.parse    32.359k i/100ms
Calculating -------------------------------------
        Date.iso8601    648.954k (± 0.6%) i/s -      3.299M in   5.084420s
          Date.parse    323.796k (± 0.9%) i/s -      1.650M in   5.097200s

Comparison:
        Date.iso8601:   648954.0 i/s
          Date.parse:   323795.9 i/s - 2.00x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.794k i/100ms
           Array#map    26.997k i/100ms
Calculating -------------------------------------
   Array#each + push    187.504k (± 1.2%) i/s -    939.700k in   5.012460s
           Array#map    269.349k (± 0.9%) i/s -      1.350M in   5.011976s

Comparison:
           Array#map:   269348.8 i/s
   Array#each + push:   187503.9 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            For loop    29.690k i/100ms
               #each    32.680k i/100ms
Calculating -------------------------------------
            For loop    293.062k (± 0.5%) i/s -      1.484M in   5.065624s
               #each    326.908k (± 0.4%) i/s -      1.667M in   5.098381s

Comparison:
               #each:   326908.5 i/s
            For loop:   293062.2 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.360k i/100ms
     each_with_index    19.302k i/100ms
Calculating -------------------------------------
          While Loop    273.446k (± 0.2%) i/s -      1.368M in   5.002836s
     each_with_index    193.255k (± 0.5%) i/s -    984.402k in   5.093908s

Comparison:
          While Loop:   273446.4 i/s
     each_with_index:   193255.4 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       inject symbol   129.773k i/100ms
      inject to_proc     2.046k i/100ms
        inject block     2.123k i/100ms
Calculating -------------------------------------
       inject symbol    970.137k (±11.6%) i/s -      4.931M in   5.136250s
      inject to_proc     20.570k (± 0.6%) i/s -    104.346k in   5.072973s
        inject block     21.215k (± 0.5%) i/s -    106.150k in   5.003725s

Comparison:
       inject symbol:   970137.3 i/s
        inject block:    21214.6 i/s - 45.73x  (± 0.00) slower
      inject to_proc:    20569.8 i/s - 47.16x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.916k i/100ms
   Array#map.flatten     4.018k i/100ms
      Array#flat_map     9.590k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     69.224k (± 0.7%) i/s -    352.716k in   5.095571s
   Array#map.flatten     40.084k (± 0.4%) i/s -    200.900k in   5.012055s
      Array#flat_map     95.475k (± 0.2%) i/s -    479.500k in   5.022287s

Comparison:
      Array#flat_map:    95474.8 i/s
Array#map.flatten(1):    69223.7 i/s - 1.38x  (± 0.00) slower
   Array#map.flatten:    40084.1 i/s - 2.38x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    31.397k i/100ms
  Array#reverse_each    32.108k i/100ms
Calculating -------------------------------------
  Array#reverse.each    312.162k (± 0.5%) i/s -      1.570M in   5.029100s
  Array#reverse_each    322.802k (± 0.5%) i/s -      1.638M in   5.072941s

Comparison:
  Array#reverse_each:   322801.6 i/s
  Array#reverse.each:   312162.1 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.294k i/100ms
   Enumerable#detect    83.619k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        202.931k (± 0.5%) i/s -      4.059M in  20.001409s
   Enumerable#detect    831.333k (± 0.4%) i/s -     16.640M in  20.016516s

Comparison:
   Enumerable#detect:   831332.9 i/s
Enumerable#select.first:   202930.7 i/s - 4.10x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       241.736k i/100ms
Enumerable#select.last
                        18.678k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.424M (± 1.0%) i/s -     12.329M in   5.086239s
Enumerable#select.last
                        187.783k (± 0.7%) i/s -    952.578k in   5.072998s

Comparison:
Enumerable#reverse.detect:  2424164.0 i/s
Enumerable#select.last:   187783.0 i/s - 12.91x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.823k i/100ms
  Enumerable#sort_by     4.863k i/100ms
     Enumerable#sort     2.446k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         49.933k (± 1.1%) i/s -    250.796k in   5.023194s
  Enumerable#sort_by     48.053k (± 0.8%) i/s -    243.150k in   5.060435s
     Enumerable#sort     24.650k (± 0.2%) i/s -    124.746k in   5.060787s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    49933.1 i/s
  Enumerable#sort_by:    48052.6 i/s - 1.04x  (± 0.00) slower
     Enumerable#sort:    24649.7 i/s - 2.03x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.949k i/100ms
Enumerable#sort_by...first
                         8.678k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    179.223k (± 0.5%) i/s -    897.450k in   5.007560s
Enumerable#sort_by...first
                         86.646k (± 1.1%) i/s -    433.900k in   5.008306s

Comparison:
   Enumerable#min_by:   179223.1 i/s
Enumerable#sort_by...first:    86645.7 i/s - 2.07x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   400.074k i/100ms
            Hash#dup   301.501k i/100ms
Calculating -------------------------------------
              Hash[]      4.052M (± 3.1%) i/s -     20.404M in   5.040223s
            Hash#dup      3.051M (± 2.7%) i/s -     15.377M in   5.043306s

Comparison:
              Hash[]:  4052181.1 i/s
            Hash#dup:  3051072.4 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.438M i/100ms
  Hash#fetch, symbol     1.184M i/100ms
     Hash#[], string     1.247M i/100ms
  Hash#fetch, string   776.416k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.368M (± 0.4%) i/s -     71.886M in   5.003233s
  Hash#fetch, symbol     11.890M (± 1.3%) i/s -     60.378M in   5.078930s
     Hash#[], string     12.481M (± 0.2%) i/s -     63.621M in   5.097560s
  Hash#fetch, string      7.796M (± 0.2%) i/s -     39.597M in   5.079467s

Comparison:
     Hash#[], symbol: 14368240.8 i/s
     Hash#[], string: 12480707.2 i/s - 1.15x  (± 0.00) slower
  Hash#fetch, symbol: 11889960.5 i/s - 1.21x  (± 0.00) slower
  Hash#fetch, string:  7795563.9 i/s - 1.84x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   880.494k i/100ms
             Hash#[]     1.036M i/100ms
          Hash#[] ||   923.372k i/100ms
          Hash#[] &&   401.069k i/100ms
          Hash#fetch   605.122k i/100ms
 Hash#fetch fallback   392.210k i/100ms
Calculating -------------------------------------
            Hash#dig      8.611M (± 0.7%) i/s -     43.144M in   5.010543s
             Hash#[]     10.116M (± 3.1%) i/s -     50.785M in   5.025239s
          Hash#[] ||      9.591M (± 0.3%) i/s -     48.015M in   5.006134s
          Hash#[] &&      4.202M (± 3.3%) i/s -     21.257M in   5.064886s
          Hash#fetch      6.342M (± 1.2%) i/s -     32.071M in   5.058020s
 Hash#fetch fallback      3.883M (± 0.7%) i/s -     19.610M in   5.050217s

Comparison:
             Hash#[]: 10115791.6 i/s
          Hash#[] ||:  9591374.8 i/s - 1.05x  (± 0.00) slower
            Hash#dig:  8611054.1 i/s - 1.17x  (± 0.00) slower
          Hash#fetch:  6341586.3 i/s - 1.60x  (± 0.00) slower
          Hash#[] &&:  4201520.1 i/s - 2.41x  (± 0.00) slower
 Hash#fetch fallback:  3883271.6 i/s - 2.60x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.449M i/100ms
  Hash#fetch + block     1.462M i/100ms
    Hash#fetch + arg     1.086M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.371M (± 0.4%) i/s -     72.450M in   5.041397s
  Hash#fetch + block     14.494M (± 1.0%) i/s -     73.124M in   5.045585s
    Hash#fetch + arg     10.994M (± 0.3%) i/s -     55.389M in   5.038313s

Comparison:
  Hash#fetch + block: 14494269.2 i/s
  Hash#fetch + const: 14371196.5 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 10993598.4 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.461k i/100ms
         sort + to_h    11.015k i/100ms
Calculating -------------------------------------
      sort_by + to_h    275.866k (± 0.7%) i/s -      1.401M in   5.077025s
         sort + to_h    109.797k (± 0.7%) i/s -    550.750k in   5.016337s

Comparison:
      sort_by + to_h:   275866.2 i/s
         sort + to_h:   109797.5 i/s - 2.51x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   185.141k i/100ms
       Hash#each_key   198.880k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.790M (± 0.4%) i/s -      9.072M in   5.068624s
       Hash#each_key      1.978M (± 0.1%) i/s -      9.944M in   5.026777s

Comparison:
       Hash#each_key:  1978210.0 i/s
      Hash#keys.each:  1789850.2 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.261k i/100ms
           Hash#key?   991.015k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     12.270k (± 5.4%) i/s -     61.789k in   5.051661s
           Hash#key?      9.893M (± 0.5%) i/s -     49.551M in   5.008743s

Comparison:
           Hash#key?:  9893117.7 i/s
  Hash#keys.include?:    12269.7 i/s - 806.30x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.997k i/100ms
            Hash#[]=    10.369k i/100ms
Calculating -------------------------------------
         Hash#merge!     39.907k (± 1.1%) i/s -    199.850k in   5.008546s
            Hash#[]=    102.575k (± 0.8%) i/s -    518.450k in   5.054627s

Comparison:
            Hash#[]=:   102575.4 i/s
         Hash#merge!:    39906.9 i/s - 2.57x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.774k i/100ms
      Hash#merge({})     3.958k i/100ms
 Hash#dup#merge!({})     2.879k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         47.372k (± 0.9%) i/s -    238.700k in   5.039219s
      Hash#merge({})     39.233k (± 0.7%) i/s -    197.900k in   5.044522s
 Hash#dup#merge!({})     28.572k (± 0.9%) i/s -    143.950k in   5.038609s

Comparison:
{}#merge!(Hash) do end:    47371.9 i/s
      Hash#merge({}):    39232.9 i/s - 1.21x  (± 0.00) slower
 Hash#dup#merge!({}):    28571.7 i/s - 1.66x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   389.216k i/100ms
          Hash#merge   362.759k i/100ms
Calculating -------------------------------------
        Hash#**other      3.873M (± 0.6%) i/s -     19.461M in   5.025159s
          Hash#merge      3.611M (± 0.5%) i/s -     18.138M in   5.022565s

Comparison:
        Hash#**other:  3872803.7 i/s
          Hash#merge:  3611373.6 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.583k i/100ms
         Hash#merge!     3.960k i/100ms
Calculating -------------------------------------
          Hash#merge     16.353k (± 2.4%) i/s -     82.316k in   5.036563s
         Hash#merge!     39.536k (± 0.3%) i/s -    198.000k in   5.008096s

Comparison:
         Hash#merge!:    39536.4 i/s
          Hash#merge:    16353.3 i/s - 2.42x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      423.024k i/100ms
Array#each             233.401k i/100ms
Array#each_w/_object   176.792k i/100ms
Hash#select-include     71.476k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.195M (± 0.7%) i/s -     21.151M in   5.042743s
Array#each                2.303M (± 1.1%) i/s -     11.670M in   5.066917s
Array#each_w/_object      1.750M (± 0.2%) i/s -      8.840M in   5.051279s
Hash#select-include     704.782k (± 1.5%) i/s -      3.574M in   5.072008s

Comparison:
Hash#native-slice   :  4194609.9 i/s
Array#each          :  2303453.7 i/s - 1.82x  (± 0.00) slower
Array#each_w/_object:  1749978.3 i/s - 2.40x  (± 0.00) slower
Hash#select-include :   704782.5 i/s - 5.95x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.082k i/100ms
         Hash#value?   843.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     10.785k (± 4.4%) i/s -     54.100k in   5.027993s
         Hash#value?      8.435k (± 0.7%) i/s -     42.993k in   5.097364s

Comparison:
Hash#values.include?:    10784.9 i/s
         Hash#value?:     8434.8 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                call   666.809k i/100ms
                send   528.127k i/100ms
      method_missing   387.790k i/100ms
Calculating -------------------------------------
                call      6.706M (± 0.2%) i/s -     34.007M in   5.070965s
                send      5.273M (± 0.9%) i/s -     26.406M in   5.008388s
      method_missing      3.891M (± 0.8%) i/s -     19.777M in   5.083405s

Comparison:
                call:  6706305.5 i/s
                send:  5272927.3 i/s - 1.27x  (± 0.00) slower
      method_missing:  3890797.1 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
               Block     9.031k i/100ms
      Symbol#to_proc     9.698k i/100ms
Calculating -------------------------------------
               Block     90.500k (± 0.5%) i/s -    460.581k in   5.089444s
      Symbol#to_proc     97.243k (± 0.3%) i/s -    494.598k in   5.086262s

Comparison:
      Symbol#to_proc:    97243.0 i/s
               Block:    90499.6 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          block.call   917.277k i/100ms
       block + yield   962.143k i/100ms
        unused block     1.265M i/100ms
               yield     1.144M i/100ms
Calculating -------------------------------------
          block.call      9.457M (± 0.5%) i/s -     47.698M in   5.043674s
       block + yield     10.023M (± 0.1%) i/s -     50.994M in   5.087851s
        unused block     13.129M (± 0.3%) i/s -     65.754M in   5.008403s
               yield     11.793M (± 0.5%) i/s -     59.462M in   5.042076s

Comparison:
        unused block: 13128940.4 i/s
               yield: 11793451.8 i/s - 1.11x  (± 0.00) slower
       block + yield: 10022629.7 i/s - 1.31x  (± 0.00) slower
          block.call:  9457277.5 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   322.059k i/100ms
      range#include?    12.792k i/100ms
       range#member?    12.776k i/100ms
       plain compare   522.157k i/100ms
Calculating -------------------------------------
        range#cover?      3.237M (± 0.9%) i/s -     16.425M in   5.075154s
      range#include?    126.984k (± 0.5%) i/s -    639.600k in   5.036976s
       range#member?    127.178k (± 0.7%) i/s -    638.800k in   5.023102s
       plain compare      5.119M (± 3.0%) i/s -     25.586M in   5.003543s

Comparison:
       plain compare:  5118945.5 i/s
        range#cover?:  3236614.1 i/s - 1.58x  (± 0.00) slower
       range#member?:   127178.2 i/s - 40.25x  (± 0.00) slower
      range#include?:   126984.3 i/s - 40.31x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       String#match?   905.949k i/100ms
           String#=~   649.411k i/100ms
          Regexp#===   564.511k i/100ms
        String#match   472.983k i/100ms
Calculating -------------------------------------
       String#match?      9.015M (± 0.4%) i/s -     45.297M in   5.024708s
           String#=~      6.463M (± 0.9%) i/s -     32.471M in   5.024535s
          Regexp#===      5.645M (± 0.5%) i/s -     28.226M in   5.000607s
        String#match      4.713M (± 0.6%) i/s -     23.649M in   5.018349s

Comparison:
       String#match?:  9015123.1 i/s
           String#=~:  6462916.5 i/s - 1.39x  (± 0.00) slower
          Regexp#===:  5644565.6 i/s - 1.60x  (± 0.00) slower
        String#match:  4712710.8 i/s - 1.91x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   650.622k i/100ms
      String#casecmp   814.293k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.539M (± 0.5%) i/s -     33.182M in   5.074540s
      String#casecmp      8.106M (± 1.1%) i/s -     40.715M in   5.023275s

Comparison:
      String#casecmp:  8106148.9 i/s
String#downcase + ==:  6539057.8 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            String#+   601.257k i/100ms
       String#concat   628.829k i/100ms
       String#append   673.302k i/100ms
         "foo" "bar"     1.141M i/100ms
  "#{'foo'}#{'bar'}"     1.152M i/100ms
Calculating -------------------------------------
            String#+      6.023M (± 0.5%) i/s -     30.664M in   5.091563s
       String#concat      6.223M (± 0.5%) i/s -     31.441M in   5.052556s
       String#append      6.773M (± 0.6%) i/s -     34.338M in   5.070407s
         "foo" "bar"     11.373M (± 0.3%) i/s -     57.057M in   5.016929s
  "#{'foo'}#{'bar'}"     11.518M (± 0.4%) i/s -     57.609M in   5.001897s

Comparison:
  "#{'foo'}#{'bar'}": 11517543.1 i/s
         "foo" "bar": 11373079.4 i/s - 1.01x  (± 0.00) slower
       String#append:  6772534.8 i/s - 1.70x  (± 0.00) slower
       String#concat:  6223061.0 i/s - 1.85x  (± 0.00) slower
            String#+:  6022674.3 i/s - 1.91x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#+@   984.447k i/100ms
          String#dup   580.291k i/100ms
Calculating -------------------------------------
           String#+@      9.832M (± 0.3%) i/s -     49.222M in   5.006407s
          String#dup      5.774M (± 0.6%) i/s -     29.015M in   5.025369s

Comparison:
           String#+@:  9831968.0 i/s
          String#dup:  5773794.3 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   185.802k i/100ms
       String#match?   427.237k i/100ms
    String#end_with?   614.878k i/100ms
Calculating -------------------------------------
           String#=~      1.873M (± 0.4%) i/s -      9.476M in   5.058354s
       String#match?      4.277M (± 0.3%) i/s -     21.789M in   5.095097s
    String#end_with?      6.223M (± 0.6%) i/s -     31.359M in   5.039280s

Comparison:
    String#end_with?:  6223116.9 i/s
       String#match?:  4276520.1 i/s - 1.46x  (± 0.00) slower
           String#=~:  1873342.4 i/s - 3.32x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   114.834k i/100ms
          String#sub   139.502k i/100ms
String#dup["string"]=
                       182.107k i/100ms
Calculating -------------------------------------
         String#gsub      1.152M (± 0.4%) i/s -      5.857M in   5.084759s
          String#sub      1.415M (± 0.5%) i/s -      7.115M in   5.029107s
String#dup["string"]=
                          1.805M (± 0.4%) i/s -      9.105M in   5.044700s

Comparison:
String#dup["string"]=:  1804962.3 i/s
          String#sub:  1414727.5 i/s - 1.28x  (± 0.00) slower
         String#gsub:  1151803.3 i/s - 1.57x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   106.329k i/100ms
           String#tr   346.505k i/100ms
Calculating -------------------------------------
         String#gsub      1.064M (± 0.4%) i/s -      5.423M in   5.096345s
           String#tr      3.500M (± 0.4%) i/s -     17.672M in   5.049678s

Comparison:
           String#tr:  3499646.8 i/s
         String#gsub:  1064067.8 i/s - 3.29x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.154M i/100ms
         With Freeze     1.691M i/100ms
Calculating -------------------------------------
      Without Freeze     11.563M (± 0.5%) i/s -     58.833M in   5.087987s
         With Freeze     16.851M (± 0.6%) i/s -     84.567M in   5.018861s

Comparison:
         With Freeze: 16850548.3 i/s
      Without Freeze: 11563398.0 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.391k i/100ms
      String#squeeze   151.331k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     34.152k (± 0.9%) i/s -    172.941k in   5.064288s
      String#squeeze      1.552M (± 1.0%) i/s -      7.869M in   5.072091s

Comparison:
      String#squeeze:  1551618.3 i/s
 String#gsub/regex+/:    34151.9 i/s - 45.43x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   278.562k i/100ms
       String#match?   757.373k i/100ms
  String#start_with?   863.522k i/100ms
Calculating -------------------------------------
           String#=~      2.849M (± 0.6%) i/s -     14.485M in   5.085021s
       String#match?      7.526M (± 0.5%) i/s -     37.869M in   5.031491s
  String#start_with?      8.650M (± 0.6%) i/s -     44.040M in   5.091641s

Comparison:
  String#start_with?:  8649674.0 i/s
       String#match?:  7526493.1 i/s - 1.15x  (± 0.00) slower
           String#=~:  2848701.1 i/s - 3.04x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   193.860k i/100ms
    String#[0, n] ==    82.849k i/100ms
   String#[RANGE] ==    76.860k i/100ms
   String#[0...n] ==    47.223k i/100ms
Calculating -------------------------------------
  String#start_with?      1.980M (± 0.4%) i/s -     10.081M in   5.090986s
    String#[0, n] ==    822.895k (± 0.8%) i/s -      4.142M in   5.034297s
   String#[RANGE] ==    766.537k (± 0.9%) i/s -      3.843M in   5.013860s
   String#[0...n] ==    470.233k (± 0.9%) i/s -      2.361M in   5.021681s

Comparison:
  String#start_with?:  1980142.4 i/s
    String#[0, n] ==:   822895.0 i/s - 2.41x  (± 0.00) slower
   String#[RANGE] ==:   766537.2 i/s - 2.58x  (± 0.00) slower
   String#[0...n] ==:   470233.1 i/s - 4.21x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   184.915k i/100ms
 String#sub!'string'   124.561k i/100ms
String#gsub!'string'    77.718k i/100ms
  String#[/regexp/]=   151.152k i/100ms
 String#sub!/regexp/   113.960k i/100ms
String#gsub!/regexp/    60.511k i/100ms
Calculating -------------------------------------
  String#['string']=      1.848M (± 0.7%) i/s -      9.246M in   5.003127s
 String#sub!'string'      1.271M (± 0.8%) i/s -      6.477M in   5.097668s
String#gsub!'string'    776.801k (± 0.6%) i/s -      3.886M in   5.002638s
  String#[/regexp/]=      1.526M (± 1.1%) i/s -      7.709M in   5.050649s
 String#sub!/regexp/      1.142M (± 0.5%) i/s -      5.812M in   5.088017s
String#gsub!/regexp/    604.085k (± 0.7%) i/s -      3.026M in   5.008700s

Comparison:
  String#['string']=:  1848081.7 i/s
  String#[/regexp/]=:  1526481.4 i/s - 1.21x  (± 0.00) slower
 String#sub!'string':  1270694.7 i/s - 1.45x  (± 0.00) slower
 String#sub!/regexp/:  1142316.3 i/s - 1.62x  (± 0.00) slower
String#gsub!'string':   776800.7 i/s - 2.38x  (± 0.00) slower
String#gsub!/regexp/:   604084.8 i/s - 3.06x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          String#sub   144.460k i/100ms
        String#chomp   555.031k i/100ms
String#delete_suffix   612.206k i/100ms
Calculating -------------------------------------
          String#sub      1.436M (± 0.7%) i/s -      7.223M in   5.031392s
        String#chomp      5.555M (± 0.4%) i/s -     28.307M in   5.096102s
String#delete_suffix      6.108M (± 0.5%) i/s -     30.610M in   5.011586s

Comparison:
String#delete_suffix:  6108058.2 i/s
        String#chomp:  5554662.8 i/s - 1.10x  (± 0.00) slower
          String#sub:  1435662.4 i/s - 4.25x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   633.280k i/100ms
          String#sub   147.879k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.357M (± 0.5%) i/s -     32.297M in   5.080685s
          String#sub      1.482M (± 0.6%) i/s -      7.542M in   5.090421s

Comparison:
String#delete_prefix:  6357021.3 i/s
          String#sub:  1481620.9 i/s - 4.29x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   614.771k i/100ms
    String#unpack[0]   486.675k i/100ms
Calculating -------------------------------------
      String#unpack1      6.165M (± 0.5%) i/s -     31.353M in   5.085625s
    String#unpack[0]      4.821M (± 0.5%) i/s -     24.334M in   5.048016s

Comparison:
      String#unpack1:  6165226.1 i/s
    String#unpack[0]:  4820597.1 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    28.404k i/100ms
          Time.parse     9.691k i/100ms
Calculating -------------------------------------
        Time.iso8601    284.288k (± 0.9%) i/s -      1.449M in   5.095973s
          Time.parse     97.203k (± 1.0%) i/s -    494.241k in   5.085125s

Comparison:
        Time.iso8601:   284288.4 i/s
          Time.parse:    97202.6 i/s - 2.92x  (± 0.00) slower

