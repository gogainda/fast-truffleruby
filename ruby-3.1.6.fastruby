$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       774.698k i/100ms
Function with splat arguments
                        26.501k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.755M (± 0.6%) i/s -     39.510M in   5.094603s
Function with splat arguments
                        266.461k (± 5.8%) i/s -      1.352M in   5.095795s

Comparison:
Function with single Array argument:  7755484.5 i/s
Function with splat arguments:   266461.3 i/s - 29.11x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.017M i/100ms
Sequential Assignment
                         1.018M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.204M (± 0.3%) i/s -     51.871M in   5.083294s
Sequential Assignment
                         10.212M (± 0.3%) i/s -     51.925M in   5.084575s

Comparison:
Sequential Assignment: 10212385.7 i/s
 Parallel Assignment: 10204260.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   484.851k i/100ms
       attr_accessor   527.494k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.849M (± 0.5%) i/s -     24.727M in   5.099192s
       attr_accessor      5.234M (± 0.7%) i/s -     26.375M in   5.039389s

Comparison:
       attr_accessor:  5233950.8 i/s
   getter_and_setter:  4849409.6 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    88.129k i/100ms
         respond_to?   780.912k i/100ms
Calculating -------------------------------------
      begin...rescue    882.214k (± 0.7%) i/s -      4.495M in   5.094954s
         respond_to?      7.795M (± 0.4%) i/s -     39.046M in   5.008940s

Comparison:
         respond_to?:  7795321.3 i/s
      begin...rescue:   882213.8 i/s - 8.84x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              normal   298.271k i/100ms
             &method   123.405k i/100ms
Calculating -------------------------------------
              normal      2.961M (± 0.9%) i/s -     14.914M in   5.037616s
             &method      1.247M (± 0.5%) i/s -      6.294M in   5.048308s

Comparison:
              normal:  2960663.6 i/s
             &method:  1246712.9 i/s - 2.37x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       265.000  i/100ms
       define_method   294.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.415k (±21.0%) i/s -     10.865k in   5.120745s
       define_method      3.247k (±19.7%) i/s -     14.700k in   5.015372s

Comparison:
       define_method:     3247.2 i/s
module_eval with string:     2414.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Float#round   262.185k i/100ms
       Kernel#format   201.159k i/100ms
            String#%   170.585k i/100ms
Calculating -------------------------------------
         Float#round      2.639M (± 0.3%) i/s -     13.371M in   5.067614s
       Kernel#format      2.009M (± 0.7%) i/s -     10.058M in   5.006445s
            String#%      1.719M (± 0.5%) i/s -      8.700M in   5.059716s

Comparison:
         Float#round:  2638625.8 i/s
       Kernel#format:  2009088.8 i/s - 1.31x  (± 0.00) slower
            String#%:  1719474.3 i/s - 1.53x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash   910.624k i/100ms
          OpenStruct   502.853k i/100ms
Calculating -------------------------------------
                Hash      9.090M (± 0.5%) i/s -     45.531M in   5.009292s
          OpenStruct      5.007M (± 1.0%) i/s -     25.143M in   5.021993s

Comparison:
                Hash:  9089557.8 i/s
          OpenStruct:  5007041.7 i/s - 1.82x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.067M i/100ms
          OpenStruct    11.648k i/100ms
Calculating -------------------------------------
                Hash     11.341M (± 0.2%) i/s -     57.596M in   5.078667s
          OpenStruct    117.445k (± 2.5%) i/s -    594.048k in   5.061381s

Comparison:
                Hash: 11340770.5 i/s
          OpenStruct:   117444.9 i/s - 96.56x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   597.008k i/100ms
  ancestors.include?   118.617k i/100ms
Calculating -------------------------------------
  less than or equal      5.997M (± 0.8%) i/s -     30.447M in   5.077575s
  ancestors.include?      1.194M (± 0.7%) i/s -      6.049M in   5.068185s

Comparison:
  less than or equal:  5996798.3 i/s
  ancestors.include?:  1193670.4 i/s - 5.02x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.625  (± 0.0%) i/s -      4.000  in   6.412827s
         Kernel loop      0.228  (± 0.0%) i/s -      2.000  in   8.781814s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 2.74x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.572M i/100ms
         Array#first     1.327M i/100ms
Calculating -------------------------------------
           Array#[0]     15.697M (± 0.5%) i/s -     78.613M in   5.008402s
         Array#first     13.248M (± 0.3%) i/s -     66.374M in   5.010011s

Comparison:
           Array#[0]: 15696757.9 i/s
         Array#first: 13248412.7 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.554M i/100ms
          Array#last     1.319M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.570M (± 0.3%) i/s -     79.272M in   5.091207s
          Array#last     13.135M (± 0.2%) i/s -     65.960M in   5.021642s

Comparison:
          Array#[-1]: 15570419.4 i/s
          Array#last: 13135198.3 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    96.594k i/100ms
Calculating -------------------------------------
                find      0.285  (± 0.0%) i/s -      2.000  in   7.015015s
             bsearch    976.351k (± 1.5%) i/s -      4.926M in   5.046760s

Comparison:
             bsearch:   976351.2 i/s
                find:        0.3 i/s - 3424495.48x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    19.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    195.039  (± 2.6%) i/s -    988.000  in   5.069214s
        Array#insert      1.452  (± 0.0%) i/s -      8.000  in   5.508616s

Comparison:
       Array#unshift:      195.0 i/s
        Array#insert:        1.5 i/s - 134.29x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.084M i/100ms
          Array#size     2.096M i/100ms
         Array#count     1.640M i/100ms
Calculating -------------------------------------
        Array#length     20.929M (± 0.3%) i/s -    106.278M in   5.078038s
          Array#size     21.069M (± 0.3%) i/s -    106.917M in   5.074707s
         Array#count     16.445M (± 0.4%) i/s -     83.619M in   5.084747s

Comparison:
          Array#size: 21068856.5 i/s
        Array#length: 20929284.5 i/s - same-ish: difference falls within error
         Array#count: 16445370.3 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    46.196k i/100ms
        Array#sample     1.004M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    462.416k (± 0.4%) i/s -      2.356M in   5.095053s
        Array#sample     10.033M (± 0.4%) i/s -     50.212M in   5.005007s

Comparison:
        Array#sample: 10032545.9 i/s
 Array#shuffle.first:   462416.2 i/s - 21.70x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    64.549k i/100ms
          Date.parse    32.534k i/100ms
Calculating -------------------------------------
        Date.iso8601    639.204k (± 0.4%) i/s -      3.227M in   5.049270s
          Date.parse    325.917k (± 0.3%) i/s -      1.659M in   5.091024s

Comparison:
        Date.iso8601:   639204.1 i/s
          Date.parse:   325916.9 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.821k i/100ms
           Array#map    26.805k i/100ms
Calculating -------------------------------------
   Array#each + push    188.435k (± 0.3%) i/s -    959.871k in   5.093956s
           Array#map    267.504k (± 1.2%) i/s -      1.340M in   5.010913s

Comparison:
           Array#map:   267504.1 i/s
   Array#each + push:   188434.9 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            For loop    28.326k i/100ms
               #each    31.625k i/100ms
Calculating -------------------------------------
            For loop    283.341k (± 0.3%) i/s -      1.445M in   5.098588s
               #each    316.795k (± 0.5%) i/s -      1.613M in   5.091368s

Comparison:
               #each:   316795.1 i/s
            For loop:   283341.5 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.639k i/100ms
     each_with_index    18.983k i/100ms
Calculating -------------------------------------
          While Loop    274.168k (± 0.5%) i/s -      1.382M in   5.040653s
     each_with_index    189.459k (± 2.7%) i/s -    949.150k in   5.014286s

Comparison:
          While Loop:   274168.2 i/s
     each_with_index:   189458.9 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    93.294k i/100ms
      inject to_proc     2.198k i/100ms
        inject block     2.118k i/100ms
Calculating -------------------------------------
       inject symbol      1.005M (±14.5%) i/s -      4.945M in   5.004805s
      inject to_proc     22.041k (± 0.5%) i/s -    112.098k in   5.085968s
        inject block     21.199k (± 0.4%) i/s -    108.018k in   5.095578s

Comparison:
       inject symbol:  1005232.5 i/s
      inject to_proc:    22041.3 i/s - 45.61x  (± 0.00) slower
        inject block:    21198.7 i/s - 47.42x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.946k i/100ms
   Array#map.flatten     4.030k i/100ms
      Array#flat_map     9.639k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     69.461k (± 0.5%) i/s -    347.300k in   5.000067s
   Array#map.flatten     39.796k (± 0.7%) i/s -    201.500k in   5.063648s
      Array#flat_map     96.451k (± 0.5%) i/s -    491.589k in   5.096894s

Comparison:
      Array#flat_map:    96450.7 i/s
Array#map.flatten(1):    69460.7 i/s - 1.39x  (± 0.00) slower
   Array#map.flatten:    39795.6 i/s - 2.42x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    31.538k i/100ms
  Array#reverse_each    32.379k i/100ms
Calculating -------------------------------------
  Array#reverse.each    316.495k (± 0.5%) i/s -      1.608M in   5.082187s
  Array#reverse_each    324.282k (± 0.9%) i/s -      1.651M in   5.092700s

Comparison:
  Array#reverse_each:   324282.1 i/s
  Array#reverse.each:   316494.7 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.828k i/100ms
   Enumerable#detect    81.593k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        208.537k (± 0.4%) i/s -      4.186M in  20.075532s
   Enumerable#detect    829.046k (± 0.9%) i/s -     16.645M in  20.079050s

Comparison:
   Enumerable#detect:   829046.1 i/s
Enumerable#select.first:   208536.7 i/s - 3.98x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       246.064k i/100ms
Enumerable#select.last
                        18.970k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.430M (± 0.8%) i/s -     12.303M in   5.063795s
Enumerable#select.last
                        189.155k (± 0.4%) i/s -    948.500k in   5.014497s

Comparison:
Enumerable#reverse.detect:  2429795.9 i/s
Enumerable#select.last:   189154.6 i/s - 12.85x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         5.102k i/100ms
  Enumerable#sort_by     4.961k i/100ms
     Enumerable#sort     2.461k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         52.163k (± 1.0%) i/s -    265.304k in   5.086539s
  Enumerable#sort_by     49.589k (± 1.1%) i/s -    248.050k in   5.002754s
     Enumerable#sort     24.139k (± 0.7%) i/s -    123.050k in   5.097817s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    52163.4 i/s
  Enumerable#sort_by:    49588.8 i/s - 1.05x  (± 0.00) slower
     Enumerable#sort:    24139.1 i/s - 2.16x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    18.046k i/100ms
Enumerable#sort_by...first
                         9.000k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    180.052k (± 0.3%) i/s -    902.300k in   5.011395s
Enumerable#sort_by...first
                         89.664k (± 0.6%) i/s -    450.000k in   5.018890s

Comparison:
   Enumerable#min_by:   180051.6 i/s
Enumerable#sort_by...first:    89664.1 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   420.229k i/100ms
            Hash#dup   302.965k i/100ms
Calculating -------------------------------------
              Hash[]      4.114M (± 2.0%) i/s -     20.591M in   5.006695s
            Hash#dup      2.940M (± 1.0%) i/s -     14.845M in   5.050585s

Comparison:
              Hash[]:  4114244.1 i/s
            Hash#dup:  2939616.2 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.436M i/100ms
  Hash#fetch, symbol     1.152M i/100ms
     Hash#[], string     1.238M i/100ms
  Hash#fetch, string   789.786k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.376M (± 0.3%) i/s -     73.221M in   5.093159s
  Hash#fetch, symbol     11.918M (± 0.4%) i/s -     59.889M in   5.025269s
     Hash#[], string     12.409M (± 0.4%) i/s -     63.133M in   5.087667s
  Hash#fetch, string      7.893M (± 0.3%) i/s -     39.489M in   5.003053s

Comparison:
     Hash#[], symbol: 14376447.6 i/s
     Hash#[], string: 12409236.3 i/s - 1.16x  (± 0.00) slower
  Hash#fetch, symbol: 11917764.7 i/s - 1.21x  (± 0.00) slower
  Hash#fetch, string:  7893127.6 i/s - 1.82x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   847.599k i/100ms
             Hash#[]   995.748k i/100ms
          Hash#[] ||   869.438k i/100ms
          Hash#[] &&   385.889k i/100ms
          Hash#fetch   619.940k i/100ms
 Hash#fetch fallback   398.418k i/100ms
Calculating -------------------------------------
            Hash#dig      8.543M (± 0.5%) i/s -     43.228M in   5.059968s
             Hash#[]     10.036M (± 0.9%) i/s -     50.783M in   5.060601s
          Hash#[] ||      8.939M (± 2.8%) i/s -     45.211M in   5.061567s
          Hash#[] &&      3.790M (± 1.1%) i/s -     19.294M in   5.090968s
          Hash#fetch      6.256M (± 0.9%) i/s -     31.617M in   5.054090s
 Hash#fetch fallback      3.953M (± 0.6%) i/s -     19.921M in   5.039246s

Comparison:
             Hash#[]: 10035769.7 i/s
          Hash#[] ||:  8938946.5 i/s - 1.12x  (± 0.00) slower
            Hash#dig:  8543262.1 i/s - 1.17x  (± 0.00) slower
          Hash#fetch:  6256246.0 i/s - 1.60x  (± 0.00) slower
 Hash#fetch fallback:  3953301.5 i/s - 2.54x  (± 0.00) slower
          Hash#[] &&:  3790387.0 i/s - 2.65x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.447M i/100ms
  Hash#fetch + block     1.460M i/100ms
    Hash#fetch + arg     1.103M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.547M (± 0.6%) i/s -     73.796M in   5.073001s
  Hash#fetch + block     14.511M (± 0.5%) i/s -     73.014M in   5.031800s
    Hash#fetch + arg     11.007M (± 0.3%) i/s -     55.170M in   5.012501s

Comparison:
  Hash#fetch + const: 14547428.3 i/s
  Hash#fetch + block: 14510889.4 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 11006643.9 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.582k i/100ms
         sort + to_h    11.070k i/100ms
Calculating -------------------------------------
      sort_by + to_h    274.517k (± 0.4%) i/s -      1.379M in   5.023840s
         sort + to_h    109.060k (± 6.0%) i/s -    542.430k in   5.001370s

Comparison:
      sort_by + to_h:   274516.7 i/s
         sort + to_h:   109060.2 i/s - 2.52x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   192.188k i/100ms
       Hash#each_key   210.230k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.883M (± 0.3%) i/s -      9.417M in   5.001373s
       Hash#each_key      2.059M (± 0.6%) i/s -     10.301M in   5.002800s

Comparison:
       Hash#each_key:  2059175.7 i/s
      Hash#keys.each:  1882948.1 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     2.550k i/100ms
           Hash#key?   943.599k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     25.427k (± 4.8%) i/s -    127.500k in   5.029918s
           Hash#key?      9.452M (± 0.6%) i/s -     48.124M in   5.091791s

Comparison:
           Hash#key?:  9451502.8 i/s
  Hash#keys.include?:    25427.0 i/s - 371.71x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.868k i/100ms
            Hash#[]=    10.434k i/100ms
Calculating -------------------------------------
         Hash#merge!     38.786k (± 0.4%) i/s -    197.268k in   5.086118s
            Hash#[]=    104.110k (± 0.8%) i/s -    521.700k in   5.011379s

Comparison:
            Hash#[]=:   104109.7 i/s
         Hash#merge!:    38786.1 i/s - 2.68x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.717k i/100ms
      Hash#merge({})     4.006k i/100ms
 Hash#dup#merge!({})     2.891k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         47.885k (± 0.5%) i/s -    240.567k in   5.023955s
      Hash#merge({})     39.777k (± 0.5%) i/s -    200.300k in   5.035753s
 Hash#dup#merge!({})     28.721k (± 0.6%) i/s -    144.550k in   5.033064s

Comparison:
{}#merge!(Hash) do end:    47885.4 i/s
      Hash#merge({}):    39776.8 i/s - 1.20x  (± 0.00) slower
 Hash#dup#merge!({}):    28721.1 i/s - 1.67x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   387.713k i/100ms
          Hash#merge   365.281k i/100ms
Calculating -------------------------------------
        Hash#**other      3.878M (± 0.3%) i/s -     19.773M in   5.098481s
          Hash#merge      3.612M (± 0.6%) i/s -     18.264M in   5.056025s

Comparison:
        Hash#**other:  3878327.6 i/s
          Hash#merge:  3612461.5 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.650k i/100ms
         Hash#merge!     3.961k i/100ms
Calculating -------------------------------------
          Hash#merge     16.372k (± 1.1%) i/s -     82.500k in   5.039664s
         Hash#merge!     39.128k (± 0.7%) i/s -    198.050k in   5.061910s

Comparison:
         Hash#merge!:    39127.7 i/s
          Hash#merge:    16372.2 i/s - 2.39x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      412.273k i/100ms
Array#each             230.015k i/100ms
Array#each_w/_object   176.264k i/100ms
Hash#select-include     72.255k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.134M (± 2.8%) i/s -     21.026M in   5.091286s
Array#each                2.282M (± 0.7%) i/s -     11.501M in   5.039626s
Array#each_w/_object      1.763M (± 0.7%) i/s -      8.813M in   4.999957s
Hash#select-include     732.952k (± 0.2%) i/s -      3.685M in   5.027651s

Comparison:
Hash#native-slice   :  4133667.0 i/s
Array#each          :  2282169.9 i/s - 1.81x  (± 0.00) slower
Array#each_w/_object:  1762752.5 i/s - 2.35x  (± 0.00) slower
Hash#select-include :   732952.1 i/s - 5.64x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.240k i/100ms
         Hash#value?   922.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     11.938k (± 4.7%) i/s -     60.760k in   5.102021s
         Hash#value?      9.223k (± 0.7%) i/s -     47.022k in   5.098690s

Comparison:
Hash#values.include?:    11937.8 i/s
         Hash#value?:     9222.8 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                call   672.300k i/100ms
                send   528.062k i/100ms
      method_missing   390.661k i/100ms
Calculating -------------------------------------
                call      6.739M (± 0.4%) i/s -     34.287M in   5.088228s
                send      5.246M (± 0.2%) i/s -     26.403M in   5.032604s
      method_missing      3.881M (± 0.2%) i/s -     19.533M in   5.032646s

Comparison:
                call:  6738651.0 i/s
                send:  5246422.7 i/s - 1.28x  (± 0.00) slower
      method_missing:  3881282.7 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
               Block     9.109k i/100ms
      Symbol#to_proc    10.272k i/100ms
Calculating -------------------------------------
               Block     90.406k (± 0.6%) i/s -    455.450k in   5.038042s
      Symbol#to_proc    102.331k (± 0.4%) i/s -    513.600k in   5.019098s

Comparison:
      Symbol#to_proc:   102330.7 i/s
               Block:    90405.8 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          block.call   945.379k i/100ms
       block + yield   977.051k i/100ms
        unused block     1.309M i/100ms
               yield     1.194M i/100ms
Calculating -------------------------------------
          block.call      9.435M (± 1.1%) i/s -     47.269M in   5.010715s
       block + yield      9.771M (± 0.4%) i/s -     49.830M in   5.099623s
        unused block     13.071M (± 0.8%) i/s -     65.426M in   5.005670s
               yield     11.955M (± 0.1%) i/s -     60.892M in   5.093273s

Comparison:
        unused block: 13071197.0 i/s
               yield: 11955363.2 i/s - 1.09x  (± 0.00) slower
       block + yield:  9771403.2 i/s - 1.34x  (± 0.00) slower
          block.call:  9434715.1 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   326.987k i/100ms
      range#include?    12.642k i/100ms
       range#member?    12.682k i/100ms
       plain compare   528.077k i/100ms
Calculating -------------------------------------
        range#cover?      3.266M (± 0.7%) i/s -     16.349M in   5.006513s
      range#include?    129.239k (± 3.0%) i/s -    657.384k in   5.092173s
       range#member?    128.934k (± 0.6%) i/s -    646.782k in   5.016571s
       plain compare      5.230M (± 0.8%) i/s -     26.404M in   5.049295s

Comparison:
       plain compare:  5229587.0 i/s
        range#cover?:  3265763.1 i/s - 1.60x  (± 0.00) slower
      range#include?:   129238.5 i/s - 40.46x  (± 0.00) slower
       range#member?:   128933.7 i/s - 40.56x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       String#match?   919.440k i/100ms
           String#=~   638.604k i/100ms
          Regexp#===   573.966k i/100ms
        String#match   467.919k i/100ms
Calculating -------------------------------------
       String#match?      9.156M (± 1.1%) i/s -     45.972M in   5.021402s
           String#=~      6.417M (± 0.5%) i/s -     32.569M in   5.075546s
          Regexp#===      5.717M (± 1.3%) i/s -     28.698M in   5.020614s
        String#match      4.731M (± 0.4%) i/s -     23.864M in   5.044561s

Comparison:
       String#match?:  9156356.3 i/s
           String#=~:  6416956.3 i/s - 1.43x  (± 0.00) slower
          Regexp#===:  5717083.4 i/s - 1.60x  (± 0.00) slower
        String#match:  4730709.4 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   651.439k i/100ms
      String#casecmp   796.858k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.482M (± 0.6%) i/s -     32.572M in   5.025012s
      String#casecmp      7.961M (± 0.4%) i/s -     39.843M in   5.004618s

Comparison:
      String#casecmp:  7961380.5 i/s
String#downcase + ==:  6482206.0 i/s - 1.23x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            String#+   593.744k i/100ms
       String#concat   620.582k i/100ms
       String#append   648.555k i/100ms
         "foo" "bar"     1.152M i/100ms
  "#{'foo'}#{'bar'}"     1.179M i/100ms
Calculating -------------------------------------
            String#+      5.934M (± 0.2%) i/s -     29.687M in   5.003140s
       String#concat      6.180M (± 0.5%) i/s -     31.029M in   5.020951s
       String#append      6.691M (± 0.6%) i/s -     33.725M in   5.040239s
         "foo" "bar"     11.529M (± 0.2%) i/s -     58.759M in   5.096485s
  "#{'foo'}#{'bar'}"     11.776M (± 0.1%) i/s -     58.966M in   5.007464s

Comparison:
  "#{'foo'}#{'bar'}": 11775684.8 i/s
         "foo" "bar": 11529309.4 i/s - 1.02x  (± 0.00) slower
       String#append:  6691360.6 i/s - 1.76x  (± 0.00) slower
       String#concat:  6180114.7 i/s - 1.91x  (± 0.00) slower
            String#+:  5933744.7 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#+@     1.002M i/100ms
          String#dup   578.150k i/100ms
Calculating -------------------------------------
           String#+@     10.032M (± 0.2%) i/s -     51.117M in   5.095296s
          String#dup      5.735M (± 0.4%) i/s -     28.908M in   5.040468s

Comparison:
           String#+@: 10032168.9 i/s
          String#dup:  5735154.6 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   189.417k i/100ms
       String#match?   432.649k i/100ms
    String#end_with?   618.529k i/100ms
Calculating -------------------------------------
           String#=~      1.883M (± 0.6%) i/s -      9.471M in   5.029093s
       String#match?      4.295M (± 2.0%) i/s -     21.632M in   5.039300s
    String#end_with?      6.175M (± 0.4%) i/s -     30.926M in   5.008677s

Comparison:
    String#end_with?:  6174692.6 i/s
       String#match?:  4294639.3 i/s - 1.44x  (± 0.00) slower
           String#=~:  1883271.9 i/s - 3.28x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   114.595k i/100ms
          String#sub   138.620k i/100ms
String#dup["string"]=
                       182.875k i/100ms
Calculating -------------------------------------
         String#gsub      1.156M (± 0.5%) i/s -      5.844M in   5.055181s
          String#sub      1.428M (± 0.6%) i/s -      7.208M in   5.048343s
String#dup["string"]=
                          1.843M (± 0.6%) i/s -      9.327M in   5.061743s

Comparison:
String#dup["string"]=:  1842646.2 i/s
          String#sub:  1427888.5 i/s - 1.29x  (± 0.00) slower
         String#gsub:  1156145.0 i/s - 1.59x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   106.297k i/100ms
           String#tr   339.904k i/100ms
Calculating -------------------------------------
         String#gsub      1.061M (± 0.4%) i/s -      5.315M in   5.007071s
           String#tr      3.397M (± 0.4%) i/s -     16.995M in   5.003452s

Comparison:
           String#tr:  3396754.5 i/s
         String#gsub:  1061488.8 i/s - 3.20x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.125M i/100ms
         With Freeze     1.684M i/100ms
Calculating -------------------------------------
      Without Freeze     11.217M (± 1.1%) i/s -     56.266M in   5.016704s
         With Freeze     16.610M (± 0.3%) i/s -     84.184M in   5.068181s

Comparison:
         With Freeze: 16610404.7 i/s
      Without Freeze: 11217264.8 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.418k i/100ms
      String#squeeze   156.313k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     34.217k (± 0.7%) i/s -    174.318k in   5.094750s
      String#squeeze      1.557M (± 0.5%) i/s -      7.816M in   5.018691s

Comparison:
      String#squeeze:  1557355.7 i/s
 String#gsub/regex+/:    34216.9 i/s - 45.51x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   286.588k i/100ms
       String#match?   747.679k i/100ms
  String#start_with?   874.323k i/100ms
Calculating -------------------------------------
           String#=~      2.822M (± 1.0%) i/s -     14.329M in   5.078068s
       String#match?      7.410M (± 3.7%) i/s -     37.384M in   5.053484s
  String#start_with?      8.723M (± 0.3%) i/s -     43.716M in   5.011402s

Comparison:
  String#start_with?:  8723444.7 i/s
       String#match?:  7410090.2 i/s - 1.18x  (± 0.00) slower
           String#=~:  2822080.6 i/s - 3.09x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   188.816k i/100ms
    String#[0, n] ==    84.115k i/100ms
   String#[RANGE] ==    76.717k i/100ms
   String#[0...n] ==    47.931k i/100ms
Calculating -------------------------------------
  String#start_with?      1.910M (± 1.5%) i/s -      9.630M in   5.042434s
    String#[0, n] ==    813.752k (± 0.9%) i/s -      4.122M in   5.065434s
   String#[RANGE] ==    765.102k (± 0.8%) i/s -      3.836M in   5.013856s
   String#[0...n] ==    480.240k (± 0.8%) i/s -      2.444M in   5.090469s

Comparison:
  String#start_with?:  1910115.0 i/s
    String#[0, n] ==:   813752.1 i/s - 2.35x  (± 0.00) slower
   String#[RANGE] ==:   765101.7 i/s - 2.50x  (± 0.00) slower
   String#[0...n] ==:   480240.1 i/s - 3.98x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   182.565k i/100ms
 String#sub!'string'   127.830k i/100ms
String#gsub!'string'    78.196k i/100ms
  String#[/regexp/]=   155.388k i/100ms
 String#sub!/regexp/   116.331k i/100ms
String#gsub!/regexp/    62.234k i/100ms
Calculating -------------------------------------
  String#['string']=      1.852M (± 0.4%) i/s -      9.311M in   5.026266s
 String#sub!'string'      1.291M (± 0.3%) i/s -      6.519M in   5.049154s
String#gsub!'string'    785.815k (± 0.4%) i/s -      3.988M in   5.075080s
  String#[/regexp/]=      1.563M (± 0.4%) i/s -      7.925M in   5.071664s
 String#sub!/regexp/      1.148M (± 0.4%) i/s -      5.817M in   5.067734s
String#gsub!/regexp/    611.856k (± 0.5%) i/s -      3.112M in   5.085775s

Comparison:
  String#['string']=:  1852467.6 i/s
  String#[/regexp/]=:  1562588.8 i/s - 1.19x  (± 0.00) slower
 String#sub!'string':  1291182.3 i/s - 1.43x  (± 0.00) slower
 String#sub!/regexp/:  1147782.0 i/s - 1.61x  (± 0.00) slower
String#gsub!'string':   785814.7 i/s - 2.36x  (± 0.00) slower
String#gsub!/regexp/:   611856.3 i/s - 3.03x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          String#sub   142.893k i/100ms
        String#chomp   565.476k i/100ms
String#delete_suffix   609.820k i/100ms
Calculating -------------------------------------
          String#sub      1.435M (± 0.4%) i/s -      7.288M in   5.080005s
        String#chomp      5.646M (± 0.5%) i/s -     28.274M in   5.007860s
String#delete_suffix      6.110M (± 0.3%) i/s -     31.101M in   5.090206s

Comparison:
String#delete_suffix:  6110008.1 i/s
        String#chomp:  5646009.9 i/s - 1.08x  (± 0.00) slower
          String#sub:  1434578.8 i/s - 4.26x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   635.889k i/100ms
          String#sub   147.504k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.329M (± 0.4%) i/s -     31.794M in   5.023731s
          String#sub      1.475M (± 0.5%) i/s -      7.375M in   5.000300s

Comparison:
String#delete_prefix:  6328968.3 i/s
          String#sub:  1474987.1 i/s - 4.29x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   631.021k i/100ms
    String#unpack[0]   486.561k i/100ms
Calculating -------------------------------------
      String#unpack1      6.313M (± 0.4%) i/s -     32.182M in   5.097462s
    String#unpack[0]      4.808M (± 0.5%) i/s -     24.328M in   5.059957s

Comparison:
      String#unpack1:  6313481.6 i/s
    String#unpack[0]:  4808066.7 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    28.282k i/100ms
          Time.parse     9.735k i/100ms
Calculating -------------------------------------
        Time.iso8601    282.930k (± 0.6%) i/s -      1.442M in   5.098228s
          Time.parse     97.246k (± 0.3%) i/s -    486.750k in   5.005387s

Comparison:
        Time.iso8601:   282930.0 i/s
          Time.parse:    97245.8 i/s - 2.91x  (± 0.00) slower

