$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       767.589k i/100ms
Function with splat arguments
                        20.128k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.664M (± 1.2%) i/s -     38.379M in   5.008806s
Function with splat arguments
                        208.013k (± 8.6%) i/s -      1.047M in   5.076438s

Comparison:
Function with single Array argument:  7663546.8 i/s
Function with splat arguments:   208012.5 i/s - 36.84x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.017M i/100ms
Sequential Assignment
                         1.014M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.193M (± 0.4%) i/s -     51.847M in   5.086545s
Sequential Assignment
                         10.097M (± 0.4%) i/s -     50.689M in   5.020277s

Comparison:
 Parallel Assignment: 10193093.2 i/s
Sequential Assignment: 10096914.2 i/s - 1.01x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   478.451k i/100ms
       attr_accessor   551.015k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.823M (± 1.1%) i/s -     24.401M in   5.059677s
       attr_accessor      5.547M (± 0.5%) i/s -     28.102M in   5.065849s

Comparison:
       attr_accessor:  5547447.2 i/s
   getter_and_setter:  4823295.6 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    88.681k i/100ms
         respond_to?   770.454k i/100ms
Calculating -------------------------------------
      begin...rescue    888.020k (± 0.6%) i/s -      4.523M in   5.093208s
         respond_to?      7.717M (± 0.2%) i/s -     39.293M in   5.091910s

Comparison:
         respond_to?:  7716818.8 i/s
      begin...rescue:   888020.2 i/s - 8.69x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              normal   310.009k i/100ms
             &method   122.639k i/100ms
Calculating -------------------------------------
              normal      3.097M (± 0.6%) i/s -     15.500M in   5.004741s
             &method      1.239M (± 0.5%) i/s -      6.255M in   5.049792s

Comparison:
              normal:  3097272.1 i/s
             &method:  1238611.9 i/s - 2.50x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       235.000  i/100ms
       define_method   342.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.211k (±22.2%) i/s -      9.870k in   5.047289s
       define_method      3.238k (±17.7%) i/s -     15.048k in   5.101878s

Comparison:
       define_method:     3238.2 i/s
module_eval with string:     2210.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Float#round   259.927k i/100ms
       Kernel#format   201.983k i/100ms
            String#%   172.206k i/100ms
Calculating -------------------------------------
         Float#round      2.569M (± 0.4%) i/s -     12.996M in   5.058817s
       Kernel#format      2.028M (± 0.3%) i/s -     10.301M in   5.079884s
            String#%      1.729M (± 0.6%) i/s -      8.783M in   5.078802s

Comparison:
         Float#round:  2569094.6 i/s
       Kernel#format:  2027850.0 i/s - 1.27x  (± 0.00) slower
            String#%:  1729310.4 i/s - 1.49x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash   890.564k i/100ms
          OpenStruct   457.844k i/100ms
Calculating -------------------------------------
                Hash      8.984M (± 1.0%) i/s -     45.419M in   5.056179s
          OpenStruct      4.655M (± 1.3%) i/s -     23.350M in   5.017070s

Comparison:
                Hash:  8983744.6 i/s
          OpenStruct:  4654855.5 i/s - 1.93x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.108M i/100ms
          OpenStruct     9.539k i/100ms
Calculating -------------------------------------
                Hash     11.084M (± 0.3%) i/s -     56.512M in   5.098370s
          OpenStruct     95.791k (± 3.2%) i/s -    486.489k in   5.083770s

Comparison:
                Hash: 11084376.2 i/s
          OpenStruct:    95791.5 i/s - 115.71x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   598.968k i/100ms
  ancestors.include?   119.490k i/100ms
Calculating -------------------------------------
  less than or equal      5.848M (± 0.5%) i/s -     29.349M in   5.018465s
  ancestors.include?      1.193M (± 3.1%) i/s -      5.974M in   5.014177s

Comparison:
  less than or equal:  5848458.1 i/s
  ancestors.include?:  1192885.1 i/s - 4.90x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.632  (± 0.0%) i/s -      4.000  in   6.334188s
         Kernel loop      0.225  (± 0.0%) i/s -      2.000  in   8.895205s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 2.81x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.554M i/100ms
         Array#first     1.306M i/100ms
Calculating -------------------------------------
           Array#[0]     15.495M (± 0.5%) i/s -     77.685M in   5.013674s
         Array#first     13.294M (± 0.4%) i/s -     66.588M in   5.009048s

Comparison:
           Array#[0]: 15495064.7 i/s
         Array#first: 13293689.7 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.522M i/100ms
          Array#last     1.315M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.561M (± 0.4%) i/s -     79.121M in   5.084540s
          Array#last     13.234M (± 0.3%) i/s -     67.056M in   5.066945s

Comparison:
          Array#[-1]: 15561396.4 i/s
          Array#last: 13234172.7 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    99.881k i/100ms
Calculating -------------------------------------
                find      0.262  (± 0.0%) i/s -      2.000  in   7.637546s
             bsearch    996.419k (± 0.9%) i/s -      4.994M in   5.012467s

Comparison:
             bsearch:   996419.3 i/s
                find:        0.3 i/s - 3804960.73x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    18.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    193.204  (± 2.1%) i/s -    972.000  in   5.033644s
        Array#insert      1.441  (± 0.0%) i/s -      8.000  in   5.553482s

Comparison:
       Array#unshift:      193.2 i/s
        Array#insert:        1.4 i/s - 134.12x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.085M i/100ms
          Array#size     2.089M i/100ms
         Array#count     1.603M i/100ms
Calculating -------------------------------------
        Array#length     20.893M (± 0.4%) i/s -    106.319M in   5.088838s
          Array#size     21.033M (± 0.6%) i/s -    106.517M in   5.064442s
         Array#count     16.352M (± 0.5%) i/s -     81.774M in   5.000838s

Comparison:
          Array#size: 21032988.6 i/s
        Array#length: 20892969.1 i/s - same-ish: difference falls within error
         Array#count: 16352415.2 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.707k i/100ms
        Array#sample     1.039M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    459.158k (± 0.6%) i/s -      2.331M in   5.077014s
        Array#sample     10.346M (± 1.7%) i/s -     51.925M in   5.020464s

Comparison:
        Array#sample: 10345819.9 i/s
 Array#shuffle.first:   459158.3 i/s - 22.53x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    64.795k i/100ms
          Date.parse    32.674k i/100ms
Calculating -------------------------------------
        Date.iso8601    646.766k (± 0.6%) i/s -      3.240M in   5.009348s
          Date.parse    325.319k (± 1.0%) i/s -      1.634M in   5.022374s

Comparison:
        Date.iso8601:   646766.3 i/s
          Date.parse:   325318.5 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.548k i/100ms
           Array#map    26.684k i/100ms
Calculating -------------------------------------
   Array#each + push    185.439k (± 0.6%) i/s -    927.400k in   5.001278s
           Array#map    264.701k (± 4.0%) i/s -      1.334M in   5.051337s

Comparison:
           Array#map:   264700.7 i/s
   Array#each + push:   185439.4 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            For loop    29.568k i/100ms
               #each    32.561k i/100ms
Calculating -------------------------------------
            For loop    296.809k (± 0.5%) i/s -      1.508M in   5.080753s
               #each    326.327k (± 0.5%) i/s -      1.661M in   5.088922s

Comparison:
               #each:   326326.7 i/s
            For loop:   296808.7 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.423k i/100ms
     each_with_index    19.116k i/100ms
Calculating -------------------------------------
          While Loop    273.577k (± 0.3%) i/s -      1.371M in   5.011980s
     each_with_index    189.737k (± 4.4%) i/s -    955.800k in   5.051574s

Comparison:
          While Loop:   273577.2 i/s
     each_with_index:   189737.3 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       inject symbol   128.371k i/100ms
      inject to_proc     2.199k i/100ms
        inject block     2.086k i/100ms
Calculating -------------------------------------
       inject symbol      1.011M (±14.1%) i/s -      5.006M in   5.037836s
      inject to_proc     22.122k (± 0.4%) i/s -    112.149k in   5.069593s
        inject block     20.937k (± 0.4%) i/s -    106.386k in   5.081255s

Comparison:
       inject symbol:  1010960.2 i/s
      inject to_proc:    22122.3 i/s - 45.70x  (± 0.00) slower
        inject block:    20937.3 i/s - 48.29x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.949k i/100ms
   Array#map.flatten     3.895k i/100ms
      Array#flat_map     9.647k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     69.015k (± 3.1%) i/s -    347.450k in   5.040375s
   Array#map.flatten     39.570k (± 1.0%) i/s -    198.645k in   5.020539s
      Array#flat_map     96.514k (± 0.9%) i/s -    491.997k in   5.098102s

Comparison:
      Array#flat_map:    96513.8 i/s
Array#map.flatten(1):    69014.8 i/s - 1.40x  (± 0.00) slower
   Array#map.flatten:    39570.3 i/s - 2.44x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    31.414k i/100ms
  Array#reverse_each    32.521k i/100ms
Calculating -------------------------------------
  Array#reverse.each    315.232k (± 0.4%) i/s -      1.602M in   5.082423s
  Array#reverse_each    322.288k (± 5.4%) i/s -      1.626M in   5.065519s

Comparison:
  Array#reverse_each:   322288.1 i/s
  Array#reverse.each:   315232.4 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.898k i/100ms
   Enumerable#detect    82.719k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        208.438k (± 0.5%) i/s -      4.180M in  20.052543s
   Enumerable#detect    826.415k (± 2.2%) i/s -     16.544M in  20.030047s

Comparison:
   Enumerable#detect:   826415.3 i/s
Enumerable#select.first:   208437.5 i/s - 3.96x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       244.546k i/100ms
Enumerable#select.last
                        18.757k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.442M (± 0.9%) i/s -     12.227M in   5.007526s
Enumerable#select.last
                        186.326k (± 0.6%) i/s -    937.850k in   5.033552s

Comparison:
Enumerable#reverse.detect:  2441990.7 i/s
Enumerable#select.last:   186325.7 i/s - 13.11x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.820k i/100ms
  Enumerable#sort_by     4.684k i/100ms
     Enumerable#sort     2.477k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         50.742k (± 1.6%) i/s -    255.460k in   5.035865s
  Enumerable#sort_by     46.680k (± 0.8%) i/s -    234.200k in   5.017431s
     Enumerable#sort     25.364k (± 0.5%) i/s -    128.804k in   5.078298s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    50741.7 i/s
  Enumerable#sort_by:    46680.0 i/s - 1.09x  (± 0.00) slower
     Enumerable#sort:    25364.2 i/s - 2.00x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.816k i/100ms
Enumerable#sort_by...first
                         8.594k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    177.888k (± 0.5%) i/s -    890.800k in   5.007763s
Enumerable#sort_by...first
                         85.830k (± 0.7%) i/s -    429.700k in   5.006652s

Comparison:
   Enumerable#min_by:   177887.7 i/s
Enumerable#sort_by...first:    85830.3 i/s - 2.07x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   419.332k i/100ms
            Hash#dup   287.868k i/100ms
Calculating -------------------------------------
              Hash[]      3.601M (± 0.7%) i/s -     18.031M in   5.007747s
            Hash#dup      2.803M (± 0.8%) i/s -     14.106M in   5.032087s

Comparison:
              Hash[]:  3600843.6 i/s
            Hash#dup:  2803301.9 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.424M i/100ms
  Hash#fetch, symbol     1.181M i/100ms
     Hash#[], string     1.250M i/100ms
  Hash#fetch, string   786.534k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.140M (± 2.7%) i/s -     71.216M in   5.040542s
  Hash#fetch, symbol     11.570M (± 1.7%) i/s -     57.854M in   5.001666s
     Hash#[], string     12.491M (± 0.4%) i/s -     62.499M in   5.003504s
  Hash#fetch, string      7.810M (± 3.1%) i/s -     39.327M in   5.041497s

Comparison:
     Hash#[], symbol: 14140089.4 i/s
     Hash#[], string: 12491205.3 i/s - 1.13x  (± 0.00) slower
  Hash#fetch, symbol: 11570268.3 i/s - 1.22x  (± 0.00) slower
  Hash#fetch, string:  7809612.5 i/s - 1.81x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   858.549k i/100ms
             Hash#[]   999.539k i/100ms
          Hash#[] ||   904.836k i/100ms
          Hash#[] &&   379.681k i/100ms
          Hash#fetch   567.567k i/100ms
 Hash#fetch fallback   394.729k i/100ms
Calculating -------------------------------------
            Hash#dig      8.663M (± 0.9%) i/s -     43.786M in   5.055039s
             Hash#[]     10.257M (± 3.5%) i/s -     51.976M in   5.073372s
          Hash#[] ||      9.451M (± 1.5%) i/s -     47.956M in   5.075168s
          Hash#[] &&      3.990M (± 1.3%) i/s -     20.123M in   5.044166s
          Hash#fetch      5.969M (± 0.3%) i/s -     30.081M in   5.039893s
 Hash#fetch fallback      3.899M (± 0.7%) i/s -     19.736M in   5.062231s

Comparison:
             Hash#[]: 10257208.9 i/s
          Hash#[] ||:  9451299.4 i/s - 1.09x  (± 0.00) slower
            Hash#dig:  8662591.1 i/s - 1.18x  (± 0.00) slower
          Hash#fetch:  5968647.4 i/s - 1.72x  (± 0.00) slower
          Hash#[] &&:  3990003.9 i/s - 2.57x  (± 0.00) slower
 Hash#fetch fallback:  3898956.9 i/s - 2.63x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.445M i/100ms
  Hash#fetch + block     1.447M i/100ms
    Hash#fetch + arg     1.100M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.297M (± 1.6%) i/s -     72.248M in   5.054658s
  Hash#fetch + block     14.443M (± 0.4%) i/s -     72.365M in   5.010426s
    Hash#fetch + arg     11.022M (± 1.1%) i/s -     56.118M in   5.091913s

Comparison:
  Hash#fetch + block: 14443166.7 i/s
  Hash#fetch + const: 14296855.5 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 11022358.0 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.307k i/100ms
         sort + to_h    11.018k i/100ms
Calculating -------------------------------------
      sort_by + to_h    275.398k (± 0.5%) i/s -      1.393M in   5.057016s
         sort + to_h    110.188k (± 2.5%) i/s -    550.900k in   5.003325s

Comparison:
      sort_by + to_h:   275398.1 i/s
         sort + to_h:   110188.3 i/s - 2.50x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   189.352k i/100ms
       Hash#each_key   209.881k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.877M (± 2.8%) i/s -      9.468M in   5.047499s
       Hash#each_key      2.064M (± 0.4%) i/s -     10.494M in   5.084649s

Comparison:
       Hash#each_key:  2063910.6 i/s
      Hash#keys.each:  1877389.1 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     3.752k i/100ms
           Hash#key?   934.654k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     37.185k (± 5.2%) i/s -    187.600k in   5.065906s
           Hash#key?      9.377M (± 0.8%) i/s -     47.667M in   5.083643s

Comparison:
           Hash#key?:  9377276.0 i/s
  Hash#keys.include?:    37185.2 i/s - 252.18x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.011k i/100ms
            Hash#[]=    10.321k i/100ms
Calculating -------------------------------------
         Hash#merge!     39.871k (± 0.7%) i/s -    200.550k in   5.030283s
            Hash#[]=    102.574k (± 1.2%) i/s -    516.050k in   5.031696s

Comparison:
            Hash#[]=:   102573.6 i/s
         Hash#merge!:    39870.6 i/s - 2.57x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.886k i/100ms
      Hash#merge({})     3.955k i/100ms
 Hash#dup#merge!({})     2.913k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         47.323k (± 2.4%) i/s -    239.414k in   5.062645s
      Hash#merge({})     39.583k (± 0.5%) i/s -    201.705k in   5.095857s
 Hash#dup#merge!({})     29.058k (± 0.5%) i/s -    145.650k in   5.012464s

Comparison:
{}#merge!(Hash) do end:    47322.6 i/s
      Hash#merge({}):    39583.0 i/s - 1.20x  (± 0.00) slower
 Hash#dup#merge!({}):    29058.2 i/s - 1.63x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   392.255k i/100ms
          Hash#merge   357.818k i/100ms
Calculating -------------------------------------
        Hash#**other      3.862M (± 0.5%) i/s -     19.613M in   5.079030s
          Hash#merge      3.602M (± 3.5%) i/s -     18.249M in   5.073469s

Comparison:
        Hash#**other:  3861625.7 i/s
          Hash#merge:  3602232.8 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.679k i/100ms
         Hash#merge!     3.986k i/100ms
Calculating -------------------------------------
          Hash#merge     16.702k (± 1.2%) i/s -     83.950k in   5.027079s
         Hash#merge!     40.167k (± 0.8%) i/s -    203.286k in   5.061376s

Comparison:
         Hash#merge!:    40167.0 i/s
          Hash#merge:    16701.9 i/s - 2.40x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      427.878k i/100ms
Array#each             234.391k i/100ms
Array#each_w/_object   176.596k i/100ms
Hash#select-include     73.288k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.211M (± 4.2%) i/s -     21.394M in   5.091364s
Array#each                2.301M (± 0.5%) i/s -     11.720M in   5.093137s
Array#each_w/_object      1.762M (± 0.3%) i/s -      8.830M in   5.012402s
Hash#select-include     737.752k (± 0.9%) i/s -      3.738M in   5.066712s

Comparison:
Hash#native-slice   :  4210874.6 i/s
Array#each          :  2301098.0 i/s - 1.83x  (± 0.00) slower
Array#each_w/_object:  1761604.9 i/s - 2.39x  (± 0.00) slower
Hash#select-include :   737752.2 i/s - 5.71x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     2.247k i/100ms
         Hash#value?     2.053k i/100ms
Calculating -------------------------------------
Hash#values.include?     22.332k (± 4.1%) i/s -    112.350k in   5.040830s
         Hash#value?     20.961k (± 0.4%) i/s -    106.756k in   5.093123s

Comparison:
Hash#values.include?:    22332.3 i/s
         Hash#value?:    20961.2 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                call   667.360k i/100ms
                send   523.475k i/100ms
      method_missing   376.709k i/100ms
Calculating -------------------------------------
                call      6.693M (± 0.4%) i/s -     34.035M in   5.085291s
                send      5.231M (± 0.4%) i/s -     26.174M in   5.003771s
      method_missing      3.744M (± 0.8%) i/s -     18.835M in   5.031679s

Comparison:
                call:  6692996.1 i/s
                send:  5230872.7 i/s - 1.28x  (± 0.00) slower
      method_missing:  3743592.3 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
               Block     9.098k i/100ms
      Symbol#to_proc    10.278k i/100ms
Calculating -------------------------------------
               Block     91.108k (± 0.8%) i/s -    463.998k in   5.093174s
      Symbol#to_proc    102.399k (± 0.5%) i/s -    513.900k in   5.018702s

Comparison:
      Symbol#to_proc:   102399.5 i/s
               Block:    91107.7 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          block.call   943.875k i/100ms
       block + yield   999.594k i/100ms
        unused block     1.282M i/100ms
               yield     1.190M i/100ms
Calculating -------------------------------------
          block.call      9.457M (± 0.2%) i/s -     48.138M in   5.090377s
       block + yield      9.995M (± 0.3%) i/s -     49.980M in   5.000559s
        unused block     13.030M (± 0.5%) i/s -     65.368M in   5.016776s
               yield     11.892M (± 0.3%) i/s -     59.516M in   5.004801s

Comparison:
        unused block: 13030165.8 i/s
               yield: 11891828.9 i/s - 1.10x  (± 0.00) slower
       block + yield:  9994929.8 i/s - 1.30x  (± 0.00) slower
          block.call:  9456615.4 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   272.207k i/100ms
      range#include?    12.700k i/100ms
       range#member?    12.672k i/100ms
       plain compare   533.125k i/100ms
Calculating -------------------------------------
        range#cover?      2.780M (± 0.8%) i/s -     14.155M in   5.092088s
      range#include?    128.294k (± 0.9%) i/s -    647.700k in   5.049011s
       range#member?    128.137k (± 1.6%) i/s -    646.272k in   5.045007s
       plain compare      5.314M (± 0.5%) i/s -     26.656M in   5.016664s

Comparison:
       plain compare:  5313700.6 i/s
        range#cover?:  2779927.1 i/s - 1.91x  (± 0.00) slower
      range#include?:   128294.1 i/s - 41.42x  (± 0.00) slower
       range#member?:   128137.3 i/s - 41.47x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       String#match?   916.978k i/100ms
           String#=~   645.278k i/100ms
          Regexp#===   549.409k i/100ms
        String#match   467.576k i/100ms
Calculating -------------------------------------
       String#match?      9.136M (± 0.5%) i/s -     45.849M in   5.018655s
           String#=~      6.376M (± 0.5%) i/s -     32.264M in   5.060125s
          Regexp#===      5.491M (± 0.9%) i/s -     27.470M in   5.003633s
        String#match      4.673M (± 0.4%) i/s -     23.379M in   5.002662s

Comparison:
       String#match?:  9135912.5 i/s
           String#=~:  6376295.4 i/s - 1.43x  (± 0.00) slower
          Regexp#===:  5490539.1 i/s - 1.66x  (± 0.00) slower
        String#match:  4673340.1 i/s - 1.95x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   656.942k i/100ms
      String#casecmp   808.037k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.587M (± 0.5%) i/s -     33.504M in   5.086729s
      String#casecmp      8.077M (± 1.1%) i/s -     40.402M in   5.002686s

Comparison:
      String#casecmp:  8076974.2 i/s
String#downcase + ==:  6586745.7 i/s - 1.23x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            String#+   589.840k i/100ms
       String#concat   611.437k i/100ms
       String#append   656.059k i/100ms
         "foo" "bar"     1.167M i/100ms
  "#{'foo'}#{'bar'}"     1.167M i/100ms
Calculating -------------------------------------
            String#+      5.907M (± 0.6%) i/s -     30.082M in   5.093066s
       String#concat      6.114M (± 0.6%) i/s -     30.572M in   5.000571s
       String#append      6.482M (± 0.7%) i/s -     32.803M in   5.061006s
         "foo" "bar"     11.654M (± 0.3%) i/s -     58.368M in   5.008569s
  "#{'foo'}#{'bar'}"     11.633M (± 0.4%) i/s -     58.327M in   5.014156s

Comparison:
         "foo" "bar": 11653847.9 i/s
  "#{'foo'}#{'bar'}": 11632543.0 i/s - same-ish: difference falls within error
       String#append:  6481779.3 i/s - 1.80x  (± 0.00) slower
       String#concat:  6113871.1 i/s - 1.91x  (± 0.00) slower
            String#+:  5906661.5 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#+@     1.010M i/100ms
          String#dup   586.916k i/100ms
Calculating -------------------------------------
           String#+@     10.142M (± 0.3%) i/s -     51.513M in   5.079182s
          String#dup      5.856M (± 0.5%) i/s -     29.346M in   5.011715s

Comparison:
           String#+@: 10142074.6 i/s
          String#dup:  5855588.7 i/s - 1.73x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   186.972k i/100ms
       String#match?   429.263k i/100ms
    String#end_with?   609.663k i/100ms
Calculating -------------------------------------
           String#=~      1.873M (± 2.5%) i/s -      9.536M in   5.096059s
       String#match?      4.300M (± 2.1%) i/s -     21.892M in   5.093289s
    String#end_with?      6.110M (± 0.2%) i/s -     31.093M in   5.088848s

Comparison:
    String#end_with?:  6110016.0 i/s
       String#match?:  4300474.0 i/s - 1.42x  (± 0.00) slower
           String#=~:  1872569.7 i/s - 3.26x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   109.427k i/100ms
          String#sub   139.684k i/100ms
String#dup["string"]=
                       182.924k i/100ms
Calculating -------------------------------------
         String#gsub      1.144M (± 0.2%) i/s -      5.800M in   5.069658s
          String#sub      1.398M (± 0.3%) i/s -      7.124M in   5.095325s
String#dup["string"]=
                          1.831M (± 0.3%) i/s -      9.329M in   5.095889s

Comparison:
String#dup["string"]=:  1830734.1 i/s
          String#sub:  1398138.6 i/s - 1.31x  (± 0.00) slower
         String#gsub:  1143995.0 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   105.499k i/100ms
           String#tr   343.508k i/100ms
Calculating -------------------------------------
         String#gsub      1.061M (± 0.6%) i/s -      5.380M in   5.072343s
           String#tr      3.498M (± 0.7%) i/s -     17.519M in   5.008436s

Comparison:
           String#tr:  3498044.3 i/s
         String#gsub:  1060784.0 i/s - 3.30x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.173M i/100ms
         With Freeze     1.671M i/100ms
Calculating -------------------------------------
      Without Freeze     11.712M (± 0.3%) i/s -     58.666M in   5.009246s
         With Freeze     16.597M (± 0.2%) i/s -     83.574M in   5.035598s

Comparison:
         With Freeze: 16596720.7 i/s
      Without Freeze: 11711598.6 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.427k i/100ms
      String#squeeze   157.814k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     34.242k (± 0.9%) i/s -    171.350k in   5.004486s
      String#squeeze      1.574M (± 0.4%) i/s -      7.891M in   5.014148s

Comparison:
      String#squeeze:  1573717.3 i/s
 String#gsub/regex+/:    34241.9 i/s - 45.96x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   281.442k i/100ms
       String#match?   745.896k i/100ms
  String#start_with?   865.732k i/100ms
Calculating -------------------------------------
           String#=~      2.816M (± 2.6%) i/s -     14.072M in   5.002102s
       String#match?      7.516M (± 0.4%) i/s -     38.041M in   5.061543s
  String#start_with?      8.665M (± 0.3%) i/s -     44.152M in   5.095448s

Comparison:
  String#start_with?:  8665149.1 i/s
       String#match?:  7515731.2 i/s - 1.15x  (± 0.00) slower
           String#=~:  2815573.0 i/s - 3.08x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   189.898k i/100ms
    String#[0, n] ==    82.404k i/100ms
   String#[RANGE] ==    76.094k i/100ms
   String#[0...n] ==    47.007k i/100ms
Calculating -------------------------------------
  String#start_with?      1.880M (± 1.0%) i/s -      9.495M in   5.051403s
    String#[0, n] ==    811.999k (± 1.3%) i/s -      4.120M in   5.074979s
   String#[RANGE] ==    754.825k (± 1.1%) i/s -      3.805M in   5.041101s
   String#[0...n] ==    466.866k (± 1.3%) i/s -      2.350M in   5.035162s

Comparison:
  String#start_with?:  1879836.7 i/s
    String#[0, n] ==:   811998.8 i/s - 2.32x  (± 0.00) slower
   String#[RANGE] ==:   754825.1 i/s - 2.49x  (± 0.00) slower
   String#[0...n] ==:   466865.8 i/s - 4.03x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   177.538k i/100ms
 String#sub!'string'   126.855k i/100ms
String#gsub!'string'    77.876k i/100ms
  String#[/regexp/]=   153.141k i/100ms
 String#sub!/regexp/   114.875k i/100ms
String#gsub!/regexp/    60.799k i/100ms
Calculating -------------------------------------
  String#['string']=      1.829M (± 0.5%) i/s -      9.232M in   5.046449s
 String#sub!'string'      1.268M (± 2.0%) i/s -      6.343M in   5.006122s
String#gsub!'string'    779.612k (± 0.6%) i/s -      3.972M in   5.094606s
  String#[/regexp/]=      1.531M (± 0.5%) i/s -      7.810M in   5.101353s
 String#sub!/regexp/      1.144M (± 0.6%) i/s -      5.744M in   5.021200s
String#gsub!/regexp/    601.530k (± 0.5%) i/s -      3.040M in   5.053826s

Comparison:
  String#['string']=:  1829455.4 i/s
  String#[/regexp/]=:  1531043.3 i/s - 1.19x  (± 0.00) slower
 String#sub!'string':  1267609.9 i/s - 1.44x  (± 0.00) slower
 String#sub!/regexp/:  1143938.0 i/s - 1.60x  (± 0.00) slower
String#gsub!'string':   779611.9 i/s - 2.35x  (± 0.00) slower
String#gsub!/regexp/:   601529.6 i/s - 3.04x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          String#sub   143.049k i/100ms
        String#chomp   558.727k i/100ms
String#delete_suffix   613.015k i/100ms
Calculating -------------------------------------
          String#sub      1.421M (± 0.5%) i/s -      7.152M in   5.034908s
        String#chomp      5.553M (± 0.8%) i/s -     27.936M in   5.030803s
String#delete_suffix      6.059M (± 1.1%) i/s -     30.651M in   5.059058s

Comparison:
String#delete_suffix:  6059392.8 i/s
        String#chomp:  5553405.3 i/s - 1.09x  (± 0.00) slower
          String#sub:  1420608.2 i/s - 4.27x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   622.214k i/100ms
          String#sub   146.473k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.160M (± 0.5%) i/s -     31.111M in   5.050644s
          String#sub      1.452M (± 2.3%) i/s -      7.324M in   5.046034s

Comparison:
String#delete_prefix:  6159886.7 i/s
          String#sub:  1452206.7 i/s - 4.24x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   636.252k i/100ms
    String#unpack[0]   482.448k i/100ms
Calculating -------------------------------------
      String#unpack1      6.347M (± 0.6%) i/s -     31.813M in   5.012386s
    String#unpack[0]      4.807M (± 0.3%) i/s -     24.122M in   5.018659s

Comparison:
      String#unpack1:  6346994.8 i/s
    String#unpack[0]:  4806598.8 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    28.501k i/100ms
          Time.parse     9.617k i/100ms
Calculating -------------------------------------
        Time.iso8601    285.849k (± 0.7%) i/s -      1.454M in   5.085257s
          Time.parse     96.897k (± 0.6%) i/s -    490.467k in   5.061923s

Comparison:
        Time.iso8601:   285849.0 i/s
          Time.parse:    96896.9 i/s - 2.95x  (± 0.00) slower

