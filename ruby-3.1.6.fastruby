$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       760.661k i/100ms
Function with splat arguments
                        24.743k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.561M (± 2.9%) i/s -     38.033M in   5.035201s
Function with splat arguments
                        244.155k (± 5.9%) i/s -      1.237M in   5.092905s

Comparison:
Function with single Array argument:  7560835.5 i/s
Function with splat arguments:   244155.0 i/s - 30.97x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.020M i/100ms
Sequential Assignment
                         1.013M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.222M (± 0.4%) i/s -     51.997M in   5.086977s
Sequential Assignment
                         10.149M (± 0.4%) i/s -     51.683M in   5.092674s

Comparison:
 Parallel Assignment: 10221768.9 i/s
Sequential Assignment: 10148717.8 i/s - 1.01x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   475.879k i/100ms
       attr_accessor   547.733k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.771M (± 0.9%) i/s -     24.270M in   5.087696s
       attr_accessor      5.516M (± 0.5%) i/s -     27.934M in   5.064700s

Comparison:
       attr_accessor:  5515630.4 i/s
   getter_and_setter:  4770735.4 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    87.574k i/100ms
         respond_to?   782.031k i/100ms
Calculating -------------------------------------
      begin...rescue    873.091k (± 1.3%) i/s -      4.379M in   5.016091s
         respond_to?      7.827M (± 0.2%) i/s -     39.884M in   5.095534s

Comparison:
         respond_to?:  7827201.8 i/s
      begin...rescue:   873091.1 i/s - 8.96x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              normal   319.951k i/100ms
             &method   122.576k i/100ms
Calculating -------------------------------------
              normal      3.202M (± 0.9%) i/s -     16.318M in   5.095679s
             &method      1.218M (± 0.6%) i/s -      6.129M in   5.030209s

Comparison:
              normal:  3202478.4 i/s
             &method:  1218450.6 i/s - 2.63x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       249.000  i/100ms
       define_method   289.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.270k (±21.6%) i/s -      9.960k in   5.023857s
       define_method      3.199k (±18.9%) i/s -     14.739k in   5.088728s

Comparison:
       define_method:     3198.6 i/s
module_eval with string:     2270.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Float#round   259.641k i/100ms
       Kernel#format   201.876k i/100ms
            String#%   171.863k i/100ms
Calculating -------------------------------------
         Float#round      2.597M (± 0.4%) i/s -     13.242M in   5.099163s
       Kernel#format      2.014M (± 0.7%) i/s -     10.094M in   5.011149s
            String#%      1.723M (± 0.5%) i/s -      8.765M in   5.087515s

Comparison:
         Float#round:  2596877.2 i/s
       Kernel#format:  2014366.2 i/s - 1.29x  (± 0.00) slower
            String#%:  1722897.2 i/s - 1.51x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash   898.744k i/100ms
          OpenStruct   500.456k i/100ms
Calculating -------------------------------------
                Hash      9.015M (± 0.7%) i/s -     45.836M in   5.084381s
          OpenStruct      5.078M (± 0.6%) i/s -     25.523M in   5.025974s

Comparison:
                Hash:  9015498.9 i/s
          OpenStruct:  5078465.5 i/s - 1.78x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.105M i/100ms
          OpenStruct     9.887k i/100ms
Calculating -------------------------------------
                Hash     11.068M (± 0.7%) i/s -     56.346M in   5.091367s
          OpenStruct     98.788k (± 2.2%) i/s -    494.350k in   5.006578s

Comparison:
                Hash: 11067552.5 i/s
          OpenStruct:    98788.2 i/s - 112.03x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   591.949k i/100ms
  ancestors.include?   119.670k i/100ms
Calculating -------------------------------------
  less than or equal      5.812M (± 2.9%) i/s -     29.597M in   5.097134s
  ancestors.include?      1.194M (± 0.6%) i/s -      5.984M in   5.011633s

Comparison:
  less than or equal:  5812230.7 i/s
  ancestors.include?:  1193965.1 i/s - 4.87x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.672  (± 0.0%) i/s -      4.000  in   5.959190s
         Kernel loop      0.213  (± 0.0%) i/s -      2.000  in   9.402462s

Comparison:
          While Loop:        0.7 i/s
         Kernel loop:        0.2 i/s - 3.16x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.571M i/100ms
         Array#first     1.192M i/100ms
Calculating -------------------------------------
           Array#[0]     15.701M (± 0.9%) i/s -     80.118M in   5.103011s
         Array#first     11.791M (± 1.6%) i/s -     59.583M in   5.054444s

Comparison:
           Array#[0]: 15701358.4 i/s
         Array#first: 11791449.8 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.555M i/100ms
          Array#last     1.318M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.554M (± 0.4%) i/s -     77.773M in   5.000408s
          Array#last     13.132M (± 0.3%) i/s -     65.905M in   5.018662s

Comparison:
          Array#[-1]: 15553536.8 i/s
          Array#last: 13132158.4 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    99.026k i/100ms
Calculating -------------------------------------
                find      0.265  (± 0.0%) i/s -      2.000  in   7.533857s
             bsearch    995.806k (± 0.8%) i/s -      5.050M in   5.071978s

Comparison:
             bsearch:   995805.8 i/s
                find:        0.3 i/s - 3751128.59x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    19.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    196.637  (± 2.0%) i/s -    988.000  in   5.026990s
        Array#insert      1.442  (± 0.0%) i/s -      8.000  in   5.548312s

Comparison:
       Array#unshift:      196.6 i/s
        Array#insert:        1.4 i/s - 136.37x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.089M i/100ms
          Array#size     2.105M i/100ms
         Array#count     1.626M i/100ms
Calculating -------------------------------------
        Array#length     20.872M (± 0.5%) i/s -    104.470M in   5.005373s
          Array#size     20.887M (± 3.0%) i/s -    105.255M in   5.044486s
         Array#count     16.422M (± 0.5%) i/s -     82.920M in   5.049304s

Comparison:
          Array#size: 20886778.1 i/s
        Array#length: 20872025.3 i/s - same-ish: difference falls within error
         Array#count: 16422350.2 i/s - 1.27x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    46.026k i/100ms
        Array#sample     1.040M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    462.173k (± 0.4%) i/s -      2.347M in   5.078963s
        Array#sample     10.450M (± 0.3%) i/s -     53.047M in   5.076368s

Comparison:
        Array#sample: 10449869.7 i/s
 Array#shuffle.first:   462173.4 i/s - 22.61x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    64.194k i/100ms
          Date.parse    32.583k i/100ms
Calculating -------------------------------------
        Date.iso8601    642.314k (± 0.6%) i/s -      3.274M in   5.097190s
          Date.parse    325.414k (± 0.4%) i/s -      1.629M in   5.006492s

Comparison:
        Date.iso8601:   642314.0 i/s
          Date.parse:   325413.8 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    19.053k i/100ms
           Array#map    26.948k i/100ms
Calculating -------------------------------------
   Array#each + push    186.213k (± 1.2%) i/s -    933.597k in   5.014377s
           Array#map    268.819k (± 1.2%) i/s -      1.347M in   5.013080s

Comparison:
           Array#map:   268819.1 i/s
   Array#each + push:   186212.5 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            For loop    29.740k i/100ms
               #each    32.489k i/100ms
Calculating -------------------------------------
            For loop    294.800k (± 2.7%) i/s -      1.487M in   5.048074s
               #each    324.969k (± 0.5%) i/s -      1.657M in   5.098914s

Comparison:
               #each:   324968.6 i/s
            For loop:   294800.4 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop    28.199k i/100ms
     each_with_index    19.167k i/100ms
Calculating -------------------------------------
          While Loop    273.545k (± 0.6%) i/s -      1.382M in   5.051462s
     each_with_index    192.566k (± 0.2%) i/s -    977.517k in   5.076298s

Comparison:
          While Loop:   273545.1 i/s
     each_with_index:   192565.6 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    92.995k i/100ms
      inject to_proc     2.215k i/100ms
        inject block     2.115k i/100ms
Calculating -------------------------------------
       inject symbol      1.021M (±14.9%) i/s -      5.022M in   5.014033s
      inject to_proc     22.131k (± 0.5%) i/s -    110.750k in   5.004375s
        inject block     21.276k (± 0.5%) i/s -    107.865k in   5.069837s

Comparison:
       inject symbol:  1020878.8 i/s
      inject to_proc:    22131.2 i/s - 46.13x  (± 0.00) slower
        inject block:    21276.3 i/s - 47.98x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.966k i/100ms
   Array#map.flatten     3.969k i/100ms
      Array#flat_map     9.671k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     69.580k (± 0.9%) i/s -    348.300k in   5.006206s
   Array#map.flatten     39.743k (± 0.6%) i/s -    202.419k in   5.093359s
      Array#flat_map     96.822k (± 0.5%) i/s -    493.221k in   5.094226s

Comparison:
      Array#flat_map:    96822.4 i/s
Array#map.flatten(1):    69579.6 i/s - 1.39x  (± 0.00) slower
   Array#map.flatten:    39743.3 i/s - 2.44x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    30.850k i/100ms
  Array#reverse_each    32.403k i/100ms
Calculating -------------------------------------
  Array#reverse.each    315.228k (± 0.4%) i/s -      1.604M in   5.089116s
  Array#reverse_each    323.181k (± 0.5%) i/s -      1.620M in   5.013273s

Comparison:
  Array#reverse_each:   323181.0 i/s
  Array#reverse.each:   315227.7 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        21.035k i/100ms
   Enumerable#detect    81.965k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        209.860k (± 0.4%) i/s -      4.207M in  20.047121s
   Enumerable#detect    817.974k (± 0.4%) i/s -     16.393M in  20.041380s

Comparison:
   Enumerable#detect:   817974.1 i/s
Enumerable#select.first:   209859.8 i/s - 3.90x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       244.714k i/100ms
Enumerable#select.last
                        19.313k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.423M (± 0.6%) i/s -     12.236M in   5.049122s
Enumerable#select.last
                        193.295k (± 1.0%) i/s -    984.963k in   5.096200s

Comparison:
Enumerable#reverse.detect:  2423406.6 i/s
Enumerable#select.last:   193294.6 i/s - 12.54x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         5.075k i/100ms
  Enumerable#sort_by     4.841k i/100ms
     Enumerable#sort     2.447k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         50.720k (± 1.4%) i/s -    253.750k in   5.003916s
  Enumerable#sort_by     49.344k (± 1.4%) i/s -    246.891k in   5.004473s
     Enumerable#sort     24.337k (± 0.9%) i/s -    122.350k in   5.027624s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    50719.9 i/s
  Enumerable#sort_by:    49344.0 i/s - same-ish: difference falls within error
     Enumerable#sort:    24337.4 i/s - 2.08x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.466k i/100ms
Enumerable#sort_by...first
                         8.733k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    175.427k (± 0.3%) i/s -    890.766k in   5.077746s
Enumerable#sort_by...first
                         88.170k (± 0.6%) i/s -    445.383k in   5.051566s

Comparison:
   Enumerable#min_by:   175427.2 i/s
Enumerable#sort_by...first:    88170.1 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   413.693k i/100ms
            Hash#dup   311.910k i/100ms
Calculating -------------------------------------
              Hash[]      3.876M (± 1.4%) i/s -     19.444M in   5.017675s
            Hash#dup      2.895M (± 3.1%) i/s -     14.660M in   5.070156s

Comparison:
              Hash[]:  3875794.2 i/s
            Hash#dup:  2894543.8 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.432M i/100ms
  Hash#fetch, symbol     1.178M i/100ms
     Hash#[], string     1.161M i/100ms
  Hash#fetch, string   804.224k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.255M (± 3.0%) i/s -     71.592M in   5.027655s
  Hash#fetch, symbol     11.781M (± 0.8%) i/s -     60.055M in   5.097972s
     Hash#[], string     11.585M (± 0.4%) i/s -     58.048M in   5.010532s
  Hash#fetch, string      8.077M (± 0.2%) i/s -     41.015M in   5.077883s

Comparison:
     Hash#[], symbol: 14254514.2 i/s
  Hash#fetch, symbol: 11780851.3 i/s - 1.21x  (± 0.00) slower
     Hash#[], string: 11585453.8 i/s - 1.23x  (± 0.00) slower
  Hash#fetch, string:  8077311.2 i/s - 1.76x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   875.938k i/100ms
             Hash#[]     1.013M i/100ms
          Hash#[] ||   904.793k i/100ms
          Hash#[] &&   393.979k i/100ms
          Hash#fetch   599.153k i/100ms
 Hash#fetch fallback   403.214k i/100ms
Calculating -------------------------------------
            Hash#dig      8.613M (± 1.0%) i/s -     43.797M in   5.085453s
             Hash#[]     10.472M (± 1.7%) i/s -     52.680M in   5.032241s
          Hash#[] ||      9.499M (± 0.6%) i/s -     47.954M in   5.048579s
          Hash#[] &&      3.910M (± 2.8%) i/s -     19.699M in   5.042610s
          Hash#fetch      5.974M (± 1.2%) i/s -     29.958M in   5.015420s
 Hash#fetch fallback      3.988M (± 0.8%) i/s -     20.161M in   5.055848s

Comparison:
             Hash#[]: 10471808.8 i/s
          Hash#[] ||:  9498892.1 i/s - 1.10x  (± 0.00) slower
            Hash#dig:  8613024.6 i/s - 1.22x  (± 0.00) slower
          Hash#fetch:  5973989.0 i/s - 1.75x  (± 0.00) slower
 Hash#fetch fallback:  3987851.4 i/s - 2.63x  (± 0.00) slower
          Hash#[] &&:  3909646.3 i/s - 2.68x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.455M i/100ms
  Hash#fetch + block     1.459M i/100ms
    Hash#fetch + arg     1.109M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.595M (± 0.4%) i/s -     74.202M in   5.084114s
  Hash#fetch + block     14.571M (± 0.4%) i/s -     72.925M in   5.005019s
    Hash#fetch + arg     11.088M (± 0.4%) i/s -     56.534M in   5.098909s

Comparison:
  Hash#fetch + const: 14595231.9 i/s
  Hash#fetch + block: 14570660.3 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 11087736.0 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    28.086k i/100ms
         sort + to_h    11.811k i/100ms
Calculating -------------------------------------
      sort_by + to_h    281.399k (± 0.8%) i/s -      1.432M in   5.090591s
         sort + to_h    117.629k (± 0.9%) i/s -    590.550k in   5.020813s

Comparison:
      sort_by + to_h:   281399.3 i/s
         sort + to_h:   117629.1 i/s - 2.39x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   194.122k i/100ms
       Hash#each_key   206.305k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.922M (± 0.5%) i/s -      9.706M in   5.049445s
       Hash#each_key      2.008M (± 0.7%) i/s -     10.109M in   5.034178s

Comparison:
       Hash#each_key:  2008156.1 i/s
      Hash#keys.each:  1922263.9 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.264k i/100ms
           Hash#key?     1.011M i/100ms
Calculating -------------------------------------
  Hash#keys.include?     12.366k (± 3.9%) i/s -     61.936k in   5.017293s
           Hash#key?     10.132M (± 0.4%) i/s -     51.554M in   5.088236s

Comparison:
           Hash#key?: 10132185.5 i/s
  Hash#keys.include?:    12365.7 i/s - 819.37x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.027k i/100ms
            Hash#[]=    10.426k i/100ms
Calculating -------------------------------------
         Hash#merge!     39.942k (± 0.5%) i/s -    201.350k in   5.041107s
            Hash#[]=    103.805k (± 1.3%) i/s -    521.300k in   5.022881s

Comparison:
            Hash#[]=:   103804.6 i/s
         Hash#merge!:    39942.5 i/s - 2.60x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.707k i/100ms
      Hash#merge({})     4.027k i/100ms
 Hash#dup#merge!({})     2.915k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         47.271k (± 2.0%) i/s -    240.057k in   5.080574s
      Hash#merge({})     40.003k (± 0.5%) i/s -    201.350k in   5.033448s
 Hash#dup#merge!({})     28.762k (± 2.7%) i/s -    145.750k in   5.071601s

Comparison:
{}#merge!(Hash) do end:    47270.5 i/s
      Hash#merge({}):    40003.4 i/s - 1.18x  (± 0.00) slower
 Hash#dup#merge!({}):    28761.7 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   391.264k i/100ms
          Hash#merge   364.822k i/100ms
Calculating -------------------------------------
        Hash#**other      3.894M (± 0.4%) i/s -     19.563M in   5.023853s
          Hash#merge      3.653M (± 0.3%) i/s -     18.606M in   5.092748s

Comparison:
        Hash#**other:  3894135.7 i/s
          Hash#merge:  3653443.4 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.683k i/100ms
         Hash#merge!     3.984k i/100ms
Calculating -------------------------------------
          Hash#merge     16.615k (± 2.9%) i/s -     84.150k in   5.069782s
         Hash#merge!     39.824k (± 0.8%) i/s -    199.200k in   5.002416s

Comparison:
         Hash#merge!:    39823.6 i/s
          Hash#merge:    16614.9 i/s - 2.40x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      422.233k i/100ms
Array#each             230.119k i/100ms
Array#each_w/_object   175.589k i/100ms
Hash#select-include     73.345k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.196M (± 0.7%) i/s -     21.112M in   5.032192s
Array#each                2.304M (± 0.6%) i/s -     11.736M in   5.094478s
Array#each_w/_object      1.760M (± 0.6%) i/s -      8.955M in   5.087596s
Hash#select-include     733.344k (± 1.1%) i/s -      3.667M in   5.001319s

Comparison:
Hash#native-slice   :  4195533.6 i/s
Array#each          :  2303771.0 i/s - 1.82x  (± 0.00) slower
Array#each_w/_object:  1760238.0 i/s - 2.38x  (± 0.00) slower
Hash#select-include :   733344.2 i/s - 5.72x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.086k i/100ms
         Hash#value?   855.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     10.704k (± 5.7%) i/s -     54.300k in   5.094137s
         Hash#value?      8.547k (± 0.5%) i/s -     42.750k in   5.002054s

Comparison:
Hash#values.include?:    10704.1 i/s
         Hash#value?:     8546.7 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                call   668.669k i/100ms
                send   505.595k i/100ms
      method_missing   381.281k i/100ms
Calculating -------------------------------------
                call      6.707M (± 0.5%) i/s -     34.102M in   5.084757s
                send      5.061M (± 0.5%) i/s -     25.785M in   5.095531s
      method_missing      3.823M (± 0.5%) i/s -     19.445M in   5.087154s

Comparison:
                call:  6706942.5 i/s
                send:  5060509.7 i/s - 1.33x  (± 0.00) slower
      method_missing:  3822549.9 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
               Block     9.083k i/100ms
      Symbol#to_proc    10.245k i/100ms
Calculating -------------------------------------
               Block     90.390k (± 0.2%) i/s -    454.150k in   5.024325s
      Symbol#to_proc    102.089k (± 0.3%) i/s -    512.250k in   5.017715s

Comparison:
      Symbol#to_proc:   102089.3 i/s
               Block:    90390.5 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          block.call   944.000k i/100ms
       block + yield   998.568k i/100ms
        unused block     1.308M i/100ms
               yield     1.189M i/100ms
Calculating -------------------------------------
          block.call      9.474M (± 0.1%) i/s -     48.144M in   5.081462s
       block + yield     10.024M (± 0.2%) i/s -     50.927M in   5.080627s
        unused block     13.065M (± 2.1%) i/s -     65.382M in   5.006991s
               yield     11.876M (± 0.3%) i/s -     59.430M in   5.004085s

Comparison:
        unused block: 13064654.1 i/s
               yield: 11876485.6 i/s - 1.10x  (± 0.00) slower
       block + yield: 10023780.8 i/s - 1.30x  (± 0.00) slower
          block.call:  9474456.8 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   296.283k i/100ms
      range#include?    12.267k i/100ms
       range#member?    12.264k i/100ms
       plain compare   479.344k i/100ms
Calculating -------------------------------------
        range#cover?      2.980M (± 1.1%) i/s -     15.110M in   5.071432s
      range#include?    122.695k (± 0.3%) i/s -    625.617k in   5.098991s
       range#member?    123.172k (± 0.3%) i/s -    625.464k in   5.078016s
       plain compare      4.781M (± 0.5%) i/s -     23.967M in   5.012813s

Comparison:
       plain compare:  4781289.5 i/s
        range#cover?:  2979874.2 i/s - 1.60x  (± 0.00) slower
       range#member?:   123172.0 i/s - 38.82x  (± 0.00) slower
      range#include?:   122695.5 i/s - 38.97x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       String#match?   913.956k i/100ms
           String#=~   644.899k i/100ms
          Regexp#===   570.679k i/100ms
        String#match   468.390k i/100ms
Calculating -------------------------------------
       String#match?      9.182M (± 0.5%) i/s -     46.612M in   5.076814s
           String#=~      6.461M (± 0.5%) i/s -     32.890M in   5.090779s
          Regexp#===      5.694M (± 0.5%) i/s -     28.534M in   5.011663s
        String#match      4.697M (± 1.0%) i/s -     23.888M in   5.085904s

Comparison:
       String#match?:  9181504.4 i/s
           String#=~:  6460841.9 i/s - 1.42x  (± 0.00) slower
          Regexp#===:  5693643.8 i/s - 1.61x  (± 0.00) slower
        String#match:  4697329.2 i/s - 1.95x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   640.455k i/100ms
      String#casecmp   792.746k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.437M (± 0.4%) i/s -     32.663M in   5.074626s
      String#casecmp      7.884M (± 1.1%) i/s -     39.637M in   5.028119s

Comparison:
      String#casecmp:  7884215.2 i/s
String#downcase + ==:  6436690.0 i/s - 1.22x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            String#+   590.437k i/100ms
       String#concat   602.751k i/100ms
       String#append   623.242k i/100ms
         "foo" "bar"     1.149M i/100ms
  "#{'foo'}#{'bar'}"     1.146M i/100ms
Calculating -------------------------------------
            String#+      5.934M (± 0.3%) i/s -     30.112M in   5.074465s
       String#concat      6.016M (± 0.4%) i/s -     30.138M in   5.009634s
       String#append      6.616M (± 0.5%) i/s -     33.655M in   5.086958s
         "foo" "bar"     11.464M (± 0.3%) i/s -     57.428M in   5.009341s
  "#{'foo'}#{'bar'}"     11.476M (± 0.4%) i/s -     58.465M in   5.094810s

Comparison:
  "#{'foo'}#{'bar'}": 11475592.2 i/s
         "foo" "bar": 11464348.4 i/s - same-ish: difference falls within error
       String#append:  6616089.6 i/s - 1.73x  (± 0.00) slower
       String#concat:  6016024.1 i/s - 1.91x  (± 0.00) slower
            String#+:  5934148.6 i/s - 1.93x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#+@   983.952k i/100ms
          String#dup   581.571k i/100ms
Calculating -------------------------------------
           String#+@      9.829M (± 0.4%) i/s -     49.198M in   5.005595s
          String#dup      5.805M (± 0.4%) i/s -     29.079M in   5.009432s

Comparison:
           String#+@:  9828649.2 i/s
          String#dup:  5804841.3 i/s - 1.69x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   190.363k i/100ms
       String#match?   430.479k i/100ms
    String#end_with?   602.719k i/100ms
Calculating -------------------------------------
           String#=~      1.892M (± 0.5%) i/s -      9.518M in   5.029764s
       String#match?      4.304M (± 0.5%) i/s -     21.524M in   5.000556s
    String#end_with?      6.047M (± 1.1%) i/s -     30.739M in   5.084194s

Comparison:
    String#end_with?:  6046676.7 i/s
       String#match?:  4304400.8 i/s - 1.40x  (± 0.00) slower
           String#=~:  1892420.9 i/s - 3.20x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   112.134k i/100ms
          String#sub   135.865k i/100ms
String#dup["string"]=
                       178.811k i/100ms
Calculating -------------------------------------
         String#gsub      1.116M (± 2.6%) i/s -      5.607M in   5.029746s
          String#sub      1.401M (± 0.5%) i/s -      7.065M in   5.041348s
String#dup["string"]=
                          1.810M (± 2.7%) i/s -      9.119M in   5.043023s

Comparison:
String#dup["string"]=:  1809766.9 i/s
          String#sub:  1401444.9 i/s - 1.29x  (± 0.00) slower
         String#gsub:  1115633.7 i/s - 1.62x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   106.316k i/100ms
           String#tr   350.683k i/100ms
Calculating -------------------------------------
         String#gsub      1.060M (± 0.5%) i/s -      5.316M in   5.017198s
           String#tr      3.498M (± 0.4%) i/s -     17.534M in   5.012684s

Comparison:
           String#tr:  3498015.2 i/s
         String#gsub:  1059545.6 i/s - 3.30x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.132M i/100ms
         With Freeze     1.688M i/100ms
Calculating -------------------------------------
      Without Freeze     11.643M (± 0.5%) i/s -     58.880M in   5.057320s
         With Freeze     16.889M (± 0.3%) i/s -     86.106M in   5.098315s

Comparison:
         With Freeze: 16889275.8 i/s
      Without Freeze: 11642809.0 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.372k i/100ms
      String#squeeze   156.976k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     34.096k (± 0.6%) i/s -    171.972k in   5.043948s
      String#squeeze      1.565M (± 0.3%) i/s -      7.849M in   5.014613s

Comparison:
      String#squeeze:  1565197.1 i/s
 String#gsub/regex+/:    34096.0 i/s - 45.91x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   282.241k i/100ms
       String#match?   749.327k i/100ms
  String#start_with?   856.871k i/100ms
Calculating -------------------------------------
           String#=~      2.821M (± 0.7%) i/s -     14.112M in   5.002217s
       String#match?      7.452M (± 1.8%) i/s -     37.466M in   5.029208s
  String#start_with?      8.593M (± 0.5%) i/s -     43.700M in   5.085792s

Comparison:
  String#start_with?:  8592834.3 i/s
       String#match?:  7452475.4 i/s - 1.15x  (± 0.00) slower
           String#=~:  2821285.8 i/s - 3.05x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   195.457k i/100ms
    String#[0, n] ==    82.034k i/100ms
   String#[RANGE] ==    75.552k i/100ms
   String#[0...n] ==    46.336k i/100ms
Calculating -------------------------------------
  String#start_with?      1.942M (± 1.4%) i/s -      9.773M in   5.033065s
    String#[0, n] ==    821.034k (± 0.9%) i/s -      4.184M in   5.096129s
   String#[RANGE] ==    764.246k (± 0.6%) i/s -      3.853M in   5.041958s
   String#[0...n] ==    463.904k (± 1.2%) i/s -      2.363M in   5.094735s

Comparison:
  String#start_with?:  1942109.4 i/s
    String#[0, n] ==:   821034.5 i/s - 2.37x  (± 0.00) slower
   String#[RANGE] ==:   764246.5 i/s - 2.54x  (± 0.00) slower
   String#[0...n] ==:   463903.8 i/s - 4.19x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   182.044k i/100ms
 String#sub!'string'   127.643k i/100ms
String#gsub!'string'    77.552k i/100ms
  String#[/regexp/]=   153.759k i/100ms
 String#sub!/regexp/   114.574k i/100ms
String#gsub!/regexp/    61.370k i/100ms
Calculating -------------------------------------
  String#['string']=      1.866M (± 0.5%) i/s -      9.466M in   5.072264s
 String#sub!'string'      1.248M (± 0.9%) i/s -      6.255M in   5.013775s
String#gsub!'string'    784.428k (± 0.6%) i/s -      3.955M in   5.042278s
  String#[/regexp/]=      1.554M (± 0.4%) i/s -      7.842M in   5.047157s
 String#sub!/regexp/      1.130M (± 0.5%) i/s -      5.729M in   5.070374s
String#gsub!/regexp/    610.649k (± 0.6%) i/s -      3.068M in   5.025140s

Comparison:
  String#['string']=:  1866324.4 i/s
  String#[/regexp/]=:  1553712.6 i/s - 1.20x  (± 0.00) slower
 String#sub!'string':  1247570.0 i/s - 1.50x  (± 0.00) slower
 String#sub!/regexp/:  1129868.4 i/s - 1.65x  (± 0.00) slower
String#gsub!'string':   784428.2 i/s - 2.38x  (± 0.00) slower
String#gsub!/regexp/:   610649.2 i/s - 3.06x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          String#sub   143.803k i/100ms
        String#chomp   562.942k i/100ms
String#delete_suffix   614.276k i/100ms
Calculating -------------------------------------
          String#sub      1.437M (± 0.6%) i/s -      7.190M in   5.002810s
        String#chomp      5.655M (± 0.5%) i/s -     28.710M in   5.077070s
String#delete_suffix      6.157M (± 0.5%) i/s -     31.328M in   5.088031s

Comparison:
String#delete_suffix:  6157356.2 i/s
        String#chomp:  5654983.7 i/s - 1.09x  (± 0.00) slower
          String#sub:  1437267.0 i/s - 4.28x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   610.422k i/100ms
          String#sub   146.937k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.079M (± 0.5%) i/s -     30.521M in   5.020866s
          String#sub      1.460M (± 0.5%) i/s -      7.347M in   5.031215s

Comparison:
String#delete_prefix:  6078979.5 i/s
          String#sub:  1460294.9 i/s - 4.16x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   623.405k i/100ms
    String#unpack[0]   481.427k i/100ms
Calculating -------------------------------------
      String#unpack1      6.244M (± 0.5%) i/s -     31.794M in   5.092316s
    String#unpack[0]      4.785M (± 0.3%) i/s -     24.071M in   5.030866s

Comparison:
      String#unpack1:  6243595.4 i/s
    String#unpack[0]:  4784788.4 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.306k i/100ms
          Time.parse     9.391k i/100ms
Calculating -------------------------------------
        Time.iso8601    273.152k (± 0.5%) i/s -      1.393M in   5.098424s
          Time.parse     93.650k (± 0.7%) i/s -    469.550k in   5.014104s

Comparison:
        Time.iso8601:   273152.3 i/s
          Time.parse:    93650.1 i/s - 2.92x  (± 0.00) slower

