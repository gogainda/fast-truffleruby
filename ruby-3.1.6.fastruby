$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       760.886k i/100ms
Function with splat arguments
                        21.316k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.614M (± 0.8%) i/s -     38.805M in   5.096728s
Function with splat arguments
                        184.949k (± 9.3%) i/s -    937.904k in   5.122955s

Comparison:
Function with single Array argument:  7614295.0 i/s
Function with splat arguments:   184949.3 i/s - 41.17x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.012M i/100ms
Sequential Assignment
                         1.010M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.131M (± 0.8%) i/s -     51.589M in   5.092328s
Sequential Assignment
                          9.928M (± 0.4%) i/s -     50.493M in   5.086166s

Comparison:
 Parallel Assignment: 10131442.3 i/s
Sequential Assignment:  9927644.6 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   466.289k i/100ms
       attr_accessor   554.412k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.549M (± 0.5%) i/s -     22.848M in   5.022310s
       attr_accessor      5.523M (± 0.5%) i/s -     27.721M in   5.019658s

Comparison:
       attr_accessor:  5522529.0 i/s
   getter_and_setter:  4549433.4 i/s - 1.21x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    86.692k i/100ms
         respond_to?   780.731k i/100ms
Calculating -------------------------------------
      begin...rescue    876.465k (± 1.0%) i/s -      4.421M in   5.045011s
         respond_to?      7.832M (± 0.5%) i/s -     39.817M in   5.083975s

Comparison:
         respond_to?:  7832155.4 i/s
      begin...rescue:   876464.6 i/s - 8.94x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              normal   296.021k i/100ms
             &method   122.140k i/100ms
Calculating -------------------------------------
              normal      2.973M (± 1.4%) i/s -     15.097M in   5.079054s
             &method      1.221M (± 0.6%) i/s -      6.107M in   5.001136s

Comparison:
              normal:  2973000.2 i/s
             &method:  1221166.1 i/s - 2.43x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       221.000  i/100ms
       define_method   287.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.199k (±24.9%) i/s -      9.503k in   5.046708s
       define_method      3.263k (±20.8%) i/s -     16.359k in   5.567485s

Comparison:
       define_method:     3262.6 i/s
module_eval with string:     2198.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Float#round   259.925k i/100ms
       Kernel#format   200.599k i/100ms
            String#%   169.543k i/100ms
Calculating -------------------------------------
         Float#round      2.602M (± 1.2%) i/s -     13.256M in   5.095787s
       Kernel#format      2.007M (± 0.6%) i/s -     10.231M in   5.098178s
            String#%      1.705M (± 0.7%) i/s -      8.647M in   5.071817s

Comparison:
         Float#round:  2601810.1 i/s
       Kernel#format:  2006780.6 i/s - 1.30x  (± 0.00) slower
            String#%:  1704926.0 i/s - 1.53x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash   904.856k i/100ms
          OpenStruct   499.935k i/100ms
Calculating -------------------------------------
                Hash      8.834M (± 0.7%) i/s -     44.338M in   5.019126s
          OpenStruct      4.956M (± 0.7%) i/s -     24.997M in   5.044169s

Comparison:
                Hash:  8834193.2 i/s
          OpenStruct:  4955811.9 i/s - 1.78x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.085M i/100ms
          OpenStruct    11.288k i/100ms
Calculating -------------------------------------
                Hash     11.514M (± 0.5%) i/s -     58.609M in   5.090604s
          OpenStruct    115.725k (± 2.8%) i/s -    586.976k in   5.076108s

Comparison:
                Hash: 11513520.1 i/s
          OpenStruct:   115724.9 i/s - 99.49x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   583.566k i/100ms
  ancestors.include?   120.256k i/100ms
Calculating -------------------------------------
  less than or equal      5.847M (± 2.1%) i/s -     29.762M in   5.092575s
  ancestors.include?      1.189M (± 1.1%) i/s -      6.013M in   5.055541s

Comparison:
  less than or equal:  5846941.1 i/s
  ancestors.include?:  1189486.4 i/s - 4.92x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.749  (± 0.0%) i/s -      4.000  in   5.382605s
         Kernel loop      0.227  (± 0.0%) i/s -      2.000  in   8.799686s

Comparison:
          While Loop:        0.7 i/s
         Kernel loop:        0.2 i/s - 3.29x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.555M i/100ms
         Array#first     1.247M i/100ms
Calculating -------------------------------------
           Array#[0]     15.581M (± 0.8%) i/s -     79.290M in   5.089150s
         Array#first     12.446M (± 1.8%) i/s -     62.366M in   5.012580s

Comparison:
           Array#[0]: 15581157.9 i/s
         Array#first: 12446024.4 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.547M i/100ms
          Array#last     1.322M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.474M (± 0.1%) i/s -     78.876M in   5.097208s
          Array#last     13.207M (± 0.3%) i/s -     66.109M in   5.005832s

Comparison:
          Array#[-1]: 15474360.0 i/s
          Array#last: 13206573.6 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    98.695k i/100ms
Calculating -------------------------------------
                find      0.266  (± 0.0%) i/s -      2.000  in   7.509178s
             bsearch    986.477k (± 1.6%) i/s -      4.935M in   5.003792s

Comparison:
             bsearch:   986477.4 i/s
                find:        0.3 i/s - 3703802.60x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    18.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    182.303  (± 2.2%) i/s -    918.000  in   5.038657s
        Array#insert      1.419  (± 0.0%) i/s -      8.000  in   5.636784s

Comparison:
       Array#unshift:      182.3 i/s
        Array#insert:        1.4 i/s - 128.44x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.021M i/100ms
          Array#size     2.042M i/100ms
         Array#count     1.579M i/100ms
Calculating -------------------------------------
        Array#length     20.194M (± 0.4%) i/s -    101.051M in   5.004129s
          Array#size     20.483M (± 0.3%) i/s -    104.119M in   5.083321s
         Array#count     15.784M (± 0.4%) i/s -     78.943M in   5.001439s

Comparison:
          Array#size: 20482757.6 i/s
        Array#length: 20193806.0 i/s - 1.01x  (± 0.00) slower
         Array#count: 15784370.8 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.972k i/100ms
        Array#sample     1.040M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    454.828k (± 0.6%) i/s -      2.299M in   5.053994s
        Array#sample     10.376M (± 0.3%) i/s -     52.006M in   5.012131s

Comparison:
        Array#sample: 10376060.3 i/s
 Array#shuffle.first:   454827.8 i/s - 22.81x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    64.935k i/100ms
          Date.parse    30.944k i/100ms
Calculating -------------------------------------
        Date.iso8601    642.297k (± 0.5%) i/s -      3.247M in   5.055024s
          Date.parse    309.742k (± 0.7%) i/s -      1.578M in   5.095281s

Comparison:
        Date.iso8601:   642297.5 i/s
          Date.parse:   309741.9 i/s - 2.07x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.211k i/100ms
           Array#map    26.799k i/100ms
Calculating -------------------------------------
   Array#each + push    186.247k (± 0.6%) i/s -    946.972k in   5.084710s
           Array#map    267.462k (± 0.5%) i/s -      1.340M in   5.010024s

Comparison:
           Array#map:   267461.5 i/s
   Array#each + push:   186247.1 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            For loop    29.613k i/100ms
               #each    32.455k i/100ms
Calculating -------------------------------------
            For loop    295.884k (± 0.3%) i/s -      1.481M in   5.004216s
               #each    325.649k (± 0.2%) i/s -      1.655M in   5.082813s

Comparison:
               #each:   325648.6 i/s
            For loop:   295883.6 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.310k i/100ms
     each_with_index    19.168k i/100ms
Calculating -------------------------------------
          While Loop    280.750k (± 1.7%) i/s -      1.420M in   5.059801s
     each_with_index    191.406k (± 0.6%) i/s -    958.400k in   5.007305s

Comparison:
          While Loop:   280749.6 i/s
     each_with_index:   191406.3 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    92.598k i/100ms
      inject to_proc     2.187k i/100ms
        inject block     2.139k i/100ms
Calculating -------------------------------------
       inject symbol      1.145M (±15.6%) i/s -      5.648M in   5.067757s
      inject to_proc     22.001k (± 0.6%) i/s -    111.537k in   5.069892s
        inject block     21.482k (± 0.5%) i/s -    109.089k in   5.078322s

Comparison:
       inject symbol:  1144565.1 i/s
      inject to_proc:    22000.6 i/s - 52.02x  (± 0.00) slower
        inject block:    21481.9 i/s - 53.28x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.759k i/100ms
   Array#map.flatten     3.973k i/100ms
      Array#flat_map     9.500k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     67.707k (± 0.7%) i/s -    344.709k in   5.091368s
   Array#map.flatten     39.395k (± 0.5%) i/s -    198.650k in   5.042628s
      Array#flat_map     94.603k (± 1.4%) i/s -    475.000k in   5.022108s

Comparison:
      Array#flat_map:    94602.7 i/s
Array#map.flatten(1):    67707.5 i/s - 1.40x  (± 0.00) slower
   Array#map.flatten:    39395.2 i/s - 2.40x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    31.127k i/100ms
  Array#reverse_each    30.619k i/100ms
Calculating -------------------------------------
  Array#reverse.each    311.372k (± 0.5%) i/s -      1.587M in   5.098446s
  Array#reverse_each    305.639k (± 1.3%) i/s -      1.531M in   5.009890s

Comparison:
  Array#reverse.each:   311371.7 i/s
  Array#reverse_each:   305638.8 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.587k i/100ms
   Enumerable#detect    80.382k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        206.858k (± 0.6%) i/s -      4.138M in  20.004818s
   Enumerable#detect    808.272k (± 1.2%) i/s -     16.237M in  20.091742s

Comparison:
   Enumerable#detect:   808271.7 i/s
Enumerable#select.first:   206857.9 i/s - 3.91x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       241.042k i/100ms
Enumerable#select.last
                        18.475k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.418M (± 0.6%) i/s -     12.293M in   5.083734s
Enumerable#select.last
                        184.583k (± 0.6%) i/s -    923.750k in   5.004716s

Comparison:
Enumerable#reverse.detect:  2418225.4 i/s
Enumerable#select.last:   184583.1 i/s - 13.10x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         5.062k i/100ms
  Enumerable#sort_by     4.779k i/100ms
     Enumerable#sort     2.450k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         51.405k (± 1.7%) i/s -    258.162k in   5.023689s
  Enumerable#sort_by     47.716k (± 1.1%) i/s -    238.950k in   5.008359s
     Enumerable#sort     23.895k (± 0.3%) i/s -    120.050k in   5.024041s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    51405.1 i/s
  Enumerable#sort_by:    47715.5 i/s - 1.08x  (± 0.00) slower
     Enumerable#sort:    23895.4 i/s - 2.15x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.766k i/100ms
Enumerable#sort_by...first
                         8.668k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    180.126k (± 0.4%) i/s -    906.066k in   5.030267s
Enumerable#sort_by...first
                         87.095k (± 1.0%) i/s -    442.068k in   5.076234s

Comparison:
   Enumerable#min_by:   180125.9 i/s
Enumerable#sort_by...first:    87094.7 i/s - 2.07x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   415.675k i/100ms
            Hash#dup   302.084k i/100ms
Calculating -------------------------------------
              Hash[]      3.959M (± 2.3%) i/s -     19.952M in   5.041669s
            Hash#dup      2.938M (± 1.0%) i/s -     14.802M in   5.038672s

Comparison:
              Hash[]:  3959477.9 i/s
            Hash#dup:  2937991.1 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.422M i/100ms
  Hash#fetch, symbol     1.153M i/100ms
     Hash#[], string     1.241M i/100ms
  Hash#fetch, string   792.728k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.316M (± 0.4%) i/s -     72.512M in   5.065059s
  Hash#fetch, symbol     11.502M (± 0.4%) i/s -     57.632M in   5.010919s
     Hash#[], string     12.424M (± 0.4%) i/s -     63.289M in   5.094024s
  Hash#fetch, string      7.878M (± 0.5%) i/s -     39.636M in   5.031639s

Comparison:
     Hash#[], symbol: 14316372.3 i/s
     Hash#[], string: 12424438.7 i/s - 1.15x  (± 0.00) slower
  Hash#fetch, symbol: 11501510.2 i/s - 1.24x  (± 0.00) slower
  Hash#fetch, string:  7877666.7 i/s - 1.82x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   844.411k i/100ms
             Hash#[]     1.007M i/100ms
          Hash#[] ||   881.603k i/100ms
          Hash#[] &&   375.385k i/100ms
          Hash#fetch   594.124k i/100ms
 Hash#fetch fallback   393.234k i/100ms
Calculating -------------------------------------
            Hash#dig      8.551M (± 0.7%) i/s -     43.065M in   5.036462s
             Hash#[]     10.377M (± 1.5%) i/s -     52.347M in   5.045833s
          Hash#[] ||      9.358M (± 0.7%) i/s -     47.607M in   5.087797s
          Hash#[] &&      3.906M (± 2.0%) i/s -     19.895M in   5.095501s
          Hash#fetch      5.932M (± 1.7%) i/s -     29.706M in   5.009099s
 Hash#fetch fallback      3.887M (± 2.2%) i/s -     19.662M in   5.060841s

Comparison:
             Hash#[]: 10376614.8 i/s
          Hash#[] ||:  9357521.0 i/s - 1.11x  (± 0.00) slower
            Hash#dig:  8551103.0 i/s - 1.21x  (± 0.00) slower
          Hash#fetch:  5932313.5 i/s - 1.75x  (± 0.00) slower
          Hash#[] &&:  3905952.0 i/s - 2.66x  (± 0.00) slower
 Hash#fetch fallback:  3887033.8 i/s - 2.67x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.439M i/100ms
  Hash#fetch + block     1.440M i/100ms
    Hash#fetch + arg     1.075M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.312M (± 0.5%) i/s -     71.961M in   5.028068s
  Hash#fetch + block     14.468M (± 0.6%) i/s -     73.442M in   5.076217s
    Hash#fetch + arg     10.710M (± 0.4%) i/s -     53.759M in   5.019427s

Comparison:
  Hash#fetch + block: 14468347.0 i/s
  Hash#fetch + const: 14312210.6 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 10710359.8 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    26.988k i/100ms
         sort + to_h    10.565k i/100ms
Calculating -------------------------------------
      sort_by + to_h    269.313k (± 0.6%) i/s -      1.349M in   5.010715s
         sort + to_h    105.277k (± 0.8%) i/s -    528.250k in   5.018047s

Comparison:
      sort_by + to_h:   269313.2 i/s
         sort + to_h:   105277.5 i/s - 2.56x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   191.818k i/100ms
       Hash#each_key   200.535k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.901M (± 0.6%) i/s -      9.591M in   5.044855s
       Hash#each_key      1.974M (± 1.9%) i/s -     10.027M in   5.082067s

Comparison:
       Hash#each_key:  1973764.4 i/s
      Hash#keys.each:  1901203.1 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.218k i/100ms
           Hash#key?     1.011M i/100ms
Calculating -------------------------------------
  Hash#keys.include?     12.041k (± 3.6%) i/s -     60.900k in   5.065030s
           Hash#key?     10.166M (± 1.8%) i/s -     51.562M in   5.074022s

Comparison:
           Hash#key?: 10165632.8 i/s
  Hash#keys.include?:    12041.4 i/s - 844.22x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.990k i/100ms
            Hash#[]=    10.112k i/100ms
Calculating -------------------------------------
         Hash#merge!     39.604k (± 0.8%) i/s -    199.500k in   5.037696s
            Hash#[]=    100.844k (± 0.9%) i/s -    505.600k in   5.014068s

Comparison:
            Hash#[]=:   100843.8 i/s
         Hash#merge!:    39604.2 i/s - 2.55x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.780k i/100ms
      Hash#merge({})     3.932k i/100ms
 Hash#dup#merge!({})     2.859k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         47.411k (± 1.1%) i/s -    239.000k in   5.041627s
      Hash#merge({})     38.987k (± 0.6%) i/s -    196.600k in   5.042898s
 Hash#dup#merge!({})     28.213k (± 0.6%) i/s -    142.950k in   5.067063s

Comparison:
{}#merge!(Hash) do end:    47411.0 i/s
      Hash#merge({}):    38987.2 i/s - 1.22x  (± 0.00) slower
 Hash#dup#merge!({}):    28212.6 i/s - 1.68x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   389.854k i/100ms
          Hash#merge   362.790k i/100ms
Calculating -------------------------------------
        Hash#**other      3.874M (± 3.0%) i/s -     19.493M in   5.036132s
          Hash#merge      3.619M (± 1.4%) i/s -     18.140M in   5.013910s

Comparison:
        Hash#**other:  3874323.6 i/s
          Hash#merge:  3618529.4 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.691k i/100ms
         Hash#merge!     3.858k i/100ms
Calculating -------------------------------------
          Hash#merge     16.379k (± 2.4%) i/s -     82.859k in   5.062171s
         Hash#merge!     39.400k (± 1.0%) i/s -    200.616k in   5.092248s

Comparison:
         Hash#merge!:    39400.1 i/s
          Hash#merge:    16378.8 i/s - 2.41x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      416.785k i/100ms
Array#each             227.777k i/100ms
Array#each_w/_object   174.938k i/100ms
Hash#select-include     71.225k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.149M (± 0.4%) i/s -     20.839M in   5.023242s
Array#each                2.258M (± 0.6%) i/s -     11.389M in   5.043934s
Array#each_w/_object      1.731M (± 0.2%) i/s -      8.747M in   5.054543s
Hash#select-include     721.978k (± 0.4%) i/s -      3.632M in   5.031367s

Comparison:
Hash#native-slice   :  4148643.4 i/s
Array#each          :  2258025.2 i/s - 1.84x  (± 0.00) slower
Array#each_w/_object:  1730512.4 i/s - 2.40x  (± 0.00) slower
Hash#select-include :   721978.2 i/s - 5.75x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.068k i/100ms
         Hash#value?   806.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     10.610k (± 3.9%) i/s -     53.400k in   5.041627s
         Hash#value?      8.315k (± 1.6%) i/s -     41.912k in   5.042103s

Comparison:
Hash#values.include?:    10610.4 i/s
         Hash#value?:     8314.8 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                call   628.075k i/100ms
                send   515.335k i/100ms
      method_missing   378.073k i/100ms
Calculating -------------------------------------
                call      6.302M (± 0.5%) i/s -     32.032M in   5.083153s
                send      5.191M (± 0.6%) i/s -     26.282M in   5.063102s
      method_missing      3.771M (± 0.4%) i/s -     18.904M in   5.012823s

Comparison:
                call:  6301702.5 i/s
                send:  5191068.1 i/s - 1.21x  (± 0.00) slower
      method_missing:  3771113.9 i/s - 1.67x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
               Block     9.063k i/100ms
      Symbol#to_proc    10.290k i/100ms
Calculating -------------------------------------
               Block     90.802k (± 1.5%) i/s -    462.213k in   5.091616s
      Symbol#to_proc    102.008k (± 0.5%) i/s -    514.500k in   5.043841s

Comparison:
      Symbol#to_proc:   102008.4 i/s
               Block:    90802.2 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          block.call   933.756k i/100ms
       block + yield   996.102k i/100ms
        unused block     1.317M i/100ms
               yield     1.177M i/100ms
Calculating -------------------------------------
          block.call      9.370M (± 1.4%) i/s -     47.622M in   5.083365s
       block + yield      9.961M (± 0.4%) i/s -     50.801M in   5.099903s
        unused block     13.165M (± 0.4%) i/s -     65.868M in   5.003462s
               yield     11.743M (± 0.4%) i/s -     58.866M in   5.012995s

Comparison:
        unused block: 13164685.6 i/s
               yield: 11742768.7 i/s - 1.12x  (± 0.00) slower
       block + yield:  9961365.4 i/s - 1.32x  (± 0.00) slower
          block.call:  9370224.7 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   312.893k i/100ms
      range#include?    12.248k i/100ms
       range#member?    12.238k i/100ms
       plain compare   524.546k i/100ms
Calculating -------------------------------------
        range#cover?      3.148M (± 2.0%) i/s -     15.958M in   5.071621s
      range#include?    125.292k (± 0.7%) i/s -    636.896k in   5.083534s
       range#member?    125.862k (± 1.3%) i/s -    636.376k in   5.057131s
       plain compare      5.292M (± 0.5%) i/s -     26.752M in   5.055130s

Comparison:
       plain compare:  5292169.1 i/s
        range#cover?:  3147728.5 i/s - 1.68x  (± 0.00) slower
       range#member?:   125861.5 i/s - 42.05x  (± 0.00) slower
      range#include?:   125291.8 i/s - 42.24x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       String#match?   852.089k i/100ms
           String#=~   631.873k i/100ms
          Regexp#===   560.771k i/100ms
        String#match   466.616k i/100ms
Calculating -------------------------------------
       String#match?      8.629M (± 0.6%) i/s -     43.457M in   5.036543s
           String#=~      6.294M (± 0.5%) i/s -     31.594M in   5.019642s
          Regexp#===      5.628M (± 0.4%) i/s -     28.599M in   5.081528s
        String#match      4.648M (± 1.9%) i/s -     23.331M in   5.021272s

Comparison:
       String#match?:  8628541.2 i/s
           String#=~:  6294168.4 i/s - 1.37x  (± 0.00) slower
          Regexp#===:  5628168.4 i/s - 1.53x  (± 0.00) slower
        String#match:  4648209.2 i/s - 1.86x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   637.444k i/100ms
      String#casecmp   803.463k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.424M (± 0.5%) i/s -     32.510M in   5.060559s
      String#casecmp      8.002M (± 0.7%) i/s -     40.173M in   5.020731s

Comparison:
      String#casecmp:  8001885.7 i/s
String#downcase + ==:  6424290.3 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            String#+   585.155k i/100ms
       String#concat   606.499k i/100ms
       String#append   658.204k i/100ms
         "foo" "bar"     1.121M i/100ms
  "#{'foo'}#{'bar'}"     1.162M i/100ms
Calculating -------------------------------------
            String#+      5.878M (± 0.5%) i/s -     29.843M in   5.077260s
       String#concat      6.145M (± 0.5%) i/s -     30.931M in   5.034074s
       String#append      6.584M (± 0.5%) i/s -     33.568M in   5.098867s
         "foo" "bar"     11.297M (± 0.5%) i/s -     57.149M in   5.058801s
  "#{'foo'}#{'bar'}"     11.621M (± 1.1%) i/s -     58.106M in   5.000907s

Comparison:
  "#{'foo'}#{'bar'}": 11620705.1 i/s
         "foo" "bar": 11297108.5 i/s - 1.03x  (± 0.00) slower
       String#append:  6583663.8 i/s - 1.77x  (± 0.00) slower
       String#concat:  6144551.9 i/s - 1.89x  (± 0.00) slower
            String#+:  5877916.8 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#+@   993.254k i/100ms
          String#dup   562.219k i/100ms
Calculating -------------------------------------
           String#+@      9.903M (± 1.5%) i/s -     49.663M in   5.016002s
          String#dup      5.590M (± 0.4%) i/s -     28.111M in   5.028986s

Comparison:
           String#+@:  9903368.6 i/s
          String#dup:  5589897.3 i/s - 1.77x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   184.967k i/100ms
       String#match?   426.533k i/100ms
    String#end_with?   604.325k i/100ms
Calculating -------------------------------------
           String#=~      1.831M (± 0.5%) i/s -      9.248M in   5.052264s
       String#match?      4.273M (± 0.3%) i/s -     21.753M in   5.091139s
    String#end_with?      6.139M (± 0.3%) i/s -     30.821M in   5.020717s

Comparison:
    String#end_with?:  6138745.5 i/s
       String#match?:  4272804.5 i/s - 1.44x  (± 0.00) slower
           String#=~:  1830587.5 i/s - 3.35x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   113.590k i/100ms
          String#sub   140.620k i/100ms
String#dup["string"]=
                       175.679k i/100ms
Calculating -------------------------------------
         String#gsub      1.169M (± 0.4%) i/s -      5.907M in   5.053877s
          String#sub      1.475M (± 0.4%) i/s -      7.453M in   5.052486s
String#dup["string"]=
                          1.777M (± 0.5%) i/s -      8.960M in   5.043125s

Comparison:
String#dup["string"]=:  1776641.4 i/s
          String#sub:  1475111.6 i/s - 1.20x  (± 0.00) slower
         String#gsub:  1168757.4 i/s - 1.52x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   104.609k i/100ms
           String#tr   349.305k i/100ms
Calculating -------------------------------------
         String#gsub      1.048M (± 0.5%) i/s -      5.335M in   5.088978s
           String#tr      3.479M (± 1.8%) i/s -     17.465M in   5.022070s

Comparison:
           String#tr:  3478913.4 i/s
         String#gsub:  1048381.5 i/s - 3.32x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.139M i/100ms
         With Freeze     1.679M i/100ms
Calculating -------------------------------------
      Without Freeze     11.519M (± 1.5%) i/s -     58.072M in   5.042833s
         With Freeze     16.797M (± 0.2%) i/s -     85.645M in   5.098811s

Comparison:
         With Freeze: 16797014.6 i/s
      Without Freeze: 11518526.8 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.404k i/100ms
      String#squeeze   152.648k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     34.177k (± 0.7%) i/s -    173.604k in   5.079827s
      String#squeeze      1.549M (± 0.5%) i/s -      7.785M in   5.024476s

Comparison:
      String#squeeze:  1549471.5 i/s
 String#gsub/regex+/:    34176.7 i/s - 45.34x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   273.286k i/100ms
       String#match?   746.559k i/100ms
  String#start_with?   860.892k i/100ms
Calculating -------------------------------------
           String#=~      2.736M (± 0.6%) i/s -     13.938M in   5.093840s
       String#match?      7.464M (± 0.2%) i/s -     37.328M in   5.001025s
  String#start_with?      8.598M (± 0.7%) i/s -     43.045M in   5.006613s

Comparison:
  String#start_with?:  8597928.0 i/s
       String#match?:  7464101.1 i/s - 1.15x  (± 0.00) slower
           String#=~:  2736249.7 i/s - 3.14x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   208.116k i/100ms
    String#[0, n] ==    80.733k i/100ms
   String#[RANGE] ==    74.852k i/100ms
   String#[0...n] ==    47.364k i/100ms
Calculating -------------------------------------
  String#start_with?      1.944M (± 1.7%) i/s -      9.781M in   5.034196s
    String#[0, n] ==    816.431k (± 1.3%) i/s -      4.117M in   5.044058s
   String#[RANGE] ==    752.539k (± 0.4%) i/s -      3.817M in   5.072858s
   String#[0...n] ==    464.289k (± 0.5%) i/s -      2.368M in   5.100843s

Comparison:
  String#start_with?:  1943576.4 i/s
    String#[0, n] ==:   816431.0 i/s - 2.38x  (± 0.00) slower
   String#[RANGE] ==:   752539.2 i/s - 2.58x  (± 0.00) slower
   String#[0...n] ==:   464288.8 i/s - 4.19x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   175.684k i/100ms
 String#sub!'string'   126.865k i/100ms
String#gsub!'string'    78.299k i/100ms
  String#[/regexp/]=   150.084k i/100ms
 String#sub!/regexp/   111.839k i/100ms
String#gsub!/regexp/    61.013k i/100ms
Calculating -------------------------------------
  String#['string']=      1.794M (± 1.5%) i/s -      9.136M in   5.092631s
 String#sub!'string'      1.248M (± 0.9%) i/s -      6.343M in   5.083774s
String#gsub!'string'    758.899k (± 0.6%) i/s -      3.837M in   5.055731s
  String#[/regexp/]=      1.483M (± 0.5%) i/s -      7.504M in   5.059440s
 String#sub!/regexp/      1.115M (± 0.3%) i/s -      5.592M in   5.016140s
String#gsub!/regexp/    598.890k (± 0.5%) i/s -      3.051M in   5.093970s

Comparison:
  String#['string']=:  1794323.9 i/s
  String#[/regexp/]=:  1483240.5 i/s - 1.21x  (± 0.00) slower
 String#sub!'string':  1247844.3 i/s - 1.44x  (± 0.00) slower
 String#sub!/regexp/:  1114801.6 i/s - 1.61x  (± 0.00) slower
String#gsub!'string':   758898.9 i/s - 2.36x  (± 0.00) slower
String#gsub!/regexp/:   598890.0 i/s - 3.00x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          String#sub   140.520k i/100ms
        String#chomp   559.227k i/100ms
String#delete_suffix   606.322k i/100ms
Calculating -------------------------------------
          String#sub      1.395M (± 0.7%) i/s -      7.026M in   5.035790s
        String#chomp      5.583M (± 0.6%) i/s -     27.961M in   5.008484s
String#delete_suffix      6.069M (± 0.6%) i/s -     30.922M in   5.095585s

Comparison:
String#delete_suffix:  6068667.7 i/s
        String#chomp:  5582974.3 i/s - 1.09x  (± 0.00) slower
          String#sub:  1395280.7 i/s - 4.35x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   624.672k i/100ms
          String#sub   143.392k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.224M (± 1.3%) i/s -     31.234M in   5.019260s
          String#sub      1.452M (± 0.6%) i/s -      7.313M in   5.035737s

Comparison:
String#delete_prefix:  6223881.7 i/s
          String#sub:  1452267.2 i/s - 4.29x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   614.313k i/100ms
    String#unpack[0]   466.000k i/100ms
Calculating -------------------------------------
      String#unpack1      6.129M (± 0.6%) i/s -     30.716M in   5.011330s
    String#unpack[0]      4.690M (± 0.7%) i/s -     23.766M in   5.067450s

Comparison:
      String#unpack1:  6129452.0 i/s
    String#unpack[0]:  4690173.8 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.304k i/100ms
          Time.parse     9.306k i/100ms
Calculating -------------------------------------
        Time.iso8601    272.025k (± 1.7%) i/s -      1.365M in   5.020148s
          Time.parse     91.526k (± 2.9%) i/s -    465.300k in   5.088548s

Comparison:
        Time.iso8601:   272024.6 i/s
          Time.parse:    91525.6 i/s - 2.97x  (± 0.00) slower

