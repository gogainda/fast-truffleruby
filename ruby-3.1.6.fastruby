$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       770.667k i/100ms
Function with splat arguments
                        22.592k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.713M (± 0.4%) i/s -     39.304M in   5.096025s
Function with splat arguments
                        249.187k (± 7.9%) i/s -      1.243M in   5.031499s

Comparison:
Function with single Array argument:  7712837.9 i/s
Function with splat arguments:   249186.6 i/s - 30.95x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.016M i/100ms
Sequential Assignment
                         1.010M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.178M (± 0.9%) i/s -     51.818M in   5.091583s
Sequential Assignment
                          9.782M (± 2.0%) i/s -     49.501M in   5.062144s

Comparison:
 Parallel Assignment: 10178142.5 i/s
Sequential Assignment:  9782474.0 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   472.764k i/100ms
       attr_accessor   552.168k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.819M (± 0.5%) i/s -     24.111M in   5.003868s
       attr_accessor      5.512M (± 0.8%) i/s -     27.608M in   5.009271s

Comparison:
       attr_accessor:  5511794.1 i/s
   getter_and_setter:  4818578.7 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    88.759k i/100ms
         respond_to?   769.178k i/100ms
Calculating -------------------------------------
      begin...rescue    889.553k (± 0.5%) i/s -      4.527M in   5.088889s
         respond_to?      7.691M (± 0.4%) i/s -     38.459M in   5.000739s

Comparison:
         respond_to?:  7690761.0 i/s
      begin...rescue:   889552.9 i/s - 8.65x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              normal   300.800k i/100ms
             &method   123.381k i/100ms
Calculating -------------------------------------
              normal      2.983M (± 0.6%) i/s -     15.040M in   5.041361s
             &method      1.226M (± 0.7%) i/s -      6.169M in   5.032992s

Comparison:
              normal:  2983416.3 i/s
             &method:  1225779.9 i/s - 2.43x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       241.000  i/100ms
       define_method   292.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.283k (±21.4%) i/s -     10.604k in   5.325935s
       define_method      3.196k (±20.1%) i/s -     14.308k in   5.001639s

Comparison:
       define_method:     3196.3 i/s
module_eval with string:     2283.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Float#round   264.406k i/100ms
       Kernel#format   202.895k i/100ms
            String#%   172.174k i/100ms
Calculating -------------------------------------
         Float#round      2.639M (± 0.3%) i/s -     13.220M in   5.009728s
       Kernel#format      2.022M (± 0.3%) i/s -     10.145M in   5.016288s
            String#%      1.732M (± 0.3%) i/s -      8.781M in   5.070871s

Comparison:
         Float#round:  2638945.1 i/s
       Kernel#format:  2022374.5 i/s - 1.30x  (± 0.00) slower
            String#%:  1731641.4 i/s - 1.52x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash   899.689k i/100ms
          OpenStruct   498.030k i/100ms
Calculating -------------------------------------
                Hash      9.056M (± 0.3%) i/s -     45.884M in   5.066559s
          OpenStruct      4.987M (± 0.6%) i/s -     25.400M in   5.093483s

Comparison:
                Hash:  9056378.1 i/s
          OpenStruct:  4986843.2 i/s - 1.82x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.110M i/100ms
          OpenStruct     9.867k i/100ms
Calculating -------------------------------------
                Hash     11.160M (± 0.1%) i/s -     56.623M in   5.073698s
          OpenStruct     95.478k (± 2.9%) i/s -    483.483k in   5.068064s

Comparison:
                Hash: 11160200.4 i/s
          OpenStruct:    95478.0 i/s - 116.89x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   597.890k i/100ms
  ancestors.include?   119.897k i/100ms
Calculating -------------------------------------
  less than or equal      5.877M (± 0.4%) i/s -     29.894M in   5.086699s
  ancestors.include?      1.196M (± 0.7%) i/s -      5.995M in   5.011132s

Comparison:
  less than or equal:  5877107.5 i/s
  ancestors.include?:  1196358.7 i/s - 4.91x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.674  (± 0.0%) i/s -      4.000  in   5.934908s
         Kernel loop      0.219  (± 0.0%) i/s -      2.000  in   9.120419s

Comparison:
          While Loop:        0.7 i/s
         Kernel loop:        0.2 i/s - 3.07x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.572M i/100ms
         Array#first     1.314M i/100ms
Calculating -------------------------------------
           Array#[0]     15.721M (± 0.2%) i/s -     80.168M in   5.099345s
         Array#first     13.094M (± 0.4%) i/s -     65.679M in   5.016092s

Comparison:
           Array#[0]: 15721200.8 i/s
         Array#first: 13093925.4 i/s - 1.20x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.538M i/100ms
          Array#last     1.313M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.392M (± 0.2%) i/s -     78.459M in   5.097551s
          Array#last     13.115M (± 0.2%) i/s -     65.637M in   5.004888s

Comparison:
          Array#[-1]: 15391665.1 i/s
          Array#last: 13114698.1 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    99.423k i/100ms
Calculating -------------------------------------
                find      0.289  (± 0.0%) i/s -      2.000  in   6.929342s
             bsearch    994.014k (± 0.4%) i/s -      4.971M in   5.001154s

Comparison:
             bsearch:   994013.6 i/s
                find:        0.3 i/s - 3443930.06x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    19.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    195.835  (± 2.6%) i/s -    988.000  in   5.048313s
        Array#insert      1.447  (± 0.0%) i/s -      8.000  in   5.529686s

Comparison:
       Array#unshift:      195.8 i/s
        Array#insert:        1.4 i/s - 135.36x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.041M i/100ms
          Array#size     2.096M i/100ms
         Array#count     1.642M i/100ms
Calculating -------------------------------------
        Array#length     20.392M (± 0.3%) i/s -    102.041M in   5.003919s
          Array#size     21.014M (± 0.4%) i/s -    106.917M in   5.087878s
         Array#count     16.407M (± 0.6%) i/s -     82.122M in   5.005430s

Comparison:
          Array#size: 21014340.0 i/s
        Array#length: 20392350.9 i/s - 1.03x  (± 0.00) slower
         Array#count: 16407342.2 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.149k i/100ms
        Array#sample     1.042M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    454.073k (± 0.6%) i/s -      2.303M in   5.071149s
        Array#sample     10.466M (± 0.5%) i/s -     53.135M in   5.077045s

Comparison:
        Array#sample: 10465911.8 i/s
 Array#shuffle.first:   454073.4 i/s - 23.05x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    64.088k i/100ms
          Date.parse    32.749k i/100ms
Calculating -------------------------------------
        Date.iso8601    646.354k (± 0.5%) i/s -      3.268M in   5.056954s
          Date.parse    324.883k (± 1.4%) i/s -      1.637M in   5.041118s

Comparison:
        Date.iso8601:   646354.0 i/s
          Date.parse:   324883.2 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.985k i/100ms
           Array#map    27.004k i/100ms
Calculating -------------------------------------
   Array#each + push    189.832k (± 1.1%) i/s -    949.250k in   5.001106s
           Array#map    269.521k (± 0.5%) i/s -      1.350M in   5.009744s

Comparison:
           Array#map:   269520.9 i/s
   Array#each + push:   189831.6 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            For loop    29.864k i/100ms
               #each    32.608k i/100ms
Calculating -------------------------------------
            For loop    297.769k (± 0.5%) i/s -      1.493M in   5.014745s
               #each    325.596k (± 0.7%) i/s -      1.630M in   5.007685s

Comparison:
               #each:   325595.5 i/s
            For loop:   297769.2 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.462k i/100ms
     each_with_index    19.323k i/100ms
Calculating -------------------------------------
          While Loop    276.536k (± 1.1%) i/s -      1.401M in   5.065231s
     each_with_index    193.492k (± 0.6%) i/s -    985.473k in   5.093277s

Comparison:
          While Loop:   276535.6 i/s
     each_with_index:   193492.1 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    92.713k i/100ms
      inject to_proc     2.211k i/100ms
        inject block     2.160k i/100ms
Calculating -------------------------------------
       inject symbol    929.506k (± 1.3%) i/s -      4.728M in   5.087721s
      inject to_proc     21.960k (± 0.8%) i/s -    110.550k in   5.034411s
        inject block     21.715k (± 0.7%) i/s -    110.160k in   5.073259s

Comparison:
       inject symbol:   929506.0 i/s
      inject to_proc:    21960.5 i/s - 42.33x  (± 0.00) slower
        inject block:    21714.8 i/s - 42.81x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.810k i/100ms
   Array#map.flatten     4.015k i/100ms
      Array#flat_map     9.737k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     69.544k (± 1.3%) i/s -    354.120k in   5.092899s
   Array#map.flatten     39.786k (± 0.8%) i/s -    200.750k in   5.046059s
      Array#flat_map     97.215k (± 0.2%) i/s -    486.850k in   5.008015s

Comparison:
      Array#flat_map:    97214.6 i/s
Array#map.flatten(1):    69544.0 i/s - 1.40x  (± 0.00) slower
   Array#map.flatten:    39785.8 i/s - 2.44x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    31.412k i/100ms
  Array#reverse_each    32.592k i/100ms
Calculating -------------------------------------
  Array#reverse.each    314.389k (± 0.4%) i/s -      1.602M in   5.095727s
  Array#reverse_each    325.756k (± 0.3%) i/s -      1.630M in   5.002556s

Comparison:
  Array#reverse_each:   325755.6 i/s
  Array#reverse.each:   314389.3 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        21.020k i/100ms
   Enumerable#detect    82.314k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        209.714k (± 0.7%) i/s -      4.204M in  20.047257s
   Enumerable#detect    825.921k (± 0.6%) i/s -     16.545M in  20.033117s

Comparison:
   Enumerable#detect:   825921.3 i/s
Enumerable#select.first:   209714.4 i/s - 3.94x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       248.476k i/100ms
Enumerable#select.last
                        19.243k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.433M (± 0.6%) i/s -     12.175M in   5.004843s
Enumerable#select.last
                        190.821k (± 0.7%) i/s -    962.150k in   5.042417s

Comparison:
Enumerable#reverse.detect:  2432793.7 i/s
Enumerable#select.last:   190820.6 i/s - 12.75x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         5.006k i/100ms
  Enumerable#sort_by     4.233k i/100ms
     Enumerable#sort     2.424k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         49.773k (± 5.1%) i/s -    250.300k in   5.043338s
  Enumerable#sort_by     47.584k (± 5.3%) i/s -    241.281k in   5.085878s
     Enumerable#sort     24.226k (± 0.7%) i/s -    121.200k in   5.003239s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    49772.7 i/s
  Enumerable#sort_by:    47583.5 i/s - same-ish: difference falls within error
     Enumerable#sort:    24225.6 i/s - 2.05x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.796k i/100ms
Enumerable#sort_by...first
                         8.846k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    177.805k (± 0.4%) i/s -    889.800k in   5.004456s
Enumerable#sort_by...first
                         88.080k (± 0.7%) i/s -    442.300k in   5.021786s

Comparison:
   Enumerable#min_by:   177804.6 i/s
Enumerable#sort_by...first:    88080.3 i/s - 2.02x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   425.999k i/100ms
            Hash#dup   300.442k i/100ms
Calculating -------------------------------------
              Hash[]      4.071M (± 3.2%) i/s -     20.448M in   5.028661s
            Hash#dup      3.134M (± 2.3%) i/s -     15.923M in   5.084329s

Comparison:
              Hash[]:  4070840.1 i/s
            Hash#dup:  3133550.6 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.416M i/100ms
  Hash#fetch, symbol     1.185M i/100ms
     Hash#[], string     1.249M i/100ms
  Hash#fetch, string   805.446k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.151M (± 0.3%) i/s -     70.784M in   5.002257s
  Hash#fetch, symbol     11.796M (± 0.2%) i/s -     59.268M in   5.024297s
     Hash#[], string     12.470M (± 0.3%) i/s -     62.464M in   5.009179s
  Hash#fetch, string      8.073M (± 0.2%) i/s -     41.078M in   5.088161s

Comparison:
     Hash#[], symbol: 14150668.8 i/s
     Hash#[], string: 12470016.3 i/s - 1.13x  (± 0.00) slower
  Hash#fetch, symbol: 11796380.3 i/s - 1.20x  (± 0.00) slower
  Hash#fetch, string:  8073219.5 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   850.621k i/100ms
             Hash#[]     1.017M i/100ms
          Hash#[] ||   926.417k i/100ms
          Hash#[] &&   394.474k i/100ms
          Hash#fetch   602.839k i/100ms
 Hash#fetch fallback   391.508k i/100ms
Calculating -------------------------------------
            Hash#dig      8.596M (± 0.6%) i/s -     43.382M in   5.047201s
             Hash#[]     10.424M (± 1.1%) i/s -     52.881M in   5.073748s
          Hash#[] ||      9.355M (± 1.6%) i/s -     47.247M in   5.052013s
          Hash#[] &&      3.973M (± 0.7%) i/s -     20.118M in   5.064500s
          Hash#fetch      6.254M (± 0.5%) i/s -     31.348M in   5.012588s
 Hash#fetch fallback      3.903M (± 0.8%) i/s -     19.575M in   5.015328s

Comparison:
             Hash#[]: 10423927.2 i/s
          Hash#[] ||:  9354728.1 i/s - 1.11x  (± 0.00) slower
            Hash#dig:  8595517.0 i/s - 1.21x  (± 0.00) slower
          Hash#fetch:  6253939.7 i/s - 1.67x  (± 0.00) slower
          Hash#[] &&:  3972601.8 i/s - 2.62x  (± 0.00) slower
 Hash#fetch fallback:  3903354.1 i/s - 2.67x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.465M i/100ms
  Hash#fetch + block     1.454M i/100ms
    Hash#fetch + arg     1.099M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.618M (± 0.6%) i/s -     73.257M in   5.011477s
  Hash#fetch + block     14.540M (± 0.7%) i/s -     74.144M in   5.099594s
    Hash#fetch + arg     11.037M (± 1.2%) i/s -     56.033M in   5.077606s

Comparison:
  Hash#fetch + const: 14618369.9 i/s
  Hash#fetch + block: 14539778.4 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 11036925.6 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.590k i/100ms
         sort + to_h    11.039k i/100ms
Calculating -------------------------------------
      sort_by + to_h    274.124k (± 1.1%) i/s -      1.380M in   5.033091s
         sort + to_h    110.988k (± 0.5%) i/s -    562.989k in   5.072655s

Comparison:
      sort_by + to_h:   274123.5 i/s
         sort + to_h:   110987.7 i/s - 2.47x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   187.630k i/100ms
       Hash#each_key   199.889k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.834M (± 0.4%) i/s -      9.194M in   5.013953s
       Hash#each_key      2.013M (± 0.5%) i/s -     10.194M in   5.064198s

Comparison:
       Hash#each_key:  2013076.4 i/s
      Hash#keys.each:  1833687.8 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.237k i/100ms
           Hash#key?     1.012M i/100ms
Calculating -------------------------------------
  Hash#keys.include?     12.269k (± 3.8%) i/s -     61.850k in   5.049395s
           Hash#key?     10.120M (± 0.2%) i/s -     51.588M in   5.097360s

Comparison:
           Hash#key?: 10120492.5 i/s
  Hash#keys.include?:    12269.1 i/s - 824.88x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.049k i/100ms
            Hash#[]=    10.393k i/100ms
Calculating -------------------------------------
         Hash#merge!     39.760k (± 0.5%) i/s -    202.450k in   5.091945s
            Hash#[]=    103.053k (± 0.6%) i/s -    519.650k in   5.042771s

Comparison:
            Hash#[]=:   103052.6 i/s
         Hash#merge!:    39759.9 i/s - 2.59x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.792k i/100ms
      Hash#merge({})     3.973k i/100ms
 Hash#dup#merge!({})     2.875k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         47.229k (± 1.1%) i/s -    239.600k in   5.073853s
      Hash#merge({})     39.395k (± 0.5%) i/s -    198.650k in   5.042693s
 Hash#dup#merge!({})     28.625k (± 0.6%) i/s -    143.750k in   5.022000s

Comparison:
{}#merge!(Hash) do end:    47229.0 i/s
      Hash#merge({}):    39394.5 i/s - 1.20x  (± 0.00) slower
 Hash#dup#merge!({}):    28625.0 i/s - 1.65x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   385.529k i/100ms
          Hash#merge   360.273k i/100ms
Calculating -------------------------------------
        Hash#**other      3.883M (± 0.6%) i/s -     19.662M in   5.063721s
          Hash#merge      3.608M (± 0.4%) i/s -     18.374M in   5.092270s

Comparison:
        Hash#**other:  3883075.1 i/s
          Hash#merge:  3608253.9 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.658k i/100ms
         Hash#merge!     3.970k i/100ms
Calculating -------------------------------------
          Hash#merge     16.612k (± 1.2%) i/s -     84.558k in   5.090866s
         Hash#merge!     39.598k (± 0.6%) i/s -    198.500k in   5.013062s

Comparison:
         Hash#merge!:    39598.0 i/s
          Hash#merge:    16612.0 i/s - 2.38x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      417.007k i/100ms
Array#each             229.187k i/100ms
Array#each_w/_object   176.694k i/100ms
Hash#select-include     72.892k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.159M (± 0.8%) i/s -     20.850M in   5.013930s
Array#each                2.259M (± 1.3%) i/s -     11.459M in   5.074206s
Array#each_w/_object      1.745M (± 0.2%) i/s -      8.835M in   5.062356s
Hash#select-include     723.550k (± 0.9%) i/s -      3.645M in   5.037527s

Comparison:
Hash#native-slice   :  4158726.9 i/s
Array#each          :  2258752.4 i/s - 1.84x  (± 0.00) slower
Array#each_w/_object:  1745181.0 i/s - 2.38x  (± 0.00) slower
Hash#select-include :   723550.3 i/s - 5.75x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.099k i/100ms
         Hash#value?   852.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     10.940k (± 3.3%) i/s -     54.950k in   5.029571s
         Hash#value?      8.548k (± 0.4%) i/s -     43.452k in   5.083579s

Comparison:
Hash#values.include?:    10939.5 i/s
         Hash#value?:     8547.7 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
                call   665.305k i/100ms
                send   528.802k i/100ms
      method_missing   386.646k i/100ms
Calculating -------------------------------------
                call      6.712M (± 0.3%) i/s -     33.931M in   5.055165s
                send      5.283M (± 0.4%) i/s -     26.440M in   5.004991s
      method_missing      3.877M (± 0.2%) i/s -     19.719M in   5.086020s

Comparison:
                call:  6712137.9 i/s
                send:  5282829.6 i/s - 1.27x  (± 0.00) slower
      method_missing:  3877104.2 i/s - 1.73x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
               Block     9.185k i/100ms
      Symbol#to_proc    10.395k i/100ms
Calculating -------------------------------------
               Block     91.733k (± 0.5%) i/s -    459.250k in   5.006519s
      Symbol#to_proc    103.874k (± 0.4%) i/s -    519.750k in   5.003742s

Comparison:
      Symbol#to_proc:   103874.1 i/s
               Block:    91732.8 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          block.call   943.748k i/100ms
       block + yield     1.001M i/100ms
        unused block     1.291M i/100ms
               yield     1.179M i/100ms
Calculating -------------------------------------
          block.call      9.464M (± 0.3%) i/s -     48.131M in   5.085615s
       block + yield     10.035M (± 0.4%) i/s -     51.054M in   5.087858s
        unused block     13.081M (± 0.4%) i/s -     65.862M in   5.035091s
               yield     11.796M (± 0.3%) i/s -     60.124M in   5.097141s

Comparison:
        unused block: 13080862.5 i/s
               yield: 11795814.1 i/s - 1.11x  (± 0.00) slower
       block + yield: 10034594.6 i/s - 1.30x  (± 0.00) slower
          block.call:  9464243.6 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   314.076k i/100ms
      range#include?    12.450k i/100ms
       range#member?    12.474k i/100ms
       plain compare   532.081k i/100ms
Calculating -------------------------------------
        range#cover?      3.158M (± 0.5%) i/s -     16.018M in   5.071831s
      range#include?    127.046k (± 0.5%) i/s -    647.400k in   5.095900s
       range#member?    127.017k (± 0.3%) i/s -    636.174k in   5.008619s
       plain compare      5.323M (± 0.3%) i/s -     27.136M in   5.097563s

Comparison:
       plain compare:  5323415.3 i/s
        range#cover?:  3158272.4 i/s - 1.69x  (± 0.00) slower
      range#include?:   127046.0 i/s - 41.90x  (± 0.00) slower
       range#member?:   127016.8 i/s - 41.91x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
       String#match?   915.367k i/100ms
           String#=~   635.514k i/100ms
          Regexp#===   597.235k i/100ms
        String#match   479.563k i/100ms
Calculating -------------------------------------
       String#match?      9.146M (± 0.4%) i/s -     45.768M in   5.004374s
           String#=~      6.309M (± 0.3%) i/s -     31.776M in   5.036371s
          Regexp#===      6.042M (± 0.5%) i/s -     30.459M in   5.041301s
        String#match      4.816M (± 0.5%) i/s -     24.458M in   5.078028s

Comparison:
       String#match?:  9145817.0 i/s
           String#=~:  6309304.9 i/s - 1.45x  (± 0.00) slower
          Regexp#===:  6042014.2 i/s - 1.51x  (± 0.00) slower
        String#match:  4816483.7 i/s - 1.90x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   659.564k i/100ms
      String#casecmp   813.994k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.537M (± 1.7%) i/s -     32.978M in   5.046390s
      String#casecmp      8.122M (± 0.6%) i/s -     40.700M in   5.011500s

Comparison:
      String#casecmp:  8121547.6 i/s
String#downcase + ==:  6537032.2 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
            String#+   588.471k i/100ms
       String#concat   620.427k i/100ms
       String#append   655.692k i/100ms
         "foo" "bar"     1.175M i/100ms
  "#{'foo'}#{'bar'}"     1.171M i/100ms
Calculating -------------------------------------
            String#+      5.871M (± 0.4%) i/s -     29.424M in   5.011912s
       String#concat      6.189M (± 0.3%) i/s -     31.021M in   5.012252s
       String#append      6.688M (± 0.5%) i/s -     33.440M in   5.000182s
         "foo" "bar"     11.705M (± 0.4%) i/s -     58.746M in   5.018849s
  "#{'foo'}#{'bar'}"     11.729M (± 0.3%) i/s -     59.735M in   5.092956s

Comparison:
  "#{'foo'}#{'bar'}": 11729132.8 i/s
         "foo" "bar": 11705296.1 i/s - same-ish: difference falls within error
       String#append:  6687980.9 i/s - 1.75x  (± 0.00) slower
       String#concat:  6189177.7 i/s - 1.90x  (± 0.00) slower
            String#+:  5870797.0 i/s - 2.00x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#+@     1.003M i/100ms
          String#dup   586.038k i/100ms
Calculating -------------------------------------
           String#+@     10.043M (± 0.3%) i/s -     51.158M in   5.094167s
          String#dup      5.881M (± 0.4%) i/s -     29.888M in   5.082259s

Comparison:
           String#+@: 10042585.3 i/s
          String#dup:  5880948.1 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   187.854k i/100ms
       String#match?   429.786k i/100ms
    String#end_with?   618.955k i/100ms
Calculating -------------------------------------
           String#=~      1.886M (± 0.3%) i/s -      9.581M in   5.080583s
       String#match?      4.307M (± 0.5%) i/s -     21.919M in   5.088843s
    String#end_with?      6.225M (± 0.2%) i/s -     31.567M in   5.071322s

Comparison:
    String#end_with?:  6224581.8 i/s
       String#match?:  4307383.0 i/s - 1.45x  (± 0.00) slower
           String#=~:  1885736.8 i/s - 3.30x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   114.873k i/100ms
          String#sub   137.276k i/100ms
String#dup["string"]=
                       181.366k i/100ms
Calculating -------------------------------------
         String#gsub      1.157M (± 0.4%) i/s -      5.859M in   5.064346s
          String#sub      1.422M (± 0.2%) i/s -      7.138M in   5.020864s
String#dup["string"]=
                          1.815M (± 0.2%) i/s -      9.250M in   5.095359s

Comparison:
String#dup["string"]=:  1815322.8 i/s
          String#sub:  1421745.9 i/s - 1.28x  (± 0.00) slower
         String#gsub:  1156832.0 i/s - 1.57x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   105.910k i/100ms
           String#tr   346.980k i/100ms
Calculating -------------------------------------
         String#gsub      1.053M (± 0.7%) i/s -      5.296M in   5.030848s
           String#tr      3.468M (± 0.4%) i/s -     17.349M in   5.003151s

Comparison:
           String#tr:  3467667.2 i/s
         String#gsub:  1052661.7 i/s - 3.29x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.174M i/100ms
         With Freeze     1.637M i/100ms
Calculating -------------------------------------
      Without Freeze     11.778M (± 0.3%) i/s -     59.875M in   5.083606s
         With Freeze     16.387M (± 0.3%) i/s -     83.504M in   5.095802s

Comparison:
         With Freeze: 16386957.4 i/s
      Without Freeze: 11778257.5 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.434k i/100ms
      String#squeeze   158.004k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     34.434k (± 0.6%) i/s -    175.134k in   5.086276s
      String#squeeze      1.567M (± 0.9%) i/s -      7.900M in   5.041908s

Comparison:
      String#squeeze:  1567048.5 i/s
 String#gsub/regex+/:    34433.8 i/s - 45.51x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
           String#=~   283.131k i/100ms
       String#match?   759.514k i/100ms
  String#start_with?   859.391k i/100ms
Calculating -------------------------------------
           String#=~      2.844M (± 0.4%) i/s -     14.440M in   5.077326s
       String#match?      7.586M (± 0.8%) i/s -     37.976M in   5.006533s
  String#start_with?      8.567M (± 0.6%) i/s -     42.970M in   5.015603s

Comparison:
  String#start_with?:  8567495.8 i/s
       String#match?:  7585759.9 i/s - 1.13x  (± 0.00) slower
           String#=~:  2844000.7 i/s - 3.01x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   187.900k i/100ms
    String#[0, n] ==    82.302k i/100ms
   String#[RANGE] ==    76.790k i/100ms
   String#[0...n] ==    47.552k i/100ms
Calculating -------------------------------------
  String#start_with?      1.955M (± 0.2%) i/s -      9.959M in   5.094538s
    String#[0, n] ==    822.694k (± 1.0%) i/s -      4.115M in   5.002467s
   String#[RANGE] ==    765.662k (± 0.8%) i/s -      3.840M in   5.014903s
   String#[0...n] ==    477.956k (± 0.9%) i/s -      2.425M in   5.074451s

Comparison:
  String#start_with?:  1954791.2 i/s
    String#[0, n] ==:   822694.5 i/s - 2.38x  (± 0.00) slower
   String#[RANGE] ==:   765662.0 i/s - 2.55x  (± 0.00) slower
   String#[0...n] ==:   477955.7 i/s - 4.09x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   178.429k i/100ms
 String#sub!'string'   127.339k i/100ms
String#gsub!'string'    78.320k i/100ms
  String#[/regexp/]=   152.981k i/100ms
 String#sub!/regexp/   114.303k i/100ms
String#gsub!/regexp/    60.434k i/100ms
Calculating -------------------------------------
  String#['string']=      1.810M (± 0.5%) i/s -      9.100M in   5.028794s
 String#sub!'string'      1.229M (± 0.8%) i/s -      6.240M in   5.075392s
String#gsub!'string'    766.532k (± 1.4%) i/s -      3.838M in   5.007581s
  String#[/regexp/]=      1.532M (± 0.8%) i/s -      7.802M in   5.093664s
 String#sub!/regexp/      1.140M (± 2.6%) i/s -      5.715M in   5.016373s
String#gsub!/regexp/    610.931k (± 0.7%) i/s -      3.082M in   5.045240s

Comparison:
  String#['string']=:  1809604.1 i/s
  String#[/regexp/]=:  1531805.5 i/s - 1.18x  (± 0.00) slower
 String#sub!'string':  1229464.2 i/s - 1.47x  (± 0.00) slower
 String#sub!/regexp/:  1140200.1 i/s - 1.59x  (± 0.00) slower
String#gsub!'string':   766532.0 i/s - 2.36x  (± 0.00) slower
String#gsub!/regexp/:   610930.7 i/s - 2.96x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
          String#sub   142.589k i/100ms
        String#chomp   559.400k i/100ms
String#delete_suffix   616.057k i/100ms
Calculating -------------------------------------
          String#sub      1.434M (± 0.5%) i/s -      7.272M in   5.072538s
        String#chomp      5.603M (± 0.3%) i/s -     28.529M in   5.091766s
String#delete_suffix      6.153M (± 0.5%) i/s -     30.803M in   5.006177s

Comparison:
String#delete_suffix:  6153146.0 i/s
        String#chomp:  5603107.2 i/s - 1.10x  (± 0.00) slower
          String#sub:  1433643.0 i/s - 4.29x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   628.871k i/100ms
          String#sub   148.213k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.270M (± 0.4%) i/s -     31.444M in   5.015335s
          String#sub      1.487M (± 0.3%) i/s -      7.559M in   5.084279s

Comparison:
String#delete_prefix:  6269573.8 i/s
          String#sub:  1486731.1 i/s - 4.22x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   634.458k i/100ms
    String#unpack[0]   476.819k i/100ms
Calculating -------------------------------------
      String#unpack1      6.315M (± 0.3%) i/s -     31.723M in   5.023586s
    String#unpack[0]      4.766M (± 0.4%) i/s -     23.841M in   5.001955s

Comparison:
      String#unpack1:  6314865.5 i/s
    String#unpack[0]:  4766404.7 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.6p260 (2024-05-29 revision a777087be6) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.597k i/100ms
          Time.parse     9.375k i/100ms
Calculating -------------------------------------
        Time.iso8601    274.906k (± 0.3%) i/s -      1.380M in   5.019382s
          Time.parse     93.957k (± 0.3%) i/s -    478.125k in   5.088805s

Comparison:
        Time.iso8601:   274906.1 i/s
          Time.parse:    93957.0 i/s - 2.93x  (± 0.00) slower

