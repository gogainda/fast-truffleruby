$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       238.700M i/100ms
Function with splat arguments
                       650.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          2.386B (± 0.3%) i/s -     11.935B in   5.002616s
Function with splat arguments
                          6.898k (± 4.8%) i/s -     34.450k in   5.005946s

Comparison:
Function with single Array argument: 2385777475.8 i/s
Function with splat arguments:     6898.4 i/s - 345844.39x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   238.357M i/100ms
Sequential Assignment
                       238.650M i/100ms
Calculating -------------------------------------
 Parallel Assignment      2.386B (± 0.3%) i/s -     12.156B in   5.094687s
Sequential Assignment
                          2.384B (± 0.5%) i/s -     11.933B in   5.005515s

Comparison:
 Parallel Assignment: 2386075704.5 i/s
Sequential Assignment: 2383947975.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   238.597M i/100ms
       attr_accessor   238.450M i/100ms
Calculating -------------------------------------
   getter_and_setter      2.385B (± 0.4%) i/s -     11.930B in   5.001672s
       attr_accessor      2.387B (± 0.3%) i/s -     12.161B in   5.093829s

Comparison:
       attr_accessor: 2387403986.9 i/s
   getter_and_setter: 2385203546.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     8.551k i/100ms
         respond_to?   238.672M i/100ms
Calculating -------------------------------------
      begin...rescue     56.462k (± 2.7%) i/s -    282.183k in   5.001355s
         respond_to?      2.387B (± 0.3%) i/s -     12.172B in   5.098626s

Comparison:
         respond_to?: 2387384927.9 i/s
      begin...rescue:    56461.6 i/s - 42283.33x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   238.673M i/100ms
             &method   238.725M i/100ms
Calculating -------------------------------------
              normal      2.386B (± 0.3%) i/s -     11.934B in   5.001205s
             &method      2.387B (± 0.3%) i/s -     11.936B in   5.001065s

Comparison:
             &method: 2386761905.3 i/s
              normal: 2386180222.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       106.000  i/100ms
       define_method   137.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.696k (±49.0%) i/s -      5.406k in   5.053681s
       define_method      3.409k (±59.0%) i/s -      6.165k in   6.111999s

Comparison:
       define_method:     3408.9 i/s
module_eval with string:     1696.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    73.060k i/100ms
       Kernel#format    65.757k i/100ms
            String#%    67.534k i/100ms
Calculating -------------------------------------
         Float#round    777.518k (± 2.6%) i/s -      3.945M in   5.077550s
       Kernel#format    666.574k (± 2.1%) i/s -      3.354M in   5.033436s
            String#%    671.491k (± 2.1%) i/s -      3.377M in   5.031049s

Comparison:
         Float#round:   777518.4 i/s
            String#%:   671490.5 i/s - 1.16x  (± 0.00) slower
       Kernel#format:   666573.6 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   238.262M i/100ms
          OpenStruct   238.434M i/100ms
Calculating -------------------------------------
                Hash      2.386B (± 0.3%) i/s -     12.151B in   5.093569s
          OpenStruct      2.388B (± 0.2%) i/s -     12.160B in   5.092927s

Comparison:
          OpenStruct: 2387664384.8 i/s
                Hash: 2385651005.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   238.591M i/100ms
          OpenStruct     2.590k i/100ms
Calculating -------------------------------------
                Hash      2.381B (± 0.4%) i/s -     11.930B in   5.010138s
          OpenStruct     28.473k (±12.8%) i/s -    142.450k in   5.148065s

Comparison:
                Hash: 2381126226.4 i/s
          OpenStruct:    28472.9 i/s - 83627.68x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   784.844k i/100ms
  ancestors.include?   146.828k i/100ms
Calculating -------------------------------------
  less than or equal      8.547M (± 4.0%) i/s -     43.166M in   5.058848s
  ancestors.include?      1.492M (± 4.7%) i/s -      7.488M in   5.028833s

Comparison:
  less than or equal:  8547496.1 i/s
  ancestors.include?:  1492459.3 i/s - 5.73x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     23.868  (± 0.0%) i/s -    120.000  in   5.027838s
         Kernel loop     23.880  (± 0.0%) i/s -    120.000  in   5.025293s

Comparison:
         Kernel loop:       23.9 i/s
          While Loop:       23.9 i/s - 1.00x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   238.332M i/100ms
         Array#first   238.266M i/100ms
Calculating -------------------------------------
           Array#[0]      2.385B (± 0.4%) i/s -     12.155B in   5.095961s
         Array#first      2.387B (± 0.2%) i/s -     12.152B in   5.089958s

Comparison:
         Array#first: 2387373886.8 i/s
           Array#[0]: 2385237764.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   238.369M i/100ms
          Array#last   238.398M i/100ms
Calculating -------------------------------------
          Array#[-1]      2.385B (± 0.4%) i/s -     12.157B in   5.097857s
          Array#last      2.388B (± 0.3%) i/s -     12.158B in   5.092098s

Comparison:
          Array#last: 2387695577.3 i/s
          Array#[-1]: 2384731220.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   530.071k i/100ms
Calculating -------------------------------------
                find      7.170  (±27.9%) i/s -     17.000  in   5.075387s
             bsearch      5.319M (± 2.5%) i/s -     27.034M in   5.085363s

Comparison:
             bsearch:  5319243.0 i/s
                find:        7.2 i/s - 741862.28x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.126  (± 0.0%) i/s -      1.000  in   7.946526s
        Array#insert      0.943  (± 0.0%) i/s -      5.000  in   5.300289s

Comparison:
        Array#insert:        0.9 i/s
       Array#unshift:        0.1 i/s - 7.50x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   238.266M i/100ms
          Array#size   238.696M i/100ms
         Array#count   238.983M i/100ms
Calculating -------------------------------------
        Array#length      2.387B (± 0.3%) i/s -     12.152B in   5.091188s
          Array#size      2.387B (± 0.3%) i/s -     12.174B in   5.099604s
         Array#count      2.381B (± 1.3%) i/s -     11.949B in   5.018520s

Comparison:
          Array#size: 2387170344.9 i/s
        Array#length: 2386807678.4 i/s - same-ish: difference falls within error
         Array#count: 2381457656.8 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    23.740k i/100ms
        Array#sample     2.638M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    243.664k (± 1.9%) i/s -      1.234M in   5.068364s
        Array#sample     25.939M (± 0.2%) i/s -    131.877M in   5.084173s

Comparison:
        Array#sample: 25938941.5 i/s
 Array#shuffle.first:   243663.9 i/s - 106.45x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601     1.573k i/100ms
          Date.parse   690.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     25.188k (±28.4%) i/s -    108.537k in   5.008687s
          Date.parse      9.434k (±12.9%) i/s -     46.920k in   5.058110s

Comparison:
        Date.iso8601:    25188.0 i/s
          Date.parse:     9433.8 i/s - 2.67x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   157.848k i/100ms
           Array#map   588.634k i/100ms
Calculating -------------------------------------
   Array#each + push      1.624M (± 3.6%) i/s -      8.208M in   5.061001s
           Array#map      6.021M (± 6.2%) i/s -     30.020M in   5.005448s

Comparison:
           Array#map:  6021164.4 i/s
   Array#each + push:  1623983.2 i/s - 3.71x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    10.585M i/100ms
               #each    56.457M i/100ms
Calculating -------------------------------------
            For loop    106.240M (± 1.0%) i/s -    539.828M in   5.081754s
               #each    568.961M (± 0.2%) i/s -      2.879B in   5.060623s

Comparison:
               #each: 568961333.2 i/s
            For loop: 106239995.6 i/s - 5.36x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   901.493k i/100ms
     each_with_index     1.282M i/100ms
Calculating -------------------------------------
          While Loop      9.074M (± 0.2%) i/s -     45.976M in   5.066960s
     each_with_index     12.797M (± 0.2%) i/s -     64.110M in   5.009926s

Comparison:
     each_with_index: 12796674.0 i/s
          While Loop:  9073758.5 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   145.997k i/100ms
      inject to_proc   147.499k i/100ms
        inject block   147.450k i/100ms
Calculating -------------------------------------
       inject symbol      1.473M (± 0.2%) i/s -      7.446M in   5.053942s
      inject to_proc      1.470M (± 1.0%) i/s -      7.375M in   5.016016s
        inject block      1.474M (± 0.2%) i/s -      7.372M in   5.001727s

Comparison:
        inject block:  1473995.4 i/s
       inject symbol:  1473284.4 i/s - same-ish: difference falls within error
      inject to_proc:  1470427.2 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    11.070k i/100ms
   Array#map.flatten    11.940k i/100ms
      Array#flat_map    31.395k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    118.993k (± 3.5%) i/s -    597.780k in   5.030335s
   Array#map.flatten    120.198k (± 3.6%) i/s -    608.940k in   5.073310s
      Array#flat_map    317.026k (± 2.9%) i/s -      1.601M in   5.054998s

Comparison:
      Array#flat_map:   317026.4 i/s
   Array#map.flatten:   120198.4 i/s - 2.64x  (± 0.00) slower
Array#map.flatten(1):   118992.9 i/s - 2.66x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   174.100k i/100ms
  Array#reverse_each     1.949M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.956M (± 3.3%) i/s -      9.924M in   5.079855s
  Array#reverse_each     19.491M (± 0.2%) i/s -     97.472M in   5.000953s

Comparison:
  Array#reverse_each: 19490669.1 i/s
  Array#reverse.each:  1955767.5 i/s - 9.97x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       595.102k i/100ms
   Enumerable#detect     3.801M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          6.808M (± 6.4%) i/s -    135.683M in  20.032002s
   Enumerable#detect     38.282M (± 0.2%) i/s -    767.766M in  20.055422s

Comparison:
   Enumerable#detect: 38282317.3 i/s
Enumerable#select.first:  6808040.9 i/s - 5.62x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       197.698k i/100ms
Enumerable#select.last
                       397.631k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.029M (± 3.2%) i/s -     10.280M in   5.071907s
Enumerable#select.last
                          4.039M (± 3.5%) i/s -     20.279M in   5.027938s

Comparison:
Enumerable#select.last:  4038564.2 i/s
Enumerable#reverse.detect:  2029084.8 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.356k i/100ms
  Enumerable#sort_by     1.212k i/100ms
     Enumerable#sort     3.103k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         23.278k (±11.8%) i/s -    115.444k in   5.033914s
  Enumerable#sort_by     21.414k (±16.8%) i/s -    104.232k in   5.009764s
     Enumerable#sort     33.215k (± 0.5%) i/s -    167.562k in   5.044945s

Comparison:
     Enumerable#sort:    33214.7 i/s
Enumerable#sort_by (Symbol#to_proc):    23278.5 i/s - 1.43x  (± 0.00) slower
  Enumerable#sort_by:    21414.1 i/s - 1.55x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   460.965k i/100ms
Enumerable#sort_by...first
                         5.097k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      4.644M (± 0.3%) i/s -     23.509M in   5.062091s
Enumerable#sort_by...first
                         59.300k (± 2.8%) i/s -    300.723k in   5.075421s

Comparison:
   Enumerable#min_by:  4644221.3 i/s
Enumerable#sort_by...first:    59300.5 i/s - 78.32x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   211.722k i/100ms
            Hash#dup   233.077k i/100ms
Calculating -------------------------------------
              Hash[]      2.323M (± 4.4%) i/s -     11.645M in   5.022581s
            Hash#dup      2.352M (± 3.8%) i/s -     11.887M in   5.062490s

Comparison:
            Hash#dup:  2351627.6 i/s
              Hash[]:  2323265.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   237.984M i/100ms
  Hash#fetch, symbol   238.723M i/100ms
     Hash#[], string     2.826M i/100ms
  Hash#fetch, string     2.891M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      2.388B (± 0.2%) i/s -     12.137B in   5.082059s
  Hash#fetch, symbol      2.389B (± 0.1%) i/s -     12.175B in   5.096349s
     Hash#[], string    154.441M (± 0.5%) i/s -    774.238M in   5.013307s
  Hash#fetch, string    141.921M (± 0.7%) i/s -    711.080M in   5.010637s

Comparison:
  Hash#fetch, symbol: 2388942434.9 i/s
     Hash#[], symbol: 2388250950.3 i/s - same-ish: difference falls within error
     Hash#[], string: 154440835.3 i/s - 15.47x  (± 0.00) slower
  Hash#fetch, string: 141921070.0 i/s - 16.83x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    59.670M i/100ms
             Hash#[]    59.699M i/100ms
          Hash#[] ||    59.770M i/100ms
          Hash#[] &&    59.756M i/100ms
          Hash#fetch    59.766M i/100ms
 Hash#fetch fallback    59.738M i/100ms
Calculating -------------------------------------
            Hash#dig    596.771M (± 0.3%) i/s -      2.984B in   4.999447s
             Hash#[]    597.186M (± 0.2%) i/s -      3.045B in   5.098370s
          Hash#[] ||    597.364M (± 0.1%) i/s -      2.989B in   5.002837s
          Hash#[] &&    596.925M (± 0.3%) i/s -      2.988B in   5.005383s
          Hash#fetch    597.335M (± 0.1%) i/s -      2.988B in   5.002746s
 Hash#fetch fallback    597.187M (± 0.2%) i/s -      2.987B in   5.001671s

Comparison:
          Hash#[] ||: 597364139.0 i/s
          Hash#fetch: 597335470.8 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 597187370.9 i/s - same-ish: difference falls within error
             Hash#[]: 597185522.2 i/s - same-ish: difference falls within error
          Hash#[] &&: 596924696.4 i/s - same-ish: difference falls within error
            Hash#dig: 596771295.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   238.305M i/100ms
  Hash#fetch + block   238.625M i/100ms
    Hash#fetch + arg   239.029M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      2.386B (± 0.4%) i/s -     12.154B in   5.093917s
  Hash#fetch + block      2.388B (± 0.2%) i/s -     12.170B in   5.095861s
    Hash#fetch + arg      2.388B (± 0.2%) i/s -     11.951B in   5.003874s

Comparison:
    Hash#fetch + arg: 2388441873.5 i/s
  Hash#fetch + block: 2388202033.9 i/s - same-ish: difference falls within error
  Hash#fetch + const: 2385923022.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    17.471k i/100ms
         sort + to_h    10.511k i/100ms
Calculating -------------------------------------
      sort_by + to_h    225.615k (±13.6%) i/s -      1.118M in   5.058241s
         sort + to_h    138.890k (± 5.9%) i/s -    693.726k in   5.014013s

Comparison:
      sort_by + to_h:   225614.9 i/s
         sort + to_h:   138890.5 i/s - 1.62x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   147.608k i/100ms
       Hash#each_key   161.694k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.528M (±10.7%) i/s -      7.528M in   5.051536s
       Hash#each_key      1.620M (± 2.9%) i/s -      8.246M in   5.093839s

Comparison:
       Hash#each_key:  1620372.0 i/s
      Hash#keys.each:  1527775.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   170.000  i/100ms
           Hash#key?     2.562M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      2.033k (±14.0%) i/s -      9.860k in   5.007142s
           Hash#key?     25.588M (± 0.4%) i/s -    128.090M in   5.005952s

Comparison:
           Hash#key?: 25587992.6 i/s
  Hash#keys.include?:     2033.1 i/s - 12585.43x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    21.019k i/100ms
            Hash#[]=    24.871k i/100ms
Calculating -------------------------------------
         Hash#merge!    241.959k (±11.2%) i/s -      1.198M in   5.071691s
            Hash#[]=    252.295k (± 3.8%) i/s -      1.268M in   5.035233s

Comparison:
            Hash#[]=:   252294.6 i/s
         Hash#merge!:   241958.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        10.841k i/100ms
      Hash#merge({})     8.430k i/100ms
 Hash#dup#merge!({})    14.062k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        130.919k (± 5.2%) i/s -    661.301k in   5.066232s
      Hash#merge({})     86.706k (± 3.6%) i/s -    438.360k in   5.062846s
 Hash#dup#merge!({})    142.611k (± 2.1%) i/s -    717.162k in   5.031101s

Comparison:
 Hash#dup#merge!({}):   142610.9 i/s
{}#merge!(Hash) do end:   130918.8 i/s - 1.09x  (± 0.00) slower
      Hash#merge({}):    86705.5 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   238.364M i/100ms
          Hash#merge   238.971M i/100ms
Calculating -------------------------------------
        Hash#**other      2.386B (± 0.4%) i/s -     12.157B in   5.095573s
          Hash#merge      2.388B (± 0.2%) i/s -     11.949B in   5.002835s

Comparison:
          Hash#merge: 2388367555.6 i/s
        Hash#**other: 2385738430.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   307.000  i/100ms
         Hash#merge!    24.994k i/100ms
Calculating -------------------------------------
          Hash#merge      3.526k (± 4.5%) i/s -     17.806k in   5.061328s
         Hash#merge!    252.043k (± 3.7%) i/s -      1.275M in   5.064869s

Comparison:
         Hash#merge!:   252043.3 i/s
          Hash#merge:     3525.7 i/s - 71.49x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.117M i/100ms
Array#each               1.017M i/100ms
Array#each_w/_object     1.022M i/100ms
Hash#select-include      1.417M i/100ms
Calculating -------------------------------------
Hash#native-slice        12.630M (± 3.7%) i/s -     63.682M in   5.049275s
Array#each               10.207M (± 2.4%) i/s -     51.846M in   5.082724s
Array#each_w/_object     10.319M (± 2.7%) i/s -     52.132M in   5.055779s
Hash#select-include      14.246M (± 3.3%) i/s -     72.269M in   5.078706s

Comparison:
Hash#select-include : 14246384.0 i/s
Hash#native-slice   : 12630142.5 i/s - 1.13x  (± 0.00) slower
Array#each_w/_object: 10319243.2 i/s - 1.38x  (± 0.00) slower
Array#each          : 10207068.8 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   181.000  i/100ms
         Hash#value?   375.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.850k (± 7.3%) i/s -      9.231k in   5.022851s
         Hash#value?      3.747k (± 0.3%) i/s -     18.750k in   5.003716s

Comparison:
         Hash#value?:     3747.2 i/s
Hash#values.include?:     1849.6 i/s - 2.03x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   238.479M i/100ms
                send   238.485M i/100ms
      method_missing   239.031M i/100ms
Calculating -------------------------------------
                call      2.380B (± 1.2%) i/s -     11.924B in   5.011657s
                send      2.386B (± 0.3%) i/s -     12.163B in   5.097538s
      method_missing      2.388B (± 0.2%) i/s -     11.952B in   5.004072s

Comparison:
      method_missing: 2388371080.5 i/s
                send: 2386029078.4 i/s - same-ish: difference falls within error
                call: 2379614636.6 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    14.749k i/100ms
      Symbol#to_proc    16.098k i/100ms
Calculating -------------------------------------
               Block    161.814k (± 4.0%) i/s -    811.195k in   5.021516s
      Symbol#to_proc    162.173k (± 3.5%) i/s -    820.998k in   5.068984s

Comparison:
      Symbol#to_proc:   162172.8 i/s
               Block:   161813.9 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   237.499M i/100ms
       block + yield   238.402M i/100ms
        unused block   238.851M i/100ms
               yield   238.890M i/100ms
Calculating -------------------------------------
          block.call      2.387B (± 0.3%) i/s -     12.112B in   5.075127s
       block + yield      2.388B (± 0.2%) i/s -     12.158B in   5.090859s
        unused block      2.387B (± 0.2%) i/s -     11.943B in   5.002217s
               yield      2.387B (± 0.3%) i/s -     11.945B in   5.004083s

Comparison:
       block + yield: 2388311702.3 i/s
        unused block: 2387470959.6 i/s - same-ish: difference falls within error
               yield: 2386977757.0 i/s - same-ish: difference falls within error
          block.call: 2386648765.9 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    15.697k i/100ms
      range#include?   535.000  i/100ms
       range#member?   761.000  i/100ms
       plain compare    31.175k i/100ms
Calculating -------------------------------------
        range#cover?    184.872k (±26.8%) i/s -    847.638k in   5.047303s
      range#include?      6.687k (±21.5%) i/s -     32.100k in   5.073827s
       range#member?      6.431k (±15.0%) i/s -     31.201k in   5.027735s
       plain compare    241.748k (± 4.6%) i/s -      1.216M in   5.039624s

Comparison:
       plain compare:   241748.1 i/s
        range#cover?:   184871.9 i/s - same-ish: difference falls within error
      range#include?:     6687.4 i/s - 36.15x  (± 0.00) slower
       range#member?:     6430.7 i/s - 37.59x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    10.142M i/100ms
           String#=~    11.063M i/100ms
          Regexp#===    11.064M i/100ms
        String#match     6.636M i/100ms
Calculating -------------------------------------
       String#match?    102.885M (± 0.2%) i/s -    517.246M in   5.027426s
           String#=~    110.569M (± 0.2%) i/s -    553.157M in   5.002833s
          Regexp#===    110.493M (± 0.4%) i/s -    553.193M in   5.006701s
        String#match     66.329M (± 0.2%) i/s -    331.820M in   5.002651s

Comparison:
           String#=~: 110568986.2 i/s
          Regexp#===: 110492723.8 i/s - same-ish: difference falls within error
       String#match?: 102885477.5 i/s - 1.07x  (± 0.00) slower
        String#match: 66328945.7 i/s - 1.67x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.583M i/100ms
      String#casecmp     2.714M i/100ms
Calculating -------------------------------------
String#downcase + ==     17.243M (± 4.1%) i/s -     87.084M in   5.059704s
      String#casecmp     27.597M (± 4.0%) i/s -    138.391M in   5.023264s

Comparison:
      String#casecmp: 27597188.2 i/s
String#downcase + ==: 17242649.8 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     6.090M i/100ms
       String#concat     7.871M i/100ms
       String#append     7.866M i/100ms
         "foo" "bar"   238.913M i/100ms
  "#{'foo'}#{'bar'}"   238.992M i/100ms
Calculating -------------------------------------
            String#+     78.810M (± 4.2%) i/s -    395.875M in   5.032752s
       String#concat     78.879M (± 3.7%) i/s -    401.443M in   5.096668s
       String#append     78.937M (± 3.5%) i/s -    401.179M in   5.088962s
         "foo" "bar"      2.388B (± 0.2%) i/s -     11.946B in   5.002843s
  "#{'foo'}#{'bar'}"      2.387B (± 0.3%) i/s -     11.950B in   5.006060s

Comparison:
         "foo" "bar": 2387781799.2 i/s
  "#{'foo'}#{'bar'}": 2387041086.5 i/s - same-ish: difference falls within error
       String#append: 78936797.0 i/s - 30.25x  (± 0.00) slower
       String#concat: 78879381.7 i/s - 30.27x  (± 0.00) slower
            String#+: 78810474.2 i/s - 30.30x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   238.050M i/100ms
          String#dup   238.298M i/100ms
Calculating -------------------------------------
           String#+@      2.383B (± 0.5%) i/s -     12.141B in   5.094145s
          String#dup      2.387B (± 0.3%) i/s -     12.153B in   5.090579s

Comparison:
          String#dup: 2387407586.1 i/s
           String#+@: 2383295932.4 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.109M i/100ms
       String#match?     1.217M i/100ms
    String#end_with?     8.056M i/100ms
Calculating -------------------------------------
           String#=~     11.230M (± 2.4%) i/s -     56.559M in   5.039681s
       String#match?     15.711M (± 0.1%) i/s -     79.083M in   5.033652s
    String#end_with?     80.386M (± 0.3%) i/s -    402.815M in   5.011028s

Comparison:
    String#end_with?: 80386458.1 i/s
       String#match?: 15710953.6 i/s - 5.12x  (± 0.00) slower
           String#=~: 11229799.2 i/s - 7.16x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   241.186k i/100ms
          String#sub   310.254k i/100ms
String#dup["string"]=
                        10.245M i/100ms
Calculating -------------------------------------
         String#gsub      3.559M (± 6.7%) i/s -     17.848M in   5.039577s
          String#sub      4.360M (± 7.1%) i/s -     21.718M in   5.009705s
String#dup["string"]=
                        102.193M (± 0.4%) i/s -    512.267M in   5.012850s

Comparison:
String#dup["string"]=: 102192632.2 i/s
          String#sub:  4359577.6 i/s - 23.44x  (± 0.00) slower
         String#gsub:  3558958.4 i/s - 28.71x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   122.359k i/100ms
           String#tr    93.830k i/100ms
Calculating -------------------------------------
         String#gsub      1.915M (± 6.4%) i/s -      9.544M in   5.006672s
           String#tr    940.563k (± 3.4%) i/s -      4.785M in   5.094020s

Comparison:
         String#gsub:  1914673.0 i/s
           String#tr:   940563.2 i/s - 2.04x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   238.428M i/100ms
         With Freeze   237.957M i/100ms
Calculating -------------------------------------
      Without Freeze      2.386B (± 0.3%) i/s -     12.160B in   5.097107s
         With Freeze      2.386B (± 0.3%) i/s -     12.136B in   5.085930s

Comparison:
         With Freeze: 2386166654.4 i/s
      Without Freeze: 2385658796.0 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     4.624k i/100ms
      String#squeeze    27.847k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     61.147k (± 5.0%) i/s -    309.808k in   5.080060s
      String#squeeze    278.598k (± 2.3%) i/s -      1.392M in   5.000676s

Comparison:
      String#squeeze:   278598.0 i/s
 String#gsub/regex+/:    61146.8 i/s - 4.56x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     2.331M i/100ms
       String#match?     3.669M i/100ms
  String#start_with?    14.907M i/100ms
Calculating -------------------------------------
           String#=~     23.879M (± 2.9%) i/s -    121.204M in   5.080433s
       String#match?     37.178M (± 0.5%) i/s -    187.142M in   5.033844s
  String#start_with?    149.203M (± 0.4%) i/s -    760.282M in   5.095675s

Comparison:
  String#start_with?: 149203497.6 i/s
       String#match?: 37177522.9 i/s - 4.01x  (± 0.00) slower
           String#=~: 23878751.1 i/s - 6.25x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    87.057k i/100ms
    String#[0, n] ==   208.446k i/100ms
   String#[RANGE] ==   295.042k i/100ms
   String#[0...n] ==   168.936k i/100ms
Calculating -------------------------------------
  String#start_with?      4.185M (± 0.2%) i/s -     20.981M in   5.013546s
    String#[0, n] ==      2.122M (± 4.0%) i/s -     10.631M in   5.017750s
   String#[RANGE] ==      2.967M (± 3.0%) i/s -     15.047M in   5.075824s
   String#[0...n] ==      1.701M (± 3.6%) i/s -      8.616M in   5.073139s

Comparison:
  String#start_with?:  4184827.1 i/s
   String#[RANGE] ==:  2967426.3 i/s - 1.41x  (± 0.00) slower
    String#[0, n] ==:  2122212.7 i/s - 1.97x  (± 0.00) slower
   String#[0...n] ==:  1700626.5 i/s - 2.46x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    10.283M i/100ms
 String#sub!'string'   418.173k i/100ms
String#gsub!'string'   422.725k i/100ms
  String#[/regexp/]=     1.185M i/100ms
 String#sub!/regexp/     1.485M i/100ms
String#gsub!/regexp/   416.975k i/100ms
Calculating -------------------------------------
  String#['string']=    102.840M (± 0.1%) i/s -    514.167M in   4.999662s
 String#sub!'string'      5.462M (±13.1%) i/s -     25.509M in   5.007176s
String#gsub!'string'      4.339M (± 5.3%) i/s -     21.982M in   5.081339s
  String#[/regexp/]=     12.263M (± 3.6%) i/s -     61.644M in   5.033465s
 String#sub!/regexp/     15.033M (± 2.3%) i/s -     75.747M in   5.041859s
String#gsub!/regexp/      4.340M (± 4.7%) i/s -     21.683M in   5.008508s

Comparison:
  String#['string']=: 102840428.5 i/s
 String#sub!/regexp/: 15032824.6 i/s - 6.84x  (± 0.00) slower
  String#[/regexp/]=: 12263419.9 i/s - 8.39x  (± 0.00) slower
 String#sub!'string':  5461803.3 i/s - 18.83x  (± 0.00) slower
String#gsub!/regexp/:  4339751.2 i/s - 23.70x  (± 0.00) slower
String#gsub!'string':  4339053.0 i/s - 23.70x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.622M i/100ms
        String#chomp     3.742M i/100ms
String#delete_suffix     4.596M i/100ms
Calculating -------------------------------------
          String#sub     17.775M (± 3.0%) i/s -     89.237M in   5.025492s
        String#chomp     37.463M (± 0.9%) i/s -    190.846M in   5.094695s
String#delete_suffix     46.784M (± 3.3%) i/s -    234.398M in   5.015984s

Comparison:
String#delete_suffix: 46784459.9 i/s
        String#chomp: 37462901.6 i/s - 1.25x  (± 0.00) slower
          String#sub: 17774652.9 i/s - 2.63x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   238.217M i/100ms
          String#sub    11.488M i/100ms
Calculating -------------------------------------
String#delete_prefix      2.387B (± 0.3%) i/s -     12.149B in   5.090129s
          String#sub    114.865M (± 0.1%) i/s -    574.392M in   5.000615s

Comparison:
String#delete_prefix: 2386814913.9 i/s
          String#sub: 114864572.8 i/s - 20.78x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.457M i/100ms
    String#unpack[0]     1.494M i/100ms
Calculating -------------------------------------
      String#unpack1     15.180M (± 3.6%) i/s -     75.779M in   4.998854s
    String#unpack[0]     15.350M (± 3.2%) i/s -     77.664M in   5.064814s

Comparison:
    String#unpack[0]: 15350378.7 i/s
      String#unpack1: 15180336.9 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    19.187k i/100ms
          Time.parse   200.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    237.857k (±25.7%) i/s -      1.094M in   5.045611s
          Time.parse      7.396k (±25.2%) i/s -     31.600k in   5.005017s

Comparison:
        Time.iso8601:   237856.6 i/s
          Time.parse:     7396.4 i/s - 32.16x  (± 0.00) slower

