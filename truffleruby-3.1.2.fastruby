$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       114.012M i/100ms
Function with splat arguments
                         1.134k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.136B (± 0.5%) i/s -      5.701B in   5.016695s
Function with splat arguments
                         13.259k (± 6.8%) i/s -     66.906k in   5.073218s

Comparison:
Function with single Array argument: 1136348897.8 i/s
Function with splat arguments:    13258.6 i/s - 85706.84x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   113.948M i/100ms
Sequential Assignment
                       114.274M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.133B (± 1.1%) i/s -      5.697B in   5.030566s
Sequential Assignment
                          1.135B (± 0.5%) i/s -      5.714B in   5.032404s

Comparison:
Sequential Assignment: 1135411246.1 i/s
 Parallel Assignment: 1132707260.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   113.526M i/100ms
       attr_accessor   113.583M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.136B (± 0.8%) i/s -      5.790B in   5.095317s
       attr_accessor      1.135B (± 0.5%) i/s -      5.679B in   5.002640s

Comparison:
   getter_and_setter: 1136373644.2 i/s
       attr_accessor: 1135261479.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    10.323k i/100ms
         respond_to?   113.941M i/100ms
Calculating -------------------------------------
      begin...rescue     78.975k (± 4.5%) i/s -    402.597k in   5.108584s
         respond_to?      1.137B (± 1.1%) i/s -      5.697B in   5.011250s

Comparison:
         respond_to?: 1136992915.3 i/s
      begin...rescue:    78975.2 i/s - 14396.84x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   114.310M i/100ms
             &method   113.553M i/100ms
Calculating -------------------------------------
              normal      1.135B (± 0.7%) i/s -      5.716B in   5.034882s
             &method      1.137B (± 0.7%) i/s -      5.791B in   5.094985s

Comparison:
             &method: 1136701978.9 i/s
              normal: 1135244907.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       127.000  i/100ms
       define_method   155.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.388k (±57.6%) i/s -      5.207k in   5.720163s
       define_method      6.143k (±44.7%) i/s -      8.990k in   5.013772s

Comparison:
       define_method:     6142.9 i/s
module_eval with string:     2387.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    82.852k i/100ms
       Kernel#format    74.696k i/100ms
            String#%    75.840k i/100ms
Calculating -------------------------------------
         Float#round    892.020k (± 2.3%) i/s -      4.474M in   5.018345s
       Kernel#format    749.511k (± 2.0%) i/s -      3.809M in   5.084755s
            String#%    757.575k (± 1.9%) i/s -      3.792M in   5.007286s

Comparison:
         Float#round:   892019.6 i/s
            String#%:   757574.5 i/s - 1.18x  (± 0.00) slower
       Kernel#format:   749511.2 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.750M i/100ms
          OpenStruct   113.805M i/100ms
Calculating -------------------------------------
                Hash      1.137B (± 1.0%) i/s -      5.688B in   5.002283s
          OpenStruct      1.134B (± 0.6%) i/s -      5.690B in   5.016766s

Comparison:
                Hash: 1137092704.2 i/s
          OpenStruct: 1134295547.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.970M i/100ms
          OpenStruct     3.520k i/100ms
Calculating -------------------------------------
                Hash      1.134B (± 0.8%) i/s -      5.699B in   5.024142s
          OpenStruct     35.810k (±13.8%) i/s -    176.000k in   5.062602s

Comparison:
                Hash: 1134298941.0 i/s
          OpenStruct:    35809.9 i/s - 31675.57x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   827.454k i/100ms
  ancestors.include?   166.572k i/100ms
Calculating -------------------------------------
  less than or equal      8.852M (± 3.2%) i/s -     44.683M in   5.053244s
  ancestors.include?      1.695M (± 4.5%) i/s -      8.495M in   5.023093s

Comparison:
  less than or equal:  8852109.5 i/s
  ancestors.include?:  1694766.7 i/s - 5.22x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     11.360  (± 0.0%) i/s -     57.000  in   5.017997s
         Kernel loop     11.366  (± 0.0%) i/s -     57.000  in   5.015105s

Comparison:
         Kernel loop:       11.4 i/s
          While Loop:       11.4 i/s - 1.00x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   114.261M i/100ms
         Array#first   114.503M i/100ms
Calculating -------------------------------------
           Array#[0]      1.137B (± 0.9%) i/s -      5.713B in   5.023701s
         Array#first      1.136B (± 0.9%) i/s -      5.725B in   5.037974s

Comparison:
           Array#[0]: 1137310968.1 i/s
         Array#first: 1136493353.4 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   113.274M i/100ms
          Array#last   113.432M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.135B (± 0.7%) i/s -      5.777B in   5.089372s
          Array#last      1.136B (± 0.8%) i/s -      5.785B in   5.092046s

Comparison:
          Array#last: 1136159872.9 i/s
          Array#[-1]: 1135169508.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   676.961k i/100ms
Calculating -------------------------------------
                find      4.724  (± 0.0%) i/s -     24.000  in   5.080090s
             bsearch      6.764M (± 3.9%) i/s -     33.848M in   5.011805s

Comparison:
             bsearch:  6764410.9 i/s
                find:        4.7 i/s - 1431813.57x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.068  (± 0.0%) i/s -      1.000  in  14.601513s
        Array#insert      1.027  (± 0.0%) i/s -      6.000  in   5.840476s

Comparison:
        Array#insert:        1.0 i/s
       Array#unshift:        0.1 i/s - 15.00x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   113.698M i/100ms
          Array#size   114.198M i/100ms
         Array#count   113.896M i/100ms
Calculating -------------------------------------
        Array#length      1.135B (± 0.6%) i/s -      5.685B in   5.010094s
          Array#size      1.139B (± 1.0%) i/s -      5.710B in   5.014801s
         Array#count      1.138B (± 0.8%) i/s -      5.695B in   5.003252s

Comparison:
          Array#size: 1138722828.8 i/s
         Array#count: 1138295566.1 i/s - same-ish: difference falls within error
        Array#length: 1134731071.9 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    23.029k i/100ms
        Array#sample     2.756M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    254.007k (± 2.1%) i/s -      1.290M in   5.079452s
        Array#sample     27.881M (± 0.2%) i/s -    140.560M in   5.041487s

Comparison:
        Array#sample: 27880725.7 i/s
 Array#shuffle.first:   254007.3 i/s - 109.76x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601     2.162k i/100ms
          Date.parse   681.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     35.041k (±29.2%) i/s -    147.016k in   5.009603s
          Date.parse     14.046k (±27.1%) i/s -     61.971k in   5.047896s

Comparison:
        Date.iso8601:    35040.8 i/s
          Date.parse:    14046.3 i/s - 2.49x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   227.940k i/100ms
           Array#map     1.043M i/100ms
Calculating -------------------------------------
   Array#each + push      2.458M (± 4.6%) i/s -     12.309M in   5.019158s
           Array#map     10.372M (± 5.1%) i/s -     52.160M in   5.042231s

Comparison:
           Array#map: 10372167.7 i/s
   Array#each + push:  2457973.5 i/s - 4.22x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     9.377M i/100ms
               #each    41.260M i/100ms
Calculating -------------------------------------
            For loop     93.346M (± 1.0%) i/s -    468.833M in   5.022988s
               #each    412.457M (± 0.5%) i/s -      2.063B in   5.001805s

Comparison:
               #each: 412457374.3 i/s
            For loop: 93346411.2 i/s - 4.42x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   837.716k i/100ms
     each_with_index     1.039M i/100ms
Calculating -------------------------------------
          While Loop      8.377M (± 0.1%) i/s -     41.886M in   5.000125s
     each_with_index     10.423M (± 0.1%) i/s -     52.976M in   5.082605s

Comparison:
     each_with_index: 10422912.3 i/s
          While Loop:  8376953.7 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   159.636k i/100ms
      inject to_proc   160.604k i/100ms
        inject block   159.362k i/100ms
Calculating -------------------------------------
       inject symbol      1.592M (± 0.2%) i/s -      7.982M in   5.012556s
      inject to_proc      1.585M (± 0.2%) i/s -      8.030M in   5.065773s
        inject block      1.590M (± 0.4%) i/s -      7.968M in   5.010877s

Comparison:
       inject symbol:  1592365.5 i/s
        inject block:  1590181.3 i/s - same-ish: difference falls within error
      inject to_proc:  1585191.5 i/s - 1.00x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    16.772k i/100ms
   Array#map.flatten    18.557k i/100ms
      Array#flat_map    45.541k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    186.406k (± 4.6%) i/s -    939.232k in   5.050291s
   Array#map.flatten    188.859k (± 3.6%) i/s -    946.407k in   5.018472s
      Array#flat_map    460.946k (± 1.5%) i/s -      2.323M in   5.040005s

Comparison:
      Array#flat_map:   460945.7 i/s
   Array#map.flatten:   188859.5 i/s - 2.44x  (± 0.00) slower
Array#map.flatten(1):   186405.7 i/s - 2.47x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   248.428k i/100ms
  Array#reverse_each     2.299M i/100ms
Calculating -------------------------------------
  Array#reverse.each      2.565M (± 3.1%) i/s -     12.918M in   5.041321s
  Array#reverse_each     23.039M (± 0.3%) i/s -    117.263M in   5.089782s

Comparison:
  Array#reverse_each: 23039117.0 i/s
  Array#reverse.each:  2564961.0 i/s - 8.98x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       613.849k i/100ms
   Enumerable#detect     2.657M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          6.785M (± 5.4%) i/s -    135.661M in  20.069609s
   Enumerable#detect     26.606M (± 0.2%) i/s -    534.128M in  20.075375s

Comparison:
   Enumerable#detect: 26606303.3 i/s
Enumerable#select.first:  6785112.2 i/s - 3.92x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       245.812k i/100ms
Enumerable#select.last
                       399.499k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.638M (± 2.8%) i/s -     13.274M in   5.035699s
Enumerable#select.last
                          4.053M (± 2.9%) i/s -     20.374M in   5.030844s

Comparison:
Enumerable#select.last:  4053343.0 i/s
Enumerable#reverse.detect:  2638167.1 i/s - 1.54x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.812k i/100ms
  Enumerable#sort_by     3.223k i/100ms
     Enumerable#sort     4.425k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         30.749k (±12.1%) i/s -    151.848k in   5.018879s
  Enumerable#sort_by     31.090k (±12.9%) i/s -    154.704k in   5.087156s
     Enumerable#sort     43.558k (± 0.1%) i/s -    221.250k in   5.079429s

Comparison:
     Enumerable#sort:    43558.1 i/s
  Enumerable#sort_by:    31090.2 i/s - 1.40x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    30748.7 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   606.561k i/100ms
Enumerable#sort_by...first
                         7.027k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      6.064M (± 0.3%) i/s -     30.328M in   5.001005s
Enumerable#sort_by...first
                         75.261k (± 2.4%) i/s -    379.458k in   5.044963s

Comparison:
   Enumerable#min_by:  6064452.7 i/s
Enumerable#sort_by...first:    75260.7 i/s - 80.58x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   359.206k i/100ms
            Hash#dup   414.582k i/100ms
Calculating -------------------------------------
              Hash[]      4.318M (± 2.4%) i/s -     21.912M in   5.077951s
            Hash#dup      4.316M (± 2.2%) i/s -     21.973M in   5.093359s

Comparison:
              Hash[]:  4317645.9 i/s
            Hash#dup:  4316271.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   113.863M i/100ms
  Hash#fetch, symbol   113.793M i/100ms
     Hash#[], string    13.873M i/100ms
  Hash#fetch, string     3.845M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.134B (± 0.7%) i/s -      5.693B in   5.018702s
  Hash#fetch, symbol      1.141B (± 1.3%) i/s -      5.803B in   5.087681s
     Hash#[], string    155.479M (± 0.3%) i/s -    790.782M in   5.086154s
  Hash#fetch, string    160.357M (± 1.5%) i/s -    803.573M in   5.012269s

Comparison:
  Hash#fetch, symbol: 1140876788.3 i/s
     Hash#[], symbol: 1134436714.9 i/s - same-ish: difference falls within error
  Hash#fetch, string: 160356632.4 i/s - 7.11x  (± 0.00) slower
     Hash#[], string: 155478669.7 i/s - 7.34x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    49.768M i/100ms
             Hash#[]    46.751M i/100ms
          Hash#[] ||    47.667M i/100ms
          Hash#[] &&    47.896M i/100ms
          Hash#fetch    42.219M i/100ms
 Hash#fetch fallback    42.339M i/100ms
Calculating -------------------------------------
            Hash#dig    497.431M (± 0.2%) i/s -      2.488B in   5.002521s
             Hash#[]    470.529M (± 1.2%) i/s -      2.384B in   5.068110s
          Hash#[] ||    466.175M (± 1.2%) i/s -      2.336B in   5.011037s
          Hash#[] &&    472.259M (± 1.4%) i/s -      2.395B in   5.072057s
          Hash#fetch    420.486M (± 0.9%) i/s -      2.111B in   5.020685s
 Hash#fetch fallback    421.775M (± 1.0%) i/s -      2.117B in   5.019658s

Comparison:
            Hash#dig: 497431488.4 i/s
          Hash#[] &&: 472258972.9 i/s - 1.05x  (± 0.00) slower
             Hash#[]: 470528608.3 i/s - 1.06x  (± 0.00) slower
          Hash#[] ||: 466174731.9 i/s - 1.07x  (± 0.00) slower
 Hash#fetch fallback: 421774531.8 i/s - 1.18x  (± 0.00) slower
          Hash#fetch: 420486181.5 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   113.861M i/100ms
  Hash#fetch + block   113.583M i/100ms
    Hash#fetch + arg   113.325M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.137B (± 0.8%) i/s -      5.693B in   5.006139s
  Hash#fetch + block      1.135B (± 0.4%) i/s -      5.679B in   5.003044s
    Hash#fetch + arg      1.137B (± 0.7%) i/s -      5.780B in   5.085138s

Comparison:
  Hash#fetch + const: 1137289320.6 i/s
    Hash#fetch + arg: 1136615836.7 i/s - same-ish: difference falls within error
  Hash#fetch + block: 1135154213.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    22.272k i/100ms
         sort + to_h    10.372k i/100ms
Calculating -------------------------------------
      sort_by + to_h    295.056k (± 7.8%) i/s -      1.470M in   5.014552s
         sort + to_h    185.427k (± 5.2%) i/s -    933.480k in   5.049595s

Comparison:
      sort_by + to_h:   295055.6 i/s
         sort + to_h:   185426.5 i/s - 1.59x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   165.099k i/100ms
       Hash#each_key   203.831k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.777M (±10.3%) i/s -      8.750M in   5.032879s
       Hash#each_key      2.080M (± 2.9%) i/s -     10.395M in   5.002727s

Comparison:
       Hash#each_key:  2079794.9 i/s
      Hash#keys.each:  1777392.4 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   227.000  i/100ms
           Hash#key?     2.650M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      2.348k (±11.4%) i/s -     11.577k in   5.024969s
           Hash#key?     26.755M (± 0.2%) i/s -    135.158M in   5.051738s

Comparison:
           Hash#key?: 26754790.0 i/s
  Hash#keys.include?:     2348.3 i/s - 11393.06x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    42.114k i/100ms
            Hash#[]=    42.785k i/100ms
Calculating -------------------------------------
         Hash#merge!    428.118k (±10.2%) i/s -      2.106M in   5.023356s
            Hash#[]=    434.776k (± 4.9%) i/s -      2.182M in   5.031706s

Comparison:
            Hash#[]=:   434775.6 i/s
         Hash#merge!:   428117.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        23.684k i/100ms
      Hash#merge({})    15.213k i/100ms
 Hash#dup#merge!({})    25.662k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        274.218k (± 2.7%) i/s -      1.374M in   5.013207s
      Hash#merge({})    165.628k (± 2.1%) i/s -    836.715k in   5.054161s
 Hash#dup#merge!({})    257.191k (± 2.3%) i/s -      1.309M in   5.091474s

Comparison:
{}#merge!(Hash) do end:   274217.7 i/s
 Hash#dup#merge!({}):   257191.3 i/s - 1.07x  (± 0.00) slower
      Hash#merge({}):   165627.9 i/s - 1.66x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   113.960M i/100ms
          Hash#merge   114.101M i/100ms
Calculating -------------------------------------
        Hash#**other      1.135B (± 0.6%) i/s -      5.698B in   5.022387s
          Hash#merge      1.138B (± 0.8%) i/s -      5.705B in   5.014650s

Comparison:
          Hash#merge: 1137750436.3 i/s
        Hash#**other: 1134557176.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   699.000  i/100ms
         Hash#merge!    43.173k i/100ms
Calculating -------------------------------------
          Hash#merge      7.855k (± 3.7%) i/s -     39.843k in   5.079700s
         Hash#merge!    445.928k (± 1.9%) i/s -      2.245M in   5.036237s

Comparison:
         Hash#merge!:   445928.2 i/s
          Hash#merge:     7855.3 i/s - 56.77x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.453M i/100ms
Array#each               1.393M i/100ms
Array#each_w/_object     1.380M i/100ms
Hash#select-include      2.050M i/100ms
Calculating -------------------------------------
Hash#native-slice        16.614M (± 3.6%) i/s -     84.267M in   5.079003s
Array#each               14.078M (± 2.4%) i/s -     71.050M in   5.050208s
Array#each_w/_object     13.926M (± 2.8%) i/s -     70.356M in   5.056113s
Hash#select-include      20.442M (± 3.4%) i/s -    102.494M in   5.019893s

Comparison:
Hash#select-include : 20442116.1 i/s
Hash#native-slice   : 16614079.8 i/s - 1.23x  (± 0.00) slower
Array#each          : 14077613.8 i/s - 1.45x  (± 0.00) slower
Array#each_w/_object: 13926173.1 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   203.000  i/100ms
         Hash#value?   474.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      2.149k (±12.5%) i/s -     10.556k in   5.019711s
         Hash#value?      4.731k (± 1.1%) i/s -     23.700k in   5.010613s

Comparison:
         Hash#value?:     4730.6 i/s
Hash#values.include?:     2148.8 i/s - 2.20x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   113.528M i/100ms
                send   113.412M i/100ms
      method_missing   113.538M i/100ms
Calculating -------------------------------------
                call      1.136B (± 0.5%) i/s -      5.790B in   5.097332s
                send      1.135B (± 0.8%) i/s -      5.784B in   5.095960s
      method_missing      1.135B (± 0.4%) i/s -      5.677B in   5.002634s

Comparison:
                call: 1135909294.3 i/s
                send: 1135083558.7 i/s - same-ish: difference falls within error
      method_missing: 1134794848.7 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    31.618k i/100ms
      Symbol#to_proc    33.471k i/100ms
Calculating -------------------------------------
               Block    347.990k (± 2.2%) i/s -      1.771M in   5.090741s
      Symbol#to_proc    348.421k (± 2.1%) i/s -      1.774M in   5.093711s

Comparison:
      Symbol#to_proc:   348420.8 i/s
               Block:   347990.4 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   113.712M i/100ms
       block + yield   113.993M i/100ms
        unused block   113.754M i/100ms
               yield   113.613M i/100ms
Calculating -------------------------------------
          block.call      1.140B (± 1.1%) i/s -      5.799B in   5.089602s
       block + yield      1.142B (± 1.3%) i/s -      5.814B in   5.090371s
        unused block      1.142B (± 1.4%) i/s -      5.801B in   5.083277s
               yield      1.145B (± 1.4%) i/s -      5.794B in   5.059631s

Comparison:
               yield: 1145429711.0 i/s
       block + yield: 1142269441.4 i/s - same-ish: difference falls within error
        unused block: 1141503899.1 i/s - same-ish: difference falls within error
          block.call: 1139576278.9 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    27.165k i/100ms
      range#include?   634.000  i/100ms
       range#member?   880.000  i/100ms
       plain compare    32.793k i/100ms
Calculating -------------------------------------
        range#cover?    204.249k (±15.8%) i/s -      1.005M in   5.071094s
      range#include?      7.371k (±26.6%) i/s -     34.870k in   5.046835s
       range#member?      6.810k (±12.4%) i/s -     33.440k in   5.033337s
       plain compare    372.659k (±23.9%) i/s -      1.738M in   5.016782s

Comparison:
       plain compare:   372658.9 i/s
        range#cover?:   204249.3 i/s - 1.82x  (± 0.00) slower
      range#include?:     7370.6 i/s - 50.56x  (± 0.00) slower
       range#member?:     6809.6 i/s - 54.73x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    14.750M i/100ms
           String#=~    14.978M i/100ms
          Regexp#===    14.978M i/100ms
        String#match     9.782M i/100ms
Calculating -------------------------------------
       String#match?    147.790M (± 0.1%) i/s -    752.255M in   5.090041s
           String#=~    127.247M (± 2.7%) i/s -    644.071M in   5.064751s
          Regexp#===    140.768M (± 0.9%) i/s -    703.974M in   5.001377s
        String#match     97.819M (± 0.4%) i/s -    489.100M in   5.000095s

Comparison:
       String#match?: 147789603.3 i/s
          Regexp#===: 140767546.5 i/s - 1.05x  (± 0.00) slower
           String#=~: 127247298.8 i/s - 1.16x  (± 0.00) slower
        String#match: 97819426.0 i/s - 1.51x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.410M i/100ms
      String#casecmp     3.993M i/100ms
Calculating -------------------------------------
String#downcase + ==     27.559M (± 6.1%) i/s -    137.388M in   5.005674s
      String#casecmp     40.286M (± 4.6%) i/s -    203.644M in   5.066507s

Comparison:
      String#casecmp: 40285977.8 i/s
String#downcase + ==: 27558591.8 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     7.402M i/100ms
       String#concat     8.308M i/100ms
       String#append     8.420M i/100ms
         "foo" "bar"   113.895M i/100ms
  "#{'foo'}#{'bar'}"   113.520M i/100ms
Calculating -------------------------------------
            String#+     83.213M (± 3.9%) i/s -    421.939M in   5.078518s
       String#concat     84.145M (± 2.3%) i/s -    423.687M in   5.038002s
       String#append     83.371M (± 3.4%) i/s -    420.982M in   5.055601s
         "foo" "bar"      1.136B (± 0.7%) i/s -      5.695B in   5.013264s
  "#{'foo'}#{'bar'}"      1.139B (± 0.8%) i/s -      5.790B in   5.084751s

Comparison:
  "#{'foo'}#{'bar'}": 1138677175.1 i/s
         "foo" "bar": 1135988059.6 i/s - same-ish: difference falls within error
       String#concat: 84144726.0 i/s - 13.53x  (± 0.00) slower
       String#append: 83371188.8 i/s - 13.66x  (± 0.00) slower
            String#+: 83212909.6 i/s - 13.68x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   113.938M i/100ms
          String#dup   113.904M i/100ms
Calculating -------------------------------------
           String#+@      1.136B (± 0.7%) i/s -      5.697B in   5.015640s
          String#dup      1.137B (± 0.8%) i/s -      5.695B in   5.008375s

Comparison:
          String#dup: 1137195834.7 i/s
           String#+@: 1135883677.1 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.359M i/100ms
       String#match?     1.370M i/100ms
    String#end_with?     9.417M i/100ms
Calculating -------------------------------------
           String#=~     14.661M (± 2.3%) i/s -     73.362M in   5.006692s
       String#match?     18.143M (± 0.7%) i/s -     91.771M in   5.058298s
    String#end_with?     94.472M (± 1.1%) i/s -    480.275M in   5.084392s

Comparison:
    String#end_with?: 94472270.8 i/s
       String#match?: 18143454.2 i/s - 5.21x  (± 0.00) slower
           String#=~: 14661120.1 i/s - 6.44x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   278.896k i/100ms
          String#sub   740.662k i/100ms
String#dup["string"]=
                        11.313M i/100ms
Calculating -------------------------------------
         String#gsub      5.388M (±10.9%) i/s -     26.774M in   5.046588s
          String#sub      7.630M (± 5.6%) i/s -     38.514M in   5.066501s
String#dup["string"]=
                        113.066M (± 0.1%) i/s -    565.662M in   5.002927s

Comparison:
String#dup["string"]=: 113066263.4 i/s
          String#sub:  7629664.2 i/s - 14.82x  (± 0.00) slower
         String#gsub:  5387822.6 i/s - 20.99x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   240.577k i/100ms
           String#tr   124.246k i/100ms
Calculating -------------------------------------
         String#gsub      2.845M (± 7.1%) i/s -     14.194M in   5.016233s
           String#tr      1.258M (± 4.3%) i/s -      6.337M in   5.048362s

Comparison:
         String#gsub:  2844803.1 i/s
           String#tr:  1257743.8 i/s - 2.26x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   113.734M i/100ms
         With Freeze   113.789M i/100ms
Calculating -------------------------------------
      Without Freeze      1.137B (± 1.0%) i/s -      5.687B in   5.001262s
         With Freeze      1.135B (± 0.8%) i/s -      5.689B in   5.011239s

Comparison:
      Without Freeze: 1137155151.4 i/s
         With Freeze: 1135405876.9 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     6.734k i/100ms
      String#squeeze    28.914k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    107.689k (± 7.7%) i/s -    538.720k in   5.035471s
      String#squeeze    289.666k (± 1.6%) i/s -      1.475M in   5.092179s

Comparison:
      String#squeeze:   289666.3 i/s
 String#gsub/regex+/:   107688.6 i/s - 2.69x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     3.174M i/100ms
       String#match?     5.153M i/100ms
  String#start_with?    20.620M i/100ms
Calculating -------------------------------------
           String#=~     32.278M (± 2.4%) i/s -    161.872M in   5.018185s
       String#match?     51.519M (± 0.1%) i/s -    257.626M in   5.000580s
  String#start_with?    205.620M (± 0.4%) i/s -      1.031B in   5.014102s

Comparison:
  String#start_with?: 205619502.3 i/s
       String#match?: 51519231.9 i/s - 3.99x  (± 0.00) slower
           String#=~: 32277695.7 i/s - 6.37x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   100.942k i/100ms
    String#[0, n] ==   239.553k i/100ms
   String#[RANGE] ==   345.089k i/100ms
   String#[0...n] ==   231.160k i/100ms
Calculating -------------------------------------
  String#start_with?      4.135M (± 0.1%) i/s -     20.693M in   5.004478s
    String#[0, n] ==      2.603M (± 3.0%) i/s -     13.175M in   5.067001s
   String#[RANGE] ==      3.455M (± 3.5%) i/s -     17.254M in   5.000376s
   String#[0...n] ==      2.304M (± 3.4%) i/s -     11.558M in   5.022270s

Comparison:
  String#start_with?:  4134927.7 i/s
   String#[RANGE] ==:  3455019.5 i/s - 1.20x  (± 0.00) slower
    String#[0, n] ==:  2602669.0 i/s - 1.59x  (± 0.00) slower
   String#[0...n] ==:  2304104.2 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    11.308M i/100ms
 String#sub!'string'   491.067k i/100ms
String#gsub!'string'   584.595k i/100ms
  String#[/regexp/]=     1.807M i/100ms
 String#sub!/regexp/     2.266M i/100ms
String#gsub!/regexp/   656.794k i/100ms
Calculating -------------------------------------
  String#['string']=    113.131M (± 0.1%) i/s -    576.688M in   5.097510s
 String#sub!'string'      8.397M (±12.2%) i/s -     39.285M in   5.014165s
String#gsub!'string'      6.130M (± 3.1%) i/s -     30.984M in   5.059629s
  String#[/regexp/]=     18.001M (± 1.8%) i/s -     90.344M in   5.020719s
 String#sub!/regexp/     21.746M (± 1.6%) i/s -    108.773M in   5.003214s
String#gsub!/regexp/      6.514M (± 2.0%) i/s -     32.840M in   5.043345s

Comparison:
  String#['string']=: 113131372.0 i/s
 String#sub!/regexp/: 21746170.4 i/s - 5.20x  (± 0.00) slower
  String#[/regexp/]=: 18000546.5 i/s - 6.28x  (± 0.00) slower
 String#sub!'string':  8396716.5 i/s - 13.47x  (± 0.00) slower
String#gsub!/regexp/:  6514282.4 i/s - 17.37x  (± 0.00) slower
String#gsub!'string':  6130451.2 i/s - 18.45x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     2.535M i/100ms
        String#chomp     4.773M i/100ms
String#delete_suffix    10.841M i/100ms
Calculating -------------------------------------
          String#sub     26.227M (± 4.4%) i/s -    131.831M in   5.037476s
        String#chomp     47.707M (± 0.2%) i/s -    238.635M in   5.002108s
String#delete_suffix    107.460M (± 7.9%) i/s -    542.067M in   5.077294s

Comparison:
String#delete_suffix: 107459815.2 i/s
        String#chomp: 47707103.1 i/s - 2.25x  (± 0.00) slower
          String#sub: 26227261.7 i/s - 4.10x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   113.716M i/100ms
          String#sub    15.572M i/100ms
Calculating -------------------------------------
String#delete_prefix      1.139B (± 1.0%) i/s -      5.800B in   5.093844s
          String#sub    148.914M (± 0.7%) i/s -    747.480M in   5.019748s

Comparison:
String#delete_prefix: 1138641086.1 i/s
          String#sub: 148914336.3 i/s - 7.65x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.476M i/100ms
    String#unpack[0]     1.703M i/100ms
Calculating -------------------------------------
      String#unpack1     17.621M (± 3.8%) i/s -     88.570M in   5.033950s
    String#unpack[0]     17.715M (± 3.0%) i/s -     88.548M in   5.002963s

Comparison:
    String#unpack[0]: 17715334.6 i/s
      String#unpack1: 17621233.2 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 23.0.0-dev-0e630a00, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    21.356k i/100ms
          Time.parse   348.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    289.992k (±26.3%) i/s -      1.324M in   5.032226s
          Time.parse      9.630k (±25.4%) i/s -     41.412k in   5.005128s

Comparison:
        Time.iso8601:   289992.2 i/s
          Time.parse:     9629.6 i/s - 30.11x  (± 0.00) slower

