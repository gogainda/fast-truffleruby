$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       197.918M i/100ms
Function with splat arguments
                       574.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.992B (± 0.8%) i/s -     10.094B in   5.067408s
Function with splat arguments
                          6.078k (± 5.9%) i/s -     30.422k in   5.024483s

Comparison:
Function with single Array argument: 1992029001.7 i/s
Function with splat arguments:     6077.6 i/s - 327763.70x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   200.736M i/100ms
Sequential Assignment
                       200.808M i/100ms
Calculating -------------------------------------
 Parallel Assignment      2.010B (± 1.6%) i/s -     10.238B in   5.094070s
Sequential Assignment
                          1.998B (± 1.4%) i/s -     10.040B in   5.026857s

Comparison:
 Parallel Assignment: 2010174202.4 i/s
Sequential Assignment: 1997736181.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   199.847M i/100ms
       attr_accessor   200.445M i/100ms
Calculating -------------------------------------
   getter_and_setter      2.007B (± 1.4%) i/s -     10.192B in   5.080442s
       attr_accessor      2.015B (± 1.5%) i/s -     10.223B in   5.073469s

Comparison:
       attr_accessor: 2015358516.2 i/s
   getter_and_setter: 2006555210.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     7.432k i/100ms
         respond_to?   198.715M i/100ms
Calculating -------------------------------------
      begin...rescue     49.488k (± 3.0%) i/s -    252.688k in   5.110684s
         respond_to?      1.998B (± 0.7%) i/s -     10.134B in   5.071579s

Comparison:
         respond_to?: 1998399242.3 i/s
      begin...rescue:    49488.0 i/s - 40381.45x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   200.933M i/100ms
             &method   200.552M i/100ms
Calculating -------------------------------------
              normal      2.010B (± 1.6%) i/s -     10.047B in   5.000828s
             &method      2.003B (± 0.9%) i/s -     10.028B in   5.007240s

Comparison:
              normal: 2009534629.3 i/s
             &method: 2002767766.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        96.000  i/100ms
       define_method   123.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.609k (±53.9%) i/s -      4.704k in   6.434777s
       define_method      3.175k (±55.6%) i/s -      6.150k in   6.104957s

Comparison:
       define_method:     3174.7 i/s
module_eval with string:     1608.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    62.522k i/100ms
       Kernel#format    55.761k i/100ms
            String#%    56.504k i/100ms
Calculating -------------------------------------
         Float#round    662.389k (± 2.8%) i/s -      3.314M in   5.006511s
       Kernel#format    559.055k (± 2.4%) i/s -      2.844M in   5.089800s
            String#%    567.287k (± 2.5%) i/s -      2.882M in   5.082982s

Comparison:
         Float#round:   662388.7 i/s
            String#%:   567287.0 i/s - 1.17x  (± 0.00) slower
       Kernel#format:   559055.2 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   201.078M i/100ms
          OpenStruct   198.388M i/100ms
Calculating -------------------------------------
                Hash      1.999B (± 1.1%) i/s -     10.054B in   5.029611s
          OpenStruct      2.016B (± 1.5%) i/s -     10.118B in   5.018875s

Comparison:
          OpenStruct: 2016413551.6 i/s
                Hash: 1999168572.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   200.745M i/100ms
          OpenStruct     2.326k i/100ms
Calculating -------------------------------------
                Hash      2.003B (± 1.2%) i/s -     10.037B in   5.011554s
          OpenStruct     24.528k (±11.3%) i/s -    120.952k in   5.044925s

Comparison:
                Hash: 2003111628.7 i/s
          OpenStruct:    24527.5 i/s - 81667.95x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   594.503k i/100ms
  ancestors.include?   124.102k i/100ms
Calculating -------------------------------------
  less than or equal      7.070M (± 4.5%) i/s -     35.670M in   5.056149s
  ancestors.include?      1.248M (± 5.1%) i/s -      6.329M in   5.084425s

Comparison:
  less than or equal:  7069822.8 i/s
  ancestors.include?:  1248209.2 i/s - 5.66x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     20.103  (± 0.0%) i/s -    101.000  in   5.025552s
         Kernel loop     19.950  (± 0.0%) i/s -    100.000  in   5.012888s

Comparison:
          While Loop:       20.1 i/s
         Kernel loop:       19.9 i/s - 1.01x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   197.779M i/100ms
         Array#first   199.012M i/100ms
Calculating -------------------------------------
           Array#[0]      2.007B (± 1.5%) i/s -     10.087B in   5.026114s
         Array#first      2.022B (± 1.5%) i/s -     10.150B in   5.021799s

Comparison:
         Array#first: 2021593074.7 i/s
           Array#[0]: 2007322396.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   201.038M i/100ms
          Array#last   198.647M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.997B (± 0.8%) i/s -     10.052B in   5.034479s
          Array#last      2.004B (± 1.3%) i/s -     10.131B in   5.057117s

Comparison:
          Array#last: 2003633317.6 i/s
          Array#[-1]: 1996734218.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   449.347k i/100ms
Calculating -------------------------------------
                find      5.857  (±34.1%) i/s -     11.000  in   5.104062s
             bsearch      4.521M (± 2.9%) i/s -     22.917M in   5.072920s

Comparison:
             bsearch:  4521338.2 i/s
                find:        5.9 i/s - 771980.53x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.106  (± 0.0%) i/s -      1.000  in   9.465734s
        Array#insert      0.795  (± 0.0%) i/s -      4.000  in   5.028829s

Comparison:
        Array#insert:        0.8 i/s
       Array#unshift:        0.1 i/s - 7.53x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   198.856M i/100ms
          Array#size   198.783M i/100ms
         Array#count   202.423M i/100ms
Calculating -------------------------------------
        Array#length      1.996B (± 1.0%) i/s -     10.142B in   5.080540s
          Array#size      1.989B (± 0.5%) i/s -     10.138B in   5.096598s
         Array#count      1.991B (± 0.4%) i/s -     10.121B in   5.084623s

Comparison:
        Array#length: 1996372368.5 i/s
         Array#count: 1990563685.6 i/s - same-ish: difference falls within error
          Array#size: 1989201315.4 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    18.344k i/100ms
        Array#sample     2.201M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    204.822k (± 2.4%) i/s -      1.027M in   5.018531s
        Array#sample     22.307M (± 1.7%) i/s -    112.271M in   5.034555s

Comparison:
        Array#sample: 22306628.6 i/s
 Array#shuffle.first:   204821.7 i/s - 108.91x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   371.000  i/100ms
          Date.parse   406.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     20.026k (±33.3%) i/s -     82.362k in   5.011969s
          Date.parse      9.161k (±24.7%) i/s -     40.600k in   5.012220s

Comparison:
        Date.iso8601:    20025.5 i/s
          Date.parse:     9161.2 i/s - 2.19x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   130.524k i/100ms
           Array#map   488.578k i/100ms
Calculating -------------------------------------
   Array#each + push      1.399M (± 4.1%) i/s -      7.048M in   5.046086s
           Array#map      4.929M (± 6.6%) i/s -     24.917M in   5.077437s

Comparison:
           Array#map:  4929293.0 i/s
   Array#each + push:  1399236.4 i/s - 3.52x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     8.994M i/100ms
               #each    47.702M i/100ms
Calculating -------------------------------------
            For loop     90.127M (± 1.6%) i/s -    458.718M in   5.090883s
               #each    483.831M (± 1.5%) i/s -      2.433B in   5.029411s

Comparison:
               #each: 483830883.7 i/s
            For loop: 90127428.6 i/s - 5.37x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   755.263k i/100ms
     each_with_index     1.092M i/100ms
Calculating -------------------------------------
          While Loop      7.718M (± 1.9%) i/s -     39.274M in   5.090403s
     each_with_index     10.853M (± 1.8%) i/s -     54.583M in   5.030686s

Comparison:
     each_with_index: 10853420.8 i/s
          While Loop:  7718073.1 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   123.397k i/100ms
      inject to_proc   124.051k i/100ms
        inject block   126.882k i/100ms
Calculating -------------------------------------
       inject symbol      1.240M (± 1.7%) i/s -      6.293M in   5.075030s
      inject to_proc      1.250M (± 1.6%) i/s -      6.327M in   5.062566s
        inject block      1.245M (± 1.3%) i/s -      6.344M in   5.096053s

Comparison:
      inject to_proc:  1249993.2 i/s
        inject block:  1245122.2 i/s - same-ish: difference falls within error
       inject symbol:  1240366.3 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     8.978k i/100ms
   Array#map.flatten    10.373k i/100ms
      Array#flat_map    26.439k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    103.829k (± 4.1%) i/s -    520.724k in   5.024125s
   Array#map.flatten    104.835k (± 3.9%) i/s -    529.023k in   5.054422s
      Array#flat_map    267.462k (± 3.1%) i/s -      1.348M in   5.046803s

Comparison:
      Array#flat_map:   267462.3 i/s
   Array#map.flatten:   104835.1 i/s - 2.55x  (± 0.00) slower
Array#map.flatten(1):   103829.4 i/s - 2.58x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   165.562k i/100ms
  Array#reverse_each     1.675M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.650M (± 3.7%) i/s -      8.278M in   5.024823s
  Array#reverse_each     16.533M (± 1.6%) i/s -     83.728M in   5.065465s

Comparison:
  Array#reverse_each: 16533254.7 i/s
  Array#reverse.each:  1649773.1 i/s - 10.02x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       526.257k i/100ms
   Enumerable#detect     3.274M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          5.867M (± 6.4%) i/s -    116.829M in  20.016683s
   Enumerable#detect     32.463M (± 1.6%) i/s -    651.588M in  20.076770s

Comparison:
   Enumerable#detect: 32462976.8 i/s
Enumerable#select.first:  5867422.5 i/s - 5.53x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       149.306k i/100ms
Enumerable#select.last
                       337.089k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.715M (± 4.2%) i/s -      8.660M in   5.057389s
Enumerable#select.last
                          3.401M (± 4.6%) i/s -     17.192M in   5.066308s

Comparison:
Enumerable#select.last:  3400856.4 i/s
Enumerable#reverse.detect:  1715483.6 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         1.990k i/100ms
  Enumerable#sort_by     2.026k i/100ms
     Enumerable#sort     2.491k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         19.448k (±14.9%) i/s -     95.520k in   5.027157s
  Enumerable#sort_by     18.547k (±15.0%) i/s -     91.170k in   5.026740s
     Enumerable#sort     27.814k (± 1.1%) i/s -    139.496k in   5.015810s

Comparison:
     Enumerable#sort:    27814.3 i/s
Enumerable#sort_by (Symbol#to_proc):    19448.2 i/s - 1.43x  (± 0.00) slower
  Enumerable#sort_by:    18547.3 i/s - 1.50x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   385.112k i/100ms
Enumerable#sort_by...first
                         4.074k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      3.950M (± 1.7%) i/s -     20.026M in   5.071861s
Enumerable#sort_by...first
                         50.926k (± 3.8%) i/s -    256.662k in   5.047463s

Comparison:
   Enumerable#min_by:  3949506.2 i/s
Enumerable#sort_by...first:    50926.0 i/s - 77.55x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   173.449k i/100ms
            Hash#dup   201.873k i/100ms
Calculating -------------------------------------
              Hash[]      1.983M (± 4.9%) i/s -      9.887M in   4.998787s
            Hash#dup      2.031M (± 4.3%) i/s -     10.296M in   5.079721s

Comparison:
            Hash#dup:  2030800.4 i/s
              Hash[]:  1982912.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   199.261M i/100ms
  Hash#fetch, symbol   199.585M i/100ms
     Hash#[], string     2.346M i/100ms
  Hash#fetch, string     2.418M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      2.007B (± 1.3%) i/s -     10.162B in   5.063781s
  Hash#fetch, symbol      2.038B (± 2.5%) i/s -     10.378B in   5.095335s
     Hash#[], string    110.775M (± 2.8%) i/s -    553.638M in   5.001622s
  Hash#fetch, string    121.105M (± 2.8%) i/s -    607.028M in   5.016245s

Comparison:
  Hash#fetch, symbol: 2038019476.7 i/s
     Hash#[], symbol: 2007204645.5 i/s - same-ish: difference falls within error
  Hash#fetch, string: 121104942.0 i/s - 16.83x  (± 0.00) slower
     Hash#[], string: 110774501.2 i/s - 18.40x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    50.091M i/100ms
             Hash#[]    51.103M i/100ms
          Hash#[] ||    50.086M i/100ms
          Hash#[] &&    50.452M i/100ms
          Hash#fetch    50.525M i/100ms
 Hash#fetch fallback    50.503M i/100ms
Calculating -------------------------------------
            Hash#dig    503.170M (± 1.3%) i/s -      2.555B in   5.077961s
             Hash#[]    500.272M (± 0.9%) i/s -      2.504B in   5.005764s
          Hash#[] ||    501.203M (± 1.2%) i/s -      2.554B in   5.097290s
          Hash#[] &&    503.345M (± 1.6%) i/s -      2.523B in   5.012964s
          Hash#fetch    502.333M (± 1.3%) i/s -      2.526B in   5.029815s
 Hash#fetch fallback    503.213M (± 1.1%) i/s -      2.525B in   5.018748s

Comparison:
          Hash#[] &&: 503344837.8 i/s
 Hash#fetch fallback: 503212721.4 i/s - same-ish: difference falls within error
            Hash#dig: 503169516.1 i/s - same-ish: difference falls within error
          Hash#fetch: 502333141.3 i/s - same-ish: difference falls within error
          Hash#[] ||: 501202655.8 i/s - same-ish: difference falls within error
             Hash#[]: 500271827.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   202.715M i/100ms
  Hash#fetch + block   204.796M i/100ms
    Hash#fetch + arg   200.699M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      2.004B (± 1.1%) i/s -     10.136B in   5.057305s
  Hash#fetch + block      2.011B (± 2.0%) i/s -     10.240B in   5.094819s
    Hash#fetch + arg      2.021B (± 1.3%) i/s -     10.236B in   5.065688s

Comparison:
    Hash#fetch + arg: 2020923450.6 i/s
  Hash#fetch + block: 2010593850.8 i/s - same-ish: difference falls within error
  Hash#fetch + const: 2004408891.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    13.506k i/100ms
         sort + to_h     7.781k i/100ms
Calculating -------------------------------------
      sort_by + to_h    195.732k (± 6.7%) i/s -    985.938k in   5.060367s
         sort + to_h     69.531k (± 4.0%) i/s -    350.145k in   5.044052s

Comparison:
      sort_by + to_h:   195731.5 i/s
         sort + to_h:    69530.5 i/s - 2.82x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   115.005k i/100ms
       Hash#each_key   132.879k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.267M (±10.8%) i/s -      6.210M in   5.026420s
       Hash#each_key      1.331M (± 3.7%) i/s -      6.644M in   4.999939s

Comparison:
       Hash#each_key:  1330688.0 i/s
      Hash#keys.each:  1266728.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   165.000  i/100ms
           Hash#key?    10.015M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.678k (± 8.8%) i/s -      8.415k in   5.062294s
           Hash#key?    100.942M (± 1.2%) i/s -    510.784M in   5.060828s

Comparison:
           Hash#key?: 100942497.0 i/s
  Hash#keys.include?:     1678.1 i/s - 60154.30x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    21.174k i/100ms
            Hash#[]=    22.045k i/100ms
Calculating -------------------------------------
         Hash#merge!    217.649k (±10.6%) i/s -      1.080M in   5.087670s
            Hash#[]=    222.116k (± 3.6%) i/s -      1.124M in   5.068742s

Comparison:
            Hash#[]=:   222116.1 i/s
         Hash#merge!:   217648.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         9.714k i/100ms
      Hash#merge({})     7.449k i/100ms
 Hash#dup#merge!({})    12.374k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        117.768k (± 5.3%) i/s -    592.554k in   5.047695s
      Hash#merge({})     76.668k (± 4.7%) i/s -    387.348k in   5.064829s
 Hash#dup#merge!({})    126.025k (± 3.1%) i/s -    631.074k in   5.012900s

Comparison:
 Hash#dup#merge!({}):   126025.2 i/s
{}#merge!(Hash) do end:   117767.7 i/s - same-ish: difference falls within error
      Hash#merge({}):    76667.7 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   200.579M i/100ms
          Hash#merge   203.244M i/100ms
Calculating -------------------------------------
        Hash#**other      2.009B (± 1.7%) i/s -     10.230B in   5.094597s
          Hash#merge      2.018B (± 1.5%) i/s -     10.162B in   5.035847s

Comparison:
          Hash#merge: 2018426117.6 i/s
        Hash#**other: 2008504240.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   267.000  i/100ms
         Hash#merge!    21.192k i/100ms
Calculating -------------------------------------
          Hash#merge      3.171k (± 5.2%) i/s -     16.020k in   5.066961s
         Hash#merge!    212.193k (± 3.9%) i/s -      1.060M in   5.001541s

Comparison:
         Hash#merge!:   212193.0 i/s
          Hash#merge:     3170.8 i/s - 66.92x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      935.540k i/100ms
Array#each             871.808k i/100ms
Array#each_w/_object   870.045k i/100ms
Hash#select-include      1.180M i/100ms
Calculating -------------------------------------
Hash#native-slice        10.660M (± 4.7%) i/s -     53.326M in   5.014255s
Array#each                8.833M (± 3.9%) i/s -     44.462M in   5.041693s
Array#each_w/_object      8.836M (± 3.6%) i/s -     44.372M in   5.028916s
Hash#select-include      12.301M (± 4.0%) i/s -     62.516M in   5.090779s

Comparison:
Hash#select-include : 12301204.1 i/s
Hash#native-slice   : 10660424.4 i/s - 1.15x  (± 0.00) slower
Array#each_w/_object:  8835997.9 i/s - 1.39x  (± 0.00) slower
Array#each          :  8833334.2 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   185.000  i/100ms
         Hash#value?   127.046k i/100ms
Calculating -------------------------------------
Hash#values.include?      2.215k (±12.4%) i/s -     10.915k in   5.045678s
         Hash#value?      1.212M (± 1.6%) i/s -      6.098M in   5.034728s

Comparison:
         Hash#value?:  1211521.8 i/s
Hash#values.include?:     2215.1 i/s - 546.93x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   199.585M i/100ms
                send   204.602M i/100ms
      method_missing   199.947M i/100ms
Calculating -------------------------------------
                call      2.013B (± 1.7%) i/s -     10.179B in   5.057409s
                send      2.025B (± 1.7%) i/s -     10.230B in   5.052144s
      method_missing      2.020B (± 1.9%) i/s -     10.197B in   5.048881s

Comparison:
                send: 2025494078.1 i/s
      method_missing: 2020435983.4 i/s - same-ish: difference falls within error
                call: 2013241359.6 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    13.212k i/100ms
      Symbol#to_proc    14.395k i/100ms
Calculating -------------------------------------
               Block    145.461k (± 4.1%) i/s -    726.660k in   5.004762s
      Symbol#to_proc    145.221k (± 3.6%) i/s -    734.145k in   5.062408s

Comparison:
               Block:   145460.9 i/s
      Symbol#to_proc:   145221.2 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   200.380M i/100ms
       block + yield   199.568M i/100ms
        unused block   202.001M i/100ms
               yield   203.537M i/100ms
Calculating -------------------------------------
          block.call      2.006B (± 1.1%) i/s -     10.219B in   5.094404s
       block + yield      2.024B (± 1.5%) i/s -     10.178B in   5.029601s
        unused block      2.036B (± 1.6%) i/s -     10.302B in   5.062201s
               yield      2.003B (± 1.1%) i/s -     10.177B in   5.081541s

Comparison:
        unused block: 2035641037.2 i/s
       block + yield: 2024070346.1 i/s - same-ish: difference falls within error
          block.call: 2006232353.2 i/s - same-ish: difference falls within error
               yield: 2002936604.1 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    13.372k i/100ms
      range#include?   328.000  i/100ms
       range#member?   561.000  i/100ms
       plain compare    30.256k i/100ms
Calculating -------------------------------------
        range#cover?    142.076k (±27.5%) i/s -    655.228k in   5.045306s
      range#include?      6.498k (±25.6%) i/s -     29.520k in   5.082538s
       range#member?      5.979k (±15.7%) i/s -     28.050k in   5.025364s
       plain compare    205.772k (± 4.6%) i/s -      1.029M in   5.011204s

Comparison:
       plain compare:   205771.5 i/s
        range#cover?:   142076.3 i/s - 1.45x  (± 0.00) slower
      range#include?:     6498.3 i/s - 31.67x  (± 0.00) slower
       range#member?:     5979.1 i/s - 34.42x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     8.564M i/100ms
           String#=~     9.391M i/100ms
          Regexp#===     9.310M i/100ms
        String#match     6.213M i/100ms
Calculating -------------------------------------
       String#match?     87.580M (± 1.5%) i/s -    445.349M in   5.086145s
           String#=~     93.016M (± 1.0%) i/s -    469.543M in   5.048489s
          Regexp#===     93.555M (± 1.8%) i/s -    474.789M in   5.076501s
        String#match     61.641M (± 1.4%) i/s -    310.642M in   5.040471s

Comparison:
          Regexp#===: 93555112.6 i/s
           String#=~: 93016240.6 i/s - same-ish: difference falls within error
       String#match?: 87580431.5 i/s - 1.07x  (± 0.00) slower
        String#match: 61640616.0 i/s - 1.52x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.370M i/100ms
      String#casecmp     2.335M i/100ms
Calculating -------------------------------------
String#downcase + ==     14.768M (± 4.4%) i/s -     74.000M in   5.021115s
      String#casecmp     23.173M (± 3.8%) i/s -    116.753M in   5.046164s

Comparison:
      String#casecmp: 23173060.5 i/s
String#downcase + ==: 14767957.2 i/s - 1.57x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     5.631M i/100ms
       String#concat     6.543M i/100ms
       String#append     6.614M i/100ms
         "foo" "bar"   199.771M i/100ms
  "#{'foo'}#{'bar'}"   199.929M i/100ms
Calculating -------------------------------------
            String#+     65.168M (± 4.7%) i/s -    326.572M in   5.022981s
       String#concat     65.055M (± 4.0%) i/s -    327.155M in   5.037480s
       String#append     64.800M (± 4.1%) i/s -    324.074M in   5.010288s
         "foo" "bar"      2.019B (± 1.3%) i/s -     10.188B in   5.045892s
  "#{'foo'}#{'bar'}"      2.019B (± 1.2%) i/s -     10.196B in   5.049797s

Comparison:
         "foo" "bar": 2019468144.5 i/s
  "#{'foo'}#{'bar'}": 2019445111.9 i/s - same-ish: difference falls within error
            String#+: 65167815.1 i/s - 30.99x  (± 0.00) slower
       String#concat: 65054612.4 i/s - 31.04x  (± 0.00) slower
       String#append: 64800178.9 i/s - 31.16x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   199.638M i/100ms
          String#dup   200.495M i/100ms
Calculating -------------------------------------
           String#+@      2.017B (± 1.7%) i/s -     10.182B in   5.050541s
          String#dup      2.015B (± 1.6%) i/s -     10.225B in   5.074785s

Comparison:
           String#+@: 2016527153.7 i/s
          String#dup: 2015438557.6 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   927.668k i/100ms
       String#match?   912.655k i/100ms
    String#end_with?     6.756M i/100ms
Calculating -------------------------------------
           String#=~      9.388M (± 3.0%) i/s -     47.311M in   5.044636s
       String#match?     13.226M (± 1.4%) i/s -     66.624M in   5.038113s
    String#end_with?     68.200M (± 1.6%) i/s -    344.554M in   5.053323s

Comparison:
    String#end_with?: 68200343.1 i/s
       String#match?: 13226352.6 i/s - 5.16x  (± 0.00) slower
           String#=~:  9387779.2 i/s - 7.26x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    96.965k i/100ms
          String#sub   269.606k i/100ms
String#dup["string"]=
                         8.784M i/100ms
Calculating -------------------------------------
         String#gsub      3.220M (± 9.3%) i/s -     15.902M in   4.999896s
          String#sub      3.812M (± 7.7%) i/s -     19.142M in   5.056797s
String#dup["string"]=
                         86.291M (± 1.2%) i/s -    439.185M in   5.090332s

Comparison:
String#dup["string"]=: 86290956.6 i/s
          String#sub:  3812031.9 i/s - 22.64x  (± 0.00) slower
         String#gsub:  3220347.2 i/s - 26.80x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    55.121k i/100ms
           String#tr    79.121k i/100ms
Calculating -------------------------------------
         String#gsub      1.621M (± 7.5%) i/s -      8.048M in   4.998686s
           String#tr    817.255k (± 4.0%) i/s -      4.114M in   5.042609s

Comparison:
         String#gsub:  1621379.6 i/s
           String#tr:   817254.9 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   198.321M i/100ms
         With Freeze   198.888M i/100ms
Calculating -------------------------------------
      Without Freeze      2.021B (± 2.2%) i/s -     10.114B in   5.007404s
         With Freeze      2.016B (± 1.4%) i/s -     10.143B in   5.032141s

Comparison:
      Without Freeze: 2020907419.1 i/s
         With Freeze: 2016076967.8 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     4.211k i/100ms
      String#squeeze    23.348k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     55.180k (± 5.7%) i/s -    277.926k in   5.054515s
      String#squeeze    234.753k (± 3.1%) i/s -      1.191M in   5.077548s

Comparison:
      String#squeeze:   234752.9 i/s
 String#gsub/regex+/:    55180.4 i/s - 4.25x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.958M i/100ms
       String#match?     3.128M i/100ms
  String#start_with?    12.627M i/100ms
Calculating -------------------------------------
           String#=~     19.889M (± 3.6%) i/s -     99.868M in   5.028114s
       String#match?     31.250M (± 1.4%) i/s -    156.382M in   5.005253s
  String#start_with?    126.133M (± 1.9%) i/s -    631.351M in   5.007230s

Comparison:
  String#start_with?: 126133342.0 i/s
       String#match?: 31249945.5 i/s - 4.04x  (± 0.00) slower
           String#=~: 19888868.3 i/s - 6.34x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    80.826k i/100ms
    String#[0, n] ==   150.021k i/100ms
   String#[RANGE] ==   251.008k i/100ms
   String#[0...n] ==   156.866k i/100ms
Calculating -------------------------------------
  String#start_with?      3.533M (± 2.2%) i/s -     17.701M in   5.012228s
    String#[0, n] ==      1.800M (± 4.8%) i/s -      9.001M in   5.013267s
   String#[RANGE] ==      2.545M (± 3.9%) i/s -     12.801M in   5.038228s
   String#[0...n] ==      1.561M (± 4.3%) i/s -      7.843M in   5.034652s

Comparison:
  String#start_with?:  3533103.3 i/s
   String#[RANGE] ==:  2545191.6 i/s - 1.39x  (± 0.00) slower
    String#[0, n] ==:  1800134.7 i/s - 1.96x  (± 0.00) slower
   String#[0...n] ==:  1560964.8 i/s - 2.26x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     8.711M i/100ms
 String#sub!'string'   266.193k i/100ms
String#gsub!'string'   353.216k i/100ms
  String#[/regexp/]=     1.061M i/100ms
 String#sub!/regexp/     1.252M i/100ms
String#gsub!/regexp/   340.472k i/100ms
Calculating -------------------------------------
  String#['string']=     86.157M (± 0.8%) i/s -    435.568M in   5.055824s
 String#sub!'string'      4.497M (±20.6%) i/s -     19.964M in   5.043937s
String#gsub!'string'      3.757M (± 4.4%) i/s -     19.074M in   5.088474s
  String#[/regexp/]=     10.601M (± 3.3%) i/s -     53.041M in   5.009822s
 String#sub!/regexp/     12.790M (± 2.9%) i/s -     65.114M in   5.095689s
String#gsub!/regexp/      3.492M (± 3.0%) i/s -     17.705M in   5.074548s

Comparison:
  String#['string']=: 86157145.1 i/s
 String#sub!/regexp/: 12789898.6 i/s - 6.74x  (± 0.00) slower
  String#[/regexp/]=: 10600517.2 i/s - 8.13x  (± 0.00) slower
 String#sub!'string':  4496647.0 i/s - 19.16x  (± 0.00) slower
String#gsub!'string':  3756571.0 i/s - 22.94x  (± 0.00) slower
String#gsub!/regexp/:  3492170.9 i/s - 24.67x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.487M i/100ms
        String#chomp     3.160M i/100ms
String#delete_suffix     4.060M i/100ms
Calculating -------------------------------------
          String#sub     15.025M (± 3.1%) i/s -     75.851M in   5.053397s
        String#chomp     31.503M (± 1.1%) i/s -    157.992M in   5.015734s
String#delete_suffix     41.353M (± 3.9%) i/s -    207.058M in   5.015100s

Comparison:
String#delete_suffix: 41352849.6 i/s
        String#chomp: 31503114.4 i/s - 1.31x  (± 0.00) slower
          String#sub: 15025402.0 i/s - 2.75x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   205.047M i/100ms
          String#sub     9.910M i/100ms
Calculating -------------------------------------
String#delete_prefix      2.014B (± 1.3%) i/s -     10.252B in   5.092107s
          String#sub     97.784M (± 2.0%) i/s -    495.480M in   5.069047s

Comparison:
String#delete_prefix: 2013714560.0 i/s
          String#sub: 97784013.7 i/s - 20.59x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.234M i/100ms
    String#unpack[0]     1.296M i/100ms
Calculating -------------------------------------
      String#unpack1     12.858M (± 4.3%) i/s -     64.165M in   4.999933s
    String#unpack[0]     12.969M (± 4.0%) i/s -     64.810M in   5.005640s

Comparison:
    String#unpack[0]: 12969056.7 i/s
      String#unpack1: 12857702.1 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 23.0.0-dev-57e53f8a, like ruby 3.1.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    16.915k i/100ms
          Time.parse   178.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    174.187k (±38.2%) i/s -    761.175k in   5.013646s
          Time.parse      4.980k (±23.2%) i/s -     21.894k in   5.047980s

Comparison:
        Time.iso8601:   174187.2 i/s
          Time.parse:     4980.0 i/s - 34.98x  (± 0.00) slower

