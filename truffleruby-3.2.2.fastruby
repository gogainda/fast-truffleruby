$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       318.931M i/100ms
Function with splat arguments
                         1.895k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.187B (± 2.3%) i/s -     15.947B in   5.005765s
Function with splat arguments
                         20.580k (± 9.2%) i/s -    102.330k in   5.025141s

Comparison:
Function with single Array argument: 3187447630.6 i/s
Function with splat arguments:    20580.3 i/s - 154878.36x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   319.109M i/100ms
Sequential Assignment
                       316.365M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.209B (± 1.4%) i/s -     16.275B in   5.072501s
Sequential Assignment
                          3.211B (± 1.5%) i/s -     16.135B in   5.026016s

Comparison:
Sequential Assignment: 3210945976.2 i/s
 Parallel Assignment: 3209067796.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   319.347M i/100ms
       attr_accessor   318.943M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.210B (± 1.4%) i/s -     16.287B in   5.074720s
       attr_accessor      3.194B (± 2.7%) i/s -     16.266B in   5.096972s

Comparison:
   getter_and_setter: 3210075997.3 i/s
       attr_accessor: 3193752302.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    13.505k i/100ms
         respond_to?   322.546M i/100ms
Calculating -------------------------------------
      begin...rescue    100.331k (± 9.1%) i/s -    499.685k in   5.040534s
         respond_to?      3.217B (± 1.4%) i/s -     16.127B in   5.014757s

Comparison:
         respond_to?: 3216661746.8 i/s
      begin...rescue:   100331.0 i/s - 32060.48x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   321.310M i/100ms
             &method   318.044M i/100ms
Calculating -------------------------------------
              normal      3.219B (± 1.4%) i/s -     16.387B in   5.092357s
             &method      3.212B (± 2.1%) i/s -     16.220B in   5.052454s

Comparison:
              normal: 3218595283.0 i/s
             &method: 3211928919.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       140.000  i/100ms
       define_method   163.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          4.195k (±48.9%) i/s -      7.840k in   5.276820s
       define_method     11.949k (±39.6%) i/s -     11.410k in   5.434227s

Comparison:
       define_method:    11949.3 i/s
module_eval with string:     4194.6 i/s - 2.85x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   124.830k i/100ms
       Kernel#format   109.087k i/100ms
            String#%    20.134k i/100ms
Calculating -------------------------------------
         Float#round      1.324M (± 2.4%) i/s -      6.616M in   4.999667s
       Kernel#format      1.074M (± 3.6%) i/s -      5.454M in   5.086206s
            String#%    201.752k (± 9.6%) i/s -      1.007M in   5.067118s

Comparison:
         Float#round:  1324063.6 i/s
       Kernel#format:  1073959.9 i/s - 1.23x  (± 0.00) slower
            String#%:   201751.9 i/s - 6.56x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   321.472M i/100ms
          OpenStruct   322.902M i/100ms
Calculating -------------------------------------
                Hash      3.208B (± 1.6%) i/s -     16.074B in   5.011685s
          OpenStruct      3.219B (± 1.3%) i/s -     16.145B in   5.016468s

Comparison:
          OpenStruct: 3219022320.6 i/s
                Hash: 3208140045.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   321.130M i/100ms
          OpenStruct     4.563k i/100ms
Calculating -------------------------------------
                Hash      3.054B (± 8.5%) i/s -     15.414B in   5.093456s
          OpenStruct     33.262k (±30.5%) i/s -    155.142k in   5.077616s

Comparison:
                Hash: 3054133959.0 i/s
          OpenStruct:    33262.2 i/s - 91819.94x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   941.135k i/100ms
  ancestors.include?   212.096k i/100ms
Calculating -------------------------------------
  less than or equal      9.810M (± 1.6%) i/s -     49.880M in   5.085843s
  ancestors.include?      2.116M (± 7.6%) i/s -     10.605M in   5.056699s

Comparison:
  less than or equal:  9810140.8 i/s
  ancestors.include?:  2115799.6 i/s - 4.64x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     32.075  (± 3.1%) i/s -    161.000  in   5.027458s
         Kernel loop     32.223  (± 3.1%) i/s -    162.000  in   5.029234s

Comparison:
         Kernel loop:       32.2 i/s
          While Loop:       32.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   318.758M i/100ms
         Array#first   320.123M i/100ms
Calculating -------------------------------------
           Array#[0]      3.200B (± 2.2%) i/s -     16.257B in   5.082565s
         Array#first      3.219B (± 1.2%) i/s -     16.326B in   5.073230s

Comparison:
         Array#first: 3218597267.5 i/s
           Array#[0]: 3200241105.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   319.000M i/100ms
          Array#last   321.715M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.195B (± 2.4%) i/s -     16.269B in   5.094452s
          Array#last      3.183B (± 3.2%) i/s -     16.086B in   5.058776s

Comparison:
          Array#[-1]: 3195354213.0 i/s
          Array#last: 3183250737.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   899.175k i/100ms
Calculating -------------------------------------
                find     13.737  (± 0.0%) i/s -     69.000  in   5.026628s
             bsearch      9.149M (± 3.3%) i/s -     45.858M in   5.018122s

Comparison:
             bsearch:  9149337.3 i/s
                find:       13.7 i/s - 666024.08x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.254  (± 0.0%) i/s -      2.000  in   7.859818s
        Array#insert      1.395  (± 0.0%) i/s -      7.000  in   5.019226s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.3 i/s - 5.48x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   321.810M i/100ms
          Array#size   321.864M i/100ms
         Array#count   321.947M i/100ms
Calculating -------------------------------------
        Array#length      3.208B (± 2.0%) i/s -     16.091B in   5.018391s
          Array#size      3.210B (± 1.2%) i/s -     16.093B in   5.013709s
         Array#count      3.208B (± 1.8%) i/s -     16.097B in   5.020315s

Comparison:
          Array#size: 3210333680.0 i/s
        Array#length: 3207666766.1 i/s - same-ish: difference falls within error
         Array#count: 3207533351.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    31.264k i/100ms
        Array#sample     3.824M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    364.721k (± 2.6%) i/s -      1.845M in   5.061180s
        Array#sample     38.642M (± 0.9%) i/s -    195.024M in   5.047440s

Comparison:
        Array#sample: 38641918.1 i/s
 Array#shuffle.first:   364721.1 i/s - 105.95x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   815.000  i/100ms
          Date.parse   532.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     20.660k (±38.2%) i/s -     90.465k in   5.018286s
          Date.parse      8.126k (±26.0%) i/s -     37.772k in   5.028415s

Comparison:
        Date.iso8601:    20660.0 i/s
          Date.parse:     8126.0 i/s - 2.54x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   317.690k i/100ms
           Array#map     1.649M i/100ms
Calculating -------------------------------------
   Array#each + push      3.661M (± 6.5%) i/s -     18.426M in   5.056405s
           Array#map     17.019M (± 8.0%) i/s -     85.733M in   5.078478s

Comparison:
           Array#map: 17019317.3 i/s
   Array#each + push:  3661382.7 i/s - 4.65x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     8.796M i/100ms
               #each    35.401M i/100ms
Calculating -------------------------------------
            For loop    123.285M (± 3.1%) i/s -    615.754M in   4.999845s
               #each    353.663M (± 1.6%) i/s -      1.770B in   5.006344s

Comparison:
               #each: 353662906.9 i/s
            For loop: 123285108.9 i/s - 2.87x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.408M i/100ms
     each_with_index     1.764M i/100ms
Calculating -------------------------------------
          While Loop     14.223M (± 1.1%) i/s -     71.798M in   5.048560s
     each_with_index     17.697M (± 1.6%) i/s -     89.947M in   5.083684s

Comparison:
     each_with_index: 17697467.3 i/s
          While Loop: 14223263.0 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   305.550k i/100ms
      inject to_proc   310.738k i/100ms
        inject block   312.978k i/100ms
Calculating -------------------------------------
       inject symbol      3.110M (± 2.4%) i/s -     15.583M in   5.014155s
      inject to_proc      3.102M (± 2.7%) i/s -     15.537M in   5.013000s
        inject block      3.090M (± 4.3%) i/s -     15.649M in   5.075678s

Comparison:
       inject symbol:  3109845.7 i/s
      inject to_proc:  3101834.3 i/s - same-ish: difference falls within error
        inject block:  3090317.7 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    22.696k i/100ms
   Array#map.flatten    24.505k i/100ms
      Array#flat_map    58.054k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    261.658k (± 8.4%) i/s -      1.316M in   5.075615s
   Array#map.flatten    264.839k (± 8.0%) i/s -      1.323M in   5.036913s
      Array#flat_map    576.322k (± 5.6%) i/s -      2.903M in   5.055222s

Comparison:
      Array#flat_map:   576321.6 i/s
   Array#map.flatten:   264838.8 i/s - 2.18x  (± 0.00) slower
Array#map.flatten(1):   261658.5 i/s - 2.20x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   292.270k i/100ms
  Array#reverse_each     2.381M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.096M (± 6.6%) i/s -     15.490M in   5.037271s
  Array#reverse_each     24.533M (± 8.4%) i/s -    123.795M in   5.077714s

Comparison:
  Array#reverse_each: 24533096.7 i/s
  Array#reverse.each:  3096158.6 i/s - 7.92x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       972.664k i/100ms
   Enumerable#detect     4.602M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.434M (± 7.0%) i/s -    208.150M in  20.084285s
   Enumerable#detect     45.709M (± 2.6%) i/s -    915.839M in  20.052499s

Comparison:
   Enumerable#detect: 45708560.5 i/s
Enumerable#select.first: 10433897.1 i/s - 4.38x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       307.349k i/100ms
Enumerable#select.last
                       543.105k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.207M (± 3.3%) i/s -     16.289M in   5.085326s
Enumerable#select.last
                          5.442M (± 6.2%) i/s -     27.155M in   5.019266s

Comparison:
Enumerable#select.last:  5441797.4 i/s
Enumerable#reverse.detect:  3206937.4 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.495k i/100ms
  Enumerable#sort_by     2.863k i/100ms
     Enumerable#sort     4.267k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         36.718k (±16.6%) i/s -    174.750k in   5.056386s
  Enumerable#sort_by     33.872k (±27.5%) i/s -    143.150k in   5.066485s
     Enumerable#sort     50.941k (± 4.0%) i/s -    256.020k in   5.034652s

Comparison:
     Enumerable#sort:    50940.6 i/s
Enumerable#sort_by (Symbol#to_proc):    36718.3 i/s - 1.39x  (± 0.00) slower
  Enumerable#sort_by:    33872.3 i/s - 1.50x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   817.611k i/100ms
Enumerable#sort_by...first
                         5.292k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      8.211M (± 2.3%) i/s -     41.698M in   5.081285s
Enumerable#sort_by...first
                        103.321k (± 4.3%) i/s -    518.616k in   5.029799s

Comparison:
   Enumerable#min_by:  8210945.9 i/s
Enumerable#sort_by...first:   103321.1 i/s - 79.47x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   804.175k i/100ms
            Hash#dup   858.096k i/100ms
Calculating -------------------------------------
              Hash[]      9.275M (± 6.6%) i/s -     46.642M in   5.052649s
            Hash#dup      8.972M (± 5.6%) i/s -     45.479M in   5.085025s

Comparison:
              Hash[]:  9275465.3 i/s
            Hash#dup:  8972475.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   319.383M i/100ms
  Hash#fetch, symbol   320.566M i/100ms
     Hash#[], string    19.001M i/100ms
  Hash#fetch, string    20.039M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.196B (± 2.8%) i/s -     15.969B in   5.000815s
  Hash#fetch, symbol      3.200B (± 2.6%) i/s -     16.028B in   5.012104s
     Hash#[], string    188.735M (± 1.9%) i/s -    950.068M in   5.035851s
  Hash#fetch, string    200.715M (± 2.3%) i/s -      1.022B in   5.094720s

Comparison:
  Hash#fetch, symbol: 3200293280.9 i/s
     Hash#[], symbol: 3196036872.7 i/s - same-ish: difference falls within error
  Hash#fetch, string: 200714628.5 i/s - 15.94x  (± 0.00) slower
     Hash#[], string: 188735082.4 i/s - 16.96x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    91.942M i/100ms
             Hash#[]    91.957M i/100ms
          Hash#[] ||    92.208M i/100ms
          Hash#[] &&    92.290M i/100ms
          Hash#fetch    91.735M i/100ms
 Hash#fetch fallback    92.175M i/100ms
Calculating -------------------------------------
            Hash#dig    920.073M (± 1.0%) i/s -      4.689B in   5.096941s
             Hash#[]    920.488M (± 0.9%) i/s -      4.690B in   5.095324s
          Hash#[] ||    911.095M (± 2.8%) i/s -      4.610B in   5.064658s
          Hash#[] &&    916.542M (± 2.1%) i/s -      4.614B in   5.036941s
          Hash#fetch    916.355M (± 1.9%) i/s -      4.587B in   5.007431s
 Hash#fetch fallback    921.395M (± 1.1%) i/s -      4.609B in   5.002608s

Comparison:
 Hash#fetch fallback: 921394903.5 i/s
             Hash#[]: 920487829.2 i/s - same-ish: difference falls within error
            Hash#dig: 920073089.8 i/s - same-ish: difference falls within error
          Hash#[] &&: 916541702.8 i/s - same-ish: difference falls within error
          Hash#fetch: 916354783.2 i/s - same-ish: difference falls within error
          Hash#[] ||: 911094558.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   309.652M i/100ms
  Hash#fetch + block   319.142M i/100ms
    Hash#fetch + arg   319.264M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.200B (± 2.5%) i/s -     16.102B in   5.035701s
  Hash#fetch + block      3.203B (± 2.1%) i/s -     16.276B in   5.083289s
    Hash#fetch + arg      3.206B (± 1.9%) i/s -     16.282B in   5.080595s

Comparison:
    Hash#fetch + arg: 3206157578.1 i/s
  Hash#fetch + block: 3203428751.7 i/s - same-ish: difference falls within error
  Hash#fetch + const: 3199731637.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    24.036k i/100ms
         sort + to_h     5.529k i/100ms
Calculating -------------------------------------
      sort_by + to_h    397.293k (±25.5%) i/s -      1.827M in   5.040249s
         sort + to_h    187.146k (±18.2%) i/s -    890.169k in   5.007960s

Comparison:
      sort_by + to_h:   397293.2 i/s
         sort + to_h:   187145.9 i/s - 2.12x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   179.311k i/100ms
       Hash#each_key   240.645k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.296M (±10.2%) i/s -     11.297M in   5.052216s
       Hash#each_key      2.539M (± 6.0%) i/s -     12.754M in   5.050785s

Comparison:
       Hash#each_key:  2538943.8 i/s
      Hash#keys.each:  2296170.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   496.000  i/100ms
           Hash#key?    16.216M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      5.256k (±15.7%) i/s -     25.296k in   5.006741s
           Hash#key?    162.132M (± 1.4%) i/s -    810.795M in   5.001928s

Comparison:
           Hash#key?: 162131882.1 i/s
  Hash#keys.include?:     5255.8 i/s - 30848.44x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    29.548k i/100ms
            Hash#[]=    35.845k i/100ms
Calculating -------------------------------------
         Hash#merge!    356.529k (± 7.1%) i/s -      1.773M in   5.009495s
            Hash#[]=    362.346k (± 4.7%) i/s -      1.828M in   5.056624s

Comparison:
            Hash#[]=:   362346.1 i/s
         Hash#merge!:   356529.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        34.534k i/100ms
      Hash#merge({})    22.016k i/100ms
 Hash#dup#merge!({})    31.125k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        384.047k (±10.6%) i/s -      1.899M in   5.008420s
      Hash#merge({})    241.864k (± 7.3%) i/s -      1.211M in   5.045451s
 Hash#dup#merge!({})    317.796k (± 9.6%) i/s -      1.587M in   5.047781s

Comparison:
{}#merge!(Hash) do end:   384046.6 i/s
 Hash#dup#merge!({}):   317796.3 i/s - same-ish: difference falls within error
      Hash#merge({}):   241863.6 i/s - 1.59x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   319.117M i/100ms
          Hash#merge   316.302M i/100ms
Calculating -------------------------------------
        Hash#**other      3.194B (± 2.4%) i/s -     15.956B in   4.999334s
          Hash#merge      3.202B (± 2.1%) i/s -     16.131B in   5.039950s

Comparison:
          Hash#merge: 3202283612.3 i/s
        Hash#**other: 3193514588.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   985.000  i/100ms
         Hash#merge!    36.576k i/100ms
Calculating -------------------------------------
          Hash#merge     14.513k (± 9.9%) i/s -     71.905k in   5.023169s
         Hash#merge!    364.698k (± 6.0%) i/s -      1.865M in   5.141576s

Comparison:
         Hash#merge!:   364698.1 i/s
          Hash#merge:    14513.1 i/s - 25.13x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.765M i/100ms
Array#each               1.635M i/100ms
Array#each_w/_object     1.589M i/100ms
Hash#select-include      2.340M i/100ms
Calculating -------------------------------------
Hash#native-slice        18.482M (± 6.7%) i/s -     93.536M in   5.090487s
Array#each               16.439M (± 6.2%) i/s -     81.766M in   5.000401s
Array#each_w/_object     16.443M (± 6.5%) i/s -     82.640M in   5.056476s
Hash#select-include      23.880M (± 7.2%) i/s -    119.352M in   5.034115s

Comparison:
Hash#select-include : 23879866.0 i/s
Hash#native-slice   : 18482328.5 i/s - 1.29x  (± 0.00) slower
Array#each_w/_object: 16442663.6 i/s - 1.45x  (± 0.00) slower
Array#each          : 16438552.9 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   376.000  i/100ms
         Hash#value?     6.374k i/100ms
Calculating -------------------------------------
Hash#values.include?      6.754k (±17.2%) i/s -     31.960k in   5.010820s
         Hash#value?     62.683k (± 1.5%) i/s -    318.700k in   5.085431s

Comparison:
         Hash#value?:    62682.7 i/s
Hash#values.include?:     6753.9 i/s - 9.28x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   321.682M i/100ms
                send   318.475M i/100ms
      method_missing   322.918M i/100ms
Calculating -------------------------------------
                call      3.208B (± 1.9%) i/s -     16.084B in   5.015962s
                send      3.207B (± 2.1%) i/s -     16.242B in   5.067365s
      method_missing      3.184B (± 3.0%) i/s -     16.146B in   5.075216s

Comparison:
                call: 3207845289.6 i/s
                send: 3206837469.9 i/s - same-ish: difference falls within error
      method_missing: 3184355378.3 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    47.181k i/100ms
      Symbol#to_proc    67.889k i/100ms
Calculating -------------------------------------
               Block    762.270k (±15.7%) i/s -      3.727M in   5.034777s
      Symbol#to_proc    763.451k (±14.6%) i/s -      3.734M in   5.005599s

Comparison:
      Symbol#to_proc:   763450.7 i/s
               Block:   762269.5 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   314.056M i/100ms
       block + yield   319.156M i/100ms
        unused block   322.921M i/100ms
               yield   322.850M i/100ms
Calculating -------------------------------------
          block.call      3.220B (± 0.9%) i/s -     16.331B in   5.072641s
       block + yield      3.196B (± 5.1%) i/s -     16.277B in   5.112880s
        unused block      3.210B (± 1.9%) i/s -     16.146B in   5.031345s
               yield      3.207B (± 2.2%) i/s -     16.142B in   5.035380s

Comparison:
          block.call: 3219696309.6 i/s
        unused block: 3210390668.3 i/s - same-ish: difference falls within error
               yield: 3207453273.4 i/s - same-ish: difference falls within error
       block + yield: 3195842050.4 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     5.466k i/100ms
      range#include?   141.000  i/100ms
       range#member?   221.000  i/100ms
       plain compare     9.751k i/100ms
Calculating -------------------------------------
        range#cover?     59.488k (±26.1%) i/s -    273.300k in   5.053430s
      range#include?      2.844k (±37.7%) i/s -     11.844k in   5.033156s
       range#member?      2.384k (±36.1%) i/s -     10.608k in   5.087169s
       plain compare     93.722k (±26.4%) i/s -    429.044k in   5.034395s

Comparison:
       plain compare:    93721.7 i/s
        range#cover?:    59487.7 i/s - same-ish: difference falls within error
      range#include?:     2844.4 i/s - 32.95x  (± 0.00) slower
       range#member?:     2383.7 i/s - 39.32x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    13.397M i/100ms
           String#=~    12.985M i/100ms
          Regexp#===    13.045M i/100ms
        String#match    10.564M i/100ms
Calculating -------------------------------------
       String#match?    135.698M (± 1.8%) i/s -    683.267M in   5.036898s
           String#=~    133.467M (± 1.5%) i/s -    675.195M in   5.060168s
          Regexp#===    131.999M (± 1.4%) i/s -    665.293M in   5.041195s
        String#match    106.849M (± 2.0%) i/s -    538.749M in   5.044219s

Comparison:
       String#match?: 135698149.2 i/s
           String#=~: 133466546.0 i/s - same-ish: difference falls within error
          Regexp#===: 131998938.3 i/s - same-ish: difference falls within error
        String#match: 106849165.3 i/s - 1.27x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.620M i/100ms
      String#casecmp     4.709M i/100ms
Calculating -------------------------------------
String#downcase + ==     29.256M (± 6.3%) i/s -    146.731M in   5.042365s
      String#casecmp     46.962M (± 4.8%) i/s -    235.460M in   5.026247s

Comparison:
      String#casecmp: 46961980.1 i/s
String#downcase + ==: 29256077.8 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+    10.532M i/100ms
       String#concat    10.947M i/100ms
       String#append    11.018M i/100ms
         "foo" "bar"   322.924M i/100ms
  "#{'foo'}#{'bar'}"   322.945M i/100ms
Calculating -------------------------------------
            String#+    108.050M (± 5.8%) i/s -    547.663M in   5.093656s
       String#concat    108.071M (± 3.7%) i/s -    547.340M in   5.072147s
       String#append    107.997M (± 3.2%) i/s -    539.869M in   5.004300s
         "foo" "bar"      3.218B (± 2.2%) i/s -     16.146B in   5.020663s
  "#{'foo'}#{'bar'}"      3.201B (± 3.0%) i/s -     16.147B in   5.049670s

Comparison:
         "foo" "bar": 3217712654.3 i/s
  "#{'foo'}#{'bar'}": 3200937612.3 i/s - same-ish: difference falls within error
       String#concat: 108071368.8 i/s - 29.77x  (± 0.00) slower
            String#+: 108050246.1 i/s - 29.78x  (± 0.00) slower
       String#append: 107996508.5 i/s - 29.79x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   322.222M i/100ms
          String#dup   305.924M i/100ms
Calculating -------------------------------------
           String#+@      3.201B (± 2.4%) i/s -     16.111B in   5.036746s
          String#dup      3.211B (± 1.4%) i/s -     16.214B in   5.051207s

Comparison:
          String#dup: 3210580332.5 i/s
           String#+@: 3200748330.9 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.387M i/100ms
       String#match?     1.650M i/100ms
    String#end_with?    10.766M i/100ms
Calculating -------------------------------------
           String#=~     14.128M (± 3.0%) i/s -     70.751M in   5.012779s
       String#match?     16.385M (± 0.7%) i/s -     82.518M in   5.036408s
    String#end_with?    107.314M (± 1.3%) i/s -    538.298M in   5.016996s

Comparison:
    String#end_with?: 107313880.0 i/s
       String#match?: 16385011.5 i/s - 6.55x  (± 0.00) slower
           String#=~: 14128116.8 i/s - 7.60x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   529.373k i/100ms
          String#sub   948.592k i/100ms
String#dup["string"]=
                         9.779M i/100ms
Calculating -------------------------------------
         String#gsub      8.349M (± 9.6%) i/s -     41.291M in   5.005458s
          String#sub      9.358M (±10.7%) i/s -     46.481M in   5.036581s
String#dup["string"]=
                         97.085M (± 4.6%) i/s -    488.930M in   5.051980s

Comparison:
String#dup["string"]=: 97085321.7 i/s
          String#sub:  9358393.3 i/s - 10.37x  (± 0.00) slower
         String#gsub:  8348983.0 i/s - 11.63x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   180.907k i/100ms
           String#tr   168.766k i/100ms
Calculating -------------------------------------
         String#gsub      4.159M (±11.9%) i/s -     20.442M in   5.023612s
           String#tr      1.739M (± 4.4%) i/s -      8.776M in   5.056386s

Comparison:
         String#gsub:  4159378.5 i/s
           String#tr:  1739455.9 i/s - 2.39x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   322.590M i/100ms
         With Freeze   322.827M i/100ms
Calculating -------------------------------------
      Without Freeze      3.185B (± 2.9%) i/s -     16.129B in   5.068346s
         With Freeze      3.217B (± 1.2%) i/s -     16.141B in   5.018549s

Comparison:
         With Freeze: 3216777987.9 i/s
      Without Freeze: 3185229045.5 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     8.559k i/100ms
      String#squeeze    71.918k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    155.862k (± 9.2%) i/s -    778.869k in   5.058563s
      String#squeeze    714.537k (± 4.9%) i/s -      3.596M in   5.045546s

Comparison:
      String#squeeze:   714536.8 i/s
 String#gsub/regex+/:   155861.8 i/s - 4.58x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     3.647M i/100ms
       String#match?     6.386M i/100ms
  String#start_with?    12.307M i/100ms
Calculating -------------------------------------
           String#=~     44.239M (± 2.9%) i/s -    222.458M in   5.033011s
       String#match?     63.889M (± 1.5%) i/s -    325.686M in   5.098893s
  String#start_with?    122.615M (± 3.5%) i/s -    615.361M in   5.025768s

Comparison:
  String#start_with?: 122614679.7 i/s
       String#match?: 63889323.4 i/s - 1.92x  (± 0.00) slower
           String#=~: 44238822.6 i/s - 2.77x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   139.366k i/100ms
    String#[0, n] ==   272.397k i/100ms
   String#[RANGE] ==   337.993k i/100ms
   String#[0...n] ==   281.676k i/100ms
Calculating -------------------------------------
  String#start_with?      6.856M (± 2.4%) i/s -     34.284M in   5.005481s
    String#[0, n] ==      2.792M (± 5.8%) i/s -     13.892M in   5.001067s
   String#[RANGE] ==      3.341M (± 5.8%) i/s -     16.900M in   5.084064s
   String#[0...n] ==      2.712M (± 7.4%) i/s -     13.520M in   5.023974s

Comparison:
  String#start_with?:  6855778.2 i/s
   String#[RANGE] ==:  3340620.0 i/s - 2.05x  (± 0.00) slower
    String#[0, n] ==:  2791584.8 i/s - 2.46x  (± 0.00) slower
   String#[0...n] ==:  2712199.4 i/s - 2.53x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     9.695M i/100ms
 String#sub!'string'   959.245k i/100ms
String#gsub!'string'   843.993k i/100ms
  String#[/regexp/]=     2.586M i/100ms
 String#sub!/regexp/     1.312M i/100ms
String#gsub!/regexp/   828.972k i/100ms
Calculating -------------------------------------
  String#['string']=     97.075M (± 3.5%) i/s -    484.727M in   5.000832s
 String#sub!'string'      9.699M (±17.4%) i/s -     44.125M in   5.034215s
String#gsub!'string'      8.722M (± 8.9%) i/s -     43.888M in   5.080270s
  String#[/regexp/]=     26.400M (± 3.2%) i/s -    131.874M in   5.000636s
 String#sub!/regexp/     13.652M (± 9.7%) i/s -     68.229M in   5.052499s
String#gsub!/regexp/      8.145M (± 8.6%) i/s -     40.620M in   5.032552s

Comparison:
  String#['string']=: 97074914.1 i/s
  String#[/regexp/]=: 26399968.4 i/s - 3.68x  (± 0.00) slower
 String#sub!/regexp/: 13652179.1 i/s - 7.11x  (± 0.00) slower
 String#sub!'string':  9698532.1 i/s - 10.01x  (± 0.00) slower
String#gsub!'string':  8721759.0 i/s - 11.13x  (± 0.00) slower
String#gsub!/regexp/:  8144755.2 i/s - 11.92x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     2.868M i/100ms
        String#chomp     5.586M i/100ms
String#delete_suffix    14.576M i/100ms
Calculating -------------------------------------
          String#sub     29.697M (± 2.6%) i/s -    149.118M in   5.025015s
        String#chomp     54.959M (± 2.6%) i/s -    279.308M in   5.085837s
String#delete_suffix    146.175M (± 9.6%) i/s -    728.792M in   5.038805s

Comparison:
String#delete_suffix: 146175232.3 i/s
        String#chomp: 54959260.0 i/s - 2.66x  (± 0.00) slower
          String#sub: 29696747.6 i/s - 4.92x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   305.287M i/100ms
          String#sub    13.680M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.200B (± 2.3%) i/s -     16.180B in   5.059885s
          String#sub    137.006M (± 1.6%) i/s -    697.682M in   5.093733s

Comparison:
String#delete_prefix: 3199618590.7 i/s
          String#sub: 137005589.0 i/s - 23.35x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.768M i/100ms
    String#unpack[0]     1.830M i/100ms
Calculating -------------------------------------
      String#unpack1     19.103M (± 5.1%) i/s -     95.454M in   5.010537s
    String#unpack[0]     19.111M (± 6.1%) i/s -     96.968M in   5.101051s

Comparison:
    String#unpack[0]: 19110618.3 i/s
      String#unpack1: 19103404.6 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.0.0-dev-5a199d82, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.590k i/100ms
          Time.parse   200.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    491.891k (±23.1%) i/s -      2.262M in   5.040179s
          Time.parse      6.700k (±11.7%) i/s -     32.800k in   5.006070s

Comparison:
        Time.iso8601:   491891.4 i/s
          Time.parse:     6699.9 i/s - 73.42x  (± 0.00) slower

