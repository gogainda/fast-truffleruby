$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       280.395M i/100ms
Function with splat arguments
                         1.674k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.020B (± 3.3%) i/s -     15.141B in   5.019723s
Function with splat arguments
                         18.433k (± 9.1%) i/s -     92.070k in   5.045197s

Comparison:
Function with single Array argument: 3020023824.6 i/s
Function with splat arguments:    18433.0 i/s - 163837.67x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   304.737M i/100ms
Sequential Assignment
                       301.885M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.039B (± 1.5%) i/s -     15.237B in   5.015394s
Sequential Assignment
                          3.034B (± 2.1%) i/s -     15.396B in   5.076553s

Comparison:
 Parallel Assignment: 3038728533.0 i/s
Sequential Assignment: 3034211677.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   292.419M i/100ms
       attr_accessor   305.650M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.029B (± 2.5%) i/s -     15.206B in   5.023923s
       attr_accessor      3.047B (± 1.9%) i/s -     15.282B in   5.017528s

Comparison:
       attr_accessor: 3047013389.1 i/s
   getter_and_setter: 3028717608.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    10.930k i/100ms
         respond_to?   306.681M i/100ms
Calculating -------------------------------------
      begin...rescue    100.554k (± 7.1%) i/s -    502.780k in   5.035629s
         respond_to?      3.038B (± 3.1%) i/s -     15.334B in   5.053183s

Comparison:
         respond_to?: 3037788843.6 i/s
      begin...rescue:   100553.9 i/s - 30210.55x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   301.335M i/100ms
             &method   303.086M i/100ms
Calculating -------------------------------------
              normal      3.023B (± 2.8%) i/s -     15.368B in   5.088359s
             &method      3.037B (± 2.9%) i/s -     15.457B in   5.093477s

Comparison:
             &method: 3037421614.7 i/s
              normal: 3022837240.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       174.000  i/100ms
       define_method   149.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.980k (±71.1%) i/s -      6.612k in   5.072267s
       define_method     11.260k (±47.2%) i/s -     10.579k in   6.833350s

Comparison:
       define_method:    11260.1 i/s
module_eval with string:     2980.3 i/s - 3.78x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   122.637k i/100ms
       Kernel#format   103.984k i/100ms
            String#%    20.464k i/100ms
Calculating -------------------------------------
         Float#round      1.242M (± 2.3%) i/s -      6.254M in   5.039150s
       Kernel#format      1.027M (± 3.2%) i/s -      5.199M in   5.069859s
            String#%    204.946k (± 9.2%) i/s -      1.023M in   5.051722s

Comparison:
         Float#round:  1241838.1 i/s
       Kernel#format:  1026662.8 i/s - 1.21x  (± 0.00) slower
            String#%:   204946.1 i/s - 6.06x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   294.093M i/100ms
          OpenStruct   301.532M i/100ms
Calculating -------------------------------------
                Hash      3.020B (± 2.7%) i/s -     15.293B in   5.066825s
          OpenStruct      3.041B (± 2.4%) i/s -     15.378B in   5.060727s

Comparison:
          OpenStruct: 3040612631.2 i/s
                Hash: 3020497488.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   305.940M i/100ms
          OpenStruct     4.564k i/100ms
Calculating -------------------------------------
                Hash      2.947B (± 6.3%) i/s -     14.685B in   5.005863s
          OpenStruct     45.749k (±16.7%) i/s -    223.636k in   5.077010s

Comparison:
                Hash: 2947159298.9 i/s
          OpenStruct:    45749.4 i/s - 64419.60x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   953.459k i/100ms
  ancestors.include?   203.944k i/100ms
Calculating -------------------------------------
  less than or equal      9.506M (± 6.1%) i/s -     47.673M in   5.041927s
  ancestors.include?      2.096M (± 7.7%) i/s -     10.401M in   4.999810s

Comparison:
  less than or equal:  9505505.9 i/s
  ancestors.include?:  2096274.2 i/s - 4.53x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     30.184  (± 6.6%) i/s -    151.000  in   5.025682s
         Kernel loop     30.595  (± 3.3%) i/s -    153.000  in   5.012245s

Comparison:
         Kernel loop:       30.6 i/s
          While Loop:       30.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   306.379M i/100ms
         Array#first   296.925M i/100ms
Calculating -------------------------------------
           Array#[0]      3.026B (± 2.2%) i/s -     15.319B in   5.065517s
         Array#first      3.046B (± 1.8%) i/s -     15.440B in   5.070509s

Comparison:
         Array#first: 3046056529.2 i/s
           Array#[0]: 3025637997.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   299.751M i/100ms
          Array#last   301.796M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.030B (± 2.9%) i/s -     15.287B in   5.050323s
          Array#last      3.050B (± 2.1%) i/s -     15.392B in   5.048986s

Comparison:
          Array#last: 3050038929.0 i/s
          Array#[-1]: 3029716698.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   908.001k i/100ms
Calculating -------------------------------------
                find     13.683  (± 0.0%) i/s -     69.000  in   5.047116s
             bsearch      9.104M (± 3.2%) i/s -     46.308M in   5.092100s

Comparison:
             bsearch:  9103922.8 i/s
                find:       13.7 i/s - 665353.26x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.212  (± 0.0%) i/s -      2.000  in   9.429304s
        Array#insert      1.400  (± 0.0%) i/s -      8.000  in   5.713449s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.2 i/s - 6.60x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   298.123M i/100ms
          Array#size   303.730M i/100ms
         Array#count   295.219M i/100ms
Calculating -------------------------------------
        Array#length      3.014B (± 3.2%) i/s -     15.204B in   5.050225s
          Array#size      3.035B (± 2.6%) i/s -     15.187B in   5.007389s
         Array#count      3.043B (± 2.1%) i/s -     15.351B in   5.046674s

Comparison:
         Array#count: 3043306091.8 i/s
          Array#size: 3035000295.8 i/s - same-ish: difference falls within error
        Array#length: 3013734457.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    36.072k i/100ms
        Array#sample     3.827M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    363.634k (± 2.5%) i/s -      1.840M in   5.062471s
        Array#sample     38.154M (± 0.9%) i/s -    191.339M in   5.015336s

Comparison:
        Array#sample: 38154040.7 i/s
 Array#shuffle.first:   363634.0 i/s - 104.92x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   972.000  i/100ms
          Date.parse   592.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     19.835k (±39.3%) i/s -     85.536k in   5.015029s
          Date.parse      8.966k (±19.7%) i/s -     43.216k in   5.068026s

Comparison:
        Date.iso8601:    19834.6 i/s
          Date.parse:     8965.7 i/s - 2.21x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   338.838k i/100ms
           Array#map     1.569M i/100ms
Calculating -------------------------------------
   Array#each + push      3.315M (± 7.2%) i/s -     16.603M in   5.034370s
           Array#map     16.822M (± 9.2%) i/s -     84.739M in   5.089498s

Comparison:
           Array#map: 16822098.1 i/s
   Array#each + push:  3314598.7 i/s - 5.08x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    10.704M i/100ms
               #each    35.259M i/100ms
Calculating -------------------------------------
            For loop    117.475M (± 2.5%) i/s -    588.737M in   5.014729s
               #each    348.316M (± 1.6%) i/s -      1.763B in   5.062694s

Comparison:
               #each: 348315673.6 i/s
            For loop: 117475276.1 i/s - 2.97x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.402M i/100ms
     each_with_index     1.757M i/100ms
Calculating -------------------------------------
          While Loop     14.182M (± 1.3%) i/s -     71.511M in   5.043206s
     each_with_index     17.561M (± 1.5%) i/s -     87.825M in   5.002366s

Comparison:
     each_with_index: 17560900.5 i/s
          While Loop: 14182186.0 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   308.852k i/100ms
      inject to_proc   310.113k i/100ms
        inject block   305.414k i/100ms
Calculating -------------------------------------
       inject symbol      3.072M (± 4.7%) i/s -     15.443M in   5.041285s
      inject to_proc      3.011M (± 2.8%) i/s -     15.196M in   5.050319s
        inject block      3.027M (± 4.7%) i/s -     15.271M in   5.059303s

Comparison:
       inject symbol:  3071516.5 i/s
        inject block:  3026785.0 i/s - same-ish: difference falls within error
      inject to_proc:  3011353.1 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    22.406k i/100ms
   Array#map.flatten    24.952k i/100ms
      Array#flat_map    57.316k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    261.754k (± 8.3%) i/s -      1.300M in   5.008139s
   Array#map.flatten    265.687k (± 7.6%) i/s -      1.322M in   5.022049s
      Array#flat_map    576.942k (± 3.7%) i/s -      2.923M in   5.073806s

Comparison:
      Array#flat_map:   576942.0 i/s
   Array#map.flatten:   265686.6 i/s - 2.17x  (± 0.00) slower
Array#map.flatten(1):   261753.9 i/s - 2.20x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   299.646k i/100ms
  Array#reverse_each     2.885M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.165M (± 3.0%) i/s -     15.881M in   5.021920s
  Array#reverse_each     23.747M (± 4.5%) i/s -    121.150M in   5.111568s

Comparison:
  Array#reverse_each: 23747276.3 i/s
  Array#reverse.each:  3165241.8 i/s - 7.50x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       709.681k i/100ms
   Enumerable#detect     4.607M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.412M (± 8.4%) i/s -    206.517M in  20.046285s
   Enumerable#detect     45.863M (± 2.1%) i/s -    916.803M in  19.999751s

Comparison:
   Enumerable#detect: 45863376.1 i/s
Enumerable#select.first: 10411854.3 i/s - 4.40x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       319.619k i/100ms
Enumerable#select.last
                       508.970k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.185M (± 4.6%) i/s -     15.981M in   5.028360s
Enumerable#select.last
                          5.377M (± 6.3%) i/s -     26.975M in   5.045451s

Comparison:
Enumerable#select.last:  5377314.7 i/s
Enumerable#reverse.detect:  3185320.4 i/s - 1.69x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.169k i/100ms
  Enumerable#sort_by     4.117k i/100ms
     Enumerable#sort     4.791k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         28.293k (±32.0%) i/s -    121.464k in   5.004200s
  Enumerable#sort_by     37.890k (±23.6%) i/s -    168.797k in   5.137346s
     Enumerable#sort     55.380k (± 4.3%) i/s -    277.878k in   5.027735s

Comparison:
     Enumerable#sort:    55380.3 i/s
  Enumerable#sort_by:    37890.2 i/s - 1.46x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    28293.3 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   747.973k i/100ms
Enumerable#sort_by...first
                         8.732k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      8.244M (± 1.6%) i/s -     41.886M in   5.082093s
Enumerable#sort_by...first
                        105.072k (± 2.9%) i/s -    532.652k in   5.073711s

Comparison:
   Enumerable#min_by:  8244271.9 i/s
Enumerable#sort_by...first:   105071.6 i/s - 78.46x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   657.184k i/100ms
            Hash#dup   698.935k i/100ms
Calculating -------------------------------------
              Hash[]      7.644M (±10.4%) i/s -     38.117M in   5.051159s
            Hash#dup      7.524M (±11.4%) i/s -     37.044M in   5.010833s

Comparison:
              Hash[]:  7643578.4 i/s
            Hash#dup:  7524267.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   308.243M i/100ms
  Hash#fetch, symbol   297.523M i/100ms
     Hash#[], string    20.194M i/100ms
  Hash#fetch, string    19.887M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.112B (± 1.7%) i/s -     15.720B in   5.053709s
  Hash#fetch, symbol      3.076B (± 1.8%) i/s -     15.471B in   5.031658s
     Hash#[], string    200.628M (± 2.0%) i/s -      1.010B in   5.034732s
  Hash#fetch, string    200.906M (± 1.9%) i/s -      1.014B in   5.050415s

Comparison:
     Hash#[], symbol: 3111578029.4 i/s
  Hash#fetch, symbol: 3075802566.8 i/s - same-ish: difference falls within error
  Hash#fetch, string: 200906491.2 i/s - 15.49x  (± 0.00) slower
     Hash#[], string: 200627994.1 i/s - 15.51x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    91.206M i/100ms
             Hash#[]    92.330M i/100ms
          Hash#[] ||    92.363M i/100ms
          Hash#[] &&    92.325M i/100ms
          Hash#fetch    92.361M i/100ms
 Hash#fetch fallback    92.334M i/100ms
Calculating -------------------------------------
            Hash#dig    919.131M (± 1.5%) i/s -      4.651B in   5.061944s
             Hash#[]    918.681M (± 1.8%) i/s -      4.616B in   5.026804s
          Hash#[] ||    916.905M (± 2.8%) i/s -      4.618B in   5.041393s
          Hash#[] &&    919.868M (± 1.5%) i/s -      4.616B in   5.019498s
          Hash#fetch    914.347M (± 4.2%) i/s -      4.618B in   5.062108s
 Hash#fetch fallback    922.414M (± 0.7%) i/s -      4.617B in   5.005256s

Comparison:
 Hash#fetch fallback: 922414070.1 i/s
          Hash#[] &&: 919868183.1 i/s - same-ish: difference falls within error
            Hash#dig: 919130516.0 i/s - same-ish: difference falls within error
             Hash#[]: 918681444.9 i/s - same-ish: difference falls within error
          Hash#[] ||: 916904541.9 i/s - same-ish: difference falls within error
          Hash#fetch: 914347381.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   304.903M i/100ms
  Hash#fetch + block   306.983M i/100ms
    Hash#fetch + arg   318.326M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.098B (± 1.8%) i/s -     15.550B in   5.021174s
  Hash#fetch + block      3.057B (± 2.8%) i/s -     15.349B in   5.025938s
    Hash#fetch + arg      3.077B (± 3.2%) i/s -     15.598B in   5.074508s

Comparison:
  Hash#fetch + const: 3097960656.6 i/s
    Hash#fetch + arg: 3077079489.5 i/s - same-ish: difference falls within error
  Hash#fetch + block: 3056506046.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    19.723k i/100ms
         sort + to_h     7.464k i/100ms
Calculating -------------------------------------
      sort_by + to_h    398.948k (±27.6%) i/s -      1.854M in   5.069940s
         sort + to_h    197.233k (±17.0%) i/s -    947.928k in   5.008646s

Comparison:
      sort_by + to_h:   398947.9 i/s
         sort + to_h:   197232.8 i/s - 2.02x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   197.491k i/100ms
       Hash#each_key   255.467k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.332M (±11.1%) i/s -     11.454M in   5.043580s
       Hash#each_key      2.582M (± 3.6%) i/s -     13.029M in   5.053380s

Comparison:
       Hash#each_key:  2581586.4 i/s
      Hash#keys.each:  2332101.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   319.000  i/100ms
           Hash#key?     3.336M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      3.167k (±12.4%) i/s -     15.631k in   5.033788s
           Hash#key?     33.210M (± 0.2%) i/s -    166.807M in   5.022790s

Comparison:
           Hash#key?: 33210271.4 i/s
  Hash#keys.include?:     3167.3 i/s - 10485.26x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    45.163k i/100ms
            Hash#[]=    59.006k i/100ms
Calculating -------------------------------------
         Hash#merge!    599.183k (± 8.4%) i/s -      2.981M in   5.020745s
            Hash#[]=    605.611k (± 7.7%) i/s -      3.009M in   5.009410s

Comparison:
            Hash#[]=:   605611.5 i/s
         Hash#merge!:   599183.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        36.054k i/100ms
      Hash#merge({})    19.046k i/100ms
 Hash#dup#merge!({})    31.902k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        384.502k (±11.8%) i/s -      1.911M in   5.058477s
      Hash#merge({})    203.936k (± 7.4%) i/s -      1.028M in   5.073584s
 Hash#dup#merge!({})    319.834k (± 9.1%) i/s -      1.595M in   5.044092s

Comparison:
{}#merge!(Hash) do end:   384502.2 i/s
 Hash#dup#merge!({}):   319833.8 i/s - same-ish: difference falls within error
      Hash#merge({}):   203936.2 i/s - 1.89x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   308.781M i/100ms
          Hash#merge   313.577M i/100ms
Calculating -------------------------------------
        Hash#**other      3.149B (± 2.7%) i/s -     15.748B in   5.004960s
          Hash#merge      3.161B (± 5.3%) i/s -     15.992B in   5.077564s

Comparison:
          Hash#merge: 3160937373.5 i/s
        Hash#**other: 3148761205.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.044k i/100ms
         Hash#merge!    63.042k i/100ms
Calculating -------------------------------------
          Hash#merge     12.608k (±11.7%) i/s -     62.640k in   5.051350s
         Hash#merge!    640.195k (± 6.8%) i/s -      3.215M in   5.048898s

Comparison:
         Hash#merge!:   640195.4 i/s
          Hash#merge:    12608.0 i/s - 50.78x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.730M i/100ms
Array#each               1.527M i/100ms
Array#each_w/_object     1.490M i/100ms
Hash#select-include      2.240M i/100ms
Calculating -------------------------------------
Hash#native-slice        18.619M (± 6.4%) i/s -     93.426M in   5.047514s
Array#each               15.658M (± 6.1%) i/s -     79.395M in   5.096603s
Array#each_w/_object     15.633M (± 6.8%) i/s -     78.952M in   5.087087s
Hash#select-include      23.887M (± 6.6%) i/s -    118.713M in   4.999905s

Comparison:
Hash#select-include : 23886626.7 i/s
Hash#native-slice   : 18618992.6 i/s - 1.28x  (± 0.00) slower
Array#each          : 15658404.6 i/s - 1.53x  (± 0.00) slower
Array#each_w/_object: 15632592.6 i/s - 1.53x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   261.000  i/100ms
         Hash#value?   672.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      3.020k (±11.2%) i/s -     14.877k in   5.020626s
         Hash#value?      6.730k (± 0.9%) i/s -     34.272k in   5.093237s

Comparison:
         Hash#value?:     6729.5 i/s
Hash#values.include?:     3020.5 i/s - 2.23x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   302.573M i/100ms
                send   312.373M i/100ms
      method_missing   312.655M i/100ms
Calculating -------------------------------------
                call      3.104B (± 2.8%) i/s -     15.734B in   5.072370s
                send      3.098B (± 1.3%) i/s -     15.619B in   5.041514s
      method_missing      3.091B (± 2.0%) i/s -     15.633B in   5.059407s

Comparison:
                call: 3104495990.8 i/s
                send: 3098487891.1 i/s - same-ish: difference falls within error
      method_missing: 3091192458.6 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    68.391k i/100ms
      Symbol#to_proc    70.347k i/100ms
Calculating -------------------------------------
               Block    731.650k (±11.7%) i/s -      3.625M in   5.038382s
      Symbol#to_proc    748.424k (±13.5%) i/s -      3.658M in   5.002046s

Comparison:
      Symbol#to_proc:   748423.6 i/s
               Block:   731649.7 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   316.740M i/100ms
       block + yield   312.991M i/100ms
        unused block   321.787M i/100ms
               yield   318.180M i/100ms
Calculating -------------------------------------
          block.call      3.187B (± 2.5%) i/s -     16.154B in   5.072458s
       block + yield      3.112B (± 2.4%) i/s -     15.650B in   5.032005s
        unused block      3.131B (± 1.8%) i/s -     15.768B in   5.037591s
               yield      3.135B (± 2.0%) i/s -     15.909B in   5.076615s

Comparison:
          block.call: 3186707399.3 i/s
               yield: 3135173964.9 i/s - same-ish: difference falls within error
        unused block: 3130964222.2 i/s - same-ish: difference falls within error
       block + yield: 3111845692.4 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     4.999k i/100ms
      range#include?   174.000  i/100ms
       range#member?   241.000  i/100ms
       plain compare     7.807k i/100ms
Calculating -------------------------------------
        range#cover?     59.048k (±27.0%) i/s -    264.947k in   5.055182s
      range#include?      2.532k (±27.2%) i/s -     11.484k in   5.041036s
       range#member?      2.511k (±27.1%) i/s -     11.568k in   5.101465s
       plain compare     92.801k (±20.5%) i/s -    437.192k in   5.059191s

Comparison:
       plain compare:    92801.1 i/s
        range#cover?:    59048.4 i/s - same-ish: difference falls within error
      range#include?:     2532.0 i/s - 36.65x  (± 0.00) slower
       range#member?:     2510.8 i/s - 36.96x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    16.609M i/100ms
           String#=~    14.676M i/100ms
          Regexp#===    15.155M i/100ms
        String#match    12.256M i/100ms
Calculating -------------------------------------
       String#match?    166.623M (± 2.2%) i/s -    847.067M in   5.086237s
           String#=~    147.294M (± 1.8%) i/s -    748.478M in   5.083283s
          Regexp#===    149.678M (± 5.7%) i/s -    757.742M in   5.087343s
        String#match    121.045M (± 2.1%) i/s -    612.802M in   5.065013s

Comparison:
       String#match?: 166623180.9 i/s
          Regexp#===: 149677767.0 i/s - 1.11x  (± 0.00) slower
           String#=~: 147294036.0 i/s - 1.13x  (± 0.00) slower
        String#match: 121045068.9 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.827M i/100ms
      String#casecmp     4.664M i/100ms
Calculating -------------------------------------
String#downcase + ==     29.023M (± 7.5%) i/s -    144.153M in   5.004983s
      String#casecmp     46.773M (± 5.2%) i/s -    233.190M in   4.999893s

Comparison:
      String#casecmp: 46772777.9 i/s
String#downcase + ==: 29023423.3 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+    10.233M i/100ms
       String#concat    10.366M i/100ms
       String#append    10.445M i/100ms
         "foo" "bar"   304.805M i/100ms
  "#{'foo'}#{'bar'}"    10.637M i/100ms
Calculating -------------------------------------
            String#+    103.545M (± 6.1%) i/s -    521.890M in   5.066094s
       String#concat    103.644M (± 6.7%) i/s -    518.319M in   5.034980s
       String#append    102.876M (± 8.6%) i/s -    511.788M in   5.030167s
         "foo" "bar"      3.197B (± 2.4%) i/s -     16.155B in   5.056249s
  "#{'foo'}#{'bar'}"    102.783M (± 5.9%) i/s -    521.233M in   5.096293s

Comparison:
         "foo" "bar": 3197047337.6 i/s
       String#concat: 103643695.4 i/s - 30.85x  (± 0.00) slower
            String#+: 103544669.2 i/s - 30.88x  (± 0.00) slower
       String#append: 102876340.4 i/s - 31.08x  (± 0.00) slower
  "#{'foo'}#{'bar'}": 102782577.6 i/s - 31.10x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   316.530M i/100ms
          String#dup   315.326M i/100ms
Calculating -------------------------------------
           String#+@      3.109B (± 3.0%) i/s -     15.826B in   5.095952s
          String#dup      3.174B (± 2.9%) i/s -     16.082B in   5.070673s

Comparison:
          String#dup: 3174400396.4 i/s
           String#+@: 3108619633.4 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.253M i/100ms
       String#match?     1.649M i/100ms
    String#end_with?    10.689M i/100ms
Calculating -------------------------------------
           String#=~     13.665M (± 7.0%) i/s -     68.911M in   5.085100s
       String#match?     16.156M (± 2.7%) i/s -     82.437M in   5.106632s
    String#end_with?    107.110M (± 1.9%) i/s -    545.131M in   5.091522s

Comparison:
    String#end_with?: 107110046.9 i/s
       String#match?: 16155607.4 i/s - 6.63x  (± 0.00) slower
           String#=~: 13664707.2 i/s - 7.84x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   759.485k i/100ms
          String#sub   939.709k i/100ms
String#dup["string"]=
                         9.761M i/100ms
Calculating -------------------------------------
         String#gsub      8.530M (± 8.5%) i/s -     42.531M in   5.035381s
          String#sub      9.524M (± 9.7%) i/s -     47.925M in   5.086263s
String#dup["string"]=
                         97.656M (± 1.1%) i/s -    497.792M in   5.098016s

Comparison:
String#dup["string"]=: 97656346.7 i/s
          String#sub:  9524477.2 i/s - 10.25x  (± 0.00) slower
         String#gsub:  8530448.3 i/s - 11.45x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   358.513k i/100ms
           String#tr   144.706k i/100ms
Calculating -------------------------------------
         String#gsub      4.232M (± 8.0%) i/s -     21.152M in   5.043024s
           String#tr      1.451M (± 6.0%) i/s -      7.235M in   5.005717s

Comparison:
         String#gsub:  4231708.8 i/s
           String#tr:  1450976.5 i/s - 2.92x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   315.553M i/100ms
         With Freeze   319.728M i/100ms
Calculating -------------------------------------
      Without Freeze      3.169B (± 1.8%) i/s -     16.093B in   5.080178s
         With Freeze      3.132B (± 2.0%) i/s -     15.667B in   5.003710s

Comparison:
      Without Freeze: 3168846691.6 i/s
         With Freeze: 3132342416.3 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     9.408k i/100ms
      String#squeeze    70.551k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    152.243k (± 7.9%) i/s -    762.048k in   5.050157s
      String#squeeze    709.858k (± 4.6%) i/s -      3.598M in   5.080128s

Comparison:
      String#squeeze:   709858.0 i/s
 String#gsub/regex+/:   152242.7 i/s - 4.66x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     4.404M i/100ms
       String#match?     5.321M i/100ms
  String#start_with?    12.427M i/100ms
Calculating -------------------------------------
           String#=~     47.299M (± 3.0%) i/s -    237.826M in   5.033011s
       String#match?     52.290M (± 1.7%) i/s -    266.068M in   5.089849s
  String#start_with?    122.330M (± 3.3%) i/s -    621.337M in   5.085156s

Comparison:
  String#start_with?: 122330290.3 i/s
       String#match?: 52290231.9 i/s - 2.34x  (± 0.00) slower
           String#=~: 47299262.9 i/s - 2.59x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   195.212k i/100ms
    String#[0, n] ==   309.824k i/100ms
   String#[RANGE] ==   374.634k i/100ms
   String#[0...n] ==   268.514k i/100ms
Calculating -------------------------------------
  String#start_with?      6.986M (± 3.9%) i/s -     34.943M in   5.012344s
    String#[0, n] ==      3.170M (± 7.1%) i/s -     15.801M in   5.021949s
   String#[RANGE] ==      3.679M (± 6.4%) i/s -     18.357M in   5.017762s
   String#[0...n] ==      2.578M (± 6.6%) i/s -     12.889M in   5.027395s

Comparison:
  String#start_with?:  6985769.2 i/s
   String#[RANGE] ==:  3679294.4 i/s - 1.90x  (± 0.00) slower
    String#[0, n] ==:  3169796.4 i/s - 2.20x  (± 0.00) slower
   String#[0...n] ==:  2578289.0 i/s - 2.71x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     9.622M i/100ms
 String#sub!'string'   983.952k i/100ms
String#gsub!'string'   851.647k i/100ms
  String#[/regexp/]=     2.650M i/100ms
 String#sub!/regexp/     2.617M i/100ms
String#gsub!/regexp/   804.622k i/100ms
Calculating -------------------------------------
  String#['string']=     97.533M (± 1.6%) i/s -    490.741M in   5.032866s
 String#sub!'string'     10.544M (± 9.3%) i/s -     52.149M in   5.009278s
String#gsub!'string'      9.090M (±10.0%) i/s -     45.137M in   5.028111s
  String#[/regexp/]=     26.755M (± 4.1%) i/s -    135.127M in   5.059889s
 String#sub!/regexp/     25.967M (± 3.0%) i/s -    130.870M in   5.044879s
String#gsub!/regexp/      8.078M (± 9.1%) i/s -     40.231M in   5.027552s

Comparison:
  String#['string']=: 97533253.8 i/s
  String#[/regexp/]=: 26755469.7 i/s - 3.65x  (± 0.00) slower
 String#sub!/regexp/: 25966729.5 i/s - 3.76x  (± 0.00) slower
 String#sub!'string': 10544153.8 i/s - 9.25x  (± 0.00) slower
String#gsub!'string':  9090431.5 i/s - 10.73x  (± 0.00) slower
String#gsub!/regexp/:  8078393.5 i/s - 12.07x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     2.864M i/100ms
        String#chomp     5.862M i/100ms
String#delete_suffix    14.530M i/100ms
Calculating -------------------------------------
          String#sub     29.266M (± 2.9%) i/s -    148.950M in   5.094079s
        String#chomp     58.148M (± 2.0%) i/s -    293.086M in   5.042470s
String#delete_suffix    148.156M (±11.0%) i/s -    741.031M in   5.076072s

Comparison:
String#delete_suffix: 148156113.0 i/s
        String#chomp: 58148493.0 i/s - 2.55x  (± 0.00) slower
          String#sub: 29265516.5 i/s - 5.06x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   308.117M i/100ms
          String#sub    15.988M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.084B (± 2.4%) i/s -     15.714B in   5.098772s
          String#sub    160.894M (± 2.2%) i/s -    815.407M in   5.070690s

Comparison:
String#delete_prefix: 3083811915.1 i/s
          String#sub: 160894280.8 i/s - 19.17x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.865M i/100ms
    String#unpack[0]     1.949M i/100ms
Calculating -------------------------------------
      String#unpack1     19.219M (± 4.4%) i/s -     96.969M in   5.055850s
    String#unpack[0]     19.494M (± 2.9%) i/s -     97.466M in   5.004310s

Comparison:
    String#unpack[0]: 19494015.4 i/s
      String#unpack1: 19219251.1 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.1.0-dev-9e28eca5, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    37.267k i/100ms
          Time.parse   297.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    524.357k (±17.4%) i/s -      2.497M in   5.029777s
          Time.parse      5.040k (±26.4%) i/s -     23.760k in   5.035155s

Comparison:
        Time.iso8601:   524356.6 i/s
          Time.parse:     5040.2 i/s - 104.03x  (± 0.00) slower

