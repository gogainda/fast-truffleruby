$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       204.445M i/100ms
Function with splat arguments
                       701.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          2.000B (± 1.0%) i/s -     10.018B in   5.010436s
Function with splat arguments
                          7.345k (± 8.3%) i/s -     36.452k in   5.022943s

Comparison:
Function with single Array argument: 1999584396.4 i/s
Function with splat arguments:     7345.1 i/s - 272234.22x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   197.255M i/100ms
Sequential Assignment
                       198.345M i/100ms
Calculating -------------------------------------
 Parallel Assignment      2.005B (± 1.2%) i/s -     10.060B in   5.017548s
Sequential Assignment
                          2.028B (± 1.4%) i/s -     10.314B in   5.087434s

Comparison:
Sequential Assignment: 2027734245.8 i/s
 Parallel Assignment: 2005237272.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   198.307M i/100ms
       attr_accessor   206.263M i/100ms
Calculating -------------------------------------
   getter_and_setter      2.065B (± 1.3%) i/s -     10.510B in   5.091432s
       attr_accessor      2.077B (± 0.9%) i/s -     10.519B in   5.065281s

Comparison:
       attr_accessor: 2076939107.4 i/s
   getter_and_setter: 2064659295.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     6.384k i/100ms
         respond_to?   204.212M i/100ms
Calculating -------------------------------------
      begin...rescue     43.707k (± 7.6%) i/s -    217.056k in   5.011657s
         respond_to?      2.003B (± 0.9%) i/s -     10.211B in   5.097115s

Comparison:
         respond_to?: 2003369690.1 i/s
      begin...rescue:    43707.1 i/s - 45836.23x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   199.320M i/100ms
             &method   198.867M i/100ms
Calculating -------------------------------------
              normal      1.994B (± 0.7%) i/s -     10.165B in   5.097209s
             &method      2.008B (± 1.2%) i/s -     10.142B in   5.051454s

Comparison:
             &method: 2008083904.1 i/s
              normal: 1994405664.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       112.000  i/100ms
       define_method   114.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.386k (±40.9%) i/s -      4.368k in   5.032880s
       define_method      3.379k (±58.5%) i/s -      5.016k in   6.231510s

Comparison:
       define_method:     3378.6 i/s
module_eval with string:     1386.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    57.287k i/100ms
       Kernel#format    52.955k i/100ms
            String#%    52.074k i/100ms
Calculating -------------------------------------
         Float#round    612.770k (± 3.1%) i/s -      3.093M in   5.053641s
       Kernel#format    518.509k (± 3.2%) i/s -      2.595M in   5.009878s
            String#%    521.717k (± 2.9%) i/s -      2.656M in   5.094858s

Comparison:
         Float#round:   612769.8 i/s
            String#%:   521716.6 i/s - 1.17x  (± 0.00) slower
       Kernel#format:   518508.6 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   198.088M i/100ms
          OpenStruct   198.187M i/100ms
Calculating -------------------------------------
                Hash      1.989B (± 0.4%) i/s -     10.103B in   5.078435s
          OpenStruct      1.989B (± 0.9%) i/s -     10.108B in   5.082422s

Comparison:
                Hash: 1989330029.4 i/s
          OpenStruct: 1988887174.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   192.644M i/100ms
          OpenStruct     2.209k i/100ms
Calculating -------------------------------------
                Hash      1.902B (± 2.8%) i/s -      9.632B in   5.067769s
          OpenStruct     24.459k (±14.0%) i/s -    119.286k in   5.021479s

Comparison:
                Hash: 1902259215.7 i/s
          OpenStruct:    24459.0 i/s - 77773.31x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   660.616k i/100ms
  ancestors.include?   127.831k i/100ms
Calculating -------------------------------------
  less than or equal      7.201M (± 3.9%) i/s -     36.334M in   5.053526s
  ancestors.include?      1.240M (± 8.4%) i/s -      6.136M in   5.011071s

Comparison:
  less than or equal:  7201116.8 i/s
  ancestors.include?:  1240152.3 i/s - 5.81x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     19.915  (± 0.0%) i/s -    100.000  in   5.021673s
         Kernel loop     19.883  (± 0.0%) i/s -    100.000  in   5.029628s

Comparison:
          While Loop:       19.9 i/s
         Kernel loop:       19.9 i/s - 1.00x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   198.320M i/100ms
         Array#first   198.606M i/100ms
Calculating -------------------------------------
           Array#[0]      1.986B (± 0.3%) i/s -     10.114B in   5.091643s
         Array#first      1.987B (± 0.3%) i/s -     10.129B in   5.096475s

Comparison:
         Array#first: 1987448735.6 i/s
           Array#[0]: 1986478037.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   198.244M i/100ms
          Array#last   199.714M i/100ms
Calculating -------------------------------------
          Array#[-1]      2.003B (± 1.0%) i/s -     10.110B in   5.048358s
          Array#last      2.001B (± 0.9%) i/s -     10.185B in   5.089402s

Comparison:
          Array#[-1]: 2002922658.1 i/s
          Array#last: 2001448418.9 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   409.894k i/100ms
Calculating -------------------------------------
                find      5.881  (±34.0%) i/s -     12.000  in   5.134804s
             bsearch      4.129M (± 3.2%) i/s -     20.905M in   5.067777s

Comparison:
             bsearch:  4129426.9 i/s
                find:        5.9 i/s - 702172.76x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.106  (± 0.0%) i/s -      1.000  in   9.439927s
        Array#insert      0.791  (± 0.0%) i/s -      4.000  in   5.054280s

Comparison:
        Array#insert:        0.8 i/s
       Array#unshift:        0.1 i/s - 7.47x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   198.684M i/100ms
          Array#size   199.646M i/100ms
         Array#count   198.729M i/100ms
Calculating -------------------------------------
        Array#length      1.986B (± 0.9%) i/s -      9.934B in   5.002779s
          Array#size      1.991B (± 0.5%) i/s -      9.982B in   5.013480s
         Array#count      1.987B (± 0.3%) i/s -      9.936B in   4.999967s

Comparison:
          Array#size: 1991146838.4 i/s
         Array#count: 1987324225.5 i/s - same-ish: difference falls within error
        Array#length: 1985892379.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    19.642k i/100ms
        Array#sample     2.141M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    205.724k (± 2.7%) i/s -      1.041M in   5.064511s
        Array#sample     21.344M (± 0.3%) i/s -    107.036M in   5.014819s

Comparison:
        Array#sample: 21344117.6 i/s
 Array#shuffle.first:   205724.0 i/s - 103.75x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   367.000  i/100ms
          Date.parse   383.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     19.695k (±38.1%) i/s -     80.740k in   5.003713s
          Date.parse     15.302k (±32.9%) i/s -     62.046k in   5.007312s

Comparison:
        Date.iso8601:    19695.4 i/s
          Date.parse:    15301.6 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   114.940k i/100ms
           Array#map   464.523k i/100ms
Calculating -------------------------------------
   Array#each + push      1.325M (± 4.9%) i/s -      6.667M in   5.044420s
           Array#map      4.853M (± 8.7%) i/s -     24.155M in   5.043662s

Comparison:
           Array#map:  4853107.2 i/s
   Array#each + push:  1324905.9 i/s - 3.66x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     6.571M i/100ms
               #each    20.723M i/100ms
Calculating -------------------------------------
            For loop     58.421M (± 2.0%) i/s -    295.715M in   5.063613s
               #each    207.239M (± 0.2%) i/s -      1.057B in   5.099680s

Comparison:
               #each: 207239297.0 i/s
            For loop: 58421264.8 i/s - 3.55x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   806.337k i/100ms
     each_with_index     1.008M i/100ms
Calculating -------------------------------------
          While Loop      8.051M (± 0.6%) i/s -     40.317M in   5.008006s
     each_with_index     10.054M (± 0.5%) i/s -     50.386M in   5.011635s

Comparison:
     each_with_index: 10053999.4 i/s
          While Loop:  8050739.6 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   122.876k i/100ms
      inject to_proc   122.926k i/100ms
        inject block   122.895k i/100ms
Calculating -------------------------------------
       inject symbol      1.228M (± 0.3%) i/s -      6.144M in   5.005065s
      inject to_proc      1.228M (± 0.4%) i/s -      6.146M in   5.004190s
        inject block      1.227M (± 0.3%) i/s -      6.145M in   5.007990s

Comparison:
      inject to_proc:  1228253.9 i/s
       inject symbol:  1227524.4 i/s - same-ish: difference falls within error
        inject block:  1226997.8 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    10.166k i/100ms
   Array#map.flatten    10.570k i/100ms
      Array#flat_map    27.303k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    101.530k (± 8.3%) i/s -    508.300k in   5.070679s
   Array#map.flatten    107.249k (± 4.9%) i/s -    539.070k in   5.038812s
      Array#flat_map    274.511k (± 4.4%) i/s -      1.392M in   5.082897s

Comparison:
      Array#flat_map:   274510.8 i/s
   Array#map.flatten:   107249.3 i/s - 2.56x  (± 0.00) slower
Array#map.flatten(1):   101530.1 i/s - 2.70x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   157.192k i/100ms
  Array#reverse_each     1.582M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.645M (± 4.8%) i/s -      8.331M in   5.078648s
  Array#reverse_each     16.222M (± 1.4%) i/s -     82.268M in   5.072454s

Comparison:
  Array#reverse_each: 16221671.7 i/s
  Array#reverse.each:  1644617.9 i/s - 9.86x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       524.982k i/100ms
   Enumerable#detect     2.937M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          5.644M (± 8.0%) i/s -    111.821M in  20.014209s
   Enumerable#detect     29.078M (± 1.1%) i/s -    584.441M in  20.101130s

Comparison:
   Enumerable#detect: 29078188.3 i/s
Enumerable#select.first:  5644380.1 i/s - 5.15x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       141.301k i/100ms
Enumerable#select.last
                       325.990k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.562M (± 4.2%) i/s -      7.913M in   5.074799s
Enumerable#select.last
                          3.204M (± 2.9%) i/s -     16.299M in   5.092405s

Comparison:
Enumerable#select.last:  3203653.7 i/s
Enumerable#reverse.detect:  1562088.5 i/s - 2.05x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         1.723k i/100ms
  Enumerable#sort_by   585.000  i/100ms
     Enumerable#sort     2.456k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         19.715k (±18.4%) i/s -     91.319k in   5.012180s
  Enumerable#sort_by     11.413k (±50.5%) i/s -     46.800k in   5.020166s
     Enumerable#sort     29.140k (± 2.9%) i/s -    147.360k in   5.061684s

Comparison:
     Enumerable#sort:    29140.0 i/s
Enumerable#sort_by (Symbol#to_proc):    19715.2 i/s - 1.48x  (± 0.00) slower
  Enumerable#sort_by:    11412.8 i/s - 2.55x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   427.385k i/100ms
Enumerable#sort_by...first
                         4.251k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      4.425M (± 1.5%) i/s -     22.224M in   5.023571s
Enumerable#sort_by...first
                         50.881k (± 4.0%) i/s -    255.060k in   5.021363s

Comparison:
   Enumerable#min_by:  4424932.3 i/s
Enumerable#sort_by...first:    50880.9 i/s - 86.97x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   161.337k i/100ms
            Hash#dup   172.869k i/100ms
Calculating -------------------------------------
              Hash[]      1.854M (± 5.0%) i/s -      9.358M in   5.060777s
            Hash#dup      1.822M (± 8.1%) i/s -      9.162M in   5.086329s

Comparison:
              Hash[]:  1853644.0 i/s
            Hash#dup:  1821971.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   207.582M i/100ms
  Hash#fetch, symbol   206.594M i/100ms
     Hash#[], string    13.261M i/100ms
  Hash#fetch, string    11.601M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      2.016B (± 1.6%) i/s -     10.172B in   5.047240s
  Hash#fetch, symbol      2.002B (± 1.2%) i/s -     10.123B in   5.058143s
     Hash#[], string    131.202M (± 0.5%) i/s -    663.027M in   5.053583s
  Hash#fetch, string    113.253M (± 0.6%) i/s -    568.428M in   5.019290s

Comparison:
     Hash#[], symbol: 2015773026.7 i/s
  Hash#fetch, symbol: 2001617793.8 i/s - same-ish: difference falls within error
     Hash#[], string: 131202023.1 i/s - 15.36x  (± 0.00) slower
  Hash#fetch, string: 113252681.4 i/s - 17.80x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    41.325M i/100ms
             Hash#[]    41.333M i/100ms
          Hash#[] ||    41.428M i/100ms
          Hash#[] &&    41.440M i/100ms
          Hash#fetch    41.436M i/100ms
 Hash#fetch fallback    41.446M i/100ms
Calculating -------------------------------------
            Hash#dig    413.947M (± 0.3%) i/s -      2.108B in   5.091483s
             Hash#[]    414.192M (± 0.2%) i/s -      2.108B in   5.089411s
          Hash#[] ||    414.604M (± 0.4%) i/s -      2.113B in   5.096105s
          Hash#[] &&    414.179M (± 0.6%) i/s -      2.072B in   5.002786s
          Hash#fetch    414.407M (± 0.2%) i/s -      2.113B in   5.099422s
 Hash#fetch fallback    414.220M (± 0.4%) i/s -      2.072B in   5.002907s

Comparison:
          Hash#[] ||: 414603625.7 i/s
          Hash#fetch: 414407399.5 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 414219911.1 i/s - same-ish: difference falls within error
             Hash#[]: 414192474.3 i/s - same-ish: difference falls within error
          Hash#[] &&: 414179101.8 i/s - same-ish: difference falls within error
            Hash#dig: 413946756.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   198.303M i/100ms
  Hash#fetch + block   198.369M i/100ms
    Hash#fetch + arg   198.482M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.986B (± 0.4%) i/s -     10.113B in   5.091663s
  Hash#fetch + block      1.987B (± 0.3%) i/s -     10.117B in   5.091321s
    Hash#fetch + arg      1.988B (± 0.3%) i/s -     10.123B in   5.091088s

Comparison:
    Hash#fetch + arg: 1988317474.9 i/s
  Hash#fetch + block: 1987091119.1 i/s - same-ish: difference falls within error
  Hash#fetch + const: 1986307842.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    16.021k i/100ms
         sort + to_h   304.000  i/100ms
Calculating -------------------------------------
      sort_by + to_h    255.787k (± 5.6%) i/s -      1.282M in   5.028175s
         sort + to_h    107.176k (±10.6%) i/s -    518.320k in   4.989757s

Comparison:
      sort_by + to_h:   255786.6 i/s
         sort + to_h:   107175.8 i/s - 2.39x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   107.818k i/100ms
       Hash#each_key   121.223k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.216M (±10.4%) i/s -      5.930M in   5.002396s
       Hash#each_key      1.227M (± 4.2%) i/s -      6.182M in   5.047056s

Comparison:
       Hash#each_key:  1227230.0 i/s
      Hash#keys.each:  1215923.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   181.000  i/100ms
           Hash#key?     7.035M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.687k (±13.7%) i/s -      8.326k in   5.065994s
           Hash#key?     70.338M (± 0.1%) i/s -    351.729M in   5.000568s

Comparison:
           Hash#key?: 70337820.9 i/s
  Hash#keys.include?:     1686.7 i/s - 41700.95x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    14.970k i/100ms
            Hash#[]=    20.304k i/100ms
Calculating -------------------------------------
         Hash#merge!    197.557k (± 8.8%) i/s -    973.050k in   4.999802s
            Hash#[]=    194.838k (± 8.5%) i/s -    974.592k in   5.064995s

Comparison:
         Hash#merge!:   197556.5 i/s
            Hash#[]=:   194838.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        11.079k i/100ms
      Hash#merge({})     7.408k i/100ms
 Hash#dup#merge!({})    12.766k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        123.860k (± 5.4%) i/s -    620.424k in   5.024308s
      Hash#merge({})     76.420k (± 4.8%) i/s -    385.216k in   5.052932s
 Hash#dup#merge!({})    130.987k (± 5.9%) i/s -    663.832k in   5.086229s

Comparison:
 Hash#dup#merge!({}):   130987.2 i/s
{}#merge!(Hash) do end:   123859.5 i/s - same-ish: difference falls within error
      Hash#merge({}):    76419.9 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   198.270M i/100ms
          Hash#merge   198.965M i/100ms
Calculating -------------------------------------
        Hash#**other      1.987B (± 0.3%) i/s -     10.112B in   5.089523s
          Hash#merge      1.987B (± 0.3%) i/s -      9.948B in   5.005515s

Comparison:
          Hash#merge: 1987476795.1 i/s
        Hash#**other: 1986802432.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   250.000  i/100ms
         Hash#merge!    20.113k i/100ms
Calculating -------------------------------------
          Hash#merge      3.004k (± 8.5%) i/s -     15.000k in   5.062368s
         Hash#merge!    207.616k (± 5.9%) i/s -      1.046M in   5.055053s

Comparison:
         Hash#merge!:   207615.8 i/s
          Hash#merge:     3004.1 i/s - 69.11x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      880.521k i/100ms
Array#each             832.260k i/100ms
Array#each_w/_object   851.624k i/100ms
Hash#select-include      1.213M i/100ms
Calculating -------------------------------------
Hash#native-slice         9.763M (± 5.0%) i/s -     49.309M in   5.063948s
Array#each                7.981M (± 3.2%) i/s -     39.948M in   5.010703s
Array#each_w/_object      8.360M (± 5.4%) i/s -     41.730M in   5.006620s
Hash#select-include      12.175M (± 5.0%) i/s -     61.868M in   5.094466s

Comparison:
Hash#select-include : 12175346.5 i/s
Hash#native-slice   :  9762886.7 i/s - 1.25x  (± 0.00) slower
Array#each_w/_object:  8359949.9 i/s - 1.46x  (± 0.00) slower
Array#each          :  7981300.6 i/s - 1.53x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   180.000  i/100ms
         Hash#value?    14.760k i/100ms
Calculating -------------------------------------
Hash#values.include?      2.499k (±12.0%) i/s -     12.240k in   5.014854s
         Hash#value?    147.536k (± 0.1%) i/s -    738.000k in   5.002174s

Comparison:
         Hash#value?:   147536.0 i/s
Hash#values.include?:     2499.0 i/s - 59.04x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   198.586M i/100ms
                send   198.557M i/100ms
      method_missing   200.093M i/100ms
Calculating -------------------------------------
                call      1.990B (± 0.5%) i/s -     10.128B in   5.088460s
                send      1.989B (± 0.3%) i/s -     10.126B in   5.090524s
      method_missing      1.984B (± 1.3%) i/s -     10.005B in   5.042725s

Comparison:
                call: 1990426482.5 i/s
                send: 1989277657.6 i/s - same-ish: difference falls within error
      method_missing: 1984339524.4 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    13.241k i/100ms
      Symbol#to_proc    13.438k i/100ms
Calculating -------------------------------------
               Block    143.783k (± 8.2%) i/s -    715.014k in   5.031384s
      Symbol#to_proc    148.016k (± 4.6%) i/s -    739.090k in   5.003920s

Comparison:
      Symbol#to_proc:   148016.2 i/s
               Block:   143782.6 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   198.681M i/100ms
       block + yield   198.500M i/100ms
        unused block   200.702M i/100ms
               yield   200.095M i/100ms
Calculating -------------------------------------
          block.call      2.000B (± 0.6%) i/s -     10.133B in   5.067105s
       block + yield      1.997B (± 0.4%) i/s -     10.124B in   5.069169s
        unused block      2.000B (± 0.6%) i/s -     10.035B in   5.017406s
               yield      1.993B (± 0.6%) i/s -     10.005B in   5.018919s

Comparison:
        unused block: 2000122038.9 i/s
          block.call: 1999771529.5 i/s - same-ish: difference falls within error
       block + yield: 1997105001.1 i/s - same-ish: difference falls within error
               yield: 1993485443.9 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     7.870k i/100ms
      range#include?   310.000  i/100ms
       range#member?   717.000  i/100ms
       plain compare    23.468k i/100ms
Calculating -------------------------------------
        range#cover?    139.513k (±29.2%) i/s -    629.600k in   5.034108s
      range#include?      7.994k (±28.8%) i/s -     35.340k in   5.019719s
       range#member?      6.562k (±18.5%) i/s -     31.548k in   5.096525s
       plain compare    314.765k (±13.0%) i/s -      1.525M in   5.012493s

Comparison:
       plain compare:   314764.6 i/s
        range#cover?:   139512.7 i/s - 2.26x  (± 0.00) slower
      range#include?:     7993.7 i/s - 39.38x  (± 0.00) slower
       range#member?:     6562.2 i/s - 47.97x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     7.487M i/100ms
           String#=~     7.784M i/100ms
          Regexp#===     8.348M i/100ms
        String#match     7.089M i/100ms
Calculating -------------------------------------
       String#match?     75.565M (± 0.6%) i/s -    381.818M in   5.053013s
           String#=~     83.150M (± 0.2%) i/s -    420.352M in   5.055364s
          Regexp#===     83.120M (± 0.2%) i/s -    417.394M in   5.021591s
        String#match     70.849M (± 0.2%) i/s -    354.468M in   5.003129s

Comparison:
           String#=~: 83149887.1 i/s
          Regexp#===: 83120069.6 i/s - same-ish: difference falls within error
       String#match?: 75565155.6 i/s - 1.10x  (± 0.00) slower
        String#match: 70849478.2 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.344M i/100ms
      String#casecmp     2.405M i/100ms
Calculating -------------------------------------
String#downcase + ==     15.335M (± 6.0%) i/s -     76.635M in   5.016681s
      String#casecmp     24.376M (± 3.6%) i/s -    122.672M in   5.039294s

Comparison:
      String#casecmp: 24375675.0 i/s
String#downcase + ==: 15334717.3 i/s - 1.59x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     5.663M i/100ms
       String#concat     5.691M i/100ms
       String#append     5.456M i/100ms
         "foo" "bar"   199.369M i/100ms
  "#{'foo'}#{'bar'}"   199.261M i/100ms
Calculating -------------------------------------
            String#+     58.623M (± 5.1%) i/s -    294.465M in   5.036446s
       String#concat     58.530M (± 3.4%) i/s -    295.916M in   5.061762s
       String#append     57.761M (± 4.6%) i/s -    289.188M in   5.017413s
         "foo" "bar"      1.995B (± 0.6%) i/s -     10.168B in   5.096350s
  "#{'foo'}#{'bar'}"      2.010B (± 0.8%) i/s -     10.162B in   5.055533s

Comparison:
  "#{'foo'}#{'bar'}": 2010279951.8 i/s
         "foo" "bar": 1995175290.5 i/s - same-ish: difference falls within error
            String#+: 58622691.4 i/s - 34.29x  (± 0.00) slower
       String#concat: 58529520.4 i/s - 34.35x  (± 0.00) slower
       String#append: 57760956.0 i/s - 34.80x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   202.455M i/100ms
          String#dup   203.241M i/100ms
Calculating -------------------------------------
           String#+@      2.028B (± 1.2%) i/s -     10.325B in   5.092109s
          String#dup      2.033B (± 1.4%) i/s -     10.365B in   5.098867s

Comparison:
          String#dup: 2033265458.2 i/s
           String#+@: 2027984405.1 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   753.944k i/100ms
       String#match?   712.037k i/100ms
    String#end_with?     8.947M i/100ms
Calculating -------------------------------------
           String#=~      7.698M (± 2.5%) i/s -     39.205M in   5.096348s
       String#match?      9.541M (± 1.0%) i/s -     47.706M in   5.000816s
    String#end_with?     88.839M (± 0.7%) i/s -    447.363M in   5.035913s

Comparison:
    String#end_with?: 88839077.8 i/s
       String#match?:  9540609.2 i/s - 9.31x  (± 0.00) slower
           String#=~:  7698348.6 i/s - 11.54x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   137.911k i/100ms
          String#sub   428.908k i/100ms
String#dup["string"]=
                         6.325M i/100ms
Calculating -------------------------------------
         String#gsub      4.185M (±12.7%) i/s -     20.687M in   5.098783s
          String#sub      4.538M (± 9.4%) i/s -     22.732M in   5.077893s
String#dup["string"]=
                         62.970M (± 3.1%) i/s -    316.270M in   5.028398s

Comparison:
String#dup["string"]=: 62970044.6 i/s
          String#sub:  4537613.7 i/s - 13.88x  (± 0.00) slower
         String#gsub:  4185368.4 i/s - 15.05x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    58.306k i/100ms
           String#tr    76.496k i/100ms
Calculating -------------------------------------
         String#gsub      1.857M (± 8.9%) i/s -      9.212M in   5.006621s
           String#tr    780.051k (± 5.0%) i/s -      3.901M in   5.014124s

Comparison:
         String#gsub:  1857473.0 i/s
           String#tr:   780050.8 i/s - 2.38x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   201.879M i/100ms
         With Freeze   199.913M i/100ms
Calculating -------------------------------------
      Without Freeze      2.022B (± 1.3%) i/s -     10.296B in   5.093009s
         With Freeze      2.020B (± 1.1%) i/s -     10.196B in   5.048537s

Comparison:
      Without Freeze: 2021884607.5 i/s
         With Freeze: 2019744963.2 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     4.179k i/100ms
      String#squeeze    39.377k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     58.681k (± 5.2%) i/s -    292.530k in   4.999321s
      String#squeeze    395.034k (± 3.3%) i/s -      2.008M in   5.089476s

Comparison:
      String#squeeze:   395034.2 i/s
 String#gsub/regex+/:    58681.4 i/s - 6.73x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.822M i/100ms
       String#match?     3.689M i/100ms
  String#start_with?     1.999M i/100ms
Calculating -------------------------------------
           String#=~     23.367M (± 3.6%) i/s -    118.447M in   5.075985s
       String#match?     37.886M (± 1.3%) i/s -    191.826M in   5.064044s
  String#start_with?     78.899M (± 2.5%) i/s -    395.753M in   5.019716s

Comparison:
  String#start_with?: 78899159.9 i/s
       String#match?: 37886127.8 i/s - 2.08x  (± 0.00) slower
           String#=~: 23367271.6 i/s - 3.38x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    89.169k i/100ms
    String#[0, n] ==   165.776k i/100ms
   String#[RANGE] ==   260.850k i/100ms
   String#[0...n] ==   168.145k i/100ms
Calculating -------------------------------------
  String#start_with?      3.533M (± 1.3%) i/s -     17.745M in   5.023881s
    String#[0, n] ==      1.766M (± 4.8%) i/s -      8.952M in   5.079990s
   String#[RANGE] ==      2.651M (± 4.5%) i/s -     13.303M in   5.028451s
   String#[0...n] ==      1.731M (± 3.2%) i/s -      8.744M in   5.055423s

Comparison:
  String#start_with?:  3532676.5 i/s
   String#[RANGE] ==:  2651341.7 i/s - 1.33x  (± 0.00) slower
    String#[0, n] ==:  1766247.0 i/s - 2.00x  (± 0.00) slower
   String#[0...n] ==:  1731467.6 i/s - 2.04x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     6.277M i/100ms
 String#sub!'string'   344.299k i/100ms
String#gsub!'string'   374.875k i/100ms
  String#[/regexp/]=     1.234M i/100ms
 String#sub!/regexp/   405.626k i/100ms
String#gsub!/regexp/   388.549k i/100ms
Calculating -------------------------------------
  String#['string']=     63.225M (± 1.0%) i/s -    320.146M in   5.064063s
 String#sub!'string'      4.594M (±15.5%) i/s -     22.035M in   5.062642s
String#gsub!'string'      3.990M (± 6.3%) i/s -     19.868M in   5.001852s
  String#[/regexp/]=     12.557M (± 4.1%) i/s -     62.925M in   5.020486s
 String#sub!/regexp/      4.252M (± 5.7%) i/s -     21.498M in   5.072772s
String#gsub!/regexp/      3.944M (± 7.4%) i/s -     19.816M in   5.053652s

Comparison:
  String#['string']=: 63225326.2 i/s
  String#[/regexp/]=: 12557033.4 i/s - 5.04x  (± 0.00) slower
 String#sub!'string':  4593645.6 i/s - 13.76x  (± 0.00) slower
 String#sub!/regexp/:  4252421.7 i/s - 14.87x  (± 0.00) slower
String#gsub!'string':  3990279.1 i/s - 15.84x  (± 0.00) slower
String#gsub!/regexp/:  3943944.5 i/s - 16.03x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub   877.521k i/100ms
        String#chomp     3.123M i/100ms
String#delete_suffix     4.293M i/100ms
Calculating -------------------------------------
          String#sub     13.638M (± 3.9%) i/s -     68.447M in   5.027004s
        String#chomp     31.268M (± 1.4%) i/s -    159.292M in   5.095450s
String#delete_suffix     42.208M (± 7.7%) i/s -    210.334M in   5.035075s

Comparison:
String#delete_suffix: 42208205.5 i/s
        String#chomp: 31268010.4 i/s - 1.35x  (± 0.00) slower
          String#sub: 13637564.1 i/s - 3.09x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   199.869M i/100ms
          String#sub     9.000M i/100ms
Calculating -------------------------------------
String#delete_prefix      2.003B (± 1.3%) i/s -     10.193B in   5.090579s
          String#sub     93.837M (± 2.3%) i/s -    477.025M in   5.086234s

Comparison:
String#delete_prefix: 2002705583.3 i/s
          String#sub: 93836744.6 i/s - 21.34x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.184M i/100ms
    String#unpack[0]     1.232M i/100ms
Calculating -------------------------------------
      String#unpack1     11.873M (± 8.0%) i/s -     59.224M in   5.045617s
    String#unpack[0]     11.775M (± 4.0%) i/s -     59.142M in   5.030873s

Comparison:
      String#unpack1: 11873469.8 i/s
    String#unpack[0]: 11774810.7 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.0.0-dev-a31594e9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    11.591k i/100ms
          Time.parse    88.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    261.901k (±12.2%) i/s -      1.287M in   5.014228s
          Time.parse      6.752k (±20.5%) i/s -     28.776k in   5.003219s

Comparison:
        Time.iso8601:   261900.6 i/s
          Time.parse:     6752.5 i/s - 38.79x  (± 0.00) slower

