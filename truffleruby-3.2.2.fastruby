$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       194.995M i/100ms
Function with splat arguments
                       792.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.918B (± 4.0%) i/s -      9.750B in   5.092396s
Function with splat arguments
                          8.411k (± 9.1%) i/s -     41.976k in   5.049890s

Comparison:
Function with single Array argument: 1917694288.7 i/s
Function with splat arguments:     8411.4 i/s - 227988.47x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   189.370M i/100ms
Sequential Assignment
                       183.780M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.907B (± 2.6%) i/s -      9.658B in   5.067953s
Sequential Assignment
                          1.895B (± 3.8%) i/s -      9.557B in   5.050401s

Comparison:
 Parallel Assignment: 1906945722.7 i/s
Sequential Assignment: 1895148309.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   191.922M i/100ms
       attr_accessor   187.701M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.935B (± 1.8%) i/s -      9.788B in   5.059118s
       attr_accessor      1.938B (± 3.1%) i/s -      9.760B in   5.042030s

Comparison:
       attr_accessor: 1937772878.2 i/s
   getter_and_setter: 1935394996.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     9.353k i/100ms
         respond_to?   201.002M i/100ms
Calculating -------------------------------------
      begin...rescue     61.816k (±10.7%) i/s -    308.649k in   5.111819s
         respond_to?      1.835B (± 4.3%) i/s -      9.246B in   5.048844s

Comparison:
         respond_to?: 1834817616.1 i/s
      begin...rescue:    61816.1 i/s - 29681.86x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   189.604M i/100ms
             &method   191.566M i/100ms
Calculating -------------------------------------
              normal      1.940B (± 2.3%) i/s -      9.859B in   5.085801s
             &method      1.935B (± 2.2%) i/s -      9.770B in   5.051036s

Comparison:
              normal: 1939695531.2 i/s
             &method: 1935137525.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        91.000  i/100ms
       define_method   110.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.621k (±54.0%) i/s -      4.186k in   6.489900s
       define_method      5.137k (±52.5%) i/s -      6.380k in   6.428827s

Comparison:
       define_method:     5137.3 i/s
module_eval with string:     1621.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    63.691k i/100ms
       Kernel#format    54.943k i/100ms
            String#%    57.585k i/100ms
Calculating -------------------------------------
         Float#round    692.490k (± 4.3%) i/s -      3.503M in   5.068302s
       Kernel#format    545.084k (± 5.5%) i/s -      2.747M in   5.055395s
            String#%    567.248k (± 4.8%) i/s -      2.879M in   5.088450s

Comparison:
         Float#round:   692489.9 i/s
            String#%:   567247.6 i/s - 1.22x  (± 0.00) slower
       Kernel#format:   545084.1 i/s - 1.27x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   189.684M i/100ms
          OpenStruct   194.218M i/100ms
Calculating -------------------------------------
                Hash      2.024B (± 4.6%) i/s -     10.243B in   5.072720s
          OpenStruct      2.025B (± 4.1%) i/s -     10.294B in   5.092003s

Comparison:
          OpenStruct: 2025080717.4 i/s
                Hash: 2023790392.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   197.636M i/100ms
          OpenStruct     2.103k i/100ms
Calculating -------------------------------------
                Hash      1.839B (± 3.7%) i/s -      9.289B in   5.057472s
          OpenStruct     24.857k (±14.3%) i/s -    121.974k in   5.066210s

Comparison:
                Hash: 1839157865.6 i/s
          OpenStruct:    24857.2 i/s - 73988.84x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   665.755k i/100ms
  ancestors.include?   138.394k i/100ms
Calculating -------------------------------------
  less than or equal      7.876M (± 6.4%) i/s -     39.280M in   5.007921s
  ancestors.include?      1.416M (± 6.1%) i/s -      7.196M in   5.102668s

Comparison:
  less than or equal:  7875967.7 i/s
  ancestors.include?:  1415779.7 i/s - 5.56x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     22.618  (± 4.4%) i/s -    113.000  in   5.006442s
         Kernel loop     22.385  (± 4.5%) i/s -    112.000  in   5.016093s

Comparison:
          While Loop:       22.6 i/s
         Kernel loop:       22.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   185.627M i/100ms
         Array#first   181.579M i/100ms
Calculating -------------------------------------
           Array#[0]      1.796B (± 3.4%) i/s -      9.096B in   5.069688s
         Array#first      1.899B (± 3.4%) i/s -      9.624B in   5.074816s

Comparison:
         Array#first: 1898624786.0 i/s
           Array#[0]: 1796254660.4 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   196.500M i/100ms
          Array#last   189.575M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.901B (± 4.5%) i/s -      9.628B in   5.075920s
          Array#last      1.851B (± 3.8%) i/s -      9.289B in   5.026000s

Comparison:
          Array#[-1]: 1900864958.7 i/s
          Array#last: 1850944634.4 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   513.093k i/100ms
Calculating -------------------------------------
                find      5.513  (±18.1%) i/s -     14.000  in   5.083220s
             bsearch      5.473M (± 6.3%) i/s -     27.707M in   5.083005s

Comparison:
             bsearch:  5472756.3 i/s
                find:        5.5 i/s - 992677.99x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.081  (± 0.0%) i/s -      1.000  in  12.416904s
        Array#insert      0.743  (± 0.0%) i/s -      4.000  in   5.382740s

Comparison:
        Array#insert:        0.7 i/s
       Array#unshift:        0.1 i/s - 9.23x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   194.376M i/100ms
          Array#size   190.491M i/100ms
         Array#count   195.085M i/100ms
Calculating -------------------------------------
        Array#length      1.890B (± 2.9%) i/s -      9.524B in   5.043344s
          Array#size      1.894B (± 3.3%) i/s -      9.525B in   5.033436s
         Array#count      1.887B (± 3.0%) i/s -      9.559B in   5.071060s

Comparison:
          Array#size: 1894346541.9 i/s
        Array#length: 1890225593.2 i/s - same-ish: difference falls within error
         Array#count: 1886761645.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    19.704k i/100ms
        Array#sample     2.424M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    224.804k (± 3.7%) i/s -      1.123M in   5.003469s
        Array#sample     23.880M (± 4.3%) i/s -    121.185M in   5.084288s

Comparison:
        Array#sample: 23879852.6 i/s
 Array#shuffle.first:   224804.0 i/s - 106.23x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   358.000  i/100ms
          Date.parse   404.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     24.741k (±36.6%) i/s -     94.870k in   5.000144s
          Date.parse     12.683k (±27.9%) i/s -     53.328k in   5.014536s

Comparison:
        Date.iso8601:    24741.5 i/s
          Date.parse:    12683.0 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   169.900k i/100ms
           Array#map   783.148k i/100ms
Calculating -------------------------------------
   Array#each + push      1.933M (± 8.0%) i/s -      9.684M in   5.043655s
           Array#map      8.139M (± 6.4%) i/s -     40.724M in   5.026403s

Comparison:
           Array#map:  8138763.9 i/s
   Array#each + push:  1932800.1 i/s - 4.21x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     6.638M i/100ms
               #each    22.201M i/100ms
Calculating -------------------------------------
            For loop     66.374M (± 4.9%) i/s -    331.893M in   5.012552s
               #each    225.397M (± 3.4%) i/s -      1.132B in   5.029641s

Comparison:
               #each: 225397165.3 i/s
            For loop: 66373840.7 i/s - 3.40x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   805.908k i/100ms
     each_with_index     1.097M i/100ms
Calculating -------------------------------------
          While Loop      8.061M (± 3.9%) i/s -     40.295M in   5.006175s
     each_with_index     11.326M (± 2.6%) i/s -     57.023M in   5.038076s

Comparison:
     each_with_index: 11326278.8 i/s
          While Loop:  8061484.5 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   147.274k i/100ms
      inject to_proc   147.813k i/100ms
        inject block   147.299k i/100ms
Calculating -------------------------------------
       inject symbol      1.464M (± 2.9%) i/s -      7.364M in   5.034065s
      inject to_proc      1.498M (± 2.8%) i/s -      7.538M in   5.035103s
        inject block      1.486M (± 3.6%) i/s -      7.512M in   5.060897s

Comparison:
      inject to_proc:  1498379.6 i/s
        inject block:  1486342.5 i/s - same-ish: difference falls within error
       inject symbol:  1463990.8 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    10.583k i/100ms
   Array#map.flatten    15.742k i/100ms
      Array#flat_map    34.879k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    151.112k (± 9.9%) i/s -    751.393k in   5.052954s
   Array#map.flatten    151.672k (± 7.4%) i/s -    755.616k in   5.008442s
      Array#flat_map    351.249k (± 7.4%) i/s -      1.779M in   5.094575s

Comparison:
      Array#flat_map:   351249.4 i/s
   Array#map.flatten:   151672.3 i/s - 2.32x  (± 0.00) slower
Array#map.flatten(1):   151112.0 i/s - 2.32x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   156.404k i/100ms
  Array#reverse_each     1.606M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.854M (± 5.4%) i/s -      9.384M in   5.076423s
  Array#reverse_each     16.433M (± 3.1%) i/s -     83.503M in   5.086416s

Comparison:
  Array#reverse_each: 16433441.7 i/s
  Array#reverse.each:  1854123.5 i/s - 8.86x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       524.629k i/100ms
   Enumerable#detect     3.044M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          5.580M (± 9.0%) i/s -    110.697M in  20.044182s
   Enumerable#detect     29.858M (± 3.4%) i/s -    596.672M in  20.010069s

Comparison:
   Enumerable#detect: 29858003.5 i/s
Enumerable#select.first:  5580051.3 i/s - 5.35x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       183.325k i/100ms
Enumerable#select.last
                       298.083k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.843M (± 7.9%) i/s -      9.166M in   5.025429s
Enumerable#select.last
                          3.013M (± 4.1%) i/s -     15.202M in   5.053737s

Comparison:
Enumerable#select.last:  3013474.1 i/s
Enumerable#reverse.detect:  1843264.6 i/s - 1.63x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         1.738k i/100ms
  Enumerable#sort_by     2.299k i/100ms
     Enumerable#sort     2.810k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         22.221k (±14.5%) i/s -    106.018k in   5.027109s
  Enumerable#sort_by     20.289k (±27.3%) i/s -     87.362k in   5.030368s
     Enumerable#sort     31.600k (± 6.0%) i/s -    157.360k in   4.999555s

Comparison:
     Enumerable#sort:    31600.3 i/s
Enumerable#sort_by (Symbol#to_proc):    22221.2 i/s - 1.42x  (± 0.00) slower
  Enumerable#sort_by:    20288.6 i/s - 1.56x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   430.621k i/100ms
Enumerable#sort_by...first
                         4.838k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      4.117M (± 5.3%) i/s -     20.670M in   5.034930s
Enumerable#sort_by...first
                         56.365k (± 4.9%) i/s -    285.442k in   5.077170s

Comparison:
   Enumerable#min_by:  4117026.8 i/s
Enumerable#sort_by...first:    56365.0 i/s - 73.04x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   260.933k i/100ms
            Hash#dup   290.426k i/100ms
Calculating -------------------------------------
              Hash[]      2.907M (± 8.0%) i/s -     14.612M in   5.060506s
            Hash#dup      3.044M (± 7.9%) i/s -     15.393M in   5.089838s

Comparison:
            Hash#dup:  3043711.0 i/s
              Hash[]:  2906745.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   191.968M i/100ms
  Hash#fetch, symbol   188.617M i/100ms
     Hash#[], string     2.358M i/100ms
  Hash#fetch, string     2.598M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.913B (± 3.1%) i/s -      9.598B in   5.023547s
  Hash#fetch, symbol      1.894B (± 3.5%) i/s -      9.619B in   5.084772s
     Hash#[], string    119.479M (± 5.7%) i/s -    596.524M in   5.009900s
  Hash#fetch, string    110.823M (± 4.6%) i/s -    553.428M in   5.005411s

Comparison:
     Hash#[], symbol: 1912591152.3 i/s
  Hash#fetch, symbol: 1894219279.9 i/s - same-ish: difference falls within error
     Hash#[], string: 119479421.3 i/s - 16.01x  (± 0.00) slower
  Hash#fetch, string: 110822659.0 i/s - 17.26x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    75.173M i/100ms
             Hash#[]    76.471M i/100ms
          Hash#[] ||    77.203M i/100ms
          Hash#[] &&    71.881M i/100ms
          Hash#fetch    80.931M i/100ms
 Hash#fetch fallback    81.581M i/100ms
Calculating -------------------------------------
            Hash#dig    790.673M (± 3.6%) i/s -      3.984B in   5.045557s
             Hash#[]    762.950M (± 6.5%) i/s -      3.900B in   5.136226s
          Hash#[] ||    755.266M (± 4.1%) i/s -      3.783B in   5.017148s
          Hash#[] &&    747.667M (± 4.7%) i/s -      3.738B in   5.010890s
          Hash#fetch    759.949M (± 2.2%) i/s -      3.804B in   5.007791s
 Hash#fetch fallback    744.095M (± 3.0%) i/s -      3.753B in   5.047965s

Comparison:
            Hash#dig: 790672533.2 i/s
             Hash#[]: 762950428.9 i/s - same-ish: difference falls within error
          Hash#fetch: 759948819.8 i/s - same-ish: difference falls within error
          Hash#[] ||: 755266449.9 i/s - same-ish: difference falls within error
          Hash#[] &&: 747667312.1 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 744095250.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   194.299M i/100ms
  Hash#fetch + block   189.009M i/100ms
    Hash#fetch + arg   190.629M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.973B (± 3.6%) i/s -      9.909B in   5.029135s
  Hash#fetch + block      1.801B (± 6.3%) i/s -      9.072B in   5.057913s
    Hash#fetch + arg      1.749B (± 5.5%) i/s -      8.769B in   5.029902s

Comparison:
  Hash#fetch + const: 1972847963.4 i/s
  Hash#fetch + block: 1801279881.1 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 1748903208.3 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    19.723k i/100ms
         sort + to_h     3.186k i/100ms
Calculating -------------------------------------
      sort_by + to_h    315.349k (± 9.8%) i/s -      1.558M in   5.029100s
         sort + to_h    126.680k (±17.2%) i/s -    598.968k in   5.012707s

Comparison:
      sort_by + to_h:   315348.7 i/s
         sort + to_h:   126679.8 i/s - 2.49x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   125.567k i/100ms
       Hash#each_key   127.852k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.314M (±12.4%) i/s -      6.404M in   5.032140s
       Hash#each_key      1.390M (± 5.0%) i/s -      7.032M in   5.071696s

Comparison:
       Hash#each_key:  1390027.1 i/s
      Hash#keys.each:  1313676.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   188.000  i/100ms
           Hash#key?     7.291M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.666k (±16.9%) i/s -      8.084k in   5.006541s
           Hash#key?     75.042M (± 2.6%) i/s -    379.112M in   5.055463s

Comparison:
           Hash#key?: 75041917.0 i/s
  Hash#keys.include?:     1666.4 i/s - 45032.02x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    26.543k i/100ms
            Hash#[]=    30.392k i/100ms
Calculating -------------------------------------
         Hash#merge!    309.703k (± 5.2%) i/s -      1.566M in   5.070744s
            Hash#[]=    305.875k (± 6.1%) i/s -      1.550M in   5.086172s

Comparison:
         Hash#merge!:   309702.8 i/s
            Hash#[]=:   305875.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        13.918k i/100ms
      Hash#merge({})    11.967k i/100ms
 Hash#dup#merge!({})    20.536k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        227.426k (±12.8%) i/s -      1.127M in   5.058947s
      Hash#merge({})    124.354k (±11.4%) i/s -    622.284k in   5.078775s
 Hash#dup#merge!({})    217.367k (± 7.4%) i/s -      1.088M in   5.039902s

Comparison:
{}#merge!(Hash) do end:   227426.0 i/s
 Hash#dup#merge!({}):   217366.6 i/s - same-ish: difference falls within error
      Hash#merge({}):   124354.0 i/s - 1.83x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   192.430M i/100ms
          Hash#merge   197.598M i/100ms
Calculating -------------------------------------
        Hash#**other      1.931B (± 3.1%) i/s -      9.814B in   5.085874s
          Hash#merge      1.922B (± 4.0%) i/s -      9.682B in   5.046094s

Comparison:
        Hash#**other: 1931461979.7 i/s
          Hash#merge: 1921925166.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   377.000  i/100ms
         Hash#merge!    31.792k i/100ms
Calculating -------------------------------------
          Hash#merge      5.002k (±12.4%) i/s -     24.882k in   5.081271s
         Hash#merge!    318.955k (± 9.6%) i/s -      1.590M in   5.034403s

Comparison:
         Hash#merge!:   318954.6 i/s
          Hash#merge:     5002.0 i/s - 63.77x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      917.071k i/100ms
Array#each             841.742k i/100ms
Array#each_w/_object   913.696k i/100ms
Hash#select-include      1.503M i/100ms
Calculating -------------------------------------
Hash#native-slice        10.129M (± 7.8%) i/s -     50.439M in   5.013513s
Array#each                8.657M (± 8.6%) i/s -     42.929M in   5.004819s
Array#each_w/_object      8.707M (± 5.9%) i/s -     43.857M in   5.055879s
Hash#select-include      14.902M (± 7.3%) i/s -     75.134M in   5.069285s

Comparison:
Hash#select-include : 14902483.4 i/s
Hash#native-slice   : 10129110.3 i/s - 1.47x  (± 0.00) slower
Array#each_w/_object:  8706576.2 i/s - 1.71x  (± 0.00) slower
Array#each          :  8656665.8 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   159.000  i/100ms
         Hash#value?   359.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.682k (±12.4%) i/s -      8.268k in   5.030100s
         Hash#value?      3.603k (± 2.5%) i/s -     18.309k in   5.084685s

Comparison:
         Hash#value?:     3603.0 i/s
Hash#values.include?:     1681.6 i/s - 2.14x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   192.504M i/100ms
                send   180.157M i/100ms
      method_missing   201.863M i/100ms
Calculating -------------------------------------
                call      1.914B (± 2.6%) i/s -      9.625B in   5.033236s
                send      1.878B (± 3.4%) i/s -      9.548B in   5.091389s
      method_missing      1.992B (± 2.9%) i/s -     10.093B in   5.071844s

Comparison:
      method_missing: 1991735292.1 i/s
                call: 1913611559.0 i/s - same-ish: difference falls within error
                send: 1877542435.2 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    23.778k i/100ms
      Symbol#to_proc    31.661k i/100ms
Calculating -------------------------------------
               Block    316.752k (±11.8%) i/s -      1.569M in   5.067914s
      Symbol#to_proc    313.627k (±11.7%) i/s -      1.551M in   5.035878s

Comparison:
               Block:   316751.9 i/s
      Symbol#to_proc:   313627.4 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   189.114M i/100ms
       block + yield   191.930M i/100ms
        unused block   187.062M i/100ms
               yield   193.006M i/100ms
Calculating -------------------------------------
          block.call      1.870B (± 4.8%) i/s -      9.456B in   5.067952s
       block + yield      1.893B (± 3.1%) i/s -      9.596B in   5.075725s
        unused block      1.904B (± 3.1%) i/s -      9.540B in   5.016098s
               yield      1.876B (± 2.8%) i/s -      9.457B in   5.045328s

Comparison:
        unused block: 1903768210.6 i/s
       block + yield: 1892506592.6 i/s - same-ish: difference falls within error
               yield: 1875988602.0 i/s - same-ish: difference falls within error
          block.call: 1870262593.6 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     7.984k i/100ms
      range#include?   265.000  i/100ms
       range#member?   468.000  i/100ms
       plain compare    33.161k i/100ms
Calculating -------------------------------------
        range#cover?    156.394k (±23.9%) i/s -    734.528k in   4.998310s
      range#include?      7.110k (±34.3%) i/s -     31.535k in   5.255786s
       range#member?      6.199k (±29.4%) i/s -     29.016k in   5.076204s
       plain compare    381.790k (± 6.8%) i/s -      1.923M in   5.065138s

Comparison:
       plain compare:   381790.5 i/s
        range#cover?:   156394.0 i/s - 2.44x  (± 0.00) slower
      range#include?:     7110.0 i/s - 53.70x  (± 0.00) slower
       range#member?:     6198.6 i/s - 61.59x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     7.769M i/100ms
           String#=~     8.055M i/100ms
          Regexp#===     7.762M i/100ms
        String#match     6.927M i/100ms
Calculating -------------------------------------
       String#match?     85.909M (± 3.8%) i/s -    435.046M in   5.071914s
           String#=~     82.195M (± 3.2%) i/s -    418.854M in   5.101263s
          Regexp#===     81.688M (± 4.3%) i/s -    411.391M in   5.045624s
        String#match     67.593M (± 3.0%) i/s -    339.402M in   5.025921s

Comparison:
       String#match?: 85908870.2 i/s
           String#=~: 82194877.0 i/s - same-ish: difference falls within error
          Regexp#===: 81687759.2 i/s - same-ish: difference falls within error
        String#match: 67593185.0 i/s - 1.27x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.640M i/100ms
      String#casecmp     2.768M i/100ms
Calculating -------------------------------------
String#downcase + ==     18.990M (± 6.9%) i/s -     95.112M in   5.032560s
      String#casecmp     28.738M (± 4.9%) i/s -    143.939M in   5.021261s

Comparison:
      String#casecmp: 28738149.0 i/s
String#downcase + ==: 18990492.4 i/s - 1.51x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     6.017M i/100ms
       String#concat     6.391M i/100ms
       String#append     6.051M i/100ms
         "foo" "bar"   185.555M i/100ms
  "#{'foo'}#{'bar'}"   193.076M i/100ms
Calculating -------------------------------------
            String#+     63.318M (± 5.1%) i/s -    318.886M in   5.049934s
       String#concat     63.331M (± 6.8%) i/s -    319.566M in   5.074693s
       String#append     63.347M (± 8.2%) i/s -    320.719M in   5.119475s
         "foo" "bar"      1.886B (± 5.4%) i/s -      9.463B in   5.036339s
  "#{'foo'}#{'bar'}"      1.902B (± 5.2%) i/s -      9.654B in   5.093624s

Comparison:
  "#{'foo'}#{'bar'}": 1901852711.4 i/s
         "foo" "bar": 1885535484.7 i/s - same-ish: difference falls within error
       String#append: 63346961.5 i/s - 30.02x  (± 0.00) slower
       String#concat: 63330894.5 i/s - 30.03x  (± 0.00) slower
            String#+: 63317796.7 i/s - 30.04x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   185.694M i/100ms
          String#dup   188.403M i/100ms
Calculating -------------------------------------
           String#+@      1.954B (± 1.6%) i/s -      9.842B in   5.038291s
          String#dup      1.893B (± 3.2%) i/s -      9.609B in   5.080124s

Comparison:
           String#+@: 1953923235.8 i/s
          String#dup: 1893296578.8 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   680.094k i/100ms
       String#match?   754.943k i/100ms
    String#end_with?     9.141M i/100ms
Calculating -------------------------------------
           String#=~      8.861M (± 4.3%) i/s -     44.206M in   4.998620s
       String#match?      9.520M (± 3.1%) i/s -     48.316M in   5.080148s
    String#end_with?     88.788M (± 3.0%) i/s -    447.929M in   5.049387s

Comparison:
    String#end_with?: 88788051.8 i/s
       String#match?:  9520134.4 i/s - 9.33x  (± 0.00) slower
           String#=~:  8861494.5 i/s - 10.02x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   115.101k i/100ms
          String#sub   469.540k i/100ms
String#dup["string"]=
                         6.546M i/100ms
Calculating -------------------------------------
         String#gsub      4.763M (±14.6%) i/s -     23.366M in   5.098192s
          String#sub      5.255M (± 8.9%) i/s -     26.294M in   5.047363s
String#dup["string"]=
                         67.019M (± 3.0%) i/s -    340.418M in   5.084147s

Comparison:
String#dup["string"]=: 67019130.5 i/s
          String#sub:  5255126.0 i/s - 12.75x  (± 0.00) slower
         String#gsub:  4763372.8 i/s - 14.07x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   104.701k i/100ms
           String#tr    84.236k i/100ms
Calculating -------------------------------------
         String#gsub      2.054M (±13.2%) i/s -     10.051M in   5.020221s
           String#tr    863.795k (± 5.8%) i/s -      4.380M in   5.089853s

Comparison:
         String#gsub:  2053916.1 i/s
           String#tr:   863795.2 i/s - 2.38x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   190.476M i/100ms
         With Freeze   190.220M i/100ms
Calculating -------------------------------------
      Without Freeze      1.869B (± 3.5%) i/s -      9.333B in   4.999302s
         With Freeze      1.863B (± 3.6%) i/s -      9.321B in   5.008521s

Comparison:
      Without Freeze: 1869300398.1 i/s
         With Freeze: 1863348504.0 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     4.729k i/100ms
      String#squeeze    40.320k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     89.771k (±11.4%) i/s -    439.797k in   5.012411s
      String#squeeze    406.021k (± 3.4%) i/s -      2.056M in   5.070854s

Comparison:
      String#squeeze:   406021.3 i/s
 String#gsub/regex+/:    89771.1 i/s - 4.52x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   909.535k i/100ms
       String#match?     3.163M i/100ms
  String#start_with?     8.359M i/100ms
Calculating -------------------------------------
           String#=~     27.429M (± 8.6%) i/s -    136.430M in   5.016181s
       String#match?     36.009M (± 5.6%) i/s -    180.293M in   5.024542s
  String#start_with?     80.243M (± 6.0%) i/s -    401.234M in   5.020304s

Comparison:
  String#start_with?: 80243159.4 i/s
       String#match?: 36008808.3 i/s - 2.23x  (± 0.00) slower
           String#=~: 27428958.7 i/s - 2.93x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    81.954k i/100ms
    String#[0, n] ==   179.260k i/100ms
   String#[RANGE] ==   287.734k i/100ms
   String#[0...n] ==   204.236k i/100ms
Calculating -------------------------------------
  String#start_with?      3.536M (± 4.8%) i/s -     17.702M in   5.018322s
    String#[0, n] ==      1.971M (± 4.6%) i/s -      9.859M in   5.013201s
   String#[RANGE] ==      2.841M (± 6.3%) i/s -     14.387M in   5.085562s
   String#[0...n] ==      2.039M (± 5.0%) i/s -     10.212M in   5.022384s

Comparison:
  String#start_with?:  3536135.9 i/s
   String#[RANGE] ==:  2840524.5 i/s - 1.24x  (± 0.00) slower
   String#[0...n] ==:  2038886.0 i/s - 1.73x  (± 0.00) slower
    String#[0, n] ==:  1970771.1 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     6.634M i/100ms
 String#sub!'string'   398.266k i/100ms
String#gsub!'string'   495.707k i/100ms
  String#[/regexp/]=     1.604M i/100ms
 String#sub!/regexp/   656.425k i/100ms
String#gsub!/regexp/   464.143k i/100ms
Calculating -------------------------------------
  String#['string']=     65.747M (± 3.7%) i/s -    331.712M in   5.052087s
 String#sub!'string'      5.454M (±18.9%) i/s -     25.489M in   5.017361s
String#gsub!'string'      5.088M (± 8.6%) i/s -     25.281M in   5.012366s
  String#[/regexp/]=     17.003M (± 7.0%) i/s -     85.029M in   5.029609s
 String#sub!/regexp/      6.359M (± 8.0%) i/s -     32.165M in   5.093396s
String#gsub!/regexp/      5.052M (± 9.6%) i/s -     25.064M in   5.014751s

Comparison:
  String#['string']=: 65747278.9 i/s
  String#[/regexp/]=: 17003060.9 i/s - 3.87x  (± 0.00) slower
 String#sub!/regexp/:  6359422.8 i/s - 10.34x  (± 0.00) slower
 String#sub!'string':  5454408.5 i/s - 12.05x  (± 0.00) slower
String#gsub!'string':  5088025.1 i/s - 12.92x  (± 0.00) slower
String#gsub!/regexp/:  5051906.9 i/s - 13.01x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.111M i/100ms
        String#chomp     3.348M i/100ms
String#delete_suffix     7.679M i/100ms
Calculating -------------------------------------
          String#sub     18.474M (± 8.5%) i/s -     92.183M in   5.031407s
        String#chomp     35.130M (± 2.7%) i/s -    177.429M in   5.054353s
String#delete_suffix     84.865M (± 7.5%) i/s -    422.324M in   5.007497s

Comparison:
String#delete_suffix: 84865483.3 i/s
        String#chomp: 35130436.9 i/s - 2.42x  (± 0.00) slower
          String#sub: 18474462.5 i/s - 4.59x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   187.796M i/100ms
          String#sub     8.655M i/100ms
Calculating -------------------------------------
String#delete_prefix      1.912B (± 4.2%) i/s -      9.578B in   5.018411s
          String#sub     84.629M (± 4.3%) i/s -    424.100M in   5.020729s

Comparison:
String#delete_prefix: 1911774378.3 i/s
          String#sub: 84628975.3 i/s - 22.59x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.271M i/100ms
    String#unpack[0]     1.281M i/100ms
Calculating -------------------------------------
      String#unpack1     13.088M (± 5.3%) i/s -     66.100M in   5.065363s
    String#unpack[0]     13.412M (± 6.2%) i/s -     67.914M in   5.084210s

Comparison:
    String#unpack[0]: 13412439.7 i/s
      String#unpack1: 13088417.9 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.0.0-dev-f1c7d514, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    12.549k i/100ms
          Time.parse    39.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    220.553k (±39.5%) i/s -    903.528k in   5.023186s
          Time.parse      4.852k (±22.7%) i/s -     20.241k in   4.996230s

Comparison:
        Time.iso8601:   220552.9 i/s
          Time.parse:     4851.6 i/s - 45.46x  (± 0.00) slower

