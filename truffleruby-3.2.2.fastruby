$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       311.876M i/100ms
Function with splat arguments
                         1.870k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.170B (± 2.8%) i/s -     15.906B in   5.022366s
Function with splat arguments
                         20.087k (±10.4%) i/s -     99.110k in   5.000125s

Comparison:
Function with single Array argument: 3169630843.9 i/s
Function with splat arguments:    20087.1 i/s - 157794.25x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   315.259M i/100ms
Sequential Assignment
                       313.554M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.197B (± 2.5%) i/s -     16.078B in   5.033092s
Sequential Assignment
                          3.221B (± 1.0%) i/s -     16.305B in   5.062353s

Comparison:
Sequential Assignment: 3221136986.5 i/s
 Parallel Assignment: 3196616169.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   315.051M i/100ms
       attr_accessor   312.118M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.175B (± 2.3%) i/s -     16.068B in   5.063520s
       attr_accessor      3.213B (± 1.4%) i/s -     16.230B in   5.052376s

Comparison:
       attr_accessor: 3213016544.9 i/s
   getter_and_setter: 3175027891.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    10.879k i/100ms
         respond_to?   322.512M i/100ms
Calculating -------------------------------------
      begin...rescue     98.783k (± 8.9%) i/s -    489.555k in   5.014421s
         respond_to?      3.199B (± 1.8%) i/s -     16.126B in   5.041835s

Comparison:
         respond_to?: 3199485638.3 i/s
      begin...rescue:    98782.8 i/s - 32389.09x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   316.708M i/100ms
             &method   308.632M i/100ms
Calculating -------------------------------------
              normal      3.196B (± 2.1%) i/s -     16.152B in   5.055752s
             &method      3.161B (± 2.5%) i/s -     16.049B in   5.080727s

Comparison:
              normal: 3196348242.4 i/s
             &method: 3160733297.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       158.000  i/100ms
       define_method   163.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          4.594k (±45.5%) i/s -      8.058k in   5.064726s
       define_method     12.538k (±33.9%) i/s -     12.551k in   5.227387s

Comparison:
       define_method:    12537.9 i/s
module_eval with string:     4594.4 i/s - 2.73x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   127.861k i/100ms
       Kernel#format   107.792k i/100ms
            String#%    20.537k i/100ms
Calculating -------------------------------------
         Float#round      1.307M (± 1.8%) i/s -      6.649M in   5.089635s
       Kernel#format      1.065M (± 4.9%) i/s -      5.390M in   5.074003s
            String#%    210.086k (± 8.6%) i/s -      1.047M in   5.039109s

Comparison:
         Float#round:  1306788.1 i/s
       Kernel#format:  1065405.8 i/s - 1.23x  (± 0.00) slower
            String#%:   210085.8 i/s - 6.22x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   317.809M i/100ms
          OpenStruct   317.933M i/100ms
Calculating -------------------------------------
                Hash      3.187B (± 2.7%) i/s -     16.208B in   5.089459s
          OpenStruct      3.201B (± 2.4%) i/s -     16.215B in   5.068863s

Comparison:
          OpenStruct: 3200855098.7 i/s
                Hash: 3187207014.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   315.526M i/100ms
          OpenStruct     4.449k i/100ms
Calculating -------------------------------------
                Hash      3.168B (± 4.0%) i/s -     16.092B in   5.088620s
          OpenStruct     48.010k (±11.0%) i/s -    240.246k in   5.091791s

Comparison:
                Hash: 3168476806.0 i/s
          OpenStruct:    48010.2 i/s - 65995.91x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   867.716k i/100ms
  ancestors.include?   219.918k i/100ms
Calculating -------------------------------------
  less than or equal      9.553M (± 2.1%) i/s -     48.592M in   5.088734s
  ancestors.include?      2.203M (± 6.4%) i/s -     10.996M in   5.019023s

Comparison:
  less than or equal:  9553208.1 i/s
  ancestors.include?:  2202724.0 i/s - 4.34x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     32.014  (± 3.1%) i/s -    160.000  in   5.006099s
         Kernel loop     32.211  (± 3.1%) i/s -    161.000  in   5.001348s

Comparison:
         Kernel loop:       32.2 i/s
          While Loop:       32.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   316.145M i/100ms
         Array#first   316.071M i/100ms
Calculating -------------------------------------
           Array#[0]      3.185B (± 4.0%) i/s -     16.123B in   5.072954s
         Array#first      3.195B (± 2.0%) i/s -     16.120B in   5.046696s

Comparison:
         Array#first: 3195425037.6 i/s
           Array#[0]: 3184621974.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   307.653M i/100ms
          Array#last   319.025M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.182B (± 4.7%) i/s -     15.998B in   5.041992s
          Array#last      3.213B (± 1.4%) i/s -     16.270B in   5.064190s

Comparison:
          Array#last: 3213436347.7 i/s
          Array#[-1]: 3181879445.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   889.178k i/100ms
Calculating -------------------------------------
                find     13.722  (± 0.0%) i/s -     69.000  in   5.031332s
             bsearch      9.363M (± 2.8%) i/s -     47.126M in   5.037710s

Comparison:
             bsearch:  9362733.4 i/s
                find:       13.7 i/s - 682309.95x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.211  (± 0.0%) i/s -      2.000  in   9.458350s
        Array#insert      1.384  (± 0.0%) i/s -      7.000  in   5.058735s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.2 i/s - 6.55x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   311.036M i/100ms
          Array#size   322.869M i/100ms
         Array#count   323.203M i/100ms
Calculating -------------------------------------
        Array#length      3.181B (± 3.6%) i/s -     16.174B in   5.091165s
          Array#size      3.201B (± 2.2%) i/s -     16.143B in   5.045103s
         Array#count      3.197B (± 2.5%) i/s -     16.160B in   5.057636s

Comparison:
          Array#size: 3201478468.3 i/s
         Array#count: 3197343228.9 i/s - same-ish: difference falls within error
        Array#length: 3181412446.7 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    36.561k i/100ms
        Array#sample     3.807M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    364.627k (± 2.5%) i/s -      1.828M in   5.016739s
        Array#sample     38.229M (± 0.7%) i/s -    194.171M in   5.079371s

Comparison:
        Array#sample: 38229225.4 i/s
 Array#shuffle.first:   364627.2 i/s - 104.84x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   952.000  i/100ms
          Date.parse   543.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     17.348k (±35.1%) i/s -     78.064k in   5.027336s
          Date.parse      9.196k (±19.8%) i/s -     43.983k in   5.043855s

Comparison:
        Date.iso8601:    17348.3 i/s
          Date.parse:     9196.2 i/s - 1.89x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   314.899k i/100ms
           Array#map     1.681M i/100ms
Calculating -------------------------------------
   Array#each + push      3.607M (± 6.3%) i/s -     18.264M in   5.087358s
           Array#map     17.104M (± 9.0%) i/s -     85.744M in   5.063269s

Comparison:
           Array#map: 17104476.5 i/s
   Array#each + push:  3606542.5 i/s - 4.74x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     9.468M i/100ms
               #each    35.544M i/100ms
Calculating -------------------------------------
            For loop    123.452M (± 2.7%) i/s -    624.864M in   5.065745s
               #each    353.886M (± 1.7%) i/s -      1.777B in   5.023362s

Comparison:
               #each: 353886219.3 i/s
            For loop: 123451612.6 i/s - 2.87x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.411M i/100ms
     each_with_index     1.719M i/100ms
Calculating -------------------------------------
          While Loop     14.106M (± 3.0%) i/s -     70.541M in   5.005658s
     each_with_index     17.093M (± 2.0%) i/s -     85.935M in   5.029442s

Comparison:
     each_with_index: 17092855.5 i/s
          While Loop: 14106391.7 i/s - 1.21x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   312.771k i/100ms
      inject to_proc   310.434k i/100ms
        inject block   312.733k i/100ms
Calculating -------------------------------------
       inject symbol      3.128M (± 0.2%) i/s -     15.951M in   5.099288s
      inject to_proc      3.127M (± 0.2%) i/s -     15.832M in   5.063174s
        inject block      3.127M (± 0.2%) i/s -     15.637M in   5.001118s

Comparison:
       inject symbol:  3128157.2 i/s
      inject to_proc:  3126930.2 i/s - same-ish: difference falls within error
        inject block:  3126645.3 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    24.147k i/100ms
   Array#map.flatten    25.638k i/100ms
      Array#flat_map    57.750k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    258.175k (± 8.1%) i/s -      1.304M in   5.094468s
   Array#map.flatten    261.704k (± 7.7%) i/s -      1.308M in   5.034546s
      Array#flat_map    569.652k (± 4.5%) i/s -      2.888M in   5.080398s

Comparison:
      Array#flat_map:   569652.4 i/s
   Array#map.flatten:   261703.6 i/s - 2.18x  (± 0.00) slower
Array#map.flatten(1):   258174.7 i/s - 2.21x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   316.740k i/100ms
  Array#reverse_each     2.938M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.183M (± 5.7%) i/s -     16.154M in   5.099025s
  Array#reverse_each     23.772M (± 4.4%) i/s -    120.453M in   5.079298s

Comparison:
  Array#reverse_each: 23771546.6 i/s
  Array#reverse.each:  3183217.8 i/s - 7.47x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       936.359k i/100ms
   Enumerable#detect     4.595M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.415M (± 7.8%) i/s -    206.935M in  20.045450s
   Enumerable#detect     45.687M (± 2.4%) i/s -    914.405M in  20.027913s

Comparison:
   Enumerable#detect: 45686651.8 i/s
Enumerable#select.first: 10415017.5 i/s - 4.39x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       186.549k i/100ms
Enumerable#select.last
                       544.424k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.232M (± 4.9%) i/s -     16.230M in   5.035893s
Enumerable#select.last
                          5.531M (± 2.0%) i/s -     27.766M in   5.021902s

Comparison:
Enumerable#select.last:  5531223.0 i/s
Enumerable#reverse.detect:  3231654.8 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.019k i/100ms
  Enumerable#sort_by     3.957k i/100ms
     Enumerable#sort     5.150k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         29.016k (±50.0%) i/s -    100.475k in   5.095456s
  Enumerable#sort_by     36.151k (±28.5%) i/s -    150.366k in   5.061789s
     Enumerable#sort     56.942k (± 3.3%) i/s -    288.400k in   5.070907s

Comparison:
     Enumerable#sort:    56942.1 i/s
  Enumerable#sort_by:    36151.3 i/s - 1.58x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    29016.4 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   855.263k i/100ms
Enumerable#sort_by...first
                         9.653k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      8.621M (± 0.8%) i/s -     43.618M in   5.059956s
Enumerable#sort_by...first
                        106.558k (± 2.2%) i/s -    540.568k in   5.075706s

Comparison:
   Enumerable#min_by:  8620815.5 i/s
Enumerable#sort_by...first:   106557.9 i/s - 80.90x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   583.833k i/100ms
            Hash#dup   660.237k i/100ms
Calculating -------------------------------------
              Hash[]      6.349M (± 7.3%) i/s -     32.111M in   5.093594s
            Hash#dup      5.699M (± 8.7%) i/s -     28.390M in   5.026627s

Comparison:
              Hash[]:  6348798.4 i/s
            Hash#dup:  5699166.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   316.514M i/100ms
  Hash#fetch, symbol   315.021M i/100ms
     Hash#[], string    20.054M i/100ms
  Hash#fetch, string    20.209M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.218B (± 2.0%) i/s -     16.142B in   5.017906s
  Hash#fetch, symbol      3.224B (± 1.4%) i/s -     16.381B in   5.081485s
     Hash#[], string    200.853M (± 1.5%) i/s -      1.023B in   5.093256s
  Hash#fetch, string    200.948M (± 2.3%) i/s -      1.010B in   5.031410s

Comparison:
  Hash#fetch, symbol: 3224324984.0 i/s
     Hash#[], symbol: 3218349120.0 i/s - same-ish: difference falls within error
  Hash#fetch, string: 200947775.4 i/s - 16.05x  (± 0.00) slower
     Hash#[], string: 200853487.3 i/s - 16.05x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    92.306M i/100ms
             Hash#[]    91.613M i/100ms
          Hash#[] ||    92.412M i/100ms
          Hash#[] &&    92.409M i/100ms
          Hash#fetch    92.412M i/100ms
 Hash#fetch fallback    91.882M i/100ms
Calculating -------------------------------------
            Hash#dig    919.084M (± 1.7%) i/s -      4.615B in   5.023186s
             Hash#[]    919.730M (± 1.5%) i/s -      4.672B in   5.081194s
          Hash#[] ||    916.176M (± 2.0%) i/s -      4.621B in   5.045533s
          Hash#[] &&    918.771M (± 1.8%) i/s -      4.620B in   5.030612s
          Hash#fetch    916.155M (± 2.6%) i/s -      4.621B in   5.047360s
 Hash#fetch fallback    919.718M (± 1.4%) i/s -      4.686B in   5.096105s

Comparison:
             Hash#[]: 919730232.0 i/s
 Hash#fetch fallback: 919718292.9 i/s - same-ish: difference falls within error
            Hash#dig: 919084492.3 i/s - same-ish: difference falls within error
          Hash#[] &&: 918770593.6 i/s - same-ish: difference falls within error
          Hash#[] ||: 916176385.6 i/s - same-ish: difference falls within error
          Hash#fetch: 916154523.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   322.412M i/100ms
  Hash#fetch + block   316.938M i/100ms
    Hash#fetch + arg   323.382M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.217B (± 1.0%) i/s -     16.121B in   5.011030s
  Hash#fetch + block      3.224B (± 0.9%) i/s -     16.164B in   5.014016s
    Hash#fetch + arg      3.208B (± 2.1%) i/s -     16.169B in   5.043062s

Comparison:
  Hash#fetch + block: 3224000101.3 i/s
  Hash#fetch + const: 3217365649.2 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 3207741684.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    36.033k i/100ms
         sort + to_h     3.748k i/100ms
Calculating -------------------------------------
      sort_by + to_h    471.278k (± 8.3%) i/s -      2.378M in   5.082829s
         sort + to_h    193.066k (±11.6%) i/s -    940.748k in   5.000524s

Comparison:
      sort_by + to_h:   471277.7 i/s
         sort + to_h:   193066.4 i/s - 2.44x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   210.694k i/100ms
       Hash#each_key   229.023k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.049M (±10.3%) i/s -     10.113M in   5.041118s
       Hash#each_key      2.236M (± 3.2%) i/s -     11.222M in   5.023779s

Comparison:
       Hash#each_key:  2236149.7 i/s
      Hash#keys.each:  2048763.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   317.000  i/100ms
           Hash#key?     3.449M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      3.968k (±13.4%) i/s -     19.654k in   5.075161s
           Hash#key?     35.207M (± 1.6%) i/s -    179.337M in   5.095182s

Comparison:
           Hash#key?: 35206646.8 i/s
  Hash#keys.include?:     3967.8 i/s - 8873.15x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    62.202k i/100ms
            Hash#[]=    52.639k i/100ms
Calculating -------------------------------------
         Hash#merge!    636.872k (± 6.7%) i/s -      3.172M in   5.010551s
            Hash#[]=    606.413k (± 5.6%) i/s -      3.053M in   5.050992s

Comparison:
         Hash#merge!:   636872.4 i/s
            Hash#[]=:   606412.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        41.429k i/100ms
      Hash#merge({})    19.425k i/100ms
 Hash#dup#merge!({})    32.145k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        389.785k (±10.3%) i/s -      1.947M in   5.059473s
      Hash#merge({})    205.392k (± 7.8%) i/s -      1.030M in   5.054473s
 Hash#dup#merge!({})    319.719k (± 8.8%) i/s -      1.607M in   5.079690s

Comparison:
{}#merge!(Hash) do end:   389784.7 i/s
 Hash#dup#merge!({}):   319719.2 i/s - 1.22x  (± 0.00) slower
      Hash#merge({}):   205391.6 i/s - 1.90x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   316.763M i/100ms
          Hash#merge   321.950M i/100ms
Calculating -------------------------------------
        Hash#**other      3.198B (± 2.2%) i/s -     16.155B in   5.054527s
          Hash#merge      3.217B (± 1.6%) i/s -     16.097B in   5.006012s

Comparison:
          Hash#merge: 3216508047.1 i/s
        Hash#**other: 3197746565.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.122k i/100ms
         Hash#merge!    60.439k i/100ms
Calculating -------------------------------------
          Hash#merge     12.696k (±11.6%) i/s -     62.832k in   5.038849s
         Hash#merge!    641.851k (± 3.0%) i/s -      3.264M in   5.089540s

Comparison:
         Hash#merge!:   641851.3 i/s
          Hash#merge:    12695.9 i/s - 50.56x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.567M i/100ms
Array#each               1.484M i/100ms
Array#each_w/_object     1.546M i/100ms
Hash#select-include      2.439M i/100ms
Calculating -------------------------------------
Hash#native-slice        18.408M (± 6.4%) i/s -     92.441M in   5.051652s
Array#each               15.103M (± 5.6%) i/s -     75.678M in   5.032646s
Array#each_w/_object     15.752M (± 6.5%) i/s -     78.833M in   5.034181s
Hash#select-include      23.899M (± 6.7%) i/s -    119.492M in   5.029660s

Comparison:
Hash#select-include : 23898918.3 i/s
Hash#native-slice   : 18407827.3 i/s - 1.30x  (± 0.00) slower
Array#each_w/_object: 15752119.9 i/s - 1.52x  (± 0.00) slower
Array#each          : 15103193.6 i/s - 1.58x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   295.000  i/100ms
         Hash#value?     2.735k i/100ms
Calculating -------------------------------------
Hash#values.include?      3.708k (±10.7%) i/s -     18.290k in   5.028829s
         Hash#value?     28.045k (± 0.6%) i/s -    142.220k in   5.071415s

Comparison:
         Hash#value?:    28044.6 i/s
Hash#values.include?:     3708.1 i/s - 7.56x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   318.699M i/100ms
                send   313.377M i/100ms
      method_missing   318.577M i/100ms
Calculating -------------------------------------
                call      3.222B (± 0.8%) i/s -     16.254B in   5.045361s
                send      3.222B (± 1.2%) i/s -     16.296B in   5.057932s
      method_missing      3.200B (± 2.5%) i/s -     16.247B in   5.080523s

Comparison:
                send: 3222337175.3 i/s
                call: 3221702746.1 i/s - same-ish: difference falls within error
      method_missing: 3200063047.5 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    65.626k i/100ms
      Symbol#to_proc    70.094k i/100ms
Calculating -------------------------------------
               Block    770.968k (±14.5%) i/s -      3.806M in   5.057111s
      Symbol#to_proc    782.498k (±14.7%) i/s -      3.855M in   5.045369s

Comparison:
      Symbol#to_proc:   782498.1 i/s
               Block:   770967.6 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   316.368M i/100ms
       block + yield   304.417M i/100ms
        unused block   323.215M i/100ms
               yield   322.924M i/100ms
Calculating -------------------------------------
          block.call      3.215B (± 2.0%) i/s -     16.135B in   5.021276s
       block + yield      3.214B (± 2.2%) i/s -     16.134B in   5.021945s
        unused block      3.199B (± 2.5%) i/s -     16.161B in   5.055396s
               yield      3.220B (± 1.6%) i/s -     16.146B in   5.015052s

Comparison:
               yield: 3220460865.6 i/s
          block.call: 3214616388.2 i/s - same-ish: difference falls within error
       block + yield: 3214376961.3 i/s - same-ish: difference falls within error
        unused block: 3198859885.9 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     5.145k i/100ms
      range#include?   181.000  i/100ms
       range#member?   263.000  i/100ms
       plain compare     9.184k i/100ms
Calculating -------------------------------------
        range#cover?     63.118k (±24.4%) i/s -    288.120k in   5.046912s
      range#include?      2.751k (±25.4%) i/s -     12.489k in   5.013330s
       range#member?      2.547k (±25.4%) i/s -     11.835k in   5.041654s
       plain compare     92.878k (±20.0%) i/s -    440.832k in   5.055311s

Comparison:
       plain compare:    92877.8 i/s
        range#cover?:    63118.1 i/s - same-ish: difference falls within error
      range#include?:     2750.9 i/s - 33.76x  (± 0.00) slower
       range#member?:     2547.3 i/s - 36.46x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    13.457M i/100ms
           String#=~    14.759M i/100ms
          Regexp#===    14.757M i/100ms
        String#match    11.705M i/100ms
Calculating -------------------------------------
       String#match?    135.930M (± 1.6%) i/s -    686.319M in   5.050364s
           String#=~    146.526M (± 1.8%) i/s -    737.933M in   5.037827s
          Regexp#===    146.583M (± 3.2%) i/s -    737.854M in   5.040099s
        String#match    117.269M (± 0.8%) i/s -    596.975M in   5.091004s

Comparison:
          Regexp#===: 146583346.6 i/s
           String#=~: 146526209.1 i/s - same-ish: difference falls within error
       String#match?: 135930300.5 i/s - 1.08x  (± 0.00) slower
        String#match: 117269083.4 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.666M i/100ms
      String#casecmp     4.735M i/100ms
Calculating -------------------------------------
String#downcase + ==     31.124M (± 5.8%) i/s -    157.308M in   5.076006s
      String#casecmp     47.402M (± 4.3%) i/s -    236.727M in   5.003970s

Comparison:
      String#casecmp: 47401999.4 i/s
String#downcase + ==: 31124171.9 i/s - 1.52x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     9.080M i/100ms
       String#concat    10.512M i/100ms
       String#append    10.521M i/100ms
         "foo" "bar"   323.517M i/100ms
  "#{'foo'}#{'bar'}"    10.685M i/100ms
Calculating -------------------------------------
            String#+    104.660M (± 3.4%) i/s -    526.667M in   5.038398s
       String#concat    104.065M (± 6.3%) i/s -    525.607M in   5.081660s
       String#append    103.454M (± 6.0%) i/s -    515.531M in   5.008058s
         "foo" "bar"      3.199B (± 2.9%) i/s -     16.176B in   5.061207s
  "#{'foo'}#{'bar'}"    103.071M (± 6.2%) i/s -    512.898M in   5.001709s

Comparison:
         "foo" "bar": 3198999810.0 i/s
            String#+: 104659854.7 i/s - 30.57x  (± 0.00) slower
       String#concat: 104064983.3 i/s - 30.74x  (± 0.00) slower
       String#append: 103454452.2 i/s - 30.92x  (± 0.00) slower
  "#{'foo'}#{'bar'}": 103070790.8 i/s - 31.04x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   322.846M i/100ms
          String#dup   314.638M i/100ms
Calculating -------------------------------------
           String#+@      3.199B (± 2.4%) i/s -     16.142B in   5.048736s
          String#dup      3.214B (± 2.0%) i/s -     16.361B in   5.093098s

Comparison:
          String#dup: 3213783385.4 i/s
           String#+@: 3199304268.1 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   841.694k i/100ms
       String#match?     1.616M i/100ms
    String#end_with?    11.049M i/100ms
Calculating -------------------------------------
           String#=~     14.286M (± 2.2%) i/s -     71.544M in   5.010858s
       String#match?     16.233M (± 0.3%) i/s -     82.398M in   5.075975s
    String#end_with?    111.051M (± 1.3%) i/s -    563.483M in   5.074971s

Comparison:
    String#end_with?: 111050744.7 i/s
       String#match?: 16233081.2 i/s - 6.84x  (± 0.00) slower
           String#=~: 14285746.8 i/s - 7.77x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   770.806k i/100ms
          String#sub   966.386k i/100ms
String#dup["string"]=
                         9.787M i/100ms
Calculating -------------------------------------
         String#gsub      8.468M (± 8.5%) i/s -     42.394M in   5.052283s
          String#sub      9.887M (± 8.9%) i/s -     49.286M in   5.041858s
String#dup["string"]=
                         97.293M (± 2.2%) i/s -    489.350M in   5.032241s

Comparison:
String#dup["string"]=: 97292552.5 i/s
          String#sub:  9886518.7 i/s - 9.84x  (± 0.00) slower
         String#gsub:  8467791.9 i/s - 11.49x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   365.605k i/100ms
           String#tr   160.024k i/100ms
Calculating -------------------------------------
         String#gsub      4.112M (± 8.0%) i/s -     20.474M in   5.018066s
           String#tr      1.610M (± 3.2%) i/s -      8.161M in   5.075685s

Comparison:
         String#gsub:  4112266.9 i/s
           String#tr:  1609626.3 i/s - 2.55x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   314.350M i/100ms
         With Freeze   314.037M i/100ms
Calculating -------------------------------------
      Without Freeze      3.201B (± 2.8%) i/s -     16.032B in   5.012333s
         With Freeze      3.212B (± 2.0%) i/s -     16.330B in   5.086295s

Comparison:
         With Freeze: 3211865968.2 i/s
      Without Freeze: 3201145018.2 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/    10.288k i/100ms
      String#squeeze    75.538k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    153.634k (± 8.8%) i/s -    761.312k in   5.013312s
      String#squeeze    802.530k (± 2.3%) i/s -      4.079M in   5.085515s

Comparison:
      String#squeeze:   802530.0 i/s
 String#gsub/regex+/:   153633.7 i/s - 5.22x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     3.951M i/100ms
       String#match?     6.355M i/100ms
  String#start_with?    12.442M i/100ms
Calculating -------------------------------------
           String#=~     47.787M (± 3.3%) i/s -    241.000M in   5.049148s
       String#match?     63.276M (± 1.9%) i/s -    317.755M in   5.023641s
  String#start_with?    123.610M (± 1.9%) i/s -    622.076M in   5.034556s

Comparison:
  String#start_with?: 123610071.5 i/s
       String#match?: 63275756.1 i/s - 1.95x  (± 0.00) slower
           String#=~: 47787244.9 i/s - 2.59x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    57.942k i/100ms
    String#[0, n] ==   281.633k i/100ms
   String#[RANGE] ==   361.219k i/100ms
   String#[0...n] ==   248.442k i/100ms
Calculating -------------------------------------
  String#start_with?      6.981M (± 3.0%) i/s -     34.881M in   5.004525s
    String#[0, n] ==      3.044M (± 5.5%) i/s -     15.208M in   5.015755s
   String#[RANGE] ==      3.772M (± 3.9%) i/s -     19.145M in   5.083859s
   String#[0...n] ==      2.547M (± 7.4%) i/s -     12.671M in   5.012908s

Comparison:
  String#start_with?:  6980878.5 i/s
   String#[RANGE] ==:  3772464.6 i/s - 1.85x  (± 0.00) slower
    String#[0, n] ==:  3044205.3 i/s - 2.29x  (± 0.00) slower
   String#[0...n] ==:  2547497.7 i/s - 2.74x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     9.638M i/100ms
 String#sub!'string'   972.705k i/100ms
String#gsub!'string'   887.066k i/100ms
  String#[/regexp/]=     2.674M i/100ms
 String#sub!/regexp/     1.317M i/100ms
String#gsub!/regexp/   788.506k i/100ms
Calculating -------------------------------------
  String#['string']=     97.553M (± 1.8%) i/s -    491.557M in   5.040789s
 String#sub!'string'     10.193M (±17.3%) i/s -     47.663M in   5.074364s
String#gsub!'string'      8.871M (± 8.3%) i/s -     44.353M in   5.045580s
  String#[/regexp/]=     27.182M (± 2.9%) i/s -    136.362M in   5.021306s
 String#sub!/regexp/     13.698M (±11.0%) i/s -     68.486M in   5.077222s
String#gsub!/regexp/      8.170M (± 9.1%) i/s -     41.002M in   5.076223s

Comparison:
  String#['string']=: 97553406.9 i/s
  String#[/regexp/]=: 27182431.9 i/s - 3.59x  (± 0.00) slower
 String#sub!/regexp/: 13698226.1 i/s - 7.12x  (± 0.00) slower
 String#sub!'string': 10192845.4 i/s - 9.57x  (± 0.00) slower
String#gsub!'string':  8871481.7 i/s - 11.00x  (± 0.00) slower
String#gsub!/regexp/:  8170319.3 i/s - 11.94x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     2.912M i/100ms
        String#chomp     5.839M i/100ms
String#delete_suffix    15.343M i/100ms
Calculating -------------------------------------
          String#sub     30.050M (± 3.3%) i/s -    151.448M in   5.045710s
        String#chomp     58.419M (± 1.3%) i/s -    297.807M in   5.098772s
String#delete_suffix    152.265M (± 8.3%) i/s -    767.141M in   5.078811s

Comparison:
String#delete_suffix: 152264975.1 i/s
        String#chomp: 58419112.0 i/s - 2.61x  (± 0.00) slower
          String#sub: 30050490.8 i/s - 5.07x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   319.740M i/100ms
          String#sub    16.053M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.210B (± 1.6%) i/s -     16.307B in   5.082000s
          String#sub    161.811M (± 1.8%) i/s -    818.705M in   5.061419s

Comparison:
String#delete_prefix: 3209535559.4 i/s
          String#sub: 161811315.3 i/s - 19.84x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.331M i/100ms
    String#unpack[0]     1.767M i/100ms
Calculating -------------------------------------
      String#unpack1     18.725M (± 3.1%) i/s -     94.505M in   5.052044s
    String#unpack[0]     18.373M (± 5.8%) i/s -     91.902M in   5.026600s

Comparison:
      String#unpack1: 18725454.5 i/s
    String#unpack[0]: 18373003.2 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.1.0-dev-a4c93d06, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    23.549k i/100ms
          Time.parse   256.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    470.135k (±24.9%) i/s -      2.119M in   5.008166s
          Time.parse      4.935k (±27.6%) i/s -     22.784k in   5.046517s

Comparison:
        Time.iso8601:   470134.9 i/s
          Time.parse:     4935.3 i/s - 95.26x  (± 0.00) slower

