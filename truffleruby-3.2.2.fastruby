$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       113.314M i/100ms
Function with splat arguments
                         1.199k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.135B (± 0.6%) i/s -      5.779B in   5.093969s
Function with splat arguments
                         13.114k (± 8.3%) i/s -     65.945k in   5.080580s

Comparison:
Function with single Array argument: 1134515797.8 i/s
Function with splat arguments:    13114.4 i/s - 86509.09x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   113.287M i/100ms
Sequential Assignment
                       113.353M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.137B (± 1.0%) i/s -      5.778B in   5.081005s
Sequential Assignment
                          1.136B (± 0.8%) i/s -      5.781B in   5.089016s

Comparison:
 Parallel Assignment: 1137215281.7 i/s
Sequential Assignment: 1136038426.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   113.391M i/100ms
       attr_accessor   113.557M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.135B (± 0.8%) i/s -      5.783B in   5.095224s
       attr_accessor      1.133B (± 0.6%) i/s -      5.678B in   5.011141s

Comparison:
   getter_and_setter: 1135035145.4 i/s
       attr_accessor: 1133085785.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     9.960k i/100ms
         respond_to?   113.628M i/100ms
Calculating -------------------------------------
      begin...rescue     71.332k (± 6.1%) i/s -    358.560k in   5.052027s
         respond_to?      1.132B (± 1.9%) i/s -      5.681B in   5.020269s

Comparison:
         respond_to?: 1132131457.1 i/s
      begin...rescue:    71331.8 i/s - 15871.35x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   113.348M i/100ms
             &method   113.422M i/100ms
Calculating -------------------------------------
              normal      1.135B (± 0.8%) i/s -      5.781B in   5.094418s
             &method      1.134B (± 0.6%) i/s -      5.671B in   5.002419s

Comparison:
              normal: 1134787985.9 i/s
             &method: 1133706759.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       117.000  i/100ms
       define_method   134.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.533k (±54.1%) i/s -      6.318k in   5.096500s
       define_method      6.781k (±44.8%) i/s -      9.782k in   5.002241s

Comparison:
       define_method:     6781.0 i/s
module_eval with string:     2532.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    82.449k i/100ms
       Kernel#format    72.125k i/100ms
            String#%    71.850k i/100ms
Calculating -------------------------------------
         Float#round    885.792k (± 2.4%) i/s -      4.452M in   5.029367s
       Kernel#format    729.113k (± 2.3%) i/s -      3.678M in   5.047698s
            String#%    719.997k (± 3.0%) i/s -      3.664M in   5.094093s

Comparison:
         Float#round:   885792.4 i/s
       Kernel#format:   729112.7 i/s - 1.21x  (± 0.00) slower
            String#%:   719996.7 i/s - 1.23x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.822M i/100ms
          OpenStruct   113.547M i/100ms
Calculating -------------------------------------
                Hash      1.134B (± 0.5%) i/s -      5.691B in   5.017938s
          OpenStruct      1.137B (± 0.9%) i/s -      5.791B in   5.094029s

Comparison:
          OpenStruct: 1136881352.4 i/s
                Hash: 1134184044.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.427M i/100ms
          OpenStruct     3.291k i/100ms
Calculating -------------------------------------
                Hash      1.130B (± 0.7%) i/s -      5.671B in   5.020486s
          OpenStruct     34.369k (±13.3%) i/s -    167.841k in   5.003189s

Comparison:
                Hash: 1129701756.3 i/s
          OpenStruct:    34368.7 i/s - 32870.04x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   806.894k i/100ms
  ancestors.include?   170.423k i/100ms
Calculating -------------------------------------
  less than or equal      8.655M (± 4.1%) i/s -     43.572M in   5.043307s
  ancestors.include?      1.819M (± 3.2%) i/s -      9.203M in   5.064143s

Comparison:
  less than or equal:  8655258.2 i/s
  ancestors.include?:  1819152.2 i/s - 4.76x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     11.303  (± 0.0%) i/s -     57.000  in   5.047528s
         Kernel loop     11.349  (± 0.0%) i/s -     57.000  in   5.022651s

Comparison:
         Kernel loop:       11.3 i/s
          While Loop:       11.3 i/s - 1.00x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   113.311M i/100ms
         Array#first   113.315M i/100ms
Calculating -------------------------------------
           Array#[0]      1.138B (± 1.1%) i/s -      5.779B in   5.078101s
         Array#first      1.135B (± 0.6%) i/s -      5.779B in   5.092079s

Comparison:
           Array#[0]: 1138130519.5 i/s
         Array#first: 1134956340.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   113.262M i/100ms
          Array#last   113.727M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.134B (± 0.5%) i/s -      5.776B in   5.093498s
          Array#last      1.135B (± 0.8%) i/s -      5.686B in   5.008169s

Comparison:
          Array#last: 1135490602.5 i/s
          Array#[-1]: 1134101280.7 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   658.275k i/100ms
Calculating -------------------------------------
                find      4.727  (± 0.0%) i/s -     24.000  in   5.077067s
             bsearch      6.697M (± 2.7%) i/s -     33.572M in   5.017174s

Comparison:
             bsearch:  6696817.0 i/s
                find:        4.7 i/s - 1416674.33x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.068  (± 0.0%) i/s -      1.000  in  14.654754s
        Array#insert      1.024  (± 0.0%) i/s -      6.000  in   5.859045s

Comparison:
        Array#insert:        1.0 i/s
       Array#unshift:        0.1 i/s - 15.01x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   113.198M i/100ms
          Array#size   113.222M i/100ms
         Array#count   113.461M i/100ms
Calculating -------------------------------------
        Array#length      1.134B (± 0.4%) i/s -      5.773B in   5.090243s
          Array#size      1.137B (± 0.7%) i/s -      5.774B in   5.080212s
         Array#count      1.138B (± 1.0%) i/s -      5.787B in   5.086954s

Comparison:
         Array#count: 1137630022.6 i/s
          Array#size: 1136690662.4 i/s - same-ish: difference falls within error
        Array#length: 1134165763.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    22.304k i/100ms
        Array#sample     2.663M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    242.542k (± 2.1%) i/s -      1.227M in   5.060120s
        Array#sample     25.578M (± 0.6%) i/s -    130.479M in   5.101485s

Comparison:
        Array#sample: 25577566.9 i/s
 Array#shuffle.first:   242542.4 i/s - 105.46x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   884.000  i/100ms
          Date.parse   902.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     55.675k (±35.3%) i/s -    213.044k in   5.031692s
          Date.parse     27.915k (±34.4%) i/s -    107.338k in   5.056623s

Comparison:
        Date.iso8601:    55675.1 i/s
          Date.parse:    27915.3 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   233.832k i/100ms
           Array#map   919.080k i/100ms
Calculating -------------------------------------
   Array#each + push      2.367M (± 5.0%) i/s -     11.925M in   5.050071s
           Array#map     10.019M (± 4.0%) i/s -     50.549M in   5.053745s

Comparison:
           Array#map: 10018563.3 i/s
   Array#each + push:  2367485.2 i/s - 4.23x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     8.575M i/100ms
               #each    24.879M i/100ms
Calculating -------------------------------------
            For loop     85.777M (± 0.1%) i/s -    437.339M in   5.098568s
               #each    248.811M (± 0.4%) i/s -      1.269B in   5.099673s

Comparison:
               #each: 248811119.8 i/s
            For loop: 85776860.2 i/s - 2.90x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   821.426k i/100ms
     each_with_index     1.012M i/100ms
Calculating -------------------------------------
          While Loop      8.215M (± 0.0%) i/s -     41.893M in   5.099371s
     each_with_index     10.115M (± 0.0%) i/s -     50.582M in   5.000669s

Comparison:
     each_with_index: 10115138.0 i/s
          While Loop:  8215275.0 i/s - 1.23x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   157.719k i/100ms
      inject to_proc   157.091k i/100ms
        inject block   159.689k i/100ms
Calculating -------------------------------------
       inject symbol      1.583M (± 0.1%) i/s -      8.044M in   5.080815s
      inject to_proc      1.594M (± 0.1%) i/s -      8.012M in   5.026279s
        inject block      1.593M (± 0.1%) i/s -      7.984M in   5.012480s

Comparison:
      inject to_proc:  1593953.3 i/s
        inject block:  1592914.9 i/s - same-ish: difference falls within error
       inject symbol:  1583146.9 i/s - 1.01x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    17.519k i/100ms
   Array#map.flatten    17.004k i/100ms
      Array#flat_map    43.488k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    184.168k (± 4.2%) i/s -    928.507k in   5.050704s
   Array#map.flatten    183.842k (± 3.7%) i/s -    918.216k in   5.001647s
      Array#flat_map    436.184k (± 5.0%) i/s -      2.218M in   5.097953s

Comparison:
      Array#flat_map:   436183.8 i/s
Array#map.flatten(1):   184168.3 i/s - 2.37x  (± 0.00) slower
   Array#map.flatten:   183842.3 i/s - 2.37x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   215.523k i/100ms
  Array#reverse_each     1.492M i/100ms
Calculating -------------------------------------
  Array#reverse.each      2.187M (± 2.3%) i/s -     10.992M in   5.028654s
  Array#reverse_each     14.919M (± 0.1%) i/s -     74.615M in   5.001254s

Comparison:
  Array#reverse_each: 14919293.0 i/s
  Array#reverse.each:  2187041.2 i/s - 6.82x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       641.809k i/100ms
   Enumerable#detect     2.686M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          6.833M (± 6.9%) i/s -    136.064M in  20.061607s
   Enumerable#detect     26.855M (± 0.9%) i/s -    537.211M in  20.006090s

Comparison:
   Enumerable#detect: 26854751.6 i/s
Enumerable#select.first:  6832591.2 i/s - 3.93x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       212.914k i/100ms
Enumerable#select.last
                       399.042k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.146M (± 1.9%) i/s -     10.859M in   5.061441s
Enumerable#select.last
                          3.873M (± 6.3%) i/s -     19.553M in   5.078620s

Comparison:
Enumerable#select.last:  3873222.4 i/s
Enumerable#reverse.detect:  2146150.1 i/s - 1.80x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.489k i/100ms
  Enumerable#sort_by     2.687k i/100ms
     Enumerable#sort     3.430k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         20.044k (±12.2%) i/s -     99.560k in   5.101987s
  Enumerable#sort_by     25.156k (±22.0%) i/s -    112.854k in   5.024182s
     Enumerable#sort     38.825k (± 2.7%) i/s -    195.510k in   5.039657s

Comparison:
     Enumerable#sort:    38825.2 i/s
  Enumerable#sort_by:    25155.9 i/s - 1.54x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    20043.8 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   530.830k i/100ms
Enumerable#sort_by...first
                         5.851k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      5.308M (± 0.1%) i/s -     26.541M in   5.000004s
Enumerable#sort_by...first
                         64.597k (± 2.4%) i/s -    327.656k in   5.075464s

Comparison:
   Enumerable#min_by:  5308297.9 i/s
Enumerable#sort_by...first:    64596.9 i/s - 82.18x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   347.783k i/100ms
            Hash#dup   387.502k i/100ms
Calculating -------------------------------------
              Hash[]      4.051M (± 8.6%) i/s -     20.171M in   5.029814s
            Hash#dup      4.173M (± 8.0%) i/s -     20.925M in   5.047083s

Comparison:
            Hash#dup:  4173290.6 i/s
              Hash[]:  4050768.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   113.249M i/100ms
  Hash#fetch, symbol   113.474M i/100ms
     Hash#[], string    15.481M i/100ms
  Hash#fetch, string    13.512M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.134B (± 0.6%) i/s -      5.776B in   5.094132s
  Hash#fetch, symbol      1.135B (± 0.8%) i/s -      5.787B in   5.097899s
     Hash#[], string    155.229M (± 0.5%) i/s -    789.531M in   5.086367s
  Hash#fetch, string    136.083M (± 0.6%) i/s -    689.133M in   5.064269s

Comparison:
  Hash#fetch, symbol: 1135274528.3 i/s
     Hash#[], symbol: 1133829811.8 i/s - same-ish: difference falls within error
     Hash#[], string: 155229399.5 i/s - 7.31x  (± 0.00) slower
  Hash#fetch, string: 136082503.7 i/s - 8.34x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    49.752M i/100ms
             Hash#[]    49.779M i/100ms
          Hash#[] ||    49.792M i/100ms
          Hash#[] &&    49.796M i/100ms
          Hash#fetch    49.795M i/100ms
 Hash#fetch fallback    49.790M i/100ms
Calculating -------------------------------------
            Hash#dig    497.531M (± 0.2%) i/s -      2.488B in   4.999947s
             Hash#[]    497.771M (± 0.2%) i/s -      2.489B in   5.000157s
          Hash#[] ||    497.789M (± 0.2%) i/s -      2.490B in   5.001364s
          Hash#[] &&    497.779M (± 0.2%) i/s -      2.490B in   5.001796s
          Hash#fetch    497.844M (± 0.2%) i/s -      2.490B in   5.001063s
 Hash#fetch fallback    497.860M (± 0.1%) i/s -      2.490B in   5.000437s

Comparison:
 Hash#fetch fallback: 497859949.5 i/s
          Hash#fetch: 497844099.1 i/s - same-ish: difference falls within error
          Hash#[] ||: 497788573.8 i/s - same-ish: difference falls within error
          Hash#[] &&: 497778771.4 i/s - same-ish: difference falls within error
             Hash#[]: 497771367.0 i/s - same-ish: difference falls within error
            Hash#dig: 497531470.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   113.461M i/100ms
  Hash#fetch + block   113.612M i/100ms
    Hash#fetch + arg   113.625M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.134B (± 0.8%) i/s -      5.673B in   5.001205s
  Hash#fetch + block      1.131B (± 2.6%) i/s -      5.681B in   5.024339s
    Hash#fetch + arg      1.134B (± 0.5%) i/s -      5.681B in   5.010130s

Comparison:
  Hash#fetch + const: 1134416988.0 i/s
    Hash#fetch + arg: 1133984070.5 i/s - same-ish: difference falls within error
  Hash#fetch + block: 1131498166.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    21.116k i/100ms
         sort + to_h     3.655k i/100ms
Calculating -------------------------------------
      sort_by + to_h    311.766k (± 6.5%) i/s -      1.563M in   5.035087s
         sort + to_h    121.060k (±10.3%) i/s -    599.420k in   5.051390s

Comparison:
      sort_by + to_h:   311766.1 i/s
         sort + to_h:   121060.0 i/s - 2.58x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   158.752k i/100ms
       Hash#each_key   168.841k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.577M (± 9.5%) i/s -      7.779M in   5.029825s
       Hash#each_key      1.652M (± 6.6%) i/s -      8.442M in   5.149911s

Comparison:
       Hash#each_key:  1651668.5 i/s
      Hash#keys.each:  1576907.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   178.000  i/100ms
           Hash#key?    11.011M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.973k (±12.7%) i/s -      9.790k in   5.070352s
           Hash#key?    110.101M (± 0.1%) i/s -    550.563M in   5.000549s

Comparison:
           Hash#key?: 110100553.9 i/s
  Hash#keys.include?:     1972.7 i/s - 55812.92x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    41.143k i/100ms
            Hash#[]=    40.355k i/100ms
Calculating -------------------------------------
         Hash#merge!    426.532k (± 7.6%) i/s -      2.139M in   5.059496s
            Hash#[]=    412.426k (± 5.6%) i/s -      2.058M in   5.006402s

Comparison:
         Hash#merge!:   426531.8 i/s
            Hash#[]=:   412426.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        26.411k i/100ms
      Hash#merge({})    14.013k i/100ms
 Hash#dup#merge!({})    22.612k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        266.553k (± 8.4%) i/s -      1.321M in   5.000824s
      Hash#merge({})    144.861k (± 9.9%) i/s -    728.676k in   5.082011s
 Hash#dup#merge!({})    247.750k (± 4.2%) i/s -      1.244M in   5.029968s

Comparison:
{}#merge!(Hash) do end:   266553.0 i/s
 Hash#dup#merge!({}):   247749.5 i/s - same-ish: difference falls within error
      Hash#merge({}):   144861.4 i/s - 1.84x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   113.716M i/100ms
          Hash#merge   113.909M i/100ms
Calculating -------------------------------------
        Hash#**other      1.133B (± 1.2%) i/s -      5.686B in   5.017614s
          Hash#merge      1.140B (± 1.2%) i/s -      5.809B in   5.094433s

Comparison:
          Hash#merge: 1140492549.6 i/s
        Hash#**other: 1133339343.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   610.000  i/100ms
         Hash#merge!    41.473k i/100ms
Calculating -------------------------------------
          Hash#merge      7.143k (± 9.2%) i/s -     35.380k in   5.013824s
         Hash#merge!    419.498k (± 8.0%) i/s -      2.115M in   5.076704s

Comparison:
         Hash#merge!:   419497.9 i/s
          Hash#merge:     7142.9 i/s - 58.73x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.487M i/100ms
Array#each               1.355M i/100ms
Array#each_w/_object     1.322M i/100ms
Hash#select-include      1.853M i/100ms
Calculating -------------------------------------
Hash#native-slice        15.577M (± 3.0%) i/s -     78.832M in   5.065770s
Array#each               13.653M (± 2.6%) i/s -     69.094M in   5.064088s
Array#each_w/_object     13.343M (± 3.4%) i/s -     67.405M in   5.057355s
Hash#select-include      18.076M (± 6.7%) i/s -     90.781M in   5.057673s

Comparison:
Hash#select-include : 18075935.5 i/s
Hash#native-slice   : 15576710.2 i/s - 1.16x  (± 0.00) slower
Array#each          : 13653124.2 i/s - 1.32x  (± 0.00) slower
Array#each_w/_object: 13343235.1 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   218.000  i/100ms
         Hash#value?     1.145k i/100ms
Calculating -------------------------------------
Hash#values.include?      2.306k (±11.1%) i/s -     11.554k in   5.093392s
         Hash#value?     11.729k (± 0.2%) i/s -     59.540k in   5.076126s

Comparison:
         Hash#value?:    11729.5 i/s
Hash#values.include?:     2306.3 i/s - 5.09x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   113.688M i/100ms
                send   113.769M i/100ms
      method_missing   113.221M i/100ms
Calculating -------------------------------------
                call      1.134B (± 0.5%) i/s -      5.684B in   5.011675s
                send      1.135B (± 0.6%) i/s -      5.688B in   5.013110s
      method_missing      1.137B (± 0.8%) i/s -      5.774B in   5.080514s

Comparison:
      method_missing: 1136622936.5 i/s
                send: 1134751463.6 i/s - same-ish: difference falls within error
                call: 1134266702.6 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    29.983k i/100ms
      Symbol#to_proc    34.726k i/100ms
Calculating -------------------------------------
               Block    343.667k (± 9.2%) i/s -      1.739M in   5.122093s
      Symbol#to_proc    340.698k (± 8.8%) i/s -      1.702M in   5.045909s

Comparison:
               Block:   343667.2 i/s
      Symbol#to_proc:   340698.0 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   113.922M i/100ms
       block + yield   113.626M i/100ms
        unused block   114.084M i/100ms
               yield   113.349M i/100ms
Calculating -------------------------------------
          block.call      1.137B (± 1.1%) i/s -      5.696B in   5.010822s
       block + yield      1.135B (± 0.5%) i/s -      5.681B in   5.007621s
        unused block      1.137B (± 0.8%) i/s -      5.704B in   5.016996s
               yield      1.135B (± 0.6%) i/s -      5.781B in   5.091896s

Comparison:
        unused block: 1137040822.5 i/s
          block.call: 1136889516.2 i/s - same-ish: difference falls within error
               yield: 1135335089.7 i/s - same-ish: difference falls within error
       block + yield: 1134559011.5 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    16.227k i/100ms
      range#include?   604.000  i/100ms
       range#member?   939.000  i/100ms
       plain compare    32.866k i/100ms
Calculating -------------------------------------
        range#cover?    201.059k (±31.9%) i/s -    892.485k in   5.015643s
      range#include?      8.936k (±26.6%) i/s -     41.676k in   5.026742s
       range#member?      7.843k (±15.5%) i/s -     38.499k in   5.069041s
       plain compare    417.366k (± 3.5%) i/s -      2.103M in   5.046237s

Comparison:
       plain compare:   417366.0 i/s
        range#cover?:   201058.5 i/s - 2.08x  (± 0.00) slower
      range#include?:     8935.8 i/s - 46.71x  (± 0.00) slower
       range#member?:     7842.7 i/s - 53.22x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    10.444M i/100ms
           String#=~    10.248M i/100ms
          Regexp#===    10.246M i/100ms
        String#match     8.506M i/100ms
Calculating -------------------------------------
       String#match?    108.341M (± 0.7%) i/s -    543.112M in   5.013233s
           String#=~    102.493M (± 0.0%) i/s -    522.634M in   5.099203s
          Regexp#===    102.469M (± 0.0%) i/s -    522.549M in   5.099563s
        String#match     85.004M (± 0.1%) i/s -    425.323M in   5.003558s

Comparison:
       String#match?: 108340864.2 i/s
           String#=~: 102493202.3 i/s - 1.06x  (± 0.00) slower
          Regexp#===: 102469316.3 i/s - 1.06x  (± 0.00) slower
        String#match: 85004222.4 i/s - 1.27x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.160M i/100ms
      String#casecmp     3.200M i/100ms
Calculating -------------------------------------
String#downcase + ==     23.311M (± 7.3%) i/s -    116.645M in   5.047015s
      String#casecmp     35.573M (± 5.7%) i/s -    179.220M in   5.054909s

Comparison:
      String#casecmp: 35572600.4 i/s
String#downcase + ==: 23310580.7 i/s - 1.53x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     6.137M i/100ms
       String#concat     7.495M i/100ms
       String#append     7.528M i/100ms
         "foo" "bar"   113.417M i/100ms
  "#{'foo'}#{'bar'}"   113.510M i/100ms
Calculating -------------------------------------
            String#+     74.592M (± 2.2%) i/s -    374.381M in   5.021464s
       String#concat     74.335M (± 3.2%) i/s -    374.766M in   5.046831s
       String#append     74.772M (± 2.2%) i/s -    376.380M in   5.036174s
         "foo" "bar"      1.140B (± 1.4%) i/s -      5.784B in   5.073671s
  "#{'foo'}#{'bar'}"      1.136B (± 0.6%) i/s -      5.789B in   5.095761s

Comparison:
         "foo" "bar": 1140264799.4 i/s
  "#{'foo'}#{'bar'}": 1136087875.3 i/s - same-ish: difference falls within error
       String#append: 74772118.8 i/s - 15.25x  (± 0.00) slower
            String#+: 74592353.4 i/s - 15.29x  (± 0.00) slower
       String#concat: 74335100.5 i/s - 15.34x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   113.449M i/100ms
          String#dup   113.704M i/100ms
Calculating -------------------------------------
           String#+@      1.134B (± 0.7%) i/s -      5.672B in   5.001059s
          String#dup      1.135B (± 0.8%) i/s -      5.685B in   5.007879s

Comparison:
          String#dup: 1135327726.2 i/s
           String#+@: 1134307984.2 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   760.784k i/100ms
       String#match?     1.197M i/100ms
    String#end_with?    10.705M i/100ms
Calculating -------------------------------------
           String#=~      9.826M (± 3.2%) i/s -     49.451M in   5.038438s
       String#match?     11.070M (± 0.2%) i/s -     56.265M in   5.082828s
    String#end_with?    107.367M (± 0.4%) i/s -    545.979M in   5.085230s

Comparison:
    String#end_with?: 107367068.2 i/s
       String#match?: 11069742.0 i/s - 9.70x  (± 0.00) slower
           String#=~:  9825860.9 i/s - 10.93x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   508.231k i/100ms
          String#sub   732.753k i/100ms
String#dup["string"]=
                         7.542M i/100ms
Calculating -------------------------------------
         String#gsub      6.229M (± 8.9%) i/s -     31.002M in   5.017466s
          String#sub      7.510M (± 9.6%) i/s -     37.370M in   5.040982s
String#dup["string"]=
                         75.436M (± 0.0%) i/s -    384.663M in   5.099216s

Comparison:
String#dup["string"]=: 75435649.9 i/s
          String#sub:  7509607.4 i/s - 10.05x  (± 0.00) slower
         String#gsub:  6229280.5 i/s - 12.11x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   230.268k i/100ms
           String#tr   116.465k i/100ms
Calculating -------------------------------------
         String#gsub      2.877M (± 5.4%) i/s -     14.507M in   5.056956s
           String#tr      1.188M (± 2.5%) i/s -      5.940M in   5.003207s

Comparison:
         String#gsub:  2877330.2 i/s
           String#tr:  1187963.2 i/s - 2.42x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   113.305M i/100ms
         With Freeze   113.818M i/100ms
Calculating -------------------------------------
      Without Freeze      1.136B (± 0.8%) i/s -      5.779B in   5.088731s
         With Freeze      1.137B (± 1.2%) i/s -      5.691B in   5.006196s

Comparison:
         With Freeze: 1136914495.2 i/s
      Without Freeze: 1135633274.2 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     6.036k i/100ms
      String#squeeze    48.037k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     96.364k (±10.7%) i/s -    476.844k in   5.028720s
      String#squeeze    479.430k (± 3.6%) i/s -      2.402M in   5.016730s

Comparison:
      String#squeeze:   479429.5 i/s
 String#gsub/regex+/:    96364.0 i/s - 4.98x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     3.540M i/100ms
       String#match?     5.056M i/100ms
  String#start_with?     9.817M i/100ms
Calculating -------------------------------------
           String#=~     35.725M (± 2.6%) i/s -    180.527M in   5.057001s
       String#match?     50.465M (± 0.2%) i/s -    252.790M in   5.009283s
  String#start_with?     97.851M (± 0.7%) i/s -    490.870M in   5.016727s

Comparison:
  String#start_with?: 97850906.3 i/s
       String#match?: 50464513.6 i/s - 1.94x  (± 0.00) slower
           String#=~: 35724560.5 i/s - 2.74x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   101.489k i/100ms
    String#[0, n] ==   234.137k i/100ms
   String#[RANGE] ==   320.758k i/100ms
   String#[0...n] ==   226.506k i/100ms
Calculating -------------------------------------
  String#start_with?      3.832M (± 0.2%) i/s -     19.181M in   5.005077s
    String#[0, n] ==      2.331M (± 2.3%) i/s -     11.707M in   5.026087s
   String#[RANGE] ==      3.202M (± 3.8%) i/s -     16.038M in   5.016160s
   String#[0...n] ==      2.246M (± 2.4%) i/s -     11.325M in   5.044513s

Comparison:
  String#start_with?:  3832411.5 i/s
   String#[RANGE] ==:  3201891.4 i/s - 1.20x  (± 0.00) slower
    String#[0, n] ==:  2330506.7 i/s - 1.64x  (± 0.00) slower
   String#[0...n] ==:  2246452.9 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     7.543M i/100ms
 String#sub!'string'   738.505k i/100ms
String#gsub!'string'   625.048k i/100ms
  String#[/regexp/]=     1.960M i/100ms
 String#sub!/regexp/   928.812k i/100ms
String#gsub!/regexp/   581.402k i/100ms
Calculating -------------------------------------
  String#['string']=     75.434M (± 0.0%) i/s -    377.158M in   4.999828s
 String#sub!'string'      7.565M (±15.0%) i/s -     36.187M in   5.080150s
String#gsub!'string'      6.727M (± 9.9%) i/s -     33.753M in   5.091260s
  String#[/regexp/]=     20.152M (± 3.0%) i/s -    101.905M in   5.061341s
 String#sub!/regexp/      9.071M (± 9.8%) i/s -     45.512M in   5.082940s
String#gsub!/regexp/      5.633M (± 8.5%) i/s -     27.907M in   5.010251s

Comparison:
  String#['string']=: 75434290.0 i/s
  String#[/regexp/]=: 20152451.9 i/s - 3.74x  (± 0.00) slower
 String#sub!/regexp/:  9071028.6 i/s - 8.32x  (± 0.00) slower
 String#sub!'string':  7564639.2 i/s - 9.97x  (± 0.00) slower
String#gsub!'string':  6727030.0 i/s - 11.21x  (± 0.00) slower
String#gsub!/regexp/:  5633039.7 i/s - 13.39x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     2.134M i/100ms
        String#chomp     4.288M i/100ms
String#delete_suffix     9.608M i/100ms
Calculating -------------------------------------
          String#sub     22.562M (± 2.4%) i/s -    113.118M in   5.016618s
        String#chomp     42.878M (± 0.2%) i/s -    214.414M in   5.000597s
String#delete_suffix     96.651M (±10.0%) i/s -    480.422M in   5.043664s

Comparison:
String#delete_suffix: 96650515.3 i/s
        String#chomp: 42877857.2 i/s - 2.25x  (± 0.00) slower
          String#sub: 22562297.7 i/s - 4.28x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   113.536M i/100ms
          String#sub    10.674M i/100ms
Calculating -------------------------------------
String#delete_prefix      1.138B (± 1.2%) i/s -      5.790B in   5.090354s
          String#sub    110.191M (± 0.2%) i/s -    555.062M in   5.037273s

Comparison:
String#delete_prefix: 1137671310.8 i/s
          String#sub: 110191458.4 i/s - 10.32x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.546M i/100ms
    String#unpack[0]     1.604M i/100ms
Calculating -------------------------------------
      String#unpack1     15.995M (± 2.7%) i/s -     80.366M in   5.028102s
    String#unpack[0]     15.750M (± 6.4%) i/s -     78.574M in   5.021324s

Comparison:
      String#unpack1: 15994872.7 i/s
    String#unpack[0]: 15749781.3 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.0.0-dev-d60d4eb9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    19.364k i/100ms
          Time.parse   206.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    241.848k (±11.2%) i/s -      1.181M in   4.999880s
          Time.parse      9.077k (±28.1%) i/s -     38.110k in   5.003401s

Comparison:
        Time.iso8601:   241847.7 i/s
          Time.parse:     9077.2 i/s - 26.64x  (± 0.00) slower

