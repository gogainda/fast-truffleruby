$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       319.328M i/100ms
Function with splat arguments
                         1.913k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.186B (± 2.7%) i/s -     15.966B in   5.014658s
Function with splat arguments
                         20.591k (± 9.5%) i/s -    103.302k in   5.071537s

Comparison:
Function with single Array argument: 3186366754.9 i/s
Function with splat arguments:    20590.5 i/s - 154749.21x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   308.435M i/100ms
Sequential Assignment
                       313.439M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.190B (± 2.7%) i/s -     16.039B in   5.031957s
Sequential Assignment
                          3.200B (± 2.6%) i/s -     15.985B in   4.999781s

Comparison:
Sequential Assignment: 3199549307.3 i/s
 Parallel Assignment: 3189867025.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   318.898M i/100ms
       attr_accessor   312.076M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.188B (± 2.0%) i/s -     15.945B in   5.002982s
       attr_accessor      3.206B (± 1.3%) i/s -     16.228B in   5.062740s

Comparison:
       attr_accessor: 3205944549.1 i/s
   getter_and_setter: 3188389572.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     9.733k i/100ms
         respond_to?   321.330M i/100ms
Calculating -------------------------------------
      begin...rescue    102.390k (± 6.2%) i/s -    515.849k in   5.064068s
         respond_to?      3.189B (± 1.8%) i/s -     16.067B in   5.040277s

Comparison:
         respond_to?: 3188643034.0 i/s
      begin...rescue:   102389.9 i/s - 31142.15x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   316.491M i/100ms
             &method   315.798M i/100ms
Calculating -------------------------------------
              normal      3.185B (± 2.3%) i/s -     16.141B in   5.071249s
             &method      3.199B (± 2.2%) i/s -     16.106B in   5.036834s

Comparison:
             &method: 3199205545.2 i/s
              normal: 3184641245.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       175.000  i/100ms
       define_method   160.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          3.848k (±53.8%) i/s -      8.225k in   5.028517s
       define_method     11.374k (±46.0%) i/s -     11.040k in   5.054117s

Comparison:
       define_method:    11374.4 i/s
module_eval with string:     3847.7 i/s - 2.96x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   121.577k i/100ms
       Kernel#format   107.165k i/100ms
            String#%    20.567k i/100ms
Calculating -------------------------------------
         Float#round      1.297M (± 3.0%) i/s -      6.565M in   5.066032s
       Kernel#format      1.079M (± 2.5%) i/s -      5.465M in   5.070486s
            String#%    213.323k (±10.1%) i/s -      1.069M in   5.077619s

Comparison:
         Float#round:  1297142.0 i/s
       Kernel#format:  1078631.6 i/s - 1.20x  (± 0.00) slower
            String#%:   213323.5 i/s - 6.08x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   316.890M i/100ms
          OpenStruct   309.015M i/100ms
Calculating -------------------------------------
                Hash      3.174B (± 2.4%) i/s -     16.161B in   5.094681s
          OpenStruct      3.186B (± 2.5%) i/s -     16.069B in   5.046297s

Comparison:
          OpenStruct: 3186359834.7 i/s
                Hash: 3174130342.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   322.022M i/100ms
          OpenStruct     3.529k i/100ms
Calculating -------------------------------------
                Hash      3.035B (± 9.3%) i/s -     15.135B in   5.042566s
          OpenStruct     43.542k (±24.1%) i/s -    204.682k in   5.054854s

Comparison:
                Hash: 3035316852.5 i/s
          OpenStruct:    43541.7 i/s - 69710.56x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal     1.128M i/100ms
  ancestors.include?   224.464k i/100ms
Calculating -------------------------------------
  less than or equal     11.585M (± 7.0%) i/s -     58.680M in   5.099546s
  ancestors.include?      2.297M (± 6.4%) i/s -     11.448M in   5.010908s

Comparison:
  less than or equal: 11584648.0 i/s
  ancestors.include?:  2296621.5 i/s - 5.04x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     32.058  (± 3.1%) i/s -    161.000  in   5.023670s
         Kernel loop     32.095  (± 3.1%) i/s -    161.000  in   5.020178s

Comparison:
         Kernel loop:       32.1 i/s
          While Loop:       32.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   311.541M i/100ms
         Array#first   306.739M i/100ms
Calculating -------------------------------------
           Array#[0]      3.151B (± 2.3%) i/s -     15.889B in   5.045119s
         Array#first      3.100B (± 2.6%) i/s -     15.644B in   5.049387s

Comparison:
           Array#[0]: 3151068076.4 i/s
         Array#first: 3100201293.7 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   316.044M i/100ms
          Array#last   301.379M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.105B (± 3.1%) i/s -     15.802B in   5.093979s
          Array#last      3.154B (± 2.1%) i/s -     15.973B in   5.067523s

Comparison:
          Array#last: 3153554785.1 i/s
          Array#[-1]: 3105227486.8 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   893.757k i/100ms
Calculating -------------------------------------
                find     13.695  (± 0.0%) i/s -     69.000  in   5.044401s
             bsearch      9.133M (± 3.1%) i/s -     46.475M in   5.094222s

Comparison:
             bsearch:  9132755.4 i/s
                find:       13.7 i/s - 666887.90x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.213  (± 0.0%) i/s -      2.000  in   9.395743s
        Array#insert      1.392  (± 0.0%) i/s -      7.000  in   5.028651s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.2 i/s - 6.54x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   315.145M i/100ms
          Array#size   311.413M i/100ms
         Array#count   316.100M i/100ms
Calculating -------------------------------------
        Array#length      3.149B (± 3.4%) i/s -     15.757B in   5.009824s
          Array#size      3.167B (± 2.1%) i/s -     15.882B in   5.016860s
         Array#count      3.176B (± 2.8%) i/s -     16.121B in   5.080601s

Comparison:
         Array#count: 3175671773.3 i/s
          Array#size: 3167121671.7 i/s - same-ish: difference falls within error
        Array#length: 3149441836.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    35.999k i/100ms
        Array#sample     3.849M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    360.968k (± 2.5%) i/s -      1.836M in   5.089798s
        Array#sample     38.354M (± 0.9%) i/s -    192.472M in   5.018681s

Comparison:
        Array#sample: 38354195.4 i/s
 Array#shuffle.first:   360968.4 i/s - 106.25x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   979.000  i/100ms
          Date.parse   684.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     20.800k (±44.4%) i/s -     88.110k in   5.031227s
          Date.parse      8.625k (±23.3%) i/s -     40.356k in   5.004484s

Comparison:
        Date.iso8601:    20799.7 i/s
          Date.parse:     8624.6 i/s - 2.41x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   331.438k i/100ms
           Array#map     1.643M i/100ms
Calculating -------------------------------------
   Array#each + push      3.590M (± 7.2%) i/s -     17.898M in   5.022717s
           Array#map     16.937M (± 8.5%) i/s -     85.459M in   5.089457s

Comparison:
           Array#map: 16937080.4 i/s
   Array#each + push:  3590277.1 i/s - 4.72x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    12.237M i/100ms
               #each    35.457M i/100ms
Calculating -------------------------------------
            For loop    123.686M (± 1.8%) i/s -    624.087M in   5.047406s
               #each    355.164M (± 0.6%) i/s -      1.808B in   5.091700s

Comparison:
               #each: 355163645.2 i/s
            For loop: 123686368.4 i/s - 2.87x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.414M i/100ms
     each_with_index     1.707M i/100ms
Calculating -------------------------------------
          While Loop     14.163M (± 1.7%) i/s -     72.137M in   5.095046s
     each_with_index     16.958M (± 2.2%) i/s -     85.353M in   5.035801s

Comparison:
     each_with_index: 16957760.1 i/s
          While Loop: 14162775.6 i/s - 1.20x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   310.726k i/100ms
      inject to_proc   312.522k i/100ms
        inject block   312.318k i/100ms
Calculating -------------------------------------
       inject symbol      3.103M (± 2.5%) i/s -     15.536M in   5.009869s
      inject to_proc      3.121M (± 0.8%) i/s -     15.626M in   5.007730s
        inject block      3.090M (± 4.0%) i/s -     15.616M in   5.063019s

Comparison:
      inject to_proc:  3120626.5 i/s
       inject symbol:  3103370.3 i/s - same-ish: difference falls within error
        inject block:  3090262.0 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    23.699k i/100ms
   Array#map.flatten    25.833k i/100ms
      Array#flat_map    57.247k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    261.035k (± 7.0%) i/s -      1.303M in   5.024827s
   Array#map.flatten    261.597k (± 7.3%) i/s -      1.317M in   5.069892s
      Array#flat_map    570.159k (± 5.4%) i/s -      2.862M in   5.037825s

Comparison:
      Array#flat_map:   570159.3 i/s
   Array#map.flatten:   261597.1 i/s - 2.18x  (± 0.00) slower
Array#map.flatten(1):   261035.4 i/s - 2.18x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   282.023k i/100ms
  Array#reverse_each     2.383M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.109M (± 6.1%) i/s -     15.511M in   5.019117s
  Array#reverse_each     23.871M (± 3.1%) i/s -    121.540M in   5.095821s

Comparison:
  Array#reverse_each: 23870654.6 i/s
  Array#reverse.each:  3109222.0 i/s - 7.68x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                         1.011M i/100ms
   Enumerable#detect     4.604M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.389M (± 7.7%) i/s -    206.188M in  20.003703s
   Enumerable#detect     45.443M (± 3.8%) i/s -    911.511M in  20.090162s

Comparison:
   Enumerable#detect: 45443029.7 i/s
Enumerable#select.first: 10388821.5 i/s - 4.37x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       295.689k i/100ms
Enumerable#select.last
                       521.656k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.151M (± 6.2%) i/s -     15.672M in   5.001847s
Enumerable#select.last
                          5.404M (± 6.0%) i/s -     27.126M in   5.044520s

Comparison:
Enumerable#select.last:  5403970.0 i/s
Enumerable#reverse.detect:  3150587.0 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.979k i/100ms
  Enumerable#sort_by     3.368k i/100ms
     Enumerable#sort     4.588k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         32.888k (±29.9%) i/s -    137.034k in   5.006648s
  Enumerable#sort_by     23.377k (±20.5%) i/s -    111.144k in   5.125621s
     Enumerable#sort     47.464k (±19.1%) i/s -    229.400k in   5.079107s

Comparison:
     Enumerable#sort:    47464.2 i/s
Enumerable#sort_by (Symbol#to_proc):    32888.1 i/s - same-ish: difference falls within error
  Enumerable#sort_by:    23377.2 i/s - 2.03x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   826.764k i/100ms
Enumerable#sort_by...first
                         8.855k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      8.232M (± 1.8%) i/s -     41.338M in   5.023091s
Enumerable#sort_by...first
                        101.417k (± 5.9%) i/s -    504.735k in   5.002474s

Comparison:
   Enumerable#min_by:  8232390.0 i/s
Enumerable#sort_by...first:   101417.1 i/s - 81.17x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]     1.022M i/100ms
            Hash#dup     1.007M i/100ms
Calculating -------------------------------------
              Hash[]     11.215M (± 6.8%) i/s -     56.190M in   5.033975s
            Hash#dup     10.451M (± 8.3%) i/s -     52.339M in   5.053345s

Comparison:
              Hash[]: 11215435.6 i/s
            Hash#dup: 10450918.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   312.135M i/100ms
  Hash#fetch, symbol   321.770M i/100ms
     Hash#[], string    20.021M i/100ms
  Hash#fetch, string    20.064M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.207B (± 1.4%) i/s -     16.231B in   5.062975s
  Hash#fetch, symbol      3.196B (± 3.1%) i/s -     16.089B in   5.040374s
     Hash#[], string    198.974M (± 4.8%) i/s -      1.001B in   5.046100s
  Hash#fetch, string    200.438M (± 2.4%) i/s -      1.003B in   5.008122s

Comparison:
     Hash#[], symbol: 3206514708.2 i/s
  Hash#fetch, symbol: 3195556741.9 i/s - same-ish: difference falls within error
  Hash#fetch, string: 200438394.7 i/s - 16.00x  (± 0.00) slower
     Hash#[], string: 198973530.5 i/s - 16.12x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    91.971M i/100ms
             Hash#[]    90.861M i/100ms
          Hash#[] ||    92.188M i/100ms
          Hash#[] &&    91.711M i/100ms
          Hash#fetch    92.164M i/100ms
 Hash#fetch fallback    91.686M i/100ms
Calculating -------------------------------------
            Hash#dig    916.030M (± 2.2%) i/s -      4.599B in   5.022611s
             Hash#[]    920.429M (± 1.3%) i/s -      4.634B in   5.035380s
          Hash#[] ||    917.033M (± 1.7%) i/s -      4.609B in   5.028052s
          Hash#[] &&    920.573M (± 1.4%) i/s -      4.677B in   5.081952s
          Hash#fetch    920.305M (± 1.3%) i/s -      4.608B in   5.008140s
 Hash#fetch fallback    920.411M (± 1.5%) i/s -      4.676B in   5.081481s

Comparison:
          Hash#[] &&: 920572773.6 i/s
             Hash#[]: 920428697.4 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 920410791.1 i/s - same-ish: difference falls within error
          Hash#fetch: 920304550.5 i/s - same-ish: difference falls within error
          Hash#[] ||: 917033136.3 i/s - same-ish: difference falls within error
            Hash#dig: 916030118.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   316.279M i/100ms
  Hash#fetch + block   316.447M i/100ms
    Hash#fetch + arg   317.962M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.168B (± 2.2%) i/s -     16.130B in   5.094500s
  Hash#fetch + block      3.177B (± 2.4%) i/s -     16.139B in   5.082742s
    Hash#fetch + arg      3.163B (± 5.1%) i/s -     15.898B in   5.044544s

Comparison:
  Hash#fetch + block: 3177192498.5 i/s
  Hash#fetch + const: 3167743483.2 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 3162782730.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    33.579k i/100ms
         sort + to_h     7.180k i/100ms
Calculating -------------------------------------
      sort_by + to_h    320.555k (±26.8%) i/s -      1.511M in   5.009868s
         sort + to_h    215.112k (±12.1%) i/s -      1.055M in   5.030374s

Comparison:
      sort_by + to_h:   320554.6 i/s
         sort + to_h:   215112.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   182.421k i/100ms
       Hash#each_key   213.134k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.030M (± 8.7%) i/s -     10.033M in   5.028740s
       Hash#each_key      2.107M (± 3.5%) i/s -     10.657M in   5.064146s

Comparison:
       Hash#each_key:  2107045.9 i/s
      Hash#keys.each:  2029692.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   342.000  i/100ms
           Hash#key?     3.797M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      6.193k (±17.7%) i/s -     29.412k in   5.030743s
           Hash#key?     38.102M (± 1.4%) i/s -    193.665M in   5.083852s

Comparison:
           Hash#key?: 38101646.4 i/s
  Hash#keys.include?:     6192.9 i/s - 6152.43x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    34.138k i/100ms
            Hash#[]=    36.781k i/100ms
Calculating -------------------------------------
         Hash#merge!    364.970k (± 6.8%) i/s -      1.843M in   5.087893s
            Hash#[]=    368.971k (± 7.6%) i/s -      1.839M in   5.030519s

Comparison:
            Hash#[]=:   368971.4 i/s
         Hash#merge!:   364970.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        32.616k i/100ms
      Hash#merge({})    23.180k i/100ms
 Hash#dup#merge!({})    32.854k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        386.561k (±10.8%) i/s -      1.924M in   5.044997s
      Hash#merge({})    242.191k (± 8.9%) i/s -      1.205M in   5.028125s
 Hash#dup#merge!({})    315.575k (± 9.7%) i/s -      1.577M in   5.055636s

Comparison:
{}#merge!(Hash) do end:   386561.5 i/s
 Hash#dup#merge!({}):   315574.6 i/s - same-ish: difference falls within error
      Hash#merge({}):   242191.2 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   316.060M i/100ms
          Hash#merge   320.745M i/100ms
Calculating -------------------------------------
        Hash#**other      3.172B (± 2.8%) i/s -     16.119B in   5.085416s
          Hash#merge      3.172B (± 2.8%) i/s -     16.037B in   5.059721s

Comparison:
        Hash#**other: 3172414139.5 i/s
          Hash#merge: 3172221534.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.365k i/100ms
         Hash#merge!    35.231k i/100ms
Calculating -------------------------------------
          Hash#merge     16.220k (± 8.8%) i/s -     80.535k in   5.013110s
         Hash#merge!    365.810k (± 5.1%) i/s -      1.832M in   5.022925s

Comparison:
         Hash#merge!:   365810.3 i/s
          Hash#merge:    16219.8 i/s - 22.55x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.865M i/100ms
Array#each               1.605M i/100ms
Array#each_w/_object     3.351M i/100ms
Hash#select-include      2.454M i/100ms
Calculating -------------------------------------
Hash#native-slice        19.466M (± 6.4%) i/s -     96.967M in   5.009620s
Array#each               16.450M (± 6.2%) i/s -     81.874M in   5.002317s
Array#each_w/_object     35.279M (± 6.7%) i/s -    177.614M in   5.064242s
Hash#select-include      23.643M (± 7.8%) i/s -    117.803M in   5.029314s

Comparison:
Array#each_w/_object: 35279196.4 i/s
Hash#select-include : 23642678.7 i/s - 1.49x  (± 0.00) slower
Hash#native-slice   : 19465690.6 i/s - 1.81x  (± 0.00) slower
Array#each          : 16449942.3 i/s - 2.14x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   555.000  i/100ms
         Hash#value?     2.208k i/100ms
Calculating -------------------------------------
Hash#values.include?      5.700k (±14.3%) i/s -     27.750k in   5.022994s
         Hash#value?     22.616k (± 0.8%) i/s -    114.816k in   5.077200s

Comparison:
         Hash#value?:    22615.6 i/s
Hash#values.include?:     5700.0 i/s - 3.97x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   316.869M i/100ms
                send   321.672M i/100ms
      method_missing   319.287M i/100ms
Calculating -------------------------------------
                call      3.207B (± 1.6%) i/s -     16.160B in   5.040532s
                send      3.191B (± 2.5%) i/s -     16.084B in   5.044458s
      method_missing      3.193B (± 1.8%) i/s -     15.964B in   5.002127s

Comparison:
                call: 3206955916.1 i/s
      method_missing: 3192610102.7 i/s - same-ish: difference falls within error
                send: 3190567499.3 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    67.319k i/100ms
      Symbol#to_proc    72.272k i/100ms
Calculating -------------------------------------
               Block    749.085k (±12.9%) i/s -      3.703M in   5.027370s
      Symbol#to_proc    773.126k (±11.9%) i/s -      3.830M in   5.044495s

Comparison:
      Symbol#to_proc:   773126.5 i/s
               Block:   749085.2 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   313.134M i/100ms
       block + yield   314.269M i/100ms
        unused block   319.430M i/100ms
               yield   323.382M i/100ms
Calculating -------------------------------------
          block.call      3.215B (± 1.4%) i/s -     16.283B in   5.065034s
       block + yield      3.209B (± 1.9%) i/s -     16.342B in   5.095070s
        unused block      3.201B (± 2.2%) i/s -     16.291B in   5.092441s
               yield      3.212B (± 1.4%) i/s -     16.169B in   5.035008s

Comparison:
          block.call: 3215475523.3 i/s
               yield: 3212066717.8 i/s - same-ish: difference falls within error
       block + yield: 3208727277.7 i/s - same-ish: difference falls within error
        unused block: 3200683561.9 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     3.931k i/100ms
      range#include?   200.000  i/100ms
       range#member?   268.000  i/100ms
       plain compare     8.477k i/100ms
Calculating -------------------------------------
        range#cover?     69.388k (±32.8%) i/s -    286.963k in   5.008324s
      range#include?      3.218k (±41.5%) i/s -     12.600k in   5.036827s
       range#member?      3.282k (±41.6%) i/s -     12.596k in   5.046481s
       plain compare    103.148k (±34.6%) i/s -    423.850k in   5.048321s

Comparison:
       plain compare:   103148.5 i/s
        range#cover?:    69387.9 i/s - same-ish: difference falls within error
       range#member?:     3282.3 i/s - 31.43x  (± 0.00) slower
      range#include?:     3218.1 i/s - 32.05x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    13.438M i/100ms
           String#=~    13.318M i/100ms
          Regexp#===    13.296M i/100ms
        String#match    10.698M i/100ms
Calculating -------------------------------------
       String#match?    135.970M (± 1.1%) i/s -    685.355M in   5.041117s
           String#=~    133.445M (± 1.4%) i/s -    679.200M in   5.090801s
          Regexp#===    132.882M (± 1.8%) i/s -    664.805M in   5.004659s
        String#match    107.002M (± 1.3%) i/s -    545.605M in   5.099987s

Comparison:
       String#match?: 135970093.1 i/s
           String#=~: 133444571.4 i/s - same-ish: difference falls within error
          Regexp#===: 132882434.6 i/s - same-ish: difference falls within error
        String#match: 107001544.6 i/s - 1.27x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.734M i/100ms
      String#casecmp     4.691M i/100ms
Calculating -------------------------------------
String#downcase + ==     30.045M (± 7.1%) i/s -    150.370M in   5.037354s
      String#casecmp     46.640M (± 4.3%) i/s -    234.563M in   5.038656s

Comparison:
      String#casecmp: 46640423.1 i/s
String#downcase + ==: 30044933.7 i/s - 1.55x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+    10.347M i/100ms
       String#concat    10.619M i/100ms
       String#append    10.563M i/100ms
         "foo" "bar"   322.299M i/100ms
  "#{'foo'}#{'bar'}"    10.629M i/100ms
Calculating -------------------------------------
            String#+    104.486M (± 3.1%) i/s -    527.716M in   5.055866s
       String#concat    103.479M (± 5.8%) i/s -    520.311M in   5.050862s
       String#append    103.556M (± 6.2%) i/s -    517.607M in   5.024376s
         "foo" "bar"      3.204B (± 2.0%) i/s -     16.115B in   5.031706s
  "#{'foo'}#{'bar'}"    102.833M (± 6.3%) i/s -    520.808M in   5.093055s

Comparison:
         "foo" "bar": 3204140504.8 i/s
            String#+: 104485626.3 i/s - 30.67x  (± 0.00) slower
       String#append: 103555860.4 i/s - 30.94x  (± 0.00) slower
       String#concat: 103479083.9 i/s - 30.96x  (± 0.00) slower
  "#{'foo'}#{'bar'}": 102832508.9 i/s - 31.16x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   321.530M i/100ms
          String#dup   312.541M i/100ms
Calculating -------------------------------------
           String#+@      3.190B (± 2.0%) i/s -     16.077B in   5.042427s
          String#dup      3.219B (± 1.0%) i/s -     16.252B in   5.048899s

Comparison:
          String#dup: 3219283458.1 i/s
           String#+@: 3189611589.6 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.377M i/100ms
       String#match?     1.643M i/100ms
    String#end_with?    10.661M i/100ms
Calculating -------------------------------------
           String#=~     13.892M (± 2.5%) i/s -     70.238M in   5.059603s
       String#match?     16.202M (± 1.4%) i/s -     82.143M in   5.071104s
    String#end_with?    107.128M (± 1.7%) i/s -    543.695M in   5.076727s

Comparison:
    String#end_with?: 107128462.8 i/s
       String#match?: 16201648.3 i/s - 6.61x  (± 0.00) slower
           String#=~: 13891896.0 i/s - 7.71x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   500.240k i/100ms
          String#sub   953.116k i/100ms
String#dup["string"]=
                        10.023M i/100ms
Calculating -------------------------------------
         String#gsub      8.624M (± 9.5%) i/s -     43.021M in   5.051074s
          String#sub      9.793M (± 9.2%) i/s -     48.609M in   5.013856s
String#dup["string"]=
                         99.710M (± 5.4%) i/s -    501.140M in   5.046987s

Comparison:
String#dup["string"]=: 99710391.8 i/s
          String#sub:  9793499.6 i/s - 10.18x  (± 0.00) slower
         String#gsub:  8624034.0 i/s - 11.56x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   364.294k i/100ms
           String#tr   147.261k i/100ms
Calculating -------------------------------------
         String#gsub      3.922M (± 9.5%) i/s -     19.672M in   5.072725s
           String#tr      1.509M (± 4.4%) i/s -      7.658M in   5.087122s

Comparison:
         String#gsub:  3921565.3 i/s
           String#tr:  1508617.5 i/s - 2.60x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   315.864M i/100ms
         With Freeze   320.487M i/100ms
Calculating -------------------------------------
      Without Freeze      3.140B (± 3.5%) i/s -     15.793B in   5.037021s
         With Freeze      3.158B (± 2.7%) i/s -     16.024B in   5.077480s

Comparison:
         With Freeze: 3158285178.6 i/s
      Without Freeze: 3139710742.5 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/    10.803k i/100ms
      String#squeeze    69.820k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    158.343k (± 8.7%) i/s -    788.619k in   5.030223s
      String#squeeze    707.872k (± 2.2%) i/s -      3.561M in   5.032906s

Comparison:
      String#squeeze:   707872.0 i/s
 String#gsub/regex+/:   158342.9 i/s - 4.47x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     2.968M i/100ms
       String#match?     6.271M i/100ms
  String#start_with?    12.928M i/100ms
Calculating -------------------------------------
           String#=~     44.951M (± 4.7%) i/s -    225.580M in   5.030549s
       String#match?     63.100M (± 2.1%) i/s -    319.802M in   5.070556s
  String#start_with?    129.136M (± 0.3%) i/s -    646.381M in   5.005491s

Comparison:
  String#start_with?: 129135818.0 i/s
       String#match?: 63100351.1 i/s - 2.05x  (± 0.00) slower
           String#=~: 44951439.3 i/s - 2.87x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   258.715k i/100ms
    String#[0, n] ==   276.564k i/100ms
   String#[RANGE] ==   345.755k i/100ms
   String#[0...n] ==   260.074k i/100ms
Calculating -------------------------------------
  String#start_with?      6.920M (± 2.0%) i/s -     34.668M in   5.012536s
    String#[0, n] ==      2.996M (± 3.4%) i/s -     15.211M in   5.083758s
   String#[RANGE] ==      3.416M (± 6.0%) i/s -     17.288M in   5.085130s
   String#[0...n] ==      2.748M (± 6.9%) i/s -     13.784M in   5.048508s

Comparison:
  String#start_with?:  6919851.7 i/s
   String#[RANGE] ==:  3416368.0 i/s - 2.03x  (± 0.00) slower
    String#[0, n] ==:  2995744.5 i/s - 2.31x  (± 0.00) slower
   String#[0...n] ==:  2748160.1 i/s - 2.52x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     9.533M i/100ms
 String#sub!'string'   948.506k i/100ms
String#gsub!'string'   931.639k i/100ms
  String#[/regexp/]=     2.623M i/100ms
 String#sub!/regexp/     1.410M i/100ms
String#gsub!/regexp/   858.161k i/100ms
Calculating -------------------------------------
  String#['string']=     99.793M (± 4.9%) i/s -    505.237M in   5.079073s
 String#sub!'string'     10.281M (±16.5%) i/s -     47.425M in   5.091080s
String#gsub!'string'      9.082M (± 8.4%) i/s -     45.650M in   5.072927s
  String#[/regexp/]=     26.210M (± 6.8%) i/s -    131.165M in   5.038169s
 String#sub!/regexp/     13.862M (±10.4%) i/s -     69.106M in   5.050342s
String#gsub!/regexp/      8.411M (± 8.4%) i/s -     42.050M in   5.040711s

Comparison:
  String#['string']=: 99792698.5 i/s
  String#[/regexp/]=: 26209688.1 i/s - 3.81x  (± 0.00) slower
 String#sub!/regexp/: 13862036.0 i/s - 7.20x  (± 0.00) slower
 String#sub!'string': 10281042.3 i/s - 9.71x  (± 0.00) slower
String#gsub!'string':  9082161.4 i/s - 10.99x  (± 0.00) slower
String#gsub!/regexp/:  8411326.4 i/s - 11.86x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     2.626M i/100ms
        String#chomp     5.583M i/100ms
String#delete_suffix    14.024M i/100ms
Calculating -------------------------------------
          String#sub     29.702M (± 5.1%) i/s -    149.668M in   5.054308s
        String#chomp     56.709M (± 2.3%) i/s -    284.712M in   5.023514s
String#delete_suffix    153.547M (± 9.2%) i/s -    771.321M in   5.067967s

Comparison:
String#delete_suffix: 153547115.2 i/s
        String#chomp: 56709266.3 i/s - 2.71x  (± 0.00) slower
          String#sub: 29701618.7 i/s - 5.17x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   311.823M i/100ms
          String#sub    13.831M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.209B (± 1.5%) i/s -     16.215B in   5.054466s
          String#sub    137.928M (± 0.4%) i/s -    691.561M in   5.013985s

Comparison:
String#delete_prefix: 3208714146.7 i/s
          String#sub: 137928087.0 i/s - 23.26x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.575M i/100ms
    String#unpack[0]     1.779M i/100ms
Calculating -------------------------------------
      String#unpack1     18.929M (± 6.8%) i/s -     94.479M in   5.025924s
    String#unpack[0]     18.872M (± 7.1%) i/s -     94.293M in   5.030145s

Comparison:
      String#unpack1: 18928694.8 i/s
    String#unpack[0]: 18872467.8 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.1.0-dev-61cf24b9, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    37.155k i/100ms
          Time.parse   283.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    604.862k (± 9.0%) i/s -      3.010M in   5.042549s
          Time.parse      6.365k (±20.6%) i/s -     29.715k in   5.014113s

Comparison:
        Time.iso8601:   604862.4 i/s
          Time.parse:     6365.2 i/s - 95.03x  (± 0.00) slower

