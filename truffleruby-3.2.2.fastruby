$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       315.553M i/100ms
Function with splat arguments
                         1.893k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.194B (± 2.7%) i/s -     16.093B in   5.042477s
Function with splat arguments
                         20.109k (± 9.2%) i/s -    100.329k in   5.041768s

Comparison:
Function with single Array argument: 3194148474.1 i/s
Function with splat arguments:    20109.4 i/s - 158838.80x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   322.533M i/100ms
Sequential Assignment
                       318.420M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.150B (± 3.4%) i/s -     15.804B in   5.022840s
Sequential Assignment
                          3.185B (± 2.9%) i/s -     15.921B in   5.002835s

Comparison:
Sequential Assignment: 3185254644.6 i/s
 Parallel Assignment: 3150248378.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   315.546M i/100ms
       attr_accessor   314.704M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.173B (± 2.0%) i/s -     16.093B in   5.073258s
       attr_accessor      3.174B (± 3.7%) i/s -     16.050B in   5.065069s

Comparison:
       attr_accessor: 3174007850.6 i/s
   getter_and_setter: 3173416662.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     9.726k i/100ms
         respond_to?   323.167M i/100ms
Calculating -------------------------------------
      begin...rescue    100.222k (± 8.6%) i/s -    496.026k in   5.003839s
         respond_to?      3.204B (± 2.2%) i/s -     16.158B in   5.045901s

Comparison:
         respond_to?: 3203958197.2 i/s
      begin...rescue:   100222.2 i/s - 31968.54x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   321.238M i/100ms
             &method   316.056M i/100ms
Calculating -------------------------------------
              normal      3.079B (± 2.7%) i/s -     15.419B in   5.011485s
             &method      3.099B (± 2.5%) i/s -     15.803B in   5.102239s

Comparison:
             &method: 3099242498.4 i/s
              normal: 3079146649.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       134.000  i/100ms
       define_method   153.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          4.315k (±49.8%) i/s -      7.638k in   5.007161s
       define_method     11.963k (±41.2%) i/s -     10.710k in   5.211988s

Comparison:
       define_method:    11962.5 i/s
module_eval with string:     4315.1 i/s - 2.77x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   126.868k i/100ms
       Kernel#format   104.970k i/100ms
            String#%    20.382k i/100ms
Calculating -------------------------------------
         Float#round      1.261M (± 5.3%) i/s -      6.343M in   5.047266s
       Kernel#format      1.034M (± 4.5%) i/s -      5.248M in   5.089269s
            String#%    203.579k (±10.1%) i/s -      1.019M in   5.082279s

Comparison:
         Float#round:  1260870.0 i/s
       Kernel#format:  1033894.6 i/s - 1.22x  (± 0.00) slower
            String#%:   203579.1 i/s - 6.19x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   314.411M i/100ms
          OpenStruct   313.279M i/100ms
Calculating -------------------------------------
                Hash      3.091B (± 2.2%) i/s -     15.721B in   5.089237s
          OpenStruct      3.175B (± 4.0%) i/s -     15.977B in   5.041128s

Comparison:
          OpenStruct: 3175184933.1 i/s
                Hash: 3090527135.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   315.482M i/100ms
          OpenStruct     4.605k i/100ms
Calculating -------------------------------------
                Hash      3.030B (± 9.6%) i/s -     15.143B in   5.070151s
          OpenStruct     48.887k (±12.9%) i/s -    239.460k in   5.009412s

Comparison:
                Hash: 3029657749.7 i/s
          OpenStruct:    48886.9 i/s - 61972.84x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   963.021k i/100ms
  ancestors.include?   221.311k i/100ms
Calculating -------------------------------------
  less than or equal     10.675M (± 7.5%) i/s -     53.929M in   5.080349s
  ancestors.include?      2.233M (± 7.7%) i/s -     11.287M in   5.092899s

Comparison:
  less than or equal: 10674806.7 i/s
  ancestors.include?:  2233076.8 i/s - 4.78x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     31.896  (± 3.1%) i/s -    160.000  in   5.029483s
         Kernel loop     31.997  (± 3.1%) i/s -    160.000  in   5.011118s

Comparison:
         Kernel loop:       32.0 i/s
          While Loop:       31.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   319.146M i/100ms
         Array#first   317.668M i/100ms
Calculating -------------------------------------
           Array#[0]      3.190B (± 1.7%) i/s -     15.957B in   5.004459s
         Array#first      3.192B (± 2.3%) i/s -     16.201B in   5.078614s

Comparison:
         Array#first: 3191897106.4 i/s
           Array#[0]: 3189507131.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   321.694M i/100ms
          Array#last   309.157M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.198B (± 2.1%) i/s -     16.085B in   5.032705s
          Array#last      3.205B (± 2.2%) i/s -     16.076B in   5.018714s

Comparison:
          Array#last: 3204853352.2 i/s
          Array#[-1]: 3197586419.9 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   899.793k i/100ms
Calculating -------------------------------------
                find     13.675  (± 7.3%) i/s -     69.000  in   5.055050s
             bsearch      9.082M (± 3.2%) i/s -     45.889M in   5.058251s

Comparison:
             bsearch:  9081801.4 i/s
                find:       13.7 i/s - 664103.21x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.211  (± 0.0%) i/s -      2.000  in   9.498607s
        Array#insert      1.400  (± 0.0%) i/s -      7.000  in   5.001325s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.2 i/s - 6.65x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   307.606M i/100ms
          Array#size   313.015M i/100ms
         Array#count   307.552M i/100ms
Calculating -------------------------------------
        Array#length      3.199B (± 2.0%) i/s -     15.995B in   5.001966s
          Array#size      3.217B (± 1.5%) i/s -     16.277B in   5.060300s
         Array#count      3.174B (± 2.9%) i/s -     15.993B in   5.043891s

Comparison:
          Array#size: 3217380325.6 i/s
        Array#length: 3199200135.3 i/s - same-ish: difference falls within error
         Array#count: 3173675473.7 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    36.572k i/100ms
        Array#sample     3.846M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    364.596k (± 2.1%) i/s -      1.829M in   5.017811s
        Array#sample     38.220M (± 1.1%) i/s -    192.310M in   5.032307s

Comparison:
        Array#sample: 38219952.6 i/s
 Array#shuffle.first:   364595.9 i/s - 104.83x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   913.000  i/100ms
          Date.parse   578.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     18.062k (±38.6%) i/s -     80.344k in   5.026474s
          Date.parse      7.711k (±16.9%) i/s -     37.570k in   5.040782s

Comparison:
        Date.iso8601:    18061.7 i/s
          Date.parse:     7710.7 i/s - 2.34x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   334.074k i/100ms
           Array#map     1.670M i/100ms
Calculating -------------------------------------
   Array#each + push      3.667M (± 5.7%) i/s -     18.374M in   5.026917s
           Array#map     17.204M (± 9.2%) i/s -     85.162M in   5.009577s

Comparison:
           Array#map: 17203627.4 i/s
   Array#each + push:  3667479.1 i/s - 4.69x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    12.318M i/100ms
               #each    35.321M i/100ms
Calculating -------------------------------------
            For loop    123.312M (± 2.5%) i/s -    628.237M in   5.098178s
               #each    352.387M (± 1.4%) i/s -      1.766B in   5.012719s

Comparison:
               #each: 352386734.7 i/s
            For loop: 123311858.7 i/s - 2.86x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.379M i/100ms
     each_with_index     1.884M i/100ms
Calculating -------------------------------------
          While Loop     14.195M (± 1.4%) i/s -     71.684M in   5.051040s
     each_with_index     19.127M (± 3.1%) i/s -     96.068M in   5.027968s

Comparison:
     each_with_index: 19127460.6 i/s
          While Loop: 14194957.5 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   307.674k i/100ms
      inject to_proc   312.789k i/100ms
        inject block   311.278k i/100ms
Calculating -------------------------------------
       inject symbol      3.116M (± 1.9%) i/s -     15.691M in   5.038191s
      inject to_proc      3.110M (± 1.9%) i/s -     15.639M in   5.030893s
        inject block      3.069M (± 5.4%) i/s -     15.564M in   5.088633s

Comparison:
       inject symbol:  3115666.0 i/s
      inject to_proc:  3109867.3 i/s - same-ish: difference falls within error
        inject block:  3068851.6 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    23.025k i/100ms
   Array#map.flatten    25.444k i/100ms
      Array#flat_map    58.692k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    258.869k (± 7.4%) i/s -      1.289M in   5.014909s
   Array#map.flatten    264.080k (± 7.3%) i/s -      1.323M in   5.044481s
      Array#flat_map    577.708k (± 4.2%) i/s -      2.935M in   5.090407s

Comparison:
      Array#flat_map:   577707.9 i/s
   Array#map.flatten:   264080.4 i/s - 2.19x  (± 0.00) slower
Array#map.flatten(1):   258869.4 i/s - 2.23x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   298.616k i/100ms
  Array#reverse_each     2.909M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.075M (± 7.2%) i/s -     15.528M in   5.087009s
  Array#reverse_each     28.940M (± 2.2%) i/s -    145.440M in   5.028398s

Comparison:
  Array#reverse_each: 28939642.6 i/s
  Array#reverse.each:  3074951.1 i/s - 9.41x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                         1.001M i/100ms
   Enumerable#detect     3.947M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.421M (± 7.6%) i/s -    207.285M in  20.053344s
   Enumerable#detect     45.512M (± 3.8%) i/s -    911.866M in  20.071238s

Comparison:
   Enumerable#detect: 45512487.2 i/s
Enumerable#select.first: 10421164.8 i/s - 4.37x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       161.788k i/100ms
Enumerable#select.last
                       516.235k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.190M (± 7.3%) i/s -     15.855M in   5.013546s
Enumerable#select.last
                          5.404M (± 7.3%) i/s -     26.844M in   5.005549s

Comparison:
Enumerable#select.last:  5404291.0 i/s
Enumerable#reverse.detect:  3189758.2 i/s - 1.69x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.441k i/100ms
  Enumerable#sort_by     4.132k i/100ms
     Enumerable#sort     3.080k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         39.309k (±19.6%) i/s -    175.752k in   5.012246s
  Enumerable#sort_by     40.664k (±14.0%) i/s -    194.204k in   4.999636s
     Enumerable#sort     56.402k (± 4.3%) i/s -    283.360k in   5.034602s

Comparison:
     Enumerable#sort:    56402.2 i/s
  Enumerable#sort_by:    40663.9 i/s - 1.39x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    39309.3 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   852.147k i/100ms
Enumerable#sort_by...first
                         7.393k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      8.594M (± 1.9%) i/s -     43.459M in   5.058890s
Enumerable#sort_by...first
                        102.298k (± 6.8%) i/s -    510.117k in   5.021278s

Comparison:
   Enumerable#min_by:  8593919.6 i/s
Enumerable#sort_by...first:   102298.1 i/s - 84.01x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   594.393k i/100ms
            Hash#dup   720.781k i/100ms
Calculating -------------------------------------
              Hash[]      7.591M (±13.6%) i/s -     37.447M in   5.032023s
            Hash#dup      7.969M (±10.2%) i/s -     39.643M in   5.047162s

Comparison:
            Hash#dup:  7969021.8 i/s
              Hash[]:  7590583.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   311.794M i/100ms
  Hash#fetch, symbol   318.479M i/100ms
     Hash#[], string    20.181M i/100ms
  Hash#fetch, string    20.066M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.215B (± 1.5%) i/s -     16.213B in   5.044865s
  Hash#fetch, symbol      3.202B (± 1.6%) i/s -     16.242B in   5.073948s
     Hash#[], string    200.388M (± 2.2%) i/s -      1.009B in   5.038246s
  Hash#fetch, string    200.092M (± 2.4%) i/s -      1.003B in   5.017470s

Comparison:
     Hash#[], symbol: 3214586275.0 i/s
  Hash#fetch, symbol: 3202014911.1 i/s - same-ish: difference falls within error
     Hash#[], string: 200388274.9 i/s - 16.04x  (± 0.00) slower
  Hash#fetch, string: 200092394.9 i/s - 16.07x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    91.873M i/100ms
             Hash#[]    88.514M i/100ms
          Hash#[] ||    91.717M i/100ms
          Hash#[] &&    92.324M i/100ms
          Hash#fetch    91.645M i/100ms
 Hash#fetch fallback    92.391M i/100ms
Calculating -------------------------------------
            Hash#dig    921.345M (± 0.6%) i/s -      4.686B in   5.085680s
             Hash#[]    920.448M (± 1.5%) i/s -      4.603B in   5.001727s
          Hash#[] ||    923.292M (± 0.3%) i/s -      4.678B in   5.066202s
          Hash#[] &&    922.800M (± 0.4%) i/s -      4.616B in   5.002443s
          Hash#fetch    920.732M (± 1.4%) i/s -      4.674B in   5.077371s
 Hash#fetch fallback    917.766M (± 1.9%) i/s -      4.620B in   5.035383s

Comparison:
          Hash#[] ||: 923291798.1 i/s
          Hash#[] &&: 922800267.7 i/s - same-ish: difference falls within error
            Hash#dig: 921345330.6 i/s - same-ish: difference falls within error
          Hash#fetch: 920731778.2 i/s - same-ish: difference falls within error
             Hash#[]: 920448132.8 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 917765972.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   319.983M i/100ms
  Hash#fetch + block   321.045M i/100ms
    Hash#fetch + arg   322.095M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.194B (± 2.7%) i/s -     15.999B in   5.013589s
  Hash#fetch + block      3.118B (± 3.0%) i/s -     15.731B in   5.049491s
    Hash#fetch + arg      3.101B (± 3.0%) i/s -     15.783B in   5.094390s

Comparison:
  Hash#fetch + const: 3193630129.3 i/s
  Hash#fetch + block: 3118262633.7 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 3101010331.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    31.600k i/100ms
         sort + to_h     3.892k i/100ms
Calculating -------------------------------------
      sort_by + to_h    446.279k (±17.2%) i/s -      2.180M in   5.088278s
         sort + to_h    178.670k (±19.9%) i/s -    848.456k in   5.002700s

Comparison:
      sort_by + to_h:   446279.3 i/s
         sort + to_h:   178670.2 i/s - 2.50x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   225.893k i/100ms
       Hash#each_key   252.005k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.353M (±10.6%) i/s -     11.521M in   5.009403s
       Hash#each_key      2.460M (± 7.0%) i/s -     12.348M in   5.055332s

Comparison:
       Hash#each_key:  2460265.3 i/s
      Hash#keys.each:  2352554.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   316.000  i/100ms
           Hash#key?     3.578M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      3.410k (±10.8%) i/s -     16.748k in   5.004111s
           Hash#key?     35.240M (± 2.3%) i/s -    178.880M in   5.078834s

Comparison:
           Hash#key?: 35239683.7 i/s
  Hash#keys.include?:     3410.4 i/s - 10333.10x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    46.772k i/100ms
            Hash#[]=    60.442k i/100ms
Calculating -------------------------------------
         Hash#merge!    603.015k (± 7.6%) i/s -      3.040M in   5.084221s
            Hash#[]=    568.695k (± 9.3%) i/s -      2.841M in   5.056264s

Comparison:
         Hash#merge!:   603015.1 i/s
            Hash#[]=:   568695.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        33.649k i/100ms
      Hash#merge({})    18.878k i/100ms
 Hash#dup#merge!({})    29.528k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        382.112k (±10.6%) i/s -      1.884M in   5.002087s
      Hash#merge({})    202.477k (± 9.2%) i/s -      1.019M in   5.094834s
 Hash#dup#merge!({})    318.321k (± 9.1%) i/s -      1.595M in   5.062329s

Comparison:
{}#merge!(Hash) do end:   382111.7 i/s
 Hash#dup#merge!({}):   318321.3 i/s - same-ish: difference falls within error
      Hash#merge({}):   202476.8 i/s - 1.89x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   312.274M i/100ms
          Hash#merge   316.549M i/100ms
Calculating -------------------------------------
        Hash#**other      3.181B (± 2.0%) i/s -     15.926B in   5.007983s
          Hash#merge      3.169B (± 3.0%) i/s -     15.827B in   5.000116s

Comparison:
        Hash#**other: 3181419567.1 i/s
          Hash#merge: 3168541083.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.074k i/100ms
         Hash#merge!    63.812k i/100ms
Calculating -------------------------------------
          Hash#merge     11.978k (±12.3%) i/s -     59.070k in   5.017640s
         Hash#merge!    638.081k (± 2.9%) i/s -      3.254M in   5.104658s

Comparison:
         Hash#merge!:   638081.0 i/s
          Hash#merge:    11977.9 i/s - 53.27x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.710M i/100ms
Array#each               1.496M i/100ms
Array#each_w/_object     1.543M i/100ms
Hash#select-include      2.482M i/100ms
Calculating -------------------------------------
Hash#native-slice        17.820M (± 6.5%) i/s -     88.939M in   5.018794s
Array#each               15.267M (± 4.9%) i/s -     76.312M in   5.012723s
Array#each_w/_object     15.216M (± 2.9%) i/s -     77.173M in   5.076276s
Hash#select-include      23.937M (± 6.6%) i/s -    119.118M in   5.007498s

Comparison:
Hash#select-include : 23937451.1 i/s
Hash#native-slice   : 17820338.7 i/s - 1.34x  (± 0.00) slower
Array#each          : 15267192.9 i/s - 1.57x  (± 0.00) slower
Array#each_w/_object: 15216356.1 i/s - 1.57x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   259.000  i/100ms
         Hash#value?   700.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      3.066k (±10.4%) i/s -     15.281k in   5.068304s
         Hash#value?      6.864k (± 0.6%) i/s -     35.000k in   5.098937s

Comparison:
         Hash#value?:     6864.4 i/s
Hash#values.include?:     3066.4 i/s - 2.24x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   306.086M i/100ms
                send   307.004M i/100ms
      method_missing   315.263M i/100ms
Calculating -------------------------------------
                call      3.078B (± 2.0%) i/s -     15.610B in   5.073054s
                send      3.066B (± 1.8%) i/s -     15.350B in   5.007891s
      method_missing      3.035B (± 4.5%) i/s -     15.448B in   5.101378s

Comparison:
                call: 3078323599.9 i/s
                send: 3066244213.3 i/s - same-ish: difference falls within error
      method_missing: 3035238373.4 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    44.342k i/100ms
      Symbol#to_proc    72.322k i/100ms
Calculating -------------------------------------
               Block    711.480k (±15.8%) i/s -      3.459M in   5.014436s
      Symbol#to_proc    698.547k (±13.9%) i/s -      3.471M in   5.072359s

Comparison:
               Block:   711480.1 i/s
      Symbol#to_proc:   698546.9 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   316.356M i/100ms
       block + yield   319.691M i/100ms
        unused block   315.271M i/100ms
               yield   306.536M i/100ms
Calculating -------------------------------------
          block.call      3.142B (± 4.4%) i/s -     15.818B in   5.045332s
       block + yield      3.149B (± 1.7%) i/s -     15.985B in   5.077046s
        unused block      3.136B (± 2.9%) i/s -     15.764B in   5.030673s
               yield      3.183B (± 2.3%) i/s -     15.940B in   5.011035s

Comparison:
               yield: 3182783390.8 i/s
       block + yield: 3149264046.0 i/s - same-ish: difference falls within error
          block.call: 3142132222.6 i/s - same-ish: difference falls within error
        unused block: 3136317249.8 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     4.983k i/100ms
      range#include?   166.000  i/100ms
       range#member?   267.000  i/100ms
       plain compare     8.022k i/100ms
Calculating -------------------------------------
        range#cover?     59.265k (±26.1%) i/s -    269.082k in   5.094541s
      range#include?      2.714k (±22.5%) i/s -     12.450k in   5.041956s
       range#member?      2.289k (±28.7%) i/s -     10.413k in   5.103084s
       plain compare     87.495k (±25.5%) i/s -    401.100k in   5.135666s

Comparison:
       plain compare:    87494.6 i/s
        range#cover?:    59265.3 i/s - same-ish: difference falls within error
      range#include?:     2714.0 i/s - 32.24x  (± 0.00) slower
       range#member?:     2289.4 i/s - 38.22x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    13.474M i/100ms
           String#=~    14.730M i/100ms
          Regexp#===    14.713M i/100ms
        String#match    11.690M i/100ms
Calculating -------------------------------------
       String#match?    135.507M (± 2.0%) i/s -    687.187M in   5.073353s
           String#=~    147.553M (± 0.8%) i/s -    751.225M in   5.091567s
          Regexp#===    146.391M (± 3.7%) i/s -    735.657M in   5.033668s
        String#match    110.115M (± 1.0%) i/s -    561.110M in   5.096168s

Comparison:
           String#=~: 147553170.8 i/s
          Regexp#===: 146390956.4 i/s - same-ish: difference falls within error
       String#match?: 135507446.2 i/s - 1.09x  (± 0.00) slower
        String#match: 110115044.0 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.733M i/100ms
      String#casecmp     4.545M i/100ms
Calculating -------------------------------------
String#downcase + ==     30.594M (± 7.0%) i/s -    153.035M in   5.036804s
      String#casecmp     46.574M (± 6.3%) i/s -    231.778M in   5.004600s

Comparison:
      String#casecmp: 46573656.8 i/s
String#downcase + ==: 30594386.4 i/s - 1.52x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+    10.183M i/100ms
       String#concat     9.544M i/100ms
       String#append    10.309M i/100ms
         "foo" "bar"   305.023M i/100ms
  "#{'foo'}#{'bar'}"    10.568M i/100ms
Calculating -------------------------------------
            String#+    103.241M (± 7.0%) i/s -    519.320M in   5.065191s
       String#concat    102.980M (± 6.4%) i/s -    515.379M in   5.032932s
       String#append    102.787M (± 7.0%) i/s -    515.445M in   5.048755s
         "foo" "bar"      3.142B (± 2.9%) i/s -     15.861B in   5.053128s
  "#{'foo'}#{'bar'}"    102.854M (± 6.2%) i/s -    517.837M in   5.060974s

Comparison:
         "foo" "bar": 3141752870.4 i/s
            String#+: 103241253.3 i/s - 30.43x  (± 0.00) slower
       String#concat: 102979969.3 i/s - 30.51x  (± 0.00) slower
  "#{'foo'}#{'bar'}": 102854238.7 i/s - 30.55x  (± 0.00) slower
       String#append: 102786819.7 i/s - 30.57x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   321.437M i/100ms
          String#dup   319.630M i/100ms
Calculating -------------------------------------
           String#+@      3.157B (± 2.0%) i/s -     16.072B in   5.092434s
          String#dup      3.146B (± 1.8%) i/s -     15.982B in   5.081143s

Comparison:
           String#+@: 3157312521.0 i/s
          String#dup: 3146239095.5 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.075M i/100ms
       String#match?     1.587M i/100ms
    String#end_with?    11.041M i/100ms
Calculating -------------------------------------
           String#=~     13.743M (± 6.8%) i/s -     68.797M in   5.045553s
       String#match?     16.139M (± 2.3%) i/s -     80.930M in   5.017473s
    String#end_with?    110.076M (± 3.0%) i/s -    552.028M in   5.019965s

Comparison:
    String#end_with?: 110075979.7 i/s
       String#match?: 16139023.7 i/s - 6.82x  (± 0.00) slower
           String#=~: 13743483.7 i/s - 8.01x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   755.730k i/100ms
          String#sub   972.453k i/100ms
String#dup["string"]=
                         9.993M i/100ms
Calculating -------------------------------------
         String#gsub      8.574M (± 9.3%) i/s -     43.077M in   5.083747s
          String#sub      9.621M (± 9.6%) i/s -     47.650M in   5.003999s
String#dup["string"]=
                         99.739M (± 6.1%) i/s -    499.651M in   5.039842s

Comparison:
String#dup["string"]=: 99738970.3 i/s
          String#sub:  9621248.4 i/s - 10.37x  (± 0.00) slower
         String#gsub:  8573885.7 i/s - 11.63x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   348.506k i/100ms
           String#tr   166.535k i/100ms
Calculating -------------------------------------
         String#gsub      3.913M (± 8.8%) i/s -     19.516M in   5.032325s
           String#tr      1.673M (± 4.2%) i/s -      8.493M in   5.085693s

Comparison:
         String#gsub:  3913410.9 i/s
           String#tr:  1673472.0 i/s - 2.34x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   317.776M i/100ms
         With Freeze   313.177M i/100ms
Calculating -------------------------------------
      Without Freeze      3.175B (± 1.3%) i/s -     15.889B in   5.005582s
         With Freeze      3.174B (± 1.6%) i/s -     15.972B in   5.033374s

Comparison:
      Without Freeze: 3174722201.4 i/s
         With Freeze: 3174041315.1 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/    10.504k i/100ms
      String#squeeze    72.240k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    157.771k (± 8.1%) i/s -    787.800k in   5.038256s
      String#squeeze    716.211k (± 5.0%) i/s -      3.612M in   5.057529s

Comparison:
      String#squeeze:   716210.8 i/s
 String#gsub/regex+/:   157770.5 i/s - 4.54x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     4.072M i/100ms
       String#match?     6.343M i/100ms
  String#start_with?    12.918M i/100ms
Calculating -------------------------------------
           String#=~     46.637M (± 5.8%) i/s -    232.110M in   5.001468s
       String#match?     63.264M (± 1.8%) i/s -    317.158M in   5.014949s
  String#start_with?    127.568M (± 4.2%) i/s -    645.897M in   5.074776s

Comparison:
  String#start_with?: 127568004.7 i/s
       String#match?: 63263987.5 i/s - 2.02x  (± 0.00) slower
           String#=~: 46636761.0 i/s - 2.74x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   231.281k i/100ms
    String#[0, n] ==   276.683k i/100ms
   String#[RANGE] ==   370.140k i/100ms
   String#[0...n] ==   262.006k i/100ms
Calculating -------------------------------------
  String#start_with?      7.145M (± 3.7%) i/s -     35.849M in   5.026014s
    String#[0, n] ==      2.958M (± 3.4%) i/s -     14.941M in   5.056520s
   String#[RANGE] ==      3.725M (± 6.2%) i/s -     18.877M in   5.094853s
   String#[0...n] ==      2.516M (± 8.4%) i/s -     12.576M in   5.051088s

Comparison:
  String#start_with?:  7145030.9 i/s
   String#[RANGE] ==:  3724707.4 i/s - 1.92x  (± 0.00) slower
    String#[0, n] ==:  2958374.4 i/s - 2.42x  (± 0.00) slower
   String#[0...n] ==:  2515886.5 i/s - 2.84x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     9.537M i/100ms
 String#sub!'string'   960.894k i/100ms
String#gsub!'string'   854.360k i/100ms
  String#[/regexp/]=     2.742M i/100ms
 String#sub!/regexp/     1.348M i/100ms
String#gsub!/regexp/   808.489k i/100ms
Calculating -------------------------------------
  String#['string']=    100.201M (± 2.3%) i/s -    505.446M in   5.047348s
 String#sub!'string'     10.309M (±17.2%) i/s -     47.084M in   5.064050s
String#gsub!'string'      8.859M (±10.2%) i/s -     44.427M in   5.084505s
  String#[/regexp/]=     26.953M (± 2.8%) i/s -    137.090M in   5.090445s
 String#sub!/regexp/     13.541M (±10.3%) i/s -     67.404M in   5.038538s
String#gsub!/regexp/      8.502M (± 7.0%) i/s -     42.850M in   5.072171s

Comparison:
  String#['string']=: 100200992.3 i/s
  String#[/regexp/]=: 26952630.5 i/s - 3.72x  (± 0.00) slower
 String#sub!/regexp/: 13540618.8 i/s - 7.40x  (± 0.00) slower
 String#sub!'string': 10309323.1 i/s - 9.72x  (± 0.00) slower
String#gsub!'string':  8858973.8 i/s - 11.31x  (± 0.00) slower
String#gsub!/regexp/:  8502105.5 i/s - 11.79x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     2.120M i/100ms
        String#chomp     5.856M i/100ms
String#delete_suffix    13.868M i/100ms
Calculating -------------------------------------
          String#sub     30.265M (± 5.6%) i/s -    152.606M in   5.061556s
        String#chomp     59.046M (± 3.5%) i/s -    298.660M in   5.065557s
String#delete_suffix    151.101M (±10.4%) i/s -    748.899M in   5.022499s

Comparison:
String#delete_suffix: 151101480.1 i/s
        String#chomp: 59045588.6 i/s - 2.56x  (± 0.00) slower
          String#sub: 30265307.7 i/s - 4.99x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   310.209M i/100ms
          String#sub    16.143M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.195B (± 2.2%) i/s -     16.131B in   5.051918s
          String#sub    161.280M (± 1.0%) i/s -    807.154M in   5.005189s

Comparison:
String#delete_prefix: 3194700087.3 i/s
          String#sub: 161279719.2 i/s - 19.81x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.136M i/100ms
    String#unpack[0]     1.833M i/100ms
Calculating -------------------------------------
      String#unpack1     19.078M (± 6.8%) i/s -     95.382M in   5.036145s
    String#unpack[0]     18.686M (± 7.5%) i/s -     95.301M in   5.138042s

Comparison:
      String#unpack1: 19077857.0 i/s
    String#unpack[0]: 18685752.8 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.1.0-dev-3a920de7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    23.647k i/100ms
          Time.parse   226.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    485.209k (±29.5%) i/s -      2.128M in   5.035929s
          Time.parse      6.541k (±16.5%) i/s -     31.414k in   5.051230s

Comparison:
        Time.iso8601:   485209.0 i/s
          Time.parse:     6540.9 i/s - 74.18x  (± 0.00) slower

