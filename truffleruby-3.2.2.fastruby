$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       321.271M i/100ms
Function with splat arguments
                         1.825k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.205B (± 1.6%) i/s -     16.064B in   5.013823s
Function with splat arguments
                         20.073k (± 8.6%) i/s -    100.375k in   5.043644s

Comparison:
Function with single Array argument: 3204746752.6 i/s
Function with splat arguments:    20072.6 i/s - 159658.16x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   316.424M i/100ms
Sequential Assignment
                       321.888M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.154B (± 7.5%) i/s -     15.821B in   5.059443s
Sequential Assignment
                          3.205B (± 1.9%) i/s -     16.094B in   5.023676s

Comparison:
Sequential Assignment: 3204951092.5 i/s
 Parallel Assignment: 3154089733.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   319.431M i/100ms
       attr_accessor   310.674M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.195B (± 4.7%) i/s -     15.972B in   5.014172s
       attr_accessor      3.216B (± 1.3%) i/s -     16.155B in   5.023478s

Comparison:
       attr_accessor: 3216469102.7 i/s
   getter_and_setter: 3195385263.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    10.014k i/100ms
         respond_to?   323.504M i/100ms
Calculating -------------------------------------
      begin...rescue    102.860k (± 6.6%) i/s -    520.728k in   5.092532s
         respond_to?      3.194B (± 2.9%) i/s -     16.175B in   5.068820s

Comparison:
         respond_to?: 3194055805.7 i/s
      begin...rescue:   102859.8 i/s - 31052.50x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   312.646M i/100ms
             &method   322.565M i/100ms
Calculating -------------------------------------
              normal      3.196B (± 2.5%) i/s -     16.258B in   5.090829s
             &method      3.206B (± 2.2%) i/s -     16.128B in   5.033964s

Comparison:
             &method: 3205558190.3 i/s
              normal: 3195701733.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       161.000  i/100ms
       define_method   154.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          4.331k (±50.7%) i/s -      8.050k in   5.026531s
       define_method     12.279k (±37.4%) i/s -     12.474k in   5.001249s

Comparison:
       define_method:    12279.2 i/s
module_eval with string:     4330.7 i/s - 2.84x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   122.291k i/100ms
       Kernel#format   105.337k i/100ms
            String#%    21.535k i/100ms
Calculating -------------------------------------
         Float#round      1.264M (± 3.7%) i/s -      6.359M in   5.038029s
       Kernel#format      1.061M (± 2.6%) i/s -      5.372M in   5.064733s
            String#%    216.672k (± 9.8%) i/s -      1.077M in   5.033300s

Comparison:
         Float#round:  1264064.0 i/s
       Kernel#format:  1061467.7 i/s - 1.19x  (± 0.00) slower
            String#%:   216672.0 i/s - 5.83x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   305.868M i/100ms
          OpenStruct   317.720M i/100ms
Calculating -------------------------------------
                Hash      3.191B (± 2.7%) i/s -     16.211B in   5.084471s
          OpenStruct      3.199B (± 2.3%) i/s -     16.204B in   5.067708s

Comparison:
          OpenStruct: 3199304153.4 i/s
                Hash: 3190872245.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   322.398M i/100ms
          OpenStruct     2.717k i/100ms
Calculating -------------------------------------
                Hash      3.094B (± 6.9%) i/s -     15.475B in   5.030612s
          OpenStruct     46.419k (±22.5%) i/s -    217.360k in   5.015657s

Comparison:
                Hash: 3094033298.5 i/s
          OpenStruct:    46419.1 i/s - 66654.36x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal     1.003M i/100ms
  ancestors.include?   227.977k i/100ms
Calculating -------------------------------------
  less than or equal     10.337M (± 2.6%) i/s -     52.135M in   5.047133s
  ancestors.include?      2.336M (± 5.8%) i/s -     11.855M in   5.098826s

Comparison:
  less than or equal: 10337185.8 i/s
  ancestors.include?:  2335599.2 i/s - 4.43x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     31.952  (± 3.1%) i/s -    160.000  in   5.018601s
         Kernel loop     32.069  (± 3.1%) i/s -    161.000  in   5.029157s

Comparison:
         Kernel loop:       32.1 i/s
          While Loop:       32.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   322.585M i/100ms
         Array#first   315.613M i/100ms
Calculating -------------------------------------
           Array#[0]      3.220B (± 0.8%) i/s -     16.129B in   5.009620s
         Array#first      3.219B (± 0.9%) i/s -     16.096B in   5.001429s

Comparison:
           Array#[0]: 3219881440.5 i/s
         Array#first: 3218625467.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   320.291M i/100ms
          Array#last   321.355M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.193B (± 2.6%) i/s -     16.015B in   5.018966s
          Array#last      3.200B (± 2.4%) i/s -     16.068B in   5.023854s

Comparison:
          Array#last: 3200202874.1 i/s
          Array#[-1]: 3193059062.8 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   906.643k i/100ms
Calculating -------------------------------------
                find     13.768  (± 0.0%) i/s -     69.000  in   5.013189s
             bsearch      9.114M (± 2.7%) i/s -     46.239M in   5.077398s

Comparison:
             bsearch:  9114054.0 i/s
                find:       13.8 i/s - 661971.13x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.254  (± 0.0%) i/s -      2.000  in   7.870756s
        Array#insert      1.398  (± 0.0%) i/s -      7.000  in   5.005571s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.3 i/s - 5.50x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   319.411M i/100ms
          Array#size   316.563M i/100ms
         Array#count   322.809M i/100ms
Calculating -------------------------------------
        Array#length      3.192B (± 2.7%) i/s -     15.971B in   5.007246s
          Array#size      3.218B (± 1.4%) i/s -     16.145B in   5.017608s
         Array#count      3.194B (± 2.9%) i/s -     16.140B in   5.057782s

Comparison:
          Array#size: 3218325966.2 i/s
         Array#count: 3194091603.1 i/s - same-ish: difference falls within error
        Array#length: 3192060062.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    35.181k i/100ms
        Array#sample     3.799M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    347.453k (± 2.2%) i/s -      1.759M in   5.065371s
        Array#sample     37.950M (± 0.7%) i/s -    189.956M in   5.005694s

Comparison:
        Array#sample: 37949816.6 i/s
 Array#shuffle.first:   347452.7 i/s - 109.22x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601     1.552k i/100ms
          Date.parse   310.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     58.611k (±53.9%) i/s -    229.696k in   5.010585s
          Date.parse     22.126k (±43.7%) i/s -     88.660k in   5.037033s

Comparison:
        Date.iso8601:    58610.5 i/s
          Date.parse:    22126.5 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   333.094k i/100ms
           Array#map     1.675M i/100ms
Calculating -------------------------------------
   Array#each + push      3.581M (± 6.5%) i/s -     17.987M in   5.055963s
           Array#map     16.506M (± 9.8%) i/s -     82.075M in   5.031204s

Comparison:
           Array#map: 16505941.9 i/s
   Array#each + push:  3580982.3 i/s - 4.61x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    12.208M i/100ms
               #each    35.039M i/100ms
Calculating -------------------------------------
            For loop    123.905M (± 1.5%) i/s -    622.598M in   5.026092s
               #each    353.985M (± 1.9%) i/s -      1.787B in   5.050051s

Comparison:
               #each: 353985182.0 i/s
            For loop: 123905282.3 i/s - 2.86x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.287M i/100ms
     each_with_index     1.761M i/100ms
Calculating -------------------------------------
          While Loop     14.862M (± 3.7%) i/s -     74.658M in   5.030120s
     each_with_index     19.676M (± 1.2%) i/s -     98.627M in   5.013370s

Comparison:
     each_with_index: 19675661.1 i/s
          While Loop: 14862261.9 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   311.155k i/100ms
      inject to_proc   311.966k i/100ms
        inject block   312.421k i/100ms
Calculating -------------------------------------
       inject symbol      3.108M (± 2.4%) i/s -     15.558M in   5.009178s
      inject to_proc      3.095M (± 2.9%) i/s -     15.598M in   5.045119s
        inject block      3.106M (± 4.7%) i/s -     15.621M in   5.045364s

Comparison:
       inject symbol:  3107815.7 i/s
        inject block:  3106119.1 i/s - same-ish: difference falls within error
      inject to_proc:  3094552.1 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    23.004k i/100ms
   Array#map.flatten    23.918k i/100ms
      Array#flat_map    44.239k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    253.173k (± 6.7%) i/s -      1.265M in   5.026054s
   Array#map.flatten    249.141k (± 7.7%) i/s -      1.244M in   5.031044s
      Array#flat_map    446.014k (± 7.6%) i/s -      2.256M in   5.099309s

Comparison:
      Array#flat_map:   446014.2 i/s
Array#map.flatten(1):   253172.7 i/s - 1.76x  (± 0.00) slower
   Array#map.flatten:   249140.5 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   315.396k i/100ms
  Array#reverse_each     2.361M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.219M (± 2.0%) i/s -     16.085M in   4.999849s
  Array#reverse_each     23.883M (± 1.2%) i/s -    120.427M in   5.042989s

Comparison:
  Array#reverse_each: 23883353.6 i/s
  Array#reverse.each:  3218541.0 i/s - 7.42x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       888.366k i/100ms
   Enumerable#detect     4.570M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.357M (± 8.3%) i/s -    205.213M in  20.003220s
   Enumerable#detect     45.444M (± 3.6%) i/s -    909.426M in  20.041500s

Comparison:
   Enumerable#detect: 45443784.5 i/s
Enumerable#select.first: 10357468.4 i/s - 4.39x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       293.256k i/100ms
Enumerable#select.last
                       530.749k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.172M (± 3.0%) i/s -     16.129M in   5.090290s
Enumerable#select.last
                          5.392M (± 6.1%) i/s -     27.068M in   5.046588s

Comparison:
Enumerable#select.last:  5391644.5 i/s
Enumerable#reverse.detect:  3171712.8 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.791k i/100ms
  Enumerable#sort_by     3.732k i/100ms
     Enumerable#sort     2.623k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         35.357k (±20.0%) i/s -    164.669k in   5.023011s
  Enumerable#sort_by     32.436k (±31.9%) i/s -    134.352k in   5.054387s
     Enumerable#sort     50.048k (± 4.5%) i/s -    251.808k in   5.043499s

Comparison:
     Enumerable#sort:    50047.6 i/s
Enumerable#sort_by (Symbol#to_proc):    35357.2 i/s - 1.42x  (± 0.00) slower
  Enumerable#sort_by:    32435.7 i/s - 1.54x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   825.689k i/100ms
Enumerable#sort_by...first
                         5.484k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      8.568M (± 2.5%) i/s -     42.936M in   5.014393s
Enumerable#sort_by...first
                        101.936k (± 4.6%) i/s -    510.012k in   5.014899s

Comparison:
   Enumerable#min_by:  8568204.2 i/s
Enumerable#sort_by...first:   101936.4 i/s - 84.05x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   685.602k i/100ms
            Hash#dup   724.297k i/100ms
Calculating -------------------------------------
              Hash[]      7.478M (±10.8%) i/s -     37.023M in   5.019557s
            Hash#dup      7.824M (± 9.9%) i/s -     39.112M in   5.062177s

Comparison:
            Hash#dup:  7824499.2 i/s
              Hash[]:  7477934.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   314.919M i/100ms
  Hash#fetch, symbol   308.211M i/100ms
     Hash#[], string    19.007M i/100ms
  Hash#fetch, string    20.214M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.215B (± 1.8%) i/s -     16.376B in   5.096085s
  Hash#fetch, symbol      3.219B (± 1.5%) i/s -     16.335B in   5.076402s
     Hash#[], string    188.276M (± 2.4%) i/s -    950.368M in   5.050789s
  Hash#fetch, string    199.374M (± 5.1%) i/s -      1.011B in   5.087387s

Comparison:
  Hash#fetch, symbol: 3218667082.3 i/s
     Hash#[], symbol: 3214508602.3 i/s - same-ish: difference falls within error
  Hash#fetch, string: 199373934.2 i/s - 16.14x  (± 0.00) slower
     Hash#[], string: 188276093.7 i/s - 17.10x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    91.387M i/100ms
             Hash#[]    90.906M i/100ms
          Hash#[] ||    91.651M i/100ms
          Hash#[] &&    91.751M i/100ms
          Hash#fetch    92.025M i/100ms
 Hash#fetch fallback    92.313M i/100ms
Calculating -------------------------------------
            Hash#dig    920.443M (± 1.1%) i/s -      4.661B in   5.064253s
             Hash#[]    917.428M (± 1.9%) i/s -      4.636B in   5.055428s
          Hash#[] ||    913.088M (± 3.7%) i/s -      4.583B in   5.027136s
          Hash#[] &&    918.697M (± 1.8%) i/s -      4.679B in   5.095160s
          Hash#fetch    918.536M (± 1.5%) i/s -      4.601B in   5.010519s
 Hash#fetch fallback    918.510M (± 1.8%) i/s -      4.616B in   5.026933s

Comparison:
            Hash#dig: 920442532.8 i/s
          Hash#[] &&: 918697094.7 i/s - same-ish: difference falls within error
          Hash#fetch: 918535636.9 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 918510171.9 i/s - same-ish: difference falls within error
             Hash#[]: 917428039.7 i/s - same-ish: difference falls within error
          Hash#[] ||: 913088157.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   323.136M i/100ms
  Hash#fetch + block   322.766M i/100ms
    Hash#fetch + arg   322.716M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.206B (± 2.3%) i/s -     16.157B in   5.042497s
  Hash#fetch + block      3.207B (± 2.4%) i/s -     16.138B in   5.035810s
    Hash#fetch + arg      3.202B (± 2.2%) i/s -     16.136B in   5.042067s

Comparison:
  Hash#fetch + block: 3206685848.2 i/s
  Hash#fetch + const: 3205875076.2 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 3201920992.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    35.334k i/100ms
         sort + to_h     9.529k i/100ms
Calculating -------------------------------------
      sort_by + to_h    478.703k (±10.8%) i/s -      2.367M in   5.035608s
         sort + to_h    201.169k (±11.8%) i/s -    991.016k in   5.042333s

Comparison:
      sort_by + to_h:   478703.1 i/s
         sort + to_h:   201169.1 i/s - 2.38x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   199.933k i/100ms
       Hash#each_key   207.439k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.925M (±10.3%) i/s -      9.597M in   5.084079s
       Hash#each_key      2.008M (± 5.5%) i/s -     10.165M in   5.081748s

Comparison:
       Hash#each_key:  2008209.2 i/s
      Hash#keys.each:  1924577.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   324.000  i/100ms
           Hash#key?     3.564M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      3.601k (±12.1%) i/s -     17.820k in   5.052853s
           Hash#key?     35.535M (± 1.6%) i/s -    178.203M in   5.016354s

Comparison:
           Hash#key?: 35534638.2 i/s
  Hash#keys.include?:     3601.4 i/s - 9866.83x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    52.059k i/100ms
            Hash#[]=    62.973k i/100ms
Calculating -------------------------------------
         Hash#merge!    615.242k (± 7.5%) i/s -      3.071M in   5.028545s
            Hash#[]=    615.716k (± 7.6%) i/s -      3.149M in   5.152214s

Comparison:
            Hash#[]=:   615715.7 i/s
         Hash#merge!:   615242.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        33.350k i/100ms
      Hash#merge({})    19.035k i/100ms
 Hash#dup#merge!({})    29.934k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        386.127k (± 9.9%) i/s -      1.934M in   5.065720s
      Hash#merge({})    202.953k (± 8.8%) i/s -      1.009M in   5.017632s
 Hash#dup#merge!({})    317.975k (± 8.3%) i/s -      1.587M in   5.036941s

Comparison:
{}#merge!(Hash) do end:   386127.1 i/s
 Hash#dup#merge!({}):   317975.1 i/s - 1.21x  (± 0.00) slower
      Hash#merge({}):   202953.4 i/s - 1.90x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   322.236M i/100ms
          Hash#merge   322.494M i/100ms
Calculating -------------------------------------
        Hash#**other      3.221B (± 0.6%) i/s -     16.112B in   5.002506s
          Hash#merge      3.206B (± 5.0%) i/s -     16.125B in   5.048477s

Comparison:
        Hash#**other: 3220850538.9 i/s
          Hash#merge: 3206183643.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.080k i/100ms
         Hash#merge!    59.758k i/100ms
Calculating -------------------------------------
          Hash#merge     12.348k (±11.7%) i/s -     61.560k in   5.061806s
         Hash#merge!    627.891k (± 5.7%) i/s -      3.167M in   5.062516s

Comparison:
         Hash#merge!:   627891.5 i/s
          Hash#merge:    12348.0 i/s - 50.85x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.730M i/100ms
Array#each               1.458M i/100ms
Array#each_w/_object     1.455M i/100ms
Hash#select-include      2.413M i/100ms
Calculating -------------------------------------
Hash#native-slice        18.193M (± 6.8%) i/s -     91.673M in   5.071096s
Array#each               15.265M (± 6.4%) i/s -     77.281M in   5.095488s
Array#each_w/_object     15.079M (± 6.8%) i/s -     75.634M in   5.046786s
Hash#select-include      24.146M (± 6.5%) i/s -    120.662M in   5.023843s

Comparison:
Hash#select-include : 24145525.5 i/s
Hash#native-slice   : 18192861.0 i/s - 1.33x  (± 0.00) slower
Array#each          : 15265108.6 i/s - 1.58x  (± 0.00) slower
Array#each_w/_object: 15078646.0 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   314.000  i/100ms
         Hash#value?     3.270k i/100ms
Calculating -------------------------------------
Hash#values.include?      3.756k (±12.2%) i/s -     18.526k in   5.041462s
         Hash#value?     33.207k (± 1.2%) i/s -    166.770k in   5.022878s

Comparison:
         Hash#value?:    33206.6 i/s
Hash#values.include?:     3755.6 i/s - 8.84x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   317.212M i/100ms
                send   319.029M i/100ms
      method_missing   308.290M i/100ms
Calculating -------------------------------------
                call      3.197B (± 2.4%) i/s -     16.178B in   5.062716s
                send      3.187B (± 3.4%) i/s -     15.951B in   5.011753s
      method_missing      3.210B (± 2.0%) i/s -     16.339B in   5.092364s

Comparison:
      method_missing: 3209990103.8 i/s
                call: 3197464704.3 i/s - same-ish: difference falls within error
                send: 3187048513.9 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    68.038k i/100ms
      Symbol#to_proc    74.799k i/100ms
Calculating -------------------------------------
               Block    780.952k (±11.7%) i/s -      3.878M in   5.050596s
      Symbol#to_proc    783.424k (±12.0%) i/s -      3.890M in   5.058408s

Comparison:
      Symbol#to_proc:   783424.2 i/s
               Block:   780951.9 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   321.877M i/100ms
       block + yield   309.968M i/100ms
        unused block   308.797M i/100ms
               yield   322.874M i/100ms
Calculating -------------------------------------
          block.call      3.214B (± 2.1%) i/s -     16.094B in   5.009689s
       block + yield      3.199B (± 3.0%) i/s -     16.118B in   5.043786s
        unused block      3.176B (± 4.4%) i/s -     16.057B in   5.067864s
               yield      3.201B (± 2.8%) i/s -     16.144B in   5.047762s

Comparison:
          block.call: 3214022843.3 i/s
               yield: 3201080836.2 i/s - same-ish: difference falls within error
       block + yield: 3198778029.1 i/s - same-ish: difference falls within error
        unused block: 3175969350.4 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    35.414k i/100ms
      range#include?   404.000  i/100ms
       range#member?   606.000  i/100ms
       plain compare    35.682k i/100ms
Calculating -------------------------------------
        range#cover?    288.529k (±21.1%) i/s -      1.275M in   5.059104s
      range#include?     12.643k (±24.4%) i/s -     57.368k in   5.022623s
       range#member?     11.602k (±24.9%) i/s -     50.298k in   5.078897s
       plain compare    336.913k (±14.8%) i/s -      1.641M in   5.045989s

Comparison:
       plain compare:   336913.3 i/s
        range#cover?:   288528.8 i/s - same-ish: difference falls within error
      range#include?:    12643.2 i/s - 26.65x  (± 0.00) slower
       range#member?:    11602.5 i/s - 29.04x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    11.165M i/100ms
           String#=~    13.217M i/100ms
          Regexp#===    13.281M i/100ms
        String#match    10.804M i/100ms
Calculating -------------------------------------
       String#match?    135.724M (± 1.9%) i/s -    681.039M in   5.019812s
           String#=~    133.820M (± 0.9%) i/s -    674.062M in   5.037546s
          Regexp#===    132.907M (± 3.4%) i/s -    664.056M in   5.003280s
        String#match    107.347M (± 1.4%) i/s -    540.208M in   5.033462s

Comparison:
       String#match?: 135723842.6 i/s
           String#=~: 133819982.1 i/s - same-ish: difference falls within error
          Regexp#===: 132907370.4 i/s - same-ish: difference falls within error
        String#match: 107347077.4 i/s - 1.26x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.677M i/100ms
      String#casecmp     4.758M i/100ms
Calculating -------------------------------------
String#downcase + ==     29.801M (± 6.9%) i/s -    149.924M in   5.062247s
      String#casecmp     47.390M (± 7.5%) i/s -    237.878M in   5.056848s

Comparison:
      String#casecmp: 47390453.9 i/s
String#downcase + ==: 29800972.6 i/s - 1.59x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+    10.228M i/100ms
       String#concat    10.749M i/100ms
       String#append    10.801M i/100ms
         "foo" "bar"   323.080M i/100ms
  "#{'foo'}#{'bar'}"   320.933M i/100ms
Calculating -------------------------------------
            String#+    106.427M (± 6.1%) i/s -    531.874M in   5.023417s
       String#concat    106.204M (± 7.1%) i/s -    537.463M in   5.092981s
       String#append    106.939M (± 6.4%) i/s -    540.053M in   5.077650s
         "foo" "bar"      3.226B (± 0.3%) i/s -     16.154B in   5.006815s
  "#{'foo'}#{'bar'}"      3.207B (± 2.2%) i/s -     16.047B in   5.006582s

Comparison:
         "foo" "bar": 3226429263.9 i/s
  "#{'foo'}#{'bar'}": 3206808577.8 i/s - same-ish: difference falls within error
       String#append: 106939115.5 i/s - 30.17x  (± 0.00) slower
            String#+: 106427237.8 i/s - 30.32x  (± 0.00) slower
       String#concat: 106203954.1 i/s - 30.38x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   315.862M i/100ms
          String#dup   319.505M i/100ms
Calculating -------------------------------------
           String#+@      3.197B (± 2.4%) i/s -     16.109B in   5.041550s
          String#dup      3.192B (± 5.0%) i/s -     15.975B in   5.021412s

Comparison:
           String#+@: 3197237088.5 i/s
          String#dup: 3192443961.0 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.373M i/100ms
       String#match?     1.626M i/100ms
    String#end_with?    10.766M i/100ms
Calculating -------------------------------------
           String#=~     13.736M (± 6.3%) i/s -     68.659M in   5.029664s
       String#match?     16.301M (± 1.9%) i/s -     82.921M in   5.088890s
    String#end_with?    106.869M (± 2.1%) i/s -    538.294M in   5.039222s

Comparison:
    String#end_with?: 106868982.2 i/s
       String#match?: 16300683.5 i/s - 6.56x  (± 0.00) slower
           String#=~: 13735637.2 i/s - 7.78x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   734.110k i/100ms
          String#sub   953.356k i/100ms
String#dup["string"]=
                         9.807M i/100ms
Calculating -------------------------------------
         String#gsub      8.376M (± 8.2%) i/s -     41.844M in   5.035319s
          String#sub      9.921M (± 8.7%) i/s -     49.575M in   5.046046s
String#dup["string"]=
                         99.970M (± 4.8%) i/s -    500.153M in   5.019926s

Comparison:
String#dup["string"]=: 99969859.3 i/s
          String#sub:  9921305.2 i/s - 10.08x  (± 0.00) slower
         String#gsub:  8376488.0 i/s - 11.93x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   346.286k i/100ms
           String#tr   161.328k i/100ms
Calculating -------------------------------------
         String#gsub      4.012M (± 8.0%) i/s -     20.085M in   5.056444s
           String#tr      1.620M (± 4.0%) i/s -      8.228M in   5.085957s

Comparison:
         String#gsub:  4012055.8 i/s
           String#tr:  1620434.0 i/s - 2.48x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   318.370M i/100ms
         With Freeze   322.155M i/100ms
Calculating -------------------------------------
      Without Freeze      3.214B (± 1.5%) i/s -     16.237B in   5.052976s
         With Freeze      3.216B (± 1.7%) i/s -     16.108B in   5.009472s

Comparison:
         With Freeze: 3216479559.5 i/s
      Without Freeze: 3214086402.3 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     8.825k i/100ms
      String#squeeze    79.153k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    153.281k (± 8.7%) i/s -    758.950k in   4.999677s
      String#squeeze    796.903k (± 3.1%) i/s -      4.037M in   5.070765s

Comparison:
      String#squeeze:   796903.1 i/s
 String#gsub/regex+/:   153281.3 i/s - 5.20x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     3.641M i/100ms
       String#match?     6.376M i/100ms
  String#start_with?    12.867M i/100ms
Calculating -------------------------------------
           String#=~     43.419M (± 5.0%) i/s -    218.457M in   5.046785s
       String#match?     63.131M (± 2.3%) i/s -    318.787M in   5.052469s
  String#start_with?    128.877M (± 0.9%) i/s -    656.212M in   5.092214s

Comparison:
  String#start_with?: 128876728.3 i/s
       String#match?: 63130580.2 i/s - 2.04x  (± 0.00) slower
           String#=~: 43418765.8 i/s - 2.97x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    61.219k i/100ms
    String#[0, n] ==   290.163k i/100ms
   String#[RANGE] ==   445.169k i/100ms
   String#[0...n] ==   273.029k i/100ms
Calculating -------------------------------------
  String#start_with?      7.050M (± 3.2%) i/s -     35.201M in   5.001610s
    String#[0, n] ==      2.927M (± 3.0%) i/s -     14.798M in   5.060370s
   String#[RANGE] ==      4.406M (± 2.9%) i/s -     22.258M in   5.056044s
   String#[0...n] ==      2.735M (± 6.0%) i/s -     13.651M in   5.017613s

Comparison:
  String#start_with?:  7050238.2 i/s
   String#[RANGE] ==:  4406062.7 i/s - 1.60x  (± 0.00) slower
    String#[0, n] ==:  2927106.2 i/s - 2.41x  (± 0.00) slower
   String#[0...n] ==:  2734800.0 i/s - 2.58x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     9.959M i/100ms
 String#sub!'string'     1.004M i/100ms
String#gsub!'string'   853.269k i/100ms
  String#[/regexp/]=     2.717M i/100ms
 String#sub!/regexp/     1.319M i/100ms
String#gsub!/regexp/   803.206k i/100ms
Calculating -------------------------------------
  String#['string']=    100.089M (± 2.5%) i/s -    507.916M in   5.078036s
 String#sub!'string'      9.999M (±17.3%) i/s -     45.178M in   5.023878s
String#gsub!'string'      8.791M (± 9.1%) i/s -     43.517M in   5.005868s
  String#[/regexp/]=     26.532M (± 6.8%) i/s -    133.144M in   5.052002s
 String#sub!/regexp/     13.661M (± 9.7%) i/s -     68.563M in   5.073202s
String#gsub!/regexp/      8.359M (± 8.3%) i/s -     41.767M in   5.041440s

Comparison:
  String#['string']=: 100088983.0 i/s
  String#[/regexp/]=: 26532339.2 i/s - 3.77x  (± 0.00) slower
 String#sub!/regexp/: 13660560.5 i/s - 7.33x  (± 0.00) slower
 String#sub!'string':  9998801.9 i/s - 10.01x  (± 0.00) slower
String#gsub!'string':  8790867.3 i/s - 11.39x  (± 0.00) slower
String#gsub!/regexp/:  8358759.0 i/s - 11.97x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     2.862M i/100ms
        String#chomp     5.561M i/100ms
String#delete_suffix    14.861M i/100ms
Calculating -------------------------------------
          String#sub     29.747M (± 4.0%) i/s -    148.826M in   5.012254s
        String#chomp     56.205M (± 2.3%) i/s -    283.591M in   5.048628s
String#delete_suffix    152.834M (±11.5%) i/s -    757.907M in   5.050080s

Comparison:
String#delete_suffix: 152834383.9 i/s
        String#chomp: 56205482.0 i/s - 2.72x  (± 0.00) slower
          String#sub: 29746767.9 i/s - 5.14x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   314.676M i/100ms
          String#sub    13.685M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.192B (± 2.7%) i/s -     16.048B in   5.031582s
          String#sub    128.735M (± 0.9%) i/s -    656.896M in   5.103155s

Comparison:
String#delete_prefix: 3191963684.7 i/s
          String#sub: 128735470.7 i/s - 24.79x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.931M i/100ms
    String#unpack[0]     1.941M i/100ms
Calculating -------------------------------------
      String#unpack1     19.013M (± 5.3%) i/s -     96.540M in   5.097089s
    String#unpack[0]     18.937M (± 5.7%) i/s -     95.090M in   5.042975s

Comparison:
      String#unpack1: 19012687.2 i/s
    String#unpack[0]: 18937393.2 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.0.0-dev-5ff14c3f, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    38.569k i/100ms
          Time.parse   411.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    485.108k (±17.9%) i/s -      2.353M in   5.063334s
          Time.parse     22.384k (±28.5%) i/s -     88.776k in   5.011403s

Comparison:
        Time.iso8601:   485108.2 i/s
          Time.parse:    22384.5 i/s - 21.67x  (± 0.00) slower

