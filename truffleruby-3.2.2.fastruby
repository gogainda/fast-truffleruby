$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       311.087M i/100ms
Function with splat arguments
                         1.814k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.157B (± 2.1%) i/s -     15.865B in   5.027648s
Function with splat arguments
                         19.352k (± 9.4%) i/s -     96.142k in   5.017773s

Comparison:
Function with single Array argument: 3157156076.2 i/s
Function with splat arguments:    19352.2 i/s - 163142.33x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   312.379M i/100ms
Sequential Assignment
                       305.351M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.165B (± 2.6%) i/s -     15.931B in   5.036597s
Sequential Assignment
                          3.189B (± 3.2%) i/s -     16.184B in   5.081272s

Comparison:
Sequential Assignment: 3188749765.0 i/s
 Parallel Assignment: 3165419684.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   316.766M i/100ms
       attr_accessor   321.733M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.195B (± 2.1%) i/s -     16.155B in   5.058697s
       attr_accessor      3.164B (± 2.8%) i/s -     16.087B in   5.088585s

Comparison:
   getter_and_setter: 3194978105.6 i/s
       attr_accessor: 3164043944.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    10.872k i/100ms
         respond_to?   319.957M i/100ms
Calculating -------------------------------------
      begin...rescue    103.846k (± 6.6%) i/s -    521.856k in   5.055504s
         respond_to?      3.193B (± 2.4%) i/s -     15.998B in   5.013214s

Comparison:
         respond_to?: 3193139203.9 i/s
      begin...rescue:   103846.0 i/s - 30748.79x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   307.189M i/100ms
             &method   319.317M i/100ms
Calculating -------------------------------------
              normal      3.191B (± 1.7%) i/s -     15.974B in   5.007444s
             &method      3.191B (± 2.6%) i/s -     15.966B in   5.007307s

Comparison:
              normal: 3190919288.9 i/s
             &method: 3190918994.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       137.000  i/100ms
       define_method   162.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          3.455k (±60.4%) i/s -      7.261k in   5.002924s
       define_method     10.709k (±50.2%) i/s -      7.938k in   5.519802s

Comparison:
       define_method:    10708.9 i/s
module_eval with string:     3454.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   128.187k i/100ms
       Kernel#format   106.654k i/100ms
            String#%    19.411k i/100ms
Calculating -------------------------------------
         Float#round      1.305M (± 3.5%) i/s -      6.538M in   5.017657s
       Kernel#format      1.078M (± 3.1%) i/s -      5.439M in   5.049531s
            String#%    213.763k (± 9.5%) i/s -      1.068M in   5.050829s

Comparison:
         Float#round:  1304556.6 i/s
       Kernel#format:  1078297.7 i/s - 1.21x  (± 0.00) slower
            String#%:   213762.9 i/s - 6.10x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   318.425M i/100ms
          OpenStruct   317.381M i/100ms
Calculating -------------------------------------
                Hash      3.170B (± 2.5%) i/s -     15.921B in   5.026523s
          OpenStruct      3.207B (± 1.1%) i/s -     16.186B in   5.047342s

Comparison:
          OpenStruct: 3207323321.2 i/s
                Hash: 3169624499.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   313.688M i/100ms
          OpenStruct     4.374k i/100ms
Calculating -------------------------------------
                Hash      3.014B (± 8.7%) i/s -     15.057B in   5.053383s
          OpenStruct     43.047k (±18.3%) i/s -    214.326k in   5.221411s

Comparison:
                Hash: 3013565804.5 i/s
          OpenStruct:    43046.7 i/s - 70006.88x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   909.214k i/100ms
  ancestors.include?   219.011k i/100ms
Calculating -------------------------------------
  less than or equal      9.824M (± 3.8%) i/s -     49.098M in   5.005152s
  ancestors.include?      2.284M (± 7.1%) i/s -     11.608M in   5.118084s

Comparison:
  less than or equal:  9824346.5 i/s
  ancestors.include?:  2284027.7 i/s - 4.30x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     31.192  (± 3.2%) i/s -    156.000  in   5.011423s
         Kernel loop     31.771  (± 3.1%) i/s -    159.000  in   5.009447s

Comparison:
         Kernel loop:       31.8 i/s
          While Loop:       31.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   316.624M i/100ms
         Array#first   317.076M i/100ms
Calculating -------------------------------------
           Array#[0]      3.167B (± 1.8%) i/s -     15.831B in   5.000007s
         Array#first      3.192B (± 2.6%) i/s -     16.171B in   5.069968s

Comparison:
         Array#first: 3191876257.6 i/s
           Array#[0]: 3167277191.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   300.465M i/100ms
          Array#last   308.164M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.144B (± 3.0%) i/s -     15.925B in   5.070330s
          Array#last      3.123B (± 3.0%) i/s -     15.716B in   5.037215s

Comparison:
          Array#[-1]: 3143672489.3 i/s
          Array#last: 3123026408.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   895.889k i/100ms
Calculating -------------------------------------
                find     13.731  (± 0.0%) i/s -     69.000  in   5.026511s
             bsearch      9.122M (± 3.1%) i/s -     45.690M in   5.014016s

Comparison:
             bsearch:  9121743.1 i/s
                find:       13.7 i/s - 664304.61x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.255  (± 0.0%) i/s -      2.000  in   7.858551s
        Array#insert      1.393  (± 0.0%) i/s -      7.000  in   5.024245s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.3 i/s - 5.47x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   309.970M i/100ms
          Array#size   317.892M i/100ms
         Array#count   320.839M i/100ms
Calculating -------------------------------------
        Array#length      3.183B (± 2.3%) i/s -     16.118B in   5.067010s
          Array#size      3.200B (± 2.0%) i/s -     16.212B in   5.068206s
         Array#count      3.208B (± 1.6%) i/s -     16.042B in   5.002640s

Comparison:
         Array#count: 3207548741.7 i/s
          Array#size: 3200153892.2 i/s - same-ish: difference falls within error
        Array#length: 3182869242.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    34.406k i/100ms
        Array#sample     3.822M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    357.863k (± 2.6%) i/s -      1.789M in   5.003147s
        Array#sample     38.271M (± 1.2%) i/s -    194.931M in   5.094173s

Comparison:
        Array#sample: 38270941.2 i/s
 Array#shuffle.first:   357862.8 i/s - 106.94x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601     1.055k i/100ms
          Date.parse   532.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     16.417k (±26.3%) i/s -     77.015k in   5.043425s
          Date.parse      7.035k (±20.8%) i/s -     33.516k in   5.018856s

Comparison:
        Date.iso8601:    16416.6 i/s
          Date.parse:     7034.9 i/s - 2.33x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   313.036k i/100ms
           Array#map     1.655M i/100ms
Calculating -------------------------------------
   Array#each + push      3.703M (± 3.7%) i/s -     18.782M in   5.079668s
           Array#map     16.491M (± 8.6%) i/s -     82.763M in   5.065745s

Comparison:
           Array#map: 16490863.4 i/s
   Array#each + push:  3703430.0 i/s - 4.45x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    10.723M i/100ms
               #each    35.508M i/100ms
Calculating -------------------------------------
            For loop    123.584M (± 2.5%) i/s -    621.941M in   5.035908s
               #each    351.610M (± 2.1%) i/s -      1.775B in   5.051715s

Comparison:
               #each: 351610018.6 i/s
            For loop: 123584166.3 i/s - 2.85x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.419M i/100ms
     each_with_index     1.959M i/100ms
Calculating -------------------------------------
          While Loop     14.213M (± 1.6%) i/s -     72.372M in   5.093352s
     each_with_index     18.922M (± 5.9%) i/s -     96.012M in   5.092498s

Comparison:
     each_with_index: 18922434.4 i/s
          While Loop: 14212650.5 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   308.717k i/100ms
      inject to_proc   313.050k i/100ms
        inject block   312.384k i/100ms
Calculating -------------------------------------
       inject symbol      3.098M (± 2.3%) i/s -     15.745M in   5.084324s
      inject to_proc      3.109M (± 2.5%) i/s -     15.652M in   5.038456s
        inject block      3.109M (± 4.2%) i/s -     15.619M in   5.036019s

Comparison:
        inject block:  3109183.2 i/s
      inject to_proc:  3108644.9 i/s - same-ish: difference falls within error
       inject symbol:  3098489.6 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    11.872k i/100ms
   Array#map.flatten    25.777k i/100ms
      Array#flat_map    57.548k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    265.888k (±10.4%) i/s -      1.318M in   5.027948s
   Array#map.flatten    262.762k (± 8.6%) i/s -      1.315M in   5.052734s
      Array#flat_map    582.389k (± 4.1%) i/s -      2.935M in   5.048686s

Comparison:
      Array#flat_map:   582389.2 i/s
Array#map.flatten(1):   265888.5 i/s - 2.19x  (± 0.00) slower
   Array#map.flatten:   262762.3 i/s - 2.22x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   272.126k i/100ms
  Array#reverse_each     2.908M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.096M (± 6.4%) i/s -     15.511M in   5.039495s
  Array#reverse_each     23.830M (± 2.1%) i/s -    119.247M in   5.006315s

Comparison:
  Array#reverse_each: 23830248.3 i/s
  Array#reverse.each:  3096451.3 i/s - 7.70x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       982.005k i/100ms
   Enumerable#detect     4.088M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.292M (± 8.6%) i/s -    204.257M in  20.052976s
   Enumerable#detect     45.301M (± 4.0%) i/s -    907.564M in  20.069409s

Comparison:
   Enumerable#detect: 45301254.0 i/s
Enumerable#select.first: 10292366.3 i/s - 4.40x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       290.619k i/100ms
Enumerable#select.last
                       505.870k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.158M (± 6.0%) i/s -     15.984M in   5.086979s
Enumerable#select.last
                          5.329M (± 6.5%) i/s -     26.811M in   5.061454s

Comparison:
Enumerable#select.last:  5329080.5 i/s
Enumerable#reverse.detect:  3158304.3 i/s - 1.69x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.036k i/100ms
  Enumerable#sort_by     4.012k i/100ms
     Enumerable#sort     3.634k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         40.174k (±11.5%) i/s -    197.764k in   5.040950s
  Enumerable#sort_by     37.192k (±24.1%) i/s -    160.480k in   5.017562s
     Enumerable#sort     52.320k (± 4.5%) i/s -    261.648k in   5.012324s

Comparison:
     Enumerable#sort:    52320.5 i/s
Enumerable#sort_by (Symbol#to_proc):    40174.4 i/s - 1.30x  (± 0.00) slower
  Enumerable#sort_by:    37191.7 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   823.269k i/100ms
Enumerable#sort_by...first
                         5.547k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      8.210M (± 2.7%) i/s -     41.163M in   5.017605s
Enumerable#sort_by...first
                         99.927k (± 7.6%) i/s -    499.230k in   5.045961s

Comparison:
   Enumerable#min_by:  8210339.3 i/s
Enumerable#sort_by...first:    99926.6 i/s - 82.16x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   850.456k i/100ms
            Hash#dup   817.438k i/100ms
Calculating -------------------------------------
              Hash[]      9.011M (± 7.6%) i/s -     45.074M in   5.040517s
            Hash#dup      8.896M (± 6.6%) i/s -     44.959M in   5.083979s

Comparison:
              Hash[]:  9010621.7 i/s
            Hash#dup:  8896419.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   322.328M i/100ms
  Hash#fetch, symbol   298.866M i/100ms
     Hash#[], string     3.890M i/100ms
  Hash#fetch, string    20.195M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.197B (± 1.6%) i/s -     16.116B in   5.042568s
  Hash#fetch, symbol      3.216B (± 0.9%) i/s -     16.139B in   5.018374s
     Hash#[], string    189.741M (± 1.2%) i/s -    949.132M in   5.003064s
  Hash#fetch, string    200.533M (± 2.2%) i/s -      1.010B in   5.037771s

Comparison:
  Hash#fetch, symbol: 3216188416.6 i/s
     Hash#[], symbol: 3196892268.3 i/s - same-ish: difference falls within error
  Hash#fetch, string: 200532502.3 i/s - 16.04x  (± 0.00) slower
     Hash#[], string: 189741483.1 i/s - 16.95x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    91.944M i/100ms
             Hash#[]    92.064M i/100ms
          Hash#[] ||    92.318M i/100ms
          Hash#[] &&    92.374M i/100ms
          Hash#fetch    92.273M i/100ms
 Hash#fetch fallback    92.412M i/100ms
Calculating -------------------------------------
            Hash#dig    922.022M (± 0.9%) i/s -      4.689B in   5.086221s
             Hash#[]    919.324M (± 1.6%) i/s -      4.603B in   5.008453s
          Hash#[] ||    920.689M (± 1.0%) i/s -      4.616B in   5.014083s
          Hash#[] &&    923.082M (± 0.3%) i/s -      4.619B in   5.003604s
          Hash#fetch    919.389M (± 1.7%) i/s -      4.614B in   5.019783s
 Hash#fetch fallback    917.651M (± 3.1%) i/s -      4.621B in   5.040994s

Comparison:
          Hash#[] &&: 923081618.2 i/s
            Hash#dig: 922022028.9 i/s - same-ish: difference falls within error
          Hash#[] ||: 920689388.4 i/s - same-ish: difference falls within error
          Hash#fetch: 919388816.8 i/s - same-ish: difference falls within error
             Hash#[]: 919324010.8 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 917651382.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   315.462M i/100ms
  Hash#fetch + block   315.317M i/100ms
    Hash#fetch + arg   322.032M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.139B (± 3.6%) i/s -     15.773B in   5.031743s
  Hash#fetch + block      3.071B (± 2.8%) i/s -     15.451B in   5.034740s
    Hash#fetch + arg      3.128B (± 4.3%) i/s -     15.780B in   5.056827s

Comparison:
  Hash#fetch + const: 3139024420.4 i/s
    Hash#fetch + arg: 3127556317.1 i/s - same-ish: difference falls within error
  Hash#fetch + block: 3071331632.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    19.671k i/100ms
         sort + to_h     8.948k i/100ms
Calculating -------------------------------------
      sort_by + to_h    521.568k (± 8.7%) i/s -      2.597M in   5.023276s
         sort + to_h    147.869k (± 5.3%) i/s -    742.684k in   5.037823s

Comparison:
      sort_by + to_h:   521568.1 i/s
         sort + to_h:   147868.7 i/s - 3.53x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   182.838k i/100ms
       Hash#each_key   250.429k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.246M (±10.8%) i/s -     10.970M in   5.026186s
       Hash#each_key      2.516M (± 6.4%) i/s -     12.521M in   5.006739s

Comparison:
       Hash#each_key:  2515558.2 i/s
      Hash#keys.each:  2245813.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   499.000  i/100ms
           Hash#key?    16.245M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      5.154k (±16.6%) i/s -     24.950k in   5.053018s
           Hash#key?    161.511M (± 1.8%) i/s -    812.239M in   5.030740s

Comparison:
           Hash#key?: 161511498.9 i/s
  Hash#keys.include?:     5153.7 i/s - 31338.80x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    28.203k i/100ms
            Hash#[]=    35.510k i/100ms
Calculating -------------------------------------
         Hash#merge!    358.897k (± 5.7%) i/s -      1.805M in   5.047107s
            Hash#[]=    357.839k (± 6.6%) i/s -      1.811M in   5.092403s

Comparison:
         Hash#merge!:   358896.9 i/s
            Hash#[]=:   357838.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        32.671k i/100ms
      Hash#merge({})    23.798k i/100ms
 Hash#dup#merge!({})    32.458k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        377.758k (±11.9%) i/s -      1.862M in   5.018637s
      Hash#merge({})    241.879k (± 7.7%) i/s -      1.214M in   5.057935s
 Hash#dup#merge!({})    317.956k (± 9.5%) i/s -      1.590M in   5.057594s

Comparison:
{}#merge!(Hash) do end:   377757.8 i/s
 Hash#dup#merge!({}):   317956.2 i/s - same-ish: difference falls within error
      Hash#merge({}):   241878.7 i/s - 1.56x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   320.537M i/100ms
          Hash#merge   321.393M i/100ms
Calculating -------------------------------------
        Hash#**other      3.182B (± 2.6%) i/s -     16.027B in   5.040882s
          Hash#merge      3.188B (± 3.3%) i/s -     16.070B in   5.046060s

Comparison:
          Hash#merge: 3188462113.2 i/s
        Hash#**other: 3181695067.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.058k i/100ms
         Hash#merge!    36.745k i/100ms
Calculating -------------------------------------
          Hash#merge     14.479k (± 9.3%) i/s -     71.944k in   5.028455s
         Hash#merge!    377.414k (± 3.5%) i/s -      1.911M in   5.069319s

Comparison:
         Hash#merge!:   377413.6 i/s
          Hash#merge:    14479.2 i/s - 26.07x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.865M i/100ms
Array#each               1.711M i/100ms
Array#each_w/_object     1.663M i/100ms
Hash#select-include      2.443M i/100ms
Calculating -------------------------------------
Hash#native-slice        19.911M (± 5.0%) i/s -    100.733M in   5.072512s
Array#each               15.985M (± 3.4%) i/s -     80.411M in   5.036693s
Array#each_w/_object     16.549M (± 3.9%) i/s -     83.167M in   5.033370s
Hash#select-include      24.629M (± 3.4%) i/s -    124.570M in   5.063720s

Comparison:
Hash#select-include : 24628938.2 i/s
Hash#native-slice   : 19911374.2 i/s - 1.24x  (± 0.00) slower
Array#each_w/_object: 16549236.7 i/s - 1.49x  (± 0.00) slower
Array#each          : 15984881.5 i/s - 1.54x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   355.000  i/100ms
         Hash#value?    14.477k i/100ms
Calculating -------------------------------------
Hash#values.include?      7.295k (±18.1%) i/s -     34.435k in   5.036436s
         Hash#value?    138.222k (± 1.1%) i/s -    694.896k in   5.028089s

Comparison:
         Hash#value?:   138221.5 i/s
Hash#values.include?:     7294.6 i/s - 18.95x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   317.466M i/100ms
                send   304.636M i/100ms
      method_missing   314.466M i/100ms
Calculating -------------------------------------
                call      3.178B (± 1.9%) i/s -     16.191B in   5.096827s
                send      3.148B (± 5.0%) i/s -     15.841B in   5.047113s
      method_missing      3.199B (± 2.3%) i/s -     16.038B in   5.015620s

Comparison:
      method_missing: 3199410639.4 i/s
                call: 3177829339.1 i/s - same-ish: difference falls within error
                send: 3148415756.1 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    62.351k i/100ms
      Symbol#to_proc    64.872k i/100ms
Calculating -------------------------------------
               Block    738.913k (±11.7%) i/s -      3.679M in   5.058930s
      Symbol#to_proc    739.229k (±15.3%) i/s -      3.633M in   5.043876s

Comparison:
      Symbol#to_proc:   739228.9 i/s
               Block:   738913.0 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   317.572M i/100ms
       block + yield   321.777M i/100ms
        unused block   316.139M i/100ms
               yield   312.485M i/100ms
Calculating -------------------------------------
          block.call      3.144B (± 2.4%) i/s -     15.879B in   5.053883s
       block + yield      3.133B (± 2.1%) i/s -     15.767B in   5.034953s
        unused block      3.167B (± 2.8%) i/s -     16.123B in   5.094629s
               yield      3.181B (± 2.5%) i/s -     15.937B in   5.012613s

Comparison:
               yield: 3181420594.8 i/s
        unused block: 3167261743.4 i/s - same-ish: difference falls within error
          block.call: 3143795723.1 i/s - same-ish: difference falls within error
       block + yield: 3132929696.5 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     5.319k i/100ms
      range#include?   170.000  i/100ms
       range#member?   249.000  i/100ms
       plain compare     7.971k i/100ms
Calculating -------------------------------------
        range#cover?     63.029k (±29.7%) i/s -    281.907k in   5.025573s
      range#include?      2.864k (±38.2%) i/s -     11.730k in   5.048617s
       range#member?      2.523k (±41.6%) i/s -     10.707k in   5.115991s
       plain compare     95.440k (±29.4%) i/s -    422.463k in   5.054804s

Comparison:
       plain compare:    95440.5 i/s
        range#cover?:    63029.2 i/s - same-ish: difference falls within error
      range#include?:     2863.7 i/s - 33.33x  (± 0.00) slower
       range#member?:     2523.4 i/s - 37.82x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    13.343M i/100ms
           String#=~    13.326M i/100ms
          Regexp#===    13.342M i/100ms
        String#match    10.587M i/100ms
Calculating -------------------------------------
       String#match?    124.768M (± 1.6%) i/s -    627.132M in   5.027558s
           String#=~    133.154M (± 0.7%) i/s -    666.322M in   5.004349s
          Regexp#===    132.068M (± 2.6%) i/s -    667.103M in   5.055067s
        String#match    106.152M (± 2.0%) i/s -    539.956M in   5.088867s

Comparison:
           String#=~: 133154472.4 i/s
          Regexp#===: 132068305.6 i/s - same-ish: difference falls within error
       String#match?: 124768294.1 i/s - 1.07x  (± 0.00) slower
        String#match: 106151870.9 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.687M i/100ms
      String#casecmp     4.232M i/100ms
Calculating -------------------------------------
String#downcase + ==     29.977M (± 6.9%) i/s -    150.468M in   5.051551s
      String#casecmp     46.050M (± 6.0%) i/s -    232.742M in   5.072931s

Comparison:
      String#casecmp: 46049609.6 i/s
String#downcase + ==: 29977389.6 i/s - 1.54x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     9.183M i/100ms
       String#concat     9.971M i/100ms
       String#append    10.048M i/100ms
         "foo" "bar"   319.829M i/100ms
  "#{'foo'}#{'bar'}"   319.517M i/100ms
Calculating -------------------------------------
            String#+    101.132M (± 4.3%) i/s -    505.075M in   5.004240s
       String#concat    101.304M (± 3.2%) i/s -    508.523M in   5.025276s
       String#append    101.891M (± 3.2%) i/s -    512.439M in   5.034441s
         "foo" "bar"      3.127B (± 2.5%) i/s -     15.672B in   5.014104s
  "#{'foo'}#{'bar'}"      3.098B (± 2.0%) i/s -     15.656B in   5.055318s

Comparison:
         "foo" "bar": 3127443249.5 i/s
  "#{'foo'}#{'bar'}": 3098291021.9 i/s - same-ish: difference falls within error
       String#append: 101891298.9 i/s - 30.69x  (± 0.00) slower
       String#concat: 101303600.6 i/s - 30.87x  (± 0.00) slower
            String#+: 101132129.8 i/s - 30.92x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   313.807M i/100ms
          String#dup   310.746M i/100ms
Calculating -------------------------------------
           String#+@      3.171B (± 2.7%) i/s -     16.004B in   5.050842s
          String#dup      3.198B (± 2.6%) i/s -     16.159B in   5.055821s

Comparison:
          String#dup: 3198330159.1 i/s
           String#+@: 3171055087.6 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.282M i/100ms
       String#match?     1.625M i/100ms
    String#end_with?    11.042M i/100ms
Calculating -------------------------------------
           String#=~     13.786M (± 3.0%) i/s -     69.247M in   5.027980s
       String#match?     16.001M (± 2.2%) i/s -     81.258M in   5.081067s
    String#end_with?    110.453M (± 2.3%) i/s -    552.119M in   5.001533s

Comparison:
    String#end_with?: 110452971.9 i/s
       String#match?: 16000701.9 i/s - 6.90x  (± 0.00) slower
           String#=~: 13785669.5 i/s - 8.01x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   427.059k i/100ms
          String#sub   912.129k i/100ms
String#dup["string"]=
                        10.095M i/100ms
Calculating -------------------------------------
         String#gsub      8.535M (± 9.6%) i/s -     42.279M in   5.028824s
          String#sub      9.536M (±10.4%) i/s -     47.431M in   5.036016s
String#dup["string"]=
                        100.307M (± 3.2%) i/s -    504.730M in   5.038013s

Comparison:
String#dup["string"]=: 100307443.5 i/s
          String#sub:  9536283.3 i/s - 10.52x  (± 0.00) slower
         String#gsub:  8535313.3 i/s - 11.75x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   187.339k i/100ms
           String#tr   166.870k i/100ms
Calculating -------------------------------------
         String#gsub      3.990M (±10.6%) i/s -     19.671M in   5.019454s
           String#tr      1.662M (± 7.9%) i/s -      8.344M in   5.069391s

Comparison:
         String#gsub:  3990169.8 i/s
           String#tr:  1661601.7 i/s - 2.40x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   305.406M i/100ms
         With Freeze   312.870M i/100ms
Calculating -------------------------------------
      Without Freeze      3.192B (± 2.4%) i/s -     16.186B in   5.074873s
         With Freeze      3.180B (± 2.6%) i/s -     15.956B in   5.021360s

Comparison:
      Without Freeze: 3191562372.5 i/s
         With Freeze: 3179902721.6 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     8.000k i/100ms
      String#squeeze    71.113k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    158.183k (±10.3%) i/s -    784.000k in   5.035479s
      String#squeeze    716.869k (± 3.0%) i/s -      3.627M in   5.064053s

Comparison:
      String#squeeze:   716868.7 i/s
 String#gsub/regex+/:   158183.2 i/s - 4.53x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     3.991M i/100ms
       String#match?     6.327M i/100ms
  String#start_with?    12.871M i/100ms
Calculating -------------------------------------
           String#=~     45.505M (± 4.7%) i/s -    227.461M in   5.010567s
       String#match?     62.735M (± 2.4%) i/s -    316.337M in   5.045490s
  String#start_with?    126.790M (± 3.9%) i/s -    643.574M in   5.084238s

Comparison:
  String#start_with?: 126790292.4 i/s
       String#match?: 62734544.5 i/s - 2.02x  (± 0.00) slower
           String#=~: 45505227.0 i/s - 2.79x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    68.253k i/100ms
    String#[0, n] ==   297.088k i/100ms
   String#[RANGE] ==   347.099k i/100ms
   String#[0...n] ==   286.039k i/100ms
Calculating -------------------------------------
  String#start_with?      6.939M (± 2.5%) i/s -     34.673M in   5.003445s
    String#[0, n] ==      3.056M (± 3.7%) i/s -     15.449M in   5.062137s
   String#[RANGE] ==      3.533M (± 2.7%) i/s -     17.702M in   5.014769s
   String#[0...n] ==      2.726M (± 6.5%) i/s -     13.730M in   5.064237s

Comparison:
  String#start_with?:  6939167.4 i/s
   String#[RANGE] ==:  3532703.5 i/s - 1.96x  (± 0.00) slower
    String#[0, n] ==:  3056200.9 i/s - 2.27x  (± 0.00) slower
   String#[0...n] ==:  2726354.9 i/s - 2.55x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    10.023M i/100ms
 String#sub!'string'   973.332k i/100ms
String#gsub!'string'   816.983k i/100ms
  String#[/regexp/]=     2.512M i/100ms
 String#sub!/regexp/     1.421M i/100ms
String#gsub!/regexp/   794.494k i/100ms
Calculating -------------------------------------
  String#['string']=    100.541M (± 2.1%) i/s -    511.153M in   5.086486s
 String#sub!'string'     10.150M (±16.9%) i/s -     46.720M in   5.079170s
String#gsub!'string'      8.786M (± 9.8%) i/s -     44.117M in   5.079365s
  String#[/regexp/]=     26.759M (± 4.3%) i/s -    135.675M in   5.080255s
 String#sub!/regexp/     13.664M (±10.8%) i/s -     68.212M in   5.063869s
String#gsub!/regexp/      8.436M (± 8.5%) i/s -     42.108M in   5.041997s

Comparison:
  String#['string']=: 100541424.1 i/s
  String#[/regexp/]=: 26758976.4 i/s - 3.76x  (± 0.00) slower
 String#sub!/regexp/: 13663705.0 i/s - 7.36x  (± 0.00) slower
 String#sub!'string': 10149513.7 i/s - 9.91x  (± 0.00) slower
String#gsub!'string':  8786219.1 i/s - 11.44x  (± 0.00) slower
String#gsub!/regexp/:  8436106.4 i/s - 11.92x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     2.538M i/100ms
        String#chomp     5.708M i/100ms
String#delete_suffix    13.978M i/100ms
Calculating -------------------------------------
          String#sub     29.856M (± 2.8%) i/s -    149.764M in   5.020337s
        String#chomp     56.890M (± 0.4%) i/s -    285.408M in   5.016937s
String#delete_suffix    145.185M (± 9.3%) i/s -    726.858M in   5.055395s

Comparison:
String#delete_suffix: 145185243.6 i/s
        String#chomp: 56889651.1 i/s - 2.55x  (± 0.00) slower
          String#sub: 29856495.1 i/s - 4.86x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   322.528M i/100ms
          String#sub    13.759M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.172B (± 2.0%) i/s -     16.126B in   5.086290s
          String#sub    137.443M (± 1.5%) i/s -    687.960M in   5.006567s

Comparison:
String#delete_prefix: 3171932611.9 i/s
          String#sub: 137443009.7 i/s - 23.08x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.794M i/100ms
    String#unpack[0]     1.906M i/100ms
Calculating -------------------------------------
      String#unpack1     19.193M (± 3.3%) i/s -     96.861M in   5.052161s
    String#unpack[0]     19.113M (± 6.0%) i/s -     95.298M in   5.012464s

Comparison:
      String#unpack1: 19193027.0 i/s
    String#unpack[0]: 19113010.9 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.0.0-dev-7c5bef13, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    21.283k i/100ms
          Time.parse   298.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    416.180k (±29.3%) i/s -      1.873M in   5.011987s
          Time.parse      6.055k (±16.4%) i/s -     29.204k in   5.013705s

Comparison:
        Time.iso8601:   416179.5 i/s
          Time.parse:     6054.6 i/s - 68.74x  (± 0.00) slower

