$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       294.940M i/100ms
Function with splat arguments
                         1.892k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.198B (± 2.8%) i/s -     16.222B in   5.077126s
Function with splat arguments
                         20.113k (± 8.7%) i/s -    100.276k in   5.033792s

Comparison:
Function with single Array argument: 3197829979.9 i/s
Function with splat arguments:    20112.5 i/s - 158997.07x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   319.995M i/100ms
Sequential Assignment
                       304.240M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.189B (± 2.4%) i/s -     16.000B in   5.020626s
Sequential Assignment
                          3.198B (± 2.4%) i/s -     16.125B in   5.045161s

Comparison:
Sequential Assignment: 3198035891.0 i/s
 Parallel Assignment: 3188678373.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   319.744M i/100ms
       attr_accessor   307.561M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.187B (± 2.5%) i/s -     15.987B in   5.019973s
       attr_accessor      3.213B (± 1.8%) i/s -     16.301B in   5.074904s

Comparison:
       attr_accessor: 3213115033.7 i/s
   getter_and_setter: 3186904733.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    10.409k i/100ms
         respond_to?   323.392M i/100ms
Calculating -------------------------------------
      begin...rescue    101.603k (± 6.6%) i/s -    510.041k in   5.048799s
         respond_to?      3.210B (± 1.9%) i/s -     16.170B in   5.039899s

Comparison:
         respond_to?: 3209544538.2 i/s
      begin...rescue:   101603.0 i/s - 31589.08x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   316.853M i/100ms
             &method   322.673M i/100ms
Calculating -------------------------------------
              normal      3.206B (± 1.5%) i/s -     16.160B in   5.040983s
             &method      3.201B (± 2.6%) i/s -     16.134B in   5.043415s

Comparison:
              normal: 3206392868.2 i/s
             &method: 3201366396.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       192.000  i/100ms
       define_method   155.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          3.394k (±58.8%) i/s -      7.680k in   5.123494s
       define_method     11.304k (±43.8%) i/s -     11.160k in   6.687708s

Comparison:
       define_method:    11303.7 i/s
module_eval with string:     3393.8 i/s - 3.33x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   118.650k i/100ms
       Kernel#format   106.055k i/100ms
            String#%    20.680k i/100ms
Calculating -------------------------------------
         Float#round      1.247M (± 2.4%) i/s -      6.288M in   5.047225s
       Kernel#format      1.045M (± 2.3%) i/s -      5.303M in   5.079254s
            String#%    202.079k (±10.3%) i/s -      1.013M in   5.094598s

Comparison:
         Float#round:  1246655.2 i/s
       Kernel#format:  1044608.2 i/s - 1.19x  (± 0.00) slower
            String#%:   202078.6 i/s - 6.17x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   317.832M i/100ms
          OpenStruct   310.318M i/100ms
Calculating -------------------------------------
                Hash      3.196B (± 2.1%) i/s -     16.209B in   5.073397s
          OpenStruct      3.211B (± 2.1%) i/s -     16.137B in   5.028580s

Comparison:
          OpenStruct: 3210519408.8 i/s
                Hash: 3196438647.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   322.260M i/100ms
          OpenStruct     4.429k i/100ms
Calculating -------------------------------------
                Hash      3.156B (± 5.0%) i/s -     15.791B in   5.018643s
          OpenStruct     41.885k (±21.0%) i/s -    199.305k in   5.050735s

Comparison:
                Hash: 3156374133.7 i/s
          OpenStruct:    41884.8 i/s - 75358.46x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   926.125k i/100ms
  ancestors.include?   221.602k i/100ms
Calculating -------------------------------------
  less than or equal      9.742M (± 4.8%) i/s -     49.085M in   5.050420s
  ancestors.include?      2.220M (± 6.6%) i/s -     11.080M in   5.019721s

Comparison:
  less than or equal:  9742043.2 i/s
  ancestors.include?:  2220291.2 i/s - 4.39x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     32.053  (± 3.1%) i/s -    160.000  in   5.000217s
         Kernel loop     32.052  (± 3.1%) i/s -    160.000  in   5.001889s

Comparison:
          While Loop:       32.1 i/s
         Kernel loop:       32.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   320.188M i/100ms
         Array#first   320.852M i/100ms
Calculating -------------------------------------
           Array#[0]      3.210B (± 1.4%) i/s -     16.330B in   5.087464s
         Array#first      3.189B (± 4.2%) i/s -     16.043B in   5.041249s

Comparison:
           Array#[0]: 3210399559.0 i/s
         Array#first: 3189145890.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   318.047M i/100ms
          Array#last   322.760M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.213B (± 1.4%) i/s -     16.220B in   5.048789s
          Array#last      3.216B (± 1.6%) i/s -     16.138B in   5.019264s

Comparison:
          Array#last: 3216089681.0 i/s
          Array#[-1]: 3213437289.4 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   899.801k i/100ms
Calculating -------------------------------------
                find     13.726  (± 0.0%) i/s -     69.000  in   5.030297s
             bsearch      9.130M (± 2.2%) i/s -     45.890M in   5.028674s

Comparison:
             bsearch:  9130239.3 i/s
                find:       13.7 i/s - 665170.08x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.255  (± 0.0%) i/s -      2.000  in   7.830609s
        Array#insert      1.400  (± 0.0%) i/s -      7.000  in   5.000586s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.3 i/s - 5.48x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   319.922M i/100ms
          Array#size   309.515M i/100ms
         Array#count   323.533M i/100ms
Calculating -------------------------------------
        Array#length      3.182B (± 3.3%) i/s -     15.996B in   5.033029s
          Array#size      3.201B (± 2.3%) i/s -     16.095B in   5.031360s
         Array#count      3.194B (± 2.6%) i/s -     16.177B in   5.068643s

Comparison:
          Array#size: 3200668835.6 i/s
         Array#count: 3193738321.7 i/s - same-ish: difference falls within error
        Array#length: 3182005609.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    33.986k i/100ms
        Array#sample     3.814M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    354.590k (± 2.5%) i/s -      1.801M in   5.083304s
        Array#sample     38.078M (± 1.3%) i/s -    190.684M in   5.008613s

Comparison:
        Array#sample: 38077575.3 i/s
 Array#shuffle.first:   354590.3 i/s - 107.38x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   924.000  i/100ms
          Date.parse   591.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     19.563k (±33.9%) i/s -     87.780k in   5.026757s
          Date.parse      8.304k (±24.2%) i/s -     39.006k in   5.004771s

Comparison:
        Date.iso8601:    19563.2 i/s
          Date.parse:     8304.4 i/s - 2.36x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   324.389k i/100ms
           Array#map     1.692M i/100ms
Calculating -------------------------------------
   Array#each + push      3.740M (± 4.9%) i/s -     18.815M in   5.043557s
           Array#map     17.372M (± 7.9%) i/s -     86.297M in   5.007532s

Comparison:
           Array#map: 17372423.3 i/s
   Array#each + push:  3740179.9 i/s - 4.64x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    12.130M i/100ms
               #each    35.148M i/100ms
Calculating -------------------------------------
            For loop    123.787M (± 1.9%) i/s -    618.655M in   4.999673s
               #each    351.793M (± 1.6%) i/s -      1.793B in   5.096820s

Comparison:
               #each: 351793064.2 i/s
            For loop: 123787473.2 i/s - 2.84x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.401M i/100ms
     each_with_index     1.934M i/100ms
Calculating -------------------------------------
          While Loop     14.168M (± 2.1%) i/s -     71.465M in   5.046557s
     each_with_index     19.356M (± 1.4%) i/s -     98.653M in   5.097853s

Comparison:
     each_with_index: 19355643.3 i/s
          While Loop: 14167530.1 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   310.553k i/100ms
      inject to_proc   313.065k i/100ms
        inject block   312.506k i/100ms
Calculating -------------------------------------
       inject symbol      3.112M (± 2.0%) i/s -     15.838M in   5.091053s
      inject to_proc      3.119M (± 1.5%) i/s -     15.653M in   5.020145s
        inject block      3.110M (± 2.2%) i/s -     15.625M in   5.026547s

Comparison:
      inject to_proc:  3118894.1 i/s
       inject symbol:  3112345.8 i/s - same-ish: difference falls within error
        inject block:  3110129.6 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    21.358k i/100ms
   Array#map.flatten    24.779k i/100ms
      Array#flat_map    56.892k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    265.218k (± 5.6%) i/s -      1.324M in   5.009033s
   Array#map.flatten    264.755k (± 7.0%) i/s -      1.338M in   5.088866s
      Array#flat_map    565.946k (± 5.9%) i/s -      2.845M in   5.049974s

Comparison:
      Array#flat_map:   565946.1 i/s
Array#map.flatten(1):   265218.0 i/s - 2.13x  (± 0.00) slower
   Array#map.flatten:   264755.3 i/s - 2.14x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   311.679k i/100ms
  Array#reverse_each     2.365M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.130M (± 6.4%) i/s -     15.584M in   5.005960s
  Array#reverse_each     23.826M (± 2.1%) i/s -    120.627M in   5.064803s

Comparison:
  Array#reverse_each: 23826467.4 i/s
  Array#reverse.each:  3130405.9 i/s - 7.61x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       972.675k i/100ms
   Enumerable#detect     4.121M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.359M (± 8.1%) i/s -    205.234M in  20.003187s
   Enumerable#detect     45.116M (± 5.0%) i/s -    902.396M in  20.058561s

Comparison:
   Enumerable#detect: 45115695.6 i/s
Enumerable#select.first: 10358994.1 i/s - 4.36x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       309.075k i/100ms
Enumerable#select.last
                       514.247k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.155M (± 4.3%) i/s -     15.763M in   5.007022s
Enumerable#select.last
                          5.455M (± 2.6%) i/s -     27.769M in   5.094382s

Comparison:
Enumerable#select.last:  5454804.9 i/s
Enumerable#reverse.detect:  3154502.6 i/s - 1.73x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.873k i/100ms
  Enumerable#sort_by     2.755k i/100ms
     Enumerable#sort     2.756k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         39.580k (±11.2%) i/s -    193.650k in   5.003858s
  Enumerable#sort_by     36.137k (±26.6%) i/s -    151.525k in   5.000834s
     Enumerable#sort     40.433k (±27.7%) i/s -    187.408k in   5.015175s

Comparison:
     Enumerable#sort:    40433.1 i/s
Enumerable#sort_by (Symbol#to_proc):    39580.2 i/s - same-ish: difference falls within error
  Enumerable#sort_by:    36137.4 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   830.715k i/100ms
Enumerable#sort_by...first
                         9.401k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      8.202M (± 5.3%) i/s -     41.536M in   5.084186s
Enumerable#sort_by...first
                        100.761k (± 5.8%) i/s -    507.654k in   5.063259s

Comparison:
   Enumerable#min_by:  8202387.2 i/s
Enumerable#sort_by...first:   100761.4 i/s - 81.40x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   632.882k i/100ms
            Hash#dup   712.473k i/100ms
Calculating -------------------------------------
              Hash[]      7.411M (±10.7%) i/s -     36.707M in   5.012860s
            Hash#dup      7.655M (± 9.8%) i/s -     38.474M in   5.092487s

Comparison:
            Hash#dup:  7655394.6 i/s
              Hash[]:  7411374.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   315.807M i/100ms
  Hash#fetch, symbol   313.488M i/100ms
     Hash#[], string    19.022M i/100ms
  Hash#fetch, string    20.206M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.206B (± 2.2%) i/s -     16.106B in   5.026927s
  Hash#fetch, symbol      3.200B (± 2.4%) i/s -     16.301B in   5.096530s
     Hash#[], string    188.173M (± 2.5%) i/s -    951.085M in   5.057567s
  Hash#fetch, string    200.418M (± 2.3%) i/s -      1.010B in   5.043739s

Comparison:
     Hash#[], symbol: 3205593022.1 i/s
  Hash#fetch, symbol: 3200458375.1 i/s - same-ish: difference falls within error
  Hash#fetch, string: 200418416.7 i/s - 15.99x  (± 0.00) slower
     Hash#[], string: 188173216.9 i/s - 17.04x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    92.166M i/100ms
             Hash#[]    91.564M i/100ms
          Hash#[] ||    92.209M i/100ms
          Hash#[] &&    91.455M i/100ms
          Hash#fetch    92.326M i/100ms
 Hash#fetch fallback    92.339M i/100ms
Calculating -------------------------------------
            Hash#dig    918.806M (± 1.7%) i/s -      4.608B in   5.017123s
             Hash#[]    919.273M (± 1.7%) i/s -      4.670B in   5.081432s
          Hash#[] ||    918.709M (± 1.6%) i/s -      4.610B in   5.019834s
          Hash#[] &&    915.421M (± 3.0%) i/s -      4.573B in   5.000635s
          Hash#fetch    919.117M (± 1.6%) i/s -      4.616B in   5.023897s
 Hash#fetch fallback    923.247M (± 0.3%) i/s -      4.617B in   5.000800s

Comparison:
 Hash#fetch fallback: 923247297.4 i/s
             Hash#[]: 919273134.9 i/s - same-ish: difference falls within error
          Hash#fetch: 919117031.2 i/s - same-ish: difference falls within error
            Hash#dig: 918805549.9 i/s - same-ish: difference falls within error
          Hash#[] ||: 918708512.9 i/s - same-ish: difference falls within error
          Hash#[] &&: 915421270.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   321.886M i/100ms
  Hash#fetch + block   311.087M i/100ms
    Hash#fetch + arg   323.075M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.208B (± 2.2%) i/s -     16.094B in   5.019932s
  Hash#fetch + block      3.203B (± 3.5%) i/s -     16.177B in   5.057368s
    Hash#fetch + arg      3.193B (± 2.6%) i/s -     16.154B in   5.062452s

Comparison:
  Hash#fetch + const: 3207764130.9 i/s
  Hash#fetch + block: 3203250899.6 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 3193122568.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    20.623k i/100ms
         sort + to_h    13.880k i/100ms
Calculating -------------------------------------
      sort_by + to_h    531.923k (± 6.9%) i/s -      2.660M in   5.029860s
         sort + to_h    121.479k (± 2.4%) i/s -    610.720k in   5.030551s

Comparison:
      sort_by + to_h:   531923.0 i/s
         sort + to_h:   121478.8 i/s - 4.38x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   218.463k i/100ms
       Hash#each_key   223.804k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.281M (±10.8%) i/s -     11.142M in   5.001571s
       Hash#each_key      2.245M (± 2.9%) i/s -     11.414M in   5.087637s

Comparison:
      Hash#keys.each:  2281130.1 i/s
       Hash#each_key:  2245403.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   298.000  i/100ms
           Hash#key?     3.275M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      3.318k (±12.9%) i/s -     16.390k in   5.058526s
           Hash#key?     32.805M (± 1.8%) i/s -    167.006M in   5.092547s

Comparison:
           Hash#key?: 32805177.5 i/s
  Hash#keys.include?:     3318.1 i/s - 9886.64x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    58.679k i/100ms
            Hash#[]=    58.421k i/100ms
Calculating -------------------------------------
         Hash#merge!    634.416k (± 5.8%) i/s -      3.169M in   5.012051s
            Hash#[]=    611.843k (± 6.8%) i/s -      3.096M in   5.094774s

Comparison:
         Hash#merge!:   634415.7 i/s
            Hash#[]=:   611843.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        35.916k i/100ms
      Hash#merge({})    19.907k i/100ms
 Hash#dup#merge!({})    31.619k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        392.908k (±11.0%) i/s -      1.939M in   5.012738s
      Hash#merge({})    200.008k (± 8.7%) i/s -    995.350k in   5.021640s
 Hash#dup#merge!({})    319.240k (± 7.9%) i/s -      1.613M in   5.096500s

Comparison:
{}#merge!(Hash) do end:   392908.1 i/s
 Hash#dup#merge!({}):   319240.2 i/s - 1.23x  (± 0.00) slower
      Hash#merge({}):   200007.9 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   315.984M i/100ms
          Hash#merge   321.756M i/100ms
Calculating -------------------------------------
        Hash#**other      3.189B (± 2.4%) i/s -     16.115B in   5.056878s
          Hash#merge      3.199B (± 2.3%) i/s -     16.088B in   5.031376s

Comparison:
          Hash#merge: 3199307843.9 i/s
        Hash#**other: 3188760320.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.021k i/100ms
         Hash#merge!    59.300k i/100ms
Calculating -------------------------------------
          Hash#merge     12.070k (±12.7%) i/s -     59.218k in   5.023363s
         Hash#merge!    596.116k (± 8.9%) i/s -      2.965M in   5.029433s

Comparison:
         Hash#merge!:   596116.1 i/s
          Hash#merge:    12069.6 i/s - 49.39x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.441M i/100ms
Array#each               1.451M i/100ms
Array#each_w/_object     1.423M i/100ms
Hash#select-include      2.435M i/100ms
Calculating -------------------------------------
Hash#native-slice        16.919M (± 6.2%) i/s -     85.010M in   5.051926s
Array#each               14.974M (± 5.8%) i/s -     75.464M in   5.064202s
Array#each_w/_object     14.549M (± 6.2%) i/s -     72.583M in   5.018244s
Hash#select-include      23.537M (± 7.2%) i/s -    119.335M in   5.102980s

Comparison:
Hash#select-include : 23537413.0 i/s
Hash#native-slice   : 16919002.7 i/s - 1.39x  (± 0.00) slower
Array#each          : 14973642.1 i/s - 1.57x  (± 0.00) slower
Array#each_w/_object: 14549084.4 i/s - 1.62x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   305.000  i/100ms
         Hash#value?     1.105k i/100ms
Calculating -------------------------------------
Hash#values.include?      3.380k (±10.1%) i/s -     16.775k in   5.034703s
         Hash#value?     11.103k (± 1.5%) i/s -     56.355k in   5.076780s

Comparison:
         Hash#value?:    11103.0 i/s
Hash#values.include?:     3380.1 i/s - 3.28x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   320.926M i/100ms
                send   314.816M i/100ms
      method_missing   321.945M i/100ms
Calculating -------------------------------------
                call      3.175B (± 5.6%) i/s -     16.046B in   5.078404s
                send      3.209B (± 2.3%) i/s -     16.056B in   5.006891s
      method_missing      3.202B (± 2.2%) i/s -     16.097B in   5.029908s

Comparison:
                send: 3208528060.3 i/s
      method_missing: 3201939773.8 i/s - same-ish: difference falls within error
                call: 3175170035.8 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    58.394k i/100ms
      Symbol#to_proc    68.744k i/100ms
Calculating -------------------------------------
               Block    743.435k (±13.6%) i/s -      3.679M in   5.047077s
      Symbol#to_proc    780.394k (± 9.1%) i/s -      3.918M in   5.077772s

Comparison:
      Symbol#to_proc:   780394.2 i/s
               Block:   743435.4 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   322.511M i/100ms
       block + yield   321.888M i/100ms
        unused block   321.577M i/100ms
               yield   323.243M i/100ms
Calculating -------------------------------------
          block.call      3.214B (± 1.6%) i/s -     16.126B in   5.018025s
       block + yield      3.225B (± 0.9%) i/s -     16.416B in   5.090268s
        unused block      3.203B (± 1.9%) i/s -     16.079B in   5.021803s
               yield      3.207B (± 2.2%) i/s -     16.162B in   5.042496s

Comparison:
       block + yield: 3225341093.1 i/s
          block.call: 3214380919.6 i/s - same-ish: difference falls within error
               yield: 3206877333.1 i/s - same-ish: difference falls within error
        unused block: 3202953700.2 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     5.370k i/100ms
      range#include?   190.000  i/100ms
       range#member?   231.000  i/100ms
       plain compare     8.146k i/100ms
Calculating -------------------------------------
        range#cover?     61.560k (±24.2%) i/s -    284.610k in   5.078019s
      range#include?      2.540k (±30.2%) i/s -     11.210k in   5.008905s
       range#member?      2.163k (±32.0%) i/s -      9.471k in   5.038828s
       plain compare     91.505k (±22.5%) i/s -    423.592k in   5.028429s

Comparison:
       plain compare:    91504.8 i/s
        range#cover?:    61560.3 i/s - same-ish: difference falls within error
      range#include?:     2539.9 i/s - 36.03x  (± 0.00) slower
       range#member?:     2162.7 i/s - 42.31x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    13.461M i/100ms
           String#=~    13.345M i/100ms
          Regexp#===    13.080M i/100ms
        String#match    10.752M i/100ms
Calculating -------------------------------------
       String#match?    135.401M (± 1.9%) i/s -    686.523M in   5.072343s
           String#=~    133.170M (± 1.7%) i/s -    667.238M in   5.012003s
          Regexp#===    132.574M (± 4.0%) i/s -    667.071M in   5.042606s
        String#match    107.136M (± 1.5%) i/s -    537.600M in   5.019183s

Comparison:
       String#match?: 135400501.9 i/s
           String#=~: 133170348.6 i/s - same-ish: difference falls within error
          Regexp#===: 132573705.7 i/s - same-ish: difference falls within error
        String#match: 107135970.7 i/s - 1.26x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.457M i/100ms
      String#casecmp     4.608M i/100ms
Calculating -------------------------------------
String#downcase + ==     29.758M (± 7.8%) i/s -    149.881M in   5.076407s
      String#casecmp     46.611M (± 3.5%) i/s -    234.996M in   5.048145s

Comparison:
      String#casecmp: 46611380.9 i/s
String#downcase + ==: 29758015.9 i/s - 1.57x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     9.112M i/100ms
       String#concat    10.884M i/100ms
       String#append    10.842M i/100ms
         "foo" "bar"   323.536M i/100ms
  "#{'foo'}#{'bar'}"   323.161M i/100ms
Calculating -------------------------------------
            String#+    108.436M (± 4.2%) i/s -    546.749M in   5.051944s
       String#concat    106.679M (± 6.1%) i/s -    533.330M in   5.024490s
       String#append    107.362M (± 6.4%) i/s -    542.096M in   5.082281s
         "foo" "bar"      3.218B (± 0.8%) i/s -     16.177B in   5.027017s
  "#{'foo'}#{'bar'}"      3.204B (± 3.3%) i/s -     16.158B in   5.049873s

Comparison:
         "foo" "bar": 3218190140.3 i/s
  "#{'foo'}#{'bar'}": 3203617482.6 i/s - same-ish: difference falls within error
            String#+: 108435997.8 i/s - 29.68x  (± 0.00) slower
       String#append: 107362157.2 i/s - 29.98x  (± 0.00) slower
       String#concat: 106678715.7 i/s - 30.17x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   322.019M i/100ms
          String#dup   310.320M i/100ms
Calculating -------------------------------------
           String#+@      3.187B (± 2.5%) i/s -     16.101B in   5.055679s
          String#dup      3.210B (± 1.2%) i/s -     16.137B in   5.027499s

Comparison:
          String#dup: 3210158024.4 i/s
           String#+@: 3186910972.3 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.383M i/100ms
       String#match?     1.638M i/100ms
    String#end_with?    10.771M i/100ms
Calculating -------------------------------------
           String#=~     14.106M (± 2.3%) i/s -     70.518M in   5.001895s
       String#match?     16.338M (± 1.6%) i/s -     81.915M in   5.015254s
    String#end_with?    106.847M (± 2.1%) i/s -    538.547M in   5.042603s

Comparison:
    String#end_with?: 106847061.2 i/s
       String#match?: 16337696.6 i/s - 6.54x  (± 0.00) slower
           String#=~: 14106373.2 i/s - 7.57x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   753.044k i/100ms
          String#sub   915.921k i/100ms
String#dup["string"]=
                        10.093M i/100ms
Calculating -------------------------------------
         String#gsub      8.438M (± 8.2%) i/s -     42.170M in   5.041729s
          String#sub      9.877M (± 8.0%) i/s -     49.460M in   5.040856s
String#dup["string"]=
                        100.135M (± 2.9%) i/s -    504.670M in   5.044638s

Comparison:
String#dup["string"]=: 100134705.8 i/s
          String#sub:  9877291.8 i/s - 10.14x  (± 0.00) slower
         String#gsub:  8438166.8 i/s - 11.87x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   178.577k i/100ms
           String#tr   172.569k i/100ms
Calculating -------------------------------------
         String#gsub      4.227M (±10.1%) i/s -     20.894M in   5.003187s
           String#tr      1.773M (± 4.3%) i/s -      8.974M in   5.072238s

Comparison:
         String#gsub:  4226983.6 i/s
           String#tr:  1772847.5 i/s - 2.38x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   317.559M i/100ms
         With Freeze   321.906M i/100ms
Calculating -------------------------------------
      Without Freeze      3.213B (± 1.7%) i/s -     16.196B in   5.042487s
         With Freeze      3.209B (± 2.1%) i/s -     16.095B in   5.018128s

Comparison:
      Without Freeze: 3212784632.2 i/s
         With Freeze: 3208908808.3 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     5.846k i/100ms
      String#squeeze    77.853k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    150.897k (±13.4%) i/s -    736.596k in   5.019730s
      String#squeeze    784.319k (± 4.5%) i/s -      3.971M in   5.073416s

Comparison:
      String#squeeze:   784318.9 i/s
 String#gsub/regex+/:   150897.1 i/s - 5.20x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     4.205M i/100ms
       String#match?     6.336M i/100ms
  String#start_with?    12.787M i/100ms
Calculating -------------------------------------
           String#=~     44.183M (± 3.5%) i/s -    222.871M in   5.050914s
       String#match?     62.788M (± 3.7%) i/s -    316.777M in   5.053360s
  String#start_with?    128.220M (± 2.1%) i/s -    652.144M in   5.088520s

Comparison:
  String#start_with?: 128219989.0 i/s
       String#match?: 62788059.7 i/s - 2.04x  (± 0.00) slower
           String#=~: 44182957.8 i/s - 2.90x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   187.210k i/100ms
    String#[0, n] ==   312.358k i/100ms
   String#[RANGE] ==   446.268k i/100ms
   String#[0...n] ==   280.034k i/100ms
Calculating -------------------------------------
  String#start_with?      7.046M (± 2.3%) i/s -     35.383M in   5.025499s
    String#[0, n] ==      3.207M (± 3.7%) i/s -     16.243M in   5.073286s
   String#[RANGE] ==      4.467M (± 2.6%) i/s -     22.760M in   5.099141s
   String#[0...n] ==      2.733M (± 6.0%) i/s -     13.722M in   5.045661s

Comparison:
  String#start_with?:  7045505.9 i/s
   String#[RANGE] ==:  4466709.7 i/s - 1.58x  (± 0.00) slower
    String#[0, n] ==:  3206864.4 i/s - 2.20x  (± 0.00) slower
   String#[0...n] ==:  2733462.9 i/s - 2.58x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     9.910M i/100ms
 String#sub!'string'   965.042k i/100ms
String#gsub!'string'   804.950k i/100ms
  String#[/regexp/]=     2.584M i/100ms
 String#sub!/regexp/     1.273M i/100ms
String#gsub!/regexp/   812.447k i/100ms
Calculating -------------------------------------
  String#['string']=    100.024M (± 2.9%) i/s -    505.414M in   5.057460s
 String#sub!'string'      9.895M (±16.5%) i/s -     46.322M in   5.047605s
String#gsub!'string'      9.000M (± 8.4%) i/s -     45.077M in   5.059521s
  String#[/regexp/]=     25.751M (± 3.0%) i/s -    129.216M in   5.022464s
 String#sub!/regexp/     13.447M (±11.3%) i/s -     67.487M in   5.092951s
String#gsub!/regexp/      8.387M (± 8.0%) i/s -     42.247M in   5.086097s

Comparison:
  String#['string']=: 100023875.3 i/s
  String#[/regexp/]=: 25751380.3 i/s - 3.88x  (± 0.00) slower
 String#sub!/regexp/: 13447217.6 i/s - 7.44x  (± 0.00) slower
 String#sub!'string':  9894859.0 i/s - 10.11x  (± 0.00) slower
String#gsub!'string':  9000358.0 i/s - 11.11x  (± 0.00) slower
String#gsub!/regexp/:  8386685.8 i/s - 11.93x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     2.886M i/100ms
        String#chomp     5.599M i/100ms
String#delete_suffix    14.371M i/100ms
Calculating -------------------------------------
          String#sub     29.664M (± 3.8%) i/s -    150.074M in   5.066980s
        String#chomp     56.311M (± 2.0%) i/s -    285.574M in   5.073625s
String#delete_suffix    153.719M (± 8.7%) i/s -    761.659M in   5.000519s

Comparison:
String#delete_suffix: 153719340.2 i/s
        String#chomp: 56311205.8 i/s - 2.73x  (± 0.00) slower
          String#sub: 29663743.4 i/s - 5.18x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   320.310M i/100ms
          String#sub    13.534M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.210B (± 2.0%) i/s -     16.336B in   5.090717s
          String#sub    137.481M (± 1.4%) i/s -    690.227M in   5.021498s

Comparison:
String#delete_prefix: 3210276952.0 i/s
          String#sub: 137480837.0 i/s - 23.35x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.884M i/100ms
    String#unpack[0]     1.799M i/100ms
Calculating -------------------------------------
      String#unpack1     18.859M (± 6.6%) i/s -     94.211M in   5.030353s
    String#unpack[0]     18.870M (± 6.1%) i/s -     95.335M in   5.079155s

Comparison:
    String#unpack[0]: 18869655.2 i/s
      String#unpack1: 18859467.9 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.0.0-dev-b7cb7fec, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    29.931k i/100ms
          Time.parse   290.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    500.099k (±17.5%) i/s -      2.365M in   5.004170s
          Time.parse      6.512k (±15.7%) i/s -     31.320k in   5.030237s

Comparison:
        Time.iso8601:   500099.3 i/s
          Time.parse:     6512.5 i/s - 76.79x  (± 0.00) slower

