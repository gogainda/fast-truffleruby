$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       315.479M i/100ms
Function with splat arguments
                         1.875k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.166B (± 2.4%) i/s -     16.089B in   5.085861s
Function with splat arguments
                         20.121k (± 9.0%) i/s -    101.250k in   5.083505s

Comparison:
Function with single Array argument: 3165557358.0 i/s
Function with splat arguments:    20120.5 i/s - 157329.82x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   315.729M i/100ms
Sequential Assignment
                       319.756M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.204B (± 1.4%) i/s -     16.102B in   5.026052s
Sequential Assignment
                          3.220B (± 0.8%) i/s -     16.308B in   5.064921s

Comparison:
Sequential Assignment: 3219930070.1 i/s
 Parallel Assignment: 3204364518.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   311.734M i/100ms
       attr_accessor   311.625M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.195B (± 2.1%) i/s -     16.210B in   5.076289s
       attr_accessor      3.219B (± 1.1%) i/s -     16.204B in   5.034032s

Comparison:
       attr_accessor: 3219398936.2 i/s
   getter_and_setter: 3194819659.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    11.334k i/100ms
         respond_to?   322.823M i/100ms
Calculating -------------------------------------
      begin...rescue    103.549k (± 6.1%) i/s -    521.364k in   5.059836s
         respond_to?      3.078B (± 1.9%) i/s -     15.496B in   5.036753s

Comparison:
         respond_to?: 3077625841.3 i/s
      begin...rescue:   103548.9 i/s - 29721.47x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   304.248M i/100ms
             &method   309.829M i/100ms
Calculating -------------------------------------
              normal      3.205B (± 1.6%) i/s -     16.125B in   5.032131s
             &method      3.196B (± 5.5%) i/s -     16.111B in   5.065490s

Comparison:
              normal: 3205308643.4 i/s
             &method: 3196178413.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       141.000  i/100ms
       define_method   256.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          4.037k (±50.6%) i/s -      8.037k in   5.021370s
       define_method     10.413k (±55.0%) i/s -     10.496k in   5.058458s

Comparison:
       define_method:    10413.0 i/s
module_eval with string:     4037.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   118.133k i/100ms
       Kernel#format   105.611k i/100ms
            String#%    20.787k i/100ms
Calculating -------------------------------------
         Float#round      1.249M (± 2.3%) i/s -      6.261M in   5.015549s
       Kernel#format      1.056M (± 1.8%) i/s -      5.281M in   5.003752s
            String#%    209.039k (± 9.3%) i/s -      1.039M in   5.036208s

Comparison:
         Float#round:  1249040.0 i/s
       Kernel#format:  1055675.9 i/s - 1.18x  (± 0.00) slower
            String#%:   209038.6 i/s - 5.98x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   316.141M i/100ms
          OpenStruct   316.435M i/100ms
Calculating -------------------------------------
                Hash      3.165B (± 4.4%) i/s -     15.807B in   5.006236s
          OpenStruct      3.204B (± 2.4%) i/s -     16.138B in   5.039279s

Comparison:
          OpenStruct: 3204448210.5 i/s
                Hash: 3164709973.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   316.645M i/100ms
          OpenStruct     4.482k i/100ms
Calculating -------------------------------------
                Hash      3.113B (± 5.1%) i/s -     15.516B in   4.999660s
          OpenStruct     28.088k (±13.9%) i/s -    138.942k in   5.053930s

Comparison:
                Hash: 3113421104.9 i/s
          OpenStruct:    28088.1 i/s - 110844.75x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   902.543k i/100ms
  ancestors.include?   227.982k i/100ms
Calculating -------------------------------------
  less than or equal     10.304M (± 6.0%) i/s -     51.445M in   5.010502s
  ancestors.include?      2.215M (± 7.0%) i/s -     11.171M in   5.077398s

Comparison:
  less than or equal: 10304336.3 i/s
  ancestors.include?:  2215186.3 i/s - 4.65x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     32.037  (± 3.1%) i/s -    160.000  in   5.004771s
         Kernel loop     32.017  (± 3.1%) i/s -    160.000  in   5.010142s

Comparison:
          While Loop:       32.0 i/s
         Kernel loop:       32.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   314.339M i/100ms
         Array#first   313.988M i/100ms
Calculating -------------------------------------
           Array#[0]      3.193B (± 2.6%) i/s -     16.031B in   5.024109s
         Array#first      3.215B (± 1.8%) i/s -     16.327B in   5.080476s

Comparison:
         Array#first: 3214917489.9 i/s
           Array#[0]: 3193191280.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   317.177M i/100ms
          Array#last   311.933M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.040B (± 7.0%) i/s -     15.225B in   5.041455s
          Array#last      3.115B (± 2.6%) i/s -     15.597B in   5.011407s

Comparison:
          Array#last: 3114506412.5 i/s
          Array#[-1]: 3040163542.7 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   902.055k i/100ms
Calculating -------------------------------------
                find     13.740  (± 0.0%) i/s -     69.000  in   5.024495s
             bsearch      9.120M (± 1.9%) i/s -     46.005M in   5.046023s

Comparison:
             bsearch:  9120324.8 i/s
                find:       13.7 i/s - 663776.69x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.254  (± 0.0%) i/s -      2.000  in   7.860405s
        Array#insert      1.391  (± 0.0%) i/s -      7.000  in   5.031669s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.3 i/s - 5.47x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   322.041M i/100ms
          Array#size   322.130M i/100ms
         Array#count   323.541M i/100ms
Calculating -------------------------------------
        Array#length      3.195B (± 2.3%) i/s -     16.102B in   5.042346s
          Array#size      3.212B (± 1.8%) i/s -     16.106B in   5.015695s
         Array#count      3.132B (± 3.6%) i/s -     15.853B in   5.068105s

Comparison:
          Array#size: 3212382398.8 i/s
        Array#length: 3195174831.9 i/s - same-ish: difference falls within error
         Array#count: 3132419181.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    35.414k i/100ms
        Array#sample     3.815M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    355.164k (± 2.6%) i/s -      1.806M in   5.088789s
        Array#sample     38.110M (± 1.8%) i/s -    190.752M in   5.007051s

Comparison:
        Array#sample: 38110435.9 i/s
 Array#shuffle.first:   355163.9 i/s - 107.30x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   987.000  i/100ms
          Date.parse   579.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     19.250k (±32.8%) i/s -     86.856k in   5.022572s
          Date.parse      8.069k (±22.4%) i/s -     38.214k in   5.022043s

Comparison:
        Date.iso8601:    19249.6 i/s
          Date.parse:     8068.8 i/s - 2.39x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   311.684k i/100ms
           Array#map     1.697M i/100ms
Calculating -------------------------------------
   Array#each + push      3.738M (± 4.4%) i/s -     18.701M in   5.013633s
           Array#map     16.982M (± 8.5%) i/s -     84.874M in   5.044091s

Comparison:
           Array#map: 16981790.7 i/s
   Array#each + push:  3737838.2 i/s - 4.54x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    10.359M i/100ms
               #each    35.141M i/100ms
Calculating -------------------------------------
            For loop    123.785M (± 1.2%) i/s -    621.523M in   5.021705s
               #each    354.348M (± 0.5%) i/s -      1.792B in   5.057910s

Comparison:
               #each: 354348358.7 i/s
            For loop: 123785130.4 i/s - 2.86x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.422M i/100ms
     each_with_index     1.950M i/100ms
Calculating -------------------------------------
          While Loop     14.539M (± 3.5%) i/s -     73.921M in   5.090481s
     each_with_index     17.620M (± 1.9%) i/s -     89.713M in   5.093126s

Comparison:
     each_with_index: 17620442.5 i/s
          While Loop: 14538700.2 i/s - 1.21x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   298.466k i/100ms
      inject to_proc   313.285k i/100ms
        inject block   310.178k i/100ms
Calculating -------------------------------------
       inject symbol      3.114M (± 2.0%) i/s -     15.819M in   5.081246s
      inject to_proc      3.116M (± 1.8%) i/s -     15.664M in   5.029239s
        inject block      3.117M (± 1.5%) i/s -     15.819M in   5.075842s

Comparison:
        inject block:  3117257.6 i/s
      inject to_proc:  3115732.5 i/s - same-ish: difference falls within error
       inject symbol:  3114482.2 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    22.070k i/100ms
   Array#map.flatten    25.884k i/100ms
      Array#flat_map    57.088k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    254.743k (± 8.5%) i/s -      1.280M in   5.070846s
   Array#map.flatten    259.964k (± 5.5%) i/s -      1.320M in   5.093807s
      Array#flat_map    569.850k (± 4.4%) i/s -      2.854M in   5.020572s

Comparison:
      Array#flat_map:   569850.0 i/s
   Array#map.flatten:   259963.8 i/s - 2.19x  (± 0.00) slower
Array#map.flatten(1):   254743.0 i/s - 2.24x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   288.020k i/100ms
  Array#reverse_each     2.365M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.122M (± 6.0%) i/s -     15.553M in   5.008323s
  Array#reverse_each     23.637M (± 4.2%) i/s -    118.264M in   5.013958s

Comparison:
  Array#reverse_each: 23636565.7 i/s
  Array#reverse.each:  3121723.4 i/s - 7.57x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       980.094k i/100ms
   Enumerable#detect     4.063M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.420M (± 7.8%) i/s -    206.800M in  20.016521s
   Enumerable#detect     45.952M (± 1.6%) i/s -    922.212M in  20.075595s

Comparison:
   Enumerable#detect: 45951545.5 i/s
Enumerable#select.first: 10419529.3 i/s - 4.41x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       294.272k i/100ms
Enumerable#select.last
                       506.554k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.132M (± 5.8%) i/s -     15.596M in   5.004109s
Enumerable#select.last
                          5.325M (± 6.2%) i/s -     26.847M in   5.069180s

Comparison:
Enumerable#select.last:  5324905.6 i/s
Enumerable#reverse.detect:  3131843.4 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.423k i/100ms
  Enumerable#sort_by     3.935k i/100ms
     Enumerable#sort     4.657k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         20.246k (±32.4%) i/s -     82.152k in   5.132078s
  Enumerable#sort_by     28.371k (±35.6%) i/s -    121.985k in   5.058063s
     Enumerable#sort     47.001k (±22.3%) i/s -    223.536k in   5.067490s

Comparison:
     Enumerable#sort:    47001.5 i/s
  Enumerable#sort_by:    28370.7 i/s - same-ish: difference falls within error
Enumerable#sort_by (Symbol#to_proc):    20245.8 i/s - 2.32x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   816.813k i/100ms
Enumerable#sort_by...first
                         8.272k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      8.272M (± 2.3%) i/s -     41.657M in   5.038890s
Enumerable#sort_by...first
                         99.937k (± 5.9%) i/s -    504.592k in   5.075934s

Comparison:
   Enumerable#min_by:  8272132.0 i/s
Enumerable#sort_by...first:    99936.9 i/s - 82.77x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   576.624k i/100ms
            Hash#dup   734.838k i/100ms
Calculating -------------------------------------
              Hash[]      7.131M (±12.3%) i/s -     35.174M in   5.030508s
            Hash#dup      7.472M (± 9.2%) i/s -     37.477M in   5.065770s

Comparison:
            Hash#dup:  7472495.6 i/s
              Hash[]:  7130550.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   309.600M i/100ms
  Hash#fetch, symbol   317.809M i/100ms
     Hash#[], string    18.953M i/100ms
  Hash#fetch, string    20.199M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.199B (± 2.9%) i/s -     16.099B in   5.037523s
  Hash#fetch, symbol      3.208B (± 2.1%) i/s -     16.208B in   5.055375s
     Hash#[], string    187.199M (± 6.0%) i/s -    947.632M in   5.089347s
  Hash#fetch, string    201.488M (± 1.0%) i/s -      1.010B in   5.012954s

Comparison:
  Hash#fetch, symbol: 3207701793.8 i/s
     Hash#[], symbol: 3198786066.7 i/s - same-ish: difference falls within error
  Hash#fetch, string: 201488269.6 i/s - 15.92x  (± 0.00) slower
     Hash#[], string: 187198916.8 i/s - 17.14x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    91.812M i/100ms
             Hash#[]    91.657M i/100ms
          Hash#[] ||    91.909M i/100ms
          Hash#[] &&    91.083M i/100ms
          Hash#fetch    91.752M i/100ms
 Hash#fetch fallback    91.990M i/100ms
Calculating -------------------------------------
            Hash#dig    917.562M (± 1.9%) i/s -      4.591B in   5.005059s
             Hash#[]    918.877M (± 1.7%) i/s -      4.675B in   5.088685s
          Hash#[] ||    916.283M (± 2.0%) i/s -      4.595B in   5.017490s
          Hash#[] &&    916.736M (± 1.9%) i/s -      4.645B in   5.069010s
          Hash#fetch    921.951M (± 0.5%) i/s -      4.679B in   5.075670s
 Hash#fetch fallback    922.274M (± 0.6%) i/s -      4.691B in   5.087030s

Comparison:
 Hash#fetch fallback: 922274261.9 i/s
          Hash#fetch: 921950569.6 i/s - same-ish: difference falls within error
             Hash#[]: 918877179.1 i/s - same-ish: difference falls within error
            Hash#dig: 917562365.2 i/s - same-ish: difference falls within error
          Hash#[] &&: 916736213.7 i/s - same-ish: difference falls within error
          Hash#[] ||: 916282805.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   321.728M i/100ms
  Hash#fetch + block   322.116M i/100ms
    Hash#fetch + arg   319.353M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.193B (± 1.3%) i/s -     16.086B in   5.039223s
  Hash#fetch + block      3.154B (± 1.4%) i/s -     15.784B in   5.005147s
    Hash#fetch + arg      3.092B (± 2.4%) i/s -     15.648B in   5.063154s

Comparison:
  Hash#fetch + const: 3192800153.2 i/s
  Hash#fetch + block: 3154111040.0 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 3092468704.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    34.312k i/100ms
         sort + to_h     4.512k i/100ms
Calculating -------------------------------------
      sort_by + to_h    406.675k (±17.9%) i/s -      1.990M in   5.083677s
         sort + to_h    203.999k (±11.9%) i/s -    997.152k in   4.998071s

Comparison:
      sort_by + to_h:   406675.2 i/s
         sort + to_h:   203998.5 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   201.468k i/100ms
       Hash#each_key   214.000k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.295M (±10.1%) i/s -     11.282M in   5.018518s
       Hash#each_key      2.052M (± 3.1%) i/s -     10.272M in   5.010215s

Comparison:
      Hash#keys.each:  2295346.1 i/s
       Hash#each_key:  2052224.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   301.000  i/100ms
           Hash#key?    15.465M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      3.033k (±11.8%) i/s -     15.050k in   5.064628s
           Hash#key?    150.173M (± 6.8%) i/s -    757.775M in   5.076046s

Comparison:
           Hash#key?: 150173419.9 i/s
  Hash#keys.include?:     3032.7 i/s - 49518.45x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    56.141k i/100ms
            Hash#[]=    60.109k i/100ms
Calculating -------------------------------------
         Hash#merge!    625.558k (± 7.9%) i/s -      3.144M in   5.067837s
            Hash#[]=    613.723k (± 8.0%) i/s -      3.066M in   5.038619s

Comparison:
         Hash#merge!:   625558.1 i/s
            Hash#[]=:   613723.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        26.001k i/100ms
      Hash#merge({})    20.143k i/100ms
 Hash#dup#merge!({})    29.820k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        386.469k (±12.9%) i/s -      1.898M in   5.010991s
      Hash#merge({})    199.697k (±10.0%) i/s -    987.007k in   5.006345s
 Hash#dup#merge!({})    311.859k (± 8.6%) i/s -      1.551M in   5.020345s

Comparison:
{}#merge!(Hash) do end:   386469.5 i/s
 Hash#dup#merge!({}):   311858.7 i/s - same-ish: difference falls within error
      Hash#merge({}):   199696.7 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   323.105M i/100ms
          Hash#merge   314.847M i/100ms
Calculating -------------------------------------
        Hash#**other      3.166B (± 3.1%) i/s -     15.832B in   5.005999s
          Hash#merge      3.205B (± 2.5%) i/s -     16.057B in   5.014110s

Comparison:
          Hash#merge: 3204501502.6 i/s
        Hash#**other: 3165989737.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.088k i/100ms
         Hash#merge!    61.233k i/100ms
Calculating -------------------------------------
          Hash#merge     12.041k (± 8.4%) i/s -     59.840k in   5.006675s
         Hash#merge!    629.523k (± 7.9%) i/s -      3.184M in   5.091849s

Comparison:
         Hash#merge!:   629522.6 i/s
          Hash#merge:    12041.2 i/s - 52.28x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.632M i/100ms
Array#each               1.536M i/100ms
Array#each_w/_object     1.559M i/100ms
Hash#select-include      2.402M i/100ms
Calculating -------------------------------------
Hash#native-slice        16.778M (± 7.2%) i/s -     84.868M in   5.090416s
Array#each               15.505M (± 6.4%) i/s -     78.345M in   5.082948s
Array#each_w/_object     15.042M (± 7.9%) i/s -     74.849M in   5.022542s
Hash#select-include      24.105M (± 6.9%) i/s -    120.107M in   5.016663s

Comparison:
Hash#select-include : 24105253.5 i/s
Hash#native-slice   : 16777701.0 i/s - 1.44x  (± 0.00) slower
Array#each          : 15504974.9 i/s - 1.55x  (± 0.00) slower
Array#each_w/_object: 15041661.3 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   268.000  i/100ms
         Hash#value?    29.277k i/100ms
Calculating -------------------------------------
Hash#values.include?      3.579k (±12.0%) i/s -     17.688k in   5.069554s
         Hash#value?    307.541k (± 0.2%) i/s -      1.552M in   5.045459s

Comparison:
         Hash#value?:   307541.0 i/s
Hash#values.include?:     3579.2 i/s - 85.92x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   311.477M i/100ms
                send   296.355M i/100ms
      method_missing   310.722M i/100ms
Calculating -------------------------------------
                call      3.147B (± 3.4%) i/s -     15.885B in   5.054267s
                send      3.213B (± 2.1%) i/s -     16.300B in   5.076067s
      method_missing      3.202B (± 2.6%) i/s -     16.158B in   5.049322s

Comparison:
                send: 3212665339.9 i/s
      method_missing: 3202335385.8 i/s - same-ish: difference falls within error
                call: 3146786653.3 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    65.302k i/100ms
      Symbol#to_proc    69.733k i/100ms
Calculating -------------------------------------
               Block    702.493k (± 9.7%) i/s -      3.526M in   5.082932s
      Symbol#to_proc    675.812k (±11.9%) i/s -      3.347M in   5.026731s

Comparison:
               Block:   702493.0 i/s
      Symbol#to_proc:   675812.0 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   315.352M i/100ms
       block + yield   307.229M i/100ms
        unused block   322.624M i/100ms
               yield   317.937M i/100ms
Calculating -------------------------------------
          block.call      3.195B (± 3.2%) i/s -     16.083B in   5.040074s
       block + yield      3.130B (± 3.5%) i/s -     15.669B in   5.012325s
        unused block      3.154B (± 4.1%) i/s -     15.809B in   5.021325s
               yield      3.084B (± 5.1%) i/s -     15.579B in   5.068366s

Comparison:
          block.call: 3194880051.4 i/s
        unused block: 3154358439.7 i/s - same-ish: difference falls within error
       block + yield: 3130081586.9 i/s - same-ish: difference falls within error
               yield: 3083573318.6 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     3.987k i/100ms
      range#include?   154.000  i/100ms
       range#member?   200.000  i/100ms
       plain compare     9.407k i/100ms
Calculating -------------------------------------
        range#cover?     60.704k (±27.1%) i/s -    271.116k in   5.065207s
      range#include?      2.547k (±28.5%) i/s -     11.242k in   5.033280s
       range#member?      2.459k (±30.1%) i/s -     11.000k in   5.027474s
       plain compare     92.843k (±27.0%) i/s -    413.908k in   5.000419s

Comparison:
       plain compare:    92842.9 i/s
        range#cover?:    60704.0 i/s - same-ish: difference falls within error
      range#include?:     2547.0 i/s - 36.45x  (± 0.00) slower
       range#member?:     2458.9 i/s - 37.76x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    13.417M i/100ms
           String#=~    13.336M i/100ms
          Regexp#===    13.306M i/100ms
        String#match    10.761M i/100ms
Calculating -------------------------------------
       String#match?    134.255M (± 2.4%) i/s -    670.864M in   5.000056s
           String#=~    132.842M (± 2.0%) i/s -    666.820M in   5.021834s
          Regexp#===    132.434M (± 3.6%) i/s -    665.305M in   5.031579s
        String#match    106.282M (± 1.9%) i/s -    538.041M in   5.064247s

Comparison:
       String#match?: 134254671.1 i/s
           String#=~: 132841912.2 i/s - same-ish: difference falls within error
          Regexp#===: 132433934.5 i/s - same-ish: difference falls within error
        String#match: 106281755.1 i/s - 1.26x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.409M i/100ms
      String#casecmp     4.605M i/100ms
Calculating -------------------------------------
String#downcase + ==     29.800M (± 6.6%) i/s -    149.371M in   5.044499s
      String#casecmp     46.063M (± 3.6%) i/s -    230.246M in   5.005254s

Comparison:
      String#casecmp: 46062827.7 i/s
String#downcase + ==: 29799818.1 i/s - 1.55x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     9.859M i/100ms
       String#concat    10.091M i/100ms
       String#append    10.654M i/100ms
         "foo" "bar"   318.514M i/100ms
  "#{'foo'}#{'bar'}"   318.375M i/100ms
Calculating -------------------------------------
            String#+    106.859M (± 6.8%) i/s -    532.386M in   5.013478s
       String#concat    106.526M (± 6.9%) i/s -    534.832M in   5.053504s
       String#append    106.167M (± 7.9%) i/s -    532.693M in   5.067347s
         "foo" "bar"      3.200B (± 2.5%) i/s -     16.244B in   5.079055s
  "#{'foo'}#{'bar'}"      3.194B (± 4.2%) i/s -     16.237B in   5.095055s

Comparison:
         "foo" "bar": 3200387720.2 i/s
  "#{'foo'}#{'bar'}": 3193679815.7 i/s - same-ish: difference falls within error
            String#+: 106859313.5 i/s - 29.95x  (± 0.00) slower
       String#concat: 106526183.7 i/s - 30.04x  (± 0.00) slower
       String#append: 106167329.5 i/s - 30.14x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   307.349M i/100ms
          String#dup   321.251M i/100ms
Calculating -------------------------------------
           String#+@      3.176B (± 1.9%) i/s -     15.982B in   5.034369s
          String#dup      3.176B (± 1.2%) i/s -     16.063B in   5.058732s

Comparison:
           String#+@: 3175781668.4 i/s
          String#dup: 3175683887.4 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.395M i/100ms
       String#match?     1.659M i/100ms
    String#end_with?    11.144M i/100ms
Calculating -------------------------------------
           String#=~     13.980M (± 6.5%) i/s -     69.749M in   5.022653s
       String#match?     16.220M (± 2.7%) i/s -     81.305M in   5.016595s
    String#end_with?    109.955M (± 3.6%) i/s -    557.206M in   5.075119s

Comparison:
    String#end_with?: 109954582.7 i/s
       String#match?: 16219712.3 i/s - 6.78x  (± 0.00) slower
           String#=~: 13980416.1 i/s - 7.86x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   439.572k i/100ms
          String#sub   895.548k i/100ms
String#dup["string"]=
                        10.004M i/100ms
Calculating -------------------------------------
         String#gsub      8.305M (±11.4%) i/s -     40.880M in   5.006963s
          String#sub      9.672M (± 8.5%) i/s -     48.360M in   5.043689s
String#dup["string"]=
                        100.068M (± 4.1%) i/s -    500.207M in   5.010253s

Comparison:
String#dup["string"]=: 100068239.2 i/s
          String#sub:  9671756.3 i/s - 10.35x  (± 0.00) slower
         String#gsub:  8304598.3 i/s - 12.05x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   188.431k i/100ms
           String#tr   163.653k i/100ms
Calculating -------------------------------------
         String#gsub      3.890M (±10.6%) i/s -     19.220M in   5.018173s
           String#tr      1.749M (± 4.6%) i/s -      8.837M in   5.063194s

Comparison:
         String#gsub:  3889874.8 i/s
           String#tr:  1749314.4 i/s - 2.22x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   322.191M i/100ms
         With Freeze   322.288M i/100ms
Calculating -------------------------------------
      Without Freeze      3.191B (± 2.5%) i/s -     16.110B in   5.052489s
         With Freeze      3.177B (± 3.1%) i/s -     16.114B in   5.077546s

Comparison:
      Without Freeze: 3190607361.7 i/s
         With Freeze: 3177051650.0 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     9.583k i/100ms
      String#squeeze    78.219k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    158.438k (± 8.3%) i/s -    785.806k in   5.012077s
      String#squeeze    791.182k (± 2.8%) i/s -      3.989M in   5.046093s

Comparison:
      String#squeeze:   791182.3 i/s
 String#gsub/regex+/:   158437.8 i/s - 4.99x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     4.359M i/100ms
       String#match?     6.278M i/100ms
  String#start_with?    12.893M i/100ms
Calculating -------------------------------------
           String#=~     44.225M (± 2.5%) i/s -    222.310M in   5.030091s
       String#match?     62.919M (± 1.8%) i/s -    320.173M in   5.090441s
  String#start_with?    128.373M (± 2.4%) i/s -    644.670M in   5.025098s

Comparison:
  String#start_with?: 128373048.8 i/s
       String#match?: 62919486.1 i/s - 2.04x  (± 0.00) slower
           String#=~: 44225311.2 i/s - 2.90x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    65.849k i/100ms
    String#[0, n] ==   315.542k i/100ms
   String#[RANGE] ==   447.237k i/100ms
   String#[0...n] ==   280.178k i/100ms
Calculating -------------------------------------
  String#start_with?      7.054M (± 2.4%) i/s -     35.229M in   4.999626s
    String#[0, n] ==      3.120M (± 4.0%) i/s -     15.777M in   5.064896s
   String#[RANGE] ==      4.347M (± 6.4%) i/s -     21.915M in   5.069749s
   String#[0...n] ==      2.679M (± 7.2%) i/s -     13.449M in   5.055837s

Comparison:
  String#start_with?:  7053626.2 i/s
   String#[RANGE] ==:  4346879.2 i/s - 1.62x  (± 0.00) slower
    String#[0, n] ==:  3120395.5 i/s - 2.26x  (± 0.00) slower
   String#[0...n] ==:  2679462.9 i/s - 2.63x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     9.962M i/100ms
 String#sub!'string'   977.248k i/100ms
String#gsub!'string'   836.372k i/100ms
  String#[/regexp/]=     2.582M i/100ms
 String#sub!/regexp/     1.411M i/100ms
String#gsub!/regexp/   829.642k i/100ms
Calculating -------------------------------------
  String#['string']=    100.242M (± 3.0%) i/s -    508.062M in   5.073978s
 String#sub!'string'      9.641M (±18.5%) i/s -     44.953M in   5.071560s
String#gsub!'string'      8.969M (± 6.8%) i/s -     45.164M in   5.065786s
  String#[/regexp/]=     26.520M (± 4.7%) i/s -    134.246M in   5.074826s
 String#sub!/regexp/     13.367M (± 9.7%) i/s -     66.332M in   5.014409s
String#gsub!/regexp/      8.475M (± 8.4%) i/s -     42.312M in   5.043119s

Comparison:
  String#['string']=: 100242211.1 i/s
  String#[/regexp/]=: 26519882.5 i/s - 3.78x  (± 0.00) slower
 String#sub!/regexp/: 13366638.0 i/s - 7.50x  (± 0.00) slower
 String#sub!'string':  9640907.2 i/s - 10.40x  (± 0.00) slower
String#gsub!'string':  8969204.3 i/s - 11.18x  (± 0.00) slower
String#gsub!/regexp/:  8475055.6 i/s - 11.83x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.903M i/100ms
        String#chomp     5.697M i/100ms
String#delete_suffix    13.428M i/100ms
Calculating -------------------------------------
          String#sub     29.631M (± 4.4%) i/s -    148.439M in   5.020818s
        String#chomp     56.481M (± 3.9%) i/s -    284.854M in   5.053362s
String#delete_suffix    151.458M (± 9.1%) i/s -    751.948M in   5.018668s

Comparison:
String#delete_suffix: 151457815.6 i/s
        String#chomp: 56481084.7 i/s - 2.68x  (± 0.00) slower
          String#sub: 29631057.4 i/s - 5.11x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   315.459M i/100ms
          String#sub    13.621M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.138B (± 3.0%) i/s -     15.773B in   5.030709s
          String#sub    135.506M (± 4.6%) i/s -    681.027M in   5.039206s

Comparison:
String#delete_prefix: 3138325686.3 i/s
          String#sub: 135506276.6 i/s - 23.16x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.772M i/100ms
    String#unpack[0]     1.801M i/100ms
Calculating -------------------------------------
      String#unpack1     19.139M (± 5.9%) i/s -     95.664M in   5.023621s
    String#unpack[0]     18.654M (± 7.2%) i/s -     93.661M in   5.058428s

Comparison:
      String#unpack1: 19138860.3 i/s
    String#unpack[0]: 18654486.9 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.0.0-dev-4cd14c48, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    38.552k i/100ms
          Time.parse   312.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    519.752k (±22.8%) i/s -      2.352M in   5.004146s
          Time.parse      7.045k (±14.8%) i/s -     34.008k in   5.026838s

Comparison:
        Time.iso8601:   519752.2 i/s
          Time.parse:     7045.4 i/s - 73.77x  (± 0.00) slower

