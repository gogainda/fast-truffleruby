$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       113.215M i/100ms
Function with splat arguments
                         1.208k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.134B (± 0.5%) i/s -      5.774B in   5.092926s
Function with splat arguments
                         13.233k (± 8.1%) i/s -     66.440k in   5.069546s

Comparison:
Function with single Array argument: 1133757148.6 i/s
Function with splat arguments:    13233.4 i/s - 85674.17x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   113.486M i/100ms
Sequential Assignment
                       113.309M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.138B (± 1.4%) i/s -      5.788B in   5.085619s
Sequential Assignment
                          1.134B (± 0.5%) i/s -      5.779B in   5.098093s

Comparison:
 Parallel Assignment: 1138297669.1 i/s
Sequential Assignment: 1133538461.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   113.376M i/100ms
       attr_accessor   113.521M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.136B (± 0.9%) i/s -      5.782B in   5.092067s
       attr_accessor      1.136B (± 0.7%) i/s -      5.790B in   5.098080s

Comparison:
       attr_accessor: 1135698450.1 i/s
   getter_and_setter: 1135612079.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     9.847k i/100ms
         respond_to?   113.268M i/100ms
Calculating -------------------------------------
      begin...rescue     72.471k (± 2.6%) i/s -    364.339k in   5.030991s
         respond_to?      1.137B (± 1.3%) i/s -      5.777B in   5.082000s

Comparison:
         respond_to?: 1136875367.3 i/s
      begin...rescue:    72470.7 i/s - 15687.37x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   113.418M i/100ms
             &method   113.498M i/100ms
Calculating -------------------------------------
              normal      1.136B (± 0.6%) i/s -      5.784B in   5.093999s
             &method      1.134B (± 0.4%) i/s -      5.675B in   5.006022s

Comparison:
              normal: 1135564807.7 i/s
             &method: 1133633013.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       120.000  i/100ms
       define_method   140.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.449k (±57.4%) i/s -      6.120k in   5.033670s
       define_method      6.516k (±50.8%) i/s -      7.980k in   6.494267s

Comparison:
       define_method:     6515.9 i/s
module_eval with string:     2449.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    83.252k i/100ms
       Kernel#format    74.172k i/100ms
            String#%    73.905k i/100ms
Calculating -------------------------------------
         Float#round    896.826k (± 2.3%) i/s -      4.496M in   5.015617s
       Kernel#format    742.579k (± 2.0%) i/s -      3.783M in   5.096214s
            String#%    743.522k (± 2.4%) i/s -      3.769M in   5.072370s

Comparison:
         Float#round:   896826.3 i/s
            String#%:   743522.5 i/s - 1.21x  (± 0.00) slower
       Kernel#format:   742578.7 i/s - 1.21x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.347M i/100ms
          OpenStruct   113.267M i/100ms
Calculating -------------------------------------
                Hash      1.134B (± 0.5%) i/s -      5.781B in   5.098898s
          OpenStruct      1.134B (± 0.4%) i/s -      5.777B in   5.093926s

Comparison:
          OpenStruct: 1134040582.6 i/s
                Hash: 1133752263.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.317M i/100ms
          OpenStruct     3.306k i/100ms
Calculating -------------------------------------
                Hash      1.132B (± 0.5%) i/s -      5.666B in   5.004059s
          OpenStruct     34.487k (±11.4%) i/s -    171.912k in   5.075078s

Comparison:
                Hash: 1132276418.4 i/s
          OpenStruct:    34487.3 i/s - 32831.72x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   808.140k i/100ms
  ancestors.include?   172.472k i/100ms
Calculating -------------------------------------
  less than or equal      8.754M (± 3.9%) i/s -     44.448M in   5.085700s
  ancestors.include?      1.820M (± 2.8%) i/s -      9.141M in   5.025434s

Comparison:
  less than or equal:  8753935.8 i/s
  ancestors.include?:  1820489.1 i/s - 4.81x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     11.343  (± 0.0%) i/s -     57.000  in   5.025259s
         Kernel loop     11.348  (± 0.0%) i/s -     57.000  in   5.022901s

Comparison:
         Kernel loop:       11.3 i/s
          While Loop:       11.3 i/s - 1.00x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   113.728M i/100ms
         Array#first   113.219M i/100ms
Calculating -------------------------------------
           Array#[0]      1.134B (± 0.8%) i/s -      5.686B in   5.013376s
         Array#first      1.137B (± 1.0%) i/s -      5.774B in   5.079952s

Comparison:
         Array#first: 1136770107.4 i/s
           Array#[0]: 1134323869.4 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   113.465M i/100ms
          Array#last   113.330M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.133B (± 0.4%) i/s -      5.673B in   5.006986s
          Array#last      1.134B (± 0.5%) i/s -      5.780B in   5.097621s

Comparison:
          Array#last: 1133861761.5 i/s
          Array#[-1]: 1133086242.7 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   659.409k i/100ms
Calculating -------------------------------------
                find      4.730  (± 0.0%) i/s -     24.000  in   5.074114s
             bsearch      6.566M (± 1.5%) i/s -     32.970M in   5.022872s

Comparison:
             bsearch:  6565714.1 i/s
                find:        4.7 i/s - 1388132.32x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.067  (± 0.0%) i/s -      1.000  in  14.832367s
        Array#insert      1.028  (± 0.0%) i/s -      6.000  in   5.837343s

Comparison:
        Array#insert:        1.0 i/s
       Array#unshift:        0.1 i/s - 15.25x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   113.435M i/100ms
          Array#size   113.208M i/100ms
         Array#count   113.897M i/100ms
Calculating -------------------------------------
        Array#length      1.138B (± 1.0%) i/s -      5.785B in   5.084305s
          Array#size      1.143B (± 1.4%) i/s -      5.774B in   5.053958s
         Array#count      1.150B (± 1.5%) i/s -      5.809B in   5.052529s

Comparison:
         Array#count: 1149939162.7 i/s
          Array#size: 1142609249.7 i/s - same-ish: difference falls within error
        Array#length: 1137966217.8 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    22.647k i/100ms
        Array#sample     2.678M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    244.332k (± 2.2%) i/s -      1.223M in   5.007741s
        Array#sample     26.731M (± 0.2%) i/s -    133.914M in   5.009644s

Comparison:
        Array#sample: 26731354.1 i/s
 Array#shuffle.first:   244331.6 i/s - 109.41x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601     2.085k i/100ms
          Date.parse   734.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     56.977k (±35.0%) i/s -    233.520k in   4.998654s
          Date.parse     26.657k (±32.6%) i/s -    107.898k in   5.027540s

Comparison:
        Date.iso8601:    56977.1 i/s
          Date.parse:    26657.3 i/s - 2.14x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   224.688k i/100ms
           Array#map   986.638k i/100ms
Calculating -------------------------------------
   Array#each + push      2.327M (± 4.9%) i/s -     11.684M in   5.033059s
           Array#map     10.603M (± 3.5%) i/s -     53.278M in   5.031416s

Comparison:
           Array#map: 10602911.7 i/s
   Array#each + push:  2327145.4 i/s - 4.56x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     8.574M i/100ms
               #each    24.898M i/100ms
Calculating -------------------------------------
            For loop     85.793M (± 0.1%) i/s -    437.261M in   5.096726s
               #each    248.784M (± 0.3%) i/s -      1.245B in   5.003966s

Comparison:
               #each: 248783905.2 i/s
            For loop: 85792546.9 i/s - 2.90x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   821.651k i/100ms
     each_with_index     1.012M i/100ms
Calculating -------------------------------------
          While Loop      8.218M (± 0.0%) i/s -     41.904M in   5.099381s
     each_with_index     10.117M (± 0.0%) i/s -     51.594M in   5.099862s

Comparison:
     each_with_index: 10116785.4 i/s
          While Loop:  8217508.8 i/s - 1.23x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   157.415k i/100ms
      inject to_proc   159.473k i/100ms
        inject block   159.704k i/100ms
Calculating -------------------------------------
       inject symbol      1.575M (± 0.1%) i/s -      8.028M in   5.097071s
      inject to_proc      1.591M (± 0.4%) i/s -      7.974M in   5.010861s
        inject block      1.590M (± 0.1%) i/s -      7.985M in   5.023409s

Comparison:
      inject to_proc:  1591296.2 i/s
        inject block:  1589598.3 i/s - same-ish: difference falls within error
       inject symbol:  1575055.9 i/s - 1.01x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    16.793k i/100ms
   Array#map.flatten    16.800k i/100ms
      Array#flat_map    43.452k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    183.968k (± 4.5%) i/s -    923.615k in   5.031044s
   Array#map.flatten    185.158k (± 5.4%) i/s -    924.000k in   5.005915s
      Array#flat_map    445.418k (± 3.2%) i/s -      2.260M in   5.078260s

Comparison:
      Array#flat_map:   445417.9 i/s
   Array#map.flatten:   185157.9 i/s - 2.41x  (± 0.00) slower
Array#map.flatten(1):   183968.5 i/s - 2.42x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   185.004k i/100ms
  Array#reverse_each     1.495M i/100ms
Calculating -------------------------------------
  Array#reverse.each      2.149M (± 3.4%) i/s -     10.915M in   5.084225s
  Array#reverse_each     14.937M (± 0.1%) i/s -     74.742M in   5.003679s

Comparison:
  Array#reverse_each: 14937358.1 i/s
  Array#reverse.each:  2149370.5 i/s - 6.95x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       684.678k i/100ms
   Enumerable#detect     2.688M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          6.889M (± 6.9%) i/s -    136.936M in  20.018491s
   Enumerable#detect     26.862M (± 0.3%) i/s -    537.683M in  20.016641s

Comparison:
   Enumerable#detect: 26861975.7 i/s
Enumerable#select.first:  6889102.1 i/s - 3.90x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       187.318k i/100ms
Enumerable#select.last
                       376.075k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.168M (± 3.4%) i/s -     10.864M in   5.017013s
Enumerable#select.last
                          4.004M (± 2.2%) i/s -     20.308M in   5.074864s

Comparison:
Enumerable#select.last:  4003678.0 i/s
Enumerable#reverse.detect:  2168124.4 i/s - 1.85x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.510k i/100ms
  Enumerable#sort_by     2.617k i/100ms
     Enumerable#sort     3.137k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         21.407k (±26.0%) i/s -     95.380k in   5.028839s
  Enumerable#sort_by     25.730k (±14.4%) i/s -    122.999k in   5.024168s
     Enumerable#sort     36.159k (± 1.9%) i/s -    181.946k in   5.033777s

Comparison:
     Enumerable#sort:    36159.2 i/s
  Enumerable#sort_by:    25730.1 i/s - 1.41x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    21407.1 i/s - 1.69x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   530.648k i/100ms
Enumerable#sort_by...first
                         5.890k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      5.307M (± 0.1%) i/s -     27.063M in   5.099035s
Enumerable#sort_by...first
                         64.671k (± 2.5%) i/s -    323.950k in   5.012659s

Comparison:
   Enumerable#min_by:  5307485.3 i/s
Enumerable#sort_by...first:    64670.7 i/s - 82.07x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   343.992k i/100ms
            Hash#dup   386.894k i/100ms
Calculating -------------------------------------
              Hash[]      3.985M (± 8.2%) i/s -     19.952M in   5.040086s
            Hash#dup      4.230M (± 7.9%) i/s -     21.279M in   5.074177s

Comparison:
            Hash#dup:  4229510.6 i/s
              Hash[]:  3984817.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   113.623M i/100ms
  Hash#fetch, symbol   113.290M i/100ms
     Hash#[], string    15.660M i/100ms
  Hash#fetch, string    13.633M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.144B (± 1.5%) i/s -      5.795B in   5.067432s
  Hash#fetch, symbol      1.145B (± 1.4%) i/s -      5.778B in   5.045011s
     Hash#[], string    157.992M (± 0.7%) i/s -    798.643M in   5.055204s
  Hash#fetch, string    137.622M (± 0.6%) i/s -    695.296M in   5.052433s

Comparison:
  Hash#fetch, symbol: 1145479726.2 i/s
     Hash#[], symbol: 1143794309.4 i/s - same-ish: difference falls within error
     Hash#[], string: 157992031.9 i/s - 7.25x  (± 0.00) slower
  Hash#fetch, string: 137621727.2 i/s - 8.32x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    49.776M i/100ms
             Hash#[]    49.775M i/100ms
          Hash#[] ||    49.790M i/100ms
          Hash#[] &&    49.796M i/100ms
          Hash#fetch    49.796M i/100ms
 Hash#fetch fallback    49.790M i/100ms
Calculating -------------------------------------
            Hash#dig    497.624M (± 0.2%) i/s -      2.489B in   5.001405s
             Hash#[]    497.526M (± 0.4%) i/s -      2.489B in   5.002352s
          Hash#[] ||    497.707M (± 0.2%) i/s -      2.489B in   5.001927s
          Hash#[] &&    497.689M (± 0.2%) i/s -      2.490B in   5.002695s
          Hash#fetch    497.857M (± 0.2%) i/s -      2.490B in   5.001097s
 Hash#fetch fallback    497.853M (± 0.2%) i/s -      2.489B in   5.000457s

Comparison:
          Hash#fetch: 497856512.3 i/s
 Hash#fetch fallback: 497853067.7 i/s - same-ish: difference falls within error
          Hash#[] ||: 497707404.3 i/s - same-ish: difference falls within error
          Hash#[] &&: 497688561.3 i/s - same-ish: difference falls within error
            Hash#dig: 497623741.5 i/s - same-ish: difference falls within error
             Hash#[]: 497525942.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   113.522M i/100ms
  Hash#fetch + block   113.598M i/100ms
    Hash#fetch + arg   113.914M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.135B (± 0.4%) i/s -      5.676B in   5.000256s
  Hash#fetch + block      1.131B (± 0.8%) i/s -      5.680B in   5.021084s
    Hash#fetch + arg      1.136B (± 0.5%) i/s -      5.696B in   5.012218s

Comparison:
    Hash#fetch + arg: 1136390260.1 i/s
  Hash#fetch + const: 1135176209.7 i/s - same-ish: difference falls within error
  Hash#fetch + block: 1131290965.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    23.427k i/100ms
         sort + to_h     4.218k i/100ms
Calculating -------------------------------------
      sort_by + to_h    371.222k (± 6.2%) i/s -      1.851M in   5.006167s
         sort + to_h    150.359k (± 9.8%) i/s -    738.150k in   5.007756s

Comparison:
      sort_by + to_h:   371222.4 i/s
         sort + to_h:   150358.9 i/s - 2.47x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   173.750k i/100ms
       Hash#each_key   174.865k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.498M (±18.7%) i/s -      7.298M in   5.103944s
       Hash#each_key      1.752M (± 2.7%) i/s -      8.918M in   5.092624s

Comparison:
       Hash#each_key:  1752498.2 i/s
      Hash#keys.each:  1498211.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   220.000  i/100ms
           Hash#key?     2.591M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      2.258k (± 9.9%) i/s -     11.220k in   5.034327s
           Hash#key?     25.105M (± 0.2%) i/s -    126.951M in   5.056853s

Comparison:
           Hash#key?: 25104954.9 i/s
  Hash#keys.include?:     2257.7 i/s - 11119.84x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    42.419k i/100ms
            Hash#[]=    42.043k i/100ms
Calculating -------------------------------------
         Hash#merge!    421.528k (± 7.8%) i/s -      2.121M in   5.073951s
            Hash#[]=    420.383k (± 5.0%) i/s -      2.102M in   5.012950s

Comparison:
         Hash#merge!:   421527.5 i/s
            Hash#[]=:   420383.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        26.524k i/100ms
      Hash#merge({})    14.078k i/100ms
 Hash#dup#merge!({})    22.663k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        263.775k (± 9.1%) i/s -      1.326M in   5.081061s
      Hash#merge({})    145.641k (± 8.5%) i/s -    732.056k in   5.066120s
 Hash#dup#merge!({})    245.394k (± 7.5%) i/s -      1.224M in   5.019175s

Comparison:
{}#merge!(Hash) do end:   263774.7 i/s
 Hash#dup#merge!({}):   245394.1 i/s - same-ish: difference falls within error
      Hash#merge({}):   145641.3 i/s - 1.81x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   113.301M i/100ms
          Hash#merge   113.470M i/100ms
Calculating -------------------------------------
        Hash#**other      1.135B (± 0.9%) i/s -      5.778B in   5.089911s
          Hash#merge      1.134B (± 0.5%) i/s -      5.674B in   5.003331s

Comparison:
        Hash#**other: 1135356584.4 i/s
          Hash#merge: 1133981136.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   607.000  i/100ms
         Hash#merge!    40.432k i/100ms
Calculating -------------------------------------
          Hash#merge      6.933k (± 9.5%) i/s -     34.599k in   5.055265s
         Hash#merge!    408.732k (± 6.9%) i/s -      2.062M in   5.069798s

Comparison:
         Hash#merge!:   408732.2 i/s
          Hash#merge:     6932.9 i/s - 58.96x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.345M i/100ms
Array#each               1.295M i/100ms
Array#each_w/_object     1.321M i/100ms
Hash#select-include      1.796M i/100ms
Calculating -------------------------------------
Hash#native-slice        14.986M (± 4.8%) i/s -     75.295M in   5.036177s
Array#each               13.245M (± 2.8%) i/s -     67.360M in   5.089987s
Array#each_w/_object     13.081M (± 4.3%) i/s -     66.038M in   5.058055s
Hash#select-include      18.292M (± 4.2%) i/s -     91.617M in   5.017773s

Comparison:
Hash#select-include : 18292120.6 i/s
Hash#native-slice   : 14986036.5 i/s - 1.22x  (± 0.00) slower
Array#each          : 13244818.9 i/s - 1.38x  (± 0.00) slower
Array#each_w/_object: 13081033.4 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   230.000  i/100ms
         Hash#value?   739.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      2.430k (±10.0%) i/s -     12.190k in   5.089462s
         Hash#value?      7.885k (± 0.3%) i/s -     39.906k in   5.061309s

Comparison:
         Hash#value?:     7884.6 i/s
Hash#values.include?:     2430.3 i/s - 3.24x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   113.325M i/100ms
                send   113.472M i/100ms
      method_missing   113.411M i/100ms
Calculating -------------------------------------
                call      1.135B (± 0.8%) i/s -      5.780B in   5.092902s
                send      1.138B (± 1.2%) i/s -      5.787B in   5.087162s
      method_missing      1.140B (± 1.2%) i/s -      5.784B in   5.073689s

Comparison:
      method_missing: 1140143429.5 i/s
                send: 1137746037.4 i/s - same-ish: difference falls within error
                call: 1134889841.9 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    30.837k i/100ms
      Symbol#to_proc    32.344k i/100ms
Calculating -------------------------------------
               Block    349.454k (± 7.1%) i/s -      1.758M in   5.055833s
      Symbol#to_proc    353.596k (± 8.8%) i/s -      1.779M in   5.089319s

Comparison:
      Symbol#to_proc:   353596.5 i/s
               Block:   349454.0 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   113.287M i/100ms
       block + yield   113.505M i/100ms
        unused block   113.693M i/100ms
               yield   113.378M i/100ms
Calculating -------------------------------------
          block.call      1.136B (± 1.1%) i/s -      5.778B in   5.086735s
       block + yield      1.137B (± 0.9%) i/s -      5.789B in   5.092619s
        unused block      1.135B (± 0.5%) i/s -      5.685B in   5.009121s
               yield      1.134B (± 0.5%) i/s -      5.782B in   5.099395s

Comparison:
       block + yield: 1136788719.6 i/s
          block.call: 1135968239.4 i/s - same-ish: difference falls within error
        unused block: 1134892948.8 i/s - same-ish: difference falls within error
               yield: 1133939519.2 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    20.924k i/100ms
      range#include?   542.000  i/100ms
       range#member?   829.000  i/100ms
       plain compare    31.142k i/100ms
Calculating -------------------------------------
        range#cover?    171.168k (±17.0%) i/s -    836.960k in   5.035893s
      range#include?      9.956k (±29.2%) i/s -     44.986k in   5.007131s
       range#member?      8.861k (±24.5%) i/s -     41.450k in   5.018037s
       plain compare    426.397k (± 3.6%) i/s -      2.149M in   5.046356s

Comparison:
       plain compare:   426397.2 i/s
        range#cover?:   171167.7 i/s - 2.49x  (± 0.00) slower
      range#include?:     9956.0 i/s - 42.83x  (± 0.00) slower
       range#member?:     8860.8 i/s - 48.12x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    10.892M i/100ms
           String#=~    10.269M i/100ms
          Regexp#===    10.117M i/100ms
        String#match     8.301M i/100ms
Calculating -------------------------------------
       String#match?    108.645M (± 0.1%) i/s -    544.578M in   5.012445s
           String#=~    102.653M (± 0.0%) i/s -    513.428M in   5.001570s
          Regexp#===    102.630M (± 0.3%) i/s -    515.980M in   5.027589s
        String#match     84.944M (± 0.0%) i/s -    431.632M in   5.081350s

Comparison:
       String#match?: 108645270.9 i/s
           String#=~: 102653313.4 i/s - 1.06x  (± 0.00) slower
          Regexp#===: 102630436.8 i/s - 1.06x  (± 0.00) slower
        String#match: 84944432.3 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.258M i/100ms
      String#casecmp     3.545M i/100ms
Calculating -------------------------------------
String#downcase + ==     23.135M (± 6.9%) i/s -    115.170M in   5.013206s
      String#casecmp     35.199M (± 4.7%) i/s -    177.259M in   5.046994s

Comparison:
      String#casecmp: 35199324.2 i/s
String#downcase + ==: 23134853.2 i/s - 1.52x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     6.120M i/100ms
       String#concat     6.896M i/100ms
       String#append     7.435M i/100ms
         "foo" "bar"   113.541M i/100ms
  "#{'foo'}#{'bar'}"   113.480M i/100ms
Calculating -------------------------------------
            String#+     75.878M (± 3.3%) i/s -    379.416M in   5.006032s
       String#concat     75.217M (± 3.9%) i/s -    379.272M in   5.050560s
       String#append     75.526M (± 3.5%) i/s -    379.169M in   5.026892s
         "foo" "bar"      1.144B (± 1.5%) i/s -      5.791B in   5.062497s
  "#{'foo'}#{'bar'}"      1.136B (± 0.8%) i/s -      5.787B in   5.094152s

Comparison:
         "foo" "bar": 1144080772.0 i/s
  "#{'foo'}#{'bar'}": 1136167315.8 i/s - same-ish: difference falls within error
            String#+: 75877844.5 i/s - 15.08x  (± 0.00) slower
       String#append: 75526103.0 i/s - 15.15x  (± 0.00) slower
       String#concat: 75216602.6 i/s - 15.21x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   113.445M i/100ms
          String#dup   113.958M i/100ms
Calculating -------------------------------------
           String#+@      1.132B (± 0.4%) i/s -      5.672B in   5.010770s
          String#dup      1.133B (± 0.3%) i/s -      5.698B in   5.027260s

Comparison:
          String#dup: 1133411538.4 i/s
           String#+@: 1132026868.6 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   968.258k i/100ms
       String#match?     1.192M i/100ms
    String#end_with?    10.820M i/100ms
Calculating -------------------------------------
           String#=~      9.370M (± 2.0%) i/s -     47.445M in   5.065507s
       String#match?     11.702M (± 0.1%) i/s -     59.579M in   5.091310s
    String#end_with?    108.120M (± 0.5%) i/s -    540.998M in   5.003803s

Comparison:
    String#end_with?: 108119741.4 i/s
       String#match?: 11702027.0 i/s - 9.24x  (± 0.00) slower
           String#=~:  9370063.6 i/s - 11.54x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   453.117k i/100ms
          String#sub   697.248k i/100ms
String#dup["string"]=
                         7.543M i/100ms
Calculating -------------------------------------
         String#gsub      6.049M (± 8.4%) i/s -     29.906M in   5.001505s
          String#sub      6.951M (± 9.5%) i/s -     34.862M in   5.076192s
String#dup["string"]=
                         75.382M (± 0.3%) i/s -    377.151M in   5.003266s

Comparison:
String#dup["string"]=: 75381817.9 i/s
          String#sub:  6951319.9 i/s - 10.84x  (± 0.00) slower
         String#gsub:  6048921.9 i/s - 12.46x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   236.251k i/100ms
           String#tr   117.120k i/100ms
Calculating -------------------------------------
         String#gsub      2.807M (± 4.4%) i/s -     14.175M in   5.059749s
           String#tr      1.183M (± 4.5%) i/s -      5.973M in   5.057876s

Comparison:
         String#gsub:  2807051.8 i/s
           String#tr:  1183395.0 i/s - 2.37x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   113.599M i/100ms
         With Freeze   114.035M i/100ms
Calculating -------------------------------------
      Without Freeze      1.134B (± 0.6%) i/s -      5.680B in   5.008184s
         With Freeze      1.133B (± 0.6%) i/s -      5.702B in   5.033487s

Comparison:
      Without Freeze: 1134172305.6 i/s
         With Freeze: 1132805657.5 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     6.494k i/100ms
      String#squeeze    52.613k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     96.375k (±11.9%) i/s -    474.062k in   5.005513s
      String#squeeze    526.177k (± 3.2%) i/s -      2.631M in   5.005181s

Comparison:
      String#squeeze:   526176.7 i/s
 String#gsub/regex+/:    96374.6 i/s - 5.46x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     3.105M i/100ms
       String#match?     5.058M i/100ms
  String#start_with?    10.363M i/100ms
Calculating -------------------------------------
           String#=~     33.833M (± 2.3%) i/s -    170.762M in   5.049811s
       String#match?     50.509M (± 1.2%) i/s -    252.880M in   5.007425s
  String#start_with?    103.165M (± 0.3%) i/s -    518.129M in   5.022380s

Comparison:
  String#start_with?: 103165033.7 i/s
       String#match?: 50508615.2 i/s - 2.04x  (± 0.00) slower
           String#=~: 33833242.1 i/s - 3.05x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   106.232k i/100ms
    String#[0, n] ==   236.030k i/100ms
   String#[RANGE] ==   325.921k i/100ms
   String#[0...n] ==   211.180k i/100ms
Calculating -------------------------------------
  String#start_with?      3.893M (± 0.1%) i/s -     19.547M in   5.021627s
    String#[0, n] ==      2.336M (± 3.6%) i/s -     11.802M in   5.058551s
   String#[RANGE] ==      3.274M (± 2.3%) i/s -     16.622M in   5.079259s
   String#[0...n] ==      2.227M (± 3.2%) i/s -     11.193M in   5.030884s

Comparison:
  String#start_with?:  3892502.8 i/s
   String#[RANGE] ==:  3274300.1 i/s - 1.19x  (± 0.00) slower
    String#[0, n] ==:  2336024.4 i/s - 1.67x  (± 0.00) slower
   String#[0...n] ==:  2227069.0 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     7.541M i/100ms
 String#sub!'string'   703.541k i/100ms
String#gsub!'string'   627.825k i/100ms
  String#[/regexp/]=     1.965M i/100ms
 String#sub!/regexp/   934.610k i/100ms
String#gsub!/regexp/   561.503k i/100ms
Calculating -------------------------------------
  String#['string']=     75.445M (± 0.0%) i/s -    384.614M in   5.097966s
 String#sub!'string'      7.595M (±15.8%) i/s -     35.881M in   5.035097s
String#gsub!'string'      6.547M (± 8.5%) i/s -     32.647M in   5.043047s
  String#[/regexp/]=     20.608M (± 2.9%) i/s -    104.159M in   5.058595s
 String#sub!/regexp/      8.966M (±10.0%) i/s -     44.861M in   5.063555s
String#gsub!/regexp/      5.580M (± 3.4%) i/s -     28.075M in   5.036983s

Comparison:
  String#['string']=: 75444674.2 i/s
  String#[/regexp/]=: 20608296.7 i/s - 3.66x  (± 0.00) slower
 String#sub!/regexp/:  8965994.9 i/s - 8.41x  (± 0.00) slower
 String#sub!'string':  7595291.4 i/s - 9.93x  (± 0.00) slower
String#gsub!'string':  6547259.2 i/s - 11.52x  (± 0.00) slower
String#gsub!/regexp/:  5580478.3 i/s - 13.52x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.373M i/100ms
        String#chomp     4.278M i/100ms
String#delete_suffix     9.473M i/100ms
Calculating -------------------------------------
          String#sub     22.413M (± 5.5%) i/s -    112.547M in   5.039105s
        String#chomp     42.875M (± 0.3%) i/s -    218.169M in   5.088568s
String#delete_suffix    103.168M (± 8.5%) i/s -    511.556M in   5.011937s

Comparison:
String#delete_suffix: 103167694.1 i/s
        String#chomp: 42874738.6 i/s - 2.41x  (± 0.00) slower
          String#sub: 22412529.4 i/s - 4.60x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   113.402M i/100ms
          String#sub    11.011M i/100ms
Calculating -------------------------------------
String#delete_prefix      1.134B (± 0.6%) i/s -      5.784B in   5.098150s
          String#sub    109.780M (± 2.5%) i/s -    550.547M in   5.018664s

Comparison:
String#delete_prefix: 1134480225.6 i/s
          String#sub: 109779810.2 i/s - 10.33x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.556M i/100ms
    String#unpack[0]     1.607M i/100ms
Calculating -------------------------------------
      String#unpack1     15.711M (± 7.1%) i/s -     79.341M in   5.095373s
    String#unpack[0]     15.926M (± 2.8%) i/s -     80.338M in   5.048385s

Comparison:
    String#unpack[0]: 15926021.6 i/s
      String#unpack1: 15710746.2 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.0.0-dev-260d07b7, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    20.099k i/100ms
          Time.parse   312.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    241.599k (±18.4%) i/s -      1.166M in   5.025169s
          Time.parse      9.410k (±27.6%) i/s -     41.496k in   5.013719s

Comparison:
        Time.iso8601:   241599.3 i/s
          Time.parse:     9410.1 i/s - 25.67x  (± 0.00) slower

