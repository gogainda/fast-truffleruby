$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       316.367M i/100ms
Function with splat arguments
                         2.011k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.193B (± 3.0%) i/s -     16.135B in   5.058438s
Function with splat arguments
                         20.920k (± 9.9%) i/s -    104.572k in   5.074999s

Comparison:
Function with single Array argument: 3192999864.5 i/s
Function with splat arguments:    20920.5 i/s - 152625.75x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   322.207M i/100ms
Sequential Assignment
                       322.706M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.205B (± 1.2%) i/s -     16.110B in   5.027751s
Sequential Assignment
                          3.194B (± 2.6%) i/s -     16.135B in   5.056272s

Comparison:
 Parallel Assignment: 3204729260.0 i/s
Sequential Assignment: 3193518659.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   318.627M i/100ms
       attr_accessor   320.593M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.201B (± 2.0%) i/s -     16.250B in   5.079385s
       attr_accessor      3.220B (± 0.9%) i/s -     16.350B in   5.078186s

Comparison:
       attr_accessor: 3219968180.1 i/s
   getter_and_setter: 3200548011.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    12.733k i/100ms
         respond_to?   320.667M i/100ms
Calculating -------------------------------------
      begin...rescue    102.884k (± 7.6%) i/s -    522.053k in   5.114332s
         respond_to?      3.222B (± 0.9%) i/s -     16.354B in   5.075576s

Comparison:
         respond_to?: 3222357206.3 i/s
      begin...rescue:   102884.3 i/s - 31320.20x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   317.375M i/100ms
             &method    18.266M i/100ms
Calculating -------------------------------------
              normal      3.204B (± 2.5%) i/s -     16.186B in   5.055077s
             &method    182.964M (± 2.0%) i/s -    931.564M in   5.093795s

Comparison:
              normal: 3204276738.0 i/s
             &method: 182963889.2 i/s - 17.51x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       127.000  i/100ms
       define_method   146.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          4.292k (±51.4%) i/s -      8.255k in   6.595309s
       define_method     11.409k (±41.5%) i/s -     11.826k in   6.848503s

Comparison:
       define_method:    11408.7 i/s
module_eval with string:     4292.2 i/s - 2.66x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   122.007k i/100ms
       Kernel#format    99.040k i/100ms
            String#%   100.083k i/100ms
Calculating -------------------------------------
         Float#round      1.214M (± 3.8%) i/s -      6.100M in   5.032123s
       Kernel#format    987.240k (± 1.9%) i/s -      4.952M in   5.017848s
            String#%    984.326k (± 2.7%) i/s -      5.004M in   5.087622s

Comparison:
         Float#round:  1214219.0 i/s
       Kernel#format:   987239.7 i/s - 1.23x  (± 0.00) slower
            String#%:   984326.0 i/s - 1.23x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   320.695M i/100ms
          OpenStruct   321.066M i/100ms
Calculating -------------------------------------
                Hash      3.188B (± 2.6%) i/s -     16.035B in   5.033629s
          OpenStruct      3.201B (± 2.5%) i/s -     16.053B in   5.017912s

Comparison:
          OpenStruct: 3201425102.2 i/s
                Hash: 3187797855.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   318.106M i/100ms
          OpenStruct     2.679k i/100ms
Calculating -------------------------------------
                Hash      3.187B (± 2.9%) i/s -     16.223B in   5.095946s
          OpenStruct     47.498k (±12.1%) i/s -    233.073k in   5.022676s

Comparison:
                Hash: 3186646928.3 i/s
          OpenStruct:    47497.9 i/s - 67090.22x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   999.664k i/100ms
  ancestors.include?   214.677k i/100ms
Calculating -------------------------------------
  less than or equal      9.960M (± 5.3%) i/s -     49.983M in   5.038641s
  ancestors.include?      2.145M (± 9.0%) i/s -     10.734M in   5.061717s

Comparison:
  less than or equal:  9960103.3 i/s
  ancestors.include?:  2145002.0 i/s - 4.64x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     32.016  (± 3.1%) i/s -    160.000  in   5.011584s
         Kernel loop     32.014  (± 3.1%) i/s -    160.000  in   5.010916s

Comparison:
          While Loop:       32.0 i/s
         Kernel loop:       32.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   319.310M i/100ms
         Array#first   321.125M i/100ms
Calculating -------------------------------------
           Array#[0]      3.195B (± 2.7%) i/s -     15.966B in   5.001484s
         Array#first      3.215B (± 1.8%) i/s -     16.377B in   5.096201s

Comparison:
         Array#first: 3214757512.2 i/s
           Array#[0]: 3194757303.4 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   309.455M i/100ms
          Array#last   314.283M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.202B (± 2.7%) i/s -     16.092B in   5.028871s
          Array#last      3.196B (± 2.4%) i/s -     16.028B in   5.018618s

Comparison:
          Array#[-1]: 3202403923.8 i/s
          Array#last: 3195706432.4 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   879.768k i/100ms
Calculating -------------------------------------
                find     13.747  (± 0.0%) i/s -     69.000  in   5.020557s
             bsearch      9.228M (± 5.8%) i/s -     46.628M in   5.076954s

Comparison:
             bsearch:  9227643.7 i/s
                find:       13.7 i/s - 671232.35x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.212  (± 0.0%) i/s -      2.000  in   9.425804s
        Array#insert      1.391  (± 0.0%) i/s -      7.000  in   5.031047s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.2 i/s - 6.56x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   318.973M i/100ms
          Array#size   309.395M i/100ms
         Array#count   322.418M i/100ms
Calculating -------------------------------------
        Array#length      3.221B (± 0.6%) i/s -     16.268B in   5.050210s
          Array#size      3.216B (± 2.1%) i/s -     16.089B in   5.005665s
         Array#count      3.211B (± 1.4%) i/s -     16.121B in   5.021246s

Comparison:
        Array#length: 3221273289.8 i/s
          Array#size: 3215683302.4 i/s - same-ish: difference falls within error
         Array#count: 3211180478.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    36.796k i/100ms
        Array#sample     3.860M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    366.593k (± 2.3%) i/s -      1.840M in   5.021574s
        Array#sample     38.619M (± 0.8%) i/s -    196.846M in   5.097463s

Comparison:
        Array#sample: 38619217.7 i/s
 Array#shuffle.first:   366592.7 i/s - 105.35x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   955.000  i/100ms
          Date.parse   686.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     20.176k (±39.7%) i/s -     86.905k in   5.002245s
          Date.parse      8.460k (±21.4%) i/s -     40.474k in   5.065001s

Comparison:
        Date.iso8601:    20175.9 i/s
          Date.parse:     8460.2 i/s - 2.38x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   330.296k i/100ms
           Array#map     1.815M i/100ms
Calculating -------------------------------------
   Array#each + push      3.581M (± 9.2%) i/s -     17.836M in   5.024853s
           Array#map     19.389M (± 8.9%) i/s -     96.213M in   5.012393s

Comparison:
           Array#map: 19388570.6 i/s
   Array#each + push:  3580787.3 i/s - 5.41x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    10.987M i/100ms
               #each    35.824M i/100ms
Calculating -------------------------------------
            For loop    128.938M (± 1.3%) i/s -    648.210M in   5.028248s
               #each    354.709M (± 1.4%) i/s -      1.791B in   5.050879s

Comparison:
               #each: 354708970.0 i/s
            For loop: 128938058.1 i/s - 2.75x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.429M i/100ms
     each_with_index     2.755M i/100ms
Calculating -------------------------------------
          While Loop     14.204M (± 2.5%) i/s -     71.471M in   5.035081s
     each_with_index     27.452M (± 4.3%) i/s -    137.729M in   5.027257s

Comparison:
     each_with_index: 27452330.2 i/s
          While Loop: 14204189.4 i/s - 1.93x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   245.447k i/100ms
      inject to_proc   312.585k i/100ms
        inject block   312.841k i/100ms
Calculating -------------------------------------
       inject symbol      3.120M (± 1.2%) i/s -     15.709M in   5.036373s
      inject to_proc      3.111M (± 2.0%) i/s -     15.629M in   5.026621s
        inject block      3.122M (± 1.1%) i/s -     15.642M in   5.010817s

Comparison:
        inject block:  3122036.5 i/s
       inject symbol:  3119521.2 i/s - same-ish: difference falls within error
      inject to_proc:  3110698.5 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    22.650k i/100ms
   Array#map.flatten    25.570k i/100ms
      Array#flat_map    58.258k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    263.452k (± 7.7%) i/s -      1.314M in   5.023159s
   Array#map.flatten    266.195k (± 6.1%) i/s -      1.330M in   5.013665s
      Array#flat_map    579.239k (± 3.7%) i/s -      2.913M in   5.036063s

Comparison:
      Array#flat_map:   579238.9 i/s
   Array#map.flatten:   266195.1 i/s - 2.18x  (± 0.00) slower
Array#map.flatten(1):   263451.7 i/s - 2.20x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   332.180k i/100ms
  Array#reverse_each     2.355M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.472M (± 6.3%) i/s -     17.273M in   5.002407s
  Array#reverse_each     23.619M (± 3.0%) i/s -    120.111M in   5.089144s

Comparison:
  Array#reverse_each: 23619197.4 i/s
  Array#reverse.each:  3471833.1 i/s - 6.80x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       940.860k i/100ms
   Enumerable#detect     4.689M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.457M (± 7.6%) i/s -    207.930M in  20.041395s
   Enumerable#detect     46.647M (± 2.4%) i/s -    933.076M in  20.016365s

Comparison:
   Enumerable#detect: 46647115.2 i/s
Enumerable#select.first: 10456789.3 i/s - 4.46x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       351.726k i/100ms
Enumerable#select.last
                       520.597k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.474M (± 5.6%) i/s -     17.586M in   5.084270s
Enumerable#select.last
                          5.375M (± 6.3%) i/s -     27.071M in   5.064576s

Comparison:
Enumerable#select.last:  5374790.9 i/s
Enumerable#reverse.detect:  3473807.8 i/s - 1.55x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.866k i/100ms
  Enumerable#sort_by     3.706k i/100ms
     Enumerable#sort     5.062k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         31.938k (±27.7%) i/s -    149.032k in   5.019516s
  Enumerable#sort_by     23.464k (±28.4%) i/s -    100.062k in   5.092205s
     Enumerable#sort     34.803k (±11.5%) i/s -    172.108k in   5.004084s

Comparison:
     Enumerable#sort:    34803.3 i/s
Enumerable#sort_by (Symbol#to_proc):    31937.9 i/s - same-ish: difference falls within error
  Enumerable#sort_by:    23464.2 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   980.667k i/100ms
Enumerable#sort_by...first
                         8.512k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      9.739M (± 4.2%) i/s -     49.033M in   5.045051s
Enumerable#sort_by...first
                        107.223k (± 6.2%) i/s -    536.256k in   5.028778s

Comparison:
   Enumerable#min_by:  9738843.6 i/s
Enumerable#sort_by...first:   107222.6 i/s - 90.83x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   717.691k i/100ms
            Hash#dup   729.054k i/100ms
Calculating -------------------------------------
              Hash[]      7.594M (±12.4%) i/s -     37.320M in   5.004682s
            Hash#dup      7.960M (± 9.2%) i/s -     39.369M in   5.003281s

Comparison:
            Hash#dup:  7959868.6 i/s
              Hash[]:  7594153.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   316.191M i/100ms
  Hash#fetch, symbol   322.917M i/100ms
     Hash#[], string    20.016M i/100ms
  Hash#fetch, string    17.942M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.225B (± 0.4%) i/s -     16.126B in   5.000933s
  Hash#fetch, symbol      3.201B (± 2.7%) i/s -     16.146B in   5.048587s
     Hash#[], string    200.207M (± 2.4%) i/s -      1.001B in   5.002025s
  Hash#fetch, string    178.202M (± 2.2%) i/s -    897.076M in   5.036752s

Comparison:
     Hash#[], symbol: 3224596934.2 i/s
  Hash#fetch, symbol: 3200691058.8 i/s - same-ish: difference falls within error
     Hash#[], string: 200206607.3 i/s - 16.11x  (± 0.00) slower
  Hash#fetch, string: 178202264.5 i/s - 18.10x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    92.278M i/100ms
             Hash#[]    91.292M i/100ms
          Hash#[] ||    92.152M i/100ms
          Hash#[] &&    92.301M i/100ms
          Hash#fetch    91.408M i/100ms
 Hash#fetch fallback    91.625M i/100ms
Calculating -------------------------------------
            Hash#dig    919.045M (± 1.5%) i/s -      4.614B in   5.021484s
             Hash#[]    918.051M (± 1.9%) i/s -      4.656B in   5.073510s
          Hash#[] ||    914.766M (± 2.3%) i/s -      4.608B in   5.039688s
          Hash#[] &&    918.045M (± 1.8%) i/s -      4.615B in   5.028844s
          Hash#fetch    920.478M (± 1.2%) i/s -      4.662B in   5.065339s
 Hash#fetch fallback    922.411M (± 0.6%) i/s -      4.673B in   5.066174s

Comparison:
 Hash#fetch fallback: 922411460.6 i/s
          Hash#fetch: 920478346.6 i/s - same-ish: difference falls within error
            Hash#dig: 919045082.0 i/s - same-ish: difference falls within error
             Hash#[]: 918051104.8 i/s - same-ish: difference falls within error
          Hash#[] &&: 918045298.4 i/s - same-ish: difference falls within error
          Hash#[] ||: 914766412.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   318.480M i/100ms
  Hash#fetch + block   311.719M i/100ms
    Hash#fetch + arg   323.158M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.181B (± 3.3%) i/s -     15.924B in   5.011017s
  Hash#fetch + block      3.202B (± 2.6%) i/s -     16.209B in   5.065466s
    Hash#fetch + arg      3.184B (± 3.2%) i/s -     16.158B in   5.080778s

Comparison:
  Hash#fetch + block: 3202304603.6 i/s
    Hash#fetch + arg: 3183795292.3 i/s - same-ish: difference falls within error
  Hash#fetch + const: 3181446002.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    34.180k i/100ms
         sort + to_h     9.444k i/100ms
Calculating -------------------------------------
      sort_by + to_h    448.834k (±21.8%) i/s -      2.119M in   5.017664s
         sort + to_h    198.367k (±18.2%) i/s -    944.400k in   5.002860s

Comparison:
      sort_by + to_h:   448833.7 i/s
         sort + to_h:   198366.9 i/s - 2.26x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   222.784k i/100ms
       Hash#each_key   240.512k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.325M (±10.9%) i/s -     11.362M in   5.008610s
       Hash#each_key      2.555M (± 6.3%) i/s -     12.988M in   5.110194s

Comparison:
       Hash#each_key:  2555181.6 i/s
      Hash#keys.each:  2325145.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   334.000  i/100ms
           Hash#key?     3.486M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      3.603k (±12.0%) i/s -     17.702k in   5.030887s
           Hash#key?     35.348M (± 1.9%) i/s -    177.773M in   5.031314s

Comparison:
           Hash#key?: 35347521.6 i/s
  Hash#keys.include?:     3602.6 i/s - 9811.80x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    53.252k i/100ms
            Hash#[]=    57.568k i/100ms
Calculating -------------------------------------
         Hash#merge!    573.152k (± 7.3%) i/s -      2.876M in   5.050405s
            Hash#[]=    591.699k (± 7.7%) i/s -      2.936M in   5.000667s

Comparison:
            Hash#[]=:   591699.3 i/s
         Hash#merge!:   573151.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        28.284k i/100ms
      Hash#merge({})    17.502k i/100ms
 Hash#dup#merge!({})    32.765k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        393.872k (±12.6%) i/s -      1.952M in   5.059380s
      Hash#merge({})    198.003k (±10.0%) i/s -    980.112k in   5.012687s
 Hash#dup#merge!({})    319.442k (± 9.7%) i/s -      1.605M in   5.089433s

Comparison:
{}#merge!(Hash) do end:   393871.8 i/s
 Hash#dup#merge!({}):   319442.4 i/s - same-ish: difference falls within error
      Hash#merge({}):   198002.7 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   294.018M i/100ms
          Hash#merge   319.533M i/100ms
Calculating -------------------------------------
        Hash#**other      3.209B (± 1.4%) i/s -     16.171B in   5.040807s
          Hash#merge      3.218B (± 0.8%) i/s -     16.296B in   5.064287s

Comparison:
          Hash#merge: 3218097958.2 i/s
        Hash#**other: 3208672799.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   875.000  i/100ms
         Hash#merge!    55.048k i/100ms
Calculating -------------------------------------
          Hash#merge     12.306k (±13.1%) i/s -     60.375k in   4.999283s
         Hash#merge!    628.377k (± 4.4%) i/s -      3.138M in   5.003469s

Comparison:
         Hash#merge!:   628376.9 i/s
          Hash#merge:    12305.6 i/s - 51.06x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.522M i/100ms
Array#each               1.508M i/100ms
Array#each_w/_object     1.509M i/100ms
Hash#select-include      2.498M i/100ms
Calculating -------------------------------------
Hash#native-slice        18.453M (± 5.9%) i/s -     92.852M in   5.057219s
Array#each               15.442M (± 6.2%) i/s -     76.895M in   5.006180s
Array#each_w/_object     15.530M (± 6.2%) i/s -     78.475M in   5.080212s
Hash#select-include      24.350M (± 6.7%) i/s -    122.424M in   5.057907s

Comparison:
Hash#select-include : 24350404.7 i/s
Hash#native-slice   : 18452597.1 i/s - 1.32x  (± 0.00) slower
Array#each_w/_object: 15529853.9 i/s - 1.57x  (± 0.00) slower
Array#each          : 15441712.1 i/s - 1.58x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   305.000  i/100ms
         Hash#value?   688.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      3.169k (±11.1%) i/s -     15.860k in   5.082373s
         Hash#value?      6.910k (± 1.5%) i/s -     35.088k in   5.079273s

Comparison:
         Hash#value?:     6909.6 i/s
Hash#values.include?:     3168.7 i/s - 2.18x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   314.887M i/100ms
                send   314.324M i/100ms
      method_missing   322.024M i/100ms
Calculating -------------------------------------
                call      3.193B (± 3.5%) i/s -     16.059B in   5.037394s
                send      3.214B (± 2.0%) i/s -     16.345B in   5.087808s
      method_missing      3.204B (± 2.6%) i/s -     16.101B in   5.029641s

Comparison:
                send: 3213973472.5 i/s
      method_missing: 3203667530.7 i/s - same-ish: difference falls within error
                call: 3192530294.6 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    63.898k i/100ms
      Symbol#to_proc    64.069k i/100ms
Calculating -------------------------------------
               Block    795.196k (±12.1%) i/s -      3.898M in   4.999231s
      Symbol#to_proc    791.244k (±15.4%) i/s -      3.908M in   5.069859s

Comparison:
               Block:   795195.6 i/s
      Symbol#to_proc:   791243.7 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   322.463M i/100ms
       block + yield   322.122M i/100ms
        unused block   322.573M i/100ms
               yield   322.723M i/100ms
Calculating -------------------------------------
          block.call      3.202B (± 2.5%) i/s -     16.123B in   5.038060s
       block + yield      3.186B (± 3.2%) i/s -     16.106B in   5.061299s
        unused block      3.189B (± 2.8%) i/s -     16.129B in   5.061823s
               yield      3.193B (± 2.6%) i/s -     16.136B in   5.056752s

Comparison:
          block.call: 3202405824.0 i/s
               yield: 3193381938.5 i/s - same-ish: difference falls within error
        unused block: 3188970388.8 i/s - same-ish: difference falls within error
       block + yield: 3185825342.0 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     5.236k i/100ms
      range#include?   173.000  i/100ms
       range#member?   235.000  i/100ms
       plain compare     7.875k i/100ms
Calculating -------------------------------------
        range#cover?     58.028k (±33.6%) i/s -    256.564k in   5.077117s
      range#include?      3.064k (±40.4%) i/s -     12.283k in   5.184516s
       range#member?      3.041k (±37.5%) i/s -     12.925k in   5.120774s
       plain compare     92.117k (±30.3%) i/s -    409.500k in   5.076693s

Comparison:
       plain compare:    92116.9 i/s
        range#cover?:    58028.1 i/s - same-ish: difference falls within error
      range#include?:     3063.7 i/s - 30.07x  (± 0.00) slower
       range#member?:     3041.1 i/s - 30.29x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    16.715M i/100ms
           String#=~    15.445M i/100ms
          Regexp#===    15.357M i/100ms
        String#match    12.608M i/100ms
Calculating -------------------------------------
       String#match?    167.678M (± 2.0%) i/s -    852.480M in   5.086146s
           String#=~    154.063M (± 1.9%) i/s -    772.266M in   5.014543s
          Regexp#===    154.106M (± 1.6%) i/s -    783.187M in   5.083596s
        String#match    128.666M (± 0.3%) i/s -    655.617M in   5.095547s

Comparison:
       String#match?: 167678150.6 i/s
          Regexp#===: 154105981.7 i/s - 1.09x  (± 0.00) slower
           String#=~: 154063120.2 i/s - 1.09x  (± 0.00) slower
        String#match: 128665689.3 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.772M i/100ms
      String#casecmp     4.920M i/100ms
Calculating -------------------------------------
String#downcase + ==     30.138M (± 9.0%) i/s -    152.485M in   5.119667s
      String#casecmp     48.293M (± 6.3%) i/s -    241.091M in   5.018139s

Comparison:
      String#casecmp: 48293152.2 i/s
String#downcase + ==: 30138337.8 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     9.225M i/100ms
       String#concat     9.576M i/100ms
       String#append    10.367M i/100ms
         "foo" "bar"   320.590M i/100ms
  "#{'foo'}#{'bar'}"    10.529M i/100ms
Calculating -------------------------------------
            String#+    103.194M (± 6.5%) i/s -    516.576M in   5.033851s
       String#concat    103.566M (± 6.2%) i/s -    517.095M in   5.019219s
       String#append    102.012M (± 8.5%) i/s -    507.967M in   5.031889s
         "foo" "bar"      3.204B (± 2.6%) i/s -     16.029B in   5.007348s
  "#{'foo'}#{'bar'}"    103.122M (± 6.2%) i/s -    515.945M in   5.028129s

Comparison:
         "foo" "bar": 3203549804.6 i/s
       String#concat: 103565830.8 i/s - 30.93x  (± 0.00) slower
            String#+: 103193706.0 i/s - 31.04x  (± 0.00) slower
  "#{'foo'}#{'bar'}": 103122201.3 i/s - 31.07x  (± 0.00) slower
       String#append: 102011916.2 i/s - 31.40x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   321.950M i/100ms
          String#dup   316.764M i/100ms
Calculating -------------------------------------
           String#+@      3.220B (± 0.8%) i/s -     16.419B in   5.098914s
          String#dup      3.226B (± 0.4%) i/s -     16.155B in   5.008241s

Comparison:
          String#dup: 3225727136.7 i/s
           String#+@: 3220399698.1 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.340M i/100ms
       String#match?     1.625M i/100ms
    String#end_with?    11.131M i/100ms
Calculating -------------------------------------
           String#=~     14.312M (± 2.4%) i/s -     72.366M in   5.059245s
       String#match?     16.389M (± 1.9%) i/s -     82.856M in   5.057507s
    String#end_with?    109.643M (± 3.0%) i/s -    556.560M in   5.081043s

Comparison:
    String#end_with?: 109642638.5 i/s
       String#match?: 16389172.5 i/s - 6.69x  (± 0.00) slower
           String#=~: 14312081.9 i/s - 7.66x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   790.413k i/100ms
          String#sub   973.489k i/100ms
String#dup["string"]=
                        10.403M i/100ms
Calculating -------------------------------------
         String#gsub      8.584M (± 8.6%) i/s -     42.682M in   5.020717s
          String#sub     10.119M (± 8.9%) i/s -     50.621M in   5.051152s
String#dup["string"]=
                        103.356M (± 3.6%) i/s -    520.167M in   5.041087s

Comparison:
String#dup["string"]=: 103356364.1 i/s
          String#sub: 10118609.5 i/s - 10.21x  (± 0.00) slower
         String#gsub:  8583805.6 i/s - 12.04x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   211.487k i/100ms
           String#tr   166.120k i/100ms
Calculating -------------------------------------
         String#gsub      4.218M (±10.7%) i/s -     20.937M in   5.038589s
           String#tr      1.691M (± 3.0%) i/s -      8.472M in   5.014321s

Comparison:
         String#gsub:  4218265.1 i/s
           String#tr:  1691150.5 i/s - 2.49x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   321.630M i/100ms
         With Freeze   322.240M i/100ms
Calculating -------------------------------------
      Without Freeze      3.200B (± 1.9%) i/s -     16.082B in   5.027555s
         With Freeze      3.201B (± 2.3%) i/s -     16.112B in   5.036800s

Comparison:
         With Freeze: 3200705628.6 i/s
      Without Freeze: 3199943019.8 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/    10.321k i/100ms
      String#squeeze    84.118k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    153.108k (± 8.6%) i/s -    763.754k in   5.037243s
      String#squeeze    858.087k (± 3.1%) i/s -      4.290M in   5.004459s

Comparison:
      String#squeeze:   858086.8 i/s
 String#gsub/regex+/:   153107.9 i/s - 5.60x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     4.650M i/100ms
       String#match?     5.604M i/100ms
  String#start_with?    13.379M i/100ms
Calculating -------------------------------------
           String#=~     46.891M (± 2.7%) i/s -    237.132M in   5.061049s
       String#match?     55.563M (± 3.8%) i/s -    280.182M in   5.052581s
  String#start_with?    133.378M (± 2.4%) i/s -    668.949M in   5.018519s

Comparison:
  String#start_with?: 133378129.8 i/s
       String#match?: 55563014.2 i/s - 2.40x  (± 0.00) slower
           String#=~: 46891216.9 i/s - 2.84x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   245.099k i/100ms
    String#[0, n] ==   298.299k i/100ms
   String#[RANGE] ==   458.898k i/100ms
   String#[0...n] ==   266.522k i/100ms
Calculating -------------------------------------
  String#start_with?      6.810M (± 3.6%) i/s -     34.069M in   5.011504s
    String#[0, n] ==      3.101M (± 3.5%) i/s -     15.512M in   5.009023s
   String#[RANGE] ==      4.565M (± 4.9%) i/s -     22.945M in   5.040540s
   String#[0...n] ==      2.652M (± 3.8%) i/s -     13.326M in   5.031328s

Comparison:
  String#start_with?:  6810343.2 i/s
   String#[RANGE] ==:  4564893.1 i/s - 1.49x  (± 0.00) slower
    String#[0, n] ==:  3100663.3 i/s - 2.20x  (± 0.00) slower
   String#[0...n] ==:  2652445.4 i/s - 2.57x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    10.338M i/100ms
 String#sub!'string'   955.484k i/100ms
String#gsub!'string'   878.827k i/100ms
  String#[/regexp/]=     2.632M i/100ms
 String#sub!/regexp/     2.617M i/100ms
String#gsub!/regexp/   867.739k i/100ms
Calculating -------------------------------------
  String#['string']=    103.566M (± 0.2%) i/s -    527.256M in   5.091044s
 String#sub!'string'     10.331M (±10.2%) i/s -     51.596M in   5.067969s
String#gsub!'string'      9.184M (± 8.5%) i/s -     45.699M in   5.023129s
  String#[/regexp/]=     26.839M (± 3.3%) i/s -    134.238M in   5.007239s
 String#sub!/regexp/     26.061M (± 2.8%) i/s -    130.865M in   5.025825s
String#gsub!/regexp/      8.144M (± 8.3%) i/s -     40.784M in   5.046289s

Comparison:
  String#['string']=: 103565910.0 i/s
  String#[/regexp/]=: 26839329.6 i/s - 3.86x  (± 0.00) slower
 String#sub!/regexp/: 26060801.8 i/s - 3.97x  (± 0.00) slower
 String#sub!'string': 10330773.0 i/s - 10.02x  (± 0.00) slower
String#gsub!'string':  9184131.1 i/s - 11.28x  (± 0.00) slower
String#gsub!/regexp/:  8144332.9 i/s - 12.72x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     2.948M i/100ms
        String#chomp     5.949M i/100ms
String#delete_suffix    14.705M i/100ms
Calculating -------------------------------------
          String#sub     30.771M (± 1.7%) i/s -    156.261M in   5.079819s
        String#chomp     59.359M (± 1.9%) i/s -    297.468M in   5.013213s
String#delete_suffix    144.356M (±11.5%) i/s -    720.565M in   5.076452s

Comparison:
String#delete_suffix: 144355728.4 i/s
        String#chomp: 59359279.7 i/s - 2.43x  (± 0.00) slower
          String#sub: 30770577.1 i/s - 4.69x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   319.815M i/100ms
          String#sub    15.882M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.213B (± 1.5%) i/s -     16.311B in   5.078245s
          String#sub    158.457M (± 1.8%) i/s -    794.106M in   5.013181s

Comparison:
String#delete_prefix: 3212593229.7 i/s
          String#sub: 158456976.0 i/s - 20.27x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.908M i/100ms
    String#unpack[0]     1.993M i/100ms
Calculating -------------------------------------
      String#unpack1     20.841M (± 6.0%) i/s -    104.946M in   5.062200s
    String#unpack[0]     20.841M (± 4.8%) i/s -    105.646M in   5.081840s

Comparison:
      String#unpack1: 20841065.3 i/s
    String#unpack[0]: 20840932.1 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.1.0-dev-1adc2121, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    34.476k i/100ms
          Time.parse   343.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    320.586k (±15.3%) i/s -      1.586M in   5.065531s
          Time.parse      6.126k (±20.5%) i/s -     28.812k in   5.001493s

Comparison:
        Time.iso8601:   320586.1 i/s
          Time.parse:     6126.2 i/s - 52.33x  (± 0.00) slower

