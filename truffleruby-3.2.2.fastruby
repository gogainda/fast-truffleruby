$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       301.338M i/100ms
Function with splat arguments
                         1.901k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.200B (± 2.5%) i/s -     16.272B in   5.088673s
Function with splat arguments
                         20.107k (± 8.3%) i/s -    100.753k in   5.051937s

Comparison:
Function with single Array argument: 3199941602.8 i/s
Function with splat arguments:    20107.2 i/s - 159144.41x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   317.106M i/100ms
Sequential Assignment
                       317.243M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.172B (± 2.2%) i/s -     15.855B in   5.000981s
Sequential Assignment
                          3.159B (± 4.6%) i/s -     15.862B in   5.034051s

Comparison:
 Parallel Assignment: 3172012440.6 i/s
Sequential Assignment: 3158823731.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   321.161M i/100ms
       attr_accessor   318.553M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.186B (± 3.1%) i/s -     16.058B in   5.044940s
       attr_accessor      3.217B (± 0.9%) i/s -     16.246B in   5.050577s

Comparison:
       attr_accessor: 3216999290.8 i/s
   getter_and_setter: 3186480019.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    13.413k i/100ms
         respond_to?   311.273M i/100ms
Calculating -------------------------------------
      begin...rescue     96.673k (± 6.2%) i/s -    482.868k in   5.018092s
         respond_to?      3.216B (± 1.8%) i/s -     16.186B in   5.034888s

Comparison:
         respond_to?: 3215879895.1 i/s
      begin...rescue:    96673.0 i/s - 33265.56x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   316.528M i/100ms
             &method   315.482M i/100ms
Calculating -------------------------------------
              normal      3.188B (± 3.6%) i/s -     16.143B in   5.070622s
             &method      3.207B (± 1.3%) i/s -     16.090B in   5.018224s

Comparison:
             &method: 3206811695.5 i/s
              normal: 3188429727.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       152.000  i/100ms
       define_method   159.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          4.336k (±51.3%) i/s -      8.664k in   5.207445s
       define_method     12.100k (±40.3%) i/s -     12.561k in   5.006836s

Comparison:
       define_method:    12099.8 i/s
module_eval with string:     4335.6 i/s - 2.79x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   122.807k i/100ms
       Kernel#format   106.850k i/100ms
            String#%    21.146k i/100ms
Calculating -------------------------------------
         Float#round      1.290M (± 2.8%) i/s -      6.509M in   5.047953s
       Kernel#format      1.068M (± 2.5%) i/s -      5.343M in   5.005447s
            String#%    217.030k (± 9.5%) i/s -      1.078M in   5.028867s

Comparison:
         Float#round:  1290436.6 i/s
       Kernel#format:  1068067.8 i/s - 1.21x  (± 0.00) slower
            String#%:   217029.6 i/s - 5.95x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   317.314M i/100ms
          OpenStruct   305.817M i/100ms
Calculating -------------------------------------
                Hash      3.047B (± 1.4%) i/s -     15.231B in   4.999731s
          OpenStruct      3.041B (± 2.2%) i/s -     15.291B in   5.030138s

Comparison:
                Hash: 3046971908.0 i/s
          OpenStruct: 3041490983.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   317.518M i/100ms
          OpenStruct     2.514k i/100ms
Calculating -------------------------------------
                Hash      3.020B (± 5.2%) i/s -     15.241B in   5.061314s
          OpenStruct     44.768k (±20.7%) i/s -    211.176k in   5.036678s

Comparison:
                Hash: 3020350732.7 i/s
          OpenStruct:    44767.8 i/s - 67466.96x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   938.048k i/100ms
  ancestors.include?   214.084k i/100ms
Calculating -------------------------------------
  less than or equal      9.816M (± 2.9%) i/s -     49.717M in   5.069392s
  ancestors.include?      2.268M (± 7.1%) i/s -     11.346M in   5.038216s

Comparison:
  less than or equal:  9815635.8 i/s
  ancestors.include?:  2267891.2 i/s - 4.33x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     30.809  (± 6.5%) i/s -    154.000  in   5.012785s
         Kernel loop     30.521  (± 3.3%) i/s -    153.000  in   5.022325s

Comparison:
          While Loop:       30.8 i/s
         Kernel loop:       30.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   312.041M i/100ms
         Array#first   303.726M i/100ms
Calculating -------------------------------------
           Array#[0]      3.101B (± 2.6%) i/s -     15.602B in   5.034672s
         Array#first      3.061B (± 2.3%) i/s -     15.490B in   5.063499s

Comparison:
           Array#[0]: 3100980220.9 i/s
         Array#first: 3060884286.8 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   305.615M i/100ms
          Array#last   309.192M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.193B (± 2.4%) i/s -     16.198B in   5.075436s
          Array#last      3.207B (± 2.2%) i/s -     16.078B in   5.016343s

Comparison:
          Array#last: 3206802223.5 i/s
          Array#[-1]: 3193280929.7 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   907.497k i/100ms
Calculating -------------------------------------
                find     13.705  (± 0.0%) i/s -     69.000  in   5.039015s
             bsearch      9.104M (± 3.5%) i/s -     46.282M in   5.090750s

Comparison:
             bsearch:  9103599.3 i/s
                find:       13.7 i/s - 664259.81x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.212  (± 0.0%) i/s -      2.000  in   9.417344s
        Array#insert      1.391  (± 0.0%) i/s -      7.000  in   5.031287s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.2 i/s - 6.55x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   316.183M i/100ms
          Array#size   311.892M i/100ms
         Array#count   323.500M i/100ms
Calculating -------------------------------------
        Array#length      3.195B (± 2.5%) i/s -     16.125B in   5.050996s
          Array#size      3.203B (± 2.5%) i/s -     16.218B in   5.067284s
         Array#count      3.185B (± 2.9%) i/s -     16.175B in   5.082371s

Comparison:
          Array#size: 3202736728.9 i/s
        Array#length: 3194595605.0 i/s - same-ish: difference falls within error
         Array#count: 3185420296.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    36.010k i/100ms
        Array#sample     3.802M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    357.204k (± 1.8%) i/s -      1.800M in   5.042227s
        Array#sample     38.351M (± 0.2%) i/s -    193.889M in   5.055632s

Comparison:
        Array#sample: 38351235.8 i/s
 Array#shuffle.first:   357203.8 i/s - 107.37x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601     1.008k i/100ms
          Date.parse   668.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     18.840k (±38.8%) i/s -     82.656k in   5.022292s
          Date.parse      9.008k (±23.1%) i/s -     42.084k in   5.034034s

Comparison:
        Date.iso8601:    18839.5 i/s
          Date.parse:     9008.4 i/s - 2.09x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   276.982k i/100ms
           Array#map     1.603M i/100ms
Calculating -------------------------------------
   Array#each + push      3.662M (± 7.1%) i/s -     18.281M in   5.019794s
           Array#map     17.513M (± 7.7%) i/s -     88.178M in   5.076273s

Comparison:
           Array#map: 17512973.6 i/s
   Array#each + push:  3661967.9 i/s - 4.78x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    12.225M i/100ms
               #each    35.199M i/100ms
Calculating -------------------------------------
            For loop    124.101M (± 0.7%) i/s -    623.496M in   5.024350s
               #each    353.492M (± 1.9%) i/s -      1.795B in   5.080249s

Comparison:
               #each: 353492223.3 i/s
            For loop: 124101124.8 i/s - 2.85x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.420M i/100ms
     each_with_index     1.958M i/100ms
Calculating -------------------------------------
          While Loop     14.165M (± 2.2%) i/s -     70.986M in   5.014031s
     each_with_index     17.644M (± 2.4%) i/s -     90.068M in   5.107631s

Comparison:
     each_with_index: 17643731.7 i/s
          While Loop: 14164567.1 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   306.483k i/100ms
      inject to_proc   310.632k i/100ms
        inject block   312.436k i/100ms
Calculating -------------------------------------
       inject symbol      3.046M (± 2.0%) i/s -     15.324M in   5.032794s
      inject to_proc      3.129M (± 0.2%) i/s -     15.842M in   5.063472s
        inject block      3.107M (± 3.8%) i/s -     15.622M in   5.038017s

Comparison:
      inject to_proc:  3128745.9 i/s
        inject block:  3106729.1 i/s - same-ish: difference falls within error
       inject symbol:  3046207.6 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    22.811k i/100ms
   Array#map.flatten    26.912k i/100ms
      Array#flat_map    58.633k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    262.650k (± 7.5%) i/s -      1.323M in   5.073161s
   Array#map.flatten    262.642k (± 7.2%) i/s -      1.319M in   5.053413s
      Array#flat_map    577.029k (± 5.8%) i/s -      2.873M in   5.001247s

Comparison:
      Array#flat_map:   577028.5 i/s
Array#map.flatten(1):   262650.1 i/s - 2.20x  (± 0.00) slower
   Array#map.flatten:   262642.2 i/s - 2.20x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   299.828k i/100ms
  Array#reverse_each     2.381M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.077M (± 6.0%) i/s -     15.591M in   5.095375s
  Array#reverse_each     23.813M (± 1.8%) i/s -    119.044M in   5.000695s

Comparison:
  Array#reverse_each: 23813271.2 i/s
  Array#reverse.each:  3077010.8 i/s - 7.74x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       965.287k i/100ms
   Enumerable#detect     4.093M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.390M (± 7.6%) i/s -    206.571M in  20.038049s
   Enumerable#detect     45.555M (± 3.4%) i/s -    912.713M in  20.061181s

Comparison:
   Enumerable#detect: 45554537.4 i/s
Enumerable#select.first: 10390111.8 i/s - 4.38x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       318.861k i/100ms
Enumerable#select.last
                       539.759k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.162M (± 5.8%) i/s -     15.943M in   5.064911s
Enumerable#select.last
                          5.364M (± 6.0%) i/s -     26.988M in   5.056014s

Comparison:
Enumerable#select.last:  5364111.0 i/s
Enumerable#reverse.detect:  3162428.8 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.817k i/100ms
  Enumerable#sort_by     3.500k i/100ms
     Enumerable#sort     3.567k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         30.940k (±30.2%) i/s -    141.229k in   5.082740s
  Enumerable#sort_by     39.594k (±17.0%) i/s -    185.500k in   5.074844s
     Enumerable#sort     51.965k (±10.1%) i/s -    256.824k in   5.018643s

Comparison:
     Enumerable#sort:    51964.7 i/s
  Enumerable#sort_by:    39593.9 i/s - 1.31x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    30939.9 i/s - 1.68x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   858.280k i/100ms
Enumerable#sort_by...first
                         5.290k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      8.570M (± 2.3%) i/s -     42.914M in   5.010064s
Enumerable#sort_by...first
                        102.400k (± 4.3%) i/s -    513.130k in   5.020802s

Comparison:
   Enumerable#min_by:  8570211.1 i/s
Enumerable#sort_by...first:   102399.5 i/s - 83.69x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   521.821k i/100ms
            Hash#dup   736.668k i/100ms
Calculating -------------------------------------
              Hash[]      7.475M (±13.6%) i/s -     37.049M in   5.056933s
            Hash#dup      7.685M (±10.7%) i/s -     38.307M in   5.063042s

Comparison:
            Hash#dup:  7684611.8 i/s
              Hash[]:  7474783.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   281.449M i/100ms
  Hash#fetch, symbol   301.377M i/100ms
     Hash#[], string    20.203M i/100ms
  Hash#fetch, string    20.214M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.049B (± 2.7%) i/s -     15.480B in   5.080266s
  Hash#fetch, symbol      3.050B (± 1.7%) i/s -     15.370B in   5.041114s
     Hash#[], string    200.582M (± 2.1%) i/s -      1.010B in   5.038639s
  Hash#fetch, string    200.676M (± 2.1%) i/s -      1.011B in   5.038890s

Comparison:
  Hash#fetch, symbol: 3049863216.3 i/s
     Hash#[], symbol: 3049263846.6 i/s - same-ish: difference falls within error
  Hash#fetch, string: 200675959.0 i/s - 15.20x  (± 0.00) slower
     Hash#[], string: 200581940.7 i/s - 15.21x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    91.850M i/100ms
             Hash#[]    91.962M i/100ms
          Hash#[] ||    91.020M i/100ms
          Hash#[] &&    91.136M i/100ms
          Hash#fetch    92.363M i/100ms
 Hash#fetch fallback    92.436M i/100ms
Calculating -------------------------------------
            Hash#dig    921.349M (± 1.0%) i/s -      4.684B in   5.084792s
             Hash#[]    914.541M (± 4.6%) i/s -      4.598B in   5.042387s
          Hash#[] ||    918.797M (± 1.6%) i/s -      4.642B in   5.053700s
          Hash#[] &&    916.607M (± 3.1%) i/s -      4.648B in   5.076500s
          Hash#fetch    917.500M (± 3.4%) i/s -      4.618B in   5.041027s
 Hash#fetch fallback    922.263M (± 0.8%) i/s -      4.622B in   5.011681s

Comparison:
 Hash#fetch fallback: 922263023.4 i/s
            Hash#dig: 921348598.0 i/s - same-ish: difference falls within error
          Hash#[] ||: 918796991.2 i/s - same-ish: difference falls within error
          Hash#fetch: 917499589.5 i/s - same-ish: difference falls within error
          Hash#[] &&: 916607262.0 i/s - same-ish: difference falls within error
             Hash#[]: 914540625.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   303.922M i/100ms
  Hash#fetch + block   319.219M i/100ms
    Hash#fetch + arg   308.636M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.165B (± 2.9%) i/s -     16.108B in   5.094552s
  Hash#fetch + block      3.130B (± 3.9%) i/s -     15.642B in   5.006378s
    Hash#fetch + arg      3.102B (± 2.8%) i/s -     15.740B in   5.079048s

Comparison:
  Hash#fetch + const: 3164571049.8 i/s
  Hash#fetch + block: 3129802781.7 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 3101581906.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    29.512k i/100ms
         sort + to_h     2.923k i/100ms
Calculating -------------------------------------
      sort_by + to_h    467.115k (±10.4%) i/s -      2.331M in   5.061266s
         sort + to_h    186.657k (±13.3%) i/s -    903.207k in   5.005265s

Comparison:
      sort_by + to_h:   467115.5 i/s
         sort + to_h:   186657.0 i/s - 2.50x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   234.963k i/100ms
       Hash#each_key   249.230k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.425M (± 9.9%) i/s -     11.983M in   5.047242s
       Hash#each_key      2.518M (± 2.3%) i/s -     12.711M in   5.050579s

Comparison:
       Hash#each_key:  2518050.1 i/s
      Hash#keys.each:  2425039.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   336.000  i/100ms
           Hash#key?     3.510M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      3.644k (±13.0%) i/s -     17.808k in   5.026142s
           Hash#key?     34.893M (± 2.0%) i/s -    175.512M in   5.032137s

Comparison:
           Hash#key?: 34893147.5 i/s
  Hash#keys.include?:     3644.0 i/s - 9575.57x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    43.416k i/100ms
            Hash#[]=    58.283k i/100ms
Calculating -------------------------------------
         Hash#merge!    613.720k (± 7.3%) i/s -      3.083M in   5.061024s
            Hash#[]=    612.553k (± 9.0%) i/s -      3.031M in   5.003220s

Comparison:
         Hash#merge!:   613720.3 i/s
            Hash#[]=:   612553.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        36.271k i/100ms
      Hash#merge({})    19.034k i/100ms
 Hash#dup#merge!({})    29.846k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        384.221k (±10.8%) i/s -      1.922M in   5.077677s
      Hash#merge({})    197.454k (± 9.8%) i/s -    989.768k in   5.068368s
 Hash#dup#merge!({})    319.639k (±10.1%) i/s -      1.582M in   5.010580s

Comparison:
{}#merge!(Hash) do end:   384221.1 i/s
 Hash#dup#merge!({}):   319639.4 i/s - same-ish: difference falls within error
      Hash#merge({}):   197453.8 i/s - 1.95x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   318.283M i/100ms
          Hash#merge   305.645M i/100ms
Calculating -------------------------------------
        Hash#**other      3.131B (± 3.8%) i/s -     15.914B in   5.090523s
          Hash#merge      3.133B (± 4.1%) i/s -     15.894B in   5.082902s

Comparison:
          Hash#merge: 3132754016.3 i/s
        Hash#**other: 3130916040.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.118k i/100ms
         Hash#merge!    62.412k i/100ms
Calculating -------------------------------------
          Hash#merge     12.956k (±10.8%) i/s -     64.844k in   5.075377s
         Hash#merge!    623.052k (± 8.8%) i/s -      3.121M in   5.050825s

Comparison:
         Hash#merge!:   623052.3 i/s
          Hash#merge:    12955.8 i/s - 48.09x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.799M i/100ms
Array#each               1.444M i/100ms
Array#each_w/_object     1.468M i/100ms
Hash#select-include      2.295M i/100ms
Calculating -------------------------------------
Hash#native-slice        18.725M (± 6.3%) i/s -     93.528M in   5.022674s
Array#each               15.118M (± 6.0%) i/s -     76.538M in   5.089345s
Array#each_w/_object     15.148M (± 6.3%) i/s -     76.323M in   5.066388s
Hash#select-include      24.043M (± 6.1%) i/s -    121.630M in   5.084545s

Comparison:
Hash#select-include : 24043254.3 i/s
Hash#native-slice   : 18725223.3 i/s - 1.28x  (± 0.00) slower
Array#each_w/_object: 15148303.7 i/s - 1.59x  (± 0.00) slower
Array#each          : 15117974.8 i/s - 1.59x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   293.000  i/100ms
         Hash#value?   676.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      3.155k (±12.6%) i/s -     15.529k in   5.023590s
         Hash#value?      6.755k (± 0.5%) i/s -     33.800k in   5.003704s

Comparison:
         Hash#value?:     6755.1 i/s
Hash#values.include?:     3155.1 i/s - 2.14x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   317.616M i/100ms
                send   321.352M i/100ms
      method_missing   317.180M i/100ms
Calculating -------------------------------------
                call      3.196B (± 2.2%) i/s -     16.198B in   5.070540s
                send      3.218B (± 1.0%) i/s -     16.389B in   5.094076s
      method_missing      3.184B (± 1.9%) i/s -     16.176B in   5.083012s

Comparison:
                send: 3217597702.5 i/s
                call: 3196292984.3 i/s - same-ish: difference falls within error
      method_missing: 3183564617.7 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    63.386k i/100ms
      Symbol#to_proc    66.793k i/100ms
Calculating -------------------------------------
               Block    745.213k (±12.5%) i/s -      3.676M in   5.039968s
      Symbol#to_proc    746.559k (±14.2%) i/s -      3.674M in   5.025983s

Comparison:
      Symbol#to_proc:   746558.9 i/s
               Block:   745212.8 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   312.444M i/100ms
       block + yield   320.118M i/100ms
        unused block   320.751M i/100ms
               yield   307.847M i/100ms
Calculating -------------------------------------
          block.call      3.071B (± 2.2%) i/s -     15.622B in   5.089037s
       block + yield      3.023B (± 3.4%) i/s -     15.366B in   5.089907s
        unused block      3.058B (± 3.1%) i/s -     15.396B in   5.039159s
               yield      3.078B (± 2.2%) i/s -     15.392B in   5.003452s

Comparison:
               yield: 3077892472.8 i/s
          block.call: 3071250993.3 i/s - same-ish: difference falls within error
        unused block: 3058286867.9 i/s - same-ish: difference falls within error
       block + yield: 3022671933.6 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     5.098k i/100ms
      range#include?   167.000  i/100ms
       range#member?   223.000  i/100ms
       plain compare     8.237k i/100ms
Calculating -------------------------------------
        range#cover?     60.078k (±25.8%) i/s -    270.194k in   5.025884s
      range#include?      2.183k (±26.4%) i/s -      9.853k in   5.002173s
       range#member?      2.076k (±30.4%) i/s -      9.143k in   5.020456s
       plain compare     85.499k (±23.9%) i/s -    395.376k in   5.083667s

Comparison:
       plain compare:    85499.2 i/s
        range#cover?:    60078.5 i/s - same-ish: difference falls within error
      range#include?:     2182.9 i/s - 39.17x  (± 0.00) slower
       range#member?:     2075.7 i/s - 41.19x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    13.459M i/100ms
           String#=~    13.296M i/100ms
          Regexp#===    13.345M i/100ms
        String#match    10.781M i/100ms
Calculating -------------------------------------
       String#match?    135.861M (± 1.1%) i/s -    686.428M in   5.053110s
           String#=~    133.409M (± 1.7%) i/s -    678.095M in   5.084354s
          Regexp#===    132.025M (± 2.6%) i/s -    667.259M in   5.057770s
        String#match    106.328M (± 3.2%) i/s -    539.057M in   5.075918s

Comparison:
       String#match?: 135861064.2 i/s
           String#=~: 133408886.9 i/s - same-ish: difference falls within error
          Regexp#===: 132025355.3 i/s - same-ish: difference falls within error
        String#match: 106328382.5 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.649M i/100ms
      String#casecmp     4.339M i/100ms
Calculating -------------------------------------
String#downcase + ==     29.872M (± 6.8%) i/s -    150.965M in   5.083980s
      String#casecmp     46.561M (± 6.6%) i/s -    234.289M in   5.065464s

Comparison:
      String#casecmp: 46560779.6 i/s
String#downcase + ==: 29872183.3 i/s - 1.56x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     9.452M i/100ms
       String#concat    10.377M i/100ms
       String#append    10.571M i/100ms
         "foo" "bar"   319.671M i/100ms
  "#{'foo'}#{'bar'}"    10.615M i/100ms
Calculating -------------------------------------
            String#+    103.958M (± 6.6%) i/s -    519.857M in   5.032786s
       String#concat    102.869M (± 6.3%) i/s -    518.838M in   5.071729s
       String#append    102.522M (± 9.1%) i/s -    507.421M in   5.015073s
         "foo" "bar"      3.195B (± 2.7%) i/s -     15.984B in   5.007169s
  "#{'foo'}#{'bar'}"    103.073M (± 6.5%) i/s -    520.146M in   5.074118s

Comparison:
         "foo" "bar": 3194697924.2 i/s
            String#+: 103958335.3 i/s - 30.73x  (± 0.00) slower
  "#{'foo'}#{'bar'}": 103072507.3 i/s - 30.99x  (± 0.00) slower
       String#concat: 102869440.2 i/s - 31.06x  (± 0.00) slower
       String#append: 102521658.7 i/s - 31.16x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   309.420M i/100ms
          String#dup   302.744M i/100ms
Calculating -------------------------------------
           String#+@      3.119B (± 2.4%) i/s -     15.780B in   5.062131s
          String#dup      3.079B (± 1.9%) i/s -     15.440B in   5.016152s

Comparison:
           String#+@: 3119108940.7 i/s
          String#dup: 3079185114.5 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.374M i/100ms
       String#match?     1.604M i/100ms
    String#end_with?    10.696M i/100ms
Calculating -------------------------------------
           String#=~     13.949M (± 2.7%) i/s -     70.089M in   5.028438s
       String#match?     16.345M (± 0.7%) i/s -     81.793M in   5.004299s
    String#end_with?    106.808M (± 2.3%) i/s -    534.822M in   5.010286s

Comparison:
    String#end_with?: 106807900.4 i/s
       String#match?: 16345459.8 i/s - 6.53x  (± 0.00) slower
           String#=~: 13948929.4 i/s - 7.66x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   737.051k i/100ms
          String#sub   926.617k i/100ms
String#dup["string"]=
                        10.072M i/100ms
Calculating -------------------------------------
         String#gsub      8.585M (± 8.0%) i/s -     42.749M in   5.032138s
          String#sub      9.737M (± 9.9%) i/s -     48.184M in   5.009778s
String#dup["string"]=
                        100.040M (± 3.0%) i/s -    503.591M in   5.038994s

Comparison:
String#dup["string"]=: 100039962.8 i/s
          String#sub:  9736837.5 i/s - 10.27x  (± 0.00) slower
         String#gsub:  8585257.0 i/s - 11.65x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   272.753k i/100ms
           String#tr   165.752k i/100ms
Calculating -------------------------------------
         String#gsub      4.136M (± 9.9%) i/s -     20.456M in   5.015609s
           String#tr      1.711M (± 2.2%) i/s -      8.619M in   5.040751s

Comparison:
         String#gsub:  4135657.7 i/s
           String#tr:  1710747.6 i/s - 2.42x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   310.760M i/100ms
         With Freeze   318.838M i/100ms
Calculating -------------------------------------
      Without Freeze      3.151B (± 3.1%) i/s -     15.849B in   5.035547s
         With Freeze      3.166B (± 2.2%) i/s -     15.942B in   5.038352s

Comparison:
         With Freeze: 3165714424.4 i/s
      Without Freeze: 3150652041.8 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     5.796k i/100ms
      String#squeeze    71.984k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    151.582k (±10.6%) i/s -    747.684k in   5.011618s
      String#squeeze    700.757k (± 6.1%) i/s -      3.527M in   5.054946s

Comparison:
      String#squeeze:   700757.4 i/s
 String#gsub/regex+/:   151582.1 i/s - 4.62x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     4.270M i/100ms
       String#match?     6.338M i/100ms
  String#start_with?    12.912M i/100ms
Calculating -------------------------------------
           String#=~     44.048M (± 5.7%) i/s -    222.023M in   5.064527s
       String#match?     63.311M (± 0.2%) i/s -    316.919M in   5.005775s
  String#start_with?    128.679M (± 1.6%) i/s -    645.604M in   5.018577s

Comparison:
  String#start_with?: 128678932.5 i/s
       String#match?: 63310984.5 i/s - 2.03x  (± 0.00) slower
           String#=~: 44048318.1 i/s - 2.92x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   189.073k i/100ms
    String#[0, n] ==   292.025k i/100ms
   String#[RANGE] ==   329.315k i/100ms
   String#[0...n] ==   255.853k i/100ms
Calculating -------------------------------------
  String#start_with?      6.883M (± 5.5%) i/s -     34.411M in   5.023914s
    String#[0, n] ==      3.014M (± 7.1%) i/s -     15.185M in   5.074607s
   String#[RANGE] ==      3.441M (± 2.7%) i/s -     17.454M in   5.075785s
   String#[0...n] ==      2.721M (± 7.3%) i/s -     13.560M in   5.019418s

Comparison:
  String#start_with?:  6883356.6 i/s
   String#[RANGE] ==:  3441317.6 i/s - 2.00x  (± 0.00) slower
    String#[0, n] ==:  3014120.2 i/s - 2.28x  (± 0.00) slower
   String#[0...n] ==:  2720825.1 i/s - 2.53x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    10.074M i/100ms
 String#sub!'string'   945.157k i/100ms
String#gsub!'string'   941.014k i/100ms
  String#[/regexp/]=     2.746M i/100ms
 String#sub!/regexp/     1.271M i/100ms
String#gsub!/regexp/   834.180k i/100ms
Calculating -------------------------------------
  String#['string']=    100.240M (± 2.6%) i/s -    503.706M in   5.028858s
 String#sub!'string'     10.196M (±16.6%) i/s -     47.258M in   5.012156s
String#gsub!'string'      9.073M (± 8.4%) i/s -     45.169M in   5.025523s
  String#[/regexp/]=     27.457M (± 3.2%) i/s -    137.291M in   5.005592s
 String#sub!/regexp/     13.578M (±12.1%) i/s -     67.372M in   5.065463s
String#gsub!/regexp/      8.677M (± 7.5%) i/s -     43.377M in   5.034892s

Comparison:
  String#['string']=: 100239985.6 i/s
  String#[/regexp/]=: 27457431.0 i/s - 3.65x  (± 0.00) slower
 String#sub!/regexp/: 13577593.5 i/s - 7.38x  (± 0.00) slower
 String#sub!'string': 10196119.8 i/s - 9.83x  (± 0.00) slower
String#gsub!'string':  9073279.3 i/s - 11.05x  (± 0.00) slower
String#gsub!/regexp/:  8677491.0 i/s - 11.55x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     2.850M i/100ms
        String#chomp     5.651M i/100ms
String#delete_suffix    13.987M i/100ms
Calculating -------------------------------------
          String#sub     29.670M (± 2.9%) i/s -    148.205M in   4.999588s
        String#chomp     50.051M (± 2.5%) i/s -    254.305M in   5.084249s
String#delete_suffix    150.265M (±10.6%) i/s -    741.322M in   5.002682s

Comparison:
String#delete_suffix: 150265441.8 i/s
        String#chomp: 50050540.1 i/s - 3.00x  (± 0.00) slower
          String#sub: 29669635.1 i/s - 5.06x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   314.925M i/100ms
          String#sub    13.695M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.024B (± 2.8%) i/s -     15.116B in   5.002248s
          String#sub    137.864M (± 1.3%) i/s -    698.433M in   5.067052s

Comparison:
String#delete_prefix: 3024325668.7 i/s
          String#sub: 137863724.2 i/s - 21.94x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.651M i/100ms
    String#unpack[0]     1.810M i/100ms
Calculating -------------------------------------
      String#unpack1     19.198M (± 6.2%) i/s -     95.743M in   5.016350s
    String#unpack[0]     18.887M (± 6.2%) i/s -     94.123M in   5.012932s

Comparison:
      String#unpack1: 19197986.8 i/s
    String#unpack[0]: 18887349.1 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.1.0-dev-48c36b41, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    19.105k i/100ms
          Time.parse   281.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    366.535k (±30.6%) i/s -      1.681M in   5.053692s
          Time.parse      5.017k (±28.4%) i/s -     23.323k in   5.024342s

Comparison:
        Time.iso8601:   366535.0 i/s
          Time.parse:     5016.6 i/s - 73.06x  (± 0.00) slower

