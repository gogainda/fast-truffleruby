$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       263.302M i/100ms
Function with splat arguments
                         1.926k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.187B (± 3.1%) i/s -     16.061B in   5.044942s
Function with splat arguments
                         20.360k (± 9.7%) i/s -    102.078k in   5.071202s

Comparison:
Function with single Array argument: 3186945628.9 i/s
Function with splat arguments:    20360.0 i/s - 156530.09x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   313.728M i/100ms
Sequential Assignment
                       313.163M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.209B (± 1.7%) i/s -     16.314B in   5.085316s
Sequential Assignment
                          3.205B (± 2.2%) i/s -     16.284B in   5.083470s

Comparison:
 Parallel Assignment: 3208965479.4 i/s
Sequential Assignment: 3205111764.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   316.099M i/100ms
       attr_accessor   305.036M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.192B (± 2.4%) i/s -     16.121B in   5.054322s
       attr_accessor      3.205B (± 1.8%) i/s -     16.167B in   5.045966s

Comparison:
       attr_accessor: 3205025672.5 i/s
   getter_and_setter: 3191560168.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    13.025k i/100ms
         respond_to?   322.394M i/100ms
Calculating -------------------------------------
      begin...rescue    100.724k (± 6.4%) i/s -    507.975k in   5.069139s
         respond_to?      3.196B (± 2.7%) i/s -     16.120B in   5.047956s

Comparison:
         respond_to?: 3195799130.5 i/s
      begin...rescue:   100723.8 i/s - 31728.35x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   319.978M i/100ms
             &method   322.236M i/100ms
Calculating -------------------------------------
              normal      3.210B (± 1.3%) i/s -     16.319B in   5.084606s
             &method      3.206B (± 2.5%) i/s -     16.112B in   5.028290s

Comparison:
              normal: 3210024221.4 i/s
             &method: 3206480265.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       170.000  i/100ms
       define_method   149.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          4.030k (±54.2%) i/s -      8.330k in   6.883995s
       define_method     11.900k (±36.6%) i/s -     12.367k in   5.171190s

Comparison:
       define_method:    11899.8 i/s
module_eval with string:     4030.0 i/s - 2.95x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   126.862k i/100ms
       Kernel#format   105.196k i/100ms
            String#%    20.316k i/100ms
Calculating -------------------------------------
         Float#round      1.306M (± 2.6%) i/s -      6.597M in   5.056110s
       Kernel#format      1.053M (± 2.7%) i/s -      5.260M in   5.001187s
            String#%    204.879k (± 9.5%) i/s -      1.016M in   5.023670s

Comparison:
         Float#round:  1305647.9 i/s
       Kernel#format:  1052528.3 i/s - 1.24x  (± 0.00) slower
            String#%:   204878.9 i/s - 6.37x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   310.026M i/100ms
          OpenStruct   311.015M i/100ms
Calculating -------------------------------------
                Hash      3.197B (± 2.0%) i/s -     16.121B in   5.045251s
          OpenStruct      3.184B (± 4.0%) i/s -     16.173B in   5.088566s

Comparison:
                Hash: 3196665090.5 i/s
          OpenStruct: 3184226273.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   312.980M i/100ms
          OpenStruct     3.562k i/100ms
Calculating -------------------------------------
                Hash      3.148B (± 4.7%) i/s -     15.962B in   5.083062s
          OpenStruct     47.502k (±13.5%) i/s -    231.530k in   5.001555s

Comparison:
                Hash: 3147775286.0 i/s
          OpenStruct:    47502.1 i/s - 66266.03x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   775.354k i/100ms
  ancestors.include?   224.626k i/100ms
Calculating -------------------------------------
  less than or equal      9.932M (± 4.4%) i/s -     49.623M in   5.006368s
  ancestors.include?      2.311M (± 7.4%) i/s -     11.681M in   5.095259s

Comparison:
  less than or equal:  9931691.5 i/s
  ancestors.include?:  2310527.1 i/s - 4.30x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     31.996  (± 3.1%) i/s -    160.000  in   5.012709s
         Kernel loop     32.024  (± 3.1%) i/s -    160.000  in   5.006854s

Comparison:
         Kernel loop:       32.0 i/s
          While Loop:       32.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   320.480M i/100ms
         Array#first   321.342M i/100ms
Calculating -------------------------------------
           Array#[0]      3.194B (± 2.6%) i/s -     16.024B in   5.020359s
         Array#first      3.225B (± 0.6%) i/s -     16.388B in   5.082185s

Comparison:
         Array#first: 3224823594.1 i/s
           Array#[0]: 3194304470.4 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   322.917M i/100ms
          Array#last   317.249M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.180B (± 3.3%) i/s -     16.146B in   5.083091s
          Array#last      3.182B (± 3.3%) i/s -     16.180B in   5.090337s

Comparison:
          Array#last: 3182186301.6 i/s
          Array#[-1]: 3180217206.9 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   904.575k i/100ms
Calculating -------------------------------------
                find     13.694  (± 0.0%) i/s -     69.000  in   5.042654s
             bsearch      9.108M (± 3.1%) i/s -     46.133M in   5.070236s

Comparison:
             bsearch:  9108140.3 i/s
                find:       13.7 i/s - 665139.00x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.213  (± 0.0%) i/s -      2.000  in   9.383830s
        Array#insert      1.400  (± 0.0%) i/s -      8.000  in   5.713548s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.2 i/s - 6.57x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   318.040M i/100ms
          Array#size   317.970M i/100ms
         Array#count   311.039M i/100ms
Calculating -------------------------------------
        Array#length      3.160B (± 4.6%) i/s -     15.902B in   5.044830s
          Array#size      3.209B (± 1.8%) i/s -     16.216B in   5.054684s
         Array#count      3.208B (± 2.7%) i/s -     16.174B in   5.046140s

Comparison:
          Array#size: 3209367827.0 i/s
         Array#count: 3207940160.3 i/s - same-ish: difference falls within error
        Array#length: 3159950764.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    36.723k i/100ms
        Array#sample     3.405M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    367.359k (± 3.2%) i/s -      1.836M in   5.003921s
        Array#sample     38.724M (± 2.0%) i/s -    194.093M in   5.014473s

Comparison:
        Array#sample: 38723982.7 i/s
 Array#shuffle.first:   367358.6 i/s - 105.41x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601     1.036k i/100ms
          Date.parse   559.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     18.173k (±33.5%) i/s -     81.844k in   5.010807s
          Date.parse      8.029k (±28.9%) i/s -     36.335k in   5.010525s

Comparison:
        Date.iso8601:    18173.0 i/s
          Date.parse:     8028.6 i/s - 2.26x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   331.767k i/100ms
           Array#map     1.612M i/100ms
Calculating -------------------------------------
   Array#each + push      3.488M (± 5.1%) i/s -     17.584M in   5.054611s
           Array#map     17.297M (± 7.9%) i/s -     87.069M in   5.075919s

Comparison:
           Array#map: 17297257.7 i/s
   Array#each + push:  3487714.2 i/s - 4.96x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    12.168M i/100ms
               #each    35.276M i/100ms
Calculating -------------------------------------
            For loop    123.977M (± 1.4%) i/s -    620.573M in   5.006661s
               #each    352.741M (± 1.3%) i/s -      1.764B in   5.001075s

Comparison:
               #each: 352741121.7 i/s
            For loop: 123976654.4 i/s - 2.85x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.426M i/100ms
     each_with_index     1.756M i/100ms
Calculating -------------------------------------
          While Loop     14.564M (± 4.1%) i/s -     72.719M in   5.001391s
     each_with_index     17.674M (± 1.8%) i/s -     89.578M in   5.070014s

Comparison:
     each_with_index: 17673945.7 i/s
          While Loop: 14564342.2 i/s - 1.21x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   306.886k i/100ms
      inject to_proc   312.488k i/100ms
        inject block   312.592k i/100ms
Calculating -------------------------------------
       inject symbol      3.114M (± 2.0%) i/s -     15.651M in   5.028478s
      inject to_proc      3.103M (± 2.5%) i/s -     15.624M in   5.038962s
        inject block      3.106M (± 2.4%) i/s -     15.630M in   5.035999s

Comparison:
       inject symbol:  3113893.8 i/s
        inject block:  3105583.0 i/s - same-ish: difference falls within error
      inject to_proc:  3102874.7 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    23.900k i/100ms
   Array#map.flatten    25.491k i/100ms
      Array#flat_map    57.249k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    260.781k (± 7.3%) i/s -      1.315M in   5.077103s
   Array#map.flatten    264.111k (± 5.9%) i/s -      1.326M in   5.036903s
      Array#flat_map    569.511k (± 5.0%) i/s -      2.862M in   5.040378s

Comparison:
      Array#flat_map:   569511.5 i/s
   Array#map.flatten:   264110.5 i/s - 2.16x  (± 0.00) slower
Array#map.flatten(1):   260781.1 i/s - 2.18x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   321.704k i/100ms
  Array#reverse_each     2.386M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.228M (± 5.6%) i/s -     16.407M in   5.105650s
  Array#reverse_each     23.785M (± 2.2%) i/s -    119.278M in   5.017293s

Comparison:
  Array#reverse_each: 23785108.6 i/s
  Array#reverse.each:  3228214.2 i/s - 7.37x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       983.660k i/100ms
   Enumerable#detect     4.572M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.370M (± 7.8%) i/s -    205.585M in  20.000731s
   Enumerable#detect     45.977M (± 1.2%) i/s -    923.473M in  20.088672s

Comparison:
   Enumerable#detect: 45977353.9 i/s
Enumerable#select.first: 10369588.3 i/s - 4.43x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       320.831k i/100ms
Enumerable#select.last
                       552.322k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.192M (± 4.7%) i/s -     16.042M in   5.038715s
Enumerable#select.last
                          5.450M (± 5.6%) i/s -     27.616M in   5.089766s

Comparison:
Enumerable#select.last:  5450145.6 i/s
Enumerable#reverse.detect:  3191616.2 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.013k i/100ms
  Enumerable#sort_by     4.188k i/100ms
     Enumerable#sort     4.482k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         41.026k (±12.3%) i/s -    200.650k in   5.049055s
  Enumerable#sort_by     40.736k (±11.6%) i/s -    201.024k in   5.059215s
     Enumerable#sort     41.257k (±27.9%) i/s -    192.726k in   5.017524s

Comparison:
     Enumerable#sort:    41257.4 i/s
Enumerable#sort_by (Symbol#to_proc):    41025.8 i/s - same-ish: difference falls within error
  Enumerable#sort_by:    40736.1 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   826.999k i/100ms
Enumerable#sort_by...first
                         9.972k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      8.592M (± 1.7%) i/s -     43.004M in   5.006609s
Enumerable#sort_by...first
                        106.396k (± 2.8%) i/s -    538.488k in   5.065310s

Comparison:
   Enumerable#min_by:  8591953.6 i/s
Enumerable#sort_by...first:   106396.2 i/s - 80.75x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   660.958k i/100ms
            Hash#dup   724.423k i/100ms
Calculating -------------------------------------
              Hash[]      7.658M (±11.3%) i/s -     37.675M in   5.008881s
            Hash#dup      7.617M (± 9.9%) i/s -     38.394M in   5.098904s

Comparison:
              Hash[]:  7658197.8 i/s
            Hash#dup:  7617444.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   312.933M i/100ms
  Hash#fetch, symbol   319.693M i/100ms
     Hash#[], string    20.193M i/100ms
  Hash#fetch, string    20.202M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.201B (± 2.4%) i/s -     16.273B in   5.086330s
  Hash#fetch, symbol      3.189B (± 1.6%) i/s -     15.985B in   5.013239s
     Hash#[], string    199.084M (± 4.0%) i/s -      1.010B in   5.081099s
  Hash#fetch, string    201.084M (± 1.5%) i/s -      1.010B in   5.024498s

Comparison:
     Hash#[], symbol: 3201254475.5 i/s
  Hash#fetch, symbol: 3189326344.8 i/s - same-ish: difference falls within error
  Hash#fetch, string: 201084300.5 i/s - 15.92x  (± 0.00) slower
     Hash#[], string: 199083901.1 i/s - 16.08x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    89.762M i/100ms
             Hash#[]    91.332M i/100ms
          Hash#[] ||    91.690M i/100ms
          Hash#[] &&    92.329M i/100ms
          Hash#fetch    92.319M i/100ms
 Hash#fetch fallback    92.118M i/100ms
Calculating -------------------------------------
            Hash#dig    920.029M (± 1.6%) i/s -      4.668B in   5.074724s
             Hash#[]    916.093M (± 2.2%) i/s -      4.658B in   5.087254s
          Hash#[] ||    918.286M (± 1.6%) i/s -      4.676B in   5.093638s
          Hash#[] &&    919.312M (± 1.7%) i/s -      4.616B in   5.023119s
          Hash#fetch    922.025M (± 1.1%) i/s -      4.616B in   5.006988s
 Hash#fetch fallback    917.227M (± 2.4%) i/s -      4.606B in   5.024880s

Comparison:
          Hash#fetch: 922024985.5 i/s
            Hash#dig: 920029047.0 i/s - same-ish: difference falls within error
          Hash#[] &&: 919312365.2 i/s - same-ish: difference falls within error
          Hash#[] ||: 918285630.0 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 917227275.8 i/s - same-ish: difference falls within error
             Hash#[]: 916092656.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   322.278M i/100ms
  Hash#fetch + block   319.238M i/100ms
    Hash#fetch + arg   323.266M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.216B (± 1.2%) i/s -     16.114B in   5.012013s
  Hash#fetch + block      3.199B (± 2.7%) i/s -     16.281B in   5.093777s
    Hash#fetch + arg      3.178B (± 3.3%) i/s -     16.163B in   5.091625s

Comparison:
  Hash#fetch + const: 3215568001.6 i/s
  Hash#fetch + block: 3198772030.5 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 3178244596.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    34.280k i/100ms
         sort + to_h     3.452k i/100ms
Calculating -------------------------------------
      sort_by + to_h    461.056k (±16.4%) i/s -      2.228M in   5.013332s
         sort + to_h    213.543k (±10.0%) i/s -      1.053M in   5.000428s

Comparison:
      sort_by + to_h:   461056.4 i/s
         sort + to_h:   213543.1 i/s - 2.16x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   241.747k i/100ms
       Hash#each_key   238.297k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.318M (±10.8%) i/s -     11.362M in   5.017061s
       Hash#each_key      2.383M (± 6.2%) i/s -     11.915M in   5.026971s

Comparison:
       Hash#each_key:  2383355.0 i/s
      Hash#keys.each:  2318240.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   280.000  i/100ms
           Hash#key?     3.208M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      3.425k (±14.5%) i/s -     16.800k in   5.042122s
           Hash#key?     32.682M (± 1.4%) i/s -    163.607M in   5.007162s

Comparison:
           Hash#key?: 32681818.3 i/s
  Hash#keys.include?:     3424.6 i/s - 9543.39x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    52.204k i/100ms
            Hash#[]=    56.614k i/100ms
Calculating -------------------------------------
         Hash#merge!    603.152k (± 6.5%) i/s -      3.028M in   5.041674s
            Hash#[]=    634.909k (± 7.2%) i/s -      3.170M in   5.036087s

Comparison:
            Hash#[]=:   634908.5 i/s
         Hash#merge!:   603151.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        41.251k i/100ms
      Hash#merge({})    19.593k i/100ms
 Hash#dup#merge!({})    30.678k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        380.166k (± 9.6%) i/s -      1.939M in   5.154686s
      Hash#merge({})    204.569k (± 8.4%) i/s -      1.019M in   5.029008s
 Hash#dup#merge!({})    317.100k (± 9.1%) i/s -      1.595M in   5.080274s

Comparison:
{}#merge!(Hash) do end:   380165.5 i/s
 Hash#dup#merge!({}):   317099.9 i/s - same-ish: difference falls within error
      Hash#merge({}):   204568.5 i/s - 1.86x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   322.319M i/100ms
          Hash#merge   316.778M i/100ms
Calculating -------------------------------------
        Hash#**other      3.218B (± 1.2%) i/s -     16.116B in   5.008643s
          Hash#merge      3.177B (± 5.1%) i/s -     15.839B in   5.002137s

Comparison:
        Hash#**other: 3218081219.2 i/s
          Hash#merge: 3176709748.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   698.000  i/100ms
         Hash#merge!    57.806k i/100ms
Calculating -------------------------------------
          Hash#merge     11.816k (±13.7%) i/s -     57.934k in   5.037758s
         Hash#merge!    600.207k (± 6.9%) i/s -      3.006M in   5.035143s

Comparison:
         Hash#merge!:   600207.0 i/s
          Hash#merge:    11816.2 i/s - 50.80x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.720M i/100ms
Array#each               1.482M i/100ms
Array#each_w/_object     1.481M i/100ms
Hash#select-include      2.276M i/100ms
Calculating -------------------------------------
Hash#native-slice        18.795M (± 6.1%) i/s -     94.609M in   5.061485s
Array#each               15.434M (± 6.6%) i/s -     77.081M in   5.028027s
Array#each_w/_object     15.355M (± 6.0%) i/s -     77.016M in   5.042258s
Hash#select-include      24.040M (± 6.2%) i/s -    120.629M in   5.045295s

Comparison:
Hash#select-include : 24040143.3 i/s
Hash#native-slice   : 18794804.9 i/s - 1.28x  (± 0.00) slower
Array#each          : 15433734.7 i/s - 1.56x  (± 0.00) slower
Array#each_w/_object: 15355352.8 i/s - 1.57x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   308.000  i/100ms
         Hash#value?   685.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      3.076k (±11.5%) i/s -     15.400k in   5.091249s
         Hash#value?      6.800k (± 0.7%) i/s -     34.250k in   5.037078s

Comparison:
         Hash#value?:     6799.9 i/s
Hash#values.include?:     3075.9 i/s - 2.21x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   322.267M i/100ms
                send   317.058M i/100ms
      method_missing   322.831M i/100ms
Calculating -------------------------------------
                call      3.204B (± 2.2%) i/s -     16.113B in   5.031350s
                send      3.221B (± 1.4%) i/s -     16.170B in   5.021692s
      method_missing      3.204B (± 2.5%) i/s -     16.142B in   5.041805s

Comparison:
                send: 3220767961.8 i/s
                call: 3204278120.4 i/s - same-ish: difference falls within error
      method_missing: 3203619863.8 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    43.352k i/100ms
      Symbol#to_proc    71.045k i/100ms
Calculating -------------------------------------
               Block    797.173k (±11.3%) i/s -      3.945M in   5.042411s
      Symbol#to_proc    755.166k (±12.7%) i/s -      3.765M in   5.083146s

Comparison:
               Block:   797173.4 i/s
      Symbol#to_proc:   755166.1 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   316.584M i/100ms
       block + yield   318.885M i/100ms
        unused block   310.393M i/100ms
               yield   311.935M i/100ms
Calculating -------------------------------------
          block.call      3.210B (± 2.3%) i/s -     16.146B in   5.032566s
       block + yield      3.209B (± 3.1%) i/s -     16.263B in   5.074639s
        unused block      3.191B (± 2.9%) i/s -     16.140B in   5.062026s
               yield      3.200B (± 2.0%) i/s -     16.221B in   5.070657s

Comparison:
          block.call: 3210087364.6 i/s
       block + yield: 3208615666.2 i/s - same-ish: difference falls within error
               yield: 3200279016.1 i/s - same-ish: difference falls within error
        unused block: 3191362848.0 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     5.010k i/100ms
      range#include?   190.000  i/100ms
       range#member?   249.000  i/100ms
       plain compare     9.074k i/100ms
Calculating -------------------------------------
        range#cover?     64.819k (±29.0%) i/s -    295.590k in   5.175582s
      range#include?      2.799k (±37.8%) i/s -     11.970k in   5.021269s
       range#member?      2.801k (±24.7%) i/s -     12.948k in   5.046186s
       plain compare     92.113k (±23.8%) i/s -    426.478k in   5.083393s

Comparison:
       plain compare:    92113.0 i/s
        range#cover?:    64818.7 i/s - same-ish: difference falls within error
       range#member?:     2801.4 i/s - 32.88x  (± 0.00) slower
      range#include?:     2799.3 i/s - 32.91x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    16.637M i/100ms
           String#=~    14.742M i/100ms
          Regexp#===    14.582M i/100ms
        String#match    12.234M i/100ms
Calculating -------------------------------------
       String#match?    166.926M (± 1.5%) i/s -    848.487M in   5.084168s
           String#=~    147.619M (± 1.1%) i/s -    751.842M in   5.093806s
          Regexp#===    146.869M (± 1.9%) i/s -    743.686M in   5.065532s
        String#match    122.036M (± 1.7%) i/s -    611.714M in   5.014123s

Comparison:
       String#match?: 166926036.6 i/s
           String#=~: 147619089.5 i/s - 1.13x  (± 0.00) slower
          Regexp#===: 146868790.9 i/s - 1.14x  (± 0.00) slower
        String#match: 122036369.0 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.751M i/100ms
      String#casecmp     4.754M i/100ms
Calculating -------------------------------------
String#downcase + ==     30.162M (± 7.2%) i/s -    151.298M in   5.052951s
      String#casecmp     46.996M (± 5.9%) i/s -    237.706M in   5.082125s

Comparison:
      String#casecmp: 46995569.9 i/s
String#downcase + ==: 30161986.2 i/s - 1.56x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     9.417M i/100ms
       String#concat    10.328M i/100ms
       String#append    10.188M i/100ms
         "foo" "bar"   323.235M i/100ms
  "#{'foo'}#{'bar'}"    10.494M i/100ms
Calculating -------------------------------------
            String#+    103.688M (± 6.7%) i/s -    517.919M in   5.029310s
       String#concat    103.196M (± 6.0%) i/s -    516.417M in   5.028701s
       String#append    103.075M (± 6.5%) i/s -    519.610M in   5.070820s
         "foo" "bar"      3.197B (± 3.1%) i/s -     16.162B in   5.060243s
  "#{'foo'}#{'bar'}"    102.210M (± 7.5%) i/s -    514.182M in   5.069189s

Comparison:
         "foo" "bar": 3197347851.2 i/s
            String#+: 103688327.2 i/s - 30.84x  (± 0.00) slower
       String#concat: 103196397.1 i/s - 30.98x  (± 0.00) slower
       String#append: 103074820.8 i/s - 31.02x  (± 0.00) slower
  "#{'foo'}#{'bar'}": 102209711.3 i/s - 31.28x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   322.852M i/100ms
          String#dup   323.013M i/100ms
Calculating -------------------------------------
           String#+@      3.185B (± 2.7%) i/s -     16.143B in   5.071542s
          String#dup      3.209B (± 2.3%) i/s -     16.151B in   5.035603s

Comparison:
          String#dup: 3209064899.5 i/s
           String#+@: 3185473394.5 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.147M i/100ms
       String#match?     1.597M i/100ms
    String#end_with?    10.688M i/100ms
Calculating -------------------------------------
           String#=~     14.000M (± 4.2%) i/s -     69.945M in   5.005781s
       String#match?     16.034M (± 1.9%) i/s -     81.450M in   5.081810s
    String#end_with?    106.833M (± 2.3%) i/s -    534.399M in   5.005019s

Comparison:
    String#end_with?: 106832795.3 i/s
       String#match?: 16033604.5 i/s - 6.66x  (± 0.00) slower
           String#=~: 14000275.4 i/s - 7.63x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   487.676k i/100ms
          String#sub   922.450k i/100ms
String#dup["string"]=
                         9.703M i/100ms
Calculating -------------------------------------
         String#gsub      8.722M (±11.6%) i/s -     43.403M in   5.051780s
          String#sub      9.972M (± 8.5%) i/s -     49.812M in   5.033814s
String#dup["string"]=
                         95.128M (± 2.6%) i/s -    475.431M in   5.001753s

Comparison:
String#dup["string"]=: 95128181.4 i/s
          String#sub:  9972283.7 i/s - 9.54x  (± 0.00) slower
         String#gsub:  8721816.1 i/s - 10.91x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   206.458k i/100ms
           String#tr   172.814k i/100ms
Calculating -------------------------------------
         String#gsub      4.214M (± 9.4%) i/s -     21.059M in   5.046919s
           String#tr      1.765M (± 3.8%) i/s -      8.814M in   5.002730s

Comparison:
         String#gsub:  4213864.6 i/s
           String#tr:  1764623.7 i/s - 2.39x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   315.908M i/100ms
         With Freeze   312.850M i/100ms
Calculating -------------------------------------
      Without Freeze      3.188B (± 2.8%) i/s -     16.111B in   5.057356s
         With Freeze      3.201B (± 2.4%) i/s -     16.268B in   5.085733s

Comparison:
         With Freeze: 3200693628.6 i/s
      Without Freeze: 3188391952.4 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     9.674k i/100ms
      String#squeeze    79.983k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    146.092k (±11.2%) i/s -    725.550k in   5.050845s
      String#squeeze    800.282k (± 3.4%) i/s -      3.999M in   5.003520s

Comparison:
      String#squeeze:   800281.7 i/s
 String#gsub/regex+/:   146091.9 i/s - 5.48x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     4.651M i/100ms
       String#match?     5.413M i/100ms
  String#start_with?    12.432M i/100ms
Calculating -------------------------------------
           String#=~     47.411M (± 3.1%) i/s -    237.224M in   5.008496s
       String#match?     53.877M (± 3.3%) i/s -    270.628M in   5.029488s
  String#start_with?    123.381M (± 1.9%) i/s -    621.582M in   5.039719s

Comparison:
  String#start_with?: 123381439.8 i/s
       String#match?: 53877013.2 i/s - 2.29x  (± 0.00) slower
           String#=~: 47411166.3 i/s - 2.60x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   183.416k i/100ms
    String#[0, n] ==   295.575k i/100ms
   String#[RANGE] ==   382.599k i/100ms
   String#[0...n] ==   255.076k i/100ms
Calculating -------------------------------------
  String#start_with?      6.940M (± 2.5%) i/s -     34.849M in   5.025419s
    String#[0, n] ==      2.979M (± 4.1%) i/s -     15.074M in   5.069137s
   String#[RANGE] ==      3.778M (± 3.8%) i/s -     19.130M in   5.072025s
   String#[0...n] ==      2.525M (± 6.6%) i/s -     12.754M in   5.080119s

Comparison:
  String#start_with?:  6939599.0 i/s
   String#[RANGE] ==:  3777731.4 i/s - 1.84x  (± 0.00) slower
    String#[0, n] ==:  2978957.3 i/s - 2.33x  (± 0.00) slower
   String#[0...n] ==:  2525371.1 i/s - 2.75x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     9.700M i/100ms
 String#sub!'string'   957.329k i/100ms
String#gsub!'string'   881.701k i/100ms
  String#[/regexp/]=     2.667M i/100ms
 String#sub!/regexp/     2.672M i/100ms
String#gsub!/regexp/   737.927k i/100ms
Calculating -------------------------------------
  String#['string']=     97.338M (± 2.5%) i/s -    494.707M in   5.085850s
 String#sub!'string'     10.240M (± 9.6%) i/s -     50.738M in   5.013423s
String#gsub!'string'      9.197M (± 8.6%) i/s -     45.848M in   5.031077s
  String#[/regexp/]=     27.148M (± 3.2%) i/s -    136.036M in   5.016447s
 String#sub!/regexp/     24.683M (± 2.7%) i/s -    125.579M in   5.091283s
String#gsub!/regexp/      7.844M (± 9.0%) i/s -     39.110M in   5.033715s

Comparison:
  String#['string']=: 97338484.1 i/s
  String#[/regexp/]=: 27147974.1 i/s - 3.59x  (± 0.00) slower
 String#sub!/regexp/: 24683284.9 i/s - 3.94x  (± 0.00) slower
 String#sub!'string': 10239500.5 i/s - 9.51x  (± 0.00) slower
String#gsub!'string':  9197026.7 i/s - 10.58x  (± 0.00) slower
String#gsub!/regexp/:  7844203.6 i/s - 12.41x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     2.874M i/100ms
        String#chomp     5.833M i/100ms
String#delete_suffix    14.642M i/100ms
Calculating -------------------------------------
          String#sub     29.773M (± 5.1%) i/s -    149.471M in   5.035375s
        String#chomp     58.073M (± 2.5%) i/s -    291.664M in   5.025619s
String#delete_suffix    151.113M (±10.1%) i/s -    746.720M in   5.004999s

Comparison:
String#delete_suffix: 151112783.4 i/s
        String#chomp: 58073414.6 i/s - 2.60x  (± 0.00) slower
          String#sub: 29772547.3 i/s - 5.08x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   310.156M i/100ms
          String#sub    16.060M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.204B (± 1.8%) i/s -     16.128B in   5.034914s
          String#sub    162.002M (± 0.4%) i/s -    819.040M in   5.055827s

Comparison:
String#delete_prefix: 3204362721.8 i/s
          String#sub: 162002322.5 i/s - 19.78x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.849M i/100ms
    String#unpack[0]     1.866M i/100ms
Calculating -------------------------------------
      String#unpack1     18.500M (± 3.7%) i/s -     92.438M in   5.004039s
    String#unpack[0]     18.444M (± 5.9%) i/s -     93.276M in   5.082884s

Comparison:
      String#unpack1: 18499531.9 i/s
    String#unpack[0]: 18444045.5 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.1.0-dev-efcfd983, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    21.383k i/100ms
          Time.parse   287.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    541.266k (±20.4%) i/s -      2.502M in   5.029100s
          Time.parse      6.416k (±11.3%) i/s -     31.570k in   5.008484s

Comparison:
        Time.iso8601:   541266.1 i/s
          Time.parse:     6415.8 i/s - 84.36x  (± 0.00) slower

