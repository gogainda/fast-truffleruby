$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       308.170M i/100ms
Function with splat arguments
                         1.821k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.155B (± 2.8%) i/s -     16.025B in   5.083760s
Function with splat arguments
                         19.734k (± 8.6%) i/s -     98.334k in   5.029370s

Comparison:
Function with single Array argument: 3154672776.1 i/s
Function with splat arguments:    19733.6 i/s - 159863.20x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   320.435M i/100ms
Sequential Assignment
                       310.442M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.163B (± 2.4%) i/s -     16.022B in   5.069306s
Sequential Assignment
                          3.188B (± 1.5%) i/s -     16.143B in   5.064372s

Comparison:
Sequential Assignment: 3188270370.6 i/s
 Parallel Assignment: 3162511170.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   314.170M i/100ms
       attr_accessor   318.288M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.164B (± 2.6%) i/s -     16.023B in   5.068023s
       attr_accessor      3.180B (± 2.0%) i/s -     15.914B in   5.006296s

Comparison:
       attr_accessor: 3180221458.8 i/s
   getter_and_setter: 3163825721.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    13.194k i/100ms
         respond_to?   319.869M i/100ms
Calculating -------------------------------------
      begin...rescue    100.783k (± 6.5%) i/s -    501.372k in   5.004633s
         respond_to?      3.133B (± 2.6%) i/s -     15.674B in   5.006616s

Comparison:
         respond_to?: 3132809632.9 i/s
      begin...rescue:   100782.9 i/s - 31084.73x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   306.988M i/100ms
             &method   313.141M i/100ms
Calculating -------------------------------------
              normal      3.168B (± 1.9%) i/s -     15.963B in   5.041442s
             &method      3.153B (± 2.2%) i/s -     15.970B in   5.067670s

Comparison:
              normal: 3167593061.7 i/s
             &method: 3153002712.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       162.000  i/100ms
       define_method   225.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          4.122k (±48.8%) i/s -      8.424k in   5.046076s
       define_method      9.985k (±55.2%) i/s -     10.350k in   7.091377s

Comparison:
       define_method:     9985.1 i/s
module_eval with string:     4122.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   122.555k i/100ms
       Kernel#format   108.282k i/100ms
            String#%    19.821k i/100ms
Calculating -------------------------------------
         Float#round      1.300M (± 2.6%) i/s -      6.495M in   5.000895s
       Kernel#format      1.067M (± 2.7%) i/s -      5.414M in   5.079409s
            String#%    201.720k (±10.0%) i/s -      1.011M in   5.083431s

Comparison:
         Float#round:  1299807.3 i/s
       Kernel#format:  1066742.7 i/s - 1.22x  (± 0.00) slower
            String#%:   201719.8 i/s - 6.44x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   314.126M i/100ms
          OpenStruct   316.166M i/100ms
Calculating -------------------------------------
                Hash      3.148B (± 2.7%) i/s -     16.020B in   5.092723s
          OpenStruct      3.151B (± 2.3%) i/s -     15.808B in   5.019905s

Comparison:
          OpenStruct: 3150866648.4 i/s
                Hash: 3148174412.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   303.219M i/100ms
          OpenStruct     4.399k i/100ms
Calculating -------------------------------------
                Hash      3.088B (± 4.6%) i/s -     15.464B in   5.019867s
          OpenStruct     46.605k (± 9.9%) i/s -    233.147k in   5.074872s

Comparison:
                Hash: 3088359220.5 i/s
          OpenStruct:    46604.6 i/s - 66267.28x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   765.283k i/100ms
  ancestors.include?   201.824k i/100ms
Calculating -------------------------------------
  less than or equal      9.222M (± 4.2%) i/s -     46.682M in   5.071236s
  ancestors.include?      2.105M (± 3.6%) i/s -     10.697M in   5.087502s

Comparison:
  less than or equal:  9222302.7 i/s
  ancestors.include?:  2105355.5 i/s - 4.38x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     32.123  (± 0.0%) i/s -    161.000  in   5.013059s
         Kernel loop     31.582  (± 6.3%) i/s -    157.000  in   5.004586s

Comparison:
          While Loop:       32.1 i/s
         Kernel loop:       31.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   317.688M i/100ms
         Array#first   312.256M i/100ms
Calculating -------------------------------------
           Array#[0]      3.131B (± 2.2%) i/s -     15.884B in   5.075155s
         Array#first      3.138B (± 2.4%) i/s -     15.925B in   5.078418s

Comparison:
         Array#first: 3137733585.4 i/s
           Array#[0]: 3131440488.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   321.095M i/100ms
          Array#last   322.191M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.138B (± 3.3%) i/s -     15.734B in   5.019549s
          Array#last      3.139B (± 2.5%) i/s -     15.787B in   5.033263s

Comparison:
          Array#last: 3138679449.0 i/s
          Array#[-1]: 3138223083.7 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   836.786k i/100ms
Calculating -------------------------------------
                find     13.779  (± 0.0%) i/s -     69.000  in   5.007867s
             bsearch      8.979M (± 3.0%) i/s -     45.186M in   5.037105s

Comparison:
             bsearch:  8978700.7 i/s
                find:       13.8 i/s - 651621.27x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.212  (± 0.0%) i/s -      2.000  in   9.447631s
        Array#insert      1.396  (± 0.0%) i/s -      7.000  in   5.015788s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.2 i/s - 6.59x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   315.402M i/100ms
          Array#size   315.984M i/100ms
         Array#count   309.397M i/100ms
Calculating -------------------------------------
        Array#length      3.148B (± 2.3%) i/s -     15.770B in   5.012042s
          Array#size      3.177B (± 1.5%) i/s -     16.115B in   5.073466s
         Array#count      3.136B (± 4.1%) i/s -     15.779B in   5.041202s

Comparison:
          Array#size: 3177043233.1 i/s
        Array#length: 3148153850.0 i/s - same-ish: difference falls within error
         Array#count: 3136467382.4 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    36.279k i/100ms
        Array#sample     3.847M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    344.227k (± 2.3%) i/s -      1.741M in   5.061817s
        Array#sample     38.671M (± 0.2%) i/s -    196.213M in   5.073973s

Comparison:
        Array#sample: 38670573.5 i/s
 Array#shuffle.first:   344226.7 i/s - 112.34x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   930.000  i/100ms
          Date.parse   568.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     22.791k (±45.6%) i/s -     93.000k in   5.011110s
          Date.parse      8.368k (±22.2%) i/s -     39.760k in   5.052292s

Comparison:
        Date.iso8601:    22790.6 i/s
          Date.parse:     8368.1 i/s - 2.72x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   331.631k i/100ms
           Array#map     1.637M i/100ms
Calculating -------------------------------------
   Array#each + push      3.634M (± 6.9%) i/s -     18.240M in   5.055169s
           Array#map     16.557M (± 9.0%) i/s -     83.509M in   5.093528s

Comparison:
           Array#map: 16557469.6 i/s
   Array#each + push:  3634074.4 i/s - 4.56x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    12.179M i/100ms
               #each    35.281M i/100ms
Calculating -------------------------------------
            For loop    123.418M (± 2.5%) i/s -    621.117M in   5.036116s
               #each    353.003M (± 1.1%) i/s -      1.799B in   5.097940s

Comparison:
               #each: 353002692.3 i/s
            For loop: 123417904.8 i/s - 2.86x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.419M i/100ms
     each_with_index     1.755M i/100ms
Calculating -------------------------------------
          While Loop     14.623M (± 3.5%) i/s -     73.771M in   5.050958s
     each_with_index     17.536M (± 2.3%) i/s -     87.758M in   5.006865s

Comparison:
     each_with_index: 17536091.3 i/s
          While Loop: 14623425.8 i/s - 1.20x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   308.572k i/100ms
      inject to_proc   312.900k i/100ms
        inject block   310.274k i/100ms
Calculating -------------------------------------
       inject symbol      3.119M (± 1.2%) i/s -     15.737M in   5.046629s
      inject to_proc      3.124M (± 1.1%) i/s -     15.645M in   5.008993s
        inject block      3.128M (± 0.2%) i/s -     15.824M in   5.059235s

Comparison:
        inject block:  3127752.0 i/s
      inject to_proc:  3123824.8 i/s - same-ish: difference falls within error
       inject symbol:  3118820.1 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    22.337k i/100ms
   Array#map.flatten    25.632k i/100ms
      Array#flat_map    56.194k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    266.949k (± 5.1%) i/s -      1.340M in   5.034314s
   Array#map.flatten    262.795k (± 7.5%) i/s -      1.307M in   5.013157s
      Array#flat_map    550.918k (± 7.6%) i/s -      2.754M in   5.038919s

Comparison:
      Array#flat_map:   550917.8 i/s
Array#map.flatten(1):   266949.4 i/s - 2.06x  (± 0.00) slower
   Array#map.flatten:   262795.4 i/s - 2.10x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   313.158k i/100ms
  Array#reverse_each     2.385M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.176M (± 3.1%) i/s -     15.971M in   5.033518s
  Array#reverse_each     23.838M (± 3.5%) i/s -    119.268M in   5.008854s

Comparison:
  Array#reverse_each: 23838033.4 i/s
  Array#reverse.each:  3176197.2 i/s - 7.51x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       873.885k i/100ms
   Enumerable#detect     4.562M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.349M (± 7.6%) i/s -    205.363M in  20.002032s
   Enumerable#detect     45.980M (± 1.1%) i/s -    921.531M in  20.044675s

Comparison:
   Enumerable#detect: 45979747.9 i/s
Enumerable#select.first: 10349131.1 i/s - 4.44x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       323.039k i/100ms
Enumerable#select.last
                       507.415k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.219M (± 3.3%) i/s -     16.152M in   5.023772s
Enumerable#select.last
                          5.447M (± 3.5%) i/s -     27.400M in   5.037046s

Comparison:
Enumerable#select.last:  5446693.3 i/s
Enumerable#reverse.detect:  3218731.2 i/s - 1.69x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.832k i/100ms
  Enumerable#sort_by     2.641k i/100ms
     Enumerable#sort     4.961k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         39.253k (±23.9%) i/s -    167.088k in   5.026722s
  Enumerable#sort_by     41.445k (±12.2%) i/s -    203.357k in   5.057270s
     Enumerable#sort     55.919k (± 3.8%) i/s -    282.777k in   5.064847s

Comparison:
     Enumerable#sort:    55919.1 i/s
  Enumerable#sort_by:    41445.1 i/s - 1.35x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    39253.5 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   819.538k i/100ms
Enumerable#sort_by...first
                        10.063k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      8.254M (± 1.4%) i/s -     41.796M in   5.064913s
Enumerable#sort_by...first
                        104.975k (± 2.5%) i/s -    533.339k in   5.084043s

Comparison:
   Enumerable#min_by:  8253922.9 i/s
Enumerable#sort_by...first:   104974.6 i/s - 78.63x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   376.632k i/100ms
            Hash#dup   708.964k i/100ms
Calculating -------------------------------------
              Hash[]      7.092M (±14.6%) i/s -     34.650M in   5.009981s
            Hash#dup      7.135M (± 9.6%) i/s -     35.448M in   5.018642s

Comparison:
            Hash#dup:  7135237.6 i/s
              Hash[]:  7092020.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   319.050M i/100ms
  Hash#fetch, symbol   317.362M i/100ms
     Hash#[], string    20.178M i/100ms
  Hash#fetch, string    20.050M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.161B (± 2.2%) i/s -     15.953B in   5.050046s
  Hash#fetch, symbol      3.194B (± 2.3%) i/s -     16.185B in   5.070167s
     Hash#[], string    199.965M (± 2.6%) i/s -      1.009B in   5.049042s
  Hash#fetch, string    199.871M (± 2.9%) i/s -      1.002B in   5.020247s

Comparison:
  Hash#fetch, symbol: 3194147802.7 i/s
     Hash#[], symbol: 3160567637.2 i/s - same-ish: difference falls within error
     Hash#[], string: 199964868.1 i/s - 15.97x  (± 0.00) slower
  Hash#fetch, string: 199871153.9 i/s - 15.98x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    91.840M i/100ms
             Hash#[]    92.348M i/100ms
          Hash#[] ||    92.326M i/100ms
          Hash#[] &&    92.317M i/100ms
          Hash#fetch    91.750M i/100ms
 Hash#fetch fallback    91.565M i/100ms
Calculating -------------------------------------
            Hash#dig    920.084M (± 1.5%) i/s -      4.684B in   5.091793s
             Hash#[]    920.773M (± 1.4%) i/s -      4.617B in   5.015736s
          Hash#[] ||    916.132M (± 1.9%) i/s -      4.616B in   5.040884s
          Hash#[] &&    920.409M (± 1.3%) i/s -      4.616B in   5.015906s
          Hash#fetch    920.881M (± 1.1%) i/s -      4.679B in   5.081940s
 Hash#fetch fallback    922.448M (± 0.7%) i/s -      4.670B in   5.062628s

Comparison:
 Hash#fetch fallback: 922448030.0 i/s
          Hash#fetch: 920880633.2 i/s - same-ish: difference falls within error
             Hash#[]: 920772828.9 i/s - same-ish: difference falls within error
          Hash#[] &&: 920409404.1 i/s - same-ish: difference falls within error
            Hash#dig: 920084313.4 i/s - same-ish: difference falls within error
          Hash#[] ||: 916131856.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   314.795M i/100ms
  Hash#fetch + block   315.443M i/100ms
    Hash#fetch + arg   317.869M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.157B (± 2.9%) i/s -     16.055B in   5.089216s
  Hash#fetch + block      3.148B (± 2.9%) i/s -     15.772B in   5.014927s
    Hash#fetch + arg      3.159B (± 4.2%) i/s -     15.893B in   5.040503s

Comparison:
    Hash#fetch + arg: 3159346998.5 i/s
  Hash#fetch + const: 3157449230.5 i/s - same-ish: difference falls within error
  Hash#fetch + block: 3147762286.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    21.653k i/100ms
         sort + to_h     8.672k i/100ms
Calculating -------------------------------------
      sort_by + to_h    491.543k (±10.1%) i/s -      2.447M in   5.033954s
         sort + to_h     95.174k (±24.7%) i/s -    450.944k in   5.031684s

Comparison:
      sort_by + to_h:   491542.8 i/s
         sort + to_h:    95174.4 i/s - 5.16x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   241.364k i/100ms
       Hash#each_key   257.359k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.424M (± 9.8%) i/s -     12.068M in   5.087868s
       Hash#each_key      2.586M (± 5.0%) i/s -     13.125M in   5.087954s

Comparison:
       Hash#each_key:  2586411.5 i/s
      Hash#keys.each:  2423658.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   309.000  i/100ms
           Hash#key?     3.511M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      3.740k (±11.2%) i/s -     18.540k in   5.054821s
           Hash#key?     35.114M (± 1.7%) i/s -    175.568M in   5.001503s

Comparison:
           Hash#key?: 35114135.7 i/s
  Hash#keys.include?:     3739.6 i/s - 9389.82x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    51.844k i/100ms
            Hash#[]=    60.547k i/100ms
Calculating -------------------------------------
         Hash#merge!    590.035k (± 7.8%) i/s -      2.955M in   5.052885s
            Hash#[]=    598.600k (± 7.8%) i/s -      3.027M in   5.095518s

Comparison:
            Hash#[]=:   598600.0 i/s
         Hash#merge!:   590035.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        28.224k i/100ms
      Hash#merge({})    20.503k i/100ms
 Hash#dup#merge!({})    30.586k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        378.124k (±12.8%) i/s -      1.863M in   5.033224s
      Hash#merge({})    201.157k (± 9.2%) i/s -      1.005M in   5.045421s
 Hash#dup#merge!({})    317.812k (± 8.7%) i/s -      1.590M in   5.053794s

Comparison:
{}#merge!(Hash) do end:   378123.6 i/s
 Hash#dup#merge!({}):   317811.7 i/s - same-ish: difference falls within error
      Hash#merge({}):   201156.8 i/s - 1.88x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   313.094M i/100ms
          Hash#merge   312.377M i/100ms
Calculating -------------------------------------
        Hash#**other      3.138B (± 2.3%) i/s -     15.968B in   5.091752s
          Hash#merge      3.174B (± 2.2%) i/s -     15.931B in   5.022089s

Comparison:
          Hash#merge: 3173912111.0 i/s
        Hash#**other: 3137809188.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.000k i/100ms
         Hash#merge!    59.848k i/100ms
Calculating -------------------------------------
          Hash#merge     11.549k (±11.5%) i/s -     58.000k in   5.106691s
         Hash#merge!    619.753k (± 4.4%) i/s -      3.112M in   5.031886s

Comparison:
         Hash#merge!:   619752.6 i/s
          Hash#merge:    11549.3 i/s - 53.66x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.455M i/100ms
Array#each               1.463M i/100ms
Array#each_w/_object     1.421M i/100ms
Hash#select-include      2.404M i/100ms
Calculating -------------------------------------
Hash#native-slice        18.166M (± 3.9%) i/s -     91.682M in   5.054855s
Array#each               15.567M (± 2.7%) i/s -     79.020M in   5.079923s
Array#each_w/_object     14.982M (± 6.4%) i/s -     75.333M in   5.059916s
Hash#select-include      23.946M (± 6.7%) i/s -    120.177M in   5.051069s

Comparison:
Hash#select-include : 23946472.0 i/s
Hash#native-slice   : 18166146.0 i/s - 1.32x  (± 0.00) slower
Array#each          : 15567464.3 i/s - 1.54x  (± 0.00) slower
Array#each_w/_object: 14982445.6 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   266.000  i/100ms
         Hash#value?   688.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      3.007k (±11.6%) i/s -     14.896k in   5.056886s
         Hash#value?      6.817k (± 0.5%) i/s -     34.400k in   5.045990s

Comparison:
         Hash#value?:     6817.5 i/s
Hash#values.include?:     3007.4 i/s - 2.27x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   312.698M i/100ms
                send   305.791M i/100ms
      method_missing   314.916M i/100ms
Calculating -------------------------------------
                call      3.167B (± 1.7%) i/s -     15.948B in   5.037709s
                send      3.147B (± 2.3%) i/s -     15.901B in   5.055166s
      method_missing      3.108B (± 2.5%) i/s -     15.746B in   5.069435s

Comparison:
                call: 3166644181.9 i/s
                send: 3147316570.2 i/s - same-ish: difference falls within error
      method_missing: 3107970643.1 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    63.560k i/100ms
      Symbol#to_proc    65.487k i/100ms
Calculating -------------------------------------
               Block    723.147k (±14.8%) i/s -      3.559M in   5.042712s
      Symbol#to_proc    757.572k (±10.6%) i/s -      3.733M in   5.006899s

Comparison:
      Symbol#to_proc:   757572.3 i/s
               Block:   723147.1 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   317.351M i/100ms
       block + yield   317.740M i/100ms
        unused block   311.235M i/100ms
               yield   311.896M i/100ms
Calculating -------------------------------------
          block.call      3.174B (± 1.6%) i/s -     16.185B in   5.100694s
       block + yield      3.162B (± 1.5%) i/s -     15.887B in   5.025665s
        unused block      3.164B (± 2.2%) i/s -     15.873B in   5.019013s
               yield      3.144B (± 3.0%) i/s -     15.907B in   5.064379s

Comparison:
          block.call: 3173920651.3 i/s
        unused block: 3164133955.2 i/s - same-ish: difference falls within error
       block + yield: 3161844570.2 i/s - same-ish: difference falls within error
               yield: 3144152152.2 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     4.642k i/100ms
      range#include?   159.000  i/100ms
       range#member?   215.000  i/100ms
       plain compare     8.198k i/100ms
Calculating -------------------------------------
        range#cover?     66.029k (±31.0%) i/s -    287.804k in   5.068685s
      range#include?      2.747k (±47.2%) i/s -     10.335k in   5.007677s
       range#member?      2.810k (±39.0%) i/s -     11.825k in   5.069677s
       plain compare     92.054k (±25.9%) i/s -    418.098k in   5.022132s

Comparison:
       plain compare:    92054.5 i/s
        range#cover?:    66028.6 i/s - same-ish: difference falls within error
       range#member?:     2810.3 i/s - 32.76x  (± 0.00) slower
      range#include?:     2747.3 i/s - 33.51x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    13.477M i/100ms
           String#=~    14.652M i/100ms
          Regexp#===    14.685M i/100ms
        String#match    11.653M i/100ms
Calculating -------------------------------------
       String#match?    135.283M (± 1.9%) i/s -    687.309M in   5.082527s
           String#=~    147.031M (± 1.9%) i/s -    747.252M in   5.084225s
          Regexp#===    146.360M (± 4.6%) i/s -    734.240M in   5.031082s
        String#match    116.423M (± 1.6%) i/s -    582.674M in   5.006265s

Comparison:
           String#=~: 147031170.3 i/s
          Regexp#===: 146360315.4 i/s - same-ish: difference falls within error
       String#match?: 135283227.7 i/s - 1.09x  (± 0.00) slower
        String#match: 116422544.1 i/s - 1.26x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.654M i/100ms
      String#casecmp     4.605M i/100ms
Calculating -------------------------------------
String#downcase + ==     29.799M (± 7.3%) i/s -    148.635M in   5.025362s
      String#casecmp     46.193M (± 6.2%) i/s -    230.272M in   5.005053s

Comparison:
      String#casecmp: 46193098.1 i/s
String#downcase + ==: 29799177.5 i/s - 1.55x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+    10.155M i/100ms
       String#concat    10.365M i/100ms
       String#append    10.323M i/100ms
         "foo" "bar"   319.566M i/100ms
  "#{'foo'}#{'bar'}"    10.519M i/100ms
Calculating -------------------------------------
            String#+    104.833M (± 3.3%) i/s -    528.036M in   5.042702s
       String#concat    104.930M (± 3.0%) i/s -    528.599M in   5.042285s
       String#append    104.224M (± 3.9%) i/s -    526.495M in   5.059777s
         "foo" "bar"      3.168B (± 2.5%) i/s -     15.978B in   5.046695s
  "#{'foo'}#{'bar'}"    103.425M (± 6.2%) i/s -    515.451M in   5.010146s

Comparison:
         "foo" "bar": 3168263372.2 i/s
       String#concat: 104929890.9 i/s - 30.19x  (± 0.00) slower
            String#+: 104833124.8 i/s - 30.22x  (± 0.00) slower
       String#append: 104224328.2 i/s - 30.40x  (± 0.00) slower
  "#{'foo'}#{'bar'}": 103424509.5 i/s - 30.63x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   311.296M i/100ms
          String#dup   314.192M i/100ms
Calculating -------------------------------------
           String#+@      3.137B (± 2.9%) i/s -     15.876B in   5.066116s
          String#dup      3.153B (± 1.7%) i/s -     16.024B in   5.083593s

Comparison:
          String#dup: 3152932258.2 i/s
           String#+@: 3136659292.9 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.391M i/100ms
       String#match?     1.659M i/100ms
    String#end_with?    10.775M i/100ms
Calculating -------------------------------------
           String#=~     14.181M (± 2.1%) i/s -     70.948M in   5.005518s
       String#match?     16.230M (± 0.5%) i/s -     81.283M in   5.008386s
    String#end_with?    107.179M (± 1.4%) i/s -    538.735M in   5.027576s

Comparison:
    String#end_with?: 107178903.7 i/s
       String#match?: 16229712.9 i/s - 6.60x  (± 0.00) slower
           String#=~: 14180730.6 i/s - 7.56x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   516.434k i/100ms
          String#sub   885.613k i/100ms
String#dup["string"]=
                         9.791M i/100ms
Calculating -------------------------------------
         String#gsub      8.565M (±11.2%) i/s -     42.348M in   5.013366s
          String#sub      9.811M (±10.3%) i/s -     48.709M in   5.041578s
String#dup["string"]=
                         97.108M (± 3.0%) i/s -    489.546M in   5.046170s

Comparison:
String#dup["string"]=: 97108314.9 i/s
          String#sub:  9810997.8 i/s - 9.90x  (± 0.00) slower
         String#gsub:  8564657.0 i/s - 11.34x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   196.257k i/100ms
           String#tr   158.788k i/100ms
Calculating -------------------------------------
         String#gsub      3.984M (±11.3%) i/s -     19.626M in   5.010957s
           String#tr      1.574M (± 4.5%) i/s -      7.939M in   5.054239s

Comparison:
         String#gsub:  3984409.7 i/s
           String#tr:  1574404.3 i/s - 2.53x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   319.513M i/100ms
         With Freeze   314.526M i/100ms
Calculating -------------------------------------
      Without Freeze      3.178B (± 2.2%) i/s -     15.976B in   5.029838s
         With Freeze      3.189B (± 1.8%) i/s -     16.041B in   5.031367s

Comparison:
         With Freeze: 3189230453.7 i/s
      Without Freeze: 3177848963.0 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/    10.118k i/100ms
      String#squeeze    78.804k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    152.059k (± 9.0%) i/s -    758.850k in   5.052058s
      String#squeeze    783.819k (± 3.1%) i/s -      3.940M in   5.031968s

Comparison:
      String#squeeze:   783819.4 i/s
 String#gsub/regex+/:   152059.1 i/s - 5.15x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     4.442M i/100ms
       String#match?     6.335M i/100ms
  String#start_with?    12.304M i/100ms
Calculating -------------------------------------
           String#=~     47.423M (± 3.3%) i/s -    239.871M in   5.063923s
       String#match?     63.140M (± 2.2%) i/s -    316.770M in   5.019591s
  String#start_with?    122.966M (± 2.8%) i/s -    615.225M in   5.007609s

Comparison:
  String#start_with?: 122966099.7 i/s
       String#match?: 63139510.0 i/s - 1.95x  (± 0.00) slower
           String#=~: 47423359.1 i/s - 2.59x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    57.973k i/100ms
    String#[0, n] ==   293.259k i/100ms
   String#[RANGE] ==   379.887k i/100ms
   String#[0...n] ==   262.400k i/100ms
Calculating -------------------------------------
  String#start_with?      6.982M (± 2.7%) i/s -     34.900M in   5.006460s
    String#[0, n] ==      2.973M (± 4.8%) i/s -     14.956M in   5.043521s
   String#[RANGE] ==      3.804M (± 3.9%) i/s -     18.994M in   5.001539s
   String#[0...n] ==      2.565M (± 5.1%) i/s -     12.858M in   5.028379s

Comparison:
  String#start_with?:  6981618.5 i/s
   String#[RANGE] ==:  3803839.6 i/s - 1.84x  (± 0.00) slower
    String#[0, n] ==:  2972631.8 i/s - 2.35x  (± 0.00) slower
   String#[0...n] ==:  2564965.1 i/s - 2.72x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     8.852M i/100ms
 String#sub!'string'   954.297k i/100ms
String#gsub!'string'   901.752k i/100ms
  String#[/regexp/]=     2.679M i/100ms
 String#sub!/regexp/     1.388M i/100ms
String#gsub!/regexp/   815.502k i/100ms
Calculating -------------------------------------
  String#['string']=     97.848M (± 0.2%) i/s -    495.714M in   5.066178s
 String#sub!'string'     10.155M (±18.9%) i/s -     46.761M in   5.044194s
String#gsub!'string'      8.902M (± 8.0%) i/s -     44.186M in   5.004050s
  String#[/regexp/]=     26.934M (± 3.4%) i/s -    136.616M in   5.078501s
 String#sub!/regexp/     13.217M (±11.0%) i/s -     65.232M in   5.006234s
String#gsub!/regexp/      8.038M (± 8.3%) i/s -     39.960M in   5.015371s

Comparison:
  String#['string']=: 97848115.5 i/s
  String#[/regexp/]=: 26933735.7 i/s - 3.63x  (± 0.00) slower
 String#sub!/regexp/: 13216766.1 i/s - 7.40x  (± 0.00) slower
 String#sub!'string': 10155207.4 i/s - 9.64x  (± 0.00) slower
String#gsub!'string':  8901531.8 i/s - 10.99x  (± 0.00) slower
String#gsub!/regexp/:  8037609.0 i/s - 12.17x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     2.888M i/100ms
        String#chomp     5.853M i/100ms
String#delete_suffix    15.195M i/100ms
Calculating -------------------------------------
          String#sub     29.658M (± 4.6%) i/s -    150.194M in   5.076222s
        String#chomp     58.256M (± 2.8%) i/s -    292.643M in   5.027922s
String#delete_suffix    151.586M (± 8.5%) i/s -    759.744M in   5.056734s

Comparison:
String#delete_suffix: 151585838.0 i/s
        String#chomp: 58255662.7 i/s - 2.60x  (± 0.00) slower
          String#sub: 29657814.5 i/s - 5.11x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   315.987M i/100ms
          String#sub    16.018M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.148B (± 3.0%) i/s -     15.799B in   5.023916s
          String#sub    161.275M (± 1.0%) i/s -    816.893M in   5.065733s

Comparison:
String#delete_prefix: 3147802275.7 i/s
          String#sub: 161274949.6 i/s - 19.52x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.505M i/100ms
    String#unpack[0]     1.875M i/100ms
Calculating -------------------------------------
      String#unpack1     18.231M (± 6.4%) i/s -     91.790M in   5.066318s
    String#unpack[0]     18.141M (± 5.9%) i/s -     91.860M in   5.088163s

Comparison:
      String#unpack1: 18231049.3 i/s
    String#unpack[0]: 18141386.0 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.1.0-dev-a089f078, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    21.605k i/100ms
          Time.parse   326.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    502.531k (±20.5%) i/s -      2.333M in   4.999343s
          Time.parse      5.316k (±25.6%) i/s -     24.776k in   5.038698s

Comparison:
        Time.iso8601:   502531.2 i/s
          Time.parse:     5316.2 i/s - 94.53x  (± 0.00) slower

