$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       113.407M i/100ms
Function with splat arguments
                         1.153k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.134B (± 0.4%) i/s -      5.670B in   4.999930s
Function with splat arguments
                         12.619k (± 8.7%) i/s -     63.415k in   5.075785s

Comparison:
Function with single Array argument: 1134108390.9 i/s
Function with splat arguments:    12619.2 i/s - 89871.58x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   113.294M i/100ms
Sequential Assignment
                       113.753M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.134B (± 0.7%) i/s -      5.778B in   5.094270s
Sequential Assignment
                          1.135B (± 0.4%) i/s -      5.688B in   5.011758s

Comparison:
Sequential Assignment: 1134882063.9 i/s
 Parallel Assignment: 1134259751.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   113.438M i/100ms
       attr_accessor   113.327M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.133B (± 0.4%) i/s -      5.672B in   5.004080s
       attr_accessor      1.137B (± 0.9%) i/s -      5.780B in   5.085864s

Comparison:
       attr_accessor: 1136508020.8 i/s
   getter_and_setter: 1133476444.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     9.589k i/100ms
         respond_to?   113.701M i/100ms
Calculating -------------------------------------
      begin...rescue     69.683k (± 6.5%) i/s -    354.793k in   5.123764s
         respond_to?      1.135B (± 0.6%) i/s -      5.685B in   5.007249s

Comparison:
         respond_to?: 1135397505.1 i/s
      begin...rescue:    69682.6 i/s - 16293.86x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   113.322M i/100ms
             &method   113.327M i/100ms
Calculating -------------------------------------
              normal      1.135B (± 0.3%) i/s -      5.779B in   5.094116s
             &method      1.135B (± 0.9%) i/s -      5.780B in   5.090726s

Comparison:
             &method: 1135412028.7 i/s
              normal: 1134541320.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       119.000  i/100ms
       define_method   133.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.483k (±55.4%) i/s -      6.664k in   5.080870s
       define_method      6.318k (±52.7%) i/s -      6.251k in   5.449568s

Comparison:
       define_method:     6317.9 i/s
module_eval with string:     2482.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    84.323k i/100ms
       Kernel#format    77.142k i/100ms
            String#%    13.735k i/100ms
Calculating -------------------------------------
         Float#round    950.242k (± 2.8%) i/s -      4.806M in   5.062334s
       Kernel#format    786.189k (± 2.6%) i/s -      3.934M in   5.007767s
            String#%    147.031k (±10.5%) i/s -    727.955k in   5.023779s

Comparison:
         Float#round:   950242.1 i/s
       Kernel#format:   786189.4 i/s - 1.21x  (± 0.00) slower
            String#%:   147031.1 i/s - 6.46x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.262M i/100ms
          OpenStruct   113.504M i/100ms
Calculating -------------------------------------
                Hash      1.135B (± 0.9%) i/s -      5.776B in   5.090396s
          OpenStruct      1.137B (± 0.8%) i/s -      5.789B in   5.092257s

Comparison:
          OpenStruct: 1136829845.3 i/s
                Hash: 1134843770.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.280M i/100ms
          OpenStruct     3.351k i/100ms
Calculating -------------------------------------
                Hash      1.130B (± 1.4%) i/s -      5.664B in   5.011804s
          OpenStruct     34.261k (±11.8%) i/s -    170.901k in   5.082069s

Comparison:
                Hash: 1130389633.1 i/s
          OpenStruct:    34261.2 i/s - 32993.26x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   782.122k i/100ms
  ancestors.include?   159.042k i/100ms
Calculating -------------------------------------
  less than or equal      8.710M (± 2.5%) i/s -     43.799M in   5.031694s
  ancestors.include?      1.708M (± 7.5%) i/s -      8.588M in   5.071229s

Comparison:
  less than or equal:  8710294.7 i/s
  ancestors.include?:  1707944.5 i/s - 5.10x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     11.336  (± 0.0%) i/s -     57.000  in   5.028093s
         Kernel loop     11.364  (± 0.0%) i/s -     57.000  in   5.015771s

Comparison:
         Kernel loop:       11.4 i/s
          While Loop:       11.3 i/s - 1.00x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   113.398M i/100ms
         Array#first   113.358M i/100ms
Calculating -------------------------------------
           Array#[0]      1.134B (± 0.4%) i/s -      5.670B in   5.000740s
         Array#first      1.141B (± 1.3%) i/s -      5.781B in   5.069168s

Comparison:
         Array#first: 1140658428.4 i/s
           Array#[0]: 1133832843.4 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   113.285M i/100ms
          Array#last   113.685M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.135B (± 1.1%) i/s -      5.778B in   5.088689s
          Array#last      1.136B (± 0.9%) i/s -      5.684B in   5.003585s

Comparison:
          Array#last: 1136135054.4 i/s
          Array#[-1]: 1135490384.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   641.576k i/100ms
Calculating -------------------------------------
                find      4.423  (±22.6%) i/s -     14.000  in   5.080411s
             bsearch      6.587M (± 4.6%) i/s -     33.362M in   5.076400s

Comparison:
             bsearch:  6586817.6 i/s
                find:        4.4 i/s - 1489267.66x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.069  (± 0.0%) i/s -      1.000  in  14.441553s
        Array#insert      1.028  (± 0.0%) i/s -      6.000  in   5.837770s

Comparison:
        Array#insert:        1.0 i/s
       Array#unshift:        0.1 i/s - 14.84x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   113.450M i/100ms
          Array#size   113.528M i/100ms
         Array#count   113.501M i/100ms
Calculating -------------------------------------
        Array#length      1.133B (± 0.8%) i/s -      5.673B in   5.006906s
          Array#size      1.139B (± 1.0%) i/s -      5.790B in   5.083066s
         Array#count      1.138B (± 0.8%) i/s -      5.789B in   5.086478s

Comparison:
          Array#size: 1139168185.7 i/s
         Array#count: 1138089634.2 i/s - same-ish: difference falls within error
        Array#length: 1133007630.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    22.384k i/100ms
        Array#sample     2.702M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    250.135k (± 2.2%) i/s -      1.254M in   5.014045s
        Array#sample     27.029M (± 0.1%) i/s -    137.816M in   5.098828s

Comparison:
        Array#sample: 27029027.1 i/s
 Array#shuffle.first:   250134.5 i/s - 108.06x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601     1.022k i/100ms
          Date.parse   859.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     47.908k (±36.9%) i/s -    193.158k in   5.012618s
          Date.parse     25.037k (±35.4%) i/s -     99.644k in   5.006945s

Comparison:
        Date.iso8601:    47908.2 i/s
          Date.parse:    25037.0 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   216.372k i/100ms
           Array#map   926.569k i/100ms
Calculating -------------------------------------
   Array#each + push      2.301M (± 6.8%) i/s -     11.468M in   5.020981s
           Array#map      9.554M (± 7.2%) i/s -     48.182M in   5.080800s

Comparison:
           Array#map:  9553559.5 i/s
   Array#each + push:  2301044.0 i/s - 4.15x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     8.580M i/100ms
               #each    24.857M i/100ms
Calculating -------------------------------------
            For loop     85.803M (± 0.0%) i/s -    437.565M in   5.099680s
               #each    248.498M (± 0.6%) i/s -      1.243B in   5.001678s

Comparison:
               #each: 248497552.3 i/s
            For loop: 85802515.4 i/s - 2.90x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   821.437k i/100ms
     each_with_index     1.012M i/100ms
Calculating -------------------------------------
          While Loop      8.216M (± 0.1%) i/s -     41.893M in   5.098897s
     each_with_index     10.111M (± 0.3%) i/s -     50.578M in   5.002427s

Comparison:
     each_with_index: 10110738.9 i/s
          While Loop:  8216149.6 i/s - 1.23x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   156.985k i/100ms
      inject to_proc   160.932k i/100ms
        inject block   158.664k i/100ms
Calculating -------------------------------------
       inject symbol      1.573M (± 0.5%) i/s -      8.006M in   5.091349s
      inject to_proc      1.603M (± 0.2%) i/s -      8.047M in   5.019776s
        inject block      1.575M (± 0.1%) i/s -      7.933M in   5.037526s

Comparison:
      inject to_proc:  1602983.7 i/s
        inject block:  1574821.0 i/s - 1.02x  (± 0.00) slower
       inject symbol:  1572554.8 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    16.330k i/100ms
   Array#map.flatten    17.227k i/100ms
      Array#flat_map    42.290k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    179.455k (± 4.6%) i/s -    898.150k in   5.015889s
   Array#map.flatten    178.375k (± 3.0%) i/s -    895.804k in   5.026665s
      Array#flat_map    435.066k (± 4.8%) i/s -      2.199M in   5.066494s

Comparison:
      Array#flat_map:   435066.1 i/s
Array#map.flatten(1):   179454.6 i/s - 2.42x  (± 0.00) slower
   Array#map.flatten:   178375.2 i/s - 2.44x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   212.757k i/100ms
  Array#reverse_each     1.503M i/100ms
Calculating -------------------------------------
  Array#reverse.each      2.158M (± 2.2%) i/s -     10.851M in   5.030235s
  Array#reverse_each     14.925M (± 0.0%) i/s -     75.167M in   5.036218s

Comparison:
  Array#reverse_each: 14925329.8 i/s
  Array#reverse.each:  2158182.2 i/s - 6.92x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       636.439k i/100ms
   Enumerable#detect     2.686M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          6.846M (± 7.4%) i/s -    136.198M in  20.057990s
   Enumerable#detect     26.867M (± 0.3%) i/s -    539.830M in  20.092900s

Comparison:
   Enumerable#detect: 26866912.6 i/s
Enumerable#select.first:  6846120.4 i/s - 3.92x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       188.298k i/100ms
Enumerable#select.last
                       398.619k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.110M (± 6.4%) i/s -     10.545M in   5.031833s
Enumerable#select.last
                          3.876M (± 6.7%) i/s -     19.532M in   5.072734s

Comparison:
Enumerable#select.last:  3875958.5 i/s
Enumerable#reverse.detect:  2109916.5 i/s - 1.84x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.646k i/100ms
  Enumerable#sort_by     2.769k i/100ms
     Enumerable#sort     3.590k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         27.221k (±14.9%) i/s -    129.654k in   5.057233s
  Enumerable#sort_by     23.687k (±19.4%) i/s -    113.529k in   5.036578s
     Enumerable#sort     38.831k (± 2.3%) i/s -    197.450k in   5.087746s

Comparison:
     Enumerable#sort:    38830.5 i/s
Enumerable#sort_by (Symbol#to_proc):    27221.1 i/s - 1.43x  (± 0.00) slower
  Enumerable#sort_by:    23687.4 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   530.656k i/100ms
Enumerable#sort_by...first
                         5.762k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      5.309M (± 0.0%) i/s -     27.063M in   5.097589s
Enumerable#sort_by...first
                         64.800k (± 2.6%) i/s -    328.434k in   5.071941s

Comparison:
   Enumerable#min_by:  5309071.3 i/s
Enumerable#sort_by...first:    64800.1 i/s - 81.93x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   333.527k i/100ms
            Hash#dup   329.227k i/100ms
Calculating -------------------------------------
              Hash[]      3.672M (± 6.4%) i/s -     18.344M in   5.016814s
            Hash#dup      3.750M (± 8.1%) i/s -     18.766M in   5.052018s

Comparison:
            Hash#dup:  3749709.3 i/s
              Hash[]:  3671728.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   113.824M i/100ms
  Hash#fetch, symbol   113.328M i/100ms
     Hash#[], string    15.763M i/100ms
  Hash#fetch, string    13.612M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.134B (± 0.7%) i/s -      5.691B in   5.019617s
  Hash#fetch, symbol      1.135B (± 0.6%) i/s -      5.780B in   5.094004s
     Hash#[], string    157.272M (± 0.7%) i/s -    788.143M in   5.011573s
  Hash#fetch, string    136.677M (± 1.0%) i/s -    694.193M in   5.079626s

Comparison:
  Hash#fetch, symbol: 1134651600.1 i/s
     Hash#[], symbol: 1133850032.4 i/s - same-ish: difference falls within error
     Hash#[], string: 157271660.7 i/s - 7.21x  (± 0.00) slower
  Hash#fetch, string: 136676871.9 i/s - 8.30x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    49.713M i/100ms
             Hash#[]    49.784M i/100ms
          Hash#[] ||    49.750M i/100ms
          Hash#[] &&    49.799M i/100ms
          Hash#fetch    49.808M i/100ms
 Hash#fetch fallback    49.747M i/100ms
Calculating -------------------------------------
            Hash#dig    497.595M (± 0.2%) i/s -      2.535B in   5.095233s
             Hash#[]    497.405M (± 0.4%) i/s -      2.489B in   5.004433s
          Hash#[] ||    497.622M (± 0.3%) i/s -      2.537B in   5.098818s
          Hash#[] &&    497.510M (± 0.2%) i/s -      2.490B in   5.004829s
          Hash#fetch    496.908M (± 1.0%) i/s -      2.490B in   5.012312s
 Hash#fetch fallback    497.478M (± 0.4%) i/s -      2.487B in   5.000003s

Comparison:
          Hash#[] ||: 497621626.6 i/s
            Hash#dig: 497594671.9 i/s - same-ish: difference falls within error
          Hash#[] &&: 497510314.1 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 497477939.7 i/s - same-ish: difference falls within error
             Hash#[]: 497405192.3 i/s - same-ish: difference falls within error
          Hash#fetch: 496908284.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   113.247M i/100ms
  Hash#fetch + block   113.535M i/100ms
    Hash#fetch + arg   113.654M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.134B (± 0.6%) i/s -      5.776B in   5.091695s
  Hash#fetch + block      1.135B (± 0.8%) i/s -      5.677B in   5.002214s
    Hash#fetch + arg      1.136B (± 0.6%) i/s -      5.683B in   5.004421s

Comparison:
    Hash#fetch + arg: 1135578037.7 i/s
  Hash#fetch + block: 1134915864.2 i/s - same-ish: difference falls within error
  Hash#fetch + const: 1134360640.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    22.405k i/100ms
         sort + to_h   309.000  i/100ms
Calculating -------------------------------------
      sort_by + to_h    363.028k (± 6.3%) i/s -      1.815M in   5.020686s
         sort + to_h    141.056k (±10.9%) i/s -    680.418k in   4.992698s

Comparison:
      sort_by + to_h:   363028.3 i/s
         sort + to_h:   141055.8 i/s - 2.57x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   149.133k i/100ms
       Hash#each_key   194.633k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.926M (±12.6%) i/s -      9.395M in   5.062635s
       Hash#each_key      1.912M (± 3.3%) i/s -      9.732M in   5.095429s

Comparison:
      Hash#keys.each:  1925770.7 i/s
       Hash#each_key:  1912031.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   195.000  i/100ms
           Hash#key?     2.708M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      2.195k (±11.1%) i/s -     10.920k in   5.082519s
           Hash#key?     27.039M (± 0.3%) i/s -    135.419M in   5.008343s

Comparison:
           Hash#key?: 27038856.4 i/s
  Hash#keys.include?:     2195.1 i/s - 12317.87x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    39.177k i/100ms
            Hash#[]=    39.325k i/100ms
Calculating -------------------------------------
         Hash#merge!    407.197k (± 5.1%) i/s -      2.037M in   5.015812s
            Hash#[]=    401.293k (± 7.3%) i/s -      2.006M in   5.039755s

Comparison:
         Hash#merge!:   407197.1 i/s
            Hash#[]=:   401293.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        25.636k i/100ms
      Hash#merge({})    12.578k i/100ms
 Hash#dup#merge!({})    22.429k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        255.001k (± 7.6%) i/s -      1.282M in   5.056962s
      Hash#merge({})    142.314k (± 8.3%) i/s -    716.946k in   5.075939s
 Hash#dup#merge!({})    243.100k (± 4.8%) i/s -      1.234M in   5.088004s

Comparison:
{}#merge!(Hash) do end:   255000.9 i/s
 Hash#dup#merge!({}):   243099.9 i/s - same-ish: difference falls within error
      Hash#merge({}):   142313.7 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   113.443M i/100ms
          Hash#merge   113.285M i/100ms
Calculating -------------------------------------
        Hash#**other      1.135B (± 0.5%) i/s -      5.786B in   5.098798s
          Hash#merge      1.135B (± 0.9%) i/s -      5.778B in   5.091279s

Comparison:
          Hash#merge: 1134879086.1 i/s
        Hash#**other: 1134723034.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   550.000  i/100ms
         Hash#merge!    39.702k i/100ms
Calculating -------------------------------------
          Hash#merge      6.374k (± 9.6%) i/s -     31.900k in   5.063341s
         Hash#merge!    404.460k (± 7.4%) i/s -      2.025M in   5.035558s

Comparison:
         Hash#merge!:   404460.2 i/s
          Hash#merge:     6374.4 i/s - 63.45x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.416M i/100ms
Array#each               1.344M i/100ms
Array#each_w/_object     1.314M i/100ms
Hash#select-include      1.855M i/100ms
Calculating -------------------------------------
Hash#native-slice        15.597M (± 3.9%) i/s -     77.875M in   5.000964s
Array#each               13.612M (± 2.3%) i/s -     68.519M in   5.036368s
Array#each_w/_object     13.146M (± 7.3%) i/s -     65.695M in   5.040451s
Hash#select-include      17.926M (± 7.3%) i/s -     89.046M in   5.008870s

Comparison:
Hash#select-include : 17925675.1 i/s
Hash#native-slice   : 15596873.6 i/s - 1.15x  (± 0.00) slower
Array#each          : 13612261.0 i/s - 1.32x  (± 0.00) slower
Array#each_w/_object: 13146436.8 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   177.000  i/100ms
         Hash#value?   355.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.912k (± 9.0%) i/s -      9.558k in   5.061810s
         Hash#value?      3.536k (± 0.2%) i/s -     17.750k in   5.019201s

Comparison:
         Hash#value?:     3536.4 i/s
Hash#values.include?:     1912.0 i/s - 1.85x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   113.229M i/100ms
                send   113.409M i/100ms
      method_missing   113.708M i/100ms
Calculating -------------------------------------
                call      1.135B (± 0.5%) i/s -      5.775B in   5.089478s
                send      1.136B (± 0.8%) i/s -      5.784B in   5.090006s
      method_missing      1.137B (± 1.1%) i/s -      5.685B in   5.002020s

Comparison:
      method_missing: 1136760149.0 i/s
                send: 1136384819.8 i/s - same-ish: difference falls within error
                call: 1134659548.5 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    28.925k i/100ms
      Symbol#to_proc    33.553k i/100ms
Calculating -------------------------------------
               Block    332.480k (± 7.3%) i/s -      1.678M in   5.073418s
      Symbol#to_proc    334.890k (± 7.9%) i/s -      1.678M in   5.041613s

Comparison:
      Symbol#to_proc:   334890.2 i/s
               Block:   332479.7 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   113.296M i/100ms
       block + yield   113.287M i/100ms
        unused block   113.320M i/100ms
               yield   113.538M i/100ms
Calculating -------------------------------------
          block.call      1.134B (± 0.7%) i/s -      5.778B in   5.097394s
       block + yield      1.137B (± 1.0%) i/s -      5.778B in   5.082922s
        unused block      1.133B (± 0.4%) i/s -      5.779B in   5.098957s
               yield      1.135B (± 0.8%) i/s -      5.677B in   5.003550s

Comparison:
       block + yield: 1136773081.8 i/s
               yield: 1134646430.4 i/s - same-ish: difference falls within error
          block.call: 1133599175.7 i/s - same-ish: difference falls within error
        unused block: 1133450462.0 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    16.385k i/100ms
      range#include?   391.000  i/100ms
       range#member?   913.000  i/100ms
       plain compare    37.848k i/100ms
Calculating -------------------------------------
        range#cover?    194.348k (±24.1%) i/s -    901.175k in   5.020139s
      range#include?     11.771k (±30.6%) i/s -     50.439k in   5.012551s
       range#member?     10.465k (±32.2%) i/s -     47.476k in   5.127422s
       plain compare    453.748k (± 5.5%) i/s -      2.271M in   5.024141s

Comparison:
       plain compare:   453747.5 i/s
        range#cover?:   194347.9 i/s - 2.33x  (± 0.00) slower
      range#include?:    11770.7 i/s - 38.55x  (± 0.00) slower
       range#member?:    10465.2 i/s - 43.36x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    10.829M i/100ms
           String#=~     8.636M i/100ms
          Regexp#===    10.000M i/100ms
        String#match     8.530M i/100ms
Calculating -------------------------------------
       String#match?    108.514M (± 0.1%) i/s -    552.257M in   5.089292s
           String#=~     91.104M (± 0.0%) i/s -    457.706M in   5.023972s
          Regexp#===    101.603M (± 0.4%) i/s -    509.989M in   5.019515s
        String#match     85.294M (± 0.1%) i/s -    426.498M in   5.000352s

Comparison:
       String#match?: 108513587.4 i/s
          Regexp#===: 101602530.7 i/s - 1.07x  (± 0.00) slower
           String#=~: 91104440.5 i/s - 1.19x  (± 0.00) slower
        String#match: 85293626.8 i/s - 1.27x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.140M i/100ms
      String#casecmp     3.587M i/100ms
Calculating -------------------------------------
String#downcase + ==     23.101M (± 7.2%) i/s -    115.534M in   5.039669s
      String#casecmp     34.690M (± 5.3%) i/s -    175.785M in   5.081697s

Comparison:
      String#casecmp: 34690016.4 i/s
String#downcase + ==: 23100536.2 i/s - 1.50x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     6.114M i/100ms
       String#concat     6.807M i/100ms
       String#append     7.341M i/100ms
         "foo" "bar"   114.050M i/100ms
  "#{'foo'}#{'bar'}"   113.628M i/100ms
Calculating -------------------------------------
            String#+     74.385M (± 2.4%) i/s -    372.933M in   5.016601s
       String#concat     73.873M (± 3.4%) i/s -    374.370M in   5.073766s
       String#append     74.575M (± 3.0%) i/s -    374.409M in   5.025283s
         "foo" "bar"      1.131B (± 2.9%) i/s -      5.702B in   5.046721s
  "#{'foo'}#{'bar'}"      1.136B (± 0.8%) i/s -      5.681B in   5.001618s

Comparison:
  "#{'foo'}#{'bar'}": 1135977295.5 i/s
         "foo" "bar": 1131046778.2 i/s - same-ish: difference falls within error
       String#append: 74574848.4 i/s - 15.23x  (± 0.00) slower
            String#+: 74385012.6 i/s - 15.27x  (± 0.00) slower
       String#concat: 73873234.6 i/s - 15.38x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   113.709M i/100ms
          String#dup   113.566M i/100ms
Calculating -------------------------------------
           String#+@      1.135B (± 0.8%) i/s -      5.685B in   5.007630s
          String#dup      1.135B (± 0.7%) i/s -      5.678B in   5.001060s

Comparison:
          String#dup: 1135468059.8 i/s
           String#+@: 1135434177.8 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   919.185k i/100ms
       String#match?     1.192M i/100ms
    String#end_with?     7.539M i/100ms
Calculating -------------------------------------
           String#=~      9.566M (± 1.9%) i/s -     48.717M in   5.094550s
       String#match?     11.635M (± 0.0%) i/s -     58.415M in   5.020629s
    String#end_with?     75.400M (± 0.2%) i/s -    384.506M in   5.099585s

Comparison:
    String#end_with?: 75399876.3 i/s
       String#match?: 11634932.4 i/s - 6.48x  (± 0.00) slower
           String#=~:  9566479.2 i/s - 7.88x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   444.071k i/100ms
          String#sub   734.465k i/100ms
String#dup["string"]=
                         7.546M i/100ms
Calculating -------------------------------------
         String#gsub      6.444M (± 8.5%) i/s -     31.973M in   5.021654s
          String#sub      7.267M (±10.8%) i/s -     35.989M in   5.037566s
String#dup["string"]=
                         75.419M (± 0.2%) i/s -    377.289M in   5.002563s

Comparison:
String#dup["string"]=: 75419497.5 i/s
          String#sub:  7266865.8 i/s - 10.38x  (± 0.00) slower
         String#gsub:  6443817.0 i/s - 11.70x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   233.296k i/100ms
           String#tr   114.006k i/100ms
Calculating -------------------------------------
         String#gsub      2.840M (± 5.2%) i/s -     14.231M in   5.024840s
           String#tr      1.150M (± 4.1%) i/s -      5.814M in   5.066642s

Comparison:
         String#gsub:  2839933.8 i/s
           String#tr:  1149541.1 i/s - 2.47x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   114.040M i/100ms
         With Freeze   113.372M i/100ms
Calculating -------------------------------------
      Without Freeze      1.135B (± 0.8%) i/s -      5.702B in   5.022631s
         With Freeze      1.135B (± 0.4%) i/s -      5.782B in   5.095992s

Comparison:
      Without Freeze: 1135330987.1 i/s
         With Freeze: 1134624818.7 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     7.226k i/100ms
      String#squeeze    46.550k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     97.685k (± 9.3%) i/s -    484.142k in   5.017568s
      String#squeeze    467.316k (± 2.2%) i/s -      2.374M in   5.082963s

Comparison:
      String#squeeze:   467316.3 i/s
 String#gsub/regex+/:    97685.5 i/s - 4.78x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     3.466M i/100ms
       String#match?     5.059M i/100ms
  String#start_with?     9.558M i/100ms
Calculating -------------------------------------
           String#=~     35.272M (± 3.2%) i/s -    176.791M in   5.017423s
       String#match?     50.081M (± 0.1%) i/s -    252.950M in   5.050795s
  String#start_with?     95.521M (± 0.2%) i/s -    477.881M in   5.002892s

Comparison:
  String#start_with?: 95521280.3 i/s
       String#match?: 50081277.3 i/s - 1.91x  (± 0.00) slower
           String#=~: 35272086.0 i/s - 2.71x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   101.452k i/100ms
    String#[0, n] ==   233.882k i/100ms
   String#[RANGE] ==   325.313k i/100ms
   String#[0...n] ==   218.163k i/100ms
Calculating -------------------------------------
  String#start_with?      3.825M (± 0.1%) i/s -     19.174M in   5.012726s
    String#[0, n] ==      2.339M (± 4.1%) i/s -     11.694M in   5.008733s
   String#[RANGE] ==      3.274M (± 2.4%) i/s -     16.591M in   5.070273s
   String#[0...n] ==      2.172M (± 3.1%) i/s -     10.908M in   5.027403s

Comparison:
  String#start_with?:  3825151.2 i/s
   String#[RANGE] ==:  3274099.7 i/s - 1.17x  (± 0.00) slower
    String#[0, n] ==:  2338609.4 i/s - 1.64x  (± 0.00) slower
   String#[0...n] ==:  2171864.4 i/s - 1.76x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     7.545M i/100ms
 String#sub!'string'   721.458k i/100ms
String#gsub!'string'   626.163k i/100ms
  String#[/regexp/]=     1.973M i/100ms
 String#sub!/regexp/   895.132k i/100ms
String#gsub!/regexp/   561.520k i/100ms
Calculating -------------------------------------
  String#['string']=     75.448M (± 0.1%) i/s -    377.234M in   4.999955s
 String#sub!'string'      7.885M (±16.3%) i/s -     37.516M in   5.075711s
String#gsub!'string'      6.273M (± 5.0%) i/s -     31.308M in   5.004581s
  String#[/regexp/]=     20.511M (± 4.2%) i/s -    102.615M in   5.012995s
 String#sub!/regexp/      8.937M (± 9.8%) i/s -     44.757M in   5.069130s
String#gsub!/regexp/      5.835M (± 7.2%) i/s -     29.199M in   5.032629s

Comparison:
  String#['string']=: 75447529.9 i/s
  String#[/regexp/]=: 20511383.2 i/s - 3.68x  (± 0.00) slower
 String#sub!/regexp/:  8936618.6 i/s - 8.44x  (± 0.00) slower
 String#sub!'string':  7884766.8 i/s - 9.57x  (± 0.00) slower
String#gsub!'string':  6272639.1 i/s - 12.03x  (± 0.00) slower
String#gsub!/regexp/:  5835016.6 i/s - 12.93x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     2.166M i/100ms
        String#chomp     4.290M i/100ms
String#delete_suffix     9.199M i/100ms
Calculating -------------------------------------
          String#sub     22.295M (± 4.7%) i/s -    112.652M in   5.065285s
        String#chomp     41.219M (± 0.3%) i/s -    210.196M in   5.099560s
String#delete_suffix     98.201M (± 8.1%) i/s -    487.551M in   5.009931s

Comparison:
String#delete_suffix: 98201262.6 i/s
        String#chomp: 41218830.6 i/s - 2.38x  (± 0.00) slower
          String#sub: 22295173.2 i/s - 4.40x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   113.637M i/100ms
          String#sub    11.005M i/100ms
Calculating -------------------------------------
String#delete_prefix      1.133B (± 1.3%) i/s -      5.682B in   5.016631s
          String#sub    110.115M (± 0.2%) i/s -    561.253M in   5.096979s

Comparison:
String#delete_prefix: 1132802532.5 i/s
          String#sub: 110115247.0 i/s - 10.29x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.542M i/100ms
    String#unpack[0]     1.608M i/100ms
Calculating -------------------------------------
      String#unpack1     15.970M (± 2.8%) i/s -     80.191M in   5.025474s
    String#unpack[0]     15.808M (± 7.0%) i/s -     78.789M in   5.028706s

Comparison:
      String#unpack1: 15969699.8 i/s
    String#unpack[0]: 15808112.9 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.0.0-dev-8fb92374, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    19.928k i/100ms
          Time.parse   204.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    241.229k (±13.0%) i/s -      1.176M in   5.010054s
          Time.parse      9.127k (±27.5%) i/s -     39.576k in   5.011385s

Comparison:
        Time.iso8601:   241229.1 i/s
          Time.parse:     9126.6 i/s - 26.43x  (± 0.00) slower

