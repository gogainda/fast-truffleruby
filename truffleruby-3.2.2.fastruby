$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       113.340M i/100ms
Function with splat arguments
                         1.154k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.132B (± 0.3%) i/s -      5.667B in   5.006652s
Function with splat arguments
                         13.012k (± 8.6%) i/s -     64.624k in   5.017147s

Comparison:
Function with single Array argument: 1131903366.2 i/s
Function with splat arguments:    13012.1 i/s - 86988.30x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   113.271M i/100ms
Sequential Assignment
                       113.234M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.134B (± 0.7%) i/s -      5.777B in   5.092958s
Sequential Assignment
                          1.135B (± 0.7%) i/s -      5.775B in   5.088619s

Comparison:
Sequential Assignment: 1134920946.5 i/s
 Parallel Assignment: 1134325164.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   113.699M i/100ms
       attr_accessor   113.605M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.134B (± 0.8%) i/s -      5.685B in   5.015063s
       attr_accessor      1.135B (± 0.7%) i/s -      5.680B in   5.004160s

Comparison:
       attr_accessor: 1135158021.9 i/s
   getter_and_setter: 1133648349.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    10.283k i/100ms
         respond_to?   113.364M i/100ms
Calculating -------------------------------------
      begin...rescue     71.244k (± 6.2%) i/s -    359.905k in   5.077808s
         respond_to?      1.133B (± 0.4%) i/s -      5.668B in   5.001865s

Comparison:
         respond_to?: 1133230831.2 i/s
      begin...rescue:    71243.9 i/s - 15906.37x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   114.546M i/100ms
             &method   113.778M i/100ms
Calculating -------------------------------------
              normal      1.135B (± 0.8%) i/s -      5.727B in   5.045610s
             &method      1.134B (± 0.3%) i/s -      5.689B in   5.015844s

Comparison:
              normal: 1135174604.8 i/s
             &method: 1134194142.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       120.000  i/100ms
       define_method   136.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.526k (±54.0%) i/s -      6.360k in   5.002577s
       define_method      6.391k (±47.4%) i/s -      9.656k in   5.219988s

Comparison:
       define_method:     6390.9 i/s
module_eval with string:     2526.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    86.895k i/100ms
       Kernel#format    73.929k i/100ms
            String#%    74.008k i/100ms
Calculating -------------------------------------
         Float#round    869.475k (± 3.4%) i/s -      4.345M in   5.003188s
       Kernel#format    741.233k (± 2.0%) i/s -      3.770M in   5.088710s
            String#%    739.977k (± 2.1%) i/s -      3.700M in   5.003045s

Comparison:
         Float#round:   869475.1 i/s
       Kernel#format:   741232.9 i/s - 1.17x  (± 0.00) slower
            String#%:   739977.1 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.980M i/100ms
          OpenStruct   113.396M i/100ms
Calculating -------------------------------------
                Hash      1.135B (± 0.9%) i/s -      5.699B in   5.019672s
          OpenStruct      1.136B (± 0.7%) i/s -      5.783B in   5.089084s

Comparison:
          OpenStruct: 1136452475.7 i/s
                Hash: 1135426686.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.521M i/100ms
          OpenStruct     3.394k i/100ms
Calculating -------------------------------------
                Hash      1.131B (± 0.5%) i/s -      5.676B in   5.019689s
          OpenStruct     35.774k (±12.3%) i/s -    176.488k in   5.034759s

Comparison:
                Hash: 1130792570.5 i/s
          OpenStruct:    35773.7 i/s - 31609.57x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   796.139k i/100ms
  ancestors.include?   173.371k i/100ms
Calculating -------------------------------------
  less than or equal      8.716M (± 2.4%) i/s -     43.788M in   5.026882s
  ancestors.include?      1.718M (± 7.4%) i/s -      8.669M in   5.086742s

Comparison:
  less than or equal:  8716155.6 i/s
  ancestors.include?:  1717562.7 i/s - 5.07x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     11.333  (± 0.0%) i/s -     57.000  in   5.029635s
         Kernel loop     11.364  (± 0.0%) i/s -     57.000  in   5.016304s

Comparison:
         Kernel loop:       11.4 i/s
          While Loop:       11.3 i/s - 1.00x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   113.418M i/100ms
         Array#first   113.390M i/100ms
Calculating -------------------------------------
           Array#[0]      1.133B (± 0.5%) i/s -      5.671B in   5.007159s
         Array#first      1.135B (± 0.5%) i/s -      5.783B in   5.096820s

Comparison:
         Array#first: 1134631169.3 i/s
           Array#[0]: 1132583312.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   113.891M i/100ms
          Array#last   113.351M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.136B (± 0.4%) i/s -      5.695B in   5.013875s
          Array#last      1.136B (± 0.5%) i/s -      5.781B in   5.088502s

Comparison:
          Array#last: 1136101040.0 i/s
          Array#[-1]: 1135779151.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   629.753k i/100ms
Calculating -------------------------------------
                find      4.421  (±22.6%) i/s -     14.000  in   5.102072s
             bsearch      6.430M (± 4.0%) i/s -     32.117M in   5.003058s

Comparison:
             bsearch:  6430033.3 i/s
                find:        4.4 i/s - 1454443.26x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.069  (± 0.0%) i/s -      1.000  in  14.564977s
        Array#insert      1.020  (± 0.0%) i/s -      6.000  in   5.880595s

Comparison:
        Array#insert:        1.0 i/s
       Array#unshift:        0.1 i/s - 14.86x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   113.506M i/100ms
          Array#size   113.274M i/100ms
         Array#count   113.502M i/100ms
Calculating -------------------------------------
        Array#length      1.134B (± 0.8%) i/s -      5.675B in   5.003137s
          Array#size      1.134B (± 0.3%) i/s -      5.777B in   5.096553s
         Array#count      1.135B (± 0.5%) i/s -      5.789B in   5.099766s

Comparison:
         Array#count: 1135099735.9 i/s
        Array#length: 1134413394.9 i/s - same-ish: difference falls within error
          Array#size: 1133517334.7 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    22.511k i/100ms
        Array#sample     2.637M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    232.743k (± 2.0%) i/s -      1.171M in   5.031637s
        Array#sample     25.204M (± 0.5%) i/s -    126.565M in   5.021784s

Comparison:
        Array#sample: 25203794.0 i/s
 Array#shuffle.first:   232743.1 i/s - 108.29x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601     2.689k i/100ms
          Date.parse     1.179k i/100ms
Calculating -------------------------------------
        Date.iso8601     45.563k (±29.3%) i/s -    185.541k in   5.029965s
          Date.parse     23.810k (±27.7%) i/s -    106.110k in   5.029345s

Comparison:
        Date.iso8601:    45562.6 i/s
          Date.parse:    23809.7 i/s - 1.91x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   205.538k i/100ms
           Array#map   941.343k i/100ms
Calculating -------------------------------------
   Array#each + push      2.191M (± 5.1%) i/s -     11.099M in   5.079501s
           Array#map     10.091M (± 4.3%) i/s -     50.833M in   5.046903s

Comparison:
           Array#map: 10091307.3 i/s
   Array#each + push:  2191099.6 i/s - 4.61x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     8.142M i/100ms
               #each    24.898M i/100ms
Calculating -------------------------------------
            For loop     71.679M (± 2.0%) i/s -    358.234M in   4.999512s
               #each    248.647M (± 0.5%) i/s -      1.245B in   5.006812s

Comparison:
               #each: 248647488.8 i/s
            For loop: 71678931.2 i/s - 3.47x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   829.585k i/100ms
     each_with_index     1.010M i/100ms
Calculating -------------------------------------
          While Loop      8.296M (± 0.0%) i/s -     41.479M in   4.999994s
     each_with_index     10.094M (± 0.0%) i/s -     50.476M in   5.000475s

Comparison:
     each_with_index: 10094172.1 i/s
          While Loop:  8295861.7 i/s - 1.22x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   160.418k i/100ms
      inject to_proc   160.544k i/100ms
        inject block   159.061k i/100ms
Calculating -------------------------------------
       inject symbol      1.613M (± 0.1%) i/s -      8.181M in   5.071933s
      inject to_proc      1.611M (± 0.1%) i/s -      8.188M in   5.081522s
        inject block      1.605M (± 0.1%) i/s -      8.112M in   5.054243s

Comparison:
       inject symbol:  1613058.3 i/s
      inject to_proc:  1611278.6 i/s - same-ish: difference falls within error
        inject block:  1605012.7 i/s - 1.01x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    16.251k i/100ms
   Array#map.flatten    18.036k i/100ms
      Array#flat_map    44.023k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    176.764k (± 8.0%) i/s -    877.554k in   5.013111s
   Array#map.flatten    179.312k (± 7.9%) i/s -    901.800k in   5.074150s
      Array#flat_map    447.444k (± 2.4%) i/s -      2.245M in   5.020828s

Comparison:
      Array#flat_map:   447444.0 i/s
   Array#map.flatten:   179311.7 i/s - 2.50x  (± 0.00) slower
Array#map.flatten(1):   176764.1 i/s - 2.53x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   218.594k i/100ms
  Array#reverse_each     1.349M i/100ms
Calculating -------------------------------------
  Array#reverse.each      2.204M (± 2.3%) i/s -     11.148M in   5.060740s
  Array#reverse_each     13.485M (± 0.6%) i/s -     67.451M in   5.002127s

Comparison:
  Array#reverse_each: 13485040.1 i/s
  Array#reverse.each:  2204127.2 i/s - 6.12x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       674.583k i/100ms
   Enumerable#detect     2.697M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          7.273M (± 7.0%) i/s -    145.035M in  20.090659s
   Enumerable#detect     26.963M (± 0.2%) i/s -    539.464M in  20.007583s

Comparison:
   Enumerable#detect: 26963111.3 i/s
Enumerable#select.first:  7273331.4 i/s - 3.71x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       188.707k i/100ms
Enumerable#select.last
                       335.927k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.158M (± 3.6%) i/s -     10.945M in   5.078487s
Enumerable#select.last
                          3.564M (± 2.2%) i/s -     18.140M in   5.091753s

Comparison:
Enumerable#select.last:  3564432.5 i/s
Enumerable#reverse.detect:  2158047.2 i/s - 1.65x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.554k i/100ms
  Enumerable#sort_by     2.709k i/100ms
     Enumerable#sort     3.498k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         21.982k (±27.6%) i/s -     97.052k in   5.070056s
  Enumerable#sort_by     26.232k (±15.2%) i/s -    124.614k in   5.034735s
     Enumerable#sort     38.246k (± 1.7%) i/s -    192.390k in   5.031925s

Comparison:
     Enumerable#sort:    38246.3 i/s
  Enumerable#sort_by:    26232.3 i/s - 1.46x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    21981.9 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   480.861k i/100ms
Enumerable#sort_by...first
                         5.625k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      4.815M (± 0.1%) i/s -     24.524M in   5.093527s
Enumerable#sort_by...first
                         62.622k (± 6.3%) i/s -    320.625k in   5.154912s

Comparison:
   Enumerable#min_by:  4814723.2 i/s
Enumerable#sort_by...first:    62621.8 i/s - 76.89x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   381.027k i/100ms
            Hash#dup   395.806k i/100ms
Calculating -------------------------------------
              Hash[]      4.103M (± 9.1%) i/s -     20.575M in   5.071286s
            Hash#dup      4.257M (± 8.2%) i/s -     21.374M in   5.067648s

Comparison:
            Hash#dup:  4256604.9 i/s
              Hash[]:  4102938.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   113.342M i/100ms
  Hash#fetch, symbol   113.342M i/100ms
     Hash#[], string     3.177M i/100ms
  Hash#fetch, string     3.183M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.133B (± 0.3%) i/s -      5.667B in   5.003899s
  Hash#fetch, symbol      1.136B (± 0.6%) i/s -      5.780B in   5.089649s
     Hash#[], string    177.564M (± 0.6%) i/s -    889.480M in   5.009545s
  Hash#fetch, string    153.116M (± 1.4%) i/s -    767.139M in   5.011220s

Comparison:
  Hash#fetch, symbol: 1135763691.1 i/s
     Hash#[], symbol: 1132542636.6 i/s - same-ish: difference falls within error
     Hash#[], string: 177563761.1 i/s - 6.40x  (± 0.00) slower
  Hash#fetch, string: 153115875.2 i/s - 7.42x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    49.771M i/100ms
             Hash#[]    49.778M i/100ms
          Hash#[] ||    49.804M i/100ms
          Hash#[] &&    49.801M i/100ms
          Hash#fetch    49.767M i/100ms
 Hash#fetch fallback    49.798M i/100ms
Calculating -------------------------------------
            Hash#dig    497.333M (± 0.4%) i/s -      2.489B in   5.003897s
             Hash#[]    497.707M (± 0.2%) i/s -      2.489B in   5.000801s
          Hash#[] ||    497.752M (± 0.2%) i/s -      2.490B in   5.002911s
          Hash#[] &&    497.701M (± 0.2%) i/s -      2.490B in   5.003148s
          Hash#fetch    497.840M (± 0.1%) i/s -      2.538B in   5.098310s
 Hash#fetch fallback    497.687M (± 0.3%) i/s -      2.490B in   5.003022s

Comparison:
          Hash#fetch: 497839868.6 i/s
          Hash#[] ||: 497752194.3 i/s - same-ish: difference falls within error
             Hash#[]: 497707102.4 i/s - same-ish: difference falls within error
          Hash#[] &&: 497701395.4 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 497687336.5 i/s - same-ish: difference falls within error
            Hash#dig: 497332944.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   113.442M i/100ms
  Hash#fetch + block   113.446M i/100ms
    Hash#fetch + arg   114.256M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.135B (± 1.0%) i/s -      5.672B in   4.999487s
  Hash#fetch + block      1.135B (± 0.8%) i/s -      5.786B in   5.096346s
    Hash#fetch + arg      1.136B (± 0.9%) i/s -      5.713B in   5.031277s

Comparison:
    Hash#fetch + arg: 1135542365.2 i/s
  Hash#fetch + block: 1135335979.9 i/s - same-ish: difference falls within error
  Hash#fetch + const: 1134658824.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    22.234k i/100ms
         sort + to_h     4.025k i/100ms
Calculating -------------------------------------
      sort_by + to_h    311.133k (± 5.8%) i/s -      1.556M in   5.019578s
         sort + to_h    127.267k (± 7.6%) i/s -    635.950k in   5.030122s

Comparison:
      sort_by + to_h:   311132.7 i/s
         sort + to_h:   127266.8 i/s - 2.44x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   179.273k i/100ms
       Hash#each_key   199.390k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.704M (±12.4%) i/s -      8.426M in   5.099254s
       Hash#each_key      2.014M (± 3.2%) i/s -     10.169M in   5.055581s

Comparison:
       Hash#each_key:  2013559.3 i/s
      Hash#keys.each:  1704019.9 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   211.000  i/100ms
           Hash#key?     2.580M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      2.012k (±10.3%) i/s -      9.917k in   5.001169s
           Hash#key?     26.224M (± 0.4%) i/s -    131.597M in   5.018210s

Comparison:
           Hash#key?: 26224345.0 i/s
  Hash#keys.include?:     2012.2 i/s - 13032.62x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    38.069k i/100ms
            Hash#[]=    41.855k i/100ms
Calculating -------------------------------------
         Hash#merge!    415.208k (± 5.1%) i/s -      2.094M in   5.056094s
            Hash#[]=    424.572k (± 7.3%) i/s -      2.135M in   5.069693s

Comparison:
            Hash#[]=:   424571.9 i/s
         Hash#merge!:   415207.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        21.871k i/100ms
      Hash#merge({})    13.950k i/100ms
 Hash#dup#merge!({})    23.225k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        261.386k (± 9.2%) i/s -      1.312M in   5.067211s
      Hash#merge({})    153.599k (± 5.0%) i/s -    767.250k in   5.009976s
 Hash#dup#merge!({})    241.293k (± 8.5%) i/s -      1.208M in   5.043505s

Comparison:
{}#merge!(Hash) do end:   261386.3 i/s
 Hash#dup#merge!({}):   241292.5 i/s - same-ish: difference falls within error
      Hash#merge({}):   153598.7 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   113.271M i/100ms
          Hash#merge   113.422M i/100ms
Calculating -------------------------------------
        Hash#**other      1.134B (± 0.8%) i/s -      5.777B in   5.093485s
          Hash#merge      1.135B (± 0.8%) i/s -      5.785B in   5.097104s

Comparison:
          Hash#merge: 1134922817.6 i/s
        Hash#**other: 1134222496.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   621.000  i/100ms
         Hash#merge!    41.605k i/100ms
Calculating -------------------------------------
          Hash#merge      6.910k (± 8.8%) i/s -     34.776k in   5.084054s
         Hash#merge!    413.648k (± 6.8%) i/s -      2.080M in   5.066202s

Comparison:
         Hash#merge!:   413648.0 i/s
          Hash#merge:     6910.3 i/s - 59.86x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.489M i/100ms
Array#each               1.283M i/100ms
Array#each_w/_object     1.307M i/100ms
Hash#select-include      1.826M i/100ms
Calculating -------------------------------------
Hash#native-slice        15.021M (± 3.6%) i/s -     75.936M in   5.061959s
Array#each               13.176M (± 4.2%) i/s -     66.735M in   5.074241s
Array#each_w/_object     13.269M (± 2.8%) i/s -     66.643M in   5.026658s
Hash#select-include      18.099M (± 4.6%) i/s -     91.288M in   5.054534s

Comparison:
Hash#select-include : 18098793.4 i/s
Hash#native-slice   : 15021399.5 i/s - 1.20x  (± 0.00) slower
Array#each_w/_object: 13269196.3 i/s - 1.36x  (± 0.00) slower
Array#each          : 13176436.6 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   206.000  i/100ms
         Hash#value?   469.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      2.073k (±11.9%) i/s -     10.300k in   5.059889s
         Hash#value?      4.697k (± 0.1%) i/s -     23.919k in   5.092171s

Comparison:
         Hash#value?:     4697.2 i/s
Hash#values.include?:     2073.4 i/s - 2.27x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   113.778M i/100ms
                send   113.423M i/100ms
      method_missing   113.411M i/100ms
Calculating -------------------------------------
                call      1.136B (± 0.8%) i/s -      5.689B in   5.007363s
                send      1.138B (± 1.2%) i/s -      5.785B in   5.085455s
      method_missing      1.139B (± 1.1%) i/s -      5.784B in   5.076979s

Comparison:
      method_missing: 1139395781.2 i/s
                send: 1137629591.9 i/s - same-ish: difference falls within error
                call: 1136175427.8 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    30.329k i/100ms
      Symbol#to_proc    31.907k i/100ms
Calculating -------------------------------------
               Block    339.145k (± 8.8%) i/s -      1.698M in   5.063304s
      Symbol#to_proc    340.062k (± 8.6%) i/s -      1.691M in   5.022069s

Comparison:
      Symbol#to_proc:   340062.2 i/s
               Block:   339145.2 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   113.318M i/100ms
       block + yield   113.347M i/100ms
        unused block   113.346M i/100ms
               yield   113.489M i/100ms
Calculating -------------------------------------
          block.call      1.135B (± 1.3%) i/s -      5.779B in   5.093596s
       block + yield      1.135B (± 0.6%) i/s -      5.781B in   5.093845s
        unused block      1.137B (± 0.9%) i/s -      5.781B in   5.084497s
               yield      1.139B (± 1.0%) i/s -      5.788B in   5.081327s

Comparison:
               yield: 1139174755.5 i/s
        unused block: 1136991485.2 i/s - same-ish: difference falls within error
       block + yield: 1134870980.6 i/s - same-ish: difference falls within error
          block.call: 1134800237.7 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    21.679k i/100ms
      range#include?   635.000  i/100ms
       range#member?   833.000  i/100ms
       plain compare    35.665k i/100ms
Calculating -------------------------------------
        range#cover?    183.987k (±21.9%) i/s -    867.160k in   5.045640s
      range#include?     10.751k (±32.2%) i/s -     47.625k in   5.088318s
       range#member?     10.572k (±32.2%) i/s -     46.648k in   5.030647s
       plain compare    446.041k (± 4.8%) i/s -      2.247M in   5.050921s

Comparison:
       plain compare:   446041.3 i/s
        range#cover?:   183987.1 i/s - 2.42x  (± 0.00) slower
      range#include?:    10751.4 i/s - 41.49x  (± 0.00) slower
       range#member?:    10571.5 i/s - 42.19x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    10.471M i/100ms
           String#=~     9.363M i/100ms
          Regexp#===     9.361M i/100ms
        String#match     8.164M i/100ms
Calculating -------------------------------------
       String#match?    104.387M (± 0.1%) i/s -    523.549M in   5.015457s
           String#=~     98.536M (± 0.4%) i/s -    496.235M in   5.036166s
          Regexp#===     98.521M (± 0.4%) i/s -    496.121M in   5.035806s
        String#match     81.578M (± 0.3%) i/s -    408.190M in   5.003732s

Comparison:
       String#match?: 104387233.8 i/s
           String#=~: 98536202.9 i/s - 1.06x  (± 0.00) slower
          Regexp#===: 98520665.5 i/s - 1.06x  (± 0.00) slower
        String#match: 81577853.9 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.252M i/100ms
      String#casecmp     3.220M i/100ms
Calculating -------------------------------------
String#downcase + ==     23.078M (± 8.0%) i/s -    114.860M in   5.022834s
      String#casecmp     34.840M (± 6.0%) i/s -    173.886M in   5.009464s

Comparison:
      String#casecmp: 34840369.6 i/s
String#downcase + ==: 23078484.8 i/s - 1.51x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     7.253M i/100ms
       String#concat     7.488M i/100ms
       String#append     7.541M i/100ms
         "foo" "bar"   113.599M i/100ms
  "#{'foo'}#{'bar'}"   113.365M i/100ms
Calculating -------------------------------------
            String#+     74.220M (± 3.1%) i/s -    377.152M in   5.086593s
       String#concat     74.810M (± 1.8%) i/s -    374.406M in   5.006537s
       String#append     74.561M (± 3.1%) i/s -    377.063M in   5.062048s
         "foo" "bar"      1.136B (± 0.6%) i/s -      5.680B in   5.001996s
  "#{'foo'}#{'bar'}"      1.136B (± 0.9%) i/s -      5.782B in   5.088542s

Comparison:
  "#{'foo'}#{'bar'}": 1136291128.0 i/s
         "foo" "bar": 1135577537.6 i/s - same-ish: difference falls within error
       String#concat: 74809694.2 i/s - 15.19x  (± 0.00) slower
       String#append: 74561039.0 i/s - 15.24x  (± 0.00) slower
            String#+: 74220328.1 i/s - 15.31x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   113.620M i/100ms
          String#dup   113.273M i/100ms
Calculating -------------------------------------
           String#+@      1.133B (± 0.6%) i/s -      5.681B in   5.015644s
          String#dup      1.135B (± 0.7%) i/s -      5.777B in   5.089319s

Comparison:
          String#dup: 1135162765.3 i/s
           String#+@: 1132694737.1 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   856.945k i/100ms
       String#match?     1.194M i/100ms
    String#end_with?    10.754M i/100ms
Calculating -------------------------------------
           String#=~     10.021M (± 2.1%) i/s -     50.560M in   5.047968s
       String#match?     11.893M (± 1.7%) i/s -     59.699M in   5.021340s
    String#end_with?    107.593M (± 0.3%) i/s -    548.431M in   5.097330s

Comparison:
    String#end_with?: 107592723.4 i/s
       String#match?: 11892910.6 i/s - 9.05x  (± 0.00) slower
           String#=~: 10020696.1 i/s - 10.74x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   391.091k i/100ms
          String#sub   721.758k i/100ms
String#dup["string"]=
                         7.536M i/100ms
Calculating -------------------------------------
         String#gsub      5.325M (± 8.7%) i/s -     26.594M in   5.034133s
          String#sub      7.713M (± 9.2%) i/s -     38.253M in   5.020279s
String#dup["string"]=
                         75.285M (± 0.3%) i/s -    376.784M in   5.004811s

Comparison:
String#dup["string"]=: 75285212.3 i/s
          String#sub:  7712943.1 i/s - 9.76x  (± 0.00) slower
         String#gsub:  5325214.7 i/s - 14.14x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   126.412k i/100ms
           String#tr   115.234k i/100ms
Calculating -------------------------------------
         String#gsub      2.559M (± 6.3%) i/s -     12.768M in   5.011116s
           String#tr      1.153M (± 2.2%) i/s -      5.877M in   5.098484s

Comparison:
         String#gsub:  2558912.5 i/s
           String#tr:  1153237.8 i/s - 2.22x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   113.384M i/100ms
         With Freeze   113.944M i/100ms
Calculating -------------------------------------
      Without Freeze      1.132B (± 0.4%) i/s -      5.669B in   5.006598s
         With Freeze      1.135B (± 0.6%) i/s -      5.697B in   5.019388s

Comparison:
         With Freeze: 1135080227.5 i/s
      Without Freeze: 1132368779.8 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     5.894k i/100ms
      String#squeeze    51.974k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     88.345k (±10.3%) i/s -    442.050k in   5.075718s
      String#squeeze    520.435k (± 3.5%) i/s -      2.599M in   4.999903s

Comparison:
      String#squeeze:   520435.4 i/s
 String#gsub/regex+/:    88345.1 i/s - 5.89x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     3.544M i/100ms
       String#match?     4.903M i/100ms
  String#start_with?    10.037M i/100ms
Calculating -------------------------------------
           String#=~     35.833M (± 3.0%) i/s -    180.720M in   5.048074s
       String#match?     49.227M (± 0.1%) i/s -    250.053M in   5.079579s
  String#start_with?    100.546M (± 0.5%) i/s -    511.899M in   5.091333s

Comparison:
  String#start_with?: 100545750.3 i/s
       String#match?: 49227101.7 i/s - 2.04x  (± 0.00) slower
           String#=~: 35832998.2 i/s - 2.81x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   104.492k i/100ms
    String#[0, n] ==   233.952k i/100ms
   String#[RANGE] ==   326.164k i/100ms
   String#[0...n] ==   210.414k i/100ms
Calculating -------------------------------------
  String#start_with?      3.908M (± 0.1%) i/s -     19.540M in   4.999629s
    String#[0, n] ==      2.335M (± 3.9%) i/s -     11.698M in   5.018516s
   String#[RANGE] ==      3.275M (± 2.6%) i/s -     16.634M in   5.083280s
   String#[0...n] ==      2.238M (± 3.5%) i/s -     11.362M in   5.083203s

Comparison:
  String#start_with?:  3908296.3 i/s
   String#[RANGE] ==:  3274684.1 i/s - 1.19x  (± 0.00) slower
    String#[0, n] ==:  2334563.3 i/s - 1.67x  (± 0.00) slower
   String#[0...n] ==:  2237977.5 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     7.520M i/100ms
 String#sub!'string'   685.595k i/100ms
String#gsub!'string'   582.763k i/100ms
  String#[/regexp/]=     2.026M i/100ms
 String#sub!/regexp/   834.152k i/100ms
String#gsub!/regexp/   631.085k i/100ms
Calculating -------------------------------------
  String#['string']=     75.104M (± 0.1%) i/s -    375.996M in   5.006341s
 String#sub!'string'      7.843M (±16.1%) i/s -     37.022M in   5.031915s
String#gsub!'string'      6.088M (± 4.2%) i/s -     30.886M in   5.082944s
  String#[/regexp/]=     20.029M (± 4.0%) i/s -    101.305M in   5.066698s
 String#sub!/regexp/      8.694M (± 8.6%) i/s -     43.376M in   5.037651s
String#gsub!/regexp/      6.405M (± 6.2%) i/s -     32.185M in   5.046913s

Comparison:
  String#['string']=: 75104155.5 i/s
  String#[/regexp/]=: 20028831.0 i/s - 3.75x  (± 0.00) slower
 String#sub!/regexp/:  8693747.0 i/s - 8.64x  (± 0.00) slower
 String#sub!'string':  7842737.2 i/s - 9.58x  (± 0.00) slower
String#gsub!/regexp/:  6405012.7 i/s - 11.73x  (± 0.00) slower
String#gsub!'string':  6087769.8 i/s - 12.34x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.340M i/100ms
        String#chomp     4.192M i/100ms
String#delete_suffix     9.463M i/100ms
Calculating -------------------------------------
          String#sub     22.371M (± 3.2%) i/s -    112.530M in   5.035740s
        String#chomp     42.011M (± 0.3%) i/s -    213.792M in   5.089008s
String#delete_suffix     97.074M (± 8.9%) i/s -    482.604M in   5.026865s

Comparison:
String#delete_suffix: 97073547.5 i/s
        String#chomp: 42010776.3 i/s - 2.31x  (± 0.00) slower
          String#sub: 22371191.5 i/s - 4.34x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   113.350M i/100ms
          String#sub     8.710M i/100ms
Calculating -------------------------------------
String#delete_prefix      1.134B (± 0.6%) i/s -      5.781B in   5.097788s
          String#sub    101.882M (± 0.3%) i/s -    513.879M in   5.043911s

Comparison:
String#delete_prefix: 1134030419.5 i/s
          String#sub: 101881853.8 i/s - 11.13x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.522M i/100ms
    String#unpack[0]     1.572M i/100ms
Calculating -------------------------------------
      String#unpack1     15.498M (± 3.8%) i/s -     77.639M in   5.016846s
    String#unpack[0]     15.524M (± 6.6%) i/s -     78.620M in   5.100020s

Comparison:
    String#unpack[0]: 15524441.3 i/s
      String#unpack1: 15498377.7 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 23.1.0-dev-3122bee4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    19.696k i/100ms
          Time.parse   271.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    256.275k (±10.1%) i/s -      1.280M in   5.065438s
          Time.parse      9.465k (±23.4%) i/s -     41.192k in   5.008888s

Comparison:
        Time.iso8601:   256274.8 i/s
          Time.parse:     9464.8 i/s - 27.08x  (± 0.00) slower

