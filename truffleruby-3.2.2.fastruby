$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       289.864M i/100ms
Function with splat arguments
                         1.977k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.300B (± 4.1%) i/s -     16.522B in   5.015984s
Function with splat arguments
                         20.359k (±11.1%) i/s -    102.804k in   5.138570s

Comparison:
Function with single Array argument: 3299934983.8 i/s
Function with splat arguments:    20359.2 i/s - 162085.49x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   331.049M i/100ms
Sequential Assignment
                       315.891M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.302B (± 3.0%) i/s -     16.552B in   5.017885s
Sequential Assignment
                          3.345B (± 2.9%) i/s -     16.742B in   5.009142s

Comparison:
Sequential Assignment: 3345246533.4 i/s
 Parallel Assignment: 3301709868.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   328.673M i/100ms
       attr_accessor   314.699M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.326B (± 3.0%) i/s -     16.762B in   5.045101s
       attr_accessor      3.342B (± 3.3%) i/s -     16.994B in   5.090465s

Comparison:
       attr_accessor: 3342091223.2 i/s
   getter_and_setter: 3325562034.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    14.112k i/100ms
         respond_to?   334.958M i/100ms
Calculating -------------------------------------
      begin...rescue    105.967k (± 6.5%) i/s -    536.256k in   5.085907s
         respond_to?      3.326B (± 2.6%) i/s -     16.748B in   5.038551s

Comparison:
         respond_to?: 3326346145.1 i/s
      begin...rescue:   105967.5 i/s - 31390.25x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   336.549M i/100ms
             &method   310.557M i/100ms
Calculating -------------------------------------
              normal      3.325B (± 2.8%) i/s -     16.827B in   5.064995s
             &method      3.339B (± 2.7%) i/s -     16.770B in   5.026887s

Comparison:
             &method: 3338578835.6 i/s
              normal: 3324912839.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       179.000  i/100ms
       define_method   149.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          3.873k (±59.6%) i/s -      8.055k in   5.016863s
       define_method     11.366k (±48.1%) i/s -     11.920k in   6.952440s

Comparison:
       define_method:    11365.7 i/s
module_eval with string:     3873.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   131.601k i/100ms
       Kernel#format   112.117k i/100ms
            String#%    21.939k i/100ms
Calculating -------------------------------------
         Float#round      1.377M (± 3.2%) i/s -      6.975M in   5.069436s
       Kernel#format      1.115M (± 2.9%) i/s -      5.606M in   5.032827s
            String#%    222.088k (± 9.1%) i/s -      1.119M in   5.087409s

Comparison:
         Float#round:  1377361.9 i/s
       Kernel#format:  1114793.4 i/s - 1.24x  (± 0.00) slower
            String#%:   222088.4 i/s - 6.20x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   328.394M i/100ms
          OpenStruct   324.619M i/100ms
Calculating -------------------------------------
                Hash      3.337B (± 2.8%) i/s -     16.748B in   5.023578s
          OpenStruct      3.336B (± 3.0%) i/s -     16.880B in   5.065211s

Comparison:
                Hash: 3336541186.9 i/s
          OpenStruct: 3335624014.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   331.119M i/100ms
          OpenStruct     3.055k i/100ms
Calculating -------------------------------------
                Hash      3.308B (± 3.8%) i/s -     16.556B in   5.012910s
          OpenStruct     48.984k (±14.3%) i/s -    238.290k in   5.008500s

Comparison:
                Hash: 3308112904.0 i/s
          OpenStruct:    48984.3 i/s - 67534.09x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal     1.015M i/100ms
  ancestors.include?   240.465k i/100ms
Calculating -------------------------------------
  less than or equal     10.338M (± 3.5%) i/s -     51.760M in   5.013113s
  ancestors.include?      2.448M (± 5.6%) i/s -     12.264M in   5.026434s

Comparison:
  less than or equal: 10337723.2 i/s
  ancestors.include?:  2448293.3 i/s - 4.22x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     33.296  (± 3.0%) i/s -    167.000  in   5.026037s
         Kernel loop     33.629  (± 3.0%) i/s -    169.000  in   5.028322s

Comparison:
         Kernel loop:       33.6 i/s
          While Loop:       33.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   334.197M i/100ms
         Array#first   327.952M i/100ms
Calculating -------------------------------------
           Array#[0]      3.334B (± 2.1%) i/s -     16.710B in   5.014099s
         Array#first      3.360B (± 2.1%) i/s -     17.054B in   5.077851s

Comparison:
         Array#first: 3359984649.5 i/s
           Array#[0]: 3334054730.9 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   332.783M i/100ms
          Array#last   336.303M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.297B (± 3.4%) i/s -     16.639B in   5.053127s
          Array#last      3.329B (± 2.7%) i/s -     16.815B in   5.055574s

Comparison:
          Array#last: 3328561403.5 i/s
          Array#[-1]: 3296860880.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   943.442k i/100ms
Calculating -------------------------------------
                find     14.259  (± 0.0%) i/s -     72.000  in   5.054501s
             bsearch      9.545M (± 2.6%) i/s -     48.116M in   5.044552s

Comparison:
             bsearch:  9544703.5 i/s
                find:       14.3 i/s - 669380.06x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.266  (± 0.0%) i/s -      2.000  in   7.517001s
        Array#insert      1.460  (± 0.0%) i/s -      8.000  in   5.481402s

Comparison:
        Array#insert:        1.5 i/s
       Array#unshift:        0.3 i/s - 5.49x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   338.758M i/100ms
          Array#size   338.987M i/100ms
         Array#count   333.873M i/100ms
Calculating -------------------------------------
        Array#length      3.334B (± 2.7%) i/s -     16.938B in   5.084878s
          Array#size      3.318B (± 2.9%) i/s -     16.610B in   5.011148s
         Array#count      3.324B (± 2.6%) i/s -     16.694B in   5.024969s

Comparison:
        Array#length: 3333676622.8 i/s
         Array#count: 3324418813.0 i/s - same-ish: difference falls within error
          Array#size: 3317675682.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    36.303k i/100ms
        Array#sample     3.915M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    363.874k (± 2.8%) i/s -      1.851M in   5.092182s
        Array#sample     39.319M (± 2.3%) i/s -    199.666M in   5.080832s

Comparison:
        Array#sample: 39319013.7 i/s
 Array#shuffle.first:   363874.4 i/s - 108.06x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601     1.008k i/100ms
          Date.parse   489.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     18.042k (±31.7%) i/s -     81.648k in   5.004854s
          Date.parse      7.976k (±18.6%) i/s -     38.631k in   5.051047s

Comparison:
        Date.iso8601:    18042.1 i/s
          Date.parse:     7975.8 i/s - 2.26x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   343.856k i/100ms
           Array#map     1.774M i/100ms
Calculating -------------------------------------
   Array#each + push      3.790M (± 7.8%) i/s -     18.912M in   5.039434s
           Array#map     17.099M (± 9.1%) i/s -     85.159M in   5.027195s

Comparison:
           Array#map: 17098845.4 i/s
   Array#each + push:  3789623.4 i/s - 4.51x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    12.542M i/100ms
               #each    37.039M i/100ms
Calculating -------------------------------------
            For loop    129.607M (± 2.0%) i/s -    652.191M in   5.034060s
               #each    368.708M (± 2.4%) i/s -      1.852B in   5.025718s

Comparison:
               #each: 368707571.2 i/s
            For loop: 129607313.9 i/s - 2.84x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.281M i/100ms
     each_with_index     1.900M i/100ms
Calculating -------------------------------------
          While Loop     14.746M (± 2.6%) i/s -     74.279M in   5.040699s
     each_with_index     17.962M (± 3.5%) i/s -     91.200M in   5.083649s

Comparison:
     each_with_index: 17961624.3 i/s
          While Loop: 14746185.3 i/s - 1.22x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   313.563k i/100ms
      inject to_proc   326.488k i/100ms
        inject block   326.835k i/100ms
Calculating -------------------------------------
       inject symbol      3.240M (± 2.5%) i/s -     16.305M in   5.036079s
      inject to_proc      3.223M (± 3.2%) i/s -     16.324M in   5.071069s
        inject block      3.207M (± 3.9%) i/s -     16.015M in   5.001656s

Comparison:
       inject symbol:  3239726.6 i/s
      inject to_proc:  3222581.4 i/s - same-ish: difference falls within error
        inject block:  3207381.1 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    23.497k i/100ms
   Array#map.flatten    26.809k i/100ms
      Array#flat_map    60.147k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    273.594k (± 8.4%) i/s -      1.363M in   5.028457s
   Array#map.flatten    276.690k (± 7.2%) i/s -      1.394M in   5.072133s
      Array#flat_map    603.953k (± 4.5%) i/s -      3.067M in   5.090561s

Comparison:
      Array#flat_map:   603953.2 i/s
   Array#map.flatten:   276689.8 i/s - 2.18x  (± 0.00) slower
Array#map.flatten(1):   273594.0 i/s - 2.21x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   325.671k i/100ms
  Array#reverse_each     2.437M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.328M (± 4.3%) i/s -     16.935M in   5.098255s
  Array#reverse_each     24.984M (± 3.9%) i/s -    126.743M in   5.080089s

Comparison:
  Array#reverse_each: 24984461.0 i/s
  Array#reverse.each:  3328394.6 i/s - 7.51x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                         1.017M i/100ms
   Enumerable#detect     4.316M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.820M (± 7.7%) i/s -    215.607M in  20.081590s
   Enumerable#detect     47.572M (± 3.0%) i/s -    953.843M in  20.071050s

Comparison:
   Enumerable#detect: 47571541.5 i/s
Enumerable#select.first: 10819922.8 i/s - 4.40x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       323.494k i/100ms
Enumerable#select.last
                       579.400k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.237M (± 8.7%) i/s -     16.175M in   5.052638s
Enumerable#select.last
                          5.768M (± 3.0%) i/s -     28.970M in   5.027139s

Comparison:
Enumerable#select.last:  5768024.9 i/s
Enumerable#reverse.detect:  3237075.7 i/s - 1.78x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.072k i/100ms
  Enumerable#sort_by     2.630k i/100ms
     Enumerable#sort     4.828k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         34.539k (±30.3%) i/s -    150.664k in   5.101281s
  Enumerable#sort_by     32.511k (±35.1%) i/s -    131.500k in   5.055657s
     Enumerable#sort     55.413k (± 4.5%) i/s -    280.024k in   5.064031s

Comparison:
     Enumerable#sort:    55412.6 i/s
Enumerable#sort_by (Symbol#to_proc):    34538.8 i/s - 1.60x  (± 0.00) slower
  Enumerable#sort_by:    32510.6 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   848.623k i/100ms
Enumerable#sort_by...first
                         6.029k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      8.525M (± 3.4%) i/s -     43.280M in   5.083219s
Enumerable#sort_by...first
                        102.801k (± 7.3%) i/s -    512.465k in   5.027185s

Comparison:
   Enumerable#min_by:  8524517.9 i/s
Enumerable#sort_by...first:   102801.2 i/s - 82.92x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   903.771k i/100ms
            Hash#dup   913.047k i/100ms
Calculating -------------------------------------
              Hash[]      9.463M (± 8.4%) i/s -     46.996M in   5.015193s
            Hash#dup      9.182M (± 5.1%) i/s -     46.565M in   5.084929s

Comparison:
              Hash[]:  9463116.4 i/s
            Hash#dup:  9182221.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   329.545M i/100ms
  Hash#fetch, symbol   333.731M i/100ms
     Hash#[], string     4.262M i/100ms
  Hash#fetch, string    20.888M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.310B (± 3.1%) i/s -     16.807B in   5.082861s
  Hash#fetch, symbol      3.331B (± 2.3%) i/s -     16.687B in   5.012149s
     Hash#[], string    195.921M (± 3.4%) i/s -    980.357M in   5.010934s
  Hash#fetch, string    209.564M (± 2.1%) i/s -      1.065B in   5.085684s

Comparison:
  Hash#fetch, symbol: 3330986957.1 i/s
     Hash#[], symbol: 3310022094.8 i/s - same-ish: difference falls within error
  Hash#fetch, string: 209564482.3 i/s - 15.89x  (± 0.00) slower
     Hash#[], string: 195921337.1 i/s - 17.00x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    94.740M i/100ms
             Hash#[]    93.878M i/100ms
          Hash#[] ||    94.594M i/100ms
          Hash#[] &&    95.130M i/100ms
          Hash#fetch    94.165M i/100ms
 Hash#fetch fallback    95.849M i/100ms
Calculating -------------------------------------
            Hash#dig    951.690M (± 3.4%) i/s -      4.832B in   5.083333s
             Hash#[]    955.461M (± 2.3%) i/s -      4.788B in   5.013710s
          Hash#[] ||    958.989M (± 2.4%) i/s -      4.824B in   5.033719s
          Hash#[] &&    958.668M (± 3.0%) i/s -      4.852B in   5.065502s
          Hash#fetch    950.422M (± 2.3%) i/s -      4.802B in   5.055697s
 Hash#fetch fallback    954.074M (± 2.3%) i/s -      4.792B in   5.025897s

Comparison:
          Hash#[] ||: 958989414.5 i/s
          Hash#[] &&: 958667983.7 i/s - same-ish: difference falls within error
             Hash#[]: 955461433.4 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 954073512.2 i/s - same-ish: difference falls within error
            Hash#dig: 951690497.2 i/s - same-ish: difference falls within error
          Hash#fetch: 950422427.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   321.978M i/100ms
  Hash#fetch + block   331.279M i/100ms
    Hash#fetch + arg   340.193M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.327B (± 3.1%) i/s -     16.743B in   5.037058s
  Hash#fetch + block      3.374B (± 2.2%) i/s -     16.895B in   5.009578s
    Hash#fetch + arg      3.348B (± 2.8%) i/s -     17.010B in   5.085447s

Comparison:
  Hash#fetch + block: 3374201787.8 i/s
    Hash#fetch + arg: 3347618578.7 i/s - same-ish: difference falls within error
  Hash#fetch + const: 3327342791.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    35.282k i/100ms
         sort + to_h    14.821k i/100ms
Calculating -------------------------------------
      sort_by + to_h    540.847k (± 6.6%) i/s -      2.717M in   5.045941s
         sort + to_h    143.706k (± 3.3%) i/s -    726.229k in   5.059110s

Comparison:
      sort_by + to_h:   540846.6 i/s
         sort + to_h:   143706.5 i/s - 3.76x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   215.677k i/100ms
       Hash#each_key   253.635k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.274M (± 8.8%) i/s -     11.215M in   5.011669s
       Hash#each_key      2.521M (± 3.1%) i/s -     12.682M in   5.035479s

Comparison:
       Hash#each_key:  2520953.8 i/s
      Hash#keys.each:  2274172.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   334.000  i/100ms
           Hash#key?    16.768M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      5.415k (±16.3%) i/s -     26.386k in   5.098167s
           Hash#key?    166.638M (± 3.2%) i/s -    838.380M in   5.036341s

Comparison:
           Hash#key?: 166638064.4 i/s
  Hash#keys.include?:     5415.0 i/s - 30773.66x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    35.501k i/100ms
            Hash#[]=    35.608k i/100ms
Calculating -------------------------------------
         Hash#merge!    355.311k (± 6.6%) i/s -      1.775M in   5.024336s
            Hash#[]=    354.481k (± 6.3%) i/s -      1.780M in   5.049481s

Comparison:
         Hash#merge!:   355310.9 i/s
            Hash#[]=:   354481.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        24.267k i/100ms
      Hash#merge({})    24.366k i/100ms
 Hash#dup#merge!({})    34.013k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        400.555k (±13.1%) i/s -      1.966M in   5.012560s
      Hash#merge({})    248.769k (± 9.3%) i/s -      1.243M in   5.049499s
 Hash#dup#merge!({})    335.158k (± 9.3%) i/s -      1.667M in   5.023487s

Comparison:
{}#merge!(Hash) do end:   400555.1 i/s
 Hash#dup#merge!({}):   335158.3 i/s - same-ish: difference falls within error
      Hash#merge({}):   248769.3 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   331.168M i/100ms
          Hash#merge   336.328M i/100ms
Calculating -------------------------------------
        Hash#**other      3.326B (± 2.7%) i/s -     16.890B in   5.081609s
          Hash#merge      3.359B (± 2.5%) i/s -     16.816B in   5.009436s

Comparison:
          Hash#merge: 3359044213.7 i/s
        Hash#**other: 3326051406.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.251k i/100ms
         Hash#merge!    38.367k i/100ms
Calculating -------------------------------------
          Hash#merge     15.759k (± 5.6%) i/s -     78.813k in   5.017856s
         Hash#merge!    385.544k (± 3.0%) i/s -      1.957M in   5.079861s

Comparison:
         Hash#merge!:   385544.4 i/s
          Hash#merge:    15759.3 i/s - 24.46x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.852M i/100ms
Array#each               1.694M i/100ms
Array#each_w/_object     1.690M i/100ms
Hash#select-include      2.568M i/100ms
Calculating -------------------------------------
Hash#native-slice        19.076M (± 6.6%) i/s -     96.289M in   5.077656s
Array#each               16.274M (± 6.4%) i/s -     81.291M in   5.021884s
Array#each_w/_object     16.547M (± 7.2%) i/s -     82.804M in   5.043344s
Hash#select-include      24.714M (± 7.2%) i/s -    123.248M in   5.020041s

Comparison:
Hash#select-include : 24714324.3 i/s
Hash#native-slice   : 19075834.7 i/s - 1.30x  (± 0.00) slower
Array#each_w/_object: 16547453.9 i/s - 1.49x  (± 0.00) slower
Array#each          : 16274407.5 i/s - 1.52x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   411.000  i/100ms
         Hash#value?     2.401k i/100ms
Calculating -------------------------------------
Hash#values.include?      5.928k (±15.3%) i/s -     28.770k in   5.060446s
         Hash#value?     24.115k (± 2.6%) i/s -    122.451k in   5.081318s

Comparison:
         Hash#value?:    24114.9 i/s
Hash#values.include?:     5927.8 i/s - 4.07x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   326.224M i/100ms
                send   333.706M i/100ms
      method_missing   333.369M i/100ms
Calculating -------------------------------------
                call      3.311B (± 3.6%) i/s -     16.637B in   5.031972s
                send      3.331B (± 2.3%) i/s -     16.685B in   5.012355s
      method_missing      3.315B (± 3.6%) i/s -     16.668B in   5.035306s

Comparison:
                send: 3330559784.3 i/s
      method_missing: 3314786089.9 i/s - same-ish: difference falls within error
                call: 3310932547.8 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    68.424k i/100ms
      Symbol#to_proc    77.552k i/100ms
Calculating -------------------------------------
               Block    809.907k (±11.3%) i/s -      4.037M in   5.065931s
      Symbol#to_proc    789.837k (±13.6%) i/s -      3.878M in   5.026255s

Comparison:
               Block:   809907.0 i/s
      Symbol#to_proc:   789837.5 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   326.310M i/100ms
       block + yield   327.420M i/100ms
        unused block   322.271M i/100ms
               yield   336.605M i/100ms
Calculating -------------------------------------
          block.call      3.326B (± 2.7%) i/s -     16.642B in   5.007680s
       block + yield      3.337B (± 3.2%) i/s -     16.698B in   5.009312s
        unused block      3.369B (± 2.4%) i/s -     17.080B in   5.072701s
               yield      3.337B (± 3.6%) i/s -     16.830B in   5.050512s

Comparison:
        unused block: 3369135773.4 i/s
       block + yield: 3337143060.1 i/s - same-ish: difference falls within error
               yield: 3336911941.9 i/s - same-ish: difference falls within error
          block.call: 3325838090.6 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     5.746k i/100ms
      range#include?   145.000  i/100ms
       range#member?   247.000  i/100ms
       plain compare     8.805k i/100ms
Calculating -------------------------------------
        range#cover?     62.801k (±24.0%) i/s -    298.792k in   5.199552s
      range#include?      2.455k (±30.6%) i/s -     10.730k in   5.055123s
       range#member?      2.423k (±30.2%) i/s -     10.868k in   5.021014s
       plain compare     96.849k (±24.6%) i/s -    440.250k in   5.022431s

Comparison:
       plain compare:    96849.4 i/s
        range#cover?:    62801.1 i/s - same-ish: difference falls within error
      range#include?:     2454.8 i/s - 39.45x  (± 0.00) slower
       range#member?:     2423.3 i/s - 39.97x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    13.092M i/100ms
           String#=~    13.790M i/100ms
          Regexp#===    13.850M i/100ms
        String#match    11.204M i/100ms
Calculating -------------------------------------
       String#match?    140.353M (± 3.2%) i/s -    706.949M in   5.042194s
           String#=~    139.275M (± 2.8%) i/s -    703.315M in   5.053864s
          Regexp#===    136.878M (± 5.0%) i/s -    692.523M in   5.075402s
        String#match    111.461M (± 2.1%) i/s -    560.182M in   5.028006s

Comparison:
       String#match?: 140353127.0 i/s
           String#=~: 139274867.5 i/s - same-ish: difference falls within error
          Regexp#===: 136877995.4 i/s - same-ish: difference falls within error
        String#match: 111460926.7 i/s - 1.26x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.549M i/100ms
      String#casecmp     4.868M i/100ms
Calculating -------------------------------------
String#downcase + ==     31.577M (± 7.6%) i/s -    158.059M in   5.044009s
      String#casecmp     48.410M (± 4.5%) i/s -    243.417M in   5.039153s

Comparison:
      String#casecmp: 48410215.7 i/s
String#downcase + ==: 31576670.4 i/s - 1.53x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     9.947M i/100ms
       String#concat    10.477M i/100ms
       String#append    10.666M i/100ms
         "foo" "bar"   339.829M i/100ms
  "#{'foo'}#{'bar'}"   326.929M i/100ms
Calculating -------------------------------------
            String#+    104.784M (± 4.3%) i/s -    527.201M in   5.041185s
       String#concat    105.152M (± 6.6%) i/s -    534.308M in   5.112030s
       String#append    105.531M (± 5.1%) i/s -    533.296M in   5.069945s
         "foo" "bar"      3.372B (± 1.6%) i/s -     16.991B in   5.040441s
  "#{'foo'}#{'bar'}"      3.333B (± 3.8%) i/s -     16.673B in   5.011162s

Comparison:
         "foo" "bar": 3371951129.5 i/s
  "#{'foo'}#{'bar'}": 3332803001.3 i/s - same-ish: difference falls within error
       String#append: 105530767.5 i/s - 31.95x  (± 0.00) slower
       String#concat: 105152061.6 i/s - 32.07x  (± 0.00) slower
            String#+: 104784145.0 i/s - 32.18x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   328.494M i/100ms
          String#dup   336.942M i/100ms
Calculating -------------------------------------
           String#+@      3.322B (± 2.7%) i/s -     16.753B in   5.046667s
          String#dup      3.335B (± 2.6%) i/s -     16.847B in   5.055752s

Comparison:
          String#dup: 3334516744.3 i/s
           String#+@: 3322142503.5 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.139M i/100ms
       String#match?     1.662M i/100ms
    String#end_with?    11.299M i/100ms
Calculating -------------------------------------
           String#=~     14.436M (± 3.5%) i/s -     72.908M in   5.056827s
       String#match?     16.677M (± 2.8%) i/s -     84.743M in   5.085414s
    String#end_with?    111.081M (± 3.7%) i/s -    564.963M in   5.093904s

Comparison:
    String#end_with?: 111081405.8 i/s
       String#match?: 16677199.2 i/s - 6.66x  (± 0.00) slower
           String#=~: 14436461.1 i/s - 7.69x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   783.020k i/100ms
          String#sub   986.972k i/100ms
String#dup["string"]=
                        10.389M i/100ms
Calculating -------------------------------------
         String#gsub      8.796M (± 9.5%) i/s -     43.849M in   5.043008s
          String#sub     10.091M (± 9.5%) i/s -     50.336M in   5.041673s
String#dup["string"]=
                        103.453M (± 4.3%) i/s -    519.470M in   5.032240s

Comparison:
String#dup["string"]=: 103452809.5 i/s
          String#sub: 10090594.4 i/s - 10.25x  (± 0.00) slower
         String#gsub:  8796245.2 i/s - 11.76x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   359.707k i/100ms
           String#tr   178.087k i/100ms
Calculating -------------------------------------
         String#gsub      4.228M (± 4.7%) i/s -     21.223M in   5.031667s
           String#tr      1.761M (± 4.1%) i/s -      8.904M in   5.066371s

Comparison:
         String#gsub:  4227532.2 i/s
           String#tr:  1760579.1 i/s - 2.40x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   322.518M i/100ms
         With Freeze   325.344M i/100ms
Calculating -------------------------------------
      Without Freeze      3.314B (± 3.4%) i/s -     16.771B in   5.067067s
         With Freeze      3.313B (± 5.7%) i/s -     16.593B in   5.028837s

Comparison:
      Without Freeze: 3313623826.0 i/s
         With Freeze: 3313154396.4 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/    10.942k i/100ms
      String#squeeze    75.218k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    161.632k (± 9.1%) i/s -    809.708k in   5.061464s
      String#squeeze    744.853k (± 7.4%) i/s -      3.761M in   5.085781s

Comparison:
      String#squeeze:   744853.5 i/s
 String#gsub/regex+/:   161632.4 i/s - 4.61x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     4.036M i/100ms
       String#match?     6.544M i/100ms
  String#start_with?    13.349M i/100ms
Calculating -------------------------------------
           String#=~     45.454M (± 6.8%) i/s -    226.031M in   5.007989s
       String#match?     66.221M (± 2.9%) i/s -    333.753M in   5.044397s
  String#start_with?    132.902M (± 2.5%) i/s -    667.433M in   5.025082s

Comparison:
  String#start_with?: 132901698.2 i/s
       String#match?: 66221452.5 i/s - 2.01x  (± 0.00) slower
           String#=~: 45454347.5 i/s - 2.92x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    93.935k i/100ms
    String#[0, n] ==   301.640k i/100ms
   String#[RANGE] ==   368.857k i/100ms
   String#[0...n] ==   250.763k i/100ms
Calculating -------------------------------------
  String#start_with?      7.208M (± 4.7%) i/s -     35.977M in   5.008882s
    String#[0, n] ==      3.222M (± 4.7%) i/s -     16.289M in   5.067306s
   String#[RANGE] ==      3.664M (± 3.9%) i/s -     18.443M in   5.041552s
   String#[0...n] ==      2.622M (± 7.6%) i/s -     13.040M in   5.012422s

Comparison:
  String#start_with?:  7207610.2 i/s
   String#[RANGE] ==:  3663948.4 i/s - 1.97x  (± 0.00) slower
    String#[0, n] ==:  3222139.5 i/s - 2.24x  (± 0.00) slower
   String#[0...n] ==:  2621864.6 i/s - 2.75x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    10.362M i/100ms
 String#sub!'string'     1.008M i/100ms
String#gsub!'string'   894.048k i/100ms
  String#[/regexp/]=     2.728M i/100ms
 String#sub!/regexp/     1.409M i/100ms
String#gsub!/regexp/   901.410k i/100ms
Calculating -------------------------------------
  String#['string']=    105.032M (± 2.6%) i/s -    528.447M in   5.035036s
 String#sub!'string'     10.422M (±17.4%) i/s -     48.366M in   5.004735s
String#gsub!'string'      9.356M (± 8.8%) i/s -     46.490M in   5.019398s
  String#[/regexp/]=     28.163M (± 3.2%) i/s -    141.858M in   5.042620s
 String#sub!/regexp/     14.261M (±12.5%) i/s -     70.465M in   5.034101s
String#gsub!/regexp/      8.946M (± 7.9%) i/s -     45.071M in   5.080728s

Comparison:
  String#['string']=: 105031740.7 i/s
  String#[/regexp/]=: 28162655.6 i/s - 3.73x  (± 0.00) slower
 String#sub!/regexp/: 14260775.6 i/s - 7.37x  (± 0.00) slower
 String#sub!'string': 10421764.8 i/s - 10.08x  (± 0.00) slower
String#gsub!'string':  9356432.2 i/s - 11.23x  (± 0.00) slower
String#gsub!/regexp/:  8945675.5 i/s - 11.74x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     3.035M i/100ms
        String#chomp     5.931M i/100ms
String#delete_suffix    15.634M i/100ms
Calculating -------------------------------------
          String#sub     30.935M (± 4.1%) i/s -    154.774M in   5.012092s
        String#chomp     58.616M (± 2.9%) i/s -    296.530M in   5.063356s
String#delete_suffix    153.170M (± 8.7%) i/s -    766.072M in   5.045617s

Comparison:
String#delete_suffix: 153169995.3 i/s
        String#chomp: 58615535.9 i/s - 2.61x  (± 0.00) slower
          String#sub: 30934756.6 i/s - 4.95x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   337.857M i/100ms
          String#sub    14.109M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.328B (± 3.4%) i/s -     16.893B in   5.082792s
          String#sub    139.991M (± 2.3%) i/s -    705.446M in   5.042013s

Comparison:
String#delete_prefix: 3327562240.7 i/s
          String#sub: 139991236.8 i/s - 23.77x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.946M i/100ms
    String#unpack[0]     2.020M i/100ms
Calculating -------------------------------------
      String#unpack1     20.248M (± 3.4%) i/s -    101.205M in   5.004791s
    String#unpack[0]     20.084M (± 3.0%) i/s -    100.995M in   5.033538s

Comparison:
      String#unpack1: 20247657.6 i/s
    String#unpack[0]: 20083606.1 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    40.140k i/100ms
          Time.parse   275.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    519.722k (±16.5%) i/s -      2.489M in   5.009518s
          Time.parse      6.676k (±21.0%) i/s -     31.075k in   5.010074s

Comparison:
        Time.iso8601:   519722.2 i/s
          Time.parse:     6675.9 i/s - 77.85x  (± 0.00) slower

