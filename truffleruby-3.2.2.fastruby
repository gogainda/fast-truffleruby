$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       319.029M i/100ms
Function with splat arguments
                         1.952k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.249B (± 2.6%) i/s -     16.270B in   5.012006s
Function with splat arguments
                         19.973k (± 8.2%) i/s -     99.552k in   5.023542s

Comparison:
Function with single Array argument: 3248538019.7 i/s
Function with splat arguments:    19972.7 i/s - 162648.85x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   329.210M i/100ms
Sequential Assignment
                       324.011M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.192B (± 6.1%) i/s -     16.131B in   5.081555s
Sequential Assignment
                          3.278B (± 2.3%) i/s -     16.525B in   5.043526s

Comparison:
Sequential Assignment: 3278152338.3 i/s
 Parallel Assignment: 3191861281.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   324.168M i/100ms
       attr_accessor   323.540M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.262B (± 2.7%) i/s -     16.533B in   5.072001s
       attr_accessor      3.275B (± 2.5%) i/s -     16.501B in   5.042474s

Comparison:
       attr_accessor: 3274552178.7 i/s
   getter_and_setter: 3262022643.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    11.207k i/100ms
         respond_to?   324.168M i/100ms
Calculating -------------------------------------
      begin...rescue    105.025k (± 6.3%) i/s -    526.729k in   5.040514s
         respond_to?      3.300B (± 2.5%) i/s -     16.533B in   5.013119s

Comparison:
         respond_to?: 3299898703.5 i/s
      begin...rescue:   105024.8 i/s - 31420.19x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   300.524M i/100ms
             &method   331.467M i/100ms
Calculating -------------------------------------
              normal      3.258B (± 2.7%) i/s -     16.529B in   5.077704s
             &method      3.266B (± 2.9%) i/s -     16.573B in   5.079195s

Comparison:
             &method: 3265893975.7 i/s
              normal: 3257674758.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       181.000  i/100ms
       define_method   152.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          4.021k (±51.8%) i/s -      8.145k in   5.098214s
       define_method     12.374k (±40.5%) i/s -     11.096k in   5.236024s

Comparison:
       define_method:    12373.9 i/s
module_eval with string:     4021.0 i/s - 3.08x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    83.553k i/100ms
       Kernel#format   109.760k i/100ms
            String#%    20.819k i/100ms
Calculating -------------------------------------
         Float#round      1.348M (± 5.0%) i/s -      6.768M in   5.034882s
       Kernel#format      1.086M (± 3.1%) i/s -      5.488M in   5.056222s
            String#%    214.470k (±10.1%) i/s -      1.062M in   5.019642s

Comparison:
         Float#round:  1348154.2 i/s
       Kernel#format:  1086462.9 i/s - 1.24x  (± 0.00) slower
            String#%:   214469.8 i/s - 6.29x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   329.318M i/100ms
          OpenStruct   324.183M i/100ms
Calculating -------------------------------------
                Hash      3.250B (± 2.4%) i/s -     16.466B in   5.068771s
          OpenStruct      3.275B (± 2.2%) i/s -     16.533B in   5.051338s

Comparison:
          OpenStruct: 3274624095.0 i/s
                Hash: 3250391069.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   321.916M i/100ms
          OpenStruct     4.633k i/100ms
Calculating -------------------------------------
                Hash      3.105B (±10.1%) i/s -     15.452B in   5.054180s
          OpenStruct     29.069k (±15.2%) i/s -    143.623k in   5.077909s

Comparison:
                Hash: 3104645323.8 i/s
          OpenStruct:    29068.8 i/s - 106803.49x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   921.548k i/100ms
  ancestors.include?   228.854k i/100ms
Calculating -------------------------------------
  less than or equal      9.923M (± 3.5%) i/s -     49.764M in   5.021449s
  ancestors.include?      2.290M (± 7.2%) i/s -     11.443M in   5.033166s

Comparison:
  less than or equal:  9922998.9 i/s
  ancestors.include?:  2289850.7 i/s - 4.33x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     32.398  (± 3.1%) i/s -    162.000  in   5.008282s
         Kernel loop     32.315  (± 3.1%) i/s -    162.000  in   5.018563s

Comparison:
          While Loop:       32.4 i/s
         Kernel loop:       32.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   324.226M i/100ms
         Array#first   316.206M i/100ms
Calculating -------------------------------------
           Array#[0]      3.223B (± 4.0%) i/s -     16.211B in   5.038744s
         Array#first      3.251B (± 2.9%) i/s -     16.443B in   5.061611s

Comparison:
         Array#first: 3251345624.2 i/s
           Array#[0]: 3223061176.8 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   322.992M i/100ms
          Array#last   324.363M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.280B (± 2.5%) i/s -     16.473B in   5.025636s
          Array#last      3.302B (± 2.5%) i/s -     16.542B in   5.012405s

Comparison:
          Array#last: 3302461908.5 i/s
          Array#[-1]: 3279715285.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   871.754k i/100ms
Calculating -------------------------------------
                find     13.936  (± 0.0%) i/s -     70.000  in   5.029215s
             bsearch      9.091M (± 4.4%) i/s -     46.203M in   5.092473s

Comparison:
             bsearch:  9091199.1 i/s
                find:       13.9 i/s - 652330.41x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.259  (± 0.0%) i/s -      2.000  in   7.718588s
        Array#insert      1.422  (± 0.0%) i/s -      8.000  in   5.625892s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.3 i/s - 5.49x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   312.094M i/100ms
          Array#size   316.030M i/100ms
         Array#count   317.874M i/100ms
Calculating -------------------------------------
        Array#length      3.245B (± 4.0%) i/s -     16.229B in   5.011543s
          Array#size      3.291B (± 2.1%) i/s -     16.750B in   5.091476s
         Array#count      3.277B (± 1.8%) i/s -     16.529B in   5.045240s

Comparison:
          Array#size: 3291254001.6 i/s
         Array#count: 3277348091.0 i/s - same-ish: difference falls within error
        Array#length: 3244677941.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    35.922k i/100ms
        Array#sample     3.817M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    359.826k (± 3.4%) i/s -      1.832M in   5.097738s
        Array#sample     38.357M (± 2.2%) i/s -    194.672M in   5.077595s

Comparison:
        Array#sample: 38357436.8 i/s
 Array#shuffle.first:   359826.5 i/s - 106.60x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601     1.045k i/100ms
          Date.parse   582.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     19.306k (±37.6%) i/s -     85.690k in   5.057779s
          Date.parse      6.629k (±19.9%) i/s -     32.010k in   5.031096s

Comparison:
        Date.iso8601:    19305.6 i/s
          Date.parse:     6629.2 i/s - 2.91x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   347.369k i/100ms
           Array#map     1.659M i/100ms
Calculating -------------------------------------
   Array#each + push      3.805M (± 4.6%) i/s -     19.105M in   5.032339s
           Array#map     17.188M (± 8.6%) i/s -     86.250M in   5.066492s

Comparison:
           Array#map: 17188294.9 i/s
   Array#each + push:  3805223.8 i/s - 4.52x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    12.488M i/100ms
               #each    35.938M i/100ms
Calculating -------------------------------------
            For loop    125.691M (± 3.1%) i/s -    636.903M in   5.072181s
               #each    358.517M (± 2.5%) i/s -      1.797B in   5.015256s

Comparison:
               #each: 358516599.6 i/s
            For loop: 125690808.5 i/s - 2.85x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.449M i/100ms
     each_with_index     1.778M i/100ms
Calculating -------------------------------------
          While Loop     14.970M (± 4.4%) i/s -     75.343M in   5.042776s
     each_with_index     18.889M (± 6.4%) i/s -     94.222M in   5.011608s

Comparison:
     each_with_index: 18888761.7 i/s
          While Loop: 14970123.3 i/s - 1.26x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   314.592k i/100ms
      inject to_proc   314.555k i/100ms
        inject block   316.865k i/100ms
Calculating -------------------------------------
       inject symbol      3.149M (± 2.4%) i/s -     16.044M in   5.098086s
      inject to_proc      3.140M (± 2.6%) i/s -     15.728M in   5.011853s
        inject block      3.125M (± 7.0%) i/s -     15.526M in   5.008949s

Comparison:
       inject symbol:  3148921.2 i/s
      inject to_proc:  3140273.9 i/s - same-ish: difference falls within error
        inject block:  3125232.2 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    24.503k i/100ms
   Array#map.flatten    27.654k i/100ms
      Array#flat_map    59.473k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    270.472k (± 7.5%) i/s -      1.348M in   5.019603s
   Array#map.flatten    270.487k (± 4.6%) i/s -      1.355M in   5.020652s
      Array#flat_map    580.134k (± 7.7%) i/s -      2.914M in   5.070612s

Comparison:
      Array#flat_map:   580133.9 i/s
   Array#map.flatten:   270487.4 i/s - 2.14x  (± 0.00) slower
Array#map.flatten(1):   270471.8 i/s - 2.14x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   313.608k i/100ms
  Array#reverse_each     2.393M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.243M (± 3.9%) i/s -     16.308M in   5.035736s
  Array#reverse_each     27.395M (±10.1%) i/s -    136.391M in   5.030923s

Comparison:
  Array#reverse_each: 27395128.1 i/s
  Array#reverse.each:  3243433.5 i/s - 8.45x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       991.515k i/100ms
   Enumerable#detect     4.727M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.491M (± 8.7%) i/s -    208.218M in  20.076143s
   Enumerable#detect     46.524M (± 3.1%) i/s -    931.286M in  20.037842s

Comparison:
   Enumerable#detect: 46524293.1 i/s
Enumerable#select.first: 10490861.6 i/s - 4.43x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       179.745k i/100ms
Enumerable#select.last
                       558.882k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.302M (± 3.6%) i/s -     11.504M in   5.004546s
Enumerable#select.last
                          5.498M (± 6.1%) i/s -     27.385M in   5.006277s

Comparison:
Enumerable#select.last:  5497990.9 i/s
Enumerable#reverse.detect:  2301562.0 i/s - 2.39x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.911k i/100ms
  Enumerable#sort_by     2.605k i/100ms
     Enumerable#sort     4.908k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         39.485k (±21.6%) i/s -    172.084k in   5.006133s
  Enumerable#sort_by     27.605k (±55.0%) i/s -     93.780k in   5.032883s
     Enumerable#sort     50.466k (±19.9%) i/s -    240.492k in   5.011395s

Comparison:
     Enumerable#sort:    50466.2 i/s
Enumerable#sort_by (Symbol#to_proc):    39485.2 i/s - same-ish: difference falls within error
  Enumerable#sort_by:    27605.2 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   754.633k i/100ms
Enumerable#sort_by...first
                         7.071k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      8.440M (± 3.1%) i/s -     42.259M in   5.011951s
Enumerable#sort_by...first
                        104.277k (± 4.6%) i/s -    523.254k in   5.029407s

Comparison:
   Enumerable#min_by:  8440328.6 i/s
Enumerable#sort_by...first:   104277.1 i/s - 80.94x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   649.106k i/100ms
            Hash#dup   904.224k i/100ms
Calculating -------------------------------------
              Hash[]      9.440M (± 6.6%) i/s -     47.385M in   5.042988s
            Hash#dup      8.996M (± 5.5%) i/s -     45.211M in   5.041401s

Comparison:
              Hash[]:  9440209.1 i/s
            Hash#dup:  8995517.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   323.684M i/100ms
  Hash#fetch, symbol   316.481M i/100ms
     Hash#[], string    19.184M i/100ms
  Hash#fetch, string     4.348M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.267B (± 3.4%) i/s -     16.508B in   5.058699s
  Hash#fetch, symbol      3.289B (± 2.5%) i/s -     16.457B in   5.007621s
     Hash#[], string    192.781M (± 2.8%) i/s -    978.388M in   5.079268s
  Hash#fetch, string    203.930M (± 5.2%) i/s -      1.017B in   5.006921s

Comparison:
  Hash#fetch, symbol: 3288542320.6 i/s
     Hash#[], symbol: 3267179664.0 i/s - same-ish: difference falls within error
  Hash#fetch, string: 203929817.2 i/s - 16.13x  (± 0.00) slower
     Hash#[], string: 192780807.4 i/s - 17.06x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    93.373M i/100ms
             Hash#[]    93.111M i/100ms
          Hash#[] ||    94.322M i/100ms
          Hash#[] &&    94.130M i/100ms
          Hash#fetch    93.390M i/100ms
 Hash#fetch fallback    94.448M i/100ms
Calculating -------------------------------------
            Hash#dig    942.761M (± 2.6%) i/s -      4.762B in   5.054523s
             Hash#[]    939.669M (± 1.8%) i/s -      4.749B in   5.055120s
          Hash#[] ||    933.522M (± 2.1%) i/s -      4.716B in   5.054130s
          Hash#[] &&    931.265M (± 2.9%) i/s -      4.707B in   5.058331s
          Hash#fetch    938.654M (± 1.9%) i/s -      4.763B in   5.075961s
 Hash#fetch fallback    936.987M (± 1.8%) i/s -      4.722B in   5.041691s

Comparison:
            Hash#dig: 942760782.3 i/s
             Hash#[]: 939669465.3 i/s - same-ish: difference falls within error
          Hash#fetch: 938654276.1 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 936987488.5 i/s - same-ish: difference falls within error
          Hash#[] ||: 933522112.0 i/s - same-ish: difference falls within error
          Hash#[] &&: 931264691.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   331.432M i/100ms
  Hash#fetch + block   310.166M i/100ms
    Hash#fetch + arg   322.266M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.251B (± 2.9%) i/s -     16.572B in   5.101337s
  Hash#fetch + block      3.250B (± 2.5%) i/s -     16.439B in   5.061534s
    Hash#fetch + arg      3.252B (± 2.6%) i/s -     16.436B in   5.056965s

Comparison:
    Hash#fetch + arg: 3252372055.4 i/s
  Hash#fetch + const: 3251221571.7 i/s - same-ish: difference falls within error
  Hash#fetch + block: 3249912812.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    18.795k i/100ms
         sort + to_h     9.384k i/100ms
Calculating -------------------------------------
      sort_by + to_h    449.257k (± 8.4%) i/s -      2.237M in   5.019543s
         sort + to_h    206.076k (± 6.0%) i/s -      1.032M in   5.029496s

Comparison:
      sort_by + to_h:   449256.5 i/s
         sort + to_h:   206076.4 i/s - 2.18x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   203.425k i/100ms
       Hash#each_key   246.540k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.242M (±10.7%) i/s -     10.985M in   5.019855s
       Hash#each_key      2.427M (± 6.4%) i/s -     12.080M in   5.005675s

Comparison:
       Hash#each_key:  2427230.6 i/s
      Hash#keys.each:  2242492.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   318.000  i/100ms
           Hash#key?     3.950M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      5.693k (±15.9%) i/s -     27.348k in   5.019475s
           Hash#key?     38.903M (± 2.1%) i/s -    197.498M in   5.078914s

Comparison:
           Hash#key?: 38902911.5 i/s
  Hash#keys.include?:     5692.8 i/s - 6833.71x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    29.122k i/100ms
            Hash#[]=    34.282k i/100ms
Calculating -------------------------------------
         Hash#merge!    338.520k (± 6.7%) i/s -      1.689M in   5.019964s
            Hash#[]=    338.093k (± 5.9%) i/s -      1.714M in   5.093584s

Comparison:
         Hash#merge!:   338520.2 i/s
            Hash#[]=:   338092.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        34.635k i/100ms
      Hash#merge({})    23.103k i/100ms
 Hash#dup#merge!({})    31.456k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        395.306k (± 9.8%) i/s -      1.974M in   5.051598s
      Hash#merge({})    240.367k (± 9.3%) i/s -      1.201M in   5.050671s
 Hash#dup#merge!({})    329.136k (±10.1%) i/s -      1.636M in   5.031747s

Comparison:
{}#merge!(Hash) do end:   395306.4 i/s
 Hash#dup#merge!({}):   329136.1 i/s - same-ish: difference falls within error
      Hash#merge({}):   240366.7 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   323.464M i/100ms
          Hash#merge   323.499M i/100ms
Calculating -------------------------------------
        Hash#**other      3.279B (± 2.4%) i/s -     16.497B in   5.033804s
          Hash#merge      3.256B (± 2.5%) i/s -     16.498B in   5.070007s

Comparison:
        Hash#**other: 3279116840.4 i/s
          Hash#merge: 3256241278.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.032k i/100ms
         Hash#merge!    36.805k i/100ms
Calculating -------------------------------------
          Hash#merge     14.673k (± 9.5%) i/s -     73.272k in   5.056404s
         Hash#merge!    374.627k (± 4.5%) i/s -      1.877M in   5.021902s

Comparison:
         Hash#merge!:   374627.0 i/s
          Hash#merge:    14673.4 i/s - 25.53x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.907M i/100ms
Array#each               1.429M i/100ms
Array#each_w/_object     1.784M i/100ms
Hash#select-include      2.452M i/100ms
Calculating -------------------------------------
Hash#native-slice        19.807M (± 6.5%) i/s -     99.187M in   5.038775s
Array#each               35.765M (±10.2%) i/s -    177.255M in   5.032997s
Array#each_w/_object     17.721M (± 5.0%) i/s -     89.193M in   5.048445s
Hash#select-include      24.483M (± 7.2%) i/s -    122.621M in   5.044364s

Comparison:
Array#each          : 35764935.2 i/s
Hash#select-include : 24483176.8 i/s - 1.46x  (± 0.00) slower
Hash#native-slice   : 19807435.2 i/s - 1.81x  (± 0.00) slower
Array#each_w/_object: 17721045.6 i/s - 2.02x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   633.000  i/100ms
         Hash#value?     4.340k i/100ms
Calculating -------------------------------------
Hash#values.include?      6.271k (±16.7%) i/s -     30.384k in   5.048896s
         Hash#value?     41.750k (± 2.4%) i/s -    212.660k in   5.096674s

Comparison:
         Hash#value?:    41750.3 i/s
Hash#values.include?:     6271.4 i/s - 6.66x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   324.652M i/100ms
                send   323.673M i/100ms
      method_missing   324.805M i/100ms
Calculating -------------------------------------
                call      3.244B (± 3.1%) i/s -     16.233B in   5.009336s
                send      3.243B (± 2.8%) i/s -     16.507B in   5.093421s
      method_missing      3.265B (± 2.5%) i/s -     16.565B in   5.077598s

Comparison:
      method_missing: 3264541384.5 i/s
                call: 3243642104.5 i/s - same-ish: difference falls within error
                send: 3243492810.4 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    63.424k i/100ms
      Symbol#to_proc    80.285k i/100ms
Calculating -------------------------------------
               Block    793.016k (±11.7%) i/s -      3.932M in   5.052775s
      Symbol#to_proc    755.963k (±14.0%) i/s -      3.773M in   5.099842s

Comparison:
               Block:   793015.6 i/s
      Symbol#to_proc:   755963.2 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   323.188M i/100ms
       block + yield   315.924M i/100ms
        unused block   323.430M i/100ms
               yield   331.098M i/100ms
Calculating -------------------------------------
          block.call      3.286B (± 2.3%) i/s -     16.483B in   5.018206s
       block + yield      3.270B (± 3.0%) i/s -     16.428B in   5.029225s
        unused block      3.243B (± 3.3%) i/s -     16.495B in   5.092755s
               yield      3.283B (± 2.4%) i/s -     16.555B in   5.045344s

Comparison:
          block.call: 3286271858.8 i/s
               yield: 3283262127.9 i/s - same-ish: difference falls within error
       block + yield: 3269644535.4 i/s - same-ish: difference falls within error
        unused block: 3242661464.4 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     5.657k i/100ms
      range#include?   177.000  i/100ms
       range#member?   216.000  i/100ms
       plain compare     9.397k i/100ms
Calculating -------------------------------------
        range#cover?     61.923k (±24.3%) i/s -    282.850k in   5.004967s
      range#include?      3.040k (±32.2%) i/s -     13.275k in   5.079569s
       range#member?      2.763k (±31.3%) i/s -     12.096k in   5.007768s
       plain compare     94.475k (±23.2%) i/s -    441.659k in   5.062167s

Comparison:
       plain compare:    94475.2 i/s
        range#cover?:    61923.3 i/s - same-ish: difference falls within error
      range#include?:     3039.6 i/s - 31.08x  (± 0.00) slower
       range#member?:     2762.6 i/s - 34.20x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    13.551M i/100ms
           String#=~    13.462M i/100ms
          Regexp#===    13.604M i/100ms
        String#match    11.045M i/100ms
Calculating -------------------------------------
       String#match?    138.565M (± 1.9%) i/s -    704.658M in   5.087097s
           String#=~    134.622M (± 1.6%) i/s -    673.111M in   5.001292s
          Regexp#===    134.578M (± 2.3%) i/s -    680.217M in   5.057135s
        String#match    109.596M (± 2.1%) i/s -    552.243M in   5.041186s

Comparison:
       String#match?: 138565491.6 i/s
           String#=~: 134621910.8 i/s - same-ish: difference falls within error
          Regexp#===: 134577534.5 i/s - same-ish: difference falls within error
        String#match: 109596469.4 i/s - 1.26x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.513M i/100ms
      String#casecmp     4.739M i/100ms
Calculating -------------------------------------
String#downcase + ==     31.108M (± 7.3%) i/s -    158.347M in   5.129887s
      String#casecmp     46.479M (± 5.0%) i/s -    232.206M in   5.009122s

Comparison:
      String#casecmp: 46479212.9 i/s
String#downcase + ==: 31107857.2 i/s - 1.49x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     9.329M i/100ms
       String#concat     9.622M i/100ms
       String#append    10.504M i/100ms
         "foo" "bar"   327.991M i/100ms
  "#{'foo'}#{'bar'}"   324.678M i/100ms
Calculating -------------------------------------
            String#+    102.520M (± 6.7%) i/s -    513.081M in   5.035699s
       String#concat    102.404M (± 6.8%) i/s -    509.986M in   5.011315s
       String#append    101.749M (± 8.6%) i/s -    504.185M in   5.009689s
         "foo" "bar"      3.274B (± 3.2%) i/s -     16.400B in   5.015228s
  "#{'foo'}#{'bar'}"      3.277B (± 3.0%) i/s -     16.559B in   5.057580s

Comparison:
  "#{'foo'}#{'bar'}": 3277159826.7 i/s
         "foo" "bar": 3273581933.1 i/s - same-ish: difference falls within error
            String#+: 102519556.4 i/s - 31.97x  (± 0.00) slower
       String#concat: 102403515.4 i/s - 32.00x  (± 0.00) slower
       String#append: 101748612.5 i/s - 32.21x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   323.466M i/100ms
          String#dup   321.839M i/100ms
Calculating -------------------------------------
           String#+@      3.263B (± 2.6%) i/s -     16.497B in   5.059559s
          String#dup      3.248B (± 2.9%) i/s -     16.414B in   5.058533s

Comparison:
           String#+@: 3262814083.1 i/s
          String#dup: 3247628642.9 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.385M i/100ms
       String#match?     1.678M i/100ms
    String#end_with?    10.989M i/100ms
Calculating -------------------------------------
           String#=~     13.990M (± 3.2%) i/s -     70.648M in   5.055219s
       String#match?     16.540M (± 1.8%) i/s -     83.878M in   5.072799s
    String#end_with?    109.440M (± 2.4%) i/s -    549.427M in   5.023389s

Comparison:
    String#end_with?: 109440225.0 i/s
       String#match?: 16540082.5 i/s - 6.62x  (± 0.00) slower
           String#=~: 13990164.8 i/s - 7.82x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   757.940k i/100ms
          String#sub   966.794k i/100ms
String#dup["string"]=
                        10.183M i/100ms
Calculating -------------------------------------
         String#gsub      8.634M (± 9.9%) i/s -     43.203M in   5.063455s
          String#sub      9.896M (±10.9%) i/s -     49.306M in   5.062326s
String#dup["string"]=
                        102.101M (± 6.2%) i/s -    509.151M in   5.014381s

Comparison:
String#dup["string"]=: 102100935.4 i/s
          String#sub:  9895522.1 i/s - 10.32x  (± 0.00) slower
         String#gsub:  8634228.0 i/s - 11.83x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   350.831k i/100ms
           String#tr   165.292k i/100ms
Calculating -------------------------------------
         String#gsub      3.955M (±10.2%) i/s -     19.647M in   5.041844s
           String#tr      1.735M (± 3.1%) i/s -      8.760M in   5.055240s

Comparison:
         String#gsub:  3955246.6 i/s
           String#tr:  1734671.2 i/s - 2.28x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   329.601M i/100ms
         With Freeze   319.867M i/100ms
Calculating -------------------------------------
      Without Freeze      3.239B (± 2.0%) i/s -     16.480B in   5.089619s
         With Freeze      3.245B (± 2.5%) i/s -     16.313B in   5.030671s

Comparison:
         With Freeze: 3244818585.3 i/s
      Without Freeze: 3239254156.3 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     9.936k i/100ms
      String#squeeze    73.548k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    160.038k (± 8.6%) i/s -    794.880k in   5.015002s
      String#squeeze    730.540k (± 5.0%) i/s -      3.677M in   5.047345s

Comparison:
      String#squeeze:   730539.8 i/s
 String#gsub/regex+/:   160037.8 i/s - 4.56x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     4.400M i/100ms
       String#match?     6.280M i/100ms
  String#start_with?    12.935M i/100ms
Calculating -------------------------------------
           String#=~     44.977M (± 3.4%) i/s -    228.798M in   5.093414s
       String#match?     64.080M (± 1.8%) i/s -    320.304M in   5.000057s
  String#start_with?    131.274M (± 1.8%) i/s -    659.696M in   5.026902s

Comparison:
  String#start_with?: 131274082.3 i/s
       String#match?: 64080317.1 i/s - 2.05x  (± 0.00) slower
           String#=~: 44976585.8 i/s - 2.92x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    86.283k i/100ms
    String#[0, n] ==   299.328k i/100ms
   String#[RANGE] ==   350.943k i/100ms
   String#[0...n] ==   281.411k i/100ms
Calculating -------------------------------------
  String#start_with?      7.083M (± 3.9%) i/s -     35.376M in   5.004980s
    String#[0, n] ==      3.131M (± 5.1%) i/s -     15.864M in   5.081986s
   String#[RANGE] ==      3.625M (± 3.4%) i/s -     18.249M in   5.040178s
   String#[0...n] ==      2.797M (± 7.6%) i/s -     14.071M in   5.069991s

Comparison:
  String#start_with?:  7082665.5 i/s
   String#[RANGE] ==:  3625091.3 i/s - 1.95x  (± 0.00) slower
    String#[0, n] ==:  3130952.1 i/s - 2.26x  (± 0.00) slower
   String#[0...n] ==:  2796914.8 i/s - 2.53x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    10.165M i/100ms
 String#sub!'string'   979.839k i/100ms
String#gsub!'string'   854.537k i/100ms
  String#[/regexp/]=     2.797M i/100ms
 String#sub!/regexp/     1.455M i/100ms
String#gsub!/regexp/   834.276k i/100ms
Calculating -------------------------------------
  String#['string']=    102.160M (± 2.7%) i/s -    518.431M in   5.078638s
 String#sub!'string'     10.170M (±17.8%) i/s -     46.052M in   5.018242s
String#gsub!'string'      8.971M (± 9.6%) i/s -     44.436M in   5.011134s
  String#[/regexp/]=     28.070M (± 3.8%) i/s -    142.667M in   5.090542s
 String#sub!/regexp/     14.310M (±12.1%) i/s -     71.302M in   5.085400s
String#gsub!/regexp/      8.492M (± 8.8%) i/s -     42.548M in   5.061819s

Comparison:
  String#['string']=: 102160398.7 i/s
  String#[/regexp/]=: 28069638.8 i/s - 3.64x  (± 0.00) slower
 String#sub!/regexp/: 14309800.1 i/s - 7.14x  (± 0.00) slower
 String#sub!'string': 10169764.5 i/s - 10.05x  (± 0.00) slower
String#gsub!'string':  8971250.9 i/s - 11.39x  (± 0.00) slower
String#gsub!/regexp/:  8491960.9 i/s - 12.03x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     2.772M i/100ms
        String#chomp     5.790M i/100ms
String#delete_suffix    14.881M i/100ms
Calculating -------------------------------------
          String#sub     30.425M (± 4.0%) i/s -    152.488M in   5.020486s
        String#chomp     57.391M (± 1.8%) i/s -    289.503M in   5.046094s
String#delete_suffix    149.241M (± 9.6%) i/s -    744.029M in   5.036904s

Comparison:
String#delete_suffix: 149241251.6 i/s
        String#chomp: 57391380.3 i/s - 2.60x  (± 0.00) slower
          String#sub: 30424818.1 i/s - 4.91x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   312.978M i/100ms
          String#sub    13.161M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.255B (± 2.0%) i/s -     16.275B in   5.002017s
          String#sub    140.403M (± 2.1%) i/s -    710.679M in   5.063951s

Comparison:
String#delete_prefix: 3254923713.4 i/s
          String#sub: 140403274.5 i/s - 23.18x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.549M i/100ms
    String#unpack[0]     1.980M i/100ms
Calculating -------------------------------------
      String#unpack1     19.233M (± 6.5%) i/s -     96.026M in   5.022475s
    String#unpack[0]     19.753M (± 4.2%) i/s -     98.979M in   5.020026s

Comparison:
    String#unpack[0]: 19752952.0 i/s
      String#unpack1: 19232666.2 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.0.0-dev-26f8683a, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    35.827k i/100ms
          Time.parse   330.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    335.819k (±28.2%) i/s -      1.576M in   5.016789s
          Time.parse      5.008k (±27.8%) i/s -     23.430k in   5.008633s

Comparison:
        Time.iso8601:   335818.8 i/s
          Time.parse:     5008.3 i/s - 67.05x  (± 0.00) slower

