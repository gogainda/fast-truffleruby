$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       249.369M i/100ms
Function with splat arguments
                         1.832k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.198B (± 2.0%) i/s -     16.209B in   5.070846s
Function with splat arguments
                         19.726k (±10.5%) i/s -     97.096k in   5.003155s

Comparison:
Function with single Array argument: 3197851641.5 i/s
Function with splat arguments:    19725.5 i/s - 162117.47x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   317.129M i/100ms
Sequential Assignment
                       318.065M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.157B (± 2.8%) i/s -     15.856B in   5.027269s
Sequential Assignment
                          3.182B (± 2.0%) i/s -     15.903B in   5.000513s

Comparison:
Sequential Assignment: 3181630722.8 i/s
 Parallel Assignment: 3156798114.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   318.064M i/100ms
       attr_accessor   311.848M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.177B (± 2.6%) i/s -     15.903B in   5.009358s
       attr_accessor      3.172B (± 3.0%) i/s -     15.904B in   5.019551s

Comparison:
   getter_and_setter: 3176914149.1 i/s
       attr_accessor: 3171600630.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     9.523k i/100ms
         respond_to?   321.584M i/100ms
Calculating -------------------------------------
      begin...rescue    104.085k (± 5.6%) i/s -    523.765k in   5.049559s
         respond_to?      3.183B (± 2.9%) i/s -     16.079B in   5.055888s

Comparison:
         respond_to?: 3183074091.7 i/s
      begin...rescue:   104084.7 i/s - 30581.57x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   318.195M i/100ms
             &method   322.829M i/100ms
Calculating -------------------------------------
              normal      3.162B (± 5.2%) i/s -     15.910B in   5.047607s
             &method      3.187B (± 3.8%) i/s -     16.141B in   5.073569s

Comparison:
             &method: 3186817457.5 i/s
              normal: 3162425870.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       142.000  i/100ms
       define_method   164.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          4.048k (±52.2%) i/s -      8.662k in   5.185481s
       define_method     11.152k (±46.2%) i/s -     10.496k in   6.768102s

Comparison:
       define_method:    11152.1 i/s
module_eval with string:     4048.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   123.464k i/100ms
       Kernel#format   105.854k i/100ms
            String#%    20.714k i/100ms
Calculating -------------------------------------
         Float#round      1.276M (± 2.8%) i/s -      6.420M in   5.037001s
       Kernel#format      1.054M (± 2.3%) i/s -      5.293M in   5.025587s
            String#%    206.074k (± 8.8%) i/s -      1.036M in   5.082062s

Comparison:
         Float#round:  1275661.2 i/s
       Kernel#format:  1053758.8 i/s - 1.21x  (± 0.00) slower
            String#%:   206074.3 i/s - 6.19x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   313.175M i/100ms
          OpenStruct   313.461M i/100ms
Calculating -------------------------------------
                Hash      3.203B (± 1.9%) i/s -     16.285B in   5.085799s
          OpenStruct      3.195B (± 3.1%) i/s -     15.987B in   5.009183s

Comparison:
                Hash: 3203286861.0 i/s
          OpenStruct: 3194830611.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   319.662M i/100ms
          OpenStruct     2.702k i/100ms
Calculating -------------------------------------
                Hash      3.075B (± 8.4%) i/s -     15.344B in   5.035049s
          OpenStruct     40.327k (±29.1%) i/s -    183.736k in   5.047285s

Comparison:
                Hash: 3075045403.3 i/s
          OpenStruct:    40327.3 i/s - 76252.23x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   971.190k i/100ms
  ancestors.include?   229.834k i/100ms
Calculating -------------------------------------
  less than or equal     10.803M (± 4.7%) i/s -     54.387M in   5.046045s
  ancestors.include?      2.354M (± 3.5%) i/s -     11.951M in   5.082509s

Comparison:
  less than or equal: 10803135.0 i/s
  ancestors.include?:  2354378.7 i/s - 4.59x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     31.912  (± 3.1%) i/s -    160.000  in   5.027571s
         Kernel loop     31.743  (± 6.3%) i/s -    158.000  in   5.012239s

Comparison:
          While Loop:       31.9 i/s
         Kernel loop:       31.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   315.555M i/100ms
         Array#first   306.593M i/100ms
Calculating -------------------------------------
           Array#[0]      3.061B (± 2.3%) i/s -     15.462B in   5.054126s
         Array#first      3.085B (± 1.9%) i/s -     15.636B in   5.071071s

Comparison:
         Array#first: 3084604894.0 i/s
           Array#[0]: 3060958037.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   317.474M i/100ms
          Array#last   304.745M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.039B (± 2.6%) i/s -     15.239B in   5.017753s
          Array#last      3.058B (± 2.8%) i/s -     15.542B in   5.087125s

Comparison:
          Array#last: 3057870114.9 i/s
          Array#[-1]: 3039067827.7 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   903.498k i/100ms
Calculating -------------------------------------
                find     13.717  (± 0.0%) i/s -     69.000  in   5.035193s
             bsearch      9.081M (± 2.4%) i/s -     46.078M in   5.077437s

Comparison:
             bsearch:  9080753.6 i/s
                find:       13.7 i/s - 662007.08x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.254  (± 0.0%) i/s -      2.000  in   7.872232s
        Array#insert      1.391  (± 0.0%) i/s -      7.000  in   5.031517s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.3 i/s - 5.48x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   312.410M i/100ms
          Array#size   319.131M i/100ms
         Array#count   322.991M i/100ms
Calculating -------------------------------------
        Array#length      3.196B (± 2.4%) i/s -     16.245B in   5.086600s
          Array#size      3.192B (± 2.2%) i/s -     16.276B in   5.101192s
         Array#count      3.122B (± 4.3%) i/s -     15.827B in   5.079217s

Comparison:
        Array#length: 3195686125.2 i/s
          Array#size: 3192146162.4 i/s - same-ish: difference falls within error
         Array#count: 3122402147.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    35.644k i/100ms
        Array#sample     3.806M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    358.630k (± 3.3%) i/s -      1.818M in   5.075077s
        Array#sample     38.040M (± 1.6%) i/s -    190.285M in   5.003595s

Comparison:
        Array#sample: 38040254.1 i/s
 Array#shuffle.first:   358630.5 i/s - 106.07x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   948.000  i/100ms
          Date.parse   533.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     28.527k (±40.5%) i/s -    111.864k in   5.012066s
          Date.parse      7.951k (±26.3%) i/s -     36.777k in   5.024365s

Comparison:
        Date.iso8601:    28527.2 i/s
          Date.parse:     7950.7 i/s - 3.59x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   327.090k i/100ms
           Array#map     1.683M i/100ms
Calculating -------------------------------------
   Array#each + push      3.736M (± 4.7%) i/s -     18.971M in   5.091193s
           Array#map     17.419M (± 6.6%) i/s -     87.492M in   5.044987s

Comparison:
           Array#map: 17419367.4 i/s
   Array#each + push:  3735603.6 i/s - 4.66x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    10.079M i/100ms
               #each    34.437M i/100ms
Calculating -------------------------------------
            For loop    123.884M (± 1.9%) i/s -    624.886M in   5.046188s
               #each    354.794M (± 1.1%) i/s -      1.791B in   5.047846s

Comparison:
               #each: 354793666.1 i/s
            For loop: 123883540.6 i/s - 2.86x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.410M i/100ms
     each_with_index     1.967M i/100ms
Calculating -------------------------------------
          While Loop     14.195M (± 1.4%) i/s -     71.891M in   5.065818s
     each_with_index     17.640M (± 1.5%) i/s -     88.530M in   5.019975s

Comparison:
     each_with_index: 17639561.4 i/s
          While Loop: 14194568.6 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   310.687k i/100ms
      inject to_proc   311.852k i/100ms
        inject block   312.225k i/100ms
Calculating -------------------------------------
       inject symbol      3.123M (± 0.8%) i/s -     15.845M in   5.073910s
      inject to_proc      3.117M (± 1.7%) i/s -     15.593M in   5.004830s
        inject block      3.060M (± 7.2%) i/s -     15.299M in   5.036152s

Comparison:
       inject symbol:  3123041.3 i/s
      inject to_proc:  3116548.5 i/s - same-ish: difference falls within error
        inject block:  3060322.5 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    24.921k i/100ms
   Array#map.flatten    24.054k i/100ms
      Array#flat_map    55.638k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    255.304k (± 8.2%) i/s -      1.271M in   5.021316s
   Array#map.flatten    256.433k (± 8.3%) i/s -      1.275M in   5.014918s
      Array#flat_map    567.501k (± 4.1%) i/s -      2.838M in   5.009088s

Comparison:
      Array#flat_map:   567501.2 i/s
   Array#map.flatten:   256433.4 i/s - 2.21x  (± 0.00) slower
Array#map.flatten(1):   255303.7 i/s - 2.22x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   298.737k i/100ms
  Array#reverse_each     2.367M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.167M (± 5.1%) i/s -     15.833M in   5.014391s
  Array#reverse_each     23.774M (± 3.8%) i/s -    120.707M in   5.084279s

Comparison:
  Array#reverse_each: 23773559.6 i/s
  Array#reverse.each:  3166963.4 i/s - 7.51x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       656.580k i/100ms
   Enumerable#detect     4.607M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.560M (± 7.8%) i/s -    209.449M in  20.013959s
   Enumerable#detect     45.710M (± 2.7%) i/s -    916.842M in  20.074635s

Comparison:
   Enumerable#detect: 45709913.3 i/s
Enumerable#select.first: 10560193.2 i/s - 4.33x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       285.518k i/100ms
Enumerable#select.last
                       552.512k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.153M (± 4.0%) i/s -     15.989M in   5.080421s
Enumerable#select.last
                          5.493M (± 3.1%) i/s -     27.626M in   5.034755s

Comparison:
Enumerable#select.last:  5492500.0 i/s
Enumerable#reverse.detect:  3152563.1 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.302k i/100ms
  Enumerable#sort_by     3.035k i/100ms
     Enumerable#sort     2.991k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         39.081k (±14.8%) i/s -    186.462k in   5.033334s
  Enumerable#sort_by     37.406k (±19.2%) i/s -    172.995k in   5.057988s
     Enumerable#sort     52.315k (± 4.7%) i/s -    263.208k in   5.044047s

Comparison:
     Enumerable#sort:    52315.2 i/s
Enumerable#sort_by (Symbol#to_proc):    39081.1 i/s - 1.34x  (± 0.00) slower
  Enumerable#sort_by:    37406.3 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   778.256k i/100ms
Enumerable#sort_by...first
                         7.240k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      8.281M (± 2.1%) i/s -     42.026M in   5.077510s
Enumerable#sort_by...first
                        101.814k (± 6.0%) i/s -    506.800k in   5.007413s

Comparison:
   Enumerable#min_by:  8280736.7 i/s
Enumerable#sort_by...first:   101814.3 i/s - 81.33x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   595.662k i/100ms
            Hash#dup   692.651k i/100ms
Calculating -------------------------------------
              Hash[]      6.867M (± 9.8%) i/s -     33.953M in   5.001551s
            Hash#dup      6.939M (±10.4%) i/s -     34.633M in   5.046375s

Comparison:
            Hash#dup:  6939103.9 i/s
              Hash[]:  6866957.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   316.931M i/100ms
  Hash#fetch, symbol   314.861M i/100ms
     Hash#[], string    19.020M i/100ms
  Hash#fetch, string    20.177M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.151B (± 2.4%) i/s -     15.847B in   5.031546s
  Hash#fetch, symbol      3.174B (± 2.5%) i/s -     16.058B in   5.062762s
     Hash#[], string    188.080M (± 2.5%) i/s -    951.019M in   5.059828s
  Hash#fetch, string    200.292M (± 2.5%) i/s -      1.009B in   5.040163s

Comparison:
  Hash#fetch, symbol: 3173928805.4 i/s
     Hash#[], symbol: 3151346824.2 i/s - same-ish: difference falls within error
  Hash#fetch, string: 200291962.6 i/s - 15.85x  (± 0.00) slower
     Hash#[], string: 188079643.1 i/s - 16.88x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    92.248M i/100ms
             Hash#[]    89.498M i/100ms
          Hash#[] ||    92.354M i/100ms
          Hash#[] &&    92.317M i/100ms
          Hash#fetch    91.121M i/100ms
 Hash#fetch fallback    92.377M i/100ms
Calculating -------------------------------------
            Hash#dig    915.261M (± 2.2%) i/s -      4.612B in   5.042078s
             Hash#[]    919.961M (± 1.4%) i/s -      4.654B in   5.059930s
          Hash#[] ||    909.821M (± 3.7%) i/s -      4.618B in   5.083789s
          Hash#[] &&    918.178M (± 2.7%) i/s -      4.616B in   5.031546s
          Hash#fetch    922.074M (± 0.6%) i/s -      4.647B in   5.040077s
 Hash#fetch fallback    919.451M (± 1.5%) i/s -      4.619B in   5.024714s

Comparison:
          Hash#fetch: 922074220.4 i/s
             Hash#[]: 919960738.0 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 919451321.1 i/s - same-ish: difference falls within error
          Hash#[] &&: 918178246.4 i/s - same-ish: difference falls within error
            Hash#dig: 915260861.2 i/s - same-ish: difference falls within error
          Hash#[] ||: 909821154.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   315.444M i/100ms
  Hash#fetch + block   317.290M i/100ms
    Hash#fetch + arg   311.871M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.203B (± 1.7%) i/s -     16.088B in   5.023797s
  Hash#fetch + block      3.208B (± 1.9%) i/s -     16.182B in   5.045579s
    Hash#fetch + arg      3.185B (± 2.7%) i/s -     16.217B in   5.095326s

Comparison:
  Hash#fetch + block: 3208359095.4 i/s
  Hash#fetch + const: 3203330963.7 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 3185260264.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    19.692k i/100ms
         sort + to_h     2.823k i/100ms
Calculating -------------------------------------
      sort_by + to_h    460.155k (±14.8%) i/s -      2.245M in   5.005604s
         sort + to_h    220.113k (±12.8%) i/s -      1.064M in   4.999630s

Comparison:
      sort_by + to_h:   460154.6 i/s
         sort + to_h:   220112.8 i/s - 2.09x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   206.576k i/100ms
       Hash#each_key   258.394k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.438M (±11.2%) i/s -     11.981M in   5.048022s
       Hash#each_key      2.563M (± 7.0%) i/s -     12.920M in   5.078958s

Comparison:
       Hash#each_key:  2562649.9 i/s
      Hash#keys.each:  2437949.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   275.000  i/100ms
           Hash#key?    15.030M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      3.101k (±15.0%) i/s -     15.125k in   5.017407s
           Hash#key?    153.555M (± 2.0%) i/s -    781.566M in   5.091905s

Comparison:
           Hash#key?: 153555120.2 i/s
  Hash#keys.include?:     3101.1 i/s - 49517.00x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    50.887k i/100ms
            Hash#[]=    56.058k i/100ms
Calculating -------------------------------------
         Hash#merge!    585.896k (± 7.0%) i/s -      2.951M in   5.062650s
            Hash#[]=    584.602k (± 7.1%) i/s -      2.915M in   5.022797s

Comparison:
         Hash#merge!:   585896.3 i/s
            Hash#[]=:   584601.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        27.945k i/100ms
      Hash#merge({})    19.572k i/100ms
 Hash#dup#merge!({})    29.998k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        380.379k (±12.0%) i/s -      1.872M in   5.000974s
      Hash#merge({})    201.707k (± 8.4%) i/s -      1.018M in   5.085480s
 Hash#dup#merge!({})    323.404k (± 6.7%) i/s -      1.620M in   5.034742s

Comparison:
{}#merge!(Hash) do end:   380378.7 i/s
 Hash#dup#merge!({}):   323404.3 i/s - same-ish: difference falls within error
      Hash#merge({}):   201706.7 i/s - 1.89x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   317.760M i/100ms
          Hash#merge   317.940M i/100ms
Calculating -------------------------------------
        Hash#**other      3.172B (± 3.0%) i/s -     15.888B in   5.013030s
          Hash#merge      3.183B (± 4.1%) i/s -     15.897B in   5.004508s

Comparison:
          Hash#merge: 3183072104.0 i/s
        Hash#**other: 3172373410.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.004k i/100ms
         Hash#merge!    53.902k i/100ms
Calculating -------------------------------------
          Hash#merge     10.976k (±10.9%) i/s -     54.216k in   5.018888s
         Hash#merge!    614.708k (± 7.6%) i/s -      3.072M in   5.029982s

Comparison:
         Hash#merge!:   614708.5 i/s
          Hash#merge:    10976.2 i/s - 56.00x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.464M i/100ms
Array#each               1.455M i/100ms
Array#each_w/_object     1.447M i/100ms
Hash#select-include      2.439M i/100ms
Calculating -------------------------------------
Hash#native-slice        18.713M (± 4.2%) i/s -     93.710M in   5.016965s
Array#each               15.101M (± 6.2%) i/s -     75.656M in   5.038073s
Array#each_w/_object     15.012M (± 6.2%) i/s -     75.267M in   5.040353s
Hash#select-include      23.798M (± 6.8%) i/s -    119.498M in   5.051317s

Comparison:
Hash#select-include : 23797967.2 i/s
Hash#native-slice   : 18713138.0 i/s - 1.27x  (± 0.00) slower
Array#each          : 15100602.9 i/s - 1.58x  (± 0.00) slower
Array#each_w/_object: 15011820.0 i/s - 1.59x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   280.000  i/100ms
         Hash#value?   854.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      3.255k (±14.4%) i/s -     16.240k in   5.126968s
         Hash#value?      8.625k (± 0.6%) i/s -     43.554k in   5.049961s

Comparison:
         Hash#value?:     8624.9 i/s
Hash#values.include?:     3255.3 i/s - 2.65x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   315.857M i/100ms
                send   320.503M i/100ms
      method_missing   322.205M i/100ms
Calculating -------------------------------------
                call      3.104B (± 2.7%) i/s -     15.793B in   5.092403s
                send      3.101B (± 4.4%) i/s -     15.705B in   5.076129s
      method_missing      3.143B (± 2.9%) i/s -     15.788B in   5.027798s

Comparison:
      method_missing: 3142951376.9 i/s
                call: 3103701770.9 i/s - same-ish: difference falls within error
                send: 3100556635.0 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    63.491k i/100ms
      Symbol#to_proc    65.097k i/100ms
Calculating -------------------------------------
               Block    735.658k (±12.0%) i/s -      3.619M in   5.011644s
      Symbol#to_proc    730.540k (±12.5%) i/s -      3.580M in   5.000326s

Comparison:
               Block:   735657.9 i/s
      Symbol#to_proc:   730540.1 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   313.122M i/100ms
       block + yield   308.175M i/100ms
        unused block   312.224M i/100ms
               yield   314.249M i/100ms
Calculating -------------------------------------
          block.call      3.191B (± 2.8%) i/s -     15.969B in   5.008785s
       block + yield      3.201B (± 1.4%) i/s -     16.025B in   5.007175s
        unused block      3.172B (± 2.5%) i/s -     15.923B in   5.022772s
               yield      3.203B (± 2.0%) i/s -     16.027B in   5.006545s

Comparison:
               yield: 3202565264.9 i/s
       block + yield: 3201112261.6 i/s - same-ish: difference falls within error
          block.call: 3190884072.2 i/s - same-ish: difference falls within error
        unused block: 3172253867.1 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     3.714k i/100ms
      range#include?   188.000  i/100ms
       range#member?   196.000  i/100ms
       plain compare     8.440k i/100ms
Calculating -------------------------------------
        range#cover?     64.084k (±35.9%) i/s -    263.694k in   5.044793s
      range#include?      2.990k (±39.6%) i/s -     12.032k in   5.000870s
       range#member?      3.173k (±37.5%) i/s -     12.936k in   5.035607s
       plain compare     97.588k (±31.3%) i/s -    430.440k in   5.097704s

Comparison:
       plain compare:    97587.6 i/s
        range#cover?:    64083.9 i/s - same-ish: difference falls within error
       range#member?:     3172.5 i/s - 30.76x  (± 0.00) slower
      range#include?:     2990.5 i/s - 32.63x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    13.196M i/100ms
           String#=~    13.192M i/100ms
          Regexp#===    13.285M i/100ms
        String#match    10.773M i/100ms
Calculating -------------------------------------
       String#match?    135.444M (± 1.7%) i/s -    686.173M in   5.067604s
           String#=~    133.195M (± 3.5%) i/s -    672.811M in   5.058945s
          Regexp#===    133.227M (± 3.6%) i/s -    677.538M in   5.094585s
        String#match    106.761M (± 2.8%) i/s -    538.653M in   5.050326s

Comparison:
       String#match?: 135444272.3 i/s
          Regexp#===: 133226881.5 i/s - same-ish: difference falls within error
           String#=~: 133194565.2 i/s - same-ish: difference falls within error
        String#match: 106760573.5 i/s - 1.27x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.059M i/100ms
      String#casecmp     4.706M i/100ms
Calculating -------------------------------------
String#downcase + ==     29.697M (± 7.7%) i/s -    148.223M in   5.036915s
      String#casecmp     45.766M (± 8.3%) i/s -    230.596M in   5.085370s

Comparison:
      String#casecmp: 45765940.0 i/s
String#downcase + ==: 29696619.5 i/s - 1.54x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     9.342M i/100ms
       String#concat    10.298M i/100ms
       String#append    10.533M i/100ms
         "foo" "bar"   322.710M i/100ms
  "#{'foo'}#{'bar'}"   321.828M i/100ms
Calculating -------------------------------------
            String#+    104.761M (± 4.0%) i/s -    523.140M in   5.002060s
       String#concat    104.604M (± 3.7%) i/s -    525.173M in   5.027696s
       String#append    103.607M (± 7.3%) i/s -    516.124M in   5.024148s
         "foo" "bar"      3.099B (± 2.2%) i/s -     15.490B in   5.000843s
  "#{'foo'}#{'bar'}"      3.151B (± 3.3%) i/s -     15.770B in   5.011079s

Comparison:
  "#{'foo'}#{'bar'}": 3150578270.6 i/s
         "foo" "bar": 3098994167.8 i/s - same-ish: difference falls within error
            String#+: 104761045.5 i/s - 30.07x  (± 0.00) slower
       String#concat: 104604367.3 i/s - 30.12x  (± 0.00) slower
       String#append: 103606729.5 i/s - 30.41x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   315.558M i/100ms
          String#dup   314.934M i/100ms
Calculating -------------------------------------
           String#+@      3.171B (± 2.8%) i/s -     16.093B in   5.079658s
          String#dup      3.175B (± 2.9%) i/s -     16.062B in   5.062521s

Comparison:
          String#dup: 3175494538.7 i/s
           String#+@: 3170927891.1 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.168M i/100ms
       String#match?     1.623M i/100ms
    String#end_with?    10.716M i/100ms
Calculating -------------------------------------
           String#=~     12.438M (± 2.0%) i/s -     63.096M in   5.075049s
       String#match?     16.421M (± 1.7%) i/s -     82.783M in   5.042828s
    String#end_with?    107.279M (± 1.3%) i/s -    546.508M in   5.095136s

Comparison:
    String#end_with?: 107279260.7 i/s
       String#match?: 16421375.8 i/s - 6.53x  (± 0.00) slower
           String#=~: 12438159.9 i/s - 8.63x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   735.876k i/100ms
          String#sub   949.314k i/100ms
String#dup["string"]=
                        10.092M i/100ms
Calculating -------------------------------------
         String#gsub      8.438M (± 8.1%) i/s -     41.945M in   5.016291s
          String#sub      9.531M (± 9.8%) i/s -     47.466M in   5.030062s
String#dup["string"]=
                         99.502M (± 5.6%) i/s -    504.610M in   5.094247s

Comparison:
String#dup["string"]=: 99502367.8 i/s
          String#sub:  9531239.0 i/s - 10.44x  (± 0.00) slower
         String#gsub:  8438150.2 i/s - 11.79x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   336.052k i/100ms
           String#tr   162.089k i/100ms
Calculating -------------------------------------
         String#gsub      3.971M (± 8.5%) i/s -     19.827M in   5.041725s
           String#tr      1.592M (± 4.6%) i/s -      8.104M in   5.101129s

Comparison:
         String#gsub:  3970772.4 i/s
           String#tr:  1592303.9 i/s - 2.49x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   309.916M i/100ms
         With Freeze   316.838M i/100ms
Calculating -------------------------------------
      Without Freeze      3.143B (± 2.5%) i/s -     15.806B in   5.031269s
         With Freeze      3.173B (± 3.1%) i/s -     16.159B in   5.098591s

Comparison:
         With Freeze: 3172645654.7 i/s
      Without Freeze: 3143480982.1 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     5.228k i/100ms
      String#squeeze    71.147k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    155.521k (±12.6%) i/s -    763.288k in   5.024677s
      String#squeeze    713.726k (± 4.5%) i/s -      3.628M in   5.095355s

Comparison:
      String#squeeze:   713726.4 i/s
 String#gsub/regex+/:   155520.9 i/s - 4.59x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     4.202M i/100ms
       String#match?     6.257M i/100ms
  String#start_with?    12.930M i/100ms
Calculating -------------------------------------
           String#=~     44.571M (± 2.8%) i/s -    222.731M in   5.001207s
       String#match?     63.121M (± 1.4%) i/s -    319.100M in   5.056392s
  String#start_with?    127.159M (± 5.8%) i/s -    633.558M in   5.007085s

Comparison:
  String#start_with?: 127158912.1 i/s
       String#match?: 63120598.0 i/s - 2.01x  (± 0.00) slower
           String#=~: 44571178.1 i/s - 2.85x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    73.697k i/100ms
    String#[0, n] ==   295.476k i/100ms
   String#[RANGE] ==   442.835k i/100ms
   String#[0...n] ==   232.888k i/100ms
Calculating -------------------------------------
  String#start_with?      7.030M (± 3.2%) i/s -     35.153M in   5.009665s
    String#[0, n] ==      2.947M (± 5.2%) i/s -     14.774M in   5.027896s
   String#[RANGE] ==      4.436M (± 3.9%) i/s -     22.585M in   5.099854s
   String#[0...n] ==      2.296M (± 4.9%) i/s -     11.644M in   5.086597s

Comparison:
  String#start_with?:  7030356.8 i/s
   String#[RANGE] ==:  4435882.8 i/s - 1.58x  (± 0.00) slower
    String#[0, n] ==:  2946811.6 i/s - 2.39x  (± 0.00) slower
   String#[0...n] ==:  2295691.3 i/s - 3.06x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     9.939M i/100ms
 String#sub!'string'   955.643k i/100ms
String#gsub!'string'   912.096k i/100ms
  String#[/regexp/]=     2.687M i/100ms
 String#sub!/regexp/     1.348M i/100ms
String#gsub!/regexp/   821.590k i/100ms
Calculating -------------------------------------
  String#['string']=    100.549M (± 1.9%) i/s -    506.872M in   5.043158s
 String#sub!'string'      9.678M (±18.6%) i/s -     44.915M in   5.090172s
String#gsub!'string'      8.749M (± 9.0%) i/s -     43.781M in   5.057067s
  String#[/regexp/]=     26.954M (± 3.1%) i/s -    137.060M in   5.090116s
 String#sub!/regexp/     13.212M (±11.7%) i/s -     66.028M in   5.080536s
String#gsub!/regexp/      8.245M (± 8.6%) i/s -     41.080M in   5.028230s

Comparison:
  String#['string']=: 100548518.9 i/s
  String#[/regexp/]=: 26953733.8 i/s - 3.73x  (± 0.00) slower
 String#sub!/regexp/: 13211990.6 i/s - 7.61x  (± 0.00) slower
 String#sub!'string':  9677679.0 i/s - 10.39x  (± 0.00) slower
String#gsub!'string':  8748639.0 i/s - 11.49x  (± 0.00) slower
String#gsub!/regexp/:  8244885.9 i/s - 12.20x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     2.843M i/100ms
        String#chomp     5.640M i/100ms
String#delete_suffix    14.198M i/100ms
Calculating -------------------------------------
          String#sub     29.263M (± 6.7%) i/s -    147.839M in   5.082576s
        String#chomp     56.137M (± 4.0%) i/s -    282.005M in   5.033009s
String#delete_suffix    151.681M (± 8.8%) i/s -    752.482M in   5.007840s

Comparison:
String#delete_suffix: 151681265.2 i/s
        String#chomp: 56137053.0 i/s - 2.70x  (± 0.00) slower
          String#sub: 29263178.8 i/s - 5.18x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   315.051M i/100ms
          String#sub    12.382M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.196B (± 2.8%) i/s -     16.068B in   5.031345s
          String#sub    137.708M (± 0.6%) i/s -    693.387M in   5.035420s

Comparison:
String#delete_prefix: 3196382720.3 i/s
          String#sub: 137707640.2 i/s - 23.21x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.776M i/100ms
    String#unpack[0]     1.757M i/100ms
Calculating -------------------------------------
      String#unpack1     19.050M (± 3.7%) i/s -     95.925M in   5.042368s
    String#unpack[0]     19.129M (± 6.0%) i/s -     96.632M in   5.079353s

Comparison:
    String#unpack[0]: 19128874.9 i/s
      String#unpack1: 19050417.8 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.0.0-dev-9a84a125, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    39.032k i/100ms
          Time.parse   209.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    348.074k (±30.1%) i/s -      1.600M in   5.002227s
          Time.parse      6.423k (±21.8%) i/s -     29.887k in   5.010422s

Comparison:
        Time.iso8601:   348073.7 i/s
          Time.parse:     6422.5 i/s - 54.20x  (± 0.00) slower

