$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       113.907M i/100ms
Function with splat arguments
                         1.202k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.132B (± 0.4%) i/s -      5.695B in   5.031299s
Function with splat arguments
                         13.377k (± 8.3%) i/s -     67.312k in   5.084017s

Comparison:
Function with single Array argument: 1132000103.1 i/s
Function with splat arguments:    13376.5 i/s - 84625.72x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   113.357M i/100ms
Sequential Assignment
                       113.989M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.134B (± 0.6%) i/s -      5.668B in   4.999798s
Sequential Assignment
                          1.135B (± 0.7%) i/s -      5.699B in   5.022885s

Comparison:
Sequential Assignment: 1134758599.7 i/s
 Parallel Assignment: 1133655974.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   113.371M i/100ms
       attr_accessor   113.327M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.136B (± 0.9%) i/s -      5.782B in   5.091416s
       attr_accessor      1.136B (± 0.9%) i/s -      5.780B in   5.087713s

Comparison:
       attr_accessor: 1136100777.9 i/s
   getter_and_setter: 1135707150.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    10.223k i/100ms
         respond_to?   113.267M i/100ms
Calculating -------------------------------------
      begin...rescue     71.581k (± 6.3%) i/s -    357.805k in   5.027146s
         respond_to?      1.134B (± 0.4%) i/s -      5.777B in   5.095586s

Comparison:
         respond_to?: 1133669402.0 i/s
      begin...rescue:    71581.2 i/s - 15837.53x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   113.666M i/100ms
             &method   113.957M i/100ms
Calculating -------------------------------------
              normal      1.134B (± 0.7%) i/s -      5.683B in   5.012718s
             &method      1.135B (± 0.9%) i/s -      5.698B in   5.021376s

Comparison:
             &method: 1134800548.4 i/s
              normal: 1133839933.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       119.000  i/100ms
       define_method   133.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.391k (±55.4%) i/s -      6.188k in   4.998280s
       define_method      6.252k (±47.1%) i/s -      9.443k in   5.100219s

Comparison:
       define_method:     6251.9 i/s
module_eval with string:     2390.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    81.577k i/100ms
       Kernel#format    72.414k i/100ms
            String#%    72.089k i/100ms
Calculating -------------------------------------
         Float#round    881.011k (± 2.5%) i/s -      4.405M in   5.003310s
       Kernel#format    728.521k (± 2.5%) i/s -      3.693M in   5.072607s
            String#%    733.418k (± 2.2%) i/s -      3.677M in   5.015535s

Comparison:
         Float#round:   881011.0 i/s
            String#%:   733417.6 i/s - 1.20x  (± 0.00) slower
       Kernel#format:   728521.1 i/s - 1.21x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.388M i/100ms
          OpenStruct   113.189M i/100ms
Calculating -------------------------------------
                Hash      1.132B (± 0.4%) i/s -      5.669B in   5.006673s
          OpenStruct      1.137B (± 1.1%) i/s -      5.773B in   5.077420s

Comparison:
          OpenStruct: 1137051708.8 i/s
                Hash: 1132385479.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.059M i/100ms
          OpenStruct     3.174k i/100ms
Calculating -------------------------------------
                Hash      1.131B (± 0.6%) i/s -      5.766B in   5.098837s
          OpenStruct     33.998k (±11.6%) i/s -    168.222k in   5.046366s

Comparison:
                Hash: 1130891264.1 i/s
          OpenStruct:    33997.9 i/s - 33263.60x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   809.294k i/100ms
  ancestors.include?   170.614k i/100ms
Calculating -------------------------------------
  less than or equal      8.588M (± 4.0%) i/s -     43.702M in   5.097008s
  ancestors.include?      1.798M (± 2.7%) i/s -      9.043M in   5.031856s

Comparison:
  less than or equal:  8588266.9 i/s
  ancestors.include?:  1798391.3 i/s - 4.78x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     11.328  (± 0.0%) i/s -     57.000  in   5.032171s
         Kernel loop     11.341  (± 0.0%) i/s -     57.000  in   5.026363s

Comparison:
         Kernel loop:       11.3 i/s
          While Loop:       11.3 i/s - 1.00x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   113.158M i/100ms
         Array#first   113.422M i/100ms
Calculating -------------------------------------
           Array#[0]      1.135B (± 0.8%) i/s -      5.771B in   5.085742s
         Array#first      1.138B (± 1.2%) i/s -      5.785B in   5.082203s

Comparison:
         Array#first: 1138344064.2 i/s
           Array#[0]: 1134825771.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   113.286M i/100ms
          Array#last   113.413M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.135B (± 0.7%) i/s -      5.778B in   5.090877s
          Array#last      1.133B (± 1.4%) i/s -      5.671B in   5.006076s

Comparison:
          Array#[-1]: 1134952363.7 i/s
          Array#last: 1133007308.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   653.211k i/100ms
Calculating -------------------------------------
                find      4.716  (± 0.0%) i/s -     24.000  in   5.089893s
             bsearch      6.686M (± 2.4%) i/s -     33.967M in   5.083307s

Comparison:
             bsearch:  6686160.6 i/s
                find:        4.7 i/s - 1417904.22x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.068  (± 0.0%) i/s -      1.000  in  14.769568s
        Array#insert      1.028  (± 0.0%) i/s -      6.000  in   5.837517s

Comparison:
        Array#insert:        1.0 i/s
       Array#unshift:        0.1 i/s - 15.18x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   113.385M i/100ms
          Array#size   113.259M i/100ms
         Array#count   113.530M i/100ms
Calculating -------------------------------------
        Array#length      1.134B (± 0.5%) i/s -      5.669B in   5.000052s
          Array#size      1.137B (± 0.8%) i/s -      5.776B in   5.081998s
         Array#count      1.139B (± 1.0%) i/s -      5.790B in   5.084252s

Comparison:
         Array#count: 1138930234.1 i/s
          Array#size: 1136669528.3 i/s - same-ish: difference falls within error
        Array#length: 1133861456.7 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    22.833k i/100ms
        Array#sample     2.666M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    245.082k (± 2.0%) i/s -      1.233M in   5.033136s
        Array#sample     26.759M (± 0.4%) i/s -    135.978M in   5.081594s

Comparison:
        Array#sample: 26759179.1 i/s
 Array#shuffle.first:   245082.3 i/s - 109.18x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601     2.433k i/100ms
          Date.parse   874.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     47.517k (±36.5%) i/s -    189.774k in   5.030354s
          Date.parse     26.529k (±34.7%) i/s -    107.502k in   5.048988s

Comparison:
        Date.iso8601:    47516.8 i/s
          Date.parse:    26528.5 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   214.772k i/100ms
           Array#map   983.005k i/100ms
Calculating -------------------------------------
   Array#each + push      2.286M (± 2.3%) i/s -     11.598M in   5.076916s
           Array#map      9.944M (± 7.4%) i/s -     50.133M in   5.081783s

Comparison:
           Array#map:  9944140.9 i/s
   Array#each + push:  2285618.1 i/s - 4.35x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     8.577M i/100ms
               #each    24.893M i/100ms
Calculating -------------------------------------
            For loop     85.776M (± 0.0%) i/s -    428.835M in   4.999451s
               #each    248.586M (± 0.6%) i/s -      1.245B in   5.007027s

Comparison:
               #each: 248585588.4 i/s
            For loop: 85776407.0 i/s - 2.90x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   821.090k i/100ms
     each_with_index     1.012M i/100ms
Calculating -------------------------------------
          While Loop      8.215M (± 0.0%) i/s -     41.876M in   5.097560s
     each_with_index     10.114M (± 0.0%) i/s -     50.579M in   5.000967s

Comparison:
     each_with_index: 10113776.5 i/s
          While Loop:  8214831.7 i/s - 1.23x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   157.848k i/100ms
      inject to_proc   158.914k i/100ms
        inject block   159.611k i/100ms
Calculating -------------------------------------
       inject symbol      1.574M (± 0.1%) i/s -      7.892M in   5.015666s
      inject to_proc      1.593M (± 0.1%) i/s -      8.105M in   5.087760s
        inject block      1.589M (± 0.2%) i/s -      7.981M in   5.022109s

Comparison:
      inject to_proc:  1592966.0 i/s
        inject block:  1589089.0 i/s - same-ish: difference falls within error
       inject symbol:  1573550.8 i/s - 1.01x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    17.530k i/100ms
   Array#map.flatten    17.848k i/100ms
      Array#flat_map    43.848k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    176.760k (± 7.6%) i/s -    894.030k in   5.102320s
   Array#map.flatten    181.352k (± 7.0%) i/s -    910.248k in   5.056993s
      Array#flat_map    436.643k (± 2.2%) i/s -      2.192M in   5.023544s

Comparison:
      Array#flat_map:   436643.3 i/s
   Array#map.flatten:   181351.9 i/s - 2.41x  (± 0.00) slower
Array#map.flatten(1):   176759.7 i/s - 2.47x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   215.747k i/100ms
  Array#reverse_each     1.494M i/100ms
Calculating -------------------------------------
  Array#reverse.each      2.183M (± 2.4%) i/s -     11.003M in   5.042442s
  Array#reverse_each     14.955M (± 0.1%) i/s -     76.211M in   5.095867s

Comparison:
  Array#reverse_each: 14955474.9 i/s
  Array#reverse.each:  2183398.7 i/s - 6.85x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       641.391k i/100ms
   Enumerable#detect     2.684M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          6.818M (± 7.5%) i/s -    135.334M in  20.025314s
   Enumerable#detect     26.857M (± 0.3%) i/s -    539.572M in  20.090920s

Comparison:
   Enumerable#detect: 26856727.6 i/s
Enumerable#select.first:  6818407.0 i/s - 3.94x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       188.566k i/100ms
Enumerable#select.last
                       397.909k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.152M (± 3.7%) i/s -     10.748M in   5.000953s
Enumerable#select.last
                          3.998M (± 2.0%) i/s -     20.293M in   5.078340s

Comparison:
Enumerable#select.last:  3997623.2 i/s
Enumerable#reverse.detect:  2152298.4 i/s - 1.86x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.583k i/100ms
  Enumerable#sort_by     2.642k i/100ms
     Enumerable#sort     3.497k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         15.473k (±38.7%) i/s -     64.575k in   5.122320s
  Enumerable#sort_by     26.673k (± 9.3%) i/s -    132.100k in   5.021821s
     Enumerable#sort     38.271k (± 1.8%) i/s -    192.335k in   5.027429s

Comparison:
     Enumerable#sort:    38271.1 i/s
  Enumerable#sort_by:    26673.2 i/s - 1.43x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    15473.4 i/s - 2.47x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   530.615k i/100ms
Enumerable#sort_by...first
                         5.783k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      5.308M (± 0.0%) i/s -     27.061M in   5.098181s
Enumerable#sort_by...first
                         62.593k (± 6.5%) i/s -    312.282k in   5.024626s

Comparison:
   Enumerable#min_by:  5308043.5 i/s
Enumerable#sort_by...first:    62592.9 i/s - 84.80x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   359.113k i/100ms
            Hash#dup   384.464k i/100ms
Calculating -------------------------------------
              Hash[]      4.079M (± 8.5%) i/s -     20.469M in   5.069534s
            Hash#dup      4.154M (± 8.6%) i/s -     20.761M in   5.048509s

Comparison:
            Hash#dup:  4154479.3 i/s
              Hash[]:  4078555.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   113.296M i/100ms
  Hash#fetch, symbol   113.412M i/100ms
     Hash#[], string    15.625M i/100ms
  Hash#fetch, string    13.833M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.139B (± 1.2%) i/s -      5.778B in   5.075298s
  Hash#fetch, symbol      1.135B (± 0.6%) i/s -      5.784B in   5.094146s
     Hash#[], string    156.588M (± 0.5%) i/s -    796.870M in   5.089061s
  Hash#fetch, string    136.537M (± 0.5%) i/s -    691.648M in   5.065782s

Comparison:
     Hash#[], symbol: 1138644997.2 i/s
  Hash#fetch, symbol: 1135472287.3 i/s - same-ish: difference falls within error
     Hash#[], string: 156588284.9 i/s - 7.27x  (± 0.00) slower
  Hash#fetch, string: 136536773.5 i/s - 8.34x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    49.737M i/100ms
             Hash#[]    49.773M i/100ms
          Hash#[] ||    49.795M i/100ms
          Hash#[] &&    49.789M i/100ms
          Hash#fetch    49.795M i/100ms
 Hash#fetch fallback    49.797M i/100ms
Calculating -------------------------------------
            Hash#dig    497.315M (± 0.3%) i/s -      2.487B in   5.000581s
             Hash#[]    497.716M (± 0.2%) i/s -      2.489B in   5.000148s
          Hash#[] ||    497.628M (± 0.2%) i/s -      2.490B in   5.003255s
          Hash#[] &&    497.382M (± 0.3%) i/s -      2.489B in   5.005179s
          Hash#fetch    497.728M (± 0.1%) i/s -      2.490B in   5.002197s
 Hash#fetch fallback    497.439M (± 0.4%) i/s -      2.490B in   5.005444s

Comparison:
          Hash#fetch: 497728451.5 i/s
             Hash#[]: 497715541.6 i/s - same-ish: difference falls within error
          Hash#[] ||: 497627748.2 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 497438786.0 i/s - same-ish: difference falls within error
          Hash#[] &&: 497382342.3 i/s - same-ish: difference falls within error
            Hash#dig: 497314606.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   113.794M i/100ms
  Hash#fetch + block   113.615M i/100ms
    Hash#fetch + arg   113.287M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.136B (± 0.8%) i/s -      5.690B in   5.010057s
  Hash#fetch + block      1.137B (± 0.9%) i/s -      5.794B in   5.097170s
    Hash#fetch + arg      1.136B (± 0.6%) i/s -      5.778B in   5.085257s

Comparison:
  Hash#fetch + block: 1136874094.2 i/s
    Hash#fetch + arg: 1136199015.6 i/s - same-ish: difference falls within error
  Hash#fetch + const: 1135721670.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    22.230k i/100ms
         sort + to_h     4.299k i/100ms
Calculating -------------------------------------
      sort_by + to_h    363.319k (± 4.9%) i/s -      1.823M in   5.029889s
         sort + to_h    146.291k (± 9.4%) i/s -    730.830k in   5.083889s

Comparison:
      sort_by + to_h:   363318.9 i/s
         sort + to_h:   146291.5 i/s - 2.48x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   174.905k i/100ms
       Hash#each_key   184.444k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.728M (±10.8%) i/s -      8.570M in   5.091322s
       Hash#each_key      1.929M (± 2.3%) i/s -      9.776M in   5.069448s

Comparison:
       Hash#each_key:  1929390.3 i/s
      Hash#keys.each:  1728036.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   207.000  i/100ms
           Hash#key?     2.765M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      2.211k (±10.0%) i/s -     10.971k in   5.030763s
           Hash#key?     26.924M (± 0.3%) i/s -    135.495M in   5.032641s

Comparison:
           Hash#key?: 26923541.7 i/s
  Hash#keys.include?:     2210.7 i/s - 12178.82x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    40.064k i/100ms
            Hash#[]=    39.766k i/100ms
Calculating -------------------------------------
         Hash#merge!    410.008k (± 4.2%) i/s -      2.083M in   5.090119s
            Hash#[]=    413.970k (± 4.7%) i/s -      2.068M in   5.006210s

Comparison:
            Hash#[]=:   413970.4 i/s
         Hash#merge!:   410007.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        21.513k i/100ms
      Hash#merge({})    13.600k i/100ms
 Hash#dup#merge!({})    24.860k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        253.061k (±10.5%) i/s -      1.269M in   5.095839s
      Hash#merge({})    148.762k (± 9.7%) i/s -    734.400k in   5.008701s
 Hash#dup#merge!({})    243.077k (± 8.4%) i/s -      1.218M in   5.066095s

Comparison:
{}#merge!(Hash) do end:   253060.6 i/s
 Hash#dup#merge!({}):   243076.7 i/s - same-ish: difference falls within error
      Hash#merge({}):   148761.5 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   113.846M i/100ms
          Hash#merge   114.551M i/100ms
Calculating -------------------------------------
        Hash#**other      1.134B (± 0.7%) i/s -      5.692B in   5.021735s
          Hash#merge      1.137B (± 0.9%) i/s -      5.728B in   5.036878s

Comparison:
          Hash#merge: 1137222697.2 i/s
        Hash#**other: 1133587767.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   613.000  i/100ms
         Hash#merge!    40.236k i/100ms
Calculating -------------------------------------
          Hash#merge      7.001k (± 8.9%) i/s -     34.941k in   5.047704s
         Hash#merge!    400.852k (± 6.7%) i/s -      2.012M in   5.041619s

Comparison:
         Hash#merge!:   400851.6 i/s
          Hash#merge:     7001.4 i/s - 57.25x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.425M i/100ms
Array#each               1.331M i/100ms
Array#each_w/_object     1.333M i/100ms
Hash#select-include      1.852M i/100ms
Calculating -------------------------------------
Hash#native-slice        15.539M (± 3.8%) i/s -     78.348M in   5.049262s
Array#each               13.469M (± 2.3%) i/s -     67.870M in   5.041597s
Array#each_w/_object     13.285M (± 3.5%) i/s -     66.643M in   5.022920s
Hash#select-include      18.239M (± 3.9%) i/s -     92.597M in   5.084665s

Comparison:
Hash#select-include : 18238889.1 i/s
Hash#native-slice   : 15539056.9 i/s - 1.17x  (± 0.00) slower
Array#each          : 13469220.2 i/s - 1.35x  (± 0.00) slower
Array#each_w/_object: 13284523.1 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   237.000  i/100ms
         Hash#value?    89.238k i/100ms
Calculating -------------------------------------
Hash#values.include?      2.601k (±10.9%) i/s -     12.798k in   5.005869s
         Hash#value?    933.223k (± 0.2%) i/s -      4.730M in   5.068058s

Comparison:
         Hash#value?:   933222.8 i/s
Hash#values.include?:     2601.0 i/s - 358.79x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   113.769M i/100ms
                send   113.129M i/100ms
      method_missing   113.432M i/100ms
Calculating -------------------------------------
                call      1.135B (± 1.0%) i/s -      5.688B in   5.013616s
                send      1.136B (± 1.2%) i/s -      5.770B in   5.080488s
      method_missing      1.136B (± 0.7%) i/s -      5.785B in   5.094895s

Comparison:
                send: 1135805494.5 i/s
      method_missing: 1135513530.4 i/s - same-ish: difference falls within error
                call: 1134706969.0 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    30.133k i/100ms
      Symbol#to_proc    34.407k i/100ms
Calculating -------------------------------------
               Block    340.824k (± 8.8%) i/s -      1.687M in   5.002737s
      Symbol#to_proc    343.677k (± 8.6%) i/s -      1.755M in   5.159994s

Comparison:
      Symbol#to_proc:   343677.0 i/s
               Block:   340823.7 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   114.187M i/100ms
       block + yield   113.311M i/100ms
        unused block   113.473M i/100ms
               yield   114.041M i/100ms
Calculating -------------------------------------
          block.call      1.135B (± 0.7%) i/s -      5.709B in   5.032297s
       block + yield      1.136B (± 0.7%) i/s -      5.779B in   5.087946s
        unused block      1.135B (± 0.6%) i/s -      5.787B in   5.097277s
               yield      1.135B (± 0.7%) i/s -      5.702B in   5.022496s

Comparison:
       block + yield: 1135853950.4 i/s
        unused block: 1135382474.4 i/s - same-ish: difference falls within error
               yield: 1135361674.9 i/s - same-ish: difference falls within error
          block.call: 1134592122.0 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    24.117k i/100ms
      range#include?   561.000  i/100ms
       range#member?   872.000  i/100ms
       plain compare    28.189k i/100ms
Calculating -------------------------------------
        range#cover?    217.324k (±20.1%) i/s -      1.037M in   5.035090s
      range#include?      9.138k (±28.2%) i/s -     42.636k in   5.065451s
       range#member?      8.484k (±23.9%) i/s -     40.112k in   5.075505s
       plain compare    434.022k (± 4.7%) i/s -      2.171M in   5.012883s

Comparison:
       plain compare:   434022.3 i/s
        range#cover?:   217323.7 i/s - 2.00x  (± 0.00) slower
      range#include?:     9138.0 i/s - 47.50x  (± 0.00) slower
       range#member?:     8484.5 i/s - 51.15x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    10.826M i/100ms
           String#=~    10.266M i/100ms
          Regexp#===    10.263M i/100ms
        String#match     8.502M i/100ms
Calculating -------------------------------------
       String#match?     99.422M (± 1.3%) i/s -    498.003M in   5.009794s
           String#=~    102.022M (± 0.3%) i/s -    513.304M in   5.031352s
          Regexp#===    102.014M (± 0.1%) i/s -    513.173M in   5.030423s
        String#match     85.029M (± 0.1%) i/s -    433.621M in   5.099661s

Comparison:
           String#=~: 102021852.1 i/s
          Regexp#===: 102014044.2 i/s - same-ish: difference falls within error
       String#match?: 99422209.3 i/s - 1.03x  (± 0.00) slower
        String#match: 85029455.3 i/s - 1.20x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.248M i/100ms
      String#casecmp     3.575M i/100ms
Calculating -------------------------------------
String#downcase + ==     23.165M (± 8.1%) i/s -    114.648M in   5.007537s
      String#casecmp     34.727M (± 7.4%) i/s -    175.170M in   5.085434s

Comparison:
      String#casecmp: 34727401.2 i/s
String#downcase + ==: 23164790.8 i/s - 1.50x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     7.436M i/100ms
       String#concat     7.453M i/100ms
       String#append     7.008M i/100ms
         "foo" "bar"   113.777M i/100ms
  "#{'foo'}#{'bar'}"   113.493M i/100ms
Calculating -------------------------------------
            String#+     73.970M (± 2.6%) i/s -    371.815M in   5.030074s
       String#concat     74.791M (± 2.1%) i/s -    380.093M in   5.084383s
       String#append     74.175M (± 3.2%) i/s -    371.450M in   5.012863s
         "foo" "bar"      1.135B (± 0.9%) i/s -      5.689B in   5.011797s
  "#{'foo'}#{'bar'}"      1.136B (± 0.7%) i/s -      5.788B in   5.094850s

Comparison:
  "#{'foo'}#{'bar'}": 1136139581.3 i/s
         "foo" "bar": 1135177808.6 i/s - same-ish: difference falls within error
       String#concat: 74790571.0 i/s - 15.19x  (± 0.00) slower
       String#append: 74174564.1 i/s - 15.32x  (± 0.00) slower
            String#+: 73969714.5 i/s - 15.36x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   113.257M i/100ms
          String#dup   113.486M i/100ms
Calculating -------------------------------------
           String#+@      1.133B (± 0.7%) i/s -      5.663B in   5.000280s
          String#dup      1.135B (± 0.6%) i/s -      5.674B in   5.001244s

Comparison:
          String#dup: 1134618710.3 i/s
           String#+@: 1132552037.9 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   836.001k i/100ms
       String#match?     1.169M i/100ms
    String#end_with?    10.739M i/100ms
Calculating -------------------------------------
           String#=~      9.802M (± 2.2%) i/s -     49.324M in   5.034784s
       String#match?     11.159M (± 0.3%) i/s -     56.103M in   5.027603s
    String#end_with?    107.187M (± 0.4%) i/s -    536.927M in   5.009312s

Comparison:
    String#end_with?: 107187339.3 i/s
       String#match?: 11159020.7 i/s - 9.61x  (± 0.00) slower
           String#=~:  9801743.7 i/s - 10.94x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   504.487k i/100ms
          String#sub   643.254k i/100ms
String#dup["string"]=
                         7.544M i/100ms
Calculating -------------------------------------
         String#gsub      5.360M (± 8.2%) i/s -     26.738M in   5.040149s
          String#sub      7.341M (± 9.4%) i/s -     36.665M in   5.052541s
String#dup["string"]=
                         75.413M (± 0.2%) i/s -    377.216M in   5.002013s

Comparison:
String#dup["string"]=: 75413105.4 i/s
          String#sub:  7340901.3 i/s - 10.27x  (± 0.00) slower
         String#gsub:  5359776.7 i/s - 14.07x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   138.285k i/100ms
           String#tr   114.880k i/100ms
Calculating -------------------------------------
         String#gsub      2.470M (± 9.9%) i/s -     12.169M in   5.000960s
           String#tr      1.164M (± 5.0%) i/s -      5.859M in   5.046553s

Comparison:
         String#gsub:  2470122.2 i/s
           String#tr:  1163983.9 i/s - 2.12x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   113.252M i/100ms
         With Freeze   113.378M i/100ms
Calculating -------------------------------------
      Without Freeze      1.134B (± 0.6%) i/s -      5.776B in   5.094475s
         With Freeze      1.135B (± 0.8%) i/s -      5.782B in   5.094364s

Comparison:
         With Freeze: 1135109337.5 i/s
      Without Freeze: 1133788311.8 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     6.177k i/100ms
      String#squeeze    46.331k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    105.889k (± 9.5%) i/s -    525.045k in   5.032061s
      String#squeeze    464.252k (± 3.7%) i/s -      2.363M in   5.097336s

Comparison:
      String#squeeze:   464252.1 i/s
 String#gsub/regex+/:   105889.1 i/s - 4.38x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     3.131M i/100ms
       String#match?     5.059M i/100ms
  String#start_with?    10.182M i/100ms
Calculating -------------------------------------
           String#=~     33.091M (± 6.6%) i/s -    165.954M in   5.049519s
       String#match?     50.193M (± 0.1%) i/s -    252.926M in   5.039043s
  String#start_with?    102.050M (± 0.4%) i/s -    519.267M in   5.088439s

Comparison:
  String#start_with?: 102050241.4 i/s
       String#match?: 50193256.5 i/s - 2.03x  (± 0.00) slower
           String#=~: 33091459.0 i/s - 3.08x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   104.738k i/100ms
    String#[0, n] ==   234.487k i/100ms
   String#[RANGE] ==   326.357k i/100ms
   String#[0...n] ==   210.429k i/100ms
Calculating -------------------------------------
  String#start_with?      3.874M (± 0.4%) i/s -     19.377M in   5.001796s
    String#[0, n] ==      2.331M (± 2.9%) i/s -     11.724M in   5.033858s
   String#[RANGE] ==      3.247M (± 3.7%) i/s -     16.318M in   5.032470s
   String#[0...n] ==      2.269M (± 3.1%) i/s -     11.363M in   5.012089s

Comparison:
  String#start_with?:  3873970.5 i/s
   String#[RANGE] ==:  3247196.5 i/s - 1.19x  (± 0.00) slower
    String#[0, n] ==:  2331122.7 i/s - 1.66x  (± 0.00) slower
   String#[0...n] ==:  2269386.1 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     7.543M i/100ms
 String#sub!'string'   783.409k i/100ms
String#gsub!'string'   571.113k i/100ms
  String#[/regexp/]=     1.943M i/100ms
 String#sub!/regexp/   885.793k i/100ms
String#gsub!/regexp/   637.146k i/100ms
Calculating -------------------------------------
  String#['string']=     75.429M (± 0.1%) i/s -    377.128M in   4.999770s
 String#sub!'string'      7.568M (±14.4%) i/s -     36.037M in   5.070349s
String#gsub!'string'      5.722M (± 6.5%) i/s -     28.556M in   5.015686s
  String#[/regexp/]=     20.567M (± 4.0%) i/s -    102.976M in   5.015654s
 String#sub!/regexp/      9.049M (± 9.6%) i/s -     45.175M in   5.051349s
String#gsub!/regexp/      6.264M (± 5.4%) i/s -     31.220M in   5.000078s

Comparison:
  String#['string']=: 75429199.3 i/s
  String#[/regexp/]=: 20567297.4 i/s - 3.67x  (± 0.00) slower
 String#sub!/regexp/:  9048924.1 i/s - 8.34x  (± 0.00) slower
 String#sub!'string':  7568186.0 i/s - 9.97x  (± 0.00) slower
String#gsub!/regexp/:  6263510.6 i/s - 12.04x  (± 0.00) slower
String#gsub!'string':  5721831.7 i/s - 13.18x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     2.137M i/100ms
        String#chomp     4.291M i/100ms
String#delete_suffix     9.547M i/100ms
Calculating -------------------------------------
          String#sub     22.436M (± 2.5%) i/s -    113.260M in   5.051409s
        String#chomp     42.879M (± 0.2%) i/s -    214.538M in   5.003352s
String#delete_suffix     99.168M (± 8.2%) i/s -    496.427M in   5.052295s

Comparison:
String#delete_suffix: 99167598.0 i/s
        String#chomp: 42879035.7 i/s - 2.31x  (± 0.00) slower
          String#sub: 22435995.6 i/s - 4.42x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   113.579M i/100ms
          String#sub    11.006M i/100ms
Calculating -------------------------------------
String#delete_prefix      1.133B (± 0.5%) i/s -      5.679B in   5.011591s
          String#sub    108.824M (± 0.6%) i/s -    550.324M in   5.057183s

Comparison:
String#delete_prefix: 1133195597.5 i/s
          String#sub: 108824064.9 i/s - 10.41x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.536M i/100ms
    String#unpack[0]     1.562M i/100ms
Calculating -------------------------------------
      String#unpack1     15.909M (± 3.0%) i/s -     79.877M in   5.025482s
    String#unpack[0]     15.972M (± 3.4%) i/s -     81.246M in   5.093031s

Comparison:
    String#unpack[0]: 15971652.0 i/s
      String#unpack1: 15908891.5 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.0.0-dev-e0b63fce, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    19.378k i/100ms
          Time.parse   272.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    261.760k (±19.7%) i/s -      1.240M in   5.045994s
          Time.parse      8.896k (±26.2%) i/s -     38.624k in   5.001895s

Comparison:
        Time.iso8601:   261760.3 i/s
          Time.parse:     8895.8 i/s - 29.43x  (± 0.00) slower

