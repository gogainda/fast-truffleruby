$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       113.694M i/100ms
Function with splat arguments
                         1.195k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.134B (± 0.4%) i/s -      5.685B in   5.011003s
Function with splat arguments
                         12.986k (± 8.2%) i/s -     64.530k in   5.016966s

Comparison:
Function with single Array argument: 1134470746.3 i/s
Function with splat arguments:    12986.1 i/s - 87360.25x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   113.480M i/100ms
Sequential Assignment
                       113.299M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.137B (± 1.0%) i/s -      5.787B in   5.092753s
Sequential Assignment
                          1.136B (± 1.0%) i/s -      5.778B in   5.087578s

Comparison:
 Parallel Assignment: 1136530082.8 i/s
Sequential Assignment: 1135866373.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   113.906M i/100ms
       attr_accessor   113.326M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.135B (± 0.5%) i/s -      5.695B in   5.019819s
       attr_accessor      1.135B (± 0.7%) i/s -      5.780B in   5.092914s

Comparison:
       attr_accessor: 1134900700.3 i/s
   getter_and_setter: 1134585498.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     9.392k i/100ms
         respond_to?   113.027M i/100ms
Calculating -------------------------------------
      begin...rescue     69.835k (± 7.4%) i/s -    347.504k in   5.015802s
         respond_to?      1.136B (± 0.9%) i/s -      5.764B in   5.076913s

Comparison:
         respond_to?: 1135504243.8 i/s
      begin...rescue:    69834.8 i/s - 16259.87x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   113.272M i/100ms
             &method   113.345M i/100ms
Calculating -------------------------------------
              normal      1.137B (± 1.0%) i/s -      5.777B in   5.081513s
             &method      1.133B (± 0.7%) i/s -      5.667B in   5.002467s

Comparison:
              normal: 1136952099.6 i/s
             &method: 1132953910.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       118.000  i/100ms
       define_method   136.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.600k (±53.5%) i/s -      6.372k in   5.010671s
       define_method      6.522k (±48.4%) i/s -      9.384k in   7.050066s

Comparison:
       define_method:     6522.4 i/s
module_eval with string:     2599.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    81.922k i/100ms
       Kernel#format    72.987k i/100ms
            String#%    72.925k i/100ms
Calculating -------------------------------------
         Float#round    880.043k (± 2.3%) i/s -      4.424M in   5.029553s
       Kernel#format    729.776k (± 1.9%) i/s -      3.649M in   5.002572s
            String#%    727.067k (± 3.2%) i/s -      3.646M in   5.020588s

Comparison:
         Float#round:   880043.2 i/s
       Kernel#format:   729776.4 i/s - 1.21x  (± 0.00) slower
            String#%:   727066.6 i/s - 1.21x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.035M i/100ms
          OpenStruct   113.393M i/100ms
Calculating -------------------------------------
                Hash      1.133B (± 0.4%) i/s -      5.765B in   5.088301s
          OpenStruct      1.136B (± 0.8%) i/s -      5.783B in   5.091858s

Comparison:
          OpenStruct: 1135815839.2 i/s
                Hash: 1132959912.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.438M i/100ms
          OpenStruct     3.270k i/100ms
Calculating -------------------------------------
                Hash      1.134B (± 1.2%) i/s -      5.672B in   5.003624s
          OpenStruct     34.221k (±13.0%) i/s -    170.040k in   5.086863s

Comparison:
                Hash: 1133702370.5 i/s
          OpenStruct:    34220.8 i/s - 33129.05x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   790.964k i/100ms
  ancestors.include?   173.867k i/100ms
Calculating -------------------------------------
  less than or equal      8.594M (± 4.3%) i/s -     43.503M in   5.071918s
  ancestors.include?      1.731M (± 5.2%) i/s -      8.693M in   5.035369s

Comparison:
  less than or equal:  8593609.9 i/s
  ancestors.include?:  1731407.6 i/s - 4.96x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     11.340  (± 0.0%) i/s -     57.000  in   5.026704s
         Kernel loop     11.355  (± 0.0%) i/s -     57.000  in   5.020074s

Comparison:
         Kernel loop:       11.4 i/s
          While Loop:       11.3 i/s - 1.00x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   113.732M i/100ms
         Array#first   113.718M i/100ms
Calculating -------------------------------------
           Array#[0]      1.135B (± 0.8%) i/s -      5.687B in   5.009090s
         Array#first      1.135B (± 0.7%) i/s -      5.686B in   5.008927s

Comparison:
           Array#[0]: 1135337516.4 i/s
         Array#first: 1135198653.8 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   113.035M i/100ms
          Array#last   113.313M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.136B (± 1.0%) i/s -      5.765B in   5.074054s
          Array#last      1.134B (± 0.4%) i/s -      5.779B in   5.094770s

Comparison:
          Array#[-1]: 1136240396.3 i/s
          Array#last: 1134312189.9 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   646.770k i/100ms
Calculating -------------------------------------
                find      4.420  (±22.6%) i/s -     14.000  in   5.143937s
             bsearch      6.529M (± 4.8%) i/s -     32.985M in   5.064271s

Comparison:
             bsearch:  6528801.2 i/s
                find:        4.4 i/s - 1477226.91x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.069  (± 0.0%) i/s -      1.000  in  14.467715s
        Array#insert      1.024  (± 0.0%) i/s -      6.000  in   5.857580s

Comparison:
        Array#insert:        1.0 i/s
       Array#unshift:        0.1 i/s - 14.82x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   113.623M i/100ms
          Array#size   113.503M i/100ms
         Array#count   113.741M i/100ms
Calculating -------------------------------------
        Array#length      1.138B (± 1.0%) i/s -      5.795B in   5.094299s
          Array#size      1.137B (± 0.7%) i/s -      5.789B in   5.092235s
         Array#count      1.137B (± 0.7%) i/s -      5.687B in   5.002956s

Comparison:
        Array#length: 1137610204.1 i/s
          Array#size: 1136824689.8 i/s - same-ish: difference falls within error
         Array#count: 1136795093.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    22.811k i/100ms
        Array#sample     2.732M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    252.199k (± 2.2%) i/s -      1.277M in   5.067755s
        Array#sample     27.189M (± 0.2%) i/s -    136.604M in   5.024323s

Comparison:
        Array#sample: 27188674.5 i/s
 Array#shuffle.first:   252198.8 i/s - 107.81x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601     1.047k i/100ms
          Date.parse   844.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     51.992k (±42.5%) i/s -    185.319k in   5.008049s
          Date.parse     22.224k (±32.3%) i/s -     94.528k in   5.002165s

Comparison:
        Date.iso8601:    51991.5 i/s
          Date.parse:    22223.6 i/s - 2.34x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   221.953k i/100ms
           Array#map     1.042M i/100ms
Calculating -------------------------------------
   Array#each + push      2.435M (± 5.2%) i/s -     12.207M in   5.026891s
           Array#map     10.519M (± 3.4%) i/s -     53.125M in   5.056376s

Comparison:
           Array#map: 10519018.2 i/s
   Array#each + push:  2435316.7 i/s - 4.32x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     8.573M i/100ms
               #each    24.898M i/100ms
Calculating -------------------------------------
            For loop     85.781M (± 0.0%) i/s -    437.221M in   5.096964s
               #each    248.690M (± 0.3%) i/s -      1.245B in   5.005947s

Comparison:
               #each: 248689668.5 i/s
            For loop: 85780711.1 i/s - 2.90x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   821.281k i/100ms
     each_with_index     1.011M i/100ms
Calculating -------------------------------------
          While Loop      8.216M (± 0.0%) i/s -     41.885M in   5.098273s
     each_with_index     10.114M (± 0.0%) i/s -     50.575M in   5.000394s

Comparison:
     each_with_index: 10114165.5 i/s
          While Loop:  8215593.6 i/s - 1.23x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   156.524k i/100ms
      inject to_proc   159.471k i/100ms
        inject block   159.518k i/100ms
Calculating -------------------------------------
       inject symbol      1.572M (± 0.3%) i/s -      7.983M in   5.077329s
      inject to_proc      1.595M (± 1.4%) i/s -      8.133M in   5.099763s
        inject block      1.607M (± 0.1%) i/s -      8.135M in   5.062182s

Comparison:
        inject block:  1607098.3 i/s
      inject to_proc:  1595136.3 i/s - same-ish: difference falls within error
       inject symbol:  1572240.7 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    16.067k i/100ms
   Array#map.flatten    17.843k i/100ms
      Array#flat_map    42.886k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    183.015k (± 4.8%) i/s -    915.819k in   5.015933s
   Array#map.flatten    181.337k (± 6.5%) i/s -    909.993k in   5.050725s
      Array#flat_map    437.251k (± 2.6%) i/s -      2.187M in   5.005700s

Comparison:
      Array#flat_map:   437251.4 i/s
Array#map.flatten(1):   183014.7 i/s - 2.39x  (± 0.00) slower
   Array#map.flatten:   181336.6 i/s - 2.41x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   216.711k i/100ms
  Array#reverse_each     1.494M i/100ms
Calculating -------------------------------------
  Array#reverse.each      2.199M (± 3.3%) i/s -     11.052M in   5.031552s
  Array#reverse_each     14.929M (± 0.1%) i/s -     74.679M in   5.002393s

Comparison:
  Array#reverse_each: 14928590.7 i/s
  Array#reverse.each:  2199044.7 i/s - 6.79x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       595.343k i/100ms
   Enumerable#detect     2.688M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          6.871M (± 7.3%) i/s -    136.334M in  20.009523s
   Enumerable#detect     26.763M (± 0.6%) i/s -    537.570M in  20.086872s

Comparison:
   Enumerable#detect: 26763390.9 i/s
Enumerable#select.first:  6870828.2 i/s - 3.90x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       199.036k i/100ms
Enumerable#select.last
                       400.015k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.133M (± 6.5%) i/s -     10.748M in   5.074134s
Enumerable#select.last
                          3.827M (± 7.7%) i/s -     19.201M in   5.062995s

Comparison:
Enumerable#select.last:  3827347.6 i/s
Enumerable#reverse.detect:  2133370.6 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.582k i/100ms
  Enumerable#sort_by     2.664k i/100ms
     Enumerable#sort     3.448k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         22.615k (±23.0%) i/s -    103.280k in   5.009221s
  Enumerable#sort_by     26.151k (±10.0%) i/s -    130.536k in   5.078173s
     Enumerable#sort     38.594k (± 2.0%) i/s -    193.088k in   5.005222s

Comparison:
     Enumerable#sort:    38594.4 i/s
  Enumerable#sort_by:    26150.9 i/s - 1.48x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    22614.8 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   530.521k i/100ms
Enumerable#sort_by...first
                         5.573k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      5.304M (± 0.4%) i/s -     26.526M in   5.001098s
Enumerable#sort_by...first
                         63.671k (± 2.1%) i/s -    323.234k in   5.078907s

Comparison:
   Enumerable#min_by:  5304124.1 i/s
Enumerable#sort_by...first:    63671.3 i/s - 83.30x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   347.303k i/100ms
            Hash#dup   398.545k i/100ms
Calculating -------------------------------------
              Hash[]      4.020M (± 7.1%) i/s -     20.144M in   5.036273s
            Hash#dup      4.161M (± 8.1%) i/s -     20.724M in   5.038831s

Comparison:
            Hash#dup:  4160905.0 i/s
              Hash[]:  4020023.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   113.396M i/100ms
  Hash#fetch, symbol   113.228M i/100ms
     Hash#[], string    15.735M i/100ms
  Hash#fetch, string    13.517M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.136B (± 0.8%) i/s -      5.783B in   5.089175s
  Hash#fetch, symbol      1.134B (± 0.6%) i/s -      5.775B in   5.091294s
     Hash#[], string    157.635M (± 0.5%) i/s -    802.481M in   5.090891s
  Hash#fetch, string    135.055M (± 0.5%) i/s -    675.826M in   5.004226s

Comparison:
     Hash#[], symbol: 1136436077.7 i/s
  Hash#fetch, symbol: 1134254213.2 i/s - same-ish: difference falls within error
     Hash#[], string: 157635131.7 i/s - 7.21x  (± 0.00) slower
  Hash#fetch, string: 135054511.5 i/s - 8.41x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    49.772M i/100ms
             Hash#[]    49.775M i/100ms
          Hash#[] ||    49.781M i/100ms
          Hash#[] &&    49.739M i/100ms
          Hash#fetch    49.789M i/100ms
 Hash#fetch fallback    49.795M i/100ms
Calculating -------------------------------------
            Hash#dig    497.165M (± 0.4%) i/s -      2.489B in   5.005659s
             Hash#[]    497.781M (± 0.2%) i/s -      2.539B in   5.099729s
          Hash#[] ||    497.696M (± 0.2%) i/s -      2.489B in   5.001137s
          Hash#[] &&    497.516M (± 0.2%) i/s -      2.537B in   5.098723s
          Hash#fetch    497.782M (± 0.2%) i/s -      2.489B in   5.001096s
 Hash#fetch fallback    497.692M (± 0.1%) i/s -      2.490B in   5.002586s

Comparison:
          Hash#fetch: 497781975.2 i/s
             Hash#[]: 497780963.2 i/s - same-ish: difference falls within error
          Hash#[] ||: 497696195.9 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 497692274.5 i/s - same-ish: difference falls within error
          Hash#[] &&: 497516418.0 i/s - same-ish: difference falls within error
            Hash#dig: 497165492.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   113.315M i/100ms
  Hash#fetch + block   113.354M i/100ms
    Hash#fetch + arg   113.618M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.136B (± 0.8%) i/s -      5.779B in   5.089420s
  Hash#fetch + block      1.135B (± 0.9%) i/s -      5.781B in   5.091656s
    Hash#fetch + arg      1.134B (± 0.5%) i/s -      5.681B in   5.009988s

Comparison:
  Hash#fetch + const: 1135579146.2 i/s
  Hash#fetch + block: 1135477935.1 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 1133941786.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    23.896k i/100ms
         sort + to_h    15.355k i/100ms
Calculating -------------------------------------
      sort_by + to_h    310.426k (± 7.1%) i/s -      1.553M in   5.029944s
         sort + to_h    143.762k (± 3.2%) i/s -    721.685k in   5.025230s

Comparison:
      sort_by + to_h:   310425.6 i/s
         sort + to_h:   143761.5 i/s - 2.16x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   164.694k i/100ms
       Hash#each_key   182.685k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.724M (±11.8%) i/s -      8.399M in   5.022774s
       Hash#each_key      1.768M (± 6.3%) i/s -      8.952M in   5.094178s

Comparison:
       Hash#each_key:  1767923.8 i/s
      Hash#keys.each:  1724171.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   207.000  i/100ms
           Hash#key?    11.013M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      2.064k (±12.9%) i/s -     10.143k in   5.014780s
           Hash#key?    110.107M (± 0.1%) i/s -    550.644M in   5.000986s

Comparison:
           Hash#key?: 110107052.3 i/s
  Hash#keys.include?:     2064.4 i/s - 53336.42x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    37.315k i/100ms
            Hash#[]=    39.946k i/100ms
Calculating -------------------------------------
         Hash#merge!    417.020k (± 5.0%) i/s -      2.090M in   5.023603s
            Hash#[]=    412.733k (± 7.3%) i/s -      2.077M in   5.071658s

Comparison:
         Hash#merge!:   417020.2 i/s
            Hash#[]=:   412733.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        26.891k i/100ms
      Hash#merge({})    14.085k i/100ms
 Hash#dup#merge!({})    23.197k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        267.872k (± 8.0%) i/s -      1.345M in   5.053197s
      Hash#merge({})    144.428k (± 9.9%) i/s -    718.335k in   5.041467s
 Hash#dup#merge!({})    241.263k (± 7.5%) i/s -      1.206M in   5.039872s

Comparison:
{}#merge!(Hash) do end:   267872.4 i/s
 Hash#dup#merge!({}):   241262.6 i/s - same-ish: difference falls within error
      Hash#merge({}):   144428.4 i/s - 1.85x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   114.184M i/100ms
          Hash#merge   113.497M i/100ms
Calculating -------------------------------------
        Hash#**other      1.135B (± 0.7%) i/s -      5.709B in   5.030879s
          Hash#merge      1.138B (± 1.1%) i/s -      5.788B in   5.088378s

Comparison:
          Hash#merge: 1137705526.3 i/s
        Hash#**other: 1134878701.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   612.000  i/100ms
         Hash#merge!    38.233k i/100ms
Calculating -------------------------------------
          Hash#merge      6.805k (± 9.8%) i/s -     33.660k in   5.010013s
         Hash#merge!    414.041k (± 7.9%) i/s -      2.065M in   5.019577s

Comparison:
         Hash#merge!:   414041.3 i/s
          Hash#merge:     6804.9 i/s - 60.85x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.410M i/100ms
Array#each               1.315M i/100ms
Array#each_w/_object     1.322M i/100ms
Hash#select-include      1.734M i/100ms
Calculating -------------------------------------
Hash#native-slice        15.629M (± 3.9%) i/s -     78.950M in   5.059687s
Array#each               13.460M (± 3.5%) i/s -     68.357M in   5.084989s
Array#each_w/_object     13.555M (± 3.8%) i/s -     68.745M in   5.079084s
Hash#select-include      18.271M (± 4.0%) i/s -     91.892M in   5.037764s

Comparison:
Hash#select-include : 18270941.7 i/s
Hash#native-slice   : 15628623.1 i/s - 1.17x  (± 0.00) slower
Array#each_w/_object: 13554913.8 i/s - 1.35x  (± 0.00) slower
Array#each          : 13460469.3 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   200.000  i/100ms
         Hash#value?   348.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.925k (±11.8%) i/s -      9.600k in   5.077134s
         Hash#value?      3.497k (± 0.2%) i/s -     17.748k in   5.075461s

Comparison:
         Hash#value?:     3496.8 i/s
Hash#values.include?:     1925.3 i/s - 1.82x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   113.385M i/100ms
                send   113.493M i/100ms
      method_missing   113.449M i/100ms
Calculating -------------------------------------
                call      1.135B (± 0.5%) i/s -      5.783B in   5.095240s
                send      1.134B (± 0.7%) i/s -      5.675B in   5.004723s
      method_missing      1.136B (± 0.9%) i/s -      5.786B in   5.092111s

Comparison:
      method_missing: 1136346528.6 i/s
                call: 1134942043.5 i/s - same-ish: difference falls within error
                send: 1133917113.7 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    29.902k i/100ms
      Symbol#to_proc    34.504k i/100ms
Calculating -------------------------------------
               Block    345.070k (±10.8%) i/s -      1.704M in   5.021810s
      Symbol#to_proc    346.190k (± 9.2%) i/s -      1.725M in   5.041851s

Comparison:
      Symbol#to_proc:   346190.2 i/s
               Block:   345069.7 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   113.582M i/100ms
       block + yield   113.382M i/100ms
        unused block   113.322M i/100ms
               yield   113.366M i/100ms
Calculating -------------------------------------
          block.call      1.135B (± 0.6%) i/s -      5.679B in   5.005509s
       block + yield      1.136B (± 0.9%) i/s -      5.782B in   5.091926s
        unused block      1.138B (± 0.9%) i/s -      5.779B in   5.079752s
               yield      1.137B (± 1.1%) i/s -      5.782B in   5.084759s

Comparison:
        unused block: 1137830217.4 i/s
               yield: 1137189798.6 i/s - same-ish: difference falls within error
       block + yield: 1135700494.7 i/s - same-ish: difference falls within error
          block.call: 1134611278.8 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    16.000k i/100ms
      range#include?   490.000  i/100ms
       range#member?   812.000  i/100ms
       plain compare    33.561k i/100ms
Calculating -------------------------------------
        range#cover?    190.079k (±23.8%) i/s -    880.000k in   5.013019s
      range#include?      9.724k (±31.3%) i/s -     43.610k in   5.030925s
       range#member?      8.894k (±22.9%) i/s -     42.224k in   5.041597s
       plain compare    421.665k (± 9.0%) i/s -      2.081M in   5.008505s

Comparison:
       plain compare:   421664.7 i/s
        range#cover?:   190079.4 i/s - 2.22x  (± 0.00) slower
      range#include?:     9723.9 i/s - 43.36x  (± 0.00) slower
       range#member?:     8893.5 i/s - 47.41x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    10.817M i/100ms
           String#=~    10.270M i/100ms
          Regexp#===    10.270M i/100ms
        String#match     8.031M i/100ms
Calculating -------------------------------------
       String#match?    108.154M (± 2.1%) i/s -    540.844M in   5.003310s
           String#=~    102.648M (± 0.2%) i/s -    513.486M in   5.002395s
          Regexp#===    102.679M (± 0.0%) i/s -    513.479M in   5.000838s
        String#match     85.277M (± 0.0%) i/s -    433.648M in   5.085176s

Comparison:
       String#match?: 108154205.5 i/s
          Regexp#===: 102678508.3 i/s - 1.05x  (± 0.00) slower
           String#=~: 102648348.3 i/s - 1.05x  (± 0.00) slower
        String#match: 85276854.2 i/s - 1.27x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.160M i/100ms
      String#casecmp     3.275M i/100ms
Calculating -------------------------------------
String#downcase + ==     23.237M (± 7.5%) i/s -    116.640M in   5.059293s
      String#casecmp     36.025M (± 6.1%) i/s -    180.140M in   5.019874s

Comparison:
      String#casecmp: 36025319.7 i/s
String#downcase + ==: 23236644.5 i/s - 1.55x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     6.295M i/100ms
       String#concat     6.991M i/100ms
       String#append     7.016M i/100ms
         "foo" "bar"   113.534M i/100ms
  "#{'foo'}#{'bar'}"   113.415M i/100ms
Calculating -------------------------------------
            String#+     73.474M (± 6.9%) i/s -    365.099M in   5.008496s
       String#concat     74.358M (± 3.2%) i/s -    377.506M in   5.082692s
       String#append     74.570M (± 2.4%) i/s -    378.853M in   5.083510s
         "foo" "bar"      1.137B (± 0.9%) i/s -      5.790B in   5.094560s
  "#{'foo'}#{'bar'}"      1.135B (± 0.5%) i/s -      5.784B in   5.094990s

Comparison:
         "foo" "bar": 1136642268.3 i/s
  "#{'foo'}#{'bar'}": 1135287859.6 i/s - same-ish: difference falls within error
       String#append: 74570306.5 i/s - 15.24x  (± 0.00) slower
       String#concat: 74358245.8 i/s - 15.29x  (± 0.00) slower
            String#+: 73473764.5 i/s - 15.47x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   113.435M i/100ms
          String#dup   113.947M i/100ms
Calculating -------------------------------------
           String#+@      1.135B (± 0.5%) i/s -      5.785B in   5.097913s
          String#dup      1.135B (± 0.8%) i/s -      5.697B in   5.018730s

Comparison:
          String#dup: 1135292059.0 i/s
           String#+@: 1134840647.5 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   992.454k i/100ms
       String#match?     1.192M i/100ms
    String#end_with?    10.821M i/100ms
Calculating -------------------------------------
           String#=~      9.499M (± 4.0%) i/s -     47.638M in   5.023255s
       String#match?     11.864M (± 1.9%) i/s -     59.585M in   5.024422s
    String#end_with?    108.148M (± 0.2%) i/s -    541.064M in   5.003008s

Comparison:
    String#end_with?: 108148310.9 i/s
       String#match?: 11863685.8 i/s - 9.12x  (± 0.00) slower
           String#=~:  9499410.6 i/s - 11.38x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   500.231k i/100ms
          String#sub   770.189k i/100ms
String#dup["string"]=
                         7.535M i/100ms
Calculating -------------------------------------
         String#gsub      6.276M (± 8.7%) i/s -     31.014M in   4.999445s
          String#sub      7.413M (±10.4%) i/s -     36.969M in   5.058140s
String#dup["string"]=
                         75.432M (± 0.1%) i/s -    384.263M in   5.094197s

Comparison:
String#dup["string"]=: 75431529.4 i/s
          String#sub:  7413299.3 i/s - 10.18x  (± 0.00) slower
         String#gsub:  6275574.3 i/s - 12.02x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   235.719k i/100ms
           String#tr   110.746k i/100ms
Calculating -------------------------------------
         String#gsub      2.727M (± 8.2%) i/s -     13.672M in   5.060158s
           String#tr      1.123M (± 4.6%) i/s -      5.648M in   5.039179s

Comparison:
         String#gsub:  2727429.3 i/s
           String#tr:  1123361.9 i/s - 2.43x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   113.383M i/100ms
         With Freeze   113.345M i/100ms
Calculating -------------------------------------
      Without Freeze      1.135B (± 0.6%) i/s -      5.783B in   5.096492s
         With Freeze      1.137B (± 0.6%) i/s -      5.781B in   5.084664s

Comparison:
         With Freeze: 1136918012.7 i/s
      Without Freeze: 1134645902.7 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     5.884k i/100ms
      String#squeeze    47.269k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    106.422k (± 9.4%) i/s -    529.560k in   5.044900s
      String#squeeze    474.288k (± 2.1%) i/s -      2.411M in   5.085220s

Comparison:
      String#squeeze:   474288.2 i/s
 String#gsub/regex+/:   106422.4 i/s - 4.46x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     3.557M i/100ms
       String#match?     5.040M i/100ms
  String#start_with?    10.336M i/100ms
Calculating -------------------------------------
           String#=~     34.849M (± 4.5%) i/s -    174.308M in   5.012485s
       String#match?     50.557M (± 0.0%) i/s -    257.027M in   5.083864s
  String#start_with?    103.084M (± 0.4%) i/s -    516.780M in   5.013312s

Comparison:
  String#start_with?: 103083518.2 i/s
       String#match?: 50557479.0 i/s - 2.04x  (± 0.00) slower
           String#=~: 34848522.9 i/s - 2.96x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   105.119k i/100ms
    String#[0, n] ==   224.402k i/100ms
   String#[RANGE] ==   321.662k i/100ms
   String#[0...n] ==   214.265k i/100ms
Calculating -------------------------------------
  String#start_with?      3.886M (± 0.1%) i/s -     19.447M in   5.004957s
    String#[0, n] ==      2.372M (± 2.6%) i/s -     11.893M in   5.017412s
   String#[RANGE] ==      3.241M (± 4.0%) i/s -     16.405M in   5.069764s
   String#[0...n] ==      2.269M (± 4.0%) i/s -     11.356M in   5.012260s

Comparison:
  String#start_with?:  3885555.5 i/s
   String#[RANGE] ==:  3241087.3 i/s - 1.20x  (± 0.00) slower
    String#[0, n] ==:  2371994.0 i/s - 1.64x  (± 0.00) slower
   String#[0...n] ==:  2269433.3 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     7.543M i/100ms
 String#sub!'string'   687.407k i/100ms
String#gsub!'string'   680.293k i/100ms
  String#[/regexp/]=     2.061M i/100ms
 String#sub!/regexp/   900.785k i/100ms
String#gsub!/regexp/   568.006k i/100ms
Calculating -------------------------------------
  String#['string']=     75.433M (± 0.0%) i/s -    384.668M in   5.099478s
 String#sub!'string'      7.425M (±16.9%) i/s -     35.745M in   5.142654s
String#gsub!'string'      6.734M (± 9.0%) i/s -     33.334M in   5.003470s
  String#[/regexp/]=     19.722M (± 2.7%) i/s -     98.921M in   5.019484s
 String#sub!/regexp/      8.980M (± 9.9%) i/s -     45.039M in   5.076800s
String#gsub!/regexp/      5.694M (± 6.4%) i/s -     28.400M in   5.010553s

Comparison:
  String#['string']=: 75432749.5 i/s
  String#[/regexp/]=: 19721997.1 i/s - 3.82x  (± 0.00) slower
 String#sub!/regexp/:  8979899.8 i/s - 8.40x  (± 0.00) slower
 String#sub!'string':  7425058.0 i/s - 10.16x  (± 0.00) slower
String#gsub!'string':  6734468.6 i/s - 11.20x  (± 0.00) slower
String#gsub!/regexp/:  5693933.1 i/s - 13.25x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     2.197M i/100ms
        String#chomp     4.290M i/100ms
String#delete_suffix     9.524M i/100ms
Calculating -------------------------------------
          String#sub     22.412M (± 4.3%) i/s -    112.031M in   5.008505s
        String#chomp     42.802M (± 1.0%) i/s -    214.517M in   5.012416s
String#delete_suffix    103.413M (± 8.5%) i/s -    514.282M in   5.021557s

Comparison:
String#delete_suffix: 103412716.6 i/s
        String#chomp: 42802166.9 i/s - 2.42x  (± 0.00) slower
          String#sub: 22411833.2 i/s - 4.61x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   113.436M i/100ms
          String#sub    11.016M i/100ms
Calculating -------------------------------------
String#delete_prefix      1.135B (± 0.5%) i/s -      5.785B in   5.097395s
          String#sub    109.807M (± 1.9%) i/s -    550.784M in   5.018103s

Comparison:
String#delete_prefix: 1134958037.3 i/s
          String#sub: 109806774.4 i/s - 10.34x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.328M i/100ms
    String#unpack[0]     1.625M i/100ms
Calculating -------------------------------------
      String#unpack1     15.195M (± 5.3%) i/s -     77.029M in   5.083520s
    String#unpack[0]     15.812M (± 6.5%) i/s -     81.260M in   5.172912s

Comparison:
    String#unpack[0]: 15812347.6 i/s
      String#unpack1: 15195438.0 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.0.0-dev-153f9ad8, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    19.981k i/100ms
          Time.parse    90.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    287.196k (±12.2%) i/s -      1.419M in   5.044623s
          Time.parse      9.740k (±18.7%) i/s -     40.410k in   5.031178s

Comparison:
        Time.iso8601:   287195.6 i/s
          Time.parse:     9739.8 i/s - 29.49x  (± 0.00) slower

