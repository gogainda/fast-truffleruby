$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       173.302M i/100ms
Function with splat arguments
                       787.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.765B (± 3.1%) i/s -      8.838B in   5.013660s
Function with splat arguments
                          8.527k (± 8.9%) i/s -     42.498k in   5.047119s

Comparison:
Function with single Array argument: 1764686577.4 i/s
Function with splat arguments:     8526.9 i/s - 206955.66x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   177.504M i/100ms
Sequential Assignment
                       178.797M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.796B (± 1.2%) i/s -      9.053B in   5.042021s
Sequential Assignment
                          1.784B (± 2.1%) i/s -      8.940B in   5.012107s

Comparison:
 Parallel Assignment: 1795687877.4 i/s
Sequential Assignment: 1784432543.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   178.287M i/100ms
       attr_accessor   178.394M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.787B (± 2.3%) i/s -      9.093B in   5.091817s
       attr_accessor      1.800B (± 1.6%) i/s -      9.098B in   5.055285s

Comparison:
       attr_accessor: 1800215413.9 i/s
   getter_and_setter: 1786693674.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     8.158k i/100ms
         respond_to?   182.308M i/100ms
Calculating -------------------------------------
      begin...rescue     55.189k (± 7.3%) i/s -    277.372k in   5.061781s
         respond_to?      1.785B (± 2.1%) i/s -      8.933B in   5.007741s

Comparison:
         respond_to?: 1784689183.9 i/s
      begin...rescue:    55189.2 i/s - 32337.63x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   177.085M i/100ms
             &method   174.322M i/100ms
Calculating -------------------------------------
              normal      1.777B (± 2.0%) i/s -      9.031B in   5.083525s
             &method      1.782B (± 1.5%) i/s -      9.065B in   5.087057s

Comparison:
             &method: 1782346427.7 i/s
              normal: 1777343670.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        83.000  i/100ms
       define_method   135.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.346k (±49.9%) i/s -      3.818k in   5.064028s
       define_method      3.526k (±69.0%) i/s -      4.320k in   5.487525s

Comparison:
       define_method:     3526.0 i/s
module_eval with string:     1346.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    62.033k i/100ms
       Kernel#format    54.803k i/100ms
            String#%    53.148k i/100ms
Calculating -------------------------------------
         Float#round    661.916k (± 4.0%) i/s -      3.350M in   5.069214s
       Kernel#format    554.976k (± 3.0%) i/s -      2.795M in   5.040944s
            String#%    541.426k (± 4.9%) i/s -      2.711M in   5.019842s

Comparison:
         Float#round:   661915.8 i/s
       Kernel#format:   554976.2 i/s - 1.19x  (± 0.00) slower
            String#%:   541425.7 i/s - 1.22x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   179.046M i/100ms
          OpenStruct   178.072M i/100ms
Calculating -------------------------------------
                Hash      1.799B (± 2.1%) i/s -      9.131B in   5.078528s
          OpenStruct      1.776B (± 1.8%) i/s -      8.904B in   5.016320s

Comparison:
                Hash: 1798844366.4 i/s
          OpenStruct: 1775510989.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   175.641M i/100ms
          OpenStruct     2.072k i/100ms
Calculating -------------------------------------
                Hash      1.780B (± 2.0%) i/s -      8.958B in   5.034258s
          OpenStruct     20.806k (±14.8%) i/s -    101.528k in   5.034148s

Comparison:
                Hash: 1780066785.2 i/s
          OpenStruct:    20805.8 i/s - 85556.10x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   600.889k i/100ms
  ancestors.include?   120.492k i/100ms
Calculating -------------------------------------
  less than or equal      7.093M (± 4.7%) i/s -     35.452M in   5.010143s
  ancestors.include?      1.273M (± 8.7%) i/s -      6.386M in   5.081438s

Comparison:
  less than or equal:  7092747.7 i/s
  ancestors.include?:  1272680.1 i/s - 5.57x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     19.640  (± 5.1%) i/s -     99.000  in   5.045543s
         Kernel loop     19.814  (± 0.0%) i/s -     99.000  in   4.998725s

Comparison:
         Kernel loop:       19.8 i/s
          While Loop:       19.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   179.469M i/100ms
         Array#first   179.566M i/100ms
Calculating -------------------------------------
           Array#[0]      1.783B (± 1.1%) i/s -      8.973B in   5.034345s
         Array#first      1.831B (± 1.6%) i/s -      9.158B in   5.002181s

Comparison:
         Array#first: 1831233219.5 i/s
           Array#[0]: 1782673279.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   178.367M i/100ms
          Array#last   181.435M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.776B (± 2.1%) i/s -      8.918B in   5.024298s
          Array#last      1.792B (± 1.7%) i/s -      9.072B in   5.063799s

Comparison:
          Array#last: 1792025029.1 i/s
          Array#[-1]: 1775854609.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   460.536k i/100ms
Calculating -------------------------------------
                find      4.703  (±21.3%) i/s -     11.000  in   5.103094s
             bsearch      4.803M (± 5.4%) i/s -     24.408M in   5.097163s

Comparison:
             bsearch:  4803258.8 i/s
                find:        4.7 i/s - 1021330.50x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.074  (± 0.0%) i/s -      1.000  in  13.525546s
        Array#insert      0.728  (± 0.0%) i/s -      4.000  in   5.494900s

Comparison:
        Array#insert:        0.7 i/s
       Array#unshift:        0.1 i/s - 9.85x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   178.755M i/100ms
          Array#size   176.677M i/100ms
         Array#count   175.732M i/100ms
Calculating -------------------------------------
        Array#length      1.779B (± 2.6%) i/s -      8.938B in   5.027335s
          Array#size      1.781B (± 3.1%) i/s -      9.011B in   5.063613s
         Array#count      1.780B (± 2.2%) i/s -      8.962B in   5.037685s

Comparison:
          Array#size: 1781285696.9 i/s
         Array#count: 1779944094.0 i/s - same-ish: difference falls within error
        Array#length: 1779154207.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    18.482k i/100ms
        Array#sample     2.139M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    203.310k (± 3.0%) i/s -      1.017M in   5.004877s
        Array#sample     22.622M (± 1.7%) i/s -    113.354M in   5.012251s

Comparison:
        Array#sample: 22621970.5 i/s
 Array#shuffle.first:   203309.9 i/s - 111.27x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   309.000  i/100ms
          Date.parse   339.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     21.462k (±35.4%) i/s -     83.430k in   5.026243s
          Date.parse     11.649k (±28.1%) i/s -     50.172k in   5.010063s

Comparison:
        Date.iso8601:    21461.7 i/s
          Date.parse:    11648.8 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   153.950k i/100ms
           Array#map   750.611k i/100ms
Calculating -------------------------------------
   Array#each + push      1.713M (±10.1%) i/s -      8.467M in   5.000838s
           Array#map      8.075M (± 5.2%) i/s -     40.533M in   5.034118s

Comparison:
           Array#map:  8075133.8 i/s
   Array#each + push:  1712894.8 i/s - 4.71x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     6.353M i/100ms
               #each    20.790M i/100ms
Calculating -------------------------------------
            For loop     63.885M (± 2.2%) i/s -    324.022M in   5.074546s
               #each    206.578M (± 2.6%) i/s -      1.040B in   5.035631s

Comparison:
               #each: 206577629.5 i/s
            For loop: 63885124.4 i/s - 3.23x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   744.008k i/100ms
     each_with_index     1.054M i/100ms
Calculating -------------------------------------
          While Loop      7.637M (± 1.3%) i/s -     38.688M in   5.066638s
     each_with_index     10.620M (± 1.6%) i/s -     53.779M in   5.065341s

Comparison:
     each_with_index: 10619990.7 i/s
          While Loop:  7637293.3 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   136.316k i/100ms
      inject to_proc   139.038k i/100ms
        inject block   139.256k i/100ms
Calculating -------------------------------------
       inject symbol      1.407M (± 2.2%) i/s -      7.088M in   5.041969s
      inject to_proc      1.412M (± 1.7%) i/s -      7.091M in   5.021778s
        inject block      1.415M (± 2.0%) i/s -      7.102M in   5.021559s

Comparison:
        inject block:  1414928.7 i/s
      inject to_proc:  1412453.2 i/s - same-ish: difference falls within error
       inject symbol:  1406613.0 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    12.605k i/100ms
   Array#map.flatten    13.251k i/100ms
      Array#flat_map    33.996k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    152.113k (± 6.6%) i/s -    768.905k in   5.078382s
   Array#map.flatten    148.753k (± 8.1%) i/s -    742.056k in   5.022745s
      Array#flat_map    350.403k (± 5.1%) i/s -      1.768M in   5.058722s

Comparison:
      Array#flat_map:   350402.8 i/s
Array#map.flatten(1):   152112.9 i/s - 2.30x  (± 0.00) slower
   Array#map.flatten:   148753.2 i/s - 2.36x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   174.601k i/100ms
  Array#reverse_each     1.544M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.775M (± 3.5%) i/s -      8.905M in   5.022297s
  Array#reverse_each     15.296M (± 1.3%) i/s -     77.218M in   5.049215s

Comparison:
  Array#reverse_each: 15295794.6 i/s
  Array#reverse.each:  1775233.1 i/s - 8.62x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       480.975k i/100ms
   Enumerable#detect     2.734M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          5.243M (± 8.2%) i/s -    103.891M in  20.041442s
   Enumerable#detect     27.940M (± 2.2%) i/s -    560.415M in  20.068100s

Comparison:
   Enumerable#detect: 27939710.5 i/s
Enumerable#select.first:  5243211.0 i/s - 5.33x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       149.724k i/100ms
Enumerable#select.last
                       269.304k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.788M (± 4.5%) i/s -      8.983M in   5.033957s
Enumerable#select.last
                          2.830M (± 3.5%) i/s -     14.273M in   5.050304s

Comparison:
Enumerable#select.last:  2829934.0 i/s
Enumerable#reverse.detect:  1788245.1 i/s - 1.58x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         1.602k i/100ms
  Enumerable#sort_by     2.111k i/100ms
     Enumerable#sort     2.512k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         19.770k (±22.0%) i/s -     88.110k in   5.027217s
  Enumerable#sort_by     19.983k (±16.3%) i/s -     94.995k in   5.041976s
     Enumerable#sort     28.920k (± 2.9%) i/s -    145.696k in   5.042574s

Comparison:
     Enumerable#sort:    28920.4 i/s
  Enumerable#sort_by:    19982.8 i/s - 1.45x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    19770.4 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   405.607k i/100ms
Enumerable#sort_by...first
                         4.648k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      4.135M (± 1.4%) i/s -     20.686M in   5.003069s
Enumerable#sort_by...first
                         53.244k (± 4.3%) i/s -    269.584k in   5.073315s

Comparison:
   Enumerable#min_by:  4135415.2 i/s
Enumerable#sort_by...first:    53243.9 i/s - 77.67x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   246.954k i/100ms
            Hash#dup   263.618k i/100ms
Calculating -------------------------------------
              Hash[]      2.763M (± 7.4%) i/s -     13.829M in   5.033551s
            Hash#dup      2.824M (±10.0%) i/s -     13.972M in   5.029756s

Comparison:
            Hash#dup:  2823809.8 i/s
              Hash[]:  2762912.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   178.189M i/100ms
  Hash#fetch, symbol   180.744M i/100ms
     Hash#[], string     2.186M i/100ms
  Hash#fetch, string     2.223M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.753B (± 3.0%) i/s -      8.909B in   5.087195s
  Hash#fetch, symbol      1.759B (± 3.5%) i/s -      8.856B in   5.041095s
     Hash#[], string    111.938M (± 2.4%) i/s -    559.593M in   5.002083s
  Hash#fetch, string    102.853M (± 2.3%) i/s -    515.815M in   5.017895s

Comparison:
  Hash#fetch, symbol: 1759319629.4 i/s
     Hash#[], symbol: 1752995183.4 i/s - same-ish: difference falls within error
     Hash#[], string: 111938163.4 i/s - 15.72x  (± 0.00) slower
  Hash#fetch, string: 102853456.2 i/s - 17.11x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    70.895M i/100ms
             Hash#[]    70.673M i/100ms
          Hash#[] ||    70.762M i/100ms
          Hash#[] &&    70.090M i/100ms
          Hash#fetch    69.283M i/100ms
 Hash#fetch fallback    70.343M i/100ms
Calculating -------------------------------------
            Hash#dig    684.371M (± 3.8%) i/s -      3.474B in   5.083469s
             Hash#[]    695.685M (± 2.9%) i/s -      3.534B in   5.083804s
          Hash#[] ||    705.226M (± 1.1%) i/s -      3.538B in   5.017577s
          Hash#[] &&    703.736M (± 2.1%) i/s -      3.575B in   5.081736s
          Hash#fetch    705.829M (± 1.5%) i/s -      3.533B in   5.007310s
 Hash#fetch fallback    698.827M (± 2.5%) i/s -      3.517B in   5.036176s

Comparison:
          Hash#fetch: 705828973.5 i/s
          Hash#[] ||: 705226252.8 i/s - same-ish: difference falls within error
          Hash#[] &&: 703736221.4 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 698827310.5 i/s - same-ish: difference falls within error
             Hash#[]: 695685245.1 i/s - same-ish: difference falls within error
            Hash#dig: 684371044.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   175.520M i/100ms
  Hash#fetch + block   177.309M i/100ms
    Hash#fetch + arg   180.820M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.787B (± 1.6%) i/s -      8.952B in   5.010495s
  Hash#fetch + block      1.786B (± 2.0%) i/s -      9.043B in   5.066089s
    Hash#fetch + arg      1.785B (± 1.5%) i/s -      9.041B in   5.066398s

Comparison:
  Hash#fetch + const: 1787005540.7 i/s
  Hash#fetch + block: 1785754039.7 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 1784937565.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    14.982k i/100ms
         sort + to_h     1.927k i/100ms
Calculating -------------------------------------
      sort_by + to_h    258.353k (± 9.2%) i/s -      1.288M in   5.038231s
         sort + to_h    109.717k (±11.1%) i/s -    539.560k in   5.000496s

Comparison:
      sort_by + to_h:   258353.2 i/s
         sort + to_h:   109717.1 i/s - 2.35x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   116.888k i/100ms
       Hash#each_key   125.173k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.321M (±10.9%) i/s -      6.429M in   5.006129s
       Hash#each_key      1.260M (± 4.1%) i/s -      6.384M in   5.075492s

Comparison:
      Hash#keys.each:  1320830.3 i/s
       Hash#each_key:  1259904.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   186.000  i/100ms
           Hash#key?     6.943M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.620k (±12.5%) i/s -      7.998k in   5.051196s
           Hash#key?     69.273M (± 1.8%) i/s -    347.131M in   5.012818s

Comparison:
           Hash#key?: 69272713.8 i/s
  Hash#keys.include?:     1620.3 i/s - 42753.33x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    21.929k i/100ms
            Hash#[]=    29.321k i/100ms
Calculating -------------------------------------
         Hash#merge!    291.328k (± 8.8%) i/s -      1.447M in   5.008497s
            Hash#[]=    293.929k (± 4.2%) i/s -      1.495M in   5.096831s

Comparison:
            Hash#[]=:   293928.9 i/s
         Hash#merge!:   291328.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        13.807k i/100ms
      Hash#merge({})    11.722k i/100ms
 Hash#dup#merge!({})    19.585k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        223.697k (±12.0%) i/s -      1.105M in   5.024071s
      Hash#merge({})    122.994k (±10.6%) i/s -    609.544k in   5.016445s
 Hash#dup#merge!({})    195.593k (±11.6%) i/s -    979.250k in   5.083744s

Comparison:
{}#merge!(Hash) do end:   223697.2 i/s
 Hash#dup#merge!({}):   195593.1 i/s - same-ish: difference falls within error
      Hash#merge({}):   122994.1 i/s - 1.82x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   179.168M i/100ms
          Hash#merge   176.653M i/100ms
Calculating -------------------------------------
        Hash#**other      1.780B (± 1.4%) i/s -      8.958B in   5.034156s
          Hash#merge      1.788B (± 1.6%) i/s -      9.009B in   5.041079s

Comparison:
          Hash#merge: 1787647336.7 i/s
        Hash#**other: 1779884599.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   351.000  i/100ms
         Hash#merge!    27.109k i/100ms
Calculating -------------------------------------
          Hash#merge      5.244k (±13.5%) i/s -     25.623k in   5.026222s
         Hash#merge!    300.656k (± 8.0%) i/s -      1.518M in   5.083534s

Comparison:
         Hash#merge!:   300656.3 i/s
          Hash#merge:     5244.1 i/s - 57.33x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      953.433k i/100ms
Array#each             821.808k i/100ms
Array#each_w/_object   765.010k i/100ms
Hash#select-include      1.394M i/100ms
Calculating -------------------------------------
Hash#native-slice         9.843M (± 3.9%) i/s -     49.579M in   5.045058s
Array#each                8.154M (± 6.1%) i/s -     41.090M in   5.058904s
Array#each_w/_object      8.354M (± 3.8%) i/s -     42.076M in   5.044251s
Hash#select-include      14.248M (± 6.1%) i/s -     71.088M in   5.008488s

Comparison:
Hash#select-include : 14248383.8 i/s
Hash#native-slice   :  9843375.2 i/s - 1.45x  (± 0.00) slower
Array#each_w/_object:  8353730.9 i/s - 1.71x  (± 0.00) slower
Array#each          :  8153768.9 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   155.000  i/100ms
         Hash#value?   353.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.650k (±13.6%) i/s -      8.060k in   5.028379s
         Hash#value?      3.669k (± 3.9%) i/s -     18.356k in   5.010571s

Comparison:
         Hash#value?:     3669.5 i/s
Hash#values.include?:     1650.2 i/s - 2.22x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   178.329M i/100ms
                send   175.162M i/100ms
      method_missing   178.455M i/100ms
Calculating -------------------------------------
                call      1.768B (± 2.4%) i/s -      8.916B in   5.045717s
                send      1.785B (± 2.1%) i/s -      8.933B in   5.007567s
      method_missing      1.781B (± 1.9%) i/s -      8.923B in   5.012009s

Comparison:
                send: 1784781543.1 i/s
      method_missing: 1780918911.2 i/s - same-ish: difference falls within error
                call: 1768244235.0 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    26.833k i/100ms
      Symbol#to_proc    31.160k i/100ms
Calculating -------------------------------------
               Block    317.570k (±11.1%) i/s -      1.583M in   5.050935s
      Symbol#to_proc    315.820k (±11.1%) i/s -      1.589M in   5.126391s

Comparison:
               Block:   317570.3 i/s
      Symbol#to_proc:   315820.3 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   179.466M i/100ms
       block + yield   180.310M i/100ms
        unused block   179.176M i/100ms
               yield   180.298M i/100ms
Calculating -------------------------------------
          block.call      1.783B (± 1.1%) i/s -      8.973B in   5.033704s
       block + yield      1.792B (± 1.2%) i/s -      9.015B in   5.031410s
        unused block      1.854B (± 1.8%) i/s -      9.317B in   5.027698s
               yield      1.821B (± 1.6%) i/s -      9.195B in   5.052192s

Comparison:
        unused block: 1853764540.1 i/s
               yield: 1820504691.4 i/s - same-ish: difference falls within error
       block + yield: 1792090158.3 i/s - 1.03x  (± 0.00) slower
          block.call: 1782855464.9 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     7.310k i/100ms
      range#include?   224.000  i/100ms
       range#member?   522.000  i/100ms
       plain compare    24.961k i/100ms
Calculating -------------------------------------
        range#cover?    118.350k (±20.9%) i/s -    555.560k in   5.026176s
      range#include?      8.901k (±26.2%) i/s -     37.184k in   5.002682s
       range#member?      5.629k (±27.9%) i/s -     26.100k in   5.017462s
       plain compare    374.298k (± 8.1%) i/s -      1.872M in   5.043744s

Comparison:
       plain compare:   374297.8 i/s
        range#cover?:   118350.5 i/s - 3.16x  (± 0.00) slower
      range#include?:     8900.5 i/s - 42.05x  (± 0.00) slower
       range#member?:     5629.4 i/s - 66.49x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     7.515M i/100ms
           String#=~     7.443M i/100ms
          Regexp#===     7.369M i/100ms
        String#match     6.418M i/100ms
Calculating -------------------------------------
       String#match?     69.471M (± 2.1%) i/s -    353.204M in   5.086405s
           String#=~     75.280M (± 1.8%) i/s -    379.582M in   5.043984s
          Regexp#===     73.742M (± 2.2%) i/s -    375.813M in   5.098851s
        String#match     63.566M (± 1.9%) i/s -    320.890M in   5.049971s

Comparison:
           String#=~: 75280093.9 i/s
          Regexp#===: 73742179.8 i/s - same-ish: difference falls within error
       String#match?: 69471231.6 i/s - 1.08x  (± 0.00) slower
        String#match: 63565868.4 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.652M i/100ms
      String#casecmp     2.695M i/100ms
Calculating -------------------------------------
String#downcase + ==     17.702M (± 5.7%) i/s -     89.227M in   5.056977s
      String#casecmp     26.952M (± 6.7%) i/s -    134.767M in   5.023333s

Comparison:
      String#casecmp: 26951566.4 i/s
String#downcase + ==: 17702494.6 i/s - 1.52x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     5.532M i/100ms
       String#concat     5.988M i/100ms
       String#append     5.755M i/100ms
         "foo" "bar"   179.119M i/100ms
  "#{'foo'}#{'bar'}"   182.413M i/100ms
Calculating -------------------------------------
            String#+     56.658M (± 8.9%) i/s -    282.157M in   5.047721s
       String#concat     58.355M (± 4.0%) i/s -    293.430M in   5.037010s
       String#append     58.795M (± 3.6%) i/s -    299.269M in   5.096953s
         "foo" "bar"      1.815B (± 2.2%) i/s -      9.135B in   5.035706s
  "#{'foo'}#{'bar'}"      1.800B (± 2.0%) i/s -      9.121B in   5.069755s

Comparison:
         "foo" "bar": 1815010519.0 i/s
  "#{'foo'}#{'bar'}": 1799789251.5 i/s - same-ish: difference falls within error
       String#append: 58794682.2 i/s - 30.87x  (± 0.00) slower
       String#concat: 58355043.6 i/s - 31.10x  (± 0.00) slower
            String#+: 56658077.7 i/s - 32.03x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   176.014M i/100ms
          String#dup   180.346M i/100ms
Calculating -------------------------------------
           String#+@      1.767B (± 3.1%) i/s -      8.977B in   5.085958s
          String#dup      1.790B (± 1.9%) i/s -      9.017B in   5.038635s

Comparison:
          String#dup: 1790307769.4 i/s
           String#+@: 1766784028.0 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   795.151k i/100ms
       String#match?   993.000k i/100ms
    String#end_with?     8.608M i/100ms
Calculating -------------------------------------
           String#=~      8.353M (± 3.5%) i/s -     42.143M in   5.051742s
       String#match?      9.832M (± 2.1%) i/s -     49.650M in   5.052324s
    String#end_with?     86.271M (± 2.5%) i/s -    438.996M in   5.092074s

Comparison:
    String#end_with?: 86270663.3 i/s
       String#match?:  9831637.7 i/s - 8.77x  (± 0.00) slower
           String#=~:  8353206.7 i/s - 10.33x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   110.893k i/100ms
          String#sub   483.747k i/100ms
String#dup["string"]=
                         6.210M i/100ms
Calculating -------------------------------------
         String#gsub      4.402M (±15.2%) i/s -     21.181M in   5.016849s
          String#sub      5.052M (± 9.0%) i/s -     25.155M in   5.020253s
String#dup["string"]=
                         61.149M (± 1.6%) i/s -    310.523M in   5.079492s

Comparison:
String#dup["string"]=: 61149399.6 i/s
          String#sub:  5052469.1 i/s - 12.10x  (± 0.00) slower
         String#gsub:  4401953.1 i/s - 13.89x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    59.892k i/100ms
           String#tr    86.894k i/100ms
Calculating -------------------------------------
         String#gsub      2.005M (±14.3%) i/s -      9.703M in   5.013895s
           String#tr    858.879k (± 7.4%) i/s -      4.345M in   5.088184s

Comparison:
         String#gsub:  2005027.3 i/s
           String#tr:   858878.5 i/s - 2.33x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   178.957M i/100ms
         With Freeze   180.918M i/100ms
Calculating -------------------------------------
      Without Freeze      1.812B (± 1.3%) i/s -      9.127B in   5.039067s
         With Freeze      1.789B (± 2.3%) i/s -      9.046B in   5.058087s

Comparison:
      Without Freeze: 1811528911.7 i/s
         With Freeze: 1789433254.0 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     4.833k i/100ms
      String#squeeze    41.012k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     86.433k (±10.5%) i/s -    425.304k in   5.016834s
      String#squeeze    411.872k (± 3.6%) i/s -      2.092M in   5.085457s

Comparison:
      String#squeeze:   411872.0 i/s
 String#gsub/regex+/:    86432.7 i/s - 4.77x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   891.982k i/100ms
       String#match?     3.852M i/100ms
  String#start_with?     7.925M i/100ms
Calculating -------------------------------------
           String#=~     27.265M (± 6.2%) i/s -    136.473M in   5.028116s
       String#match?     38.742M (± 1.9%) i/s -    196.432M in   5.072064s
  String#start_with?     79.810M (± 1.8%) i/s -    404.197M in   5.066183s

Comparison:
  String#start_with?: 79810442.6 i/s
       String#match?: 38741938.5 i/s - 2.06x  (± 0.00) slower
           String#=~: 27265481.3 i/s - 2.93x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   101.272k i/100ms
    String#[0, n] ==   184.304k i/100ms
   String#[RANGE] ==   265.873k i/100ms
   String#[0...n] ==   182.975k i/100ms
Calculating -------------------------------------
  String#start_with?      3.220M (± 2.5%) i/s -     16.102M in   5.003985s
    String#[0, n] ==      1.951M (± 4.2%) i/s -      9.768M in   5.016645s
   String#[RANGE] ==      2.657M (± 6.3%) i/s -     13.294M in   5.024556s
   String#[0...n] ==      1.896M (± 5.1%) i/s -      9.515M in   5.031014s

Comparison:
  String#start_with?:  3220152.1 i/s
   String#[RANGE] ==:  2656692.5 i/s - 1.21x  (± 0.00) slower
    String#[0, n] ==:  1950795.8 i/s - 1.65x  (± 0.00) slower
   String#[0...n] ==:  1896418.9 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     6.015M i/100ms
 String#sub!'string'   377.823k i/100ms
String#gsub!'string'   431.810k i/100ms
  String#[/regexp/]=     1.397M i/100ms
 String#sub!/regexp/   685.690k i/100ms
String#gsub!/regexp/   367.097k i/100ms
Calculating -------------------------------------
  String#['string']=     61.246M (± 1.8%) i/s -    306.767M in   5.010497s
 String#sub!'string'      5.609M (±17.7%) i/s -     26.448M in   5.049662s
String#gsub!'string'      4.801M (±10.5%) i/s -     23.750M in   5.010464s
  String#[/regexp/]=     14.867M (± 4.5%) i/s -     75.443M in   5.085435s
 String#sub!/regexp/      6.773M (± 9.7%) i/s -     33.599M in   5.011340s
String#gsub!/regexp/      4.441M (± 9.5%) i/s -     22.026M in   5.013027s

Comparison:
  String#['string']=: 61245727.9 i/s
  String#[/regexp/]=: 14866786.3 i/s - 4.12x  (± 0.00) slower
 String#sub!/regexp/:  6773377.3 i/s - 9.04x  (± 0.00) slower
 String#sub!'string':  5608898.1 i/s - 10.92x  (± 0.00) slower
String#gsub!'string':  4801390.2 i/s - 12.76x  (± 0.00) slower
String#gsub!/regexp/:  4441459.3 i/s - 13.79x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub   134.527k i/100ms
        String#chomp     3.312M i/100ms
String#delete_suffix     6.568M i/100ms
Calculating -------------------------------------
          String#sub     17.713M (± 9.0%) i/s -     87.308M in   5.000720s
        String#chomp     31.784M (± 1.9%) i/s -    158.981M in   5.003777s
String#delete_suffix     82.126M (± 7.8%) i/s -    413.758M in   5.072141s

Comparison:
String#delete_suffix: 82126399.7 i/s
        String#chomp: 31783838.5 i/s - 2.58x  (± 0.00) slower
          String#sub: 17713280.1 i/s - 4.64x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   180.887M i/100ms
          String#sub     7.878M i/100ms
Calculating -------------------------------------
String#delete_prefix      1.816B (± 1.5%) i/s -      9.225B in   5.080326s
          String#sub     81.299M (± 1.7%) i/s -    409.653M in   5.040323s

Comparison:
String#delete_prefix: 1816314278.3 i/s
          String#sub: 81298568.0 i/s - 22.34x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.009M i/100ms
    String#unpack[0]     1.169M i/100ms
Calculating -------------------------------------
      String#unpack1     11.907M (± 5.5%) i/s -     59.512M in   5.013512s
    String#unpack[0]     11.829M (± 3.8%) i/s -     59.625M in   5.048468s

Comparison:
      String#unpack1: 11906510.8 i/s
    String#unpack[0]: 11829181.6 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.0.0-dev-bb05e0bb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    10.281k i/100ms
          Time.parse    36.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    176.949k (±34.4%) i/s -    760.794k in   5.032623s
          Time.parse      4.704k (±20.0%) i/s -     19.548k in   4.991290s

Comparison:
        Time.iso8601:   176948.6 i/s
          Time.parse:     4703.8 i/s - 37.62x  (± 0.00) slower

