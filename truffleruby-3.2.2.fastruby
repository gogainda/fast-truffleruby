$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       322.683M i/100ms
Function with splat arguments
                         1.944k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.179B (± 2.4%) i/s -     16.134B in   5.078829s
Function with splat arguments
                         20.345k (± 9.1%) i/s -    101.088k in   5.019366s

Comparison:
Function with single Array argument: 3178624860.2 i/s
Function with splat arguments:    20344.5 i/s - 156239.84x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   317.525M i/100ms
Sequential Assignment
                       310.337M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.185B (± 2.4%) i/s -     16.194B in   5.088195s
Sequential Assignment
                          3.217B (± 1.1%) i/s -     16.138B in   5.016986s

Comparison:
Sequential Assignment: 3217010628.8 i/s
 Parallel Assignment: 3184579556.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   318.039M i/100ms
       attr_accessor   323.340M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.188B (± 2.4%) i/s -     16.220B in   5.091647s
       attr_accessor      3.208B (± 1.9%) i/s -     16.167B in   5.042147s

Comparison:
       attr_accessor: 3207655873.5 i/s
   getter_and_setter: 3187507427.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     9.495k i/100ms
         respond_to?   322.368M i/100ms
Calculating -------------------------------------
      begin...rescue    102.355k (± 7.4%) i/s -    512.730k in   5.046077s
         respond_to?      3.199B (± 2.7%) i/s -     16.118B in   5.042898s

Comparison:
         respond_to?: 3198859120.0 i/s
      begin...rescue:   102355.0 i/s - 31252.60x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   322.411M i/100ms
             &method   307.233M i/100ms
Calculating -------------------------------------
              normal      3.177B (± 2.0%) i/s -     16.121B in   5.076818s
             &method      3.199B (± 1.9%) i/s -     16.283B in   5.092085s

Comparison:
             &method: 3199039470.1 i/s
              normal: 3176656071.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       133.000  i/100ms
       define_method   149.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          4.501k (±46.7%) i/s -      8.512k in   5.096068s
       define_method     12.057k (±40.8%) i/s -     10.728k in   5.034560s

Comparison:
       define_method:    12056.7 i/s
module_eval with string:     4501.4 i/s - 2.68x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   127.562k i/100ms
       Kernel#format   104.856k i/100ms
            String#%    20.085k i/100ms
Calculating -------------------------------------
         Float#round      1.282M (± 2.0%) i/s -      6.506M in   5.074975s
       Kernel#format      1.041M (± 1.7%) i/s -      5.243M in   5.038131s
            String#%    200.819k (± 8.8%) i/s -      1.004M in   5.054223s

Comparison:
         Float#round:  1282446.2 i/s
       Kernel#format:  1040920.9 i/s - 1.23x  (± 0.00) slower
            String#%:   200819.0 i/s - 6.39x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   316.004M i/100ms
          OpenStruct   317.623M i/100ms
Calculating -------------------------------------
                Hash      3.182B (± 2.5%) i/s -     16.116B in   5.068780s
          OpenStruct      3.215B (± 1.4%) i/s -     16.199B in   5.040047s

Comparison:
          OpenStruct: 3214640447.4 i/s
                Hash: 3181690937.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   319.026M i/100ms
          OpenStruct     4.112k i/100ms
Calculating -------------------------------------
                Hash      3.094B (± 6.6%) i/s -     15.632B in   5.078982s
          OpenStruct     41.048k (±23.9%) i/s -    193.264k in   5.055952s

Comparison:
                Hash: 3093529765.5 i/s
          OpenStruct:    41048.0 i/s - 75363.79x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   894.406k i/100ms
  ancestors.include?   218.196k i/100ms
Calculating -------------------------------------
  less than or equal      9.803M (± 3.0%) i/s -     49.192M in   5.022544s
  ancestors.include?      2.256M (± 6.8%) i/s -     11.346M in   5.061498s

Comparison:
  less than or equal:  9803349.0 i/s
  ancestors.include?:  2255913.3 i/s - 4.35x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     32.131  (± 3.1%) i/s -    161.000  in   5.014011s
         Kernel loop     32.201  (± 3.1%) i/s -    161.000  in   5.003544s

Comparison:
         Kernel loop:       32.2 i/s
          While Loop:       32.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   322.937M i/100ms
         Array#first   310.035M i/100ms
Calculating -------------------------------------
           Array#[0]      3.198B (± 2.0%) i/s -     16.147B in   5.051373s
         Array#first      3.212B (± 1.4%) i/s -     16.122B in   5.020760s

Comparison:
         Array#first: 3211725889.3 i/s
           Array#[0]: 3197932678.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   321.628M i/100ms
          Array#last   317.479M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.197B (± 2.2%) i/s -     16.081B in   5.032066s
          Array#last      3.217B (± 1.4%) i/s -     16.191B in   5.033595s

Comparison:
          Array#last: 3217317680.6 i/s
          Array#[-1]: 3197450507.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   906.865k i/100ms
Calculating -------------------------------------
                find     13.708  (± 0.0%) i/s -     69.000  in   5.039835s
             bsearch      9.072M (± 4.2%) i/s -     45.343M in   5.007611s

Comparison:
             bsearch:  9071765.4 i/s
                find:       13.7 i/s - 661782.22x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.212  (± 0.0%) i/s -      2.000  in   9.422060s
        Array#insert      1.398  (± 0.0%) i/s -      7.000  in   5.009030s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.2 i/s - 6.58x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   317.757M i/100ms
          Array#size   321.291M i/100ms
         Array#count   322.001M i/100ms
Calculating -------------------------------------
        Array#length      3.206B (± 1.9%) i/s -     16.206B in   5.057118s
          Array#size      3.214B (± 1.7%) i/s -     16.065B in   5.000090s
         Array#count      3.210B (± 1.9%) i/s -     16.100B in   5.017023s

Comparison:
          Array#size: 3213908483.4 i/s
         Array#count: 3210299278.4 i/s - same-ish: difference falls within error
        Array#length: 3205812318.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    36.356k i/100ms
        Array#sample     3.863M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    363.845k (± 2.9%) i/s -      1.818M in   5.000648s
        Array#sample     38.639M (± 1.7%) i/s -    193.173M in   5.000843s

Comparison:
        Array#sample: 38639405.4 i/s
 Array#shuffle.first:   363845.4 i/s - 106.20x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601     1.029k i/100ms
          Date.parse   524.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     17.601k (±24.5%) i/s -     82.320k in   5.024725s
          Date.parse      8.578k (±22.3%) i/s -     40.872k in   5.051995s

Comparison:
        Date.iso8601:    17601.1 i/s
          Date.parse:     8577.9 i/s - 2.05x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   323.366k i/100ms
           Array#map     1.685M i/100ms
Calculating -------------------------------------
   Array#each + push      3.731M (± 3.4%) i/s -     18.755M in   5.032769s
           Array#map     16.957M (± 8.9%) i/s -     84.242M in   5.014022s

Comparison:
           Array#map: 16957223.5 i/s
   Array#each + push:  3730940.3 i/s - 4.55x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    12.373M i/100ms
               #each    35.001M i/100ms
Calculating -------------------------------------
            For loop    123.762M (± 1.7%) i/s -    618.650M in   5.000176s
               #each    354.581M (± 0.5%) i/s -      1.785B in   5.034324s

Comparison:
               #each: 354581463.4 i/s
            For loop: 123762419.4 i/s - 2.87x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.177M i/100ms
     each_with_index     1.711M i/100ms
Calculating -------------------------------------
          While Loop     14.217M (± 0.8%) i/s -     71.769M in   5.048396s
     each_with_index     17.128M (± 1.0%) i/s -     87.249M in   5.094618s

Comparison:
     each_with_index: 17127558.0 i/s
          While Loop: 14217011.5 i/s - 1.20x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   309.153k i/100ms
      inject to_proc   310.545k i/100ms
        inject block   312.089k i/100ms
Calculating -------------------------------------
       inject symbol      3.119M (± 1.5%) i/s -     15.767M in   5.055740s
      inject to_proc      3.113M (± 2.2%) i/s -     15.838M in   5.090317s
        inject block      3.119M (± 1.6%) i/s -     15.604M in   5.005124s

Comparison:
       inject symbol:  3119379.5 i/s
        inject block:  3118535.2 i/s - same-ish: difference falls within error
      inject to_proc:  3113050.5 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    23.393k i/100ms
   Array#map.flatten    25.886k i/100ms
      Array#flat_map    58.852k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    262.564k (± 7.5%) i/s -      1.310M in   5.025009s
   Array#map.flatten    263.632k (± 6.8%) i/s -      1.320M in   5.037926s
      Array#flat_map    582.775k (± 4.0%) i/s -      2.943M in   5.058323s

Comparison:
      Array#flat_map:   582775.1 i/s
   Array#map.flatten:   263632.0 i/s - 2.21x  (± 0.00) slower
Array#map.flatten(1):   262564.1 i/s - 2.22x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   312.825k i/100ms
  Array#reverse_each     2.383M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.175M (± 5.3%) i/s -     16.267M in   5.144990s
  Array#reverse_each     23.843M (± 3.5%) i/s -    119.157M in   5.003345s

Comparison:
  Array#reverse_each: 23842639.1 i/s
  Array#reverse.each:  3174926.6 i/s - 7.51x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       961.192k i/100ms
   Enumerable#detect     4.603M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.458M (± 6.9%) i/s -    208.579M in  20.073345s
   Enumerable#detect     45.295M (± 4.2%) i/s -    906.859M in  20.059527s

Comparison:
   Enumerable#detect: 45295363.6 i/s
Enumerable#select.first: 10458007.5 i/s - 4.33x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       317.812k i/100ms
Enumerable#select.last
                       550.171k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.210M (± 3.5%) i/s -     16.208M in   5.055346s
Enumerable#select.last
                          5.535M (± 3.3%) i/s -     28.059M in   5.075417s

Comparison:
Enumerable#select.last:  5535013.0 i/s
Enumerable#reverse.detect:  3210138.0 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.942k i/100ms
  Enumerable#sort_by     1.375k i/100ms
     Enumerable#sort     3.762k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         37.693k (±17.4%) i/s -    176.520k in   5.067238s
  Enumerable#sort_by     22.177k (±59.5%) i/s -     79.750k in   5.015563s
     Enumerable#sort     51.161k (± 4.1%) i/s -    255.816k in   5.009403s

Comparison:
     Enumerable#sort:    51160.8 i/s
Enumerable#sort_by (Symbol#to_proc):    37693.0 i/s - 1.36x  (± 0.00) slower
  Enumerable#sort_by:    22177.3 i/s - 2.31x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   819.160k i/100ms
Enumerable#sort_by...first
                         8.690k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      8.232M (± 1.8%) i/s -     41.777M in   5.076876s
Enumerable#sort_by...first
                        102.152k (± 3.3%) i/s -    512.710k in   5.024758s

Comparison:
   Enumerable#min_by:  8231705.2 i/s
Enumerable#sort_by...first:   102152.4 i/s - 80.58x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   581.569k i/100ms
            Hash#dup   748.395k i/100ms
Calculating -------------------------------------
              Hash[]      7.728M (±11.7%) i/s -     38.384M in   5.059511s
            Hash#dup      7.711M (±10.4%) i/s -     38.168M in   5.017883s

Comparison:
              Hash[]:  7728011.8 i/s
            Hash#dup:  7710652.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   319.346M i/100ms
  Hash#fetch, symbol   322.910M i/100ms
     Hash#[], string    20.173M i/100ms
  Hash#fetch, string    20.184M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.227B (± 0.5%) i/s -     16.287B in   5.047181s
  Hash#fetch, symbol      3.212B (± 2.3%) i/s -     16.146B in   5.030149s
     Hash#[], string    199.522M (± 2.6%) i/s -      1.009B in   5.058982s
  Hash#fetch, string    200.825M (± 2.0%) i/s -      1.009B in   5.027526s

Comparison:
     Hash#[], symbol: 3226966348.7 i/s
  Hash#fetch, symbol: 3211626232.5 i/s - same-ish: difference falls within error
  Hash#fetch, string: 200825096.8 i/s - 16.07x  (± 0.00) slower
     Hash#[], string: 199521819.6 i/s - 16.17x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    90.852M i/100ms
             Hash#[]    91.422M i/100ms
          Hash#[] ||    91.645M i/100ms
          Hash#[] &&    91.568M i/100ms
          Hash#fetch    91.269M i/100ms
 Hash#fetch fallback    92.293M i/100ms
Calculating -------------------------------------
            Hash#dig    922.364M (± 0.5%) i/s -      4.633B in   5.023564s
             Hash#[]    919.924M (± 1.5%) i/s -      4.663B in   5.069671s
          Hash#[] ||    915.128M (± 2.3%) i/s -      4.582B in   5.009920s
          Hash#[] &&    918.672M (± 1.7%) i/s -      4.670B in   5.084959s
          Hash#fetch    921.826M (± 0.9%) i/s -      4.655B in   5.049890s
 Hash#fetch fallback    917.690M (± 1.9%) i/s -      4.615B in   5.030525s

Comparison:
            Hash#dig: 922364167.9 i/s
          Hash#fetch: 921825777.4 i/s - same-ish: difference falls within error
             Hash#[]: 919924010.8 i/s - same-ish: difference falls within error
          Hash#[] &&: 918672042.0 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 917690345.3 i/s - same-ish: difference falls within error
          Hash#[] ||: 915128418.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   306.605M i/100ms
  Hash#fetch + block   319.298M i/100ms
    Hash#fetch + arg   322.275M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.214B (± 1.6%) i/s -     16.250B in   5.058203s
  Hash#fetch + block      3.225B (± 0.3%) i/s -     16.284B in   5.048997s
    Hash#fetch + arg      3.208B (± 2.1%) i/s -     16.114B in   5.025750s

Comparison:
  Hash#fetch + block: 3225275876.4 i/s
  Hash#fetch + const: 3213520053.4 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 3207743433.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    20.648k i/100ms
         sort + to_h     6.383k i/100ms
Calculating -------------------------------------
      sort_by + to_h    475.618k (±10.8%) i/s -      2.354M in   5.022329s
         sort + to_h    202.479k (±10.4%) i/s -    995.748k in   5.004420s

Comparison:
      sort_by + to_h:   475617.8 i/s
         sort + to_h:   202479.3 i/s - 2.35x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   215.076k i/100ms
       Hash#each_key   224.151k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.212M (± 9.6%) i/s -     10.969M in   5.062070s
       Hash#each_key      2.367M (± 2.2%) i/s -     11.880M in   5.020676s

Comparison:
       Hash#each_key:  2367375.7 i/s
      Hash#keys.each:  2212140.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   297.000  i/100ms
           Hash#key?     3.573M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      3.440k (±15.4%) i/s -     16.929k in   5.077321s
           Hash#key?     35.837M (± 1.9%) i/s -    182.211M in   5.086385s

Comparison:
           Hash#key?: 35836779.8 i/s
  Hash#keys.include?:     3440.4 i/s - 10416.33x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    51.973k i/100ms
            Hash#[]=    59.124k i/100ms
Calculating -------------------------------------
         Hash#merge!    612.804k (± 8.1%) i/s -      3.066M in   5.051812s
            Hash#[]=    599.745k (± 7.5%) i/s -      3.015M in   5.062282s

Comparison:
         Hash#merge!:   612803.5 i/s
            Hash#[]=:   599744.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        38.468k i/100ms
      Hash#merge({})    20.514k i/100ms
 Hash#dup#merge!({})    33.437k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        387.986k (±10.8%) i/s -      1.923M in   5.028323s
      Hash#merge({})    205.163k (± 8.7%) i/s -      1.026M in   5.051474s
 Hash#dup#merge!({})    320.293k (± 7.6%) i/s -      1.605M in   5.048969s

Comparison:
{}#merge!(Hash) do end:   387985.7 i/s
 Hash#dup#merge!({}):   320293.0 i/s - 1.21x  (± 0.00) slower
      Hash#merge({}):   205163.5 i/s - 1.89x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   314.131M i/100ms
          Hash#merge   320.368M i/100ms
Calculating -------------------------------------
        Hash#**other      3.204B (± 1.9%) i/s -     16.021B in   5.001922s
          Hash#merge      3.217B (± 2.0%) i/s -     16.339B in   5.080856s

Comparison:
          Hash#merge: 3217175650.2 i/s
        Hash#**other: 3204149846.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.044k i/100ms
         Hash#merge!    61.538k i/100ms
Calculating -------------------------------------
          Hash#merge     12.712k (±11.9%) i/s -     62.640k in   5.013310s
         Hash#merge!    638.459k (± 2.7%) i/s -      3.200M in   5.015766s

Comparison:
         Hash#merge!:   638459.3 i/s
          Hash#merge:    12712.5 i/s - 50.22x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.479M i/100ms
Array#each               1.371M i/100ms
Array#each_w/_object     1.439M i/100ms
Hash#select-include      2.378M i/100ms
Calculating -------------------------------------
Hash#native-slice        16.901M (± 6.5%) i/s -     84.330M in   5.018721s
Array#each               14.706M (± 5.9%) i/s -     74.021M in   5.058068s
Array#each_w/_object     14.595M (± 6.5%) i/s -     73.385M in   5.057610s
Hash#select-include      24.002M (± 5.8%) i/s -    121.295M in   5.077381s

Comparison:
Hash#select-include : 24002349.2 i/s
Hash#native-slice   : 16901339.2 i/s - 1.42x  (± 0.00) slower
Array#each          : 14705898.4 i/s - 1.63x  (± 0.00) slower
Array#each_w/_object: 14594787.8 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   265.000  i/100ms
         Hash#value?   997.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      3.318k (±10.7%) i/s -     16.430k in   5.035294s
         Hash#value?      9.976k (± 0.7%) i/s -     50.847k in   5.097361s

Comparison:
         Hash#value?:     9975.7 i/s
Hash#values.include?:     3317.7 i/s - 3.01x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   322.456M i/100ms
                send   314.117M i/100ms
      method_missing   304.866M i/100ms
Calculating -------------------------------------
                call      3.180B (± 3.0%) i/s -     16.123B in   5.075287s
                send      3.214B (± 1.8%) i/s -     16.334B in   5.083885s
      method_missing      3.210B (± 2.1%) i/s -     16.158B in   5.035187s

Comparison:
                send: 3214033127.1 i/s
      method_missing: 3210444316.4 i/s - same-ish: difference falls within error
                call: 3179835878.6 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    62.994k i/100ms
      Symbol#to_proc    71.801k i/100ms
Calculating -------------------------------------
               Block    762.710k (±13.7%) i/s -      3.717M in   5.005921s
      Symbol#to_proc    760.417k (±11.8%) i/s -      3.805M in   5.095227s

Comparison:
               Block:   762709.9 i/s
      Symbol#to_proc:   760417.0 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   319.631M i/100ms
       block + yield   318.973M i/100ms
        unused block   322.248M i/100ms
               yield   313.163M i/100ms
Calculating -------------------------------------
          block.call      3.211B (± 2.1%) i/s -     16.301B in   5.078914s
       block + yield      3.216B (± 1.5%) i/s -     16.268B in   5.059635s
        unused block      3.203B (± 2.0%) i/s -     16.112B in   5.032854s
               yield      3.198B (± 2.6%) i/s -     16.284B in   5.095521s

Comparison:
       block + yield: 3215960258.2 i/s
          block.call: 3211103251.1 i/s - same-ish: difference falls within error
        unused block: 3202880254.8 i/s - same-ish: difference falls within error
               yield: 3198141442.8 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     2.923k i/100ms
      range#include?   168.000  i/100ms
       range#member?   255.000  i/100ms
       plain compare     7.802k i/100ms
Calculating -------------------------------------
        range#cover?     71.823k (±31.8%) i/s -    301.069k in   5.085279s
      range#include?      3.284k (±42.4%) i/s -     12.600k in   5.054726s
       range#member?      2.772k (±24.1%) i/s -     12.750k in   5.008361s
       plain compare     92.732k (±25.7%) i/s -    421.308k in   5.019242s

Comparison:
       plain compare:    92732.0 i/s
        range#cover?:    71822.8 i/s - same-ish: difference falls within error
      range#include?:     3283.8 i/s - 28.24x  (± 0.00) slower
       range#member?:     2771.8 i/s - 33.46x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    13.065M i/100ms
           String#=~    13.311M i/100ms
          Regexp#===    13.269M i/100ms
        String#match    10.534M i/100ms
Calculating -------------------------------------
       String#match?    135.637M (± 1.5%) i/s -    679.400M in   5.010172s
           String#=~    133.757M (± 0.9%) i/s -    678.860M in   5.075730s
          Regexp#===    133.157M (± 3.1%) i/s -    676.728M in   5.088304s
        String#match    107.570M (± 1.1%) i/s -    547.781M in   5.092909s

Comparison:
       String#match?: 135637030.8 i/s
           String#=~: 133756512.1 i/s - same-ish: difference falls within error
          Regexp#===: 133156937.7 i/s - same-ish: difference falls within error
        String#match: 107570319.5 i/s - 1.26x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.188M i/100ms
      String#casecmp     4.357M i/100ms
Calculating -------------------------------------
String#downcase + ==     30.217M (± 8.1%) i/s -    150.946M in   5.038752s
      String#casecmp     46.720M (± 3.9%) i/s -    235.259M in   5.043461s

Comparison:
      String#casecmp: 46720068.9 i/s
String#downcase + ==: 30217091.1 i/s - 1.55x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     9.985M i/100ms
       String#concat     9.727M i/100ms
       String#append    10.392M i/100ms
         "foo" "bar"   323.030M i/100ms
  "#{'foo'}#{'bar'}"    10.455M i/100ms
Calculating -------------------------------------
            String#+    103.400M (± 6.5%) i/s -    519.236M in   5.053782s
       String#concat    103.086M (± 6.1%) i/s -    515.551M in   5.028138s
       String#append    103.237M (± 5.9%) i/s -    519.624M in   5.057463s
         "foo" "bar"      3.228B (± 0.3%) i/s -     16.151B in   5.003551s
  "#{'foo'}#{'bar'}"    103.363M (± 5.9%) i/s -    522.758M in   5.082208s

Comparison:
         "foo" "bar": 3228039276.0 i/s
            String#+: 103400140.4 i/s - 31.22x  (± 0.00) slower
  "#{'foo'}#{'bar'}": 103362974.8 i/s - 31.23x  (± 0.00) slower
       String#append: 103237157.6 i/s - 31.27x  (± 0.00) slower
       String#concat: 103085517.0 i/s - 31.31x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   322.159M i/100ms
          String#dup   309.815M i/100ms
Calculating -------------------------------------
           String#+@      3.197B (± 2.0%) i/s -     16.108B in   5.041094s
          String#dup      3.222B (± 1.0%) i/s -     16.110B in   5.000141s

Comparison:
          String#dup: 3222332964.8 i/s
           String#+@: 3196657096.3 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.278M i/100ms
       String#match?     1.636M i/100ms
    String#end_with?    10.776M i/100ms
Calculating -------------------------------------
           String#=~     13.719M (± 3.5%) i/s -     68.992M in   5.035264s
       String#match?     16.403M (± 3.0%) i/s -     83.417M in   5.090540s
    String#end_with?    106.836M (± 2.5%) i/s -    538.805M in   5.046647s

Comparison:
    String#end_with?: 106835762.8 i/s
       String#match?: 16402639.6 i/s - 6.51x  (± 0.00) slower
           String#=~: 13719297.1 i/s - 7.79x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   756.353k i/100ms
          String#sub   904.349k i/100ms
String#dup["string"]=
                        10.085M i/100ms
Calculating -------------------------------------
         String#gsub      8.608M (± 8.7%) i/s -     43.112M in   5.061134s
          String#sub      9.853M (± 9.8%) i/s -     48.835M in   5.017904s
String#dup["string"]=
                        100.048M (± 3.6%) i/s -    504.267M in   5.048448s

Comparison:
String#dup["string"]=: 100048412.0 i/s
          String#sub:  9852870.2 i/s - 10.15x  (± 0.00) slower
         String#gsub:  8608240.2 i/s - 11.62x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   364.827k i/100ms
           String#tr   161.625k i/100ms
Calculating -------------------------------------
         String#gsub      4.157M (± 7.9%) i/s -     20.795M in   5.041221s
           String#tr      1.655M (± 4.2%) i/s -      8.405M in   5.088903s

Comparison:
         String#gsub:  4157300.0 i/s
           String#tr:  1654634.1 i/s - 2.51x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   321.914M i/100ms
         With Freeze   321.317M i/100ms
Calculating -------------------------------------
      Without Freeze      3.208B (± 2.0%) i/s -     16.096B in   5.019550s
         With Freeze      3.227B (± 0.4%) i/s -     16.387B in   5.078181s

Comparison:
         With Freeze: 3227017600.8 i/s
      Without Freeze: 3208025037.1 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     7.590k i/100ms
      String#squeeze    71.292k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    152.443k (±11.6%) i/s -    751.410k in   5.017405s
      String#squeeze    703.150k (± 5.2%) i/s -      3.565M in   5.084881s

Comparison:
      String#squeeze:   703149.5 i/s
 String#gsub/regex+/:   152442.9 i/s - 4.61x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     3.607M i/100ms
       String#match?     6.405M i/100ms
  String#start_with?    12.927M i/100ms
Calculating -------------------------------------
           String#=~     45.174M (± 4.3%) i/s -    227.247M in   5.040606s
       String#match?     64.033M (± 2.3%) i/s -    320.252M in   5.004269s
  String#start_with?    126.734M (± 4.7%) i/s -    633.446M in   5.011635s

Comparison:
  String#start_with?: 126734395.3 i/s
       String#match?: 64032767.6 i/s - 1.98x  (± 0.00) slower
           String#=~: 45173580.9 i/s - 2.81x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   175.713k i/100ms
    String#[0, n] ==   269.902k i/100ms
   String#[RANGE] ==   355.186k i/100ms
   String#[0...n] ==   247.282k i/100ms
Calculating -------------------------------------
  String#start_with?      6.206M (± 3.4%) i/s -     31.101M in   5.019267s
    String#[0, n] ==      2.738M (± 6.5%) i/s -     13.765M in   5.056715s
   String#[RANGE] ==      3.754M (± 6.1%) i/s -     18.825M in   5.041334s
   String#[0...n] ==      2.621M (± 7.8%) i/s -     13.106M in   5.042303s

Comparison:
  String#start_with?:  6206020.1 i/s
   String#[RANGE] ==:  3753531.7 i/s - 1.65x  (± 0.00) slower
    String#[0, n] ==:  2738194.3 i/s - 2.27x  (± 0.00) slower
   String#[0...n] ==:  2620930.3 i/s - 2.37x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    10.046M i/100ms
 String#sub!'string'   955.821k i/100ms
String#gsub!'string'   888.086k i/100ms
  String#[/regexp/]=     2.622M i/100ms
 String#sub!/regexp/     1.356M i/100ms
String#gsub!/regexp/   855.753k i/100ms
Calculating -------------------------------------
  String#['string']=    100.413M (± 2.1%) i/s -    502.282M in   5.004637s
 String#sub!'string'     10.153M (±16.2%) i/s -     47.791M in   5.071484s
String#gsub!'string'      9.061M (± 8.9%) i/s -     45.292M in   5.048261s
  String#[/regexp/]=     26.853M (± 4.0%) i/s -    136.322M in   5.085424s
 String#sub!/regexp/     13.628M (±10.4%) i/s -     67.781M in   5.037903s
String#gsub!/regexp/      8.521M (± 8.7%) i/s -     42.788M in   5.071171s

Comparison:
  String#['string']=: 100412801.8 i/s
  String#[/regexp/]=: 26852928.8 i/s - 3.74x  (± 0.00) slower
 String#sub!/regexp/: 13628238.5 i/s - 7.37x  (± 0.00) slower
 String#sub!'string': 10152700.9 i/s - 9.89x  (± 0.00) slower
String#gsub!'string':  9061105.5 i/s - 11.08x  (± 0.00) slower
String#gsub!/regexp/:  8521397.0 i/s - 11.78x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     2.177M i/100ms
        String#chomp     5.702M i/100ms
String#delete_suffix    14.266M i/100ms
Calculating -------------------------------------
          String#sub     29.390M (± 5.5%) i/s -    148.010M in   5.053207s
        String#chomp     56.322M (± 2.5%) i/s -    285.104M in   5.065562s
String#delete_suffix    139.296M (± 8.3%) i/s -    699.013M in   5.060814s

Comparison:
String#delete_suffix: 139295840.8 i/s
        String#chomp: 56322373.6 i/s - 2.47x  (± 0.00) slower
          String#sub: 29390266.5 i/s - 4.74x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   322.700M i/100ms
          String#sub    13.522M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.200B (± 1.8%) i/s -     16.135B in   5.043240s
          String#sub    136.954M (± 1.9%) i/s -    689.627M in   5.037338s

Comparison:
String#delete_prefix: 3200361159.1 i/s
          String#sub: 136953560.1 i/s - 23.37x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.472M i/100ms
    String#unpack[0]     1.767M i/100ms
Calculating -------------------------------------
      String#unpack1     17.771M (± 3.1%) i/s -     89.773M in   5.056620s
    String#unpack[0]     17.629M (± 3.0%) i/s -     88.348M in   5.016171s

Comparison:
      String#unpack1: 17771306.1 i/s
    String#unpack[0]: 17628974.9 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.1.0-dev-6d71a291, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    37.699k i/100ms
          Time.parse   247.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    456.246k (±24.8%) i/s -      2.111M in   5.015421s
          Time.parse      5.617k (±29.6%) i/s -     25.688k in   5.025485s

Comparison:
        Time.iso8601:   456245.5 i/s
          Time.parse:     5617.0 i/s - 81.23x  (± 0.00) slower

