$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       318.924M i/100ms
Function with splat arguments
                         1.907k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.176B (± 3.5%) i/s -     15.946B in   5.027394s
Function with splat arguments
                         20.591k (± 9.2%) i/s -    102.978k in   5.054960s

Comparison:
Function with single Array argument: 3176047610.5 i/s
Function with splat arguments:    20591.0 i/s - 154244.63x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   316.609M i/100ms
Sequential Assignment
                       319.173M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.197B (± 2.4%) i/s -     16.147B in   5.054400s
Sequential Assignment
                          3.215B (± 2.0%) i/s -     16.278B in   5.065545s

Comparison:
Sequential Assignment: 3214882703.2 i/s
 Parallel Assignment: 3196608054.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   317.749M i/100ms
       attr_accessor   312.964M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.193B (± 2.6%) i/s -     16.205B in   5.078187s
       attr_accessor      3.220B (± 1.2%) i/s -     16.274B in   5.055536s

Comparison:
       attr_accessor: 3219525034.5 i/s
   getter_and_setter: 3193455763.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    10.763k i/100ms
         respond_to?   321.195M i/100ms
Calculating -------------------------------------
      begin...rescue    104.976k (± 3.6%) i/s -    527.387k in   5.030902s
         respond_to?      3.216B (± 1.6%) i/s -     16.381B in   5.094957s

Comparison:
         respond_to?: 3216005887.1 i/s
      begin...rescue:   104975.5 i/s - 30635.77x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   320.210M i/100ms
             &method   318.573M i/100ms
Calculating -------------------------------------
              normal      3.206B (± 1.6%) i/s -     16.331B in   5.094802s
             &method      3.206B (± 2.1%) i/s -     16.247B in   5.069840s

Comparison:
             &method: 3206237941.7 i/s
              normal: 3206192402.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       131.000  i/100ms
       define_method   250.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          4.311k (±46.9%) i/s -      7.860k in   5.012437s
       define_method     11.189k (±48.3%) i/s -     11.500k in   5.007588s

Comparison:
       define_method:    11188.8 i/s
module_eval with string:     4310.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   127.526k i/100ms
       Kernel#format   105.807k i/100ms
            String#%    20.654k i/100ms
Calculating -------------------------------------
         Float#round      1.275M (± 4.5%) i/s -      6.376M in   5.014153s
       Kernel#format      1.058M (± 4.7%) i/s -      5.290M in   5.011748s
            String#%    213.620k (± 9.5%) i/s -      1.074M in   5.083811s

Comparison:
         Float#round:  1274689.4 i/s
       Kernel#format:  1058342.6 i/s - 1.20x  (± 0.00) slower
            String#%:   213619.8 i/s - 5.97x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   319.289M i/100ms
          OpenStruct   313.438M i/100ms
Calculating -------------------------------------
                Hash      3.211B (± 1.3%) i/s -     16.284B in   5.071873s
          OpenStruct      3.203B (± 2.4%) i/s -     16.299B in   5.091350s

Comparison:
                Hash: 3211162644.0 i/s
          OpenStruct: 3203245669.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   319.805M i/100ms
          OpenStruct     3.767k i/100ms
Calculating -------------------------------------
                Hash      3.063B (±10.3%) i/s -     15.351B in   5.097000s
          OpenStruct     45.210k (±19.8%) i/s -    214.719k in   5.017294s

Comparison:
                Hash: 3063168659.0 i/s
          OpenStruct:    45210.0 i/s - 67754.30x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   929.523k i/100ms
  ancestors.include?   232.688k i/100ms
Calculating -------------------------------------
  less than or equal      9.671M (± 4.3%) i/s -     48.335M in   5.006912s
  ancestors.include?      2.299M (± 7.6%) i/s -     11.634M in   5.100129s

Comparison:
  less than or equal:  9670816.2 i/s
  ancestors.include?:  2298738.7 i/s - 4.21x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     32.065  (± 3.1%) i/s -    161.000  in   5.029904s
         Kernel loop     32.253  (± 0.0%) i/s -    162.000  in   5.023107s

Comparison:
         Kernel loop:       32.3 i/s
          While Loop:       32.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   313.826M i/100ms
         Array#first   320.285M i/100ms
Calculating -------------------------------------
           Array#[0]      3.205B (± 2.0%) i/s -     16.319B in   5.094034s
         Array#first      3.209B (± 2.2%) i/s -     16.335B in   5.092634s

Comparison:
         Array#first: 3209153809.4 i/s
           Array#[0]: 3204988284.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   314.180M i/100ms
          Array#last   320.624M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.205B (± 2.5%) i/s -     16.023B in   5.002603s
          Array#last      3.211B (± 2.0%) i/s -     16.352B in   5.094023s

Comparison:
          Array#last: 3211356917.5 i/s
          Array#[-1]: 3205193700.4 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   907.404k i/100ms
Calculating -------------------------------------
                find     13.759  (± 0.0%) i/s -     69.000  in   5.016682s
             bsearch      9.158M (± 2.2%) i/s -     46.278M in   5.055594s

Comparison:
             bsearch:  9158268.9 i/s
                find:       13.8 i/s - 665618.03x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.255  (± 0.0%) i/s -      2.000  in   7.842937s
        Array#insert      1.397  (± 0.0%) i/s -      7.000  in   5.011362s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.3 i/s - 5.48x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   316.353M i/100ms
          Array#size   312.205M i/100ms
         Array#count   323.290M i/100ms
Calculating -------------------------------------
        Array#length      3.204B (± 2.5%) i/s -     16.134B in   5.039521s
          Array#size      3.217B (± 1.8%) i/s -     16.235B in   5.048569s
         Array#count      3.198B (± 2.8%) i/s -     16.164B in   5.059399s

Comparison:
          Array#size: 3216849527.0 i/s
        Array#length: 3203633781.5 i/s - same-ish: difference falls within error
         Array#count: 3197614307.9 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    34.439k i/100ms
        Array#sample     3.842M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    359.801k (± 2.8%) i/s -      1.825M in   5.077322s
        Array#sample     31.288M (± 1.5%) i/s -    157.524M in   5.035774s

Comparison:
        Array#sample: 31288470.7 i/s
 Array#shuffle.first:   359801.0 i/s - 86.96x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601     1.006k i/100ms
          Date.parse   669.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     18.635k (±29.1%) i/s -     85.510k in   5.009246s
          Date.parse      8.974k (±19.0%) i/s -     43.485k in   5.060038s

Comparison:
        Date.iso8601:    18634.6 i/s
          Date.parse:     8973.5 i/s - 2.08x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   334.008k i/100ms
           Array#map     1.673M i/100ms
Calculating -------------------------------------
   Array#each + push      3.714M (± 3.8%) i/s -     18.704M in   5.044183s
           Array#map     16.921M (± 8.7%) i/s -     85.321M in   5.093625s

Comparison:
           Array#map: 16921122.3 i/s
   Array#each + push:  3713618.0 i/s - 4.56x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    12.334M i/100ms
               #each    35.592M i/100ms
Calculating -------------------------------------
            For loop    123.815M (± 1.6%) i/s -    629.036M in   5.081898s
               #each    351.490M (± 1.6%) i/s -      1.780B in   5.064298s

Comparison:
               #each: 351490011.7 i/s
            For loop: 123815467.5 i/s - 2.84x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.417M i/100ms
     each_with_index     1.949M i/100ms
Calculating -------------------------------------
          While Loop     14.254M (± 3.1%) i/s -     72.292M in   5.076435s
     each_with_index     17.654M (± 2.0%) i/s -     89.648M in   5.079978s

Comparison:
     each_with_index: 17653997.3 i/s
          While Loop: 14253944.3 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   296.612k i/100ms
      inject to_proc   313.087k i/100ms
        inject block   313.112k i/100ms
Calculating -------------------------------------
       inject symbol      3.118M (± 1.6%) i/s -     15.720M in   5.043236s
      inject to_proc      3.110M (± 1.9%) i/s -     15.654M in   5.036097s
        inject block      3.112M (± 2.3%) i/s -     15.656M in   5.033905s

Comparison:
       inject symbol:  3117998.3 i/s
        inject block:  3111809.8 i/s - same-ish: difference falls within error
      inject to_proc:  3109575.9 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    25.073k i/100ms
   Array#map.flatten    25.805k i/100ms
      Array#flat_map    57.585k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    262.426k (± 7.3%) i/s -      1.304M in   5.001713s
   Array#map.flatten    262.958k (± 8.0%) i/s -      1.316M in   5.047483s
      Array#flat_map    572.677k (± 6.3%) i/s -      2.879M in   5.058409s

Comparison:
      Array#flat_map:   572676.5 i/s
   Array#map.flatten:   262958.2 i/s - 2.18x  (± 0.00) slower
Array#map.flatten(1):   262425.9 i/s - 2.18x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   313.544k i/100ms
  Array#reverse_each     2.361M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.207M (± 3.2%) i/s -     16.304M in   5.089369s
  Array#reverse_each     23.882M (± 3.3%) i/s -    120.403M in   5.046449s

Comparison:
  Array#reverse_each: 23881719.1 i/s
  Array#reverse.each:  3207247.5 i/s - 7.45x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                         1.041M i/100ms
   Enumerable#detect     4.531M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.497M (± 7.4%) i/s -    209.231M in  20.090294s
   Enumerable#detect     45.722M (± 3.5%) i/s -    915.213M in  20.047563s

Comparison:
   Enumerable#detect: 45721837.2 i/s
Enumerable#select.first: 10497158.2 i/s - 4.36x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       315.915k i/100ms
Enumerable#select.last
                       515.479k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.194M (± 3.2%) i/s -     16.112M in   5.049468s
Enumerable#select.last
                          5.345M (± 6.1%) i/s -     26.805M in   5.041258s

Comparison:
Enumerable#select.last:  5344984.2 i/s
Enumerable#reverse.detect:  3194341.8 i/s - 1.67x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.942k i/100ms
  Enumerable#sort_by     2.597k i/100ms
     Enumerable#sort     4.523k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         36.860k (±19.0%) i/s -    177.390k in   5.075170s
  Enumerable#sort_by     36.477k (±23.0%) i/s -    166.208k in   4.999013s
     Enumerable#sort     43.888k (±25.2%) i/s -    208.058k in   5.084346s

Comparison:
     Enumerable#sort:    43888.5 i/s
Enumerable#sort_by (Symbol#to_proc):    36859.6 i/s - same-ish: difference falls within error
  Enumerable#sort_by:    36477.5 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   827.021k i/100ms
Enumerable#sort_by...first
                         9.306k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      8.273M (± 0.7%) i/s -     42.178M in   5.098248s
Enumerable#sort_by...first
                        101.149k (± 5.6%) i/s -    511.830k in   5.083154s

Comparison:
   Enumerable#min_by:  8273456.5 i/s
Enumerable#sort_by...first:   101149.2 i/s - 81.79x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   840.862k i/100ms
            Hash#dup     1.040M i/100ms
Calculating -------------------------------------
              Hash[]     11.269M (± 8.0%) i/s -     56.338M in   5.041749s
            Hash#dup     10.542M (± 7.5%) i/s -     53.017M in   5.063559s

Comparison:
              Hash[]: 11269376.0 i/s
            Hash#dup: 10542226.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   317.390M i/100ms
  Hash#fetch, symbol   322.183M i/100ms
     Hash#[], string    18.867M i/100ms
  Hash#fetch, string    20.197M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.215B (± 1.7%) i/s -     16.187B in   5.036580s
  Hash#fetch, symbol      3.222B (± 1.2%) i/s -     16.109B in   5.001205s
     Hash#[], string    188.245M (± 2.3%) i/s -    943.353M in   5.014263s
  Hash#fetch, string    199.762M (± 3.7%) i/s -      1.010B in   5.063875s

Comparison:
  Hash#fetch, symbol: 3221568032.4 i/s
     Hash#[], symbol: 3214913464.1 i/s - same-ish: difference falls within error
  Hash#fetch, string: 199762068.7 i/s - 16.13x  (± 0.00) slower
     Hash#[], string: 188244540.9 i/s - 17.11x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    92.129M i/100ms
             Hash#[]    91.763M i/100ms
          Hash#[] ||    91.617M i/100ms
          Hash#[] &&    91.732M i/100ms
          Hash#fetch    91.078M i/100ms
 Hash#fetch fallback    92.442M i/100ms
Calculating -------------------------------------
            Hash#dig    921.233M (± 1.1%) i/s -      4.606B in   5.000936s
             Hash#[]    919.549M (± 1.5%) i/s -      4.680B in   5.090523s
          Hash#[] ||    912.863M (± 2.9%) i/s -      4.581B in   5.022894s
          Hash#[] &&    918.528M (± 1.7%) i/s -      4.678B in   5.094784s
          Hash#fetch    921.479M (± 1.1%) i/s -      4.645B in   5.041471s
 Hash#fetch fallback    918.453M (± 1.7%) i/s -      4.622B in   5.034072s

Comparison:
          Hash#fetch: 921479175.2 i/s
            Hash#dig: 921233018.9 i/s - same-ish: difference falls within error
             Hash#[]: 919549022.3 i/s - same-ish: difference falls within error
          Hash#[] &&: 918528252.6 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 918452625.1 i/s - same-ish: difference falls within error
          Hash#[] ||: 912863400.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   321.578M i/100ms
  Hash#fetch + block   322.011M i/100ms
    Hash#fetch + arg   322.784M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.214B (± 1.7%) i/s -     16.079B in   5.004090s
  Hash#fetch + block      3.229B (± 0.2%) i/s -     16.423B in   5.085435s
    Hash#fetch + arg      3.221B (± 1.4%) i/s -     16.139B in   5.011631s

Comparison:
  Hash#fetch + block: 3229348201.1 i/s
    Hash#fetch + arg: 3221019496.1 i/s - same-ish: difference falls within error
  Hash#fetch + const: 3214113841.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    33.962k i/100ms
         sort + to_h     8.630k i/100ms
Calculating -------------------------------------
      sort_by + to_h    386.771k (±17.6%) i/s -      1.868M in   5.037095s
         sort + to_h    189.102k (± 6.2%) i/s -    949.300k in   5.040212s

Comparison:
      sort_by + to_h:   386771.0 i/s
         sort + to_h:   189101.9 i/s - 2.05x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   220.779k i/100ms
       Hash#each_key   241.022k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.240M (±10.6%) i/s -     11.039M in   5.048785s
       Hash#each_key      2.372M (± 6.2%) i/s -     11.810M in   5.005434s

Comparison:
       Hash#each_key:  2371519.9 i/s
      Hash#keys.each:  2240268.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   341.000  i/100ms
           Hash#key?     3.806M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      5.740k (±16.0%) i/s -     27.621k in   5.030929s
           Hash#key?     38.400M (± 1.4%) i/s -    194.097M in   5.055612s

Comparison:
           Hash#key?: 38400228.4 i/s
  Hash#keys.include?:     5739.6 i/s - 6690.36x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    25.621k i/100ms
            Hash#[]=    33.553k i/100ms
Calculating -------------------------------------
         Hash#merge!    333.729k (± 6.8%) i/s -      1.665M in   5.027062s
            Hash#[]=    335.556k (± 4.0%) i/s -      1.678M in   5.007925s

Comparison:
            Hash#[]=:   335556.3 i/s
         Hash#merge!:   333728.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        35.699k i/100ms
      Hash#merge({})    22.904k i/100ms
 Hash#dup#merge!({})    32.824k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        389.724k (± 9.9%) i/s -      1.963M in   5.101038s
      Hash#merge({})    245.348k (± 8.3%) i/s -      1.237M in   5.088910s
 Hash#dup#merge!({})    326.307k (± 8.2%) i/s -      1.641M in   5.070697s

Comparison:
{}#merge!(Hash) do end:   389723.8 i/s
 Hash#dup#merge!({}):   326306.9 i/s - same-ish: difference falls within error
      Hash#merge({}):   245348.2 i/s - 1.59x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   317.833M i/100ms
          Hash#merge   321.840M i/100ms
Calculating -------------------------------------
        Hash#**other      3.207B (± 1.7%) i/s -     16.209B in   5.055629s
          Hash#merge      3.217B (± 1.6%) i/s -     16.092B in   5.003076s

Comparison:
          Hash#merge: 3217365622.3 i/s
        Hash#**other: 3207253828.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.437k i/100ms
         Hash#merge!    35.921k i/100ms
Calculating -------------------------------------
          Hash#merge     16.638k (± 5.7%) i/s -     83.346k in   5.026045s
         Hash#merge!    361.425k (± 4.9%) i/s -      1.832M in   5.082293s

Comparison:
         Hash#merge!:   361425.2 i/s
          Hash#merge:    16638.2 i/s - 21.72x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.687M i/100ms
Array#each               1.662M i/100ms
Array#each_w/_object     2.727M i/100ms
Hash#select-include      2.482M i/100ms
Calculating -------------------------------------
Hash#native-slice        18.244M (± 6.1%) i/s -     91.085M in   5.017506s
Array#each               16.428M (± 6.2%) i/s -     83.088M in   5.084893s
Array#each_w/_object     26.838M (± 6.3%) i/s -    133.619M in   5.004744s
Hash#select-include      24.107M (± 7.1%) i/s -    121.641M in   5.086162s

Comparison:
Array#each_w/_object: 26838381.9 i/s
Hash#select-include : 24107057.5 i/s - same-ish: difference falls within error
Hash#native-slice   : 18243605.1 i/s - 1.47x  (± 0.00) slower
Array#each          : 16427903.7 i/s - 1.63x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   485.000  i/100ms
         Hash#value?     2.348k i/100ms
Calculating -------------------------------------
Hash#values.include?      5.716k (±14.4%) i/s -     27.645k in   5.002104s
         Hash#value?     22.915k (± 3.1%) i/s -    115.052k in   5.026533s

Comparison:
         Hash#value?:    22915.3 i/s
Hash#values.include?:     5716.1 i/s - 4.01x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   322.124M i/100ms
                send   317.504M i/100ms
      method_missing   313.848M i/100ms
Calculating -------------------------------------
                call      3.209B (± 2.0%) i/s -     16.106B in   5.021638s
                send      3.198B (± 3.9%) i/s -     16.193B in   5.073264s
      method_missing      3.204B (± 2.2%) i/s -     16.320B in   5.096846s

Comparison:
                call: 3208808394.3 i/s
      method_missing: 3203599961.8 i/s - same-ish: difference falls within error
                send: 3197669867.6 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    65.615k i/100ms
      Symbol#to_proc    83.027k i/100ms
Calculating -------------------------------------
               Block    794.171k (±11.4%) i/s -      3.937M in   5.042301s
      Symbol#to_proc    783.116k (±11.9%) i/s -      3.902M in   5.057722s

Comparison:
               Block:   794171.1 i/s
      Symbol#to_proc:   783115.6 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   311.084M i/100ms
       block + yield   321.916M i/100ms
        unused block   322.219M i/100ms
               yield   322.397M i/100ms
Calculating -------------------------------------
          block.call      3.214B (± 2.0%) i/s -     16.176B in   5.036068s
       block + yield      3.220B (± 1.5%) i/s -     16.418B in   5.099415s
        unused block      3.200B (± 2.6%) i/s -     16.111B in   5.037701s
               yield      3.208B (± 2.5%) i/s -     16.120B in   5.028399s

Comparison:
       block + yield: 3220321301.5 i/s
          block.call: 3213594639.1 i/s - same-ish: difference falls within error
               yield: 3207914868.4 i/s - same-ish: difference falls within error
        unused block: 3200489860.5 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     4.833k i/100ms
      range#include?   181.000  i/100ms
       range#member?   202.000  i/100ms
       plain compare     8.191k i/100ms
Calculating -------------------------------------
        range#cover?     57.630k (±25.1%) i/s -    260.982k in   5.012041s
      range#include?      2.860k (±28.7%) i/s -     12.851k in   5.065200s
       range#member?      2.878k (±33.7%) i/s -     12.524k in   5.029485s
       plain compare     95.295k (±20.4%) i/s -    450.505k in   5.070790s

Comparison:
       plain compare:    95295.3 i/s
        range#cover?:    57629.5 i/s - 1.65x  (± 0.00) slower
       range#member?:     2878.0 i/s - 33.11x  (± 0.00) slower
      range#include?:     2860.1 i/s - 33.32x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    13.453M i/100ms
           String#=~    13.406M i/100ms
          Regexp#===    13.403M i/100ms
        String#match    10.668M i/100ms
Calculating -------------------------------------
       String#match?    136.120M (± 1.2%) i/s -    686.094M in   5.041096s
           String#=~    133.498M (± 1.5%) i/s -    670.291M in   5.022176s
          Regexp#===    131.478M (± 1.4%) i/s -    670.138M in   5.098063s
        String#match    107.098M (± 1.3%) i/s -    544.077M in   5.081095s

Comparison:
       String#match?: 136120108.3 i/s
           String#=~: 133498352.5 i/s - same-ish: difference falls within error
          Regexp#===: 131477839.0 i/s - 1.04x  (± 0.00) slower
        String#match: 107098288.6 i/s - 1.27x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.855M i/100ms
      String#casecmp     4.595M i/100ms
Calculating -------------------------------------
String#downcase + ==     30.127M (± 7.5%) i/s -    151.327M in   5.063992s
      String#casecmp     47.091M (± 4.2%) i/s -    238.950M in   5.083681s

Comparison:
      String#casecmp: 47091087.9 i/s
String#downcase + ==: 30126696.0 i/s - 1.56x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     9.248M i/100ms
       String#concat     8.842M i/100ms
       String#append     9.480M i/100ms
         "foo" "bar"   322.546M i/100ms
  "#{'foo'}#{'bar'}"   323.480M i/100ms
Calculating -------------------------------------
            String#+     93.053M (± 6.2%) i/s -    471.660M in   5.094772s
       String#concat     94.793M (± 3.5%) i/s -    477.456M in   5.043422s
       String#append     93.448M (± 7.2%) i/s -    464.526M in   5.004627s
         "foo" "bar"      3.208B (± 2.4%) i/s -     16.127B in   5.030367s
  "#{'foo'}#{'bar'}"      3.207B (± 2.5%) i/s -     16.174B in   5.046975s

Comparison:
         "foo" "bar": 3207951006.0 i/s
  "#{'foo'}#{'bar'}": 3206835266.0 i/s - same-ish: difference falls within error
       String#concat: 94793106.8 i/s - 33.84x  (± 0.00) slower
       String#append: 93448163.0 i/s - 34.33x  (± 0.00) slower
            String#+: 93053169.1 i/s - 34.47x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   322.281M i/100ms
          String#dup   323.031M i/100ms
Calculating -------------------------------------
           String#+@      3.212B (± 1.3%) i/s -     16.114B in   5.018294s
          String#dup      3.201B (± 2.6%) i/s -     16.152B in   5.048825s

Comparison:
           String#+@: 3211601229.5 i/s
          String#dup: 3201409831.9 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.334M i/100ms
       String#match?     1.656M i/100ms
    String#end_with?    10.771M i/100ms
Calculating -------------------------------------
           String#=~     13.999M (± 1.6%) i/s -     70.692M in   5.051284s
       String#match?     16.533M (± 1.8%) i/s -     82.816M in   5.010939s
    String#end_with?    107.128M (± 2.3%) i/s -    538.548M in   5.030285s

Comparison:
    String#end_with?: 107127574.8 i/s
       String#match?: 16532633.5 i/s - 6.48x  (± 0.00) slower
           String#=~: 13998695.3 i/s - 7.65x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   732.068k i/100ms
          String#sub   933.278k i/100ms
String#dup["string"]=
                        10.086M i/100ms
Calculating -------------------------------------
         String#gsub      8.507M (± 8.9%) i/s -     42.460M in   5.047985s
          String#sub      9.675M (±10.2%) i/s -     48.530M in   5.082355s
String#dup["string"]=
                        100.258M (± 1.5%) i/s -    504.277M in   5.031075s

Comparison:
String#dup["string"]=: 100258003.1 i/s
          String#sub:  9674514.9 i/s - 10.36x  (± 0.00) slower
         String#gsub:  8507407.3 i/s - 11.78x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   348.595k i/100ms
           String#tr   145.176k i/100ms
Calculating -------------------------------------
         String#gsub      3.890M (± 9.2%) i/s -     19.521M in   5.075392s
           String#tr      1.475M (± 2.6%) i/s -      7.404M in   5.024641s

Comparison:
         String#gsub:  3889591.6 i/s
           String#tr:  1474603.8 i/s - 2.64x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   314.343M i/100ms
         With Freeze   321.032M i/100ms
Calculating -------------------------------------
      Without Freeze      3.198B (± 2.4%) i/s -     16.031B in   5.016648s
         With Freeze      3.208B (± 2.2%) i/s -     16.373B in   5.106962s

Comparison:
         With Freeze: 3207624183.1 i/s
      Without Freeze: 3197569669.1 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     9.683k i/100ms
      String#squeeze    71.812k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    156.791k (± 9.2%) i/s -    784.323k in   5.056755s
      String#squeeze    718.780k (± 4.8%) i/s -      3.591M in   5.008158s

Comparison:
      String#squeeze:   718780.1 i/s
 String#gsub/regex+/:   156791.3 i/s - 4.58x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     4.322M i/100ms
       String#match?     6.265M i/100ms
  String#start_with?    12.925M i/100ms
Calculating -------------------------------------
           String#=~     44.877M (± 3.0%) i/s -    224.749M in   5.012976s
       String#match?     63.178M (± 1.7%) i/s -    319.517M in   5.058979s
  String#start_with?    128.304M (± 2.0%) i/s -    646.269M in   5.039131s

Comparison:
  String#start_with?: 128303848.9 i/s
       String#match?: 63178296.8 i/s - 2.03x  (± 0.00) slower
           String#=~: 44876788.3 i/s - 2.86x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    70.719k i/100ms
    String#[0, n] ==   308.896k i/100ms
   String#[RANGE] ==   354.185k i/100ms
   String#[0...n] ==   269.544k i/100ms
Calculating -------------------------------------
  String#start_with?      7.037M (± 4.2%) i/s -     35.147M in   5.009062s
    String#[0, n] ==      3.090M (± 2.8%) i/s -     15.445M in   5.003054s
   String#[RANGE] ==      3.568M (± 2.3%) i/s -     18.063M in   5.064628s
   String#[0...n] ==      2.663M (± 6.2%) i/s -     13.477M in   5.087126s

Comparison:
  String#start_with?:  7037375.8 i/s
   String#[RANGE] ==:  3568482.5 i/s - 1.97x  (± 0.00) slower
    String#[0, n] ==:  3089600.8 i/s - 2.28x  (± 0.00) slower
   String#[0...n] ==:  2663426.6 i/s - 2.64x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    10.001M i/100ms
 String#sub!'string'   966.073k i/100ms
String#gsub!'string'   866.936k i/100ms
  String#[/regexp/]=     2.755M i/100ms
 String#sub!/regexp/     1.380M i/100ms
String#gsub!/regexp/   767.938k i/100ms
Calculating -------------------------------------
  String#['string']=     99.724M (± 5.7%) i/s -    500.056M in   5.039736s
 String#sub!'string'     10.007M (±16.4%) i/s -     46.372M in   5.005910s
String#gsub!'string'      8.955M (± 9.1%) i/s -     45.081M in   5.091037s
  String#[/regexp/]=     26.309M (± 6.8%) i/s -    132.237M in   5.056886s
 String#sub!/regexp/     13.668M (±12.1%) i/s -     67.605M in   5.039126s
String#gsub!/regexp/      8.002M (± 9.1%) i/s -     39.933M in   5.047907s

Comparison:
  String#['string']=: 99724069.7 i/s
  String#[/regexp/]=: 26308773.2 i/s - 3.79x  (± 0.00) slower
 String#sub!/regexp/: 13668203.5 i/s - 7.30x  (± 0.00) slower
 String#sub!'string': 10006946.8 i/s - 9.97x  (± 0.00) slower
String#gsub!'string':  8955082.6 i/s - 11.14x  (± 0.00) slower
String#gsub!/regexp/:  8002324.8 i/s - 12.46x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     2.897M i/100ms
        String#chomp     5.599M i/100ms
String#delete_suffix    14.823M i/100ms
Calculating -------------------------------------
          String#sub     29.398M (± 4.4%) i/s -    147.766M in   5.036814s
        String#chomp     56.685M (± 2.1%) i/s -    285.526M in   5.039472s
String#delete_suffix    149.475M (± 9.2%) i/s -    755.987M in   5.108621s

Comparison:
String#delete_suffix: 149475302.2 i/s
        String#chomp: 56685422.9 i/s - 2.64x  (± 0.00) slower
          String#sub: 29398172.2 i/s - 5.08x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   318.943M i/100ms
          String#sub    13.662M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.200B (± 2.2%) i/s -     16.266B in   5.086495s
          String#sub    137.403M (± 1.9%) i/s -    696.739M in   5.072686s

Comparison:
String#delete_prefix: 3199544122.8 i/s
          String#sub: 137403470.0 i/s - 23.29x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.923M i/100ms
    String#unpack[0]     1.916M i/100ms
Calculating -------------------------------------
      String#unpack1     19.301M (± 2.9%) i/s -     98.057M in   5.084705s
    String#unpack[0]     19.477M (± 1.8%) i/s -     97.713M in   5.018666s

Comparison:
    String#unpack[0]: 19476850.9 i/s
      String#unpack1: 19301073.1 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.1.0-dev-7100f1cb, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    22.713k i/100ms
          Time.parse   329.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    539.906k (±17.4%) i/s -      2.567M in   5.031685s
          Time.parse      6.766k (±14.3%) i/s -     32.571k in   5.005741s

Comparison:
        Time.iso8601:   539906.3 i/s
          Time.parse:     6766.2 i/s - 79.80x  (± 0.00) slower

