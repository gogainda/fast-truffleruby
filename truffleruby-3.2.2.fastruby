$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       312.403M i/100ms
Function with splat arguments
                         1.925k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.195B (± 2.8%) i/s -     16.245B in   5.088156s
Function with splat arguments
                         19.998k (± 8.3%) i/s -    100.100k in   5.046110s

Comparison:
Function with single Array argument: 3195374388.7 i/s
Function with splat arguments:    19998.1 i/s - 159783.65x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   318.075M i/100ms
Sequential Assignment
                       320.675M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.204B (± 1.8%) i/s -     16.222B in   5.064499s
Sequential Assignment
                          3.200B (± 2.1%) i/s -     16.034B in   5.013469s

Comparison:
 Parallel Assignment: 3204137637.0 i/s
Sequential Assignment: 3199595389.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   319.652M i/100ms
       attr_accessor   320.452M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.183B (± 2.5%) i/s -     15.983B in   5.024243s
       attr_accessor      3.221B (± 1.0%) i/s -     16.343B in   5.074165s

Comparison:
       attr_accessor: 3221165637.9 i/s
   getter_and_setter: 3183127562.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    12.818k i/100ms
         respond_to?   323.183M i/100ms
Calculating -------------------------------------
      begin...rescue    100.789k (± 6.5%) i/s -    512.720k in   5.117560s
         respond_to?      3.221B (± 0.9%) i/s -     16.159B in   5.016988s

Comparison:
         respond_to?: 3221159007.8 i/s
      begin...rescue:   100789.3 i/s - 31959.34x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   317.162M i/100ms
             &method   314.456M i/100ms
Calculating -------------------------------------
              normal      3.202B (± 1.9%) i/s -     16.175B in   5.052814s
             &method      3.176B (± 3.0%) i/s -     16.037B in   5.053775s

Comparison:
              normal: 3202437896.2 i/s
             &method: 3176448024.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       161.000  i/100ms
       define_method   151.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          3.888k (±55.8%) i/s -      7.084k in   5.159320s
       define_method     12.243k (±38.6%) i/s -     12.382k in   5.218886s

Comparison:
       define_method:    12242.6 i/s
module_eval with string:     3887.6 i/s - 3.15x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   127.038k i/100ms
       Kernel#format   107.284k i/100ms
            String#%    20.208k i/100ms
Calculating -------------------------------------
         Float#round      1.292M (± 2.5%) i/s -      6.479M in   5.019147s
       Kernel#format      1.072M (± 1.9%) i/s -      5.364M in   5.003931s
            String#%    203.292k (± 8.5%) i/s -      1.010M in   5.022727s

Comparison:
         Float#round:  1291708.6 i/s
       Kernel#format:  1072404.9 i/s - 1.20x  (± 0.00) slower
            String#%:   203291.8 i/s - 6.35x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   316.763M i/100ms
          OpenStruct   314.947M i/100ms
Calculating -------------------------------------
                Hash      3.197B (± 2.5%) i/s -     16.155B in   5.057228s
          OpenStruct      3.210B (± 2.1%) i/s -     16.062B in   5.006422s

Comparison:
          OpenStruct: 3209781353.3 i/s
                Hash: 3196510408.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   311.812M i/100ms
          OpenStruct     3.466k i/100ms
Calculating -------------------------------------
                Hash      3.018B (±11.5%) i/s -     14.967B in   5.056386s
          OpenStruct     47.188k (±18.0%) i/s -    225.290k in   5.012744s

Comparison:
                Hash: 3018163199.7 i/s
          OpenStruct:    47187.6 i/s - 63960.96x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   905.350k i/100ms
  ancestors.include?   219.650k i/100ms
Calculating -------------------------------------
  less than or equal      9.727M (± 3.1%) i/s -     48.889M in   5.031060s
  ancestors.include?      2.301M (± 4.5%) i/s -     11.641M in   5.071013s

Comparison:
  less than or equal:  9727320.2 i/s
  ancestors.include?:  2300708.4 i/s - 4.23x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     32.096  (± 3.1%) i/s -    161.000  in   5.022894s
         Kernel loop     32.096  (± 3.1%) i/s -    161.000  in   5.023863s

Comparison:
          While Loop:       32.1 i/s
         Kernel loop:       32.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   320.270M i/100ms
         Array#first   312.274M i/100ms
Calculating -------------------------------------
           Array#[0]      3.211B (± 1.4%) i/s -     16.334B in   5.088597s
         Array#first      3.194B (± 2.8%) i/s -     16.238B in   5.087432s

Comparison:
           Array#[0]: 3210504890.2 i/s
         Array#first: 3194499394.9 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   319.000M i/100ms
          Array#last   318.993M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.205B (± 2.0%) i/s -     16.269B in   5.078024s
          Array#last      3.213B (± 1.9%) i/s -     16.269B in   5.065218s

Comparison:
          Array#last: 3213153599.5 i/s
          Array#[-1]: 3205230063.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   905.929k i/100ms
Calculating -------------------------------------
                find     13.721  (± 0.0%) i/s -     69.000  in   5.035780s
             bsearch      9.147M (± 2.3%) i/s -     46.202M in   5.053681s

Comparison:
             bsearch:  9147323.5 i/s
                find:       13.7 i/s - 666681.67x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.254  (± 0.0%) i/s -      2.000  in   7.867795s
        Array#insert      1.399  (± 0.0%) i/s -      7.000  in   5.002406s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.3 i/s - 5.50x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   318.289M i/100ms
          Array#size   320.333M i/100ms
         Array#count   313.405M i/100ms
Calculating -------------------------------------
        Array#length      3.214B (± 1.6%) i/s -     16.233B in   5.052079s
          Array#size      3.221B (± 0.8%) i/s -     16.337B in   5.071801s
         Array#count      3.219B (± 1.5%) i/s -     16.297B in   5.063590s

Comparison:
          Array#size: 3221362480.1 i/s
         Array#count: 3219274848.3 i/s - same-ish: difference falls within error
        Array#length: 3213965530.9 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    34.565k i/100ms
        Array#sample     3.848M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    358.170k (± 2.7%) i/s -      1.797M in   5.022039s
        Array#sample     38.547M (± 2.3%) i/s -    196.257M in   5.094405s

Comparison:
        Array#sample: 38546790.3 i/s
 Array#shuffle.first:   358170.2 i/s - 107.62x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   983.000  i/100ms
          Date.parse   468.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     17.682k (±29.5%) i/s -     82.572k in   5.057628s
          Date.parse      8.455k (±20.2%) i/s -     40.248k in   5.015730s

Comparison:
        Date.iso8601:    17681.9 i/s
          Date.parse:     8454.5 i/s - 2.09x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   331.759k i/100ms
           Array#map     1.682M i/100ms
Calculating -------------------------------------
   Array#each + push      3.730M (± 3.9%) i/s -     18.910M in   5.078199s
           Array#map     17.131M (± 9.4%) i/s -     85.784M in   5.069904s

Comparison:
           Array#map: 17130980.6 i/s
   Array#each + push:  3730148.5 i/s - 4.59x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    12.290M i/100ms
               #each    35.226M i/100ms
Calculating -------------------------------------
            For loop    123.671M (± 1.8%) i/s -    626.802M in   5.070105s
               #each    352.525M (± 2.0%) i/s -      1.797B in   5.098284s

Comparison:
               #each: 352524620.0 i/s
            For loop: 123671357.5 i/s - 2.85x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.199M i/100ms
     each_with_index     1.756M i/100ms
Calculating -------------------------------------
          While Loop     14.138M (± 2.6%) i/s -     70.766M in   5.009005s
     each_with_index     17.558M (± 1.7%) i/s -     87.775M in   5.000570s

Comparison:
     each_with_index: 17558249.4 i/s
          While Loop: 14137986.9 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   309.738k i/100ms
      inject to_proc   313.216k i/100ms
        inject block   310.665k i/100ms
Calculating -------------------------------------
       inject symbol      3.115M (± 2.0%) i/s -     15.797M in   5.074028s
      inject to_proc      3.120M (± 1.3%) i/s -     15.661M in   5.021013s
        inject block      3.115M (± 1.8%) i/s -     15.844M in   5.087825s

Comparison:
      inject to_proc:  3119591.4 i/s
        inject block:  3115201.2 i/s - same-ish: difference falls within error
       inject symbol:  3114506.1 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    22.412k i/100ms
   Array#map.flatten    25.896k i/100ms
      Array#flat_map    57.910k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    260.886k (± 8.0%) i/s -      1.300M in   5.027064s
   Array#map.flatten    264.839k (± 7.1%) i/s -      1.321M in   5.019728s
      Array#flat_map    573.355k (± 3.0%) i/s -      2.896M in   5.054979s

Comparison:
      Array#flat_map:   573354.9 i/s
   Array#map.flatten:   264839.0 i/s - 2.16x  (± 0.00) slower
Array#map.flatten(1):   260885.7 i/s - 2.20x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   314.792k i/100ms
  Array#reverse_each     2.368M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.192M (± 2.6%) i/s -     16.054M in   5.032454s
  Array#reverse_each     23.744M (± 2.5%) i/s -    120.778M in   5.089963s

Comparison:
  Array#reverse_each: 23744448.7 i/s
  Array#reverse.each:  3192447.4 i/s - 7.44x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       966.035k i/100ms
   Enumerable#detect     4.473M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.605M (± 6.6%) i/s -    211.562M in  20.071163s
   Enumerable#detect     45.746M (± 3.2%) i/s -    916.878M in  20.071391s

Comparison:
   Enumerable#detect: 45745787.7 i/s
Enumerable#select.first: 10605290.7 i/s - 4.31x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       307.516k i/100ms
Enumerable#select.last
                       515.314k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.172M (± 6.5%) i/s -     15.991M in   5.075832s
Enumerable#select.last
                          5.439M (± 3.0%) i/s -     27.312M in   5.026516s

Comparison:
Enumerable#select.last:  5438956.0 i/s
Enumerable#reverse.detect:  3171720.8 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.009k i/100ms
  Enumerable#sort_by     2.933k i/100ms
     Enumerable#sort     5.210k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         38.788k (±15.5%) i/s -    182.819k in   5.015394s
  Enumerable#sort_by     34.282k (±29.9%) i/s -    140.784k in   5.009575s
     Enumerable#sort     52.730k (± 3.8%) i/s -    265.710k in   5.046914s

Comparison:
     Enumerable#sort:    52729.6 i/s
Enumerable#sort_by (Symbol#to_proc):    38787.7 i/s - 1.36x  (± 0.00) slower
  Enumerable#sort_by:    34281.6 i/s - 1.54x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   855.214k i/100ms
Enumerable#sort_by...first
                         9.356k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      8.590M (± 1.7%) i/s -     43.616M in   5.079000s
Enumerable#sort_by...first
                        102.631k (± 2.4%) i/s -    514.580k in   5.017026s

Comparison:
   Enumerable#min_by:  8590136.8 i/s
Enumerable#sort_by...first:   102630.8 i/s - 83.70x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   795.144k i/100ms
            Hash#dup   846.239k i/100ms
Calculating -------------------------------------
              Hash[]      9.262M (± 6.3%) i/s -     46.913M in   5.093063s
            Hash#dup      8.828M (± 5.6%) i/s -     44.004M in   5.001334s

Comparison:
              Hash[]:  9262397.4 i/s
            Hash#dup:  8827952.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   322.078M i/100ms
  Hash#fetch, symbol   322.359M i/100ms
     Hash#[], string    18.880M i/100ms
  Hash#fetch, string    20.193M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.225B (± 1.1%) i/s -     16.426B in   5.093459s
  Hash#fetch, symbol      3.210B (± 2.0%) i/s -     16.118B in   5.023730s
     Hash#[], string    188.634M (± 2.1%) i/s -    943.987M in   5.006705s
  Hash#fetch, string    201.506M (± 0.9%) i/s -      1.010B in   5.010955s

Comparison:
     Hash#[], symbol: 3225292931.9 i/s
  Hash#fetch, symbol: 3209804685.7 i/s - same-ish: difference falls within error
  Hash#fetch, string: 201505873.3 i/s - 16.01x  (± 0.00) slower
     Hash#[], string: 188634294.3 i/s - 17.10x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    92.259M i/100ms
             Hash#[]    92.159M i/100ms
          Hash#[] ||    92.021M i/100ms
          Hash#[] &&    91.845M i/100ms
          Hash#fetch    92.430M i/100ms
 Hash#fetch fallback    91.847M i/100ms
Calculating -------------------------------------
            Hash#dig    919.954M (± 1.3%) i/s -      4.613B in   5.015228s
             Hash#[]    919.210M (± 1.8%) i/s -      4.608B in   5.014692s
          Hash#[] ||    915.261M (± 2.2%) i/s -      4.601B in   5.029654s
          Hash#[] &&    918.071M (± 1.8%) i/s -      4.592B in   5.003713s
          Hash#fetch    919.498M (± 1.6%) i/s -      4.621B in   5.027369s
 Hash#fetch fallback    919.509M (± 1.8%) i/s -      4.684B in   5.095899s

Comparison:
            Hash#dig: 919953832.3 i/s
 Hash#fetch fallback: 919509067.0 i/s - same-ish: difference falls within error
          Hash#fetch: 919497599.0 i/s - same-ish: difference falls within error
             Hash#[]: 919210210.5 i/s - same-ish: difference falls within error
          Hash#[] &&: 918071342.2 i/s - same-ish: difference falls within error
          Hash#[] ||: 915261186.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   315.795M i/100ms
  Hash#fetch + block   314.745M i/100ms
    Hash#fetch + arg   320.166M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.206B (± 1.8%) i/s -     16.106B in   5.025195s
  Hash#fetch + block      3.209B (± 2.7%) i/s -     16.052B in   5.006802s
    Hash#fetch + arg      3.211B (± 2.3%) i/s -     16.328B in   5.088348s

Comparison:
    Hash#fetch + arg: 3210779565.8 i/s
  Hash#fetch + block: 3208553286.8 i/s - same-ish: difference falls within error
  Hash#fetch + const: 3206004703.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    28.226k i/100ms
         sort + to_h    16.857k i/100ms
Calculating -------------------------------------
      sort_by + to_h    530.570k (± 7.3%) i/s -      2.653M in   5.030142s
         sort + to_h    138.428k (± 2.6%) i/s -    707.994k in   5.118106s

Comparison:
      sort_by + to_h:   530570.1 i/s
         sort + to_h:   138428.1 i/s - 3.83x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   195.544k i/100ms
       Hash#each_key   253.419k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.475M (±10.0%) i/s -     12.124M in   5.004139s
       Hash#each_key      2.523M (± 4.1%) i/s -     12.671M in   5.030829s

Comparison:
       Hash#each_key:  2523051.1 i/s
      Hash#keys.each:  2475339.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   412.000  i/100ms
           Hash#key?    12.659M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      5.173k (±17.0%) i/s -     24.720k in   5.032614s
           Hash#key?    126.649M (± 1.4%) i/s -    645.613M in   5.098698s

Comparison:
           Hash#key?: 126649303.6 i/s
  Hash#keys.include?:     5173.1 i/s - 24482.47x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    33.469k i/100ms
            Hash#[]=    33.548k i/100ms
Calculating -------------------------------------
         Hash#merge!    352.786k (± 6.5%) i/s -      1.774M in   5.058888s
            Hash#[]=    356.755k (± 4.2%) i/s -      1.812M in   5.087485s

Comparison:
            Hash#[]=:   356755.0 i/s
         Hash#merge!:   352785.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        42.605k i/100ms
      Hash#merge({})    23.052k i/100ms
 Hash#dup#merge!({})    33.494k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        386.035k (± 9.7%) i/s -      1.917M in   5.021623s
      Hash#merge({})    245.696k (± 8.5%) i/s -      1.222M in   5.028217s
 Hash#dup#merge!({})    322.842k (± 9.4%) i/s -      1.608M in   5.033959s

Comparison:
{}#merge!(Hash) do end:   386035.3 i/s
 Hash#dup#merge!({}):   322841.5 i/s - same-ish: difference falls within error
      Hash#merge({}):   245695.8 i/s - 1.57x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   322.485M i/100ms
          Hash#merge   322.462M i/100ms
Calculating -------------------------------------
        Hash#**other      3.216B (± 1.2%) i/s -     16.124B in   5.014987s
          Hash#merge      3.207B (± 2.2%) i/s -     16.123B in   5.030070s

Comparison:
        Hash#**other: 3215697428.8 i/s
          Hash#merge: 3206942215.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.306k i/100ms
         Hash#merge!    36.377k i/100ms
Calculating -------------------------------------
          Hash#merge     14.562k (± 7.9%) i/s -     73.136k in   5.063996s
         Hash#merge!    363.471k (± 4.5%) i/s -      1.819M in   5.014924s

Comparison:
         Hash#merge!:   363471.5 i/s
          Hash#merge:    14562.5 i/s - 24.96x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.744M i/100ms
Array#each               1.576M i/100ms
Array#each_w/_object     1.611M i/100ms
Hash#select-include      2.418M i/100ms
Calculating -------------------------------------
Hash#native-slice        18.301M (± 6.3%) i/s -     92.427M in   5.078388s
Array#each               16.667M (± 6.4%) i/s -     83.505M in   5.040780s
Array#each_w/_object     16.484M (± 6.2%) i/s -     82.149M in   5.010210s
Hash#select-include      24.046M (± 7.2%) i/s -    120.881M in   5.065194s

Comparison:
Hash#select-include : 24046382.6 i/s
Hash#native-slice   : 18301433.2 i/s - 1.31x  (± 0.00) slower
Array#each          : 16666959.9 i/s - 1.44x  (± 0.00) slower
Array#each_w/_object: 16483843.4 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   550.000  i/100ms
         Hash#value?     2.567k i/100ms
Calculating -------------------------------------
Hash#values.include?      5.684k (±14.6%) i/s -     27.500k in   5.000696s
         Hash#value?     25.133k (± 0.7%) i/s -    125.783k in   5.004869s

Comparison:
         Hash#value?:    25133.2 i/s
Hash#values.include?:     5684.3 i/s - 4.42x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   315.364M i/100ms
                send   321.620M i/100ms
      method_missing   311.989M i/100ms
Calculating -------------------------------------
                call      3.209B (± 1.6%) i/s -     16.084B in   5.013773s
                send      3.219B (± 1.0%) i/s -     16.403B in   5.095936s
      method_missing      3.120B (± 3.4%) i/s -     15.599B in   5.005059s

Comparison:
                send: 3219127805.0 i/s
                call: 3208690780.7 i/s - same-ish: difference falls within error
      method_missing: 3120391888.1 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    65.035k i/100ms
      Symbol#to_proc    69.872k i/100ms
Calculating -------------------------------------
               Block    743.036k (±12.2%) i/s -      3.707M in   5.089443s
      Symbol#to_proc    740.894k (±13.8%) i/s -      3.633M in   5.003144s

Comparison:
               Block:   743036.3 i/s
      Symbol#to_proc:   740894.0 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   321.841M i/100ms
       block + yield   320.000M i/100ms
        unused block   309.597M i/100ms
               yield   315.719M i/100ms
Calculating -------------------------------------
          block.call      3.193B (± 1.6%) i/s -     16.092B in   5.040534s
       block + yield      3.199B (± 1.7%) i/s -     16.000B in   5.003766s
        unused block      3.205B (± 2.4%) i/s -     16.099B in   5.025972s
               yield      3.226B (± 0.4%) i/s -     16.417B in   5.088664s

Comparison:
               yield: 3226318501.4 i/s
        unused block: 3205157749.3 i/s - same-ish: difference falls within error
       block + yield: 3198612167.2 i/s - same-ish: difference falls within error
          block.call: 3193413408.8 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     4.744k i/100ms
      range#include?   216.000  i/100ms
       range#member?   250.000  i/100ms
       plain compare     9.188k i/100ms
Calculating -------------------------------------
        range#cover?     65.319k (±31.7%) i/s -    284.640k in   5.024759s
      range#include?      2.736k (±32.8%) i/s -     12.096k in   5.027471s
       range#member?      2.689k (±26.3%) i/s -     12.500k in   5.087261s
       plain compare     94.315k (±21.2%) i/s -    441.024k in   5.056881s

Comparison:
       plain compare:    94314.7 i/s
        range#cover?:    65319.3 i/s - same-ish: difference falls within error
      range#include?:     2736.2 i/s - 34.47x  (± 0.00) slower
       range#member?:     2689.4 i/s - 35.07x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    11.837M i/100ms
           String#=~    13.339M i/100ms
          Regexp#===    13.207M i/100ms
        String#match    10.736M i/100ms
Calculating -------------------------------------
       String#match?    142.888M (± 2.2%) i/s -    722.057M in   5.055997s
           String#=~    132.997M (± 1.5%) i/s -    666.945M in   5.015851s
          Regexp#===    132.574M (± 4.4%) i/s -    673.534M in   5.093753s
        String#match    107.028M (± 1.8%) i/s -    536.796M in   5.017174s

Comparison:
       String#match?: 142888094.4 i/s
           String#=~: 132996947.5 i/s - 1.07x  (± 0.00) slower
          Regexp#===: 132573609.6 i/s - 1.08x  (± 0.00) slower
        String#match: 107027907.7 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.929M i/100ms
      String#casecmp     4.600M i/100ms
Calculating -------------------------------------
String#downcase + ==     30.102M (± 7.5%) i/s -    149.384M in   5.007527s
      String#casecmp     46.375M (± 3.5%) i/s -    234.583M in   5.064852s

Comparison:
      String#casecmp: 46374664.5 i/s
String#downcase + ==: 30101812.6 i/s - 1.54x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     9.936M i/100ms
       String#concat     9.928M i/100ms
       String#append    10.950M i/100ms
         "foo" "bar"   311.994M i/100ms
  "#{'foo'}#{'bar'}"   317.265M i/100ms
Calculating -------------------------------------
            String#+    106.529M (± 6.6%) i/s -    536.560M in   5.068263s
       String#concat    107.125M (± 6.4%) i/s -    536.112M in   5.034032s
       String#append    107.190M (± 6.1%) i/s -    536.535M in   5.031731s
         "foo" "bar"      3.211B (± 2.5%) i/s -     16.224B in   5.056291s
  "#{'foo'}#{'bar'}"      3.213B (± 1.9%) i/s -     16.180B in   5.037552s

Comparison:
  "#{'foo'}#{'bar'}": 3213290711.9 i/s
         "foo" "bar": 3210797463.4 i/s - same-ish: difference falls within error
       String#append: 107189729.5 i/s - 29.98x  (± 0.00) slower
       String#concat: 107124876.6 i/s - 30.00x  (± 0.00) slower
            String#+: 106528675.3 i/s - 30.16x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   322.589M i/100ms
          String#dup   311.801M i/100ms
Calculating -------------------------------------
           String#+@      3.194B (± 2.7%) i/s -     16.129B in   5.053490s
          String#dup      3.201B (± 2.5%) i/s -     16.214B in   5.068011s

Comparison:
          String#dup: 3201330816.6 i/s
           String#+@: 3194259601.0 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   709.691k i/100ms
       String#match?     1.658M i/100ms
    String#end_with?    10.764M i/100ms
Calculating -------------------------------------
           String#=~     13.995M (± 3.6%) i/s -     70.259M in   5.027520s
       String#match?     16.549M (± 1.7%) i/s -     82.903M in   5.011156s
    String#end_with?    107.091M (± 2.0%) i/s -    538.201M in   5.027786s

Comparison:
    String#end_with?: 107091127.0 i/s
       String#match?: 16549002.6 i/s - 6.47x  (± 0.00) slower
           String#=~: 13995284.3 i/s - 7.65x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   721.810k i/100ms
          String#sub   961.428k i/100ms
String#dup["string"]=
                        10.010M i/100ms
Calculating -------------------------------------
         String#gsub      8.474M (± 8.8%) i/s -     42.587M in   5.074944s
          String#sub      9.845M (± 9.6%) i/s -     49.033M in   5.048861s
String#dup["string"]=
                         99.556M (± 7.0%) i/s -    500.512M in   5.071051s

Comparison:
String#dup["string"]=: 99555547.2 i/s
          String#sub:  9844948.6 i/s - 10.11x  (± 0.00) slower
         String#gsub:  8473519.7 i/s - 11.75x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   344.762k i/100ms
           String#tr   145.461k i/100ms
Calculating -------------------------------------
         String#gsub      3.930M (± 8.8%) i/s -     19.651M in   5.052821s
           String#tr      1.451M (± 4.1%) i/s -      7.273M in   5.019748s

Comparison:
         String#gsub:  3929552.9 i/s
           String#tr:  1451491.4 i/s - 2.71x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   316.325M i/100ms
         With Freeze   320.141M i/100ms
Calculating -------------------------------------
      Without Freeze      3.198B (± 2.1%) i/s -     16.133B in   5.046907s
         With Freeze      3.205B (± 2.3%) i/s -     16.327B in   5.096962s

Comparison:
         With Freeze: 3205118349.7 i/s
      Without Freeze: 3197971806.0 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/    13.258k i/100ms
      String#squeeze    71.763k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    149.915k (±10.9%) i/s -    742.448k in   5.032987s
      String#squeeze    717.355k (± 2.8%) i/s -      3.588M in   5.006139s

Comparison:
      String#squeeze:   717355.1 i/s
 String#gsub/regex+/:   149914.8 i/s - 4.79x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     4.512M i/100ms
       String#match?     6.302M i/100ms
  String#start_with?    12.783M i/100ms
Calculating -------------------------------------
           String#=~     45.936M (± 2.2%) i/s -    230.134M in   5.012472s
       String#match?     62.638M (± 3.5%) i/s -    315.082M in   5.037014s
  String#start_with?    127.957M (± 2.4%) i/s -    651.921M in   5.098085s

Comparison:
  String#start_with?: 127957398.5 i/s
       String#match?: 62637632.6 i/s - 2.04x  (± 0.00) slower
           String#=~: 45935712.8 i/s - 2.79x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   233.819k i/100ms
    String#[0, n] ==   307.480k i/100ms
   String#[RANGE] ==   354.188k i/100ms
   String#[0...n] ==   272.192k i/100ms
Calculating -------------------------------------
  String#start_with?      7.033M (± 3.0%) i/s -     35.307M in   5.025861s
    String#[0, n] ==      3.098M (± 4.7%) i/s -     15.681M in   5.075940s
   String#[RANGE] ==      3.519M (± 3.8%) i/s -     17.709M in   5.041627s
   String#[0...n] ==      2.729M (± 7.6%) i/s -     13.610M in   5.025394s

Comparison:
  String#start_with?:  7032970.0 i/s
   String#[RANGE] ==:  3518531.0 i/s - 2.00x  (± 0.00) slower
    String#[0, n] ==:  3097548.1 i/s - 2.27x  (± 0.00) slower
   String#[0...n] ==:  2728833.9 i/s - 2.58x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    10.046M i/100ms
 String#sub!'string'   972.040k i/100ms
String#gsub!'string'   877.732k i/100ms
  String#[/regexp/]=     2.706M i/100ms
 String#sub!/regexp/     1.316M i/100ms
String#gsub!/regexp/   842.165k i/100ms
Calculating -------------------------------------
  String#['string']=    100.784M (± 0.4%) i/s -    512.353M in   5.083761s
 String#sub!'string'     10.166M (±16.1%) i/s -     46.658M in   5.055604s
String#gsub!'string'      8.815M (± 8.4%) i/s -     43.887M in   5.024105s
  String#[/regexp/]=     27.009M (± 2.2%) i/s -    135.308M in   5.012306s
 String#sub!/regexp/     14.079M (±10.0%) i/s -     69.734M in   5.020550s
String#gsub!/regexp/      8.378M (± 8.2%) i/s -     42.108M in   5.069641s

Comparison:
  String#['string']=: 100784060.3 i/s
  String#[/regexp/]=: 27008697.7 i/s - 3.73x  (± 0.00) slower
 String#sub!/regexp/: 14078988.9 i/s - 7.16x  (± 0.00) slower
 String#sub!'string': 10165512.9 i/s - 9.91x  (± 0.00) slower
String#gsub!'string':  8815362.9 i/s - 11.43x  (± 0.00) slower
String#gsub!/regexp/:  8378183.7 i/s - 12.03x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     2.620M i/100ms
        String#chomp     5.689M i/100ms
String#delete_suffix    14.356M i/100ms
Calculating -------------------------------------
          String#sub     29.238M (± 2.4%) i/s -    146.711M in   5.020855s
        String#chomp     56.858M (± 0.4%) i/s -    284.438M in   5.002720s
String#delete_suffix    152.804M (± 9.4%) i/s -    760.868M in   5.035322s

Comparison:
String#delete_suffix: 152803832.9 i/s
        String#chomp: 56857515.1 i/s - 2.69x  (± 0.00) slower
          String#sub: 29238200.0 i/s - 5.23x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   322.263M i/100ms
          String#sub    13.729M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.216B (± 1.3%) i/s -     16.113B in   5.011646s
          String#sub    136.820M (± 1.9%) i/s -    686.428M in   5.018951s

Comparison:
String#delete_prefix: 3215750365.2 i/s
          String#sub: 136819869.2 i/s - 23.50x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.551M i/100ms
    String#unpack[0]     1.626M i/100ms
Calculating -------------------------------------
      String#unpack1     17.560M (± 6.5%) i/s -     88.386M in   5.065222s
    String#unpack[0]     17.580M (± 3.0%) i/s -     89.413M in   5.090841s

Comparison:
    String#unpack[0]: 17579978.1 i/s
      String#unpack1: 17559907.7 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.1.0-dev-8f98aae4, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    38.926k i/100ms
          Time.parse   333.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    433.599k (±30.2%) i/s -      1.985M in   5.071209s
          Time.parse      4.966k (±29.9%) i/s -     22.644k in   5.001779s

Comparison:
        Time.iso8601:   433598.7 i/s
          Time.parse:     4966.1 i/s - 87.31x  (± 0.00) slower

