$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       318.252M i/100ms
Function with splat arguments
                         1.894k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.191B (± 2.2%) i/s -     16.231B in   5.088528s
Function with splat arguments
                         20.260k (± 8.8%) i/s -    102.276k in   5.095590s

Comparison:
Function with single Array argument: 3191306273.2 i/s
Function with splat arguments:    20259.7 i/s - 157520.08x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   307.718M i/100ms
Sequential Assignment
                       313.468M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.200B (± 1.8%) i/s -     16.001B in   5.002589s
Sequential Assignment
                          3.217B (± 1.7%) i/s -     16.300B in   5.068052s

Comparison:
Sequential Assignment: 3217349016.4 i/s
 Parallel Assignment: 3199671655.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   318.229M i/100ms
       attr_accessor   301.238M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.201B (± 1.9%) i/s -     16.230B in   5.072887s
       attr_accessor      3.189B (± 3.3%) i/s -     15.966B in   5.011733s

Comparison:
   getter_and_setter: 3200591212.9 i/s
       attr_accessor: 3189442558.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     9.432k i/100ms
         respond_to?   322.855M i/100ms
Calculating -------------------------------------
      begin...rescue    103.475k (± 6.8%) i/s -    518.760k in   5.046690s
         respond_to?      3.201B (± 2.5%) i/s -     16.143B in   5.045533s

Comparison:
         respond_to?: 3201496169.5 i/s
      begin...rescue:   103475.2 i/s - 30939.74x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   322.410M i/100ms
             &method   317.381M i/100ms
Calculating -------------------------------------
              normal      3.199B (± 2.4%) i/s -     16.121B in   5.042368s
             &method      3.217B (± 1.2%) i/s -     16.186B in   5.032010s

Comparison:
             &method: 3217201556.9 i/s
              normal: 3199075696.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       158.000  i/100ms
       define_method   150.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          3.828k (±54.8%) i/s -      8.374k in   5.121170s
       define_method     11.232k (±44.9%) i/s -     11.100k in   7.043144s

Comparison:
       define_method:    11232.1 i/s
module_eval with string:     3827.9 i/s - 2.93x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   118.418k i/100ms
       Kernel#format   103.825k i/100ms
            String#%    19.905k i/100ms
Calculating -------------------------------------
         Float#round      1.237M (± 2.9%) i/s -      6.276M in   5.077095s
       Kernel#format      1.033M (± 2.7%) i/s -      5.191M in   5.027930s
            String#%    205.311k (±12.7%) i/s -      1.015M in   5.055562s

Comparison:
         Float#round:  1237238.5 i/s
       Kernel#format:  1033266.6 i/s - 1.20x  (± 0.00) slower
            String#%:   205311.5 i/s - 6.03x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   318.803M i/100ms
          OpenStruct   303.489M i/100ms
Calculating -------------------------------------
                Hash      3.172B (± 4.8%) i/s -     15.940B in   5.040521s
          OpenStruct      3.204B (± 2.2%) i/s -     16.085B in   5.022600s

Comparison:
          OpenStruct: 3204232828.0 i/s
                Hash: 3171993966.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   317.641M i/100ms
          OpenStruct     4.417k i/100ms
Calculating -------------------------------------
                Hash      3.136B (± 7.7%) i/s -     15.564B in   5.005486s
          OpenStruct     39.863k (±23.7%) i/s -    189.931k in   5.067668s

Comparison:
                Hash: 3136341326.2 i/s
          OpenStruct:    39863.2 i/s - 78677.68x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   883.795k i/100ms
  ancestors.include?   205.865k i/100ms
Calculating -------------------------------------
  less than or equal      9.748M (± 3.5%) i/s -     49.493M in   5.083681s
  ancestors.include?      2.123M (± 6.7%) i/s -     10.705M in   5.073781s

Comparison:
  less than or equal:  9747649.5 i/s
  ancestors.include?:  2123461.9 i/s - 4.59x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     32.111  (± 3.1%) i/s -    161.000  in   5.016880s
         Kernel loop     32.114  (± 3.1%) i/s -    161.000  in   5.019082s

Comparison:
         Kernel loop:       32.1 i/s
          While Loop:       32.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   322.456M i/100ms
         Array#first   305.434M i/100ms
Calculating -------------------------------------
           Array#[0]      3.210B (± 1.0%) i/s -     16.123B in   5.022795s
         Array#first      3.212B (± 1.9%) i/s -     16.188B in   5.041968s

Comparison:
         Array#first: 3211844891.2 i/s
           Array#[0]: 3210236220.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   317.299M i/100ms
          Array#last   313.990M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.202B (± 1.7%) i/s -     16.182B in   5.054926s
          Array#last      3.212B (± 1.8%) i/s -     16.327B in   5.084812s

Comparison:
          Array#last: 3212136764.3 i/s
          Array#[-1]: 3202267643.4 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   900.924k i/100ms
Calculating -------------------------------------
                find     13.703  (± 0.0%) i/s -     69.000  in   5.039564s
             bsearch      9.152M (± 2.6%) i/s -     45.947M in   5.024169s

Comparison:
             bsearch:  9151606.7 i/s
                find:       13.7 i/s - 667853.21x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.253  (± 0.0%) i/s -      2.000  in   7.909357s
        Array#insert      1.389  (± 0.0%) i/s -      7.000  in   5.040657s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.3 i/s - 5.49x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   321.785M i/100ms
          Array#size   319.604M i/100ms
         Array#count   321.058M i/100ms
Calculating -------------------------------------
        Array#length      3.192B (± 2.6%) i/s -     16.089B in   5.044894s
          Array#size      3.211B (± 1.9%) i/s -     16.300B in   5.077943s
         Array#count      3.210B (± 2.1%) i/s -     16.053B in   5.002945s

Comparison:
          Array#size: 3211092877.2 i/s
         Array#count: 3210143003.8 i/s - same-ish: difference falls within error
        Array#length: 3191536900.4 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    34.056k i/100ms
        Array#sample     3.818M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    357.793k (± 2.5%) i/s -      1.805M in   5.048249s
        Array#sample     38.395M (± 0.7%) i/s -    194.727M in   5.071981s

Comparison:
        Array#sample: 38394872.3 i/s
 Array#shuffle.first:   357793.3 i/s - 107.31x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601     1.022k i/100ms
          Date.parse   719.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     26.044k (±42.4%) i/s -    105.266k in   5.027061s
          Date.parse      8.877k (±22.3%) i/s -     41.702k in   5.008790s

Comparison:
        Date.iso8601:    26043.7 i/s
          Date.parse:     8877.0 i/s - 2.93x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   335.345k i/100ms
           Array#map     1.642M i/100ms
Calculating -------------------------------------
   Array#each + push      3.614M (± 6.8%) i/s -     18.109M in   5.045821s
           Array#map     16.830M (± 8.4%) i/s -     83.765M in   5.019618s

Comparison:
           Array#map: 16830087.3 i/s
   Array#each + push:  3613994.5 i/s - 4.66x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    12.224M i/100ms
               #each    35.148M i/100ms
Calculating -------------------------------------
            For loop    124.203M (± 0.3%) i/s -    623.401M in   5.019251s
               #each    352.236M (± 2.3%) i/s -      1.793B in   5.092181s

Comparison:
               #each: 352235587.7 i/s
            For loop: 124203274.3 i/s - 2.84x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.433M i/100ms
     each_with_index     1.765M i/100ms
Calculating -------------------------------------
          While Loop     14.977M (± 3.4%) i/s -     75.975M in   5.078898s
     each_with_index     17.675M (± 1.7%) i/s -     90.021M in   5.094519s

Comparison:
     each_with_index: 17674787.7 i/s
          While Loop: 14976949.1 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   304.790k i/100ms
      inject to_proc   311.067k i/100ms
        inject block   312.611k i/100ms
Calculating -------------------------------------
       inject symbol      3.095M (± 5.1%) i/s -     15.544M in   5.039379s
      inject to_proc      3.114M (± 2.2%) i/s -     15.864M in   5.097808s
        inject block      3.126M (± 0.2%) i/s -     15.631M in   5.000865s

Comparison:
        inject block:  3125585.6 i/s
      inject to_proc:  3113621.5 i/s - same-ish: difference falls within error
       inject symbol:  3095390.7 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    22.939k i/100ms
   Array#map.flatten    25.969k i/100ms
      Array#flat_map    57.313k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    261.836k (± 7.5%) i/s -      1.308M in   5.029179s
   Array#map.flatten    263.044k (± 7.4%) i/s -      1.324M in   5.069887s
      Array#flat_map    569.665k (± 6.3%) i/s -      2.866M in   5.056180s

Comparison:
      Array#flat_map:   569664.7 i/s
   Array#map.flatten:   263044.2 i/s - 2.17x  (± 0.00) slower
Array#map.flatten(1):   261836.0 i/s - 2.18x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   192.059k i/100ms
  Array#reverse_each     2.383M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.136M (± 6.0%) i/s -     15.749M in   5.053658s
  Array#reverse_each     23.939M (± 2.8%) i/s -    121.536M in   5.080416s

Comparison:
  Array#reverse_each: 23938658.8 i/s
  Array#reverse.each:  3136109.9 i/s - 7.63x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       970.704k i/100ms
   Enumerable#detect     4.095M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.350M (± 7.8%) i/s -    205.789M in  20.053263s
   Enumerable#detect     45.675M (± 3.1%) i/s -    913.088M in  20.012454s

Comparison:
   Enumerable#detect: 45675116.2 i/s
Enumerable#select.first: 10349708.5 i/s - 4.41x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       300.330k i/100ms
Enumerable#select.last
                       553.455k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.186M (± 3.5%) i/s -     15.917M in   5.002399s
Enumerable#select.last
                          5.464M (± 5.8%) i/s -     27.673M in   5.089614s

Comparison:
Enumerable#select.last:  5463803.0 i/s
Enumerable#reverse.detect:  3185977.4 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.177k i/100ms
  Enumerable#sort_by     4.044k i/100ms
     Enumerable#sort     4.684k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         39.581k (±18.4%) i/s -    180.691k in   5.020481s
  Enumerable#sort_by     39.006k (±18.9%) i/s -    177.936k in   5.004100s
     Enumerable#sort     53.061k (± 4.3%) i/s -    266.988k in   5.041687s

Comparison:
     Enumerable#sort:    53060.8 i/s
Enumerable#sort_by (Symbol#to_proc):    39581.4 i/s - 1.34x  (± 0.00) slower
  Enumerable#sort_by:    39006.0 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   839.617k i/100ms
Enumerable#sort_by...first
                         9.635k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      8.628M (± 0.8%) i/s -     43.660M in   5.060625s
Enumerable#sort_by...first
                        103.914k (± 2.2%) i/s -    520.290k in   5.009440s

Comparison:
   Enumerable#min_by:  8628010.4 i/s
Enumerable#sort_by...first:   103914.2 i/s - 83.03x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]     1.034M i/100ms
            Hash#dup   982.940k i/100ms
Calculating -------------------------------------
              Hash[]     11.175M (± 6.2%) i/s -     55.833M in   5.016115s
            Hash#dup     10.404M (± 7.1%) i/s -     52.096M in   5.039384s

Comparison:
              Hash[]: 11174787.3 i/s
            Hash#dup: 10404161.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   318.062M i/100ms
  Hash#fetch, symbol   313.931M i/100ms
     Hash#[], string    18.876M i/100ms
  Hash#fetch, string    20.197M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.188B (± 4.5%) i/s -     15.903B in   5.001091s
  Hash#fetch, symbol      3.205B (± 2.4%) i/s -     16.324B in   5.095809s
     Hash#[], string    187.961M (± 2.9%) i/s -    943.814M in   5.025773s
  Hash#fetch, string    200.927M (± 2.2%) i/s -      1.010B in   5.028615s

Comparison:
  Hash#fetch, symbol: 3205459517.3 i/s
     Hash#[], symbol: 3188002751.1 i/s - same-ish: difference falls within error
  Hash#fetch, string: 200926859.3 i/s - 15.95x  (± 0.00) slower
     Hash#[], string: 187961387.6 i/s - 17.05x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    91.540M i/100ms
             Hash#[]    91.357M i/100ms
          Hash#[] ||    92.436M i/100ms
          Hash#[] &&    91.796M i/100ms
          Hash#fetch    91.757M i/100ms
 Hash#fetch fallback    91.848M i/100ms
Calculating -------------------------------------
            Hash#dig    917.084M (± 1.9%) i/s -      4.669B in   5.092669s
             Hash#[]    918.695M (± 1.8%) i/s -      4.659B in   5.073268s
          Hash#[] ||    920.620M (± 1.1%) i/s -      4.622B in   5.020909s
          Hash#[] &&    920.052M (± 1.2%) i/s -      4.682B in   5.089205s
          Hash#fetch    919.145M (± 1.7%) i/s -      4.680B in   5.092775s
 Hash#fetch fallback    920.295M (± 1.5%) i/s -      4.684B in   5.091213s

Comparison:
          Hash#[] ||: 920620194.8 i/s
 Hash#fetch fallback: 920294743.9 i/s - same-ish: difference falls within error
          Hash#[] &&: 920051572.5 i/s - same-ish: difference falls within error
          Hash#fetch: 919144886.7 i/s - same-ish: difference falls within error
             Hash#[]: 918694680.2 i/s - same-ish: difference falls within error
            Hash#dig: 917083869.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   315.002M i/100ms
  Hash#fetch + block   322.801M i/100ms
    Hash#fetch + arg   323.428M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.215B (± 1.3%) i/s -     16.380B in   5.096228s
  Hash#fetch + block      3.211B (± 3.0%) i/s -     16.140B in   5.031796s
    Hash#fetch + arg      3.208B (± 2.0%) i/s -     16.171B in   5.043103s

Comparison:
  Hash#fetch + const: 3214769092.4 i/s
  Hash#fetch + block: 3210927799.7 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 3208033851.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    36.878k i/100ms
         sort + to_h     8.777k i/100ms
Calculating -------------------------------------
      sort_by + to_h    550.326k (± 4.0%) i/s -      2.766M in   5.034695s
         sort + to_h    149.865k (± 7.3%) i/s -    754.822k in   5.077070s

Comparison:
      sort_by + to_h:   550325.6 i/s
         sort + to_h:   149865.3 i/s - 3.67x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   205.584k i/100ms
       Hash#each_key   239.789k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.101M (±10.8%) i/s -     10.279M in   5.018316s
       Hash#each_key      2.368M (± 5.9%) i/s -     11.989M in   5.088000s

Comparison:
       Hash#each_key:  2367929.2 i/s
      Hash#keys.each:  2101271.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   610.000  i/100ms
           Hash#key?     3.811M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      6.437k (±16.0%) i/s -     31.720k in   5.120043s
           Hash#key?     38.049M (± 1.1%) i/s -    190.535M in   5.008280s

Comparison:
           Hash#key?: 38048809.4 i/s
  Hash#keys.include?:     6436.9 i/s - 5911.02x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    33.882k i/100ms
            Hash#[]=    34.651k i/100ms
Calculating -------------------------------------
         Hash#merge!    344.312k (± 6.1%) i/s -      1.728M in   5.045606s
            Hash#[]=    342.353k (± 6.5%) i/s -      1.733M in   5.089900s

Comparison:
         Hash#merge!:   344312.3 i/s
            Hash#[]=:   342352.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        35.372k i/100ms
      Hash#merge({})    23.467k i/100ms
 Hash#dup#merge!({})    32.965k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        385.773k (±10.1%) i/s -      1.910M in   5.009416s
      Hash#merge({})    241.906k (± 9.6%) i/s -      1.220M in   5.102880s
 Hash#dup#merge!({})    320.964k (± 8.3%) i/s -      1.615M in   5.075506s

Comparison:
{}#merge!(Hash) do end:   385772.9 i/s
 Hash#dup#merge!({}):   320963.9 i/s - same-ish: difference falls within error
      Hash#merge({}):   241905.8 i/s - 1.59x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   316.713M i/100ms
          Hash#merge   322.265M i/100ms
Calculating -------------------------------------
        Hash#**other      3.200B (± 2.6%) i/s -     16.152B in   5.052048s
          Hash#merge      3.223B (± 0.8%) i/s -     16.113B in   4.999742s

Comparison:
          Hash#merge: 3223032951.7 i/s
        Hash#**other: 3199585085.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.325k i/100ms
         Hash#merge!    35.453k i/100ms
Calculating -------------------------------------
          Hash#merge     16.725k (± 5.8%) i/s -     83.475k in   5.008545s
         Hash#merge!    362.146k (± 5.9%) i/s -      1.808M in   5.014300s

Comparison:
         Hash#merge!:   362146.2 i/s
          Hash#merge:    16724.9 i/s - 21.65x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.690M i/100ms
Array#each               1.576M i/100ms
Array#each_w/_object     1.668M i/100ms
Hash#select-include      2.469M i/100ms
Calculating -------------------------------------
Hash#native-slice        18.067M (± 6.3%) i/s -     91.274M in   5.079227s
Array#each               16.443M (± 6.4%) i/s -     81.961M in   5.011736s
Array#each_w/_object     16.498M (± 8.1%) i/s -     81.711M in   5.001880s
Hash#select-include      23.957M (± 6.3%) i/s -    120.958M in   5.075455s

Comparison:
Hash#select-include : 23957012.5 i/s
Hash#native-slice   : 18066746.4 i/s - 1.33x  (± 0.00) slower
Array#each_w/_object: 16498412.8 i/s - 1.45x  (± 0.00) slower
Array#each          : 16442978.4 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   354.000  i/100ms
         Hash#value?     2.303k i/100ms
Calculating -------------------------------------
Hash#values.include?      5.670k (±15.8%) i/s -     27.258k in   5.031243s
         Hash#value?     24.752k (± 5.0%) i/s -    124.362k in   5.037259s

Comparison:
         Hash#value?:    24752.2 i/s
Hash#values.include?:     5670.1 i/s - 4.37x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   318.205M i/100ms
                send   322.639M i/100ms
      method_missing   320.809M i/100ms
Calculating -------------------------------------
                call      3.210B (± 1.8%) i/s -     16.228B in   5.056947s
                send      3.217B (± 1.4%) i/s -     16.132B in   5.015855s
      method_missing      3.211B (± 2.1%) i/s -     16.361B in   5.098453s

Comparison:
                send: 3216827741.2 i/s
      method_missing: 3210611149.8 i/s - same-ish: difference falls within error
                call: 3210302652.9 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    66.055k i/100ms
      Symbol#to_proc    78.188k i/100ms
Calculating -------------------------------------
               Block    808.308k (±10.2%) i/s -      4.029M in   5.065455s
      Symbol#to_proc    765.708k (±13.5%) i/s -      3.753M in   5.008136s

Comparison:
               Block:   808308.4 i/s
      Symbol#to_proc:   765708.1 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   321.511M i/100ms
       block + yield   320.645M i/100ms
        unused block   318.904M i/100ms
               yield   323.554M i/100ms
Calculating -------------------------------------
          block.call      3.206B (± 2.2%) i/s -     16.076B in   5.017059s
       block + yield      3.216B (± 1.3%) i/s -     16.353B in   5.085984s
        unused block      3.190B (± 3.0%) i/s -     15.945B in   5.002948s
               yield      3.199B (± 2.9%) i/s -     16.178B in   5.061975s

Comparison:
       block + yield: 3215822616.0 i/s
          block.call: 3205805173.5 i/s - same-ish: difference falls within error
               yield: 3198952280.5 i/s - same-ish: difference falls within error
        unused block: 3190209837.0 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     4.750k i/100ms
      range#include?   159.000  i/100ms
       range#member?   228.000  i/100ms
       plain compare     7.825k i/100ms
Calculating -------------------------------------
        range#cover?     55.985k (±24.2%) i/s -    256.500k in   5.067258s
      range#include?      2.288k (±28.7%) i/s -     10.176k in   5.041743s
       range#member?      2.470k (±25.9%) i/s -     11.172k in   5.054506s
       plain compare     89.624k (±21.5%) i/s -    414.725k in   5.032737s

Comparison:
       plain compare:    89623.6 i/s
        range#cover?:    55985.1 i/s - 1.60x  (± 0.00) slower
       range#member?:     2469.7 i/s - 36.29x  (± 0.00) slower
      range#include?:     2288.5 i/s - 39.16x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    13.459M i/100ms
           String#=~    13.332M i/100ms
          Regexp#===    12.954M i/100ms
        String#match    10.692M i/100ms
Calculating -------------------------------------
       String#match?    136.488M (± 0.3%) i/s -    686.425M in   5.029230s
           String#=~    132.281M (± 0.7%) i/s -    666.591M in   5.039433s
          Regexp#===    126.882M (± 6.0%) i/s -    634.751M in   5.026349s
        String#match    107.103M (± 2.2%) i/s -    545.286M in   5.093764s

Comparison:
       String#match?: 136488473.5 i/s
           String#=~: 132280875.3 i/s - 1.03x  (± 0.00) slower
          Regexp#===: 126881993.7 i/s - 1.08x  (± 0.00) slower
        String#match: 107102613.1 i/s - 1.27x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.702M i/100ms
      String#casecmp     4.472M i/100ms
Calculating -------------------------------------
String#downcase + ==     30.063M (± 7.2%) i/s -    151.306M in   5.069196s
      String#casecmp     46.130M (± 6.8%) i/s -    232.549M in   5.079198s

Comparison:
      String#casecmp: 46129884.6 i/s
String#downcase + ==: 30063329.0 i/s - 1.53x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+    10.465M i/100ms
       String#concat    10.962M i/100ms
       String#append    10.958M i/100ms
         "foo" "bar"   312.544M i/100ms
  "#{'foo'}#{'bar'}"   322.566M i/100ms
Calculating -------------------------------------
            String#+    108.622M (± 3.2%) i/s -    544.180M in   5.015125s
       String#concat    106.969M (± 5.5%) i/s -    548.109M in   5.145036s
       String#append    107.485M (± 6.3%) i/s -    536.922M in   5.023315s
         "foo" "bar"      3.205B (± 2.8%) i/s -     16.252B in   5.074668s
  "#{'foo'}#{'bar'}"      3.200B (± 3.0%) i/s -     16.128B in   5.045320s

Comparison:
         "foo" "bar": 3205436334.1 i/s
  "#{'foo'}#{'bar'}": 3199944047.1 i/s - same-ish: difference falls within error
            String#+: 108622096.3 i/s - 29.51x  (± 0.00) slower
       String#append: 107484517.1 i/s - 29.82x  (± 0.00) slower
       String#concat: 106968718.8 i/s - 29.97x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   314.098M i/100ms
          String#dup   313.544M i/100ms
Calculating -------------------------------------
           String#+@      3.195B (± 2.6%) i/s -     16.019B in   5.016577s
          String#dup      3.203B (± 2.4%) i/s -     16.304B in   5.093774s

Comparison:
          String#dup: 3202805090.9 i/s
           String#+@: 3195453476.5 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   671.466k i/100ms
       String#match?     1.629M i/100ms
    String#end_with?    10.775M i/100ms
Calculating -------------------------------------
           String#=~     13.890M (± 4.6%) i/s -     69.832M in   5.039306s
       String#match?     16.505M (± 2.1%) i/s -     83.079M in   5.035851s
    String#end_with?    106.828M (± 2.2%) i/s -    538.725M in   5.045599s

Comparison:
    String#end_with?: 106828082.6 i/s
       String#match?: 16505353.9 i/s - 6.47x  (± 0.00) slower
           String#=~: 13889596.2 i/s - 7.69x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   618.829k i/100ms
          String#sub   911.562k i/100ms
String#dup["string"]=
                        10.087M i/100ms
Calculating -------------------------------------
         String#gsub      8.627M (± 9.9%) i/s -     42.699M in   5.003800s
          String#sub      9.984M (± 7.1%) i/s -     50.136M in   5.048536s
String#dup["string"]=
                         99.518M (± 5.4%) i/s -    504.332M in   5.087431s

Comparison:
String#dup["string"]=: 99518360.1 i/s
          String#sub:  9983888.9 i/s - 9.97x  (± 0.00) slower
         String#gsub:  8627027.0 i/s - 11.54x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   193.427k i/100ms
           String#tr   146.491k i/100ms
Calculating -------------------------------------
         String#gsub      4.130M (± 8.8%) i/s -     20.503M in   5.009765s
           String#tr      1.526M (± 3.1%) i/s -      7.764M in   5.092924s

Comparison:
         String#gsub:  4129657.9 i/s
           String#tr:  1526079.1 i/s - 2.71x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   319.068M i/100ms
         With Freeze   313.740M i/100ms
Calculating -------------------------------------
      Without Freeze      3.192B (± 2.1%) i/s -     15.953B in   5.000212s
         With Freeze      3.207B (± 1.5%) i/s -     16.315B in   5.087962s

Comparison:
         With Freeze: 3207222856.6 i/s
      Without Freeze: 3192057400.8 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/    10.256k i/100ms
      String#squeeze    78.747k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    156.699k (± 9.3%) i/s -    779.456k in   5.033263s
      String#squeeze    790.704k (± 4.2%) i/s -      4.016M in   5.089315s

Comparison:
      String#squeeze:   790704.3 i/s
 String#gsub/regex+/:   156698.9 i/s - 5.05x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     4.039M i/100ms
       String#match?     6.317M i/100ms
  String#start_with?    12.758M i/100ms
Calculating -------------------------------------
           String#=~     45.124M (± 3.6%) i/s -    226.210M in   5.020061s
       String#match?     63.339M (± 1.6%) i/s -    322.149M in   5.087497s
  String#start_with?    127.295M (± 3.5%) i/s -    637.900M in   5.017912s

Comparison:
  String#start_with?: 127294543.7 i/s
       String#match?: 63339336.5 i/s - 2.01x  (± 0.00) slower
           String#=~: 45123757.9 i/s - 2.82x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   102.529k i/100ms
    String#[0, n] ==   303.081k i/100ms
   String#[RANGE] ==   353.129k i/100ms
   String#[0...n] ==   284.116k i/100ms
Calculating -------------------------------------
  String#start_with?      6.760M (± 4.3%) i/s -     33.732M in   5.003784s
    String#[0, n] ==      3.066M (± 6.2%) i/s -     15.457M in   5.067491s
   String#[RANGE] ==      3.475M (± 6.1%) i/s -     17.303M in   5.005749s
   String#[0...n] ==      2.716M (± 6.8%) i/s -     13.638M in   5.050751s

Comparison:
  String#start_with?:  6759662.3 i/s
   String#[RANGE] ==:  3475194.8 i/s - 1.95x  (± 0.00) slower
    String#[0, n] ==:  3066386.1 i/s - 2.20x  (± 0.00) slower
   String#[0...n] ==:  2715956.5 i/s - 2.49x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    10.081M i/100ms
 String#sub!'string'   953.649k i/100ms
String#gsub!'string'   829.587k i/100ms
  String#[/regexp/]=     2.709M i/100ms
 String#sub!/regexp/     1.335M i/100ms
String#gsub!/regexp/   797.474k i/100ms
Calculating -------------------------------------
  String#['string']=    100.201M (± 2.2%) i/s -    504.057M in   5.033246s
 String#sub!'string'     10.080M (±17.3%) i/s -     45.775M in   5.039171s
String#gsub!'string'      8.881M (± 9.2%) i/s -     43.968M in   5.007469s
  String#[/regexp/]=     27.288M (± 4.0%) i/s -    138.160M in   5.072709s
 String#sub!/regexp/     13.866M (±10.3%) i/s -     69.433M in   5.071045s
String#gsub!/regexp/      8.331M (± 9.3%) i/s -     41.469M in   5.037110s

Comparison:
  String#['string']=: 100200588.6 i/s
  String#[/regexp/]=: 27287592.6 i/s - 3.67x  (± 0.00) slower
 String#sub!/regexp/: 13866431.5 i/s - 7.23x  (± 0.00) slower
 String#sub!'string': 10080336.2 i/s - 9.94x  (± 0.00) slower
String#gsub!'string':  8880771.3 i/s - 11.28x  (± 0.00) slower
String#gsub!/regexp/:  8331126.6 i/s - 12.03x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.959M i/100ms
        String#chomp     5.653M i/100ms
String#delete_suffix    14.526M i/100ms
Calculating -------------------------------------
          String#sub     29.746M (± 3.1%) i/s -    148.911M in   5.011383s
        String#chomp     56.581M (± 2.2%) i/s -    288.291M in   5.097790s
String#delete_suffix    144.375M (±10.2%) i/s -    726.302M in   5.090596s

Comparison:
String#delete_suffix: 144374801.3 i/s
        String#chomp: 56581458.8 i/s - 2.55x  (± 0.00) slower
          String#sub: 29745742.4 i/s - 4.85x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   318.280M i/100ms
          String#sub    13.702M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.197B (± 2.6%) i/s -     16.232B in   5.080812s
          String#sub    137.482M (± 1.5%) i/s -    698.821M in   5.084170s

Comparison:
String#delete_prefix: 3197079976.6 i/s
          String#sub: 137481531.7 i/s - 23.25x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.778M i/100ms
    String#unpack[0]     1.837M i/100ms
Calculating -------------------------------------
      String#unpack1     18.542M (± 3.3%) i/s -     94.249M in   5.088809s
    String#unpack[0]     18.368M (± 5.7%) i/s -     91.846M in   5.023751s

Comparison:
      String#unpack1: 18541607.5 i/s
    String#unpack[0]: 18367866.1 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.0.0-dev-13ee3a5c, like ruby 3.2.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    16.517k i/100ms
          Time.parse   275.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    349.409k (±19.5%) i/s -      1.668M in   5.007484s
          Time.parse      6.565k (±16.1%) i/s -     31.350k in   5.001355s

Comparison:
        Time.iso8601:   349408.5 i/s
          Time.parse:     6565.4 i/s - 53.22x  (± 0.00) slower

