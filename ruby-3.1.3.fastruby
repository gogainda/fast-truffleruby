$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       530.691k i/100ms
Function with splat arguments
                         8.875k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          5.125M (± 1.7%) i/s -     26.004M in   5.075366s
Function with splat arguments
                         83.401k (± 7.8%) i/s -    417.125k in   5.039616s

Comparison:
Function with single Array argument:  5125002.9 i/s
Function with splat arguments:    83401.0 i/s - 61.45x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   858.371k i/100ms
Sequential Assignment
                       920.021k i/100ms
Calculating -------------------------------------
 Parallel Assignment      8.653M (± 4.0%) i/s -     43.777M in   5.066947s
Sequential Assignment
                          9.145M (± 2.7%) i/s -     46.001M in   5.033626s

Comparison:
Sequential Assignment:  9145315.2 i/s
 Parallel Assignment:  8653225.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   312.040k i/100ms
       attr_accessor   356.835k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.032M (± 2.2%) i/s -     15.290M in   5.045130s
       attr_accessor      3.561M (± 2.6%) i/s -     17.842M in   5.013068s

Comparison:
       attr_accessor:  3561448.0 i/s
   getter_and_setter:  3032088.5 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    61.620k i/100ms
         respond_to?   501.773k i/100ms
Calculating -------------------------------------
      begin...rescue    615.136k (± 2.2%) i/s -      3.081M in   5.010996s
         respond_to?      5.026M (± 1.2%) i/s -     25.590M in   5.092476s

Comparison:
         respond_to?:  5025868.7 i/s
      begin...rescue:   615136.1 i/s - 8.17x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
              normal   200.134k i/100ms
             &method    76.871k i/100ms
Calculating -------------------------------------
              normal      1.990M (± 1.4%) i/s -     10.007M in   5.029773s
             &method    763.543k (± 1.4%) i/s -      3.844M in   5.034846s

Comparison:
              normal:  1989878.6 i/s
             &method:   763543.4 i/s - 2.61x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       162.000  i/100ms
       define_method   203.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.633k (±20.0%) i/s -      7.290k in   5.082226s
       define_method      2.199k (±25.5%) i/s -      9.135k in   5.075921s

Comparison:
       define_method:     2198.7 i/s
module_eval with string:     1632.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         Float#round   119.246k i/100ms
       Kernel#format   138.690k i/100ms
            String#%   122.442k i/100ms
Calculating -------------------------------------
         Float#round      1.225M (± 2.2%) i/s -      6.201M in   5.064095s
       Kernel#format      1.312M (± 1.6%) i/s -      6.657M in   5.076559s
            String#%      1.203M (± 2.1%) i/s -      6.122M in   5.089281s

Comparison:
       Kernel#format:  1311665.7 i/s
         Float#round:  1225031.5 i/s - 1.07x  (± 0.00) slower
            String#%:  1203466.7 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                Hash   591.574k i/100ms
          OpenStruct   328.781k i/100ms
Calculating -------------------------------------
                Hash      6.249M (± 3.0%) i/s -     31.353M in   5.021648s
          OpenStruct      3.359M (± 3.6%) i/s -     17.097M in   5.095987s

Comparison:
                Hash:  6249125.6 i/s
          OpenStruct:  3359259.8 i/s - 1.86x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                Hash   789.838k i/100ms
          OpenStruct     7.151k i/100ms
Calculating -------------------------------------
                Hash      8.617M (± 1.6%) i/s -     43.441M in   5.042336s
          OpenStruct     74.774k (± 3.6%) i/s -    379.003k in   5.075545s

Comparison:
                Hash:  8617424.5 i/s
          OpenStruct:    74774.2 i/s - 115.25x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   424.915k i/100ms
  ancestors.include?    72.816k i/100ms
Calculating -------------------------------------
  less than or equal      4.182M (± 0.6%) i/s -     21.246M in   5.080931s
  ancestors.include?    728.256k (± 1.2%) i/s -      3.714M in   5.100064s

Comparison:
  less than or equal:  4181641.6 i/s
  ancestors.include?:   728256.1 i/s - 5.74x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.512  (± 0.0%) i/s -      3.000  in   5.858593s
         Kernel loop      0.151  (± 0.0%) i/s -      1.000  in   6.609143s

Comparison:
          While Loop:        0.5 i/s
         Kernel loop:        0.2 i/s - 3.38x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.204M i/100ms
         Array#first     1.012M i/100ms
Calculating -------------------------------------
           Array#[0]     11.987M (± 1.8%) i/s -     60.214M in   5.024592s
         Array#first     10.001M (± 1.9%) i/s -     50.579M in   5.059091s

Comparison:
           Array#[0]: 11987453.8 i/s
         Array#first: 10001212.3 i/s - 1.20x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.152M i/100ms
          Array#last     1.082M i/100ms
Calculating -------------------------------------
          Array#[-1]     12.150M (± 3.5%) i/s -     61.054M in   5.031321s
          Array#last     10.679M (± 4.5%) i/s -     54.102M in   5.076177s

Comparison:
          Array#[-1]: 12149691.8 i/s
          Array#last: 10679340.9 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    61.525k i/100ms
Calculating -------------------------------------
                find      0.169  (± 0.0%) i/s -      1.000  in   5.901136s
             bsearch    622.646k (± 2.4%) i/s -      3.138M in   5.042423s

Comparison:
             bsearch:   622646.4 i/s
                find:        0.2 i/s - 3674320.72x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    11.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    114.351  (± 3.5%) i/s -    572.000  in   5.007772s
        Array#insert      1.175  (± 0.0%) i/s -      6.000  in   5.105962s

Comparison:
       Array#unshift:      114.4 i/s
        Array#insert:        1.2 i/s - 97.31x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.722M i/100ms
          Array#size     1.712M i/100ms
         Array#count     1.236M i/100ms
Calculating -------------------------------------
        Array#length     16.847M (± 3.3%) i/s -     84.361M in   5.012943s
          Array#size     16.679M (± 2.5%) i/s -     83.901M in   5.033285s
         Array#count     12.351M (± 2.1%) i/s -     61.792M in   5.005222s

Comparison:
        Array#length: 16846788.3 i/s
          Array#size: 16679498.9 i/s - same-ish: difference falls within error
         Array#count: 12350790.0 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    27.277k i/100ms
        Array#sample   808.022k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    284.373k (± 4.4%) i/s -      1.446M in   5.093755s
        Array#sample      8.036M (± 4.0%) i/s -     40.401M in   5.035937s

Comparison:
        Array#sample:  8035700.2 i/s
 Array#shuffle.first:   284372.6 i/s - 28.26x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    44.724k i/100ms
          Date.parse    23.116k i/100ms
Calculating -------------------------------------
        Date.iso8601    454.228k (± 4.0%) i/s -      2.281M in   5.029329s
          Date.parse    225.088k (± 3.6%) i/s -      1.133M in   5.038661s

Comparison:
        Date.iso8601:   454228.4 i/s
          Date.parse:   225087.8 i/s - 2.02x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    12.573k i/100ms
           Array#map    17.049k i/100ms
Calculating -------------------------------------
   Array#each + push    123.192k (± 3.0%) i/s -    616.077k in   5.005293s
           Array#map    175.045k (± 4.5%) i/s -    886.548k in   5.074663s

Comparison:
           Array#map:   175045.1 i/s
   Array#each + push:   123192.1 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            For loop    20.627k i/100ms
               #each    21.938k i/100ms
Calculating -------------------------------------
            For loop    204.382k (± 3.5%) i/s -      1.031M in   5.052469s
               #each    225.736k (± 3.2%) i/s -      1.141M in   5.058724s

Comparison:
               #each:   225735.8 i/s
            For loop:   204381.8 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          While Loop    25.943k i/100ms
     each_with_index    12.618k i/100ms
Calculating -------------------------------------
          While Loop    257.277k (± 4.5%) i/s -      1.297M in   5.052140s
     each_with_index    123.982k (± 2.6%) i/s -    630.900k in   5.092099s

Comparison:
          While Loop:   257277.0 i/s
     each_with_index:   123982.4 i/s - 2.08x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    39.770k i/100ms
      inject to_proc     1.363k i/100ms
        inject block     1.305k i/100ms
Calculating -------------------------------------
       inject symbol    389.726k (± 1.7%) i/s -      1.949M in   5.001773s
      inject to_proc     14.029k (± 3.3%) i/s -     70.876k in   5.057476s
        inject block     13.166k (± 3.5%) i/s -     66.555k in   5.061120s

Comparison:
       inject symbol:   389725.7 i/s
      inject to_proc:    14029.2 i/s - 27.78x  (± 0.00) slower
        inject block:    13165.9 i/s - 29.60x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     4.577k i/100ms
   Array#map.flatten     2.564k i/100ms
      Array#flat_map     6.185k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     46.535k (± 3.4%) i/s -    233.427k in   5.021947s
   Array#map.flatten     25.042k (± 3.5%) i/s -    125.636k in   5.023324s
      Array#flat_map     60.019k (± 4.0%) i/s -    303.065k in   5.057186s

Comparison:
      Array#flat_map:    60019.3 i/s
Array#map.flatten(1):    46534.5 i/s - 1.29x  (± 0.00) slower
   Array#map.flatten:    25042.0 i/s - 2.40x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    21.439k i/100ms
  Array#reverse_each    20.943k i/100ms
Calculating -------------------------------------
  Array#reverse.each    212.616k (± 3.8%) i/s -      1.072M in   5.048974s
  Array#reverse_each    210.127k (± 2.3%) i/s -      1.068M in   5.085655s

Comparison:
  Array#reverse.each:   212616.3 i/s
  Array#reverse_each:   210127.2 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        13.123k i/100ms
   Enumerable#detect    54.254k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        129.888k (± 1.7%) i/s -      2.598M in  20.010632s
   Enumerable#detect    539.198k (± 1.7%) i/s -     10.797M in  20.029015s

Comparison:
   Enumerable#detect:   539198.3 i/s
Enumerable#select.first:   129888.2 i/s - 4.15x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       151.571k i/100ms
Enumerable#select.last
                        10.976k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.516M (± 1.8%) i/s -      7.730M in   5.101225s
Enumerable#select.last
                        108.159k (± 1.6%) i/s -    548.800k in   5.075217s

Comparison:
Enumerable#reverse.detect:  1515815.2 i/s
Enumerable#select.last:   108159.3 i/s - 14.01x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.769k i/100ms
  Enumerable#sort_by     2.697k i/100ms
     Enumerable#sort     1.482k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         27.625k (± 1.6%) i/s -    138.450k in   5.013062s
  Enumerable#sort_by     27.099k (± 2.2%) i/s -    137.547k in   5.078237s
     Enumerable#sort     15.107k (± 2.1%) i/s -     75.582k in   5.005406s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    27624.5 i/s
  Enumerable#sort_by:    27098.7 i/s - same-ish: difference falls within error
     Enumerable#sort:    15106.8 i/s - 1.83x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    11.191k i/100ms
Enumerable#sort_by...first
                         5.643k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    117.501k (± 3.9%) i/s -    593.123k in   5.055691s
Enumerable#sort_by...first
                         58.002k (± 4.4%) i/s -    293.436k in   5.068779s

Comparison:
   Enumerable#min_by:   117500.7 i/s
Enumerable#sort_by...first:    58002.1 i/s - 2.03x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   235.169k i/100ms
            Hash#dup   174.149k i/100ms
Calculating -------------------------------------
              Hash[]      2.359M (± 3.1%) i/s -     11.994M in   5.090149s
            Hash#dup      1.933M (± 4.0%) i/s -      9.752M in   5.053955s

Comparison:
              Hash[]:  2358578.8 i/s
            Hash#dup:  1932663.7 i/s - 1.22x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.014M i/100ms
  Hash#fetch, symbol   872.733k i/100ms
     Hash#[], string   912.545k i/100ms
  Hash#fetch, string   523.392k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     10.277M (± 1.7%) i/s -     51.725M in   5.034412s
  Hash#fetch, symbol      8.922M (± 3.9%) i/s -     45.382M in   5.094329s
     Hash#[], string      9.562M (± 3.8%) i/s -     48.365M in   5.064950s
  Hash#fetch, string      5.445M (± 3.6%) i/s -     27.216M in   5.005108s

Comparison:
     Hash#[], symbol: 10277368.0 i/s
     Hash#[], string:  9562240.8 i/s - 1.07x  (± 0.00) slower
  Hash#fetch, symbol:  8921690.1 i/s - 1.15x  (± 0.00) slower
  Hash#fetch, string:  5444854.8 i/s - 1.89x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   624.105k i/100ms
             Hash#[]   702.621k i/100ms
          Hash#[] ||   633.598k i/100ms
          Hash#[] &&   280.899k i/100ms
          Hash#fetch   415.320k i/100ms
 Hash#fetch fallback   239.863k i/100ms
Calculating -------------------------------------
            Hash#dig      6.137M (± 2.9%) i/s -     31.205M in   5.088825s
             Hash#[]      7.202M (± 4.1%) i/s -     36.536M in   5.081199s
          Hash#[] ||      6.230M (± 1.8%) i/s -     31.680M in   5.086506s
          Hash#[] &&      2.774M (± 2.8%) i/s -     14.045M in   5.066759s
          Hash#fetch      4.339M (± 3.8%) i/s -     22.012M in   5.079970s
 Hash#fetch fallback      2.517M (± 3.4%) i/s -     12.713M in   5.055792s

Comparison:
             Hash#[]:  7202386.8 i/s
          Hash#[] ||:  6230259.2 i/s - 1.16x  (± 0.00) slower
            Hash#dig:  6137074.2 i/s - 1.17x  (± 0.00) slower
          Hash#fetch:  4339284.8 i/s - 1.66x  (± 0.00) slower
          Hash#[] &&:  2774102.6 i/s - 2.60x  (± 0.00) slower
 Hash#fetch fallback:  2517412.9 i/s - 2.86x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.094M i/100ms
  Hash#fetch + block     1.134M i/100ms
    Hash#fetch + arg   733.407k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     10.684M (± 4.5%) i/s -     53.620M in   5.028950s
  Hash#fetch + block     10.735M (± 3.5%) i/s -     54.426M in   5.075853s
    Hash#fetch + arg      7.437M (± 3.4%) i/s -     37.404M in   5.035337s

Comparison:
  Hash#fetch + block: 10735378.7 i/s
  Hash#fetch + const: 10683688.6 i/s - same-ish: difference falls within error
    Hash#fetch + arg:  7436853.2 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    15.524k i/100ms
         sort + to_h     6.871k i/100ms
Calculating -------------------------------------
      sort_by + to_h    153.606k (± 1.9%) i/s -    776.200k in   5.055007s
         sort + to_h     67.871k (± 0.8%) i/s -    343.550k in   5.062086s

Comparison:
      sort_by + to_h:   153606.1 i/s
         sort + to_h:    67871.2 i/s - 2.26x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   113.228k i/100ms
       Hash#each_key   122.358k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.190M (± 3.2%) i/s -      6.001M in   5.048324s
       Hash#each_key      1.257M (± 3.4%) i/s -      6.363M in   5.067653s

Comparison:
       Hash#each_key:  1256926.7 i/s
      Hash#keys.each:  1189945.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.273k i/100ms
           Hash#key?   664.560k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     12.096k (± 6.4%) i/s -     61.104k in   5.076372s
           Hash#key?      6.622M (± 3.1%) i/s -     33.228M in   5.022053s

Comparison:
           Hash#key?:  6622494.8 i/s
  Hash#keys.include?:    12095.5 i/s - 547.52x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     2.708k i/100ms
            Hash#[]=     6.218k i/100ms
Calculating -------------------------------------
         Hash#merge!     27.128k (± 4.0%) i/s -    138.108k in   5.098850s
            Hash#[]=     62.680k (± 3.4%) i/s -    317.118k in   5.065218s

Comparison:
            Hash#[]=:    62679.7 i/s
         Hash#merge!:    27127.8 i/s - 2.31x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.333k i/100ms
      Hash#merge({})     2.681k i/100ms
 Hash#dup#merge!({})     1.984k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         33.656k (± 3.5%) i/s -    169.983k in   5.056907s
      Hash#merge({})     26.983k (± 3.3%) i/s -    136.731k in   5.072891s
 Hash#dup#merge!({})     19.774k (± 3.6%) i/s -     99.200k in   5.022970s

Comparison:
{}#merge!(Hash) do end:    33655.9 i/s
      Hash#merge({}):    26982.8 i/s - 1.25x  (± 0.00) slower
 Hash#dup#merge!({}):    19774.3 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   247.784k i/100ms
          Hash#merge   223.495k i/100ms
Calculating -------------------------------------
        Hash#**other      2.400M (± 1.8%) i/s -     12.141M in   5.061104s
          Hash#merge      2.184M (± 1.5%) i/s -     10.951M in   5.014277s

Comparison:
        Hash#**other:  2399714.5 i/s
          Hash#merge:  2184478.5 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   956.000  i/100ms
         Hash#merge!     2.583k i/100ms
Calculating -------------------------------------
          Hash#merge      9.658k (± 1.8%) i/s -     48.756k in   5.049967s
         Hash#merge!     24.620k (± 1.1%) i/s -    123.984k in   5.036623s

Comparison:
         Hash#merge!:    24619.7 i/s
          Hash#merge:     9658.0 i/s - 2.55x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      266.035k i/100ms
Array#each             149.906k i/100ms
Array#each_w/_object   111.439k i/100ms
Hash#select-include     45.984k i/100ms
Calculating -------------------------------------
Hash#native-slice         2.732M (± 1.9%) i/s -     13.834M in   5.065952s
Array#each                1.421M (± 2.8%) i/s -      7.195M in   5.068947s
Array#each_w/_object      1.075M (± 4.2%) i/s -      5.461M in   5.089922s
Hash#select-include     440.761k (± 4.5%) i/s -      2.207M in   5.017788s

Comparison:
Hash#native-slice   :  2731721.1 i/s
Array#each          :  1420640.2 i/s - 1.92x  (± 0.00) slower
Array#each_w/_object:  1074637.3 i/s - 2.54x  (± 0.00) slower
Hash#select-include :   440760.5 i/s - 6.20x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.184k i/100ms
         Hash#value?     1.041k i/100ms
Calculating -------------------------------------
Hash#values.include?     11.739k (± 5.6%) i/s -     59.200k in   5.062676s
         Hash#value?     10.630k (± 2.0%) i/s -     54.132k in   5.094467s

Comparison:
Hash#values.include?:    11738.7 i/s
         Hash#value?:    10629.6 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                call   432.487k i/100ms
                send   355.194k i/100ms
      method_missing   253.299k i/100ms
Calculating -------------------------------------
                call      4.113M (± 2.6%) i/s -     20.759M in   5.051154s
                send      3.453M (± 3.0%) i/s -     17.405M in   5.044772s
      method_missing      2.487M (± 2.2%) i/s -     12.665M in   5.095227s

Comparison:
                call:  4112526.4 i/s
                send:  3453133.2 i/s - 1.19x  (± 0.00) slower
      method_missing:  2486796.2 i/s - 1.65x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
               Block     5.095k i/100ms
      Symbol#to_proc     5.611k i/100ms
Calculating -------------------------------------
               Block     51.788k (± 4.1%) i/s -    259.845k in   5.025981s
      Symbol#to_proc     57.884k (± 3.6%) i/s -    291.772k in   5.047161s

Comparison:
      Symbol#to_proc:    57884.4 i/s
               Block:    51787.9 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          block.call   714.648k i/100ms
       block + yield   783.309k i/100ms
        unused block   943.430k i/100ms
               yield   999.663k i/100ms
Calculating -------------------------------------
          block.call      6.731M (± 1.1%) i/s -     34.303M in   5.097121s
       block + yield      7.127M (± 1.0%) i/s -     36.032M in   5.056317s
        unused block      9.416M (± 1.7%) i/s -     47.172M in   5.011215s
               yield      9.572M (± 1.2%) i/s -     47.984M in   5.013620s

Comparison:
               yield:  9571972.7 i/s
        unused block:  9415808.6 i/s - same-ish: difference falls within error
       block + yield:  7126831.3 i/s - 1.34x  (± 0.00) slower
          block.call:  6730686.1 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   201.586k i/100ms
      range#include?     8.536k i/100ms
       range#member?     8.316k i/100ms
       plain compare   315.921k i/100ms
Calculating -------------------------------------
        range#cover?      2.168M (± 3.9%) i/s -     10.886M in   5.028885s
      range#include?     86.940k (± 4.4%) i/s -    435.336k in   5.016785s
       range#member?     85.436k (± 3.8%) i/s -    432.432k in   5.068732s
       plain compare      3.099M (± 4.3%) i/s -     15.480M in   5.004027s

Comparison:
       plain compare:  3099004.1 i/s
        range#cover?:  2167937.0 i/s - 1.43x  (± 0.00) slower
      range#include?:    86940.4 i/s - 35.65x  (± 0.00) slower
       range#member?:    85435.8 i/s - 36.27x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       String#match?   647.688k i/100ms
           String#=~   392.077k i/100ms
          Regexp#===   362.162k i/100ms
        String#match   311.819k i/100ms
Calculating -------------------------------------
       String#match?      6.196M (± 1.2%) i/s -     31.089M in   5.018181s
           String#=~      3.979M (± 3.5%) i/s -     19.996M in   5.031068s
          Regexp#===      3.727M (± 3.0%) i/s -     18.832M in   5.058119s
        String#match      3.181M (± 3.2%) i/s -     15.903M in   5.004762s

Comparison:
       String#match?:  6196143.3 i/s
           String#=~:  3979365.2 i/s - 1.56x  (± 0.00) slower
          Regexp#===:  3726517.7 i/s - 1.66x  (± 0.00) slower
        String#match:  3180783.5 i/s - 1.95x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   396.583k i/100ms
      String#casecmp   553.482k i/100ms
Calculating -------------------------------------
String#downcase + ==      4.119M (± 3.4%) i/s -     20.622M in   5.012004s
      String#casecmp      5.532M (± 3.4%) i/s -     27.674M in   5.008122s

Comparison:
      String#casecmp:  5532303.7 i/s
String#downcase + ==:  4119283.3 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            String#+   384.401k i/100ms
       String#concat   396.196k i/100ms
       String#append   430.311k i/100ms
         "foo" "bar"   862.314k i/100ms
  "#{'foo'}#{'bar'}"   874.485k i/100ms
Calculating -------------------------------------
            String#+      3.730M (± 3.3%) i/s -     18.836M in   5.055567s
       String#concat      4.034M (± 3.5%) i/s -     20.206M in   5.015251s
       String#append      4.354M (± 4.0%) i/s -     21.946M in   5.047990s
         "foo" "bar"      8.552M (± 3.7%) i/s -     43.116M in   5.048233s
  "#{'foo'}#{'bar'}"      8.552M (± 2.6%) i/s -     42.850M in   5.013981s

Comparison:
         "foo" "bar":  8552022.9 i/s
  "#{'foo'}#{'bar'}":  8551638.5 i/s - same-ish: difference falls within error
       String#append:  4354250.0 i/s - 1.96x  (± 0.00) slower
       String#concat:  4033852.6 i/s - 2.12x  (± 0.00) slower
            String#+:  3729691.6 i/s - 2.29x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#+@   711.139k i/100ms
          String#dup   369.288k i/100ms
Calculating -------------------------------------
           String#+@      7.223M (± 3.9%) i/s -     36.268M in   5.028551s
          String#dup      3.695M (± 3.1%) i/s -     18.834M in   5.102113s

Comparison:
           String#+@:  7223462.7 i/s
          String#dup:  3694857.2 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#=~   127.567k i/100ms
       String#match?   272.094k i/100ms
    String#end_with?   399.685k i/100ms
Calculating -------------------------------------
           String#=~      1.303M (± 3.7%) i/s -      6.633M in   5.098297s
       String#match?      2.825M (± 3.9%) i/s -     14.149M in   5.016087s
    String#end_with?      4.053M (± 3.4%) i/s -     20.384M in   5.034258s

Comparison:
    String#end_with?:  4053412.2 i/s
       String#match?:  2824979.7 i/s - 1.43x  (± 0.00) slower
           String#=~:  1302869.3 i/s - 3.11x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    77.205k i/100ms
          String#sub    96.646k i/100ms
String#dup["string"]=
                       115.852k i/100ms
Calculating -------------------------------------
         String#gsub    758.196k (± 2.5%) i/s -      3.860M in   5.094414s
          String#sub    938.697k (± 2.6%) i/s -      4.736M in   5.048308s
String#dup["string"]=
                          1.156M (± 3.2%) i/s -      5.793M in   5.015068s

Comparison:
String#dup["string"]=:  1156219.9 i/s
          String#sub:   938696.8 i/s - 1.23x  (± 0.00) slower
         String#gsub:   758196.5 i/s - 1.52x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    63.741k i/100ms
           String#tr   235.409k i/100ms
Calculating -------------------------------------
         String#gsub    630.957k (± 1.2%) i/s -      3.187M in   5.051859s
           String#tr      2.260M (± 1.5%) i/s -     11.300M in   5.000622s

Comparison:
           String#tr:  2260158.8 i/s
         String#gsub:   630956.7 i/s - 3.58x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   804.894k i/100ms
         With Freeze     1.325M i/100ms
Calculating -------------------------------------
      Without Freeze      8.500M (± 3.8%) i/s -     42.659M in   5.025734s
         With Freeze     13.930M (± 3.3%) i/s -     70.244M in   5.048073s

Comparison:
         With Freeze: 13930283.2 i/s
      Without Freeze:  8499840.5 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.183k i/100ms
      String#squeeze   110.526k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     22.463k (± 2.6%) i/s -    113.516k in   5.056787s
      String#squeeze      1.104M (± 2.6%) i/s -      5.526M in   5.007837s

Comparison:
      String#squeeze:  1104292.7 i/s
 String#gsub/regex+/:    22463.3 i/s - 49.16x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#=~   188.736k i/100ms
       String#match?   509.482k i/100ms
  String#start_with?   616.940k i/100ms
Calculating -------------------------------------
           String#=~      1.892M (± 3.0%) i/s -      9.626M in   5.093252s
       String#match?      5.178M (± 3.9%) i/s -     25.984M in   5.025138s
  String#start_with?      5.974M (± 3.6%) i/s -     30.230M in   5.066352s

Comparison:
  String#start_with?:  5974486.1 i/s
       String#match?:  5178355.6 i/s - 1.15x  (± 0.00) slower
           String#=~:  1891503.4 i/s - 3.16x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   146.666k i/100ms
    String#[0, n] ==    51.426k i/100ms
   String#[RANGE] ==    45.794k i/100ms
   String#[0...n] ==    30.142k i/100ms
Calculating -------------------------------------
  String#start_with?      1.399M (± 2.2%) i/s -      7.040M in   5.033253s
    String#[0, n] ==    503.220k (± 2.3%) i/s -      2.520M in   5.010051s
   String#[RANGE] ==    482.609k (± 3.2%) i/s -      2.427M in   5.034218s
   String#[0...n] ==    306.068k (± 2.5%) i/s -      1.537M in   5.025545s

Comparison:
  String#start_with?:  1399334.2 i/s
    String#[0, n] ==:   503220.2 i/s - 2.78x  (± 0.00) slower
   String#[RANGE] ==:   482609.1 i/s - 2.90x  (± 0.00) slower
   String#[0...n] ==:   306068.3 i/s - 4.57x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   114.256k i/100ms
 String#sub!'string'    82.934k i/100ms
String#gsub!'string'    50.768k i/100ms
  String#[/regexp/]=   100.047k i/100ms
 String#sub!/regexp/    79.598k i/100ms
String#gsub!/regexp/    42.554k i/100ms
Calculating -------------------------------------
  String#['string']=      1.175M (± 4.3%) i/s -      5.941M in   5.067030s
 String#sub!'string'    830.732k (± 4.3%) i/s -      4.147M in   5.000468s
String#gsub!'string'    525.817k (± 3.3%) i/s -      2.640M in   5.025966s
  String#[/regexp/]=      1.028M (± 2.7%) i/s -      5.202M in   5.062392s
 String#sub!/regexp/    818.250k (± 3.5%) i/s -      4.139M in   5.064274s
String#gsub!/regexp/    415.426k (± 2.0%) i/s -      2.085M in   5.021196s

Comparison:
  String#['string']=:  1174644.2 i/s
  String#[/regexp/]=:  1028392.4 i/s - 1.14x  (± 0.00) slower
 String#sub!'string':   830732.1 i/s - 1.41x  (± 0.00) slower
 String#sub!/regexp/:   818249.7 i/s - 1.44x  (± 0.00) slower
String#gsub!'string':   525816.6 i/s - 2.23x  (± 0.00) slower
String#gsub!/regexp/:   415426.0 i/s - 2.83x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          String#sub   100.499k i/100ms
        String#chomp   359.175k i/100ms
String#delete_suffix   376.456k i/100ms
Calculating -------------------------------------
          String#sub      1.021M (± 2.4%) i/s -      5.125M in   5.021720s
        String#chomp      3.643M (± 3.9%) i/s -     18.318M in   5.035381s
String#delete_suffix      3.809M (± 2.5%) i/s -     19.199M in   5.043995s

Comparison:
String#delete_suffix:  3808751.2 i/s
        String#chomp:  3643359.5 i/s - same-ish: difference falls within error
          String#sub:  1021197.5 i/s - 3.73x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   392.049k i/100ms
          String#sub   103.578k i/100ms
Calculating -------------------------------------
String#delete_prefix      3.964M (± 2.5%) i/s -     19.994M in   5.047445s
          String#sub      1.066M (± 3.8%) i/s -      5.386M in   5.059718s

Comparison:
String#delete_prefix:  3963819.8 i/s
          String#sub:  1065970.5 i/s - 3.72x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   387.850k i/100ms
    String#unpack[0]   292.869k i/100ms
Calculating -------------------------------------
      String#unpack1      3.857M (± 1.8%) i/s -     19.392M in   5.029429s
    String#unpack[0]      2.967M (± 3.2%) i/s -     14.936M in   5.039794s

Comparison:
      String#unpack1:  3856965.0 i/s
    String#unpack[0]:  2966539.1 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    18.503k i/100ms
          Time.parse     6.532k i/100ms
Calculating -------------------------------------
        Time.iso8601    190.681k (± 2.1%) i/s -    962.156k in   5.048095s
          Time.parse     66.160k (± 2.9%) i/s -    333.132k in   5.039393s

Comparison:
        Time.iso8601:   190680.8 i/s
          Time.parse:    66159.8 i/s - 2.88x  (± 0.00) slower

