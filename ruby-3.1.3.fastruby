$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       606.943k i/100ms
Function with splat arguments
                        22.643k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          6.077M (± 0.1%) i/s -     30.954M in   5.093493s
Function with splat arguments
                        223.574k (± 5.3%) i/s -      1.132M in   5.085165s

Comparison:
Function with single Array argument:  6077194.2 i/s
Function with splat arguments:   223573.8 i/s - 27.18x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   893.109k i/100ms
Sequential Assignment
                       909.330k i/100ms
Calculating -------------------------------------
 Parallel Assignment      8.939M (± 0.2%) i/s -     45.549M in   5.095340s
Sequential Assignment
                          9.093M (± 0.2%) i/s -     45.466M in   5.000067s

Comparison:
Sequential Assignment:  9093199.3 i/s
 Parallel Assignment:  8939301.1 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   370.197k i/100ms
       attr_accessor   424.653k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.704M (± 0.1%) i/s -     18.880M in   5.097040s
       attr_accessor      4.171M (± 0.1%) i/s -     21.233M in   5.090155s

Comparison:
       attr_accessor:  4171325.7 i/s
   getter_and_setter:  3704122.1 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    67.229k i/100ms
         respond_to?   582.090k i/100ms
Calculating -------------------------------------
      begin...rescue    678.089k (± 0.7%) i/s -      3.429M in   5.056613s
         respond_to?      5.815M (± 0.2%) i/s -     29.104M in   5.004972s

Comparison:
         respond_to?:  5815141.9 i/s
      begin...rescue:   678088.6 i/s - 8.58x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
              normal   232.694k i/100ms
             &method    89.081k i/100ms
Calculating -------------------------------------
              normal      2.325M (± 0.1%) i/s -     11.635M in   5.003411s
             &method    890.864k (± 0.1%) i/s -      4.543M in   5.099699s

Comparison:
              normal:  2325354.7 i/s
             &method:   890863.8 i/s - 2.61x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       191.000  i/100ms
       define_method   242.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.037k (±19.4%) i/s -      9.168k in   5.032990s
       define_method      2.537k (±16.5%) i/s -     12.100k in   5.085914s

Comparison:
       define_method:     2537.4 i/s
module_eval with string:     2036.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         Float#round   140.393k i/100ms
       Kernel#format   153.944k i/100ms
            String#%   135.188k i/100ms
Calculating -------------------------------------
         Float#round      1.400M (± 0.3%) i/s -      7.020M in   5.013589s
       Kernel#format      1.538M (± 0.1%) i/s -      7.697M in   5.005828s
            String#%      1.364M (± 0.1%) i/s -      6.895M in   5.056446s

Comparison:
       Kernel#format:  1537648.5 i/s
         Float#round:  1400140.6 i/s - 1.10x  (± 0.00) slower
            String#%:  1363526.2 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                Hash   720.465k i/100ms
          OpenStruct   366.546k i/100ms
Calculating -------------------------------------
                Hash      7.209M (± 0.2%) i/s -     36.744M in   5.096647s
          OpenStruct      3.663M (± 0.1%) i/s -     18.327M in   5.003371s

Comparison:
                Hash:  7209410.6 i/s
          OpenStruct:  3662992.7 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                Hash   881.697k i/100ms
          OpenStruct     8.677k i/100ms
Calculating -------------------------------------
                Hash      9.433M (± 0.2%) i/s -     47.612M in   5.047465s
          OpenStruct     87.509k (± 2.0%) i/s -    442.527k in   5.059114s

Comparison:
                Hash:  9432816.4 i/s
          OpenStruct:    87509.3 i/s - 107.79x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   478.603k i/100ms
  ancestors.include?    92.461k i/100ms
Calculating -------------------------------------
  less than or equal      4.828M (± 0.2%) i/s -     24.409M in   5.055952s
  ancestors.include?    920.809k (± 0.2%) i/s -      4.623M in   5.020664s

Comparison:
  less than or equal:  4827747.7 i/s
  ancestors.include?:   920808.6 i/s - 5.24x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.456  (± 0.0%) i/s -      3.000  in   6.578679s
         Kernel loop      0.171  (± 0.0%) i/s -      1.000  in   5.858252s

Comparison:
          While Loop:        0.5 i/s
         Kernel loop:        0.2 i/s - 2.67x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.204M i/100ms
         Array#first     1.039M i/100ms
Calculating -------------------------------------
           Array#[0]     12.040M (± 0.1%) i/s -     61.401M in   5.099691s
         Array#first     10.394M (± 0.1%) i/s -     51.969M in   5.000097s

Comparison:
           Array#[0]: 12040104.4 i/s
         Array#first: 10393523.9 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.303M i/100ms
          Array#last     1.069M i/100ms
Calculating -------------------------------------
          Array#[-1]     13.016M (± 0.3%) i/s -     65.139M in   5.004595s
          Array#last     10.690M (± 0.1%) i/s -     53.456M in   5.000485s

Comparison:
          Array#[-1]: 13015960.6 i/s
          Array#last: 10690258.2 i/s - 1.22x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    71.934k i/100ms
Calculating -------------------------------------
                find      0.207  (± 0.0%) i/s -      2.000  in   9.667696s
             bsearch    719.406k (± 0.3%) i/s -      3.669M in   5.099586s

Comparison:
             bsearch:   719405.7 i/s
                find:        0.2 i/s - 3477497.84x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    14.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    146.123  (± 2.1%) i/s -    742.000  in   5.080841s
        Array#insert      1.151  (± 0.0%) i/s -      6.000  in   5.213756s

Comparison:
       Array#unshift:      146.1 i/s
        Array#insert:        1.2 i/s - 126.97x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.898M i/100ms
          Array#size     1.896M i/100ms
         Array#count     1.372M i/100ms
Calculating -------------------------------------
        Array#length     18.991M (± 0.5%) i/s -     96.809M in   5.097793s
          Array#size     18.982M (± 0.6%) i/s -     96.672M in   5.093055s
         Array#count     13.750M (± 0.4%) i/s -     69.990M in   5.090080s

Comparison:
        Array#length: 18990885.2 i/s
          Array#size: 18981905.0 i/s - same-ish: difference falls within error
         Array#count: 13750485.2 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    33.755k i/100ms
        Array#sample   770.355k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    338.250k (± 0.5%) i/s -      1.722M in   5.089580s
        Array#sample      7.711M (± 0.0%) i/s -     39.288M in   5.094820s

Comparison:
        Array#sample:  7711383.5 i/s
 Array#shuffle.first:   338249.8 i/s - 22.80x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    48.141k i/100ms
          Date.parse    23.813k i/100ms
Calculating -------------------------------------
        Date.iso8601    478.761k (± 0.2%) i/s -      2.407M in   5.027681s
          Date.parse    238.220k (± 0.3%) i/s -      1.214M in   5.098107s

Comparison:
        Date.iso8601:   478761.3 i/s
          Date.parse:   238220.5 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    14.228k i/100ms
           Array#map    20.864k i/100ms
Calculating -------------------------------------
   Array#each + push    142.189k (± 0.3%) i/s -    711.400k in   5.003230s
           Array#map    208.454k (± 0.3%) i/s -      1.043M in   5.004504s

Comparison:
           Array#map:   208453.8 i/s
   Array#each + push:   142189.1 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            For loop    21.324k i/100ms
               #each    23.895k i/100ms
Calculating -------------------------------------
            For loop    214.233k (± 0.1%) i/s -      1.088M in   5.076365s
               #each    237.793k (± 0.1%) i/s -      1.195M in   5.024328s

Comparison:
               #each:   237793.2 i/s
            For loop:   214232.9 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          While Loop    24.529k i/100ms
     each_with_index    14.517k i/100ms
Calculating -------------------------------------
          While Loop    245.677k (± 0.1%) i/s -      1.251M in   5.091969s
     each_with_index    145.339k (± 0.1%) i/s -    740.367k in   5.094075s

Comparison:
          While Loop:   245677.0 i/s
     each_with_index:   145339.0 i/s - 1.69x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    56.212k i/100ms
      inject to_proc     1.657k i/100ms
        inject block     1.574k i/100ms
Calculating -------------------------------------
       inject symbol    559.930k (± 0.5%) i/s -      2.811M in   5.019704s
      inject to_proc     16.584k (± 0.1%) i/s -     84.507k in   5.095745s
        inject block     15.741k (± 0.3%) i/s -     80.274k in   5.099599s

Comparison:
       inject symbol:   559930.0 i/s
      inject to_proc:    16583.9 i/s - 33.76x  (± 0.00) slower
        inject block:    15741.4 i/s - 35.57x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     5.541k i/100ms
   Array#map.flatten     3.027k i/100ms
      Array#flat_map     7.258k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     55.698k (± 0.3%) i/s -    282.591k in   5.073649s
   Array#map.flatten     30.225k (± 0.3%) i/s -    151.350k in   5.007432s
      Array#flat_map     73.459k (± 0.2%) i/s -    370.158k in   5.038995s

Comparison:
      Array#flat_map:    73458.9 i/s
Array#map.flatten(1):    55698.1 i/s - 1.32x  (± 0.00) slower
   Array#map.flatten:    30225.4 i/s - 2.43x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    23.307k i/100ms
  Array#reverse_each    24.381k i/100ms
Calculating -------------------------------------
  Array#reverse.each    233.635k (± 0.2%) i/s -      1.189M in   5.087691s
  Array#reverse_each    243.830k (± 0.1%) i/s -      1.243M in   5.099580s

Comparison:
  Array#reverse_each:   243830.2 i/s
  Array#reverse.each:   233634.6 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        15.636k i/100ms
   Enumerable#detect    62.386k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        156.295k (± 0.4%) i/s -      3.127M in  20.008646s
   Enumerable#detect    625.465k (± 0.1%) i/s -     12.540M in  20.048445s

Comparison:
   Enumerable#detect:   625465.0 i/s
Enumerable#select.first:   156295.3 i/s - 4.00x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       176.590k i/100ms
Enumerable#select.last
                        14.299k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.782M (± 0.5%) i/s -      9.006M in   5.052796s
Enumerable#select.last
                        143.030k (± 0.4%) i/s -    729.249k in   5.098656s

Comparison:
Enumerable#reverse.detect:  1782442.4 i/s
Enumerable#select.last:   143030.4 i/s - 12.46x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.787k i/100ms
  Enumerable#sort_by     3.588k i/100ms
     Enumerable#sort     1.900k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         37.912k (± 0.2%) i/s -    193.137k in   5.094383s
  Enumerable#sort_by     35.797k (± 0.5%) i/s -    179.400k in   5.011729s
     Enumerable#sort     18.988k (± 0.2%) i/s -     95.000k in   5.003222s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    37912.0 i/s
  Enumerable#sort_by:    35797.0 i/s - 1.06x  (± 0.00) slower
     Enumerable#sort:    18987.8 i/s - 2.00x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    13.276k i/100ms
Enumerable#sort_by...first
                         6.724k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    132.744k (± 0.1%) i/s -    663.800k in   5.000591s
Enumerable#sort_by...first
                         67.491k (± 0.4%) i/s -    342.924k in   5.081116s

Comparison:
   Enumerable#min_by:   132744.3 i/s
Enumerable#sort_by...first:    67491.1 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   296.610k i/100ms
            Hash#dup   232.237k i/100ms
Calculating -------------------------------------
              Hash[]      2.636M (± 0.9%) i/s -     13.347M in   5.063089s
            Hash#dup      2.096M (± 0.4%) i/s -     10.683M in   5.097297s

Comparison:
              Hash[]:  2636427.6 i/s
            Hash#dup:  2095831.4 i/s - 1.26x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.171M i/100ms
  Hash#fetch, symbol   911.638k i/100ms
     Hash#[], string   966.697k i/100ms
  Hash#fetch, string   598.343k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     11.716M (± 0.4%) i/s -     59.708M in   5.096240s
  Hash#fetch, symbol      9.116M (± 0.1%) i/s -     45.582M in   5.000035s
     Hash#[], string      9.664M (± 0.4%) i/s -     48.335M in   5.001549s
  Hash#fetch, string      5.980M (± 0.1%) i/s -     29.917M in   5.002808s

Comparison:
     Hash#[], symbol: 11716223.0 i/s
     Hash#[], string:  9664104.7 i/s - 1.21x  (± 0.00) slower
  Hash#fetch, symbol:  9116319.2 i/s - 1.29x  (± 0.00) slower
  Hash#fetch, string:  5980077.8 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   727.963k i/100ms
             Hash#[]   751.219k i/100ms
          Hash#[] ||   692.873k i/100ms
          Hash#[] &&   320.496k i/100ms
          Hash#fetch   498.282k i/100ms
 Hash#fetch fallback   307.626k i/100ms
Calculating -------------------------------------
            Hash#dig      7.265M (± 0.6%) i/s -     36.398M in   5.010174s
             Hash#[]      7.463M (± 0.3%) i/s -     37.561M in   5.033289s
          Hash#[] ||      6.856M (± 0.5%) i/s -     34.644M in   5.053229s
          Hash#[] &&      3.204M (± 0.4%) i/s -     16.025M in   5.001832s
          Hash#fetch      5.012M (± 0.7%) i/s -     25.412M in   5.070351s
 Hash#fetch fallback      3.054M (± 0.7%) i/s -     15.381M in   5.037071s

Comparison:
             Hash#[]:  7462570.6 i/s
            Hash#dig:  7265115.1 i/s - 1.03x  (± 0.00) slower
          Hash#[] ||:  6855914.0 i/s - 1.09x  (± 0.00) slower
          Hash#fetch:  5012177.3 i/s - 1.49x  (± 0.00) slower
          Hash#[] &&:  3203848.9 i/s - 2.33x  (± 0.00) slower
 Hash#fetch fallback:  3053788.7 i/s - 2.44x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.104M i/100ms
  Hash#fetch + block     1.077M i/100ms
    Hash#fetch + arg   824.660k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     11.024M (± 0.2%) i/s -     55.201M in   5.007402s
  Hash#fetch + block     10.990M (± 0.1%) i/s -     55.997M in   5.095392s
    Hash#fetch + arg      8.243M (± 0.3%) i/s -     41.233M in   5.002292s

Comparison:
  Hash#fetch + const: 11023933.6 i/s
  Hash#fetch + block: 10989765.3 i/s - 1.00x  (± 0.00) slower
    Hash#fetch + arg:  8242921.7 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    20.492k i/100ms
         sort + to_h     8.695k i/100ms
Calculating -------------------------------------
      sort_by + to_h    203.833k (± 1.3%) i/s -      1.025M in   5.027532s
         sort + to_h     87.136k (± 0.1%) i/s -    443.445k in   5.089130s

Comparison:
      sort_by + to_h:   203833.2 i/s
         sort + to_h:    87135.8 i/s - 2.34x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   154.526k i/100ms
       Hash#each_key   164.693k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.545M (± 0.1%) i/s -      7.881M in   5.099563s
       Hash#each_key      1.650M (± 0.0%) i/s -      8.399M in   5.089758s

Comparison:
       Hash#each_key:  1650244.3 i/s
      Hash#keys.each:  1545394.7 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.800k i/100ms
           Hash#key?   703.433k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     17.825k (± 5.0%) i/s -     90.000k in   5.066075s
           Hash#key?      7.030M (± 0.0%) i/s -     35.172M in   5.003388s

Comparison:
           Hash#key?:  7029567.2 i/s
  Hash#keys.include?:    17824.6 i/s - 394.37x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.048k i/100ms
            Hash#[]=     7.477k i/100ms
Calculating -------------------------------------
         Hash#merge!     30.561k (± 0.1%) i/s -    155.448k in   5.086500s
            Hash#[]=     74.873k (± 0.6%) i/s -    381.327k in   5.093134s

Comparison:
            Hash#[]=:    74873.2 i/s
         Hash#merge!:    30560.9 i/s - 2.45x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.725k i/100ms
      Hash#merge({})     2.936k i/100ms
 Hash#dup#merge!({})     2.110k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         37.118k (± 0.3%) i/s -    186.250k in   5.017832s
      Hash#merge({})     29.200k (± 0.1%) i/s -    146.800k in   5.027452s
 Hash#dup#merge!({})     21.033k (± 0.1%) i/s -    105.500k in   5.015852s

Comparison:
{}#merge!(Hash) do end:    37117.9 i/s
      Hash#merge({}):    29199.7 i/s - 1.27x  (± 0.00) slower
 Hash#dup#merge!({}):    21033.3 i/s - 1.76x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   285.194k i/100ms
          Hash#merge   256.790k i/100ms
Calculating -------------------------------------
        Hash#**other      2.882M (± 0.7%) i/s -     14.545M in   5.047216s
          Hash#merge      2.568M (± 0.2%) i/s -     13.096M in   5.099149s

Comparison:
        Hash#**other:  2881924.2 i/s
          Hash#merge:  2568337.3 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.218k i/100ms
         Hash#merge!     3.029k i/100ms
Calculating -------------------------------------
          Hash#merge     12.275k (± 1.7%) i/s -     62.118k in   5.062069s
         Hash#merge!     30.291k (± 0.2%) i/s -    151.450k in   4.999932s

Comparison:
         Hash#merge!:    30290.6 i/s
          Hash#merge:    12274.8 i/s - 2.47x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      330.211k i/100ms
Array#each             172.135k i/100ms
Array#each_w/_object   121.106k i/100ms
Hash#select-include     58.200k i/100ms
Calculating -------------------------------------
Hash#native-slice         3.263M (± 0.2%) i/s -     16.511M in   5.060125s
Array#each                1.716M (± 0.9%) i/s -      8.607M in   5.015268s
Array#each_w/_object      1.222M (± 1.3%) i/s -      6.176M in   5.055474s
Hash#select-include     585.452k (± 0.3%) i/s -      2.968M in   5.069969s

Comparison:
Hash#native-slice   :  3262893.2 i/s
Array#each          :  1716253.5 i/s - 1.90x  (± 0.00) slower
Array#each_w/_object:  1221939.0 i/s - 2.67x  (± 0.00) slower
Hash#select-include :   585451.9 i/s - 5.57x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   927.000  i/100ms
         Hash#value?   830.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      9.175k (± 4.3%) i/s -     46.350k in   5.063070s
         Hash#value?      8.299k (± 0.3%) i/s -     41.500k in   5.000697s

Comparison:
Hash#values.include?:     9174.9 i/s
         Hash#value?:     8298.9 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                call   526.459k i/100ms
                send   414.828k i/100ms
      method_missing   298.651k i/100ms
Calculating -------------------------------------
                call      5.282M (± 0.1%) i/s -     26.849M in   5.083140s
                send      4.155M (± 0.1%) i/s -     21.156M in   5.091534s
      method_missing      2.971M (± 0.1%) i/s -     14.933M in   5.026662s

Comparison:
                call:  5282054.1 i/s
                send:  4155179.6 i/s - 1.27x  (± 0.00) slower
      method_missing:  2970675.9 i/s - 1.78x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
               Block     6.913k i/100ms
      Symbol#to_proc     7.580k i/100ms
Calculating -------------------------------------
               Block     69.020k (± 0.8%) i/s -    345.650k in   5.008239s
      Symbol#to_proc     76.350k (± 0.6%) i/s -    386.580k in   5.063473s

Comparison:
      Symbol#to_proc:    76349.8 i/s
               Block:    69020.4 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          block.call   752.271k i/100ms
       block + yield   819.292k i/100ms
        unused block     1.083M i/100ms
               yield     1.031M i/100ms
Calculating -------------------------------------
          block.call      7.520M (± 0.2%) i/s -     37.614M in   5.002153s
       block + yield      8.197M (± 0.1%) i/s -     41.784M in   5.097558s
        unused block     10.839M (± 0.4%) i/s -     55.218M in   5.094245s
               yield     10.370M (± 0.1%) i/s -     52.591M in   5.071284s

Comparison:
        unused block: 10839402.7 i/s
               yield: 10370287.9 i/s - 1.05x  (± 0.00) slower
       block + yield:  8196858.9 i/s - 1.32x  (± 0.00) slower
          block.call:  7519504.2 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   243.330k i/100ms
      range#include?     9.376k i/100ms
       range#member?     9.350k i/100ms
       plain compare   346.349k i/100ms
Calculating -------------------------------------
        range#cover?      2.437M (± 0.1%) i/s -     12.410M in   5.092741s
      range#include?     93.435k (± 0.2%) i/s -    468.800k in   5.017421s
       range#member?     93.713k (± 0.3%) i/s -    476.850k in   5.088437s
       plain compare      3.457M (± 0.3%) i/s -     17.317M in   5.009969s

Comparison:
       plain compare:  3456640.3 i/s
        range#cover?:  2436769.7 i/s - 1.42x  (± 0.00) slower
       range#member?:    93713.2 i/s - 36.89x  (± 0.00) slower
      range#include?:    93434.9 i/s - 37.00x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       String#match?   716.604k i/100ms
           String#=~   478.751k i/100ms
          Regexp#===   433.568k i/100ms
        String#match   347.295k i/100ms
Calculating -------------------------------------
       String#match?      7.165M (± 0.0%) i/s -     35.830M in   5.000550s
           String#=~      4.837M (± 0.1%) i/s -     24.416M in   5.048041s
          Regexp#===      4.334M (± 0.1%) i/s -     21.678M in   5.001767s
        String#match      3.462M (± 0.2%) i/s -     17.365M in   5.016435s

Comparison:
       String#match?:  7165252.8 i/s
           String#=~:  4836791.6 i/s - 1.48x  (± 0.00) slower
          Regexp#===:  4334150.6 i/s - 1.65x  (± 0.00) slower
        String#match:  3461579.7 i/s - 2.07x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   488.866k i/100ms
      String#casecmp   620.021k i/100ms
Calculating -------------------------------------
String#downcase + ==      4.890M (± 0.3%) i/s -     24.932M in   5.098263s
      String#casecmp      6.205M (± 0.1%) i/s -     31.621M in   5.096100s

Comparison:
      String#casecmp:  6204958.7 i/s
String#downcase + ==:  4890370.9 i/s - 1.27x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            String#+   460.504k i/100ms
       String#concat   471.721k i/100ms
       String#append   527.945k i/100ms
         "foo" "bar"   938.175k i/100ms
  "#{'foo'}#{'bar'}"   975.412k i/100ms
Calculating -------------------------------------
            String#+      4.607M (± 0.7%) i/s -     23.486M in   5.098506s
       String#concat      4.715M (± 1.0%) i/s -     23.586M in   5.003343s
       String#append      5.282M (± 0.5%) i/s -     26.925M in   5.097865s
         "foo" "bar"      9.418M (± 0.5%) i/s -     47.847M in   5.080563s
  "#{'foo'}#{'bar'}"      9.710M (± 0.8%) i/s -     48.771M in   5.022827s

Comparison:
  "#{'foo'}#{'bar'}":  9710444.5 i/s
         "foo" "bar":  9417864.1 i/s - 1.03x  (± 0.00) slower
       String#append:  5281773.2 i/s - 1.84x  (± 0.00) slower
       String#concat:  4714543.0 i/s - 2.06x  (± 0.00) slower
            String#+:  4606616.8 i/s - 2.11x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#+@   810.478k i/100ms
          String#dup   438.237k i/100ms
Calculating -------------------------------------
           String#+@      8.107M (± 0.6%) i/s -     41.334M in   5.098816s
          String#dup      4.380M (± 0.3%) i/s -     21.912M in   5.002629s

Comparison:
           String#+@:  8106920.8 i/s
          String#dup:  4380101.9 i/s - 1.85x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#=~   144.762k i/100ms
       String#match?   323.178k i/100ms
    String#end_with?   463.735k i/100ms
Calculating -------------------------------------
           String#=~      1.456M (± 0.1%) i/s -      7.383M in   5.069025s
       String#match?      3.229M (± 0.2%) i/s -     16.159M in   5.004687s
    String#end_with?      4.596M (± 0.4%) i/s -     23.187M in   5.044555s

Comparison:
    String#end_with?:  4596469.2 i/s
       String#match?:  3228763.0 i/s - 1.42x  (± 0.00) slower
           String#=~:  1456467.2 i/s - 3.16x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    79.684k i/100ms
          String#sub   109.996k i/100ms
String#dup["string"]=
                       138.285k i/100ms
Calculating -------------------------------------
         String#gsub    791.904k (± 0.5%) i/s -      3.984M in   5.031292s
          String#sub      1.123M (± 1.0%) i/s -      5.720M in   5.093217s
String#dup["string"]=
                          1.417M (± 0.4%) i/s -      7.191M in   5.076500s

Comparison:
String#dup["string"]=:  1416509.4 i/s
          String#sub:  1123130.1 i/s - 1.26x  (± 0.00) slower
         String#gsub:   791904.5 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    71.362k i/100ms
           String#tr   278.919k i/100ms
Calculating -------------------------------------
         String#gsub    706.393k (± 0.5%) i/s -      3.568M in   5.051304s
           String#tr      2.787M (± 0.1%) i/s -     13.946M in   5.003673s

Comparison:
           String#tr:  2787148.2 i/s
         String#gsub:   706393.2 i/s - 3.95x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   941.929k i/100ms
         With Freeze     1.459M i/100ms
Calculating -------------------------------------
      Without Freeze      9.406M (± 0.4%) i/s -     47.096M in   5.007251s
         With Freeze     14.580M (± 0.2%) i/s -     72.945M in   5.003201s

Comparison:
         With Freeze: 14579811.9 i/s
      Without Freeze:  9405774.3 i/s - 1.55x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.616k i/100ms
      String#squeeze   128.972k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     26.130k (± 0.2%) i/s -    130.800k in   5.005834s
      String#squeeze      1.296M (± 0.2%) i/s -      6.578M in   5.075981s

Comparison:
      String#squeeze:  1295829.2 i/s
 String#gsub/regex+/:    26129.6 i/s - 49.59x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#=~   215.284k i/100ms
       String#match?   584.583k i/100ms
  String#start_with?   644.024k i/100ms
Calculating -------------------------------------
           String#=~      2.147M (± 0.2%) i/s -     10.764M in   5.014559s
       String#match?      5.852M (± 0.1%) i/s -     29.814M in   5.094770s
  String#start_with?      6.448M (± 0.1%) i/s -     32.845M in   5.093854s

Comparison:
  String#start_with?:  6448015.7 i/s
       String#match?:  5851839.3 i/s - 1.10x  (± 0.00) slower
           String#=~:  2146595.9 i/s - 3.00x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   179.082k i/100ms
    String#[0, n] ==    69.065k i/100ms
   String#[RANGE] ==    62.648k i/100ms
   String#[0...n] ==    34.668k i/100ms
Calculating -------------------------------------
  String#start_with?      1.791M (± 0.3%) i/s -      9.133M in   5.098877s
    String#[0, n] ==    689.366k (± 0.2%) i/s -      3.453M in   5.009341s
   String#[RANGE] ==    626.812k (± 0.4%) i/s -      3.195M in   5.097378s
   String#[0...n] ==    342.154k (± 0.2%) i/s -      1.733M in   5.066164s

Comparison:
  String#start_with?:  1791228.8 i/s
    String#[0, n] ==:   689365.9 i/s - 2.60x  (± 0.00) slower
   String#[RANGE] ==:   626812.1 i/s - 2.86x  (± 0.00) slower
   String#[0...n] ==:   342154.1 i/s - 5.24x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   138.092k i/100ms
 String#sub!'string'    90.706k i/100ms
String#gsub!'string'    57.063k i/100ms
  String#[/regexp/]=   106.979k i/100ms
 String#sub!/regexp/    86.292k i/100ms
String#gsub!/regexp/    45.727k i/100ms
Calculating -------------------------------------
  String#['string']=      1.379M (± 0.7%) i/s -      6.905M in   5.006638s
 String#sub!'string'    911.310k (± 0.2%) i/s -      4.626M in   5.076228s
String#gsub!'string'    572.763k (± 0.4%) i/s -      2.910M in   5.081098s
  String#[/regexp/]=      1.068M (± 0.4%) i/s -      5.349M in   5.010325s
 String#sub!/regexp/    859.590k (± 0.5%) i/s -      4.315M in   5.019505s
String#gsub!/regexp/    459.253k (± 0.2%) i/s -      2.332M in   5.078010s

Comparison:
  String#['string']=:  1379157.9 i/s
  String#[/regexp/]=:  1067605.2 i/s - 1.29x  (± 0.00) slower
 String#sub!'string':   911310.2 i/s - 1.51x  (± 0.00) slower
 String#sub!/regexp/:   859589.6 i/s - 1.60x  (± 0.00) slower
String#gsub!'string':   572763.5 i/s - 2.41x  (± 0.00) slower
String#gsub!/regexp/:   459253.0 i/s - 3.00x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          String#sub   113.252k i/100ms
        String#chomp   424.023k i/100ms
String#delete_suffix   476.309k i/100ms
Calculating -------------------------------------
          String#sub      1.146M (± 2.4%) i/s -      5.776M in   5.045364s
        String#chomp      4.236M (± 0.2%) i/s -     21.201M in   5.004644s
String#delete_suffix      4.766M (± 0.1%) i/s -     24.292M in   5.096815s

Comparison:
String#delete_suffix:  4766077.3 i/s
        String#chomp:  4236315.4 i/s - 1.13x  (± 0.00) slower
          String#sub:  1145503.3 i/s - 4.16x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   478.066k i/100ms
          String#sub   116.550k i/100ms
Calculating -------------------------------------
String#delete_prefix      4.788M (± 0.3%) i/s -     24.381M in   5.092218s
          String#sub      1.197M (± 1.1%) i/s -      6.061M in   5.065006s

Comparison:
String#delete_prefix:  4787998.3 i/s
          String#sub:  1196700.9 i/s - 4.00x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   466.189k i/100ms
    String#unpack[0]   340.002k i/100ms
Calculating -------------------------------------
      String#unpack1      4.677M (± 0.4%) i/s -     23.776M in   5.083247s
    String#unpack[0]      3.420M (± 0.1%) i/s -     17.340M in   5.070807s

Comparison:
      String#unpack1:  4677313.4 i/s
    String#unpack[0]:  3419601.8 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    21.373k i/100ms
          Time.parse     7.485k i/100ms
Calculating -------------------------------------
        Time.iso8601    220.257k (± 0.1%) i/s -      1.111M in   5.045912s
          Time.parse     74.767k (± 0.5%) i/s -    374.250k in   5.005652s

Comparison:
        Time.iso8601:   220257.1 i/s
          Time.parse:    74767.1 i/s - 2.95x  (± 0.00) slower

