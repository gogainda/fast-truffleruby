$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       604.023k i/100ms
Function with splat arguments
                         7.858k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          6.040M (± 0.1%) i/s -     30.201M in   5.000441s
Function with splat arguments
                         79.004k (± 4.8%) i/s -    400.758k in   5.090020s

Comparison:
Function with single Array argument:  6039700.4 i/s
Function with splat arguments:    79004.0 i/s - 76.45x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.029M i/100ms
Sequential Assignment
                         1.060M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.294M (± 0.1%) i/s -     52.481M in   5.098170s
Sequential Assignment
                         10.541M (± 0.0%) i/s -     52.982M in   5.026132s

Comparison:
Sequential Assignment: 10541309.4 i/s
 Parallel Assignment: 10294138.7 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   366.777k i/100ms
       attr_accessor   401.239k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.671M (± 0.1%) i/s -     18.706M in   5.095617s
       attr_accessor      4.007M (± 0.1%) i/s -     20.062M in   5.006808s

Comparison:
       attr_accessor:  4006934.9 i/s
   getter_and_setter:  3670928.1 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    70.402k i/100ms
         respond_to?   588.693k i/100ms
Calculating -------------------------------------
      begin...rescue    708.735k (± 0.3%) i/s -      3.591M in   5.066102s
         respond_to?      5.889M (± 0.1%) i/s -     30.023M in   5.098361s

Comparison:
         respond_to?:  5888826.6 i/s
      begin...rescue:   708735.4 i/s - 8.31x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
              normal   240.570k i/100ms
             &method    89.383k i/100ms
Calculating -------------------------------------
              normal      2.406M (± 0.1%) i/s -     12.028M in   4.999925s
             &method    894.825k (± 0.3%) i/s -      4.559M in   5.094364s

Comparison:
              normal:  2405738.6 i/s
             &method:   894824.6 i/s - 2.69x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       178.000  i/100ms
       define_method   226.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.968k (±20.4%) i/s -      8.722k in   5.072032s
       define_method      2.373k (±23.7%) i/s -      9.944k in   5.013104s

Comparison:
       define_method:     2372.7 i/s
module_eval with string:     1968.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         Float#round   140.367k i/100ms
       Kernel#format   158.996k i/100ms
            String#%   139.822k i/100ms
Calculating -------------------------------------
         Float#round      1.404M (± 0.1%) i/s -      7.159M in   5.099205s
       Kernel#format      1.590M (± 0.1%) i/s -      8.109M in   5.098660s
            String#%      1.405M (± 0.1%) i/s -      7.131M in   5.074235s

Comparison:
       Kernel#format:  1590378.5 i/s
            String#%:  1405321.7 i/s - 1.13x  (± 0.00) slower
         Float#round:  1403889.6 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                Hash   699.211k i/100ms
          OpenStruct   373.801k i/100ms
Calculating -------------------------------------
                Hash      7.003M (± 0.1%) i/s -     35.660M in   5.091954s
          OpenStruct      3.736M (± 0.0%) i/s -     18.690M in   5.002268s

Comparison:
                Hash:  7003161.2 i/s
          OpenStruct:  3736316.1 i/s - 1.87x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                Hash   909.751k i/100ms
          OpenStruct     8.376k i/100ms
Calculating -------------------------------------
                Hash      9.867M (± 0.3%) i/s -     50.036M in   5.071180s
          OpenStruct     84.771k (± 2.8%) i/s -    427.176k in   5.043239s

Comparison:
                Hash:  9866902.1 i/s
          OpenStruct:    84771.3 i/s - 116.39x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   496.338k i/100ms
  ancestors.include?    85.222k i/100ms
Calculating -------------------------------------
  less than or equal      4.946M (± 0.1%) i/s -     24.817M in   5.017520s
  ancestors.include?    858.876k (± 0.2%) i/s -      4.346M in   5.060502s

Comparison:
  less than or equal:  4946050.7 i/s
  ancestors.include?:   858876.1 i/s - 5.76x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.595  (± 0.0%) i/s -      3.000  in   5.039860s
         Kernel loop      0.177  (± 0.0%) i/s -      1.000  in   5.651960s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 3.36x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.306M i/100ms
         Array#first     1.147M i/100ms
Calculating -------------------------------------
           Array#[0]     13.064M (± 0.0%) i/s -     66.585M in   5.096857s
         Array#first     11.463M (± 0.0%) i/s -     57.334M in   5.001754s

Comparison:
           Array#[0]: 13063842.9 i/s
         Array#first: 11462868.5 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.396M i/100ms
          Array#last     1.200M i/100ms
Calculating -------------------------------------
          Array#[-1]     13.969M (± 0.0%) i/s -     71.204M in   5.097445s
          Array#last     11.997M (± 0.1%) i/s -     60.000M in   5.001369s

Comparison:
          Array#[-1]: 13968619.4 i/s
          Array#last: 11996671.3 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    59.879k i/100ms
Calculating -------------------------------------
                find      0.197  (± 0.0%) i/s -      1.000  in   5.065483s
             bsearch    598.619k (± 0.1%) i/s -      2.994M in   5.001431s

Comparison:
             bsearch:   598619.0 i/s
                find:        0.2 i/s - 3032294.33x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    13.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    141.357  (± 2.8%) i/s -    715.000  in   5.061480s
        Array#insert      1.370  (± 0.0%) i/s -      7.000  in   5.108255s

Comparison:
       Array#unshift:      141.4 i/s
        Array#insert:        1.4 i/s - 103.15x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.958M i/100ms
          Array#size     1.928M i/100ms
         Array#count     1.422M i/100ms
Calculating -------------------------------------
        Array#length     19.582M (± 0.0%) i/s -     99.866M in   5.099835s
          Array#size     19.279M (± 0.1%) i/s -     96.415M in   5.001067s
         Array#count     13.988M (± 0.0%) i/s -     71.120M in   5.084224s

Comparison:
        Array#length: 19582217.8 i/s
          Array#size: 19278979.3 i/s - 1.02x  (± 0.00) slower
         Array#count: 13988408.3 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    31.928k i/100ms
        Array#sample   871.108k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    318.759k (± 0.6%) i/s -      1.596M in   5.008388s
        Array#sample      8.708M (± 0.0%) i/s -     43.555M in   5.001487s

Comparison:
        Array#sample:  8708492.6 i/s
 Array#shuffle.first:   318758.7 i/s - 27.32x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    49.766k i/100ms
          Date.parse    25.017k i/100ms
Calculating -------------------------------------
        Date.iso8601    497.666k (± 0.3%) i/s -      2.488M in   4.999981s
          Date.parse    251.096k (± 0.3%) i/s -      1.276M in   5.081240s

Comparison:
        Date.iso8601:   497666.0 i/s
          Date.parse:   251096.0 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    13.540k i/100ms
           Array#map    19.583k i/100ms
Calculating -------------------------------------
   Array#each + push    135.512k (± 0.2%) i/s -    690.540k in   5.095824s
           Array#map    197.323k (± 0.2%) i/s -    998.733k in   5.061434s

Comparison:
           Array#map:   197322.7 i/s
   Array#each + push:   135511.7 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            For loop    20.926k i/100ms
               #each    23.228k i/100ms
Calculating -------------------------------------
            For loop    209.244k (± 0.0%) i/s -      1.046M in   5.000392s
               #each    232.429k (± 0.0%) i/s -      1.185M in   5.096739s

Comparison:
               #each:   232428.7 i/s
            For loop:   209243.6 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          While Loop    29.029k i/100ms
     each_with_index    14.563k i/100ms
Calculating -------------------------------------
          While Loop    290.870k (± 0.2%) i/s -      1.480M in   5.089864s
     each_with_index    146.657k (± 0.1%) i/s -    742.713k in   5.064296s

Comparison:
          While Loop:   290869.8 i/s
     each_with_index:   146656.8 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    45.590k i/100ms
      inject to_proc     1.582k i/100ms
        inject block     1.575k i/100ms
Calculating -------------------------------------
       inject symbol    455.905k (± 0.0%) i/s -      2.325M in   5.099943s
      inject to_proc     15.864k (± 0.2%) i/s -     80.682k in   5.085971s
        inject block     15.768k (± 0.1%) i/s -     80.325k in   5.094291s

Comparison:
       inject symbol:   455905.1 i/s
      inject to_proc:    15863.7 i/s - 28.74x  (± 0.00) slower
        inject block:    15767.7 i/s - 28.91x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     5.214k i/100ms
   Array#map.flatten     2.807k i/100ms
      Array#flat_map     6.750k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     52.182k (± 0.1%) i/s -    265.914k in   5.095942s
   Array#map.flatten     28.047k (± 0.4%) i/s -    140.350k in   5.004121s
      Array#flat_map     67.649k (± 0.1%) i/s -    344.250k in   5.088801s

Comparison:
      Array#flat_map:    67648.6 i/s
Array#map.flatten(1):    52181.6 i/s - 1.30x  (± 0.00) slower
   Array#map.flatten:    28047.3 i/s - 2.41x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    24.109k i/100ms
  Array#reverse_each    24.908k i/100ms
Calculating -------------------------------------
  Array#reverse.each    240.974k (± 0.4%) i/s -      1.205M in   5.002507s
  Array#reverse_each    249.086k (± 0.1%) i/s -      1.270M in   5.099889s

Comparison:
  Array#reverse_each:   249085.6 i/s
  Array#reverse.each:   240974.2 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        14.683k i/100ms
   Enumerable#detect    63.179k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        146.849k (± 0.1%) i/s -      2.951M in  20.097368s
   Enumerable#detect    631.860k (± 0.2%) i/s -     12.699M in  20.097863s

Comparison:
   Enumerable#detect:   631859.9 i/s
Enumerable#select.first:   146849.5 i/s - 4.30x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       177.045k i/100ms
Enumerable#select.last
                        12.846k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.775M (± 0.1%) i/s -      9.029M in   5.086399s
Enumerable#select.last
                        128.476k (± 0.1%) i/s -    655.146k in   5.099363s

Comparison:
Enumerable#reverse.detect:  1775187.7 i/s
Enumerable#select.last:   128476.3 i/s - 13.82x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.206k i/100ms
  Enumerable#sort_by     3.122k i/100ms
     Enumerable#sort     1.713k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         32.108k (± 0.2%) i/s -    163.506k in   5.092437s
  Enumerable#sort_by     31.273k (± 0.2%) i/s -    159.222k in   5.091459s
     Enumerable#sort     17.132k (± 0.3%) i/s -     87.363k in   5.099353s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    32107.8 i/s
  Enumerable#sort_by:    31272.5 i/s - 1.03x  (± 0.00) slower
     Enumerable#sort:    17132.3 i/s - 1.87x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    13.142k i/100ms
Enumerable#sort_by...first
                         6.331k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    131.311k (± 0.1%) i/s -    657.100k in   5.004140s
Enumerable#sort_by...first
                         63.169k (± 0.5%) i/s -    316.550k in   5.011286s

Comparison:
   Enumerable#min_by:   131311.3 i/s
Enumerable#sort_by...first:    63169.3 i/s - 2.08x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   268.238k i/100ms
            Hash#dup   204.873k i/100ms
Calculating -------------------------------------
              Hash[]      2.620M (± 3.3%) i/s -     13.144M in   5.021664s
            Hash#dup      2.073M (± 1.3%) i/s -     10.449M in   5.040457s

Comparison:
              Hash[]:  2620133.5 i/s
            Hash#dup:  2073277.1 i/s - 1.26x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.251M i/100ms
  Hash#fetch, symbol     1.013M i/100ms
     Hash#[], string     1.049M i/100ms
  Hash#fetch, string   609.144k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     12.618M (± 0.0%) i/s -     63.781M in   5.054610s
  Hash#fetch, symbol     10.133M (± 0.0%) i/s -     51.664M in   5.098728s
     Hash#[], string     10.496M (± 0.0%) i/s -     53.522M in   5.099122s
  Hash#fetch, string      6.088M (± 0.1%) i/s -     30.457M in   5.002586s

Comparison:
     Hash#[], symbol: 12618426.4 i/s
     Hash#[], string: 10496258.3 i/s - 1.20x  (± 0.00) slower
  Hash#fetch, symbol: 10132658.5 i/s - 1.25x  (± 0.00) slower
  Hash#fetch, string:  6088295.1 i/s - 2.07x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   702.674k i/100ms
             Hash#[]   803.155k i/100ms
          Hash#[] ||   732.151k i/100ms
          Hash#[] &&   314.099k i/100ms
          Hash#fetch   489.028k i/100ms
 Hash#fetch fallback   277.826k i/100ms
Calculating -------------------------------------
            Hash#dig      7.026M (± 0.1%) i/s -     35.134M in   5.000639s
             Hash#[]      8.030M (± 0.1%) i/s -     40.158M in   5.001193s
          Hash#[] ||      7.321M (± 0.2%) i/s -     36.608M in   5.000658s
          Hash#[] &&      3.140M (± 0.1%) i/s -     15.705M in   5.000814s
          Hash#fetch      4.894M (± 0.1%) i/s -     24.940M in   5.096067s
 Hash#fetch fallback      2.773M (± 0.2%) i/s -     13.891M in   5.009040s

Comparison:
             Hash#[]:  8029638.4 i/s
          Hash#[] ||:  7320567.3 i/s - 1.10x  (± 0.00) slower
            Hash#dig:  7025844.4 i/s - 1.14x  (± 0.00) slower
          Hash#fetch:  4894064.3 i/s - 1.64x  (± 0.00) slower
          Hash#[] &&:  3140480.5 i/s - 2.56x  (± 0.00) slower
 Hash#fetch fallback:  2773253.4 i/s - 2.90x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.217M i/100ms
  Hash#fetch + block     1.207M i/100ms
    Hash#fetch + arg   838.411k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     12.168M (± 0.0%) i/s -     62.043M in   5.099022s
  Hash#fetch + block     12.046M (± 0.3%) i/s -     60.362M in   5.011027s
    Hash#fetch + arg      8.373M (± 0.1%) i/s -     41.921M in   5.006704s

Comparison:
  Hash#fetch + const: 12167583.9 i/s
  Hash#fetch + block: 12045952.2 i/s - 1.01x  (± 0.00) slower
    Hash#fetch + arg:  8372892.0 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    17.910k i/100ms
         sort + to_h     7.997k i/100ms
Calculating -------------------------------------
      sort_by + to_h    179.247k (± 0.3%) i/s -    913.410k in   5.095855s
         sort + to_h     79.598k (± 0.3%) i/s -    399.850k in   5.023414s

Comparison:
      sort_by + to_h:   179247.2 i/s
         sort + to_h:    79598.0 i/s - 2.25x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   137.342k i/100ms
       Hash#each_key   142.201k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.366M (± 0.6%) i/s -      6.867M in   5.028812s
       Hash#each_key      1.436M (± 0.0%) i/s -      7.252M in   5.049968s

Comparison:
       Hash#each_key:  1436098.5 i/s
      Hash#keys.each:  1365602.1 i/s - 1.05x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   986.000  i/100ms
           Hash#key?   731.060k i/100ms
Calculating -------------------------------------
  Hash#keys.include?      9.784k (± 4.5%) i/s -     49.300k in   5.051318s
           Hash#key?      7.312M (± 0.0%) i/s -     37.284M in   5.098798s

Comparison:
           Hash#key?:  7312323.8 i/s
  Hash#keys.include?:     9784.0 i/s - 747.37x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.017k i/100ms
            Hash#[]=     7.019k i/100ms
Calculating -------------------------------------
         Hash#merge!     30.191k (± 0.1%) i/s -    153.867k in   5.096442s
            Hash#[]=     70.356k (± 0.4%) i/s -    357.969k in   5.088031s

Comparison:
            Hash#[]=:    70356.5 i/s
         Hash#merge!:    30191.1 i/s - 2.33x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.745k i/100ms
      Hash#merge({})     2.987k i/100ms
 Hash#dup#merge!({})     2.203k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         37.280k (± 0.2%) i/s -    187.250k in   5.022757s
      Hash#merge({})     29.815k (± 0.3%) i/s -    149.350k in   5.009190s
 Hash#dup#merge!({})     21.860k (± 0.2%) i/s -    110.150k in   5.038931s

Comparison:
{}#merge!(Hash) do end:    37280.5 i/s
      Hash#merge({}):    29815.4 i/s - 1.25x  (± 0.00) slower
 Hash#dup#merge!({}):    21859.9 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   279.955k i/100ms
          Hash#merge   253.834k i/100ms
Calculating -------------------------------------
        Hash#**other      2.798M (± 0.3%) i/s -     13.998M in   5.003649s
          Hash#merge      2.532M (± 0.1%) i/s -     12.692M in   5.012849s

Comparison:
        Hash#**other:  2797529.5 i/s
          Hash#merge:  2531835.2 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.162k i/100ms
         Hash#merge!     2.918k i/100ms
Calculating -------------------------------------
          Hash#merge     11.594k (± 1.7%) i/s -     58.100k in   5.012619s
         Hash#merge!     29.258k (± 0.2%) i/s -    148.818k in   5.086384s

Comparison:
         Hash#merge!:    29258.2 i/s
          Hash#merge:    11594.1 i/s - 2.52x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      316.185k i/100ms
Array#each             165.548k i/100ms
Array#each_w/_object   119.584k i/100ms
Hash#select-include     52.802k i/100ms
Calculating -------------------------------------
Hash#native-slice         3.167M (± 0.2%) i/s -     16.125M in   5.092115s
Array#each                1.659M (± 0.2%) i/s -      8.443M in   5.088483s
Array#each_w/_object      1.191M (± 0.6%) i/s -      5.979M in   5.022154s
Hash#select-include     509.378k (± 2.4%) i/s -      2.587M in   5.082179s

Comparison:
Hash#native-slice   :  3166756.5 i/s
Array#each          :  1659236.6 i/s - 1.91x  (± 0.00) slower
Array#each_w/_object:  1190610.7 i/s - 2.66x  (± 0.00) slower
Hash#select-include :   509378.0 i/s - 6.22x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     2.255k i/100ms
         Hash#value?     2.303k i/100ms
Calculating -------------------------------------
Hash#values.include?     22.194k (± 5.6%) i/s -    110.495k in   5.000858s
         Hash#value?     23.051k (± 0.1%) i/s -    117.453k in   5.095366s

Comparison:
         Hash#value?:    23051.0 i/s
Hash#values.include?:    22193.6 i/s - same-ish: difference falls within error

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                call   512.909k i/100ms
                send   400.537k i/100ms
      method_missing   294.462k i/100ms
Calculating -------------------------------------
                call      5.137M (± 0.1%) i/s -     26.158M in   5.091907s
                send      4.004M (± 0.1%) i/s -     20.027M in   5.002172s
      method_missing      2.940M (± 0.1%) i/s -     14.723M in   5.007156s

Comparison:
                call:  5137246.2 i/s
                send:  4003632.3 i/s - 1.28x  (± 0.00) slower
      method_missing:  2940413.5 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
               Block     5.730k i/100ms
      Symbol#to_proc     6.468k i/100ms
Calculating -------------------------------------
               Block     57.402k (± 0.1%) i/s -    292.230k in   5.090935s
      Symbol#to_proc     64.502k (± 0.1%) i/s -    323.400k in   5.013818s

Comparison:
      Symbol#to_proc:    64501.8 i/s
               Block:    57402.1 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          block.call   796.492k i/100ms
       block + yield   844.551k i/100ms
        unused block     1.107M i/100ms
               yield     1.127M i/100ms
Calculating -------------------------------------
          block.call      7.966M (± 0.0%) i/s -     40.621M in   5.099182s
       block + yield      8.437M (± 0.2%) i/s -     42.228M in   5.004851s
        unused block     11.060M (± 0.1%) i/s -     55.348M in   5.004240s
               yield     11.281M (± 0.1%) i/s -     57.494M in   5.096561s

Comparison:
               yield: 11280860.7 i/s
        unused block: 11060247.2 i/s - 1.02x  (± 0.00) slower
       block + yield:  8437376.8 i/s - 1.34x  (± 0.00) slower
          block.call:  7966199.9 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   238.709k i/100ms
      range#include?     9.772k i/100ms
       range#member?     9.767k i/100ms
       plain compare   351.108k i/100ms
Calculating -------------------------------------
        range#cover?      2.385M (± 0.1%) i/s -     11.935M in   5.003380s
      range#include?     96.790k (± 0.5%) i/s -    488.600k in   5.048144s
       range#member?     97.459k (± 0.4%) i/s -    488.350k in   5.010939s
       plain compare      3.512M (± 0.1%) i/s -     17.907M in   5.098268s

Comparison:
       plain compare:  3512274.6 i/s
        range#cover?:  2385478.4 i/s - 1.47x  (± 0.00) slower
       range#member?:    97458.7 i/s - 36.04x  (± 0.00) slower
      range#include?:    96790.3 i/s - 36.29x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       String#match?   774.753k i/100ms
           String#=~   450.719k i/100ms
          Regexp#===   423.773k i/100ms
        String#match   340.170k i/100ms
Calculating -------------------------------------
       String#match?      7.748M (± 0.0%) i/s -     39.512M in   5.099740s
           String#=~      4.527M (± 0.3%) i/s -     22.987M in   5.077842s
          Regexp#===      4.236M (± 0.2%) i/s -     21.189M in   5.002477s
        String#match      3.398M (± 0.1%) i/s -     17.008M in   5.005274s

Comparison:
       String#match?:  7747924.8 i/s
           String#=~:  4526893.0 i/s - 1.71x  (± 0.00) slower
          Regexp#===:  4235641.1 i/s - 1.83x  (± 0.00) slower
        String#match:  3398120.4 i/s - 2.28x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   482.778k i/100ms
      String#casecmp   622.786k i/100ms
Calculating -------------------------------------
String#downcase + ==      4.819M (± 0.1%) i/s -     24.139M in   5.009300s
      String#casecmp      6.226M (± 0.1%) i/s -     31.139M in   5.001824s

Comparison:
      String#casecmp:  6225595.3 i/s
String#downcase + ==:  4818820.7 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            String#+   427.496k i/100ms
       String#concat   456.049k i/100ms
       String#append   492.527k i/100ms
         "foo" "bar"   978.371k i/100ms
  "#{'foo'}#{'bar'}"   967.120k i/100ms
Calculating -------------------------------------
            String#+      4.274M (± 0.1%) i/s -     21.375M in   5.001631s
       String#concat      4.557M (± 0.1%) i/s -     22.802M in   5.003358s
       String#append      4.925M (± 0.1%) i/s -     24.626M in   5.000302s
         "foo" "bar"      9.779M (± 0.1%) i/s -     48.919M in   5.002354s
  "#{'foo'}#{'bar'}"      9.665M (± 0.1%) i/s -     48.356M in   5.003160s

Comparison:
         "foo" "bar":  9779118.8 i/s
  "#{'foo'}#{'bar'}":  9665096.7 i/s - 1.01x  (± 0.00) slower
       String#append:  4924975.8 i/s - 1.99x  (± 0.00) slower
       String#concat:  4557433.3 i/s - 2.15x  (± 0.00) slower
            String#+:  4273567.5 i/s - 2.29x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#+@   829.784k i/100ms
          String#dup   418.102k i/100ms
Calculating -------------------------------------
           String#+@      8.296M (± 0.1%) i/s -     41.489M in   5.001053s
          String#dup      4.177M (± 0.1%) i/s -     20.905M in   5.004920s

Comparison:
           String#+@:  8296102.1 i/s
          String#dup:  4176913.2 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#=~   144.366k i/100ms
       String#match?   320.743k i/100ms
    String#end_with?   460.039k i/100ms
Calculating -------------------------------------
           String#=~      1.449M (± 0.4%) i/s -      7.363M in   5.082318s
       String#match?      3.206M (± 0.0%) i/s -     16.037M in   5.002723s
    String#end_with?      4.594M (± 0.1%) i/s -     23.002M in   5.007410s

Comparison:
    String#end_with?:  4593587.1 i/s
       String#match?:  3205684.7 i/s - 1.43x  (± 0.00) slower
           String#=~:  1448710.2 i/s - 3.17x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    86.274k i/100ms
          String#sub   111.857k i/100ms
String#dup["string"]=
                       144.457k i/100ms
Calculating -------------------------------------
         String#gsub    868.429k (± 0.3%) i/s -      4.400M in   5.066644s
          String#sub      1.124M (± 0.3%) i/s -      5.705M in   5.075378s
String#dup["string"]=
                          1.431M (± 0.7%) i/s -      7.223M in   5.047656s

Comparison:
String#dup["string"]=:  1430996.0 i/s
          String#sub:  1124008.4 i/s - 1.27x  (± 0.00) slower
         String#gsub:   868429.5 i/s - 1.65x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    75.442k i/100ms
           String#tr   266.520k i/100ms
Calculating -------------------------------------
         String#gsub    751.390k (± 0.1%) i/s -      3.772M in   5.020171s
           String#tr      2.661M (± 0.1%) i/s -     13.326M in   5.008236s

Comparison:
           String#tr:  2660818.1 i/s
         String#gsub:   751390.4 i/s - 3.54x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   966.984k i/100ms
         With Freeze     1.581M i/100ms
Calculating -------------------------------------
      Without Freeze      9.676M (± 0.1%) i/s -     49.316M in   5.096649s
         With Freeze     15.810M (± 0.0%) i/s -     79.066M in   5.000979s

Comparison:
         With Freeze: 15810018.3 i/s
      Without Freeze:  9676202.4 i/s - 1.63x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.485k i/100ms
      String#squeeze   125.791k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     24.843k (± 0.5%) i/s -    124.250k in   5.001521s
      String#squeeze      1.270M (± 2.5%) i/s -      6.415M in   5.055787s

Comparison:
      String#squeeze:  1269772.0 i/s
 String#gsub/regex+/:    24843.0 i/s - 51.11x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#=~   215.505k i/100ms
       String#match?   592.350k i/100ms
  String#start_with?   676.153k i/100ms
Calculating -------------------------------------
           String#=~      2.167M (± 0.6%) i/s -     10.991M in   5.072734s
       String#match?      5.925M (± 0.0%) i/s -     30.210M in   5.099091s
  String#start_with?      6.764M (± 0.1%) i/s -     34.484M in   5.098110s

Comparison:
  String#start_with?:  6764041.8 i/s
       String#match?:  5924555.9 i/s - 1.14x  (± 0.00) slower
           String#=~:  2166704.4 i/s - 3.12x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   164.092k i/100ms
    String#[0, n] ==    59.018k i/100ms
   String#[RANGE] ==    54.740k i/100ms
   String#[0...n] ==    35.397k i/100ms
Calculating -------------------------------------
  String#start_with?      1.640M (± 0.3%) i/s -      8.205M in   5.002995s
    String#[0, n] ==    588.999k (± 0.2%) i/s -      2.951M in   5.010036s
   String#[RANGE] ==    548.019k (± 0.1%) i/s -      2.792M in   5.094246s
   String#[0...n] ==    353.768k (± 0.1%) i/s -      1.770M in   5.002859s

Comparison:
  String#start_with?:  1639956.5 i/s
    String#[0, n] ==:   588999.1 i/s - 2.78x  (± 0.00) slower
   String#[RANGE] ==:   548019.1 i/s - 2.99x  (± 0.00) slower
   String#[0...n] ==:   353768.2 i/s - 4.64x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   137.555k i/100ms
 String#sub!'string'    97.730k i/100ms
String#gsub!'string'    60.031k i/100ms
  String#[/regexp/]=   117.244k i/100ms
 String#sub!/regexp/    91.855k i/100ms
String#gsub!/regexp/    48.592k i/100ms
Calculating -------------------------------------
  String#['string']=      1.331M (± 2.2%) i/s -      6.740M in   5.067443s
 String#sub!'string'    983.584k (± 0.2%) i/s -      4.984M in   5.067449s
String#gsub!'string'    618.839k (± 0.1%) i/s -      3.122M in   5.044315s
  String#[/regexp/]=      1.179M (± 0.2%) i/s -      5.979M in   5.069854s
 String#sub!/regexp/    944.503k (± 0.3%) i/s -      4.776M in   5.057154s
String#gsub!/regexp/    484.619k (± 0.3%) i/s -      2.430M in   5.013453s

Comparison:
  String#['string']=:  1330741.6 i/s
  String#[/regexp/]=:  1179414.4 i/s - 1.13x  (± 0.00) slower
 String#sub!'string':   983583.6 i/s - 1.35x  (± 0.00) slower
 String#sub!/regexp/:   944503.4 i/s - 1.41x  (± 0.00) slower
String#gsub!'string':   618838.7 i/s - 2.15x  (± 0.00) slower
String#gsub!/regexp/:   484619.3 i/s - 2.75x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          String#sub   118.712k i/100ms
        String#chomp   412.392k i/100ms
String#delete_suffix   422.180k i/100ms
Calculating -------------------------------------
          String#sub      1.177M (± 0.4%) i/s -      5.936M in   5.044455s
        String#chomp      4.119M (± 0.1%) i/s -     20.620M in   5.005467s
String#delete_suffix      4.219M (± 0.1%) i/s -     21.109M in   5.003879s

Comparison:
String#delete_suffix:  4218529.8 i/s
        String#chomp:  4119417.3 i/s - 1.02x  (± 0.00) slower
          String#sub:  1176679.6 i/s - 3.59x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   461.362k i/100ms
          String#sub   119.325k i/100ms
Calculating -------------------------------------
String#delete_prefix      4.613M (± 0.1%) i/s -     23.068M in   5.000645s
          String#sub      1.203M (± 0.7%) i/s -      6.086M in   5.058331s

Comparison:
String#delete_prefix:  4613027.2 i/s
          String#sub:  1203136.9 i/s - 3.83x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   450.154k i/100ms
    String#unpack[0]   343.791k i/100ms
Calculating -------------------------------------
      String#unpack1      4.496M (± 0.1%) i/s -     22.508M in   5.005877s
    String#unpack[0]      3.433M (± 0.1%) i/s -     17.190M in   5.006714s

Comparison:
      String#unpack1:  4496256.9 i/s
    String#unpack[0]:  3433301.5 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    21.470k i/100ms
          Time.parse     7.474k i/100ms
Calculating -------------------------------------
        Time.iso8601    218.058k (± 1.3%) i/s -      1.095M in   5.022360s
          Time.parse     75.238k (± 0.9%) i/s -    381.174k in   5.066653s

Comparison:
        Time.iso8601:   218058.2 i/s
          Time.parse:    75237.6 i/s - 2.90x  (± 0.00) slower

