$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       592.367k i/100ms
Function with splat arguments
                        23.515k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          5.857M (± 3.1%) i/s -     29.618M in   5.062719s
Function with splat arguments
                        231.201k (± 5.3%) i/s -      1.152M in   5.004861s

Comparison:
Function with single Array argument:  5856661.0 i/s
Function with splat arguments:   231201.3 i/s - 25.33x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   900.175k i/100ms
Sequential Assignment
                       878.596k i/100ms
Calculating -------------------------------------
 Parallel Assignment      9.000M (± 0.1%) i/s -     45.009M in   5.000849s
Sequential Assignment
                          8.754M (± 0.1%) i/s -     43.930M in   5.018213s

Comparison:
 Parallel Assignment:  9000224.2 i/s
Sequential Assignment:  8754079.5 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   375.994k i/100ms
       attr_accessor   428.638k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.776M (± 0.2%) i/s -     19.176M in   5.077710s
       attr_accessor      4.344M (± 0.5%) i/s -     21.861M in   5.032068s

Comparison:
       attr_accessor:  4344357.4 i/s
   getter_and_setter:  3776462.1 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    67.247k i/100ms
         respond_to?   586.194k i/100ms
Calculating -------------------------------------
      begin...rescue    668.351k (± 1.1%) i/s -      3.362M in   5.031410s
         respond_to?      5.857M (± 0.2%) i/s -     29.310M in   5.004107s

Comparison:
         respond_to?:  5857145.1 i/s
      begin...rescue:   668351.3 i/s - 8.76x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
              normal   241.363k i/100ms
             &method    87.833k i/100ms
Calculating -------------------------------------
              normal      2.415M (± 0.1%) i/s -     12.310M in   5.097985s
             &method    878.290k (± 0.1%) i/s -      4.392M in   5.000237s

Comparison:
              normal:  2414585.2 i/s
             &method:   878289.8 i/s - 2.75x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       204.000  i/100ms
       define_method   276.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.003k (±20.3%) i/s -      9.180k in   5.113342s
       define_method      2.620k (±15.9%) i/s -     12.420k in   5.078283s

Comparison:
       define_method:     2620.4 i/s
module_eval with string:     2003.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         Float#round   140.224k i/100ms
       Kernel#format   153.869k i/100ms
            String#%   135.378k i/100ms
Calculating -------------------------------------
         Float#round      1.401M (± 0.1%) i/s -      7.011M in   5.003257s
       Kernel#format      1.540M (± 0.1%) i/s -      7.847M in   5.095891s
            String#%      1.365M (± 0.1%) i/s -      6.904M in   5.057696s

Comparison:
       Kernel#format:  1539933.4 i/s
         Float#round:  1401327.5 i/s - 1.10x  (± 0.00) slower
            String#%:  1365105.9 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                Hash   695.953k i/100ms
          OpenStruct   369.502k i/100ms
Calculating -------------------------------------
                Hash      6.958M (± 0.1%) i/s -     34.798M in   5.001354s
          OpenStruct      3.690M (± 0.1%) i/s -     18.475M in   5.007233s

Comparison:
                Hash:  6957654.1 i/s
          OpenStruct:  3689690.1 i/s - 1.89x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                Hash   895.569k i/100ms
          OpenStruct     8.689k i/100ms
Calculating -------------------------------------
                Hash      9.608M (± 0.2%) i/s -     48.361M in   5.033597s
          OpenStruct     87.499k (± 2.3%) i/s -    443.139k in   5.067366s

Comparison:
                Hash:  9607611.9 i/s
          OpenStruct:    87498.6 i/s - 109.80x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   477.709k i/100ms
  ancestors.include?    92.142k i/100ms
Calculating -------------------------------------
  less than or equal      4.789M (± 0.2%) i/s -     24.363M in   5.087726s
  ancestors.include?    919.171k (± 0.1%) i/s -      4.607M in   5.012243s

Comparison:
  less than or equal:  4788629.9 i/s
  ancestors.include?:   919171.4 i/s - 5.21x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.456  (± 0.0%) i/s -      3.000  in   6.583102s
         Kernel loop      0.179  (± 0.0%) i/s -      1.000  in   5.582735s

Comparison:
          While Loop:        0.5 i/s
         Kernel loop:        0.2 i/s - 2.54x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.165M i/100ms
         Array#first     1.055M i/100ms
Calculating -------------------------------------
           Array#[0]     11.656M (± 0.1%) i/s -     59.417M in   5.097443s
         Array#first     10.549M (± 0.1%) i/s -     52.753M in   5.000743s

Comparison:
           Array#[0]: 11656220.3 i/s
         Array#first: 10549025.7 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.303M i/100ms
          Array#last     1.096M i/100ms
Calculating -------------------------------------
          Array#[-1]     13.005M (± 0.4%) i/s -     65.141M in   5.009085s
          Array#last     10.952M (± 0.3%) i/s -     54.779M in   5.001880s

Comparison:
          Array#[-1]: 13004819.2 i/s
          Array#last: 10951853.0 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    75.890k i/100ms
Calculating -------------------------------------
                find      0.204  (± 0.0%) i/s -      2.000  in   9.787302s
             bsearch    759.109k (± 0.1%) i/s -      3.870M in   5.098598s

Comparison:
             bsearch:   759108.9 i/s
                find:        0.2 i/s - 3714813.19x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    14.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    146.816  (± 2.7%) i/s -    742.000  in   5.057274s
        Array#insert      1.151  (± 0.0%) i/s -      6.000  in   5.214479s

Comparison:
       Array#unshift:      146.8 i/s
        Array#insert:        1.2 i/s - 127.59x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.895M i/100ms
          Array#size     1.898M i/100ms
         Array#count     1.311M i/100ms
Calculating -------------------------------------
        Array#length     18.911M (± 0.7%) i/s -     94.734M in   5.009613s
          Array#size     18.954M (± 0.7%) i/s -     94.892M in   5.006732s
         Array#count     13.159M (± 0.2%) i/s -     66.884M in   5.082909s

Comparison:
          Array#size: 18953701.0 i/s
        Array#length: 18911256.6 i/s - same-ish: difference falls within error
         Array#count: 13158668.0 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    34.112k i/100ms
        Array#sample   827.848k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    340.029k (± 0.6%) i/s -      1.706M in   5.016254s
        Array#sample      8.269M (± 0.0%) i/s -     41.392M in   5.005897s

Comparison:
        Array#sample:  8268728.3 i/s
 Array#shuffle.first:   340028.6 i/s - 24.32x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    48.437k i/100ms
          Date.parse    23.713k i/100ms
Calculating -------------------------------------
        Date.iso8601    485.082k (± 0.4%) i/s -      2.470M in   5.092602s
          Date.parse    238.266k (± 0.6%) i/s -      1.209M in   5.075887s

Comparison:
        Date.iso8601:   485081.7 i/s
          Date.parse:   238265.5 i/s - 2.04x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    14.378k i/100ms
           Array#map    20.407k i/100ms
Calculating -------------------------------------
   Array#each + push    144.333k (± 0.5%) i/s -    733.278k in   5.080564s
           Array#map    208.450k (± 0.4%) i/s -      1.061M in   5.090799s

Comparison:
           Array#map:   208450.3 i/s
   Array#each + push:   144333.0 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            For loop    22.147k i/100ms
               #each    24.463k i/100ms
Calculating -------------------------------------
            For loop    221.296k (± 0.3%) i/s -      1.107M in   5.003981s
               #each    244.582k (± 0.1%) i/s -      1.223M in   5.000984s

Comparison:
               #each:   244582.0 i/s
            For loop:   221295.5 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          While Loop    24.567k i/100ms
     each_with_index    14.745k i/100ms
Calculating -------------------------------------
          While Loop    245.625k (± 0.1%) i/s -      1.228M in   5.000919s
     each_with_index    147.625k (± 0.1%) i/s -    751.995k in   5.093970s

Comparison:
          While Loop:   245624.9 i/s
     each_with_index:   147624.7 i/s - 1.66x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    68.205k i/100ms
      inject to_proc     1.725k i/100ms
        inject block     1.582k i/100ms
Calculating -------------------------------------
       inject symbol    671.046k (± 2.8%) i/s -      3.410M in   5.085983s
      inject to_proc     17.272k (± 0.2%) i/s -     87.975k in   5.093455s
        inject block     15.835k (± 0.2%) i/s -     80.682k in   5.095046s

Comparison:
       inject symbol:   671046.2 i/s
      inject to_proc:    17272.2 i/s - 38.85x  (± 0.00) slower
        inject block:    15835.5 i/s - 42.38x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     5.578k i/100ms
   Array#map.flatten     3.013k i/100ms
      Array#flat_map     7.340k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     55.802k (± 0.4%) i/s -    284.478k in   5.098099s
   Array#map.flatten     30.379k (± 0.4%) i/s -    153.663k in   5.058218s
      Array#flat_map     73.032k (± 0.3%) i/s -    367.000k in   5.025209s

Comparison:
      Array#flat_map:    73032.5 i/s
Array#map.flatten(1):    55801.8 i/s - 1.31x  (± 0.00) slower
   Array#map.flatten:    30379.5 i/s - 2.40x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    23.818k i/100ms
  Array#reverse_each    24.394k i/100ms
Calculating -------------------------------------
  Array#reverse.each    238.247k (± 0.1%) i/s -      1.215M in   5.098582s
  Array#reverse_each    243.956k (± 0.1%) i/s -      1.244M in   5.099670s

Comparison:
  Array#reverse_each:   243956.0 i/s
  Array#reverse.each:   238246.7 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        15.690k i/100ms
   Enumerable#detect    60.849k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        156.317k (± 0.5%) i/s -      3.138M in  20.075033s
   Enumerable#detect    607.148k (± 0.2%) i/s -     12.170M in  20.044278s

Comparison:
   Enumerable#detect:   607147.7 i/s
Enumerable#select.first:   156316.9 i/s - 3.88x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       179.011k i/100ms
Enumerable#select.last
                        14.760k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.778M (± 0.6%) i/s -      8.951M in   5.034357s
Enumerable#select.last
                        147.960k (± 0.5%) i/s -    752.760k in   5.087712s

Comparison:
Enumerable#reverse.detect:  1777953.0 i/s
Enumerable#select.last:   147960.2 i/s - 12.02x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.893k i/100ms
  Enumerable#sort_by     3.681k i/100ms
     Enumerable#sort     1.905k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         38.833k (± 0.5%) i/s -    194.650k in   5.012648s
  Enumerable#sort_by     36.813k (± 0.4%) i/s -    187.731k in   5.099631s
     Enumerable#sort     19.068k (± 0.2%) i/s -     97.155k in   5.095271s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    38832.6 i/s
  Enumerable#sort_by:    36813.3 i/s - 1.05x  (± 0.00) slower
     Enumerable#sort:    19067.7 i/s - 2.04x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    13.010k i/100ms
Enumerable#sort_by...first
                         6.716k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    130.133k (± 0.1%) i/s -    663.510k in   5.098693s
Enumerable#sort_by...first
                         66.831k (± 1.0%) i/s -    335.800k in   5.025084s

Comparison:
   Enumerable#min_by:   130133.4 i/s
Enumerable#sort_by...first:    66831.1 i/s - 1.95x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   297.000k i/100ms
            Hash#dup   241.547k i/100ms
Calculating -------------------------------------
              Hash[]      2.887M (± 1.7%) i/s -     14.553M in   5.043022s
            Hash#dup      2.326M (± 0.4%) i/s -     11.836M in   5.089092s

Comparison:
              Hash[]:  2886568.4 i/s
            Hash#dup:  2325762.0 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.161M i/100ms
  Hash#fetch, symbol   942.630k i/100ms
     Hash#[], string   946.706k i/100ms
  Hash#fetch, string   613.944k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     11.603M (± 0.4%) i/s -     58.069M in   5.004494s
  Hash#fetch, symbol      9.397M (± 1.6%) i/s -     47.132M in   5.017064s
     Hash#[], string      9.477M (± 0.1%) i/s -     48.282M in   5.094549s
  Hash#fetch, string      6.137M (± 0.1%) i/s -     30.697M in   5.001942s

Comparison:
     Hash#[], symbol: 11603473.6 i/s
     Hash#[], string:  9477202.4 i/s - 1.22x  (± 0.00) slower
  Hash#fetch, symbol:  9396894.8 i/s - 1.23x  (± 0.00) slower
  Hash#fetch, string:  6137059.9 i/s - 1.89x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   734.944k i/100ms
             Hash#[]   761.397k i/100ms
          Hash#[] ||   701.036k i/100ms
          Hash#[] &&   325.124k i/100ms
          Hash#fetch   498.275k i/100ms
 Hash#fetch fallback   310.264k i/100ms
Calculating -------------------------------------
            Hash#dig      7.368M (± 0.6%) i/s -     37.482M in   5.087024s
             Hash#[]      7.561M (± 0.7%) i/s -     38.070M in   5.035519s
          Hash#[] ||      6.993M (± 0.9%) i/s -     35.052M in   5.012496s
          Hash#[] &&      3.249M (± 0.3%) i/s -     16.256M in   5.003087s
          Hash#fetch      4.963M (± 0.4%) i/s -     24.914M in   5.020436s
 Hash#fetch fallback      3.105M (± 0.6%) i/s -     15.823M in   5.095556s

Comparison:
             Hash#[]:  7560614.7 i/s
            Hash#dig:  7368472.1 i/s - 1.03x  (± 0.00) slower
          Hash#[] ||:  6993444.6 i/s - 1.08x  (± 0.00) slower
          Hash#fetch:  4962545.3 i/s - 1.52x  (± 0.00) slower
          Hash#[] &&:  3249268.5 i/s - 2.33x  (± 0.00) slower
 Hash#fetch fallback:  3105467.0 i/s - 2.43x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.191M i/100ms
  Hash#fetch + block     1.147M i/100ms
    Hash#fetch + arg   853.917k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     11.908M (± 0.5%) i/s -     59.557M in   5.001533s
  Hash#fetch + block     11.477M (± 0.1%) i/s -     58.495M in   5.096924s
    Hash#fetch + arg      8.532M (± 0.5%) i/s -     42.696M in   5.004446s

Comparison:
  Hash#fetch + const: 11908047.4 i/s
  Hash#fetch + block: 11476514.2 i/s - 1.04x  (± 0.00) slower
    Hash#fetch + arg:  8531768.8 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    20.245k i/100ms
         sort + to_h     8.732k i/100ms
Calculating -------------------------------------
      sort_by + to_h    203.585k (± 0.7%) i/s -      1.032M in   5.071835s
         sort + to_h     87.670k (± 0.1%) i/s -    445.332k in   5.079640s

Comparison:
      sort_by + to_h:   203585.0 i/s
         sort + to_h:    87670.1 i/s - 2.32x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   152.101k i/100ms
       Hash#each_key   163.040k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.530M (± 0.3%) i/s -      7.757M in   5.070101s
       Hash#each_key      1.628M (± 0.1%) i/s -      8.152M in   5.008324s

Comparison:
       Hash#each_key:  1627690.8 i/s
      Hash#keys.each:  1529991.7 i/s - 1.06x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   995.000  i/100ms
           Hash#key?   765.549k i/100ms
Calculating -------------------------------------
  Hash#keys.include?      9.677k (± 4.3%) i/s -     48.755k in   5.048225s
           Hash#key?      7.512M (± 0.1%) i/s -     38.277M in   5.095367s

Comparison:
           Hash#key?:  7512208.6 i/s
  Hash#keys.include?:     9677.3 i/s - 776.27x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.098k i/100ms
            Hash#[]=     7.556k i/100ms
Calculating -------------------------------------
         Hash#merge!     30.929k (± 0.4%) i/s -    154.900k in   5.008411s
            Hash#[]=     76.306k (± 1.1%) i/s -    385.356k in   5.050710s

Comparison:
            Hash#[]=:    76306.4 i/s
         Hash#merge!:    30928.6 i/s - 2.47x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.689k i/100ms
      Hash#merge({})     2.940k i/100ms
 Hash#dup#merge!({})     2.122k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         37.094k (± 0.1%) i/s -    188.139k in   5.071909s
      Hash#merge({})     29.365k (± 0.1%) i/s -    147.000k in   5.005886s
 Hash#dup#merge!({})     21.075k (± 0.1%) i/s -    106.100k in   5.034506s

Comparison:
{}#merge!(Hash) do end:    37094.4 i/s
      Hash#merge({}):    29365.5 i/s - 1.26x  (± 0.00) slower
 Hash#dup#merge!({}):    21074.6 i/s - 1.76x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   286.963k i/100ms
          Hash#merge   257.453k i/100ms
Calculating -------------------------------------
        Hash#**other      2.878M (± 0.4%) i/s -     14.635M in   5.084479s
          Hash#merge      2.575M (± 0.7%) i/s -     13.130M in   5.099382s

Comparison:
        Hash#**other:  2878439.6 i/s
          Hash#merge:  2574961.9 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.230k i/100ms
         Hash#merge!     3.025k i/100ms
Calculating -------------------------------------
          Hash#merge     12.353k (± 1.7%) i/s -     62.730k in   5.079622s
         Hash#merge!     30.318k (± 0.3%) i/s -    154.275k in   5.088638s

Comparison:
         Hash#merge!:    30317.9 i/s
          Hash#merge:    12353.0 i/s - 2.45x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      328.111k i/100ms
Array#each             170.947k i/100ms
Array#each_w/_object   118.041k i/100ms
Hash#select-include     56.032k i/100ms
Calculating -------------------------------------
Hash#native-slice         3.277M (± 0.1%) i/s -     16.406M in   5.005646s
Array#each                1.685M (± 4.1%) i/s -      8.547M in   5.082399s
Array#each_w/_object      1.213M (± 1.4%) i/s -      6.138M in   5.061175s
Hash#select-include     557.848k (± 1.1%) i/s -      2.802M in   5.022840s

Comparison:
Hash#native-slice   :  3277413.4 i/s
Array#each          :  1685065.5 i/s - 1.94x  (± 0.00) slower
Array#each_w/_object:  1213014.7 i/s - 2.70x  (± 0.00) slower
Hash#select-include :   557847.6 i/s - 5.88x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     2.007k i/100ms
         Hash#value?     2.000k i/100ms
Calculating -------------------------------------
Hash#values.include?     19.851k (± 5.1%) i/s -    100.350k in   5.071074s
         Hash#value?     19.991k (± 0.3%) i/s -    100.000k in   5.002397s

Comparison:
         Hash#value?:    19990.6 i/s
Hash#values.include?:    19850.9 i/s - same-ish: difference falls within error

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                call   525.145k i/100ms
                send   409.495k i/100ms
      method_missing   296.775k i/100ms
Calculating -------------------------------------
                call      5.352M (± 0.4%) i/s -     26.782M in   5.004633s
                send      4.129M (± 0.2%) i/s -     20.884M in   5.057387s
      method_missing      2.969M (± 0.1%) i/s -     15.136M in   5.098183s

Comparison:
                call:  5351592.3 i/s
                send:  4129474.1 i/s - 1.30x  (± 0.00) slower
      method_missing:  2968810.4 i/s - 1.80x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
               Block     6.935k i/100ms
      Symbol#to_proc     7.650k i/100ms
Calculating -------------------------------------
               Block     68.330k (± 0.7%) i/s -    346.750k in   5.074956s
      Symbol#to_proc     75.931k (± 0.3%) i/s -    382.500k in   5.037515s

Comparison:
      Symbol#to_proc:    75931.1 i/s
               Block:    68329.5 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          block.call   772.356k i/100ms
       block + yield   819.646k i/100ms
        unused block     1.092M i/100ms
               yield   999.710k i/100ms
Calculating -------------------------------------
          block.call      7.742M (± 0.2%) i/s -     39.390M in   5.087841s
       block + yield      8.175M (± 0.2%) i/s -     40.982M in   5.013131s
        unused block     10.932M (± 0.3%) i/s -     55.709M in   5.096052s
               yield     10.000M (± 0.1%) i/s -     50.985M in   5.098659s

Comparison:
        unused block: 10931937.5 i/s
               yield:  9999742.9 i/s - 1.09x  (± 0.00) slower
       block + yield:  8175016.4 i/s - 1.34x  (± 0.00) slower
          block.call:  7742036.6 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   243.504k i/100ms
      range#include?     9.376k i/100ms
       range#member?     9.373k i/100ms
       plain compare   346.171k i/100ms
Calculating -------------------------------------
        range#cover?      2.424M (± 1.8%) i/s -     12.175M in   5.024167s
      range#include?     93.155k (± 0.9%) i/s -    468.800k in   5.032877s
       range#member?     93.555k (± 0.7%) i/s -    468.650k in   5.009561s
       plain compare      3.496M (± 0.8%) i/s -     17.655M in   5.050933s

Comparison:
       plain compare:  3495549.7 i/s
        range#cover?:  2424143.0 i/s - 1.44x  (± 0.00) slower
       range#member?:    93555.2 i/s - 37.36x  (± 0.00) slower
      range#include?:    93155.3 i/s - 37.52x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       String#match?   754.855k i/100ms
           String#=~   495.179k i/100ms
          Regexp#===   447.807k i/100ms
        String#match   347.434k i/100ms
Calculating -------------------------------------
       String#match?      7.546M (± 0.1%) i/s -     37.743M in   5.001927s
           String#=~      4.945M (± 0.1%) i/s -     24.759M in   5.007149s
          Regexp#===      4.469M (± 0.2%) i/s -     22.390M in   5.010011s
        String#match      3.475M (± 0.2%) i/s -     17.719M in   5.099443s

Comparison:
       String#match?:  7545649.2 i/s
           String#=~:  4944730.0 i/s - 1.53x  (± 0.00) slower
          Regexp#===:  4469147.6 i/s - 1.69x  (± 0.00) slower
        String#match:  3474730.2 i/s - 2.17x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   503.420k i/100ms
      String#casecmp   611.715k i/100ms
Calculating -------------------------------------
String#downcase + ==      5.045M (± 0.3%) i/s -     25.674M in   5.089522s
      String#casecmp      6.097M (± 0.5%) i/s -     30.586M in   5.016805s

Comparison:
      String#casecmp:  6096802.7 i/s
String#downcase + ==:  5044618.0 i/s - 1.21x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            String#+   461.453k i/100ms
       String#concat   462.018k i/100ms
       String#append   521.461k i/100ms
         "foo" "bar"     1.001M i/100ms
  "#{'foo'}#{'bar'}"   993.460k i/100ms
Calculating -------------------------------------
            String#+      4.608M (± 0.8%) i/s -     23.073M in   5.006951s
       String#concat      4.612M (± 0.1%) i/s -     23.101M in   5.009106s
       String#append      5.209M (± 0.2%) i/s -     26.073M in   5.005569s
         "foo" "bar"      9.985M (± 0.2%) i/s -     50.038M in   5.011389s
  "#{'foo'}#{'bar'}"      9.957M (± 0.3%) i/s -     50.666M in   5.088648s

Comparison:
         "foo" "bar":  9984813.6 i/s
  "#{'foo'}#{'bar'}":  9956879.1 i/s - same-ish: difference falls within error
       String#append:  5208832.7 i/s - 1.92x  (± 0.00) slower
       String#concat:  4611789.2 i/s - 2.17x  (± 0.00) slower
            String#+:  4608412.9 i/s - 2.17x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#+@   784.285k i/100ms
          String#dup   434.896k i/100ms
Calculating -------------------------------------
           String#+@      7.837M (± 0.2%) i/s -     39.214M in   5.003912s
          String#dup      4.346M (± 0.1%) i/s -     21.745M in   5.003462s

Comparison:
           String#+@:  7836759.4 i/s
          String#dup:  4345956.7 i/s - 1.80x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#=~   145.801k i/100ms
       String#match?   321.739k i/100ms
    String#end_with?   472.505k i/100ms
Calculating -------------------------------------
           String#=~      1.452M (± 0.6%) i/s -      7.290M in   5.019251s
       String#match?      3.219M (± 0.1%) i/s -     16.409M in   5.097401s
    String#end_with?      4.720M (± 0.3%) i/s -     23.625M in   5.005064s

Comparison:
    String#end_with?:  4720314.0 i/s
       String#match?:  3219032.9 i/s - 1.47x  (± 0.00) slower
           String#=~:  1452465.5 i/s - 3.25x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    77.967k i/100ms
          String#sub   107.728k i/100ms
String#dup["string"]=
                       122.215k i/100ms
Calculating -------------------------------------
         String#gsub    788.950k (± 0.2%) i/s -      3.976M in   5.040034s
          String#sub      1.092M (± 1.3%) i/s -      5.494M in   5.030112s
String#dup["string"]=
                          1.235M (± 2.6%) i/s -      6.233M in   5.049158s

Comparison:
String#dup["string"]=:  1235286.9 i/s
          String#sub:  1092421.3 i/s - 1.13x  (± 0.00) slower
         String#gsub:   788949.9 i/s - 1.57x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    71.249k i/100ms
           String#tr   282.260k i/100ms
Calculating -------------------------------------
         String#gsub    711.829k (± 0.4%) i/s -      3.562M in   5.004727s
           String#tr      2.819M (± 1.7%) i/s -     14.395M in   5.107558s

Comparison:
           String#tr:  2819342.6 i/s
         String#gsub:   711828.8 i/s - 3.96x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   962.235k i/100ms
         With Freeze     1.410M i/100ms
Calculating -------------------------------------
      Without Freeze      9.616M (± 0.3%) i/s -     48.112M in   5.003168s
         With Freeze     14.084M (± 0.1%) i/s -     70.518M in   5.006982s

Comparison:
         With Freeze: 14084041.4 i/s
      Without Freeze:  9616362.6 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.603k i/100ms
      String#squeeze   129.240k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     26.036k (± 0.1%) i/s -    132.753k in   5.098746s
      String#squeeze      1.288M (± 0.3%) i/s -      6.462M in   5.017491s

Comparison:
      String#squeeze:  1287909.5 i/s
 String#gsub/regex+/:    26036.5 i/s - 49.47x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#=~   212.111k i/100ms
       String#match?   596.555k i/100ms
  String#start_with?   680.525k i/100ms
Calculating -------------------------------------
           String#=~      2.118M (± 0.2%) i/s -     10.606M in   5.008405s
       String#match?      5.966M (± 0.1%) i/s -     30.424M in   5.099291s
  String#start_with?      6.794M (± 0.2%) i/s -     34.026M in   5.008597s

Comparison:
  String#start_with?:  6793587.2 i/s
       String#match?:  5966380.7 i/s - 1.14x  (± 0.00) slower
           String#=~:  2117560.0 i/s - 3.21x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   178.778k i/100ms
    String#[0, n] ==    68.889k i/100ms
   String#[RANGE] ==    62.708k i/100ms
   String#[0...n] ==    34.618k i/100ms
Calculating -------------------------------------
  String#start_with?      1.763M (± 1.5%) i/s -      8.939M in   5.071894s
    String#[0, n] ==    686.601k (± 1.7%) i/s -      3.444M in   5.018183s
   String#[RANGE] ==    626.263k (± 0.3%) i/s -      3.135M in   5.006587s
   String#[0...n] ==    340.948k (± 0.2%) i/s -      1.731M in   5.076741s

Comparison:
  String#start_with?:  1762850.0 i/s
    String#[0, n] ==:   686601.0 i/s - 2.57x  (± 0.00) slower
   String#[RANGE] ==:   626262.6 i/s - 2.81x  (± 0.00) slower
   String#[0...n] ==:   340948.0 i/s - 5.17x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   138.148k i/100ms
 String#sub!'string'    90.867k i/100ms
String#gsub!'string'    54.440k i/100ms
  String#[/regexp/]=   106.693k i/100ms
 String#sub!/regexp/    80.923k i/100ms
String#gsub!/regexp/    45.672k i/100ms
Calculating -------------------------------------
  String#['string']=      1.376M (± 2.7%) i/s -      6.907M in   5.024890s
 String#sub!'string'    913.726k (± 0.1%) i/s -      4.634M in   5.071787s
String#gsub!'string'    565.367k (± 0.4%) i/s -      2.831M in   5.007252s
  String#[/regexp/]=      1.060M (± 0.1%) i/s -      5.335M in   5.031464s
 String#sub!/regexp/    864.639k (± 0.2%) i/s -      4.370M in   5.053966s
String#gsub!/regexp/    444.828k (± 3.0%) i/s -      2.238M in   5.035825s

Comparison:
  String#['string']=:  1375730.3 i/s
  String#[/regexp/]=:  1060259.8 i/s - 1.30x  (± 0.00) slower
 String#sub!'string':   913726.1 i/s - 1.51x  (± 0.00) slower
 String#sub!/regexp/:   864638.6 i/s - 1.59x  (± 0.00) slower
String#gsub!'string':   565366.9 i/s - 2.43x  (± 0.00) slower
String#gsub!/regexp/:   444828.1 i/s - 3.09x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          String#sub   116.731k i/100ms
        String#chomp   429.521k i/100ms
String#delete_suffix   480.961k i/100ms
Calculating -------------------------------------
          String#sub      1.178M (± 1.3%) i/s -      5.953M in   5.053931s
        String#chomp      4.294M (± 0.1%) i/s -     21.476M in   5.001774s
String#delete_suffix      4.799M (± 0.4%) i/s -     24.048M in   5.010913s

Comparison:
String#delete_suffix:  4799209.2 i/s
        String#chomp:  4293692.2 i/s - 1.12x  (± 0.00) slower
          String#sub:  1178160.1 i/s - 4.07x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   475.976k i/100ms
          String#sub   112.027k i/100ms
Calculating -------------------------------------
String#delete_prefix      4.765M (± 0.1%) i/s -     24.275M in   5.094177s
          String#sub      1.189M (± 1.2%) i/s -      6.049M in   5.088547s

Comparison:
String#delete_prefix:  4765206.7 i/s
          String#sub:  1189006.6 i/s - 4.01x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   462.175k i/100ms
    String#unpack[0]   353.111k i/100ms
Calculating -------------------------------------
      String#unpack1      4.626M (± 0.3%) i/s -     23.571M in   5.095682s
    String#unpack[0]      3.535M (± 0.1%) i/s -     18.009M in   5.094405s

Comparison:
      String#unpack1:  4625711.8 i/s
    String#unpack[0]:  3534989.9 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    21.386k i/100ms
          Time.parse     7.557k i/100ms
Calculating -------------------------------------
        Time.iso8601    218.571k (± 2.0%) i/s -      1.112M in   5.090196s
          Time.parse     75.660k (± 0.2%) i/s -    385.407k in   5.093946s

Comparison:
        Time.iso8601:   218570.6 i/s
          Time.parse:    75660.0 i/s - 2.89x  (± 0.00) slower

