$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       593.924k i/100ms
Function with splat arguments
                         8.593k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          5.954M (± 0.1%) i/s -     30.290M in   5.087465s
Function with splat arguments
                         79.848k (± 5.1%) i/s -    403.871k in   5.075202s

Comparison:
Function with single Array argument:  5953880.0 i/s
Function with splat arguments:    79848.1 i/s - 74.57x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   979.912k i/100ms
Sequential Assignment
                         1.067M i/100ms
Calculating -------------------------------------
 Parallel Assignment      9.791M (± 0.1%) i/s -     48.996M in   5.004282s
Sequential Assignment
                         10.664M (± 0.0%) i/s -     53.344M in   5.002246s

Comparison:
Sequential Assignment: 10663992.0 i/s
 Parallel Assignment:  9790739.4 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   355.406k i/100ms
       attr_accessor   407.151k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.557M (± 0.1%) i/s -     18.126M in   5.095387s
       attr_accessor      4.073M (± 0.1%) i/s -     20.765M in   5.098171s

Comparison:
       attr_accessor:  4072973.5 i/s
   getter_and_setter:  3557279.3 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    71.717k i/100ms
         respond_to?   574.846k i/100ms
Calculating -------------------------------------
      begin...rescue    721.361k (± 0.3%) i/s -      3.658M in   5.070406s
         respond_to?      5.749M (± 0.2%) i/s -     29.317M in   5.099513s

Comparison:
         respond_to?:  5749021.9 i/s
      begin...rescue:   721361.3 i/s - 7.97x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
              normal   235.631k i/100ms
             &method    89.645k i/100ms
Calculating -------------------------------------
              normal      2.359M (± 0.1%) i/s -     12.017M in   5.093482s
             &method    894.490k (± 0.3%) i/s -      4.482M in   5.010994s

Comparison:
              normal:  2359327.9 i/s
             &method:   894489.5 i/s - 2.64x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       175.000  i/100ms
       define_method   221.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.865k (±22.9%) i/s -      8.225k in   5.068972s
       define_method      2.209k (±26.9%) i/s -      9.282k in   5.069011s

Comparison:
       define_method:     2209.4 i/s
module_eval with string:     1864.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         Float#round   141.428k i/100ms
       Kernel#format   158.090k i/100ms
            String#%   141.720k i/100ms
Calculating -------------------------------------
         Float#round      1.416M (± 0.1%) i/s -      7.213M in   5.092415s
       Kernel#format      1.585M (± 0.1%) i/s -      8.063M in   5.087349s
            String#%      1.419M (± 0.6%) i/s -      7.228M in   5.092034s

Comparison:
       Kernel#format:  1584832.3 i/s
            String#%:  1419470.1 i/s - 1.12x  (± 0.00) slower
         Float#round:  1416389.1 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                Hash   696.312k i/100ms
          OpenStruct   371.364k i/100ms
Calculating -------------------------------------
                Hash      6.959M (± 0.1%) i/s -     34.816M in   5.002810s
          OpenStruct      3.711M (± 0.1%) i/s -     18.568M in   5.002994s

Comparison:
                Hash:  6959212.4 i/s
          OpenStruct:  3711421.2 i/s - 1.88x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                Hash   895.118k i/100ms
          OpenStruct     8.459k i/100ms
Calculating -------------------------------------
                Hash      9.660M (± 0.2%) i/s -     48.336M in   5.003836s
          OpenStruct     85.868k (± 2.5%) i/s -    431.409k in   5.027402s

Comparison:
                Hash:  9659894.0 i/s
          OpenStruct:    85868.3 i/s - 112.50x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   471.777k i/100ms
  ancestors.include?    85.697k i/100ms
Calculating -------------------------------------
  less than or equal      4.719M (± 0.0%) i/s -     24.061M in   5.098744s
  ancestors.include?    853.975k (± 1.3%) i/s -      4.285M in   5.018487s

Comparison:
  less than or equal:  4718932.5 i/s
  ancestors.include?:   853974.7 i/s - 5.53x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.595  (± 0.0%) i/s -      3.000  in   5.040799s
         Kernel loop      0.175  (± 0.0%) i/s -      1.000  in   5.712427s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 3.40x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.394M i/100ms
         Array#first     1.211M i/100ms
Calculating -------------------------------------
           Array#[0]     13.936M (± 0.0%) i/s -     69.697M in   5.001334s
         Array#first     12.059M (± 0.0%) i/s -     60.542M in   5.020508s

Comparison:
           Array#[0]: 13935702.6 i/s
         Array#first: 12058871.0 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.395M i/100ms
          Array#last     1.233M i/100ms
Calculating -------------------------------------
          Array#[-1]     13.958M (± 0.0%) i/s -     71.155M in   5.097800s
          Array#last     12.355M (± 0.1%) i/s -     62.878M in   5.089324s

Comparison:
          Array#[-1]: 13958053.7 i/s
          Array#last: 12354796.9 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    69.513k i/100ms
Calculating -------------------------------------
                find      0.207  (± 0.0%) i/s -      2.000  in   9.649586s
             bsearch    695.124k (± 0.1%) i/s -      3.476M in   5.000047s

Comparison:
             bsearch:   695123.7 i/s
                find:        0.2 i/s - 3353826.53x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    13.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    139.880  (± 2.1%) i/s -    702.000  in   5.021491s
        Array#insert      1.322  (± 0.0%) i/s -      7.000  in   5.301269s

Comparison:
       Array#unshift:      139.9 i/s
        Array#insert:        1.3 i/s - 105.82x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.929M i/100ms
          Array#size     1.957M i/100ms
         Array#count     1.441M i/100ms
Calculating -------------------------------------
        Array#length     19.427M (± 0.1%) i/s -     98.401M in   5.065201s
          Array#size     19.566M (± 0.1%) i/s -     97.836M in   5.000366s
         Array#count     14.399M (± 0.0%) i/s -     72.033M in   5.002618s

Comparison:
          Array#size: 19565701.8 i/s
        Array#length: 19426930.0 i/s - 1.01x  (± 0.00) slower
         Array#count: 14398991.4 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    31.257k i/100ms
        Array#sample   870.076k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    307.827k (± 5.1%) i/s -      1.563M in   5.094136s
        Array#sample      8.709M (± 0.1%) i/s -     44.374M in   5.094929s

Comparison:
        Array#sample:  8709425.8 i/s
 Array#shuffle.first:   307826.7 i/s - 28.29x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    49.825k i/100ms
          Date.parse    25.403k i/100ms
Calculating -------------------------------------
        Date.iso8601    499.986k (± 0.4%) i/s -      2.541M in   5.082368s
          Date.parse    252.903k (± 0.2%) i/s -      1.270M in   5.022291s

Comparison:
        Date.iso8601:   499985.8 i/s
          Date.parse:   252903.4 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    13.722k i/100ms
           Array#map    19.778k i/100ms
Calculating -------------------------------------
   Array#each + push    137.237k (± 0.3%) i/s -    699.822k in   5.099392s
           Array#map    197.363k (± 0.3%) i/s -    988.900k in   5.010602s

Comparison:
           Array#map:   197362.9 i/s
   Array#each + push:   137237.2 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            For loop    23.080k i/100ms
               #each    25.144k i/100ms
Calculating -------------------------------------
            For loop    230.721k (± 0.0%) i/s -      1.154M in   5.001705s
               #each    251.431k (± 0.1%) i/s -      1.257M in   5.000176s

Comparison:
               #each:   251431.2 i/s
            For loop:   230721.4 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          While Loop    28.131k i/100ms
     each_with_index    13.898k i/100ms
Calculating -------------------------------------
          While Loop    280.872k (± 0.0%) i/s -      1.407M in   5.007795s
     each_with_index    139.143k (± 0.1%) i/s -    708.798k in   5.094034s

Comparison:
          While Loop:   280872.2 i/s
     each_with_index:   139142.9 i/s - 2.02x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    45.431k i/100ms
      inject to_proc     1.603k i/100ms
        inject block     1.591k i/100ms
Calculating -------------------------------------
       inject symbol    454.311k (± 0.0%) i/s -      2.272M in   4.999994s
      inject to_proc     16.143k (± 0.5%) i/s -     81.753k in   5.064274s
        inject block     15.967k (± 0.3%) i/s -     81.141k in   5.081705s

Comparison:
       inject symbol:   454310.6 i/s
      inject to_proc:    16143.4 i/s - 28.14x  (± 0.00) slower
        inject block:    15967.4 i/s - 28.45x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     5.210k i/100ms
   Array#map.flatten     2.812k i/100ms
      Array#flat_map     6.772k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     52.158k (± 0.1%) i/s -    265.710k in   5.094358s
   Array#map.flatten     28.094k (± 0.3%) i/s -    140.600k in   5.004678s
      Array#flat_map     67.679k (± 0.1%) i/s -    338.600k in   5.003061s

Comparison:
      Array#flat_map:    67678.6 i/s
Array#map.flatten(1):    52157.7 i/s - 1.30x  (± 0.00) slower
   Array#map.flatten:    28094.0 i/s - 2.41x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    23.291k i/100ms
  Array#reverse_each    24.049k i/100ms
Calculating -------------------------------------
  Array#reverse.each    232.359k (± 0.2%) i/s -      1.165M in   5.011870s
  Array#reverse_each    239.550k (± 0.1%) i/s -      1.202M in   5.019632s

Comparison:
  Array#reverse_each:   239549.7 i/s
  Array#reverse.each:   232359.5 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        14.531k i/100ms
   Enumerable#detect    62.193k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        145.191k (± 0.3%) i/s -      2.906M in  20.016543s
   Enumerable#detect    622.382k (± 0.2%) i/s -     12.501M in  20.085457s

Comparison:
   Enumerable#detect:   622381.9 i/s
Enumerable#select.first:   145190.9 i/s - 4.29x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       180.335k i/100ms
Enumerable#select.last
                        12.904k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.786M (± 1.5%) i/s -      9.017M in   5.050660s
Enumerable#select.last
                        129.131k (± 0.2%) i/s -    658.104k in   5.096442s

Comparison:
Enumerable#reverse.detect:  1785649.8 i/s
Enumerable#select.last:   129130.8 i/s - 13.83x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.361k i/100ms
  Enumerable#sort_by     3.303k i/100ms
     Enumerable#sort     1.773k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         33.592k (± 0.5%) i/s -    168.050k in   5.002770s
  Enumerable#sort_by     32.970k (± 0.4%) i/s -    165.150k in   5.009191s
     Enumerable#sort     17.727k (± 0.8%) i/s -     88.650k in   5.001312s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    33592.2 i/s
  Enumerable#sort_by:    32969.8 i/s - 1.02x  (± 0.00) slower
     Enumerable#sort:    17726.6 i/s - 1.90x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    13.065k i/100ms
Enumerable#sort_by...first
                         6.242k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    130.666k (± 0.1%) i/s -    666.315k in   5.099377s
Enumerable#sort_by...first
                         63.083k (± 1.0%) i/s -    318.342k in   5.046862s

Comparison:
   Enumerable#min_by:   130666.0 i/s
Enumerable#sort_by...first:    63083.3 i/s - 2.07x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   263.055k i/100ms
            Hash#dup   218.583k i/100ms
Calculating -------------------------------------
              Hash[]      2.675M (± 2.4%) i/s -     13.416M in   5.018077s
            Hash#dup      1.977M (± 2.1%) i/s -     10.055M in   5.087493s

Comparison:
              Hash[]:  2675035.1 i/s
            Hash#dup:  1977237.4 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.294M i/100ms
  Hash#fetch, symbol   923.139k i/100ms
     Hash#[], string     1.080M i/100ms
  Hash#fetch, string   605.383k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     12.941M (± 0.1%) i/s -     64.722M in   5.001201s
  Hash#fetch, symbol      9.232M (± 0.0%) i/s -     47.080M in   5.099462s
     Hash#[], string     10.802M (± 0.0%) i/s -     55.081M in   5.099253s
  Hash#fetch, string      6.052M (± 0.1%) i/s -     30.269M in   5.001703s

Comparison:
     Hash#[], symbol: 12941230.2 i/s
     Hash#[], string: 10801773.8 i/s - 1.20x  (± 0.00) slower
  Hash#fetch, symbol:  9232365.8 i/s - 1.40x  (± 0.00) slower
  Hash#fetch, string:  6051770.6 i/s - 2.14x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   702.296k i/100ms
             Hash#[]   796.780k i/100ms
          Hash#[] ||   734.195k i/100ms
          Hash#[] &&   315.116k i/100ms
          Hash#fetch   489.340k i/100ms
 Hash#fetch fallback   282.381k i/100ms
Calculating -------------------------------------
            Hash#dig      7.009M (± 0.2%) i/s -     35.115M in   5.009819s
             Hash#[]      7.932M (± 0.1%) i/s -     39.839M in   5.022783s
          Hash#[] ||      7.342M (± 0.1%) i/s -     37.444M in   5.099628s
          Hash#[] &&      3.158M (± 0.1%) i/s -     16.071M in   5.088967s
          Hash#fetch      4.888M (± 0.3%) i/s -     24.467M in   5.005683s
 Hash#fetch fallback      2.817M (± 0.4%) i/s -     14.119M in   5.011633s

Comparison:
             Hash#[]:  7931664.3 i/s
          Hash#[] ||:  7342495.5 i/s - 1.08x  (± 0.00) slower
            Hash#dig:  7009211.6 i/s - 1.13x  (± 0.00) slower
          Hash#fetch:  4887882.0 i/s - 1.62x  (± 0.00) slower
          Hash#[] &&:  3157995.2 i/s - 2.51x  (± 0.00) slower
 Hash#fetch fallback:  2817310.5 i/s - 2.82x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.201M i/100ms
  Hash#fetch + block     1.216M i/100ms
    Hash#fetch + arg   845.688k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     11.738M (± 0.0%) i/s -     58.846M in   5.013283s
  Hash#fetch + block     12.152M (± 0.1%) i/s -     60.784M in   5.002125s
    Hash#fetch + arg      8.447M (± 0.1%) i/s -     42.284M in   5.006006s

Comparison:
  Hash#fetch + block: 12151603.6 i/s
  Hash#fetch + const: 11737991.9 i/s - 1.04x  (± 0.00) slower
    Hash#fetch + arg:  8446740.8 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    18.393k i/100ms
         sort + to_h     8.360k i/100ms
Calculating -------------------------------------
      sort_by + to_h    184.020k (± 0.3%) i/s -    938.043k in   5.097545s
         sort + to_h     83.650k (± 0.3%) i/s -    426.360k in   5.097015s

Comparison:
      sort_by + to_h:   184020.3 i/s
         sort + to_h:    83649.5 i/s - 2.20x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   137.215k i/100ms
       Hash#each_key   141.604k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.386M (± 0.2%) i/s -      6.998M in   5.048371s
       Hash#each_key      1.419M (± 0.1%) i/s -      7.222M in   5.090985s

Comparison:
       Hash#each_key:  1418548.1 i/s
      Hash#keys.each:  1386186.0 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.534k i/100ms
           Hash#key?   756.015k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     15.208k (± 5.3%) i/s -     76.700k in   5.062173s
           Hash#key?      7.559M (± 0.0%) i/s -     37.801M in   5.000895s

Comparison:
           Hash#key?:  7558798.4 i/s
  Hash#keys.include?:    15208.2 i/s - 497.02x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.006k i/100ms
            Hash#[]=     6.911k i/100ms
Calculating -------------------------------------
         Hash#merge!     30.056k (± 0.1%) i/s -    150.300k in   5.000667s
            Hash#[]=     68.915k (± 0.5%) i/s -    345.550k in   5.014261s

Comparison:
            Hash#[]=:    68915.3 i/s
         Hash#merge!:    30056.0 i/s - 2.29x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.746k i/100ms
      Hash#merge({})     2.993k i/100ms
 Hash#dup#merge!({})     2.203k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         38.651k (± 1.4%) i/s -    194.792k in   5.040778s
      Hash#merge({})     31.510k (± 0.4%) i/s -    158.629k in   5.034267s
 Hash#dup#merge!({})     22.807k (± 0.3%) i/s -    114.556k in   5.022838s

Comparison:
{}#merge!(Hash) do end:    38651.4 i/s
      Hash#merge({}):    31510.4 i/s - 1.23x  (± 0.00) slower
 Hash#dup#merge!({}):    22807.3 i/s - 1.69x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   281.447k i/100ms
          Hash#merge   253.125k i/100ms
Calculating -------------------------------------
        Hash#**other      2.810M (± 0.4%) i/s -     14.072M in   5.008446s
          Hash#merge      2.531M (± 0.2%) i/s -     12.656M in   5.001350s

Comparison:
        Hash#**other:  2809763.6 i/s
          Hash#merge:  2530577.2 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.167k i/100ms
         Hash#merge!     2.963k i/100ms
Calculating -------------------------------------
          Hash#merge     11.607k (± 0.7%) i/s -     58.350k in   5.027442s
         Hash#merge!     29.553k (± 0.1%) i/s -    148.150k in   5.013100s

Comparison:
         Hash#merge!:    29552.6 i/s
          Hash#merge:    11606.8 i/s - 2.55x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      317.635k i/100ms
Array#each             166.347k i/100ms
Array#each_w/_object   116.874k i/100ms
Hash#select-include     52.951k i/100ms
Calculating -------------------------------------
Hash#native-slice         3.169M (± 0.4%) i/s -     15.882M in   5.011130s
Array#each                1.659M (± 0.2%) i/s -      8.317M in   5.014757s
Array#each_w/_object      1.169M (± 0.3%) i/s -      5.961M in   5.099517s
Hash#select-include     530.359k (± 1.9%) i/s -      2.701M in   5.093807s

Comparison:
Hash#native-slice   :  3169350.7 i/s
Array#each          :  1658581.1 i/s - 1.91x  (± 0.00) slower
Array#each_w/_object:  1168863.4 i/s - 2.71x  (± 0.00) slower
Hash#select-include :   530359.3 i/s - 5.98x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   822.000  i/100ms
         Hash#value?   698.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      8.085k (± 4.3%) i/s -     41.100k in   5.094658s
         Hash#value?      6.981k (± 0.1%) i/s -     35.598k in   5.098998s

Comparison:
Hash#values.include?:     8085.2 i/s
         Hash#value?:     6981.4 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                call   530.441k i/100ms
                send   396.351k i/100ms
      method_missing   291.911k i/100ms
Calculating -------------------------------------
                call      5.307M (± 0.1%) i/s -     27.052M in   5.097847s
                send      3.978M (± 0.1%) i/s -     20.214M in   5.080908s
      method_missing      2.915M (± 0.1%) i/s -     14.596M in   5.006958s

Comparison:
                call:  5306655.0 i/s
                send:  3978405.8 i/s - 1.33x  (± 0.00) slower
      method_missing:  2915055.4 i/s - 1.82x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
               Block     5.791k i/100ms
      Symbol#to_proc     6.473k i/100ms
Calculating -------------------------------------
               Block     57.864k (± 0.3%) i/s -    289.550k in   5.004030s
      Symbol#to_proc     64.575k (± 0.1%) i/s -    323.650k in   5.011984s

Comparison:
      Symbol#to_proc:    64575.3 i/s
               Block:    57863.9 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          block.call   785.262k i/100ms
       block + yield   839.522k i/100ms
        unused block     1.092M i/100ms
               yield     1.110M i/100ms
Calculating -------------------------------------
          block.call      7.853M (± 0.0%) i/s -     39.263M in   5.000021s
       block + yield      8.396M (± 0.1%) i/s -     42.816M in   5.099429s
        unused block     10.922M (± 0.0%) i/s -     54.620M in   5.000846s
               yield     11.030M (± 0.4%) i/s -     55.514M in   5.033236s

Comparison:
               yield: 11029734.8 i/s
        unused block: 10922185.2 i/s - 1.01x  (± 0.00) slower
       block + yield:  8396163.0 i/s - 1.31x  (± 0.00) slower
          block.call:  7852587.5 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   238.678k i/100ms
      range#include?     9.567k i/100ms
       range#member?     9.607k i/100ms
       plain compare   356.592k i/100ms
Calculating -------------------------------------
        range#cover?      2.386M (± 0.1%) i/s -     11.934M in   5.000703s
      range#include?     96.283k (± 0.4%) i/s -    487.917k in   5.067595s
       range#member?     96.113k (± 0.4%) i/s -    489.957k in   5.097814s
       plain compare      3.566M (± 0.0%) i/s -     17.830M in   4.999991s

Comparison:
       plain compare:  3565927.2 i/s
        range#cover?:  2386445.5 i/s - 1.49x  (± 0.00) slower
      range#include?:    96283.0 i/s - 37.04x  (± 0.00) slower
       range#member?:    96112.8 i/s - 37.10x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       String#match?   766.575k i/100ms
           String#=~   448.047k i/100ms
          Regexp#===   417.109k i/100ms
        String#match   345.593k i/100ms
Calculating -------------------------------------
       String#match?      7.663M (± 0.0%) i/s -     38.329M in   5.001610s
           String#=~      4.487M (± 0.1%) i/s -     22.850M in   5.092700s
          Regexp#===      4.172M (± 0.2%) i/s -     21.273M in   5.098424s
        String#match      3.449M (± 0.1%) i/s -     17.280M in   5.010644s

Comparison:
       String#match?:  7663282.2 i/s
           String#=~:  4486899.1 i/s - 1.71x  (± 0.00) slower
          Regexp#===:  4172401.0 i/s - 1.84x  (± 0.00) slower
        String#match:  3448592.3 i/s - 2.22x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   482.166k i/100ms
      String#casecmp   625.056k i/100ms
Calculating -------------------------------------
String#downcase + ==      4.827M (± 0.1%) i/s -     24.590M in   5.094694s
      String#casecmp      6.245M (± 0.1%) i/s -     31.253M in   5.004847s

Comparison:
      String#casecmp:  6244510.6 i/s
String#downcase + ==:  4826683.5 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            String#+   428.064k i/100ms
       String#concat   456.582k i/100ms
       String#append   493.578k i/100ms
         "foo" "bar"   990.519k i/100ms
  "#{'foo'}#{'bar'}"   993.057k i/100ms
Calculating -------------------------------------
            String#+      4.278M (± 0.1%) i/s -     21.403M in   5.002595s
       String#concat      4.558M (± 0.1%) i/s -     22.829M in   5.008676s
       String#append      4.923M (± 0.5%) i/s -     24.679M in   5.013475s
         "foo" "bar"      9.882M (± 0.4%) i/s -     49.526M in   5.011940s
  "#{'foo'}#{'bar'}"      9.911M (± 0.1%) i/s -     49.653M in   5.009741s

Comparison:
  "#{'foo'}#{'bar'}":  9911269.5 i/s
         "foo" "bar":  9881752.8 i/s - same-ish: difference falls within error
       String#append:  4922630.1 i/s - 2.01x  (± 0.00) slower
       String#concat:  4557916.9 i/s - 2.17x  (± 0.00) slower
            String#+:  4278423.2 i/s - 2.32x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#+@   833.932k i/100ms
          String#dup   414.127k i/100ms
Calculating -------------------------------------
           String#+@      8.336M (± 0.1%) i/s -     41.697M in   5.002258s
          String#dup      4.140M (± 0.1%) i/s -     20.706M in   5.001574s

Comparison:
           String#+@:  8335558.6 i/s
          String#dup:  4139968.3 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#=~   145.767k i/100ms
       String#match?   318.399k i/100ms
    String#end_with?   459.467k i/100ms
Calculating -------------------------------------
           String#=~      1.457M (± 0.2%) i/s -      7.288M in   5.002716s
       String#match?      3.184M (± 0.0%) i/s -     16.238M in   5.099963s
    String#end_with?      4.592M (± 0.3%) i/s -     22.973M in   5.003010s

Comparison:
    String#end_with?:  4591936.9 i/s
       String#match?:  3184013.2 i/s - 1.44x  (± 0.00) slower
           String#=~:  1456882.7 i/s - 3.15x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    86.110k i/100ms
          String#sub   107.619k i/100ms
String#dup["string"]=
                       136.229k i/100ms
Calculating -------------------------------------
         String#gsub    869.527k (± 0.2%) i/s -      4.392M in   5.050593s
          String#sub      1.084M (± 0.9%) i/s -      5.489M in   5.063577s
String#dup["string"]=
                          1.360M (± 0.4%) i/s -      6.811M in   5.008472s

Comparison:
String#dup["string"]=:  1360003.0 i/s
          String#sub:  1084016.0 i/s - 1.25x  (± 0.00) slower
         String#gsub:   869526.8 i/s - 1.56x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    75.451k i/100ms
           String#tr   269.388k i/100ms
Calculating -------------------------------------
         String#gsub    755.196k (± 0.2%) i/s -      3.848M in   5.095387s
           String#tr      2.692M (± 0.1%) i/s -     13.469M in   5.003202s

Comparison:
           String#tr:  2692157.0 i/s
         String#gsub:   755195.8 i/s - 3.56x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   964.732k i/100ms
         With Freeze     1.587M i/100ms
Calculating -------------------------------------
      Without Freeze      9.625M (± 0.5%) i/s -     48.237M in   5.011671s
         With Freeze     15.860M (± 0.1%) i/s -     79.329M in   5.001735s

Comparison:
         With Freeze: 15860272.3 i/s
      Without Freeze:  9625093.3 i/s - 1.65x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.506k i/100ms
      String#squeeze   128.032k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     25.109k (± 0.2%) i/s -    127.806k in   5.090094s
      String#squeeze      1.296M (± 2.4%) i/s -      6.530M in   5.039784s

Comparison:
      String#squeeze:  1296475.3 i/s
 String#gsub/regex+/:    25108.9 i/s - 51.63x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#=~   217.632k i/100ms
       String#match?   585.493k i/100ms
  String#start_with?   686.365k i/100ms
Calculating -------------------------------------
           String#=~      2.180M (± 0.2%) i/s -     11.099M in   5.091715s
       String#match?      5.859M (± 0.0%) i/s -     29.860M in   5.096319s
  String#start_with?      6.859M (± 0.1%) i/s -     34.318M in   5.003188s

Comparison:
  String#start_with?:  6859281.7 i/s
       String#match?:  5859159.6 i/s - 1.17x  (± 0.00) slower
           String#=~:  2179869.5 i/s - 3.15x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   164.443k i/100ms
    String#[0, n] ==    59.412k i/100ms
   String#[RANGE] ==    54.657k i/100ms
   String#[0...n] ==    35.220k i/100ms
Calculating -------------------------------------
  String#start_with?      1.643M (± 0.2%) i/s -      8.222M in   5.004659s
    String#[0, n] ==    589.930k (± 0.3%) i/s -      2.971M in   5.035551s
   String#[RANGE] ==    546.443k (± 0.3%) i/s -      2.733M in   5.001214s
   String#[0...n] ==    354.037k (± 0.2%) i/s -      1.796M in   5.073563s

Comparison:
  String#start_with?:  1642904.3 i/s
    String#[0, n] ==:   589929.6 i/s - 2.78x  (± 0.00) slower
   String#[RANGE] ==:   546443.4 i/s - 3.01x  (± 0.00) slower
   String#[0...n] ==:   354036.7 i/s - 4.64x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   129.246k i/100ms
 String#sub!'string'    93.575k i/100ms
String#gsub!'string'    61.060k i/100ms
  String#[/regexp/]=   117.233k i/100ms
 String#sub!/regexp/    91.368k i/100ms
String#gsub!/regexp/    49.369k i/100ms
Calculating -------------------------------------
  String#['string']=      1.271M (± 0.3%) i/s -      6.462M in   5.083400s
 String#sub!'string'    958.365k (± 0.3%) i/s -      4.866M in   5.077333s
String#gsub!'string'    606.047k (± 0.2%) i/s -      3.053M in   5.037589s
  String#[/regexp/]=      1.183M (± 0.8%) i/s -      5.979M in   5.056258s
 String#sub!/regexp/    937.668k (± 0.4%) i/s -      4.751M in   5.067062s
String#gsub!/regexp/    496.039k (± 0.8%) i/s -      2.518M in   5.076166s

Comparison:
  String#['string']=:  1271264.6 i/s
  String#[/regexp/]=:  1182547.8 i/s - 1.08x  (± 0.00) slower
 String#sub!'string':   958364.6 i/s - 1.33x  (± 0.00) slower
 String#sub!/regexp/:   937667.9 i/s - 1.36x  (± 0.00) slower
String#gsub!'string':   606047.2 i/s - 2.10x  (± 0.00) slower
String#gsub!/regexp/:   496039.1 i/s - 2.56x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          String#sub   117.449k i/100ms
        String#chomp   413.157k i/100ms
String#delete_suffix   444.056k i/100ms
Calculating -------------------------------------
          String#sub      1.199M (± 0.6%) i/s -      6.107M in   5.093918s
        String#chomp      4.127M (± 0.1%) i/s -     20.658M in   5.005169s
String#delete_suffix      4.436M (± 0.1%) i/s -     22.203M in   5.005276s

Comparison:
String#delete_suffix:  4435881.0 i/s
        String#chomp:  4127307.4 i/s - 1.07x  (± 0.00) slower
          String#sub:  1198986.5 i/s - 3.70x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   460.914k i/100ms
          String#sub   120.184k i/100ms
Calculating -------------------------------------
String#delete_prefix      4.558M (± 0.1%) i/s -     23.046M in   5.056138s
          String#sub      1.211M (± 1.1%) i/s -      6.129M in   5.062168s

Comparison:
String#delete_prefix:  4557968.7 i/s
          String#sub:  1210958.3 i/s - 3.76x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   449.360k i/100ms
    String#unpack[0]   342.574k i/100ms
Calculating -------------------------------------
      String#unpack1      4.490M (± 0.2%) i/s -     22.468M in   5.004186s
    String#unpack[0]      3.409M (± 0.2%) i/s -     17.129M in   5.023915s

Comparison:
      String#unpack1:  4489851.8 i/s
    String#unpack[0]:  3409445.5 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    21.558k i/100ms
          Time.parse     7.520k i/100ms
Calculating -------------------------------------
        Time.iso8601    224.446k (± 0.2%) i/s -      1.143M in   5.090662s
          Time.parse     75.056k (± 0.5%) i/s -    376.000k in   5.009726s

Comparison:
        Time.iso8601:   224446.2 i/s
          Time.parse:    75055.7 i/s - 2.99x  (± 0.00) slower

