$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       596.594k i/100ms
Function with splat arguments
                        11.154k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          5.963M (± 0.1%) i/s -     29.830M in   5.002214s
Function with splat arguments
                        111.284k (± 7.1%) i/s -    557.700k in   5.046700s

Comparison:
Function with single Array argument:  5963303.9 i/s
Function with splat arguments:   111283.8 i/s - 53.59x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.031M i/100ms
Sequential Assignment
                         1.062M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.320M (± 0.0%) i/s -     52.591M in   5.096142s
Sequential Assignment
                         10.617M (± 0.0%) i/s -     53.086M in   5.000145s

Comparison:
Sequential Assignment: 10616952.6 i/s
 Parallel Assignment: 10319828.7 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   366.308k i/100ms
       attr_accessor   401.550k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.656M (± 0.1%) i/s -     18.315M in   5.009203s
       attr_accessor      4.015M (± 0.1%) i/s -     20.078M in   5.000596s

Comparison:
       attr_accessor:  4015023.6 i/s
   getter_and_setter:  3656352.0 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    70.685k i/100ms
         respond_to?   556.486k i/100ms
Calculating -------------------------------------
      begin...rescue    703.318k (± 0.2%) i/s -      3.534M in   5.025124s
         respond_to?      5.563M (± 0.1%) i/s -     27.824M in   5.002015s

Comparison:
         respond_to?:  5562621.3 i/s
      begin...rescue:   703318.2 i/s - 7.91x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
              normal   236.325k i/100ms
             &method    88.930k i/100ms
Calculating -------------------------------------
              normal      2.361M (± 0.1%) i/s -     11.816M in   5.003778s
             &method    885.918k (± 0.1%) i/s -      4.446M in   5.019092s

Comparison:
              normal:  2361468.5 i/s
             &method:   885917.5 i/s - 2.67x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       183.000  i/100ms
       define_method   224.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.888k (±22.1%) i/s -      8.235k in   5.022644s
       define_method      2.290k (±25.3%) i/s -      9.408k in   5.011336s

Comparison:
       define_method:     2289.7 i/s
module_eval with string:     1888.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         Float#round   143.318k i/100ms
       Kernel#format   157.818k i/100ms
            String#%   141.628k i/100ms
Calculating -------------------------------------
         Float#round      1.432M (± 0.1%) i/s -      7.166M in   5.003051s
       Kernel#format      1.579M (± 0.1%) i/s -      8.049M in   5.096388s
            String#%      1.419M (± 0.1%) i/s -      7.223M in   5.088572s

Comparison:
       Kernel#format:  1579299.4 i/s
         Float#round:  1432306.9 i/s - 1.10x  (± 0.00) slower
            String#%:  1419461.7 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                Hash   690.979k i/100ms
          OpenStruct   366.423k i/100ms
Calculating -------------------------------------
                Hash      6.899M (± 0.6%) i/s -     34.549M in   5.008192s
          OpenStruct      3.663M (± 0.1%) i/s -     18.321M in   5.002317s

Comparison:
                Hash:  6898723.4 i/s
          OpenStruct:  3662534.3 i/s - 1.88x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                Hash   869.074k i/100ms
          OpenStruct     8.398k i/100ms
Calculating -------------------------------------
                Hash      9.523M (± 0.2%) i/s -     47.799M in   5.019576s
          OpenStruct     84.879k (± 2.8%) i/s -    428.298k in   5.049933s

Comparison:
                Hash:  9522575.5 i/s
          OpenStruct:    84879.4 i/s - 112.19x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   497.360k i/100ms
  ancestors.include?    83.037k i/100ms
Calculating -------------------------------------
  less than or equal      4.955M (± 2.8%) i/s -     24.868M in   5.023663s
  ancestors.include?    827.007k (± 0.1%) i/s -      4.152M in   5.020337s

Comparison:
  less than or equal:  4954991.0 i/s
  ancestors.include?:   827007.1 i/s - 5.99x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.601  (± 0.0%) i/s -      4.000  in   6.656256s
         Kernel loop      0.176  (± 0.0%) i/s -      1.000  in   5.669347s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 3.41x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.351M i/100ms
         Array#first     1.154M i/100ms
Calculating -------------------------------------
           Array#[0]     13.509M (± 0.0%) i/s -     67.553M in   5.000688s
         Array#first     11.562M (± 0.0%) i/s -     58.858M in   5.090617s

Comparison:
           Array#[0]: 13508711.4 i/s
         Array#first: 11562122.5 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.399M i/100ms
          Array#last     1.234M i/100ms
Calculating -------------------------------------
          Array#[-1]     13.991M (± 0.0%) i/s -     69.965M in   5.000859s
          Array#last     12.339M (± 0.0%) i/s -     61.703M in   5.000571s

Comparison:
          Array#[-1]: 13990559.2 i/s
          Array#last: 12339223.1 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    70.893k i/100ms
Calculating -------------------------------------
                find      0.197  (± 0.0%) i/s -      1.000  in   5.074525s
             bsearch    714.434k (± 0.1%) i/s -      3.616M in   5.060712s

Comparison:
             bsearch:   714434.2 i/s
                find:        0.2 i/s - 3625414.01x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    13.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    137.859  (± 2.9%) i/s -    689.000  in   5.001758s
        Array#insert      1.374  (± 0.0%) i/s -      7.000  in   5.095607s

Comparison:
       Array#unshift:      137.9 i/s
        Array#insert:        1.4 i/s - 100.35x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.931M i/100ms
          Array#size     1.961M i/100ms
         Array#count     1.433M i/100ms
Calculating -------------------------------------
        Array#length     19.311M (± 0.1%) i/s -     96.558M in   5.000054s
          Array#size     19.614M (± 0.1%) i/s -    100.022M in   5.099535s
         Array#count     14.349M (± 0.1%) i/s -     73.058M in   5.091599s

Comparison:
          Array#size: 19613946.5 i/s
        Array#length: 19311455.3 i/s - 1.02x  (± 0.00) slower
         Array#count: 14348669.0 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    32.251k i/100ms
        Array#sample   865.541k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    321.517k (± 0.9%) i/s -      1.613M in   5.015820s
        Array#sample      8.652M (± 0.4%) i/s -     43.277M in   5.002017s

Comparison:
        Array#sample:  8652031.0 i/s
 Array#shuffle.first:   321516.9 i/s - 26.91x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    50.159k i/100ms
          Date.parse    24.732k i/100ms
Calculating -------------------------------------
        Date.iso8601    502.052k (± 0.2%) i/s -      2.558M in   5.095335s
          Date.parse    247.659k (± 0.4%) i/s -      1.261M in   5.093099s

Comparison:
        Date.iso8601:   502051.9 i/s
          Date.parse:   247659.4 i/s - 2.03x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    13.655k i/100ms
           Array#map    18.951k i/100ms
Calculating -------------------------------------
   Array#each + push    136.811k (± 0.3%) i/s -    696.405k in   5.090326s
           Array#map    191.013k (± 0.6%) i/s -    966.501k in   5.060037s

Comparison:
           Array#map:   191013.2 i/s
   Array#each + push:   136810.8 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            For loop    23.106k i/100ms
               #each    25.115k i/100ms
Calculating -------------------------------------
            For loop    231.020k (± 0.0%) i/s -      1.155M in   5.000874s
               #each    251.151k (± 0.0%) i/s -      1.281M in   5.099982s

Comparison:
               #each:   251150.9 i/s
            For loop:   231019.6 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          While Loop    29.038k i/100ms
     each_with_index    13.870k i/100ms
Calculating -------------------------------------
          While Loop    290.992k (± 0.3%) i/s -      1.481M in   5.089316s
     each_with_index    139.021k (± 0.1%) i/s -    707.370k in   5.088209s

Comparison:
          While Loop:   290991.9 i/s
     each_with_index:   139021.5 i/s - 2.09x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    45.516k i/100ms
      inject to_proc     1.592k i/100ms
        inject block     1.546k i/100ms
Calculating -------------------------------------
       inject symbol    455.195k (± 0.0%) i/s -      2.321M in   5.099607s
      inject to_proc     15.933k (± 0.1%) i/s -     81.192k in   5.095712s
        inject block     15.477k (± 0.1%) i/s -     78.846k in   5.094307s

Comparison:
       inject symbol:   455195.1 i/s
      inject to_proc:    15933.4 i/s - 28.57x  (± 0.00) slower
        inject block:    15477.3 i/s - 29.41x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     5.140k i/100ms
   Array#map.flatten     2.795k i/100ms
      Array#flat_map     6.662k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     51.462k (± 0.1%) i/s -    262.140k in   5.093895s
   Array#map.flatten     27.975k (± 0.1%) i/s -    142.545k in   5.095387s
      Array#flat_map     66.591k (± 0.1%) i/s -    333.100k in   5.002168s

Comparison:
      Array#flat_map:    66591.2 i/s
Array#map.flatten(1):    51461.7 i/s - 1.29x  (± 0.00) slower
   Array#map.flatten:    27975.3 i/s - 2.38x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    23.959k i/100ms
  Array#reverse_each    25.029k i/100ms
Calculating -------------------------------------
  Array#reverse.each    239.328k (± 0.5%) i/s -      1.198M in   5.005595s
  Array#reverse_each    250.297k (± 0.0%) i/s -      1.276M in   5.099855s

Comparison:
  Array#reverse_each:   250297.1 i/s
  Array#reverse.each:   239328.0 i/s - 1.05x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        15.517k i/100ms
   Enumerable#detect    62.807k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        154.981k (± 0.9%) i/s -      3.103M in  20.026303s
   Enumerable#detect    627.698k (± 0.1%) i/s -     12.561M in  20.011864s

Comparison:
   Enumerable#detect:   627697.9 i/s
Enumerable#select.first:   154980.7 i/s - 4.05x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       171.995k i/100ms
Enumerable#select.last
                        13.055k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.726M (± 0.6%) i/s -      8.772M in   5.081619s
Enumerable#select.last
                        131.142k (± 0.5%) i/s -    665.805k in   5.077110s

Comparison:
Enumerable#reverse.detect:  1726242.9 i/s
Enumerable#select.last:   131142.3 i/s - 13.16x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.401k i/100ms
  Enumerable#sort_by     3.261k i/100ms
     Enumerable#sort     1.767k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         33.856k (± 0.5%) i/s -    170.050k in   5.022793s
  Enumerable#sort_by     32.802k (± 0.5%) i/s -    166.311k in   5.070249s
     Enumerable#sort     17.696k (± 0.2%) i/s -     90.117k in   5.092441s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    33856.4 i/s
  Enumerable#sort_by:    32802.2 i/s - 1.03x  (± 0.00) slower
     Enumerable#sort:    17696.3 i/s - 1.91x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    12.728k i/100ms
Enumerable#sort_by...first
                         6.409k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    127.281k (± 0.1%) i/s -    636.400k in   4.999951s
Enumerable#sort_by...first
                         63.701k (± 1.4%) i/s -    320.450k in   5.031548s

Comparison:
   Enumerable#min_by:   127281.3 i/s
Enumerable#sort_by...first:    63701.1 i/s - 2.00x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   255.077k i/100ms
            Hash#dup   208.040k i/100ms
Calculating -------------------------------------
              Hash[]      2.594M (± 1.0%) i/s -     13.009M in   5.016236s
            Hash#dup      2.078M (± 1.2%) i/s -     10.402M in   5.005747s

Comparison:
              Hash[]:  2593602.4 i/s
            Hash#dup:  2078334.3 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.295M i/100ms
  Hash#fetch, symbol     1.035M i/100ms
     Hash#[], string     1.079M i/100ms
  Hash#fetch, string   602.878k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     12.954M (± 0.1%) i/s -     66.050M in   5.098908s
  Hash#fetch, symbol     10.364M (± 0.0%) i/s -     52.802M in   5.094677s
     Hash#[], string     10.787M (± 0.0%) i/s -     53.952M in   5.001825s
  Hash#fetch, string      6.025M (± 0.1%) i/s -     30.144M in   5.003455s

Comparison:
     Hash#[], symbol: 12953837.2 i/s
     Hash#[], string: 10786554.5 i/s - 1.20x  (± 0.00) slower
  Hash#fetch, symbol: 10364189.9 i/s - 1.25x  (± 0.00) slower
  Hash#fetch, string:  6024622.5 i/s - 2.15x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   703.976k i/100ms
             Hash#[]   802.537k i/100ms
          Hash#[] ||   735.549k i/100ms
          Hash#[] &&   315.176k i/100ms
          Hash#fetch   490.459k i/100ms
 Hash#fetch fallback   279.051k i/100ms
Calculating -------------------------------------
            Hash#dig      7.041M (± 0.2%) i/s -     35.903M in   5.099101s
             Hash#[]      8.030M (± 0.1%) i/s -     40.929M in   5.097076s
          Hash#[] ||      7.351M (± 0.2%) i/s -     36.777M in   5.002771s
          Hash#[] &&      3.149M (± 0.6%) i/s -     15.759M in   5.005211s
          Hash#fetch      4.906M (± 0.2%) i/s -     25.013M in   5.098867s
 Hash#fetch fallback      2.787M (± 0.1%) i/s -     13.953M in   5.006700s

Comparison:
             Hash#[]:  8029982.2 i/s
          Hash#[] ||:  7351439.6 i/s - 1.09x  (± 0.00) slower
            Hash#dig:  7041018.0 i/s - 1.14x  (± 0.00) slower
          Hash#fetch:  4905690.8 i/s - 1.64x  (± 0.00) slower
          Hash#[] &&:  3148589.2 i/s - 2.55x  (± 0.00) slower
 Hash#fetch fallback:  2786776.7 i/s - 2.88x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.216M i/100ms
  Hash#fetch + block     1.210M i/100ms
    Hash#fetch + arg   838.869k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     12.164M (± 0.0%) i/s -     60.824M in   5.000408s
  Hash#fetch + block     12.116M (± 0.2%) i/s -     61.716M in   5.093629s
    Hash#fetch + arg      8.381M (± 0.1%) i/s -     41.943M in   5.004711s

Comparison:
  Hash#fetch + const: 12163790.9 i/s
  Hash#fetch + block: 12116261.8 i/s - 1.00x  (± 0.00) slower
    Hash#fetch + arg:  8380798.0 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    18.744k i/100ms
         sort + to_h     8.649k i/100ms
Calculating -------------------------------------
      sort_by + to_h    186.421k (± 0.7%) i/s -    937.200k in   5.027603s
         sort + to_h     86.463k (± 0.1%) i/s -    432.450k in   5.001557s

Comparison:
      sort_by + to_h:   186420.8 i/s
         sort + to_h:    86463.2 i/s - 2.16x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   133.847k i/100ms
       Hash#each_key   139.135k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.346M (± 0.3%) i/s -      6.826M in   5.070049s
       Hash#each_key      1.391M (± 0.0%) i/s -      6.957M in   5.000625s

Comparison:
       Hash#each_key:  1391176.3 i/s
      Hash#keys.each:  1346385.9 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.429k i/100ms
           Hash#key?   739.707k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     14.085k (± 5.3%) i/s -     71.450k in   5.090799s
           Hash#key?      7.405M (± 0.2%) i/s -     37.725M in   5.094711s

Comparison:
           Hash#key?:  7404769.6 i/s
  Hash#keys.include?:    14085.3 i/s - 525.71x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     2.876k i/100ms
            Hash#[]=     6.662k i/100ms
Calculating -------------------------------------
         Hash#merge!     28.751k (± 0.2%) i/s -    143.800k in   5.001517s
            Hash#[]=     66.946k (± 0.9%) i/s -    339.762k in   5.075529s

Comparison:
            Hash#[]=:    66946.3 i/s
         Hash#merge!:    28751.3 i/s - 2.33x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.661k i/100ms
      Hash#merge({})     2.874k i/100ms
 Hash#dup#merge!({})     2.149k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         36.420k (± 0.1%) i/s -    183.050k in   5.026101s
      Hash#merge({})     28.763k (± 0.1%) i/s -    146.574k in   5.095925s
 Hash#dup#merge!({})     21.464k (± 0.1%) i/s -    107.450k in   5.006015s

Comparison:
{}#merge!(Hash) do end:    36419.9 i/s
      Hash#merge({}):    28763.0 i/s - 1.27x  (± 0.00) slower
 Hash#dup#merge!({}):    21464.2 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   271.266k i/100ms
          Hash#merge   240.159k i/100ms
Calculating -------------------------------------
        Hash#**other      2.711M (± 0.1%) i/s -     13.563M in   5.002205s
          Hash#merge      2.402M (± 0.1%) i/s -     12.248M in   5.098257s

Comparison:
        Hash#**other:  2711465.9 i/s
          Hash#merge:  2402413.7 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.003k i/100ms
         Hash#merge!     2.836k i/100ms
Calculating -------------------------------------
          Hash#merge     10.216k (± 0.7%) i/s -     51.153k in   5.007483s
         Hash#merge!     28.371k (± 0.4%) i/s -    144.636k in   5.098034s

Comparison:
         Hash#merge!:    28371.3 i/s
          Hash#merge:    10215.9 i/s - 2.78x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      309.476k i/100ms
Array#each             164.257k i/100ms
Array#each_w/_object   118.130k i/100ms
Hash#select-include     51.627k i/100ms
Calculating -------------------------------------
Hash#native-slice         3.093M (± 0.1%) i/s -     15.474M in   5.002654s
Array#each                1.643M (± 0.1%) i/s -      8.377M in   5.097389s
Array#each_w/_object      1.181M (± 0.3%) i/s -      6.025M in   5.099683s
Hash#select-include     513.382k (± 1.1%) i/s -      2.581M in   5.028740s

Comparison:
Hash#native-slice   :  3093121.0 i/s
Array#each          :  1643414.4 i/s - 1.88x  (± 0.00) slower
Array#each_w/_object:  1181384.3 i/s - 2.62x  (± 0.00) slower
Hash#select-include :   513382.4 i/s - 6.02x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   771.000  i/100ms
         Hash#value?   688.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      7.637k (± 3.5%) i/s -     38.550k in   5.054783s
         Hash#value?      6.868k (± 0.1%) i/s -     34.400k in   5.008536s

Comparison:
Hash#values.include?:     7637.2 i/s
         Hash#value?:     6868.3 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                call   506.469k i/100ms
                send   397.569k i/100ms
      method_missing   290.308k i/100ms
Calculating -------------------------------------
                call      5.064M (± 0.1%) i/s -     25.323M in   5.000328s
                send      3.841M (± 3.6%) i/s -     19.481M in   5.079198s
      method_missing      2.901M (± 0.1%) i/s -     14.515M in   5.004395s

Comparison:
                call:  5064361.2 i/s
                send:  3840627.1 i/s - 1.32x  (± 0.00) slower
      method_missing:  2900533.5 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
               Block     5.701k i/100ms
      Symbol#to_proc     6.368k i/100ms
Calculating -------------------------------------
               Block     57.137k (± 0.2%) i/s -    290.751k in   5.088734s
      Symbol#to_proc     63.722k (± 0.1%) i/s -    324.768k in   5.096623s

Comparison:
      Symbol#to_proc:    63722.2 i/s
               Block:    57136.5 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          block.call   800.872k i/100ms
       block + yield   848.360k i/100ms
        unused block   981.717k i/100ms
               yield     1.093M i/100ms
Calculating -------------------------------------
          block.call      8.004M (± 0.1%) i/s -     40.044M in   5.002906s
       block + yield      8.474M (± 0.3%) i/s -     42.418M in   5.005449s
        unused block      9.145M (± 9.8%) i/s -     46.141M in   5.088208s
               yield     10.903M (± 0.0%) i/s -     54.644M in   5.011968s

Comparison:
               yield: 10902744.7 i/s
        unused block:  9145063.8 i/s - 1.19x  (± 0.00) slower
       block + yield:  8474421.2 i/s - 1.29x  (± 0.00) slower
          block.call:  8004072.4 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   238.457k i/100ms
      range#include?     9.757k i/100ms
       range#member?     9.767k i/100ms
       plain compare   356.979k i/100ms
Calculating -------------------------------------
        range#cover?      2.384M (± 0.1%) i/s -     11.923M in   5.001587s
      range#include?     97.894k (± 0.5%) i/s -    497.607k in   5.083277s
       range#member?     97.823k (± 0.3%) i/s -    498.117k in   5.092084s
       plain compare      3.569M (± 0.0%) i/s -     17.849M in   5.000532s

Comparison:
       plain compare:  3569410.9 i/s
        range#cover?:  2383814.1 i/s - 1.50x  (± 0.00) slower
      range#include?:    97893.8 i/s - 36.46x  (± 0.00) slower
       range#member?:    97823.0 i/s - 36.49x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       String#match?   772.018k i/100ms
           String#=~   446.168k i/100ms
          Regexp#===   411.925k i/100ms
        String#match   350.879k i/100ms
Calculating -------------------------------------
       String#match?      7.748M (± 0.1%) i/s -     39.373M in   5.081884s
           String#=~      4.460M (± 0.3%) i/s -     22.308M in   5.001672s
          Regexp#===      4.115M (± 0.1%) i/s -     20.596M in   5.004869s
        String#match      3.498M (± 0.2%) i/s -     17.544M in   5.015021s

Comparison:
       String#match?:  7747703.4 i/s
           String#=~:  4460226.3 i/s - 1.74x  (± 0.00) slower
          Regexp#===:  4115248.3 i/s - 1.88x  (± 0.00) slower
        String#match:  3498289.9 i/s - 2.21x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   473.346k i/100ms
      String#casecmp   625.492k i/100ms
Calculating -------------------------------------
String#downcase + ==      4.734M (± 0.1%) i/s -     24.141M in   5.099415s
      String#casecmp      6.248M (± 0.1%) i/s -     31.275M in   5.005456s

Comparison:
      String#casecmp:  6248104.5 i/s
String#downcase + ==:  4734005.5 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            String#+   423.079k i/100ms
       String#concat   451.764k i/100ms
       String#append   488.037k i/100ms
         "foo" "bar"   978.479k i/100ms
  "#{'foo'}#{'bar'}"   981.227k i/100ms
Calculating -------------------------------------
            String#+      4.226M (± 0.1%) i/s -     21.154M in   5.006094s
       String#concat      4.513M (± 0.1%) i/s -     22.588M in   5.005492s
       String#append      4.874M (± 0.1%) i/s -     24.402M in   5.006050s
         "foo" "bar"      9.794M (± 0.1%) i/s -     49.902M in   5.095054s
  "#{'foo'}#{'bar'}"      9.804M (± 0.1%) i/s -     49.061M in   5.004052s

Comparison:
  "#{'foo'}#{'bar'}":  9804333.3 i/s
         "foo" "bar":  9794290.6 i/s - same-ish: difference falls within error
       String#append:  4874476.1 i/s - 2.01x  (± 0.00) slower
       String#concat:  4512687.0 i/s - 2.17x  (± 0.00) slower
            String#+:  4225643.5 i/s - 2.32x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#+@   787.081k i/100ms
          String#dup   425.809k i/100ms
Calculating -------------------------------------
           String#+@      7.874M (± 0.1%) i/s -     40.141M in   5.098034s
          String#dup      4.252M (± 0.1%) i/s -     21.290M in   5.007716s

Comparison:
           String#+@:  7873851.2 i/s
          String#dup:  4251532.6 i/s - 1.85x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#=~   142.049k i/100ms
       String#match?   320.281k i/100ms
    String#end_with?   414.151k i/100ms
Calculating -------------------------------------
           String#=~      1.420M (± 0.3%) i/s -      7.102M in   5.001315s
       String#match?      3.181M (± 0.0%) i/s -     16.014M in   5.033830s
    String#end_with?      4.186M (± 3.0%) i/s -     21.122M in   5.049808s

Comparison:
    String#end_with?:  4186445.7 i/s
       String#match?:  3181285.6 i/s - 1.32x  (± 0.00) slower
           String#=~:  1420128.5 i/s - 2.95x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    84.075k i/100ms
          String#sub   104.839k i/100ms
String#dup["string"]=
                       138.148k i/100ms
Calculating -------------------------------------
         String#gsub    850.101k (± 0.2%) i/s -      4.288M in   5.043924s
          String#sub      1.073M (± 0.3%) i/s -      5.452M in   5.082206s
String#dup["string"]=
                          1.348M (± 0.5%) i/s -      6.769M in   5.021583s

Comparison:
String#dup["string"]=:  1348065.8 i/s
          String#sub:  1072701.1 i/s - 1.26x  (± 0.00) slower
         String#gsub:   850100.5 i/s - 1.59x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    74.815k i/100ms
           String#tr   265.142k i/100ms
Calculating -------------------------------------
         String#gsub    746.740k (± 0.2%) i/s -      3.741M in   5.009454s
           String#tr      2.650M (± 0.1%) i/s -     13.257M in   5.002138s

Comparison:
           String#tr:  2650289.2 i/s
         String#gsub:   746739.9 i/s - 3.55x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   937.475k i/100ms
         With Freeze     1.572M i/100ms
Calculating -------------------------------------
      Without Freeze      9.371M (± 0.1%) i/s -     46.874M in   5.002000s
         With Freeze     15.722M (± 0.0%) i/s -     78.623M in   5.000710s

Comparison:
         With Freeze: 15722459.5 i/s
      Without Freeze:  9371009.1 i/s - 1.68x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.585k i/100ms
      String#squeeze   126.220k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     25.879k (± 0.2%) i/s -    131.835k in   5.094231s
      String#squeeze      1.251M (± 0.2%) i/s -      6.311M in   5.045824s

Comparison:
      String#squeeze:  1250744.1 i/s
 String#gsub/regex+/:    25879.4 i/s - 48.33x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#=~   212.576k i/100ms
       String#match?   551.457k i/100ms
  String#start_with?   658.765k i/100ms
Calculating -------------------------------------
           String#=~      2.125M (± 0.3%) i/s -     10.629M in   5.001731s
       String#match?      5.538M (± 1.9%) i/s -     28.124M in   5.079735s
  String#start_with?      6.580M (± 0.1%) i/s -     32.938M in   5.006031s

Comparison:
  String#start_with?:  6579718.0 i/s
       String#match?:  5538349.7 i/s - 1.19x  (± 0.00) slower
           String#=~:  2125042.5 i/s - 3.10x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   164.114k i/100ms
    String#[0, n] ==    58.871k i/100ms
   String#[RANGE] ==    54.439k i/100ms
   String#[0...n] ==    35.185k i/100ms
Calculating -------------------------------------
  String#start_with?      1.641M (± 0.1%) i/s -      8.206M in   5.000789s
    String#[0, n] ==    586.498k (± 0.3%) i/s -      2.944M in   5.018901s
   String#[RANGE] ==    544.474k (± 0.1%) i/s -      2.776M in   5.099222s
   String#[0...n] ==    351.703k (± 0.1%) i/s -      1.759M in   5.002100s

Comparison:
  String#start_with?:  1640883.2 i/s
    String#[0, n] ==:   586497.7 i/s - 2.80x  (± 0.00) slower
   String#[RANGE] ==:   544474.0 i/s - 3.01x  (± 0.00) slower
   String#[0...n] ==:   351702.6 i/s - 4.67x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   128.631k i/100ms
 String#sub!'string'    97.338k i/100ms
String#gsub!'string'    59.993k i/100ms
  String#[/regexp/]=   117.856k i/100ms
 String#sub!/regexp/    93.504k i/100ms
String#gsub!/regexp/    49.243k i/100ms
Calculating -------------------------------------
  String#['string']=      1.290M (± 0.7%) i/s -      6.560M in   5.085674s
 String#sub!'string'    928.514k (± 0.2%) i/s -      4.672M in   5.031963s
String#gsub!'string'    597.260k (± 0.2%) i/s -      3.000M in   5.022364s
  String#[/regexp/]=      1.187M (± 0.1%) i/s -      6.011M in   5.063209s
 String#sub!/regexp/    936.318k (± 0.1%) i/s -      4.769M in   5.093046s
String#gsub!/regexp/    485.300k (± 0.2%) i/s -      2.462M in   5.073474s

Comparison:
  String#['string']=:  1289993.6 i/s
  String#[/regexp/]=:  1187125.2 i/s - 1.09x  (± 0.00) slower
 String#sub!/regexp/:   936318.2 i/s - 1.38x  (± 0.00) slower
 String#sub!'string':   928514.0 i/s - 1.39x  (± 0.00) slower
String#gsub!'string':   597260.3 i/s - 2.16x  (± 0.00) slower
String#gsub!/regexp/:   485300.0 i/s - 2.66x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          String#sub   118.362k i/100ms
        String#chomp   407.824k i/100ms
String#delete_suffix   438.964k i/100ms
Calculating -------------------------------------
          String#sub      1.175M (± 0.2%) i/s -      5.918M in   5.035673s
        String#chomp      4.075M (± 0.1%) i/s -     20.391M in   5.004267s
String#delete_suffix      4.384M (± 0.1%) i/s -     21.948M in   5.006271s

Comparison:
String#delete_suffix:  4384144.6 i/s
        String#chomp:  4074764.2 i/s - 1.08x  (± 0.00) slower
          String#sub:  1175240.9 i/s - 3.73x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   455.954k i/100ms
          String#sub   120.372k i/100ms
Calculating -------------------------------------
String#delete_prefix      4.555M (± 0.1%) i/s -     22.798M in   5.005133s
          String#sub      1.197M (± 0.5%) i/s -      6.019M in   5.028822s

Comparison:
String#delete_prefix:  4554865.7 i/s
          String#sub:  1196853.7 i/s - 3.81x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   447.575k i/100ms
    String#unpack[0]   338.429k i/100ms
Calculating -------------------------------------
      String#unpack1      4.506M (± 0.1%) i/s -     22.826M in   5.065791s
    String#unpack[0]      3.378M (± 0.1%) i/s -     16.921M in   5.009693s

Comparison:
      String#unpack1:  4505977.5 i/s
    String#unpack[0]:  3377744.9 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    21.483k i/100ms
          Time.parse     7.578k i/100ms
Calculating -------------------------------------
        Time.iso8601    223.102k (± 0.4%) i/s -      1.117M in   5.007261s
          Time.parse     75.640k (± 0.5%) i/s -    378.900k in   5.009380s

Comparison:
        Time.iso8601:   223102.0 i/s
          Time.parse:    75639.9 i/s - 2.95x  (± 0.00) slower

