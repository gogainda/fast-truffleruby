$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       581.547k i/100ms
Function with splat arguments
                        21.046k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          5.811M (± 0.3%) i/s -     29.077M in   5.003645s
Function with splat arguments
                        198.785k (± 7.0%) i/s -      1.010M in   5.115923s

Comparison:
Function with single Array argument:  5811278.6 i/s
Function with splat arguments:   198785.3 i/s - 29.23x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   904.720k i/100ms
Sequential Assignment
                       939.564k i/100ms
Calculating -------------------------------------
 Parallel Assignment      9.036M (± 0.2%) i/s -     45.236M in   5.006353s
Sequential Assignment
                          9.398M (± 0.1%) i/s -     47.918M in   5.098899s

Comparison:
Sequential Assignment:  9397674.4 i/s
 Parallel Assignment:  9035740.0 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   370.283k i/100ms
       attr_accessor   418.764k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.702M (± 0.1%) i/s -     18.514M in   5.000644s
       attr_accessor      4.154M (± 0.1%) i/s -     20.938M in   5.040672s

Comparison:
       attr_accessor:  4153857.1 i/s
   getter_and_setter:  3702355.0 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    68.978k i/100ms
         respond_to?   602.083k i/100ms
Calculating -------------------------------------
      begin...rescue    686.285k (± 0.9%) i/s -      3.449M in   5.025853s
         respond_to?      5.972M (± 0.1%) i/s -     30.104M in   5.041255s

Comparison:
         respond_to?:  5971565.1 i/s
      begin...rescue:   686284.6 i/s - 8.70x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
              normal   244.087k i/100ms
             &method    87.801k i/100ms
Calculating -------------------------------------
              normal      2.445M (± 0.4%) i/s -     12.448M in   5.092421s
             &method    867.279k (± 3.9%) i/s -      4.390M in   5.070794s

Comparison:
              normal:  2444547.4 i/s
             &method:   867278.6 i/s - 2.82x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       193.000  i/100ms
       define_method   242.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.027k (±19.9%) i/s -      9.071k in   5.023632s
       define_method      2.555k (±16.6%) i/s -     11.858k in   5.001733s

Comparison:
       define_method:     2555.3 i/s
module_eval with string:     2027.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         Float#round   140.085k i/100ms
       Kernel#format   153.516k i/100ms
            String#%   134.968k i/100ms
Calculating -------------------------------------
         Float#round      1.404M (± 0.1%) i/s -      7.144M in   5.087718s
       Kernel#format      1.527M (± 1.9%) i/s -      7.676M in   5.027640s
            String#%      1.359M (± 0.2%) i/s -      6.883M in   5.064593s

Comparison:
       Kernel#format:  1527341.4 i/s
         Float#round:  1404232.2 i/s - 1.09x  (± 0.00) slower
            String#%:  1359123.1 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                Hash   717.374k i/100ms
          OpenStruct   376.031k i/100ms
Calculating -------------------------------------
                Hash      7.173M (± 0.1%) i/s -     35.869M in   5.000268s
          OpenStruct      3.760M (± 0.2%) i/s -     18.802M in   5.000522s

Comparison:
                Hash:  7173365.2 i/s
          OpenStruct:  3759940.2 i/s - 1.91x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                Hash   887.620k i/100ms
          OpenStruct     8.667k i/100ms
Calculating -------------------------------------
                Hash      9.493M (± 3.0%) i/s -     47.931M in   5.055010s
          OpenStruct     86.957k (± 2.5%) i/s -    442.017k in   5.086389s

Comparison:
                Hash:  9492607.9 i/s
          OpenStruct:    86956.9 i/s - 109.16x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   466.405k i/100ms
  ancestors.include?    91.695k i/100ms
Calculating -------------------------------------
  less than or equal      4.670M (± 0.1%) i/s -     23.787M in   5.093488s
  ancestors.include?    915.126k (± 0.4%) i/s -      4.585M in   5.010042s

Comparison:
  less than or equal:  4670023.3 i/s
  ancestors.include?:   915126.3 i/s - 5.10x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.455  (± 0.0%) i/s -      3.000  in   6.586331s
         Kernel loop      0.177  (± 0.0%) i/s -      1.000  in   5.644157s

Comparison:
          While Loop:        0.5 i/s
         Kernel loop:        0.2 i/s - 2.57x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.307M i/100ms
         Array#first     1.073M i/100ms
Calculating -------------------------------------
           Array#[0]     13.053M (± 0.3%) i/s -     65.354M in   5.006719s
         Array#first     10.721M (± 0.1%) i/s -     53.641M in   5.003562s

Comparison:
           Array#[0]: 13053457.9 i/s
         Array#first: 10720579.9 i/s - 1.22x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.295M i/100ms
          Array#last     1.095M i/100ms
Calculating -------------------------------------
          Array#[-1]     12.929M (± 1.2%) i/s -     64.735M in   5.007814s
          Array#last     10.937M (± 0.2%) i/s -     54.750M in   5.005817s

Comparison:
          Array#[-1]: 12928626.3 i/s
          Array#last: 10937363.2 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    76.273k i/100ms
Calculating -------------------------------------
                find      0.201  (± 0.0%) i/s -      2.000  in   9.973148s
             bsearch    762.960k (± 0.1%) i/s -      3.890M in   5.098462s

Comparison:
             bsearch:   762960.3 i/s
                find:        0.2 i/s - 3804557.94x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    14.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    145.313  (± 2.8%) i/s -    728.000  in   5.013019s
        Array#insert      1.146  (± 0.0%) i/s -      6.000  in   5.234568s

Comparison:
       Array#unshift:      145.3 i/s
        Array#insert:        1.1 i/s - 126.76x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.876M i/100ms
          Array#size     1.893M i/100ms
         Array#count     1.372M i/100ms
Calculating -------------------------------------
        Array#length     18.624M (± 2.1%) i/s -     93.782M in   5.038142s
          Array#size     18.890M (± 0.8%) i/s -     94.673M in   5.012149s
         Array#count     13.686M (± 0.4%) i/s -     68.610M in   5.013275s

Comparison:
          Array#size: 18890077.8 i/s
        Array#length: 18624024.7 i/s - same-ish: difference falls within error
         Array#count: 13685937.5 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    33.352k i/100ms
        Array#sample   818.322k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    333.686k (± 0.8%) i/s -      1.701M in   5.097819s
        Array#sample      8.176M (± 0.6%) i/s -     40.916M in   5.004879s

Comparison:
        Array#sample:  8175564.8 i/s
 Array#shuffle.first:   333686.3 i/s - 24.50x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    46.250k i/100ms
          Date.parse    23.209k i/100ms
Calculating -------------------------------------
        Date.iso8601    466.618k (± 0.3%) i/s -      2.359M in   5.055054s
          Date.parse    231.749k (± 1.4%) i/s -      1.160M in   5.008425s

Comparison:
        Date.iso8601:   466618.0 i/s
          Date.parse:   231748.6 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    14.346k i/100ms
           Array#map    20.584k i/100ms
Calculating -------------------------------------
   Array#each + push    143.349k (± 0.3%) i/s -    717.300k in   5.003913s
           Array#map    206.080k (± 0.2%) i/s -      1.050M in   5.094073s

Comparison:
           Array#map:   206080.3 i/s
   Array#each + push:   143348.8 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            For loop    20.852k i/100ms
               #each    23.201k i/100ms
Calculating -------------------------------------
            For loop    208.455k (± 0.3%) i/s -      1.043M in   5.001624s
               #each    232.071k (± 0.1%) i/s -      1.183M in   5.098667s

Comparison:
               #each:   232070.9 i/s
            For loop:   208454.8 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          While Loop    24.497k i/100ms
     each_with_index    14.733k i/100ms
Calculating -------------------------------------
          While Loop    245.094k (± 0.1%) i/s -      1.249M in   5.097426s
     each_with_index    147.421k (± 0.2%) i/s -    751.383k in   5.096854s

Comparison:
          While Loop:   245093.8 i/s
     each_with_index:   147421.3 i/s - 1.66x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    60.188k i/100ms
      inject to_proc     1.697k i/100ms
        inject block     1.578k i/100ms
Calculating -------------------------------------
       inject symbol    588.870k (± 6.6%) i/s -      2.949M in   5.028014s
      inject to_proc     16.963k (± 0.2%) i/s -     84.850k in   5.002139s
        inject block     15.790k (± 0.3%) i/s -     80.478k in   5.096803s

Comparison:
       inject symbol:   588870.2 i/s
      inject to_proc:    16962.8 i/s - 34.72x  (± 0.00) slower
        inject block:    15790.0 i/s - 37.29x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     5.557k i/100ms
   Array#map.flatten     3.031k i/100ms
      Array#flat_map     7.324k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     55.603k (± 0.1%) i/s -    283.407k in   5.097002s
   Array#map.flatten     30.297k (± 0.3%) i/s -    151.550k in   5.002213s
      Array#flat_map     73.610k (± 0.2%) i/s -    373.524k in   5.074414s

Comparison:
      Array#flat_map:    73609.6 i/s
Array#map.flatten(1):    55602.8 i/s - 1.32x  (± 0.00) slower
   Array#map.flatten:    30297.0 i/s - 2.43x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    23.683k i/100ms
  Array#reverse_each    24.424k i/100ms
Calculating -------------------------------------
  Array#reverse.each    236.655k (± 0.1%) i/s -      1.184M in   5.003709s
  Array#reverse_each    244.182k (± 0.1%) i/s -      1.221M in   5.001189s

Comparison:
  Array#reverse_each:   244182.2 i/s
  Array#reverse.each:   236654.9 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        15.364k i/100ms
   Enumerable#detect    63.183k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        153.703k (± 0.1%) i/s -      3.088M in  20.091728s
   Enumerable#detect    631.234k (± 0.1%) i/s -     12.637M in  20.018905s

Comparison:
   Enumerable#detect:   631234.0 i/s
Enumerable#select.first:   153703.4 i/s - 4.11x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       175.210k i/100ms
Enumerable#select.last
                        14.505k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.762M (± 0.4%) i/s -      8.936M in   5.072610s
Enumerable#select.last
                        145.009k (± 0.2%) i/s -    725.250k in   5.001440s

Comparison:
Enumerable#reverse.detect:  1761589.5 i/s
Enumerable#select.last:   145008.6 i/s - 12.15x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.755k i/100ms
  Enumerable#sort_by     3.580k i/100ms
     Enumerable#sort     1.861k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         37.539k (± 0.3%) i/s -    187.750k in   5.001499s
  Enumerable#sort_by     35.837k (± 0.3%) i/s -    182.580k in   5.094820s
     Enumerable#sort     18.619k (± 0.2%) i/s -     94.911k in   5.097600s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    37539.1 i/s
  Enumerable#sort_by:    35836.7 i/s - 1.05x  (± 0.00) slower
     Enumerable#sort:    18618.8 i/s - 2.02x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    13.789k i/100ms
Enumerable#sort_by...first
                         6.752k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    137.959k (± 0.1%) i/s -    703.239k in   5.097455s
Enumerable#sort_by...first
                         67.418k (± 0.3%) i/s -    337.600k in   5.007609s

Comparison:
   Enumerable#min_by:   137958.9 i/s
Enumerable#sort_by...first:    67417.9 i/s - 2.05x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   298.828k i/100ms
            Hash#dup   208.335k i/100ms
Calculating -------------------------------------
              Hash[]      2.791M (± 4.1%) i/s -     14.045M in   5.039852s
            Hash#dup      2.027M (± 1.5%) i/s -     10.208M in   5.038528s

Comparison:
              Hash[]:  2791215.8 i/s
            Hash#dup:  2026562.5 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.163M i/100ms
  Hash#fetch, symbol   964.827k i/100ms
     Hash#[], string   936.480k i/100ms
  Hash#fetch, string   614.778k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     11.631M (± 0.3%) i/s -     58.174M in   5.001709s
  Hash#fetch, symbol      9.663M (± 0.2%) i/s -     49.206M in   5.092240s
     Hash#[], string      9.364M (± 0.1%) i/s -     46.824M in   5.000489s
  Hash#fetch, string      6.077M (± 0.4%) i/s -     30.739M in   5.057960s

Comparison:
     Hash#[], symbol: 11630999.8 i/s
  Hash#fetch, symbol:  9663013.5 i/s - 1.20x  (± 0.00) slower
     Hash#[], string:  9363891.0 i/s - 1.24x  (± 0.00) slower
  Hash#fetch, string:  6077424.4 i/s - 1.91x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   708.048k i/100ms
             Hash#[]   753.539k i/100ms
          Hash#[] ||   703.396k i/100ms
          Hash#[] &&   323.637k i/100ms
          Hash#fetch   501.841k i/100ms
 Hash#fetch fallback   312.163k i/100ms
Calculating -------------------------------------
            Hash#dig      7.067M (± 0.5%) i/s -     35.402M in   5.009778s
             Hash#[]      7.523M (± 0.4%) i/s -     37.677M in   5.008297s
          Hash#[] ||      7.008M (± 0.6%) i/s -     35.170M in   5.018669s
          Hash#[] &&      3.233M (± 0.2%) i/s -     16.182M in   5.004839s
          Hash#fetch      5.038M (± 0.5%) i/s -     25.594M in   5.080643s
 Hash#fetch fallback      3.121M (± 0.6%) i/s -     15.608M in   5.000472s

Comparison:
             Hash#[]:  7523003.8 i/s
            Hash#dig:  7066858.9 i/s - 1.06x  (± 0.00) slower
          Hash#[] ||:  7008033.5 i/s - 1.07x  (± 0.00) slower
          Hash#fetch:  5037650.0 i/s - 1.49x  (± 0.00) slower
          Hash#[] &&:  3233253.6 i/s - 2.33x  (± 0.00) slower
 Hash#fetch fallback:  3121453.9 i/s - 2.41x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.191M i/100ms
  Hash#fetch + block     1.139M i/100ms
    Hash#fetch + arg   833.683k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     11.905M (± 0.4%) i/s -     60.716M in   5.100040s
  Hash#fetch + block     11.564M (± 0.1%) i/s -     58.086M in   5.023002s
    Hash#fetch + arg      8.375M (± 0.1%) i/s -     42.518M in   5.076908s

Comparison:
  Hash#fetch + const: 11905182.0 i/s
  Hash#fetch + block: 11564066.9 i/s - 1.03x  (± 0.00) slower
    Hash#fetch + arg:  8374758.6 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    20.322k i/100ms
         sort + to_h     8.450k i/100ms
Calculating -------------------------------------
      sort_by + to_h    202.767k (± 0.8%) i/s -      1.016M in   5.011525s
         sort + to_h     84.566k (± 0.2%) i/s -    430.950k in   5.096006s

Comparison:
      sort_by + to_h:   202767.0 i/s
         sort + to_h:    84566.4 i/s - 2.40x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   152.280k i/100ms
       Hash#each_key   162.464k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.528M (± 0.2%) i/s -      7.766M in   5.081050s
       Hash#each_key      1.628M (± 0.1%) i/s -      8.286M in   5.089711s

Comparison:
       Hash#each_key:  1627924.6 i/s
      Hash#keys.each:  1528486.2 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   988.000  i/100ms
           Hash#key?   809.808k i/100ms
Calculating -------------------------------------
  Hash#keys.include?      9.638k (± 4.3%) i/s -     48.412k in   5.033997s
           Hash#key?      8.099M (± 0.1%) i/s -     41.300M in   5.099256s

Comparison:
           Hash#key?:  8099267.0 i/s
  Hash#keys.include?:     9638.0 i/s - 840.35x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.060k i/100ms
            Hash#[]=     7.295k i/100ms
Calculating -------------------------------------
         Hash#merge!     30.642k (± 0.2%) i/s -    156.060k in   5.092989s
            Hash#[]=     72.996k (± 0.5%) i/s -    372.045k in   5.096882s

Comparison:
            Hash#[]=:    72996.5 i/s
         Hash#merge!:    30642.2 i/s - 2.38x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.670k i/100ms
      Hash#merge({})     2.927k i/100ms
 Hash#dup#merge!({})     2.108k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         36.840k (± 0.1%) i/s -    187.170k in   5.080570s
      Hash#merge({})     29.149k (± 0.1%) i/s -    146.350k in   5.020720s
 Hash#dup#merge!({})     20.973k (± 0.1%) i/s -    105.400k in   5.025407s

Comparison:
{}#merge!(Hash) do end:    36840.4 i/s
      Hash#merge({}):    29149.2 i/s - 1.26x  (± 0.00) slower
 Hash#dup#merge!({}):    20973.5 i/s - 1.76x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   281.561k i/100ms
          Hash#merge   256.910k i/100ms
Calculating -------------------------------------
        Hash#**other      2.819M (± 0.2%) i/s -     14.360M in   5.093285s
          Hash#merge      2.564M (± 0.6%) i/s -     12.846M in   5.010537s

Comparison:
        Hash#**other:  2819328.7 i/s
          Hash#merge:  2563805.4 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.220k i/100ms
         Hash#merge!     3.028k i/100ms
Calculating -------------------------------------
          Hash#merge     12.087k (± 1.6%) i/s -     61.000k in   5.048211s
         Hash#merge!     30.382k (± 0.3%) i/s -    154.428k in   5.083009s

Comparison:
         Hash#merge!:    30381.5 i/s
          Hash#merge:    12086.6 i/s - 2.51x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      328.397k i/100ms
Array#each             170.531k i/100ms
Array#each_w/_object   121.988k i/100ms
Hash#select-include     55.927k i/100ms
Calculating -------------------------------------
Hash#native-slice         3.273M (± 0.1%) i/s -     16.420M in   5.017485s
Array#each                1.725M (± 0.8%) i/s -      8.697M in   5.042591s
Array#each_w/_object      1.219M (± 0.5%) i/s -      6.099M in   5.001849s
Hash#select-include     554.314k (± 1.2%) i/s -      2.796M in   5.045456s

Comparison:
Hash#native-slice   :  3272530.1 i/s
Array#each          :  1724841.0 i/s - 1.90x  (± 0.00) slower
Array#each_w/_object:  1219464.1 i/s - 2.68x  (± 0.00) slower
Hash#select-include :   554314.1 i/s - 5.90x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   935.000  i/100ms
         Hash#value?   832.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      9.242k (± 4.5%) i/s -     46.750k in   5.071071s
         Hash#value?      8.328k (± 0.3%) i/s -     42.432k in   5.094903s

Comparison:
Hash#values.include?:     9241.5 i/s
         Hash#value?:     8328.4 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                call   540.405k i/100ms
                send   400.832k i/100ms
      method_missing   295.646k i/100ms
Calculating -------------------------------------
                call      5.370M (± 1.9%) i/s -     27.020M in   5.033908s
                send      4.001M (± 0.1%) i/s -     20.042M in   5.009167s
      method_missing      2.954M (± 0.1%) i/s -     14.782M in   5.003351s

Comparison:
                call:  5369887.1 i/s
                send:  4000988.4 i/s - 1.34x  (± 0.00) slower
      method_missing:  2954481.5 i/s - 1.82x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
               Block     6.913k i/100ms
      Symbol#to_proc     7.642k i/100ms
Calculating -------------------------------------
               Block     69.289k (± 0.5%) i/s -    352.563k in   5.088428s
      Symbol#to_proc     75.968k (± 0.5%) i/s -    382.100k in   5.029895s

Comparison:
      Symbol#to_proc:    75968.1 i/s
               Block:    69289.1 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          block.call   773.410k i/100ms
       block + yield   829.743k i/100ms
        unused block     1.081M i/100ms
               yield     1.015M i/100ms
Calculating -------------------------------------
          block.call      7.734M (± 0.1%) i/s -     38.670M in   5.000324s
       block + yield      8.296M (± 0.1%) i/s -     41.487M in   5.000756s
        unused block     10.795M (± 0.4%) i/s -     54.042M in   5.006350s
               yield     10.278M (± 0.1%) i/s -     51.748M in   5.034671s

Comparison:
        unused block: 10794797.1 i/s
               yield: 10278353.5 i/s - 1.05x  (± 0.00) slower
       block + yield:  8296183.7 i/s - 1.30x  (± 0.00) slower
          block.call:  7733608.0 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   243.362k i/100ms
      range#include?     9.340k i/100ms
       range#member?     9.363k i/100ms
       plain compare   344.762k i/100ms
Calculating -------------------------------------
        range#cover?      2.437M (± 0.1%) i/s -     12.411M in   5.093666s
      range#include?     93.514k (± 0.7%) i/s -    476.340k in   5.094016s
       range#member?     93.989k (± 0.2%) i/s -    477.513k in   5.080552s
       plain compare      3.466M (± 0.2%) i/s -     17.583M in   5.072477s

Comparison:
       plain compare:  3466341.7 i/s
        range#cover?:  2436647.9 i/s - 1.42x  (± 0.00) slower
       range#member?:    93988.9 i/s - 36.88x  (± 0.00) slower
      range#include?:    93514.3 i/s - 37.07x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       String#match?   753.092k i/100ms
           String#=~   489.718k i/100ms
          Regexp#===   466.083k i/100ms
        String#match   337.666k i/100ms
Calculating -------------------------------------
       String#match?      7.530M (± 0.1%) i/s -     37.655M in   5.000636s
           String#=~      4.898M (± 0.1%) i/s -     24.976M in   5.099297s
          Regexp#===      4.649M (± 0.1%) i/s -     23.304M in   5.012876s
        String#match      3.375M (± 0.1%) i/s -     16.883M in   5.002426s

Comparison:
       String#match?:  7529966.7 i/s
           String#=~:  4897859.5 i/s - 1.54x  (± 0.00) slower
          Regexp#===:  4648861.7 i/s - 1.62x  (± 0.00) slower
        String#match:  3375029.5 i/s - 2.23x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   513.419k i/100ms
      String#casecmp   616.917k i/100ms
Calculating -------------------------------------
String#downcase + ==      5.123M (± 0.2%) i/s -     25.671M in   5.011285s
      String#casecmp      6.176M (± 0.1%) i/s -     31.463M in   5.094240s

Comparison:
      String#casecmp:  6176151.9 i/s
String#downcase + ==:  5122650.9 i/s - 1.21x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            String#+   464.978k i/100ms
       String#concat   475.991k i/100ms
       String#append   512.593k i/100ms
         "foo" "bar"   995.014k i/100ms
  "#{'foo'}#{'bar'}"   979.967k i/100ms
Calculating -------------------------------------
            String#+      4.653M (± 0.3%) i/s -     23.714M in   5.096199s
       String#concat      4.752M (± 0.3%) i/s -     23.800M in   5.008690s
       String#append      5.119M (± 0.3%) i/s -     25.630M in   5.006746s
         "foo" "bar"      9.914M (± 0.5%) i/s -     49.751M in   5.018297s
  "#{'foo'}#{'bar'}"      9.803M (± 0.5%) i/s -     49.978M in   5.098289s

Comparison:
         "foo" "bar":  9914121.6 i/s
  "#{'foo'}#{'bar'}":  9803216.6 i/s - 1.01x  (± 0.00) slower
       String#append:  5119066.1 i/s - 1.94x  (± 0.00) slower
       String#concat:  4751683.1 i/s - 2.09x  (± 0.00) slower
            String#+:  4653287.6 i/s - 2.13x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#+@   787.469k i/100ms
          String#dup   445.019k i/100ms
Calculating -------------------------------------
           String#+@      7.864M (± 0.4%) i/s -     39.373M in   5.007204s
          String#dup      4.450M (± 0.5%) i/s -     22.696M in   5.099974s

Comparison:
           String#+@:  7863510.5 i/s
          String#dup:  4450305.3 i/s - 1.77x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#=~   145.408k i/100ms
       String#match?   326.572k i/100ms
    String#end_with?   478.492k i/100ms
Calculating -------------------------------------
           String#=~      1.452M (± 0.2%) i/s -      7.270M in   5.007194s
       String#match?      3.267M (± 0.1%) i/s -     16.655M in   5.097883s
    String#end_with?      4.762M (± 0.9%) i/s -     23.925M in   5.023962s

Comparison:
    String#end_with?:  4762495.1 i/s
       String#match?:  3267077.5 i/s - 1.46x  (± 0.00) slower
           String#=~:  1451994.2 i/s - 3.28x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    78.063k i/100ms
          String#sub   107.875k i/100ms
String#dup["string"]=
                       128.155k i/100ms
Calculating -------------------------------------
         String#gsub    788.913k (± 0.3%) i/s -      3.981M in   5.046503s
          String#sub      1.083M (± 2.1%) i/s -      5.502M in   5.080014s
String#dup["string"]=
                          1.246M (± 3.4%) i/s -      6.280M in   5.044013s

Comparison:
String#dup["string"]=:  1246341.7 i/s
          String#sub:  1083487.7 i/s - 1.15x  (± 0.00) slower
         String#gsub:   788913.4 i/s - 1.58x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    71.225k i/100ms
           String#tr   283.134k i/100ms
Calculating -------------------------------------
         String#gsub    707.681k (± 0.4%) i/s -      3.561M in   5.032342s
           String#tr      2.816M (± 0.6%) i/s -     14.157M in   5.027893s

Comparison:
           String#tr:  2815732.0 i/s
         String#gsub:   707681.3 i/s - 3.98x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   941.652k i/100ms
         With Freeze     1.453M i/100ms
Calculating -------------------------------------
      Without Freeze      9.428M (± 0.5%) i/s -     48.024M in   5.094172s
         With Freeze     14.553M (± 0.5%) i/s -     74.103M in   5.092111s

Comparison:
         With Freeze: 14552910.2 i/s
      Without Freeze:  9427563.7 i/s - 1.54x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.603k i/100ms
      String#squeeze   128.738k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     26.141k (± 0.2%) i/s -    132.753k in   5.078424s
      String#squeeze      1.278M (± 1.1%) i/s -      6.437M in   5.035774s

Comparison:
      String#squeeze:  1278410.2 i/s
 String#gsub/regex+/:    26140.7 i/s - 48.90x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#=~   215.422k i/100ms
       String#match?   587.054k i/100ms
  String#start_with?   705.524k i/100ms
Calculating -------------------------------------
           String#=~      2.162M (± 0.2%) i/s -     10.987M in   5.081760s
       String#match?      5.845M (± 1.7%) i/s -     29.353M in   5.022994s
  String#start_with?      7.064M (± 0.1%) i/s -     35.982M in   5.093787s

Comparison:
  String#start_with?:  7063859.1 i/s
       String#match?:  5845494.7 i/s - 1.21x  (± 0.00) slower
           String#=~:  2161958.1 i/s - 3.27x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   176.915k i/100ms
    String#[0, n] ==    69.139k i/100ms
   String#[RANGE] ==    61.728k i/100ms
   String#[0...n] ==    34.563k i/100ms
Calculating -------------------------------------
  String#start_with?      1.771M (± 0.3%) i/s -      9.023M in   5.095110s
    String#[0, n] ==    689.514k (± 0.3%) i/s -      3.457M in   5.013644s
   String#[RANGE] ==    625.428k (± 0.4%) i/s -      3.148M in   5.033662s
   String#[0...n] ==    345.292k (± 0.7%) i/s -      1.728M in   5.005182s

Comparison:
  String#start_with?:  1770868.6 i/s
    String#[0, n] ==:   689513.6 i/s - 2.57x  (± 0.00) slower
   String#[RANGE] ==:   625427.8 i/s - 2.83x  (± 0.00) slower
   String#[0...n] ==:   345291.8 i/s - 5.13x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   137.998k i/100ms
 String#sub!'string'    90.384k i/100ms
String#gsub!'string'    56.936k i/100ms
  String#[/regexp/]=   106.483k i/100ms
 String#sub!/regexp/    85.905k i/100ms
String#gsub!/regexp/    46.225k i/100ms
Calculating -------------------------------------
  String#['string']=      1.373M (± 1.3%) i/s -      6.900M in   5.024451s
 String#sub!'string'    901.750k (± 1.6%) i/s -      4.519M in   5.012998s
String#gsub!'string'    570.375k (± 0.7%) i/s -      2.904M in   5.091149s
  String#[/regexp/]=      1.059M (± 0.1%) i/s -      5.324M in   5.028910s
 String#sub!/regexp/    855.299k (± 0.8%) i/s -      4.295M in   5.022273s
String#gsub!/regexp/    460.323k (± 0.2%) i/s -      2.311M in   5.020946s

Comparison:
  String#['string']=:  1373489.1 i/s
  String#[/regexp/]=:  1058709.8 i/s - 1.30x  (± 0.00) slower
 String#sub!'string':   901749.7 i/s - 1.52x  (± 0.00) slower
 String#sub!/regexp/:   855298.9 i/s - 1.61x  (± 0.00) slower
String#gsub!'string':   570375.5 i/s - 2.41x  (± 0.00) slower
String#gsub!/regexp/:   460323.4 i/s - 2.98x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          String#sub   113.295k i/100ms
        String#chomp   429.877k i/100ms
String#delete_suffix   475.571k i/100ms
Calculating -------------------------------------
          String#sub      1.116M (± 3.4%) i/s -      5.665M in   5.084032s
        String#chomp      4.300M (± 0.3%) i/s -     21.924M in   5.098883s
String#delete_suffix      4.743M (± 0.4%) i/s -     23.779M in   5.013369s

Comparison:
String#delete_suffix:  4743103.6 i/s
        String#chomp:  4299751.4 i/s - 1.10x  (± 0.00) slower
          String#sub:  1115532.1 i/s - 4.25x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   478.295k i/100ms
          String#sub   120.304k i/100ms
Calculating -------------------------------------
String#delete_prefix      4.799M (± 0.2%) i/s -     24.393M in   5.082618s
          String#sub      1.139M (± 3.8%) i/s -      5.775M in   5.076224s

Comparison:
String#delete_prefix:  4799334.2 i/s
          String#sub:  1139192.5 i/s - 4.21x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   462.115k i/100ms
    String#unpack[0]   353.429k i/100ms
Calculating -------------------------------------
      String#unpack1      4.612M (± 0.5%) i/s -     23.106M in   5.010156s
    String#unpack[0]      3.529M (± 0.5%) i/s -     17.671M in   5.007526s

Comparison:
      String#unpack1:  4611907.7 i/s
    String#unpack[0]:  3529056.0 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    21.467k i/100ms
          Time.parse     7.598k i/100ms
Calculating -------------------------------------
        Time.iso8601    220.318k (± 0.2%) i/s -      1.116M in   5.066729s
          Time.parse     75.939k (± 0.4%) i/s -    379.900k in   5.002810s

Comparison:
        Time.iso8601:   220317.8 i/s
          Time.parse:    75938.9 i/s - 2.90x  (± 0.00) slower

