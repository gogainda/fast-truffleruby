$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       557.602k i/100ms
Function with splat arguments
                        20.452k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          5.570M (± 0.1%) i/s -     27.880M in   5.005011s
Function with splat arguments
                        210.606k (± 8.6%) i/s -      1.043M in   5.004523s

Comparison:
Function with single Array argument:  5570448.4 i/s
Function with splat arguments:   210606.0 i/s - 26.45x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   887.308k i/100ms
Sequential Assignment
                       866.559k i/100ms
Calculating -------------------------------------
 Parallel Assignment      8.807M (± 0.3%) i/s -     44.365M in   5.037737s
Sequential Assignment
                          8.679M (± 0.1%) i/s -     44.195M in   5.092260s

Comparison:
 Parallel Assignment:  8806702.4 i/s
Sequential Assignment:  8678771.2 i/s - 1.01x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   359.803k i/100ms
       attr_accessor   420.459k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.597M (± 0.2%) i/s -     17.990M in   5.001431s
       attr_accessor      4.144M (± 0.6%) i/s -     21.023M in   5.073624s

Comparison:
       attr_accessor:  4143706.6 i/s
   getter_and_setter:  3597013.5 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    67.356k i/100ms
         respond_to?   558.764k i/100ms
Calculating -------------------------------------
      begin...rescue    686.144k (± 0.8%) i/s -      3.435M in   5.006796s
         respond_to?      5.584M (± 0.3%) i/s -     27.938M in   5.003386s

Comparison:
         respond_to?:  5583913.2 i/s
      begin...rescue:   686143.6 i/s - 8.14x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
              normal   249.376k i/100ms
             &method    89.244k i/100ms
Calculating -------------------------------------
              normal      2.492M (± 0.1%) i/s -     12.469M in   5.003363s
             &method    881.024k (± 0.3%) i/s -      4.462M in   5.064842s

Comparison:
              normal:  2492084.9 i/s
             &method:   881023.8 i/s - 2.83x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       191.000  i/100ms
       define_method   233.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.027k (±19.2%) i/s -      9.168k in   5.043996s
       define_method      2.548k (±16.3%) i/s -     11.883k in   5.023568s

Comparison:
       define_method:     2548.1 i/s
module_eval with string:     2027.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         Float#round   139.535k i/100ms
       Kernel#format   153.675k i/100ms
            String#%   135.330k i/100ms
Calculating -------------------------------------
         Float#round      1.389M (± 0.1%) i/s -      6.977M in   5.023847s
       Kernel#format      1.539M (± 0.2%) i/s -      7.837M in   5.094076s
            String#%      1.360M (± 0.1%) i/s -      6.902M in   5.074419s

Comparison:
       Kernel#format:  1538542.8 i/s
         Float#round:  1388727.0 i/s - 1.11x  (± 0.00) slower
            String#%:  1360123.5 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                Hash   661.382k i/100ms
          OpenStruct   355.340k i/100ms
Calculating -------------------------------------
                Hash      6.629M (± 0.1%) i/s -     33.730M in   5.088256s
          OpenStruct      3.565M (± 0.1%) i/s -     18.122M in   5.083628s

Comparison:
                Hash:  6629092.0 i/s
          OpenStruct:  3564846.2 i/s - 1.86x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                Hash   890.160k i/100ms
          OpenStruct     8.707k i/100ms
Calculating -------------------------------------
                Hash      9.520M (± 0.2%) i/s -     48.069M in   5.049302s
          OpenStruct     87.361k (± 2.2%) i/s -    444.057k in   5.085669s

Comparison:
                Hash:  9519911.5 i/s
          OpenStruct:    87360.9 i/s - 108.97x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   470.273k i/100ms
  ancestors.include?    92.419k i/100ms
Calculating -------------------------------------
  less than or equal      4.719M (± 0.1%) i/s -     23.984M in   5.082063s
  ancestors.include?    918.580k (± 0.2%) i/s -      4.621M in   5.030567s

Comparison:
  less than or equal:  4719335.9 i/s
  ancestors.include?:   918579.6 i/s - 5.14x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.456  (± 0.0%) i/s -      3.000  in   6.579664s
         Kernel loop      0.182  (± 0.0%) i/s -      1.000  in   5.486079s

Comparison:
          While Loop:        0.5 i/s
         Kernel loop:        0.2 i/s - 2.50x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.250M i/100ms
         Array#first     1.103M i/100ms
Calculating -------------------------------------
           Array#[0]     12.499M (± 0.2%) i/s -     63.741M in   5.099854s
         Array#first     11.026M (± 0.1%) i/s -     56.233M in   5.099856s

Comparison:
           Array#[0]: 12498596.4 i/s
         Array#first: 11026368.3 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.232M i/100ms
          Array#last   988.742k i/100ms
Calculating -------------------------------------
          Array#[-1]     12.331M (± 0.2%) i/s -     62.845M in   5.096694s
          Array#last      9.885M (± 0.1%) i/s -     49.437M in   5.001217s

Comparison:
          Array#[-1]: 12330606.0 i/s
          Array#last:  9885018.4 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    76.265k i/100ms
Calculating -------------------------------------
                find      0.207  (± 0.0%) i/s -      2.000  in   9.647699s
             bsearch    761.180k (± 0.0%) i/s -      3.813M in   5.009655s

Comparison:
             bsearch:   761180.3 i/s
                find:        0.2 i/s - 3671817.29x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    13.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    139.981  (± 2.1%) i/s -    702.000  in   5.017778s
        Array#insert      1.150  (± 0.0%) i/s -      6.000  in   5.219065s

Comparison:
       Array#unshift:      140.0 i/s
        Array#insert:        1.1 i/s - 121.76x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.897M i/100ms
          Array#size     1.882M i/100ms
         Array#count     1.309M i/100ms
Calculating -------------------------------------
        Array#length     19.024M (± 0.6%) i/s -     96.740M in   5.085276s
          Array#size     18.838M (± 0.6%) i/s -     95.985M in   5.095523s
         Array#count     13.080M (± 0.5%) i/s -     65.441M in   5.003214s

Comparison:
        Array#length: 19024140.8 i/s
          Array#size: 18837829.6 i/s - same-ish: difference falls within error
         Array#count: 13080147.3 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    33.254k i/100ms
        Array#sample   827.531k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    332.522k (± 0.7%) i/s -      1.663M in   5.000501s
        Array#sample      8.297M (± 0.1%) i/s -     42.204M in   5.086413s

Comparison:
        Array#sample:  8297417.4 i/s
 Array#shuffle.first:   332521.6 i/s - 24.95x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    48.548k i/100ms
          Date.parse    23.820k i/100ms
Calculating -------------------------------------
        Date.iso8601    486.016k (± 0.5%) i/s -      2.476M in   5.094499s
          Date.parse    237.926k (± 0.4%) i/s -      1.191M in   5.005831s

Comparison:
        Date.iso8601:   486016.2 i/s
          Date.parse:   237925.9 i/s - 2.04x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    13.957k i/100ms
           Array#map    20.415k i/100ms
Calculating -------------------------------------
   Array#each + push    140.394k (± 0.3%) i/s -    711.807k in   5.070099s
           Array#map    206.478k (± 0.5%) i/s -      1.041M in   5.042604s

Comparison:
           Array#map:   206478.4 i/s
   Array#each + push:   140394.4 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            For loop    22.184k i/100ms
               #each    24.488k i/100ms
Calculating -------------------------------------
            For loop    221.929k (± 0.1%) i/s -      1.131M in   5.097957s
               #each    243.828k (± 0.4%) i/s -      1.224M in   5.021672s

Comparison:
               #each:   243828.1 i/s
            For loop:   221929.0 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          While Loop    24.508k i/100ms
     each_with_index    14.755k i/100ms
Calculating -------------------------------------
          While Loop    245.496k (± 0.0%) i/s -      1.250M in   5.091368s
     each_with_index    147.515k (± 0.2%) i/s -    737.750k in   5.001204s

Comparison:
          While Loop:   245495.6 i/s
     each_with_index:   147515.0 i/s - 1.66x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    56.640k i/100ms
      inject to_proc     1.728k i/100ms
        inject block     1.580k i/100ms
Calculating -------------------------------------
       inject symbol    565.337k (± 0.8%) i/s -      2.832M in   5.009746s
      inject to_proc     17.292k (± 0.2%) i/s -     88.128k in   5.096453s
        inject block     15.791k (± 0.3%) i/s -     79.000k in   5.002799s

Comparison:
       inject symbol:   565337.3 i/s
      inject to_proc:    17292.1 i/s - 32.69x  (± 0.00) slower
        inject block:    15791.3 i/s - 35.80x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     5.572k i/100ms
   Array#map.flatten     3.044k i/100ms
      Array#flat_map     7.295k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     55.711k (± 0.2%) i/s -    278.600k in   5.000789s
   Array#map.flatten     30.453k (± 0.2%) i/s -    155.244k in   5.097815s
      Array#flat_map     73.172k (± 0.2%) i/s -    372.045k in   5.084530s

Comparison:
      Array#flat_map:    73172.4 i/s
Array#map.flatten(1):    55711.5 i/s - 1.31x  (± 0.00) slower
   Array#map.flatten:    30453.1 i/s - 2.40x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    23.645k i/100ms
  Array#reverse_each    24.391k i/100ms
Calculating -------------------------------------
  Array#reverse.each    236.730k (± 0.2%) i/s -      1.206M in   5.093986s
  Array#reverse_each    243.976k (± 0.1%) i/s -      1.244M in   5.098619s

Comparison:
  Array#reverse_each:   243976.3 i/s
  Array#reverse.each:   236729.8 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        15.555k i/100ms
   Enumerable#detect    63.052k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        155.073k (± 0.1%) i/s -      3.111M in  20.061584s
   Enumerable#detect    634.289k (± 0.4%) i/s -     12.737M in  20.080251s

Comparison:
   Enumerable#detect:   634289.5 i/s
Enumerable#select.first:   155072.8 i/s - 4.09x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       182.182k i/100ms
Enumerable#select.last
                        14.006k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.786M (± 0.3%) i/s -      9.109M in   5.099934s
Enumerable#select.last
                        140.162k (± 0.4%) i/s -    714.306k in   5.096347s

Comparison:
Enumerable#reverse.detect:  1786140.5 i/s
Enumerable#select.last:   140162.4 i/s - 12.74x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.791k i/100ms
  Enumerable#sort_by     3.658k i/100ms
     Enumerable#sort     1.849k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         37.990k (± 0.3%) i/s -    193.341k in   5.089364s
  Enumerable#sort_by     36.536k (± 0.4%) i/s -    182.900k in   5.006130s
     Enumerable#sort     18.488k (± 0.2%) i/s -     92.450k in   5.000536s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    37989.7 i/s
  Enumerable#sort_by:    36535.7 i/s - 1.04x  (± 0.00) slower
     Enumerable#sort:    18488.1 i/s - 2.05x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    13.523k i/100ms
Enumerable#sort_by...first
                         6.755k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    137.082k (± 0.1%) i/s -    689.673k in   5.031114s
Enumerable#sort_by...first
                         68.060k (± 0.6%) i/s -    344.505k in   5.061987s

Comparison:
   Enumerable#min_by:   137081.6 i/s
Enumerable#sort_by...first:    68059.6 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   299.087k i/100ms
            Hash#dup   236.072k i/100ms
Calculating -------------------------------------
              Hash[]      2.914M (± 2.8%) i/s -     14.655M in   5.032336s
            Hash#dup      2.198M (± 1.2%) i/s -     11.095M in   5.049081s

Comparison:
              Hash[]:  2914498.7 i/s
            Hash#dup:  2197855.9 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.069M i/100ms
  Hash#fetch, symbol   862.571k i/100ms
     Hash#[], string   960.390k i/100ms
  Hash#fetch, string   625.068k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     10.696M (± 0.1%) i/s -     54.521M in   5.097489s
  Hash#fetch, symbol      8.631M (± 0.0%) i/s -     43.991M in   5.096648s
     Hash#[], string      9.605M (± 0.1%) i/s -     48.980M in   5.099422s
  Hash#fetch, string      6.247M (± 0.1%) i/s -     31.253M in   5.002908s

Comparison:
     Hash#[], symbol: 10695717.2 i/s
     Hash#[], string:  9605001.3 i/s - 1.11x  (± 0.00) slower
  Hash#fetch, symbol:  8631385.4 i/s - 1.24x  (± 0.00) slower
  Hash#fetch, string:  6247054.3 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   695.084k i/100ms
             Hash#[]   766.758k i/100ms
          Hash#[] ||   703.631k i/100ms
          Hash#[] &&   324.749k i/100ms
          Hash#fetch   502.892k i/100ms
 Hash#fetch fallback   312.678k i/100ms
Calculating -------------------------------------
            Hash#dig      6.956M (± 0.3%) i/s -     35.449M in   5.096503s
             Hash#[]      7.666M (± 0.3%) i/s -     38.338M in   5.000991s
          Hash#[] ||      6.957M (± 0.6%) i/s -     35.182M in   5.057346s
          Hash#[] &&      3.245M (± 0.5%) i/s -     16.237M in   5.004670s
          Hash#fetch      5.025M (± 0.4%) i/s -     25.145M in   5.004269s
 Hash#fetch fallback      3.111M (± 0.3%) i/s -     15.634M in   5.025373s

Comparison:
             Hash#[]:  7666123.3 i/s
          Hash#[] ||:  6956764.0 i/s - 1.10x  (± 0.00) slower
            Hash#dig:  6955689.2 i/s - 1.10x  (± 0.00) slower
          Hash#fetch:  5024705.3 i/s - 1.53x  (± 0.00) slower
          Hash#[] &&:  3244534.8 i/s - 2.36x  (± 0.00) slower
 Hash#fetch fallback:  3111019.4 i/s - 2.46x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.112M i/100ms
  Hash#fetch + block     1.117M i/100ms
    Hash#fetch + arg   817.394k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     11.131M (± 0.2%) i/s -     56.728M in   5.096471s
  Hash#fetch + block     11.169M (± 0.1%) i/s -     55.875M in   5.002720s
    Hash#fetch + arg      8.167M (± 0.3%) i/s -     40.870M in   5.004600s

Comparison:
  Hash#fetch + block: 11168872.6 i/s
  Hash#fetch + const: 11130930.9 i/s - 1.00x  (± 0.00) slower
    Hash#fetch + arg:  8166506.6 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    20.330k i/100ms
         sort + to_h     8.661k i/100ms
Calculating -------------------------------------
      sort_by + to_h    202.423k (± 1.0%) i/s -      1.016M in   5.022162s
         sort + to_h     86.903k (± 0.1%) i/s -    441.711k in   5.082805s

Comparison:
      sort_by + to_h:   202422.8 i/s
         sort + to_h:    86903.1 i/s - 2.33x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   149.222k i/100ms
       Hash#each_key   162.924k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.514M (± 0.1%) i/s -      7.610M in   5.026096s
       Hash#each_key      1.629M (± 0.1%) i/s -      8.146M in   5.001551s

Comparison:
       Hash#each_key:  1628735.6 i/s
      Hash#keys.each:  1514164.1 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.122k i/100ms
           Hash#key?   662.403k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     11.144k (± 4.0%) i/s -     56.100k in   5.043643s
           Hash#key?      6.622M (± 0.0%) i/s -     33.120M in   5.001595s

Comparison:
           Hash#key?:  6621917.9 i/s
  Hash#keys.include?:    11143.8 i/s - 594.23x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.076k i/100ms
            Hash#[]=     7.522k i/100ms
Calculating -------------------------------------
         Hash#merge!     30.804k (± 0.2%) i/s -    156.876k in   5.092802s
            Hash#[]=     75.263k (± 0.5%) i/s -    383.622k in   5.097179s

Comparison:
            Hash#[]=:    75263.4 i/s
         Hash#merge!:    30803.6 i/s - 2.44x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.719k i/100ms
      Hash#merge({})     2.931k i/100ms
 Hash#dup#merge!({})     2.116k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         37.284k (± 0.3%) i/s -    189.669k in   5.087196s
      Hash#merge({})     29.168k (± 0.2%) i/s -    146.550k in   5.024438s
 Hash#dup#merge!({})     21.080k (± 0.1%) i/s -    105.800k in   5.018940s

Comparison:
{}#merge!(Hash) do end:    37283.9 i/s
      Hash#merge({}):    29167.5 i/s - 1.28x  (± 0.00) slower
 Hash#dup#merge!({}):    21080.2 i/s - 1.77x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   282.565k i/100ms
          Hash#merge   255.975k i/100ms
Calculating -------------------------------------
        Hash#**other      2.818M (± 1.2%) i/s -     14.128M in   5.013764s
          Hash#merge      2.558M (± 0.6%) i/s -     12.799M in   5.003424s

Comparison:
        Hash#**other:  2818282.3 i/s
          Hash#merge:  2558101.1 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.206k i/100ms
         Hash#merge!     3.018k i/100ms
Calculating -------------------------------------
          Hash#merge     12.090k (± 2.6%) i/s -     61.506k in   5.090756s
         Hash#merge!     30.144k (± 0.1%) i/s -    150.900k in   5.006020s

Comparison:
         Hash#merge!:    30143.8 i/s
          Hash#merge:    12090.3 i/s - 2.49x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      322.893k i/100ms
Array#each             172.292k i/100ms
Array#each_w/_object   119.615k i/100ms
Hash#select-include     55.590k i/100ms
Calculating -------------------------------------
Hash#native-slice         3.259M (± 0.9%) i/s -     16.468M in   5.053548s
Array#each                1.722M (± 0.1%) i/s -      8.615M in   5.002006s
Array#each_w/_object      1.205M (± 1.2%) i/s -      6.100M in   5.063509s
Hash#select-include     552.620k (± 2.4%) i/s -      2.780M in   5.032529s

Comparison:
Hash#native-slice   :  3258900.8 i/s
Array#each          :  1722230.2 i/s - 1.89x  (± 0.00) slower
Array#each_w/_object:  1204939.4 i/s - 2.70x  (± 0.00) slower
Hash#select-include :   552620.3 i/s - 5.90x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   955.000  i/100ms
         Hash#value?   834.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      9.293k (± 3.2%) i/s -     46.795k in   5.041240s
         Hash#value?      8.345k (± 0.3%) i/s -     42.534k in   5.097163s

Comparison:
Hash#values.include?:     9293.1 i/s
         Hash#value?:     8344.7 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                call   524.379k i/100ms
                send   401.512k i/100ms
      method_missing   290.840k i/100ms
Calculating -------------------------------------
                call      5.249M (± 0.1%) i/s -     26.743M in   5.094500s
                send      4.028M (± 0.3%) i/s -     20.477M in   5.083719s
      method_missing      2.934M (± 0.1%) i/s -     14.833M in   5.055064s

Comparison:
                call:  5249454.4 i/s
                send:  4028021.8 i/s - 1.30x  (± 0.00) slower
      method_missing:  2934255.6 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
               Block     6.851k i/100ms
      Symbol#to_proc     7.624k i/100ms
Calculating -------------------------------------
               Block     68.901k (± 0.3%) i/s -    349.401k in   5.071082s
      Symbol#to_proc     75.877k (± 0.8%) i/s -    381.200k in   5.024216s

Comparison:
      Symbol#to_proc:    75877.1 i/s
               Block:    68901.4 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          block.call   789.975k i/100ms
       block + yield   817.980k i/100ms
        unused block     1.077M i/100ms
               yield     1.033M i/100ms
Calculating -------------------------------------
          block.call      7.902M (± 0.2%) i/s -     40.289M in   5.098825s
       block + yield      8.174M (± 0.1%) i/s -     40.899M in   5.003790s
        unused block     10.794M (± 0.4%) i/s -     54.943M in   5.090082s
               yield     10.352M (± 0.2%) i/s -     52.708M in   5.091779s

Comparison:
        unused block: 10794277.0 i/s
               yield: 10351580.4 i/s - 1.04x  (± 0.00) slower
       block + yield:  8173619.6 i/s - 1.32x  (± 0.00) slower
          block.call:  7901591.1 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   243.441k i/100ms
      range#include?     9.356k i/100ms
       range#member?     9.348k i/100ms
       plain compare   347.813k i/100ms
Calculating -------------------------------------
        range#cover?      2.435M (± 0.1%) i/s -     12.415M in   5.098158s
      range#include?     93.921k (± 0.2%) i/s -    477.156k in   5.080405s
       range#member?     93.892k (± 0.2%) i/s -    476.748k in   5.077626s
       plain compare      3.473M (± 0.4%) i/s -     17.391M in   5.006776s

Comparison:
       plain compare:  3473470.1 i/s
        range#cover?:  2435294.5 i/s - 1.43x  (± 0.00) slower
      range#include?:    93921.1 i/s - 36.98x  (± 0.00) slower
       range#member?:    93892.2 i/s - 36.99x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       String#match?   716.275k i/100ms
           String#=~   488.721k i/100ms
          Regexp#===   441.370k i/100ms
        String#match   338.782k i/100ms
Calculating -------------------------------------
       String#match?      7.166M (± 0.1%) i/s -     36.530M in   5.097696s
           String#=~      4.895M (± 0.1%) i/s -     24.925M in   5.092198s
          Regexp#===      4.437M (± 0.1%) i/s -     22.510M in   5.072844s
        String#match      3.399M (± 0.2%) i/s -     17.278M in   5.083519s

Comparison:
       String#match?:  7165990.0 i/s
           String#=~:  4894701.0 i/s - 1.46x  (± 0.00) slower
          Regexp#===:  4437330.2 i/s - 1.61x  (± 0.00) slower
        String#match:  3398818.7 i/s - 2.11x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   513.394k i/100ms
      String#casecmp   625.355k i/100ms
Calculating -------------------------------------
String#downcase + ==      5.115M (± 0.6%) i/s -     25.670M in   5.018559s
      String#casecmp      6.262M (± 0.3%) i/s -     31.893M in   5.093270s

Comparison:
      String#casecmp:  6261887.8 i/s
String#downcase + ==:  5115126.3 i/s - 1.22x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            String#+   466.914k i/100ms
       String#concat   483.535k i/100ms
       String#append   506.116k i/100ms
         "foo" "bar"   981.428k i/100ms
  "#{'foo'}#{'bar'}"   994.595k i/100ms
Calculating -------------------------------------
            String#+      4.664M (± 0.7%) i/s -     23.346M in   5.005826s
       String#concat      4.830M (± 0.5%) i/s -     24.177M in   5.006003s
       String#append      5.065M (± 0.2%) i/s -     25.812M in   5.095954s
         "foo" "bar"      9.808M (± 0.3%) i/s -     49.071M in   5.003429s
  "#{'foo'}#{'bar'}"      9.933M (± 0.5%) i/s -     49.730M in   5.006833s

Comparison:
  "#{'foo'}#{'bar'}":  9932590.5 i/s
         "foo" "bar":  9807672.4 i/s - 1.01x  (± 0.00) slower
       String#append:  5065203.5 i/s - 1.96x  (± 0.00) slower
       String#concat:  4829653.2 i/s - 2.06x  (± 0.00) slower
            String#+:  4663943.9 i/s - 2.13x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#+@   792.694k i/100ms
          String#dup   432.710k i/100ms
Calculating -------------------------------------
           String#+@      7.923M (± 0.1%) i/s -     39.635M in   5.002501s
          String#dup      4.323M (± 0.2%) i/s -     21.636M in   5.004691s

Comparison:
           String#+@:  7922985.5 i/s
          String#dup:  4323061.2 i/s - 1.83x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#=~   145.799k i/100ms
       String#match?   321.270k i/100ms
    String#end_with?   452.329k i/100ms
Calculating -------------------------------------
           String#=~      1.459M (± 0.2%) i/s -      7.436M in   5.095310s
       String#match?      3.214M (± 0.0%) i/s -     16.385M in   5.098214s
    String#end_with?      4.512M (± 0.2%) i/s -     22.616M in   5.012255s

Comparison:
    String#end_with?:  4512241.2 i/s
       String#match?:  3213826.2 i/s - 1.40x  (± 0.00) slower
           String#=~:  1459336.1 i/s - 3.09x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    78.650k i/100ms
          String#sub   109.762k i/100ms
String#dup["string"]=
                       138.837k i/100ms
Calculating -------------------------------------
         String#gsub    783.769k (± 0.5%) i/s -      3.932M in   5.017555s
          String#sub      1.101M (± 0.4%) i/s -      5.598M in   5.082430s
String#dup["string"]=
                          1.412M (± 0.5%) i/s -      7.081M in   5.014095s

Comparison:
String#dup["string"]=:  1412192.1 i/s
          String#sub:  1101434.5 i/s - 1.28x  (± 0.00) slower
         String#gsub:   783769.3 i/s - 1.80x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    71.256k i/100ms
           String#tr   278.279k i/100ms
Calculating -------------------------------------
         String#gsub    712.584k (± 0.7%) i/s -      3.563M in   5.000051s
           String#tr      2.789M (± 0.3%) i/s -     14.192M in   5.089484s

Comparison:
           String#tr:  2788574.7 i/s
         String#gsub:   712583.9 i/s - 3.91x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   929.312k i/100ms
         With Freeze     1.451M i/100ms
Calculating -------------------------------------
      Without Freeze      9.288M (± 0.4%) i/s -     46.466M in   5.002901s
         With Freeze     14.403M (± 0.3%) i/s -     72.542M in   5.036721s

Comparison:
         With Freeze: 14402672.3 i/s
      Without Freeze:  9287895.3 i/s - 1.55x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.610k i/100ms
      String#squeeze   128.743k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     26.117k (± 0.2%) i/s -    133.110k in   5.096644s
      String#squeeze      1.291M (± 0.4%) i/s -      6.566M in   5.085834s

Comparison:
      String#squeeze:  1291032.6 i/s
 String#gsub/regex+/:    26117.3 i/s - 49.43x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#=~   212.913k i/100ms
       String#match?   594.915k i/100ms
  String#start_with?   695.909k i/100ms
Calculating -------------------------------------
           String#=~      2.118M (± 0.2%) i/s -     10.646M in   5.025174s
       String#match?      5.939M (± 0.1%) i/s -     29.746M in   5.008582s
  String#start_with?      6.951M (± 0.2%) i/s -     34.795M in   5.005530s

Comparison:
  String#start_with?:  6951444.1 i/s
       String#match?:  5938958.1 i/s - 1.17x  (± 0.00) slower
           String#=~:  2118473.3 i/s - 3.28x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   179.071k i/100ms
    String#[0, n] ==    68.868k i/100ms
   String#[RANGE] ==    62.677k i/100ms
   String#[0...n] ==    34.105k i/100ms
Calculating -------------------------------------
  String#start_with?      1.787M (± 0.4%) i/s -      8.954M in   5.009731s
    String#[0, n] ==    688.600k (± 0.2%) i/s -      3.443M in   5.000608s
   String#[RANGE] ==    626.396k (± 0.1%) i/s -      3.134M in   5.002990s
   String#[0...n] ==    340.582k (± 0.1%) i/s -      1.705M in   5.006881s

Comparison:
  String#start_with?:  1787253.7 i/s
    String#[0, n] ==:   688600.0 i/s - 2.60x  (± 0.00) slower
   String#[RANGE] ==:   626396.1 i/s - 2.85x  (± 0.00) slower
   String#[0...n] ==:   340582.1 i/s - 5.25x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   134.925k i/100ms
 String#sub!'string'    90.279k i/100ms
String#gsub!'string'    57.233k i/100ms
  String#[/regexp/]=   105.123k i/100ms
 String#sub!/regexp/    85.526k i/100ms
String#gsub!/regexp/    45.091k i/100ms
Calculating -------------------------------------
  String#['string']=      1.363M (± 1.0%) i/s -      6.881M in   5.049262s
 String#sub!'string'    913.433k (± 0.2%) i/s -      4.604M in   5.040601s
String#gsub!'string'    567.206k (± 0.5%) i/s -      2.862M in   5.045309s
  String#[/regexp/]=      1.056M (± 0.1%) i/s -      5.361M in   5.076685s
 String#sub!/regexp/    860.325k (± 0.3%) i/s -      4.362M in   5.070019s
String#gsub!/regexp/    453.316k (± 0.3%) i/s -      2.300M in   5.072971s

Comparison:
  String#['string']=:  1362939.1 i/s
  String#[/regexp/]=:  1056059.3 i/s - 1.29x  (± 0.00) slower
 String#sub!'string':   913432.7 i/s - 1.49x  (± 0.00) slower
 String#sub!/regexp/:   860325.0 i/s - 1.58x  (± 0.00) slower
String#gsub!'string':   567206.4 i/s - 2.40x  (± 0.00) slower
String#gsub!/regexp/:   453316.1 i/s - 3.01x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          String#sub   111.489k i/100ms
        String#chomp   418.996k i/100ms
String#delete_suffix   449.302k i/100ms
Calculating -------------------------------------
          String#sub      1.176M (± 1.3%) i/s -      5.909M in   5.024324s
        String#chomp      4.192M (± 0.1%) i/s -     21.369M in   5.097729s
String#delete_suffix      4.488M (± 0.2%) i/s -     22.465M in   5.005883s

Comparison:
String#delete_suffix:  4487757.0 i/s
        String#chomp:  4191834.4 i/s - 1.07x  (± 0.00) slower
          String#sub:  1176260.0 i/s - 3.82x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   482.996k i/100ms
          String#sub   119.637k i/100ms
Calculating -------------------------------------
String#delete_prefix      4.820M (± 0.2%) i/s -     24.150M in   5.010549s
          String#sub      1.181M (± 1.3%) i/s -      5.982M in   5.066159s

Comparison:
String#delete_prefix:  4819806.3 i/s
          String#sub:  1180945.1 i/s - 4.08x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   443.325k i/100ms
    String#unpack[0]   342.899k i/100ms
Calculating -------------------------------------
      String#unpack1      4.438M (± 0.3%) i/s -     22.610M in   5.095103s
    String#unpack[0]      3.411M (± 1.5%) i/s -     17.145M in   5.028071s

Comparison:
      String#unpack1:  4437545.3 i/s
    String#unpack[0]:  3410711.9 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    21.470k i/100ms
          Time.parse     7.577k i/100ms
Calculating -------------------------------------
        Time.iso8601    220.188k (± 0.4%) i/s -      1.116M in   5.070483s
          Time.parse     75.642k (± 0.5%) i/s -    378.850k in   5.008607s

Comparison:
        Time.iso8601:   220187.9 i/s
          Time.parse:    75642.1 i/s - 2.91x  (± 0.00) slower

