$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       599.699k i/100ms
Function with splat arguments
                         7.825k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          5.984M (± 0.4%) i/s -     29.985M in   5.011120s
Function with splat arguments
                         77.618k (± 5.3%) i/s -    391.250k in   5.062081s

Comparison:
Function with single Array argument:  5983782.1 i/s
Function with splat arguments:    77617.6 i/s - 77.09x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.029M i/100ms
Sequential Assignment
                       997.929k i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.298M (± 0.1%) i/s -     52.494M in   5.097409s
Sequential Assignment
                          9.979M (± 0.1%) i/s -     49.896M in   5.000390s

Comparison:
 Parallel Assignment: 10298146.3 i/s
Sequential Assignment:  9978516.9 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   353.144k i/100ms
       attr_accessor   411.862k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.523M (± 0.5%) i/s -     17.657M in   5.012554s
       attr_accessor      4.121M (± 0.1%) i/s -     21.005M in   5.097064s

Comparison:
       attr_accessor:  4120997.3 i/s
   getter_and_setter:  3522689.2 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    70.123k i/100ms
         respond_to?   604.363k i/100ms
Calculating -------------------------------------
      begin...rescue    716.888k (± 0.9%) i/s -      3.646M in   5.086838s
         respond_to?      6.008M (± 0.3%) i/s -     30.218M in   5.029869s

Comparison:
         respond_to?:  6007812.2 i/s
      begin...rescue:   716888.0 i/s - 8.38x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
              normal   237.509k i/100ms
             &method    89.788k i/100ms
Calculating -------------------------------------
              normal      2.377M (± 0.1%) i/s -     12.113M in   5.094875s
             &method    894.601k (± 0.9%) i/s -      4.489M in   5.018726s

Comparison:
              normal:  2377483.7 i/s
             &method:   894600.6 i/s - 2.66x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       174.000  i/100ms
       define_method   223.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.928k (±20.2%) i/s -      8.526k in   5.080293s
       define_method      2.311k (±25.6%) i/s -      9.812k in   5.037693s

Comparison:
       define_method:     2310.9 i/s
module_eval with string:     1927.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         Float#round   141.616k i/100ms
       Kernel#format   158.768k i/100ms
            String#%   140.544k i/100ms
Calculating -------------------------------------
         Float#round      1.420M (± 0.1%) i/s -      7.222M in   5.087934s
       Kernel#format      1.586M (± 0.2%) i/s -      7.938M in   5.005836s
            String#%      1.405M (± 0.2%) i/s -      7.027M in   5.003024s

Comparison:
       Kernel#format:  1585834.8 i/s
         Float#round:  1419520.4 i/s - 1.12x  (± 0.00) slower
            String#%:  1404596.6 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                Hash   699.386k i/100ms
          OpenStruct   370.475k i/100ms
Calculating -------------------------------------
                Hash      6.989M (± 0.1%) i/s -     34.969M in   5.003569s
          OpenStruct      3.703M (± 0.1%) i/s -     18.524M in   5.002762s

Comparison:
                Hash:  6988876.2 i/s
          OpenStruct:  3702712.6 i/s - 1.89x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                Hash   924.418k i/100ms
          OpenStruct     7.712k i/100ms
Calculating -------------------------------------
                Hash      9.712M (± 1.8%) i/s -     48.994M in   5.046276s
          OpenStruct     80.044k (± 4.9%) i/s -    401.024k in   5.022868s

Comparison:
                Hash:  9712203.4 i/s
          OpenStruct:    80044.2 i/s - 121.34x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   495.562k i/100ms
  ancestors.include?    85.099k i/100ms
Calculating -------------------------------------
  less than or equal      4.959M (± 0.1%) i/s -     25.274M in   5.096402s
  ancestors.include?    845.728k (± 0.8%) i/s -      4.255M in   5.031471s

Comparison:
  less than or equal:  4959121.7 i/s
  ancestors.include?:   845728.2 i/s - 5.86x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.600  (± 0.0%) i/s -      3.000  in   5.001098s
         Kernel loop      0.176  (± 0.0%) i/s -      1.000  in   5.665744s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 3.40x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.344M i/100ms
         Array#first     1.145M i/100ms
Calculating -------------------------------------
           Array#[0]     13.440M (± 0.1%) i/s -     68.526M in   5.098530s
         Array#first     11.449M (± 0.0%) i/s -     57.260M in   5.001141s

Comparison:
           Array#[0]: 13440308.6 i/s
         Array#first: 11449309.7 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.396M i/100ms
          Array#last     1.214M i/100ms
Calculating -------------------------------------
          Array#[-1]     13.965M (± 0.1%) i/s -     71.201M in   5.098602s
          Array#last     12.145M (± 0.1%) i/s -     61.917M in   5.098180s

Comparison:
          Array#[-1]: 13964802.5 i/s
          Array#last: 12145008.8 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    70.879k i/100ms
Calculating -------------------------------------
                find      0.206  (± 0.0%) i/s -      2.000  in   9.723910s
             bsearch    708.700k (± 0.1%) i/s -      3.544M in   5.000639s

Comparison:
             bsearch:   708699.9 i/s
                find:        0.2 i/s - 3445667.24x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    13.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    139.989  (± 2.1%) i/s -    702.000  in   5.017902s
        Array#insert      1.344  (± 0.0%) i/s -      7.000  in   5.206929s

Comparison:
       Array#unshift:      140.0 i/s
        Array#insert:        1.3 i/s - 104.13x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.955M i/100ms
          Array#size     1.955M i/100ms
         Array#count     1.426M i/100ms
Calculating -------------------------------------
        Array#length     19.555M (± 0.1%) i/s -     99.695M in   5.098137s
          Array#size     19.528M (± 0.1%) i/s -     97.730M in   5.004675s
         Array#count     14.259M (± 0.0%) i/s -     71.298M in   5.000210s

Comparison:
        Array#length: 19555171.9 i/s
          Array#size: 19527653.0 i/s - 1.00x  (± 0.00) slower
         Array#count: 14258972.8 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    31.312k i/100ms
        Array#sample   776.211k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    311.312k (± 1.2%) i/s -      1.566M in   5.029789s
        Array#sample      7.770M (± 0.1%) i/s -     39.587M in   5.094666s

Comparison:
        Array#sample:  7770250.6 i/s
 Array#shuffle.first:   311311.9 i/s - 24.96x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    50.131k i/100ms
          Date.parse    25.109k i/100ms
Calculating -------------------------------------
        Date.iso8601    507.802k (± 0.5%) i/s -      2.557M in   5.034913s
          Date.parse    252.315k (± 0.5%) i/s -      1.281M in   5.075381s

Comparison:
        Date.iso8601:   507801.7 i/s
          Date.parse:   252314.9 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    13.610k i/100ms
           Array#map    19.775k i/100ms
Calculating -------------------------------------
   Array#each + push    136.027k (± 0.3%) i/s -    680.500k in   5.002729s
           Array#map    197.541k (± 0.1%) i/s -    988.750k in   5.005298s

Comparison:
           Array#map:   197541.1 i/s
   Array#each + push:   136026.8 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            For loop    23.095k i/100ms
               #each    23.404k i/100ms
Calculating -------------------------------------
            For loop    230.974k (± 0.0%) i/s -      1.178M in   5.099482s
               #each    234.060k (± 0.0%) i/s -      1.194M in   5.099569s

Comparison:
               #each:   234059.8 i/s
            For loop:   230973.5 i/s - 1.01x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          While Loop    29.006k i/100ms
     each_with_index    14.041k i/100ms
Calculating -------------------------------------
          While Loop    290.182k (± 0.0%) i/s -      1.479M in   5.097856s
     each_with_index    140.794k (± 0.1%) i/s -    716.091k in   5.086085s

Comparison:
          While Loop:   290182.1 i/s
     each_with_index:   140794.2 i/s - 2.06x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    45.606k i/100ms
      inject to_proc     1.629k i/100ms
        inject block     1.585k i/100ms
Calculating -------------------------------------
       inject symbol    456.212k (± 0.0%) i/s -      2.326M in   5.098303s
      inject to_proc     16.329k (± 0.2%) i/s -     83.079k in   5.087758s
        inject block     15.986k (± 0.1%) i/s -     80.835k in   5.056477s

Comparison:
       inject symbol:   456211.9 i/s
      inject to_proc:    16329.3 i/s - 27.94x  (± 0.00) slower
        inject block:    15986.4 i/s - 28.54x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     5.188k i/100ms
   Array#map.flatten     2.789k i/100ms
      Array#flat_map     6.701k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     51.888k (± 0.1%) i/s -    264.588k in   5.099262s
   Array#map.flatten     27.956k (± 0.3%) i/s -    142.239k in   5.088070s
      Array#flat_map     66.902k (± 0.5%) i/s -    335.050k in   5.008176s

Comparison:
      Array#flat_map:    66902.3 i/s
Array#map.flatten(1):    51887.6 i/s - 1.29x  (± 0.00) slower
   Array#map.flatten:    27955.6 i/s - 2.39x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    23.947k i/100ms
  Array#reverse_each    24.844k i/100ms
Calculating -------------------------------------
  Array#reverse.each    230.577k (± 0.1%) i/s -      1.173M in   5.089007s
  Array#reverse_each    239.648k (± 0.1%) i/s -      1.217M in   5.079773s

Comparison:
  Array#reverse_each:   239647.9 i/s
  Array#reverse.each:   230576.5 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        15.291k i/100ms
   Enumerable#detect    63.332k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        152.720k (± 0.3%) i/s -      3.058M in  20.025134s
   Enumerable#detect    632.839k (± 0.1%) i/s -     12.666M in  20.015258s

Comparison:
   Enumerable#detect:   632838.6 i/s
Enumerable#select.first:   152719.9 i/s - 4.14x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       181.511k i/100ms
Enumerable#select.last
                        13.008k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.805M (± 1.1%) i/s -      9.076M in   5.028711s
Enumerable#select.last
                        130.068k (± 0.2%) i/s -    650.400k in   5.000459s

Comparison:
Enumerable#reverse.detect:  1804978.9 i/s
Enumerable#select.last:   130068.4 i/s - 13.88x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.171k i/100ms
  Enumerable#sort_by     3.101k i/100ms
     Enumerable#sort     1.656k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         31.829k (± 0.2%) i/s -    161.721k in   5.080926s
  Enumerable#sort_by     30.967k (± 0.3%) i/s -    155.050k in   5.007064s
     Enumerable#sort     16.558k (± 0.2%) i/s -     82.800k in   5.000598s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    31829.2 i/s
  Enumerable#sort_by:    30966.6 i/s - 1.03x  (± 0.00) slower
     Enumerable#sort:    16558.1 i/s - 1.92x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    13.532k i/100ms
Enumerable#sort_by...first
                         6.257k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    135.218k (± 0.1%) i/s -    676.600k in   5.003784s
Enumerable#sort_by...first
                         62.461k (± 0.8%) i/s -    312.850k in   5.009037s

Comparison:
   Enumerable#min_by:   135217.8 i/s
Enumerable#sort_by...first:    62461.1 i/s - 2.16x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   257.239k i/100ms
            Hash#dup   154.493k i/100ms
Calculating -------------------------------------
              Hash[]      2.295M (± 7.8%) i/s -     11.576M in   5.074370s
            Hash#dup      1.764M (± 5.9%) i/s -      8.806M in   5.009567s

Comparison:
              Hash[]:  2294669.9 i/s
            Hash#dup:  1764075.7 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.293M i/100ms
  Hash#fetch, symbol     1.032M i/100ms
     Hash#[], string     1.059M i/100ms
  Hash#fetch, string   604.185k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     12.936M (± 0.1%) i/s -     65.919M in   5.095616s
  Hash#fetch, symbol     10.323M (± 0.1%) i/s -     51.619M in   5.000158s
     Hash#[], string     10.592M (± 0.0%) i/s -     54.016M in   5.099599s
  Hash#fetch, string      6.037M (± 0.1%) i/s -     30.209M in   5.004182s

Comparison:
     Hash#[], symbol: 12936343.3 i/s
     Hash#[], string: 10592224.1 i/s - 1.22x  (± 0.00) slower
  Hash#fetch, symbol: 10323466.1 i/s - 1.25x  (± 0.00) slower
  Hash#fetch, string:  6036804.0 i/s - 2.14x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   716.957k i/100ms
             Hash#[]   811.625k i/100ms
          Hash#[] ||   735.163k i/100ms
          Hash#[] &&   323.747k i/100ms
          Hash#fetch   489.922k i/100ms
 Hash#fetch fallback   285.006k i/100ms
Calculating -------------------------------------
            Hash#dig      7.155M (± 0.1%) i/s -     35.848M in   5.010145s
             Hash#[]      8.125M (± 0.1%) i/s -     41.393M in   5.094707s
          Hash#[] ||      7.376M (± 0.2%) i/s -     37.493M in   5.083507s
          Hash#[] &&      3.244M (± 0.1%) i/s -     16.511M in   5.090174s
          Hash#fetch      4.909M (± 0.2%) i/s -     24.986M in   5.090244s
 Hash#fetch fallback      2.843M (± 0.1%) i/s -     14.250M in   5.012823s

Comparison:
             Hash#[]:  8124687.3 i/s
          Hash#[] ||:  7375515.5 i/s - 1.10x  (± 0.00) slower
            Hash#dig:  7155056.5 i/s - 1.14x  (± 0.00) slower
          Hash#fetch:  4908639.9 i/s - 1.66x  (± 0.00) slower
          Hash#[] &&:  3243722.9 i/s - 2.50x  (± 0.00) slower
 Hash#fetch fallback:  2842774.1 i/s - 2.86x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.230M i/100ms
  Hash#fetch + block     1.209M i/100ms
    Hash#fetch + arg   838.215k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     12.294M (± 0.0%) i/s -     61.476M in   5.000646s
  Hash#fetch + block     12.103M (± 0.1%) i/s -     61.675M in   5.095833s
    Hash#fetch + arg      8.369M (± 0.2%) i/s -     41.911M in   5.007986s

Comparison:
  Hash#fetch + const: 12293604.7 i/s
  Hash#fetch + block: 12102973.0 i/s - 1.02x  (± 0.00) slower
    Hash#fetch + arg:  8368802.7 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    18.270k i/100ms
         sort + to_h     8.624k i/100ms
Calculating -------------------------------------
      sort_by + to_h    181.444k (± 0.7%) i/s -    913.500k in   5.034894s
         sort + to_h     85.962k (± 1.1%) i/s -    431.200k in   5.016740s

Comparison:
      sort_by + to_h:   181443.8 i/s
         sort + to_h:    85962.1 i/s - 2.11x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   133.384k i/100ms
       Hash#each_key   141.796k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.346M (± 0.5%) i/s -      6.803M in   5.052393s
       Hash#each_key      1.413M (± 0.0%) i/s -      7.090M in   5.017779s

Comparison:
       Hash#each_key:  1412936.1 i/s
      Hash#keys.each:  1346438.8 i/s - 1.05x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.138k i/100ms
           Hash#key?   719.347k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     11.253k (± 4.7%) i/s -     56.900k in   5.070251s
           Hash#key?      7.250M (± 0.0%) i/s -     36.687M in   5.059980s

Comparison:
           Hash#key?:  7250364.5 i/s
  Hash#keys.include?:    11252.7 i/s - 644.32x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     2.964k i/100ms
            Hash#[]=     6.823k i/100ms
Calculating -------------------------------------
         Hash#merge!     29.701k (± 0.7%) i/s -    151.164k in   5.089838s
            Hash#[]=     68.086k (± 0.5%) i/s -    341.150k in   5.010678s

Comparison:
            Hash#[]=:    68086.5 i/s
         Hash#merge!:    29700.7 i/s - 2.29x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.689k i/100ms
      Hash#merge({})     2.965k i/100ms
 Hash#dup#merge!({})     2.184k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         36.956k (± 0.5%) i/s -    188.139k in   5.090993s
      Hash#merge({})     29.356k (± 1.0%) i/s -    148.250k in   5.050625s
 Hash#dup#merge!({})     21.680k (± 0.4%) i/s -    109.200k in   5.036929s

Comparison:
{}#merge!(Hash) do end:    36956.1 i/s
      Hash#merge({}):    29355.6 i/s - 1.26x  (± 0.00) slower
 Hash#dup#merge!({}):    21680.3 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   281.022k i/100ms
          Hash#merge   252.802k i/100ms
Calculating -------------------------------------
        Hash#**other      2.807M (± 0.2%) i/s -     14.051M in   5.006562s
          Hash#merge      2.520M (± 0.8%) i/s -     12.640M in   5.016489s

Comparison:
        Hash#**other:  2806545.8 i/s
          Hash#merge:  2519885.8 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.011k i/100ms
         Hash#merge!     2.971k i/100ms
Calculating -------------------------------------
          Hash#merge     10.281k (± 5.0%) i/s -     51.561k in   5.027853s
         Hash#merge!     28.925k (± 1.4%) i/s -    145.579k in   5.033957s

Comparison:
         Hash#merge!:    28924.8 i/s
          Hash#merge:    10281.0 i/s - 2.81x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      312.803k i/100ms
Array#each             164.325k i/100ms
Array#each_w/_object   118.073k i/100ms
Hash#select-include     47.262k i/100ms
Calculating -------------------------------------
Hash#native-slice         3.132M (± 0.1%) i/s -     15.953M in   5.093812s
Array#each                1.645M (± 0.2%) i/s -      8.381M in   5.093480s
Array#each_w/_object      1.174M (± 0.5%) i/s -      5.904M in   5.028455s
Hash#select-include     467.409k (± 2.2%) i/s -      2.363M in   5.058135s

Comparison:
Hash#native-slice   :  3131833.5 i/s
Array#each          :  1645362.6 i/s - 1.90x  (± 0.00) slower
Array#each_w/_object:  1174080.5 i/s - 2.67x  (± 0.00) slower
Hash#select-include :   467408.8 i/s - 6.70x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   829.000  i/100ms
         Hash#value?   693.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      8.253k (± 4.4%) i/s -     41.450k in   5.033996s
         Hash#value?      6.968k (± 0.9%) i/s -     35.343k in   5.072445s

Comparison:
Hash#values.include?:     8253.1 i/s
         Hash#value?:     6968.2 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                call   514.430k i/100ms
                send   393.481k i/100ms
      method_missing   289.416k i/100ms
Calculating -------------------------------------
                call      5.141M (± 0.3%) i/s -     25.722M in   5.002882s
                send      3.936M (± 0.1%) i/s -     20.068M in   5.098997s
      method_missing      2.887M (± 0.3%) i/s -     14.471M in   5.012886s

Comparison:
                call:  5141373.3 i/s
                send:  3935585.8 i/s - 1.31x  (± 0.00) slower
      method_missing:  2886746.6 i/s - 1.78x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
               Block     5.664k i/100ms
      Symbol#to_proc     6.430k i/100ms
Calculating -------------------------------------
               Block     56.653k (± 0.5%) i/s -    288.864k in   5.098901s
      Symbol#to_proc     64.228k (± 0.1%) i/s -    321.500k in   5.005584s

Comparison:
      Symbol#to_proc:    64228.4 i/s
               Block:    56653.4 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          block.call   799.948k i/100ms
       block + yield   844.315k i/100ms
        unused block     1.100M i/100ms
               yield     1.107M i/100ms
Calculating -------------------------------------
          block.call      8.002M (± 0.1%) i/s -     40.797M in   5.098268s
       block + yield      8.443M (± 0.0%) i/s -     42.216M in   5.000253s
        unused block     11.066M (± 0.1%) i/s -     56.119M in   5.071337s
               yield     11.112M (± 0.1%) i/s -     56.466M in   5.081595s

Comparison:
               yield: 11111926.5 i/s
        unused block: 11065988.8 i/s - 1.00x  (± 0.00) slower
       block + yield:  8442724.4 i/s - 1.32x  (± 0.00) slower
          block.call:  8002201.0 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   238.256k i/100ms
      range#include?     9.421k i/100ms
       range#member?     9.486k i/100ms
       plain compare   357.100k i/100ms
Calculating -------------------------------------
        range#cover?      2.385M (± 0.1%) i/s -     12.151M in   5.094523s
      range#include?     94.375k (± 0.5%) i/s -    480.471k in   5.091220s
       range#member?     95.099k (± 0.4%) i/s -    483.786k in   5.087259s
       plain compare      3.571M (± 0.1%) i/s -     18.212M in   5.099674s

Comparison:
       plain compare:  3571229.9 i/s
        range#cover?:  2385124.1 i/s - 1.50x  (± 0.00) slower
       range#member?:    95099.0 i/s - 37.55x  (± 0.00) slower
      range#include?:    94375.2 i/s - 37.84x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       String#match?   769.344k i/100ms
           String#=~   453.587k i/100ms
          Regexp#===   424.914k i/100ms
        String#match   356.117k i/100ms
Calculating -------------------------------------
       String#match?      7.694M (± 0.0%) i/s -     39.237M in   5.099714s
           String#=~      4.536M (± 0.3%) i/s -     23.133M in   5.099469s
          Regexp#===      4.264M (± 0.2%) i/s -     21.671M in   5.082433s
        String#match      3.549M (± 0.3%) i/s -     17.806M in   5.016915s

Comparison:
       String#match?:  7693872.9 i/s
           String#=~:  4536384.3 i/s - 1.70x  (± 0.00) slower
          Regexp#===:  4263838.8 i/s - 1.80x  (± 0.00) slower
        String#match:  3549186.9 i/s - 2.17x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   478.362k i/100ms
      String#casecmp   629.298k i/100ms
Calculating -------------------------------------
String#downcase + ==      4.774M (± 0.4%) i/s -     23.918M in   5.009799s
      String#casecmp      6.291M (± 0.1%) i/s -     31.465M in   5.001575s

Comparison:
      String#casecmp:  6291000.9 i/s
String#downcase + ==:  4774344.4 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            String#+   426.700k i/100ms
       String#concat   453.338k i/100ms
       String#append   491.799k i/100ms
         "foo" "bar"   979.259k i/100ms
  "#{'foo'}#{'bar'}"   966.893k i/100ms
Calculating -------------------------------------
            String#+      4.266M (± 0.5%) i/s -     21.335M in   5.001591s
       String#concat      4.526M (± 0.1%) i/s -     22.667M in   5.008458s
       String#append      4.900M (± 0.5%) i/s -     24.590M in   5.018752s
         "foo" "bar"      9.784M (± 0.1%) i/s -     48.963M in   5.004539s
  "#{'foo'}#{'bar'}"      9.642M (± 0.4%) i/s -     48.345M in   5.013788s

Comparison:
         "foo" "bar":  9783711.0 i/s
  "#{'foo'}#{'bar'}":  9642477.7 i/s - 1.01x  (± 0.00) slower
       String#append:  4899721.0 i/s - 2.00x  (± 0.00) slower
       String#concat:  4525727.4 i/s - 2.16x  (± 0.00) slower
            String#+:  4265751.7 i/s - 2.29x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#+@   808.055k i/100ms
          String#dup   427.653k i/100ms
Calculating -------------------------------------
           String#+@      8.138M (± 0.3%) i/s -     41.211M in   5.063903s
          String#dup      4.275M (± 0.1%) i/s -     21.383M in   5.001376s

Comparison:
           String#+@:  8138249.4 i/s
          String#dup:  4275357.0 i/s - 1.90x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#=~   144.897k i/100ms
       String#match?   316.710k i/100ms
    String#end_with?   454.259k i/100ms
Calculating -------------------------------------
           String#=~      1.448M (± 0.3%) i/s -      7.245M in   5.003174s
       String#match?      3.167M (± 0.1%) i/s -     15.836M in   5.000232s
    String#end_with?      4.535M (± 0.1%) i/s -     22.713M in   5.008063s

Comparison:
    String#end_with?:  4535282.6 i/s
       String#match?:  3166953.8 i/s - 1.43x  (± 0.00) slower
           String#=~:  1448064.2 i/s - 3.13x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    84.645k i/100ms
          String#sub   112.092k i/100ms
String#dup["string"]=
                       135.738k i/100ms
Calculating -------------------------------------
         String#gsub    856.984k (± 0.7%) i/s -      4.317M in   5.037559s
          String#sub      1.084M (± 0.4%) i/s -      5.493M in   5.065539s
String#dup["string"]=
                          1.431M (± 0.8%) i/s -      7.194M in   5.026379s

Comparison:
String#dup["string"]=:  1431356.2 i/s
          String#sub:  1084302.6 i/s - 1.32x  (± 0.00) slower
         String#gsub:   856983.6 i/s - 1.67x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    74.899k i/100ms
           String#tr   268.693k i/100ms
Calculating -------------------------------------
         String#gsub    744.495k (± 0.3%) i/s -      3.745M in   5.030235s
           String#tr      2.684M (± 0.1%) i/s -     13.435M in   5.006118s

Comparison:
           String#tr:  2683649.6 i/s
         String#gsub:   744495.0 i/s - 3.60x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   971.280k i/100ms
         With Freeze     1.583M i/100ms
Calculating -------------------------------------
      Without Freeze      9.694M (± 0.5%) i/s -     48.564M in   5.009952s
         With Freeze     15.828M (± 0.0%) i/s -     79.143M in   5.000269s

Comparison:
         With Freeze: 15827660.0 i/s
      Without Freeze:  9693724.8 i/s - 1.63x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.555k i/100ms
      String#squeeze   125.958k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     25.500k (± 1.1%) i/s -    127.750k in   5.010463s
      String#squeeze      1.248M (± 1.5%) i/s -      6.298M in   5.047614s

Comparison:
      String#squeeze:  1247986.7 i/s
 String#gsub/regex+/:    25499.8 i/s - 48.94x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#=~   215.586k i/100ms
       String#match?   600.973k i/100ms
  String#start_with?   686.729k i/100ms
Calculating -------------------------------------
           String#=~      2.160M (± 0.5%) i/s -     10.995M in   5.089559s
       String#match?      6.011M (± 0.0%) i/s -     30.650M in   5.099095s
  String#start_with?      6.868M (± 0.2%) i/s -     35.023M in   5.099386s

Comparison:
  String#start_with?:  6868146.0 i/s
       String#match?:  6010797.5 i/s - 1.14x  (± 0.00) slower
           String#=~:  2160332.5 i/s - 3.18x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   164.164k i/100ms
    String#[0, n] ==    58.651k i/100ms
   String#[RANGE] ==    54.489k i/100ms
   String#[0...n] ==    35.411k i/100ms
Calculating -------------------------------------
  String#start_with?      1.644M (± 0.1%) i/s -      8.372M in   5.092598s
    String#[0, n] ==    587.782k (± 0.3%) i/s -      2.991M in   5.089021s
   String#[RANGE] ==    546.582k (± 0.1%) i/s -      2.779M in   5.084219s
   String#[0...n] ==    352.477k (± 0.4%) i/s -      1.771M in   5.023237s

Comparison:
  String#start_with?:  1644027.1 i/s
    String#[0, n] ==:   587782.3 i/s - 2.80x  (± 0.00) slower
   String#[RANGE] ==:   546582.3 i/s - 3.01x  (± 0.00) slower
   String#[0...n] ==:   352476.6 i/s - 4.66x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   136.372k i/100ms
 String#sub!'string'    97.378k i/100ms
String#gsub!'string'    59.704k i/100ms
  String#[/regexp/]=   119.017k i/100ms
 String#sub!/regexp/    94.073k i/100ms
String#gsub!/regexp/    47.889k i/100ms
Calculating -------------------------------------
  String#['string']=      1.314M (± 1.3%) i/s -      6.682M in   5.086358s
 String#sub!'string'    979.063k (± 1.0%) i/s -      4.966M in   5.073000s
String#gsub!'string'    603.402k (± 0.7%) i/s -      3.045M in   5.046456s
  String#[/regexp/]=      1.183M (± 0.2%) i/s -      5.951M in   5.031574s
 String#sub!/regexp/    931.813k (± 1.4%) i/s -      4.704M in   5.048843s
String#gsub!/regexp/    489.253k (± 0.4%) i/s -      2.490M in   5.089921s

Comparison:
  String#['string']=:  1313988.5 i/s
  String#[/regexp/]=:  1182707.3 i/s - 1.11x  (± 0.00) slower
 String#sub!'string':   979062.7 i/s - 1.34x  (± 0.00) slower
 String#sub!/regexp/:   931813.1 i/s - 1.41x  (± 0.00) slower
String#gsub!'string':   603402.3 i/s - 2.18x  (± 0.00) slower
String#gsub!/regexp/:   489253.2 i/s - 2.69x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          String#sub   119.885k i/100ms
        String#chomp   402.148k i/100ms
String#delete_suffix   443.809k i/100ms
Calculating -------------------------------------
          String#sub      1.203M (± 0.4%) i/s -      6.114M in   5.081792s
        String#chomp      4.024M (± 0.4%) i/s -     20.510M in   5.096844s
String#delete_suffix      4.434M (± 0.1%) i/s -     22.190M in   5.005118s

Comparison:
String#delete_suffix:  4433554.2 i/s
        String#chomp:  4024024.0 i/s - 1.10x  (± 0.00) slower
          String#sub:  1203164.8 i/s - 3.68x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   461.193k i/100ms
          String#sub   118.554k i/100ms
Calculating -------------------------------------
String#delete_prefix      4.621M (± 0.1%) i/s -     23.521M in   5.089457s
          String#sub      1.163M (± 0.8%) i/s -      5.928M in   5.098613s

Comparison:
String#delete_prefix:  4621485.7 i/s
          String#sub:  1162690.5 i/s - 3.97x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   455.260k i/100ms
    String#unpack[0]   341.794k i/100ms
Calculating -------------------------------------
      String#unpack1      4.549M (± 0.2%) i/s -     22.763M in   5.004074s
    String#unpack[0]      3.406M (± 0.1%) i/s -     17.090M in   5.017085s

Comparison:
      String#unpack1:  4548921.0 i/s
    String#unpack[0]:  3406303.9 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    21.549k i/100ms
          Time.parse     7.260k i/100ms
Calculating -------------------------------------
        Time.iso8601    220.085k (± 0.8%) i/s -      1.121M in   5.091792s
          Time.parse     73.269k (± 1.0%) i/s -    370.260k in   5.054011s

Comparison:
        Time.iso8601:   220085.0 i/s
          Time.parse:    73268.5 i/s - 3.00x  (± 0.00) slower

