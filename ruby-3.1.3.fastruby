$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       534.366k i/100ms
Function with splat arguments
                         8.886k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          5.252M (± 4.7%) i/s -     26.718M in   5.099346s
Function with splat arguments
                         89.197k (± 7.3%) i/s -    444.300k in   5.014650s

Comparison:
Function with single Array argument:  5252168.9 i/s
Function with splat arguments:    89197.3 i/s - 58.88x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   922.193k i/100ms
Sequential Assignment
                       907.339k i/100ms
Calculating -------------------------------------
 Parallel Assignment      9.073M (± 4.9%) i/s -     46.110M in   5.095501s
Sequential Assignment
                          9.052M (± 3.1%) i/s -     45.367M in   5.016838s

Comparison:
 Parallel Assignment:  9072902.3 i/s
Sequential Assignment:  9051721.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   317.984k i/100ms
       attr_accessor   345.982k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.235M (± 4.4%) i/s -     16.217M in   5.023905s
       attr_accessor      3.564M (± 4.9%) i/s -     17.991M in   5.060747s

Comparison:
       attr_accessor:  3564038.8 i/s
   getter_and_setter:  3234567.6 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    64.733k i/100ms
         respond_to?   537.053k i/100ms
Calculating -------------------------------------
      begin...rescue    655.089k (± 3.2%) i/s -      3.301M in   5.045332s
         respond_to?      5.395M (± 3.8%) i/s -     27.390M in   5.084127s

Comparison:
         respond_to?:  5395236.0 i/s
      begin...rescue:   655089.4 i/s - 8.24x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
              normal   198.520k i/100ms
             &method    79.607k i/100ms
Calculating -------------------------------------
              normal      2.121M (± 5.1%) i/s -     10.720M in   5.068639s
             &method    801.085k (± 4.1%) i/s -      4.060M in   5.077211s

Comparison:
              normal:  2121005.1 i/s
             &method:   801084.5 i/s - 2.65x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       170.000  i/100ms
       define_method   214.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.716k (±17.2%) i/s -      8.160k in   5.021720s
       define_method      2.206k (±23.5%) i/s -     10.058k in   5.389100s

Comparison:
       define_method:     2206.5 i/s
module_eval with string:     1716.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         Float#round   129.935k i/100ms
       Kernel#format   146.282k i/100ms
            String#%   126.046k i/100ms
Calculating -------------------------------------
         Float#round      1.301M (± 3.1%) i/s -      6.497M in   5.000202s
       Kernel#format      1.476M (± 4.3%) i/s -      7.460M in   5.063305s
            String#%      1.293M (± 3.9%) i/s -      6.554M in   5.077693s

Comparison:
       Kernel#format:  1476338.6 i/s
         Float#round:  1300555.7 i/s - 1.14x  (± 0.00) slower
            String#%:  1292810.3 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                Hash   671.433k i/100ms
          OpenStruct   327.518k i/100ms
Calculating -------------------------------------
                Hash      6.587M (± 3.8%) i/s -     33.572M in   5.104415s
          OpenStruct      3.243M (± 3.3%) i/s -     16.376M in   5.055738s

Comparison:
                Hash:  6586671.8 i/s
          OpenStruct:  3242592.9 i/s - 2.03x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                Hash   810.135k i/100ms
          OpenStruct     7.497k i/100ms
Calculating -------------------------------------
                Hash      8.759M (± 3.4%) i/s -     44.557M in   5.093202s
          OpenStruct     75.001k (± 4.7%) i/s -    374.850k in   5.009558s

Comparison:
                Hash:  8759068.7 i/s
          OpenStruct:    75001.5 i/s - 116.79x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   448.432k i/100ms
  ancestors.include?    80.684k i/100ms
Calculating -------------------------------------
  less than or equal      4.501M (± 3.9%) i/s -     22.870M in   5.089967s
  ancestors.include?    800.774k (± 3.8%) i/s -      4.034M in   5.045153s

Comparison:
  less than or equal:  4500614.0 i/s
  ancestors.include?:   800774.1 i/s - 5.62x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.567  (± 0.0%) i/s -      3.000  in   5.289993s
         Kernel loop      0.160  (± 0.0%) i/s -      1.000  in   6.256007s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 3.55x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.206M i/100ms
         Array#first     1.078M i/100ms
Calculating -------------------------------------
           Array#[0]     12.162M (± 2.8%) i/s -     61.490M in   5.059914s
         Array#first     10.670M (± 3.9%) i/s -     53.911M in   5.060499s

Comparison:
           Array#[0]: 12161852.0 i/s
         Array#first: 10670223.4 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.166M i/100ms
          Array#last   945.282k i/100ms
Calculating -------------------------------------
          Array#[-1]     11.331M (± 3.6%) i/s -     57.155M in   5.051099s
          Array#last      9.494M (± 3.3%) i/s -     48.209M in   5.083447s

Comparison:
          Array#[-1]: 11330560.8 i/s
          Array#last:  9494475.1 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    58.337k i/100ms
Calculating -------------------------------------
                find      0.174  (± 0.0%) i/s -      1.000  in   5.744584s
             bsearch    599.338k (± 2.7%) i/s -      3.034M in   5.065338s

Comparison:
             bsearch:   599337.8 i/s
                find:        0.2 i/s - 3442946.19x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    11.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    115.458  (± 3.5%) i/s -    583.000  in   5.057108s
        Array#insert      0.529  (± 0.0%) i/s -      3.000  in   5.674171s

Comparison:
       Array#unshift:      115.5 i/s
        Array#insert:        0.5 i/s - 218.37x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.685M i/100ms
          Array#size     1.672M i/100ms
         Array#count     1.123M i/100ms
Calculating -------------------------------------
        Array#length     16.961M (± 3.6%) i/s -     85.916M in   5.072244s
          Array#size     17.148M (± 2.8%) i/s -     86.920M in   5.073113s
         Array#count     11.747M (± 4.3%) i/s -     59.537M in   5.078494s

Comparison:
          Array#size: 17147784.0 i/s
        Array#length: 16961106.5 i/s - same-ish: difference falls within error
         Array#count: 11747218.2 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    33.466k i/100ms
        Array#sample   776.428k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    338.532k (± 3.2%) i/s -      1.707M in   5.047296s
        Array#sample      7.693M (± 3.2%) i/s -     38.821M in   5.051850s

Comparison:
        Array#sample:  7692750.7 i/s
 Array#shuffle.first:   338531.6 i/s - 22.72x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    45.432k i/100ms
          Date.parse    23.223k i/100ms
Calculating -------------------------------------
        Date.iso8601    454.630k (± 3.2%) i/s -      2.272M in   5.001725s
          Date.parse    231.607k (± 3.3%) i/s -      1.161M in   5.019321s

Comparison:
        Date.iso8601:   454630.1 i/s
          Date.parse:   231607.3 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    10.440k i/100ms
           Array#map    17.044k i/100ms
Calculating -------------------------------------
   Array#each + push    105.955k (± 4.0%) i/s -    532.440k in   5.033537s
           Array#map    168.399k (± 5.3%) i/s -    852.200k in   5.075521s

Comparison:
           Array#map:   168399.2 i/s
   Array#each + push:   105954.6 i/s - 1.59x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            For loop    18.893k i/100ms
               #each    20.912k i/100ms
Calculating -------------------------------------
            For loop    180.891k (± 7.2%) i/s -    906.864k in   5.041426s
               #each    206.649k (± 3.6%) i/s -      1.046M in   5.067031s

Comparison:
               #each:   206649.1 i/s
            For loop:   180891.1 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          While Loop    26.317k i/100ms
     each_with_index    12.237k i/100ms
Calculating -------------------------------------
          While Loop    262.654k (± 2.4%) i/s -      1.316M in   5.012822s
     each_with_index    124.124k (± 3.4%) i/s -    624.087k in   5.033987s

Comparison:
          While Loop:   262653.8 i/s
     each_with_index:   124124.1 i/s - 2.12x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    68.906k i/100ms
      inject to_proc     1.508k i/100ms
        inject block     1.291k i/100ms
Calculating -------------------------------------
       inject symbol    692.400k (± 3.7%) i/s -      3.514M in   5.082634s
      inject to_proc     14.909k (± 3.0%) i/s -     75.400k in   5.062042s
        inject block     13.580k (± 2.6%) i/s -     68.423k in   5.042083s

Comparison:
       inject symbol:   692399.6 i/s
      inject to_proc:    14908.8 i/s - 46.44x  (± 0.00) slower
        inject block:    13580.3 i/s - 50.99x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     4.830k i/100ms
   Array#map.flatten     2.589k i/100ms
      Array#flat_map     5.947k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     49.262k (± 3.8%) i/s -    246.330k in   5.008092s
   Array#map.flatten     26.007k (± 2.5%) i/s -    132.039k in   5.080396s
      Array#flat_map     60.328k (± 3.9%) i/s -    303.297k in   5.035473s

Comparison:
      Array#flat_map:    60328.2 i/s
Array#map.flatten(1):    49261.6 i/s - 1.22x  (± 0.00) slower
   Array#map.flatten:    26006.7 i/s - 2.32x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    20.611k i/100ms
  Array#reverse_each    20.943k i/100ms
Calculating -------------------------------------
  Array#reverse.each    206.134k (± 4.1%) i/s -      1.031M in   5.008611s
  Array#reverse_each    208.749k (± 3.0%) i/s -      1.047M in   5.020990s

Comparison:
  Array#reverse_each:   208749.2 i/s
  Array#reverse.each:   206133.7 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        13.561k i/100ms
   Enumerable#detect    55.327k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        137.204k (± 3.6%) i/s -      2.753M in  20.091616s
   Enumerable#detect    548.147k (± 3.6%) i/s -     10.955M in  20.011364s

Comparison:
   Enumerable#detect:   548146.8 i/s
Enumerable#select.first:   137204.1 i/s - 4.00x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       155.681k i/100ms
Enumerable#select.last
                        11.317k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.640M (± 2.6%) i/s -      8.251M in   5.035912s
Enumerable#select.last
                        114.110k (± 3.6%) i/s -    577.167k in   5.064875s

Comparison:
Enumerable#reverse.detect:  1639640.6 i/s
Enumerable#select.last:   114109.8 i/s - 14.37x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.322k i/100ms
  Enumerable#sort_by     3.072k i/100ms
     Enumerable#sort     1.566k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         32.300k (± 4.1%) i/s -    162.778k in   5.048528s
  Enumerable#sort_by     31.062k (± 4.0%) i/s -    156.672k in   5.052394s
     Enumerable#sort     15.699k (± 3.6%) i/s -     79.866k in   5.094524s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    32300.1 i/s
  Enumerable#sort_by:    31062.1 i/s - same-ish: difference falls within error
     Enumerable#sort:    15698.9 i/s - 2.06x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    11.561k i/100ms
Enumerable#sort_by...first
                         5.755k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    114.588k (± 3.5%) i/s -    578.050k in   5.051222s
Enumerable#sort_by...first
                         58.490k (± 4.2%) i/s -    293.505k in   5.027702s

Comparison:
   Enumerable#min_by:   114587.6 i/s
Enumerable#sort_by...first:    58489.5 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   245.251k i/100ms
            Hash#dup   173.508k i/100ms
Calculating -------------------------------------
              Hash[]      2.465M (± 4.3%) i/s -     12.508M in   5.083018s
            Hash#dup      1.946M (± 3.8%) i/s -      9.716M in   5.000624s

Comparison:
              Hash[]:  2465339.7 i/s
            Hash#dup:  1946135.5 i/s - 1.27x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.100M i/100ms
  Hash#fetch, symbol   895.017k i/100ms
     Hash#[], string   930.227k i/100ms
  Hash#fetch, string   539.140k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     10.982M (± 3.6%) i/s -     55.011M in   5.016311s
  Hash#fetch, symbol      8.984M (± 3.9%) i/s -     45.646M in   5.088625s
     Hash#[], string      9.322M (± 2.3%) i/s -     47.442M in   5.092085s
  Hash#fetch, string      5.359M (± 3.5%) i/s -     26.957M in   5.036623s

Comparison:
     Hash#[], symbol: 10981709.4 i/s
     Hash#[], string:  9321581.8 i/s - 1.18x  (± 0.00) slower
  Hash#fetch, symbol:  8983867.5 i/s - 1.22x  (± 0.00) slower
  Hash#fetch, string:  5358964.9 i/s - 2.05x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   638.726k i/100ms
             Hash#[]   784.782k i/100ms
          Hash#[] ||   709.515k i/100ms
          Hash#[] &&   312.760k i/100ms
          Hash#fetch   460.617k i/100ms
 Hash#fetch fallback   258.062k i/100ms
Calculating -------------------------------------
            Hash#dig      6.499M (± 3.8%) i/s -     32.575M in   5.019521s
             Hash#[]      7.817M (± 3.7%) i/s -     39.239M in   5.026810s
          Hash#[] ||      6.918M (± 4.1%) i/s -     34.766M in   5.033840s
          Hash#[] &&      3.089M (± 3.9%) i/s -     15.638M in   5.070592s
          Hash#fetch      4.543M (± 3.9%) i/s -     23.031M in   5.077929s
 Hash#fetch fallback      2.650M (± 4.3%) i/s -     13.419M in   5.074852s

Comparison:
             Hash#[]:  7817098.0 i/s
          Hash#[] ||:  6918354.1 i/s - 1.13x  (± 0.00) slower
            Hash#dig:  6499209.1 i/s - 1.20x  (± 0.00) slower
          Hash#fetch:  4542898.2 i/s - 1.72x  (± 0.00) slower
          Hash#[] &&:  3088929.4 i/s - 2.53x  (± 0.00) slower
 Hash#fetch fallback:  2649665.1 i/s - 2.95x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.038M i/100ms
  Hash#fetch + block     1.035M i/100ms
    Hash#fetch + arg   733.436k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     10.507M (± 4.2%) i/s -     52.957M in   5.048920s
  Hash#fetch + block     10.762M (± 3.2%) i/s -     53.830M in   5.007066s
    Hash#fetch + arg      7.427M (± 3.4%) i/s -     37.405M in   5.042324s

Comparison:
  Hash#fetch + block: 10762369.5 i/s
  Hash#fetch + const: 10507485.8 i/s - same-ish: difference falls within error
    Hash#fetch + arg:  7426874.0 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    18.108k i/100ms
         sort + to_h     8.402k i/100ms
Calculating -------------------------------------
      sort_by + to_h    175.059k (± 3.7%) i/s -    887.292k in   5.075729s
         sort + to_h     84.146k (± 4.7%) i/s -    420.100k in   5.004841s

Comparison:
      sort_by + to_h:   175059.4 i/s
         sort + to_h:    84145.9 i/s - 2.08x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   123.729k i/100ms
       Hash#each_key   129.933k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.202M (± 5.0%) i/s -      6.063M in   5.058514s
       Hash#each_key      1.317M (± 3.3%) i/s -      6.627M in   5.035716s

Comparison:
       Hash#each_key:  1317406.2 i/s
      Hash#keys.each:  1201604.4 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   886.000  i/100ms
           Hash#key?   659.689k i/100ms
Calculating -------------------------------------
  Hash#keys.include?      8.714k (± 7.1%) i/s -     43.414k in   5.012618s
           Hash#key?      7.034M (± 3.2%) i/s -     35.623M in   5.069300s

Comparison:
           Hash#key?:  7034440.3 i/s
  Hash#keys.include?:     8713.8 i/s - 807.27x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     2.616k i/100ms
            Hash#[]=     6.114k i/100ms
Calculating -------------------------------------
         Hash#merge!     26.338k (± 3.8%) i/s -    133.416k in   5.073056s
            Hash#[]=     64.064k (± 4.3%) i/s -    324.042k in   5.068315s

Comparison:
            Hash#[]=:    64063.5 i/s
         Hash#merge!:    26338.3 i/s - 2.43x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.300k i/100ms
      Hash#merge({})     2.610k i/100ms
 Hash#dup#merge!({})     1.940k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         32.728k (± 3.0%) i/s -    165.000k in   5.046138s
      Hash#merge({})     26.174k (± 4.1%) i/s -    133.110k in   5.094494s
 Hash#dup#merge!({})     19.366k (± 3.3%) i/s -     97.000k in   5.014637s

Comparison:
{}#merge!(Hash) do end:    32727.5 i/s
      Hash#merge({}):    26174.5 i/s - 1.25x  (± 0.00) slower
 Hash#dup#merge!({}):    19365.5 i/s - 1.69x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   242.479k i/100ms
          Hash#merge   227.452k i/100ms
Calculating -------------------------------------
        Hash#**other      2.567M (± 3.3%) i/s -     12.851M in   5.012744s
          Hash#merge      2.281M (± 4.0%) i/s -     11.600M in   5.093749s

Comparison:
        Hash#**other:  2566583.6 i/s
          Hash#merge:  2281071.6 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   934.000  i/100ms
         Hash#merge!     2.630k i/100ms
Calculating -------------------------------------
          Hash#merge      9.728k (± 5.3%) i/s -     48.568k in   5.006518s
         Hash#merge!     26.784k (± 2.9%) i/s -    134.130k in   5.012158s

Comparison:
         Hash#merge!:    26784.4 i/s
          Hash#merge:     9728.0 i/s - 2.75x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      286.355k i/100ms
Array#each             150.519k i/100ms
Array#each_w/_object   107.938k i/100ms
Hash#select-include     47.577k i/100ms
Calculating -------------------------------------
Hash#native-slice         2.844M (± 3.9%) i/s -     14.318M in   5.042376s
Array#each                1.501M (± 3.1%) i/s -      7.526M in   5.019130s
Array#each_w/_object      1.085M (± 3.8%) i/s -      5.505M in   5.081542s
Hash#select-include     469.732k (± 6.0%) i/s -      2.379M in   5.085439s

Comparison:
Hash#native-slice   :  2843921.3 i/s
Array#each          :  1500930.5 i/s - 1.89x  (± 0.00) slower
Array#each_w/_object:  1084988.8 i/s - 2.62x  (± 0.00) slower
Hash#select-include :   469732.1 i/s - 6.05x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   659.000  i/100ms
         Hash#value?   583.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      6.508k (± 4.4%) i/s -     32.950k in   5.073653s
         Hash#value?      5.950k (± 3.5%) i/s -     29.733k in   5.003544s

Comparison:
Hash#values.include?:     6508.3 i/s
         Hash#value?:     5949.7 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                call   455.870k i/100ms
                send   331.600k i/100ms
      method_missing   256.609k i/100ms
Calculating -------------------------------------
                call      4.303M (± 5.7%) i/s -     21.882M in   5.102316s
                send      3.385M (± 3.4%) i/s -     16.912M in   5.002840s
      method_missing      2.499M (± 4.1%) i/s -     12.574M in   5.039909s

Comparison:
                call:  4303486.4 i/s
                send:  3384502.9 i/s - 1.27x  (± 0.00) slower
      method_missing:  2499266.8 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
               Block     5.124k i/100ms
      Symbol#to_proc     5.603k i/100ms
Calculating -------------------------------------
               Block     50.062k (± 4.9%) i/s -    251.076k in   5.027598s
      Symbol#to_proc     56.763k (± 3.9%) i/s -    285.753k in   5.042419s

Comparison:
      Symbol#to_proc:    56762.6 i/s
               Block:    50061.5 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          block.call   708.418k i/100ms
       block + yield   767.348k i/100ms
        unused block   984.329k i/100ms
               yield   942.227k i/100ms
Calculating -------------------------------------
          block.call      6.795M (± 6.3%) i/s -     34.004M in   5.026263s
       block + yield      7.266M (± 4.5%) i/s -     36.833M in   5.079813s
        unused block      9.678M (± 4.4%) i/s -     49.216M in   5.095678s
               yield      9.064M (± 3.9%) i/s -     46.169M in   5.101795s

Comparison:
        unused block:  9678464.7 i/s
               yield:  9064176.7 i/s - same-ish: difference falls within error
       block + yield:  7265654.7 i/s - 1.33x  (± 0.00) slower
          block.call:  6794763.4 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   218.329k i/100ms
      range#include?     8.376k i/100ms
       range#member?     8.654k i/100ms
       plain compare   302.188k i/100ms
Calculating -------------------------------------
        range#cover?      2.168M (± 4.0%) i/s -     10.916M in   5.044687s
      range#include?     87.231k (± 3.1%) i/s -    443.928k in   5.094156s
       range#member?     86.000k (± 4.0%) i/s -    432.700k in   5.039692s
       plain compare      3.085M (± 5.6%) i/s -     15.412M in   5.013652s

Comparison:
       plain compare:  3085382.0 i/s
        range#cover?:  2167587.2 i/s - 1.42x  (± 0.00) slower
      range#include?:    87230.8 i/s - 35.37x  (± 0.00) slower
       range#member?:    85999.8 i/s - 35.88x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       String#match?   657.789k i/100ms
           String#=~   396.922k i/100ms
          Regexp#===   386.268k i/100ms
        String#match   324.137k i/100ms
Calculating -------------------------------------
       String#match?      6.724M (± 3.1%) i/s -     34.205M in   5.092414s
           String#=~      4.084M (± 3.1%) i/s -     20.640M in   5.058955s
          Regexp#===      3.897M (± 2.8%) i/s -     19.700M in   5.058528s
        String#match      3.112M (± 4.9%) i/s -     15.559M in   5.012604s

Comparison:
       String#match?:  6723851.3 i/s
           String#=~:  4083885.5 i/s - 1.65x  (± 0.00) slower
          Regexp#===:  3897463.5 i/s - 1.73x  (± 0.00) slower
        String#match:  3111508.9 i/s - 2.16x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   406.647k i/100ms
      String#casecmp   571.517k i/100ms
Calculating -------------------------------------
String#downcase + ==      4.056M (± 3.7%) i/s -     20.332M in   5.020154s
      String#casecmp      5.684M (± 3.9%) i/s -     28.576M in   5.035219s

Comparison:
      String#casecmp:  5684251.5 i/s
String#downcase + ==:  4056056.2 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            String#+   400.647k i/100ms
       String#concat   419.420k i/100ms
       String#append   461.787k i/100ms
         "foo" "bar"   892.309k i/100ms
  "#{'foo'}#{'bar'}"   876.731k i/100ms
Calculating -------------------------------------
            String#+      3.782M (± 5.3%) i/s -     19.231M in   5.099157s
       String#concat      4.019M (± 5.6%) i/s -     20.132M in   5.026456s
       String#append      4.463M (± 3.7%) i/s -     22.628M in   5.076729s
         "foo" "bar"      8.785M (± 3.6%) i/s -     44.615M in   5.085571s
  "#{'foo'}#{'bar'}"      8.384M (± 5.5%) i/s -     42.083M in   5.035744s

Comparison:
         "foo" "bar":  8785026.7 i/s
  "#{'foo'}#{'bar'}":  8384241.6 i/s - same-ish: difference falls within error
       String#append:  4463439.1 i/s - 1.97x  (± 0.00) slower
       String#concat:  4018719.3 i/s - 2.19x  (± 0.00) slower
            String#+:  3782389.1 i/s - 2.32x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#+@   747.327k i/100ms
          String#dup   371.817k i/100ms
Calculating -------------------------------------
           String#+@      7.687M (± 2.8%) i/s -     38.861M in   5.059863s
          String#dup      3.768M (± 3.4%) i/s -     18.963M in   5.038328s

Comparison:
           String#+@:  7686728.8 i/s
          String#dup:  3768196.7 i/s - 2.04x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#=~   131.719k i/100ms
       String#match?   283.869k i/100ms
    String#end_with?   408.958k i/100ms
Calculating -------------------------------------
           String#=~      1.332M (± 3.1%) i/s -      6.718M in   5.047772s
       String#match?      2.731M (± 3.5%) i/s -     13.910M in   5.098951s
    String#end_with?      4.166M (± 6.0%) i/s -     20.857M in   5.033116s

Comparison:
    String#end_with?:  4165765.4 i/s
       String#match?:  2731405.1 i/s - 1.53x  (± 0.00) slower
           String#=~:  1332097.7 i/s - 3.13x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    75.463k i/100ms
          String#sub    93.800k i/100ms
String#dup["string"]=
                       125.119k i/100ms
Calculating -------------------------------------
         String#gsub    777.809k (± 2.7%) i/s -      3.924M in   5.048706s
          String#sub    940.395k (± 4.7%) i/s -      4.784M in   5.098522s
String#dup["string"]=
                          1.200M (± 5.4%) i/s -      6.006M in   5.019827s

Comparison:
String#dup["string"]=:  1199934.2 i/s
          String#sub:   940395.2 i/s - 1.28x  (± 0.00) slower
         String#gsub:   777809.0 i/s - 1.54x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    66.263k i/100ms
           String#tr   241.338k i/100ms
Calculating -------------------------------------
         String#gsub    662.438k (± 3.1%) i/s -      3.313M in   5.006503s
           String#tr      2.431M (± 3.8%) i/s -     12.308M in   5.070455s

Comparison:
           String#tr:  2431253.8 i/s
         String#gsub:   662437.6 i/s - 3.67x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   861.498k i/100ms
         With Freeze     1.284M i/100ms
Calculating -------------------------------------
      Without Freeze      8.720M (± 3.6%) i/s -     43.936M in   5.045241s
         With Freeze     13.545M (± 2.8%) i/s -     68.039M in   5.027406s

Comparison:
         With Freeze: 13544748.5 i/s
      Without Freeze:  8720039.4 i/s - 1.55x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.360k i/100ms
      String#squeeze   124.088k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     23.171k (± 4.8%) i/s -    115.640k in   5.002796s
      String#squeeze      1.240M (± 3.7%) i/s -      6.204M in   5.009230s

Comparison:
      String#squeeze:  1240422.7 i/s
 String#gsub/regex+/:    23171.0 i/s - 53.53x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#=~   192.791k i/100ms
       String#match?   509.716k i/100ms
  String#start_with?   579.276k i/100ms
Calculating -------------------------------------
           String#=~      1.953M (± 3.7%) i/s -      9.832M in   5.042334s
       String#match?      5.070M (± 3.1%) i/s -     25.486M in   5.031646s
  String#start_with?      5.831M (± 3.6%) i/s -     29.543M in   5.073026s

Comparison:
  String#start_with?:  5831248.7 i/s
       String#match?:  5070032.0 i/s - 1.15x  (± 0.00) slower
           String#=~:  1952810.3 i/s - 2.99x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   159.865k i/100ms
    String#[0, n] ==    54.109k i/100ms
   String#[RANGE] ==    49.117k i/100ms
   String#[0...n] ==    31.425k i/100ms
Calculating -------------------------------------
  String#start_with?      1.636M (± 4.0%) i/s -      8.313M in   5.090304s
    String#[0, n] ==    557.298k (± 3.4%) i/s -      2.814M in   5.054719s
   String#[RANGE] ==    478.562k (± 6.2%) i/s -      2.407M in   5.049791s
   String#[0...n] ==    306.410k (± 5.3%) i/s -      1.540M in   5.040435s

Comparison:
  String#start_with?:  1635942.3 i/s
    String#[0, n] ==:   557298.3 i/s - 2.94x  (± 0.00) slower
   String#[RANGE] ==:   478562.2 i/s - 3.42x  (± 0.00) slower
   String#[0...n] ==:   306410.5 i/s - 5.34x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   125.303k i/100ms
 String#sub!'string'    88.457k i/100ms
String#gsub!'string'    53.344k i/100ms
  String#[/regexp/]=   109.391k i/100ms
 String#sub!/regexp/    83.782k i/100ms
String#gsub!/regexp/    41.308k i/100ms
Calculating -------------------------------------
  String#['string']=      1.231M (± 2.8%) i/s -      6.265M in   5.093297s
 String#sub!'string'    904.542k (± 3.5%) i/s -      4.600M in   5.091598s
String#gsub!'string'    538.623k (± 3.8%) i/s -      2.721M in   5.058576s
  String#[/regexp/]=      1.090M (± 4.9%) i/s -      5.470M in   5.031850s
 String#sub!/regexp/    853.796k (± 3.3%) i/s -      4.273M in   5.010362s
String#gsub!/regexp/    436.328k (± 3.3%) i/s -      2.189M in   5.023327s

Comparison:
  String#['string']=:  1231044.3 i/s
  String#[/regexp/]=:  1089807.3 i/s - 1.13x  (± 0.00) slower
 String#sub!'string':   904542.3 i/s - 1.36x  (± 0.00) slower
 String#sub!/regexp/:   853795.6 i/s - 1.44x  (± 0.00) slower
String#gsub!'string':   538623.2 i/s - 2.29x  (± 0.00) slower
String#gsub!/regexp/:   436328.0 i/s - 2.82x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          String#sub   108.007k i/100ms
        String#chomp   370.914k i/100ms
String#delete_suffix   397.131k i/100ms
Calculating -------------------------------------
          String#sub      1.085M (± 2.6%) i/s -      5.508M in   5.078938s
        String#chomp      3.727M (± 3.2%) i/s -     18.917M in   5.080353s
String#delete_suffix      4.012M (± 3.7%) i/s -     20.254M in   5.055717s

Comparison:
String#delete_suffix:  4011843.3 i/s
        String#chomp:  3727311.8 i/s - 1.08x  (± 0.00) slower
          String#sub:  1085284.3 i/s - 3.70x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   409.871k i/100ms
          String#sub   109.941k i/100ms
Calculating -------------------------------------
String#delete_prefix      4.117M (± 3.2%) i/s -     20.903M in   5.082423s
          String#sub      1.108M (± 3.4%) i/s -      5.607M in   5.064870s

Comparison:
String#delete_prefix:  4117229.7 i/s
          String#sub:  1108358.6 i/s - 3.71x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   414.188k i/100ms
    String#unpack[0]   321.120k i/100ms
Calculating -------------------------------------
      String#unpack1      4.173M (± 4.9%) i/s -     21.124M in   5.076146s
    String#unpack[0]      3.167M (± 3.1%) i/s -     16.056M in   5.074784s

Comparison:
      String#unpack1:  4172519.2 i/s
    String#unpack[0]:  3167079.7 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    18.769k i/100ms
          Time.parse     6.513k i/100ms
Calculating -------------------------------------
        Time.iso8601    199.974k (± 4.1%) i/s -      1.014M in   5.077335s
          Time.parse     63.240k (± 6.9%) i/s -    319.137k in   5.072729s

Comparison:
        Time.iso8601:   199973.9 i/s
          Time.parse:    63240.4 i/s - 3.16x  (± 0.00) slower

