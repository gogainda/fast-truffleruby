$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       587.911k i/100ms
Function with splat arguments
                         9.598k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          5.877M (± 0.1%) i/s -     29.396M in   5.002087s
Function with splat arguments
                         89.619k (± 7.4%) i/s -    451.106k in   5.070219s

Comparison:
Function with single Array argument:  5876660.4 i/s
Function with splat arguments:    89619.5 i/s - 65.57x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.024M i/100ms
Sequential Assignment
                       980.114k i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.242M (± 0.1%) i/s -     52.203M in   5.097022s
Sequential Assignment
                          9.750M (± 0.0%) i/s -     49.006M in   5.026294s

Comparison:
 Parallel Assignment: 10241933.7 i/s
Sequential Assignment:  9749868.4 i/s - 1.05x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   377.502k i/100ms
       attr_accessor   397.351k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.777M (± 0.1%) i/s -     19.253M in   5.097890s
       attr_accessor      3.976M (± 0.1%) i/s -     20.265M in   5.096494s

Comparison:
       attr_accessor:  3976245.6 i/s
   getter_and_setter:  3776583.6 i/s - 1.05x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    70.523k i/100ms
         respond_to?   593.997k i/100ms
Calculating -------------------------------------
      begin...rescue    706.153k (± 0.3%) i/s -      3.597M in   5.093378s
         respond_to?      5.938M (± 0.1%) i/s -     29.700M in   5.001460s

Comparison:
         respond_to?:  5938238.7 i/s
      begin...rescue:   706152.9 i/s - 8.41x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
              normal   240.684k i/100ms
             &method    89.534k i/100ms
Calculating -------------------------------------
              normal      2.410M (± 0.1%) i/s -     12.275M in   5.093584s
             &method    895.929k (± 0.1%) i/s -      4.566M in   5.096654s

Comparison:
              normal:  2409873.4 i/s
             &method:   895929.4 i/s - 2.69x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       183.000  i/100ms
       define_method   229.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.012k (±16.2%) i/s -      9.516k in   5.080023s
       define_method      2.415k (±23.3%) i/s -     10.305k in   5.062106s

Comparison:
       define_method:     2415.2 i/s
module_eval with string:     2011.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         Float#round   141.250k i/100ms
       Kernel#format   159.215k i/100ms
            String#%   141.816k i/100ms
Calculating -------------------------------------
         Float#round      1.412M (± 0.1%) i/s -      7.062M in   5.002602s
       Kernel#format      1.592M (± 0.0%) i/s -      8.120M in   5.098932s
            String#%      1.418M (± 0.1%) i/s -      7.233M in   5.098940s

Comparison:
       Kernel#format:  1592483.8 i/s
            String#%:  1418456.9 i/s - 1.12x  (± 0.00) slower
         Float#round:  1411765.7 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                Hash   696.438k i/100ms
          OpenStruct   367.132k i/100ms
Calculating -------------------------------------
                Hash      6.962M (± 0.1%) i/s -     34.822M in   5.001446s
          OpenStruct      3.669M (± 0.0%) i/s -     18.357M in   5.002679s

Comparison:
                Hash:  6962368.7 i/s
          OpenStruct:  3669354.8 i/s - 1.90x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                Hash   887.019k i/100ms
          OpenStruct     8.497k i/100ms
Calculating -------------------------------------
                Hash      9.760M (± 0.2%) i/s -     49.673M in   5.089630s
          OpenStruct     85.946k (± 2.4%) i/s -    433.347k in   5.044998s

Comparison:
                Hash:  9759697.3 i/s
          OpenStruct:    85946.3 i/s - 113.56x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   494.421k i/100ms
  ancestors.include?    86.042k i/100ms
Calculating -------------------------------------
  less than or equal      4.946M (± 0.1%) i/s -     25.215M in   5.097976s
  ancestors.include?    859.127k (± 0.0%) i/s -      4.302M in   5.007527s

Comparison:
  less than or equal:  4946176.4 i/s
  ancestors.include?:   859126.7 i/s - 5.76x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.603  (± 0.0%) i/s -      4.000  in   6.633388s
         Kernel loop      0.177  (± 0.0%) i/s -      1.000  in   5.643157s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 3.40x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.414M i/100ms
         Array#first     1.236M i/100ms
Calculating -------------------------------------
           Array#[0]     14.144M (± 0.0%) i/s -     72.127M in   5.099640s
         Array#first     12.363M (± 0.0%) i/s -     63.037M in   5.098807s

Comparison:
           Array#[0]: 14143591.0 i/s
         Array#first: 12363163.7 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.405M i/100ms
          Array#last     1.123M i/100ms
Calculating -------------------------------------
          Array#[-1]     14.048M (± 0.0%) i/s -     71.644M in   5.099905s
          Array#last     11.248M (± 0.0%) i/s -     57.257M in   5.090580s

Comparison:
          Array#[-1]: 14048074.1 i/s
          Array#last: 11247546.9 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    66.828k i/100ms
Calculating -------------------------------------
                find      0.206  (± 0.0%) i/s -      2.000  in   9.718272s
             bsearch    668.408k (± 0.1%) i/s -      3.408M in   5.099029s

Comparison:
             bsearch:   668408.2 i/s
                find:        0.2 i/s - 3247886.45x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    14.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    141.065  (± 2.1%) i/s -    714.000  in   5.064506s
        Array#insert      1.374  (± 0.0%) i/s -      7.000  in   5.093541s

Comparison:
       Array#unshift:      141.1 i/s
        Array#insert:        1.4 i/s - 102.65x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.959M i/100ms
          Array#size     1.959M i/100ms
         Array#count     1.442M i/100ms
Calculating -------------------------------------
        Array#length     19.596M (± 0.1%) i/s -     99.910M in   5.098524s
          Array#size     19.590M (± 0.1%) i/s -     99.899M in   5.099570s
         Array#count     14.416M (± 0.0%) i/s -     72.084M in   5.000289s

Comparison:
        Array#length: 19595906.4 i/s
          Array#size: 19589773.4 i/s - same-ish: difference falls within error
         Array#count: 14416027.8 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    32.145k i/100ms
        Array#sample   881.259k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    318.647k (± 0.7%) i/s -      1.607M in   5.044210s
        Array#sample      8.814M (± 0.0%) i/s -     44.944M in   5.099175s

Comparison:
        Array#sample:  8814016.9 i/s
 Array#shuffle.first:   318647.4 i/s - 27.66x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    50.688k i/100ms
          Date.parse    24.829k i/100ms
Calculating -------------------------------------
        Date.iso8601    506.697k (± 0.3%) i/s -      2.534M in   5.001843s
          Date.parse    247.335k (± 0.2%) i/s -      1.241M in   5.019311s

Comparison:
        Date.iso8601:   506696.6 i/s
          Date.parse:   247335.3 i/s - 2.05x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    13.848k i/100ms
           Array#map    19.891k i/100ms
Calculating -------------------------------------
   Array#each + push    138.411k (± 0.2%) i/s -    692.400k in   5.002528s
           Array#map    198.542k (± 0.3%) i/s -    994.550k in   5.009302s

Comparison:
           Array#map:   198542.3 i/s
   Array#each + push:   138410.6 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            For loop    22.267k i/100ms
               #each    24.137k i/100ms
Calculating -------------------------------------
            For loop    222.577k (± 0.1%) i/s -      1.113M in   5.002093s
               #each    241.414k (± 0.1%) i/s -      1.231M in   5.099084s

Comparison:
               #each:   241413.5 i/s
            For loop:   222577.0 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          While Loop    28.977k i/100ms
     each_with_index    15.005k i/100ms
Calculating -------------------------------------
          While Loop    290.222k (± 0.0%) i/s -      1.478M in   5.092065s
     each_with_index    149.108k (± 0.1%) i/s -    750.250k in   5.031577s

Comparison:
          While Loop:   290221.6 i/s
     each_with_index:   149108.5 i/s - 1.95x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    45.362k i/100ms
      inject to_proc     1.606k i/100ms
        inject block     1.562k i/100ms
Calculating -------------------------------------
       inject symbol    453.713k (± 0.0%) i/s -      2.313M in   5.098958s
      inject to_proc     16.036k (± 0.3%) i/s -     80.300k in   5.007481s
        inject block     15.625k (± 0.1%) i/s -     79.662k in   5.098351s

Comparison:
       inject symbol:   453712.8 i/s
      inject to_proc:    16036.2 i/s - 28.29x  (± 0.00) slower
        inject block:    15625.1 i/s - 29.04x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     5.209k i/100ms
   Array#map.flatten     2.810k i/100ms
      Array#flat_map     6.778k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     52.093k (± 0.1%) i/s -    265.659k in   5.099740s
   Array#map.flatten     28.096k (± 0.1%) i/s -    140.500k in   5.000732s
      Array#flat_map     67.767k (± 0.1%) i/s -    338.900k in   5.000970s

Comparison:
      Array#flat_map:    67766.9 i/s
Array#map.flatten(1):    52092.7 i/s - 1.30x  (± 0.00) slower
   Array#map.flatten:    28095.9 i/s - 2.41x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    23.050k i/100ms
  Array#reverse_each    23.589k i/100ms
Calculating -------------------------------------
  Array#reverse.each    230.170k (± 0.2%) i/s -      1.152M in   5.007191s
  Array#reverse_each    235.904k (± 0.0%) i/s -      1.203M in   5.099695s

Comparison:
  Array#reverse_each:   235904.1 i/s
  Array#reverse.each:   230169.8 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        14.150k i/100ms
   Enumerable#detect    60.872k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        141.827k (± 0.3%) i/s -      2.844M in  20.053803s
   Enumerable#detect    609.416k (± 0.4%) i/s -     12.235M in  20.077425s

Comparison:
   Enumerable#detect:   609416.1 i/s
Enumerable#select.first:   141827.1 i/s - 4.30x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       182.277k i/100ms
Enumerable#select.last
                        12.441k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.822M (± 0.4%) i/s -      9.114M in   5.002374s
Enumerable#select.last
                        124.815k (± 0.3%) i/s -    634.491k in   5.083506s

Comparison:
Enumerable#reverse.detect:  1821936.6 i/s
Enumerable#select.last:   124814.8 i/s - 14.60x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.447k i/100ms
  Enumerable#sort_by     3.341k i/100ms
     Enumerable#sort     1.786k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         34.597k (± 0.2%) i/s -    175.797k in   5.081331s
  Enumerable#sort_by     33.496k (± 0.3%) i/s -    170.391k in   5.086907s
     Enumerable#sort     17.878k (± 0.2%) i/s -     91.086k in   5.094870s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    34596.8 i/s
  Enumerable#sort_by:    33496.3 i/s - 1.03x  (± 0.00) slower
     Enumerable#sort:    17878.1 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    13.654k i/100ms
Enumerable#sort_by...first
                         6.494k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    136.515k (± 0.1%) i/s -    682.700k in   5.000913s
Enumerable#sort_by...first
                         64.854k (± 1.1%) i/s -    324.700k in   5.007308s

Comparison:
   Enumerable#min_by:   136515.1 i/s
Enumerable#sort_by...first:    64853.8 i/s - 2.10x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   273.228k i/100ms
            Hash#dup   218.884k i/100ms
Calculating -------------------------------------
              Hash[]      2.582M (± 2.3%) i/s -     13.115M in   5.081827s
            Hash#dup      2.038M (± 1.5%) i/s -     10.288M in   5.050009s

Comparison:
              Hash[]:  2582112.2 i/s
            Hash#dup:  2037635.1 i/s - 1.27x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.287M i/100ms
  Hash#fetch, symbol     1.046M i/100ms
     Hash#[], string     1.074M i/100ms
  Hash#fetch, string   609.160k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     12.869M (± 0.0%) i/s -     65.628M in   5.099662s
  Hash#fetch, symbol     10.415M (± 0.1%) i/s -     52.292M in   5.020611s
     Hash#[], string     10.743M (± 0.0%) i/s -     53.722M in   5.000651s
  Hash#fetch, string      6.074M (± 0.1%) i/s -     30.458M in   5.014595s

Comparison:
     Hash#[], symbol: 12869165.7 i/s
     Hash#[], string: 10742932.5 i/s - 1.20x  (± 0.00) slower
  Hash#fetch, symbol: 10415432.2 i/s - 1.24x  (± 0.00) slower
  Hash#fetch, string:  6073872.7 i/s - 2.12x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   702.491k i/100ms
             Hash#[]   809.659k i/100ms
          Hash#[] ||   731.940k i/100ms
          Hash#[] &&   320.922k i/100ms
          Hash#fetch   480.357k i/100ms
 Hash#fetch fallback   284.611k i/100ms
Calculating -------------------------------------
            Hash#dig      7.033M (± 0.2%) i/s -     35.827M in   5.094041s
             Hash#[]      8.093M (± 0.1%) i/s -     40.483M in   5.002320s
          Hash#[] ||      7.314M (± 0.1%) i/s -     36.597M in   5.003826s
          Hash#[] &&      3.210M (± 0.1%) i/s -     16.367M in   5.099127s
          Hash#fetch      4.801M (± 0.1%) i/s -     24.018M in   5.002658s
 Hash#fetch fallback      2.840M (± 0.1%) i/s -     14.231M in   5.010554s

Comparison:
             Hash#[]:  8092852.2 i/s
          Hash#[] ||:  7313813.6 i/s - 1.11x  (± 0.00) slower
            Hash#dig:  7033151.0 i/s - 1.15x  (± 0.00) slower
          Hash#fetch:  4801023.3 i/s - 1.69x  (± 0.00) slower
          Hash#[] &&:  3209770.8 i/s - 2.52x  (± 0.00) slower
 Hash#fetch fallback:  2840118.0 i/s - 2.85x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.234M i/100ms
  Hash#fetch + block     1.214M i/100ms
    Hash#fetch + arg   847.054k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     12.335M (± 0.0%) i/s -     61.688M in   5.001161s
  Hash#fetch + block     12.140M (± 0.1%) i/s -     61.894M in   5.098163s
    Hash#fetch + arg      8.466M (± 0.1%) i/s -     42.353M in   5.002561s

Comparison:
  Hash#fetch + const: 12334647.6 i/s
  Hash#fetch + block: 12140458.5 i/s - 1.02x  (± 0.00) slower
    Hash#fetch + arg:  8466206.9 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    18.931k i/100ms
         sort + to_h     8.722k i/100ms
Calculating -------------------------------------
      sort_by + to_h    189.074k (± 0.4%) i/s -    946.550k in   5.006304s
         sort + to_h     87.422k (± 0.1%) i/s -    444.822k in   5.088228s

Comparison:
      sort_by + to_h:   189074.1 i/s
         sort + to_h:    87422.0 i/s - 2.16x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   135.309k i/100ms
       Hash#each_key   138.368k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.354M (± 0.2%) i/s -      6.901M in   5.095238s
       Hash#each_key      1.387M (± 0.1%) i/s -      7.057M in   5.088774s

Comparison:
       Hash#each_key:  1386733.2 i/s
      Hash#keys.each:  1354358.4 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   904.000  i/100ms
           Hash#key?   758.245k i/100ms
Calculating -------------------------------------
  Hash#keys.include?      8.940k (± 4.9%) i/s -     45.200k in   5.071322s
           Hash#key?      7.645M (± 0.0%) i/s -     38.670M in   5.058553s

Comparison:
           Hash#key?:  7644576.6 i/s
  Hash#keys.include?:     8939.8 i/s - 855.12x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.039k i/100ms
            Hash#[]=     7.072k i/100ms
Calculating -------------------------------------
         Hash#merge!     30.351k (± 0.1%) i/s -    151.950k in   5.006466s
            Hash#[]=     70.606k (± 0.4%) i/s -    353.600k in   5.008146s

Comparison:
            Hash#[]=:    70606.4 i/s
         Hash#merge!:    30350.8 i/s - 2.33x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.750k i/100ms
      Hash#merge({})     2.988k i/100ms
 Hash#dup#merge!({})     2.205k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         37.626k (± 0.1%) i/s -    191.250k in   5.082931s
      Hash#merge({})     29.799k (± 0.1%) i/s -    149.400k in   5.013679s
 Hash#dup#merge!({})     21.988k (± 0.1%) i/s -    110.250k in   5.014036s

Comparison:
{}#merge!(Hash) do end:    37626.0 i/s
      Hash#merge({}):    29798.5 i/s - 1.26x  (± 0.00) slower
 Hash#dup#merge!({}):    21988.3 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   282.487k i/100ms
          Hash#merge   254.110k i/100ms
Calculating -------------------------------------
        Hash#**other      2.825M (± 0.1%) i/s -     14.407M in   5.098902s
          Hash#merge      2.537M (± 0.1%) i/s -     12.706M in   5.007236s

Comparison:
        Hash#**other:  2825479.4 i/s
          Hash#merge:  2537429.8 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.162k i/100ms
         Hash#merge!     2.956k i/100ms
Calculating -------------------------------------
          Hash#merge     11.729k (± 0.5%) i/s -     59.262k in   5.052680s
         Hash#merge!     29.541k (± 0.1%) i/s -    147.800k in   5.003292s

Comparison:
         Hash#merge!:    29540.6 i/s
          Hash#merge:    11729.1 i/s - 2.52x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      318.103k i/100ms
Array#each             164.752k i/100ms
Array#each_w/_object   119.562k i/100ms
Hash#select-include     49.431k i/100ms
Calculating -------------------------------------
Hash#native-slice         3.170M (± 0.2%) i/s -     15.905M in   5.016985s
Array#each                1.653M (± 1.0%) i/s -      8.402M in   5.083390s
Array#each_w/_object      1.201M (± 0.2%) i/s -      6.098M in   5.075666s
Hash#select-include     520.248k (± 1.2%) i/s -      2.620M in   5.036560s

Comparison:
Hash#native-slice   :  3170270.2 i/s
Array#each          :  1653072.7 i/s - 1.92x  (± 0.00) slower
Array#each_w/_object:  1201357.3 i/s - 2.64x  (± 0.00) slower
Hash#select-include :   520247.5 i/s - 6.09x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.090k i/100ms
         Hash#value?   938.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     10.785k (± 4.8%) i/s -     54.500k in   5.068131s
         Hash#value?      9.405k (± 0.1%) i/s -     47.838k in   5.086449s

Comparison:
Hash#values.include?:    10784.7 i/s
         Hash#value?:     9405.0 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                call   528.076k i/100ms
                send   398.125k i/100ms
      method_missing   289.489k i/100ms
Calculating -------------------------------------
                call      5.235M (± 0.1%) i/s -     26.404M in   5.043644s
                send      3.985M (± 0.1%) i/s -     20.304M in   5.094956s
      method_missing      2.896M (± 0.1%) i/s -     14.764M in   5.097401s

Comparison:
                call:  5235066.3 i/s
                send:  3985193.2 i/s - 1.31x  (± 0.00) slower
      method_missing:  2896367.0 i/s - 1.81x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
               Block     5.791k i/100ms
      Symbol#to_proc     6.481k i/100ms
Calculating -------------------------------------
               Block     57.962k (± 0.1%) i/s -    295.341k in   5.095441s
      Symbol#to_proc     64.727k (± 0.1%) i/s -    324.050k in   5.006399s

Comparison:
      Symbol#to_proc:    64727.2 i/s
               Block:    57961.9 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          block.call   800.528k i/100ms
       block + yield   848.191k i/100ms
        unused block     1.108M i/100ms
               yield     1.022M i/100ms
Calculating -------------------------------------
          block.call      8.005M (± 0.1%) i/s -     40.026M in   5.000456s
       block + yield      8.477M (± 0.0%) i/s -     42.410M in   5.002868s
        unused block     11.089M (± 0.1%) i/s -     56.527M in   5.097640s
               yield     10.434M (± 0.0%) i/s -     53.151M in   5.093920s

Comparison:
        unused block: 11088814.4 i/s
               yield: 10434269.5 i/s - 1.06x  (± 0.00) slower
       block + yield:  8477049.0 i/s - 1.31x  (± 0.00) slower
          block.call:  8004552.8 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   238.615k i/100ms
      range#include?     9.524k i/100ms
       range#member?     9.553k i/100ms
       plain compare   352.658k i/100ms
Calculating -------------------------------------
        range#cover?      2.387M (± 0.1%) i/s -     12.169M in   5.098816s
      range#include?     94.943k (± 0.4%) i/s -    476.200k in   5.015727s
       range#member?     94.994k (± 0.3%) i/s -    477.650k in   5.028262s
       plain compare      3.526M (± 0.0%) i/s -     17.633M in   5.000288s

Comparison:
       plain compare:  3526376.8 i/s
        range#cover?:  2386705.9 i/s - 1.48x  (± 0.00) slower
       range#member?:    94994.1 i/s - 37.12x  (± 0.00) slower
      range#include?:    94942.9 i/s - 37.14x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       String#match?   762.485k i/100ms
           String#=~   447.920k i/100ms
          Regexp#===   426.214k i/100ms
        String#match   356.899k i/100ms
Calculating -------------------------------------
       String#match?      7.584M (± 0.0%) i/s -     38.124M in   5.026790s
           String#=~      4.441M (± 0.1%) i/s -     22.396M in   5.043433s
          Regexp#===      4.258M (± 0.1%) i/s -     21.311M in   5.004487s
        String#match      3.563M (± 0.3%) i/s -     17.845M in   5.008382s

Comparison:
       String#match?:  7584214.3 i/s
           String#=~:  4440630.9 i/s - 1.71x  (± 0.00) slower
          Regexp#===:  4258321.6 i/s - 1.78x  (± 0.00) slower
        String#match:  3563041.2 i/s - 2.13x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   482.955k i/100ms
      String#casecmp   598.700k i/100ms
Calculating -------------------------------------
String#downcase + ==      4.831M (± 0.1%) i/s -     24.631M in   5.098377s
      String#casecmp      5.991M (± 0.1%) i/s -     30.534M in   5.096402s

Comparison:
      String#casecmp:  5991229.9 i/s
String#downcase + ==:  4831089.4 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            String#+   429.500k i/100ms
       String#concat   451.449k i/100ms
       String#append   487.719k i/100ms
         "foo" "bar"   943.826k i/100ms
  "#{'foo'}#{'bar'}"   951.939k i/100ms
Calculating -------------------------------------
            String#+      4.293M (± 0.1%) i/s -     21.475M in   5.001995s
       String#concat      4.523M (± 0.4%) i/s -     23.024M in   5.090768s
       String#append      4.893M (± 0.1%) i/s -     24.874M in   5.083450s
         "foo" "bar"      9.488M (± 0.1%) i/s -     48.135M in   5.073147s
  "#{'foo'}#{'bar'}"      9.536M (± 0.1%) i/s -     48.549M in   5.091065s

Comparison:
  "#{'foo'}#{'bar'}":  9536102.1 i/s
         "foo" "bar":  9488224.3 i/s - 1.01x  (± 0.00) slower
       String#append:  4893070.9 i/s - 1.95x  (± 0.00) slower
       String#concat:  4522769.5 i/s - 2.11x  (± 0.00) slower
            String#+:  4293288.2 i/s - 2.22x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#+@   834.982k i/100ms
          String#dup   427.428k i/100ms
Calculating -------------------------------------
           String#+@      8.342M (± 0.1%) i/s -     41.749M in   5.004552s
          String#dup      4.273M (± 0.1%) i/s -     21.371M in   5.001840s

Comparison:
           String#+@:  8342229.2 i/s
          String#dup:  4272709.2 i/s - 1.95x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#=~   145.615k i/100ms
       String#match?   316.689k i/100ms
    String#end_with?   452.060k i/100ms
Calculating -------------------------------------
           String#=~      1.461M (± 0.1%) i/s -      7.426M in   5.083646s
       String#match?      3.166M (± 0.0%) i/s -     15.834M in   5.001966s
    String#end_with?      4.518M (± 0.1%) i/s -     22.603M in   5.002970s

Comparison:
    String#end_with?:  4517917.8 i/s
       String#match?:  3165645.7 i/s - 1.43x  (± 0.00) slower
           String#=~:  1460836.1 i/s - 3.09x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    86.512k i/100ms
          String#sub   110.463k i/100ms
String#dup["string"]=
                       135.156k i/100ms
Calculating -------------------------------------
         String#gsub    874.250k (± 0.1%) i/s -      4.412M in   5.046749s
          String#sub      1.120M (± 0.6%) i/s -      5.634M in   5.032187s
String#dup["string"]=
                          1.347M (± 1.2%) i/s -      6.758M in   5.017445s

Comparison:
String#dup["string"]=:  1347060.0 i/s
          String#sub:  1119561.5 i/s - 1.20x  (± 0.00) slower
         String#gsub:   874249.8 i/s - 1.54x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    75.700k i/100ms
           String#tr   266.276k i/100ms
Calculating -------------------------------------
         String#gsub    753.280k (± 0.2%) i/s -      3.785M in   5.024701s
           String#tr      2.665M (± 0.7%) i/s -     13.580M in   5.095836s

Comparison:
           String#tr:  2665071.8 i/s
         String#gsub:   753280.5 i/s - 3.54x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   968.179k i/100ms
         With Freeze     1.589M i/100ms
Calculating -------------------------------------
      Without Freeze      9.680M (± 0.1%) i/s -     48.409M in   5.000830s
         With Freeze     15.882M (± 0.0%) i/s -     79.425M in   5.000917s

Comparison:
         With Freeze: 15882160.1 i/s
      Without Freeze:  9680190.3 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.615k i/100ms
      String#squeeze   129.518k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     26.133k (± 0.2%) i/s -    130.750k in   5.003277s
      String#squeeze      1.292M (± 0.1%) i/s -      6.476M in   5.012589s

Comparison:
      String#squeeze:  1291929.5 i/s
 String#gsub/regex+/:    26133.0 i/s - 49.44x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#=~   216.939k i/100ms
       String#match?   599.860k i/100ms
  String#start_with?   690.701k i/100ms
Calculating -------------------------------------
           String#=~      2.191M (± 0.1%) i/s -     11.064M in   5.049063s
       String#match?      5.999M (± 0.0%) i/s -     30.593M in   5.099928s
  String#start_with?      6.907M (± 0.1%) i/s -     35.226M in   5.099823s

Comparison:
  String#start_with?:  6907251.5 i/s
       String#match?:  5998684.6 i/s - 1.15x  (± 0.00) slower
           String#=~:  2191279.4 i/s - 3.15x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   164.456k i/100ms
    String#[0, n] ==    57.502k i/100ms
   String#[RANGE] ==    54.948k i/100ms
   String#[0...n] ==    35.372k i/100ms
Calculating -------------------------------------
  String#start_with?      1.640M (± 0.2%) i/s -      8.223M in   5.012788s
    String#[0, n] ==    581.041k (± 1.4%) i/s -      2.933M in   5.048138s
   String#[RANGE] ==    547.624k (± 0.6%) i/s -      2.747M in   5.017134s
   String#[0...n] ==    352.278k (± 0.6%) i/s -      1.769M in   5.020668s

Comparison:
  String#start_with?:  1640370.2 i/s
    String#[0, n] ==:   581040.9 i/s - 2.82x  (± 0.00) slower
   String#[RANGE] ==:   547623.6 i/s - 3.00x  (± 0.00) slower
   String#[0...n] ==:   352277.5 i/s - 4.66x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   132.938k i/100ms
 String#sub!'string'    95.620k i/100ms
String#gsub!'string'    60.628k i/100ms
  String#[/regexp/]=   118.288k i/100ms
 String#sub!/regexp/    93.705k i/100ms
String#gsub!/regexp/    49.667k i/100ms
Calculating -------------------------------------
  String#['string']=      1.323M (± 0.7%) i/s -      6.647M in   5.024146s
 String#sub!'string'    992.327k (± 0.2%) i/s -      4.972M in   5.010714s
String#gsub!'string'    607.419k (± 0.3%) i/s -      3.092M in   5.090468s
  String#[/regexp/]=      1.171M (± 0.6%) i/s -      5.914M in   5.051129s
 String#sub!/regexp/    946.979k (± 0.2%) i/s -      4.779M in   5.046553s
String#gsub!/regexp/    490.628k (± 0.3%) i/s -      2.483M in   5.061625s

Comparison:
  String#['string']=:  1323050.1 i/s
  String#[/regexp/]=:  1170953.0 i/s - 1.13x  (± 0.00) slower
 String#sub!'string':   992327.4 i/s - 1.33x  (± 0.00) slower
 String#sub!/regexp/:   946979.0 i/s - 1.40x  (± 0.00) slower
String#gsub!'string':   607419.2 i/s - 2.18x  (± 0.00) slower
String#gsub!/regexp/:   490628.0 i/s - 2.70x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          String#sub   119.403k i/100ms
        String#chomp   412.932k i/100ms
String#delete_suffix   444.705k i/100ms
Calculating -------------------------------------
          String#sub      1.147M (± 0.4%) i/s -      5.851M in   5.100898s
        String#chomp      4.130M (± 0.1%) i/s -     21.060M in   5.099546s
String#delete_suffix      4.443M (± 0.1%) i/s -     22.235M in   5.005100s

Comparison:
String#delete_suffix:  4442524.6 i/s
        String#chomp:  4129689.8 i/s - 1.08x  (± 0.00) slower
          String#sub:  1147026.1 i/s - 3.87x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   449.602k i/100ms
          String#sub   121.467k i/100ms
Calculating -------------------------------------
String#delete_prefix      4.495M (± 0.1%) i/s -     22.480M in   5.001312s
          String#sub      1.201M (± 0.3%) i/s -      6.073M in   5.055018s

Comparison:
String#delete_prefix:  4494843.3 i/s
          String#sub:  1201458.7 i/s - 3.74x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   454.234k i/100ms
    String#unpack[0]   342.682k i/100ms
Calculating -------------------------------------
      String#unpack1      4.549M (± 0.1%) i/s -     23.166M in   5.092091s
    String#unpack[0]      3.425M (± 0.1%) i/s -     17.134M in   5.002909s

Comparison:
      String#unpack1:  4549397.2 i/s
    String#unpack[0]:  3424829.1 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    21.648k i/100ms
          Time.parse     7.532k i/100ms
Calculating -------------------------------------
        Time.iso8601    226.694k (± 0.3%) i/s -      1.147M in   5.061241s
          Time.parse     75.052k (± 0.3%) i/s -    376.600k in   5.017900s

Comparison:
        Time.iso8601:   226694.0 i/s
          Time.parse:    75051.9 i/s - 3.02x  (± 0.00) slower

