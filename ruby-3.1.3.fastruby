$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       595.368k i/100ms
Function with splat arguments
                        20.407k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          5.940M (± 0.1%) i/s -     29.768M in   5.011789s
Function with splat arguments
                        199.382k (± 9.7%) i/s -    999.943k in   5.070230s

Comparison:
Function with single Array argument:  5939686.9 i/s
Function with splat arguments:   199382.0 i/s - 29.79x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   923.823k i/100ms
Sequential Assignment
                       895.175k i/100ms
Calculating -------------------------------------
 Parallel Assignment      9.236M (± 0.4%) i/s -     46.191M in   5.001330s
Sequential Assignment
                          8.925M (± 0.4%) i/s -     44.759M in   5.015230s

Comparison:
 Parallel Assignment:  9235927.0 i/s
Sequential Assignment:  8924683.5 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   379.933k i/100ms
       attr_accessor   425.157k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.807M (± 0.1%) i/s -     19.377M in   5.089416s
       attr_accessor      4.170M (± 0.1%) i/s -     21.258M in   5.098415s

Comparison:
       attr_accessor:  4169509.7 i/s
   getter_and_setter:  3807235.4 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    66.755k i/100ms
         respond_to?   585.659k i/100ms
Calculating -------------------------------------
      begin...rescue    679.026k (± 0.7%) i/s -      3.405M in   5.014045s
         respond_to?      5.848M (± 0.2%) i/s -     29.283M in   5.007129s

Comparison:
         respond_to?:  5848267.0 i/s
      begin...rescue:   679026.5 i/s - 8.61x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
              normal   242.481k i/100ms
             &method    87.932k i/100ms
Calculating -------------------------------------
              normal      2.418M (± 0.1%) i/s -     12.124M in   5.013861s
             &method    876.968k (± 0.1%) i/s -      4.397M in   5.013418s

Comparison:
              normal:  2418109.4 i/s
             &method:   876967.8 i/s - 2.76x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       191.000  i/100ms
       define_method   236.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.994k (±19.2%) i/s -      9.550k in   5.364176s
       define_method      2.543k (±17.6%) i/s -     11.800k in   5.028762s

Comparison:
       define_method:     2543.5 i/s
module_eval with string:     1993.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         Float#round   137.943k i/100ms
       Kernel#format   153.638k i/100ms
            String#%   135.104k i/100ms
Calculating -------------------------------------
         Float#round      1.383M (± 0.1%) i/s -      7.035M in   5.086266s
       Kernel#format      1.529M (± 0.1%) i/s -      7.682M in   5.024303s
            String#%      1.360M (± 0.1%) i/s -      6.890M in   5.067403s

Comparison:
       Kernel#format:  1528950.2 i/s
         Float#round:  1383155.2 i/s - 1.11x  (± 0.00) slower
            String#%:  1359732.8 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                Hash   677.122k i/100ms
          OpenStruct   352.726k i/100ms
Calculating -------------------------------------
                Hash      6.767M (± 0.1%) i/s -     33.856M in   5.003475s
          OpenStruct      3.526M (± 0.1%) i/s -     17.636M in   5.001698s

Comparison:
                Hash:  6766528.1 i/s
          OpenStruct:  3526063.8 i/s - 1.92x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                Hash   889.771k i/100ms
          OpenStruct     8.641k i/100ms
Calculating -------------------------------------
                Hash      9.285M (± 4.2%) i/s -     47.158M in   5.088325s
          OpenStruct     86.768k (± 2.2%) i/s -    440.691k in   5.081649s

Comparison:
                Hash:  9285219.6 i/s
          OpenStruct:    86767.6 i/s - 107.01x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   474.076k i/100ms
  ancestors.include?    91.377k i/100ms
Calculating -------------------------------------
  less than or equal      4.719M (± 0.1%) i/s -     23.704M in   5.023496s
  ancestors.include?    912.131k (± 0.2%) i/s -      4.569M in   5.009007s

Comparison:
  less than or equal:  4718594.2 i/s
  ancestors.include?:   912131.1 i/s - 5.17x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.456  (± 0.0%) i/s -      3.000  in   6.585153s
         Kernel loop      0.173  (± 0.0%) i/s -      1.000  in   5.764357s

Comparison:
          While Loop:        0.5 i/s
         Kernel loop:        0.2 i/s - 2.63x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.311M i/100ms
         Array#first     1.049M i/100ms
Calculating -------------------------------------
           Array#[0]     13.124M (± 0.4%) i/s -     66.846M in   5.093412s
         Array#first     10.481M (± 0.1%) i/s -     52.444M in   5.003748s

Comparison:
           Array#[0]: 13124101.0 i/s
         Array#first: 10480978.1 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.284M i/100ms
          Array#last     1.052M i/100ms
Calculating -------------------------------------
          Array#[-1]     12.855M (± 0.2%) i/s -     65.483M in   5.093983s
          Array#last     10.512M (± 0.2%) i/s -     52.590M in   5.002853s

Comparison:
          Array#[-1]: 12854970.7 i/s
          Array#last: 10512128.7 i/s - 1.22x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    73.622k i/100ms
Calculating -------------------------------------
                find      0.203  (± 0.0%) i/s -      2.000  in   9.836725s
             bsearch    759.406k (± 0.1%) i/s -      3.828M in   5.041235s

Comparison:
             bsearch:   759406.1 i/s
                find:        0.2 i/s - 3735034.44x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    14.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    142.892  (± 2.8%) i/s -    714.000  in   5.000014s
        Array#insert      1.150  (± 0.0%) i/s -      6.000  in   5.219032s

Comparison:
       Array#unshift:      142.9 i/s
        Array#insert:        1.1 i/s - 124.29x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.900M i/100ms
          Array#size     1.899M i/100ms
         Array#count     1.292M i/100ms
Calculating -------------------------------------
        Array#length     19.003M (± 0.6%) i/s -     96.919M in   5.100272s
          Array#size     18.990M (± 0.6%) i/s -     94.949M in   5.000112s
         Array#count     13.326M (± 0.3%) i/s -     67.186M in   5.041919s

Comparison:
        Array#length: 19003425.2 i/s
          Array#size: 18989984.2 i/s - same-ish: difference falls within error
         Array#count: 13325647.5 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    33.214k i/100ms
        Array#sample   800.321k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    331.265k (± 0.5%) i/s -      1.661M in   5.013315s
        Array#sample      8.042M (± 0.0%) i/s -     40.816M in   5.075292s

Comparison:
        Array#sample:  8042173.2 i/s
 Array#shuffle.first:   331265.4 i/s - 24.28x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    46.457k i/100ms
          Date.parse    23.665k i/100ms
Calculating -------------------------------------
        Date.iso8601    461.968k (± 0.3%) i/s -      2.323M in   5.028208s
          Date.parse    237.197k (± 0.4%) i/s -      1.207M in   5.088316s

Comparison:
        Date.iso8601:   461968.2 i/s
          Date.parse:   237197.2 i/s - 1.95x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    14.327k i/100ms
           Array#map    19.838k i/100ms
Calculating -------------------------------------
   Array#each + push    143.448k (± 0.2%) i/s -    730.677k in   5.093707s
           Array#map    198.539k (± 0.2%) i/s -      1.012M in   5.095928s

Comparison:
           Array#map:   198539.2 i/s
   Array#each + push:   143447.6 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            For loop    22.007k i/100ms
               #each    24.418k i/100ms
Calculating -------------------------------------
            For loop    220.012k (± 0.1%) i/s -      1.100M in   5.001337s
               #each    244.152k (± 0.1%) i/s -      1.221M in   5.000578s

Comparison:
               #each:   244152.0 i/s
            For loop:   220011.6 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          While Loop    24.515k i/100ms
     each_with_index    14.227k i/100ms
Calculating -------------------------------------
          While Loop    245.177k (± 0.1%) i/s -      1.250M in   5.099442s
     each_with_index    143.232k (± 0.2%) i/s -    725.577k in   5.065769s

Comparison:
          While Loop:   245176.9 i/s
     each_with_index:   143232.2 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    66.614k i/100ms
      inject to_proc     1.651k i/100ms
        inject block     1.540k i/100ms
Calculating -------------------------------------
       inject symbol    664.588k (± 2.1%) i/s -      3.331M in   5.013894s
      inject to_proc     16.522k (± 0.2%) i/s -     84.201k in   5.096246s
        inject block     15.391k (± 0.2%) i/s -     77.000k in   5.002965s

Comparison:
       inject symbol:   664588.2 i/s
      inject to_proc:    16522.2 i/s - 40.22x  (± 0.00) slower
        inject block:    15390.9 i/s - 43.18x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     5.570k i/100ms
   Array#map.flatten     3.046k i/100ms
      Array#flat_map     7.299k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     55.851k (± 0.1%) i/s -    284.070k in   5.086230s
   Array#map.flatten     30.441k (± 0.1%) i/s -    152.300k in   5.003162s
      Array#flat_map     73.328k (± 0.1%) i/s -    372.249k in   5.076488s

Comparison:
      Array#flat_map:    73328.1 i/s
Array#map.flatten(1):    55850.9 i/s - 1.31x  (± 0.00) slower
   Array#map.flatten:    30440.8 i/s - 2.41x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    22.355k i/100ms
  Array#reverse_each    23.036k i/100ms
Calculating -------------------------------------
  Array#reverse.each    223.721k (± 0.2%) i/s -      1.140M in   5.096127s
  Array#reverse_each    230.282k (± 0.1%) i/s -      1.152M in   5.001690s

Comparison:
  Array#reverse_each:   230282.3 i/s
  Array#reverse.each:   223720.5 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        15.455k i/100ms
   Enumerable#detect    62.454k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        154.480k (± 0.2%) i/s -      3.091M in  20.009182s
   Enumerable#detect    621.879k (± 0.1%) i/s -     12.491M in  20.085609s

Comparison:
   Enumerable#detect:   621878.9 i/s
Enumerable#select.first:   154479.8 i/s - 4.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       180.250k i/100ms
Enumerable#select.last
                        14.312k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.780M (± 0.3%) i/s -      9.012M in   5.063854s
Enumerable#select.last
                        143.240k (± 0.2%) i/s -    729.912k in   5.095724s

Comparison:
Enumerable#reverse.detect:  1779784.5 i/s
Enumerable#select.last:   143240.4 i/s - 12.43x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.796k i/100ms
  Enumerable#sort_by     3.646k i/100ms
     Enumerable#sort     1.823k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         37.964k (± 0.3%) i/s -    193.596k in   5.099565s
  Enumerable#sort_by     36.156k (± 0.6%) i/s -    182.300k in   5.042237s
     Enumerable#sort     18.246k (± 0.1%) i/s -     92.973k in   5.095643s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    37963.6 i/s
  Enumerable#sort_by:    36155.7 i/s - 1.05x  (± 0.00) slower
     Enumerable#sort:    18245.6 i/s - 2.08x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    13.813k i/100ms
Enumerable#sort_by...first
                         6.742k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    138.113k (± 0.1%) i/s -    690.650k in   5.000621s
Enumerable#sort_by...first
                         67.426k (± 0.3%) i/s -    343.842k in   5.099604s

Comparison:
   Enumerable#min_by:   138112.9 i/s
Enumerable#sort_by...first:    67425.7 i/s - 2.05x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   298.704k i/100ms
            Hash#dup   210.341k i/100ms
Calculating -------------------------------------
              Hash[]      2.886M (± 3.5%) i/s -     14.636M in   5.077195s
            Hash#dup      2.339M (± 3.2%) i/s -     11.779M in   5.040582s

Comparison:
              Hash[]:  2886206.9 i/s
            Hash#dup:  2339332.1 i/s - 1.23x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.152M i/100ms
  Hash#fetch, symbol   923.754k i/100ms
     Hash#[], string   888.471k i/100ms
  Hash#fetch, string   612.868k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     11.564M (± 0.2%) i/s -     58.775M in   5.082587s
  Hash#fetch, symbol      9.241M (± 0.1%) i/s -     47.111M in   5.097986s
     Hash#[], string      8.887M (± 0.1%) i/s -     45.312M in   5.098426s
  Hash#fetch, string      6.125M (± 0.7%) i/s -     30.643M in   5.003176s

Comparison:
     Hash#[], symbol: 11563983.6 i/s
  Hash#fetch, symbol:  9241197.0 i/s - 1.25x  (± 0.00) slower
     Hash#[], string:  8887456.5 i/s - 1.30x  (± 0.00) slower
  Hash#fetch, string:  6125080.3 i/s - 1.89x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   726.647k i/100ms
             Hash#[]   761.862k i/100ms
          Hash#[] ||   693.512k i/100ms
          Hash#[] &&   324.902k i/100ms
          Hash#fetch   495.899k i/100ms
 Hash#fetch fallback   311.667k i/100ms
Calculating -------------------------------------
            Hash#dig      7.263M (± 0.4%) i/s -     36.332M in   5.002291s
             Hash#[]      7.592M (± 0.5%) i/s -     38.093M in   5.017650s
          Hash#[] ||      6.933M (± 0.6%) i/s -     34.676M in   5.001545s
          Hash#[] &&      3.241M (± 0.5%) i/s -     16.245M in   5.012085s
          Hash#fetch      4.984M (± 0.5%) i/s -     25.291M in   5.074127s
 Hash#fetch fallback      3.132M (± 0.2%) i/s -     15.895M in   5.074548s

Comparison:
             Hash#[]:  7592025.9 i/s
            Hash#dig:  7263256.1 i/s - 1.05x  (± 0.00) slower
          Hash#[] ||:  6933188.9 i/s - 1.10x  (± 0.00) slower
          Hash#fetch:  4984399.6 i/s - 1.52x  (± 0.00) slower
          Hash#[] &&:  3241255.0 i/s - 2.34x  (± 0.00) slower
 Hash#fetch fallback:  3132321.1 i/s - 2.42x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.200M i/100ms
  Hash#fetch + block     1.157M i/100ms
    Hash#fetch + arg   856.570k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     12.011M (± 0.4%) i/s -     61.175M in   5.093337s
  Hash#fetch + block     11.576M (± 0.1%) i/s -     59.008M in   5.097351s
    Hash#fetch + arg      8.560M (± 0.4%) i/s -     42.828M in   5.003657s

Comparison:
  Hash#fetch + const: 12010899.1 i/s
  Hash#fetch + block: 11576180.9 i/s - 1.04x  (± 0.00) slower
    Hash#fetch + arg:  8559555.5 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    20.274k i/100ms
         sort + to_h     8.656k i/100ms
Calculating -------------------------------------
      sort_by + to_h    202.333k (± 0.6%) i/s -      1.014M in   5.010214s
         sort + to_h     86.817k (± 0.2%) i/s -    441.456k in   5.084900s

Comparison:
      sort_by + to_h:   202333.1 i/s
         sort + to_h:    86817.3 i/s - 2.33x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   152.620k i/100ms
       Hash#each_key   165.195k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.534M (± 0.2%) i/s -      7.784M in   5.073724s
       Hash#each_key      1.634M (± 0.1%) i/s -      8.260M in   5.055052s

Comparison:
       Hash#each_key:  1633960.5 i/s
      Hash#keys.each:  1534110.9 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     2.653k i/100ms
           Hash#key?   695.767k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     26.584k (± 5.6%) i/s -    132.650k in   5.015147s
           Hash#key?      6.957M (± 0.0%) i/s -     34.788M in   5.000475s

Comparison:
           Hash#key?:  6957009.7 i/s
  Hash#keys.include?:    26584.4 i/s - 261.70x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.056k i/100ms
            Hash#[]=     7.443k i/100ms
Calculating -------------------------------------
         Hash#merge!     30.536k (± 0.1%) i/s -    152.800k in   5.003864s
            Hash#[]=     74.408k (± 0.6%) i/s -    372.150k in   5.001687s

Comparison:
            Hash#[]=:    74407.6 i/s
         Hash#merge!:    30536.5 i/s - 2.44x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.717k i/100ms
      Hash#merge({})     2.951k i/100ms
 Hash#dup#merge!({})     2.114k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         37.049k (± 0.4%) i/s -    185.850k in   5.016456s
      Hash#merge({})     29.138k (± 1.0%) i/s -    147.550k in   5.064348s
 Hash#dup#merge!({})     21.022k (± 0.1%) i/s -    105.700k in   5.028003s

Comparison:
{}#merge!(Hash) do end:    37048.7 i/s
      Hash#merge({}):    29138.3 i/s - 1.27x  (± 0.00) slower
 Hash#dup#merge!({}):    21022.3 i/s - 1.76x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   288.594k i/100ms
          Hash#merge   253.786k i/100ms
Calculating -------------------------------------
        Hash#**other      2.887M (± 0.3%) i/s -     14.718M in   5.098747s
          Hash#merge      2.581M (± 0.1%) i/s -     12.943M in   5.014932s

Comparison:
        Hash#**other:  2886669.6 i/s
          Hash#merge:  2580914.6 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.218k i/100ms
         Hash#merge!     3.014k i/100ms
Calculating -------------------------------------
          Hash#merge     12.002k (± 1.8%) i/s -     60.900k in   5.075911s
         Hash#merge!     30.045k (± 0.2%) i/s -    150.700k in   5.015913s

Comparison:
         Hash#merge!:    30044.6 i/s
          Hash#merge:    12001.9 i/s - 2.50x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      332.972k i/100ms
Array#each             172.575k i/100ms
Array#each_w/_object   120.573k i/100ms
Hash#select-include     56.451k i/100ms
Calculating -------------------------------------
Hash#native-slice         3.321M (± 0.1%) i/s -     16.649M in   5.013730s
Array#each                1.724M (± 0.1%) i/s -      8.629M in   5.005341s
Array#each_w/_object      1.219M (± 1.0%) i/s -      6.149M in   5.044553s
Hash#select-include     563.546k (± 1.8%) i/s -      2.823M in   5.010233s

Comparison:
Hash#native-slice   :  3320604.3 i/s
Array#each          :  1723909.8 i/s - 1.93x  (± 0.00) slower
Array#each_w/_object:  1219105.3 i/s - 2.72x  (± 0.00) slower
Hash#select-include :   563545.7 i/s - 5.89x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   960.000  i/100ms
         Hash#value?   868.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      9.718k (± 4.3%) i/s -     48.960k in   5.049581s
         Hash#value?      8.679k (± 0.3%) i/s -     43.400k in   5.000875s

Comparison:
Hash#values.include?:     9717.9 i/s
         Hash#value?:     8678.6 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                call   532.276k i/100ms
                send   406.437k i/100ms
      method_missing   297.764k i/100ms
Calculating -------------------------------------
                call      5.412M (± 0.1%) i/s -     27.146M in   5.015972s
                send      4.068M (± 0.1%) i/s -     20.728M in   5.095482s
      method_missing      2.955M (± 0.1%) i/s -     14.888M in   5.038054s

Comparison:
                call:  5411929.8 i/s
                send:  4067982.2 i/s - 1.33x  (± 0.00) slower
      method_missing:  2955150.8 i/s - 1.83x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
               Block     6.884k i/100ms
      Symbol#to_proc     7.601k i/100ms
Calculating -------------------------------------
               Block     68.710k (± 0.8%) i/s -    344.200k in   5.009749s
      Symbol#to_proc     76.212k (± 0.2%) i/s -    387.651k in   5.086514s

Comparison:
      Symbol#to_proc:    76211.9 i/s
               Block:    68710.1 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          block.call   760.503k i/100ms
       block + yield   795.271k i/100ms
        unused block     1.077M i/100ms
               yield   946.583k i/100ms
Calculating -------------------------------------
          block.call      7.603M (± 0.2%) i/s -     38.025M in   5.001641s
       block + yield      7.950M (± 0.1%) i/s -     39.764M in   5.001581s
        unused block     10.760M (± 0.4%) i/s -     53.845M in   5.004209s
               yield      9.464M (± 0.1%) i/s -     47.329M in   5.000995s

Comparison:
        unused block: 10760143.8 i/s
               yield:  9463952.1 i/s - 1.14x  (± 0.00) slower
       block + yield:  7950199.1 i/s - 1.35x  (± 0.00) slower
          block.call:  7602555.0 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   243.520k i/100ms
      range#include?     9.394k i/100ms
       range#member?     9.376k i/100ms
       plain compare   348.445k i/100ms
Calculating -------------------------------------
        range#cover?      2.435M (± 0.1%) i/s -     12.176M in   5.000172s
      range#include?     92.924k (± 1.2%) i/s -    469.700k in   5.055343s
       range#member?     93.741k (± 0.6%) i/s -    468.800k in   5.001200s
       plain compare      3.492M (± 0.3%) i/s -     17.771M in   5.089509s

Comparison:
       plain compare:  3491669.5 i/s
        range#cover?:  2435118.9 i/s - 1.43x  (± 0.00) slower
       range#member?:    93740.5 i/s - 37.25x  (± 0.00) slower
      range#include?:    92924.4 i/s - 37.58x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       String#match?   734.432k i/100ms
           String#=~   495.142k i/100ms
          Regexp#===   453.875k i/100ms
        String#match   351.017k i/100ms
Calculating -------------------------------------
       String#match?      7.357M (± 0.0%) i/s -     37.456M in   5.090877s
           String#=~      4.957M (± 0.1%) i/s -     25.252M in   5.094180s
          Regexp#===      4.581M (± 0.1%) i/s -     23.148M in   5.053360s
        String#match      3.525M (± 0.2%) i/s -     17.902M in   5.079143s

Comparison:
       String#match?:  7357482.9 i/s
           String#=~:  4957080.3 i/s - 1.48x  (± 0.00) slower
          Regexp#===:  4580645.4 i/s - 1.61x  (± 0.00) slower
        String#match:  3524592.4 i/s - 2.09x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   494.385k i/100ms
      String#casecmp   623.279k i/100ms
Calculating -------------------------------------
String#downcase + ==      4.939M (± 0.3%) i/s -     24.719M in   5.004811s
      String#casecmp      6.219M (± 0.4%) i/s -     31.164M in   5.011465s

Comparison:
      String#casecmp:  6218656.7 i/s
String#downcase + ==:  4939130.7 i/s - 1.26x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            String#+   462.722k i/100ms
       String#concat   466.742k i/100ms
       String#append   518.287k i/100ms
         "foo" "bar"   938.033k i/100ms
  "#{'foo'}#{'bar'}"   969.957k i/100ms
Calculating -------------------------------------
            String#+      4.621M (± 0.6%) i/s -     23.136M in   5.007158s
       String#concat      4.661M (± 0.4%) i/s -     23.337M in   5.006504s
       String#append      5.171M (± 0.1%) i/s -     25.914M in   5.011157s
         "foo" "bar"      9.379M (± 0.5%) i/s -     46.902M in   5.000861s
  "#{'foo'}#{'bar'}"      9.691M (± 0.2%) i/s -     48.498M in   5.004517s

Comparison:
  "#{'foo'}#{'bar'}":  9690866.8 i/s
         "foo" "bar":  9378915.8 i/s - 1.03x  (± 0.00) slower
       String#append:  5171340.0 i/s - 1.87x  (± 0.00) slower
       String#concat:  4661419.3 i/s - 2.08x  (± 0.00) slower
            String#+:  4620760.7 i/s - 2.10x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#+@   761.115k i/100ms
          String#dup   441.660k i/100ms
Calculating -------------------------------------
           String#+@      7.621M (± 0.2%) i/s -     38.817M in   5.093614s
          String#dup      4.412M (± 0.1%) i/s -     22.083M in   5.005043s

Comparison:
           String#+@:  7620725.9 i/s
          String#dup:  4412154.7 i/s - 1.73x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#=~   145.889k i/100ms
       String#match?   323.990k i/100ms
    String#end_with?   459.981k i/100ms
Calculating -------------------------------------
           String#=~      1.461M (± 0.2%) i/s -      7.440M in   5.091097s
       String#match?      3.244M (± 0.1%) i/s -     16.523M in   5.093865s
    String#end_with?      4.598M (± 0.2%) i/s -     22.999M in   5.001810s

Comparison:
    String#end_with?:  4598159.8 i/s
       String#match?:  3243803.1 i/s - 1.42x  (± 0.00) slower
           String#=~:  1461446.3 i/s - 3.15x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    78.840k i/100ms
          String#sub   110.369k i/100ms
String#dup["string"]=
                       137.749k i/100ms
Calculating -------------------------------------
         String#gsub    782.244k (± 0.3%) i/s -      3.942M in   5.039395s
          String#sub      1.069M (± 1.7%) i/s -      5.408M in   5.058890s
String#dup["string"]=
                          1.353M (± 2.1%) i/s -      6.887M in   5.092863s

Comparison:
String#dup["string"]=:  1353006.0 i/s
          String#sub:  1069329.3 i/s - 1.27x  (± 0.00) slower
         String#gsub:   782244.4 i/s - 1.73x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    71.245k i/100ms
           String#tr   283.465k i/100ms
Calculating -------------------------------------
         String#gsub    709.090k (± 0.6%) i/s -      3.562M in   5.023854s
           String#tr      2.830M (± 0.2%) i/s -     14.173M in   5.008834s

Comparison:
           String#tr:  2829665.3 i/s
         String#gsub:   709089.9 i/s - 3.99x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   952.739k i/100ms
         With Freeze     1.459M i/100ms
Calculating -------------------------------------
      Without Freeze      9.522M (± 0.3%) i/s -     47.637M in   5.003039s
         With Freeze     14.609M (± 0.3%) i/s -     74.431M in   5.094958s

Comparison:
         With Freeze: 14608913.6 i/s
      Without Freeze:  9521666.4 i/s - 1.53x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.612k i/100ms
      String#squeeze   128.134k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     26.062k (± 0.3%) i/s -    130.600k in   5.011250s
      String#squeeze      1.287M (± 0.2%) i/s -      6.535M in   5.076019s

Comparison:
      String#squeeze:  1287397.7 i/s
 String#gsub/regex+/:    26061.6 i/s - 49.40x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#=~   214.351k i/100ms
       String#match?   594.949k i/100ms
  String#start_with?   653.703k i/100ms
Calculating -------------------------------------
           String#=~      2.148M (± 0.2%) i/s -     10.932M in   5.089763s
       String#match?      5.951M (± 0.0%) i/s -     30.342M in   5.098673s
  String#start_with?      6.535M (± 0.2%) i/s -     32.685M in   5.001814s

Comparison:
  String#start_with?:  6534676.7 i/s
       String#match?:  5951039.8 i/s - 1.10x  (± 0.00) slower
           String#=~:  2147828.4 i/s - 3.04x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   179.339k i/100ms
    String#[0, n] ==    68.953k i/100ms
   String#[RANGE] ==    62.866k i/100ms
   String#[0...n] ==    34.572k i/100ms
Calculating -------------------------------------
  String#start_with?      1.789M (± 0.8%) i/s -      8.967M in   5.011284s
    String#[0, n] ==    686.836k (± 0.6%) i/s -      3.448M in   5.019791s
   String#[RANGE] ==    627.730k (± 0.2%) i/s -      3.143M in   5.007429s
   String#[0...n] ==    345.471k (± 0.2%) i/s -      1.729M in   5.003632s

Comparison:
  String#start_with?:  1789456.4 i/s
    String#[0, n] ==:   686835.7 i/s - 2.61x  (± 0.00) slower
   String#[RANGE] ==:   627729.6 i/s - 2.85x  (± 0.00) slower
   String#[0...n] ==:   345470.9 i/s - 5.18x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   135.191k i/100ms
 String#sub!'string'    89.906k i/100ms
String#gsub!'string'    56.564k i/100ms
  String#[/regexp/]=   106.969k i/100ms
 String#sub!/regexp/    85.645k i/100ms
String#gsub!/regexp/    45.504k i/100ms
Calculating -------------------------------------
  String#['string']=      1.380M (± 0.9%) i/s -      7.030M in   5.095096s
 String#sub!'string'    896.283k (± 0.3%) i/s -      4.495M in   5.015534s
String#gsub!'string'    575.491k (± 0.5%) i/s -      2.885M in   5.012807s
  String#[/regexp/]=      1.078M (± 0.2%) i/s -      5.455M in   5.060474s
 String#sub!/regexp/    850.366k (± 0.4%) i/s -      4.282M in   5.035842s
String#gsub!/regexp/    451.860k (± 0.4%) i/s -      2.275M in   5.035270s

Comparison:
  String#['string']=:  1379864.7 i/s
  String#[/regexp/]=:  1078049.0 i/s - 1.28x  (± 0.00) slower
 String#sub!'string':   896283.2 i/s - 1.54x  (± 0.00) slower
 String#sub!/regexp/:   850366.3 i/s - 1.62x  (± 0.00) slower
String#gsub!'string':   575490.8 i/s - 2.40x  (± 0.00) slower
String#gsub!/regexp/:   451860.3 i/s - 3.05x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          String#sub   113.166k i/100ms
        String#chomp   433.815k i/100ms
String#delete_suffix   477.358k i/100ms
Calculating -------------------------------------
          String#sub      1.122M (± 1.6%) i/s -      5.658M in   5.042549s
        String#chomp      4.291M (± 0.4%) i/s -     21.691M in   5.054922s
String#delete_suffix      4.760M (± 0.3%) i/s -     23.868M in   5.013990s

Comparison:
String#delete_suffix:  4760299.2 i/s
        String#chomp:  4291081.6 i/s - 1.11x  (± 0.00) slower
          String#sub:  1122391.3 i/s - 4.24x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   493.294k i/100ms
          String#sub   117.619k i/100ms
Calculating -------------------------------------
String#delete_prefix      4.923M (± 0.2%) i/s -     24.665M in   5.009931s
          String#sub      1.148M (± 2.1%) i/s -      5.763M in   5.023646s

Comparison:
String#delete_prefix:  4923183.8 i/s
          String#sub:  1147731.8 i/s - 4.29x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   464.388k i/100ms
    String#unpack[0]   361.361k i/100ms
Calculating -------------------------------------
      String#unpack1      4.636M (± 0.7%) i/s -     23.219M in   5.008904s
    String#unpack[0]      3.546M (± 0.1%) i/s -     18.068M in   5.095973s

Comparison:
      String#unpack1:  4635837.1 i/s
    String#unpack[0]:  3545557.1 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    21.374k i/100ms
          Time.parse     7.404k i/100ms
Calculating -------------------------------------
        Time.iso8601    219.749k (± 0.3%) i/s -      1.111M in   5.057847s
          Time.parse     74.442k (± 0.6%) i/s -    377.604k in   5.072621s

Comparison:
        Time.iso8601:   219748.9 i/s
          Time.parse:    74442.0 i/s - 2.95x  (± 0.00) slower

