$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       475.999k i/100ms
Function with splat arguments
                         7.617k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          5.005M (± 0.1%) i/s -     25.228M in   5.040351s
Function with splat arguments
                         79.682k (± 7.4%) i/s -    396.084k in   5.008088s

Comparison:
Function with single Array argument:  5005199.5 i/s
Function with splat arguments:    79681.9 i/s - 62.81x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   762.458k i/100ms
Sequential Assignment
                       886.997k i/100ms
Calculating -------------------------------------
 Parallel Assignment      7.709M (± 0.1%) i/s -     38.885M in   5.044178s
Sequential Assignment
                          8.866M (± 0.0%) i/s -     44.350M in   5.002254s

Comparison:
Sequential Assignment:  8865974.0 i/s
 Parallel Assignment:  7708966.9 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   298.908k i/100ms
       attr_accessor   325.213k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.020M (± 0.1%) i/s -     15.244M in   5.048288s
       attr_accessor      3.418M (± 0.1%) i/s -     17.236M in   5.042679s

Comparison:
       attr_accessor:  3418085.0 i/s
   getter_and_setter:  3019701.1 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    59.101k i/100ms
         respond_to?   497.220k i/100ms
Calculating -------------------------------------
      begin...rescue    595.153k (± 0.1%) i/s -      3.014M in   5.064511s
         respond_to?      4.967M (± 0.1%) i/s -     24.861M in   5.005251s

Comparison:
         respond_to?:  4966988.4 i/s
      begin...rescue:   595152.7 i/s - 8.35x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
              normal   197.754k i/100ms
             &method    74.953k i/100ms
Calculating -------------------------------------
              normal      1.997M (± 0.2%) i/s -     10.085M in   5.049467s
             &method    746.706k (± 2.7%) i/s -      3.748M in   5.023448s

Comparison:
              normal:  1997337.4 i/s
             &method:   746706.1 i/s - 2.67x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       161.000  i/100ms
       define_method   199.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.613k (±19.8%) i/s -      7.084k in   5.010836s
       define_method      2.148k (±26.8%) i/s -      9.154k in   5.141268s

Comparison:
       define_method:     2147.5 i/s
module_eval with string:     1612.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         Float#round   118.253k i/100ms
       Kernel#format   132.555k i/100ms
            String#%   118.069k i/100ms
Calculating -------------------------------------
         Float#round      1.179M (± 0.1%) i/s -      5.913M in   5.016578s
       Kernel#format      1.325M (± 0.1%) i/s -      6.628M in   5.003237s
            String#%      1.184M (± 0.1%) i/s -      6.022M in   5.086583s

Comparison:
       Kernel#format:  1324693.9 i/s
            String#%:  1183806.1 i/s - 1.12x  (± 0.00) slower
         Float#round:  1178623.3 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                Hash   551.752k i/100ms
          OpenStruct   293.841k i/100ms
Calculating -------------------------------------
                Hash      5.454M (± 5.0%) i/s -     27.588M in   5.071885s
          OpenStruct      3.060M (± 1.8%) i/s -     15.574M in   5.091798s

Comparison:
                Hash:  5454140.9 i/s
          OpenStruct:  3059607.7 i/s - 1.78x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                Hash   728.714k i/100ms
          OpenStruct     7.076k i/100ms
Calculating -------------------------------------
                Hash      8.328M (± 0.3%) i/s -     42.265M in   5.075352s
          OpenStruct     71.896k (± 3.3%) i/s -    360.876k in   5.025388s

Comparison:
                Hash:  8327675.3 i/s
          OpenStruct:    71895.7 i/s - 115.83x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   413.701k i/100ms
  ancestors.include?    71.884k i/100ms
Calculating -------------------------------------
  less than or equal      4.135M (± 0.4%) i/s -     20.685M in   5.003071s
  ancestors.include?    718.157k (± 0.1%) i/s -      3.594M in   5.004765s

Comparison:
  less than or equal:  4134531.4 i/s
  ancestors.include?:   718156.9 i/s - 5.76x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.497  (± 0.0%) i/s -      3.000  in   6.036094s
         Kernel loop      0.147  (± 0.0%) i/s -      1.000  in   6.790620s

Comparison:
          While Loop:        0.5 i/s
         Kernel loop:        0.1 i/s - 3.38x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.075M i/100ms
         Array#first   945.772k i/100ms
Calculating -------------------------------------
           Array#[0]     10.807M (± 0.1%) i/s -     54.824M in   5.072892s
         Array#first      9.498M (± 0.1%) i/s -     48.234M in   5.078581s

Comparison:
           Array#[0]: 10807299.0 i/s
         Array#first:  9497618.8 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.152M i/100ms
          Array#last     1.027M i/100ms
Calculating -------------------------------------
          Array#[-1]     11.516M (± 0.1%) i/s -     57.588M in   5.000823s
          Array#last     10.261M (± 0.1%) i/s -     51.355M in   5.004861s

Comparison:
          Array#[-1]: 11515668.9 i/s
          Array#last: 10260952.5 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    59.336k i/100ms
Calculating -------------------------------------
                find      0.167  (± 0.0%) i/s -      1.000  in   5.989032s
             bsearch    593.453k (± 0.1%) i/s -      3.026M in   5.099203s

Comparison:
             bsearch:   593453.3 i/s
                find:        0.2 i/s - 3554210.51x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    11.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    117.453  (± 2.6%) i/s -    594.000  in   5.060949s
        Array#insert      1.127  (± 0.0%) i/s -      6.000  in   5.326741s

Comparison:
       Array#unshift:      117.5 i/s
        Array#insert:        1.1 i/s - 104.25x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.628M i/100ms
          Array#size     1.609M i/100ms
         Array#count     1.193M i/100ms
Calculating -------------------------------------
        Array#length     16.305M (± 0.1%) i/s -     83.030M in   5.092224s
          Array#size     16.090M (± 0.1%) i/s -     80.465M in   5.000776s
         Array#count     11.930M (± 0.1%) i/s -     60.828M in   5.098727s

Comparison:
        Array#length: 16305186.3 i/s
          Array#size: 16090480.7 i/s - 1.01x  (± 0.00) slower
         Array#count: 11930050.1 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    26.444k i/100ms
        Array#sample   728.616k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    265.623k (± 0.6%) i/s -      1.349M in   5.077453s
        Array#sample      7.279M (± 0.0%) i/s -     36.431M in   5.005172s

Comparison:
        Array#sample:  7278632.5 i/s
 Array#shuffle.first:   265623.2 i/s - 27.40x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    39.916k i/100ms
          Date.parse    20.955k i/100ms
Calculating -------------------------------------
        Date.iso8601    421.726k (± 0.7%) i/s -      2.116M in   5.016648s
          Date.parse    210.119k (± 0.3%) i/s -      1.069M in   5.086229s

Comparison:
        Date.iso8601:   421726.4 i/s
          Date.parse:   210119.4 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    11.510k i/100ms
           Array#map    16.514k i/100ms
Calculating -------------------------------------
   Array#each + push    114.898k (± 0.2%) i/s -    575.500k in   5.008801s
           Array#map    165.055k (± 0.2%) i/s -    825.700k in   5.002606s

Comparison:
           Array#map:   165054.5 i/s
   Array#each + push:   114898.2 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            For loop    17.961k i/100ms
               #each    19.925k i/100ms
Calculating -------------------------------------
            For loop    177.563k (± 2.6%) i/s -    898.050k in   5.061353s
               #each    191.632k (± 3.0%) i/s -    976.325k in   5.099626s

Comparison:
               #each:   191631.5 i/s
            For loop:   177563.3 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          While Loop    24.369k i/100ms
     each_with_index    12.175k i/100ms
Calculating -------------------------------------
          While Loop    242.104k (± 0.1%) i/s -      1.218M in   5.032762s
     each_with_index    121.922k (± 0.1%) i/s -    620.925k in   5.092810s

Comparison:
          While Loop:   242103.8 i/s
     each_with_index:   121922.0 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    37.948k i/100ms
      inject to_proc     1.356k i/100ms
        inject block     1.321k i/100ms
Calculating -------------------------------------
       inject symbol    379.473k (± 0.0%) i/s -      1.897M in   5.000098s
      inject to_proc     13.377k (± 0.2%) i/s -     67.800k in   5.068567s
        inject block     13.299k (± 0.1%) i/s -     67.371k in   5.066007s

Comparison:
       inject symbol:   379472.6 i/s
      inject to_proc:    13376.6 i/s - 28.37x  (± 0.00) slower
        inject block:    13298.7 i/s - 28.53x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     4.286k i/100ms
   Array#map.flatten     2.323k i/100ms
      Array#flat_map     5.657k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     42.991k (± 0.1%) i/s -    218.586k in   5.084487s
   Array#map.flatten     23.237k (± 0.1%) i/s -    118.473k in   5.098495s
      Array#flat_map     56.444k (± 0.4%) i/s -    282.850k in   5.011227s

Comparison:
      Array#flat_map:    56444.1 i/s
Array#map.flatten(1):    42990.8 i/s - 1.31x  (± 0.00) slower
   Array#map.flatten:    23236.9 i/s - 2.43x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    18.983k i/100ms
  Array#reverse_each    19.579k i/100ms
Calculating -------------------------------------
  Array#reverse.each    189.641k (± 0.1%) i/s -    949.150k in   5.004983s
  Array#reverse_each    195.712k (± 0.1%) i/s -    978.950k in   5.001994s

Comparison:
  Array#reverse_each:   195712.1 i/s
  Array#reverse.each:   189641.2 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        12.323k i/100ms
   Enumerable#detect    52.743k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        123.029k (± 0.2%) i/s -      2.465M in  20.032764s
   Enumerable#detect    527.350k (± 0.2%) i/s -     10.549M in  20.003147s

Comparison:
   Enumerable#detect:   527350.0 i/s
Enumerable#select.first:   123028.8 i/s - 4.29x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       151.024k i/100ms
Enumerable#select.last
                        10.729k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.513M (± 0.1%) i/s -      7.702M in   5.089823s
Enumerable#select.last
                        107.154k (± 0.1%) i/s -    536.450k in   5.006379s

Comparison:
Enumerable#reverse.detect:  1513262.7 i/s
Enumerable#select.last:   107153.5 i/s - 14.12x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.826k i/100ms
  Enumerable#sort_by     2.759k i/100ms
     Enumerable#sort     1.453k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         28.254k (± 0.3%) i/s -    141.300k in   5.001040s
  Enumerable#sort_by     27.577k (± 0.3%) i/s -    137.950k in   5.002318s
     Enumerable#sort     14.553k (± 0.2%) i/s -     74.103k in   5.091857s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    28254.3 i/s
  Enumerable#sort_by:    27577.4 i/s - 1.02x  (± 0.00) slower
     Enumerable#sort:    14553.3 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    10.019k i/100ms
Enumerable#sort_by...first
                         5.025k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    100.142k (± 0.1%) i/s -    500.950k in   5.002426s
Enumerable#sort_by...first
                         50.223k (± 0.3%) i/s -    251.250k in   5.002744s

Comparison:
   Enumerable#min_by:   100141.5 i/s
Enumerable#sort_by...first:    50222.9 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   228.881k i/100ms
            Hash#dup   179.214k i/100ms
Calculating -------------------------------------
              Hash[]      2.172M (± 3.0%) i/s -     10.986M in   5.062095s
            Hash#dup      1.800M (± 1.0%) i/s -      9.140M in   5.077317s

Comparison:
              Hash[]:  2172258.9 i/s
            Hash#dup:  1800339.4 i/s - 1.21x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.073M i/100ms
  Hash#fetch, symbol   865.213k i/100ms
     Hash#[], string   791.631k i/100ms
  Hash#fetch, string   507.458k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     10.738M (± 0.1%) i/s -     54.735M in   5.097141s
  Hash#fetch, symbol      8.644M (± 0.1%) i/s -     43.261M in   5.004751s
     Hash#[], string      7.919M (± 0.0%) i/s -     40.373M in   5.098336s
  Hash#fetch, string      5.072M (± 0.1%) i/s -     25.373M in   5.002529s

Comparison:
     Hash#[], symbol: 10738383.9 i/s
  Hash#fetch, symbol:  8643920.2 i/s - 1.24x  (± 0.00) slower
     Hash#[], string:  7918894.4 i/s - 1.36x  (± 0.00) slower
  Hash#fetch, string:  5072019.5 i/s - 2.12x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   583.131k i/100ms
             Hash#[]   666.804k i/100ms
          Hash#[] ||   592.595k i/100ms
          Hash#[] &&   262.281k i/100ms
          Hash#fetch   408.710k i/100ms
 Hash#fetch fallback   236.766k i/100ms
Calculating -------------------------------------
            Hash#dig      5.830M (± 0.1%) i/s -     29.157M in   5.001143s
             Hash#[]      6.666M (± 0.1%) i/s -     33.340M in   5.001789s
          Hash#[] ||      5.923M (± 0.1%) i/s -     29.630M in   5.002108s
          Hash#[] &&      2.623M (± 0.1%) i/s -     13.376M in   5.099650s
          Hash#fetch      4.071M (± 0.1%) i/s -     20.436M in   5.020104s
 Hash#fetch fallback      2.365M (± 0.1%) i/s -     11.838M in   5.005645s

Comparison:
             Hash#[]:  6665665.5 i/s
          Hash#[] ||:  5923464.7 i/s - 1.13x  (± 0.00) slower
            Hash#dig:  5829986.9 i/s - 1.14x  (± 0.00) slower
          Hash#fetch:  4070740.8 i/s - 1.64x  (± 0.00) slower
          Hash#[] &&:  2622992.7 i/s - 2.54x  (± 0.00) slower
 Hash#fetch fallback:  2364992.8 i/s - 2.82x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.010M i/100ms
  Hash#fetch + block     1.014M i/100ms
    Hash#fetch + arg   699.966k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     10.096M (± 0.0%) i/s -     51.486M in   5.099521s
  Hash#fetch + block     10.133M (± 0.1%) i/s -     50.683M in   5.001720s
    Hash#fetch + arg      7.023M (± 0.1%) i/s -     35.698M in   5.083260s

Comparison:
  Hash#fetch + block: 10133139.6 i/s
  Hash#fetch + const: 10096170.2 i/s - 1.00x  (± 0.00) slower
    Hash#fetch + arg:  7022718.1 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    15.145k i/100ms
         sort + to_h     7.095k i/100ms
Calculating -------------------------------------
      sort_by + to_h    158.584k (± 0.3%) i/s -    802.685k in   5.061608s
         sort + to_h     71.086k (± 0.1%) i/s -    361.845k in   5.090225s

Comparison:
      sort_by + to_h:   158584.5 i/s
         sort + to_h:    71086.3 i/s - 2.23x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   112.204k i/100ms
       Hash#each_key   118.565k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.121M (± 0.2%) i/s -      5.610M in   5.005089s
       Hash#each_key      1.186M (± 0.0%) i/s -      6.047M in   5.099513s

Comparison:
       Hash#each_key:  1185763.4 i/s
      Hash#keys.each:  1120902.7 i/s - 1.06x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   892.000  i/100ms
           Hash#key?   643.084k i/100ms
Calculating -------------------------------------
  Hash#keys.include?      8.811k (± 5.4%) i/s -     44.600k in   5.080786s
           Hash#key?      6.416M (± 0.1%) i/s -     32.154M in   5.011456s

Comparison:
           Hash#key?:  6416142.4 i/s
  Hash#keys.include?:     8811.0 i/s - 728.20x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     2.536k i/100ms
            Hash#[]=     5.890k i/100ms
Calculating -------------------------------------
         Hash#merge!     25.347k (± 0.2%) i/s -    126.800k in   5.002546s
            Hash#[]=     58.864k (± 0.3%) i/s -    294.500k in   5.003102s

Comparison:
            Hash#[]=:    58864.0 i/s
         Hash#merge!:    25347.2 i/s - 2.32x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.135k i/100ms
      Hash#merge({})     2.496k i/100ms
 Hash#dup#merge!({})     1.788k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         31.227k (± 0.1%) i/s -    156.750k in   5.019627s
      Hash#merge({})     26.201k (± 1.4%) i/s -    132.288k in   5.050136s
 Hash#dup#merge!({})     18.570k (± 1.5%) i/s -     92.976k in   5.007792s

Comparison:
{}#merge!(Hash) do end:    31227.5 i/s
      Hash#merge({}):    26201.0 i/s - 1.19x  (± 0.00) slower
 Hash#dup#merge!({}):    18570.3 i/s - 1.68x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   234.822k i/100ms
          Hash#merge   211.582k i/100ms
Calculating -------------------------------------
        Hash#**other      2.346M (± 0.1%) i/s -     11.741M in   5.004817s
          Hash#merge      2.112M (± 0.1%) i/s -     10.579M in   5.009975s

Comparison:
        Hash#**other:  2345962.1 i/s
          Hash#merge:  2111610.2 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   975.000  i/100ms
         Hash#merge!     2.477k i/100ms
Calculating -------------------------------------
          Hash#merge      9.660k (± 1.2%) i/s -     48.750k in   5.047303s
         Hash#merge!     24.726k (± 0.1%) i/s -    123.850k in   5.008867s

Comparison:
         Hash#merge!:    24726.2 i/s
          Hash#merge:     9660.1 i/s - 2.56x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      264.638k i/100ms
Array#each             134.542k i/100ms
Array#each_w/_object   104.299k i/100ms
Hash#select-include     43.485k i/100ms
Calculating -------------------------------------
Hash#native-slice         2.641M (± 0.4%) i/s -     13.232M in   5.011002s
Array#each                1.343M (± 0.2%) i/s -      6.727M in   5.010368s
Array#each_w/_object      1.044M (± 0.2%) i/s -      5.319M in   5.094935s
Hash#select-include     436.672k (± 0.9%) i/s -      2.218M in   5.079162s

Comparison:
Hash#native-slice   :  2640620.4 i/s
Array#each          :  1342642.6 i/s - 1.97x  (± 0.00) slower
Array#each_w/_object:  1044032.5 i/s - 2.53x  (± 0.00) slower
Hash#select-include :   436672.5 i/s - 6.05x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     2.080k i/100ms
         Hash#value?     2.152k i/100ms
Calculating -------------------------------------
Hash#values.include?     20.280k (± 6.3%) i/s -    101.920k in   5.050451s
         Hash#value?     21.511k (± 0.1%) i/s -    107.600k in   5.002192s

Comparison:
         Hash#value?:    21510.6 i/s
Hash#values.include?:    20280.1 i/s - same-ish: difference falls within error

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                call   427.865k i/100ms
                send   333.412k i/100ms
      method_missing   234.259k i/100ms
Calculating -------------------------------------
                call      4.279M (± 0.1%) i/s -     21.821M in   5.099625s
                send      3.333M (± 0.1%) i/s -     16.671M in   5.001664s
      method_missing      2.339M (± 0.1%) i/s -     11.713M in   5.007209s

Comparison:
                call:  4278968.4 i/s
                send:  3333013.0 i/s - 1.28x  (± 0.00) slower
      method_missing:  2339218.6 i/s - 1.83x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
               Block     4.841k i/100ms
      Symbol#to_proc     5.397k i/100ms
Calculating -------------------------------------
               Block     48.460k (± 0.1%) i/s -    246.891k in   5.094767s
      Symbol#to_proc     53.902k (± 0.1%) i/s -    269.850k in   5.006324s

Comparison:
      Symbol#to_proc:    53901.9 i/s
               Block:    48459.8 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          block.call   631.786k i/100ms
       block + yield   679.204k i/100ms
        unused block   904.751k i/100ms
               yield   872.981k i/100ms
Calculating -------------------------------------
          block.call      6.321M (± 0.0%) i/s -     32.221M in   5.097696s
       block + yield      6.814M (± 0.0%) i/s -     34.639M in   5.083783s
        unused block      9.048M (± 0.0%) i/s -     46.142M in   5.099780s
               yield      8.731M (± 0.0%) i/s -     44.522M in   5.099093s

Comparison:
        unused block:  9047901.1 i/s
               yield:  8731363.9 i/s - 1.04x  (± 0.00) slower
       block + yield:  6813707.5 i/s - 1.33x  (± 0.00) slower
          block.call:  6320716.8 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   197.133k i/100ms
      range#include?     8.122k i/100ms
       range#member?     8.106k i/100ms
       plain compare   297.638k i/100ms
Calculating -------------------------------------
        range#cover?      1.972M (± 0.1%) i/s -     10.054M in   5.099418s
      range#include?     81.033k (± 0.3%) i/s -    406.100k in   5.011616s
       range#member?     81.097k (± 0.4%) i/s -    413.406k in   5.097748s
       plain compare      2.976M (± 0.0%) i/s -     14.882M in   5.000694s

Comparison:
       plain compare:  2975967.5 i/s
        range#cover?:  1971556.1 i/s - 1.51x  (± 0.00) slower
       range#member?:    81096.9 i/s - 36.70x  (± 0.00) slower
      range#include?:    81032.6 i/s - 36.73x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       String#match?   638.046k i/100ms
           String#=~   376.244k i/100ms
          Regexp#===   358.114k i/100ms
        String#match   297.407k i/100ms
Calculating -------------------------------------
       String#match?      6.381M (± 0.0%) i/s -     32.540M in   5.099463s
           String#=~      3.785M (± 0.2%) i/s -     19.188M in   5.069735s
          Regexp#===      3.575M (± 0.6%) i/s -     17.906M in   5.008202s
        String#match      2.971M (± 0.1%) i/s -     14.870M in   5.004582s

Comparison:
       String#match?:  6381133.4 i/s
           String#=~:  3784909.2 i/s - 1.69x  (± 0.00) slower
          Regexp#===:  3575408.9 i/s - 1.78x  (± 0.00) slower
        String#match:  2971350.7 i/s - 2.15x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   404.082k i/100ms
      String#casecmp   525.613k i/100ms
Calculating -------------------------------------
String#downcase + ==      4.036M (± 0.1%) i/s -     20.204M in   5.005611s
      String#casecmp      5.254M (± 0.1%) i/s -     26.281M in   5.001619s

Comparison:
      String#casecmp:  5254431.6 i/s
String#downcase + ==:  4036292.9 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            String#+   357.504k i/100ms
       String#concat   378.456k i/100ms
       String#append   410.999k i/100ms
         "foo" "bar"   800.818k i/100ms
  "#{'foo'}#{'bar'}"   826.887k i/100ms
Calculating -------------------------------------
            String#+      3.572M (± 0.1%) i/s -     17.875M in   5.004267s
       String#concat      3.798M (± 0.2%) i/s -     19.301M in   5.081973s
       String#append      4.104M (± 0.1%) i/s -     20.550M in   5.007348s
         "foo" "bar"      8.002M (± 0.1%) i/s -     40.041M in   5.003793s
  "#{'foo'}#{'bar'}"      8.251M (± 0.8%) i/s -     41.344M in   5.011156s

Comparison:
  "#{'foo'}#{'bar'}":  8251044.9 i/s
         "foo" "bar":  8002112.7 i/s - 1.03x  (± 0.00) slower
       String#append:  4103964.8 i/s - 2.01x  (± 0.00) slower
       String#concat:  3798007.9 i/s - 2.17x  (± 0.00) slower
            String#+:  3571995.0 i/s - 2.31x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#+@   693.976k i/100ms
          String#dup   352.564k i/100ms
Calculating -------------------------------------
           String#+@      6.934M (± 0.1%) i/s -     34.699M in   5.004237s
          String#dup      3.525M (± 0.1%) i/s -     17.628M in   5.001047s

Comparison:
           String#+@:  6933889.9 i/s
          String#dup:  3524905.4 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#=~   121.299k i/100ms
       String#match?   266.667k i/100ms
    String#end_with?   383.531k i/100ms
Calculating -------------------------------------
           String#=~      1.209M (± 0.2%) i/s -      6.065M in   5.017796s
       String#match?      2.666M (± 0.0%) i/s -     13.333M in   5.000918s
    String#end_with?      3.836M (± 0.1%) i/s -     19.560M in   5.098950s

Comparison:
    String#end_with?:  3836101.7 i/s
       String#match?:  2666180.9 i/s - 1.44x  (± 0.00) slower
           String#=~:  1208693.1 i/s - 3.17x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    71.816k i/100ms
          String#sub    91.550k i/100ms
String#dup["string"]=
                       119.067k i/100ms
Calculating -------------------------------------
         String#gsub    715.572k (± 0.3%) i/s -      3.591M in   5.018137s
          String#sub    894.527k (± 0.4%) i/s -      4.486M in   5.014967s
String#dup["string"]=
                          1.178M (± 0.2%) i/s -      5.953M in   5.052318s

Comparison:
String#dup["string"]=:  1178346.4 i/s
          String#sub:   894527.0 i/s - 1.32x  (± 0.00) slower
         String#gsub:   715571.5 i/s - 1.65x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    62.461k i/100ms
           String#tr   222.815k i/100ms
Calculating -------------------------------------
         String#gsub    620.245k (± 0.7%) i/s -      3.123M in   5.035409s
           String#tr      2.223M (± 0.1%) i/s -     11.141M in   5.011553s

Comparison:
           String#tr:  2223014.9 i/s
         String#gsub:   620245.2 i/s - 3.58x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   763.559k i/100ms
         With Freeze     1.322M i/100ms
Calculating -------------------------------------
      Without Freeze      7.683M (± 0.1%) i/s -     38.942M in   5.068458s
         With Freeze     13.209M (± 0.1%) i/s -     66.076M in   5.002200s

Comparison:
         With Freeze: 13209413.1 i/s
      Without Freeze:  7683114.0 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.165k i/100ms
      String#squeeze   107.755k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     21.768k (± 0.2%) i/s -    110.415k in   5.072453s
      String#squeeze      1.069M (± 0.9%) i/s -      5.388M in   5.038514s

Comparison:
      String#squeeze:  1069409.4 i/s
 String#gsub/regex+/:    21767.7 i/s - 49.13x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#=~   180.945k i/100ms
       String#match?   501.701k i/100ms
  String#start_with?   573.822k i/100ms
Calculating -------------------------------------
           String#=~      1.819M (± 0.2%) i/s -      9.228M in   5.074274s
       String#match?      5.015M (± 0.0%) i/s -     25.085M in   5.001937s
  String#start_with?      5.736M (± 0.1%) i/s -     28.691M in   5.001866s

Comparison:
  String#start_with?:  5736083.8 i/s
       String#match?:  5015067.9 i/s - 1.14x  (± 0.00) slower
           String#=~:  1818631.6 i/s - 3.15x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   136.639k i/100ms
    String#[0, n] ==    49.141k i/100ms
   String#[RANGE] ==    45.530k i/100ms
   String#[0...n] ==    29.607k i/100ms
Calculating -------------------------------------
  String#start_with?      1.362M (± 0.2%) i/s -      6.832M in   5.014911s
    String#[0, n] ==    492.314k (± 0.2%) i/s -      2.506M in   5.090651s
   String#[RANGE] ==    457.332k (± 0.2%) i/s -      2.322M in   5.077367s
   String#[0...n] ==    294.843k (± 0.1%) i/s -      1.480M in   5.020809s

Comparison:
  String#start_with?:  1362331.3 i/s
    String#[0, n] ==:   492314.1 i/s - 2.77x  (± 0.00) slower
   String#[RANGE] ==:   457331.7 i/s - 2.98x  (± 0.00) slower
   String#[0...n] ==:   294843.2 i/s - 4.62x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   111.754k i/100ms
 String#sub!'string'    79.452k i/100ms
String#gsub!'string'    50.676k i/100ms
  String#[/regexp/]=    98.001k i/100ms
 String#sub!/regexp/    76.966k i/100ms
String#gsub!/regexp/    41.031k i/100ms
Calculating -------------------------------------
  String#['string']=      1.110M (± 0.7%) i/s -      5.588M in   5.036451s
 String#sub!'string'    799.115k (± 0.3%) i/s -      4.052M in   5.070715s
String#gsub!'string'    506.409k (± 0.1%) i/s -      2.534M in   5.003471s
  String#[/regexp/]=    973.279k (± 0.2%) i/s -      4.900M in   5.034610s
 String#sub!/regexp/    759.349k (± 0.3%) i/s -      3.848M in   5.067934s
String#gsub!/regexp/    403.285k (± 0.4%) i/s -      2.052M in   5.087175s

Comparison:
  String#['string']=:  1109503.8 i/s
  String#[/regexp/]=:   973278.7 i/s - 1.14x  (± 0.00) slower
 String#sub!'string':   799114.6 i/s - 1.39x  (± 0.00) slower
 String#sub!/regexp/:   759349.3 i/s - 1.46x  (± 0.00) slower
String#gsub!'string':   506409.4 i/s - 2.19x  (± 0.00) slower
String#gsub!/regexp/:   403284.8 i/s - 2.75x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          String#sub    99.996k i/100ms
        String#chomp   342.987k i/100ms
String#delete_suffix   370.182k i/100ms
Calculating -------------------------------------
          String#sub    989.967k (± 0.7%) i/s -      5.000M in   5.050698s
        String#chomp      3.425M (± 0.1%) i/s -     17.149M in   5.006903s
String#delete_suffix      3.699M (± 0.1%) i/s -     18.509M in   5.003622s

Comparison:
String#delete_suffix:  3699143.6 i/s
        String#chomp:  3425145.2 i/s - 1.08x  (± 0.00) slower
          String#sub:   989966.5 i/s - 3.74x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   384.429k i/100ms
          String#sub    99.121k i/100ms
Calculating -------------------------------------
String#delete_prefix      3.848M (± 0.1%) i/s -     19.606M in   5.095303s
          String#sub      1.017M (± 0.4%) i/s -      5.154M in   5.069429s

Comparison:
String#delete_prefix:  3847836.5 i/s
          String#sub:  1016756.4 i/s - 3.78x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   372.750k i/100ms
    String#unpack[0]   279.168k i/100ms
Calculating -------------------------------------
      String#unpack1      3.729M (± 0.1%) i/s -     19.010M in   5.098019s
    String#unpack[0]      2.789M (± 0.1%) i/s -     13.958M in   5.004095s

Comparison:
      String#unpack1:  3728952.5 i/s
    String#unpack[0]:  2789399.3 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    18.128k i/100ms
          Time.parse     6.302k i/100ms
Calculating -------------------------------------
        Time.iso8601    187.197k (± 0.4%) i/s -    942.656k in   5.035699s
          Time.parse     62.947k (± 0.4%) i/s -    315.100k in   5.005861s

Comparison:
        Time.iso8601:   187197.2 i/s
          Time.parse:    62947.5 i/s - 2.97x  (± 0.00) slower

