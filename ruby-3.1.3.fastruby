$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       600.618k i/100ms
Function with splat arguments
                         7.948k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          6.008M (± 0.2%) i/s -     30.632M in   5.098865s
Function with splat arguments
                         80.782k (± 5.4%) i/s -    405.348k in   5.039976s

Comparison:
Function with single Array argument:  6007535.9 i/s
Function with splat arguments:    80782.0 i/s - 74.37x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.014M i/100ms
Sequential Assignment
                       997.295k i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.136M (± 0.0%) i/s -     51.691M in   5.099907s
Sequential Assignment
                          9.994M (± 0.0%) i/s -     50.862M in   5.089453s

Comparison:
 Parallel Assignment: 10135747.3 i/s
Sequential Assignment:  9993618.5 i/s - 1.01x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   364.915k i/100ms
       attr_accessor   402.257k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.638M (± 0.4%) i/s -     18.246M in   5.015619s
       attr_accessor      4.015M (± 0.0%) i/s -     20.113M in   5.009122s

Comparison:
       attr_accessor:  4015245.7 i/s
   getter_and_setter:  3637846.4 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    71.535k i/100ms
         respond_to?   585.244k i/100ms
Calculating -------------------------------------
      begin...rescue    722.285k (± 0.5%) i/s -      3.648M in   5.051165s
         respond_to?      5.852M (± 0.1%) i/s -     29.262M in   5.000161s

Comparison:
         respond_to?:  5852257.3 i/s
      begin...rescue:   722285.3 i/s - 8.10x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
              normal   236.381k i/100ms
             &method    89.951k i/100ms
Calculating -------------------------------------
              normal      2.358M (± 0.3%) i/s -     11.819M in   5.012188s
             &method    898.334k (± 0.1%) i/s -      4.498M in   5.006551s

Comparison:
              normal:  2358086.1 i/s
             &method:   898334.2 i/s - 2.62x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       175.000  i/100ms
       define_method   224.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.949k (±20.3%) i/s -      8.575k in   5.037615s
       define_method      2.313k (±24.4%) i/s -      9.856k in   5.032763s

Comparison:
       define_method:     2313.5 i/s
module_eval with string:     1949.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         Float#round   141.670k i/100ms
       Kernel#format   159.149k i/100ms
            String#%   140.744k i/100ms
Calculating -------------------------------------
         Float#round      1.419M (± 0.1%) i/s -      7.225M in   5.090610s
       Kernel#format      1.591M (± 0.1%) i/s -      7.957M in   5.002940s
            String#%      1.412M (± 0.1%) i/s -      7.178M in   5.083703s

Comparison:
       Kernel#format:  1590555.5 i/s
         Float#round:  1419313.9 i/s - 1.12x  (± 0.00) slower
            String#%:  1411952.7 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                Hash   697.818k i/100ms
          OpenStruct   373.478k i/100ms
Calculating -------------------------------------
                Hash      6.984M (± 0.1%) i/s -     35.589M in   5.095843s
          OpenStruct      3.734M (± 0.1%) i/s -     18.674M in   5.001058s

Comparison:
                Hash:  6983875.9 i/s
          OpenStruct:  3733992.0 i/s - 1.87x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                Hash   916.226k i/100ms
          OpenStruct     8.158k i/100ms
Calculating -------------------------------------
                Hash      9.918M (± 0.3%) i/s -     50.392M in   5.080860s
          OpenStruct     83.750k (± 2.8%) i/s -    424.216k in   5.069506s

Comparison:
                Hash:  9918160.4 i/s
          OpenStruct:    83749.6 i/s - 118.43x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   481.144k i/100ms
  ancestors.include?    86.028k i/100ms
Calculating -------------------------------------
  less than or equal      4.775M (± 0.1%) i/s -     24.057M in   5.038196s
  ancestors.include?    858.503k (± 0.4%) i/s -      4.301M in   5.010427s

Comparison:
  less than or equal:  4774964.8 i/s
  ancestors.include?:   858503.5 i/s - 5.56x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.601  (± 0.0%) i/s -      4.000  in   6.661108s
         Kernel loop      0.176  (± 0.0%) i/s -      1.000  in   5.683312s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 3.41x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.291M i/100ms
         Array#first     1.210M i/100ms
Calculating -------------------------------------
           Array#[0]     12.906M (± 0.1%) i/s -     64.538M in   5.000693s
         Array#first     12.146M (± 0.0%) i/s -     61.691M in   5.078908s

Comparison:
           Array#[0]: 12905786.4 i/s
         Array#first: 12146475.7 i/s - 1.06x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.397M i/100ms
          Array#last     1.202M i/100ms
Calculating -------------------------------------
          Array#[-1]     13.991M (± 0.1%) i/s -     71.246M in   5.092431s
          Array#last     11.985M (± 0.2%) i/s -     60.088M in   5.013802s

Comparison:
          Array#[-1]: 13990536.1 i/s
          Array#last: 11984554.2 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    70.597k i/100ms
Calculating -------------------------------------
                find      0.207  (± 0.0%) i/s -      2.000  in   9.650309s
             bsearch    706.104k (± 0.1%) i/s -      3.600M in   5.099032s

Comparison:
             bsearch:   706104.5 i/s
                find:        0.2 i/s - 3407062.86x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    13.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    135.436  (± 2.2%) i/s -    689.000  in   5.090685s
        Array#insert      1.360  (± 0.0%) i/s -      7.000  in   5.148245s

Comparison:
       Array#unshift:      135.4 i/s
        Array#insert:        1.4 i/s - 99.60x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.960M i/100ms
          Array#size     1.959M i/100ms
         Array#count     1.381M i/100ms
Calculating -------------------------------------
        Array#length     19.601M (± 0.1%) i/s -     98.007M in   5.000164s
          Array#size     19.595M (± 0.1%) i/s -     99.933M in   5.099852s
         Array#count     13.810M (± 0.0%) i/s -     69.048M in   4.999982s

Comparison:
        Array#length: 19600783.3 i/s
          Array#size: 19595376.6 i/s - same-ish: difference falls within error
         Array#count: 13809681.9 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    31.655k i/100ms
        Array#sample   868.318k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    314.910k (± 0.2%) i/s -      1.583M in   5.026071s
        Array#sample      8.680M (± 0.1%) i/s -     43.416M in   5.002016s

Comparison:
        Array#sample:  8679687.0 i/s
 Array#shuffle.first:   314910.0 i/s - 27.56x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    49.814k i/100ms
          Date.parse    24.897k i/100ms
Calculating -------------------------------------
        Date.iso8601    498.814k (± 0.2%) i/s -      2.541M in   5.093130s
          Date.parse    248.396k (± 0.3%) i/s -      1.245M in   5.011606s

Comparison:
        Date.iso8601:   498814.3 i/s
          Date.parse:   248395.7 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    13.632k i/100ms
           Array#map    19.640k i/100ms
Calculating -------------------------------------
   Array#each + push    136.381k (± 0.2%) i/s -    695.232k in   5.097747s
           Array#map    196.233k (± 0.1%) i/s -    982.000k in   5.004274s

Comparison:
           Array#map:   196232.7 i/s
   Array#each + push:   136380.9 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            For loop    22.964k i/100ms
               #each    25.161k i/100ms
Calculating -------------------------------------
            For loop    231.003k (± 0.0%) i/s -      1.171M in   5.069907s
               #each    251.524k (± 0.0%) i/s -      1.258M in   5.001719s

Comparison:
               #each:   251523.6 i/s
            For loop:   231003.1 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          While Loop    29.073k i/100ms
     each_with_index    13.669k i/100ms
Calculating -------------------------------------
          While Loop    290.191k (± 0.1%) i/s -      1.454M in   5.009296s
     each_with_index    136.716k (± 0.1%) i/s -    697.119k in   5.099037s

Comparison:
          While Loop:   290190.5 i/s
     each_with_index:   136715.9 i/s - 2.12x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    45.401k i/100ms
      inject to_proc     1.624k i/100ms
        inject block     1.570k i/100ms
Calculating -------------------------------------
       inject symbol    454.024k (± 0.0%) i/s -      2.315M in   5.099843s
      inject to_proc     16.181k (± 0.4%) i/s -     81.200k in   5.018206s
        inject block     15.485k (± 0.1%) i/s -     78.500k in   5.069314s

Comparison:
       inject symbol:   454024.0 i/s
      inject to_proc:    16181.4 i/s - 28.06x  (± 0.00) slower
        inject block:    15485.3 i/s - 29.32x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     5.189k i/100ms
   Array#map.flatten     2.799k i/100ms
      Array#flat_map     6.718k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     51.956k (± 0.2%) i/s -    264.639k in   5.093510s
   Array#map.flatten     27.956k (± 0.2%) i/s -    139.950k in   5.006045s
      Array#flat_map     67.103k (± 0.1%) i/s -    335.900k in   5.005764s

Comparison:
      Array#flat_map:    67102.8 i/s
Array#map.flatten(1):    51956.3 i/s - 1.29x  (± 0.00) slower
   Array#map.flatten:    27956.3 i/s - 2.40x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    24.041k i/100ms
  Array#reverse_each    24.929k i/100ms
Calculating -------------------------------------
  Array#reverse.each    240.894k (± 0.4%) i/s -      1.226M in   5.089826s
  Array#reverse_each    250.015k (± 0.0%) i/s -      1.271M in   5.085216s

Comparison:
  Array#reverse_each:   250014.8 i/s
  Array#reverse.each:   240893.5 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        15.032k i/100ms
   Enumerable#detect    63.542k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        150.357k (± 0.1%) i/s -      3.021M in  20.095066s
   Enumerable#detect    635.131k (± 0.1%) i/s -     12.708M in  20.009126s

Comparison:
   Enumerable#detect:   635130.8 i/s
Enumerable#select.first:   150357.1 i/s - 4.22x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       178.213k i/100ms
Enumerable#select.last
                        12.975k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.780M (± 0.4%) i/s -      8.911M in   5.007487s
Enumerable#select.last
                        129.939k (± 0.1%) i/s -    661.725k in   5.092597s

Comparison:
Enumerable#reverse.detect:  1779501.3 i/s
Enumerable#select.last:   129938.9 i/s - 13.69x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.441k i/100ms
  Enumerable#sort_by     3.330k i/100ms
     Enumerable#sort     1.796k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         34.322k (± 0.2%) i/s -    172.050k in   5.012823s
  Enumerable#sort_by     33.218k (± 0.2%) i/s -    166.500k in   5.012433s
     Enumerable#sort     17.963k (± 0.2%) i/s -     91.596k in   5.099220s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    34322.1 i/s
  Enumerable#sort_by:    33217.6 i/s - 1.03x  (± 0.00) slower
     Enumerable#sort:    17962.9 i/s - 1.91x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    12.341k i/100ms
Enumerable#sort_by...first
                         6.239k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    123.380k (± 0.1%) i/s -    617.050k in   5.001212s
Enumerable#sort_by...first
                         62.018k (± 0.4%) i/s -    311.950k in   5.030093s

Comparison:
   Enumerable#min_by:   123380.1 i/s
Enumerable#sort_by...first:    62017.6 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   272.876k i/100ms
            Hash#dup   176.776k i/100ms
Calculating -------------------------------------
              Hash[]      2.430M (± 1.9%) i/s -     12.279M in   5.055838s
            Hash#dup      2.169M (± 2.0%) i/s -     10.960M in   5.054256s

Comparison:
              Hash[]:  2429599.0 i/s
            Hash#dup:  2169388.1 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.269M i/100ms
  Hash#fetch, symbol     1.037M i/100ms
     Hash#[], string     1.011M i/100ms
  Hash#fetch, string   608.217k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     12.721M (± 0.0%) i/s -     64.699M in   5.085839s
  Hash#fetch, symbol     10.376M (± 0.1%) i/s -     52.906M in   5.099139s
     Hash#[], string     10.064M (± 0.1%) i/s -     50.571M in   5.024837s
  Hash#fetch, string      6.078M (± 0.1%) i/s -     30.411M in   5.003373s

Comparison:
     Hash#[], symbol: 12721364.6 i/s
  Hash#fetch, symbol: 10375564.6 i/s - 1.23x  (± 0.00) slower
     Hash#[], string: 10064174.6 i/s - 1.26x  (± 0.00) slower
  Hash#fetch, string:  6078072.5 i/s - 2.09x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   719.273k i/100ms
             Hash#[]   810.248k i/100ms
          Hash#[] ||   738.776k i/100ms
          Hash#[] &&   319.798k i/100ms
          Hash#fetch   494.559k i/100ms
 Hash#fetch fallback   284.810k i/100ms
Calculating -------------------------------------
            Hash#dig      7.189M (± 0.1%) i/s -     35.964M in   5.002882s
             Hash#[]      8.136M (± 0.1%) i/s -     41.323M in   5.079125s
          Hash#[] ||      7.390M (± 0.2%) i/s -     37.678M in   5.098230s
          Hash#[] &&      3.197M (± 0.1%) i/s -     15.990M in   5.000795s
          Hash#fetch      4.944M (± 0.1%) i/s -     24.728M in   5.001648s
 Hash#fetch fallback      2.842M (± 0.1%) i/s -     14.240M in   5.010819s

Comparison:
             Hash#[]:  8135787.4 i/s
          Hash#[] ||:  7390343.4 i/s - 1.10x  (± 0.00) slower
            Hash#dig:  7188593.9 i/s - 1.13x  (± 0.00) slower
          Hash#fetch:  4943970.8 i/s - 1.65x  (± 0.00) slower
          Hash#[] &&:  3197472.6 i/s - 2.54x  (± 0.00) slower
 Hash#fetch fallback:  2841951.8 i/s - 2.86x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.230M i/100ms
  Hash#fetch + block     1.211M i/100ms
    Hash#fetch + arg   845.550k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     12.297M (± 0.0%) i/s -     61.489M in   5.000218s
  Hash#fetch + block     12.120M (± 0.2%) i/s -     61.753M in   5.095134s
    Hash#fetch + arg      8.448M (± 0.1%) i/s -     42.278M in   5.004600s

Comparison:
  Hash#fetch + const: 12297206.0 i/s
  Hash#fetch + block: 12120042.4 i/s - 1.01x  (± 0.00) slower
    Hash#fetch + arg:  8447731.8 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    18.321k i/100ms
         sort + to_h     8.611k i/100ms
Calculating -------------------------------------
      sort_by + to_h    183.374k (± 0.4%) i/s -    934.371k in   5.095518s
         sort + to_h     86.117k (± 0.3%) i/s -    439.161k in   5.099665s

Comparison:
      sort_by + to_h:   183374.5 i/s
         sort + to_h:    86116.7 i/s - 2.13x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   133.667k i/100ms
       Hash#each_key   142.359k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.354M (± 0.1%) i/s -      6.817M in   5.035015s
       Hash#each_key      1.423M (± 0.0%) i/s -      7.118M in   5.000379s

Comparison:
       Hash#each_key:  1423482.2 i/s
      Hash#keys.each:  1353923.2 i/s - 1.05x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   891.000  i/100ms
           Hash#key?   875.532k i/100ms
Calculating -------------------------------------
  Hash#keys.include?      8.811k (± 4.8%) i/s -     44.550k in   5.070083s
           Hash#key?      8.743M (± 0.0%) i/s -     43.777M in   5.007253s

Comparison:
           Hash#key?:  8742639.7 i/s
  Hash#keys.include?:     8811.2 i/s - 992.22x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.000k i/100ms
            Hash#[]=     6.871k i/100ms
Calculating -------------------------------------
         Hash#merge!     29.958k (± 0.1%) i/s -    150.000k in   5.007074s
            Hash#[]=     69.180k (± 0.5%) i/s -    350.421k in   5.065482s

Comparison:
            Hash#[]=:    69179.9 i/s
         Hash#merge!:    29957.7 i/s - 2.31x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.753k i/100ms
      Hash#merge({})     2.989k i/100ms
 Hash#dup#merge!({})     2.196k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         37.393k (± 0.1%) i/s -    187.650k in   5.018299s
      Hash#merge({})     29.871k (± 0.1%) i/s -    149.450k in   5.003107s
 Hash#dup#merge!({})     21.952k (± 0.1%) i/s -    109.800k in   5.001848s

Comparison:
{}#merge!(Hash) do end:    37393.2 i/s
      Hash#merge({}):    29871.5 i/s - 1.25x  (± 0.00) slower
 Hash#dup#merge!({}):    21951.9 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   282.327k i/100ms
          Hash#merge   252.902k i/100ms
Calculating -------------------------------------
        Hash#**other      2.822M (± 0.1%) i/s -     14.116M in   5.001637s
          Hash#merge      2.530M (± 0.1%) i/s -     12.898M in   5.098976s

Comparison:
        Hash#**other:  2822347.6 i/s
          Hash#merge:  2529529.7 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.154k i/100ms
         Hash#merge!     2.967k i/100ms
Calculating -------------------------------------
          Hash#merge     11.473k (± 0.7%) i/s -     57.700k in   5.029279s
         Hash#merge!     29.686k (± 0.1%) i/s -    151.317k in   5.097247s

Comparison:
         Hash#merge!:    29686.1 i/s
          Hash#merge:    11473.4 i/s - 2.59x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      318.034k i/100ms
Array#each             166.002k i/100ms
Array#each_w/_object   118.414k i/100ms
Hash#select-include     53.807k i/100ms
Calculating -------------------------------------
Hash#native-slice         3.175M (± 0.2%) i/s -     15.902M in   5.007703s
Array#each                1.664M (± 0.2%) i/s -      8.466M in   5.088147s
Array#each_w/_object      1.184M (± 0.4%) i/s -      6.039M in   5.099997s
Hash#select-include     530.063k (± 0.8%) i/s -      2.690M in   5.075855s

Comparison:
Hash#native-slice   :  3175459.0 i/s
Array#each          :  1663896.5 i/s - 1.91x  (± 0.00) slower
Array#each_w/_object:  1184158.2 i/s - 2.68x  (± 0.00) slower
Hash#select-include :   530063.1 i/s - 5.99x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   849.000  i/100ms
         Hash#value?   709.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      8.397k (± 4.4%) i/s -     42.450k in   5.066867s
         Hash#value?      7.098k (± 0.1%) i/s -     36.159k in   5.093975s

Comparison:
Hash#values.include?:     8397.1 i/s
         Hash#value?:     7098.4 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
                call   523.370k i/100ms
                send   387.298k i/100ms
      method_missing   289.819k i/100ms
Calculating -------------------------------------
                call      5.234M (± 0.1%) i/s -     26.692M in   5.099786s
                send      3.857M (± 0.2%) i/s -     19.365M in   5.020394s
      method_missing      2.888M (± 0.2%) i/s -     14.491M in   5.017348s

Comparison:
                call:  5233922.5 i/s
                send:  3857259.9 i/s - 1.36x  (± 0.00) slower
      method_missing:  2888180.7 i/s - 1.81x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
               Block     5.778k i/100ms
      Symbol#to_proc     6.447k i/100ms
Calculating -------------------------------------
               Block     57.810k (± 0.1%) i/s -    294.678k in   5.097348s
      Symbol#to_proc     64.430k (± 0.1%) i/s -    322.350k in   5.003106s

Comparison:
      Symbol#to_proc:    64430.1 i/s
               Block:    57810.2 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          block.call   755.614k i/100ms
       block + yield   821.947k i/100ms
        unused block     1.103M i/100ms
               yield     1.061M i/100ms
Calculating -------------------------------------
          block.call      7.660M (± 0.1%) i/s -     38.536M in   5.031083s
       block + yield      8.235M (± 0.0%) i/s -     41.919M in   5.090630s
        unused block     11.034M (± 0.1%) i/s -     55.175M in   5.000313s
               yield     10.594M (± 0.0%) i/s -     53.036M in   5.006252s

Comparison:
        unused block: 11034284.7 i/s
               yield: 10593876.0 i/s - 1.04x  (± 0.00) slower
       block + yield:  8234598.6 i/s - 1.34x  (± 0.00) slower
          block.call:  7659653.6 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   232.357k i/100ms
      range#include?     9.669k i/100ms
       range#member?     9.665k i/100ms
       plain compare   357.029k i/100ms
Calculating -------------------------------------
        range#cover?      2.323M (± 0.1%) i/s -     11.618M in   5.002191s
      range#include?     96.848k (± 0.3%) i/s -    493.119k in   5.091737s
       range#member?     96.845k (± 0.2%) i/s -    492.915k in   5.089760s
       plain compare      3.571M (± 0.0%) i/s -     18.208M in   5.099420s

Comparison:
       plain compare:  3570696.6 i/s
        range#cover?:  2322554.6 i/s - 1.54x  (± 0.00) slower
      range#include?:    96847.7 i/s - 36.87x  (± 0.00) slower
       range#member?:    96844.9 i/s - 36.87x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
       String#match?   755.521k i/100ms
           String#=~   446.510k i/100ms
          Regexp#===   415.172k i/100ms
        String#match   342.218k i/100ms
Calculating -------------------------------------
       String#match?      7.555M (± 0.0%) i/s -     38.532M in   5.100000s
           String#=~      4.474M (± 0.2%) i/s -     22.772M in   5.089490s
          Regexp#===      4.152M (± 0.2%) i/s -     20.759M in   5.000260s
        String#match      3.422M (± 0.1%) i/s -     17.111M in   4.999889s

Comparison:
       String#match?:  7555211.7 i/s
           String#=~:  4474332.6 i/s - 1.69x  (± 0.00) slower
          Regexp#===:  4151514.0 i/s - 1.82x  (± 0.00) slower
        String#match:  3422259.2 i/s - 2.21x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   471.378k i/100ms
      String#casecmp   624.184k i/100ms
Calculating -------------------------------------
String#downcase + ==      4.714M (± 0.2%) i/s -     24.040M in   5.099728s
      String#casecmp      6.235M (± 0.1%) i/s -     31.209M in   5.005595s

Comparison:
      String#casecmp:  6234869.5 i/s
String#downcase + ==:  4714046.5 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
            String#+   428.255k i/100ms
       String#concat   413.968k i/100ms
       String#append   492.736k i/100ms
         "foo" "bar"   983.371k i/100ms
  "#{'foo'}#{'bar'}"   984.561k i/100ms
Calculating -------------------------------------
            String#+      4.283M (± 0.1%) i/s -     21.413M in   5.000007s
       String#concat      4.155M (± 0.6%) i/s -     21.112M in   5.081133s
       String#append      4.922M (± 0.1%) i/s -     24.637M in   5.004952s
         "foo" "bar"      9.829M (± 0.1%) i/s -     49.169M in   5.002545s
  "#{'foo'}#{'bar'}"      9.831M (± 0.1%) i/s -     49.228M in   5.007483s

Comparison:
  "#{'foo'}#{'bar'}":  9830907.7 i/s
         "foo" "bar":  9828712.7 i/s - same-ish: difference falls within error
       String#append:  4922487.9 i/s - 2.00x  (± 0.00) slower
            String#+:  4282546.6 i/s - 2.30x  (± 0.00) slower
       String#concat:  4155221.3 i/s - 2.37x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#+@   835.283k i/100ms
          String#dup   425.708k i/100ms
Calculating -------------------------------------
           String#+@      8.313M (± 0.1%) i/s -     41.764M in   5.023893s
          String#dup      4.255M (± 0.1%) i/s -     21.285M in   5.002375s

Comparison:
           String#+@:  8313109.8 i/s
          String#dup:  4255060.8 i/s - 1.95x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#=~   144.922k i/100ms
       String#match?   320.652k i/100ms
    String#end_with?   459.629k i/100ms
Calculating -------------------------------------
           String#=~      1.449M (± 0.1%) i/s -      7.246M in   5.000087s
       String#match?      3.207M (± 0.0%) i/s -     16.353M in   5.099258s
    String#end_with?      4.599M (± 0.1%) i/s -     23.441M in   5.097534s

Comparison:
    String#end_with?:  4598515.6 i/s
       String#match?:  3206987.2 i/s - 1.43x  (± 0.00) slower
           String#=~:  1449196.2 i/s - 3.17x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    86.427k i/100ms
          String#sub   109.010k i/100ms
String#dup["string"]=
                       133.860k i/100ms
Calculating -------------------------------------
         String#gsub    865.139k (± 0.1%) i/s -      4.408M in   5.094889s
          String#sub      1.122M (± 0.4%) i/s -      5.669M in   5.053709s
String#dup["string"]=
                          1.403M (± 0.2%) i/s -      7.095M in   5.055611s

Comparison:
String#dup["string"]=:  1403314.6 i/s
          String#sub:  1121672.8 i/s - 1.25x  (± 0.00) slower
         String#gsub:   865138.8 i/s - 1.62x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    75.183k i/100ms
           String#tr   268.799k i/100ms
Calculating -------------------------------------
         String#gsub    752.599k (± 0.1%) i/s -      3.834M in   5.094795s
           String#tr      2.685M (± 0.2%) i/s -     13.440M in   5.005574s

Comparison:
           String#tr:  2685005.6 i/s
         String#gsub:   752599.2 i/s - 3.57x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   957.462k i/100ms
         With Freeze     1.586M i/100ms
Calculating -------------------------------------
      Without Freeze      9.576M (± 0.1%) i/s -     48.831M in   5.099535s
         With Freeze     15.873M (± 0.1%) i/s -     80.879M in   5.095422s

Comparison:
         With Freeze: 15872924.7 i/s
      Without Freeze:  9575501.1 i/s - 1.66x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.600k i/100ms
      String#squeeze   129.904k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     25.900k (± 0.3%) i/s -    130.000k in   5.019415s
      String#squeeze      1.283M (± 0.3%) i/s -      6.495M in   5.061521s

Comparison:
      String#squeeze:  1283266.4 i/s
 String#gsub/regex+/:    25899.7 i/s - 49.55x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
           String#=~   216.892k i/100ms
       String#match?   588.236k i/100ms
  String#start_with?   670.671k i/100ms
Calculating -------------------------------------
           String#=~      2.172M (± 0.1%) i/s -     11.061M in   5.091960s
       String#match?      5.883M (± 0.0%) i/s -     30.000M in   5.099740s
  String#start_with?      6.730M (± 0.1%) i/s -     34.204M in   5.082662s

Comparison:
  String#start_with?:  6729591.3 i/s
       String#match?:  5882660.7 i/s - 1.14x  (± 0.00) slower
           String#=~:  2172348.1 i/s - 3.10x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   163.942k i/100ms
    String#[0, n] ==    59.056k i/100ms
   String#[RANGE] ==    54.600k i/100ms
   String#[0...n] ==    35.486k i/100ms
Calculating -------------------------------------
  String#start_with?      1.640M (± 0.1%) i/s -      8.361M in   5.097710s
    String#[0, n] ==    590.078k (± 0.3%) i/s -      2.953M in   5.004124s
   String#[RANGE] ==    548.617k (± 0.3%) i/s -      2.785M in   5.075712s
   String#[0...n] ==    353.498k (± 0.2%) i/s -      1.774M in   5.019278s

Comparison:
  String#start_with?:  1640159.3 i/s
    String#[0, n] ==:   590077.5 i/s - 2.78x  (± 0.00) slower
   String#[RANGE] ==:   548616.9 i/s - 2.99x  (± 0.00) slower
   String#[0...n] ==:   353498.5 i/s - 4.64x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   132.337k i/100ms
 String#sub!'string'    94.552k i/100ms
String#gsub!'string'    60.610k i/100ms
  String#[/regexp/]=   115.937k i/100ms
 String#sub!/regexp/    94.094k i/100ms
String#gsub!/regexp/    49.112k i/100ms
Calculating -------------------------------------
  String#['string']=      1.315M (± 0.4%) i/s -      6.617M in   5.030524s
 String#sub!'string'    973.452k (± 1.8%) i/s -      4.917M in   5.052497s
String#gsub!'string'    613.266k (± 0.2%) i/s -      3.091M in   5.040425s
  String#[/regexp/]=      1.162M (± 0.1%) i/s -      5.913M in   5.090240s
 String#sub!/regexp/    931.638k (± 0.2%) i/s -      4.705M in   5.049955s
String#gsub!/regexp/    495.544k (± 0.3%) i/s -      2.505M in   5.054522s

Comparison:
  String#['string']=:  1315362.6 i/s
  String#[/regexp/]=:  1161594.2 i/s - 1.13x  (± 0.00) slower
 String#sub!'string':   973451.9 i/s - 1.35x  (± 0.00) slower
 String#sub!/regexp/:   931637.9 i/s - 1.41x  (± 0.00) slower
String#gsub!'string':   613265.8 i/s - 2.14x  (± 0.00) slower
String#gsub!/regexp/:   495544.3 i/s - 2.65x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
          String#sub   117.518k i/100ms
        String#chomp   409.372k i/100ms
String#delete_suffix   443.866k i/100ms
Calculating -------------------------------------
          String#sub      1.176M (± 0.6%) i/s -      5.993M in   5.098272s
        String#chomp      4.092M (± 0.1%) i/s -     20.469M in   5.001740s
String#delete_suffix      4.438M (± 0.1%) i/s -     22.193M in   5.001084s

Comparison:
String#delete_suffix:  4437700.2 i/s
        String#chomp:  4092298.4 i/s - 1.08x  (± 0.00) slower
          String#sub:  1175615.8 i/s - 3.77x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   459.923k i/100ms
          String#sub   119.657k i/100ms
Calculating -------------------------------------
String#delete_prefix      4.601M (± 0.1%) i/s -     23.456M in   5.098254s
          String#sub      1.206M (± 0.5%) i/s -      6.103M in   5.062107s

Comparison:
String#delete_prefix:  4600808.9 i/s
          String#sub:  1205563.6 i/s - 3.82x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   446.943k i/100ms
    String#unpack[0]   344.523k i/100ms
Calculating -------------------------------------
      String#unpack1      4.468M (± 0.1%) i/s -     22.347M in   5.001918s
    String#unpack[0]      3.441M (± 0.1%) i/s -     17.226M in   5.006728s

Comparison:
      String#unpack1:  4467719.3 i/s
    String#unpack[0]:  3440602.3 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    21.303k i/100ms
          Time.parse     7.296k i/100ms
Calculating -------------------------------------
        Time.iso8601    218.868k (± 1.0%) i/s -      1.108M in   5.061795s
          Time.parse     75.132k (± 0.6%) i/s -    379.392k in   5.049854s

Comparison:
        Time.iso8601:   218867.7 i/s
          Time.parse:    75132.2 i/s - 2.91x  (± 0.00) slower

