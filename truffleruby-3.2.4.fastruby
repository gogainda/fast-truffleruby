$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       275.210M i/100ms
Function with splat arguments
                         1.943k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.198B (± 2.7%) i/s -     16.237B in   5.080568s
Function with splat arguments
                         20.813k (± 9.6%) i/s -    104.922k in   5.099924s

Comparison:
Function with single Array argument: 3198492546.8 i/s
Function with splat arguments:    20813.5 i/s - 153674.26x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   319.774M i/100ms
Sequential Assignment
                       322.406M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.202B (± 2.4%) i/s -     16.308B in   5.096505s
Sequential Assignment
                          3.201B (± 2.2%) i/s -     16.120B in   5.039033s

Comparison:
 Parallel Assignment: 3201994519.8 i/s
Sequential Assignment: 3200723037.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   320.405M i/100ms
       attr_accessor   312.326M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.189B (± 2.7%) i/s -     16.020B in   5.027649s
       attr_accessor      3.204B (± 2.3%) i/s -     16.241B in   5.072455s

Comparison:
       attr_accessor: 3203592731.1 i/s
   getter_and_setter: 3188936164.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    12.485k i/100ms
         respond_to?   314.453M i/100ms
Calculating -------------------------------------
      begin...rescue    104.109k (± 6.8%) i/s -    524.370k in   5.069880s
         respond_to?      3.219B (± 1.5%) i/s -     16.352B in   5.081647s

Comparison:
         respond_to?: 3218555553.4 i/s
      begin...rescue:   104108.8 i/s - 30915.32x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   321.149M i/100ms
             &method    18.363M i/100ms
Calculating -------------------------------------
              normal      3.201B (± 2.0%) i/s -     16.057B in   5.018077s
             &method    182.831M (± 1.6%) i/s -    918.128M in   5.023138s

Comparison:
              normal: 3201271584.0 i/s
             &method: 182831000.8 i/s - 17.51x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       169.000  i/100ms
       define_method   251.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          4.496k (±48.8%) i/s -      7.774k in   5.001243s
       define_method     11.432k (±49.2%) i/s -     11.546k in   5.358991s

Comparison:
       define_method:    11431.7 i/s
module_eval with string:     4495.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   247.352k i/100ms
       Kernel#format   184.313k i/100ms
            String#%   184.379k i/100ms
Calculating -------------------------------------
         Float#round      2.727M (± 2.4%) i/s -     13.852M in   5.082536s
       Kernel#format      1.837M (± 2.1%) i/s -      9.216M in   5.018941s
            String#%      1.834M (± 2.4%) i/s -      9.219M in   5.030561s

Comparison:
         Float#round:  2727077.5 i/s
       Kernel#format:  1837047.8 i/s - 1.48x  (± 0.00) slower
            String#%:  1833694.4 i/s - 1.49x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   316.150M i/100ms
          OpenStruct   319.911M i/100ms
Calculating -------------------------------------
                Hash      3.203B (± 2.0%) i/s -     16.124B in   5.035380s
          OpenStruct      3.190B (± 3.2%) i/s -     15.996B in   5.020376s

Comparison:
                Hash: 3203474837.1 i/s
          OpenStruct: 3189585338.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   308.419M i/100ms
          OpenStruct     2.642k i/100ms
Calculating -------------------------------------
                Hash      3.135B (± 5.6%) i/s -     15.729B in   5.036287s
          OpenStruct     29.421k (±21.7%) i/s -    142.668k in   5.043438s

Comparison:
                Hash: 3135209705.4 i/s
          OpenStruct:    29421.1 i/s - 106563.31x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   820.480k i/100ms
  ancestors.include?   227.878k i/100ms
Calculating -------------------------------------
  less than or equal      9.647M (± 3.5%) i/s -     48.408M in   5.023403s
  ancestors.include?      2.275M (± 6.0%) i/s -     11.394M in   5.032449s

Comparison:
  less than or equal:  9647228.5 i/s
  ancestors.include?:  2274695.4 i/s - 4.24x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     32.152  (± 3.1%) i/s -    161.000  in   5.012949s
         Kernel loop     32.196  (± 3.1%) i/s -    161.000  in   5.002963s

Comparison:
         Kernel loop:       32.2 i/s
          While Loop:       32.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   322.392M i/100ms
         Array#first   322.851M i/100ms
Calculating -------------------------------------
           Array#[0]      3.187B (± 2.9%) i/s -     16.120B in   5.062354s
         Array#first      3.199B (± 2.5%) i/s -     16.143B in   5.049735s

Comparison:
         Array#first: 3198890392.5 i/s
           Array#[0]: 3187028274.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   316.636M i/100ms
          Array#last   317.176M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.192B (± 2.6%) i/s -     16.148B in   5.062237s
          Array#last      3.222B (± 1.3%) i/s -     16.176B in   5.022051s

Comparison:
          Array#last: 3221543522.5 i/s
          Array#[-1]: 3192207816.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   922.542k i/100ms
Calculating -------------------------------------
                find     13.789  (± 0.0%) i/s -     69.000  in   5.005155s
             bsearch      9.595M (± 2.3%) i/s -     47.972M in   5.002393s

Comparison:
             bsearch:  9595171.9 i/s
                find:       13.8 i/s - 695839.39x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.212  (± 0.0%) i/s -      2.000  in   9.431407s
        Array#insert      1.395  (± 0.0%) i/s -      7.000  in   5.018170s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.2 i/s - 6.58x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   321.876M i/100ms
          Array#size   314.886M i/100ms
         Array#count   322.749M i/100ms
Calculating -------------------------------------
        Array#length      3.193B (± 2.3%) i/s -     16.094B in   5.043772s
          Array#size      3.209B (± 2.3%) i/s -     16.059B in   5.007395s
         Array#count      3.214B (± 1.8%) i/s -     16.137B in   5.023565s

Comparison:
         Array#count: 3213500798.9 i/s
          Array#size: 3208951717.3 i/s - same-ish: difference falls within error
        Array#length: 3192620911.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    37.110k i/100ms
        Array#sample     3.898M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    374.140k (± 1.8%) i/s -      1.893M in   5.060320s
        Array#sample     38.931M (± 0.1%) i/s -    194.882M in   5.005854s

Comparison:
        Array#sample: 38930902.2 i/s
 Array#shuffle.first:   374140.0 i/s - 104.05x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601     1.014k i/100ms
          Date.parse   680.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     17.133k (±32.3%) i/s -     78.078k in   5.029673s
          Date.parse      8.637k (±19.0%) i/s -     41.480k in   5.015687s

Comparison:
        Date.iso8601:    17132.8 i/s
          Date.parse:     8637.1 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   318.157k i/100ms
           Array#map     1.877M i/100ms
Calculating -------------------------------------
   Array#each + push      3.294M (± 5.7%) i/s -     16.544M in   5.040538s
           Array#map     19.601M (± 8.1%) i/s -     97.578M in   5.017798s

Comparison:
           Array#map: 19600604.3 i/s
   Array#each + push:  3293629.1 i/s - 5.95x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    12.824M i/100ms
               #each    35.516M i/100ms
Calculating -------------------------------------
            For loop    128.645M (± 2.0%) i/s -    654.048M in   5.086473s
               #each    356.002M (± 1.6%) i/s -      1.811B in   5.089335s

Comparison:
               #each: 356001928.9 i/s
            For loop: 128644852.4 i/s - 2.77x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.408M i/100ms
     each_with_index     2.761M i/100ms
Calculating -------------------------------------
          While Loop     14.290M (± 1.6%) i/s -     71.821M in   5.027273s
     each_with_index     23.515M (± 2.8%) i/s -    118.717M in   5.052051s

Comparison:
     each_with_index: 23514538.4 i/s
          While Loop: 14290184.4 i/s - 1.65x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   306.534k i/100ms
      inject to_proc   310.202k i/100ms
        inject block   313.328k i/100ms
Calculating -------------------------------------
       inject symbol      3.109M (± 2.3%) i/s -     15.633M in   5.031474s
      inject to_proc      3.100M (± 2.7%) i/s -     15.510M in   5.006951s
        inject block      3.110M (± 4.0%) i/s -     15.666M in   5.049224s

Comparison:
        inject block:  3109760.0 i/s
       inject symbol:  3108965.2 i/s - same-ish: difference falls within error
      inject to_proc:  3100145.8 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    22.126k i/100ms
   Array#map.flatten    26.308k i/100ms
      Array#flat_map    57.873k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    263.776k (± 7.7%) i/s -      1.328M in   5.070695s
   Array#map.flatten    265.363k (± 7.0%) i/s -      1.342M in   5.086412s
      Array#flat_map    574.084k (± 4.0%) i/s -      2.894M in   5.049276s

Comparison:
      Array#flat_map:   574083.8 i/s
   Array#map.flatten:   265363.4 i/s - 2.16x  (± 0.00) slower
Array#map.flatten(1):   263776.2 i/s - 2.18x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   308.223k i/100ms
  Array#reverse_each     2.357M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.452M (± 6.1%) i/s -     17.260M in   5.030954s
  Array#reverse_each     23.574M (± 3.6%) i/s -    117.835M in   5.004257s

Comparison:
  Array#reverse_each: 23573522.5 i/s
  Array#reverse.each:  3451589.6 i/s - 6.83x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       847.922k i/100ms
   Enumerable#detect     4.687M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.590M (± 6.9%) i/s -    211.133M in  20.061618s
   Enumerable#detect     46.545M (± 2.6%) i/s -    932.799M in  20.056307s

Comparison:
   Enumerable#detect: 46545192.0 i/s
Enumerable#select.first: 10589610.7 i/s - 4.40x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       346.062k i/100ms
Enumerable#select.last
                       551.568k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.522M (± 3.7%) i/s -     17.649M in   5.018475s
Enumerable#select.last
                          5.406M (± 5.7%) i/s -     27.027M in   5.021985s

Comparison:
Enumerable#select.last:  5405907.0 i/s
Enumerable#reverse.detect:  3522134.6 i/s - 1.53x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.291k i/100ms
  Enumerable#sort_by     3.833k i/100ms
     Enumerable#sort     3.175k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         29.343k (±34.6%) i/s -    128.296k in   5.012318s
  Enumerable#sort_by     34.174k (±34.8%) i/s -    130.322k in   5.034927s
     Enumerable#sort     49.136k (± 6.6%) i/s -    244.475k in   5.003460s

Comparison:
     Enumerable#sort:    49136.4 i/s
  Enumerable#sort_by:    34174.3 i/s - same-ish: difference falls within error
Enumerable#sort_by (Symbol#to_proc):    29343.5 i/s - 1.67x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   926.207k i/100ms
Enumerable#sort_by...first
                         9.370k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      9.330M (± 2.4%) i/s -     47.237M in   5.066085s
Enumerable#sort_by...first
                        107.028k (± 5.9%) i/s -    534.090k in   5.015511s

Comparison:
   Enumerable#min_by:  9329521.1 i/s
Enumerable#sort_by...first:   107028.4 i/s - 87.17x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   651.993k i/100ms
            Hash#dup   754.486k i/100ms
Calculating -------------------------------------
              Hash[]      7.529M (±10.5%) i/s -     37.164M in   5.001168s
            Hash#dup      7.504M (±11.7%) i/s -     36.970M in   5.005177s

Comparison:
              Hash[]:  7528587.4 i/s
            Hash#dup:  7504258.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   315.284M i/100ms
  Hash#fetch, symbol   317.597M i/100ms
     Hash#[], string    20.206M i/100ms
  Hash#fetch, string    17.856M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.225B (± 1.3%) i/s -     16.395B in   5.083929s
  Hash#fetch, symbol      3.223B (± 1.5%) i/s -     16.197B in   5.026519s
     Hash#[], string    201.221M (± 1.4%) i/s -      1.010B in   5.021892s
  Hash#fetch, string    178.808M (± 1.9%) i/s -    910.672M in   5.095120s

Comparison:
     Hash#[], symbol: 3225422768.1 i/s
  Hash#fetch, symbol: 3223216845.8 i/s - same-ish: difference falls within error
     Hash#[], string: 201220792.9 i/s - 16.03x  (± 0.00) slower
  Hash#fetch, string: 178807576.4 i/s - 18.04x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    92.198M i/100ms
             Hash#[]    92.289M i/100ms
          Hash#[] ||    91.445M i/100ms
          Hash#[] &&    92.420M i/100ms
          Hash#fetch    92.294M i/100ms
 Hash#fetch fallback    91.456M i/100ms
Calculating -------------------------------------
            Hash#dig    918.738M (± 1.8%) i/s -      4.610B in   5.019492s
             Hash#[]    923.369M (± 0.2%) i/s -      4.707B in   5.097393s
          Hash#[] ||    919.776M (± 1.4%) i/s -      4.664B in   5.071564s
          Hash#[] &&    918.643M (± 1.9%) i/s -      4.621B in   5.032278s
          Hash#fetch    920.657M (± 1.5%) i/s -      4.615B in   5.013633s
 Hash#fetch fallback    919.756M (± 1.7%) i/s -      4.664B in   5.072726s

Comparison:
             Hash#[]: 923369069.4 i/s
          Hash#fetch: 920657183.3 i/s - same-ish: difference falls within error
          Hash#[] ||: 919775756.9 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 919756437.1 i/s - same-ish: difference falls within error
            Hash#dig: 918737719.1 i/s - same-ish: difference falls within error
          Hash#[] &&: 918642546.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   320.927M i/100ms
  Hash#fetch + block   317.273M i/100ms
    Hash#fetch + arg   323.390M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.219B (± 1.2%) i/s -     16.367B in   5.085052s
  Hash#fetch + block      3.212B (± 2.2%) i/s -     16.181B in   5.039770s
    Hash#fetch + arg      3.133B (± 6.2%) i/s -     15.846B in   5.085869s

Comparison:
  Hash#fetch + const: 3219219197.7 i/s
  Hash#fetch + block: 3212410635.8 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 3132780085.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    30.946k i/100ms
         sort + to_h    15.512k i/100ms
Calculating -------------------------------------
      sort_by + to_h    563.651k (± 7.6%) i/s -      2.816M in   5.029343s
         sort + to_h    221.348k (± 6.9%) i/s -      1.101M in   5.000590s

Comparison:
      sort_by + to_h:   563650.7 i/s
         sort + to_h:   221347.6 i/s - 2.55x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   185.223k i/100ms
       Hash#each_key   221.227k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.166M (±10.6%) i/s -     10.743M in   5.072976s
       Hash#each_key      2.322M (± 3.6%) i/s -     11.725M in   5.056925s

Comparison:
       Hash#each_key:  2321734.0 i/s
      Hash#keys.each:  2166306.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   294.000  i/100ms
           Hash#key?    15.585M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      2.879k (±10.9%) i/s -     14.406k in   5.087449s
           Hash#key?    156.091M (± 1.5%) i/s -    794.841M in   5.093426s

Comparison:
           Hash#key?: 156091030.4 i/s
  Hash#keys.include?:     2879.0 i/s - 54216.30x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    55.530k i/100ms
            Hash#[]=    58.902k i/100ms
Calculating -------------------------------------
         Hash#merge!    599.921k (± 7.5%) i/s -      2.999M in   5.037327s
            Hash#[]=    631.328k (± 4.3%) i/s -      3.181M in   5.047901s

Comparison:
            Hash#[]=:   631327.6 i/s
         Hash#merge!:   599921.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        29.112k i/100ms
      Hash#merge({})    19.012k i/100ms
 Hash#dup#merge!({})    29.198k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        395.514k (±11.1%) i/s -      1.951M in   5.004226s
      Hash#merge({})    194.937k (± 9.1%) i/s -    969.612k in   5.022259s
 Hash#dup#merge!({})    315.966k (± 9.4%) i/s -      1.577M in   5.053554s

Comparison:
{}#merge!(Hash) do end:   395513.9 i/s
 Hash#dup#merge!({}):   315965.9 i/s - 1.25x  (± 0.00) slower
      Hash#merge({}):   194937.3 i/s - 2.03x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   317.619M i/100ms
          Hash#merge   310.098M i/100ms
Calculating -------------------------------------
        Hash#**other      3.183B (± 2.8%) i/s -     16.199B in   5.094029s
          Hash#merge      3.205B (± 2.4%) i/s -     16.125B in   5.033712s

Comparison:
          Hash#merge: 3205370842.4 i/s
        Hash#**other: 3182577752.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   688.000  i/100ms
         Hash#merge!    58.035k i/100ms
Calculating -------------------------------------
          Hash#merge     12.625k (±14.8%) i/s -     61.920k in   5.043648s
         Hash#merge!    609.557k (± 7.3%) i/s -      3.076M in   5.077084s

Comparison:
         Hash#merge!:   609556.7 i/s
          Hash#merge:    12625.1 i/s - 48.28x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.638M i/100ms
Array#each               1.412M i/100ms
Array#each_w/_object     1.445M i/100ms
Hash#select-include      2.466M i/100ms
Calculating -------------------------------------
Hash#native-slice        18.450M (± 6.6%) i/s -     91.729M in   5.003641s
Array#each               14.738M (± 6.2%) i/s -     73.446M in   5.012787s
Array#each_w/_object     14.659M (± 7.4%) i/s -     73.681M in   5.066518s
Hash#select-include      24.093M (± 6.5%) i/s -    120.857M in   5.043438s

Comparison:
Hash#select-include : 24093086.4 i/s
Hash#native-slice   : 18449538.8 i/s - 1.31x  (± 0.00) slower
Array#each          : 14737711.0 i/s - 1.63x  (± 0.00) slower
Array#each_w/_object: 14658907.1 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   259.000  i/100ms
         Hash#value?   677.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      3.046k (±13.4%) i/s -     15.022k in   5.043196s
         Hash#value?      6.916k (± 0.3%) i/s -     35.204k in   5.090524s

Comparison:
         Hash#value?:     6915.7 i/s
Hash#values.include?:     3045.7 i/s - 2.27x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   315.935M i/100ms
                send   316.971M i/100ms
      method_missing   323.175M i/100ms
Calculating -------------------------------------
                call      3.213B (± 2.2%) i/s -     16.113B in   5.018060s
                send      3.230B (± 0.3%) i/s -     16.166B in   5.004568s
      method_missing      3.177B (± 2.7%) i/s -     16.159B in   5.089374s

Comparison:
                send: 3230170959.6 i/s
                call: 3212648531.7 i/s - same-ish: difference falls within error
      method_missing: 3177401474.0 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    62.090k i/100ms
      Symbol#to_proc    70.039k i/100ms
Calculating -------------------------------------
               Block    743.155k (±14.8%) i/s -      3.663M in   5.053021s
      Symbol#to_proc    794.287k (±10.7%) i/s -      3.992M in   5.105258s

Comparison:
      Symbol#to_proc:   794287.0 i/s
               Block:   743155.3 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   310.666M i/100ms
       block + yield   318.221M i/100ms
        unused block   322.255M i/100ms
               yield   321.810M i/100ms
Calculating -------------------------------------
          block.call      3.229B (± 0.4%) i/s -     16.155B in   5.003129s
       block + yield      3.202B (± 3.1%) i/s -     16.229B in   5.073899s
        unused block      3.200B (± 2.8%) i/s -     16.113B in   5.040258s
               yield      3.211B (± 2.2%) i/s -     16.091B in   5.014393s

Comparison:
          block.call: 3228946790.6 i/s
               yield: 3210534746.6 i/s - same-ish: difference falls within error
       block + yield: 3202120001.7 i/s - same-ish: difference falls within error
        unused block: 3199509559.1 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     5.334k i/100ms
      range#include?   167.000  i/100ms
       range#member?   232.000  i/100ms
       plain compare     7.606k i/100ms
Calculating -------------------------------------
        range#cover?     56.844k (±26.8%) i/s -    256.032k in   5.062633s
      range#include?      2.162k (±29.7%) i/s -      9.686k in   5.171004s
       range#member?      2.195k (±27.8%) i/s -      9.976k in   5.077515s
       plain compare     89.719k (±20.2%) i/s -    418.330k in   5.004977s

Comparison:
       plain compare:    89718.7 i/s
        range#cover?:    56843.7 i/s - same-ish: difference falls within error
       range#member?:     2195.4 i/s - 40.87x  (± 0.00) slower
      range#include?:     2162.3 i/s - 41.49x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    34.950M i/100ms
           String#=~    31.481M i/100ms
          Regexp#===    31.482M i/100ms
        String#match    31.985M i/100ms
Calculating -------------------------------------
       String#match?    354.886M (± 0.3%) i/s -      1.782B in   5.022663s
           String#=~    315.679M (± 0.6%) i/s -      1.606B in   5.086183s
          Regexp#===    316.397M (± 0.9%) i/s -      1.606B in   5.075049s
        String#match    319.459M (± 2.5%) i/s -      1.599B in   5.009599s

Comparison:
       String#match?: 354885781.5 i/s
        String#match: 319458690.2 i/s - 1.11x  (± 0.00) slower
          Regexp#===: 316397092.9 i/s - 1.12x  (± 0.00) slower
           String#=~: 315679390.7 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.767M i/100ms
      String#casecmp     4.947M i/100ms
Calculating -------------------------------------
String#downcase + ==     30.107M (± 5.4%) i/s -    152.206M in   5.070447s
      String#casecmp     50.045M (± 2.4%) i/s -    252.320M in   5.044986s

Comparison:
      String#casecmp: 50045411.5 i/s
String#downcase + ==: 30106928.4 i/s - 1.66x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     8.812M i/100ms
       String#concat    10.440M i/100ms
       String#append    10.665M i/100ms
         "foo" "bar"   321.872M i/100ms
  "#{'foo'}#{'bar'}"    10.380M i/100ms
Calculating -------------------------------------
            String#+    104.064M (± 6.0%) i/s -    519.897M in   5.021531s
       String#concat    103.920M (± 6.0%) i/s -    521.994M in   5.050476s
       String#append    103.357M (± 6.1%) i/s -    522.595M in   5.083691s
         "foo" "bar"      3.202B (± 2.6%) i/s -     16.094B in   5.029924s
  "#{'foo'}#{'bar'}"    103.436M (± 6.6%) i/s -    519.016M in   5.048915s

Comparison:
         "foo" "bar": 3201963723.7 i/s
            String#+: 104063842.6 i/s - 30.77x  (± 0.00) slower
       String#concat: 103920255.5 i/s - 30.81x  (± 0.00) slower
  "#{'foo'}#{'bar'}": 103435700.3 i/s - 30.96x  (± 0.00) slower
       String#append: 103356725.2 i/s - 30.98x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   320.851M i/100ms
          String#dup   316.614M i/100ms
Calculating -------------------------------------
           String#+@      3.198B (± 2.1%) i/s -     16.043B in   5.019462s
          String#dup      3.218B (± 1.1%) i/s -     16.147B in   5.019067s

Comparison:
          String#dup: 3217615731.3 i/s
           String#+@: 3197572164.2 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.489M i/100ms
       String#match?     1.769M i/100ms
    String#end_with?    11.041M i/100ms
Calculating -------------------------------------
           String#=~     15.175M (± 2.7%) i/s -     75.933M in   5.007607s
       String#match?     17.649M (± 2.1%) i/s -     88.455M in   5.014217s
    String#end_with?    110.156M (± 2.8%) i/s -    552.032M in   5.015465s

Comparison:
    String#end_with?: 110156394.4 i/s
       String#match?: 17649069.4 i/s - 6.24x  (± 0.00) slower
           String#=~: 15175200.3 i/s - 7.26x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   440.988k i/100ms
          String#sub   988.585k i/100ms
String#dup["string"]=
                        10.326M i/100ms
Calculating -------------------------------------
         String#gsub      8.844M (±10.6%) i/s -     43.658M in   5.019667s
          String#sub     10.255M (± 9.8%) i/s -     51.406M in   5.071767s
String#dup["string"]=
                        103.984M (± 1.2%) i/s -    526.640M in   5.065462s

Comparison:
String#dup["string"]=: 103983713.1 i/s
          String#sub: 10255077.9 i/s - 10.14x  (± 0.00) slower
         String#gsub:  8843655.9 i/s - 11.76x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   356.068k i/100ms
           String#tr   175.835k i/100ms
Calculating -------------------------------------
         String#gsub      4.374M (± 5.6%) i/s -     22.076M in   5.063545s
           String#tr      1.771M (± 3.2%) i/s -      8.968M in   5.069498s

Comparison:
         String#gsub:  4373824.6 i/s
           String#tr:  1770974.2 i/s - 2.47x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   319.949M i/100ms
         With Freeze   322.509M i/100ms
Calculating -------------------------------------
      Without Freeze      3.190B (± 2.6%) i/s -     15.997B in   5.018547s
         With Freeze      3.212B (± 1.9%) i/s -     16.125B in   5.022087s

Comparison:
         With Freeze: 3212097450.3 i/s
      Without Freeze: 3189912399.7 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/    12.044k i/100ms
      String#squeeze    86.044k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    164.965k (± 7.9%) i/s -    818.992k in   5.004742s
      String#squeeze    877.033k (± 4.7%) i/s -      4.388M in   5.015989s

Comparison:
      String#squeeze:   877032.5 i/s
 String#gsub/regex+/:   164964.7 i/s - 5.32x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~    14.272M i/100ms
       String#match?    14.054M i/100ms
  String#start_with?    12.857M i/100ms
Calculating -------------------------------------
           String#=~    140.144M (± 8.1%) i/s -    699.333M in   5.038825s
       String#match?    139.038M (± 3.1%) i/s -    702.680M in   5.059091s
  String#start_with?    128.256M (± 2.1%) i/s -    642.865M in   5.014685s

Comparison:
           String#=~: 140143666.5 i/s
       String#match?: 139038233.4 i/s - same-ish: difference falls within error
  String#start_with?: 128256044.4 i/s - same-ish: difference falls within error

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    91.695k i/100ms
    String#[0, n] ==   245.179k i/100ms
   String#[RANGE] ==   429.531k i/100ms
   String#[0...n] ==   269.983k i/100ms
Calculating -------------------------------------
  String#start_with?      6.749M (± 4.3%) i/s -     33.652M in   5.001956s
    String#[0, n] ==      2.722M (± 4.5%) i/s -     13.730M in   5.054750s
   String#[RANGE] ==      4.312M (± 4.0%) i/s -     21.906M in   5.088630s
   String#[0...n] ==      2.712M (± 5.0%) i/s -     13.769M in   5.090706s

Comparison:
  String#start_with?:  6749331.4 i/s
   String#[RANGE] ==:  4312216.0 i/s - 1.57x  (± 0.00) slower
    String#[0, n] ==:  2722138.7 i/s - 2.48x  (± 0.00) slower
   String#[0...n] ==:  2712012.6 i/s - 2.49x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    10.342M i/100ms
 String#sub!'string'     1.021M i/100ms
String#gsub!'string'   930.703k i/100ms
  String#[/regexp/]=    10.103M i/100ms
 String#sub!/regexp/     3.165M i/100ms
String#gsub!/regexp/   981.533k i/100ms
Calculating -------------------------------------
  String#['string']=    103.928M (± 1.5%) i/s -    527.440M in   5.076267s
 String#sub!'string'     10.905M (± 9.4%) i/s -     54.135M in   5.015353s
String#gsub!'string'      9.260M (± 8.4%) i/s -     46.535M in   5.069997s
  String#[/regexp/]=    100.546M (± 2.1%) i/s -    505.165M in   5.026572s
 String#sub!/regexp/     31.928M (± 4.7%) i/s -    161.433M in   5.069859s
String#gsub!/regexp/      9.582M (± 9.5%) i/s -     48.095M in   5.082819s

Comparison:
  String#['string']=: 103927682.9 i/s
  String#[/regexp/]=: 100546048.0 i/s - same-ish: difference falls within error
 String#sub!/regexp/: 31927813.1 i/s - 3.26x  (± 0.00) slower
 String#sub!'string': 10905047.7 i/s - 9.53x  (± 0.00) slower
String#gsub!/regexp/:  9581684.2 i/s - 10.85x  (± 0.00) slower
String#gsub!'string':  9260269.1 i/s - 11.22x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     8.284M i/100ms
        String#chomp     5.763M i/100ms
String#delete_suffix    14.285M i/100ms
Calculating -------------------------------------
          String#sub     87.848M (± 3.3%) i/s -    439.057M in   5.004460s
        String#chomp     57.893M (± 2.6%) i/s -    293.930M in   5.080710s
String#delete_suffix    148.697M (±10.5%) i/s -    742.809M in   5.063077s

Comparison:
String#delete_suffix: 148697260.9 i/s
          String#sub: 87847772.9 i/s - 1.69x  (± 0.00) slower
        String#chomp: 57893045.8 i/s - 2.57x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   322.249M i/100ms
          String#sub   127.568M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.157B (± 3.7%) i/s -     15.790B in   5.008385s
          String#sub      1.282B (± 2.1%) i/s -      6.506B in   5.075686s

Comparison:
String#delete_prefix: 3157316470.4 i/s
          String#sub: 1282372072.7 i/s - 2.46x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.484M i/100ms
    String#unpack[0]     1.912M i/100ms
Calculating -------------------------------------
      String#unpack1     20.342M (± 4.1%) i/s -    102.388M in   5.042407s
    String#unpack[0]     20.509M (± 2.9%) i/s -    103.249M in   5.039137s

Comparison:
    String#unpack[0]: 20508944.6 i/s
      String#unpack1: 20341632.7 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.2.0-dev-9753e26d, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    48.952k i/100ms
          Time.parse   401.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    910.023k (±10.1%) i/s -      4.504M in   5.025166s
          Time.parse      6.596k (±13.3%) i/s -     32.481k in   5.069384s

Comparison:
        Time.iso8601:   910023.4 i/s
          Time.parse:     6596.1 i/s - 137.96x  (± 0.00) slower

