$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       200.911M i/100ms
Function with splat arguments
                         1.926k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.033B (± 3.4%) i/s -     15.269B in   5.039967s
Function with splat arguments
                         20.559k (±11.0%) i/s -    102.078k in   5.050933s

Comparison:
Function with single Array argument: 3033493916.4 i/s
Function with splat arguments:    20559.5 i/s - 147547.37x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   304.793M i/100ms
Sequential Assignment
                       300.411M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.042B (± 2.4%) i/s -     15.240B in   5.012722s
Sequential Assignment
                          3.033B (± 4.6%) i/s -     15.321B in   5.064230s

Comparison:
 Parallel Assignment: 3042011439.1 i/s
Sequential Assignment: 3032899256.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   321.364M i/100ms
       attr_accessor   294.611M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.052B (± 2.3%) i/s -     15.425B in   5.057414s
       attr_accessor      3.045B (± 2.7%) i/s -     15.320B in   5.035803s

Comparison:
   getter_and_setter: 3051695299.2 i/s
       attr_accessor: 3044508549.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    10.626k i/100ms
         respond_to?   306.010M i/100ms
Calculating -------------------------------------
      begin...rescue    101.548k (± 6.1%) i/s -    510.048k in   5.049839s
         respond_to?      3.068B (± 1.4%) i/s -     15.606B in   5.088526s

Comparison:
         respond_to?: 3067634944.0 i/s
      begin...rescue:   101547.5 i/s - 30208.86x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   302.480M i/100ms
             &method    18.291M i/100ms
Calculating -------------------------------------
              normal      2.995B (± 8.5%) i/s -     14.822B in   5.003025s
             &method    182.739M (± 2.1%) i/s -    914.557M in   5.007114s

Comparison:
              normal: 2994682705.4 i/s
             &method: 182739072.5 i/s - 16.39x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       194.000  i/100ms
       define_method   150.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          4.155k (±55.8%) i/s -      7.566k in   5.109129s
       define_method     12.840k (±34.2%) i/s -     11.550k in   5.014055s

Comparison:
       define_method:    12839.6 i/s
module_eval with string:     4155.2 i/s - 3.09x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   111.883k i/100ms
       Kernel#format   103.061k i/100ms
            String#%   102.081k i/100ms
Calculating -------------------------------------
         Float#round      1.250M (± 3.6%) i/s -      6.265M in   5.020719s
       Kernel#format      1.007M (± 5.8%) i/s -      5.153M in   5.144664s
            String#%      1.016M (± 2.2%) i/s -      5.104M in   5.027610s

Comparison:
         Float#round:  1249694.5 i/s
            String#%:  1015703.2 i/s - 1.23x  (± 0.00) slower
       Kernel#format:  1006596.6 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   308.099M i/100ms
          OpenStruct   307.011M i/100ms
Calculating -------------------------------------
                Hash      3.077B (± 2.5%) i/s -     15.405B in   5.009212s
          OpenStruct      3.110B (± 2.6%) i/s -     15.658B in   5.037838s

Comparison:
          OpenStruct: 3110191091.0 i/s
                Hash: 3077350840.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   303.747M i/100ms
          OpenStruct     4.796k i/100ms
Calculating -------------------------------------
                Hash      3.019B (± 6.3%) i/s -     15.187B in   5.056410s
          OpenStruct     40.306k (±27.0%) i/s -    187.044k in   5.015032s

Comparison:
                Hash: 3019021140.6 i/s
          OpenStruct:    40305.7 i/s - 74903.09x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal     1.056M i/100ms
  ancestors.include?   220.940k i/100ms
Calculating -------------------------------------
  less than or equal     11.121M (± 6.7%) i/s -     55.944M in   5.053123s
  ancestors.include?      2.271M (± 7.6%) i/s -     11.489M in   5.102642s

Comparison:
  less than or equal: 11120790.1 i/s
  ancestors.include?:  2271220.1 i/s - 4.90x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     31.101  (± 3.2%) i/s -    156.000  in   5.024221s
         Kernel loop     31.001  (± 3.2%) i/s -    155.000  in   5.006715s

Comparison:
          While Loop:       31.1 i/s
         Kernel loop:       31.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   304.587M i/100ms
         Array#first   304.954M i/100ms
Calculating -------------------------------------
           Array#[0]      3.050B (± 1.9%) i/s -     15.534B in   5.094923s
         Array#first      3.053B (± 2.3%) i/s -     15.553B in   5.097753s

Comparison:
         Array#first: 3052526790.0 i/s
           Array#[0]: 3050066167.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   305.049M i/100ms
          Array#last   316.466M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.047B (± 2.3%) i/s -     15.252B in   5.007999s
          Array#last      3.053B (± 1.8%) i/s -     15.507B in   5.081012s

Comparison:
          Array#last: 3052987779.6 i/s
          Array#[-1]: 3047297255.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   935.178k i/100ms
Calculating -------------------------------------
                find     13.705  (± 0.0%) i/s -     69.000  in   5.039720s
             bsearch      9.502M (± 2.7%) i/s -     47.694M in   5.023279s

Comparison:
             bsearch:  9501811.6 i/s
                find:       13.7 i/s - 693328.61x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.213  (± 0.0%) i/s -      2.000  in   9.380415s
        Array#insert      1.396  (± 0.0%) i/s -      7.000  in   5.015930s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.2 i/s - 6.55x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   303.117M i/100ms
          Array#size   300.015M i/100ms
         Array#count   305.320M i/100ms
Calculating -------------------------------------
        Array#length      3.043B (± 2.7%) i/s -     15.459B in   5.083320s
          Array#size      3.056B (± 2.1%) i/s -     15.301B in   5.009316s
         Array#count      3.047B (± 2.0%) i/s -     15.266B in   5.012366s

Comparison:
          Array#size: 3055912313.4 i/s
         Array#count: 3046883438.2 i/s - same-ish: difference falls within error
        Array#length: 3043480102.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    36.696k i/100ms
        Array#sample     3.832M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    367.404k (± 2.1%) i/s -      1.871M in   5.096144s
        Array#sample     38.102M (± 1.1%) i/s -    191.623M in   5.029955s

Comparison:
        Array#sample: 38101532.5 i/s
 Array#shuffle.first:   367403.8 i/s - 103.70x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601     1.725k i/100ms
          Date.parse   644.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     16.880k (±22.8%) i/s -     81.075k in   5.056929s
          Date.parse      8.169k (±17.1%) i/s -     39.928k in   5.064274s

Comparison:
        Date.iso8601:    16880.4 i/s
          Date.parse:     8169.3 i/s - 2.07x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   260.389k i/100ms
           Array#map     1.813M i/100ms
Calculating -------------------------------------
   Array#each + push      3.247M (± 5.4%) i/s -     16.405M in   5.067004s
           Array#map     19.239M (± 8.8%) i/s -     96.071M in   5.042178s

Comparison:
           Array#map: 19238853.0 i/s
   Array#each + push:  3247309.0 i/s - 5.92x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    12.912M i/100ms
               #each    35.649M i/100ms
Calculating -------------------------------------
            For loop    129.020M (± 1.3%) i/s -    645.604M in   5.004846s
               #each    354.012M (± 1.7%) i/s -      1.782B in   5.036557s

Comparison:
               #each: 354011552.8 i/s
            For loop: 129020042.4 i/s - 2.74x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.535M i/100ms
     each_with_index     2.766M i/100ms
Calculating -------------------------------------
          While Loop     15.316M (± 1.9%) i/s -     76.745M in   5.012667s
     each_with_index     23.357M (± 3.4%) i/s -    118.920M in   5.096445s

Comparison:
     each_with_index: 23357480.4 i/s
          While Loop: 15315757.2 i/s - 1.53x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   311.291k i/100ms
      inject to_proc   310.268k i/100ms
        inject block   312.427k i/100ms
Calculating -------------------------------------
       inject symbol      3.100M (± 3.2%) i/s -     15.565M in   5.026160s
      inject to_proc      3.099M (± 2.7%) i/s -     15.824M in   5.109540s
        inject block      3.090M (± 4.6%) i/s -     15.621M in   5.068575s

Comparison:
       inject symbol:  3100272.0 i/s
      inject to_proc:  3099340.6 i/s - same-ish: difference falls within error
        inject block:  3090303.4 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    23.194k i/100ms
   Array#map.flatten    25.603k i/100ms
      Array#flat_map    58.196k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    262.075k (± 8.5%) i/s -      1.299M in   5.003188s
   Array#map.flatten    262.586k (± 6.9%) i/s -      1.306M in   5.003421s
      Array#flat_map    578.608k (± 5.8%) i/s -      2.910M in   5.053936s

Comparison:
      Array#flat_map:   578607.7 i/s
   Array#map.flatten:   262586.5 i/s - 2.20x  (± 0.00) slower
Array#map.flatten(1):   262074.8 i/s - 2.21x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   172.103k i/100ms
  Array#reverse_each     2.360M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.480M (± 7.0%) i/s -     17.382M in   5.037039s
  Array#reverse_each     23.679M (± 4.1%) i/s -    120.368M in   5.092523s

Comparison:
  Array#reverse_each: 23678884.8 i/s
  Array#reverse.each:  3479534.2 i/s - 6.81x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       967.920k i/100ms
   Enumerable#detect     4.674M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.378M (± 8.2%) i/s -    206.167M in  20.053177s
   Enumerable#detect     46.780M (± 1.4%) i/s -    939.417M in  20.086386s

Comparison:
   Enumerable#detect: 46780048.6 i/s
Enumerable#select.first: 10378188.0 i/s - 4.51x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       344.086k i/100ms
Enumerable#select.last
                       529.569k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.415M (± 5.9%) i/s -     17.204M in   5.062556s
Enumerable#select.last
                          5.400M (± 6.2%) i/s -     27.008M in   5.029643s

Comparison:
Enumerable#select.last:  5399925.4 i/s
Enumerable#reverse.detect:  3415075.9 i/s - 1.58x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.994k i/100ms
  Enumerable#sort_by     4.325k i/100ms
     Enumerable#sort     5.008k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         37.909k (±20.9%) i/s -    179.730k in   5.009053s
  Enumerable#sort_by     24.101k (±27.0%) i/s -    108.125k in   5.164677s
     Enumerable#sort     36.230k (±18.7%) i/s -    180.288k in   5.111137s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    37909.3 i/s
     Enumerable#sort:    36230.0 i/s - same-ish: difference falls within error
  Enumerable#sort_by:    24100.9 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   981.289k i/100ms
Enumerable#sort_by...first
                         8.850k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      9.795M (± 2.8%) i/s -     49.064M in   5.012997s
Enumerable#sort_by...first
                        107.673k (± 6.0%) i/s -    539.850k in   5.042038s

Comparison:
   Enumerable#min_by:  9795471.7 i/s
Enumerable#sort_by...first:   107673.0 i/s - 90.97x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   628.812k i/100ms
            Hash#dup   755.242k i/100ms
Calculating -------------------------------------
              Hash[]      7.528M (±12.2%) i/s -     37.100M in   5.019652s
            Hash#dup      7.547M (±10.5%) i/s -     37.762M in   5.062513s

Comparison:
            Hash#dup:  7546670.5 i/s
              Hash[]:  7527838.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   302.754M i/100ms
  Hash#fetch, symbol   306.686M i/100ms
     Hash#[], string    20.195M i/100ms
  Hash#fetch, string    17.962M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.069B (± 2.1%) i/s -     15.440B in   5.033549s
  Hash#fetch, symbol      3.057B (± 2.5%) i/s -     15.334B in   5.018992s
     Hash#[], string    199.695M (± 2.7%) i/s -      1.010B in   5.060237s
  Hash#fetch, string    177.497M (± 3.3%) i/s -    898.101M in   5.066000s

Comparison:
     Hash#[], symbol: 3068890687.1 i/s
  Hash#fetch, symbol: 3057181503.9 i/s - same-ish: difference falls within error
     Hash#[], string: 199695155.7 i/s - 15.37x  (± 0.00) slower
  Hash#fetch, string: 177496962.1 i/s - 17.29x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    91.790M i/100ms
             Hash#[]    91.175M i/100ms
          Hash#[] ||    91.946M i/100ms
          Hash#[] &&    91.739M i/100ms
          Hash#fetch    92.377M i/100ms
 Hash#fetch fallback    92.000M i/100ms
Calculating -------------------------------------
            Hash#dig    920.459M (± 1.5%) i/s -      4.681B in   5.087037s
             Hash#[]    919.286M (± 1.6%) i/s -      4.650B in   5.059651s
          Hash#[] ||    918.302M (± 1.8%) i/s -      4.597B in   5.007966s
          Hash#[] &&    915.125M (± 2.3%) i/s -      4.587B in   5.015264s
          Hash#fetch    920.582M (± 1.5%) i/s -      4.619B in   5.018510s
 Hash#fetch fallback    920.027M (± 1.4%) i/s -      4.600B in   5.000933s

Comparison:
          Hash#fetch: 920581958.7 i/s
            Hash#dig: 920459098.6 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 920026715.7 i/s - same-ish: difference falls within error
             Hash#[]: 919285589.9 i/s - same-ish: difference falls within error
          Hash#[] ||: 918301778.6 i/s - same-ish: difference falls within error
          Hash#[] &&: 915124654.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   312.753M i/100ms
  Hash#fetch + block   311.587M i/100ms
    Hash#fetch + arg   297.799M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.058B (± 2.1%) i/s -     15.325B in   5.012988s
  Hash#fetch + block      3.059B (± 2.2%) i/s -     15.579B in   5.095908s
    Hash#fetch + arg      3.070B (± 2.8%) i/s -     15.486B in   5.048278s

Comparison:
    Hash#fetch + arg: 3070080200.0 i/s
  Hash#fetch + block: 3058695545.2 i/s - same-ish: difference falls within error
  Hash#fetch + const: 3058407897.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    38.728k i/100ms
         sort + to_h     6.045k i/100ms
Calculating -------------------------------------
      sort_by + to_h    569.418k (±10.2%) i/s -      2.827M in   5.034936s
         sort + to_h    231.556k (±11.1%) i/s -      1.136M in   5.014616s

Comparison:
      sort_by + to_h:   569417.6 i/s
         sort + to_h:   231556.0 i/s - 2.46x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   132.236k i/100ms
       Hash#each_key   208.832k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.999M (±10.7%) i/s -      9.785M in   5.031668s
       Hash#each_key      2.129M (± 2.7%) i/s -     10.650M in   5.006782s

Comparison:
       Hash#each_key:  2128773.8 i/s
      Hash#keys.each:  1999390.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   325.000  i/100ms
           Hash#key?     3.535M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      3.834k (±12.6%) i/s -     18.850k in   5.023293s
           Hash#key?     34.790M (± 1.7%) i/s -    176.768M in   5.082616s

Comparison:
           Hash#key?: 34789576.7 i/s
  Hash#keys.include?:     3834.1 i/s - 9073.65x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    50.431k i/100ms
            Hash#[]=    57.959k i/100ms
Calculating -------------------------------------
         Hash#merge!    603.783k (± 7.7%) i/s -      3.026M in   5.052424s
            Hash#[]=    618.631k (± 7.2%) i/s -      3.130M in   5.094222s

Comparison:
            Hash#[]=:   618630.8 i/s
         Hash#merge!:   603783.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        42.228k i/100ms
      Hash#merge({})    18.504k i/100ms
 Hash#dup#merge!({})    30.780k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        390.335k (±11.5%) i/s -      1.942M in   5.064818s
      Hash#merge({})    196.134k (± 8.8%) i/s -    999.216k in   5.141538s
 Hash#dup#merge!({})    316.986k (± 5.2%) i/s -      1.601M in   5.064093s

Comparison:
{}#merge!(Hash) do end:   390334.7 i/s
 Hash#dup#merge!({}):   316986.0 i/s - 1.23x  (± 0.00) slower
      Hash#merge({}):   196134.0 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   308.942M i/100ms
          Hash#merge   303.944M i/100ms
Calculating -------------------------------------
        Hash#**other      3.059B (± 2.9%) i/s -     15.447B in   5.053924s
          Hash#merge      3.028B (± 3.8%) i/s -     15.197B in   5.026795s

Comparison:
        Hash#**other: 3059167741.2 i/s
          Hash#merge: 3028497179.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   667.000  i/100ms
         Hash#merge!    57.048k i/100ms
Calculating -------------------------------------
          Hash#merge     11.786k (±14.2%) i/s -     58.029k in   5.047444s
         Hash#merge!    602.317k (± 6.1%) i/s -      3.024M in   5.046479s

Comparison:
         Hash#merge!:   602317.5 i/s
          Hash#merge:    11786.1 i/s - 51.10x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.497M i/100ms
Array#each               1.596M i/100ms
Array#each_w/_object     1.513M i/100ms
Hash#select-include      2.489M i/100ms
Calculating -------------------------------------
Hash#native-slice        18.489M (± 7.0%) i/s -     92.786M in   5.054079s
Array#each               15.480M (± 6.0%) i/s -     78.183M in   5.076139s
Array#each_w/_object     15.490M (± 6.0%) i/s -     77.155M in   5.005619s
Hash#select-include      24.214M (± 6.2%) i/s -    121.954M in   5.064343s

Comparison:
Hash#select-include : 24214115.1 i/s
Hash#native-slice   : 18489057.2 i/s - 1.31x  (± 0.00) slower
Array#each_w/_object: 15489726.7 i/s - 1.56x  (± 0.00) slower
Array#each          : 15480129.0 i/s - 1.56x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   248.000  i/100ms
         Hash#value?   680.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      3.013k (±12.0%) i/s -     15.128k in   5.142531s
         Hash#value?      6.853k (± 0.7%) i/s -     34.680k in   5.061150s

Comparison:
         Hash#value?:     6852.5 i/s
Hash#values.include?:     3012.8 i/s - 2.27x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   306.093M i/100ms
                send   303.227M i/100ms
      method_missing   306.243M i/100ms
Calculating -------------------------------------
                call      3.054B (± 2.4%) i/s -     15.305B in   5.014593s
                send      3.065B (± 1.6%) i/s -     15.465B in   5.046683s
      method_missing      3.025B (± 3.8%) i/s -     15.312B in   5.070364s

Comparison:
                send: 3065127644.8 i/s
                call: 3053791021.8 i/s - same-ish: difference falls within error
      method_missing: 3024748632.8 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    55.786k i/100ms
      Symbol#to_proc    69.656k i/100ms
Calculating -------------------------------------
               Block    775.099k (±10.4%) i/s -      3.849M in   5.046635s
      Symbol#to_proc    732.211k (±12.8%) i/s -      3.622M in   5.036036s

Comparison:
               Block:   775099.0 i/s
      Symbol#to_proc:   732210.8 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   305.227M i/100ms
       block + yield   317.920M i/100ms
        unused block   303.148M i/100ms
               yield   305.380M i/100ms
Calculating -------------------------------------
          block.call      3.065B (± 1.8%) i/s -     15.567B in   5.080566s
       block + yield      3.061B (± 1.7%) i/s -     15.578B in   5.091415s
        unused block      3.048B (± 1.5%) i/s -     15.461B in   5.074393s
               yield      3.042B (± 3.1%) i/s -     15.269B in   5.025379s

Comparison:
          block.call: 3064987431.1 i/s
       block + yield: 3060552012.5 i/s - same-ish: difference falls within error
        unused block: 3047527123.3 i/s - same-ish: difference falls within error
               yield: 3041583803.2 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     4.865k i/100ms
      range#include?   174.000  i/100ms
       range#member?   240.000  i/100ms
       plain compare     8.258k i/100ms
Calculating -------------------------------------
        range#cover?     58.309k (±25.2%) i/s -    272.440k in   5.159471s
      range#include?      2.526k (±25.7%) i/s -     11.310k in   5.014391s
       range#member?      2.308k (±28.3%) i/s -     10.320k in   5.012015s
       plain compare     83.168k (±26.5%) i/s -    379.868k in   5.118211s

Comparison:
       plain compare:    83167.8 i/s
        range#cover?:    58309.2 i/s - same-ish: difference falls within error
      range#include?:     2525.9 i/s - 32.93x  (± 0.00) slower
       range#member?:     2307.9 i/s - 36.04x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    16.891M i/100ms
           String#=~    15.449M i/100ms
          Regexp#===    15.422M i/100ms
        String#match    12.668M i/100ms
Calculating -------------------------------------
       String#match?    168.275M (± 1.1%) i/s -    844.549M in   5.019451s
           String#=~    153.773M (± 2.6%) i/s -    772.470M in   5.027418s
          Regexp#===    153.901M (± 2.0%) i/s -    771.085M in   5.012402s
        String#match    128.331M (± 0.8%) i/s -    646.044M in   5.034555s

Comparison:
       String#match?: 168274619.0 i/s
          Regexp#===: 153901230.9 i/s - 1.09x  (± 0.00) slower
           String#=~: 153773128.2 i/s - 1.09x  (± 0.00) slower
        String#match: 128331413.2 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.381M i/100ms
      String#casecmp     4.595M i/100ms
Calculating -------------------------------------
String#downcase + ==     29.973M (± 9.2%) i/s -    150.029M in   5.073810s
      String#casecmp     47.928M (± 7.1%) i/s -    238.926M in   5.017304s

Comparison:
      String#casecmp: 47927623.0 i/s
String#downcase + ==: 29972611.2 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+    10.389M i/100ms
       String#concat    10.603M i/100ms
       String#append    10.349M i/100ms
         "foo" "bar"   305.405M i/100ms
  "#{'foo'}#{'bar'}"    10.482M i/100ms
Calculating -------------------------------------
            String#+    103.448M (± 5.9%) i/s -    519.468M in   5.045338s
       String#concat    103.624M (± 6.0%) i/s -    519.560M in   5.038627s
       String#append    103.734M (± 6.2%) i/s -    517.458M in   5.014536s
         "foo" "bar"      3.076B (± 2.1%) i/s -     15.576B in   5.066131s
  "#{'foo'}#{'bar'}"    102.866M (± 6.2%) i/s -    513.616M in   5.020069s

Comparison:
         "foo" "bar": 3075818311.1 i/s
       String#append: 103734317.8 i/s - 29.65x  (± 0.00) slower
       String#concat: 103624017.4 i/s - 29.68x  (± 0.00) slower
            String#+: 103448066.7 i/s - 29.73x  (± 0.00) slower
  "#{'foo'}#{'bar'}": 102865742.4 i/s - 29.90x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   305.905M i/100ms
          String#dup   294.834M i/100ms
Calculating -------------------------------------
           String#+@      3.068B (± 1.4%) i/s -     15.601B in   5.086755s
          String#dup      3.057B (± 2.0%) i/s -     15.331B in   5.018084s

Comparison:
           String#+@: 3067639144.3 i/s
          String#dup: 3056508358.5 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.408M i/100ms
       String#match?     1.635M i/100ms
    String#end_with?    11.135M i/100ms
Calculating -------------------------------------
           String#=~     14.195M (± 2.5%) i/s -     71.788M in   5.060639s
       String#match?     16.268M (± 2.1%) i/s -     81.739M in   5.026700s
    String#end_with?    109.979M (± 2.9%) i/s -    556.735M in   5.066669s

Comparison:
    String#end_with?: 109978852.6 i/s
       String#match?: 16268297.8 i/s - 6.76x  (± 0.00) slower
           String#=~: 14194877.8 i/s - 7.75x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   444.936k i/100ms
          String#sub   989.103k i/100ms
String#dup["string"]=
                         9.995M i/100ms
Calculating -------------------------------------
         String#gsub      9.037M (±12.5%) i/s -     44.494M in   5.015745s
          String#sub     10.468M (± 8.8%) i/s -     53.412M in   5.154734s
String#dup["string"]=
                        100.081M (± 2.9%) i/s -    509.769M in   5.098412s

Comparison:
String#dup["string"]=: 100081270.7 i/s
          String#sub: 10468173.2 i/s - 9.56x  (± 0.00) slower
         String#gsub:  9037038.4 i/s - 11.07x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   238.112k i/100ms
           String#tr   163.069k i/100ms
Calculating -------------------------------------
         String#gsub      3.743M (± 8.0%) i/s -     18.573M in   5.006586s
           String#tr      1.619M (± 6.7%) i/s -      8.153M in   5.071069s

Comparison:
         String#gsub:  3743416.6 i/s
           String#tr:  1618810.9 i/s - 2.31x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   300.183M i/100ms
         With Freeze   301.829M i/100ms
Calculating -------------------------------------
      Without Freeze      3.048B (± 3.1%) i/s -     15.309B in   5.028097s
         With Freeze      3.046B (± 2.9%) i/s -     15.393B in   5.058049s

Comparison:
      Without Freeze: 3047806485.2 i/s
         With Freeze: 3045998148.7 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     6.035k i/100ms
      String#squeeze    83.813k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    161.181k (±12.6%) i/s -    790.585k in   5.013634s
      String#squeeze    826.835k (± 6.5%) i/s -      4.191M in   5.091925s

Comparison:
      String#squeeze:   826834.8 i/s
 String#gsub/regex+/:   161181.2 i/s - 5.13x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     4.412M i/100ms
       String#match?     5.548M i/100ms
  String#start_with?    13.386M i/100ms
Calculating -------------------------------------
           String#=~     46.977M (± 2.6%) i/s -    238.226M in   5.074699s
       String#match?     55.501M (± 2.0%) i/s -    282.949M in   5.100326s
  String#start_with?    133.480M (± 2.4%) i/s -    669.300M in   5.017323s

Comparison:
  String#start_with?: 133479912.8 i/s
       String#match?: 55501162.6 i/s - 2.40x  (± 0.00) slower
           String#=~: 46977321.5 i/s - 2.84x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   214.407k i/100ms
    String#[0, n] ==   283.490k i/100ms
   String#[RANGE] ==   414.300k i/100ms
   String#[0...n] ==   252.230k i/100ms
Calculating -------------------------------------
  String#start_with?      6.831M (± 1.8%) i/s -     34.305M in   5.024266s
    String#[0, n] ==      2.855M (± 6.4%) i/s -     14.458M in   5.091088s
   String#[RANGE] ==      4.346M (± 2.0%) i/s -     21.958M in   5.054633s
   String#[0...n] ==      2.571M (± 6.3%) i/s -     12.864M in   5.030568s

Comparison:
  String#start_with?:  6830520.2 i/s
   String#[RANGE] ==:  4345834.4 i/s - 1.57x  (± 0.00) slower
    String#[0, n] ==:  2855460.3 i/s - 2.39x  (± 0.00) slower
   String#[0...n] ==:  2570845.0 i/s - 2.66x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    10.076M i/100ms
 String#sub!'string'     1.014M i/100ms
String#gsub!'string'   769.474k i/100ms
  String#[/regexp/]=     2.562M i/100ms
 String#sub!/regexp/     2.571M i/100ms
String#gsub!/regexp/   830.782k i/100ms
Calculating -------------------------------------
  String#['string']=    100.149M (± 2.4%) i/s -    503.809M in   5.033763s
 String#sub!'string'     10.747M (± 9.6%) i/s -     53.768M in   5.058340s
String#gsub!'string'      8.362M (±10.4%) i/s -     41.552M in   5.043855s
  String#[/regexp/]=     26.343M (± 4.2%) i/s -    133.216M in   5.067152s
 String#sub!/regexp/     25.590M (± 3.5%) i/s -    128.559M in   5.030714s
String#gsub!/regexp/      8.191M (± 8.6%) i/s -     40.708M in   5.014343s

Comparison:
  String#['string']=: 100149152.6 i/s
  String#[/regexp/]=: 26343055.4 i/s - 3.80x  (± 0.00) slower
 String#sub!/regexp/: 25589603.4 i/s - 3.91x  (± 0.00) slower
 String#sub!'string': 10746835.0 i/s - 9.32x  (± 0.00) slower
String#gsub!'string':  8362021.2 i/s - 11.98x  (± 0.00) slower
String#gsub!/regexp/:  8190614.0 i/s - 12.23x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     2.704M i/100ms
        String#chomp     5.951M i/100ms
String#delete_suffix    14.031M i/100ms
Calculating -------------------------------------
          String#sub     30.445M (± 4.6%) i/s -    154.121M in   5.073773s
        String#chomp     59.285M (± 1.5%) i/s -    297.570M in   5.020529s
String#delete_suffix    152.931M (± 9.1%) i/s -    757.699M in   5.012812s

Comparison:
String#delete_suffix: 152931116.4 i/s
        String#chomp: 59285445.2 i/s - 2.58x  (± 0.00) slower
          String#sub: 30445004.6 i/s - 5.02x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   317.411M i/100ms
          String#sub    15.753M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.054B (± 3.0%) i/s -     15.553B in   5.097323s
          String#sub    159.113M (± 0.8%) i/s -    803.403M in   5.049610s

Comparison:
String#delete_prefix: 3054117662.2 i/s
          String#sub: 159112639.2 i/s - 19.19x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.665M i/100ms
    String#unpack[0]     1.949M i/100ms
Calculating -------------------------------------
      String#unpack1     20.178M (± 4.0%) i/s -    101.564M in   5.041770s
    String#unpack[0]     20.291M (± 5.9%) i/s -    103.292M in   5.116665s

Comparison:
    String#unpack[0]: 20290731.9 i/s
      String#unpack1: 20178041.1 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.2.0-dev-001cccc2, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    22.516k i/100ms
          Time.parse   243.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    372.871k (±33.5%) i/s -      1.666M in   5.024812s
          Time.parse      6.472k (±13.1%) i/s -     31.590k in   5.015716s

Comparison:
        Time.iso8601:   372870.5 i/s
          Time.parse:     6471.8 i/s - 57.61x  (± 0.00) slower

