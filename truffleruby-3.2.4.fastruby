$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       264.022M i/100ms
Function with splat arguments
                         1.890k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.195B (± 2.4%) i/s -     16.105B in   5.044713s
Function with splat arguments
                         21.163k (± 8.6%) i/s -    105.840k in   5.049797s

Comparison:
Function with single Array argument: 3194713953.6 i/s
Function with splat arguments:    21162.8 i/s - 150959.06x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   315.520M i/100ms
Sequential Assignment
                       318.682M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.184B (± 1.8%) i/s -     16.092B in   5.056068s
Sequential Assignment
                          3.181B (± 1.5%) i/s -     15.934B in   5.009981s

Comparison:
 Parallel Assignment: 3183676995.0 i/s
Sequential Assignment: 3181199381.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   318.158M i/100ms
       attr_accessor   297.757M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.181B (± 2.6%) i/s -     15.908B in   5.004275s
       attr_accessor      3.201B (± 2.1%) i/s -     16.079B in   5.025914s

Comparison:
       attr_accessor: 3200699077.3 i/s
   getter_and_setter: 3181120873.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     9.537k i/100ms
         respond_to?   319.809M i/100ms
Calculating -------------------------------------
      begin...rescue    100.278k (± 7.5%) i/s -    505.461k in   5.079549s
         respond_to?      3.205B (± 1.3%) i/s -     16.310B in   5.089972s

Comparison:
         respond_to?: 3204935223.0 i/s
      begin...rescue:   100278.3 i/s - 31960.42x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   315.947M i/100ms
             &method    18.272M i/100ms
Calculating -------------------------------------
              normal      3.141B (± 3.7%) i/s -     15.797B in   5.037507s
             &method    182.691M (± 1.3%) i/s -    913.617M in   5.001707s

Comparison:
              normal: 3140594680.9 i/s
             &method: 182691356.9 i/s - 17.19x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       131.000  i/100ms
       define_method   143.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          3.777k (±59.0%) i/s -      7.467k in   6.490265s
       define_method     12.203k (±41.8%) i/s -      9.724k in   6.119253s

Comparison:
       define_method:    12203.4 i/s
module_eval with string:     3776.8 i/s - 3.23x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   260.304k i/100ms
       Kernel#format   186.931k i/100ms
            String#%   184.554k i/100ms
Calculating -------------------------------------
         Float#round      2.705M (± 3.7%) i/s -     13.536M in   5.011306s
       Kernel#format      1.852M (± 3.0%) i/s -      9.347M in   5.051454s
            String#%      1.835M (± 4.9%) i/s -      9.228M in   5.043502s

Comparison:
         Float#round:  2704982.3 i/s
       Kernel#format:  1852011.2 i/s - 1.46x  (± 0.00) slower
            String#%:  1834886.1 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   301.952M i/100ms
          OpenStruct   320.787M i/100ms
Calculating -------------------------------------
                Hash      3.184B (± 2.3%) i/s -     16.003B in   5.028724s
          OpenStruct      3.194B (± 2.2%) i/s -     16.039B in   5.023839s

Comparison:
          OpenStruct: 3194279156.9 i/s
                Hash: 3184307231.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   313.626M i/100ms
          OpenStruct     3.030k i/100ms
Calculating -------------------------------------
                Hash      2.986B (±11.0%) i/s -     14.740B in   5.028226s
          OpenStruct     45.127k (±22.6%) i/s -    212.100k in   5.055607s

Comparison:
                Hash: 2985748148.7 i/s
          OpenStruct:    45127.0 i/s - 66163.24x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   813.411k i/100ms
  ancestors.include?   218.066k i/100ms
Calculating -------------------------------------
  less than or equal      9.548M (± 4.9%) i/s -     47.991M in   5.037850s
  ancestors.include?      2.227M (± 6.8%) i/s -     11.121M in   5.024415s

Comparison:
  less than or equal:  9548139.6 i/s
  ancestors.include?:  2227186.1 i/s - 4.29x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     31.827  (± 3.1%) i/s -    159.000  in   5.007077s
         Kernel loop     31.892  (± 3.1%) i/s -    160.000  in   5.030003s

Comparison:
         Kernel loop:       31.9 i/s
          While Loop:       31.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   322.363M i/100ms
         Array#first   316.346M i/100ms
Calculating -------------------------------------
           Array#[0]      3.170B (± 2.9%) i/s -     16.118B in   5.089707s
         Array#first      3.188B (± 1.8%) i/s -     16.134B in   5.062400s

Comparison:
         Array#first: 3187981357.3 i/s
           Array#[0]: 3169628726.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   317.429M i/100ms
          Array#last   320.779M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.194B (± 2.1%) i/s -     16.189B in   5.071680s
          Array#last      3.175B (± 2.6%) i/s -     16.039B in   5.054418s

Comparison:
          Array#[-1]: 3193515966.2 i/s
          Array#last: 3175487055.9 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   844.402k i/100ms
Calculating -------------------------------------
                find     13.691  (± 0.0%) i/s -     69.000  in   5.044916s
             bsearch      9.042M (± 4.0%) i/s -     45.598M in   5.051154s

Comparison:
             bsearch:  9041593.9 i/s
                find:       13.7 i/s - 660410.51x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.212  (± 0.0%) i/s -      2.000  in   9.423708s
        Array#insert      1.393  (± 0.0%) i/s -      7.000  in   5.025578s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.2 i/s - 6.56x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   316.832M i/100ms
          Array#size   322.856M i/100ms
         Array#count   321.868M i/100ms
Calculating -------------------------------------
        Array#length      3.181B (± 2.3%) i/s -     16.158B in   5.081858s
          Array#size      3.188B (± 2.6%) i/s -     16.143B in   5.066645s
         Array#count      3.167B (± 2.7%) i/s -     16.093B in   5.085428s

Comparison:
          Array#size: 3188437050.2 i/s
        Array#length: 3181483698.1 i/s - same-ish: difference falls within error
         Array#count: 3167146507.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    36.441k i/100ms
        Array#sample     3.822M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    365.284k (± 2.7%) i/s -      1.858M in   5.091639s
        Array#sample     37.837M (± 2.7%) i/s -    191.110M in   5.054877s

Comparison:
        Array#sample: 37837161.0 i/s
 Array#shuffle.first:   365284.4 i/s - 103.58x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   950.000  i/100ms
          Date.parse   611.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     17.331k (±34.2%) i/s -     76.950k in   5.000294s
          Date.parse      7.852k (±26.1%) i/s -     36.049k in   5.009269s

Comparison:
        Date.iso8601:    17330.9 i/s
          Date.parse:     7851.8 i/s - 2.21x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   292.803k i/100ms
           Array#map     1.803M i/100ms
Calculating -------------------------------------
   Array#each + push      3.233M (± 7.7%) i/s -     16.104M in   5.013016s
           Array#map     19.813M (± 8.6%) i/s -     99.140M in   5.052033s

Comparison:
           Array#map: 19813253.9 i/s
   Array#each + push:  3232872.1 i/s - 6.13x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    11.620M i/100ms
               #each    35.703M i/100ms
Calculating -------------------------------------
            For loop    117.872M (± 1.0%) i/s -    592.644M in   5.028423s
               #each    356.661M (± 1.9%) i/s -      1.785B in   5.007184s

Comparison:
               #each: 356660586.0 i/s
            For loop: 117871660.3 i/s - 3.03x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.399M i/100ms
     each_with_index     2.381M i/100ms
Calculating -------------------------------------
          While Loop     14.632M (± 4.1%) i/s -     74.138M in   5.075801s
     each_with_index     23.803M (± 1.2%) i/s -    119.067M in   5.002817s

Comparison:
     each_with_index: 23802987.0 i/s
          While Loop: 14631829.5 i/s - 1.63x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   307.549k i/100ms
      inject to_proc   309.895k i/100ms
        inject block   312.366k i/100ms
Calculating -------------------------------------
       inject symbol      3.116M (± 1.6%) i/s -     15.685M in   5.035295s
      inject to_proc      3.122M (± 1.2%) i/s -     15.805M in   5.062934s
        inject block      3.092M (± 4.6%) i/s -     15.618M in   5.065639s

Comparison:
      inject to_proc:  3122117.6 i/s
       inject symbol:  3115861.5 i/s - same-ish: difference falls within error
        inject block:  3091524.2 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    22.349k i/100ms
   Array#map.flatten    25.877k i/100ms
      Array#flat_map    56.906k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    261.300k (± 7.2%) i/s -      1.319M in   5.076332s
   Array#map.flatten    267.881k (± 7.7%) i/s -      1.346M in   5.073414s
      Array#flat_map    562.359k (± 6.4%) i/s -      2.845M in   5.089880s

Comparison:
      Array#flat_map:   562359.3 i/s
   Array#map.flatten:   267881.3 i/s - 2.10x  (± 0.00) slower
Array#map.flatten(1):   261300.0 i/s - 2.15x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   306.574k i/100ms
  Array#reverse_each     2.343M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.390M (± 6.1%) i/s -     16.862M in   5.003150s
  Array#reverse_each     28.408M (± 4.7%) i/s -    142.900M in   5.043231s

Comparison:
  Array#reverse_each: 28407569.4 i/s
  Array#reverse.each:  3390170.9 i/s - 8.38x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       924.625k i/100ms
   Enumerable#detect     4.638M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.219M (± 8.1%) i/s -    202.493M in  20.004675s
   Enumerable#detect     46.374M (± 3.4%) i/s -    927.597M in  20.028721s

Comparison:
   Enumerable#detect: 46373634.8 i/s
Enumerable#select.first: 10219213.9 i/s - 4.54x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       334.494k i/100ms
Enumerable#select.last
                       548.249k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.509M (± 3.9%) i/s -     17.728M in   5.059815s
Enumerable#select.last
                          5.506M (± 6.7%) i/s -     27.412M in   5.014757s

Comparison:
Enumerable#select.last:  5505921.6 i/s
Enumerable#reverse.detect:  3509108.3 i/s - 1.57x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.406k i/100ms
  Enumerable#sort_by     4.251k i/100ms
     Enumerable#sort     5.428k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         24.811k (±53.3%) i/s -     85.150k in   5.041612s
  Enumerable#sort_by     38.777k (±25.3%) i/s -    165.789k in   5.050402s
     Enumerable#sort     56.788k (± 6.1%) i/s -    287.684k in   5.088618s

Comparison:
     Enumerable#sort:    56788.3 i/s
  Enumerable#sort_by:    38777.3 i/s - 1.46x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    24811.4 i/s - 2.29x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   961.548k i/100ms
Enumerable#sort_by...first
                         6.352k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      8.811M (± 0.9%) i/s -     44.231M in   5.020355s
Enumerable#sort_by...first
                        106.170k (± 7.5%) i/s -    527.216k in   5.013405s

Comparison:
   Enumerable#min_by:  8811028.9 i/s
Enumerable#sort_by...first:   106169.5 i/s - 82.99x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   627.074k i/100ms
            Hash#dup   709.693k i/100ms
Calculating -------------------------------------
              Hash[]      7.410M (±10.3%) i/s -     36.997M in   5.080702s
            Hash#dup      7.490M (± 9.8%) i/s -     37.614M in   5.080025s

Comparison:
            Hash#dup:  7490391.0 i/s
              Hash[]:  7410403.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   315.557M i/100ms
  Hash#fetch, symbol   312.987M i/100ms
     Hash#[], string     4.361M i/100ms
  Hash#fetch, string    26.934M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.203B (± 2.1%) i/s -     16.093B in   5.026327s
  Hash#fetch, symbol      3.192B (± 2.4%) i/s -     15.962B in   5.004169s
     Hash#[], string    291.515M (± 4.3%) i/s -      1.457B in   5.009358s
  Hash#fetch, string    267.431M (± 2.3%) i/s -      1.347B in   5.038645s

Comparison:
     Hash#[], symbol: 3203405800.7 i/s
  Hash#fetch, symbol: 3191740937.5 i/s - same-ish: difference falls within error
     Hash#[], string: 291514527.3 i/s - 10.99x  (± 0.00) slower
  Hash#fetch, string: 267431256.8 i/s - 11.98x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    91.564M i/100ms
             Hash#[]    91.182M i/100ms
          Hash#[] ||    92.204M i/100ms
          Hash#[] &&    91.622M i/100ms
          Hash#fetch    92.378M i/100ms
 Hash#fetch fallback    92.392M i/100ms
Calculating -------------------------------------
            Hash#dig    921.377M (± 0.9%) i/s -      4.670B in   5.068632s
             Hash#[]    919.334M (± 1.6%) i/s -      4.650B in   5.059769s
          Hash#[] ||    919.451M (± 1.5%) i/s -      4.610B in   5.015346s
          Hash#[] &&    921.457M (± 1.0%) i/s -      4.673B in   5.071490s
          Hash#fetch    921.033M (± 1.2%) i/s -      4.619B in   5.015652s
 Hash#fetch fallback    921.963M (± 0.7%) i/s -      4.620B in   5.010837s

Comparison:
 Hash#fetch fallback: 921963073.4 i/s
          Hash#[] &&: 921457443.7 i/s - same-ish: difference falls within error
            Hash#dig: 921377295.7 i/s - same-ish: difference falls within error
          Hash#fetch: 921032844.7 i/s - same-ish: difference falls within error
          Hash#[] ||: 919450721.3 i/s - same-ish: difference falls within error
             Hash#[]: 919334259.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   319.934M i/100ms
  Hash#fetch + block   317.352M i/100ms
    Hash#fetch + arg   314.445M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.202B (± 1.8%) i/s -     16.317B in   5.097129s
  Hash#fetch + block      3.214B (± 1.7%) i/s -     16.185B in   5.037827s
    Hash#fetch + arg      3.198B (± 2.5%) i/s -     16.037B in   5.018204s

Comparison:
  Hash#fetch + block: 3213685186.0 i/s
  Hash#fetch + const: 3202299565.3 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 3197867984.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    22.243k i/100ms
         sort + to_h    16.141k i/100ms
Calculating -------------------------------------
      sort_by + to_h    538.681k (± 9.2%) i/s -      2.669M in   5.004566s
         sort + to_h    206.287k (± 5.3%) i/s -      1.033M in   5.022726s

Comparison:
      sort_by + to_h:   538681.2 i/s
         sort + to_h:   206286.8 i/s - 2.61x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   211.115k i/100ms
       Hash#each_key   248.270k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.281M (±11.8%) i/s -     11.189M in   5.030113s
       Hash#each_key      2.446M (± 6.4%) i/s -     12.414M in   5.104330s

Comparison:
       Hash#each_key:  2446183.8 i/s
      Hash#keys.each:  2281279.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   281.000  i/100ms
           Hash#key?    15.572M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      3.116k (±12.4%) i/s -     15.455k in   5.057019s
           Hash#key?    156.885M (± 0.4%) i/s -    794.168M in   5.062201s

Comparison:
           Hash#key?: 156884819.6 i/s
  Hash#keys.include?:     3116.0 i/s - 50348.55x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    45.510k i/100ms
            Hash#[]=    57.826k i/100ms
Calculating -------------------------------------
         Hash#merge!    568.328k (± 7.7%) i/s -      2.822M in   5.010041s
            Hash#[]=    585.812k (± 7.8%) i/s -      2.949M in   5.071871s

Comparison:
            Hash#[]=:   585811.6 i/s
         Hash#merge!:   568327.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        35.377k i/100ms
      Hash#merge({})    20.326k i/100ms
 Hash#dup#merge!({})    31.611k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        380.953k (±12.7%) i/s -      1.875M in   5.014417s
      Hash#merge({})    200.184k (± 7.8%) i/s -    995.974k in   5.016290s
 Hash#dup#merge!({})    312.339k (± 9.7%) i/s -      1.549M in   5.019270s

Comparison:
{}#merge!(Hash) do end:   380953.4 i/s
 Hash#dup#merge!({}):   312339.0 i/s - same-ish: difference falls within error
      Hash#merge({}):   200184.2 i/s - 1.90x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   304.349M i/100ms
          Hash#merge   315.327M i/100ms
Calculating -------------------------------------
        Hash#**other      3.112B (± 2.6%) i/s -     15.826B in   5.089795s
          Hash#merge      3.182B (± 2.3%) i/s -     16.082B in   5.056562s

Comparison:
          Hash#merge: 3182111014.9 i/s
        Hash#**other: 3111597763.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.030k i/100ms
         Hash#merge!    56.497k i/100ms
Calculating -------------------------------------
          Hash#merge     12.521k (±10.7%) i/s -     61.800k in   5.013888s
         Hash#merge!    594.248k (± 3.2%) i/s -      2.994M in   5.044134s

Comparison:
         Hash#merge!:   594247.7 i/s
          Hash#merge:    12521.0 i/s - 47.46x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.537M i/100ms
Array#each               1.446M i/100ms
Array#each_w/_object     1.439M i/100ms
Hash#select-include      2.406M i/100ms
Calculating -------------------------------------
Hash#native-slice        18.858M (± 7.4%) i/s -     93.745M in   5.010932s
Array#each               15.470M (± 6.1%) i/s -     78.080M in   5.075806s
Array#each_w/_object     14.628M (± 7.3%) i/s -     73.366M in   5.053387s
Hash#select-include      24.260M (± 7.0%) i/s -    122.682M in   5.092203s

Comparison:
Hash#select-include : 24259795.6 i/s
Hash#native-slice   : 18857809.0 i/s - 1.29x  (± 0.00) slower
Array#each          : 15469862.9 i/s - 1.57x  (± 0.00) slower
Array#each_w/_object: 14627949.8 i/s - 1.66x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   283.000  i/100ms
         Hash#value?   701.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      3.156k (±12.1%) i/s -     15.565k in   5.026996s
         Hash#value?      6.999k (± 0.8%) i/s -     35.050k in   5.008296s

Comparison:
         Hash#value?:     6998.9 i/s
Hash#values.include?:     3156.4 i/s - 2.22x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   318.374M i/100ms
                send   318.213M i/100ms
      method_missing   315.052M i/100ms
Calculating -------------------------------------
                call      3.157B (± 2.8%) i/s -     15.919B in   5.047330s
                send      3.164B (± 2.6%) i/s -     15.911B in   5.032735s
      method_missing      3.142B (± 1.9%) i/s -     15.753B in   5.015962s

Comparison:
                send: 3163772130.3 i/s
                call: 3156524255.4 i/s - same-ish: difference falls within error
      method_missing: 3141622472.6 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    64.751k i/100ms
      Symbol#to_proc    65.691k i/100ms
Calculating -------------------------------------
               Block    750.962k (±13.5%) i/s -      3.691M in   5.012363s
      Symbol#to_proc    763.222k (±13.4%) i/s -      3.744M in   5.009223s

Comparison:
      Symbol#to_proc:   763221.5 i/s
               Block:   750961.7 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   318.008M i/100ms
       block + yield   304.014M i/100ms
        unused block   317.511M i/100ms
               yield   316.856M i/100ms
Calculating -------------------------------------
          block.call      3.140B (± 4.4%) i/s -     15.900B in   5.076068s
       block + yield      3.178B (± 2.6%) i/s -     16.113B in   5.074084s
        unused block      3.187B (± 2.6%) i/s -     16.193B in   5.084112s
               yield      3.205B (± 1.2%) i/s -     16.160B in   5.042262s

Comparison:
               yield: 3205336281.7 i/s
        unused block: 3187416984.9 i/s - same-ish: difference falls within error
       block + yield: 3177896972.0 i/s - same-ish: difference falls within error
          block.call: 3139817861.5 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     3.725k i/100ms
      range#include?   158.000  i/100ms
       range#member?   237.000  i/100ms
       plain compare     8.018k i/100ms
Calculating -------------------------------------
        range#cover?     58.102k (±31.3%) i/s -    253.300k in   5.016208s
      range#include?      2.795k (±38.2%) i/s -     11.534k in   5.030509s
       range#member?      2.533k (±32.4%) i/s -     11.376k in   5.075326s
       plain compare     86.390k (±23.4%) i/s -    408.918k in   5.211582s

Comparison:
       plain compare:    86390.0 i/s
        range#cover?:    58101.6 i/s - same-ish: difference falls within error
      range#include?:     2795.1 i/s - 30.91x  (± 0.00) slower
       range#member?:     2533.3 i/s - 34.10x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    34.745M i/100ms
           String#=~    32.192M i/100ms
          Regexp#===    31.991M i/100ms
        String#match    31.333M i/100ms
Calculating -------------------------------------
       String#match?    348.130M (± 1.1%) i/s -      1.772B in   5.090697s
           String#=~    304.294M (± 1.7%) i/s -      1.545B in   5.079580s
          Regexp#===    321.158M (± 2.0%) i/s -      1.632B in   5.082534s
        String#match    314.073M (± 1.6%) i/s -      1.598B in   5.089343s

Comparison:
       String#match?: 348129616.7 i/s
          Regexp#===: 321157857.4 i/s - 1.08x  (± 0.00) slower
        String#match: 314073246.2 i/s - 1.11x  (± 0.00) slower
           String#=~: 304294285.3 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.505M i/100ms
      String#casecmp     4.685M i/100ms
Calculating -------------------------------------
String#downcase + ==     30.105M (± 8.2%) i/s -    150.291M in   5.036554s
      String#casecmp     46.339M (± 6.6%) i/s -    234.243M in   5.086181s

Comparison:
      String#casecmp: 46339466.1 i/s
String#downcase + ==: 30104579.4 i/s - 1.54x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     9.382M i/100ms
       String#concat     9.845M i/100ms
       String#append    10.661M i/100ms
         "foo" "bar"   309.300M i/100ms
  "#{'foo'}#{'bar'}"    10.803M i/100ms
Calculating -------------------------------------
            String#+    108.417M (± 4.8%) i/s -    544.179M in   5.031800s
       String#concat    107.591M (± 4.2%) i/s -    541.467M in   5.041894s
       String#append    107.323M (± 5.3%) i/s -    543.703M in   5.082577s
         "foo" "bar"      3.166B (± 3.4%) i/s -     16.084B in   5.086282s
  "#{'foo'}#{'bar'}"    107.433M (± 3.7%) i/s -    540.127M in   5.034795s

Comparison:
         "foo" "bar": 3166093899.0 i/s
            String#+: 108416735.3 i/s - 29.20x  (± 0.00) slower
       String#concat: 107590551.7 i/s - 29.43x  (± 0.00) slower
  "#{'foo'}#{'bar'}": 107432511.9 i/s - 29.47x  (± 0.00) slower
       String#append: 107322643.2 i/s - 29.50x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   311.475M i/100ms
          String#dup   319.548M i/100ms
Calculating -------------------------------------
           String#+@      3.195B (± 1.3%) i/s -     16.197B in   5.069645s
          String#dup      3.144B (± 2.3%) i/s -     15.977B in   5.084040s

Comparison:
           String#+@: 3195360766.0 i/s
          String#dup: 3144354924.5 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.471M i/100ms
       String#match?     1.745M i/100ms
    String#end_with?    10.772M i/100ms
Calculating -------------------------------------
           String#=~     14.990M (± 3.0%) i/s -     74.999M in   5.007885s
       String#match?     17.453M (± 1.9%) i/s -     87.253M in   5.001290s
    String#end_with?    106.509M (± 2.7%) i/s -    538.596M in   5.060826s

Comparison:
    String#end_with?: 106509306.0 i/s
       String#match?: 17453209.7 i/s - 6.10x  (± 0.00) slower
           String#=~: 14990444.0 i/s - 7.11x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   770.313k i/100ms
          String#sub   933.731k i/100ms
String#dup["string"]=
                        10.398M i/100ms
Calculating -------------------------------------
         String#gsub      8.522M (± 8.6%) i/s -     42.367M in   5.025483s
          String#sub      9.784M (±11.5%) i/s -     48.554M in   5.045543s
String#dup["string"]=
                        102.977M (± 4.6%) i/s -    519.910M in   5.062324s

Comparison:
String#dup["string"]=: 102976654.4 i/s
          String#sub:  9784005.0 i/s - 10.53x  (± 0.00) slower
         String#gsub:  8521878.0 i/s - 12.08x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   371.608k i/100ms
           String#tr   183.054k i/100ms
Calculating -------------------------------------
         String#gsub      4.214M (± 6.5%) i/s -     21.182M in   5.049380s
           String#tr      1.832M (± 6.7%) i/s -      9.153M in   5.019357s

Comparison:
         String#gsub:  4214191.7 i/s
           String#tr:  1832335.9 i/s - 2.30x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   317.654M i/100ms
         With Freeze   304.503M i/100ms
Calculating -------------------------------------
      Without Freeze      3.176B (± 2.7%) i/s -     15.883B in   5.004251s
         With Freeze      3.190B (± 2.3%) i/s -     16.139B in   5.061788s

Comparison:
         With Freeze: 3190145512.3 i/s
      Without Freeze: 3176412421.1 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     6.054k i/100ms
      String#squeeze    87.417k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    163.542k (±13.1%) i/s -    799.128k in   5.001221s
      String#squeeze    864.950k (± 5.5%) i/s -      4.371M in   5.069561s

Comparison:
      String#squeeze:   864949.9 i/s
 String#gsub/regex+/:   163542.3 i/s - 5.29x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     9.877M i/100ms
       String#match?    13.466M i/100ms
  String#start_with?    16.161M i/100ms
Calculating -------------------------------------
           String#=~    139.998M (± 7.5%) i/s -    701.278M in   5.052125s
       String#match?    134.504M (± 0.4%) i/s -    673.290M in   5.005821s
  String#start_with?    160.224M (± 2.3%) i/s -    808.059M in   5.046298s

Comparison:
  String#start_with?: 160223681.9 i/s
           String#=~: 139997565.3 i/s - 1.14x  (± 0.00) slower
       String#match?: 134504088.0 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    62.635k i/100ms
    String#[0, n] ==   145.891k i/100ms
   String#[RANGE] ==   226.935k i/100ms
   String#[0...n] ==   139.657k i/100ms
Calculating -------------------------------------
  String#start_with?      7.228M (± 1.0%) i/s -     36.140M in   5.000329s
    String#[0, n] ==     13.296M (±11.7%) i/s -     65.067M in   5.045996s
   String#[RANGE] ==     14.227M (±14.1%) i/s -     68.534M in   5.006297s
   String#[0...n] ==     13.728M (±12.4%) i/s -     67.175M in   5.070262s

Comparison:
   String#[RANGE] ==: 14227225.0 i/s
   String#[0...n] ==: 13727536.8 i/s - same-ish: difference falls within error
    String#[0, n] ==: 13295827.4 i/s - same-ish: difference falls within error
  String#start_with?:  7228391.1 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    10.328M i/100ms
 String#sub!'string'     1.002M i/100ms
String#gsub!'string'   868.574k i/100ms
  String#[/regexp/]=     9.988M i/100ms
 String#sub!/regexp/     1.886M i/100ms
String#gsub!/regexp/   972.741k i/100ms
Calculating -------------------------------------
  String#['string']=    103.753M (± 1.9%) i/s -    526.716M in   5.078810s
 String#sub!'string'     11.076M (±11.1%) i/s -     55.100M in   5.053820s
String#gsub!'string'      9.456M (± 9.2%) i/s -     47.772M in   5.115444s
  String#[/regexp/]=    100.267M (± 2.5%) i/s -    509.371M in   5.083829s
 String#sub!/regexp/     32.977M (± 6.2%) i/s -    164.055M in   4.999708s
String#gsub!/regexp/      9.691M (± 7.4%) i/s -     48.637M in   5.047568s

Comparison:
  String#['string']=: 103753278.9 i/s
  String#[/regexp/]=: 100266500.1 i/s - same-ish: difference falls within error
 String#sub!/regexp/: 32976951.6 i/s - 3.15x  (± 0.00) slower
 String#sub!'string': 11076178.7 i/s - 9.37x  (± 0.00) slower
String#gsub!/regexp/:  9691119.0 i/s - 10.71x  (± 0.00) slower
String#gsub!'string':  9455507.6 i/s - 10.97x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     7.690M i/100ms
        String#chomp     6.047M i/100ms
String#delete_suffix    13.917M i/100ms
Calculating -------------------------------------
          String#sub     89.625M (± 7.2%) i/s -    446.025M in   5.015574s
        String#chomp     60.496M (± 1.4%) i/s -    308.388M in   5.098696s
String#delete_suffix    141.077M (± 9.9%) i/s -    709.769M in   5.089285s

Comparison:
String#delete_suffix: 141076654.7 i/s
          String#sub: 89625355.8 i/s - 1.57x  (± 0.00) slower
        String#chomp: 60496034.0 i/s - 2.33x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   312.141M i/100ms
          String#sub   126.433M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.063B (± 2.0%) i/s -     15.607B in   5.097145s
          String#sub      1.281B (± 2.0%) i/s -      6.448B in   5.034644s

Comparison:
String#delete_prefix: 3063208266.5 i/s
          String#sub: 1281302744.7 i/s - 2.39x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.753M i/100ms
    String#unpack[0]     1.857M i/100ms
Calculating -------------------------------------
      String#unpack1     20.192M (± 4.6%) i/s -    101.647M in   5.045194s
    String#unpack[0]     20.204M (± 3.8%) i/s -    102.129M in   5.062303s

Comparison:
    String#unpack[0]: 20204485.0 i/s
      String#unpack1: 20192450.2 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.2.0-dev-07b978e4, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    20.561k i/100ms
          Time.parse   357.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    539.482k (±28.4%) i/s -      2.508M in   5.026738s
          Time.parse      6.170k (±17.7%) i/s -     29.631k in   5.042942s

Comparison:
        Time.iso8601:   539482.4 i/s
          Time.parse:     6170.1 i/s - 87.43x  (± 0.00) slower

