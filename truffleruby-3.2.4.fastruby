$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       281.468M i/100ms
Function with splat arguments
                         1.890k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.189B (± 3.3%) i/s -     16.044B in   5.036904s
Function with splat arguments
                         20.659k (±10.5%) i/s -    102.060k in   5.013764s

Comparison:
Function with single Array argument: 3189258758.8 i/s
Function with splat arguments:    20659.2 i/s - 154374.58x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   319.004M i/100ms
Sequential Assignment
                       318.388M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.197B (± 2.1%) i/s -     16.269B in   5.090783s
Sequential Assignment
                          3.197B (± 2.7%) i/s -     16.238B in   5.083951s

Comparison:
 Parallel Assignment: 3197262134.0 i/s
Sequential Assignment: 3196507179.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   310.519M i/100ms
       attr_accessor   315.188M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.194B (± 2.4%) i/s -     16.147B in   5.059177s
       attr_accessor      3.206B (± 1.7%) i/s -     16.075B in   5.014833s

Comparison:
       attr_accessor: 3206444984.0 i/s
   getter_and_setter: 3193546899.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    13.304k i/100ms
         respond_to?   323.224M i/100ms
Calculating -------------------------------------
      begin...rescue    103.736k (± 8.0%) i/s -    518.856k in   5.045085s
         respond_to?      3.205B (± 1.3%) i/s -     16.161B in   5.043705s

Comparison:
         respond_to?: 3204790365.8 i/s
      begin...rescue:   103736.2 i/s - 30893.64x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   321.796M i/100ms
             &method    18.384M i/100ms
Calculating -------------------------------------
              normal      3.177B (± 2.6%) i/s -     16.090B in   5.068472s
             &method    168.859M (± 1.8%) i/s -    845.685M in   5.009905s

Comparison:
              normal: 3176783642.3 i/s
             &method: 168859351.1 i/s - 18.81x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       159.000  i/100ms
       define_method   143.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          3.456k (±61.5%) i/s -      7.314k in   5.057848s
       define_method     11.426k (±46.4%) i/s -     11.011k in   6.460278s

Comparison:
       define_method:    11425.6 i/s
module_eval with string:     3455.8 i/s - 3.31x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   125.126k i/100ms
       Kernel#format   101.921k i/100ms
            String#%   102.586k i/100ms
Calculating -------------------------------------
         Float#round      1.256M (± 2.8%) i/s -      6.381M in   5.085532s
       Kernel#format      1.014M (± 1.5%) i/s -      5.096M in   5.026385s
            String#%      1.010M (± 1.9%) i/s -      5.129M in   5.081783s

Comparison:
         Float#round:  1255894.0 i/s
       Kernel#format:  1014106.2 i/s - 1.24x  (± 0.00) slower
            String#%:  1009740.6 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   320.571M i/100ms
          OpenStruct   313.942M i/100ms
Calculating -------------------------------------
                Hash      3.193B (± 2.0%) i/s -     16.029B in   5.021294s
          OpenStruct      3.225B (± 0.6%) i/s -     16.325B in   5.062722s

Comparison:
          OpenStruct: 3224654781.7 i/s
                Hash: 3193406253.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   317.764M i/100ms
          OpenStruct     4.609k i/100ms
Calculating -------------------------------------
                Hash      3.163B (± 3.6%) i/s -     15.888B in   5.029547s
          OpenStruct     33.185k (±27.8%) i/s -    156.706k in   5.052941s

Comparison:
                Hash: 3163490469.8 i/s
          OpenStruct:    33185.1 i/s - 95328.52x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   908.922k i/100ms
  ancestors.include?   209.634k i/100ms
Calculating -------------------------------------
  less than or equal      9.636M (± 3.5%) i/s -     48.173M in   5.005526s
  ancestors.include?      2.234M (± 6.2%) i/s -     11.111M in   5.002684s

Comparison:
  less than or equal:  9636295.5 i/s
  ancestors.include?:  2234160.1 i/s - 4.31x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     32.095  (± 3.1%) i/s -    161.000  in   5.021450s
         Kernel loop     32.083  (± 3.1%) i/s -    161.000  in   5.024965s

Comparison:
          While Loop:       32.1 i/s
         Kernel loop:       32.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   321.454M i/100ms
         Array#first   316.048M i/100ms
Calculating -------------------------------------
           Array#[0]      3.208B (± 1.7%) i/s -     16.073B in   5.011383s
         Array#first      3.219B (± 0.9%) i/s -     16.118B in   5.007249s

Comparison:
         Array#first: 3219321771.6 i/s
           Array#[0]: 3208258353.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   315.086M i/100ms
          Array#last   317.496M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.187B (± 2.4%) i/s -     16.069B in   5.044557s
          Array#last      3.221B (± 0.9%) i/s -     16.192B in   5.027012s

Comparison:
          Array#last: 3221337393.1 i/s
          Array#[-1]: 3187447495.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   877.104k i/100ms
Calculating -------------------------------------
                find     13.721  (± 0.0%) i/s -     69.000  in   5.031203s
             bsearch      9.271M (± 6.6%) i/s -     46.487M in   5.049389s

Comparison:
             bsearch:  9270589.3 i/s
                find:       13.7 i/s - 675646.51x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.212  (± 0.0%) i/s -      2.000  in   9.424680s
        Array#insert      1.398  (± 0.0%) i/s -      7.000  in   5.006029s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.2 i/s - 6.59x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   319.868M i/100ms
          Array#size   320.922M i/100ms
         Array#count   322.904M i/100ms
Calculating -------------------------------------
        Array#length      3.193B (± 2.9%) i/s -     15.993B in   5.013179s
          Array#size      3.203B (± 2.7%) i/s -     16.046B in   5.013608s
         Array#count      3.176B (± 4.0%) i/s -     16.145B in   5.093312s

Comparison:
          Array#size: 3203026125.2 i/s
        Array#length: 3193230813.3 i/s - same-ish: difference falls within error
         Array#count: 3176147117.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    36.314k i/100ms
        Array#sample     3.765M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    366.528k (± 1.8%) i/s -      1.852M in   5.054609s
        Array#sample     38.289M (± 0.2%) i/s -    192.036M in   5.015459s

Comparison:
        Array#sample: 38288917.3 i/s
 Array#shuffle.first:   366528.2 i/s - 104.46x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   973.000  i/100ms
          Date.parse   638.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     17.371k (±33.3%) i/s -     78.813k in   5.021000s
          Date.parse      8.454k (±19.9%) i/s -     40.194k in   5.031269s

Comparison:
        Date.iso8601:    17371.1 i/s
          Date.parse:     8454.3 i/s - 2.05x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   305.028k i/100ms
           Array#map     1.876M i/100ms
Calculating -------------------------------------
   Array#each + push      3.335M (± 5.9%) i/s -     16.777M in   5.049525s
           Array#map     19.719M (± 7.0%) i/s -     99.436M in   5.074130s

Comparison:
           Array#map: 19719477.5 i/s
   Array#each + push:  3334596.8 i/s - 5.91x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    12.776M i/100ms
               #each    35.655M i/100ms
Calculating -------------------------------------
            For loop    128.691M (± 1.6%) i/s -    651.565M in   5.064503s
               #each    356.071M (± 2.4%) i/s -      1.783B in   5.009793s

Comparison:
               #each: 356070806.2 i/s
            For loop: 128690822.0 i/s - 2.77x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.417M i/100ms
     each_with_index     2.327M i/100ms
Calculating -------------------------------------
          While Loop     14.315M (± 1.0%) i/s -     72.251M in   5.047765s
     each_with_index     25.594M (± 9.3%) i/s -    127.970M in   5.043548s

Comparison:
     each_with_index: 25593530.1 i/s
          While Loop: 14314798.4 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   302.240k i/100ms
      inject to_proc   310.243k i/100ms
        inject block   310.469k i/100ms
Calculating -------------------------------------
       inject symbol      3.110M (± 2.4%) i/s -     15.716M in   5.057041s
      inject to_proc      3.109M (± 2.2%) i/s -     15.822M in   5.092409s
        inject block      3.111M (± 2.3%) i/s -     15.834M in   5.091929s

Comparison:
        inject block:  3111399.8 i/s
       inject symbol:  3109756.7 i/s - same-ish: difference falls within error
      inject to_proc:  3108646.3 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    25.274k i/100ms
   Array#map.flatten    26.303k i/100ms
      Array#flat_map    57.253k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    265.875k (± 7.2%) i/s -      1.340M in   5.070465s
   Array#map.flatten    260.216k (± 7.5%) i/s -      1.315M in   5.088491s
      Array#flat_map    580.352k (± 3.3%) i/s -      2.920M in   5.037066s

Comparison:
      Array#flat_map:   580351.6 i/s
Array#map.flatten(1):   265874.7 i/s - 2.18x  (± 0.00) slower
   Array#map.flatten:   260215.7 i/s - 2.23x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   310.287k i/100ms
  Array#reverse_each     2.355M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.444M (± 6.2%) i/s -     17.376M in   5.074141s
  Array#reverse_each     23.577M (± 1.7%) i/s -    120.098M in   5.095089s

Comparison:
  Array#reverse_each: 23577457.4 i/s
  Array#reverse.each:  3444067.4 i/s - 6.85x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       879.725k i/100ms
   Enumerable#detect     4.577M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.391M (± 8.6%) i/s -    205.856M in  20.025375s
   Enumerable#detect     46.678M (± 2.0%) i/s -    933.626M in  20.011079s

Comparison:
   Enumerable#detect: 46678116.2 i/s
Enumerable#select.first: 10390659.6 i/s - 4.49x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       346.311k i/100ms
Enumerable#select.last
                       546.019k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.516M (± 3.2%) i/s -     17.662M in   5.028725s
Enumerable#select.last
                          5.400M (± 5.7%) i/s -     27.301M in   5.079190s

Comparison:
Enumerable#select.last:  5400235.1 i/s
Enumerable#reverse.detect:  3516057.4 i/s - 1.54x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.122k i/100ms
  Enumerable#sort_by     4.322k i/100ms
     Enumerable#sort     5.765k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         32.014k (±43.3%) i/s -    103.050k in   5.025216s
  Enumerable#sort_by     36.033k (±29.5%) i/s -    155.592k in   5.081451s
     Enumerable#sort     42.924k (±24.0%) i/s -    207.540k in   5.100151s

Comparison:
     Enumerable#sort:    42923.5 i/s
  Enumerable#sort_by:    36033.2 i/s - same-ish: difference falls within error
Enumerable#sort_by (Symbol#to_proc):    32014.4 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   993.465k i/100ms
Enumerable#sort_by...first
                         9.052k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      9.827M (± 2.4%) i/s -     49.673M in   5.057773s
Enumerable#sort_by...first
                        105.811k (± 6.4%) i/s -    534.068k in   5.079822s

Comparison:
   Enumerable#min_by:  9827032.2 i/s
Enumerable#sort_by...first:   105811.1 i/s - 92.87x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   658.879k i/100ms
            Hash#dup   727.279k i/100ms
Calculating -------------------------------------
              Hash[]      7.338M (±11.5%) i/s -     36.238M in   5.019201s
            Hash#dup      7.564M (±11.1%) i/s -     37.819M in   5.065672s

Comparison:
            Hash#dup:  7563559.4 i/s
              Hash[]:  7337514.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   318.388M i/100ms
  Hash#fetch, symbol   318.594M i/100ms
     Hash#[], string    20.166M i/100ms
  Hash#fetch, string    17.947M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.209B (± 2.4%) i/s -     16.238B in   5.062750s
  Hash#fetch, symbol      3.211B (± 2.6%) i/s -     16.248B in   5.064582s
     Hash#[], string    199.601M (± 2.6%) i/s -      1.008B in   5.055255s
  Hash#fetch, string    178.573M (± 1.5%) i/s -    897.371M in   5.026339s

Comparison:
  Hash#fetch, symbol: 3210561034.5 i/s
     Hash#[], symbol: 3209393218.0 i/s - same-ish: difference falls within error
     Hash#[], string: 199600795.0 i/s - 16.08x  (± 0.00) slower
  Hash#fetch, string: 178573368.1 i/s - 17.98x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    92.117M i/100ms
             Hash#[]    90.879M i/100ms
          Hash#[] ||    91.349M i/100ms
          Hash#[] &&    91.915M i/100ms
          Hash#fetch    92.331M i/100ms
 Hash#fetch fallback    91.667M i/100ms
Calculating -------------------------------------
            Hash#dig    920.131M (± 1.6%) i/s -      4.606B in   5.007068s
             Hash#[]    920.564M (± 1.3%) i/s -      4.635B in   5.035750s
          Hash#[] ||    916.838M (± 1.9%) i/s -      4.659B in   5.083315s
          Hash#[] &&    921.695M (± 0.9%) i/s -      4.688B in   5.086338s
          Hash#fetch    914.607M (± 4.6%) i/s -      4.617B in   5.063010s
 Hash#fetch fallback    919.253M (± 1.5%) i/s -      4.675B in   5.086931s

Comparison:
          Hash#[] &&: 921694825.2 i/s
             Hash#[]: 920564467.6 i/s - same-ish: difference falls within error
            Hash#dig: 920130596.5 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 919252559.8 i/s - same-ish: difference falls within error
          Hash#[] ||: 916838333.8 i/s - same-ish: difference falls within error
          Hash#fetch: 914607478.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   314.742M i/100ms
  Hash#fetch + block   317.745M i/100ms
    Hash#fetch + arg   323.070M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.184B (± 2.8%) i/s -     16.052B in   5.045331s
  Hash#fetch + block      3.227B (± 0.4%) i/s -     16.205B in   5.022528s
    Hash#fetch + arg      3.195B (± 2.9%) i/s -     16.154B in   5.059947s

Comparison:
  Hash#fetch + block: 3226524902.7 i/s
    Hash#fetch + arg: 3195311919.6 i/s - same-ish: difference falls within error
  Hash#fetch + const: 3184114710.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    26.024k i/100ms
         sort + to_h     6.530k i/100ms
Calculating -------------------------------------
      sort_by + to_h    500.865k (±10.3%) i/s -      2.472M in   5.007796s
         sort + to_h    204.165k (±12.2%) i/s -    999.090k in   5.003559s

Comparison:
      sort_by + to_h:   500864.7 i/s
         sort + to_h:   204164.7 i/s - 2.45x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   207.690k i/100ms
       Hash#each_key   216.338k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.062M (±10.4%) i/s -     10.177M in   5.047001s
       Hash#each_key      2.240M (± 3.1%) i/s -     11.250M in   5.027596s

Comparison:
       Hash#each_key:  2239828.2 i/s
      Hash#keys.each:  2061845.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   301.000  i/100ms
           Hash#key?    12.578M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      3.037k (±12.0%) i/s -     15.050k in   5.049429s
           Hash#key?    126.643M (± 2.0%) i/s -    641.491M in   5.067635s

Comparison:
           Hash#key?: 126642602.3 i/s
  Hash#keys.include?:     3037.0 i/s - 41699.53x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    46.130k i/100ms
            Hash#[]=    62.410k i/100ms
Calculating -------------------------------------
         Hash#merge!    601.983k (± 9.3%) i/s -      3.045M in   5.112966s
            Hash#[]=    631.413k (± 7.5%) i/s -      3.183M in   5.082473s

Comparison:
            Hash#[]=:   631413.4 i/s
         Hash#merge!:   601982.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        35.566k i/100ms
      Hash#merge({})    19.389k i/100ms
 Hash#dup#merge!({})    31.604k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        389.014k (±11.5%) i/s -      1.921M in   5.014919s
      Hash#merge({})    196.257k (± 9.0%) i/s -    988.839k in   5.094547s
 Hash#dup#merge!({})    310.162k (± 9.8%) i/s -      1.549M in   5.056758s

Comparison:
{}#merge!(Hash) do end:   389014.5 i/s
 Hash#dup#merge!({}):   310162.3 i/s - 1.25x  (± 0.00) slower
      Hash#merge({}):   196257.4 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   315.073M i/100ms
          Hash#merge   318.140M i/100ms
Calculating -------------------------------------
        Hash#**other      3.202B (± 2.5%) i/s -     16.069B in   5.021078s
          Hash#merge      3.219B (± 1.3%) i/s -     16.225B in   5.040683s

Comparison:
          Hash#merge: 3219412054.2 i/s
        Hash#**other: 3202396180.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   739.000  i/100ms
         Hash#merge!    61.635k i/100ms
Calculating -------------------------------------
          Hash#merge     13.178k (±12.4%) i/s -     65.032k in   5.033793s
         Hash#merge!    613.600k (± 8.7%) i/s -      3.082M in   5.063559s

Comparison:
         Hash#merge!:   613599.8 i/s
          Hash#merge:    13178.0 i/s - 46.56x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.735M i/100ms
Array#each               1.367M i/100ms
Array#each_w/_object     1.395M i/100ms
Hash#select-include      2.529M i/100ms
Calculating -------------------------------------
Hash#native-slice        18.839M (± 6.5%) i/s -     93.689M in   5.000274s
Array#each               14.815M (± 5.7%) i/s -     73.842M in   5.007136s
Array#each_w/_object     14.620M (± 8.6%) i/s -     72.536M in   5.016949s
Hash#select-include      24.200M (± 6.7%) i/s -    121.386M in   5.045001s

Comparison:
Hash#select-include : 24200495.7 i/s
Hash#native-slice   : 18839427.7 i/s - 1.28x  (± 0.00) slower
Array#each          : 14814539.2 i/s - 1.63x  (± 0.00) slower
Array#each_w/_object: 14620067.9 i/s - 1.66x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   299.000  i/100ms
         Hash#value?   667.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      3.129k (± 9.9%) i/s -     15.548k in   5.033446s
         Hash#value?      6.639k (± 0.5%) i/s -     33.350k in   5.023759s

Comparison:
         Hash#value?:     6638.7 i/s
Hash#values.include?:     3129.2 i/s - 2.12x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   322.690M i/100ms
                send   315.896M i/100ms
      method_missing   322.655M i/100ms
Calculating -------------------------------------
                call      3.204B (± 2.1%) i/s -     16.135B in   5.038147s
                send      3.222B (± 1.4%) i/s -     16.111B in   5.000930s
      method_missing      3.193B (± 3.0%) i/s -     16.133B in   5.057762s

Comparison:
                send: 3222267516.2 i/s
                call: 3203973309.6 i/s - same-ish: difference falls within error
      method_missing: 3192890558.0 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    66.211k i/100ms
      Symbol#to_proc    73.254k i/100ms
Calculating -------------------------------------
               Block    772.116k (±12.8%) i/s -      3.840M in   5.082805s
      Symbol#to_proc    779.450k (±12.0%) i/s -      3.882M in   5.070035s

Comparison:
      Symbol#to_proc:   779449.6 i/s
               Block:   772115.7 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   317.433M i/100ms
       block + yield   321.949M i/100ms
        unused block   322.560M i/100ms
               yield   304.005M i/100ms
Calculating -------------------------------------
          block.call      3.220B (± 1.0%) i/s -     16.189B in   5.028003s
       block + yield      3.221B (± 1.0%) i/s -     16.419B in   5.097937s
        unused block      3.183B (± 3.5%) i/s -     16.128B in   5.072959s
               yield      3.221B (± 1.5%) i/s -     16.112B in   5.003206s

Comparison:
               yield: 3221212105.0 i/s
       block + yield: 3221098570.0 i/s - same-ish: difference falls within error
          block.call: 3220104554.3 i/s - same-ish: difference falls within error
        unused block: 3183411431.4 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     5.208k i/100ms
      range#include?   174.000  i/100ms
       range#member?   227.000  i/100ms
       plain compare     9.159k i/100ms
Calculating -------------------------------------
        range#cover?     62.239k (±22.7%) i/s -    286.440k in   5.003830s
      range#include?      2.818k (±31.2%) i/s -     12.528k in   5.025910s
       range#member?      2.784k (±30.6%) i/s -     12.712k in   5.140920s
       plain compare     99.317k (±30.7%) i/s -    439.632k in   5.053640s

Comparison:
       plain compare:    99317.4 i/s
        range#cover?:    62238.9 i/s - same-ish: difference falls within error
      range#include?:     2818.0 i/s - 35.24x  (± 0.00) slower
       range#member?:     2784.2 i/s - 35.67x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    16.878M i/100ms
           String#=~    15.387M i/100ms
          Regexp#===    15.422M i/100ms
        String#match    12.807M i/100ms
Calculating -------------------------------------
       String#match?    168.163M (± 1.9%) i/s -    843.889M in   5.020319s
           String#=~    153.757M (± 2.4%) i/s -    769.367M in   5.007026s
          Regexp#===    153.235M (± 4.0%) i/s -    771.077M in   5.042011s
        String#match    128.219M (± 2.0%) i/s -    653.148M in   5.096297s

Comparison:
       String#match?: 168163155.8 i/s
           String#=~: 153757076.8 i/s - 1.09x  (± 0.00) slower
          Regexp#===: 153235081.0 i/s - 1.10x  (± 0.00) slower
        String#match: 128218674.1 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.669M i/100ms
      String#casecmp     4.733M i/100ms
Calculating -------------------------------------
String#downcase + ==     30.678M (± 6.9%) i/s -    154.814M in   5.078013s
      String#casecmp     47.720M (± 3.7%) i/s -    241.393M in   5.065574s

Comparison:
      String#casecmp: 47720005.8 i/s
String#downcase + ==: 30678255.7 i/s - 1.56x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+    10.231M i/100ms
       String#concat    10.603M i/100ms
       String#append    10.415M i/100ms
         "foo" "bar"   310.960M i/100ms
  "#{'foo'}#{'bar'}"    10.559M i/100ms
Calculating -------------------------------------
            String#+    104.617M (± 5.4%) i/s -    521.777M in   5.007936s
       String#concat    104.131M (± 5.9%) i/s -    519.544M in   5.015235s
       String#append    102.558M (± 6.4%) i/s -    510.344M in   5.002813s
         "foo" "bar"      3.215B (± 1.6%) i/s -     16.170B in   5.031574s
  "#{'foo'}#{'bar'}"    102.824M (± 8.4%) i/s -    517.371M in   5.084016s

Comparison:
         "foo" "bar": 3214614944.9 i/s
            String#+: 104616649.0 i/s - 30.73x  (± 0.00) slower
       String#concat: 104131354.3 i/s - 30.87x  (± 0.00) slower
  "#{'foo'}#{'bar'}": 102824154.2 i/s - 31.26x  (± 0.00) slower
       String#append: 102557565.1 i/s - 31.34x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   318.094M i/100ms
          String#dup   321.095M i/100ms
Calculating -------------------------------------
           String#+@      3.216B (± 1.3%) i/s -     16.223B in   5.044785s
          String#dup      3.215B (± 1.7%) i/s -     16.376B in   5.095764s

Comparison:
           String#+@: 3216322845.3 i/s
          String#dup: 3214633698.4 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.222M i/100ms
       String#match?     1.525M i/100ms
    String#end_with?    11.049M i/100ms
Calculating -------------------------------------
           String#=~     12.809M (± 2.9%) i/s -     64.787M in   5.062502s
       String#match?     15.055M (± 2.2%) i/s -     76.231M in   5.066167s
    String#end_with?    110.002M (± 2.8%) i/s -    552.434M in   5.026181s

Comparison:
    String#end_with?: 110002252.2 i/s
       String#match?: 15054921.9 i/s - 7.31x  (± 0.00) slower
           String#=~: 12808751.0 i/s - 8.59x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   816.991k i/100ms
          String#sub   933.454k i/100ms
String#dup["string"]=
                        10.409M i/100ms
Calculating -------------------------------------
         String#gsub      8.715M (± 8.6%) i/s -     43.301M in   5.014028s
          String#sub     10.139M (± 9.4%) i/s -     50.407M in   5.023228s
String#dup["string"]=
                        102.249M (± 7.0%) i/s -    510.038M in   5.028822s

Comparison:
String#dup["string"]=: 102249434.3 i/s
          String#sub: 10139257.8 i/s - 10.08x  (± 0.00) slower
         String#gsub:  8715395.9 i/s - 11.73x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   366.922k i/100ms
           String#tr   147.752k i/100ms
Calculating -------------------------------------
         String#gsub      4.212M (± 7.7%) i/s -     20.915M in   5.003338s
           String#tr      1.486M (± 6.4%) i/s -      7.535M in   5.100406s

Comparison:
         String#gsub:  4212020.3 i/s
           String#tr:  1485728.0 i/s - 2.83x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   322.323M i/100ms
         With Freeze   319.461M i/100ms
Calculating -------------------------------------
      Without Freeze      3.197B (± 2.0%) i/s -     16.116B in   5.042588s
         With Freeze      3.202B (± 2.8%) i/s -     16.293B in   5.093184s

Comparison:
         With Freeze: 3201627473.2 i/s
      Without Freeze: 3197329791.3 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     9.157k i/100ms
      String#squeeze    81.102k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    154.020k (±10.3%) i/s -    760.031k in   5.012808s
      String#squeeze    838.199k (± 6.3%) i/s -      4.217M in   5.052663s

Comparison:
      String#squeeze:   838198.8 i/s
 String#gsub/regex+/:   154019.7 i/s - 5.44x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     3.761M i/100ms
       String#match?     5.717M i/100ms
  String#start_with?    12.927M i/100ms
Calculating -------------------------------------
           String#=~     51.722M (± 3.3%) i/s -    259.480M in   5.022701s
       String#match?     56.852M (± 1.4%) i/s -    285.826M in   5.028544s
  String#start_with?    127.786M (± 2.7%) i/s -    646.368M in   5.062082s

Comparison:
  String#start_with?: 127785590.5 i/s
       String#match?: 56852053.3 i/s - 2.25x  (± 0.00) slower
           String#=~: 51721546.8 i/s - 2.47x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    62.936k i/100ms
    String#[0, n] ==   284.548k i/100ms
   String#[RANGE] ==   427.515k i/100ms
   String#[0...n] ==   266.997k i/100ms
Calculating -------------------------------------
  String#start_with?      6.730M (± 1.3%) i/s -     33.671M in   5.003930s
    String#[0, n] ==      2.952M (± 3.0%) i/s -     14.796M in   5.017328s
   String#[RANGE] ==      4.431M (± 2.5%) i/s -     22.231M in   5.019944s
   String#[0...n] ==      2.576M (± 6.4%) i/s -     12.816M in   5.004014s

Comparison:
  String#start_with?:  6730246.0 i/s
   String#[RANGE] ==:  4431287.1 i/s - 1.52x  (± 0.00) slower
    String#[0, n] ==:  2951934.1 i/s - 2.28x  (± 0.00) slower
   String#[0...n] ==:  2575804.0 i/s - 2.61x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    10.335M i/100ms
 String#sub!'string'   942.245k i/100ms
String#gsub!'string'   900.397k i/100ms
  String#[/regexp/]=     4.018M i/100ms
 String#sub!/regexp/     2.639M i/100ms
String#gsub!/regexp/   865.454k i/100ms
Calculating -------------------------------------
  String#['string']=    103.121M (± 3.1%) i/s -    516.749M in   5.016257s
 String#sub!'string'     10.638M (±10.2%) i/s -     52.766M in   5.023676s
String#gsub!'string'      9.197M (± 7.6%) i/s -     45.920M in   5.031976s
  String#[/regexp/]=     40.251M (± 1.3%) i/s -    204.903M in   5.091563s
 String#sub!/regexp/     26.490M (± 4.1%) i/s -    134.604M in   5.090576s
String#gsub!/regexp/      8.779M (± 8.3%) i/s -     44.138M in   5.070638s

Comparison:
  String#['string']=: 103121102.0 i/s
  String#[/regexp/]=: 40251357.0 i/s - 2.56x  (± 0.00) slower
 String#sub!/regexp/: 26489806.7 i/s - 3.89x  (± 0.00) slower
 String#sub!'string': 10637661.3 i/s - 9.69x  (± 0.00) slower
String#gsub!'string':  9197287.7 i/s - 11.21x  (± 0.00) slower
String#gsub!/regexp/:  8779190.4 i/s - 11.75x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     3.119M i/100ms
        String#chomp     5.717M i/100ms
String#delete_suffix    14.483M i/100ms
Calculating -------------------------------------
          String#sub     32.341M (± 5.6%) i/s -    162.182M in   5.032288s
        String#chomp     57.437M (± 1.4%) i/s -    291.549M in   5.076974s
String#delete_suffix    152.662M (±10.1%) i/s -    753.093M in   5.000063s

Comparison:
String#delete_suffix: 152661594.9 i/s
        String#chomp: 57437092.9 i/s - 2.66x  (± 0.00) slower
          String#sub: 32340529.2 i/s - 4.72x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   316.788M i/100ms
          String#sub    20.476M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.216B (± 0.8%) i/s -     16.156B in   5.024419s
          String#sub    203.642M (± 1.6%) i/s -      1.024B in   5.028717s

Comparison:
String#delete_prefix: 3215727262.4 i/s
          String#sub: 203641506.5 i/s - 15.79x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.895M i/100ms
    String#unpack[0]     1.930M i/100ms
Calculating -------------------------------------
      String#unpack1     20.335M (± 3.7%) i/s -    102.335M in   5.039663s
    String#unpack[0]     20.396M (± 3.4%) i/s -    102.293M in   5.021638s

Comparison:
    String#unpack[0]: 20396092.9 i/s
      String#unpack1: 20334539.6 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.2.0-dev-a9674eee, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    40.652k i/100ms
          Time.parse   319.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    715.575k (±27.4%) i/s -      3.374M in   5.055401s
          Time.parse      6.628k (± 9.7%) i/s -     32.857k in   5.027252s

Comparison:
        Time.iso8601:   715574.9 i/s
          Time.parse:     6628.2 i/s - 107.96x  (± 0.00) slower

