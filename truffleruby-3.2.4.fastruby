$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       177.802M i/100ms
Function with splat arguments
                         1.921k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.155B (± 5.8%) i/s -     15.824B in   5.036009s
Function with splat arguments
                         20.781k (± 9.0%) i/s -    103.734k in   5.044698s

Comparison:
Function with single Array argument: 3154966874.7 i/s
Function with splat arguments:    20781.1 i/s - 151818.71x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   317.721M i/100ms
Sequential Assignment
                       319.263M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.195B (± 2.3%) i/s -     16.204B in   5.074706s
Sequential Assignment
                          3.194B (± 2.7%) i/s -     15.963B in   5.001925s

Comparison:
 Parallel Assignment: 3194775059.9 i/s
Sequential Assignment: 3193920118.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   316.168M i/100ms
       attr_accessor   315.464M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.198B (± 2.6%) i/s -     16.125B in   5.045801s
       attr_accessor      3.213B (± 1.5%) i/s -     16.089B in   5.007955s

Comparison:
       attr_accessor: 3213349193.2 i/s
   getter_and_setter: 3198029349.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    11.578k i/100ms
         respond_to?   323.187M i/100ms
Calculating -------------------------------------
      begin...rescue    103.052k (± 7.2%) i/s -    521.010k in   5.095878s
         respond_to?      3.224B (± 1.2%) i/s -     16.159B in   5.012716s

Comparison:
         respond_to?: 3224166922.7 i/s
      begin...rescue:   103052.2 i/s - 31286.75x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   321.966M i/100ms
             &method    18.095M i/100ms
Calculating -------------------------------------
              normal      3.179B (± 6.6%) i/s -     15.776B in   5.000787s
             &method    182.736M (± 1.8%) i/s -    922.839M in   5.051747s

Comparison:
              normal: 3178668206.3 i/s
             &method: 182735597.1 i/s - 17.39x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       146.000  i/100ms
       define_method   148.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          4.161k (±51.4%) i/s -      7.884k in   6.855711s
       define_method     12.677k (±38.1%) i/s -     12.136k in   5.157093s

Comparison:
       define_method:    12677.2 i/s
module_eval with string:     4161.2 i/s - 3.05x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   274.334k i/100ms
       Kernel#format   187.898k i/100ms
            String#%   110.245k i/100ms
Calculating -------------------------------------
         Float#round      2.723M (± 6.4%) i/s -     13.717M in   5.071388s
       Kernel#format      1.862M (± 3.3%) i/s -      9.395M in   5.052019s
            String#%      1.112M (± 4.6%) i/s -      5.622M in   5.070380s

Comparison:
         Float#round:  2722640.0 i/s
       Kernel#format:  1861750.6 i/s - 1.46x  (± 0.00) slower
            String#%:  1111507.6 i/s - 2.45x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   315.137M i/100ms
          OpenStruct   319.575M i/100ms
Calculating -------------------------------------
                Hash      3.194B (± 2.7%) i/s -     16.072B in   5.036705s
          OpenStruct      3.226B (± 0.4%) i/s -     16.298B in   5.052851s

Comparison:
          OpenStruct: 3225626920.8 i/s
                Hash: 3193552702.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   322.735M i/100ms
          OpenStruct     4.272k i/100ms
Calculating -------------------------------------
                Hash      3.108B (± 8.6%) i/s -     15.491B in   5.039078s
          OpenStruct     42.790k (±25.0%) i/s -    200.784k in   5.079227s

Comparison:
                Hash: 3108051396.6 i/s
          OpenStruct:    42790.3 i/s - 72634.42x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   970.438k i/100ms
  ancestors.include?   221.277k i/100ms
Calculating -------------------------------------
  less than or equal     10.456M (± 6.4%) i/s -     52.404M in   5.031184s
  ancestors.include?      2.276M (± 6.4%) i/s -     11.506M in   5.085371s

Comparison:
  less than or equal: 10456021.8 i/s
  ancestors.include?:  2276182.9 i/s - 4.59x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     32.146  (± 3.1%) i/s -    161.000  in   5.013134s
         Kernel loop     32.146  (± 3.1%) i/s -    161.000  in   5.011202s

Comparison:
         Kernel loop:       32.1 i/s
          While Loop:       32.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   317.127M i/100ms
         Array#first   322.211M i/100ms
Calculating -------------------------------------
           Array#[0]      3.213B (± 0.7%) i/s -     16.173B in   5.033827s
         Array#first      3.196B (± 2.6%) i/s -     16.111B in   5.043917s

Comparison:
           Array#[0]: 3213128706.6 i/s
         Array#first: 3196429776.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   319.904M i/100ms
          Array#last   319.062M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.173B (± 2.9%) i/s -     15.995B in   5.045882s
          Array#last      3.193B (± 2.2%) i/s -     16.272B in   5.098394s

Comparison:
          Array#last: 3193338411.1 i/s
          Array#[-1]: 3172741173.7 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   912.339k i/100ms
Calculating -------------------------------------
                find     13.743  (± 0.0%) i/s -     69.000  in   5.023423s
             bsearch      9.167M (± 3.3%) i/s -     46.529M in   5.081687s

Comparison:
             bsearch:  9166550.2 i/s
                find:       13.7 i/s - 666988.85x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.213  (± 0.0%) i/s -      2.000  in   9.405351s
        Array#insert      1.392  (± 0.0%) i/s -      7.000  in   5.028281s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.2 i/s - 6.55x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   321.283M i/100ms
          Array#size   321.175M i/100ms
         Array#count   321.626M i/100ms
Calculating -------------------------------------
        Array#length      3.203B (± 2.3%) i/s -     16.064B in   5.018029s
          Array#size      3.201B (± 2.2%) i/s -     16.059B in   5.018566s
         Array#count      3.198B (± 2.5%) i/s -     16.081B in   5.031313s

Comparison:
        Array#length: 3203052716.5 i/s
          Array#size: 3201461406.9 i/s - same-ish: difference falls within error
         Array#count: 3198492584.4 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    37.106k i/100ms
        Array#sample     3.874M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    374.528k (± 2.2%) i/s -      1.892M in   5.055304s
        Array#sample     38.754M (± 1.5%) i/s -    197.575M in   5.099536s

Comparison:
        Array#sample: 38753564.1 i/s
 Array#shuffle.first:   374528.4 i/s - 103.47x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   944.000  i/100ms
          Date.parse   469.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     16.947k (±37.5%) i/s -     74.576k in   5.009679s
          Date.parse      8.465k (±21.2%) i/s -     39.865k in   5.029802s

Comparison:
        Date.iso8601:    16946.7 i/s
          Date.parse:     8465.2 i/s - 2.00x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   290.202k i/100ms
           Array#map     1.865M i/100ms
Calculating -------------------------------------
   Array#each + push      3.180M (± 6.5%) i/s -     15.961M in   5.041712s
           Array#map     19.306M (± 8.5%) i/s -     96.981M in   5.067349s

Comparison:
           Array#map: 19305901.4 i/s
   Array#each + push:  3180271.2 i/s - 6.07x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    11.772M i/100ms
               #each    34.960M i/100ms
Calculating -------------------------------------
            For loop    118.194M (± 1.4%) i/s -    600.379M in   5.080699s
               #each    348.319M (± 1.9%) i/s -      1.748B in   5.020311s

Comparison:
               #each: 348319260.8 i/s
            For loop: 118193657.0 i/s - 2.95x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.351M i/100ms
     each_with_index     2.361M i/100ms
Calculating -------------------------------------
          While Loop     14.616M (± 3.8%) i/s -     74.309M in   5.091560s
     each_with_index     26.365M (± 7.7%) i/s -    132.232M in   5.046543s

Comparison:
     each_with_index: 26364748.7 i/s
          While Loop: 14616081.3 i/s - 1.80x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   245.283k i/100ms
      inject to_proc   310.246k i/100ms
        inject block   303.293k i/100ms
Calculating -------------------------------------
       inject symbol      3.126M (± 0.2%) i/s -     15.698M in   5.021787s
      inject to_proc      3.109M (± 2.2%) i/s -     15.823M in   5.091768s
        inject block      3.067M (± 2.0%) i/s -     15.468M in   5.045663s

Comparison:
       inject symbol:  3126016.0 i/s
      inject to_proc:  3109156.4 i/s - same-ish: difference falls within error
        inject block:  3066885.1 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    22.665k i/100ms
   Array#map.flatten    24.929k i/100ms
      Array#flat_map    56.985k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    264.958k (± 6.5%) i/s -      1.337M in   5.071486s
   Array#map.flatten    270.095k (± 6.1%) i/s -      1.346M in   5.002931s
      Array#flat_map    579.219k (± 6.6%) i/s -      2.906M in   5.045852s

Comparison:
      Array#flat_map:   579219.3 i/s
   Array#map.flatten:   270094.7 i/s - 2.14x  (± 0.00) slower
Array#map.flatten(1):   264958.5 i/s - 2.19x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   312.831k i/100ms
  Array#reverse_each     2.323M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.527M (± 3.3%) i/s -     17.831M in   5.062036s
  Array#reverse_each     23.497M (± 3.1%) i/s -    118.484M in   5.046493s

Comparison:
  Array#reverse_each: 23497130.7 i/s
  Array#reverse.each:  3526721.0 i/s - 6.66x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       857.675k i/100ms
   Enumerable#detect     4.652M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.174M (± 8.0%) i/s -    202.411M in  20.079126s
   Enumerable#detect     46.536M (± 2.4%) i/s -    930.408M in  20.006167s

Comparison:
   Enumerable#detect: 46535712.2 i/s
Enumerable#select.first: 10174350.1 i/s - 4.57x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       307.217k i/100ms
Enumerable#select.last
                       524.579k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.520M (± 3.8%) i/s -     17.819M in   5.069495s
Enumerable#select.last
                          5.529M (± 5.8%) i/s -     28.327M in   5.149843s

Comparison:
Enumerable#select.last:  5529292.0 i/s
Enumerable#reverse.detect:  3520253.2 i/s - 1.57x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.878k i/100ms
  Enumerable#sort_by     4.196k i/100ms
     Enumerable#sort     5.377k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         22.089k (±47.1%) i/s -     85.316k in   5.065599s
  Enumerable#sort_by     36.484k (±30.3%) i/s -    146.860k in   5.090517s
     Enumerable#sort     55.871k (± 6.1%) i/s -    279.604k in   5.028292s

Comparison:
     Enumerable#sort:    55870.6 i/s
  Enumerable#sort_by:    36483.5 i/s - 1.53x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    22088.9 i/s - 2.53x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   968.011k i/100ms
Enumerable#sort_by...first
                         8.749k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      9.609M (± 2.3%) i/s -     48.401M in   5.039655s
Enumerable#sort_by...first
                        105.038k (± 6.8%) i/s -    524.940k in   5.033932s

Comparison:
   Enumerable#min_by:  9609215.8 i/s
Enumerable#sort_by...first:   105037.9 i/s - 91.48x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   631.196k i/100ms
            Hash#dup   741.175k i/100ms
Calculating -------------------------------------
              Hash[]      7.235M (± 9.8%) i/s -     35.978M in   5.037965s
            Hash#dup      7.443M (±10.1%) i/s -     37.059M in   5.041643s

Comparison:
            Hash#dup:  7442814.7 i/s
              Hash[]:  7234752.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   321.230M i/100ms
  Hash#fetch, symbol   322.142M i/100ms
     Hash#[], string    29.370M i/100ms
  Hash#fetch, string    26.751M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.208B (± 2.3%) i/s -     16.061B in   5.009251s
  Hash#fetch, symbol      3.216B (± 1.3%) i/s -     16.107B in   5.008622s
     Hash#[], string    288.617M (± 4.0%) i/s -      1.469B in   5.097153s
  Hash#fetch, string    266.206M (± 3.4%) i/s -      1.338B in   5.031235s

Comparison:
  Hash#fetch, symbol: 3216446054.3 i/s
     Hash#[], symbol: 3208236963.0 i/s - same-ish: difference falls within error
     Hash#[], string: 288617246.1 i/s - 11.14x  (± 0.00) slower
  Hash#fetch, string: 266206480.5 i/s - 12.08x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    92.241M i/100ms
             Hash#[]    92.241M i/100ms
          Hash#[] ||    91.854M i/100ms
          Hash#[] &&    91.690M i/100ms
          Hash#fetch    91.672M i/100ms
 Hash#fetch fallback    92.291M i/100ms
Calculating -------------------------------------
            Hash#dig    919.935M (± 1.5%) i/s -      4.612B in   5.014747s
             Hash#[]    918.906M (± 1.8%) i/s -      4.612B in   5.020871s
          Hash#[] ||    918.574M (± 2.2%) i/s -      4.593B in   5.002445s
          Hash#[] &&    921.472M (± 1.1%) i/s -      4.676B in   5.075326s
          Hash#fetch    916.108M (± 2.8%) i/s -      4.584B in   5.007831s
 Hash#fetch fallback    917.713M (± 1.9%) i/s -      4.615B in   5.030306s

Comparison:
          Hash#[] &&: 921472014.3 i/s
            Hash#dig: 919934828.4 i/s - same-ish: difference falls within error
             Hash#[]: 918906290.6 i/s - same-ish: difference falls within error
          Hash#[] ||: 918574155.9 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 917713412.2 i/s - same-ish: difference falls within error
          Hash#fetch: 916107596.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   320.914M i/100ms
  Hash#fetch + block   313.100M i/100ms
    Hash#fetch + arg   312.309M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.212B (± 1.9%) i/s -     16.367B in   5.097233s
  Hash#fetch + block      3.219B (± 1.2%) i/s -     16.281B in   5.058332s
    Hash#fetch + arg      3.207B (± 2.3%) i/s -     16.240B in   5.067272s

Comparison:
  Hash#fetch + block: 3219157971.8 i/s
  Hash#fetch + const: 3212083129.8 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 3206774391.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    38.371k i/100ms
         sort + to_h     6.981k i/100ms
Calculating -------------------------------------
      sort_by + to_h    603.099k (± 7.3%) i/s -      3.031M in   5.054111s
         sort + to_h    253.469k (±10.4%) i/s -      1.243M in   5.001128s

Comparison:
      sort_by + to_h:   603099.1 i/s
         sort + to_h:   253468.7 i/s - 2.38x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   206.594k i/100ms
       Hash#each_key   223.899k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.097M (±10.8%) i/s -     10.330M in   5.038266s
       Hash#each_key      2.204M (± 6.5%) i/s -     10.971M in   5.012649s

Comparison:
       Hash#each_key:  2204139.5 i/s
      Hash#keys.each:  2097041.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   272.000  i/100ms
           Hash#key?    12.836M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      3.011k (±12.5%) i/s -     14.960k in   5.080406s
           Hash#key?    129.277M (± 1.2%) i/s -    654.618M in   5.064468s

Comparison:
           Hash#key?: 129277374.3 i/s
  Hash#keys.include?:     3011.4 i/s - 42929.90x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    46.057k i/100ms
            Hash#[]=    60.671k i/100ms
Calculating -------------------------------------
         Hash#merge!    566.739k (± 8.9%) i/s -      2.809M in   5.011779s
            Hash#[]=    622.217k (± 9.2%) i/s -      3.094M in   5.027323s

Comparison:
            Hash#[]=:   622217.5 i/s
         Hash#merge!:   566739.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        37.315k i/100ms
      Hash#merge({})    18.356k i/100ms
 Hash#dup#merge!({})    30.263k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        400.901k (± 8.7%) i/s -      2.015M in   5.067569s
      Hash#merge({})    199.051k (± 8.4%) i/s -    991.224k in   5.036463s
 Hash#dup#merge!({})    305.047k (± 9.9%) i/s -      1.513M in   5.016328s

Comparison:
{}#merge!(Hash) do end:   400900.7 i/s
 Hash#dup#merge!({}):   305046.7 i/s - 1.31x  (± 0.00) slower
      Hash#merge({}):   199051.5 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   322.672M i/100ms
          Hash#merge   310.829M i/100ms
Calculating -------------------------------------
        Hash#**other      3.193B (± 2.3%) i/s -     16.134B in   5.056299s
          Hash#merge      3.204B (± 2.4%) i/s -     16.163B in   5.047094s

Comparison:
          Hash#merge: 3204445898.4 i/s
        Hash#**other: 3192640560.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   965.000  i/100ms
         Hash#merge!    61.151k i/100ms
Calculating -------------------------------------
          Hash#merge     11.837k (±11.7%) i/s -     58.865k in   5.052736s
         Hash#merge!    593.575k (± 7.4%) i/s -      2.996M in   5.076797s

Comparison:
         Hash#merge!:   593575.5 i/s
          Hash#merge:    11837.3 i/s - 50.14x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.526M i/100ms
Array#each               1.344M i/100ms
Array#each_w/_object     1.412M i/100ms
Hash#select-include      2.317M i/100ms
Calculating -------------------------------------
Hash#native-slice        18.861M (± 7.6%) i/s -     94.619M in   5.061580s
Array#each               14.840M (± 4.2%) i/s -     75.291M in   5.083030s
Array#each_w/_object     15.769M (± 4.4%) i/s -     79.096M in   5.025935s
Hash#select-include      24.374M (± 5.2%) i/s -    122.782M in   5.053431s

Comparison:
Hash#select-include : 24374261.7 i/s
Hash#native-slice   : 18861385.7 i/s - 1.29x  (± 0.00) slower
Array#each_w/_object: 15769427.9 i/s - 1.55x  (± 0.00) slower
Array#each          : 14840210.4 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   257.000  i/100ms
         Hash#value?   797.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      3.051k (±12.6%) i/s -     14.906k in   5.003216s
         Hash#value?      7.898k (± 0.6%) i/s -     39.850k in   5.045517s

Comparison:
         Hash#value?:     7898.4 i/s
Hash#values.include?:     3051.0 i/s - 2.59x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   317.351M i/100ms
                send   316.647M i/100ms
      method_missing   310.438M i/100ms
Calculating -------------------------------------
                call      3.212B (± 1.5%) i/s -     16.185B in   5.039592s
                send      3.214B (± 1.8%) i/s -     16.149B in   5.026712s
      method_missing      3.205B (± 1.9%) i/s -     16.143B in   5.039238s

Comparison:
                send: 3213710970.2 i/s
                call: 3212339194.2 i/s - same-ish: difference falls within error
      method_missing: 3204599436.3 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    44.551k i/100ms
      Symbol#to_proc    73.880k i/100ms
Calculating -------------------------------------
               Block    765.775k (±12.7%) i/s -      3.787M in   5.064846s
      Symbol#to_proc    745.351k (±12.1%) i/s -      3.694M in   5.039838s

Comparison:
               Block:   765774.8 i/s
      Symbol#to_proc:   745350.6 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   308.285M i/100ms
       block + yield   318.194M i/100ms
        unused block   316.167M i/100ms
               yield   322.182M i/100ms
Calculating -------------------------------------
          block.call      3.206B (± 2.2%) i/s -     16.031B in   5.002755s
       block + yield      3.199B (± 2.2%) i/s -     16.228B in   5.074736s
        unused block      3.212B (± 1.8%) i/s -     16.125B in   5.022373s
               yield      3.203B (± 2.6%) i/s -     16.109B in   5.033158s

Comparison:
        unused block: 3211730551.2 i/s
          block.call: 3206034029.9 i/s - same-ish: difference falls within error
               yield: 3203006740.7 i/s - same-ish: difference falls within error
       block + yield: 3199415866.3 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     4.709k i/100ms
      range#include?   180.000  i/100ms
       range#member?   226.000  i/100ms
       plain compare     7.501k i/100ms
Calculating -------------------------------------
        range#cover?     55.059k (±27.1%) i/s -    249.577k in   5.049550s
      range#include?      2.477k (±29.2%) i/s -     10.980k in   5.030806s
       range#member?      2.270k (±26.8%) i/s -     10.622k in   5.165439s
       plain compare     84.959k (±28.6%) i/s -    382.551k in   5.071648s

Comparison:
       plain compare:    84958.6 i/s
        range#cover?:    55059.1 i/s - same-ish: difference falls within error
      range#include?:     2477.0 i/s - 34.30x  (± 0.00) slower
       range#member?:     2269.7 i/s - 37.43x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    34.644M i/100ms
           String#=~    32.740M i/100ms
          Regexp#===    32.307M i/100ms
        String#match    31.497M i/100ms
Calculating -------------------------------------
       String#match?    343.304M (± 2.7%) i/s -      1.732B in   5.049458s
           String#=~    321.464M (± 1.7%) i/s -      1.637B in   5.093986s
          Regexp#===    319.920M (± 2.1%) i/s -      1.615B in   5.051785s
        String#match    313.901M (± 1.9%) i/s -      1.575B in   5.019047s

Comparison:
       String#match?: 343303906.1 i/s
           String#=~: 321463694.2 i/s - 1.07x  (± 0.00) slower
          Regexp#===: 319920067.5 i/s - 1.07x  (± 0.00) slower
        String#match: 313901054.2 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.638M i/100ms
      String#casecmp     4.413M i/100ms
Calculating -------------------------------------
String#downcase + ==     30.125M (± 7.7%) i/s -    150.393M in   5.032624s
      String#casecmp     46.991M (± 8.0%) i/s -    233.911M in   5.023764s

Comparison:
      String#casecmp: 46991078.3 i/s
String#downcase + ==: 30124970.8 i/s - 1.56x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     9.851M i/100ms
       String#concat     9.282M i/100ms
       String#append     9.955M i/100ms
         "foo" "bar"   321.905M i/100ms
  "#{'foo'}#{'bar'}"    10.032M i/100ms
Calculating -------------------------------------
            String#+    101.482M (± 3.4%) i/s -    512.263M in   5.053919s
       String#concat    101.588M (± 3.2%) i/s -    510.502M in   5.030532s
       String#append    100.751M (± 3.9%) i/s -    507.712M in   5.047427s
         "foo" "bar"      3.215B (± 1.2%) i/s -     16.095B in   5.007393s
  "#{'foo'}#{'bar'}"     99.749M (± 6.9%) i/s -    501.598M in   5.064354s

Comparison:
         "foo" "bar": 3214800414.7 i/s
       String#concat: 101588113.9 i/s - 31.65x  (± 0.00) slower
            String#+: 101482480.0 i/s - 31.68x  (± 0.00) slower
       String#append: 100751166.0 i/s - 31.91x  (± 0.00) slower
  "#{'foo'}#{'bar'}": 99748659.2 i/s - 32.23x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   316.679M i/100ms
          String#dup   317.083M i/100ms
Calculating -------------------------------------
           String#+@      3.221B (± 0.6%) i/s -     16.151B in   5.015058s
          String#dup      3.212B (± 1.6%) i/s -     16.171B in   5.036548s

Comparison:
           String#+@: 3220540828.8 i/s
          String#dup: 3211673884.6 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.453M i/100ms
       String#match?     1.764M i/100ms
    String#end_with?    10.702M i/100ms
Calculating -------------------------------------
           String#=~     14.240M (± 7.6%) i/s -     71.196M in   5.048345s
       String#match?     17.548M (± 2.1%) i/s -     88.221M in   5.029886s
    String#end_with?    106.478M (± 2.9%) i/s -    535.113M in   5.029938s

Comparison:
    String#end_with?: 106478351.9 i/s
       String#match?: 17547831.2 i/s - 6.07x  (± 0.00) slower
           String#=~: 14240428.9 i/s - 7.48x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   729.166k i/100ms
          String#sub   962.811k i/100ms
String#dup["string"]=
                        10.344M i/100ms
Calculating -------------------------------------
         String#gsub      8.374M (± 8.6%) i/s -     41.562M in   5.017414s
          String#sub      9.764M (±11.3%) i/s -     48.141M in   5.015346s
String#dup["string"]=
                        103.076M (± 4.4%) i/s -    517.187M in   5.030989s

Comparison:
String#dup["string"]=: 103076297.8 i/s
          String#sub:  9764498.9 i/s - 10.56x  (± 0.00) slower
         String#gsub:  8373939.2 i/s - 12.31x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   333.454k i/100ms
           String#tr   167.929k i/100ms
Calculating -------------------------------------
         String#gsub      4.120M (± 8.5%) i/s -     20.674M in   5.065687s
           String#tr      1.710M (± 7.4%) i/s -      8.564M in   5.037811s

Comparison:
         String#gsub:  4120202.9 i/s
           String#tr:  1710210.7 i/s - 2.41x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   319.649M i/100ms
         With Freeze   317.550M i/100ms
Calculating -------------------------------------
      Without Freeze      3.204B (± 2.0%) i/s -     16.302B in   5.090806s
         With Freeze      3.210B (± 1.8%) i/s -     16.195B in   5.047172s

Comparison:
         With Freeze: 3209909203.1 i/s
      Without Freeze: 3203600094.1 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     9.729k i/100ms
      String#squeeze    87.661k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    169.711k (± 9.9%) i/s -    836.694k in   5.003277s
      String#squeeze    858.599k (± 4.5%) i/s -      4.295M in   5.013030s

Comparison:
      String#squeeze:   858599.3 i/s
 String#gsub/regex+/:   169711.2 i/s - 5.06x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~    10.767M i/100ms
       String#match?    13.390M i/100ms
  String#start_with?    16.046M i/100ms
Calculating -------------------------------------
           String#=~    137.714M (± 7.6%) i/s -    689.076M in   5.046027s
       String#match?    134.231M (± 1.3%) i/s -    682.901M in   5.088461s
  String#start_with?    160.580M (± 1.9%) i/s -    818.370M in   5.098387s

Comparison:
  String#start_with?: 160580127.6 i/s
           String#=~: 137713937.4 i/s - 1.17x  (± 0.00) slower
       String#match?: 134230834.5 i/s - 1.20x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    91.526k i/100ms
    String#[0, n] ==   144.693k i/100ms
   String#[RANGE] ==   232.861k i/100ms
   String#[0...n] ==   141.560k i/100ms
Calculating -------------------------------------
  String#start_with?      7.158M (± 4.7%) i/s -     35.695M in   5.005293s
    String#[0, n] ==     13.322M (±11.3%) i/s -     65.401M in   5.017773s
   String#[RANGE] ==     14.728M (±11.3%) i/s -     72.187M in   4.998962s
   String#[0...n] ==     13.489M (±12.3%) i/s -     65.684M in   5.000040s

Comparison:
   String#[RANGE] ==: 14727536.4 i/s
   String#[0...n] ==: 13489026.6 i/s - same-ish: difference falls within error
    String#[0, n] ==: 13321503.3 i/s - same-ish: difference falls within error
  String#start_with?:  7158114.9 i/s - 2.06x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    10.339M i/100ms
 String#sub!'string'     1.007M i/100ms
String#gsub!'string'   875.207k i/100ms
  String#[/regexp/]=    10.054M i/100ms
 String#sub!/regexp/     1.999M i/100ms
String#gsub!/regexp/   982.136k i/100ms
Calculating -------------------------------------
  String#['string']=    103.920M (± 1.0%) i/s -    527.264M in   5.074275s
 String#sub!'string'     11.231M (± 9.8%) i/s -     56.384M in   5.087293s
String#gsub!'string'      9.457M (± 6.0%) i/s -     47.261M in   5.021119s
  String#[/regexp/]=    100.517M (± 1.7%) i/s -    502.715M in   5.002913s
 String#sub!/regexp/     32.418M (± 5.3%) i/s -    161.893M in   5.009965s
String#gsub!/regexp/      9.430M (± 8.7%) i/s -     47.143M in   5.044451s

Comparison:
  String#['string']=: 103920328.2 i/s
  String#[/regexp/]=: 100517050.5 i/s - 1.03x  (± 0.00) slower
 String#sub!/regexp/: 32417714.6 i/s - 3.21x  (± 0.00) slower
 String#sub!'string': 11231044.3 i/s - 9.25x  (± 0.00) slower
String#gsub!'string':  9457279.8 i/s - 10.99x  (± 0.00) slower
String#gsub!/regexp/:  9430413.6 i/s - 11.02x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     4.621M i/100ms
        String#chomp     6.068M i/100ms
String#delete_suffix    13.804M i/100ms
Calculating -------------------------------------
          String#sub     88.739M (± 8.3%) i/s -    443.609M in   5.055104s
        String#chomp     60.146M (± 1.7%) i/s -    303.404M in   5.046039s
String#delete_suffix    139.535M (±11.3%) i/s -    690.187M in   5.028289s

Comparison:
String#delete_suffix: 139535186.0 i/s
          String#sub: 88738758.1 i/s - 1.57x  (± 0.00) slower
        String#chomp: 60146041.0 i/s - 2.32x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   315.243M i/100ms
          String#sub   127.080M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.215B (± 1.1%) i/s -     16.077B in   5.001104s
          String#sub      1.291B (± 0.3%) i/s -      6.481B in   5.020463s

Comparison:
String#delete_prefix: 3215150075.9 i/s
          String#sub: 1290941138.1 i/s - 2.49x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.849M i/100ms
    String#unpack[0]     1.903M i/100ms
Calculating -------------------------------------
      String#unpack1     19.929M (± 7.2%) i/s -     99.846M in   5.047350s
    String#unpack[0]     20.107M (± 6.3%) i/s -    100.842M in   5.046509s

Comparison:
    String#unpack[0]: 20106834.7 i/s
      String#unpack1: 19929486.8 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.2.0-dev-495a0e5c, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    45.717k i/100ms
          Time.parse   269.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    768.102k (±21.7%) i/s -      3.612M in   5.029299s
          Time.parse      6.468k (±13.1%) i/s -     31.204k in   5.004157s

Comparison:
        Time.iso8601:   768102.1 i/s
          Time.parse:     6468.1 i/s - 118.75x  (± 0.00) slower

