$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       317.252M i/100ms
Function with splat arguments
                         1.950k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.048B (± 2.7%) i/s -     15.228B in   5.000072s
Function with splat arguments
                         20.918k (± 8.8%) i/s -    105.300k in   5.082493s

Comparison:
Function with single Array argument: 3047980601.1 i/s
Function with splat arguments:    20917.9 i/s - 145711.44x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   305.625M i/100ms
Sequential Assignment
                       300.399M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.086B (± 2.5%) i/s -     15.587B in   5.053267s
Sequential Assignment
                          3.171B (± 2.2%) i/s -     15.921B in   5.022872s

Comparison:
Sequential Assignment: 3171327082.0 i/s
 Parallel Assignment: 3086478942.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   320.895M i/100ms
       attr_accessor   310.677M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.150B (± 2.6%) i/s -     16.045B in   5.097655s
       attr_accessor      3.161B (± 2.1%) i/s -     15.845B in   5.014920s

Comparison:
       attr_accessor: 3160860599.2 i/s
   getter_and_setter: 3149726459.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    13.447k i/100ms
         respond_to?   302.716M i/100ms
Calculating -------------------------------------
      begin...rescue    102.113k (± 7.9%) i/s -    510.986k in   5.046016s
         respond_to?      3.138B (± 2.2%) i/s -     15.741B in   5.018922s

Comparison:
         respond_to?: 3137918704.5 i/s
      begin...rescue:   102112.7 i/s - 30729.94x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   312.739M i/100ms
             &method    18.267M i/100ms
Calculating -------------------------------------
              normal      3.126B (± 3.1%) i/s -     15.637B in   5.007823s
             &method    182.066M (± 2.2%) i/s -    913.357M in   5.019171s

Comparison:
              normal: 3125699933.2 i/s
             &method: 182065988.5 i/s - 17.17x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       188.000  i/100ms
       define_method   150.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          3.123k (±66.5%) i/s -      6.580k in   6.247904s
       define_method     12.341k (±39.4%) i/s -     12.750k in   6.800179s

Comparison:
       define_method:    12340.7 i/s
module_eval with string:     3122.7 i/s - 3.95x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   274.710k i/100ms
       Kernel#format   175.928k i/100ms
            String#%   104.765k i/100ms
Calculating -------------------------------------
         Float#round      2.711M (± 5.6%) i/s -     13.736M in   5.090332s
       Kernel#format      1.751M (± 2.9%) i/s -      8.796M in   5.026503s
            String#%      1.045M (± 3.4%) i/s -      5.238M in   5.016792s

Comparison:
         Float#round:  2710657.6 i/s
       Kernel#format:  1751475.1 i/s - 1.55x  (± 0.00) slower
            String#%:  1045455.8 i/s - 2.59x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   319.420M i/100ms
          OpenStruct   306.031M i/100ms
Calculating -------------------------------------
                Hash      3.121B (± 2.6%) i/s -     15.652B in   5.018647s
          OpenStruct      3.123B (± 2.6%) i/s -     15.608B in   5.000230s

Comparison:
          OpenStruct: 3123483803.5 i/s
                Hash: 3120788043.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   297.792M i/100ms
          OpenStruct     4.441k i/100ms
Calculating -------------------------------------
                Hash      3.086B (± 5.5%) i/s -     15.485B in   5.037388s
          OpenStruct     37.989k (±26.8%) i/s -    177.640k in   5.043675s

Comparison:
                Hash: 3085880648.6 i/s
          OpenStruct:    37989.4 i/s - 81230.14x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   917.630k i/100ms
  ancestors.include?   212.321k i/100ms
Calculating -------------------------------------
  less than or equal      9.590M (± 3.3%) i/s -     48.634M in   5.077377s
  ancestors.include?      2.160M (± 6.2%) i/s -     10.828M in   5.042389s

Comparison:
  less than or equal:  9589599.2 i/s
  ancestors.include?:  2159601.3 i/s - 4.44x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     31.692  (± 3.2%) i/s -    159.000  in   5.028129s
         Kernel loop     31.860  (± 3.1%) i/s -    160.000  in   5.029420s

Comparison:
         Kernel loop:       31.9 i/s
          While Loop:       31.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   308.626M i/100ms
         Array#first   308.898M i/100ms
Calculating -------------------------------------
           Array#[0]      3.057B (± 2.3%) i/s -     15.431B in   5.050073s
         Array#first      3.057B (± 1.7%) i/s -     15.445B in   5.053808s

Comparison:
           Array#[0]: 3057346454.3 i/s
         Array#first: 3057029429.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   310.275M i/100ms
          Array#last   305.834M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.130B (± 2.5%) i/s -     15.824B in   5.059472s
          Array#last      3.117B (± 3.0%) i/s -     15.598B in   5.009576s

Comparison:
          Array#[-1]: 3129632869.7 i/s
          Array#last: 3116519099.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   934.112k i/100ms
Calculating -------------------------------------
                find     13.742  (± 0.0%) i/s -     69.000  in   5.024504s
             bsearch      9.480M (± 3.4%) i/s -     47.640M in   5.031385s

Comparison:
             bsearch:  9480476.3 i/s
                find:       13.7 i/s - 689892.52x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.212  (± 0.0%) i/s -      2.000  in   9.439571s
        Array#insert      1.396  (± 0.0%) i/s -      7.000  in   5.015978s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.2 i/s - 6.59x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   305.647M i/100ms
          Array#size   309.894M i/100ms
         Array#count   313.702M i/100ms
Calculating -------------------------------------
        Array#length      3.109B (± 2.9%) i/s -     15.588B in   5.018390s
          Array#size      3.133B (± 2.6%) i/s -     15.805B in   5.047962s
         Array#count      3.094B (± 3.1%) i/s -     15.685B in   5.075386s

Comparison:
          Array#size: 3133137953.1 i/s
        Array#length: 3108922416.6 i/s - same-ish: difference falls within error
         Array#count: 3093503198.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    36.811k i/100ms
        Array#sample     3.849M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    372.496k (± 2.2%) i/s -      1.877M in   5.042654s
        Array#sample     38.896M (± 1.1%) i/s -    196.277M in   5.046875s

Comparison:
        Array#sample: 38895977.8 i/s
 Array#shuffle.first:   372495.6 i/s - 104.42x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   931.000  i/100ms
          Date.parse   687.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     20.496k (±41.3%) i/s -     85.652k in   5.029959s
          Date.parse      8.381k (±19.4%) i/s -     40.533k in   5.079258s

Comparison:
        Date.iso8601:    20496.1 i/s
          Date.parse:     8380.7 i/s - 2.45x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   292.969k i/100ms
           Array#map     1.803M i/100ms
Calculating -------------------------------------
   Array#each + push      3.354M (± 4.5%) i/s -     16.992M in   5.077562s
           Array#map     19.281M (± 9.8%) i/s -     95.574M in   5.018163s

Comparison:
           Array#map: 19280796.2 i/s
   Array#each + push:  3354304.5 i/s - 5.75x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    11.462M i/100ms
               #each    35.056M i/100ms
Calculating -------------------------------------
            For loop    128.998M (± 1.5%) i/s -    653.355M in   5.066171s
               #each    348.026M (± 1.6%) i/s -      1.753B in   5.037743s

Comparison:
               #each: 348025856.1 i/s
            For loop: 128997921.2 i/s - 2.70x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.417M i/100ms
     each_with_index     2.506M i/100ms
Calculating -------------------------------------
          While Loop     14.261M (± 2.1%) i/s -     72.288M in   5.071283s
     each_with_index     25.969M (± 8.6%) i/s -    130.315M in   5.056858s

Comparison:
     each_with_index: 25968734.4 i/s
          While Loop: 14261348.3 i/s - 1.82x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   303.012k i/100ms
      inject to_proc   309.782k i/100ms
        inject block   310.231k i/100ms
Calculating -------------------------------------
       inject symbol      3.101M (± 2.7%) i/s -     15.757M in   5.085158s
      inject to_proc      3.116M (± 1.7%) i/s -     15.799M in   5.072325s
        inject block      3.111M (± 1.9%) i/s -     15.822M in   5.088356s

Comparison:
      inject to_proc:  3115757.5 i/s
        inject block:  3110687.2 i/s - same-ish: difference falls within error
       inject symbol:  3101002.1 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    22.340k i/100ms
   Array#map.flatten    25.692k i/100ms
      Array#flat_map    57.595k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    265.228k (± 8.2%) i/s -      1.318M in   5.014195s
   Array#map.flatten    263.978k (± 7.2%) i/s -      1.336M in   5.094058s
      Array#flat_map    575.198k (± 6.6%) i/s -      2.880M in   5.035071s

Comparison:
      Array#flat_map:   575198.4 i/s
Array#map.flatten(1):   265228.0 i/s - 2.17x  (± 0.00) slower
   Array#map.flatten:   263978.3 i/s - 2.18x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   344.164k i/100ms
  Array#reverse_each     2.364M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.397M (± 6.1%) i/s -     17.208M in   5.092571s
  Array#reverse_each     23.726M (± 2.1%) i/s -    120.589M in   5.084874s

Comparison:
  Array#reverse_each: 23726056.9 i/s
  Array#reverse.each:  3396572.8 i/s - 6.99x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       946.052k i/100ms
   Enumerable#detect     4.681M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.406M (± 8.2%) i/s -    206.239M in  20.006212s
   Enumerable#detect     46.395M (± 2.8%) i/s -    931.446M in  20.095039s

Comparison:
   Enumerable#detect: 46395058.7 i/s
Enumerable#select.first: 10405888.0 i/s - 4.46x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       353.922k i/100ms
Enumerable#select.last
                       513.795k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.507M (± 3.6%) i/s -     17.696M in   5.052329s
Enumerable#select.last
                          5.521M (± 5.7%) i/s -     27.745M in   5.049769s

Comparison:
Enumerable#select.last:  5520585.4 i/s
Enumerable#reverse.detect:  3507163.1 i/s - 1.57x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.897k i/100ms
  Enumerable#sort_by     4.150k i/100ms
     Enumerable#sort     2.983k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         38.199k (±23.5%) i/s -    155.880k in   5.037959s
  Enumerable#sort_by     34.113k (±31.7%) i/s -    141.100k in   5.094903s
     Enumerable#sort     49.343k (± 4.6%) i/s -    247.589k in   5.030123s

Comparison:
     Enumerable#sort:    49343.5 i/s
Enumerable#sort_by (Symbol#to_proc):    38199.0 i/s - same-ish: difference falls within error
  Enumerable#sort_by:    34113.2 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   929.769k i/100ms
Enumerable#sort_by...first
                         8.991k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      9.270M (± 3.0%) i/s -     46.488M in   5.019480s
Enumerable#sort_by...first
                        105.663k (± 6.5%) i/s -    530.469k in   5.053028s

Comparison:
   Enumerable#min_by:  9270454.0 i/s
Enumerable#sort_by...first:   105662.6 i/s - 87.74x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   653.076k i/100ms
            Hash#dup   723.597k i/100ms
Calculating -------------------------------------
              Hash[]      7.552M (±10.9%) i/s -     37.225M in   5.003424s
            Hash#dup      7.708M (±10.9%) i/s -     38.351M in   5.052821s

Comparison:
            Hash#dup:  7707609.4 i/s
              Hash[]:  7552364.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   307.525M i/100ms
  Hash#fetch, symbol   320.283M i/100ms
     Hash#[], string    20.039M i/100ms
  Hash#fetch, string    17.828M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.142B (± 2.5%) i/s -     15.991B in   5.092463s
  Hash#fetch, symbol      3.172B (± 2.3%) i/s -     16.014B in   5.051039s
     Hash#[], string    200.736M (± 1.6%) i/s -      1.022B in   5.092447s
  Hash#fetch, string    178.654M (± 1.5%) i/s -    909.223M in   5.090599s

Comparison:
  Hash#fetch, symbol: 3172247691.6 i/s
     Hash#[], symbol: 3142301604.8 i/s - same-ish: difference falls within error
     Hash#[], string: 200736353.2 i/s - 15.80x  (± 0.00) slower
  Hash#fetch, string: 178653801.9 i/s - 17.76x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    91.588M i/100ms
             Hash#[]    92.283M i/100ms
          Hash#[] ||    91.722M i/100ms
          Hash#[] &&    91.697M i/100ms
          Hash#fetch    92.407M i/100ms
 Hash#fetch fallback    92.352M i/100ms
Calculating -------------------------------------
            Hash#dig    917.417M (± 1.8%) i/s -      4.671B in   5.093254s
             Hash#[]    920.926M (± 1.0%) i/s -      4.614B in   5.010928s
          Hash#[] ||    914.244M (± 2.4%) i/s -      4.586B in   5.019410s
          Hash#[] &&    919.149M (± 1.7%) i/s -      4.677B in   5.089510s
          Hash#fetch    915.418M (± 2.5%) i/s -      4.620B in   5.050659s
 Hash#fetch fallback    922.464M (± 0.4%) i/s -      4.618B in   5.005817s

Comparison:
 Hash#fetch fallback: 922464364.3 i/s
             Hash#[]: 920926286.1 i/s - same-ish: difference falls within error
          Hash#[] &&: 919149215.3 i/s - same-ish: difference falls within error
            Hash#dig: 917416815.5 i/s - same-ish: difference falls within error
          Hash#fetch: 915417778.5 i/s - same-ish: difference falls within error
          Hash#[] ||: 914244093.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   303.299M i/100ms
  Hash#fetch + block   313.334M i/100ms
    Hash#fetch + arg   296.611M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.044B (± 2.2%) i/s -     15.468B in   5.084359s
  Hash#fetch + block      3.061B (± 2.5%) i/s -     15.353B in   5.019017s
    Hash#fetch + arg      3.038B (± 5.0%) i/s -     15.424B in   5.093636s

Comparison:
  Hash#fetch + block: 3061026735.0 i/s
  Hash#fetch + const: 3043836411.8 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 3037678999.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    38.612k i/100ms
         sort + to_h     3.300k i/100ms
Calculating -------------------------------------
      sort_by + to_h    495.889k (± 8.7%) i/s -      2.471M in   5.031247s
         sort + to_h    218.517k (±15.0%) i/s -      1.049M in   5.002099s

Comparison:
      sort_by + to_h:   495889.4 i/s
         sort + to_h:   218516.9 i/s - 2.27x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   185.824k i/100ms
       Hash#each_key   202.809k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.847M (±10.2%) i/s -      9.105M in   5.028543s
       Hash#each_key      2.026M (± 3.9%) i/s -     10.140M in   5.012443s

Comparison:
       Hash#each_key:  2026235.5 i/s
      Hash#keys.each:  1847203.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   289.000  i/100ms
           Hash#key?     3.532M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      3.065k (±10.7%) i/s -     15.317k in   5.073968s
           Hash#key?     35.441M (± 1.4%) i/s -    180.118M in   5.083270s

Comparison:
           Hash#key?: 35441375.4 i/s
  Hash#keys.include?:     3064.6 i/s - 11564.70x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    41.410k i/100ms
            Hash#[]=    58.298k i/100ms
Calculating -------------------------------------
         Hash#merge!    563.611k (± 7.7%) i/s -      2.816M in   5.040055s
            Hash#[]=    590.084k (± 7.6%) i/s -      2.973M in   5.074129s

Comparison:
            Hash#[]=:   590084.1 i/s
         Hash#merge!:   563611.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        34.569k i/100ms
      Hash#merge({})    20.052k i/100ms
 Hash#dup#merge!({})    32.207k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        390.127k (±11.2%) i/s -      1.936M in   5.032971s
      Hash#merge({})    197.924k (± 9.4%) i/s -    982.548k in   5.026751s
 Hash#dup#merge!({})    306.804k (± 9.8%) i/s -      1.546M in   5.102770s

Comparison:
{}#merge!(Hash) do end:   390126.5 i/s
 Hash#dup#merge!({}):   306804.1 i/s - 1.27x  (± 0.00) slower
      Hash#merge({}):   197924.0 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   307.773M i/100ms
          Hash#merge   311.573M i/100ms
Calculating -------------------------------------
        Hash#**other      3.019B (± 3.2%) i/s -     15.081B in   5.000477s
          Hash#merge      3.072B (± 1.8%) i/s -     15.579B in   5.073497s

Comparison:
          Hash#merge: 3071580866.2 i/s
        Hash#**other: 3019155484.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   689.000  i/100ms
         Hash#merge!    58.374k i/100ms
Calculating -------------------------------------
          Hash#merge     12.701k (±12.8%) i/s -     62.699k in   5.042316s
         Hash#merge!    580.288k (± 4.0%) i/s -      2.919M in   5.038216s

Comparison:
         Hash#merge!:   580288.3 i/s
          Hash#merge:    12700.8 i/s - 45.69x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.505M i/100ms
Array#each               1.467M i/100ms
Array#each_w/_object     1.475M i/100ms
Hash#select-include      2.258M i/100ms
Calculating -------------------------------------
Hash#native-slice        18.925M (± 7.3%) i/s -     94.836M in   5.048029s
Array#each               15.432M (± 5.8%) i/s -     77.768M in   5.063154s
Array#each_w/_object     15.118M (± 6.8%) i/s -     75.229M in   5.006653s
Hash#select-include      24.379M (± 6.6%) i/s -    121.954M in   5.035097s

Comparison:
Hash#select-include : 24379416.6 i/s
Hash#native-slice   : 18924553.8 i/s - 1.29x  (± 0.00) slower
Array#each          : 15431988.1 i/s - 1.58x  (± 0.00) slower
Array#each_w/_object: 15117863.2 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   304.000  i/100ms
         Hash#value?   932.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      3.138k (±10.9%) i/s -     15.504k in   5.015594s
         Hash#value?      9.317k (± 0.8%) i/s -     46.600k in   5.001904s

Comparison:
         Hash#value?:     9317.0 i/s
Hash#values.include?:     3138.4 i/s - 2.97x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   305.414M i/100ms
                send   310.976M i/100ms
      method_missing   304.712M i/100ms
Calculating -------------------------------------
                call      3.055B (± 2.8%) i/s -     15.271B in   5.002768s
                send      3.063B (± 2.0%) i/s -     15.549B in   5.079075s
      method_missing      3.052B (± 3.4%) i/s -     15.540B in   5.098655s

Comparison:
                send: 3062641061.9 i/s
                call: 3054885234.3 i/s - same-ish: difference falls within error
      method_missing: 3051565190.8 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    65.000k i/100ms
      Symbol#to_proc    74.018k i/100ms
Calculating -------------------------------------
               Block    749.997k (±12.1%) i/s -      3.705M in   5.017657s
      Symbol#to_proc    750.460k (±10.9%) i/s -      3.701M in   5.008146s

Comparison:
      Symbol#to_proc:   750460.3 i/s
               Block:   749997.2 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   304.966M i/100ms
       block + yield   312.613M i/100ms
        unused block   312.745M i/100ms
               yield   299.863M i/100ms
Calculating -------------------------------------
          block.call      3.101B (± 2.4%) i/s -     15.553B in   5.018692s
       block + yield      3.097B (± 2.8%) i/s -     15.631B in   5.050385s
        unused block      3.052B (± 4.2%) i/s -     15.325B in   5.031539s
               yield      3.072B (± 3.0%) i/s -     15.593B in   5.080978s

Comparison:
          block.call: 3100897014.6 i/s
       block + yield: 3097380474.0 i/s - same-ish: difference falls within error
               yield: 3071893306.3 i/s - same-ish: difference falls within error
        unused block: 3052127186.2 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     5.177k i/100ms
      range#include?   169.000  i/100ms
       range#member?   241.000  i/100ms
       plain compare     9.073k i/100ms
Calculating -------------------------------------
        range#cover?     60.982k (±32.2%) i/s -    269.204k in   5.043147s
      range#include?      3.293k (±37.8%) i/s -     13.013k in   5.017365s
       range#member?      2.961k (±44.4%) i/s -     11.568k in   5.008569s
       plain compare     98.402k (±31.0%) i/s -    426.431k in   5.003392s

Comparison:
       plain compare:    98402.5 i/s
        range#cover?:    60981.6 i/s - same-ish: difference falls within error
      range#include?:     3293.4 i/s - 29.88x  (± 0.00) slower
       range#member?:     2960.5 i/s - 33.24x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    35.211M i/100ms
           String#=~    31.434M i/100ms
          Regexp#===    31.332M i/100ms
        String#match    32.280M i/100ms
Calculating -------------------------------------
       String#match?    352.766M (± 1.5%) i/s -      1.796B in   5.091793s
           String#=~    314.595M (± 2.1%) i/s -      1.603B in   5.098360s
          Regexp#===    312.927M (± 3.4%) i/s -      1.567B in   5.013213s
        String#match    320.334M (± 1.7%) i/s -      1.614B in   5.040199s

Comparison:
       String#match?: 352766347.2 i/s
        String#match: 320333858.0 i/s - 1.10x  (± 0.00) slower
           String#=~: 314594741.2 i/s - 1.12x  (± 0.00) slower
          Regexp#===: 312927292.5 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.621M i/100ms
      String#casecmp     4.522M i/100ms
Calculating -------------------------------------
String#downcase + ==     29.583M (± 7.3%) i/s -    149.384M in   5.085931s
      String#casecmp     48.437M (± 4.9%) i/s -    244.176M in   5.054074s

Comparison:
      String#casecmp: 48436824.2 i/s
String#downcase + ==: 29582728.1 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+    10.156M i/100ms
       String#concat     9.592M i/100ms
       String#append     9.724M i/100ms
         "foo" "bar"   313.234M i/100ms
  "#{'foo'}#{'bar'}"    10.551M i/100ms
Calculating -------------------------------------
            String#+    103.581M (± 6.2%) i/s -    517.945M in   5.027536s
       String#concat    103.273M (± 6.0%) i/s -    517.957M in   5.042312s
       String#append    103.347M (± 6.5%) i/s -    515.377M in   5.019642s
         "foo" "bar"      3.109B (± 2.1%) i/s -     15.662B in   5.039313s
  "#{'foo'}#{'bar'}"    102.512M (± 6.8%) i/s -    516.999M in   5.074153s

Comparison:
         "foo" "bar": 3109264431.4 i/s
            String#+: 103581347.7 i/s - 30.02x  (± 0.00) slower
       String#append: 103346592.3 i/s - 30.09x  (± 0.00) slower
       String#concat: 103273129.2 i/s - 30.11x  (± 0.00) slower
  "#{'foo'}#{'bar'}": 102511751.8 i/s - 30.33x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   317.202M i/100ms
          String#dup   312.761M i/100ms
Calculating -------------------------------------
           String#+@      3.134B (± 1.9%) i/s -     15.860B in   5.062977s
          String#dup      3.123B (± 2.7%) i/s -     15.638B in   5.010369s

Comparison:
           String#+@: 3133705405.3 i/s
          String#dup: 3123483055.0 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.475M i/100ms
       String#match?     1.814M i/100ms
    String#end_with?    11.035M i/100ms
Calculating -------------------------------------
           String#=~     14.465M (± 7.0%) i/s -     72.262M in   5.036700s
       String#match?     18.094M (± 2.3%) i/s -     90.698M in   5.015315s
    String#end_with?    110.165M (± 2.5%) i/s -    551.729M in   5.011668s

Comparison:
    String#end_with?: 110164738.2 i/s
       String#match?: 18094150.4 i/s - 6.09x  (± 0.00) slower
           String#=~: 14464521.9 i/s - 7.62x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   695.551k i/100ms
          String#sub   938.102k i/100ms
String#dup["string"]=
                        10.390M i/100ms
Calculating -------------------------------------
         String#gsub      7.906M (± 7.4%) i/s -     39.646M in   5.053812s
          String#sub     10.173M (± 9.9%) i/s -     50.658M in   5.035646s
String#dup["string"]=
                        103.520M (± 2.0%) i/s -    519.511M in   5.020680s

Comparison:
String#dup["string"]=: 103519678.2 i/s
          String#sub: 10173418.3 i/s - 10.18x  (± 0.00) slower
         String#gsub:  7905919.8 i/s - 13.09x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   183.761k i/100ms
           String#tr   164.661k i/100ms
Calculating -------------------------------------
         String#gsub      3.884M (±10.5%) i/s -     19.295M in   5.041092s
           String#tr      1.699M (± 3.7%) i/s -      8.562M in   5.047447s

Comparison:
         String#gsub:  3883628.6 i/s
           String#tr:  1698826.5 i/s - 2.29x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   309.694M i/100ms
         With Freeze   322.467M i/100ms
Calculating -------------------------------------
      Without Freeze      3.104B (± 2.8%) i/s -     15.794B in   5.093362s
         With Freeze      3.103B (± 2.3%) i/s -     15.801B in   5.094517s

Comparison:
      Without Freeze: 3103548677.7 i/s
         With Freeze: 3103352545.4 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     5.819k i/100ms
      String#squeeze    80.435k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    164.093k (±11.1%) i/s -    808.841k in   5.022916s
      String#squeeze    802.324k (± 7.6%) i/s -      4.022M in   5.047019s

Comparison:
      String#squeeze:   802323.6 i/s
 String#gsub/regex+/:   164092.8 i/s - 4.89x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~    12.809M i/100ms
       String#match?    14.002M i/100ms
  String#start_with?    12.845M i/100ms
Calculating -------------------------------------
           String#=~    140.359M (± 6.8%) i/s -    704.501M in   5.051344s
       String#match?    140.016M (± 1.7%) i/s -    700.122M in   5.001958s
  String#start_with?    127.703M (± 3.0%) i/s -    642.245M in   5.034342s

Comparison:
           String#=~: 140359324.7 i/s
       String#match?: 140016137.0 i/s - same-ish: difference falls within error
  String#start_with?: 127702654.2 i/s - same-ish: difference falls within error

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   196.751k i/100ms
    String#[0, n] ==   265.584k i/100ms
   String#[RANGE] ==   427.791k i/100ms
   String#[0...n] ==   263.137k i/100ms
Calculating -------------------------------------
  String#start_with?      6.722M (± 3.6%) i/s -     33.644M in   5.013414s
    String#[0, n] ==      2.879M (± 3.4%) i/s -     14.607M in   5.080269s
   String#[RANGE] ==      4.303M (± 2.9%) i/s -     21.817M in   5.074262s
   String#[0...n] ==      2.570M (± 7.5%) i/s -     12.894M in   5.055809s

Comparison:
  String#start_with?:  6722489.0 i/s
   String#[RANGE] ==:  4303339.4 i/s - 1.56x  (± 0.00) slower
    String#[0, n] ==:  2878676.2 i/s - 2.34x  (± 0.00) slower
   String#[0...n] ==:  2570273.8 i/s - 2.62x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    10.235M i/100ms
 String#sub!'string'   935.356k i/100ms
String#gsub!'string'   853.472k i/100ms
  String#[/regexp/]=    10.071M i/100ms
 String#sub!/regexp/     3.111M i/100ms
String#gsub!/regexp/   971.306k i/100ms
Calculating -------------------------------------
  String#['string']=    103.776M (± 1.5%) i/s -    521.976M in   5.031053s
 String#sub!'string'     10.926M (± 8.7%) i/s -     54.251M in   5.011511s
String#gsub!'string'      9.206M (±10.0%) i/s -     46.087M in   5.067718s
  String#[/regexp/]=    100.267M (± 2.1%) i/s -    503.538M in   5.024404s
 String#sub!/regexp/     31.526M (± 2.3%) i/s -    158.654M in   5.035403s
String#gsub!/regexp/      9.532M (± 8.6%) i/s -     47.594M in   5.040243s

Comparison:
  String#['string']=: 103775747.4 i/s
  String#[/regexp/]=: 100267092.8 i/s - same-ish: difference falls within error
 String#sub!/regexp/: 31525831.0 i/s - 3.29x  (± 0.00) slower
 String#sub!'string': 10925778.6 i/s - 9.50x  (± 0.00) slower
String#gsub!/regexp/:  9531616.6 i/s - 10.89x  (± 0.00) slower
String#gsub!'string':  9206127.7 i/s - 11.27x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     7.891M i/100ms
        String#chomp     5.815M i/100ms
String#delete_suffix    14.318M i/100ms
Calculating -------------------------------------
          String#sub     85.444M (± 6.0%) i/s -    426.135M in   5.006423s
        String#chomp     58.209M (± 1.1%) i/s -    296.589M in   5.095836s
String#delete_suffix    152.840M (± 9.2%) i/s -    758.873M in   5.017948s

Comparison:
String#delete_suffix: 152839823.9 i/s
          String#sub: 85444007.6 i/s - 1.79x  (± 0.00) slower
        String#chomp: 58209151.7 i/s - 2.63x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   315.463M i/100ms
          String#sub   126.435M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.067B (± 2.6%) i/s -     15.458B in   5.042869s
          String#sub      1.283B (± 2.1%) i/s -      6.448B in   5.028935s

Comparison:
String#delete_prefix: 3067423316.4 i/s
          String#sub: 1282842093.1 i/s - 2.39x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.861M i/100ms
    String#unpack[0]     1.896M i/100ms
Calculating -------------------------------------
      String#unpack1     20.127M (± 6.3%) i/s -    100.495M in   5.021757s
    String#unpack[0]     20.022M (± 6.1%) i/s -    100.477M in   5.044704s

Comparison:
      String#unpack1: 20127490.6 i/s
    String#unpack[0]: 20022063.4 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.2.0-dev-744778c5, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    48.753k i/100ms
          Time.parse   297.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    801.432k (±22.6%) i/s -      3.754M in   5.040442s
          Time.parse      6.312k (±12.1%) i/s -     30.888k in   5.022608s

Comparison:
        Time.iso8601:   801431.7 i/s
          Time.parse:     6312.5 i/s - 126.96x  (± 0.00) slower

