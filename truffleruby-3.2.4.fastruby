$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       303.352M i/100ms
Function with splat arguments
                         1.931k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.034B (± 3.1%) i/s -     15.168B in   5.003915s
Function with splat arguments
                         20.427k (± 9.2%) i/s -    102.343k in   5.063569s

Comparison:
Function with single Array argument: 3034087256.1 i/s
Function with splat arguments:    20427.0 i/s - 148533.03x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   295.516M i/100ms
Sequential Assignment
                       279.914M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.041B (± 2.6%) i/s -     15.367B in   5.056647s
Sequential Assignment
                          3.033B (± 2.9%) i/s -     15.395B in   5.080318s

Comparison:
 Parallel Assignment: 3041023073.6 i/s
Sequential Assignment: 3032993318.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   314.336M i/100ms
       attr_accessor   298.624M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.019B (± 3.8%) i/s -     15.088B in   5.005840s
       attr_accessor      3.039B (± 3.0%) i/s -     15.230B in   5.016255s

Comparison:
       attr_accessor: 3038994244.2 i/s
   getter_and_setter: 3018715128.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     9.621k i/100ms
         respond_to?   303.705M i/100ms
Calculating -------------------------------------
      begin...rescue    102.567k (± 9.6%) i/s -    519.534k in   5.142132s
         respond_to?      3.045B (± 2.4%) i/s -     15.489B in   5.090011s

Comparison:
         respond_to?: 3044786954.4 i/s
      begin...rescue:   102567.2 i/s - 29685.77x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   295.105M i/100ms
             &method    18.256M i/100ms
Calculating -------------------------------------
              normal      2.987B (± 5.7%) i/s -     15.050B in   5.059389s
             &method    177.542M (± 1.5%) i/s -    894.542M in   5.039621s

Comparison:
              normal: 2986795806.9 i/s
             &method: 177541606.6 i/s - 16.82x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       150.000  i/100ms
       define_method   157.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          4.323k (±52.6%) i/s -      8.100k in   5.100299s
       define_method     11.605k (±45.7%) i/s -     10.833k in   5.124968s

Comparison:
       define_method:    11604.7 i/s
module_eval with string:     4322.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   275.087k i/100ms
       Kernel#format   185.372k i/100ms
            String#%   182.860k i/100ms
Calculating -------------------------------------
         Float#round      2.731M (± 6.1%) i/s -     13.754M in   5.063496s
       Kernel#format      1.840M (± 1.7%) i/s -      9.269M in   5.038737s
            String#%      1.835M (± 2.8%) i/s -      9.326M in   5.085537s

Comparison:
         Float#round:  2731035.0 i/s
       Kernel#format:  1840056.1 i/s - 1.48x  (± 0.00) slower
            String#%:  1835254.3 i/s - 1.49x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   319.662M i/100ms
          OpenStruct   312.121M i/100ms
Calculating -------------------------------------
                Hash      3.115B (± 3.3%) i/s -     15.663B in   5.034449s
          OpenStruct      3.117B (± 2.9%) i/s -     15.606B in   5.011242s

Comparison:
          OpenStruct: 3116849623.1 i/s
                Hash: 3114769930.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   308.673M i/100ms
          OpenStruct     2.892k i/100ms
Calculating -------------------------------------
                Hash      3.078B (± 2.4%) i/s -     15.434B in   5.017653s
          OpenStruct     48.616k (±15.2%) i/s -    234.252k in   5.012593s

Comparison:
                Hash: 3077767192.0 i/s
          OpenStruct:    48615.7 i/s - 63308.04x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal     1.055M i/100ms
  ancestors.include?   220.439k i/100ms
Calculating -------------------------------------
  less than or equal     10.202M (± 6.3%) i/s -     51.699M in   5.093148s
  ancestors.include?      2.212M (± 9.0%) i/s -     11.022M in   5.042063s

Comparison:
  less than or equal: 10202124.2 i/s
  ancestors.include?:  2212175.2 i/s - 4.61x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     31.271  (± 6.4%) i/s -    156.000  in   5.005251s
         Kernel loop     31.326  (± 3.2%) i/s -    157.000  in   5.022986s

Comparison:
         Kernel loop:       31.3 i/s
          While Loop:       31.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   302.737M i/100ms
         Array#first   287.275M i/100ms
Calculating -------------------------------------
           Array#[0]      3.003B (± 4.0%) i/s -     15.137B in   5.049572s
         Array#first      3.056B (± 2.0%) i/s -     15.513B in   5.077840s

Comparison:
         Array#first: 3056194116.7 i/s
           Array#[0]: 3002895433.8 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   302.437M i/100ms
          Array#last   315.674M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.049B (± 3.8%) i/s -     15.424B in   5.067011s
          Array#last      3.053B (± 2.6%) i/s -     15.468B in   5.070028s

Comparison:
          Array#last: 3053002540.4 i/s
          Array#[-1]: 3048851305.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   898.279k i/100ms
Calculating -------------------------------------
                find     13.760  (± 0.0%) i/s -     69.000  in   5.015893s
             bsearch      9.149M (± 3.8%) i/s -     45.812M in   5.015062s

Comparison:
             bsearch:  9149065.6 i/s
                find:       13.8 i/s - 664886.62x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.212  (± 0.0%) i/s -      2.000  in   9.427055s
        Array#insert      1.398  (± 0.0%) i/s -      7.000  in   5.006241s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.2 i/s - 6.59x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   307.479M i/100ms
          Array#size   301.852M i/100ms
         Array#count   297.335M i/100ms
Calculating -------------------------------------
        Array#length      3.033B (± 2.9%) i/s -     15.374B in   5.073070s
          Array#size      3.045B (± 3.3%) i/s -     15.394B in   5.060723s
         Array#count      3.025B (± 4.7%) i/s -     15.164B in   5.025009s

Comparison:
          Array#size: 3045419063.0 i/s
        Array#length: 3033171203.2 i/s - same-ish: difference falls within error
         Array#count: 3025341845.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    33.399k i/100ms
        Array#sample     3.889M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    370.392k (± 2.7%) i/s -      1.870M in   5.053680s
        Array#sample     38.727M (± 2.0%) i/s -    194.472M in   5.023819s

Comparison:
        Array#sample: 38726881.9 i/s
 Array#shuffle.first:   370391.9 i/s - 104.56x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   925.000  i/100ms
          Date.parse   593.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     16.215k (±37.7%) i/s -     72.150k in   5.014457s
          Date.parse      8.104k (±23.6%) i/s -     37.952k in   5.048047s

Comparison:
        Date.iso8601:    16215.4 i/s
          Date.parse:     8103.6 i/s - 2.00x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   286.925k i/100ms
           Array#map     1.886M i/100ms
Calculating -------------------------------------
   Array#each + push      3.284M (± 3.2%) i/s -     16.642M in   5.072932s
           Array#map     19.002M (± 9.8%) i/s -     94.322M in   5.028695s

Comparison:
           Array#map: 19002244.9 i/s
   Array#each + push:  3283759.3 i/s - 5.79x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    11.218M i/100ms
               #each    35.446M i/100ms
Calculating -------------------------------------
            For loop    117.774M (± 1.8%) i/s -    594.547M in   5.050080s
               #each    355.591M (± 1.0%) i/s -      1.808B in   5.084223s

Comparison:
               #each: 355590869.3 i/s
            For loop: 117773595.5 i/s - 3.02x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.395M i/100ms
     each_with_index     2.198M i/100ms
Calculating -------------------------------------
          While Loop     14.073M (± 3.0%) i/s -     71.128M in   5.059314s
     each_with_index     23.037M (± 2.5%) i/s -    116.495M in   5.060331s

Comparison:
     each_with_index: 23036553.8 i/s
          While Loop: 14073378.5 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   305.137k i/100ms
      inject to_proc   302.782k i/100ms
        inject block   304.982k i/100ms
Calculating -------------------------------------
       inject symbol      3.054M (± 3.1%) i/s -     15.257M in   5.001478s
      inject to_proc      3.034M (± 2.4%) i/s -     15.442M in   5.093066s
        inject block      3.016M (± 4.4%) i/s -     15.249M in   5.067976s

Comparison:
       inject symbol:  3053642.7 i/s
      inject to_proc:  3033737.2 i/s - same-ish: difference falls within error
        inject block:  3016379.7 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    22.673k i/100ms
   Array#map.flatten    25.626k i/100ms
      Array#flat_map    56.664k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    266.403k (± 5.5%) i/s -      1.338M in   5.037669s
   Array#map.flatten    268.859k (± 7.8%) i/s -      1.333M in   5.000259s
      Array#flat_map    564.137k (± 4.9%) i/s -      2.833M in   5.035163s

Comparison:
      Array#flat_map:   564137.0 i/s
   Array#map.flatten:   268859.4 i/s - 2.10x  (± 0.00) slower
Array#map.flatten(1):   266403.4 i/s - 2.12x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   324.044k i/100ms
  Array#reverse_each     2.301M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.488M (± 6.2%) i/s -     17.498M in   5.046156s
  Array#reverse_each     22.986M (± 4.8%) i/s -    115.037M in   5.015861s

Comparison:
  Array#reverse_each: 22985982.0 i/s
  Array#reverse.each:  3487711.7 i/s - 6.59x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       926.677k i/100ms
   Enumerable#detect     4.672M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.120M (± 8.5%) i/s -    201.089M in  20.080595s
   Enumerable#detect     46.514M (± 3.0%) i/s -    929.778M in  20.009588s

Comparison:
   Enumerable#detect: 46513694.0 i/s
Enumerable#select.first: 10120158.8 i/s - 4.60x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       282.347k i/100ms
Enumerable#select.last
                       510.007k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.445M (± 6.9%) i/s -     17.223M in   5.041459s
Enumerable#select.last
                          5.365M (± 6.6%) i/s -     27.030M in   5.070907s

Comparison:
Enumerable#select.last:  5364652.0 i/s
Enumerable#reverse.detect:  3445278.1 i/s - 1.56x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.291k i/100ms
  Enumerable#sort_by     3.932k i/100ms
     Enumerable#sort     4.703k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         37.838k (±18.1%) i/s -    180.989k in   5.041496s
  Enumerable#sort_by     27.544k (±40.7%) i/s -    110.096k in   5.099222s
     Enumerable#sort     57.198k (± 4.1%) i/s -    286.883k in   5.025180s

Comparison:
     Enumerable#sort:    57197.9 i/s
Enumerable#sort_by (Symbol#to_proc):    37838.4 i/s - 1.51x  (± 0.00) slower
  Enumerable#sort_by:    27544.5 i/s - 2.08x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   963.792k i/100ms
Enumerable#sort_by...first
                         8.874k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      9.654M (± 1.2%) i/s -     49.153M in   5.092449s
Enumerable#sort_by...first
                        108.066k (± 6.4%) i/s -    541.314k in   5.041727s

Comparison:
   Enumerable#min_by:  9653524.6 i/s
Enumerable#sort_by...first:   108066.0 i/s - 89.33x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   370.756k i/100ms
            Hash#dup   740.832k i/100ms
Calculating -------------------------------------
              Hash[]      7.683M (±13.6%) i/s -     37.446M in   5.009953s
            Hash#dup      7.573M (±11.4%) i/s -     37.782M in   5.057035s

Comparison:
              Hash[]:  7682557.0 i/s
            Hash#dup:  7572630.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   299.502M i/100ms
  Hash#fetch, symbol   307.370M i/100ms
     Hash#[], string    32.319M i/100ms
  Hash#fetch, string    26.769M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.041B (± 2.7%) i/s -     15.275B in   5.026253s
  Hash#fetch, symbol      3.039B (± 3.5%) i/s -     15.368B in   5.064182s
     Hash#[], string    320.306M (± 2.4%) i/s -      1.616B in   5.048225s
  Hash#fetch, string    268.052M (± 1.7%) i/s -      1.365B in   5.094581s

Comparison:
     Hash#[], symbol: 3041176983.1 i/s
  Hash#fetch, symbol: 3038655411.1 i/s - same-ish: difference falls within error
     Hash#[], string: 320305756.7 i/s - 9.49x  (± 0.00) slower
  Hash#fetch, string: 268051922.1 i/s - 11.35x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    92.116M i/100ms
             Hash#[]    91.152M i/100ms
          Hash#[] ||    91.785M i/100ms
          Hash#[] &&    91.784M i/100ms
          Hash#fetch    92.365M i/100ms
 Hash#fetch fallback    91.928M i/100ms
Calculating -------------------------------------
            Hash#dig    918.074M (± 2.2%) i/s -      4.606B in   5.019398s
             Hash#[]    919.130M (± 1.7%) i/s -      4.649B in   5.059359s
          Hash#[] ||    917.019M (± 2.1%) i/s -      4.589B in   5.006977s
          Hash#[] &&    917.218M (± 2.0%) i/s -      4.589B in   5.005511s
          Hash#fetch    913.981M (± 3.7%) i/s -      4.618B in   5.061329s
 Hash#fetch fallback    920.725M (± 1.5%) i/s -      4.688B in   5.093203s

Comparison:
 Hash#fetch fallback: 920724660.4 i/s
             Hash#[]: 919129571.7 i/s - same-ish: difference falls within error
            Hash#dig: 918074025.3 i/s - same-ish: difference falls within error
          Hash#[] &&: 917218110.0 i/s - same-ish: difference falls within error
          Hash#[] ||: 917018991.2 i/s - same-ish: difference falls within error
          Hash#fetch: 913980813.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   310.996M i/100ms
  Hash#fetch + block   310.798M i/100ms
    Hash#fetch + arg   306.370M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.004B (± 3.6%) i/s -     15.239B in   5.079372s
  Hash#fetch + block      3.046B (± 1.8%) i/s -     15.229B in   5.001663s
    Hash#fetch + arg      3.035B (± 2.8%) i/s -     15.319B in   5.051539s

Comparison:
  Hash#fetch + block: 3045832428.2 i/s
    Hash#fetch + arg: 3034828007.7 i/s - same-ish: difference falls within error
  Hash#fetch + const: 3004124683.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    37.947k i/100ms
         sort + to_h     3.028k i/100ms
Calculating -------------------------------------
      sort_by + to_h    534.373k (± 8.8%) i/s -      2.656M in   5.014036s
         sort + to_h    218.815k (±12.1%) i/s -      1.060M in   5.002040s

Comparison:
      sort_by + to_h:   534372.7 i/s
         sort + to_h:   218815.4 i/s - 2.44x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   199.790k i/100ms
       Hash#each_key   209.032k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.090M (± 9.7%) i/s -     10.389M in   5.066982s
       Hash#each_key      2.132M (± 2.6%) i/s -     10.661M in   5.002499s

Comparison:
       Hash#each_key:  2132484.9 i/s
      Hash#keys.each:  2090456.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   309.000  i/100ms
           Hash#key?     3.682M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      3.707k (±14.4%) i/s -     18.231k in   5.069308s
           Hash#key?     36.671M (± 1.9%) i/s -    184.098M in   5.022244s

Comparison:
           Hash#key?: 36670959.6 i/s
  Hash#keys.include?:     3707.3 i/s - 9891.45x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    44.294k i/100ms
            Hash#[]=    58.013k i/100ms
Calculating -------------------------------------
         Hash#merge!    571.347k (± 8.9%) i/s -      2.835M in   5.012791s
            Hash#[]=    602.621k (± 6.7%) i/s -      3.017M in   5.029125s

Comparison:
            Hash#[]=:   602621.4 i/s
         Hash#merge!:   571346.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        22.953k i/100ms
      Hash#merge({})    19.048k i/100ms
 Hash#dup#merge!({})    32.194k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        383.582k (±13.2%) i/s -      1.882M in   5.017031s
      Hash#merge({})    172.825k (± 8.7%) i/s -    876.208k in   5.111768s
 Hash#dup#merge!({})    319.846k (± 7.1%) i/s -      1.610M in   5.060942s

Comparison:
{}#merge!(Hash) do end:   383581.5 i/s
 Hash#dup#merge!({}):   319845.8 i/s - same-ish: difference falls within error
      Hash#merge({}):   172825.0 i/s - 2.22x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   309.747M i/100ms
          Hash#merge   306.288M i/100ms
Calculating -------------------------------------
        Hash#**other      3.042B (± 2.7%) i/s -     15.487B in   5.095856s
          Hash#merge      3.055B (± 1.8%) i/s -     15.314B in   5.015087s

Comparison:
          Hash#merge: 3054718123.5 i/s
        Hash#**other: 3041593668.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   889.000  i/100ms
         Hash#merge!    53.605k i/100ms
Calculating -------------------------------------
          Hash#merge     12.694k (±11.5%) i/s -     63.119k in   5.064679s
         Hash#merge!    587.596k (± 7.7%) i/s -      2.948M in   5.072601s

Comparison:
         Hash#merge!:   587596.0 i/s
          Hash#merge:    12693.6 i/s - 46.29x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.778M i/100ms
Array#each               1.526M i/100ms
Array#each_w/_object     1.513M i/100ms
Hash#select-include      2.475M i/100ms
Calculating -------------------------------------
Hash#native-slice        17.876M (± 7.3%) i/s -     88.887M in   5.008715s
Array#each               15.747M (± 6.6%) i/s -     79.354M in   5.071886s
Array#each_w/_object     15.402M (± 9.1%) i/s -     77.164M in   5.072103s
Hash#select-include      24.047M (± 6.9%) i/s -    121.276M in   5.076085s

Comparison:
Hash#select-include : 24046593.7 i/s
Hash#native-slice   : 17875716.9 i/s - 1.35x  (± 0.00) slower
Array#each          : 15746928.3 i/s - 1.53x  (± 0.00) slower
Array#each_w/_object: 15402276.4 i/s - 1.56x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   300.000  i/100ms
         Hash#value?   884.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      3.175k (±10.9%) i/s -     15.600k in   4.999238s
         Hash#value?      8.245k (± 0.8%) i/s -     41.548k in   5.039527s

Comparison:
         Hash#value?:     8245.0 i/s
Hash#values.include?:     3174.5 i/s - 2.60x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   303.294M i/100ms
                send   316.141M i/100ms
      method_missing   315.082M i/100ms
Calculating -------------------------------------
                call      3.041B (± 2.8%) i/s -     15.468B in   5.090355s
                send      3.041B (± 2.5%) i/s -     15.491B in   5.096968s
      method_missing      3.040B (± 2.6%) i/s -     15.439B in   5.082133s

Comparison:
                call: 3041193093.2 i/s
                send: 3041157127.7 i/s - same-ish: difference falls within error
      method_missing: 3039955509.6 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    64.087k i/100ms
      Symbol#to_proc    70.617k i/100ms
Calculating -------------------------------------
               Block    756.019k (±12.7%) i/s -      3.717M in   5.029452s
      Symbol#to_proc    739.186k (±13.4%) i/s -      3.672M in   5.063086s

Comparison:
               Block:   756019.3 i/s
      Symbol#to_proc:   739186.3 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   308.754M i/100ms
       block + yield   291.467M i/100ms
        unused block   308.220M i/100ms
               yield   305.995M i/100ms
Calculating -------------------------------------
          block.call      3.065B (± 2.7%) i/s -     15.438B in   5.039635s
       block + yield      3.049B (± 2.8%) i/s -     15.448B in   5.069891s
        unused block      3.010B (± 3.7%) i/s -     15.103B in   5.024590s
               yield      3.034B (± 3.0%) i/s -     15.300B in   5.047120s

Comparison:
          block.call: 3065455423.5 i/s
       block + yield: 3049477952.2 i/s - same-ish: difference falls within error
               yield: 3034179269.2 i/s - same-ish: difference falls within error
        unused block: 3010063602.4 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     3.762k i/100ms
      range#include?   190.000  i/100ms
       range#member?   231.000  i/100ms
       plain compare     8.844k i/100ms
Calculating -------------------------------------
        range#cover?     56.420k (±27.3%) i/s -    248.292k in   5.027388s
      range#include?      2.150k (±28.1%) i/s -      9.880k in   5.162948s
       range#member?      1.952k (±24.2%) i/s -      9.009k in   5.020261s
       plain compare     81.178k (±23.8%) i/s -    371.448k in   5.057542s

Comparison:
       plain compare:    81178.1 i/s
        range#cover?:    56420.0 i/s - same-ish: difference falls within error
      range#include?:     2150.4 i/s - 37.75x  (± 0.00) slower
       range#member?:     1952.1 i/s - 41.58x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    34.537M i/100ms
           String#=~    30.577M i/100ms
          Regexp#===    32.157M i/100ms
        String#match    31.547M i/100ms
Calculating -------------------------------------
       String#match?    348.459M (± 0.3%) i/s -      1.761B in   5.054857s
           String#=~    310.888M (± 1.5%) i/s -      1.559B in   5.017225s
          Regexp#===    310.905M (± 1.4%) i/s -      1.576B in   5.069104s
        String#match    314.545M (± 0.5%) i/s -      1.577B in   5.014793s

Comparison:
       String#match?: 348458523.4 i/s
        String#match: 314544973.9 i/s - 1.11x  (± 0.00) slower
          Regexp#===: 310904784.9 i/s - 1.12x  (± 0.00) slower
           String#=~: 310888046.4 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.616M i/100ms
      String#casecmp     4.790M i/100ms
Calculating -------------------------------------
String#downcase + ==     29.220M (± 8.1%) i/s -    146.493M in   5.058572s
      String#casecmp     46.885M (± 4.3%) i/s -    234.721M in   5.016214s

Comparison:
      String#casecmp: 46884746.5 i/s
String#downcase + ==: 29220223.2 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     9.119M i/100ms
       String#concat     9.379M i/100ms
       String#append    10.092M i/100ms
         "foo" "bar"   309.088M i/100ms
  "#{'foo'}#{'bar'}"    10.102M i/100ms
Calculating -------------------------------------
            String#+    100.657M (± 3.6%) i/s -    510.663M in   5.079939s
       String#concat    100.361M (± 6.1%) i/s -    506.451M in   5.074634s
       String#append    101.167M (± 2.6%) i/s -    514.669M in   5.090838s
         "foo" "bar"      3.049B (± 2.5%) i/s -     15.454B in   5.072010s
  "#{'foo'}#{'bar'}"    101.207M (± 2.8%) i/s -    515.214M in   5.094794s

Comparison:
         "foo" "bar": 3048938759.0 i/s
  "#{'foo'}#{'bar'}": 101206557.8 i/s - 30.13x  (± 0.00) slower
       String#append: 101166598.7 i/s - 30.14x  (± 0.00) slower
            String#+: 100657413.4 i/s - 30.29x  (± 0.00) slower
       String#concat: 100360752.4 i/s - 30.38x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   301.618M i/100ms
          String#dup   297.175M i/100ms
Calculating -------------------------------------
           String#+@      3.046B (± 2.4%) i/s -     15.383B in   5.053084s
          String#dup      3.048B (± 2.6%) i/s -     15.453B in   5.074001s

Comparison:
          String#dup: 3047626873.6 i/s
           String#+@: 3045907514.1 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.462M i/100ms
       String#match?     1.763M i/100ms
    String#end_with?    11.087M i/100ms
Calculating -------------------------------------
           String#=~     14.964M (± 2.7%) i/s -     76.036M in   5.085258s
       String#match?     17.484M (± 2.7%) i/s -     88.154M in   5.045819s
    String#end_with?    109.818M (± 3.4%) i/s -    554.339M in   5.054466s

Comparison:
    String#end_with?: 109817872.2 i/s
       String#match?: 17484249.3 i/s - 6.28x  (± 0.00) slower
           String#=~: 14963889.5 i/s - 7.34x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   433.766k i/100ms
          String#sub   953.069k i/100ms
String#dup["string"]=
                        10.333M i/100ms
Calculating -------------------------------------
         String#gsub      8.533M (±11.7%) i/s -     42.075M in   5.024143s
          String#sub     10.086M (±10.7%) i/s -     50.513M in   5.080920s
String#dup["string"]=
                        102.733M (± 4.5%) i/s -    516.652M in   5.041996s

Comparison:
String#dup["string"]=: 102732579.8 i/s
          String#sub: 10085532.2 i/s - 10.19x  (± 0.00) slower
         String#gsub:  8533145.6 i/s - 12.04x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   346.946k i/100ms
           String#tr   168.655k i/100ms
Calculating -------------------------------------
         String#gsub      4.057M (± 8.4%) i/s -     20.123M in   5.013830s
           String#tr      1.693M (± 6.7%) i/s -      8.433M in   5.013388s

Comparison:
         String#gsub:  4056685.5 i/s
           String#tr:  1692875.8 i/s - 2.40x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   309.280M i/100ms
         With Freeze   297.349M i/100ms
Calculating -------------------------------------
      Without Freeze      3.044B (± 2.7%) i/s -     15.464B in   5.083105s
         With Freeze      3.030B (± 3.5%) i/s -     15.165B in   5.010966s

Comparison:
      Without Freeze: 3044479948.6 i/s
         With Freeze: 3030261815.8 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/    10.746k i/100ms
      String#squeeze    77.363k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    163.604k (±10.2%) i/s -    805.950k in   5.001905s
      String#squeeze    803.895k (± 5.5%) i/s -      4.023M in   5.019853s

Comparison:
      String#squeeze:   803894.7 i/s
 String#gsub/regex+/:   163603.9 i/s - 4.91x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~    12.899M i/100ms
       String#match?    13.873M i/100ms
  String#start_with?    12.768M i/100ms
Calculating -------------------------------------
           String#=~    144.545M (± 3.4%) i/s -    722.363M in   5.003428s
       String#match?    137.847M (± 6.4%) i/s -    693.671M in   5.063852s
  String#start_with?    128.139M (± 2.4%) i/s -    651.156M in   5.084739s

Comparison:
           String#=~: 144544888.9 i/s
       String#match?: 137846760.9 i/s - same-ish: difference falls within error
  String#start_with?: 128139414.4 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    82.345k i/100ms
    String#[0, n] ==   155.210k i/100ms
   String#[RANGE] ==   218.707k i/100ms
   String#[0...n] ==   143.053k i/100ms
Calculating -------------------------------------
  String#start_with?      6.855M (± 2.5%) i/s -     34.256M in   5.002822s
    String#[0, n] ==     13.667M (± 9.6%) i/s -     67.516M in   5.011821s
   String#[RANGE] ==     14.378M (±12.9%) i/s -     69.549M in   5.002484s
   String#[0...n] ==     13.901M (±11.7%) i/s -     67.378M in   5.008971s

Comparison:
   String#[RANGE] ==: 14377780.5 i/s
   String#[0...n] ==: 13900580.5 i/s - same-ish: difference falls within error
    String#[0, n] ==: 13666974.3 i/s - same-ish: difference falls within error
  String#start_with?:  6854506.4 i/s - 2.10x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    10.237M i/100ms
 String#sub!'string'   995.009k i/100ms
String#gsub!'string'   895.497k i/100ms
  String#[/regexp/]=    10.001M i/100ms
 String#sub!/regexp/     3.044M i/100ms
String#gsub!/regexp/   949.808k i/100ms
Calculating -------------------------------------
  String#['string']=    103.831M (± 1.8%) i/s -    522.099M in   5.030230s
 String#sub!'string'     11.017M (± 9.2%) i/s -     54.725M in   5.028138s
String#gsub!'string'      9.383M (± 7.9%) i/s -     46.566M in   5.008400s
  String#[/regexp/]=    100.768M (± 0.4%) i/s -    510.027M in   5.061489s
 String#sub!/regexp/     30.909M (± 3.4%) i/s -    155.250M in   5.029628s
String#gsub!/regexp/      9.149M (±11.1%) i/s -     45.591M in   5.070426s

Comparison:
  String#['string']=: 103831194.2 i/s
  String#[/regexp/]=: 100768186.6 i/s - 1.03x  (± 0.00) slower
 String#sub!/regexp/: 30908702.4 i/s - 3.36x  (± 0.00) slower
 String#sub!'string': 11017260.7 i/s - 9.42x  (± 0.00) slower
String#gsub!'string':  9383010.4 i/s - 11.07x  (± 0.00) slower
String#gsub!/regexp/:  9148703.0 i/s - 11.35x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     6.522M i/100ms
        String#chomp     6.063M i/100ms
String#delete_suffix    14.836M i/100ms
Calculating -------------------------------------
          String#sub     87.713M (± 9.7%) i/s -    436.985M in   5.030773s
        String#chomp     55.287M (± 1.3%) i/s -    278.906M in   5.045540s
String#delete_suffix    154.213M (± 8.2%) i/s -    771.473M in   5.047980s

Comparison:
String#delete_suffix: 154212670.7 i/s
          String#sub: 87712903.5 i/s - 1.76x  (± 0.00) slower
        String#chomp: 55287250.4 i/s - 2.79x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   298.926M i/100ms
          String#sub   129.201M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.104B (± 3.3%) i/s -     15.544B in   5.013174s
          String#sub      1.285B (± 2.2%) i/s -      6.460B in   5.031280s

Comparison:
String#delete_prefix: 3104111768.1 i/s
          String#sub: 1284668201.9 i/s - 2.42x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     2.015M i/100ms
    String#unpack[0]     1.882M i/100ms
Calculating -------------------------------------
      String#unpack1     19.416M (± 8.3%) i/s -     98.714M in   5.137066s
    String#unpack[0]     19.538M (± 6.7%) i/s -     97.856M in   5.045474s

Comparison:
    String#unpack[0]: 19537752.8 i/s
      String#unpack1: 19415894.4 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.2.0-dev-b555f590, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    26.275k i/100ms
          Time.parse   306.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    895.781k (±12.3%) i/s -      4.362M in   5.002630s
          Time.parse      6.248k (±12.1%) i/s -     30.600k in   5.025728s

Comparison:
        Time.iso8601:   895781.3 i/s
          Time.parse:     6247.8 i/s - 143.38x  (± 0.00) slower

