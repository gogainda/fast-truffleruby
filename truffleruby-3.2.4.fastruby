$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       309.522M i/100ms
Function with splat arguments
                         1.928k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.193B (± 2.5%) i/s -     16.095B in   5.043846s
Function with splat arguments
                         20.314k (±11.1%) i/s -    100.256k in   5.020597s

Comparison:
Function with single Array argument: 3193187901.3 i/s
Function with splat arguments:    20314.5 i/s - 157187.78x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   322.151M i/100ms
Sequential Assignment
                       321.686M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.191B (± 2.1%) i/s -     16.108B in   5.049727s
Sequential Assignment
                          3.199B (± 2.4%) i/s -     16.084B in   5.031703s

Comparison:
Sequential Assignment: 3198519397.5 i/s
 Parallel Assignment: 3191253544.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   315.088M i/100ms
       attr_accessor   315.166M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.201B (± 1.7%) i/s -     16.069B in   5.021658s
       attr_accessor      3.215B (± 1.4%) i/s -     16.073B in   5.000427s

Comparison:
       attr_accessor: 3215084408.3 i/s
   getter_and_setter: 3201035093.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    12.227k i/100ms
         respond_to?   322.956M i/100ms
Calculating -------------------------------------
      begin...rescue    104.634k (± 7.1%) i/s -    525.761k in   5.060154s
         respond_to?      3.216B (± 1.0%) i/s -     16.148B in   5.022059s

Comparison:
         respond_to?: 3215690883.8 i/s
      begin...rescue:   104634.0 i/s - 30732.74x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   291.406M i/100ms
             &method    18.335M i/100ms
Calculating -------------------------------------
              normal      3.183B (± 3.6%) i/s -     16.027B in   5.043151s
             &method    166.890M (± 2.8%) i/s -    843.413M in   5.058020s

Comparison:
              normal: 3182785864.0 i/s
             &method: 166890441.2 i/s - 19.07x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       204.000  i/100ms
       define_method   199.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          3.266k (±62.3%) i/s -      7.548k in   5.121205s
       define_method     11.148k (±50.2%) i/s -     10.945k in   6.329870s

Comparison:
       define_method:    11148.2 i/s
module_eval with string:     3266.2 i/s - 3.41x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   261.342k i/100ms
       Kernel#format   186.007k i/100ms
            String#%   182.342k i/100ms
Calculating -------------------------------------
         Float#round      2.689M (± 5.8%) i/s -     13.590M in   5.078788s
       Kernel#format      1.840M (± 2.1%) i/s -      9.300M in   5.058219s
            String#%      1.812M (± 2.8%) i/s -      9.117M in   5.036290s

Comparison:
         Float#round:  2688825.0 i/s
       Kernel#format:  1839504.8 i/s - 1.46x  (± 0.00) slower
            String#%:  1811750.2 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   322.311M i/100ms
          OpenStruct   317.976M i/100ms
Calculating -------------------------------------
                Hash      3.204B (± 2.2%) i/s -     16.116B in   5.031882s
          OpenStruct      3.218B (± 1.4%) i/s -     16.217B in   5.040083s

Comparison:
          OpenStruct: 3218264127.2 i/s
                Hash: 3204433663.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   318.822M i/100ms
          OpenStruct     3.763k i/100ms
Calculating -------------------------------------
                Hash      3.188B (± 2.3%) i/s -     15.941B in   5.003162s
          OpenStruct     36.435k (±27.5%) i/s -    173.098k in   5.113123s

Comparison:
                Hash: 3187948566.9 i/s
          OpenStruct:    36434.5 i/s - 87497.98x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   875.120k i/100ms
  ancestors.include?   209.432k i/100ms
Calculating -------------------------------------
  less than or equal      9.112M (± 3.3%) i/s -     46.381M in   5.095995s
  ancestors.include?      2.223M (± 6.4%) i/s -     11.100M in   5.023851s

Comparison:
  less than or equal:  9111510.3 i/s
  ancestors.include?:  2222732.5 i/s - 4.10x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     32.079  (± 3.1%) i/s -    161.000  in   5.023386s
         Kernel loop     32.201  (± 3.1%) i/s -    161.000  in   5.002697s

Comparison:
         Kernel loop:       32.2 i/s
          While Loop:       32.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   319.483M i/100ms
         Array#first   308.227M i/100ms
Calculating -------------------------------------
           Array#[0]      3.205B (± 1.9%) i/s -     16.294B in   5.085311s
         Array#first      3.205B (± 2.1%) i/s -     16.028B in   5.002503s

Comparison:
         Array#first: 3205431973.5 i/s
           Array#[0]: 3205365629.7 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   313.997M i/100ms
          Array#last   319.709M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.201B (± 2.0%) i/s -     16.014B in   5.004134s
          Array#last      3.212B (± 2.0%) i/s -     16.305B in   5.078902s

Comparison:
          Array#last: 3211797514.7 i/s
          Array#[-1]: 3201464243.7 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   891.484k i/100ms
Calculating -------------------------------------
                find     13.712  (± 0.0%) i/s -     69.000  in   5.034466s
             bsearch      9.146M (± 6.6%) i/s -     45.466M in   5.002371s

Comparison:
             bsearch:  9146451.9 i/s
                find:       13.7 i/s - 667056.14x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.213  (± 0.0%) i/s -      2.000  in   9.399228s
        Array#insert      1.395  (± 0.0%) i/s -      7.000  in   5.017879s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.2 i/s - 6.56x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   322.624M i/100ms
          Array#size   309.771M i/100ms
         Array#count   322.487M i/100ms
Calculating -------------------------------------
        Array#length      3.192B (± 2.8%) i/s -     16.131B in   5.058356s
          Array#size      3.214B (± 2.1%) i/s -     16.108B in   5.014789s
         Array#count      3.199B (± 2.5%) i/s -     16.124B in   5.043226s

Comparison:
          Array#size: 3213721540.2 i/s
         Array#count: 3199456997.8 i/s - same-ish: difference falls within error
        Array#length: 3191684246.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    36.997k i/100ms
        Array#sample     3.821M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    370.400k (± 2.2%) i/s -      1.887M in   5.096700s
        Array#sample     38.189M (± 1.6%) i/s -    191.057M in   5.004367s

Comparison:
        Array#sample: 38188953.3 i/s
 Array#shuffle.first:   370400.3 i/s - 103.10x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   970.000  i/100ms
          Date.parse   533.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     18.004k (±34.1%) i/s -     81.480k in   5.047309s
          Date.parse      8.285k (±23.3%) i/s -     38.909k in   5.028219s

Comparison:
        Date.iso8601:    18004.4 i/s
          Date.parse:     8285.4 i/s - 2.17x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   295.920k i/100ms
           Array#map     1.864M i/100ms
Calculating -------------------------------------
   Array#each + push      3.338M (± 3.3%) i/s -     16.867M in   5.059590s
           Array#map     18.966M (±11.8%) i/s -     93.218M in   5.019768s

Comparison:
           Array#map: 18965664.5 i/s
   Array#each + push:  3337597.5 i/s - 5.68x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    12.645M i/100ms
               #each    34.886M i/100ms
Calculating -------------------------------------
            For loop    129.029M (± 1.3%) i/s -    657.537M in   5.096963s
               #each    348.239M (± 0.9%) i/s -      1.744B in   5.009266s

Comparison:
               #each: 348239280.3 i/s
            For loop: 129029373.5 i/s - 2.70x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.393M i/100ms
     each_with_index     2.338M i/100ms
Calculating -------------------------------------
          While Loop     14.223M (± 2.0%) i/s -     72.460M in   5.096799s
     each_with_index     27.686M (± 4.2%) i/s -    140.299M in   5.077638s

Comparison:
     each_with_index: 27686476.2 i/s
          While Loop: 14222674.8 i/s - 1.95x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   303.718k i/100ms
      inject to_proc   309.858k i/100ms
        inject block   304.458k i/100ms
Calculating -------------------------------------
       inject symbol      3.113M (± 1.6%) i/s -     15.793M in   5.075165s
      inject to_proc      3.103M (± 2.4%) i/s -     15.803M in   5.096321s
        inject block      3.105M (± 4.3%) i/s -     15.527M in   5.013151s

Comparison:
       inject symbol:  3112761.8 i/s
        inject block:  3105252.5 i/s - same-ish: difference falls within error
      inject to_proc:  3102806.1 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    21.819k i/100ms
   Array#map.flatten    25.780k i/100ms
      Array#flat_map    53.379k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    263.767k (± 6.8%) i/s -      1.331M in   5.078772s
   Array#map.flatten    262.362k (± 7.8%) i/s -      1.315M in   5.050875s
      Array#flat_map    563.298k (± 6.3%) i/s -      2.829M in   5.051325s

Comparison:
      Array#flat_map:   563297.6 i/s
Array#map.flatten(1):   263767.1 i/s - 2.14x  (± 0.00) slower
   Array#map.flatten:   262361.9 i/s - 2.15x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   348.961k i/100ms
  Array#reverse_each     2.355M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.528M (± 3.4%) i/s -     17.797M in   5.050303s
  Array#reverse_each     23.548M (± 3.7%) i/s -    117.761M in   5.007152s

Comparison:
  Array#reverse_each: 23548071.5 i/s
  Array#reverse.each:  3528368.8 i/s - 6.67x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       985.240k i/100ms
   Enumerable#detect     4.683M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.351M (± 8.0%) i/s -    205.915M in  20.074939s
   Enumerable#detect     46.502M (± 2.9%) i/s -    931.890M in  20.059083s

Comparison:
   Enumerable#detect: 46501667.5 i/s
Enumerable#select.first: 10350709.2 i/s - 4.49x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       353.081k i/100ms
Enumerable#select.last
                       515.357k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.447M (± 6.6%) i/s -     17.301M in   5.048236s
Enumerable#select.last
                          5.364M (± 5.8%) i/s -     26.799M in   5.019750s

Comparison:
Enumerable#select.last:  5363611.1 i/s
Enumerable#reverse.detect:  3446704.4 i/s - 1.56x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.292k i/100ms
  Enumerable#sort_by     2.966k i/100ms
     Enumerable#sort     4.776k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         40.492k (±16.8%) i/s -    187.944k in   5.041035s
  Enumerable#sort_by     35.379k (±24.9%) i/s -    163.130k in   5.042167s
     Enumerable#sort     52.593k (±13.8%) i/s -    257.904k in   5.036028s

Comparison:
     Enumerable#sort:    52593.3 i/s
Enumerable#sort_by (Symbol#to_proc):    40491.9 i/s - same-ish: difference falls within error
  Enumerable#sort_by:    35379.3 i/s - 1.49x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   921.603k i/100ms
Enumerable#sort_by...first
                         8.089k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      9.186M (± 2.9%) i/s -     46.080M in   5.021160s
Enumerable#sort_by...first
                        106.648k (± 2.8%) i/s -    533.874k in   5.010227s

Comparison:
   Enumerable#min_by:  9185526.4 i/s
Enumerable#sort_by...first:   106647.9 i/s - 86.13x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   616.273k i/100ms
            Hash#dup   668.048k i/100ms
Calculating -------------------------------------
              Hash[]      7.084M (±11.0%) i/s -     35.128M in   5.040460s
            Hash#dup      7.109M (±10.8%) i/s -     35.407M in   5.055261s

Comparison:
            Hash#dup:  7109309.5 i/s
              Hash[]:  7084177.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   322.994M i/100ms
  Hash#fetch, symbol   315.211M i/100ms
     Hash#[], string    20.199M i/100ms
  Hash#fetch, string    17.960M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.222B (± 1.1%) i/s -     16.150B in   5.012417s
  Hash#fetch, symbol      3.216B (± 1.8%) i/s -     16.076B in   5.000252s
     Hash#[], string    198.756M (± 3.9%) i/s -      1.010B in   5.090270s
  Hash#fetch, string    178.805M (± 1.3%) i/s -    898.002M in   5.023138s

Comparison:
     Hash#[], symbol: 3222370588.3 i/s
  Hash#fetch, symbol: 3216112895.3 i/s - same-ish: difference falls within error
     Hash#[], string: 198756237.0 i/s - 16.21x  (± 0.00) slower
  Hash#fetch, string: 178805235.8 i/s - 18.02x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    91.743M i/100ms
             Hash#[]    91.802M i/100ms
          Hash#[] ||    92.080M i/100ms
          Hash#[] &&    92.209M i/100ms
          Hash#fetch    91.544M i/100ms
 Hash#fetch fallback    92.363M i/100ms
Calculating -------------------------------------
            Hash#dig    916.596M (± 2.3%) i/s -      4.587B in   5.007467s
             Hash#[]    919.118M (± 2.0%) i/s -      4.682B in   5.096085s
          Hash#[] ||    911.605M (± 2.7%) i/s -      4.604B in   5.054202s
          Hash#[] &&    917.924M (± 1.8%) i/s -      4.610B in   5.024425s
          Hash#fetch    919.941M (± 1.6%) i/s -      4.669B in   5.076448s
 Hash#fetch fallback    914.927M (± 2.6%) i/s -      4.618B in   5.051221s

Comparison:
          Hash#fetch: 919940796.8 i/s
             Hash#[]: 919118042.8 i/s - same-ish: difference falls within error
          Hash#[] &&: 917924038.5 i/s - same-ish: difference falls within error
            Hash#dig: 916596235.6 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 914926933.1 i/s - same-ish: difference falls within error
          Hash#[] ||: 911604507.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   317.275M i/100ms
  Hash#fetch + block   322.438M i/100ms
    Hash#fetch + arg   322.965M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.207B (± 1.7%) i/s -     16.181B in   5.046572s
  Hash#fetch + block      3.219B (± 1.1%) i/s -     16.122B in   5.009569s
    Hash#fetch + arg      3.189B (± 2.9%) i/s -     16.148B in   5.067514s

Comparison:
  Hash#fetch + block: 3218591812.2 i/s
  Hash#fetch + const: 3207296205.8 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 3189455631.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    29.636k i/100ms
         sort + to_h    19.773k i/100ms
Calculating -------------------------------------
      sort_by + to_h    571.165k (± 7.6%) i/s -      2.845M in   5.013818s
         sort + to_h    230.627k (± 6.3%) i/s -      1.147M in   5.000644s

Comparison:
      sort_by + to_h:   571165.0 i/s
         sort + to_h:   230626.7 i/s - 2.48x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   200.573k i/100ms
       Hash#each_key   210.793k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.105M (±11.1%) i/s -     10.430M in   5.082053s
       Hash#each_key      2.286M (± 3.4%) i/s -     11.594M in   5.078330s

Comparison:
       Hash#each_key:  2285727.0 i/s
      Hash#keys.each:  2104961.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   287.000  i/100ms
           Hash#key?    15.627M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      3.019k (±13.0%) i/s -     14.924k in   5.043208s
           Hash#key?    156.103M (± 1.2%) i/s -    781.346M in   5.006119s

Comparison:
           Hash#key?: 156102856.5 i/s
  Hash#keys.include?:     3018.6 i/s - 51712.95x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    51.858k i/100ms
            Hash#[]=    57.880k i/100ms
Calculating -------------------------------------
         Hash#merge!    596.534k (± 7.3%) i/s -      3.008M in   5.069600s
            Hash#[]=    609.213k (± 6.9%) i/s -      3.068M in   5.068114s

Comparison:
            Hash#[]=:   609213.3 i/s
         Hash#merge!:   596533.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        23.688k i/100ms
      Hash#merge({})    18.649k i/100ms
 Hash#dup#merge!({})    29.935k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        387.580k (±14.7%) i/s -      1.895M in   5.018176s
      Hash#merge({})    197.413k (± 8.4%) i/s -    988.397k in   5.050677s
 Hash#dup#merge!({})    310.528k (± 8.8%) i/s -      1.557M in   5.066121s

Comparison:
{}#merge!(Hash) do end:   387580.4 i/s
 Hash#dup#merge!({}):   310527.9 i/s - same-ish: difference falls within error
      Hash#merge({}):   197413.0 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   316.713M i/100ms
          Hash#merge   311.676M i/100ms
Calculating -------------------------------------
        Hash#**other      3.199B (± 2.4%) i/s -     16.152B in   5.051782s
          Hash#merge      3.211B (± 2.1%) i/s -     16.207B in   5.050253s

Comparison:
          Hash#merge: 3210642427.5 i/s
        Hash#**other: 3199356277.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.020k i/100ms
         Hash#merge!    60.418k i/100ms
Calculating -------------------------------------
          Hash#merge     11.764k (±10.3%) i/s -     58.140k in   5.008236s
         Hash#merge!    633.119k (± 3.3%) i/s -      3.202M in   5.063350s

Comparison:
         Hash#merge!:   633119.4 i/s
          Hash#merge:    11763.8 i/s - 53.82x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.789M i/100ms
Array#each               1.563M i/100ms
Array#each_w/_object     1.492M i/100ms
Hash#select-include      2.451M i/100ms
Calculating -------------------------------------
Hash#native-slice        18.224M (± 6.4%) i/s -     91.217M in   5.032759s
Array#each               15.413M (± 6.0%) i/s -     78.151M in   5.095762s
Array#each_w/_object     15.551M (± 6.2%) i/s -     77.566M in   5.014651s
Hash#select-include      24.314M (± 6.6%) i/s -    122.534M in   5.068816s

Comparison:
Hash#select-include : 24314460.8 i/s
Hash#native-slice   : 18223660.0 i/s - 1.33x  (± 0.00) slower
Array#each_w/_object: 15551188.0 i/s - 1.56x  (± 0.00) slower
Array#each          : 15413368.4 i/s - 1.58x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   268.000  i/100ms
         Hash#value?   651.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      2.853k (±10.9%) i/s -     14.204k in   5.054398s
         Hash#value?      6.550k (± 0.7%) i/s -     33.201k in   5.069178s

Comparison:
         Hash#value?:     6549.9 i/s
Hash#values.include?:     2852.6 i/s - 2.30x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   318.055M i/100ms
                send   310.767M i/100ms
      method_missing   323.109M i/100ms
Calculating -------------------------------------
                call      3.190B (± 2.7%) i/s -     16.221B in   5.088190s
                send      3.216B (± 2.1%) i/s -     16.160B in   5.027670s
      method_missing      3.218B (± 1.3%) i/s -     16.155B in   5.020985s

Comparison:
      method_missing: 3218124803.3 i/s
                send: 3215736018.5 i/s - same-ish: difference falls within error
                call: 3190413526.6 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    46.659k i/100ms
      Symbol#to_proc    69.498k i/100ms
Calculating -------------------------------------
               Block    765.211k (±16.5%) i/s -      3.733M in   5.038882s
      Symbol#to_proc    772.450k (±14.1%) i/s -      3.822M in   5.057847s

Comparison:
      Symbol#to_proc:   772450.1 i/s
               Block:   765210.8 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   321.370M i/100ms
       block + yield   322.828M i/100ms
        unused block   323.025M i/100ms
               yield   312.489M i/100ms
Calculating -------------------------------------
          block.call      3.224B (± 1.3%) i/s -     16.390B in   5.085354s
       block + yield      3.223B (± 1.5%) i/s -     16.141B in   5.008989s
        unused block      3.202B (± 2.5%) i/s -     16.151B in   5.047789s
               yield      3.217B (± 2.0%) i/s -     16.249B in   5.053837s

Comparison:
          block.call: 3223585582.4 i/s
       block + yield: 3223236460.7 i/s - same-ish: difference falls within error
               yield: 3216718482.1 i/s - same-ish: difference falls within error
        unused block: 3201808013.3 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     5.127k i/100ms
      range#include?   170.000  i/100ms
       range#member?   242.000  i/100ms
       plain compare     8.244k i/100ms
Calculating -------------------------------------
        range#cover?     59.396k (±27.2%) i/s -    266.604k in   5.063006s
      range#include?      2.439k (±28.7%) i/s -     10.710k in   5.023421s
       range#member?      2.239k (±27.2%) i/s -     10.164k in   5.002918s
       plain compare     89.826k (±23.2%) i/s -    412.200k in   5.041465s

Comparison:
       plain compare:    89825.8 i/s
        range#cover?:    59395.6 i/s - same-ish: difference falls within error
      range#include?:     2439.0 i/s - 36.83x  (± 0.00) slower
       range#member?:     2238.8 i/s - 40.12x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    34.092M i/100ms
           String#=~    31.513M i/100ms
          Regexp#===    31.627M i/100ms
        String#match    32.290M i/100ms
Calculating -------------------------------------
       String#match?    351.280M (± 2.5%) i/s -      1.773B in   5.050390s
           String#=~    313.965M (± 1.7%) i/s -      1.576B in   5.020085s
          Regexp#===    314.611M (± 1.7%) i/s -      1.581B in   5.027956s
        String#match    321.381M (± 2.2%) i/s -      1.614B in   5.026288s

Comparison:
       String#match?: 351279520.1 i/s
        String#match: 321381055.9 i/s - 1.09x  (± 0.00) slower
          Regexp#===: 314610561.9 i/s - 1.12x  (± 0.00) slower
           String#=~: 313964773.0 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.505M i/100ms
      String#casecmp     4.735M i/100ms
Calculating -------------------------------------
String#downcase + ==     29.935M (± 7.6%) i/s -    150.308M in   5.064567s
      String#casecmp     46.662M (± 7.2%) i/s -    231.992M in   5.007653s

Comparison:
      String#casecmp: 46661628.9 i/s
String#downcase + ==: 29935474.9 i/s - 1.56x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     9.516M i/100ms
       String#concat     9.748M i/100ms
       String#append    10.321M i/100ms
         "foo" "bar"   322.789M i/100ms
  "#{'foo'}#{'bar'}"    10.641M i/100ms
Calculating -------------------------------------
            String#+    105.418M (± 2.6%) i/s -    532.886M in   5.058575s
       String#concat    103.220M (± 6.3%) i/s -    516.653M in   5.032690s
       String#append    102.472M (± 7.7%) i/s -    516.049M in   5.079201s
         "foo" "bar"      3.193B (± 3.3%) i/s -     16.139B in   5.060981s
  "#{'foo'}#{'bar'}"    103.289M (± 6.4%) i/s -    521.426M in   5.078249s

Comparison:
         "foo" "bar": 3192887623.1 i/s
            String#+: 105417769.0 i/s - 30.29x  (± 0.00) slower
  "#{'foo'}#{'bar'}": 103288782.7 i/s - 30.91x  (± 0.00) slower
       String#concat: 103219816.7 i/s - 30.93x  (± 0.00) slower
       String#append: 102471785.8 i/s - 31.16x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   317.139M i/100ms
          String#dup   321.977M i/100ms
Calculating -------------------------------------
           String#+@      3.191B (± 2.7%) i/s -     16.174B in   5.072216s
          String#dup      3.205B (± 2.3%) i/s -     16.099B in   5.026080s

Comparison:
          String#dup: 3204864490.8 i/s
           String#+@: 3191242272.2 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   847.320k i/100ms
       String#match?     1.814M i/100ms
    String#end_with?    11.128M i/100ms
Calculating -------------------------------------
           String#=~     15.155M (± 3.2%) i/s -     76.259M in   5.037651s
       String#match?     18.196M (± 1.5%) i/s -     92.508M in   5.085091s
    String#end_with?    109.924M (± 3.4%) i/s -    556.385M in   5.068047s

Comparison:
    String#end_with?: 109924013.2 i/s
       String#match?: 18196342.3 i/s - 6.04x  (± 0.00) slower
           String#=~: 15154904.5 i/s - 7.25x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   771.671k i/100ms
          String#sub   946.752k i/100ms
String#dup["string"]=
                        10.284M i/100ms
Calculating -------------------------------------
         String#gsub      8.877M (± 8.6%) i/s -     44.757M in   5.092928s
          String#sub     10.093M (± 9.9%) i/s -     50.178M in   5.028766s
String#dup["string"]=
                        102.811M (± 5.9%) i/s -    514.198M in   5.026862s

Comparison:
String#dup["string"]=: 102811108.9 i/s
          String#sub: 10092779.5 i/s - 10.19x  (± 0.00) slower
         String#gsub:  8877052.8 i/s - 11.58x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   342.920k i/100ms
           String#tr   153.839k i/100ms
Calculating -------------------------------------
         String#gsub      4.256M (± 8.5%) i/s -     21.261M in   5.041209s
           String#tr      1.593M (± 2.7%) i/s -      8.000M in   5.024500s

Comparison:
         String#gsub:  4255581.2 i/s
           String#tr:  1593347.6 i/s - 2.67x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   320.932M i/100ms
         With Freeze   318.856M i/100ms
Calculating -------------------------------------
      Without Freeze      3.201B (± 2.2%) i/s -     16.047B in   5.015910s
         With Freeze      3.214B (± 2.1%) i/s -     16.262B in   5.062714s

Comparison:
         With Freeze: 3213664696.9 i/s
      Without Freeze: 3200814093.4 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     6.191k i/100ms
      String#squeeze    85.285k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    166.236k (±10.4%) i/s -    817.212k in   5.008662s
      String#squeeze    859.556k (± 4.9%) i/s -      4.350M in   5.074582s

Comparison:
      String#squeeze:   859555.6 i/s
 String#gsub/regex+/:   166235.9 i/s - 5.17x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     7.592M i/100ms
       String#match?    14.040M i/100ms
  String#start_with?    12.863M i/100ms
Calculating -------------------------------------
           String#=~     99.623M (± 6.4%) i/s -    501.058M in   5.059268s
       String#match?    139.076M (± 5.2%) i/s -    702.006M in   5.067518s
  String#start_with?    127.496M (± 3.2%) i/s -    643.174M in   5.050341s

Comparison:
       String#match?: 139075960.4 i/s
  String#start_with?: 127496113.8 i/s - 1.09x  (± 0.00) slower
           String#=~: 99623416.0 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   109.258k i/100ms
    String#[0, n] ==   261.839k i/100ms
   String#[RANGE] ==   434.288k i/100ms
   String#[0...n] ==   269.264k i/100ms
Calculating -------------------------------------
  String#start_with?      6.741M (± 3.9%) i/s -     33.651M in   5.005143s
    String#[0, n] ==      2.547M (± 6.8%) i/s -     12.830M in   5.066771s
   String#[RANGE] ==      4.232M (± 6.4%) i/s -     21.280M in   5.056644s
   String#[0...n] ==      2.644M (± 7.2%) i/s -     13.194M in   5.026446s

Comparison:
  String#start_with?:  6740572.1 i/s
   String#[RANGE] ==:  4231983.9 i/s - 1.59x  (± 0.00) slower
   String#[0...n] ==:  2644172.8 i/s - 2.55x  (± 0.00) slower
    String#[0, n] ==:  2547402.0 i/s - 2.65x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    10.295M i/100ms
 String#sub!'string'   975.800k i/100ms
String#gsub!'string'   894.284k i/100ms
  String#[/regexp/]=     9.989M i/100ms
 String#sub!/regexp/     2.014M i/100ms
String#gsub!/regexp/   943.022k i/100ms
Calculating -------------------------------------
  String#['string']=    103.355M (± 2.8%) i/s -    525.039M in   5.084297s
 String#sub!'string'     10.936M (±10.8%) i/s -     54.645M in   5.069370s
String#gsub!'string'      9.384M (± 8.6%) i/s -     46.503M in   5.000379s
  String#[/regexp/]=     98.915M (± 2.7%) i/s -    499.463M in   5.053546s
 String#sub!/regexp/     31.267M (± 3.5%) i/s -    157.060M in   5.029803s
String#gsub!/regexp/      9.374M (± 9.2%) i/s -     47.151M in   5.087732s

Comparison:
  String#['string']=: 103355018.8 i/s
  String#[/regexp/]=: 98914924.1 i/s - same-ish: difference falls within error
 String#sub!/regexp/: 31267457.9 i/s - 3.31x  (± 0.00) slower
 String#sub!'string': 10936420.5 i/s - 9.45x  (± 0.00) slower
String#gsub!'string':  9384359.7 i/s - 11.01x  (± 0.00) slower
String#gsub!/regexp/:  9374468.7 i/s - 11.03x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     5.602M i/100ms
        String#chomp     5.787M i/100ms
String#delete_suffix    15.126M i/100ms
Calculating -------------------------------------
          String#sub     83.222M (± 8.1%) i/s -    414.517M in   5.025081s
        String#chomp     58.174M (± 1.5%) i/s -    295.126M in   5.074436s
String#delete_suffix    150.250M (±10.6%) i/s -    741.167M in   5.011655s

Comparison:
String#delete_suffix: 150249879.0 i/s
          String#sub: 83222422.8 i/s - 1.81x  (± 0.00) slower
        String#chomp: 58174175.2 i/s - 2.58x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   307.386M i/100ms
          String#sub   127.142M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.209B (± 1.8%) i/s -     16.291B in   5.079314s
          String#sub      1.280B (± 3.2%) i/s -      6.484B in   5.073244s

Comparison:
String#delete_prefix: 3208564980.5 i/s
          String#sub: 1279581723.4 i/s - 2.51x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.831M i/100ms
    String#unpack[0]     1.933M i/100ms
Calculating -------------------------------------
      String#unpack1     19.746M (± 6.0%) i/s -     98.881M in   5.032021s
    String#unpack[0]     19.708M (± 6.0%) i/s -     98.583M in   5.025999s

Comparison:
      String#unpack1: 19746447.8 i/s
    String#unpack[0]: 19707952.6 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.2.0-dev-37fdafbf, like ruby 3.2.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    43.263k i/100ms
          Time.parse   359.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    897.307k (± 8.9%) i/s -      4.456M in   5.032844s
          Time.parse      6.343k (±14.6%) i/s -     30.874k in   5.044378s

Comparison:
        Time.iso8601:   897307.4 i/s
          Time.parse:     6343.5 i/s - 141.45x  (± 0.00) slower

