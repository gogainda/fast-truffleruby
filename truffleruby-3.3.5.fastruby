$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       291.346M i/100ms
Function with splat arguments
                         1.833k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.015B (± 2.2%) i/s -     15.150B in   5.027381s
Function with splat arguments
                         20.713k (± 8.8%) i/s -    102.648k in   5.003387s

Comparison:
Function with single Array argument: 3015053862.9 i/s
Function with splat arguments:    20713.1 i/s - 145563.01x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   299.779M i/100ms
Sequential Assignment
                       289.302M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.005B (± 3.4%) i/s -     15.289B in   5.094944s
Sequential Assignment
                          3.013B (± 2.6%) i/s -     15.333B in   5.092999s

Comparison:
Sequential Assignment: 3012659747.0 i/s
 Parallel Assignment: 3004858774.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   314.550M i/100ms
       attr_accessor   294.868M i/100ms
Calculating -------------------------------------
   getter_and_setter      2.979B (± 7.3%) i/s -     14.784B in   5.007984s
       attr_accessor      3.026B (± 2.1%) i/s -     15.333B in   5.069469s

Comparison:
       attr_accessor: 3025972072.0 i/s
   getter_and_setter: 2978850336.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    12.591k i/100ms
         respond_to?   299.700M i/100ms
Calculating -------------------------------------
      begin...rescue    100.239k (± 9.2%) i/s -    503.640k in   5.086179s
         respond_to?      3.022B (± 2.7%) i/s -     15.285B in   5.061270s

Comparison:
         respond_to?: 3022309198.4 i/s
      begin...rescue:   100238.9 i/s - 30151.07x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   298.332M i/100ms
             &method    18.087M i/100ms
Calculating -------------------------------------
              normal      2.934B (± 7.2%) i/s -     14.618B in   5.017521s
             &method    181.132M (± 2.1%) i/s -    922.437M in   5.094912s

Comparison:
              normal: 2933577084.8 i/s
             &method: 181132145.2 i/s - 16.20x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       135.000  i/100ms
       define_method   145.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          3.876k (±49.7%) i/s -      7.965k in   5.068924s
       define_method     11.489k (±43.9%) i/s -     10.150k in   5.026086s

Comparison:
       define_method:    11488.8 i/s
module_eval with string:     3875.6 i/s - 2.96x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   149.470k i/100ms
       Kernel#format   175.915k i/100ms
            String#%   106.858k i/100ms
Calculating -------------------------------------
         Float#round      2.609M (± 5.7%) i/s -     13.004M in   5.004136s
       Kernel#format      1.753M (± 2.6%) i/s -      8.796M in   5.022140s
            String#%      1.079M (± 2.4%) i/s -      5.450M in   5.053610s

Comparison:
         Float#round:  2608744.4 i/s
       Kernel#format:  1752608.7 i/s - 1.49x  (± 0.00) slower
            String#%:  1079036.2 i/s - 2.42x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   306.989M i/100ms
          OpenStruct   304.882M i/100ms
Calculating -------------------------------------
                Hash      3.028B (± 2.2%) i/s -     15.349B in   5.071792s
          OpenStruct      3.062B (± 2.1%) i/s -     15.549B in   5.079915s

Comparison:
          OpenStruct: 3062232875.3 i/s
                Hash: 3027862643.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   299.388M i/100ms
          OpenStruct     3.455k i/100ms
Calculating -------------------------------------
                Hash      2.856B (± 9.4%) i/s -     14.371B in   5.090561s
          OpenStruct     46.798k (±10.6%) i/s -    231.485k in   5.041533s

Comparison:
                Hash: 2856332512.9 i/s
          OpenStruct:    46798.2 i/s - 61035.16x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   909.440k i/100ms
  ancestors.include?   223.839k i/100ms
Calculating -------------------------------------
  less than or equal      9.918M (± 2.9%) i/s -     50.019M in   5.047538s
  ancestors.include?      2.272M (± 7.6%) i/s -     11.416M in   5.062996s

Comparison:
  less than or equal:  9918206.7 i/s
  ancestors.include?:  2272427.1 i/s - 4.36x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     30.756  (± 3.3%) i/s -    154.000  in   5.012195s
         Kernel loop     30.537  (± 6.5%) i/s -    153.000  in   5.028356s

Comparison:
          While Loop:       30.8 i/s
         Kernel loop:       30.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   303.786M i/100ms
         Array#first   299.260M i/100ms
Calculating -------------------------------------
           Array#[0]      3.025B (± 2.1%) i/s -     15.189B in   5.023957s
         Array#first      3.010B (± 2.7%) i/s -     15.262B in   5.074410s

Comparison:
           Array#[0]: 3024697346.6 i/s
         Array#first: 3010042870.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   314.108M i/100ms
          Array#last   314.734M i/100ms
Calculating -------------------------------------
          Array#[-1]      2.967B (± 8.7%) i/s -     14.763B in   5.033843s
          Array#last      3.042B (± 2.0%) i/s -     15.422B in   5.071133s

Comparison:
          Array#last: 3042332236.4 i/s
          Array#[-1]: 2967267220.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   924.322k i/100ms
Calculating -------------------------------------
                find     13.593  (± 0.0%) i/s -     68.000  in   5.006729s
             bsearch      9.295M (± 3.9%) i/s -     47.140M in   5.079705s

Comparison:
             bsearch:  9295135.9 i/s
                find:       13.6 i/s - 683807.41x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.211  (± 0.0%) i/s -      2.000  in   9.494075s
        Array#insert      1.387  (± 0.0%) i/s -      7.000  in   5.048481s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.2 i/s - 6.58x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   317.549M i/100ms
          Array#size   314.575M i/100ms
         Array#count   302.713M i/100ms
Calculating -------------------------------------
        Array#length      3.037B (± 2.0%) i/s -     15.242B in   5.020482s
          Array#size      3.029B (± 1.7%) i/s -     15.414B in   5.090628s
         Array#count      3.036B (± 1.1%) i/s -     15.438B in   5.085881s

Comparison:
        Array#length: 3037225879.8 i/s
         Array#count: 3035908824.4 i/s - same-ish: difference falls within error
          Array#size: 3028851699.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    34.085k i/100ms
        Array#sample     3.792M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    373.787k (± 4.0%) i/s -      1.875M in   5.024267s
        Array#sample     37.818M (± 3.4%) i/s -    189.599M in   5.019978s

Comparison:
        Array#sample: 37817994.7 i/s
 Array#shuffle.first:   373786.6 i/s - 101.18x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   931.000  i/100ms
          Date.parse   526.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     17.940k (±44.8%) i/s -     76.342k in   5.026882s
          Date.parse      8.205k (±22.1%) i/s -     38.398k in   5.013310s

Comparison:
        Date.iso8601:    17939.8 i/s
          Date.parse:     8204.6 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   297.992k i/100ms
           Array#map     1.829M i/100ms
Calculating -------------------------------------
   Array#each + push      3.336M (± 6.0%) i/s -     16.688M in   5.021564s
           Array#map     18.974M (± 9.2%) i/s -     95.111M in   5.063607s

Comparison:
           Array#map: 18973844.3 i/s
   Array#each + push:  3336253.1 i/s - 5.69x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    11.674M i/100ms
               #each    35.372M i/100ms
Calculating -------------------------------------
            For loop    117.135M (± 1.7%) i/s -    595.359M in   5.084304s
               #each    352.254M (± 1.8%) i/s -      1.769B in   5.022415s

Comparison:
               #each: 352254031.9 i/s
            For loop: 117135462.8 i/s - 3.01x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.396M i/100ms
     each_with_index     2.363M i/100ms
Calculating -------------------------------------
          While Loop     14.504M (± 3.4%) i/s -     72.593M in   5.010627s
     each_with_index     26.773M (± 6.1%) i/s -    134.690M in   5.050854s

Comparison:
     each_with_index: 26773283.6 i/s
          While Loop: 14504072.8 i/s - 1.85x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   303.992k i/100ms
      inject to_proc   309.313k i/100ms
        inject block   311.271k i/100ms
Calculating -------------------------------------
       inject symbol      3.093M (± 2.0%) i/s -     15.504M in   5.014765s
      inject to_proc      3.091M (± 1.9%) i/s -     15.466M in   5.005448s
        inject block      3.079M (± 3.2%) i/s -     15.564M in   5.061266s

Comparison:
       inject symbol:  3092986.2 i/s
      inject to_proc:  3090949.9 i/s - same-ish: difference falls within error
        inject block:  3078648.6 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    22.480k i/100ms
   Array#map.flatten    26.682k i/100ms
      Array#flat_map    57.705k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    256.137k (± 8.0%) i/s -      1.281M in   5.047420s
   Array#map.flatten    263.505k (± 7.4%) i/s -      1.307M in   5.000527s
      Array#flat_map    582.450k (± 2.4%) i/s -      2.943M in   5.055844s

Comparison:
      Array#flat_map:   582450.0 i/s
   Array#map.flatten:   263504.6 i/s - 2.21x  (± 0.00) slower
Array#map.flatten(1):   256136.9 i/s - 2.27x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   343.496k i/100ms
  Array#reverse_each     2.325M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.525M (± 2.4%) i/s -     17.862M in   5.070154s
  Array#reverse_each     23.264M (± 2.2%) i/s -    116.269M in   5.000129s

Comparison:
  Array#reverse_each: 23263722.7 i/s
  Array#reverse.each:  3525104.9 i/s - 6.60x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       999.903k i/100ms
   Enumerable#detect     4.636M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.316M (± 7.5%) i/s -    204.980M in  20.024622s
   Enumerable#detect     46.364M (± 2.2%) i/s -    927.103M in  20.007294s

Comparison:
   Enumerable#detect: 46364129.7 i/s
Enumerable#select.first: 10316037.2 i/s - 4.49x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       366.315k i/100ms
Enumerable#select.last
                       513.938k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.730M (± 3.0%) i/s -     18.682M in   5.013756s
Enumerable#select.last
                          5.383M (± 6.2%) i/s -     27.239M in   5.090318s

Comparison:
Enumerable#select.last:  5382658.3 i/s
Enumerable#reverse.detect:  3729533.3 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.539k i/100ms
  Enumerable#sort_by     4.129k i/100ms
     Enumerable#sort     4.742k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         40.237k (±15.8%) i/s -    187.886k in   5.010380s
  Enumerable#sort_by     39.928k (±15.1%) i/s -    189.934k in   5.031988s
     Enumerable#sort     51.502k (±15.5%) i/s -    256.068k in   5.141508s

Comparison:
     Enumerable#sort:    51501.7 i/s
Enumerable#sort_by (Symbol#to_proc):    40236.8 i/s - same-ish: difference falls within error
  Enumerable#sort_by:    39927.9 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   976.852k i/100ms
Enumerable#sort_by...first
                        10.209k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      9.825M (± 2.5%) i/s -     49.819M in   5.074279s
Enumerable#sort_by...first
                        113.299k (± 6.8%) i/s -    571.704k in   5.085120s

Comparison:
   Enumerable#min_by:  9824691.7 i/s
Enumerable#sort_by...first:   113298.7 i/s - 86.71x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   548.105k i/100ms
            Hash#dup   710.008k i/100ms
Calculating -------------------------------------
              Hash[]      7.335M (±10.3%) i/s -     36.175M in   5.007536s
            Hash#dup      7.267M (±10.2%) i/s -     36.210M in   5.036338s

Comparison:
              Hash[]:  7334516.1 i/s
            Hash#dup:  7267079.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   303.147M i/100ms
  Hash#fetch, symbol   296.979M i/100ms
     Hash#[], string    29.011M i/100ms
  Hash#fetch, string    26.544M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.020B (± 2.2%) i/s -     15.157B in   5.021443s
  Hash#fetch, symbol      3.022B (± 1.7%) i/s -     15.146B in   5.013274s
     Hash#[], string    289.636M (± 2.1%) i/s -      1.451B in   5.010524s
  Hash#fetch, string    266.233M (± 1.5%) i/s -      1.354B in   5.086043s

Comparison:
  Hash#fetch, symbol: 3022060878.3 i/s
     Hash#[], symbol: 3020036728.0 i/s - same-ish: difference falls within error
     Hash#[], string: 289636413.8 i/s - 10.43x  (± 0.00) slower
  Hash#fetch, string: 266232753.3 i/s - 11.35x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    91.689M i/100ms
             Hash#[]    91.720M i/100ms
          Hash#[] ||    91.323M i/100ms
          Hash#[] &&    91.682M i/100ms
          Hash#fetch    91.855M i/100ms
 Hash#fetch fallback    91.595M i/100ms
Calculating -------------------------------------
            Hash#dig    913.481M (± 1.9%) i/s -      4.584B in   5.020633s
             Hash#[]    914.554M (± 1.4%) i/s -      4.586B in   5.015439s
          Hash#[] ||    910.404M (± 2.0%) i/s -      4.566B in   5.017549s
          Hash#[] &&    912.282M (± 1.9%) i/s -      4.584B in   5.026700s
          Hash#fetch    914.524M (± 1.4%) i/s -      4.593B in   5.023110s
 Hash#fetch fallback    915.208M (± 1.3%) i/s -      4.580B in   5.004921s

Comparison:
 Hash#fetch fallback: 915207534.7 i/s
             Hash#[]: 914553583.0 i/s - same-ish: difference falls within error
          Hash#fetch: 914523603.4 i/s - same-ish: difference falls within error
            Hash#dig: 913480728.7 i/s - same-ish: difference falls within error
          Hash#[] &&: 912281973.6 i/s - same-ish: difference falls within error
          Hash#[] ||: 910404013.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   302.367M i/100ms
  Hash#fetch + block   295.146M i/100ms
    Hash#fetch + arg   305.317M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.007B (± 2.9%) i/s -     15.118B in   5.031667s
  Hash#fetch + block      3.032B (± 1.8%) i/s -     15.348B in   5.062975s
    Hash#fetch + arg      3.013B (± 2.5%) i/s -     15.266B in   5.070223s

Comparison:
  Hash#fetch + block: 3032351637.2 i/s
    Hash#fetch + arg: 3012882514.4 i/s - same-ish: difference falls within error
  Hash#fetch + const: 3007476898.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    39.290k i/100ms
         sort + to_h    14.133k i/100ms
Calculating -------------------------------------
      sort_by + to_h    549.295k (±10.7%) i/s -      2.711M in   5.019675s
         sort + to_h    238.060k (±11.2%) i/s -      1.173M in   5.008472s

Comparison:
      sort_by + to_h:   549295.2 i/s
         sort + to_h:   238059.9 i/s - 2.31x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   134.286k i/100ms
       Hash#each_key   235.402k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.252M (±10.5%) i/s -     11.011M in   5.009574s
       Hash#each_key      2.537M (± 3.0%) i/s -     12.712M in   5.015006s

Comparison:
       Hash#each_key:  2537174.9 i/s
      Hash#keys.each:  2251975.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   292.000  i/100ms
           Hash#key?     3.537M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      3.065k (±15.5%) i/s -     14.892k in   5.006356s
           Hash#key?     35.141M (± 1.1%) i/s -    176.870M in   5.033863s

Comparison:
           Hash#key?: 35140621.3 i/s
  Hash#keys.include?:     3065.5 i/s - 11463.44x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    48.703k i/100ms
            Hash#[]=    57.866k i/100ms
Calculating -------------------------------------
         Hash#merge!    571.121k (± 7.7%) i/s -      2.873M in   5.078046s
            Hash#[]=    598.584k (± 6.9%) i/s -      3.009M in   5.051382s

Comparison:
            Hash#[]=:   598584.1 i/s
         Hash#merge!:   571121.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        34.028k i/100ms
      Hash#merge({})    18.391k i/100ms
 Hash#dup#merge!({})    31.196k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        387.262k (±10.3%) i/s -      1.940M in   5.067023s
      Hash#merge({})    198.999k (± 8.3%) i/s -    993.114k in   5.043332s
 Hash#dup#merge!({})    312.435k (± 9.0%) i/s -      1.560M in   5.035311s

Comparison:
{}#merge!(Hash) do end:   387262.1 i/s
 Hash#dup#merge!({}):   312435.0 i/s - 1.24x  (± 0.00) slower
      Hash#merge({}):   198999.5 i/s - 1.95x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   302.276M i/100ms
          Hash#merge   310.517M i/100ms
Calculating -------------------------------------
        Hash#**other      3.029B (± 2.4%) i/s -     15.416B in   5.092524s
          Hash#merge      3.013B (± 2.5%) i/s -     15.215B in   5.053413s

Comparison:
        Hash#**other: 3029113778.6 i/s
          Hash#merge: 3012909839.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.004k i/100ms
         Hash#merge!    59.007k i/100ms
Calculating -------------------------------------
          Hash#merge     10.952k (±11.9%) i/s -     54.216k in   5.026603s
         Hash#merge!    609.939k (± 4.3%) i/s -      3.068M in   5.040809s

Comparison:
         Hash#merge!:   609938.7 i/s
          Hash#merge:    10952.4 i/s - 55.69x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.845M i/100ms
Array#each               1.451M i/100ms
Array#each_w/_object     1.492M i/100ms
Hash#select-include      2.463M i/100ms
Calculating -------------------------------------
Hash#native-slice        19.505M (± 4.3%) i/s -     97.777M in   5.022489s
Array#each               15.404M (± 4.7%) i/s -     76.924M in   5.006361s
Array#each_w/_object     15.432M (± 4.0%) i/s -     77.585M in   5.036040s
Hash#select-include      24.470M (± 7.0%) i/s -    123.145M in   5.069118s

Comparison:
Hash#select-include : 24469697.9 i/s
Hash#native-slice   : 19504711.6 i/s - 1.25x  (± 0.00) slower
Array#each_w/_object: 15431688.9 i/s - 1.59x  (± 0.00) slower
Array#each          : 15404333.7 i/s - 1.59x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   275.000  i/100ms
         Hash#value?   665.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      2.899k (±11.1%) i/s -     14.300k in   5.020189s
         Hash#value?      6.694k (± 0.9%) i/s -     33.915k in   5.066997s

Comparison:
         Hash#value?:     6693.9 i/s
Hash#values.include?:     2898.8 i/s - 2.31x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   300.613M i/100ms
                send   303.844M i/100ms
      method_missing   299.825M i/100ms
Calculating -------------------------------------
                call      3.008B (± 4.0%) i/s -     15.331B in   5.106074s
                send      3.032B (± 1.8%) i/s -     15.192B in   5.012101s
      method_missing      3.021B (± 2.3%) i/s -     15.291B in   5.063906s

Comparison:
                send: 3032090425.5 i/s
      method_missing: 3021368555.2 i/s - same-ish: difference falls within error
                call: 3007887539.1 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    61.325k i/100ms
      Symbol#to_proc    65.784k i/100ms
Calculating -------------------------------------
               Block    665.657k (±13.4%) i/s -      3.250M in   5.000618s
      Symbol#to_proc    652.892k (±11.7%) i/s -      3.223M in   5.018754s

Comparison:
               Block:   665657.2 i/s
      Symbol#to_proc:   652892.4 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   302.983M i/100ms
       block + yield   302.693M i/100ms
        unused block   304.511M i/100ms
               yield   303.724M i/100ms
Calculating -------------------------------------
          block.call      3.037B (± 1.6%) i/s -     15.452B in   5.088508s
       block + yield      3.037B (± 1.7%) i/s -     15.437B in   5.085022s
        unused block      3.006B (± 3.3%) i/s -     15.226B in   5.070551s
               yield      3.016B (± 2.3%) i/s -     15.186B in   5.038166s

Comparison:
          block.call: 3037396488.4 i/s
       block + yield: 3036754817.8 i/s - same-ish: difference falls within error
               yield: 3015922957.0 i/s - same-ish: difference falls within error
        unused block: 3006412581.0 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     2.827k i/100ms
      range#include?   187.000  i/100ms
       range#member?   209.000  i/100ms
       plain compare     7.944k i/100ms
Calculating -------------------------------------
        range#cover?     66.714k (±31.7%) i/s -    282.700k in   5.138869s
      range#include?      2.673k (±36.7%) i/s -     11.220k in   5.004107s
       range#member?      2.840k (±36.8%) i/s -     11.913k in   5.041649s
       plain compare     93.608k (±33.0%) i/s -    405.144k in   5.080398s

Comparison:
       plain compare:    93608.3 i/s
        range#cover?:    66714.1 i/s - same-ish: difference falls within error
       range#member?:     2839.5 i/s - 32.97x  (± 0.00) slower
      range#include?:     2673.4 i/s - 35.02x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    31.425M i/100ms
           String#=~    31.943M i/100ms
          Regexp#===    31.781M i/100ms
        String#match    31.272M i/100ms
Calculating -------------------------------------
       String#match?    345.100M (± 1.8%) i/s -      1.728B in   5.010175s
           String#=~    318.214M (± 1.0%) i/s -      1.597B in   5.019711s
          Regexp#===    319.537M (± 1.5%) i/s -      1.621B in   5.073645s
        String#match    310.884M (± 3.5%) i/s -      1.564B in   5.036354s

Comparison:
       String#match?: 345100017.4 i/s
          Regexp#===: 319537113.1 i/s - 1.08x  (± 0.00) slower
           String#=~: 318213833.9 i/s - 1.08x  (± 0.00) slower
        String#match: 310884067.8 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.451M i/100ms
      String#casecmp     4.756M i/100ms
Calculating -------------------------------------
String#downcase + ==     29.140M (± 8.9%) i/s -    144.590M in   5.014206s
      String#casecmp     46.572M (± 7.6%) i/s -    233.059M in   5.046070s

Comparison:
      String#casecmp: 46571856.5 i/s
String#downcase + ==: 29139572.0 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+    10.713M i/100ms
       String#concat    11.177M i/100ms
       String#append    11.393M i/100ms
         "foo" "bar"   303.294M i/100ms
  "#{'foo'}#{'bar'}"    11.328M i/100ms
Calculating -------------------------------------
            String#+    111.804M (± 4.2%) i/s -    567.798M in   5.087533s
       String#concat    111.197M (± 4.5%) i/s -    558.864M in   5.036611s
       String#append    111.616M (± 4.1%) i/s -    558.263M in   5.010434s
         "foo" "bar"      3.054B (± 1.3%) i/s -     15.468B in   5.065020s
  "#{'foo'}#{'bar'}"    110.783M (± 4.6%) i/s -    555.092M in   5.022013s

Comparison:
         "foo" "bar": 3054423428.9 i/s
            String#+: 111804464.6 i/s - 27.32x  (± 0.00) slower
       String#append: 111616117.8 i/s - 27.37x  (± 0.00) slower
       String#concat: 111197314.3 i/s - 27.47x  (± 0.00) slower
  "#{'foo'}#{'bar'}": 110782760.4 i/s - 27.57x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   300.013M i/100ms
          String#dup   305.097M i/100ms
Calculating -------------------------------------
           String#+@      3.043B (± 2.0%) i/s -     15.301B in   5.029590s
          String#dup      3.052B (± 1.7%) i/s -     15.255B in   5.000198s

Comparison:
          String#dup: 3051721870.9 i/s
           String#+@: 3043394270.8 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.482M i/100ms
       String#match?     1.773M i/100ms
    String#end_with?    10.710M i/100ms
Calculating -------------------------------------
           String#=~     15.132M (± 2.9%) i/s -     77.084M in   5.098732s
       String#match?     17.768M (± 1.5%) i/s -     90.435M in   5.090745s
    String#end_with?    106.024M (± 2.5%) i/s -    535.488M in   5.054102s

Comparison:
    String#end_with?: 106024243.7 i/s
       String#match?: 17768485.3 i/s - 5.97x  (± 0.00) slower
           String#=~: 15132094.3 i/s - 7.01x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    94.793k i/100ms
          String#sub   792.421k i/100ms
String#dup["string"]=
                        10.356M i/100ms
Calculating -------------------------------------
         String#gsub      8.481M (±12.9%) i/s -     40.951M in   4.997841s
          String#sub      9.756M (±11.3%) i/s -     48.338M in   5.038899s
String#dup["string"]=
                        102.850M (± 2.6%) i/s -    517.820M in   5.038734s

Comparison:
String#dup["string"]=: 102850457.4 i/s
          String#sub:  9755973.9 i/s - 10.54x  (± 0.00) slower
         String#gsub:  8481428.8 i/s - 12.13x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    90.149k i/100ms
           String#tr   184.275k i/100ms
Calculating -------------------------------------
         String#gsub      4.618M (±14.0%) i/s -     22.447M in   5.005495s
           String#tr      1.874M (± 5.1%) i/s -      9.398M in   5.031342s

Comparison:
         String#gsub:  4618446.7 i/s
           String#tr:  1873738.5 i/s - 2.46x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   302.221M i/100ms
         With Freeze   298.356M i/100ms
Calculating -------------------------------------
      Without Freeze      3.032B (± 3.2%) i/s -     15.413B in   5.088793s
         With Freeze      3.020B (± 2.8%) i/s -     15.216B in   5.042112s

Comparison:
      Without Freeze: 3032189938.1 i/s
         With Freeze: 3020408342.4 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     9.094k i/100ms
      String#squeeze    78.819k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    167.655k (±11.5%) i/s -    827.554k in   5.024030s
      String#squeeze    761.372k (± 6.7%) i/s -      3.862M in   5.098009s

Comparison:
      String#squeeze:   761372.0 i/s
 String#gsub/regex+/:   167655.3 i/s - 4.54x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~    12.938M i/100ms
       String#match?    13.918M i/100ms
  String#start_with?    16.050M i/100ms
Calculating -------------------------------------
           String#=~    142.685M (± 7.3%) i/s -    711.564M in   5.033003s
       String#match?    138.858M (± 2.0%) i/s -    695.921M in   5.013884s
  String#start_with?    159.682M (± 1.9%) i/s -    802.503M in   5.027537s

Comparison:
  String#start_with?: 159682177.9 i/s
           String#=~: 142685374.5 i/s - 1.12x  (± 0.00) slower
       String#match?: 138857963.9 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    49.702k i/100ms
    String#[0, n] ==   605.234k i/100ms
   String#[RANGE] ==   229.279k i/100ms
   String#[0...n] ==   663.230k i/100ms
Calculating -------------------------------------
  String#start_with?      7.170M (± 2.3%) i/s -     35.835M in   5.002172s
    String#[0, n] ==      6.477M (± 5.0%) i/s -     32.683M in   5.060187s
   String#[RANGE] ==     13.532M (±13.4%) i/s -     65.574M in   5.007925s
   String#[0...n] ==      6.563M (± 3.9%) i/s -     33.161M in   5.061077s

Comparison:
   String#[RANGE] ==: 13532369.7 i/s
  String#start_with?:  7170274.6 i/s - 1.89x  (± 0.00) slower
   String#[0...n] ==:  6563345.6 i/s - 2.06x  (± 0.00) slower
    String#[0, n] ==:  6476771.8 i/s - 2.09x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     8.754M i/100ms
 String#sub!'string'   150.164k i/100ms
String#gsub!'string'   635.598k i/100ms
  String#[/regexp/]=     9.986M i/100ms
 String#sub!/regexp/     1.161M i/100ms
String#gsub!/regexp/   916.605k i/100ms
Calculating -------------------------------------
  String#['string']=    102.805M (± 3.3%) i/s -    516.496M in   5.030234s
 String#sub!'string'     10.896M (±15.5%) i/s -     52.107M in   5.000061s
String#gsub!'string'      6.361M (± 4.7%) i/s -     31.780M in   5.007842s
  String#[/regexp/]=     99.845M (± 2.1%) i/s -    499.310M in   5.003286s
 String#sub!/regexp/     31.671M (± 5.9%) i/s -    157.879M in   5.007075s
String#gsub!/regexp/      8.972M (± 9.1%) i/s -     44.914M in   5.055857s

Comparison:
  String#['string']=: 102804656.4 i/s
  String#[/regexp/]=: 99845263.1 i/s - same-ish: difference falls within error
 String#sub!/regexp/: 31671094.7 i/s - 3.25x  (± 0.00) slower
 String#sub!'string': 10896160.2 i/s - 9.43x  (± 0.00) slower
String#gsub!/regexp/:  8972241.6 i/s - 11.46x  (± 0.00) slower
String#gsub!'string':  6361435.0 i/s - 16.16x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub   190.790k i/100ms
        String#chomp     6.501M i/100ms
String#delete_suffix    11.518M i/100ms
Calculating -------------------------------------
          String#sub     75.972M (±13.4%) i/s -    362.310M in   4.996978s
        String#chomp     64.686M (± 2.4%) i/s -    325.055M in   5.028334s
String#delete_suffix    118.952M (± 4.6%) i/s -    598.938M in   5.046282s

Comparison:
String#delete_suffix: 118952026.6 i/s
          String#sub: 75972405.2 i/s - 1.57x  (± 0.00) slower
        String#chomp: 64685889.5 i/s - 1.84x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   302.945M i/100ms
          String#sub   546.789k i/100ms
Calculating -------------------------------------
String#delete_prefix      3.029B (± 2.0%) i/s -     15.147B in   5.003414s
          String#sub    342.004M (± 3.2%) i/s -      1.707B in   4.999653s

Comparison:
String#delete_prefix: 3028699120.0 i/s
          String#sub: 342003744.9 i/s - 8.86x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.922M i/100ms
    String#unpack[0]     2.049M i/100ms
Calculating -------------------------------------
      String#unpack1     19.917M (± 7.0%) i/s -     99.949M in   5.054007s
    String#unpack[0]     20.361M (± 4.0%) i/s -    102.428M in   5.039054s

Comparison:
    String#unpack[0]: 20360578.2 i/s
      String#unpack1: 19916843.9 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 25.0.0-dev-b2a19869, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    37.872k i/100ms
          Time.parse   316.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    555.177k (±24.2%) i/s -      2.651M in   5.042909s
          Time.parse      6.169k (±11.0%) i/s -     30.652k in   5.046013s

Comparison:
        Time.iso8601:   555177.0 i/s
          Time.parse:     6169.0 i/s - 89.99x  (± 0.00) slower

