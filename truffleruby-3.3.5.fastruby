$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       306.994M i/100ms
Function with splat arguments
                         2.032k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.207B (± 2.0%) i/s -     16.271B in   5.076093s
Function with splat arguments
                         21.000k (± 9.4%) i/s -    105.664k in   5.085189s

Comparison:
Function with single Array argument: 3206853855.0 i/s
Function with splat arguments:    21000.1 i/s - 152706.52x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   317.052M i/100ms
Sequential Assignment
                       311.255M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.173B (± 3.3%) i/s -     15.853B in   5.002305s
Sequential Assignment
                          3.188B (± 2.1%) i/s -     16.185B in   5.079602s

Comparison:
Sequential Assignment: 3187817000.0 i/s
 Parallel Assignment: 3172812118.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   320.038M i/100ms
       attr_accessor   312.358M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.181B (± 3.0%) i/s -     16.002B in   5.034853s
       attr_accessor      3.184B (± 3.3%) i/s -     15.930B in   5.009432s

Comparison:
       attr_accessor: 3183848651.6 i/s
   getter_and_setter: 3181376312.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    10.018k i/100ms
         respond_to?   316.976M i/100ms
Calculating -------------------------------------
      begin...rescue    104.715k (± 6.7%) i/s -    520.936k in   5.003969s
         respond_to?      3.162B (± 2.2%) i/s -     15.849B in   5.014742s

Comparison:
         respond_to?: 3162069350.5 i/s
      begin...rescue:   104714.6 i/s - 30197.02x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   320.005M i/100ms
             &method    18.134M i/100ms
Calculating -------------------------------------
              normal      3.139B (± 6.6%) i/s -     15.680B in   5.028340s
             &method    183.412M (± 0.9%) i/s -    924.812M in   5.042715s

Comparison:
              normal: 3138743686.1 i/s
             &method: 183412345.2 i/s - 17.11x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       152.000  i/100ms
       define_method   163.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          3.802k (±53.8%) i/s -      7.600k in   5.025938s
       define_method     11.748k (±42.5%) i/s -     12.062k in   7.050178s

Comparison:
       define_method:    11748.3 i/s
module_eval with string:     3802.0 i/s - 3.09x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   253.103k i/100ms
       Kernel#format   185.488k i/100ms
            String#%   184.431k i/100ms
Calculating -------------------------------------
         Float#round      2.664M (± 3.1%) i/s -     13.414M in   5.040921s
       Kernel#format      1.829M (± 2.1%) i/s -      9.274M in   5.071910s
            String#%      1.825M (± 2.1%) i/s -      9.222M in   5.053929s

Comparison:
         Float#round:  2663780.8 i/s
       Kernel#format:  1829446.2 i/s - 1.46x  (± 0.00) slower
            String#%:  1825444.8 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   312.439M i/100ms
          OpenStruct   311.266M i/100ms
Calculating -------------------------------------
                Hash      3.169B (± 2.9%) i/s -     15.934B in   5.032605s
          OpenStruct      3.186B (± 2.4%) i/s -     16.186B in   5.082793s

Comparison:
          OpenStruct: 3186330343.7 i/s
                Hash: 3169202941.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   318.069M i/100ms
          OpenStruct     4.164k i/100ms
Calculating -------------------------------------
                Hash      3.191B (± 2.3%) i/s -     16.222B in   5.086916s
          OpenStruct     49.880k (±11.7%) i/s -    245.676k in   5.025292s

Comparison:
                Hash: 3190774814.2 i/s
          OpenStruct:    49879.8 i/s - 63969.34x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   716.589k i/100ms
  ancestors.include?   228.702k i/100ms
Calculating -------------------------------------
  less than or equal     10.664M (± 6.7%) i/s -     53.744M in   5.062561s
  ancestors.include?      2.339M (± 7.0%) i/s -     11.664M in   5.021048s

Comparison:
  less than or equal: 10663539.6 i/s
  ancestors.include?:  2338837.0 i/s - 4.56x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     32.055  (± 3.1%) i/s -    161.000  in   5.029288s
         Kernel loop     32.040  (± 3.1%) i/s -    160.000  in   5.003526s

Comparison:
          While Loop:       32.1 i/s
         Kernel loop:       32.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   313.906M i/100ms
         Array#first   307.304M i/100ms
Calculating -------------------------------------
           Array#[0]      3.191B (± 2.8%) i/s -     16.009B in   5.021030s
         Array#first      3.207B (± 1.9%) i/s -     16.287B in   5.080644s

Comparison:
         Array#first: 3206935928.1 i/s
           Array#[0]: 3191189609.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   319.279M i/100ms
          Array#last   317.680M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.199B (± 2.5%) i/s -     16.283B in   5.093713s
          Array#last      3.205B (± 2.4%) i/s -     16.202B in   5.058021s

Comparison:
          Array#last: 3205250228.6 i/s
          Array#[-1]: 3198894183.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   928.043k i/100ms
Calculating -------------------------------------
                find     13.701  (± 0.0%) i/s -     69.000  in   5.041665s
             bsearch      9.442M (± 2.4%) i/s -     47.330M in   5.015649s

Comparison:
             bsearch:  9442299.7 i/s
                find:       13.7 i/s - 689168.48x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.213  (± 0.0%) i/s -      2.000  in   9.409157s
        Array#insert      1.397  (± 0.0%) i/s -      7.000  in   5.012503s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.2 i/s - 6.57x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   320.683M i/100ms
          Array#size   315.373M i/100ms
         Array#count   317.913M i/100ms
Calculating -------------------------------------
        Array#length      3.191B (± 2.4%) i/s -     16.034B in   5.027430s
          Array#size      3.207B (± 2.3%) i/s -     16.084B in   5.018009s
         Array#count      3.214B (± 1.4%) i/s -     16.214B in   5.045735s

Comparison:
         Array#count: 3213952851.2 i/s
          Array#size: 3207169718.4 i/s - same-ish: difference falls within error
        Array#length: 3191339551.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    36.717k i/100ms
        Array#sample     3.817M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    365.665k (± 3.3%) i/s -      1.836M in   5.026703s
        Array#sample     38.109M (± 1.5%) i/s -    190.855M in   5.009327s

Comparison:
        Array#sample: 38109109.2 i/s
 Array#shuffle.first:   365665.5 i/s - 104.22x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   931.000  i/100ms
          Date.parse   568.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     15.233k (±28.5%) i/s -     72.618k in   5.167562s
          Date.parse      7.861k (±23.5%) i/s -     36.920k in   5.027179s

Comparison:
        Date.iso8601:    15233.0 i/s
          Date.parse:     7860.9 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   304.222k i/100ms
           Array#map     1.858M i/100ms
Calculating -------------------------------------
   Array#each + push      3.322M (± 5.5%) i/s -     16.732M in   5.053456s
           Array#map     19.604M (± 8.7%) i/s -     98.486M in   5.068000s

Comparison:
           Array#map: 19603786.2 i/s
   Array#each + push:  3321654.8 i/s - 5.90x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    11.614M i/100ms
               #each    35.426M i/100ms
Calculating -------------------------------------
            For loop    117.728M (± 1.7%) i/s -    592.313M in   5.032787s
               #each    356.543M (± 0.5%) i/s -      1.807B in   5.067517s

Comparison:
               #each: 356542909.1 i/s
            For loop: 117727693.7 i/s - 3.03x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.383M i/100ms
     each_with_index     2.373M i/100ms
Calculating -------------------------------------
          While Loop     14.140M (± 2.6%) i/s -     71.905M in   5.088814s
     each_with_index     23.808M (± 3.0%) i/s -    121.008M in   5.087078s

Comparison:
     each_with_index: 23807894.2 i/s
          While Loop: 14140477.7 i/s - 1.68x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   307.715k i/100ms
      inject to_proc   312.593k i/100ms
        inject block   312.729k i/100ms
Calculating -------------------------------------
       inject symbol      3.101M (± 2.6%) i/s -     15.693M in   5.064241s
      inject to_proc      3.100M (± 3.0%) i/s -     15.630M in   5.046391s
        inject block      3.102M (± 3.8%) i/s -     15.636M in   5.050378s

Comparison:
        inject block:  3101918.7 i/s
       inject symbol:  3101121.6 i/s - same-ish: difference falls within error
      inject to_proc:  3100300.3 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    22.169k i/100ms
   Array#map.flatten    25.660k i/100ms
      Array#flat_map    58.311k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    257.713k (± 7.7%) i/s -      1.286M in   5.025534s
   Array#map.flatten    269.195k (± 7.1%) i/s -      1.360M in   5.084548s
      Array#flat_map    583.040k (± 3.4%) i/s -      2.916M in   5.006815s

Comparison:
      Array#flat_map:   583040.1 i/s
   Array#map.flatten:   269194.7 i/s - 2.17x  (± 0.00) slower
Array#map.flatten(1):   257712.9 i/s - 2.26x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   264.125k i/100ms
  Array#reverse_each     2.385M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.361M (± 4.4%) i/s -     16.904M in   5.042268s
  Array#reverse_each     27.514M (± 9.6%) i/s -    138.317M in   5.078162s

Comparison:
  Array#reverse_each: 27513986.2 i/s
  Array#reverse.each:  3360672.5 i/s - 8.19x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       976.160k i/100ms
   Enumerable#detect     4.688M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.384M (± 7.5%) i/s -    206.946M in  20.078860s
   Enumerable#detect     46.568M (± 2.5%) i/s -    932.938M in  20.048302s

Comparison:
   Enumerable#detect: 46568228.4 i/s
Enumerable#select.first: 10383660.3 i/s - 4.48x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       352.378k i/100ms
Enumerable#select.last
                       552.307k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.576M (± 4.3%) i/s -     17.971M in   5.035157s
Enumerable#select.last
                          5.445M (± 5.8%) i/s -     27.615M in   5.096514s

Comparison:
Enumerable#select.last:  5444703.4 i/s
Enumerable#reverse.detect:  3576254.2 i/s - 1.52x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.104k i/100ms
  Enumerable#sort_by     4.238k i/100ms
     Enumerable#sort     1.621k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         40.204k (±20.1%) i/s -    180.576k in   5.021544s
  Enumerable#sort_by     39.374k (±17.3%) i/s -    186.472k in   5.042592s
     Enumerable#sort     39.347k (±28.9%) i/s -    183.173k in   5.014012s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    40204.5 i/s
  Enumerable#sort_by:    39374.1 i/s - same-ish: difference falls within error
     Enumerable#sort:    39347.2 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   974.687k i/100ms
Enumerable#sort_by...first
                         6.940k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      9.926M (± 2.5%) i/s -     49.709M in   5.011384s
Enumerable#sort_by...first
                        114.592k (± 7.4%) i/s -    569.080k in   5.007230s

Comparison:
   Enumerable#min_by:  9925951.8 i/s
Enumerable#sort_by...first:   114592.2 i/s - 86.62x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   611.036k i/100ms
            Hash#dup   688.452k i/100ms
Calculating -------------------------------------
              Hash[]      7.001M (± 9.0%) i/s -     34.829M in   5.029989s
            Hash#dup      6.960M (±10.2%) i/s -     34.423M in   5.005625s

Comparison:
              Hash[]:  7001041.8 i/s
            Hash#dup:  6960137.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   311.942M i/100ms
  Hash#fetch, symbol   309.211M i/100ms
     Hash#[], string    29.348M i/100ms
  Hash#fetch, string    26.827M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.225B (± 0.6%) i/s -     16.221B in   5.029300s
  Hash#fetch, symbol      3.204B (± 2.4%) i/s -     16.079B in   5.021053s
     Hash#[], string    291.325M (± 2.0%) i/s -      1.467B in   5.039020s
  Hash#fetch, string    266.965M (± 2.5%) i/s -      1.341B in   5.027809s

Comparison:
     Hash#[], symbol: 3225409399.2 i/s
  Hash#fetch, symbol: 3204273683.9 i/s - same-ish: difference falls within error
     Hash#[], string: 291324819.1 i/s - 11.07x  (± 0.00) slower
  Hash#fetch, string: 266964579.0 i/s - 12.08x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    90.735M i/100ms
             Hash#[]    90.857M i/100ms
          Hash#[] ||    92.242M i/100ms
          Hash#[] &&    92.003M i/100ms
          Hash#fetch    91.663M i/100ms
 Hash#fetch fallback    92.345M i/100ms
Calculating -------------------------------------
            Hash#dig    919.087M (± 1.7%) i/s -      4.627B in   5.036487s
             Hash#[]    915.229M (± 4.8%) i/s -      4.634B in   5.080249s
          Hash#[] ||    915.950M (± 2.1%) i/s -      4.612B in   5.037580s
          Hash#[] &&    919.728M (± 1.5%) i/s -      4.600B in   5.002874s
          Hash#fetch    915.594M (± 2.0%) i/s -      4.583B in   5.007743s
 Hash#fetch fallback    919.214M (± 1.8%) i/s -      4.617B in   5.024880s

Comparison:
          Hash#[] &&: 919728358.4 i/s
 Hash#fetch fallback: 919214230.2 i/s - same-ish: difference falls within error
            Hash#dig: 919086722.4 i/s - same-ish: difference falls within error
          Hash#[] ||: 915950488.3 i/s - same-ish: difference falls within error
          Hash#fetch: 915593894.0 i/s - same-ish: difference falls within error
             Hash#[]: 915228950.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   304.692M i/100ms
  Hash#fetch + block   309.165M i/100ms
    Hash#fetch + arg   308.658M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.099B (± 1.9%) i/s -     15.539B in   5.016218s
  Hash#fetch + block      3.105B (± 2.9%) i/s -     15.767B in   5.082747s
    Hash#fetch + arg      3.161B (± 2.5%) i/s -     16.050B in   5.080748s

Comparison:
    Hash#fetch + arg: 3161178260.7 i/s
  Hash#fetch + block: 3104919136.4 i/s - same-ish: difference falls within error
  Hash#fetch + const: 3098931323.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    36.569k i/100ms
         sort + to_h     3.748k i/100ms
Calculating -------------------------------------
      sort_by + to_h    478.023k (± 6.5%) i/s -      2.414M in   5.071936s
         sort + to_h    221.044k (±14.3%) i/s -      1.064M in   4.999029s

Comparison:
      sort_by + to_h:   478022.6 i/s
         sort + to_h:   221043.9 i/s - 2.16x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   231.890k i/100ms
       Hash#each_key   251.231k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.356M (±10.8%) i/s -     11.595M in   5.035963s
       Hash#each_key      2.502M (± 6.0%) i/s -     12.562M in   5.047611s

Comparison:
       Hash#each_key:  2501596.0 i/s
      Hash#keys.each:  2356269.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   317.000  i/100ms
           Hash#key?     3.557M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      3.428k (±11.7%) i/s -     17.118k in   5.081320s
           Hash#key?     35.349M (± 2.1%) i/s -    177.843M in   5.033411s

Comparison:
           Hash#key?: 35348684.1 i/s
  Hash#keys.include?:     3427.8 i/s - 10312.33x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    36.812k i/100ms
            Hash#[]=    58.905k i/100ms
Calculating -------------------------------------
         Hash#merge!    592.425k (± 8.1%) i/s -      2.945M in   5.023024s
            Hash#[]=    617.608k (± 9.0%) i/s -      3.122M in   5.105076s

Comparison:
            Hash#[]=:   617608.3 i/s
         Hash#merge!:   592425.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        27.056k i/100ms
      Hash#merge({})    19.181k i/100ms
 Hash#dup#merge!({})    32.113k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        390.262k (±12.4%) i/s -      1.921M in   5.014024s
      Hash#merge({})    198.184k (± 9.8%) i/s -    978.231k in   5.000049s
 Hash#dup#merge!({})    319.013k (± 7.3%) i/s -      1.606M in   5.066061s

Comparison:
{}#merge!(Hash) do end:   390262.4 i/s
 Hash#dup#merge!({}):   319013.1 i/s - same-ish: difference falls within error
      Hash#merge({}):   198184.4 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   317.966M i/100ms
          Hash#merge   319.266M i/100ms
Calculating -------------------------------------
        Hash#**other      3.192B (± 2.7%) i/s -     16.216B in   5.084031s
          Hash#merge      3.202B (± 2.2%) i/s -     16.283B in   5.087977s

Comparison:
          Hash#merge: 3201858529.1 i/s
        Hash#**other: 3192251889.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   700.000  i/100ms
         Hash#merge!    57.467k i/100ms
Calculating -------------------------------------
          Hash#merge     11.066k (±13.2%) i/s -     54.600k in   5.032073s
         Hash#merge!    625.623k (± 6.2%) i/s -      3.161M in   5.075280s

Comparison:
         Hash#merge!:   625623.3 i/s
          Hash#merge:    11065.7 i/s - 56.54x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.454M i/100ms
Array#each               1.566M i/100ms
Array#each_w/_object     1.545M i/100ms
Hash#select-include      2.400M i/100ms
Calculating -------------------------------------
Hash#native-slice        19.064M (± 6.5%) i/s -     95.970M in   5.067105s
Array#each               15.333M (± 6.0%) i/s -     76.755M in   5.029903s
Array#each_w/_object     15.055M (± 6.0%) i/s -     75.697M in   5.053412s
Hash#select-include      24.525M (± 6.2%) i/s -    122.404M in   5.017525s

Comparison:
Hash#select-include : 24525076.4 i/s
Hash#native-slice   : 19063963.0 i/s - 1.29x  (± 0.00) slower
Array#each          : 15333215.0 i/s - 1.60x  (± 0.00) slower
Array#each_w/_object: 15055341.1 i/s - 1.63x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   263.000  i/100ms
         Hash#value?     5.004k i/100ms
Calculating -------------------------------------
Hash#values.include?      3.654k (±11.9%) i/s -     17.884k in   5.024235s
         Hash#value?     49.623k (± 1.2%) i/s -    250.200k in   5.042744s

Comparison:
         Hash#value?:    49623.4 i/s
Hash#values.include?:     3653.5 i/s - 13.58x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   322.297M i/100ms
                send   322.366M i/100ms
      method_missing   322.942M i/100ms
Calculating -------------------------------------
                call      3.176B (± 2.4%) i/s -     16.115B in   5.077197s
                send      3.196B (± 2.4%) i/s -     16.118B in   5.046878s
      method_missing      3.208B (± 2.0%) i/s -     16.147B in   5.035197s

Comparison:
      method_missing: 3208245588.1 i/s
                send: 3195817188.2 i/s - same-ish: difference falls within error
                call: 3175896967.3 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    61.150k i/100ms
      Symbol#to_proc    80.398k i/100ms
Calculating -------------------------------------
               Block    755.609k (±13.2%) i/s -      3.730M in   5.048826s
      Symbol#to_proc    760.936k (±10.7%) i/s -      3.779M in   5.028988s

Comparison:
      Symbol#to_proc:   760936.4 i/s
               Block:   755608.6 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   313.878M i/100ms
       block + yield   317.860M i/100ms
        unused block   318.297M i/100ms
               yield   323.187M i/100ms
Calculating -------------------------------------
          block.call      3.166B (± 2.8%) i/s -     16.008B in   5.060349s
       block + yield      3.206B (± 1.5%) i/s -     16.211B in   5.057756s
        unused block      3.194B (± 2.2%) i/s -     16.233B in   5.085218s
               yield      3.171B (± 3.4%) i/s -     15.836B in   5.000719s

Comparison:
       block + yield: 3205959238.9 i/s
        unused block: 3193861980.7 i/s - same-ish: difference falls within error
               yield: 3170944024.4 i/s - same-ish: difference falls within error
          block.call: 3166092339.9 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     4.450k i/100ms
      range#include?   128.000  i/100ms
       range#member?   168.000  i/100ms
       plain compare     7.826k i/100ms
Calculating -------------------------------------
        range#cover?     57.896k (±28.6%) i/s -    262.550k in   5.064036s
      range#include?      2.677k (±33.5%) i/s -     11.392k in   5.008686s
       range#member?      2.174k (±32.1%) i/s -      9.744k in   5.110699s
       plain compare     87.930k (±23.6%) i/s -    406.952k in   5.067543s

Comparison:
       plain compare:    87930.3 i/s
        range#cover?:    57895.6 i/s - same-ish: difference falls within error
      range#include?:     2677.4 i/s - 32.84x  (± 0.00) slower
       range#member?:     2173.9 i/s - 40.45x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    34.580M i/100ms
           String#=~    31.896M i/100ms
          Regexp#===    32.225M i/100ms
        String#match    31.371M i/100ms
Calculating -------------------------------------
       String#match?    346.560M (± 1.7%) i/s -      1.764B in   5.090455s
           String#=~    319.480M (± 1.8%) i/s -      1.627B in   5.093352s
          Regexp#===    318.829M (± 3.1%) i/s -      1.611B in   5.058901s
        String#match    311.498M (± 5.0%) i/s -      1.569B in   5.053521s

Comparison:
       String#match?: 346559928.2 i/s
           String#=~: 319480426.0 i/s - 1.08x  (± 0.00) slower
          Regexp#===: 318829493.1 i/s - 1.09x  (± 0.00) slower
        String#match: 311497531.2 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.690M i/100ms
      String#casecmp     4.906M i/100ms
Calculating -------------------------------------
String#downcase + ==     29.466M (± 8.4%) i/s -    147.973M in   5.069369s
      String#casecmp     48.844M (± 6.4%) i/s -    250.225M in   5.151961s

Comparison:
      String#casecmp: 48844323.5 i/s
String#downcase + ==: 29465672.5 i/s - 1.66x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     9.942M i/100ms
       String#concat    10.290M i/100ms
       String#append    10.428M i/100ms
         "foo" "bar"   322.751M i/100ms
  "#{'foo'}#{'bar'}"    10.542M i/100ms
Calculating -------------------------------------
            String#+    103.868M (± 6.2%) i/s -    517.004M in   5.003520s
       String#concat    104.099M (± 5.8%) i/s -    524.765M in   5.064714s
       String#append    102.438M (± 6.7%) i/s -    510.959M in   5.018219s
         "foo" "bar"      3.206B (± 2.4%) i/s -     16.138B in   5.036966s
  "#{'foo'}#{'bar'}"    102.989M (± 6.0%) i/s -    516.535M in   5.039598s

Comparison:
         "foo" "bar": 3205798585.0 i/s
       String#concat: 104099269.6 i/s - 30.80x  (± 0.00) slower
            String#+: 103867660.8 i/s - 30.86x  (± 0.00) slower
  "#{'foo'}#{'bar'}": 102989238.2 i/s - 31.13x  (± 0.00) slower
       String#append: 102438355.6 i/s - 31.29x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   310.352M i/100ms
          String#dup   312.614M i/100ms
Calculating -------------------------------------
           String#+@      3.200B (± 2.0%) i/s -     16.138B in   5.045571s
          String#dup      3.215B (± 1.0%) i/s -     16.256B in   5.057146s

Comparison:
          String#dup: 3214779866.1 i/s
           String#+@: 3199912185.4 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   793.173k i/100ms
       String#match?     1.784M i/100ms
    String#end_with?    10.773M i/100ms
Calculating -------------------------------------
           String#=~     15.165M (± 2.8%) i/s -     76.145M in   5.025636s
       String#match?     17.780M (± 1.4%) i/s -     89.202M in   5.018030s
    String#end_with?    106.705M (± 2.8%) i/s -    538.668M in   5.052398s

Comparison:
    String#end_with?: 106705170.1 i/s
       String#match?: 17780131.9 i/s - 6.00x  (± 0.00) slower
           String#=~: 15164615.9 i/s - 7.04x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    92.667k i/100ms
          String#sub   762.519k i/100ms
String#dup["string"]=
                        10.382M i/100ms
Calculating -------------------------------------
         String#gsub      8.113M (±11.5%) i/s -     39.476M in   5.003279s
          String#sub      9.947M (±10.7%) i/s -     49.564M in   5.051913s
String#dup["string"]=
                        103.723M (± 1.4%) i/s -    519.112M in   5.005805s

Comparison:
String#dup["string"]=: 103722927.3 i/s
          String#sub:  9947126.5 i/s - 10.43x  (± 0.00) slower
         String#gsub:  8112671.3 i/s - 12.79x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    85.878k i/100ms
           String#tr   156.923k i/100ms
Calculating -------------------------------------
         String#gsub      4.199M (±14.9%) i/s -     20.267M in   5.012515s
           String#tr      1.564M (± 4.7%) i/s -      7.846M in   5.027531s

Comparison:
         String#gsub:  4199333.6 i/s
           String#tr:  1564478.0 i/s - 2.68x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   317.556M i/100ms
         With Freeze   317.561M i/100ms
Calculating -------------------------------------
      Without Freeze      3.220B (± 0.7%) i/s -     16.195B in   5.030346s
         With Freeze      3.211B (± 1.5%) i/s -     16.196B in   5.045374s

Comparison:
      Without Freeze: 3219680287.8 i/s
         With Freeze: 3210780317.9 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     9.438k i/100ms
      String#squeeze    76.677k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    172.628k (± 9.7%) i/s -    858.858k in   5.039244s
      String#squeeze    826.758k (± 3.6%) i/s -      4.141M in   5.015255s

Comparison:
      String#squeeze:   826758.4 i/s
 String#gsub/regex+/:   172628.0 i/s - 4.79x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     7.879M i/100ms
       String#match?    13.381M i/100ms
  String#start_with?    16.062M i/100ms
Calculating -------------------------------------
           String#=~    144.875M (± 7.3%) i/s -    724.912M in   5.047329s
       String#match?    133.874M (± 2.2%) i/s -    669.046M in   5.000234s
  String#start_with?    159.358M (± 3.5%) i/s -    803.105M in   5.046647s

Comparison:
  String#start_with?: 159358338.7 i/s
           String#=~: 144875355.8 i/s - same-ish: difference falls within error
       String#match?: 133873814.3 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   200.399k i/100ms
    String#[0, n] ==   666.959k i/100ms
   String#[RANGE] ==   219.148k i/100ms
   String#[0...n] ==   633.953k i/100ms
Calculating -------------------------------------
  String#start_with?      7.417M (± 2.6%) i/s -     37.074M in   5.002692s
    String#[0, n] ==      7.111M (± 4.1%) i/s -     36.016M in   5.073514s
   String#[RANGE] ==     13.330M (±13.3%) i/s -     64.430M in   4.998480s
   String#[0...n] ==      6.286M (± 2.9%) i/s -     31.698M in   5.047369s

Comparison:
   String#[RANGE] ==: 13330370.6 i/s
  String#start_with?:  7417393.8 i/s - 1.80x  (± 0.00) slower
    String#[0, n] ==:  7111198.7 i/s - 1.87x  (± 0.00) slower
   String#[0...n] ==:  6285833.8 i/s - 2.12x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    10.263M i/100ms
 String#sub!'string'   541.247k i/100ms
String#gsub!'string'   600.025k i/100ms
  String#[/regexp/]=     9.987M i/100ms
 String#sub!/regexp/     1.334M i/100ms
String#gsub!/regexp/   789.508k i/100ms
Calculating -------------------------------------
  String#['string']=    103.357M (± 2.7%) i/s -    523.392M in   5.068003s
 String#sub!'string'     11.353M (±12.4%) i/s -     55.748M in   5.015221s
String#gsub!'string'      6.458M (± 8.1%) i/s -     32.401M in   5.063999s
  String#[/regexp/]=    100.804M (± 0.4%) i/s -    509.322M in   5.052648s
 String#sub!/regexp/     31.851M (± 6.4%) i/s -    158.714M in   5.014012s
String#gsub!/regexp/      9.467M (± 9.4%) i/s -     47.370M in   5.056677s

Comparison:
  String#['string']=: 103357430.8 i/s
  String#[/regexp/]=: 100804273.7 i/s - same-ish: difference falls within error
 String#sub!/regexp/: 31851430.1 i/s - 3.24x  (± 0.00) slower
 String#sub!'string': 11353368.0 i/s - 9.10x  (± 0.00) slower
String#gsub!/regexp/:  9466621.4 i/s - 10.92x  (± 0.00) slower
String#gsub!'string':  6457828.9 i/s - 16.00x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub   222.893k i/100ms
        String#chomp     6.540M i/100ms
String#delete_suffix    11.048M i/100ms
Calculating -------------------------------------
          String#sub     77.515M (±10.0%) i/s -    378.918M in   5.001805s
        String#chomp     64.718M (± 3.1%) i/s -    326.994M in   5.057766s
String#delete_suffix    114.632M (± 8.7%) i/s -    574.517M in   5.056139s

Comparison:
String#delete_suffix: 114631715.6 i/s
          String#sub: 77514657.7 i/s - 1.48x  (± 0.00) slower
        String#chomp: 64718031.9 i/s - 1.77x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   322.151M i/100ms
          String#sub     3.733M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.209B (± 1.5%) i/s -     16.108B in   5.021219s
          String#sub    311.203M (± 1.0%) i/s -      1.557B in   5.002810s

Comparison:
String#delete_prefix: 3208704817.5 i/s
          String#sub: 311203262.2 i/s - 10.31x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.908M i/100ms
    String#unpack[0]     1.997M i/100ms
Calculating -------------------------------------
      String#unpack1     19.900M (± 3.7%) i/s -    101.121M in   5.088511s
    String#unpack[0]     19.848M (± 6.3%) i/s -     99.865M in   5.060969s

Comparison:
      String#unpack1: 19900200.4 i/s
    String#unpack[0]: 19848406.4 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 25.0.0-dev-ef17fc70, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    39.942k i/100ms
          Time.parse   381.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    599.716k (±22.6%) i/s -      2.876M in   5.012817s
          Time.parse      5.985k (±19.2%) i/s -     28.575k in   5.032875s

Comparison:
        Time.iso8601:   599715.9 i/s
          Time.parse:     5985.5 i/s - 100.20x  (± 0.00) slower

