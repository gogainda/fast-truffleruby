$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       248.909M i/100ms
Function with splat arguments
                         1.979k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.187B (± 2.4%) i/s -     15.930B in   5.001857s
Function with splat arguments
                         21.306k (± 8.8%) i/s -    106.866k in   5.069677s

Comparison:
Function with single Array argument: 3186943215.3 i/s
Function with splat arguments:    21306.0 i/s - 149579.55x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   320.790M i/100ms
Sequential Assignment
                       309.245M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.176B (± 2.3%) i/s -     16.040B in   5.053440s
Sequential Assignment
                          3.198B (± 1.2%) i/s -     16.081B in   5.029797s

Comparison:
Sequential Assignment: 3197567854.9 i/s
 Parallel Assignment: 3175738364.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   313.017M i/100ms
       attr_accessor   320.071M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.185B (± 2.2%) i/s -     15.964B in   5.014058s
       attr_accessor      3.201B (± 1.3%) i/s -     16.004B in   5.000091s

Comparison:
       attr_accessor: 3201179271.2 i/s
   getter_and_setter: 3185464738.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    12.656k i/100ms
         respond_to?   321.378M i/100ms
Calculating -------------------------------------
      begin...rescue    102.260k (± 6.7%) i/s -    518.896k in   5.107882s
         respond_to?      3.201B (± 1.6%) i/s -     16.069B in   5.022168s

Comparison:
         respond_to?: 3200541011.3 i/s
      begin...rescue:   102259.9 i/s - 31298.09x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   320.197M i/100ms
             &method    18.220M i/100ms
Calculating -------------------------------------
              normal      3.164B (± 2.4%) i/s -     16.010B in   5.063961s
             &method    181.071M (± 2.3%) i/s -    910.996M in   5.033995s

Comparison:
              normal: 3163522644.0 i/s
             &method: 181071221.0 i/s - 17.47x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       158.000  i/100ms
       define_method   207.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          4.167k (±51.5%) i/s -      7.900k in   5.001645s
       define_method     11.365k (±47.3%) i/s -     11.385k in   5.057181s

Comparison:
       define_method:    11365.1 i/s
module_eval with string:     4167.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   221.503k i/100ms
       Kernel#format   185.481k i/100ms
            String#%   125.736k i/100ms
Calculating -------------------------------------
         Float#round      2.548M (± 5.6%) i/s -     12.847M in   5.066738s
       Kernel#format      1.825M (± 2.5%) i/s -      9.274M in   5.083919s
            String#%      1.254M (± 3.1%) i/s -      6.287M in   5.016847s

Comparison:
         Float#round:  2547744.8 i/s
       Kernel#format:  1825310.2 i/s - 1.40x  (± 0.00) slower
            String#%:  1254452.1 i/s - 2.03x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   320.361M i/100ms
          OpenStruct   304.956M i/100ms
Calculating -------------------------------------
                Hash      3.187B (± 1.3%) i/s -     16.018B in   5.026203s
          OpenStruct      3.200B (± 1.5%) i/s -     16.163B in   5.052618s

Comparison:
          OpenStruct: 3199629102.3 i/s
                Hash: 3187419524.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   313.293M i/100ms
          OpenStruct     4.696k i/100ms
Calculating -------------------------------------
                Hash      3.074B (± 7.3%) i/s -     15.351B in   5.025973s
          OpenStruct     30.334k (±14.2%) i/s -    150.272k in   5.057066s

Comparison:
                Hash: 3073899526.8 i/s
          OpenStruct:    30333.9 i/s - 101335.39x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   756.006k i/100ms
  ancestors.include?   232.538k i/100ms
Calculating -------------------------------------
  less than or equal     10.367M (± 4.8%) i/s -     52.164M in   5.043145s
  ancestors.include?      2.271M (± 7.7%) i/s -     11.394M in   5.059412s

Comparison:
  less than or equal: 10367050.8 i/s
  ancestors.include?:  2271284.2 i/s - 4.56x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     32.026  (± 3.1%) i/s -    161.000  in   5.028884s
         Kernel loop     32.010  (± 3.1%) i/s -    160.000  in   5.001594s

Comparison:
          While Loop:       32.0 i/s
         Kernel loop:       32.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   315.489M i/100ms
         Array#first   321.174M i/100ms
Calculating -------------------------------------
           Array#[0]      3.143B (± 5.1%) i/s -     15.774B in   5.035436s
         Array#first      3.171B (± 2.8%) i/s -     16.059B in   5.068475s

Comparison:
         Array#first: 3171001770.2 i/s
           Array#[0]: 3143231946.8 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   308.583M i/100ms
          Array#last   320.760M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.149B (± 3.0%) i/s -     16.046B in   5.100480s
          Array#last      3.194B (± 1.7%) i/s -     16.038B in   5.022165s

Comparison:
          Array#last: 3194471451.8 i/s
          Array#[-1]: 3149039792.7 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   928.482k i/100ms
Calculating -------------------------------------
                find     13.633  (± 0.0%) i/s -     69.000  in   5.064509s
             bsearch      9.377M (± 2.7%) i/s -     47.353M in   5.053970s

Comparison:
             bsearch:  9376663.3 i/s
                find:       13.6 i/s - 687796.59x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.211  (± 0.0%) i/s -      2.000  in   9.484685s
        Array#insert      1.389  (± 0.0%) i/s -      7.000  in   5.038013s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.2 i/s - 6.59x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   319.012M i/100ms
          Array#size   316.969M i/100ms
         Array#count   312.179M i/100ms
Calculating -------------------------------------
        Array#length      3.171B (± 2.9%) i/s -     15.951B in   5.034302s
          Array#size      3.187B (± 1.9%) i/s -     16.165B in   5.073569s
         Array#count      3.170B (± 3.0%) i/s -     15.921B in   5.027306s

Comparison:
          Array#size: 3187438088.2 i/s
        Array#length: 3171155549.1 i/s - same-ish: difference falls within error
         Array#count: 3169914729.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    36.360k i/100ms
        Array#sample     3.649M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    370.270k (± 3.2%) i/s -      1.854M in   5.013900s
        Array#sample     36.788M (± 1.5%) i/s -    186.101M in   5.059922s

Comparison:
        Array#sample: 36788132.2 i/s
 Array#shuffle.first:   370269.5 i/s - 99.36x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   940.000  i/100ms
          Date.parse   698.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     16.533k (±39.3%) i/s -     73.320k in   5.021995s
          Date.parse      7.765k (±14.7%) i/s -     38.390k in   5.084118s

Comparison:
        Date.iso8601:    16533.0 i/s
          Date.parse:     7765.2 i/s - 2.13x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   302.099k i/100ms
           Array#map     1.833M i/100ms
Calculating -------------------------------------
   Array#each + push      3.373M (± 3.5%) i/s -     16.918M in   5.022278s
           Array#map     19.293M (± 8.7%) i/s -     97.169M in   5.081762s

Comparison:
           Array#map: 19293203.5 i/s
   Array#each + push:  3373034.8 i/s - 5.72x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    11.644M i/100ms
               #each    35.316M i/100ms
Calculating -------------------------------------
            For loop    117.449M (± 1.0%) i/s -    593.863M in   5.056904s
               #each    353.666M (± 1.2%) i/s -      1.801B in   5.093480s

Comparison:
               #each: 353666470.0 i/s
            For loop: 117448949.5 i/s - 3.01x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.415M i/100ms
     each_with_index     2.761M i/100ms
Calculating -------------------------------------
          While Loop     15.074M (± 1.8%) i/s -     76.401M in   5.070365s
     each_with_index     27.496M (± 2.3%) i/s -    138.041M in   5.023292s

Comparison:
     each_with_index: 27496450.7 i/s
          While Loop: 15073668.4 i/s - 1.82x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   307.548k i/100ms
      inject to_proc   310.969k i/100ms
        inject block   308.779k i/100ms
Calculating -------------------------------------
       inject symbol      3.097M (± 1.4%) i/s -     15.685M in   5.065511s
      inject to_proc      3.097M (± 2.0%) i/s -     15.548M in   5.022369s
        inject block      3.076M (± 3.5%) i/s -     15.439M in   5.027092s

Comparison:
      inject to_proc:  3097289.3 i/s
       inject symbol:  3097100.4 i/s - same-ish: difference falls within error
        inject block:  3075610.1 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    22.979k i/100ms
   Array#map.flatten    27.482k i/100ms
      Array#flat_map    58.904k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    266.871k (± 5.3%) i/s -      1.333M in   5.008437s
   Array#map.flatten    267.874k (± 7.2%) i/s -      1.347M in   5.060202s
      Array#flat_map    586.245k (± 4.1%) i/s -      2.945M in   5.033556s

Comparison:
      Array#flat_map:   586244.6 i/s
   Array#map.flatten:   267874.1 i/s - 2.19x  (± 0.00) slower
Array#map.flatten(1):   266871.1 i/s - 2.20x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   313.501k i/100ms
  Array#reverse_each     2.330M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.416M (± 6.3%) i/s -     17.243M in   5.076439s
  Array#reverse_each     23.232M (± 3.9%) i/s -    116.484M in   5.021091s

Comparison:
  Array#reverse_each: 23231538.4 i/s
  Array#reverse.each:  3415623.9 i/s - 6.80x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       976.550k i/100ms
   Enumerable#detect     4.631M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.330M (± 7.1%) i/s -    206.052M in  20.085713s
   Enumerable#detect     46.319M (± 2.6%) i/s -    926.164M in  20.011222s

Comparison:
   Enumerable#detect: 46318664.0 i/s
Enumerable#select.first: 10330195.0 i/s - 4.48x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       354.273k i/100ms
Enumerable#select.last
                       508.537k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.706M (± 3.5%) i/s -     18.776M in   5.073513s
Enumerable#select.last
                          5.393M (± 5.7%) i/s -     26.952M in   5.021368s

Comparison:
Enumerable#select.last:  5392730.4 i/s
Enumerable#reverse.detect:  3705751.6 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.260k i/100ms
  Enumerable#sort_by     2.985k i/100ms
     Enumerable#sort     4.579k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         37.093k (±24.9%) i/s -    160.460k in   5.008665s
  Enumerable#sort_by     25.108k (±22.3%) i/s -    119.400k in   5.087550s
     Enumerable#sort     43.742k (±24.8%) i/s -    206.055k in   5.040394s

Comparison:
     Enumerable#sort:    43741.5 i/s
Enumerable#sort_by (Symbol#to_proc):    37092.9 i/s - same-ish: difference falls within error
  Enumerable#sort_by:    25108.1 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   986.161k i/100ms
Enumerable#sort_by...first
                         8.770k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      9.918M (± 2.5%) i/s -     50.294M in   5.074132s
Enumerable#sort_by...first
                        114.137k (± 5.9%) i/s -    570.050k in   5.022186s

Comparison:
   Enumerable#min_by:  9918215.8 i/s
Enumerable#sort_by...first:   114137.0 i/s - 86.90x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   640.727k i/100ms
            Hash#dup   728.149k i/100ms
Calculating -------------------------------------
              Hash[]      7.609M (± 9.3%) i/s -     37.803M in   5.026560s
            Hash#dup      7.396M (±11.7%) i/s -     36.407M in   5.001906s

Comparison:
              Hash[]:  7609469.8 i/s
            Hash#dup:  7395813.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   319.289M i/100ms
  Hash#fetch, symbol   315.899M i/100ms
     Hash#[], string    29.163M i/100ms
  Hash#fetch, string    26.673M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.192B (± 1.8%) i/s -     15.964B in   5.003462s
  Hash#fetch, symbol      3.201B (± 1.1%) i/s -     16.111B in   5.033065s
     Hash#[], string    289.886M (± 1.8%) i/s -      1.458B in   5.031945s
  Hash#fetch, string    265.577M (± 2.3%) i/s -      1.334B in   5.024475s

Comparison:
  Hash#fetch, symbol: 3201386515.7 i/s
     Hash#[], symbol: 3191794025.1 i/s - same-ish: difference falls within error
     Hash#[], string: 289885762.6 i/s - 11.04x  (± 0.00) slower
  Hash#fetch, string: 265576761.2 i/s - 12.05x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    91.759M i/100ms
             Hash#[]    90.768M i/100ms
          Hash#[] ||    91.449M i/100ms
          Hash#[] &&    90.200M i/100ms
          Hash#fetch    91.871M i/100ms
 Hash#fetch fallback    91.798M i/100ms
Calculating -------------------------------------
            Hash#dig    912.692M (± 1.8%) i/s -      4.588B in   5.028621s
             Hash#[]    915.048M (± 1.3%) i/s -      4.629B in   5.059906s
          Hash#[] ||    913.342M (± 1.5%) i/s -      4.572B in   5.007368s
          Hash#[] &&    910.138M (± 2.2%) i/s -      4.600B in   5.056944s
          Hash#fetch    914.676M (± 1.5%) i/s -      4.594B in   5.023330s
 Hash#fetch fallback    915.443M (± 1.0%) i/s -      4.590B in   5.014379s

Comparison:
 Hash#fetch fallback: 915443251.3 i/s
             Hash#[]: 915047610.7 i/s - same-ish: difference falls within error
          Hash#fetch: 914675908.7 i/s - same-ish: difference falls within error
          Hash#[] ||: 913342013.3 i/s - same-ish: difference falls within error
            Hash#dig: 912691603.0 i/s - same-ish: difference falls within error
          Hash#[] &&: 910137574.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   315.718M i/100ms
  Hash#fetch + block   304.866M i/100ms
    Hash#fetch + arg   318.615M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.191B (± 1.9%) i/s -     16.102B in   5.047295s
  Hash#fetch + block      3.211B (± 0.5%) i/s -     16.158B in   5.032831s
    Hash#fetch + arg      3.175B (± 2.7%) i/s -     15.931B in   5.020828s

Comparison:
  Hash#fetch + block: 3210593172.2 i/s
  Hash#fetch + const: 3191386095.0 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 3175372183.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    35.356k i/100ms
         sort + to_h     4.611k i/100ms
Calculating -------------------------------------
      sort_by + to_h    476.977k (± 6.9%) i/s -      2.404M in   5.067884s
         sort + to_h    218.641k (±11.6%) i/s -      1.074M in   5.001527s

Comparison:
      sort_by + to_h:   476976.7 i/s
         sort + to_h:   218640.5 i/s - 2.18x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   202.204k i/100ms
       Hash#each_key   209.955k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.124M (± 9.6%) i/s -     10.515M in   5.063121s
       Hash#each_key      2.087M (± 3.6%) i/s -     10.498M in   5.036671s

Comparison:
      Hash#keys.each:  2124276.7 i/s
       Hash#each_key:  2087022.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   277.000  i/100ms
           Hash#key?    15.555M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      3.183k (±15.2%) i/s -     15.512k in   5.013803s
           Hash#key?    150.977M (± 1.0%) i/s -    762.197M in   5.048914s

Comparison:
           Hash#key?: 150977109.6 i/s
  Hash#keys.include?:     3182.9 i/s - 47433.82x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    40.789k i/100ms
            Hash#[]=    64.103k i/100ms
Calculating -------------------------------------
         Hash#merge!    579.179k (± 9.0%) i/s -      2.896M in   5.053152s
            Hash#[]=    630.049k (± 6.1%) i/s -      3.141M in   5.005922s

Comparison:
            Hash#[]=:   630048.7 i/s
         Hash#merge!:   579179.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        36.620k i/100ms
      Hash#merge({})    20.186k i/100ms
 Hash#dup#merge!({})    30.545k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        399.623k (±10.3%) i/s -      1.977M in   5.014313s
      Hash#merge({})    200.682k (± 7.7%) i/s -      1.009M in   5.067142s
 Hash#dup#merge!({})    312.552k (± 8.6%) i/s -      1.558M in   5.029069s

Comparison:
{}#merge!(Hash) do end:   399623.5 i/s
 Hash#dup#merge!({}):   312551.7 i/s - 1.28x  (± 0.00) slower
      Hash#merge({}):   200682.1 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   320.244M i/100ms
          Hash#merge   320.993M i/100ms
Calculating -------------------------------------
        Hash#**other      3.168B (± 2.9%) i/s -     16.012B in   5.058642s
          Hash#merge      3.190B (± 1.9%) i/s -     16.050B in   5.032641s

Comparison:
          Hash#merge: 3190393942.4 i/s
        Hash#**other: 3168164731.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.073k i/100ms
         Hash#merge!    57.802k i/100ms
Calculating -------------------------------------
          Hash#merge     11.885k (± 9.2%) i/s -     59.015k in   5.015680s
         Hash#merge!    623.749k (± 6.5%) i/s -      3.121M in   5.027996s

Comparison:
         Hash#merge!:   623748.8 i/s
          Hash#merge:    11884.8 i/s - 52.48x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.840M i/100ms
Array#each               1.459M i/100ms
Array#each_w/_object     1.477M i/100ms
Hash#select-include      2.531M i/100ms
Calculating -------------------------------------
Hash#native-slice        19.508M (± 3.5%) i/s -     97.514M in   5.004886s
Array#each               15.402M (± 3.7%) i/s -     77.305M in   5.026146s
Array#each_w/_object     15.256M (± 6.3%) i/s -     76.819M in   5.065075s
Hash#select-include      24.338M (± 7.1%) i/s -    121.465M in   5.024640s

Comparison:
Hash#select-include : 24337540.4 i/s
Hash#native-slice   : 19508122.8 i/s - 1.25x  (± 0.00) slower
Array#each          : 15402332.1 i/s - 1.58x  (± 0.00) slower
Array#each_w/_object: 15255657.6 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   290.000  i/100ms
         Hash#value?     1.337k i/100ms
Calculating -------------------------------------
Hash#values.include?      3.539k (±12.2%) i/s -     17.400k in   5.011824s
         Hash#value?     13.259k (± 0.5%) i/s -     66.850k in   5.042088s

Comparison:
         Hash#value?:    13258.8 i/s
Hash#values.include?:     3539.4 i/s - 3.75x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   318.417M i/100ms
                send   320.257M i/100ms
      method_missing   319.810M i/100ms
Calculating -------------------------------------
                call      3.170B (± 2.5%) i/s -     15.921B in   5.025538s
                send      3.195B (± 1.8%) i/s -     16.013B in   5.014415s
      method_missing      3.177B (± 2.6%) i/s -     15.990B in   5.037454s

Comparison:
                send: 3194519400.6 i/s
      method_missing: 3176658125.4 i/s - same-ish: difference falls within error
                call: 3169998613.1 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    62.238k i/100ms
      Symbol#to_proc    68.879k i/100ms
Calculating -------------------------------------
               Block    751.457k (±12.4%) i/s -      3.734M in   5.067951s
      Symbol#to_proc    737.948k (±12.7%) i/s -      3.651M in   5.051683s

Comparison:
               Block:   751456.9 i/s
      Symbol#to_proc:   737947.8 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   320.914M i/100ms
       block + yield   320.778M i/100ms
        unused block   311.682M i/100ms
               yield   320.961M i/100ms
Calculating -------------------------------------
          block.call      3.198B (± 1.6%) i/s -     16.046B in   5.019481s
       block + yield      3.188B (± 2.2%) i/s -     16.039B in   5.033599s
        unused block      3.165B (± 3.3%) i/s -     15.896B in   5.028280s
               yield      3.178B (± 2.7%) i/s -     16.048B in   5.053364s

Comparison:
          block.call: 3197573723.6 i/s
       block + yield: 3188011758.3 i/s - same-ish: difference falls within error
               yield: 3178264051.5 i/s - same-ish: difference falls within error
        unused block: 3165040519.4 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     4.526k i/100ms
      range#include?   154.000  i/100ms
       range#member?   235.000  i/100ms
       plain compare     9.268k i/100ms
Calculating -------------------------------------
        range#cover?     62.568k (±33.6%) i/s -    267.034k in   5.027544s
      range#include?      2.907k (±39.8%) i/s -     11.704k in   5.080838s
       range#member?      2.314k (±27.3%) i/s -     10.575k in   5.036735s
       plain compare     91.850k (±24.3%) i/s -    426.328k in   5.094891s

Comparison:
       plain compare:    91849.8 i/s
        range#cover?:    62568.1 i/s - same-ish: difference falls within error
      range#include?:     2906.5 i/s - 31.60x  (± 0.00) slower
       range#member?:     2314.3 i/s - 39.69x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    34.161M i/100ms
           String#=~    31.554M i/100ms
          Regexp#===    31.818M i/100ms
        String#match    31.351M i/100ms
Calculating -------------------------------------
       String#match?    342.419M (± 2.1%) i/s -      1.742B in   5.090249s
           String#=~    319.091M (± 1.7%) i/s -      1.609B in   5.044842s
          Regexp#===    317.491M (± 2.7%) i/s -      1.591B in   5.015071s
        String#match    313.322M (± 0.5%) i/s -      1.568B in   5.003119s

Comparison:
       String#match?: 342419123.1 i/s
           String#=~: 319090785.1 i/s - 1.07x  (± 0.00) slower
          Regexp#===: 317491175.2 i/s - 1.08x  (± 0.00) slower
        String#match: 313322443.5 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.658M i/100ms
      String#casecmp     4.893M i/100ms
Calculating -------------------------------------
String#downcase + ==     30.461M (± 7.3%) i/s -    151.495M in   5.008471s
      String#casecmp     48.932M (± 4.8%) i/s -    244.630M in   5.011412s

Comparison:
      String#casecmp: 48931722.6 i/s
String#downcase + ==: 30460923.9 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     9.691M i/100ms
       String#concat    10.639M i/100ms
       String#append    10.435M i/100ms
         "foo" "bar"   319.660M i/100ms
  "#{'foo'}#{'bar'}"    10.917M i/100ms
Calculating -------------------------------------
            String#+    106.907M (± 6.1%) i/s -    532.978M in   5.012984s
       String#concat    106.147M (± 6.0%) i/s -    531.934M in   5.036855s
       String#append    105.330M (± 6.2%) i/s -    532.172M in   5.078586s
         "foo" "bar"      3.200B (± 1.4%) i/s -     16.303B in   5.095493s
  "#{'foo'}#{'bar'}"    105.900M (± 6.0%) i/s -    534.953M in   5.076357s

Comparison:
         "foo" "bar": 3200043943.7 i/s
            String#+: 106906781.3 i/s - 29.93x  (± 0.00) slower
       String#concat: 106146530.3 i/s - 30.15x  (± 0.00) slower
  "#{'foo'}#{'bar'}": 105900329.6 i/s - 30.22x  (± 0.00) slower
       String#append: 105330466.8 i/s - 30.38x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   320.476M i/100ms
          String#dup   321.152M i/100ms
Calculating -------------------------------------
           String#+@      3.177B (± 2.7%) i/s -     16.024B in   5.047306s
          String#dup      3.184B (± 2.3%) i/s -     16.058B in   5.045674s

Comparison:
          String#dup: 3184252056.5 i/s
           String#+@: 3177117616.1 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.516M i/100ms
       String#match?     1.807M i/100ms
    String#end_with?    10.714M i/100ms
Calculating -------------------------------------
           String#=~     15.416M (± 2.5%) i/s -     77.302M in   5.017676s
       String#match?     18.116M (± 1.0%) i/s -     92.163M in   5.087988s
    String#end_with?    106.682M (± 1.7%) i/s -    535.686M in   5.022861s

Comparison:
    String#end_with?: 106681805.5 i/s
       String#match?: 18115999.4 i/s - 5.89x  (± 0.00) slower
           String#=~: 15416216.9 i/s - 6.92x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   207.368k i/100ms
          String#sub   851.646k i/100ms
String#dup["string"]=
                         9.965M i/100ms
Calculating -------------------------------------
         String#gsub      8.404M (±14.0%) i/s -     40.851M in   5.005383s
          String#sub     10.165M (± 9.9%) i/s -     51.099M in   5.082631s
String#dup["string"]=
                         99.488M (± 2.7%) i/s -    498.259M in   5.012426s

Comparison:
String#dup["string"]=: 99487527.8 i/s
          String#sub: 10164778.0 i/s - 9.79x  (± 0.00) slower
         String#gsub:  8403587.2 i/s - 11.84x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    92.973k i/100ms
           String#tr   165.803k i/100ms
Calculating -------------------------------------
         String#gsub      4.359M (±14.3%) i/s -     21.105M in   5.005496s
           String#tr      1.701M (± 3.7%) i/s -      8.622M in   5.075249s

Comparison:
         String#gsub:  4359019.8 i/s
           String#tr:  1701491.9 i/s - 2.56x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   314.731M i/100ms
         With Freeze   314.429M i/100ms
Calculating -------------------------------------
      Without Freeze      3.189B (± 1.8%) i/s -     16.051B in   5.035236s
         With Freeze      3.192B (± 2.0%) i/s -     16.036B in   5.025564s

Comparison:
         With Freeze: 3192149834.4 i/s
      Without Freeze: 3188938855.3 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     9.238k i/100ms
      String#squeeze    77.900k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    161.439k (±12.1%) i/s -    794.468k in   5.017908s
      String#squeeze    781.225k (± 5.9%) i/s -      3.895M in   5.003935s

Comparison:
      String#squeeze:   781225.3 i/s
 String#gsub/regex+/:   161438.9 i/s - 4.84x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     6.793M i/100ms
       String#match?    13.868M i/100ms
  String#start_with?    16.037M i/100ms
Calculating -------------------------------------
           String#=~    105.754M (± 6.4%) i/s -    529.883M in   5.043096s
       String#match?    139.185M (± 1.7%) i/s -    707.279M in   5.083198s
  String#start_with?    159.043M (± 2.7%) i/s -    801.850M in   5.045665s

Comparison:
  String#start_with?: 159043080.3 i/s
       String#match?: 139184775.4 i/s - 1.14x  (± 0.00) slower
           String#=~: 105754105.4 i/s - 1.50x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   217.447k i/100ms
    String#[0, n] ==   696.583k i/100ms
   String#[RANGE] ==   217.910k i/100ms
   String#[0...n] ==   637.005k i/100ms
Calculating -------------------------------------
  String#start_with?      7.304M (± 0.4%) i/s -     36.531M in   5.001784s
    String#[0, n] ==      7.195M (± 3.6%) i/s -     36.222M in   5.040841s
   String#[RANGE] ==     13.567M (±12.2%) i/s -     66.027M in   5.001990s
   String#[0...n] ==      6.373M (± 2.8%) i/s -     31.850M in   5.001876s

Comparison:
   String#[RANGE] ==: 13566860.0 i/s
  String#start_with?:  7303719.4 i/s - 1.86x  (± 0.00) slower
    String#[0, n] ==:  7195162.9 i/s - 1.89x  (± 0.00) slower
   String#[0...n] ==:  6372908.6 i/s - 2.13x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    10.028M i/100ms
 String#sub!'string'   474.465k i/100ms
String#gsub!'string'   558.645k i/100ms
  String#[/regexp/]=     9.720M i/100ms
 String#sub!/regexp/   980.148k i/100ms
String#gsub!/regexp/   767.726k i/100ms
Calculating -------------------------------------
  String#['string']=    100.137M (± 1.4%) i/s -    501.382M in   5.008121s
 String#sub!'string'     10.902M (±11.9%) i/s -     53.615M in   5.016277s
String#gsub!'string'      5.875M (± 7.6%) i/s -     29.608M in   5.077842s
  String#[/regexp/]=     96.802M (± 2.0%) i/s -    485.996M in   5.022674s
 String#sub!/regexp/     31.295M (± 5.2%) i/s -    156.824M in   5.026958s
String#gsub!/regexp/      9.210M (± 9.9%) i/s -     46.064M in   5.062629s

Comparison:
  String#['string']=: 100136522.8 i/s
  String#[/regexp/]=: 96801794.9 i/s - same-ish: difference falls within error
 String#sub!/regexp/: 31295082.2 i/s - 3.20x  (± 0.00) slower
 String#sub!'string': 10901539.7 i/s - 9.19x  (± 0.00) slower
String#gsub!/regexp/:  9209908.2 i/s - 10.87x  (± 0.00) slower
String#gsub!'string':  5874694.4 i/s - 17.05x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.477M i/100ms
        String#chomp     6.505M i/100ms
String#delete_suffix    10.803M i/100ms
Calculating -------------------------------------
          String#sub     74.936M (±10.4%) i/s -    367.822M in   5.010053s
        String#chomp     64.772M (± 2.3%) i/s -    325.249M in   5.024245s
String#delete_suffix    114.393M (± 8.8%) i/s -    572.546M in   5.054620s

Comparison:
String#delete_suffix: 114392628.5 i/s
          String#sub: 74936090.7 i/s - 1.53x  (± 0.00) slower
        String#chomp: 64771937.0 i/s - 1.77x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   319.763M i/100ms
          String#sub   757.512k i/100ms
Calculating -------------------------------------
String#delete_prefix      3.162B (± 2.8%) i/s -     15.988B in   5.060464s
          String#sub    339.045M (± 5.1%) i/s -      1.688B in   4.998751s

Comparison:
String#delete_prefix: 3161945702.8 i/s
          String#sub: 339044788.4 i/s - 9.33x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.913M i/100ms
    String#unpack[0]     2.044M i/100ms
Calculating -------------------------------------
      String#unpack1     20.371M (± 2.4%) i/s -    103.325M in   5.075049s
    String#unpack[0]     20.200M (± 3.2%) i/s -    102.208M in   5.065409s

Comparison:
      String#unpack1: 20371264.7 i/s
    String#unpack[0]: 20199886.2 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 25.0.0-dev-f1c77805, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    38.632k i/100ms
          Time.parse   352.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    880.587k (±11.9%) i/s -      4.327M in   5.025522s
          Time.parse      6.141k (±12.1%) i/s -     30.272k in   5.044063s

Comparison:
        Time.iso8601:   880587.4 i/s
          Time.parse:     6140.9 i/s - 143.40x  (± 0.00) slower

