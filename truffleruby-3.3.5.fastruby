$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       269.407M i/100ms
Function with splat arguments
                         2.029k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.190B (± 2.5%) i/s -     16.164B in   5.070137s
Function with splat arguments
                         21.567k (± 9.5%) i/s -    107.537k in   5.043621s

Comparison:
Function with single Array argument: 3190238285.6 i/s
Function with splat arguments:    21566.5 i/s - 147925.34x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   321.938M i/100ms
Sequential Assignment
                       320.387M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.136B (± 3.8%) i/s -     15.775B in   5.037857s
Sequential Assignment
                          3.111B (± 3.1%) i/s -     15.699B in   5.051228s

Comparison:
 Parallel Assignment: 3136239054.6 i/s
Sequential Assignment: 3111092554.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   303.343M i/100ms
       attr_accessor   314.572M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.163B (± 3.1%) i/s -     16.077B in   5.088301s
       attr_accessor      3.180B (± 2.4%) i/s -     16.043B in   5.048033s

Comparison:
       attr_accessor: 3180038452.8 i/s
   getter_and_setter: 3162918501.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     9.012k i/100ms
         respond_to?   321.051M i/100ms
Calculating -------------------------------------
      begin...rescue    103.671k (± 7.4%) i/s -    522.696k in   5.079152s
         respond_to?      3.199B (± 2.5%) i/s -     16.053B in   5.021088s

Comparison:
         respond_to?: 3199363212.0 i/s
      begin...rescue:   103670.7 i/s - 30860.82x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   320.320M i/100ms
             &method    18.348M i/100ms
Calculating -------------------------------------
              normal      3.153B (± 3.9%) i/s -     16.016B in   5.088507s
             &method    182.129M (± 1.9%) i/s -    917.416M in   5.039153s

Comparison:
              normal: 3152684019.8 i/s
             &method: 182128578.8 i/s - 17.31x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       178.000  i/100ms
       define_method   137.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          3.354k (±65.4%) i/s -      7.476k in   6.702936s
       define_method     12.260k (±38.8%) i/s -     10.138k in   5.892899s

Comparison:
       define_method:    12260.4 i/s
module_eval with string:     3354.4 i/s - 3.66x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   145.553k i/100ms
       Kernel#format   192.569k i/100ms
            String#%   124.504k i/100ms
Calculating -------------------------------------
         Float#round      2.729M (± 4.5%) i/s -     13.682M in   5.025697s
       Kernel#format      1.922M (± 3.7%) i/s -      9.628M in   5.016371s
            String#%      1.234M (± 3.3%) i/s -      6.225M in   5.049107s

Comparison:
         Float#round:  2728559.9 i/s
       Kernel#format:  1922294.6 i/s - 1.42x  (± 0.00) slower
            String#%:  1234420.3 i/s - 2.21x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   316.420M i/100ms
          OpenStruct   315.296M i/100ms
Calculating -------------------------------------
                Hash      3.192B (± 2.4%) i/s -     16.137B in   5.058967s
          OpenStruct      3.196B (± 2.6%) i/s -     16.080B in   5.035357s

Comparison:
          OpenStruct: 3195754853.0 i/s
                Hash: 3191757063.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   322.592M i/100ms
          OpenStruct     4.729k i/100ms
Calculating -------------------------------------
                Hash      3.062B (± 9.9%) i/s -     15.162B in   5.026148s
          OpenStruct     49.325k (±11.2%) i/s -    245.908k in   5.071313s

Comparison:
                Hash: 3062486937.6 i/s
          OpenStruct:    49325.0 i/s - 62087.94x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   958.842k i/100ms
  ancestors.include?   220.194k i/100ms
Calculating -------------------------------------
  less than or equal     10.003M (± 3.4%) i/s -     50.819M in   5.086872s
  ancestors.include?      2.325M (± 6.8%) i/s -     11.670M in   5.051515s

Comparison:
  less than or equal: 10003038.1 i/s
  ancestors.include?:  2324692.5 i/s - 4.30x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     32.179  (± 3.1%) i/s -    161.000  in   5.004788s
         Kernel loop     32.115  (± 3.1%) i/s -    161.000  in   5.021014s

Comparison:
          While Loop:       32.2 i/s
         Kernel loop:       32.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   319.428M i/100ms
         Array#first   313.405M i/100ms
Calculating -------------------------------------
           Array#[0]      3.190B (± 2.3%) i/s -     15.971B in   5.008822s
         Array#first      3.207B (± 2.0%) i/s -     16.297B in   5.084040s

Comparison:
         Array#first: 3206925454.0 i/s
           Array#[0]: 3190402385.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   313.850M i/100ms
          Array#last   323.057M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.196B (± 2.4%) i/s -     16.006B in   5.011031s
          Array#last      3.188B (± 3.0%) i/s -     16.153B in   5.070991s

Comparison:
          Array#[-1]: 3196100817.1 i/s
          Array#last: 3188495082.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   870.620k i/100ms
Calculating -------------------------------------
                find     13.780  (± 0.0%) i/s -     69.000  in   5.007441s
             bsearch      9.168M (± 7.0%) i/s -     46.143M in   5.074289s

Comparison:
             bsearch:  9167524.1 i/s
                find:       13.8 i/s - 665279.66x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.212  (± 0.0%) i/s -      2.000  in   9.429998s
        Array#insert      1.381  (± 0.0%) i/s -      7.000  in   5.071389s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.2 i/s - 6.51x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   312.574M i/100ms
          Array#size   317.094M i/100ms
         Array#count   322.915M i/100ms
Calculating -------------------------------------
        Array#length      3.171B (± 2.9%) i/s -     15.941B in   5.032233s
          Array#size      3.160B (± 2.5%) i/s -     15.855B in   5.020214s
         Array#count      3.182B (± 2.7%) i/s -     16.146B in   5.077717s

Comparison:
         Array#count: 3182264111.0 i/s
        Array#length: 3170651505.5 i/s - same-ish: difference falls within error
          Array#size: 3160158437.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    35.978k i/100ms
        Array#sample     3.750M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    362.914k (± 2.9%) i/s -      1.835M in   5.060624s
        Array#sample     37.469M (± 2.3%) i/s -    187.518M in   5.007563s

Comparison:
        Array#sample: 37469305.8 i/s
 Array#shuffle.first:   362913.5 i/s - 103.25x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   943.000  i/100ms
          Date.parse   645.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     17.732k (±42.5%) i/s -     76.383k in   5.005805s
          Date.parse      8.097k (±20.4%) i/s -     38.700k in   5.054363s

Comparison:
        Date.iso8601:    17731.5 i/s
          Date.parse:     8096.7 i/s - 2.19x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   291.200k i/100ms
           Array#map     1.820M i/100ms
Calculating -------------------------------------
   Array#each + push      3.382M (± 2.9%) i/s -     17.181M in   5.084393s
           Array#map     18.859M (± 9.4%) i/s -     94.647M in   5.071130s

Comparison:
           Array#map: 18858723.4 i/s
   Array#each + push:  3382047.4 i/s - 5.58x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    11.732M i/100ms
               #each    35.332M i/100ms
Calculating -------------------------------------
            For loop    117.486M (± 2.1%) i/s -    598.327M in   5.095230s
               #each    354.805M (± 2.0%) i/s -      1.802B in   5.080664s

Comparison:
               #each: 354804950.1 i/s
            For loop: 117485803.1 i/s - 3.02x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.379M i/100ms
     each_with_index     2.377M i/100ms
Calculating -------------------------------------
          While Loop     14.160M (± 2.5%) i/s -     71.705M in   5.067183s
     each_with_index     27.319M (± 4.7%) i/s -    137.879M in   5.059228s

Comparison:
     each_with_index: 27318782.9 i/s
          While Loop: 14159825.9 i/s - 1.93x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   306.609k i/100ms
      inject to_proc   312.146k i/100ms
        inject block   310.034k i/100ms
Calculating -------------------------------------
       inject symbol      3.109M (± 2.0%) i/s -     15.637M in   5.032353s
      inject to_proc      3.099M (± 2.9%) i/s -     15.607M in   5.041253s
        inject block      3.115M (± 2.2%) i/s -     15.812M in   5.078502s

Comparison:
        inject block:  3115283.4 i/s
       inject symbol:  3108641.7 i/s - same-ish: difference falls within error
      inject to_proc:  3098887.4 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    23.049k i/100ms
   Array#map.flatten    25.907k i/100ms
      Array#flat_map    59.861k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    262.124k (± 8.0%) i/s -      1.314M in   5.055287s
   Array#map.flatten    267.402k (± 6.6%) i/s -      1.347M in   5.066165s
      Array#flat_map    590.027k (± 3.0%) i/s -      2.993M in   5.077558s

Comparison:
      Array#flat_map:   590026.5 i/s
   Array#map.flatten:   267402.1 i/s - 2.21x  (± 0.00) slower
Array#map.flatten(1):   262123.7 i/s - 2.25x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   244.552k i/100ms
  Array#reverse_each     2.324M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.344M (± 4.3%) i/s -     16.874M in   5.055455s
  Array#reverse_each     28.102M (± 6.6%) i/s -    141.779M in   5.071166s

Comparison:
  Array#reverse_each: 28102374.5 i/s
  Array#reverse.each:  3344218.0 i/s - 8.40x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       735.763k i/100ms
   Enumerable#detect     4.567M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.434M (± 8.5%) i/s -    206.749M in  20.024040s
   Enumerable#detect     46.596M (± 2.4%) i/s -    931.765M in  20.010093s

Comparison:
   Enumerable#detect: 46595925.3 i/s
Enumerable#select.first: 10433998.9 i/s - 4.47x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       342.587k i/100ms
Enumerable#select.last
                       518.309k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.581M (± 3.9%) i/s -     18.157M in   5.078370s
Enumerable#select.last
                          5.478M (± 2.8%) i/s -     27.470M in   5.018384s

Comparison:
Enumerable#select.last:  5478271.3 i/s
Enumerable#reverse.detect:  3581084.2 i/s - 1.53x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.050k i/100ms
  Enumerable#sort_by     4.309k i/100ms
     Enumerable#sort     2.568k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         41.475k (±14.0%) i/s -    198.450k in   5.012939s
  Enumerable#sort_by     25.495k (±16.8%) i/s -    124.961k in   5.042495s
     Enumerable#sort     34.712k (±20.5%) i/s -    169.488k in   5.031607s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    41475.2 i/s
     Enumerable#sort:    34712.0 i/s - same-ish: difference falls within error
  Enumerable#sort_by:    25495.2 i/s - 1.63x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   984.512k i/100ms
Enumerable#sort_by...first
                         9.852k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      9.850M (± 2.5%) i/s -     49.226M in   5.000994s
Enumerable#sort_by...first
                        111.857k (± 5.9%) i/s -    561.564k in   5.045198s

Comparison:
   Enumerable#min_by:  9849644.1 i/s
Enumerable#sort_by...first:   111857.3 i/s - 88.06x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   623.772k i/100ms
            Hash#dup   735.334k i/100ms
Calculating -------------------------------------
              Hash[]      7.572M (±11.5%) i/s -     37.426M in   5.021467s
            Hash#dup      7.524M (±10.0%) i/s -     37.502M in   5.048640s

Comparison:
              Hash[]:  7572423.6 i/s
            Hash#dup:  7523977.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   317.373M i/100ms
  Hash#fetch, symbol   309.131M i/100ms
     Hash#[], string    29.119M i/100ms
  Hash#fetch, string    26.650M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.209B (± 0.7%) i/s -     16.186B in   5.043439s
  Hash#fetch, symbol      3.209B (± 1.9%) i/s -     16.075B in   5.011086s
     Hash#[], string    292.040M (± 1.8%) i/s -      1.485B in   5.087044s
  Hash#fetch, string    265.365M (± 4.4%) i/s -      1.333B in   5.033253s

Comparison:
     Hash#[], symbol: 3209492377.0 i/s
  Hash#fetch, symbol: 3209068200.4 i/s - same-ish: difference falls within error
     Hash#[], string: 292039765.5 i/s - 10.99x  (± 0.00) slower
  Hash#fetch, string: 265364769.2 i/s - 12.09x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    91.911M i/100ms
             Hash#[]    90.933M i/100ms
          Hash#[] ||    91.313M i/100ms
          Hash#[] &&    92.341M i/100ms
          Hash#fetch    91.669M i/100ms
 Hash#fetch fallback    92.103M i/100ms
Calculating -------------------------------------
            Hash#dig    914.398M (± 2.9%) i/s -      4.596B in   5.030686s
             Hash#[]    918.860M (± 1.1%) i/s -      4.638B in   5.047705s
          Hash#[] ||    914.348M (± 2.2%) i/s -      4.657B in   5.095894s
          Hash#[] &&    916.713M (± 1.9%) i/s -      4.617B in   5.038523s
          Hash#fetch    921.458M (± 0.9%) i/s -      4.675B in   5.073987s
 Hash#fetch fallback    919.962M (± 1.3%) i/s -      4.605B in   5.006712s

Comparison:
          Hash#fetch: 921457949.3 i/s
 Hash#fetch fallback: 919962494.3 i/s - same-ish: difference falls within error
             Hash#[]: 918860374.8 i/s - same-ish: difference falls within error
          Hash#[] &&: 916713018.3 i/s - same-ish: difference falls within error
            Hash#dig: 914397826.2 i/s - same-ish: difference falls within error
          Hash#[] ||: 914347579.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   319.558M i/100ms
  Hash#fetch + block   316.409M i/100ms
    Hash#fetch + arg   319.880M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.182B (± 2.6%) i/s -     15.978B in   5.024449s
  Hash#fetch + block      3.191B (± 3.0%) i/s -     16.137B in   5.061352s
    Hash#fetch + arg      3.172B (± 3.7%) i/s -     15.994B in   5.049185s

Comparison:
  Hash#fetch + block: 3191346950.2 i/s
  Hash#fetch + const: 3182287774.8 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 3172487652.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.265k i/100ms
         sort + to_h     4.331k i/100ms
Calculating -------------------------------------
      sort_by + to_h    505.124k (± 8.8%) i/s -      2.508M in   5.009753s
         sort + to_h    217.235k (±13.9%) i/s -      1.052M in   5.017634s

Comparison:
      sort_by + to_h:   505123.9 i/s
         sort + to_h:   217235.0 i/s - 2.33x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   224.442k i/100ms
       Hash#each_key   247.999k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.323M (± 9.8%) i/s -     11.447M in   5.027449s
       Hash#each_key      2.516M (± 3.5%) i/s -     12.648M in   5.033950s

Comparison:
       Hash#each_key:  2515905.8 i/s
      Hash#keys.each:  2322766.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   279.000  i/100ms
           Hash#key?     3.520M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      3.375k (±11.3%) i/s -     16.740k in   5.060851s
           Hash#key?     35.426M (± 1.2%) i/s -    179.508M in   5.067888s

Comparison:
           Hash#key?: 35425969.5 i/s
  Hash#keys.include?:     3375.2 i/s - 10495.95x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    48.501k i/100ms
            Hash#[]=    57.926k i/100ms
Calculating -------------------------------------
         Hash#merge!    581.087k (± 7.7%) i/s -      2.910M in   5.039435s
            Hash#[]=    598.711k (± 7.2%) i/s -      3.012M in   5.064612s

Comparison:
            Hash#[]=:   598711.4 i/s
         Hash#merge!:   581087.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        26.918k i/100ms
      Hash#merge({})    18.316k i/100ms
 Hash#dup#merge!({})    32.417k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        390.150k (±12.4%) i/s -      1.938M in   5.070771s
      Hash#merge({})    195.886k (±10.5%) i/s -    989.064k in   5.117090s
 Hash#dup#merge!({})    315.521k (± 9.9%) i/s -      1.588M in   5.100574s

Comparison:
{}#merge!(Hash) do end:   390149.5 i/s
 Hash#dup#merge!({}):   315521.0 i/s - same-ish: difference falls within error
      Hash#merge({}):   195886.1 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   320.098M i/100ms
          Hash#merge   320.936M i/100ms
Calculating -------------------------------------
        Hash#**other      3.186B (± 2.4%) i/s -     16.005B in   5.026016s
          Hash#merge      3.179B (± 3.1%) i/s -     16.047B in   5.052362s

Comparison:
        Hash#**other: 3186349853.6 i/s
          Hash#merge: 3179302855.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.064k i/100ms
         Hash#merge!    54.893k i/100ms
Calculating -------------------------------------
          Hash#merge     11.514k (±11.0%) i/s -     57.456k in   5.057393s
         Hash#merge!    590.768k (± 6.8%) i/s -      2.964M in   5.043501s

Comparison:
         Hash#merge!:   590767.8 i/s
          Hash#merge:    11514.1 i/s - 51.31x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.771M i/100ms
Array#each               1.566M i/100ms
Array#each_w/_object     1.579M i/100ms
Hash#select-include      2.470M i/100ms
Calculating -------------------------------------
Hash#native-slice        19.429M (± 4.2%) i/s -     97.400M in   5.022443s
Array#each               15.569M (± 3.7%) i/s -     78.322M in   5.038239s
Array#each_w/_object     15.518M (± 3.8%) i/s -     78.929M in   5.094081s
Hash#select-include      24.635M (± 7.3%) i/s -    125.961M in   5.150150s

Comparison:
Hash#select-include : 24634748.1 i/s
Hash#native-slice   : 19428825.4 i/s - 1.27x  (± 0.00) slower
Array#each          : 15568631.0 i/s - 1.58x  (± 0.00) slower
Array#each_w/_object: 15517839.4 i/s - 1.59x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   276.000  i/100ms
         Hash#value?   661.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      3.075k (±11.2%) i/s -     15.180k in   5.021474s
         Hash#value?      6.683k (± 0.7%) i/s -     33.711k in   5.044658s

Comparison:
         Hash#value?:     6682.9 i/s
Hash#values.include?:     3075.4 i/s - 2.17x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   319.107M i/100ms
                send   321.115M i/100ms
      method_missing   313.449M i/100ms
Calculating -------------------------------------
                call      3.179B (± 2.5%) i/s -     15.955B in   5.021631s
                send      3.210B (± 1.2%) i/s -     16.056B in   5.002440s
      method_missing      3.174B (± 4.3%) i/s -     15.986B in   5.048144s

Comparison:
                send: 3210073475.4 i/s
                call: 3179484902.6 i/s - same-ish: difference falls within error
      method_missing: 3173518822.6 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    63.201k i/100ms
      Symbol#to_proc    74.490k i/100ms
Calculating -------------------------------------
               Block    729.598k (±14.6%) i/s -      3.602M in   5.052183s
      Symbol#to_proc    752.330k (±10.5%) i/s -      3.724M in   5.018646s

Comparison:
      Symbol#to_proc:   752330.0 i/s
               Block:   729597.7 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   318.270M i/100ms
       block + yield   320.433M i/100ms
        unused block   320.931M i/100ms
               yield   323.296M i/100ms
Calculating -------------------------------------
          block.call      3.204B (± 2.2%) i/s -     16.232B in   5.068027s
       block + yield      3.221B (± 0.8%) i/s -     16.342B in   5.073400s
        unused block      3.190B (± 2.6%) i/s -     16.047B in   5.034582s
               yield      3.172B (± 4.0%) i/s -     15.841B in   5.002842s

Comparison:
       block + yield: 3221349579.9 i/s
          block.call: 3204480984.0 i/s - same-ish: difference falls within error
        unused block: 3189660956.1 i/s - same-ish: difference falls within error
               yield: 3172442333.7 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     3.237k i/100ms
      range#include?   166.000  i/100ms
       range#member?   219.000  i/100ms
       plain compare     8.891k i/100ms
Calculating -------------------------------------
        range#cover?     63.845k (±35.1%) i/s -    262.197k in   5.020030s
      range#include?      2.552k (±38.2%) i/s -     10.790k in   5.078354s
       range#member?      2.787k (±39.4%) i/s -     11.388k in   5.068102s
       plain compare     95.595k (±29.1%) i/s -    426.768k in   5.020795s

Comparison:
       plain compare:    95594.9 i/s
        range#cover?:    63845.2 i/s - same-ish: difference falls within error
       range#member?:     2786.6 i/s - 34.31x  (± 0.00) slower
      range#include?:     2552.5 i/s - 37.45x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    34.802M i/100ms
           String#=~    32.129M i/100ms
          Regexp#===    32.180M i/100ms
        String#match    31.520M i/100ms
Calculating -------------------------------------
       String#match?    345.919M (± 1.8%) i/s -      1.740B in   5.032177s
           String#=~    319.424M (± 2.2%) i/s -      1.606B in   5.031684s
          Regexp#===    319.231M (± 4.1%) i/s -      1.609B in   5.051247s
        String#match    314.747M (± 0.9%) i/s -      1.576B in   5.007550s

Comparison:
       String#match?: 345918803.9 i/s
           String#=~: 319423585.8 i/s - 1.08x  (± 0.00) slower
          Regexp#===: 319231254.8 i/s - 1.08x  (± 0.00) slower
        String#match: 314747284.4 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.693M i/100ms
      String#casecmp     4.818M i/100ms
Calculating -------------------------------------
String#downcase + ==     29.905M (± 6.8%) i/s -    150.818M in   5.075148s
      String#casecmp     47.987M (± 6.8%) i/s -    240.907M in   5.053504s

Comparison:
      String#casecmp: 47986783.7 i/s
String#downcase + ==: 29904994.2 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     9.760M i/100ms
       String#concat    10.478M i/100ms
       String#append    10.287M i/100ms
         "foo" "bar"   320.133M i/100ms
  "#{'foo'}#{'bar'}"    10.585M i/100ms
Calculating -------------------------------------
            String#+    104.734M (± 3.4%) i/s -    527.018M in   5.038124s
       String#concat    103.201M (± 6.3%) i/s -    523.925M in   5.105892s
       String#append    102.203M (± 7.0%) i/s -    514.371M in   5.065937s
         "foo" "bar"      3.158B (± 3.4%) i/s -     16.007B in   5.074434s
  "#{'foo'}#{'bar'}"    102.791M (± 6.0%) i/s -    518.658M in   5.072700s

Comparison:
         "foo" "bar": 3158228885.8 i/s
            String#+: 104733637.6 i/s - 30.15x  (± 0.00) slower
       String#concat: 103201295.7 i/s - 30.60x  (± 0.00) slower
  "#{'foo'}#{'bar'}": 102790874.4 i/s - 30.72x  (± 0.00) slower
       String#append: 102203306.9 i/s - 30.90x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   311.013M i/100ms
          String#dup   313.841M i/100ms
Calculating -------------------------------------
           String#+@      3.182B (± 2.7%) i/s -     16.173B in   5.086261s
          String#dup      3.200B (± 2.0%) i/s -     16.320B in   5.102363s

Comparison:
          String#dup: 3199850116.7 i/s
           String#+@: 3182164076.3 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.444M i/100ms
       String#match?     1.779M i/100ms
    String#end_with?    10.683M i/100ms
Calculating -------------------------------------
           String#=~     14.585M (± 3.3%) i/s -     73.624M in   5.053704s
       String#match?     17.707M (± 2.3%) i/s -     88.937M in   5.025516s
    String#end_with?    106.389M (± 3.0%) i/s -    534.162M in   5.025616s

Comparison:
    String#end_with?: 106389358.5 i/s
       String#match?: 17707479.2 i/s - 6.01x  (± 0.00) slower
           String#=~: 14585173.4 i/s - 7.29x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   209.439k i/100ms
          String#sub   911.888k i/100ms
String#dup["string"]=
                        10.293M i/100ms
Calculating -------------------------------------
         String#gsub      8.548M (±10.5%) i/s -     42.097M in   5.020460s
          String#sub      9.861M (±11.0%) i/s -     49.242M in   5.068550s
String#dup["string"]=
                        103.952M (± 0.5%) i/s -    524.936M in   5.049913s

Comparison:
String#dup["string"]=: 103952264.5 i/s
          String#sub:  9861331.9 i/s - 10.54x  (± 0.00) slower
         String#gsub:  8548405.1 i/s - 12.16x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    87.904k i/100ms
           String#tr   163.218k i/100ms
Calculating -------------------------------------
         String#gsub      4.347M (±13.3%) i/s -     21.097M in   5.002915s
           String#tr      1.672M (± 6.4%) i/s -      8.324M in   5.001393s

Comparison:
         String#gsub:  4347253.4 i/s
           String#tr:  1671977.3 i/s - 2.60x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   315.703M i/100ms
         With Freeze   316.588M i/100ms
Calculating -------------------------------------
      Without Freeze      3.197B (± 2.1%) i/s -     16.101B in   5.037898s
         With Freeze      3.199B (± 2.5%) i/s -     16.146B in   5.050421s

Comparison:
         With Freeze: 3199183722.6 i/s
      Without Freeze: 3197494547.2 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     5.512k i/100ms
      String#squeeze    85.810k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    165.840k (±14.4%) i/s -    810.264k in   5.023434s
      String#squeeze    876.186k (± 5.3%) i/s -      4.376M in   5.009120s

Comparison:
      String#squeeze:   876185.6 i/s
 String#gsub/regex+/:   165839.9 i/s - 5.28x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~    14.063M i/100ms
       String#match?    13.446M i/100ms
  String#start_with?    16.074M i/100ms
Calculating -------------------------------------
           String#=~    154.066M (± 7.0%) i/s -    773.459M in   5.055085s
       String#match?    134.038M (± 1.6%) i/s -    672.298M in   5.017070s
  String#start_with?    159.888M (± 2.4%) i/s -    803.677M in   5.029528s

Comparison:
  String#start_with?: 159888297.6 i/s
           String#=~: 154065507.8 i/s - same-ish: difference falls within error
       String#match?: 134037983.3 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   153.926k i/100ms
    String#[0, n] ==   706.605k i/100ms
   String#[RANGE] ==   233.185k i/100ms
   String#[0...n] ==   613.901k i/100ms
Calculating -------------------------------------
  String#start_with?      7.272M (± 4.0%) i/s -     36.327M in   5.007051s
    String#[0, n] ==      7.303M (± 4.0%) i/s -     36.743M in   5.040989s
   String#[RANGE] ==     13.589M (±12.0%) i/s -     65.991M in   5.004075s
   String#[0...n] ==      6.057M (± 4.5%) i/s -     30.695M in   5.079320s

Comparison:
   String#[RANGE] ==: 13589469.2 i/s
    String#[0, n] ==:  7302554.2 i/s - 1.86x  (± 0.00) slower
  String#start_with?:  7271855.2 i/s - 1.87x  (± 0.00) slower
   String#[0...n] ==:  6057300.7 i/s - 2.24x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    10.301M i/100ms
 String#sub!'string'   585.074k i/100ms
String#gsub!'string'   592.669k i/100ms
  String#[/regexp/]=    10.026M i/100ms
 String#sub!/regexp/     1.358M i/100ms
String#gsub!/regexp/   908.387k i/100ms
Calculating -------------------------------------
  String#['string']=     96.314M (± 2.1%) i/s -    484.170M in   5.029425s
 String#sub!'string'     11.290M (±13.2%) i/s -     55.582M in   5.044348s
String#gsub!'string'      6.297M (± 7.8%) i/s -     31.411M in   5.029124s
  String#[/regexp/]=    100.281M (± 2.3%) i/s -    501.317M in   5.001934s
 String#sub!/regexp/     32.012M (± 7.1%) i/s -    160.225M in   5.038894s
String#gsub!/regexp/      9.267M (± 9.3%) i/s -     46.328M in   5.049171s

Comparison:
  String#[/regexp/]=: 100280704.1 i/s
  String#['string']=: 96313955.4 i/s - same-ish: difference falls within error
 String#sub!/regexp/: 32012047.4 i/s - 3.13x  (± 0.00) slower
 String#sub!'string': 11290215.0 i/s - 8.88x  (± 0.00) slower
String#gsub!/regexp/:  9267243.9 i/s - 10.82x  (± 0.00) slower
String#gsub!'string':  6296885.2 i/s - 15.93x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.460M i/100ms
        String#chomp     6.518M i/100ms
String#delete_suffix    11.482M i/100ms
Calculating -------------------------------------
          String#sub     75.169M (±10.6%) i/s -    368.037M in   5.007300s
        String#chomp     64.829M (± 3.0%) i/s -    325.880M in   5.031738s
String#delete_suffix    119.046M (± 9.2%) i/s -    597.060M in   5.066928s

Comparison:
String#delete_suffix: 119046447.5 i/s
          String#sub: 75168588.3 i/s - 1.58x  (± 0.00) slower
        String#chomp: 64828868.7 i/s - 1.84x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   312.284M i/100ms
          String#sub     3.614M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.179B (± 3.1%) i/s -     15.926B in   5.015771s
          String#sub    340.473M (± 4.1%) i/s -      1.699B in   5.000715s

Comparison:
String#delete_prefix: 3178529515.9 i/s
          String#sub: 340473081.8 i/s - 9.34x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.472M i/100ms
    String#unpack[0]     2.064M i/100ms
Calculating -------------------------------------
      String#unpack1     20.297M (± 6.1%) i/s -    101.582M in   5.025019s
    String#unpack[0]     20.622M (± 3.2%) i/s -    103.175M in   5.008565s

Comparison:
    String#unpack[0]: 20621865.1 i/s
      String#unpack1: 20297369.3 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 25.0.0-dev-373a3c92, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    48.083k i/100ms
          Time.parse   408.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    714.166k (±26.4%) i/s -      3.318M in   5.053272s
          Time.parse      6.150k (±14.4%) i/s -     29.784k in   5.014963s

Comparison:
        Time.iso8601:   714165.9 i/s
          Time.parse:     6149.8 i/s - 116.13x  (± 0.00) slower

