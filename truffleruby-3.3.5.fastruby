$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       276.674M i/100ms
Function with splat arguments
                         1.962k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.152B (± 4.3%) i/s -     15.770B in   5.013041s
Function with splat arguments
                         20.865k (± 8.9%) i/s -    103.986k in   5.031218s

Comparison:
Function with single Array argument: 3152407991.5 i/s
Function with splat arguments:    20864.9 i/s - 151086.71x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   319.555M i/100ms
Sequential Assignment
                       315.945M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.155B (± 3.9%) i/s -     15.978B in   5.073105s
Sequential Assignment
                          3.203B (± 1.8%) i/s -     16.113B in   5.031712s

Comparison:
Sequential Assignment: 3203395593.5 i/s
 Parallel Assignment: 3154877995.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   321.306M i/100ms
       attr_accessor   318.443M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.194B (± 2.6%) i/s -     16.065B in   5.034090s
       attr_accessor      3.207B (± 0.9%) i/s -     16.241B in   5.063879s

Comparison:
       attr_accessor: 3207413768.4 i/s
   getter_and_setter: 3193830057.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     9.585k i/100ms
         respond_to?   322.233M i/100ms
Calculating -------------------------------------
      begin...rescue    102.067k (± 8.5%) i/s -    508.005k in   5.029813s
         respond_to?      3.181B (± 3.8%) i/s -     16.112B in   5.073347s

Comparison:
         respond_to?: 3180859543.7 i/s
      begin...rescue:   102067.0 i/s - 31164.43x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   320.520M i/100ms
             &method    18.398M i/100ms
Calculating -------------------------------------
              normal      3.114B (± 6.3%) i/s -     15.705B in   5.072675s
             &method    181.676M (± 2.0%) i/s -    919.898M in   5.065574s

Comparison:
              normal: 3113757232.6 i/s
             &method: 181676298.8 i/s - 17.14x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       155.000  i/100ms
       define_method   138.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          3.627k (±61.6%) i/s -      7.750k in   5.004301s
       define_method     11.460k (±46.5%) i/s -      8.142k in   5.654157s

Comparison:
       define_method:    11460.5 i/s
module_eval with string:     3627.0 i/s - 3.16x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   287.462k i/100ms
       Kernel#format   200.303k i/100ms
            String#%   152.977k i/100ms
Calculating -------------------------------------
         Float#round      3.157M (± 6.7%) i/s -     15.810M in   5.038614s
       Kernel#format      1.994M (± 2.6%) i/s -     10.015M in   5.025937s
            String#%      1.520M (± 2.6%) i/s -      7.649M in   5.035948s

Comparison:
         Float#round:  3157415.2 i/s
       Kernel#format:  1994125.9 i/s - 1.58x  (± 0.00) slower
            String#%:  1519896.7 i/s - 2.08x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   312.938M i/100ms
          OpenStruct   319.663M i/100ms
Calculating -------------------------------------
                Hash      3.154B (± 2.8%) i/s -     15.960B in   5.064555s
          OpenStruct      3.164B (± 3.2%) i/s -     15.983B in   5.057703s

Comparison:
          OpenStruct: 3163733307.2 i/s
                Hash: 3153944347.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   322.437M i/100ms
          OpenStruct     4.359k i/100ms
Calculating -------------------------------------
                Hash      3.133B (± 6.4%) i/s -     15.799B in   5.069725s
          OpenStruct     43.463k (±22.1%) i/s -    204.873k in   5.024125s

Comparison:
                Hash: 3133022099.8 i/s
          OpenStruct:    43462.8 i/s - 72085.08x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal     1.010M i/100ms
  ancestors.include?   218.951k i/100ms
Calculating -------------------------------------
  less than or equal     10.492M (± 2.9%) i/s -     52.529M in   5.010857s
  ancestors.include?      2.253M (± 6.8%) i/s -     11.385M in   5.082053s

Comparison:
  less than or equal: 10492033.9 i/s
  ancestors.include?:  2253244.4 i/s - 4.66x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     31.936  (± 6.3%) i/s -    160.000  in   5.025323s
         Kernel loop     31.915  (± 6.3%) i/s -    159.000  in   5.006007s

Comparison:
          While Loop:       31.9 i/s
         Kernel loop:       31.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   316.232M i/100ms
         Array#first   322.136M i/100ms
Calculating -------------------------------------
           Array#[0]      3.197B (± 2.3%) i/s -     16.128B in   5.048225s
         Array#first      3.209B (± 1.8%) i/s -     16.107B in   5.020896s

Comparison:
         Array#first: 3209010646.8 i/s
           Array#[0]: 3196533684.4 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   317.767M i/100ms
          Array#last   313.064M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.179B (± 3.0%) i/s -     15.888B in   5.002399s
          Array#last      3.165B (± 3.1%) i/s -     15.966B in   5.049955s

Comparison:
          Array#[-1]: 3179207216.1 i/s
          Array#last: 3164881095.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   929.455k i/100ms
Calculating -------------------------------------
                find     13.698  (± 0.0%) i/s -     69.000  in   5.042190s
             bsearch      9.427M (± 3.0%) i/s -     47.402M in   5.033402s

Comparison:
             bsearch:  9426746.0 i/s
                find:       13.7 i/s - 688176.66x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.211  (± 0.0%) i/s -      2.000  in   9.462168s
        Array#insert      1.394  (± 0.0%) i/s -      7.000  in   5.020416s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.2 i/s - 6.60x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   317.558M i/100ms
          Array#size   306.081M i/100ms
         Array#count   314.330M i/100ms
Calculating -------------------------------------
        Array#length      3.197B (± 2.2%) i/s -     16.195B in   5.068558s
          Array#size      3.197B (± 1.8%) i/s -     16.222B in   5.075854s
         Array#count      3.180B (± 3.4%) i/s -     16.031B in   5.047792s

Comparison:
          Array#size: 3197039586.9 i/s
        Array#length: 3196984673.4 i/s - same-ish: difference falls within error
         Array#count: 3179905617.7 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    35.974k i/100ms
        Array#sample     3.696M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    365.199k (± 2.1%) i/s -      1.835M in   5.026218s
        Array#sample     37.263M (± 1.1%) i/s -    188.502M in   5.059379s

Comparison:
        Array#sample: 37262867.8 i/s
 Array#shuffle.first:   365198.9 i/s - 102.03x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   791.000  i/100ms
          Date.parse   640.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     15.656k (±35.8%) i/s -     70.399k in   5.005959s
          Date.parse      7.823k (±16.8%) i/s -     37.760k in   5.026108s

Comparison:
        Date.iso8601:    15655.8 i/s
          Date.parse:     7823.0 i/s - 2.00x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   293.270k i/100ms
           Array#map     1.881M i/100ms
Calculating -------------------------------------
   Array#each + push      3.300M (± 4.5%) i/s -     16.716M in   5.075639s
           Array#map     19.172M (± 8.8%) i/s -     95.929M in   5.048845s

Comparison:
           Array#map: 19172437.0 i/s
   Array#each + push:  3300442.7 i/s - 5.81x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    11.673M i/100ms
               #each    35.377M i/100ms
Calculating -------------------------------------
            For loop    117.398M (± 2.7%) i/s -    595.310M in   5.074972s
               #each    353.139M (± 2.4%) i/s -      1.769B in   5.012172s

Comparison:
               #each: 353139122.0 i/s
            For loop: 117397763.4 i/s - 3.01x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.413M i/100ms
     each_with_index     2.370M i/100ms
Calculating -------------------------------------
          While Loop     14.718M (± 4.3%) i/s -     73.497M in   5.003242s
     each_with_index     23.712M (± 1.8%) i/s -    118.516M in   4.999913s

Comparison:
     each_with_index: 23712076.1 i/s
          While Loop: 14718428.6 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   308.515k i/100ms
      inject to_proc   311.126k i/100ms
        inject block   310.077k i/100ms
Calculating -------------------------------------
       inject symbol      3.105M (± 2.6%) i/s -     15.734M in   5.070772s
      inject to_proc      3.099M (± 2.3%) i/s -     15.556M in   5.022786s
        inject block      3.106M (± 2.3%) i/s -     15.814M in   5.094630s

Comparison:
        inject block:  3105873.0 i/s
       inject symbol:  3105213.4 i/s - same-ish: difference falls within error
      inject to_proc:  3098985.6 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    23.604k i/100ms
   Array#map.flatten    25.951k i/100ms
      Array#flat_map    60.076k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    261.501k (± 8.5%) i/s -      1.298M in   5.010805s
   Array#map.flatten    270.670k (± 7.4%) i/s -      1.349M in   5.024079s
      Array#flat_map    576.055k (± 7.1%) i/s -      2.884M in   5.038913s

Comparison:
      Array#flat_map:   576054.7 i/s
   Array#map.flatten:   270669.8 i/s - 2.13x  (± 0.00) slower
Array#map.flatten(1):   261501.2 i/s - 2.20x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   179.219k i/100ms
  Array#reverse_each     2.856M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.266M (± 6.8%) i/s -     16.309M in   5.032104s
  Array#reverse_each     28.643M (± 3.3%) i/s -    145.637M in   5.091148s

Comparison:
  Array#reverse_each: 28643151.9 i/s
  Array#reverse.each:  3266019.8 i/s - 8.77x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       799.652k i/100ms
   Enumerable#detect     4.663M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.404M (± 8.4%) i/s -    206.310M in  20.019317s
   Enumerable#detect     46.448M (± 3.0%) i/s -    928.030M in  20.000013s

Comparison:
   Enumerable#detect: 46448438.4 i/s
Enumerable#select.first: 10404237.8 i/s - 4.46x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       332.725k i/100ms
Enumerable#select.last
                       542.677k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.516M (± 6.7%) i/s -     17.634M in   5.046011s
Enumerable#select.last
                          5.389M (± 6.0%) i/s -     27.134M in   5.061353s

Comparison:
Enumerable#select.last:  5388817.2 i/s
Enumerable#reverse.detect:  3516156.0 i/s - 1.53x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.020k i/100ms
  Enumerable#sort_by     4.274k i/100ms
     Enumerable#sort     2.659k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         36.735k (±26.3%) i/s -    168.840k in   5.082390s
  Enumerable#sort_by     37.869k (±26.1%) i/s -    162.412k in   5.087088s
     Enumerable#sort     54.240k (± 7.0%) i/s -    271.218k in   5.033130s

Comparison:
     Enumerable#sort:    54239.9 i/s
  Enumerable#sort_by:    37869.3 i/s - 1.43x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    36734.9 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   940.399k i/100ms
Enumerable#sort_by...first
                         9.563k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      9.445M (± 1.6%) i/s -     47.960M in   5.078887s
Enumerable#sort_by...first
                        116.184k (± 5.7%) i/s -    583.343k in   5.045853s

Comparison:
   Enumerable#min_by:  9445401.3 i/s
Enumerable#sort_by...first:   116183.9 i/s - 81.30x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   579.712k i/100ms
            Hash#dup   730.565k i/100ms
Calculating -------------------------------------
              Hash[]      7.570M (±12.6%) i/s -     37.681M in   5.062395s
            Hash#dup      7.721M (±12.9%) i/s -     37.989M in   5.011481s

Comparison:
            Hash#dup:  7721178.3 i/s
              Hash[]:  7570132.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   316.277M i/100ms
  Hash#fetch, symbol   311.977M i/100ms
     Hash#[], string    29.178M i/100ms
  Hash#fetch, string    26.642M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.187B (± 2.1%) i/s -     16.130B in   5.062933s
  Hash#fetch, symbol      3.168B (± 2.4%) i/s -     15.911B in   5.024719s
     Hash#[], string    290.259M (± 3.1%) i/s -      1.459B in   5.031928s
  Hash#fetch, string    268.050M (± 1.5%) i/s -      1.359B in   5.070140s

Comparison:
     Hash#[], symbol: 3187492413.7 i/s
  Hash#fetch, symbol: 3168413556.1 i/s - same-ish: difference falls within error
     Hash#[], string: 290258573.5 i/s - 10.98x  (± 0.00) slower
  Hash#fetch, string: 268049528.0 i/s - 11.89x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    92.302M i/100ms
             Hash#[]    91.787M i/100ms
          Hash#[] ||    92.169M i/100ms
          Hash#[] &&    92.361M i/100ms
          Hash#fetch    92.338M i/100ms
 Hash#fetch fallback    91.474M i/100ms
Calculating -------------------------------------
            Hash#dig    913.275M (± 2.7%) i/s -      4.615B in   5.057261s
             Hash#[]    920.151M (± 1.6%) i/s -      4.681B in   5.088678s
          Hash#[] ||    920.777M (± 1.0%) i/s -      4.608B in   5.005526s
          Hash#[] &&    916.304M (± 2.3%) i/s -      4.618B in   5.042760s
          Hash#fetch    919.647M (± 1.7%) i/s -      4.617B in   5.021899s
 Hash#fetch fallback    916.290M (± 2.3%) i/s -      4.665B in   5.094204s

Comparison:
          Hash#[] ||: 920776696.1 i/s
             Hash#[]: 920151373.8 i/s - same-ish: difference falls within error
          Hash#fetch: 919646584.3 i/s - same-ish: difference falls within error
          Hash#[] &&: 916304080.2 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 916290036.8 i/s - same-ish: difference falls within error
            Hash#dig: 913275332.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   319.847M i/100ms
  Hash#fetch + block   314.038M i/100ms
    Hash#fetch + arg   309.133M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.181B (± 2.5%) i/s -     15.992B in   5.030290s
  Hash#fetch + block      3.185B (± 2.6%) i/s -     16.016B in   5.032269s
    Hash#fetch + arg      3.192B (± 1.9%) i/s -     16.075B in   5.037172s

Comparison:
    Hash#fetch + arg: 3192458349.7 i/s
  Hash#fetch + block: 3184954086.6 i/s - same-ish: difference falls within error
  Hash#fetch + const: 3181284429.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    35.981k i/100ms
         sort + to_h     2.648k i/100ms
Calculating -------------------------------------
      sort_by + to_h    490.382k (± 8.2%) i/s -      2.447M in   5.024443s
         sort + to_h    213.988k (±15.7%) i/s -      1.017M in   4.997669s

Comparison:
      sort_by + to_h:   490382.1 i/s
         sort + to_h:   213987.6 i/s - 2.29x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   225.851k i/100ms
       Hash#each_key   239.066k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.355M (±10.9%) i/s -     11.518M in   5.011696s
       Hash#each_key      2.379M (± 4.1%) i/s -     11.953M in   5.032856s

Comparison:
       Hash#each_key:  2379249.5 i/s
      Hash#keys.each:  2354708.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   261.000  i/100ms
           Hash#key?    15.524M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      3.140k (±13.9%) i/s -     15.399k in   5.034259s
           Hash#key?    153.722M (± 1.5%) i/s -    776.209M in   5.050607s

Comparison:
           Hash#key?: 153722071.6 i/s
  Hash#keys.include?:     3140.1 i/s - 48954.30x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    55.243k i/100ms
            Hash#[]=    63.441k i/100ms
Calculating -------------------------------------
         Hash#merge!    593.419k (± 7.3%) i/s -      2.983M in   5.061942s
            Hash#[]=    609.203k (± 7.0%) i/s -      3.045M in   5.024510s

Comparison:
            Hash#[]=:   609203.0 i/s
         Hash#merge!:   593419.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        35.332k i/100ms
      Hash#merge({})    20.302k i/100ms
 Hash#dup#merge!({})    32.208k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        392.075k (±10.3%) i/s -      1.943M in   5.016538s
      Hash#merge({})    201.522k (± 8.7%) i/s -      1.015M in   5.083366s
 Hash#dup#merge!({})    316.897k (± 8.4%) i/s -      1.578M in   5.023517s

Comparison:
{}#merge!(Hash) do end:   392075.1 i/s
 Hash#dup#merge!({}):   316897.2 i/s - 1.24x  (± 0.00) slower
      Hash#merge({}):   201521.9 i/s - 1.95x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   322.456M i/100ms
          Hash#merge   320.676M i/100ms
Calculating -------------------------------------
        Hash#**other      3.185B (± 2.5%) i/s -     16.123B in   5.065150s
          Hash#merge      3.199B (± 2.5%) i/s -     16.034B in   5.015854s

Comparison:
          Hash#merge: 3198796013.6 i/s
        Hash#**other: 3185170816.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.090k i/100ms
         Hash#merge!    57.506k i/100ms
Calculating -------------------------------------
          Hash#merge     12.356k (±11.2%) i/s -     61.040k in   5.024447s
         Hash#merge!    611.404k (± 3.0%) i/s -      3.105M in   5.083719s

Comparison:
         Hash#merge!:   611404.5 i/s
          Hash#merge:    12356.3 i/s - 49.48x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.470M i/100ms
Array#each               1.446M i/100ms
Array#each_w/_object     1.474M i/100ms
Hash#select-include      2.442M i/100ms
Calculating -------------------------------------
Hash#native-slice        19.047M (± 7.5%) i/s -     95.535M in   5.053886s
Array#each               15.227M (± 5.9%) i/s -     76.661M in   5.059276s
Array#each_w/_object     15.124M (± 7.5%) i/s -     75.186M in   5.010644s
Hash#select-include      24.483M (± 6.1%) i/s -    122.099M in   5.012054s

Comparison:
Hash#select-include : 24483488.6 i/s
Hash#native-slice   : 19046590.0 i/s - 1.29x  (± 0.00) slower
Array#each          : 15226577.7 i/s - 1.61x  (± 0.00) slower
Array#each_w/_object: 15124186.0 i/s - 1.62x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   251.000  i/100ms
         Hash#value?   683.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      3.249k (±14.1%) i/s -     16.064k in   5.071523s
         Hash#value?      6.855k (± 0.8%) i/s -     34.833k in   5.081578s

Comparison:
         Hash#value?:     6855.2 i/s
Hash#values.include?:     3248.9 i/s - 2.11x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   321.976M i/100ms
                send   309.999M i/100ms
      method_missing   321.852M i/100ms
Calculating -------------------------------------
                call      3.192B (± 2.7%) i/s -     16.099B in   5.047151s
                send      3.199B (± 2.7%) i/s -     16.120B in   5.043619s
      method_missing      3.184B (± 3.1%) i/s -     16.093B in   5.058909s

Comparison:
                send: 3198661955.8 i/s
                call: 3192158688.4 i/s - same-ish: difference falls within error
      method_missing: 3184414949.2 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    44.497k i/100ms
      Symbol#to_proc    67.153k i/100ms
Calculating -------------------------------------
               Block    773.830k (±13.5%) i/s -      3.782M in   5.022782s
      Symbol#to_proc    738.791k (±15.6%) i/s -      3.626M in   5.048790s

Comparison:
               Block:   773830.1 i/s
      Symbol#to_proc:   738791.1 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   297.855M i/100ms
       block + yield   322.963M i/100ms
        unused block   322.795M i/100ms
               yield   322.414M i/100ms
Calculating -------------------------------------
          block.call      3.190B (± 5.1%) i/s -     16.084B in   5.059779s
       block + yield      3.183B (± 3.8%) i/s -     16.148B in   5.082092s
        unused block      3.167B (± 6.3%) i/s -     15.817B in   5.023872s
               yield      3.210B (± 1.9%) i/s -     16.121B in   5.024664s

Comparison:
               yield: 3209547210.4 i/s
          block.call: 3190442094.1 i/s - same-ish: difference falls within error
       block + yield: 3182740370.7 i/s - same-ish: difference falls within error
        unused block: 3167447265.1 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     5.073k i/100ms
      range#include?   164.000  i/100ms
       range#member?   190.000  i/100ms
       plain compare     8.006k i/100ms
Calculating -------------------------------------
        range#cover?     56.714k (±27.4%) i/s -    258.723k in   5.087546s
      range#include?      2.600k (±36.2%) i/s -     11.316k in   5.081623s
       range#member?      2.470k (±32.2%) i/s -     11.210k in   5.186812s
       plain compare     87.976k (±23.1%) i/s -    408.306k in   5.074079s

Comparison:
       plain compare:    87976.2 i/s
        range#cover?:    56714.2 i/s - same-ish: difference falls within error
      range#include?:     2599.8 i/s - 33.84x  (± 0.00) slower
       range#member?:     2469.5 i/s - 35.62x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    34.671M i/100ms
           String#=~    31.866M i/100ms
          Regexp#===    32.163M i/100ms
        String#match    31.332M i/100ms
Calculating -------------------------------------
       String#match?    344.995M (± 2.7%) i/s -      1.734B in   5.028879s
           String#=~    320.628M (± 2.4%) i/s -      1.625B in   5.071962s
          Regexp#===    318.565M (± 4.3%) i/s -      1.608B in   5.060191s
        String#match    314.504M (± 1.7%) i/s -      1.598B in   5.082407s

Comparison:
       String#match?: 344994812.6 i/s
           String#=~: 320628427.2 i/s - 1.08x  (± 0.00) slower
          Regexp#===: 318565264.1 i/s - 1.08x  (± 0.00) slower
        String#match: 314503623.9 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.561M i/100ms
      String#casecmp     4.384M i/100ms
Calculating -------------------------------------
String#downcase + ==     29.845M (± 7.3%) i/s -    148.510M in   5.011364s
      String#casecmp     47.221M (± 4.8%) i/s -    236.715M in   5.025029s

Comparison:
      String#casecmp: 47220942.0 i/s
String#downcase + ==: 29844935.3 i/s - 1.58x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+    10.169M i/100ms
       String#concat    10.124M i/100ms
       String#append    10.797M i/100ms
         "foo" "bar"   321.765M i/100ms
  "#{'foo'}#{'bar'}"    10.998M i/100ms
Calculating -------------------------------------
            String#+    106.846M (± 5.6%) i/s -    538.979M in   5.067071s
       String#concat    107.013M (± 5.9%) i/s -    536.558M in   5.038273s
       String#append    105.728M (± 8.5%) i/s -    529.053M in   5.056299s
         "foo" "bar"      3.177B (± 3.6%) i/s -     16.088B in   5.070993s
  "#{'foo'}#{'bar'}"    106.131M (± 7.6%) i/s -    527.907M in   5.016272s

Comparison:
         "foo" "bar": 3177058768.0 i/s
       String#concat: 107012548.4 i/s - 29.69x  (± 0.00) slower
            String#+: 106846470.0 i/s - 29.73x  (± 0.00) slower
  "#{'foo'}#{'bar'}": 106130966.3 i/s - 29.94x  (± 0.00) slower
       String#append: 105728073.0 i/s - 30.05x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   312.616M i/100ms
          String#dup   322.173M i/100ms
Calculating -------------------------------------
           String#+@      3.180B (± 3.3%) i/s -     15.943B in   5.019041s
          String#dup      3.184B (± 2.7%) i/s -     16.109B in   5.063569s

Comparison:
          String#dup: 3183777085.5 i/s
           String#+@: 3180321825.0 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.494M i/100ms
       String#match?     1.783M i/100ms
    String#end_with?    10.730M i/100ms
Calculating -------------------------------------
           String#=~     15.213M (± 2.5%) i/s -     76.205M in   5.012574s
       String#match?     17.703M (± 2.5%) i/s -     89.128M in   5.038191s
    String#end_with?    106.991M (± 1.8%) i/s -    536.480M in   5.016038s

Comparison:
    String#end_with?: 106990570.0 i/s
       String#match?: 17702680.4 i/s - 6.04x  (± 0.00) slower
           String#=~: 15212907.9 i/s - 7.03x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   248.381k i/100ms
          String#sub   958.488k i/100ms
String#dup["string"]=
                         9.987M i/100ms
Calculating -------------------------------------
         String#gsub      8.348M (±14.3%) i/s -     40.734M in   5.023096s
          String#sub     10.210M (± 8.8%) i/s -     50.800M in   5.031893s
String#dup["string"]=
                        100.711M (± 0.3%) i/s -    509.336M in   5.057460s

Comparison:
String#dup["string"]=: 100710809.8 i/s
          String#sub: 10210262.3 i/s - 9.86x  (± 0.00) slower
         String#gsub:  8347973.7 i/s - 12.06x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    97.166k i/100ms
           String#tr   159.082k i/100ms
Calculating -------------------------------------
         String#gsub      4.262M (±15.4%) i/s -     20.599M in   5.010603s
           String#tr      1.596M (± 4.8%) i/s -      8.113M in   5.095577s

Comparison:
         String#gsub:  4261572.1 i/s
           String#tr:  1596171.8 i/s - 2.67x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   320.559M i/100ms
         With Freeze   322.366M i/100ms
Calculating -------------------------------------
      Without Freeze      3.167B (± 3.2%) i/s -     16.028B in   5.066751s
         With Freeze      3.197B (± 1.3%) i/s -     16.118B in   5.042369s

Comparison:
         With Freeze: 3197136333.7 i/s
      Without Freeze: 3166912812.4 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     9.543k i/100ms
      String#squeeze    89.247k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    173.971k (± 9.2%) i/s -    868.413k in   5.051858s
      String#squeeze    843.351k (± 2.2%) i/s -      4.284M in   5.082112s

Comparison:
      String#squeeze:   843351.1 i/s
 String#gsub/regex+/:   173971.2 i/s - 4.85x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~    10.118M i/100ms
       String#match?    13.905M i/100ms
  String#start_with?    16.134M i/100ms
Calculating -------------------------------------
           String#=~    104.354M (± 7.6%) i/s -    526.159M in   5.084751s
       String#match?    139.978M (± 1.7%) i/s -    709.161M in   5.067801s
  String#start_with?    159.736M (± 2.7%) i/s -    806.692M in   5.054014s

Comparison:
  String#start_with?: 159736246.6 i/s
       String#match?: 139977538.5 i/s - 1.14x  (± 0.00) slower
           String#=~: 104353746.3 i/s - 1.53x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    47.594k i/100ms
    String#[0, n] ==   722.877k i/100ms
   String#[RANGE] ==   234.488k i/100ms
   String#[0...n] ==   669.637k i/100ms
Calculating -------------------------------------
  String#start_with?      7.337M (± 1.0%) i/s -     36.695M in   5.002099s
    String#[0, n] ==      7.159M (± 6.7%) i/s -     36.144M in   5.082199s
   String#[RANGE] ==     13.720M (±12.5%) i/s -     66.829M in   5.016187s
   String#[0...n] ==      6.599M (± 3.0%) i/s -     33.482M in   5.078164s

Comparison:
   String#[RANGE] ==: 13719818.1 i/s
  String#start_with?:  7336664.7 i/s - 1.87x  (± 0.00) slower
    String#[0, n] ==:  7158892.5 i/s - 1.92x  (± 0.00) slower
   String#[0...n] ==:  6599438.0 i/s - 2.08x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     9.945M i/100ms
 String#sub!'string'   862.448k i/100ms
String#gsub!'string'   591.167k i/100ms
  String#[/regexp/]=     9.779M i/100ms
 String#sub!/regexp/     1.300M i/100ms
String#gsub!/regexp/   728.472k i/100ms
Calculating -------------------------------------
  String#['string']=     99.975M (± 2.7%) i/s -    507.214M in   5.077450s
 String#sub!'string'     10.993M (±10.8%) i/s -     55.197M in   5.090471s
String#gsub!'string'      6.409M (± 8.2%) i/s -     31.923M in   5.028869s
  String#[/regexp/]=     97.415M (± 1.8%) i/s -    488.965M in   5.021183s
 String#sub!/regexp/     31.589M (± 5.0%) i/s -    158.640M in   5.036419s
String#gsub!/regexp/      9.422M (±10.0%) i/s -     47.351M in   5.085751s

Comparison:
  String#['string']=: 99975283.0 i/s
  String#[/regexp/]=: 97415337.2 i/s - same-ish: difference falls within error
 String#sub!/regexp/: 31589060.4 i/s - 3.16x  (± 0.00) slower
 String#sub!'string': 10992976.1 i/s - 9.09x  (± 0.00) slower
String#gsub!/regexp/:  9421624.9 i/s - 10.61x  (± 0.00) slower
String#gsub!'string':  6408961.1 i/s - 15.60x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub   172.943k i/100ms
        String#chomp     6.560M i/100ms
String#delete_suffix    11.369M i/100ms
Calculating -------------------------------------
          String#sub     76.916M (±10.7%) i/s -    372.346M in   4.997584s
        String#chomp     65.502M (± 0.9%) i/s -    328.025M in   5.008249s
String#delete_suffix    118.339M (± 6.1%) i/s -    591.167M in   5.014592s

Comparison:
String#delete_suffix: 118338901.9 i/s
          String#sub: 76916072.1 i/s - 1.54x  (± 0.00) slower
        String#chomp: 65502254.0 i/s - 1.81x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   318.767M i/100ms
          String#sub     1.540M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.171B (± 3.0%) i/s -     15.938B in   5.031674s
          String#sub    340.848M (± 2.9%) i/s -      1.703B in   5.002005s

Comparison:
String#delete_prefix: 3170574265.2 i/s
          String#sub: 340847943.4 i/s - 9.30x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     2.031M i/100ms
    String#unpack[0]     2.052M i/100ms
Calculating -------------------------------------
      String#unpack1     20.517M (± 4.0%) i/s -    103.606M in   5.057786s
    String#unpack[0]     20.663M (± 2.3%) i/s -    104.632M in   5.066471s

Comparison:
    String#unpack[0]: 20662761.8 i/s
      String#unpack1: 20517119.0 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.2.0-dev-49a44754, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    21.079k i/100ms
          Time.parse   409.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    853.593k (±20.7%) i/s -      4.005M in   5.007940s
          Time.parse      6.441k (±14.1%) i/s -     31.493k in   5.029493s

Comparison:
        Time.iso8601:   853593.2 i/s
          Time.parse:     6441.0 i/s - 132.53x  (± 0.00) slower

