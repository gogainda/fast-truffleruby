$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       290.775M i/100ms
Function with splat arguments
                         2.044k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.273B (± 3.7%) i/s -     16.574B in   5.070883s
Function with splat arguments
                         21.867k (± 9.2%) i/s -    108.332k in   5.003574s

Comparison:
Function with single Array argument: 3273153678.0 i/s
Function with splat arguments:    21866.5 i/s - 149687.75x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   319.998M i/100ms
Sequential Assignment
                       317.820M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.251B (± 5.0%) i/s -     16.320B in   5.032945s
Sequential Assignment
                          3.311B (± 2.9%) i/s -     16.844B in   5.092046s

Comparison:
Sequential Assignment: 3310763045.8 i/s
 Parallel Assignment: 3251243919.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   332.898M i/100ms
       attr_accessor   304.926M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.242B (± 2.8%) i/s -     16.312B in   5.035648s
       attr_accessor      3.317B (± 2.9%) i/s -     16.771B in   5.060296s

Comparison:
       attr_accessor: 3317164307.0 i/s
   getter_and_setter: 3242036371.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    13.017k i/100ms
         respond_to?   325.435M i/100ms
Calculating -------------------------------------
      begin...rescue    107.942k (± 7.5%) i/s -    546.714k in   5.102315s
         respond_to?      3.276B (± 3.1%) i/s -     16.597B in   5.071150s

Comparison:
         respond_to?: 3276215193.1 i/s
      begin...rescue:   107942.1 i/s - 30351.59x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   329.247M i/100ms
             &method    18.471M i/100ms
Calculating -------------------------------------
              normal      3.205B (± 6.7%) i/s -     16.133B in   5.069250s
             &method    185.233M (± 2.2%) i/s -    942.016M in   5.088009s

Comparison:
              normal: 3204843087.7 i/s
             &method: 185233412.3 i/s - 17.30x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       154.000  i/100ms
       define_method   170.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          3.917k (±59.7%) i/s -      7.392k in   6.353048s
       define_method     12.924k (±39.3%) i/s -     13.090k in   5.102603s

Comparison:
       define_method:    12924.1 i/s
module_eval with string:     3917.5 i/s - 3.30x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   254.767k i/100ms
       Kernel#format   191.125k i/100ms
            String#%   189.125k i/100ms
Calculating -------------------------------------
         Float#round      2.610M (± 5.8%) i/s -     12.993M in   5.001154s
       Kernel#format      1.876M (± 6.0%) i/s -      9.365M in   5.015331s
            String#%      1.844M (± 5.9%) i/s -      9.267M in   5.048305s

Comparison:
         Float#round:  2610232.0 i/s
       Kernel#format:  1876156.7 i/s - 1.39x  (± 0.00) slower
            String#%:  1844150.7 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   323.424M i/100ms
          OpenStruct   309.244M i/100ms
Calculating -------------------------------------
                Hash      3.277B (± 4.0%) i/s -     16.495B in   5.042479s
          OpenStruct      3.322B (± 3.1%) i/s -     16.699B in   5.032402s

Comparison:
          OpenStruct: 3321721180.5 i/s
                Hash: 3276701945.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   320.303M i/100ms
          OpenStruct     4.213k i/100ms
Calculating -------------------------------------
                Hash      3.191B (± 5.0%) i/s -     16.015B in   5.033708s
          OpenStruct     47.826k (±23.1%) i/s -    223.289k in   5.011981s

Comparison:
                Hash: 3190501830.4 i/s
          OpenStruct:    47825.5 i/s - 66711.28x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   976.928k i/100ms
  ancestors.include?   194.508k i/100ms
Calculating -------------------------------------
  less than or equal     10.450M (± 3.8%) i/s -     52.754M in   5.055740s
  ancestors.include?      2.067M (± 7.1%) i/s -     10.309M in   5.020432s

Comparison:
  less than or equal: 10449629.4 i/s
  ancestors.include?:  2066899.3 i/s - 5.06x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     32.621  (± 3.1%) i/s -    163.000  in   5.005691s
         Kernel loop     32.778  (± 3.1%) i/s -    164.000  in   5.010113s

Comparison:
         Kernel loop:       32.8 i/s
          While Loop:       32.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   327.997M i/100ms
         Array#first   314.961M i/100ms
Calculating -------------------------------------
           Array#[0]      3.237B (± 3.2%) i/s -     16.400B in   5.072031s
         Array#first      3.266B (± 3.3%) i/s -     16.378B in   5.020168s

Comparison:
         Array#first: 3266471055.5 i/s
           Array#[0]: 3236716574.8 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   326.916M i/100ms
          Array#last   316.787M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.300B (± 3.4%) i/s -     16.673B in   5.058397s
          Array#last      3.334B (± 3.3%) i/s -     16.790B in   5.041350s

Comparison:
          Array#last: 3334102255.6 i/s
          Array#[-1]: 3300030278.8 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   948.654k i/100ms
Calculating -------------------------------------
                find     14.037  (± 0.0%) i/s -     71.000  in   5.063479s
             bsearch      9.749M (± 3.8%) i/s -     49.330M in   5.067939s

Comparison:
             bsearch:  9748594.1 i/s
                find:       14.0 i/s - 694476.97x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.218  (± 0.0%) i/s -      2.000  in   9.171205s
        Array#insert      1.430  (± 0.0%) i/s -      8.000  in   5.597209s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.2 i/s - 6.55x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   330.254M i/100ms
          Array#size   298.538M i/100ms
         Array#count   321.990M i/100ms
Calculating -------------------------------------
        Array#length      3.278B (± 3.1%) i/s -     16.513B in   5.042671s
          Array#size      3.275B (± 3.5%) i/s -     16.420B in   5.020639s
         Array#count      3.325B (± 2.6%) i/s -     16.743B in   5.038944s

Comparison:
         Array#count: 3325041201.8 i/s
        Array#length: 3277762823.5 i/s - same-ish: difference falls within error
          Array#size: 3274568077.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    37.415k i/100ms
        Array#sample     3.913M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    378.809k (± 3.0%) i/s -      1.908M in   5.041811s
        Array#sample     38.663M (± 2.4%) i/s -    195.673M in   5.064048s

Comparison:
        Array#sample: 38662756.6 i/s
 Array#shuffle.first:   378808.9 i/s - 102.06x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   980.000  i/100ms
          Date.parse   651.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     19.703k (±42.2%) i/s -     86.240k in   5.127022s
          Date.parse      7.719k (±15.5%) i/s -     37.758k in   5.032147s

Comparison:
        Date.iso8601:    19702.6 i/s
          Date.parse:     7718.7 i/s - 2.55x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   296.869k i/100ms
           Array#map     1.953M i/100ms
Calculating -------------------------------------
   Array#each + push      3.395M (± 6.7%) i/s -     16.922M in   5.007245s
           Array#map     19.998M (± 9.3%) i/s -     99.616M in   5.034762s

Comparison:
           Array#map: 19997921.1 i/s
   Array#each + push:  3395410.4 i/s - 5.89x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     9.655M i/100ms
               #each    35.933M i/100ms
Calculating -------------------------------------
            For loop     99.271M (± 2.9%) i/s -    502.066M in   5.062000s
               #each    360.945M (± 3.1%) i/s -      1.833B in   5.082138s

Comparison:
               #each: 360945200.2 i/s
            For loop: 99270638.4 i/s - 3.64x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.425M i/100ms
     each_with_index     2.372M i/100ms
Calculating -------------------------------------
          While Loop     14.277M (± 3.4%) i/s -     72.689M in   5.097451s
     each_with_index     26.954M (± 7.3%) i/s -    135.190M in   5.045386s

Comparison:
     each_with_index: 26953702.3 i/s
          While Loop: 14277428.6 i/s - 1.89x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   314.350k i/100ms
      inject to_proc   317.253k i/100ms
        inject block   323.341k i/100ms
Calculating -------------------------------------
       inject symbol      3.188M (± 2.6%) i/s -     16.032M in   5.032894s
      inject to_proc      3.170M (± 1.2%) i/s -     15.863M in   5.004969s
        inject block      3.176M (± 2.0%) i/s -     16.167M in   5.093007s

Comparison:
       inject symbol:  3187580.6 i/s
        inject block:  3175666.1 i/s - same-ish: difference falls within error
      inject to_proc:  3169855.4 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    26.048k i/100ms
   Array#map.flatten    26.242k i/100ms
      Array#flat_map    60.050k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    271.227k (± 7.6%) i/s -      1.354M in   5.031433s
   Array#map.flatten    275.041k (± 7.5%) i/s -      1.391M in   5.090411s
      Array#flat_map    612.759k (± 4.7%) i/s -      3.063M in   5.010039s

Comparison:
      Array#flat_map:   612758.8 i/s
   Array#map.flatten:   275041.2 i/s - 2.23x  (± 0.00) slower
Array#map.flatten(1):   271227.0 i/s - 2.26x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   169.771k i/100ms
  Array#reverse_each     2.399M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.307M (± 6.7%) i/s -     16.468M in   5.017561s
  Array#reverse_each     24.182M (± 2.6%) i/s -    122.331M in   5.062132s

Comparison:
  Array#reverse_each: 24181822.1 i/s
  Array#reverse.each:  3307148.6 i/s - 7.31x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       967.970k i/100ms
   Enumerable#detect     4.822M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.696M (± 7.5%) i/s -    212.953M in  20.056356s
   Enumerable#detect     46.743M (± 3.7%) i/s -    935.503M in  20.044512s

Comparison:
   Enumerable#detect: 46742904.4 i/s
Enumerable#select.first: 10696227.5 i/s - 4.37x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       295.614k i/100ms
Enumerable#select.last
                       556.566k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.590M (± 4.0%) i/s -     18.032M in   5.031152s
Enumerable#select.last
                          5.579M (± 6.0%) i/s -     27.828M in   5.011996s

Comparison:
Enumerable#select.last:  5578800.9 i/s
Enumerable#reverse.detect:  3589908.2 i/s - 1.55x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.248k i/100ms
  Enumerable#sort_by     3.053k i/100ms
     Enumerable#sort     4.909k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         28.663k (±29.1%) i/s -    131.688k in   5.035629s
  Enumerable#sort_by     32.345k (±38.9%) i/s -    125.173k in   5.023928s
     Enumerable#sort     56.242k (± 3.9%) i/s -    284.722k in   5.070606s

Comparison:
     Enumerable#sort:    56242.3 i/s
  Enumerable#sort_by:    32345.0 i/s - 1.74x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    28663.3 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   987.734k i/100ms
Enumerable#sort_by...first
                         6.060k i/100ms
Calculating -------------------------------------
   Enumerable#min_by     10.116M (± 4.0%) i/s -     51.362M in   5.085764s
Enumerable#sort_by...first
                        110.332k (± 7.4%) i/s -    551.460k in   5.041306s

Comparison:
   Enumerable#min_by: 10116154.5 i/s
Enumerable#sort_by...first:   110331.8 i/s - 91.69x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   644.609k i/100ms
            Hash#dup   729.500k i/100ms
Calculating -------------------------------------
              Hash[]      7.950M (±12.0%) i/s -     39.321M in   5.025903s
            Hash#dup      7.978M (±11.2%) i/s -     39.393M in   5.008405s

Comparison:
            Hash#dup:  7978045.9 i/s
              Hash[]:  7950011.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   317.204M i/100ms
  Hash#fetch, symbol   312.857M i/100ms
     Hash#[], string    30.070M i/100ms
  Hash#fetch, string    27.269M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.255B (± 2.2%) i/s -     16.495B in   5.069486s
  Hash#fetch, symbol      3.331B (± 2.9%) i/s -     16.894B in   5.076629s
     Hash#[], string    301.399M (± 3.1%) i/s -      1.534B in   5.093295s
  Hash#fetch, string    275.525M (± 4.2%) i/s -      1.391B in   5.056787s

Comparison:
  Hash#fetch, symbol: 3330691367.5 i/s
     Hash#[], symbol: 3255236398.8 i/s - same-ish: difference falls within error
     Hash#[], string: 301399197.0 i/s - 11.05x  (± 0.00) slower
  Hash#fetch, string: 275525364.7 i/s - 12.09x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    91.694M i/100ms
             Hash#[]    93.615M i/100ms
          Hash#[] ||    91.821M i/100ms
          Hash#[] &&    94.815M i/100ms
          Hash#fetch    94.239M i/100ms
 Hash#fetch fallback    95.631M i/100ms
Calculating -------------------------------------
            Hash#dig    949.372M (± 3.1%) i/s -      4.768B in   5.027365s
             Hash#[]    944.238M (± 3.2%) i/s -      4.774B in   5.061723s
          Hash#[] ||    934.838M (± 2.5%) i/s -      4.683B in   5.012492s
          Hash#[] &&    938.312M (± 2.9%) i/s -      4.741B in   5.056668s
          Hash#fetch    942.726M (± 2.9%) i/s -      4.712B in   5.002610s
 Hash#fetch fallback    928.293M (± 1.9%) i/s -      4.686B in   5.049735s

Comparison:
            Hash#dig: 949372069.7 i/s
             Hash#[]: 944237759.3 i/s - same-ish: difference falls within error
          Hash#fetch: 942725543.2 i/s - same-ish: difference falls within error
          Hash#[] &&: 938312180.4 i/s - same-ish: difference falls within error
          Hash#[] ||: 934837614.0 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 928292816.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   336.359M i/100ms
  Hash#fetch + block   324.422M i/100ms
    Hash#fetch + arg   341.291M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.241B (± 2.6%) i/s -     16.482B in   5.088416s
  Hash#fetch + block      3.306B (± 3.9%) i/s -     16.546B in   5.012393s
    Hash#fetch + arg      3.317B (± 3.4%) i/s -     16.723B in   5.048124s

Comparison:
    Hash#fetch + arg: 3316826729.1 i/s
  Hash#fetch + block: 3306233280.9 i/s - same-ish: difference falls within error
  Hash#fetch + const: 3241251957.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    35.678k i/100ms
         sort + to_h     4.301k i/100ms
Calculating -------------------------------------
      sort_by + to_h    448.427k (±16.6%) i/s -      2.176M in   5.020187s
         sort + to_h    222.262k (±14.0%) i/s -      1.075M in   5.002531s

Comparison:
      sort_by + to_h:   448426.9 i/s
         sort + to_h:   222261.8 i/s - 2.02x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   237.807k i/100ms
       Hash#each_key   259.246k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.446M (±10.8%) i/s -     12.128M in   5.078116s
       Hash#each_key      2.559M (± 4.8%) i/s -     12.962M in   5.078192s

Comparison:
       Hash#each_key:  2558690.9 i/s
      Hash#keys.each:  2446152.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   285.000  i/100ms
           Hash#key?     3.637M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      3.981k (±11.8%) i/s -     19.665k in   5.057901s
           Hash#key?     36.433M (± 2.6%) i/s -    185.490M in   5.094739s

Comparison:
           Hash#key?: 36433272.4 i/s
  Hash#keys.include?:     3981.0 i/s - 9151.88x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    45.314k i/100ms
            Hash#[]=    60.752k i/100ms
Calculating -------------------------------------
         Hash#merge!    593.398k (± 7.7%) i/s -      2.991M in   5.078690s
            Hash#[]=    638.592k (± 6.9%) i/s -      3.220M in   5.071682s

Comparison:
            Hash#[]=:   638591.5 i/s
         Hash#merge!:   593398.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        43.860k i/100ms
      Hash#merge({})    19.957k i/100ms
 Hash#dup#merge!({})    31.939k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        393.639k (± 9.9%) i/s -      1.974M in   5.067665s
      Hash#merge({})    204.681k (± 8.9%) i/s -      1.018M in   5.022189s
 Hash#dup#merge!({})    325.586k (± 8.7%) i/s -      1.629M in   5.048684s

Comparison:
{}#merge!(Hash) do end:   393638.9 i/s
 Hash#dup#merge!({}):   325586.4 i/s - 1.21x  (± 0.00) slower
      Hash#merge({}):   204680.8 i/s - 1.92x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   339.350M i/100ms
          Hash#merge   327.257M i/100ms
Calculating -------------------------------------
        Hash#**other      3.287B (± 3.6%) i/s -     16.628B in   5.064897s
          Hash#merge      3.297B (± 5.3%) i/s -     16.690B in   5.079322s

Comparison:
          Hash#merge: 3297389655.1 i/s
        Hash#**other: 3287472596.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   927.000  i/100ms
         Hash#merge!    63.946k i/100ms
Calculating -------------------------------------
          Hash#merge     12.824k (±12.9%) i/s -     63.036k in   5.019911s
         Hash#merge!    664.115k (± 5.8%) i/s -      3.325M in   5.026208s

Comparison:
         Hash#merge!:   664114.9 i/s
          Hash#merge:    12824.2 i/s - 51.79x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.572M i/100ms
Array#each               1.596M i/100ms
Array#each_w/_object     1.632M i/100ms
Hash#select-include      2.568M i/100ms
Calculating -------------------------------------
Hash#native-slice        19.663M (± 6.7%) i/s -     99.013M in   5.067022s
Array#each               15.647M (± 6.2%) i/s -     78.210M in   5.021951s
Array#each_w/_object     15.581M (± 7.2%) i/s -     78.314M in   5.060344s
Hash#select-include      25.046M (± 7.0%) i/s -    125.846M in   5.056172s

Comparison:
Hash#select-include : 25045896.9 i/s
Hash#native-slice   : 19662574.7 i/s - 1.27x  (± 0.00) slower
Array#each          : 15646863.9 i/s - 1.60x  (± 0.00) slower
Array#each_w/_object: 15580592.0 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   273.000  i/100ms
         Hash#value?   697.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      3.228k (±12.8%) i/s -     15.834k in   5.006675s
         Hash#value?      7.065k (± 2.7%) i/s -     35.547k in   5.035016s

Comparison:
         Hash#value?:     7065.2 i/s
Hash#values.include?:     3227.6 i/s - 2.19x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   320.038M i/100ms
                send   315.725M i/100ms
      method_missing   325.651M i/100ms
Calculating -------------------------------------
                call      3.245B (± 3.7%) i/s -     16.322B in   5.036961s
                send      3.256B (± 2.4%) i/s -     16.418B in   5.044511s
      method_missing      3.246B (± 2.8%) i/s -     16.283B in   5.020345s

Comparison:
                send: 3256460986.4 i/s
      method_missing: 3246036887.2 i/s - same-ish: difference falls within error
                call: 3244921721.0 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    67.608k i/100ms
      Symbol#to_proc    72.862k i/100ms
Calculating -------------------------------------
               Block    832.826k (±11.4%) i/s -      4.124M in   5.039284s
      Symbol#to_proc    799.742k (±14.9%) i/s -      4.007M in   5.134281s

Comparison:
               Block:   832825.8 i/s
      Symbol#to_proc:   799741.9 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   302.396M i/100ms
       block + yield   330.462M i/100ms
        unused block   332.945M i/100ms
               yield   328.886M i/100ms
Calculating -------------------------------------
          block.call      3.311B (± 3.2%) i/s -     16.632B in   5.029461s
       block + yield      3.310B (± 3.5%) i/s -     16.854B in   5.098027s
        unused block      3.312B (± 3.1%) i/s -     16.647B in   5.030917s
               yield      3.285B (± 3.2%) i/s -     16.444B in   5.011204s

Comparison:
        unused block: 3312288802.6 i/s
          block.call: 3310511336.4 i/s - same-ish: difference falls within error
       block + yield: 3309936895.5 i/s - same-ish: difference falls within error
               yield: 3285053161.5 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     4.184k i/100ms
      range#include?   148.000  i/100ms
       range#member?   196.000  i/100ms
       plain compare     8.383k i/100ms
Calculating -------------------------------------
        range#cover?     59.592k (±24.0%) i/s -    271.960k in   5.034275s
      range#include?      2.118k (±27.4%) i/s -      9.324k in   5.011581s
       range#member?      2.292k (±27.9%) i/s -     10.192k in   5.060840s
       plain compare     90.784k (±21.4%) i/s -    419.150k in   5.007439s

Comparison:
       plain compare:    90784.1 i/s
        range#cover?:    59592.2 i/s - same-ish: difference falls within error
       range#member?:     2292.0 i/s - 39.61x  (± 0.00) slower
      range#include?:     2118.5 i/s - 42.85x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    31.240M i/100ms
           String#=~    32.784M i/100ms
          Regexp#===    32.287M i/100ms
        String#match    32.419M i/100ms
Calculating -------------------------------------
       String#match?    349.390M (± 2.5%) i/s -      1.749B in   5.010362s
           String#=~    329.464M (± 2.2%) i/s -      1.672B in   5.077269s
          Regexp#===    327.388M (± 3.9%) i/s -      1.647B in   5.038044s
        String#match    321.939M (± 2.0%) i/s -      1.621B in   5.036875s

Comparison:
       String#match?: 349390401.9 i/s
           String#=~: 329463823.6 i/s - 1.06x  (± 0.00) slower
          Regexp#===: 327387664.6 i/s - 1.07x  (± 0.00) slower
        String#match: 321938703.4 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.845M i/100ms
      String#casecmp     4.841M i/100ms
Calculating -------------------------------------
String#downcase + ==     30.228M (± 7.4%) i/s -    150.768M in   5.025345s
      String#casecmp     48.816M (± 8.0%) i/s -    242.059M in   5.004488s

Comparison:
      String#casecmp: 48816266.7 i/s
String#downcase + ==: 30228406.5 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+    10.340M i/100ms
       String#concat     9.661M i/100ms
       String#append    10.655M i/100ms
         "foo" "bar"   328.374M i/100ms
  "#{'foo'}#{'bar'}"    10.464M i/100ms
Calculating -------------------------------------
            String#+    100.386M (± 6.2%) i/s -    506.641M in   5.074689s
       String#concat    101.994M (± 6.8%) i/s -    512.027M in   5.049652s
       String#append    101.027M (± 6.9%) i/s -    511.454M in   5.096176s
         "foo" "bar"      3.292B (± 3.8%) i/s -     16.747B in   5.094851s
  "#{'foo'}#{'bar'}"    103.993M (± 7.1%) i/s -    523.186M in   5.071862s

Comparison:
         "foo" "bar": 3292116756.3 i/s
  "#{'foo'}#{'bar'}": 103993114.5 i/s - 31.66x  (± 0.00) slower
       String#concat: 101993851.5 i/s - 32.28x  (± 0.00) slower
       String#append: 101027039.0 i/s - 32.59x  (± 0.00) slower
            String#+: 100385951.1 i/s - 32.79x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   319.585M i/100ms
          String#dup   330.814M i/100ms
Calculating -------------------------------------
           String#+@      3.239B (± 3.0%) i/s -     16.299B in   5.037376s
          String#dup      3.237B (± 2.8%) i/s -     16.210B in   5.012562s

Comparison:
           String#+@: 3238652977.1 i/s
          String#dup: 3236502089.9 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.444M i/100ms
       String#match?     1.818M i/100ms
    String#end_with?    10.807M i/100ms
Calculating -------------------------------------
           String#=~     15.625M (± 4.4%) i/s -     77.967M in   5.000441s
       String#match?     17.980M (± 2.3%) i/s -     90.907M in   5.058784s
    String#end_with?    110.456M (± 3.4%) i/s -    561.966M in   5.093754s

Comparison:
    String#end_with?: 110456360.9 i/s
       String#match?: 17980042.2 i/s - 6.14x  (± 0.00) slower
           String#=~: 15624997.1 i/s - 7.07x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   609.870k i/100ms
          String#sub   998.964k i/100ms
String#dup["string"]=
                        10.678M i/100ms
Calculating -------------------------------------
         String#gsub      8.342M (± 7.7%) i/s -     41.471M in   5.003506s
          String#sub     10.508M (± 8.8%) i/s -     52.945M in   5.079315s
String#dup["string"]=
                        107.359M (± 2.7%) i/s -    544.571M in   5.076218s

Comparison:
String#dup["string"]=: 107358724.9 i/s
          String#sub: 10508126.7 i/s - 10.22x  (± 0.00) slower
         String#gsub:  8342389.2 i/s - 12.87x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    87.855k i/100ms
           String#tr   169.556k i/100ms
Calculating -------------------------------------
         String#gsub      4.331M (±16.2%) i/s -     20.822M in   5.006800s
           String#tr      1.788M (± 4.5%) i/s -      8.986M in   5.036639s

Comparison:
         String#gsub:  4330643.7 i/s
           String#tr:  1788279.9 i/s - 2.42x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   316.977M i/100ms
         With Freeze   320.465M i/100ms
Calculating -------------------------------------
      Without Freeze      3.239B (± 2.2%) i/s -     16.483B in   5.091304s
         With Freeze      3.249B (± 4.0%) i/s -     16.344B in   5.039713s

Comparison:
         With Freeze: 3248522776.8 i/s
      Without Freeze: 3239088530.1 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     9.753k i/100ms
      String#squeeze    89.976k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    172.401k (± 9.3%) i/s -    858.264k in   5.040804s
      String#squeeze    919.581k (± 4.7%) i/s -      4.589M in   5.001724s

Comparison:
      String#squeeze:   919580.7 i/s
 String#gsub/regex+/:   172401.0 i/s - 5.33x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~    14.930M i/100ms
       String#match?    14.474M i/100ms
  String#start_with?    15.437M i/100ms
Calculating -------------------------------------
           String#=~    149.698M (± 8.9%) i/s -    746.500M in   5.044193s
       String#match?    143.372M (± 4.0%) i/s -    723.710M in   5.056447s
  String#start_with?    154.921M (± 3.2%) i/s -    787.271M in   5.087253s

Comparison:
  String#start_with?: 154921030.8 i/s
           String#=~: 149697715.9 i/s - same-ish: difference falls within error
       String#match?: 143371800.8 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   259.342k i/100ms
    String#[0, n] ==   705.564k i/100ms
   String#[RANGE] ==   216.731k i/100ms
   String#[0...n] ==   640.623k i/100ms
Calculating -------------------------------------
  String#start_with?      7.196M (± 3.4%) i/s -     36.049M in   5.015838s
    String#[0, n] ==      7.325M (± 6.0%) i/s -     36.689M in   5.032404s
   String#[RANGE] ==     13.887M (±13.1%) i/s -     67.403M in   5.001722s
   String#[0...n] ==      6.337M (± 6.5%) i/s -     32.031M in   5.084667s

Comparison:
   String#[RANGE] ==: 13887044.4 i/s
    String#[0, n] ==:  7324862.9 i/s - 1.90x  (± 0.00) slower
  String#start_with?:  7196347.7 i/s - 1.93x  (± 0.00) slower
   String#[0...n] ==:  6336826.9 i/s - 2.19x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     8.981M i/100ms
 String#sub!'string'   470.795k i/100ms
String#gsub!'string'   636.728k i/100ms
  String#[/regexp/]=    10.336M i/100ms
 String#sub!/regexp/     2.118M i/100ms
String#gsub!/regexp/   986.030k i/100ms
Calculating -------------------------------------
  String#['string']=    104.872M (± 2.6%) i/s -    529.854M in   5.055926s
 String#sub!'string'     11.519M (±12.7%) i/s -     56.495M in   5.015320s
String#gsub!'string'      6.284M (± 8.9%) i/s -     31.836M in   5.116868s
  String#[/regexp/]=    102.774M (± 2.6%) i/s -    516.812M in   5.031909s
 String#sub!/regexp/     32.881M (± 5.3%) i/s -    165.178M in   5.038891s
String#gsub!/regexp/      9.964M (± 9.5%) i/s -     49.301M in   5.002987s

Comparison:
  String#['string']=: 104872414.6 i/s
  String#[/regexp/]=: 102774378.6 i/s - same-ish: difference falls within error
 String#sub!/regexp/: 32880834.4 i/s - 3.19x  (± 0.00) slower
 String#sub!'string': 11519145.0 i/s - 9.10x  (± 0.00) slower
String#gsub!/regexp/:  9964034.7 i/s - 10.53x  (± 0.00) slower
String#gsub!'string':  6284134.2 i/s - 16.69x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub   623.922k i/100ms
        String#chomp     6.339M i/100ms
String#delete_suffix    12.005M i/100ms
Calculating -------------------------------------
          String#sub     74.404M (±10.1%) i/s -    365.618M in   4.999483s
        String#chomp     64.106M (± 2.6%) i/s -    323.296M in   5.046513s
String#delete_suffix    119.794M (± 9.5%) i/s -    600.274M in   5.065824s

Comparison:
String#delete_suffix: 119793746.2 i/s
          String#sub: 74403919.3 i/s - 1.61x  (± 0.00) slower
        String#chomp: 64106284.4 i/s - 1.87x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   314.354M i/100ms
          String#sub     2.439M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.299B (± 3.6%) i/s -     16.661B in   5.056317s
          String#sub    354.332M (± 4.2%) i/s -      1.768B in   4.999892s

Comparison:
String#delete_prefix: 3299499726.3 i/s
          String#sub: 354331690.0 i/s - 9.31x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.525M i/100ms
    String#unpack[0]     1.962M i/100ms
Calculating -------------------------------------
      String#unpack1     20.817M (± 6.9%) i/s -    103.721M in   5.017649s
    String#unpack[0]     20.678M (± 5.8%) i/s -    103.968M in   5.050958s

Comparison:
      String#unpack1: 20817111.2 i/s
    String#unpack[0]: 20678477.1 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 24.2.0-dev-817b7b96, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    38.060k i/100ms
          Time.parse   364.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    721.521k (±34.0%) i/s -      3.197M in   5.027858s
          Time.parse      6.686k (±10.7%) i/s -     33.124k in   5.033382s

Comparison:
        Time.iso8601:   721520.7 i/s
          Time.parse:     6686.5 i/s - 107.91x  (± 0.00) slower

