$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       319.524M i/100ms
Function with splat arguments
                         2.091k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.353B (± 3.3%) i/s -     16.935B in   5.057073s
Function with splat arguments
                         21.933k (± 9.0%) i/s -    108.732k in   5.007817s

Comparison:
Function with single Array argument: 3352540719.8 i/s
Function with splat arguments:    21932.7 i/s - 152856.15x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   322.179M i/100ms
Sequential Assignment
                       325.117M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.327B (± 4.2%) i/s -     16.753B in   5.044244s
Sequential Assignment
                          3.399B (± 2.7%) i/s -     17.231B in   5.073743s

Comparison:
Sequential Assignment: 3398673880.3 i/s
 Parallel Assignment: 3327469832.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   329.607M i/100ms
       attr_accessor   335.945M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.353B (± 3.4%) i/s -     16.810B in   5.019300s
       attr_accessor      3.372B (± 2.4%) i/s -     17.133B in   5.084166s

Comparison:
       attr_accessor: 3372042054.1 i/s
   getter_and_setter: 3353033613.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    13.733k i/100ms
         respond_to?   318.471M i/100ms
Calculating -------------------------------------
      begin...rescue    112.282k (± 6.0%) i/s -    563.053k in   5.036572s
         respond_to?      3.361B (± 3.4%) i/s -     16.879B in   5.028181s

Comparison:
         respond_to?: 3360997241.9 i/s
      begin...rescue:   112281.7 i/s - 29933.61x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   316.404M i/100ms
             &method    18.895M i/100ms
Calculating -------------------------------------
              normal      3.379B (± 3.6%) i/s -     17.086B in   5.062756s
             &method    173.585M (± 3.2%) i/s -    869.183M in   5.012412s

Comparison:
              normal: 3379481454.2 i/s
             &method: 173585077.3 i/s - 19.47x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       147.000  i/100ms
       define_method   167.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          4.684k (±48.0%) i/s -      8.526k in   5.009036s
       define_method     12.622k (±38.4%) i/s -     12.692k in   5.214859s

Comparison:
       define_method:    12622.2 i/s
module_eval with string:     4683.9 i/s - 2.69x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   258.021k i/100ms
       Kernel#format   199.662k i/100ms
            String#%   134.099k i/100ms
Calculating -------------------------------------
         Float#round      2.747M (± 5.8%) i/s -     13.675M in   5.001220s
       Kernel#format      1.980M (± 5.8%) i/s -      9.983M in   5.065660s
            String#%      1.321M (± 2.4%) i/s -      6.705M in   5.080152s

Comparison:
         Float#round:  2747223.2 i/s
       Kernel#format:  1979955.8 i/s - 1.39x  (± 0.00) slower
            String#%:  1320617.9 i/s - 2.08x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   336.678M i/100ms
          OpenStruct   320.927M i/100ms
Calculating -------------------------------------
                Hash      3.399B (± 2.9%) i/s -     17.171B in   5.055954s
          OpenStruct      3.400B (± 3.8%) i/s -     17.009B in   5.011181s

Comparison:
          OpenStruct: 3399641347.1 i/s
                Hash: 3399149105.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   333.062M i/100ms
          OpenStruct     2.955k i/100ms
Calculating -------------------------------------
                Hash      3.352B (± 3.3%) i/s -     16.986B in   5.074213s
          OpenStruct     53.025k (±14.1%) i/s -    260.040k in   5.049916s

Comparison:
                Hash: 3351509034.2 i/s
          OpenStruct:    53024.6 i/s - 63206.65x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal     1.031M i/100ms
  ancestors.include?   225.333k i/100ms
Calculating -------------------------------------
  less than or equal     10.489M (± 4.0%) i/s -     52.579M in   5.021228s
  ancestors.include?      2.410M (± 6.1%) i/s -     12.168M in   5.073949s

Comparison:
  less than or equal: 10488583.2 i/s
  ancestors.include?:  2410230.1 i/s - 4.35x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     33.254  (± 6.0%) i/s -    166.000  in   5.006469s
         Kernel loop     34.220  (± 2.9%) i/s -    171.000  in   5.008261s

Comparison:
         Kernel loop:       34.2 i/s
          While Loop:       33.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   334.501M i/100ms
         Array#first   334.795M i/100ms
Calculating -------------------------------------
           Array#[0]      3.400B (± 2.9%) i/s -     17.060B in   5.021420s
         Array#first      3.323B (± 3.8%) i/s -     16.740B in   5.045724s

Comparison:
           Array#[0]: 3400423845.1 i/s
         Array#first: 3322514599.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   326.923M i/100ms
          Array#last   326.875M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.365B (± 3.2%) i/s -     17.000B in   5.057307s
          Array#last      3.363B (± 3.6%) i/s -     16.998B in   5.061393s

Comparison:
          Array#[-1]: 3365067955.0 i/s
          Array#last: 3362900046.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   932.191k i/100ms
Calculating -------------------------------------
                find     14.726  (± 0.0%) i/s -     74.000  in   5.026951s
             bsearch      9.526M (± 7.0%) i/s -     47.542M in   5.026833s

Comparison:
             bsearch:  9525633.8 i/s
                find:       14.7 i/s - 646847.96x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.226  (± 0.0%) i/s -      2.000  in   8.866611s
        Array#insert      1.483  (± 0.0%) i/s -      8.000  in   5.393644s

Comparison:
        Array#insert:        1.5 i/s
       Array#unshift:        0.2 i/s - 6.58x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   335.015M i/100ms
          Array#size   335.738M i/100ms
         Array#count   339.391M i/100ms
Calculating -------------------------------------
        Array#length      3.322B (± 2.5%) i/s -     16.751B in   5.044924s
          Array#size      3.390B (± 3.4%) i/s -     17.123B in   5.056842s
         Array#count      3.372B (± 3.3%) i/s -     16.970B in   5.038292s

Comparison:
          Array#size: 3390111924.5 i/s
         Array#count: 3372066833.9 i/s - same-ish: difference falls within error
        Array#length: 3322496090.4 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    37.468k i/100ms
        Array#sample     3.847M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    379.380k (± 3.4%) i/s -      1.911M in   5.043072s
        Array#sample     38.849M (± 2.4%) i/s -    196.202M in   5.053299s

Comparison:
        Array#sample: 38849480.9 i/s
 Array#shuffle.first:   379380.0 i/s - 102.40x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601     1.159k i/100ms
          Date.parse   634.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     19.625k (±37.4%) i/s -     86.925k in   5.034152s
          Date.parse      7.855k (±25.2%) i/s -     36.772k in   5.063066s

Comparison:
        Date.iso8601:    19625.2 i/s
          Date.parse:     7855.2 i/s - 2.50x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   315.201k i/100ms
           Array#map     1.833M i/100ms
Calculating -------------------------------------
   Array#each + push      3.413M (± 6.0%) i/s -     17.021M in   5.006681s
           Array#map     19.778M (± 8.5%) i/s -     98.958M in   5.041075s

Comparison:
           Array#map: 19778154.4 i/s
   Array#each + push:  3413118.1 i/s - 5.79x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     9.480M i/100ms
               #each    35.471M i/100ms
Calculating -------------------------------------
            For loop     59.131M (±12.4%) i/s -    293.882M in   5.016570s
               #each    356.386M (± 2.0%) i/s -      1.809B in   5.078092s

Comparison:
               #each: 356386071.9 i/s
            For loop: 59131316.1 i/s - 6.03x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.421M i/100ms
     each_with_index     2.784M i/100ms
Calculating -------------------------------------
          While Loop     14.170M (± 2.2%) i/s -     71.062M in   5.017780s
     each_with_index     24.346M (± 7.3%) i/s -    122.479M in   5.057096s

Comparison:
     each_with_index: 24346284.2 i/s
          While Loop: 14169622.5 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   307.716k i/100ms
      inject to_proc   313.202k i/100ms
        inject block   311.006k i/100ms
Calculating -------------------------------------
       inject symbol      3.100M (± 3.7%) i/s -     15.694M in   5.071427s
      inject to_proc      3.108M (± 2.1%) i/s -     15.660M in   5.041303s
        inject block      3.091M (± 5.0%) i/s -     15.550M in   5.049086s

Comparison:
      inject to_proc:  3107804.9 i/s
       inject symbol:  3099636.8 i/s - same-ish: difference falls within error
        inject block:  3090599.2 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    23.542k i/100ms
   Array#map.flatten    26.334k i/100ms
      Array#flat_map    59.047k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    271.737k (± 5.5%) i/s -      1.365M in   5.040692s
   Array#map.flatten    277.556k (± 5.8%) i/s -      1.396M in   5.046255s
      Array#flat_map    595.570k (± 7.4%) i/s -      3.011M in   5.096492s

Comparison:
      Array#flat_map:   595570.3 i/s
   Array#map.flatten:   277556.5 i/s - 2.15x  (± 0.00) slower
Array#map.flatten(1):   271736.6 i/s - 2.19x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   331.150k i/100ms
  Array#reverse_each     2.890M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.439M (± 6.9%) i/s -     17.220M in   5.044190s
  Array#reverse_each     28.972M (± 3.8%) i/s -    147.388M in   5.095411s

Comparison:
  Array#reverse_each: 28971961.5 i/s
  Array#reverse.each:  3438652.0 i/s - 8.43x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       968.692k i/100ms
   Enumerable#detect     4.726M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.487M (± 7.3%) i/s -    209.237M in  20.093451s
   Enumerable#detect     46.481M (± 3.5%) i/s -    931.021M in  20.060022s

Comparison:
   Enumerable#detect: 46480992.8 i/s
Enumerable#select.first: 10487181.7 i/s - 4.43x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       357.775k i/100ms
Enumerable#select.last
                       547.045k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.598M (± 4.0%) i/s -     18.247M in   5.079588s
Enumerable#select.last
                          5.455M (± 5.7%) i/s -     27.352M in   5.038392s

Comparison:
Enumerable#select.last:  5455081.6 i/s
Enumerable#reverse.detect:  3598458.8 i/s - 1.52x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.905k i/100ms
  Enumerable#sort_by     2.366k i/100ms
     Enumerable#sort     4.805k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         34.360k (±33.5%) i/s -    128.865k in   5.071392s
  Enumerable#sort_by     40.693k (±14.2%) i/s -    194.012k in   5.028540s
     Enumerable#sort     55.245k (± 3.8%) i/s -    278.690k in   5.052741s

Comparison:
     Enumerable#sort:    55245.3 i/s
  Enumerable#sort_by:    40693.4 i/s - 1.36x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    34360.3 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   992.446k i/100ms
Enumerable#sort_by...first
                         7.279k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      9.888M (± 2.1%) i/s -     49.622M in   5.020586s
Enumerable#sort_by...first
                        112.680k (± 7.0%) i/s -    560.483k in   5.012608s

Comparison:
   Enumerable#min_by:  9888443.9 i/s
Enumerable#sort_by...first:   112680.2 i/s - 87.76x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   595.111k i/100ms
            Hash#dup   707.152k i/100ms
Calculating -------------------------------------
              Hash[]      7.633M (±11.7%) i/s -     38.087M in   5.062552s
            Hash#dup      7.798M (±11.2%) i/s -     38.893M in   5.055935s

Comparison:
            Hash#dup:  7797850.5 i/s
              Hash[]:  7633149.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   307.165M i/100ms
  Hash#fetch, symbol   303.207M i/100ms
     Hash#[], string    29.386M i/100ms
  Hash#fetch, string    26.855M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.224B (± 1.4%) i/s -     16.280B in   5.050951s
  Hash#fetch, symbol      3.230B (± 0.4%) i/s -     16.373B in   5.068838s
     Hash#[], string    290.937M (± 4.7%) i/s -      1.469B in   5.066014s
  Hash#fetch, string    268.318M (± 1.7%) i/s -      1.343B in   5.005800s

Comparison:
  Hash#fetch, symbol: 3230215302.5 i/s
     Hash#[], symbol: 3223740555.4 i/s - same-ish: difference falls within error
     Hash#[], string: 290936910.9 i/s - 11.10x  (± 0.00) slower
  Hash#fetch, string: 268318102.4 i/s - 12.04x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    90.142M i/100ms
             Hash#[]    91.334M i/100ms
          Hash#[] ||    92.712M i/100ms
          Hash#[] &&    92.961M i/100ms
          Hash#fetch    91.895M i/100ms
 Hash#fetch fallback    91.847M i/100ms
Calculating -------------------------------------
            Hash#dig    934.611M (± 3.1%) i/s -      4.687B in   5.020296s
             Hash#[]    933.712M (± 2.4%) i/s -      4.749B in   5.089566s
          Hash#[] ||    941.354M (± 3.4%) i/s -      4.728B in   5.028688s
          Hash#[] &&    923.550M (± 2.2%) i/s -      4.648B in   5.035386s
          Hash#fetch    917.884M (± 2.5%) i/s -      4.595B in   5.009073s
 Hash#fetch fallback    931.558M (± 2.5%) i/s -      4.684B in   5.031602s

Comparison:
          Hash#[] ||: 941354231.2 i/s
            Hash#dig: 934611056.8 i/s - same-ish: difference falls within error
             Hash#[]: 933711508.5 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 931557747.0 i/s - same-ish: difference falls within error
          Hash#[] &&: 923550453.7 i/s - same-ish: difference falls within error
          Hash#fetch: 917883727.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   326.482M i/100ms
  Hash#fetch + block   333.332M i/100ms
    Hash#fetch + arg   339.228M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.274B (± 3.3%) i/s -     16.651B in   5.090839s
  Hash#fetch + block      3.299B (± 3.3%) i/s -     16.667B in   5.058227s
    Hash#fetch + arg      3.293B (± 2.9%) i/s -     16.622B in   5.051466s

Comparison:
  Hash#fetch + block: 3298574605.8 i/s
    Hash#fetch + arg: 3293334839.0 i/s - same-ish: difference falls within error
  Hash#fetch + const: 3274288339.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    25.698k i/100ms
         sort + to_h     4.344k i/100ms
Calculating -------------------------------------
      sort_by + to_h    618.343k (± 8.2%) i/s -      3.084M in   5.025543s
         sort + to_h    278.438k (±12.9%) i/s -      1.351M in   5.008698s

Comparison:
      sort_by + to_h:   618342.6 i/s
         sort + to_h:   278437.9 i/s - 2.22x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   224.029k i/100ms
       Hash#each_key   241.011k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.467M (±11.3%) i/s -     12.098M in   5.034242s
       Hash#each_key      2.578M (± 3.8%) i/s -     13.015M in   5.055350s

Comparison:
       Hash#each_key:  2578293.3 i/s
      Hash#keys.each:  2467256.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   284.000  i/100ms
           Hash#key?    12.995M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      3.243k (±14.9%) i/s -     15.904k in   5.037967s
           Hash#key?    130.519M (± 2.4%) i/s -    662.754M in   5.080681s

Comparison:
           Hash#key?: 130519280.3 i/s
  Hash#keys.include?:     3242.8 i/s - 40248.95x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    53.481k i/100ms
            Hash#[]=    61.749k i/100ms
Calculating -------------------------------------
         Hash#merge!    600.917k (± 8.2%) i/s -      2.995M in   5.029153s
            Hash#[]=    646.010k (± 6.6%) i/s -      3.273M in   5.087988s

Comparison:
            Hash#[]=:   646009.6 i/s
         Hash#merge!:   600916.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        44.380k i/100ms
      Hash#merge({})    19.057k i/100ms
 Hash#dup#merge!({})    33.788k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        410.333k (± 9.6%) i/s -      2.041M in   5.028841s
      Hash#merge({})    206.064k (± 9.2%) i/s -      1.029M in   5.043476s
 Hash#dup#merge!({})    333.457k (± 8.0%) i/s -      1.656M in   5.007389s

Comparison:
{}#merge!(Hash) do end:   410333.5 i/s
 Hash#dup#merge!({}):   333457.3 i/s - 1.23x  (± 0.00) slower
      Hash#merge({}):   206063.8 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   319.550M i/100ms
          Hash#merge   315.237M i/100ms
Calculating -------------------------------------
        Hash#**other      3.270B (± 3.9%) i/s -     16.617B in   5.088862s
          Hash#merge      3.332B (± 2.9%) i/s -     16.708B in   5.018408s

Comparison:
          Hash#merge: 3332286236.8 i/s
        Hash#**other: 3270358706.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   730.000  i/100ms
         Hash#merge!    60.934k i/100ms
Calculating -------------------------------------
          Hash#merge     11.839k (±15.0%) i/s -     57.670k in   5.000520s
         Hash#merge!    655.955k (± 3.6%) i/s -      3.290M in   5.022924s

Comparison:
         Hash#merge!:   655955.3 i/s
          Hash#merge:    11838.5 i/s - 55.41x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.837M i/100ms
Array#each               1.509M i/100ms
Array#each_w/_object     1.501M i/100ms
Hash#select-include      2.550M i/100ms
Calculating -------------------------------------
Hash#native-slice        19.435M (± 6.8%) i/s -     97.344M in   5.040390s
Array#each               15.900M (± 6.4%) i/s -     79.968M in   5.056543s
Array#each_w/_object     15.861M (± 7.3%) i/s -     79.530M in   5.052613s
Hash#select-include      25.434M (± 7.1%) i/s -    127.476M in   5.045549s

Comparison:
Hash#select-include : 25433710.5 i/s
Hash#native-slice   : 19435260.6 i/s - 1.31x  (± 0.00) slower
Array#each          : 15900365.6 i/s - 1.60x  (± 0.00) slower
Array#each_w/_object: 15860718.5 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   268.000  i/100ms
         Hash#value?   743.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      3.371k (±14.5%) i/s -     16.616k in   5.055903s
         Hash#value?      7.423k (± 1.9%) i/s -     37.150k in   5.006642s

Comparison:
         Hash#value?:     7422.9 i/s
Hash#values.include?:     3371.0 i/s - 2.20x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   333.017M i/100ms
                send   331.340M i/100ms
      method_missing   313.743M i/100ms
Calculating -------------------------------------
                call      3.268B (± 2.7%) i/s -     16.651B in   5.098381s
                send      3.295B (± 3.1%) i/s -     16.567B in   5.033468s
      method_missing      3.265B (± 4.1%) i/s -     16.315B in   5.004743s

Comparison:
                send: 3294618021.6 i/s
                call: 3268424382.0 i/s - same-ish: difference falls within error
      method_missing: 3265370601.3 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    65.811k i/100ms
      Symbol#to_proc    79.961k i/100ms
Calculating -------------------------------------
               Block    785.175k (±14.2%) i/s -      3.883M in   5.053731s
      Symbol#to_proc    810.879k (±10.5%) i/s -      3.998M in   5.005852s

Comparison:
      Symbol#to_proc:   810879.2 i/s
               Block:   785175.1 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   325.920M i/100ms
       block + yield   323.575M i/100ms
        unused block   327.678M i/100ms
               yield   323.410M i/100ms
Calculating -------------------------------------
          block.call      3.239B (± 2.1%) i/s -     16.296B in   5.034022s
       block + yield      3.218B (± 1.8%) i/s -     16.179B in   5.028678s
        unused block      3.217B (± 3.0%) i/s -     16.384B in   5.097234s
               yield      3.261B (± 1.7%) i/s -     16.494B in   5.059189s

Comparison:
               yield: 3261078860.0 i/s
          block.call: 3238689785.1 i/s - same-ish: difference falls within error
       block + yield: 3218382866.1 i/s - same-ish: difference falls within error
        unused block: 3217450412.6 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     4.972k i/100ms
      range#include?   150.000  i/100ms
       range#member?   236.000  i/100ms
       plain compare     8.767k i/100ms
Calculating -------------------------------------
        range#cover?     67.431k (±31.6%) i/s -    288.376k in   5.018140s
      range#include?      2.923k (±41.7%) i/s -     11.250k in   5.019094s
       range#member?      2.474k (±25.0%) i/s -     11.564k in   5.101201s
       plain compare     97.327k (±22.5%) i/s -    455.884k in   5.070194s

Comparison:
       plain compare:    97326.8 i/s
        range#cover?:    67430.5 i/s - same-ish: difference falls within error
      range#include?:     2923.0 i/s - 33.30x  (± 0.00) slower
       range#member?:     2474.1 i/s - 39.34x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    34.690M i/100ms
           String#=~    32.270M i/100ms
          Regexp#===    32.135M i/100ms
        String#match    31.820M i/100ms
Calculating -------------------------------------
       String#match?    355.518M (± 2.4%) i/s -      1.804B in   5.076920s
           String#=~    327.092M (± 2.4%) i/s -      1.646B in   5.034563s
          Regexp#===    323.789M (± 1.9%) i/s -      1.639B in   5.063483s
        String#match    320.238M (± 2.4%) i/s -      1.623B in   5.070379s

Comparison:
       String#match?: 355518281.1 i/s
           String#=~: 327091900.2 i/s - 1.09x  (± 0.00) slower
          Regexp#===: 323789482.1 i/s - 1.10x  (± 0.00) slower
        String#match: 320237785.8 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.744M i/100ms
      String#casecmp     5.016M i/100ms
Calculating -------------------------------------
String#downcase + ==     30.414M (± 8.2%) i/s -    150.925M in   5.005255s
      String#casecmp     49.866M (± 4.3%) i/s -    250.821M in   5.039354s

Comparison:
      String#casecmp: 49865519.2 i/s
String#downcase + ==: 30414292.7 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     9.672M i/100ms
       String#concat    11.210M i/100ms
       String#append    11.314M i/100ms
         "foo" "bar"   333.180M i/100ms
  "#{'foo'}#{'bar'}"     9.809M i/100ms
Calculating -------------------------------------
            String#+     97.585M (± 3.4%) i/s -    493.279M in   5.060910s
       String#concat    110.674M (± 3.2%) i/s -    560.483M in   5.069723s
       String#append    109.111M (± 7.4%) i/s -    543.071M in   5.020933s
         "foo" "bar"      3.248B (± 3.2%) i/s -     16.326B in   5.031562s
  "#{'foo'}#{'bar'}"     97.689M (± 3.7%) i/s -    490.460M in   5.027549s

Comparison:
         "foo" "bar": 3248254503.2 i/s
       String#concat: 110673892.8 i/s - 29.35x  (± 0.00) slower
       String#append: 109110613.4 i/s - 29.77x  (± 0.00) slower
  "#{'foo'}#{'bar'}": 97688712.8 i/s - 33.25x  (± 0.00) slower
            String#+: 97585409.8 i/s - 33.29x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   324.083M i/100ms
          String#dup   313.249M i/100ms
Calculating -------------------------------------
           String#+@      3.322B (± 3.1%) i/s -     16.852B in   5.077528s
          String#dup      3.279B (± 5.5%) i/s -     16.602B in   5.080952s

Comparison:
           String#+@: 3322336547.4 i/s
          String#dup: 3279493338.3 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.482M i/100ms
       String#match?     1.885M i/100ms
    String#end_with?    11.096M i/100ms
Calculating -------------------------------------
           String#=~     15.314M (± 3.8%) i/s -     77.069M in   5.039929s
       String#match?     18.489M (± 2.7%) i/s -     92.377M in   4.999915s
    String#end_with?    110.784M (± 2.2%) i/s -    554.775M in   5.010243s

Comparison:
    String#end_with?: 110784434.0 i/s
       String#match?: 18489440.5 i/s - 5.99x  (± 0.00) slower
           String#=~: 15314222.0 i/s - 7.23x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   621.808k i/100ms
          String#sub   769.199k i/100ms
String#dup["string"]=
                        10.232M i/100ms
Calculating -------------------------------------
         String#gsub      8.176M (± 8.0%) i/s -     41.039M in   5.060847s
          String#sub     10.019M (±10.7%) i/s -     49.998M in   5.057097s
String#dup["string"]=
                        101.400M (± 6.3%) i/s -    511.595M in   5.075065s

Comparison:
String#dup["string"]=: 101399811.6 i/s
          String#sub: 10018879.9 i/s - 10.12x  (± 0.00) slower
         String#gsub:  8175848.3 i/s - 12.40x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    92.782k i/100ms
           String#tr   180.378k i/100ms
Calculating -------------------------------------
         String#gsub      4.550M (±13.5%) i/s -     22.082M in   5.004447s
           String#tr      1.800M (± 6.5%) i/s -      9.019M in   5.032389s

Comparison:
         String#gsub:  4550348.2 i/s
           String#tr:  1800426.4 i/s - 2.53x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   335.444M i/100ms
         With Freeze   327.945M i/100ms
Calculating -------------------------------------
      Without Freeze      3.208B (± 2.1%) i/s -     16.101B in   5.022163s
         With Freeze      3.241B (± 2.3%) i/s -     16.397B in   5.061488s

Comparison:
         With Freeze: 3241446167.3 i/s
      Without Freeze: 3207521178.2 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     6.166k i/100ms
      String#squeeze    81.918k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    179.239k (±11.5%) i/s -    881.738k in   5.017617s
      String#squeeze    801.058k (± 5.4%) i/s -      4.014M in   5.026464s

Comparison:
      String#squeeze:   801057.7 i/s
 String#gsub/regex+/:   179238.8 i/s - 4.47x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~    10.281M i/100ms
       String#match?    14.219M i/100ms
  String#start_with?    16.849M i/100ms
Calculating -------------------------------------
           String#=~    110.785M (± 5.9%) i/s -    555.199M in   5.035215s
       String#match?    146.252M (± 2.2%) i/s -    739.389M in   5.058151s
  String#start_with?    164.772M (± 3.5%) i/s -    825.610M in   5.017090s

Comparison:
  String#start_with?: 164771980.8 i/s
       String#match?: 146251778.3 i/s - 1.13x  (± 0.00) slower
           String#=~: 110785065.7 i/s - 1.49x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   113.352k i/100ms
    String#[0, n] ==   735.833k i/100ms
   String#[RANGE] ==   244.841k i/100ms
   String#[0...n] ==   649.930k i/100ms
Calculating -------------------------------------
  String#start_with?      7.500M (± 3.2%) i/s -     37.520M in   5.008093s
    String#[0, n] ==      7.342M (± 5.1%) i/s -     36.792M in   5.025640s
   String#[RANGE] ==     14.094M (±12.7%) i/s -     68.555M in   5.012423s
   String#[0...n] ==      6.472M (± 4.8%) i/s -     32.496M in   5.034292s

Comparison:
   String#[RANGE] ==: 14093604.1 i/s
  String#start_with?:  7499759.9 i/s - 1.88x  (± 0.00) slower
    String#[0, n] ==:  7341591.1 i/s - 1.92x  (± 0.00) slower
   String#[0...n] ==:  6471866.1 i/s - 2.18x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    10.179M i/100ms
 String#sub!'string'   455.033k i/100ms
String#gsub!'string'   594.558k i/100ms
  String#[/regexp/]=    10.063M i/100ms
 String#sub!/regexp/     1.279M i/100ms
String#gsub!/regexp/   974.713k i/100ms
Calculating -------------------------------------
  String#['string']=    103.574M (± 3.2%) i/s -    519.149M in   5.017671s
 String#sub!'string'     11.151M (±13.4%) i/s -     54.604M in   5.021627s
String#gsub!'string'      6.170M (± 9.9%) i/s -     30.917M in   5.085163s
  String#[/regexp/]=     96.014M (± 2.3%) i/s -    483.005M in   5.033276s
 String#sub!/regexp/     32.575M (± 5.9%) i/s -    162.410M in   5.005544s
String#gsub!/regexp/      9.148M (± 9.1%) i/s -     45.812M in   5.055473s

Comparison:
  String#['string']=: 103574243.1 i/s
  String#[/regexp/]=: 96013773.2 i/s - 1.08x  (± 0.00) slower
 String#sub!/regexp/: 32574609.4 i/s - 3.18x  (± 0.00) slower
 String#sub!'string': 11150510.5 i/s - 9.29x  (± 0.00) slower
String#gsub!/regexp/:  9148221.7 i/s - 11.32x  (± 0.00) slower
String#gsub!'string':  6170325.1 i/s - 16.79x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.090M i/100ms
        String#chomp     6.770M i/100ms
String#delete_suffix    12.244M i/100ms
Calculating -------------------------------------
          String#sub     77.672M (±11.3%) i/s -    379.361M in   4.999491s
        String#chomp     66.890M (± 5.2%) i/s -    338.484M in   5.076930s
String#delete_suffix    123.230M (± 9.5%) i/s -    612.220M in   5.022048s

Comparison:
String#delete_suffix: 123230047.2 i/s
          String#sub: 77671602.5 i/s - 1.59x  (± 0.00) slower
        String#chomp: 66889883.4 i/s - 1.84x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   302.520M i/100ms
          String#sub    32.305M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.198B (± 2.6%) i/s -     16.034B in   5.016535s
          String#sub    338.484M (± 2.6%) i/s -      1.712B in   5.062010s

Comparison:
String#delete_prefix: 3198406210.6 i/s
          String#sub: 338484411.9 i/s - 9.45x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.541M i/100ms
    String#unpack[0]     2.137M i/100ms
Calculating -------------------------------------
      String#unpack1     21.028M (± 5.3%) i/s -    106.301M in   5.069976s
    String#unpack[0]     20.592M (± 3.5%) i/s -    104.690M in   5.090691s

Comparison:
      String#unpack1: 21028232.4 i/s
    String#unpack[0]: 20591709.9 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 25.0.0-dev-c229bfd1, like ruby 3.3.5, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    76.573k i/100ms
          Time.parse   333.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    903.049k (±13.9%) i/s -      4.365M in   5.018034s
          Time.parse      6.531k (±14.1%) i/s -     31.635k in   5.019709s

Comparison:
        Time.iso8601:   903049.4 i/s
          Time.parse:     6531.2 i/s - 138.27x  (± 0.00) slower

