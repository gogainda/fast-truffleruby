$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       550.736k i/100ms
Function with splat arguments
                        22.817k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          5.504M (± 0.3%) i/s -     27.537M in   5.003481s
Function with splat arguments
                        222.983k (± 6.0%) i/s -      1.118M in   5.040610s

Comparison:
Function with single Array argument:  5503575.4 i/s
Function with splat arguments:   222983.5 i/s - 24.68x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   923.055k i/100ms
Sequential Assignment
                       956.026k i/100ms
Calculating -------------------------------------
 Parallel Assignment      9.255M (± 0.0%) i/s -     47.076M in   5.086750s
Sequential Assignment
                          9.549M (± 0.1%) i/s -     47.801M in   5.005687s

Comparison:
Sequential Assignment:  9549401.4 i/s
 Parallel Assignment:  9254595.2 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   373.542k i/100ms
       attr_accessor   410.417k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.692M (± 0.5%) i/s -     18.677M in   5.059543s
       attr_accessor      4.059M (± 0.2%) i/s -     20.521M in   5.055573s

Comparison:
       attr_accessor:  4059069.7 i/s
   getter_and_setter:  3691545.6 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    66.960k i/100ms
         respond_to?   579.929k i/100ms
Calculating -------------------------------------
      begin...rescue    696.402k (± 1.4%) i/s -      3.549M in   5.097048s
         respond_to?      5.921M (± 0.1%) i/s -     30.156M in   5.093245s

Comparison:
         respond_to?:  5920846.3 i/s
      begin...rescue:   696402.3 i/s - 8.50x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
              normal   253.097k i/100ms
             &method    87.564k i/100ms
Calculating -------------------------------------
              normal      2.537M (± 0.5%) i/s -     12.908M in   5.087938s
             &method    870.859k (± 0.1%) i/s -      4.378M in   5.027454s

Comparison:
              normal:  2537037.3 i/s
             &method:   870859.2 i/s - 2.91x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       201.000  i/100ms
       define_method   228.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.987k (±20.5%) i/s -      9.045k in   5.095867s
       define_method      2.692k (±16.6%) i/s -     12.540k in   5.021084s

Comparison:
       define_method:     2691.9 i/s
module_eval with string:     1986.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
         Float#round   141.930k i/100ms
       Kernel#format   150.760k i/100ms
            String#%   132.347k i/100ms
Calculating -------------------------------------
         Float#round      1.417M (± 0.1%) i/s -      7.096M in   5.009145s
       Kernel#format      1.505M (± 0.3%) i/s -      7.538M in   5.008645s
            String#%      1.333M (± 0.2%) i/s -      6.750M in   5.064811s

Comparison:
       Kernel#format:  1505014.1 i/s
         Float#round:  1416709.3 i/s - 1.06x  (± 0.00) slower
            String#%:  1332668.8 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
                Hash   706.150k i/100ms
          OpenStruct   346.863k i/100ms
Calculating -------------------------------------
                Hash      7.074M (± 0.2%) i/s -     36.014M in   5.090770s
          OpenStruct      3.426M (± 0.5%) i/s -     17.343M in   5.062198s

Comparison:
                Hash:  7074328.2 i/s
          OpenStruct:  3426103.4 i/s - 2.06x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
                Hash   864.184k i/100ms
          OpenStruct     7.195k i/100ms
Calculating -------------------------------------
                Hash      8.640M (± 0.1%) i/s -     43.209M in   5.000871s
          OpenStruct     72.797k (± 2.8%) i/s -    366.945k in   5.044567s

Comparison:
                Hash:  8640350.0 i/s
          OpenStruct:    72796.7 i/s - 118.69x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   451.799k i/100ms
  ancestors.include?    90.313k i/100ms
Calculating -------------------------------------
  less than or equal      4.406M (± 4.5%) i/s -     22.138M in   5.036645s
  ancestors.include?    904.807k (± 0.9%) i/s -      4.606M in   5.090953s

Comparison:
  less than or equal:  4406210.4 i/s
  ancestors.include?:   904807.4 i/s - 4.87x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.438  (± 0.0%) i/s -      3.000  in   6.843338s
         Kernel loop      0.185  (± 0.0%) i/s -      1.000  in   5.419466s

Comparison:
          While Loop:        0.4 i/s
         Kernel loop:        0.2 i/s - 2.38x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.281M i/100ms
         Array#first   986.076k i/100ms
Calculating -------------------------------------
           Array#[0]     12.784M (± 0.1%) i/s -     64.053M in   5.010572s
         Array#first      9.859M (± 0.2%) i/s -     49.304M in   5.000844s

Comparison:
           Array#[0]: 12783659.6 i/s
         Array#first:  9859122.2 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.170M i/100ms
          Array#last   946.050k i/100ms
Calculating -------------------------------------
          Array#[-1]     11.707M (± 0.0%) i/s -     59.666M in   5.096599s
          Array#last      9.444M (± 0.1%) i/s -     47.302M in   5.008635s

Comparison:
          Array#[-1]: 11707058.1 i/s
          Array#last:  9444193.0 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    78.966k i/100ms
Calculating -------------------------------------
                find      0.219  (± 0.0%) i/s -      2.000  in   9.127433s
             bsearch    789.269k (± 0.4%) i/s -      3.948M in   5.002568s

Comparison:
             bsearch:   789269.2 i/s
                find:        0.2 i/s - 3602001.10x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    14.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    145.317  (± 2.1%) i/s -    728.000  in   5.012244s
        Array#insert      1.150  (± 0.0%) i/s -      6.000  in   5.216707s

Comparison:
       Array#unshift:      145.3 i/s
        Array#insert:        1.2 i/s - 126.35x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.744M i/100ms
          Array#size     1.748M i/100ms
         Array#count     1.286M i/100ms
Calculating -------------------------------------
        Array#length     17.473M (± 0.4%) i/s -     88.967M in   5.091632s
          Array#size     17.471M (± 0.4%) i/s -     87.398M in   5.002597s
         Array#count     12.915M (± 0.2%) i/s -     65.568M in   5.076947s

Comparison:
        Array#length: 17473432.6 i/s
          Array#size: 17470684.3 i/s - same-ish: difference falls within error
         Array#count: 12914974.7 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    33.485k i/100ms
        Array#sample   798.793k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    335.273k (± 0.8%) i/s -      1.708M in   5.093923s
        Array#sample      7.990M (± 0.0%) i/s -     40.738M in   5.098918s

Comparison:
        Array#sample:  7989625.5 i/s
 Array#shuffle.first:   335272.9 i/s - 23.83x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    48.015k i/100ms
          Date.parse    24.298k i/100ms
Calculating -------------------------------------
        Date.iso8601    483.472k (± 0.6%) i/s -      2.449M in   5.065145s
          Date.parse    243.955k (± 0.5%) i/s -      1.239M in   5.079726s

Comparison:
        Date.iso8601:   483472.0 i/s
          Date.parse:   243954.9 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    14.964k i/100ms
           Array#map    22.450k i/100ms
Calculating -------------------------------------
   Array#each + push    150.323k (± 0.3%) i/s -    763.164k in   5.076886s
           Array#map    224.486k (± 0.2%) i/s -      1.122M in   5.000321s

Comparison:
           Array#map:   224486.4 i/s
   Array#each + push:   150323.1 i/s - 1.49x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
            For loop    24.137k i/100ms
               #each    27.185k i/100ms
Calculating -------------------------------------
            For loop    242.081k (± 0.3%) i/s -      1.231M in   5.085045s
               #each    271.643k (± 0.2%) i/s -      1.359M in   5.003821s

Comparison:
               #each:   271643.3 i/s
            For loop:   242081.5 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
          While Loop    23.224k i/100ms
     each_with_index    14.969k i/100ms
Calculating -------------------------------------
          While Loop    230.776k (± 0.1%) i/s -      1.161M in   5.031732s
     each_with_index    151.153k (± 0.1%) i/s -    763.419k in   5.050660s

Comparison:
          While Loop:   230775.9 i/s
     each_with_index:   151152.6 i/s - 1.53x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    60.118k i/100ms
      inject to_proc     1.684k i/100ms
        inject block     1.495k i/100ms
Calculating -------------------------------------
       inject symbol    647.115k (± 4.8%) i/s -      3.246M in   5.029013s
      inject to_proc     16.848k (± 0.2%) i/s -     85.884k in   5.097730s
        inject block     14.948k (± 0.1%) i/s -     74.750k in   5.000748s

Comparison:
       inject symbol:   647115.1 i/s
      inject to_proc:    16847.5 i/s - 38.41x  (± 0.00) slower
        inject block:    14947.8 i/s - 43.29x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     5.635k i/100ms
   Array#map.flatten     2.972k i/100ms
      Array#flat_map     7.096k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     56.256k (± 0.4%) i/s -    281.750k in   5.008446s
   Array#map.flatten     29.619k (± 0.8%) i/s -    148.600k in   5.017312s
      Array#flat_map     71.302k (± 0.6%) i/s -    361.896k in   5.075721s

Comparison:
      Array#flat_map:    71301.6 i/s
Array#map.flatten(1):    56255.7 i/s - 1.27x  (± 0.00) slower
   Array#map.flatten:    29619.3 i/s - 2.41x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    25.118k i/100ms
  Array#reverse_each    25.454k i/100ms
Calculating -------------------------------------
  Array#reverse.each    250.654k (± 0.2%) i/s -      1.256M in   5.010517s
  Array#reverse_each    253.935k (± 0.9%) i/s -      1.273M in   5.012313s

Comparison:
  Array#reverse_each:   253935.3 i/s
  Array#reverse.each:   250653.7 i/s - 1.01x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        15.702k i/100ms
   Enumerable#detect    63.876k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        156.579k (± 0.6%) i/s -      3.140M in  20.057109s
   Enumerable#detect    640.141k (± 0.1%) i/s -     12.839M in  20.056668s

Comparison:
   Enumerable#detect:   640141.0 i/s
Enumerable#select.first:   156578.5 i/s - 4.09x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       182.641k i/100ms
Enumerable#select.last
                        15.030k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.860M (± 0.5%) i/s -      9.315M in   5.008918s
Enumerable#select.last
                        150.306k (± 0.3%) i/s -    766.530k in   5.099839s

Comparison:
Enumerable#reverse.detect:  1859673.9 i/s
Enumerable#select.last:   150305.8 i/s - 12.37x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.591k i/100ms
  Enumerable#sort_by     3.494k i/100ms
     Enumerable#sort     1.944k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         36.049k (± 0.3%) i/s -    183.141k in   5.080437s
  Enumerable#sort_by     35.058k (± 0.3%) i/s -    178.194k in   5.082923s
     Enumerable#sort     19.411k (± 0.7%) i/s -     97.200k in   5.007636s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    36048.5 i/s
  Enumerable#sort_by:    35057.8 i/s - 1.03x  (± 0.00) slower
     Enumerable#sort:    19411.4 i/s - 1.86x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    14.204k i/100ms
Enumerable#sort_by...first
                         6.448k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    142.715k (± 0.2%) i/s -    724.404k in   5.075901s
Enumerable#sort_by...first
                         63.845k (± 0.4%) i/s -    322.400k in   5.049828s

Comparison:
   Enumerable#min_by:   142714.8 i/s
Enumerable#sort_by...first:    63845.0 i/s - 2.24x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   299.071k i/100ms
            Hash#dup   237.469k i/100ms
Calculating -------------------------------------
              Hash[]      2.706M (± 1.6%) i/s -     13.757M in   5.084729s
            Hash#dup      2.185M (± 0.6%) i/s -     11.161M in   5.107642s

Comparison:
              Hash[]:  2706270.9 i/s
            Hash#dup:  2185243.0 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.130M i/100ms
  Hash#fetch, symbol   894.290k i/100ms
     Hash#[], string   905.361k i/100ms
  Hash#fetch, string   576.101k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     11.298M (± 0.2%) i/s -     56.495M in   5.000429s
  Hash#fetch, symbol      8.953M (± 0.1%) i/s -     45.609M in   5.094058s
     Hash#[], string      9.058M (± 0.4%) i/s -     46.173M in   5.097837s
  Hash#fetch, string      5.757M (± 0.2%) i/s -     28.805M in   5.003897s

Comparison:
     Hash#[], symbol: 11298011.2 i/s
     Hash#[], string:  9057597.2 i/s - 1.25x  (± 0.00) slower
  Hash#fetch, symbol:  8953346.3 i/s - 1.26x  (± 0.00) slower
  Hash#fetch, string:  5756553.9 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   711.365k i/100ms
             Hash#[]   754.473k i/100ms
          Hash#[] ||   709.213k i/100ms
          Hash#[] &&   324.789k i/100ms
          Hash#fetch   494.993k i/100ms
 Hash#fetch fallback   307.420k i/100ms
Calculating -------------------------------------
            Hash#dig      7.113M (± 0.5%) i/s -     35.568M in   5.000666s
             Hash#[]      7.623M (± 0.5%) i/s -     38.478M in   5.047909s
          Hash#[] ||      7.155M (± 0.6%) i/s -     36.170M in   5.055595s
          Hash#[] &&      3.267M (± 0.6%) i/s -     16.564M in   5.070567s
          Hash#fetch      4.931M (± 0.4%) i/s -     24.750M in   5.018782s
 Hash#fetch fallback      3.058M (± 1.2%) i/s -     15.371M in   5.026649s

Comparison:
             Hash#[]:  7622746.9 i/s
          Hash#[] ||:  7154661.2 i/s - 1.07x  (± 0.00) slower
            Hash#dig:  7112909.7 i/s - 1.07x  (± 0.00) slower
          Hash#fetch:  4931466.1 i/s - 1.55x  (± 0.00) slower
          Hash#[] &&:  3266856.3 i/s - 2.33x  (± 0.00) slower
 Hash#fetch fallback:  3058340.5 i/s - 2.49x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.103M i/100ms
  Hash#fetch + block     1.168M i/100ms
    Hash#fetch + arg   808.674k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     11.029M (± 0.2%) i/s -     56.247M in   5.099761s
  Hash#fetch + block     11.702M (± 0.4%) i/s -     59.586M in   5.091994s
    Hash#fetch + arg      8.079M (± 0.7%) i/s -     40.434M in   5.005228s

Comparison:
  Hash#fetch + block: 11702136.6 i/s
  Hash#fetch + const: 11029364.4 i/s - 1.06x  (± 0.00) slower
    Hash#fetch + arg:  8078673.4 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    20.873k i/100ms
         sort + to_h     9.450k i/100ms
Calculating -------------------------------------
      sort_by + to_h    207.851k (± 0.5%) i/s -      1.044M in   5.021269s
         sort + to_h     94.933k (± 0.4%) i/s -    481.950k in   5.076818s

Comparison:
      sort_by + to_h:   207851.4 i/s
         sort + to_h:    94933.0 i/s - 2.19x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   144.937k i/100ms
       Hash#each_key   158.522k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.458M (± 0.3%) i/s -      7.392M in   5.070917s
       Hash#each_key      1.582M (± 1.2%) i/s -      7.926M in   5.012057s

Comparison:
       Hash#each_key:  1581637.4 i/s
      Hash#keys.each:  1457691.8 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   882.000  i/100ms
           Hash#key?   775.631k i/100ms
Calculating -------------------------------------
  Hash#keys.include?      8.742k (± 4.0%) i/s -     44.100k in   5.054131s
           Hash#key?      7.757M (± 0.0%) i/s -     39.557M in   5.099234s

Comparison:
           Hash#key?:  7757477.3 i/s
  Hash#keys.include?:     8741.7 i/s - 887.41x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.099k i/100ms
            Hash#[]=     7.842k i/100ms
Calculating -------------------------------------
         Hash#merge!     30.983k (± 0.1%) i/s -    154.950k in   5.001128s
            Hash#[]=     78.805k (± 0.5%) i/s -    399.942k in   5.075247s

Comparison:
            Hash#[]=:    78804.7 i/s
         Hash#merge!:    30983.0 i/s - 2.54x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.886k i/100ms
      Hash#merge({})     2.988k i/100ms
 Hash#dup#merge!({})     2.124k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         38.850k (± 0.4%) i/s -    194.300k in   5.001331s
      Hash#merge({})     29.772k (± 0.3%) i/s -    149.400k in   5.018097s
 Hash#dup#merge!({})     21.264k (± 0.2%) i/s -    108.324k in   5.094296s

Comparison:
{}#merge!(Hash) do end:    38850.2 i/s
      Hash#merge({}):    29772.5 i/s - 1.30x  (± 0.00) slower
 Hash#dup#merge!({}):    21263.9 i/s - 1.83x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   287.794k i/100ms
          Hash#merge   250.158k i/100ms
Calculating -------------------------------------
        Hash#**other      2.872M (± 0.6%) i/s -     14.390M in   5.011026s
          Hash#merge      2.498M (± 0.4%) i/s -     12.508M in   5.007472s

Comparison:
        Hash#**other:  2871715.3 i/s
          Hash#merge:  2497895.5 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.219k i/100ms
         Hash#merge!     3.033k i/100ms
Calculating -------------------------------------
          Hash#merge     12.102k (± 1.2%) i/s -     60.950k in   5.036899s
         Hash#merge!     30.290k (± 0.2%) i/s -    151.650k in   5.006617s

Comparison:
         Hash#merge!:    30290.0 i/s
          Hash#merge:    12102.4 i/s - 2.50x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      327.413k i/100ms
Array#each             175.886k i/100ms
Array#each_w/_object   125.675k i/100ms
Hash#select-include     56.606k i/100ms
Calculating -------------------------------------
Hash#native-slice         3.288M (± 0.5%) i/s -     16.698M in   5.079172s
Array#each                1.753M (± 0.7%) i/s -      8.794M in   5.016529s
Array#each_w/_object      1.252M (± 1.5%) i/s -      6.284M in   5.021097s
Hash#select-include     569.058k (± 0.4%) i/s -      2.887M in   5.073217s

Comparison:
Hash#native-slice   :  3287632.4 i/s
Array#each          :  1753152.4 i/s - 1.88x  (± 0.00) slower
Array#each_w/_object:  1251766.4 i/s - 2.63x  (± 0.00) slower
Hash#select-include :   569057.8 i/s - 5.78x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.275k i/100ms
         Hash#value?     1.204k i/100ms
Calculating -------------------------------------
Hash#values.include?     12.628k (± 4.4%) i/s -     63.750k in   5.059887s
         Hash#value?     11.978k (± 0.5%) i/s -     60.200k in   5.025901s

Comparison:
Hash#values.include?:    12628.1 i/s
         Hash#value?:    11978.2 i/s - 1.05x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
                call   514.872k i/100ms
                send   395.343k i/100ms
      method_missing   284.347k i/100ms
Calculating -------------------------------------
                call      5.148M (± 0.1%) i/s -     25.744M in   5.000397s
                send      3.952M (± 0.1%) i/s -     19.767M in   5.001513s
      method_missing      2.848M (± 0.2%) i/s -     14.502M in   5.091198s

Comparison:
                call:  5148314.1 i/s
                send:  3952240.6 i/s - 1.30x  (± 0.00) slower
      method_missing:  2848393.7 i/s - 1.81x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
               Block     6.888k i/100ms
      Symbol#to_proc     7.275k i/100ms
Calculating -------------------------------------
               Block     68.677k (± 0.4%) i/s -    344.400k in   5.014859s
      Symbol#to_proc     73.233k (± 0.4%) i/s -    371.025k in   5.066423s

Comparison:
      Symbol#to_proc:    73233.4 i/s
               Block:    68677.0 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
          block.call   705.045k i/100ms
       block + yield   712.070k i/100ms
        unused block   969.977k i/100ms
               yield   901.089k i/100ms
Calculating -------------------------------------
          block.call      7.071M (± 0.0%) i/s -     35.957M in   5.085184s
       block + yield      7.136M (± 0.0%) i/s -     36.316M in   5.088954s
        unused block      9.690M (± 0.1%) i/s -     48.499M in   5.004855s
               yield      9.002M (± 0.0%) i/s -     45.054M in   5.004830s

Comparison:
        unused block:  9690369.1 i/s
               yield:  9002196.7 i/s - 1.08x  (± 0.00) slower
       block + yield:  7136157.4 i/s - 1.36x  (± 0.00) slower
          block.call:  7070994.3 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   249.113k i/100ms
      range#include?     9.532k i/100ms
       range#member?     9.571k i/100ms
       plain compare   380.551k i/100ms
Calculating -------------------------------------
        range#cover?      2.491M (± 0.1%) i/s -     12.456M in   5.000665s
      range#include?     94.325k (± 2.7%) i/s -    476.600k in   5.056677s
       range#member?     95.382k (± 0.2%) i/s -    478.550k in   5.017217s
       plain compare      3.801M (± 0.8%) i/s -     19.028M in   5.006455s

Comparison:
       plain compare:  3800839.9 i/s
        range#cover?:  2490804.2 i/s - 1.53x  (± 0.00) slower
       range#member?:    95382.0 i/s - 39.85x  (± 0.00) slower
      range#include?:    94324.8 i/s - 40.30x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
       String#match?   718.991k i/100ms
           String#=~   490.122k i/100ms
          Regexp#===   449.802k i/100ms
        String#match   349.948k i/100ms
Calculating -------------------------------------
       String#match?      7.196M (± 0.1%) i/s -     36.669M in   5.095782s
           String#=~      4.882M (± 1.7%) i/s -     24.506M in   5.021486s
          Regexp#===      4.494M (± 0.2%) i/s -     22.490M in   5.004325s
        String#match      3.498M (± 0.1%) i/s -     17.497M in   5.002336s

Comparison:
       String#match?:  7195870.3 i/s
           String#=~:  4881788.5 i/s - 1.47x  (± 0.00) slower
          Regexp#===:  4494153.3 i/s - 1.60x  (± 0.00) slower
        String#match:  3497853.5 i/s - 2.06x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   483.962k i/100ms
      String#casecmp   610.239k i/100ms
Calculating -------------------------------------
String#downcase + ==      4.831M (± 0.2%) i/s -     24.198M in   5.009296s
      String#casecmp      6.087M (± 0.2%) i/s -     30.512M in   5.012670s

Comparison:
      String#casecmp:  6086993.4 i/s
String#downcase + ==:  4830658.4 i/s - 1.26x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
            String#+   444.394k i/100ms
       String#concat   440.115k i/100ms
       String#append   497.523k i/100ms
         "foo" "bar"   939.471k i/100ms
  "#{'foo'}#{'bar'}"   971.747k i/100ms
Calculating -------------------------------------
            String#+      4.441M (± 0.3%) i/s -     22.220M in   5.003784s
       String#concat      4.390M (± 0.4%) i/s -     22.006M in   5.013017s
       String#append      4.970M (± 0.1%) i/s -     24.876M in   5.005707s
         "foo" "bar"      9.380M (± 0.1%) i/s -     46.974M in   5.008009s
  "#{'foo'}#{'bar'}"      9.699M (± 0.1%) i/s -     48.587M in   5.009606s

Comparison:
  "#{'foo'}#{'bar'}":  9698853.7 i/s
         "foo" "bar":  9379700.3 i/s - 1.03x  (± 0.00) slower
       String#append:  4969561.9 i/s - 1.95x  (± 0.00) slower
            String#+:  4440630.8 i/s - 2.18x  (± 0.00) slower
       String#concat:  4389785.1 i/s - 2.21x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
           String#+@   762.395k i/100ms
          String#dup   430.503k i/100ms
Calculating -------------------------------------
           String#+@      7.612M (± 0.4%) i/s -     38.120M in   5.007658s
          String#dup      4.305M (± 0.1%) i/s -     21.956M in   5.099526s

Comparison:
           String#+@:  7612433.2 i/s
          String#dup:  4305434.0 i/s - 1.77x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
           String#=~   133.104k i/100ms
       String#match?   343.421k i/100ms
    String#end_with?   477.608k i/100ms
Calculating -------------------------------------
           String#=~      1.337M (± 4.7%) i/s -      6.788M in   5.087550s
       String#match?      3.434M (± 0.1%) i/s -     17.171M in   5.000745s
    String#end_with?      4.759M (± 0.3%) i/s -     23.880M in   5.017820s

Comparison:
    String#end_with?:  4759171.5 i/s
       String#match?:  3433701.6 i/s - 1.39x  (± 0.00) slower
           String#=~:  1337273.4 i/s - 3.56x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    78.688k i/100ms
          String#sub   102.021k i/100ms
String#dup["string"]=
                       128.589k i/100ms
Calculating -------------------------------------
         String#gsub    791.284k (± 1.1%) i/s -      4.013M in   5.072195s
          String#sub      1.099M (± 1.0%) i/s -      5.509M in   5.011421s
String#dup["string"]=
                          1.331M (± 1.9%) i/s -      6.687M in   5.024859s

Comparison:
String#dup["string"]=:  1331204.2 i/s
          String#sub:  1099429.3 i/s - 1.21x  (± 0.00) slower
         String#gsub:   791284.3 i/s - 1.68x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    70.403k i/100ms
           String#tr   288.364k i/100ms
Calculating -------------------------------------
         String#gsub    729.832k (± 3.9%) i/s -      3.661M in   5.023799s
           String#tr      2.886M (± 0.2%) i/s -     14.707M in   5.094981s

Comparison:
           String#tr:  2886496.6 i/s
         String#gsub:   729831.7 i/s - 3.96x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   933.017k i/100ms
         With Freeze     1.383M i/100ms
Calculating -------------------------------------
      Without Freeze      9.298M (± 0.2%) i/s -     46.651M in   5.017536s
         With Freeze     13.689M (± 0.2%) i/s -     69.156M in   5.051832s

Comparison:
         With Freeze: 13689400.1 i/s
      Without Freeze:  9297599.5 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.604k i/100ms
      String#squeeze   119.961k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     26.186k (± 0.5%) i/s -    132.804k in   5.071683s
      String#squeeze      1.192M (± 0.1%) i/s -      5.998M in   5.032018s

Comparison:
      String#squeeze:  1191978.3 i/s
 String#gsub/regex+/:    26186.1 i/s - 45.52x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
           String#=~   216.334k i/100ms
       String#match?   563.195k i/100ms
  String#start_with?   679.165k i/100ms
Calculating -------------------------------------
           String#=~      2.163M (± 0.1%) i/s -     10.817M in   5.001207s
       String#match?      5.637M (± 0.1%) i/s -     28.723M in   5.095103s
  String#start_with?      6.804M (± 0.2%) i/s -     34.637M in   5.091059s

Comparison:
  String#start_with?:  6803598.9 i/s
       String#match?:  5637365.1 i/s - 1.21x  (± 0.00) slower
           String#=~:  2162822.3 i/s - 3.15x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   169.596k i/100ms
    String#[0, n] ==    68.639k i/100ms
   String#[RANGE] ==    60.899k i/100ms
   String#[0...n] ==    34.943k i/100ms
Calculating -------------------------------------
  String#start_with?      1.725M (± 0.9%) i/s -      8.649M in   5.013348s
    String#[0, n] ==    693.028k (± 0.2%) i/s -      3.501M in   5.051175s
   String#[RANGE] ==    609.124k (± 0.1%) i/s -      3.106M in   5.098886s
   String#[0...n] ==    351.529k (± 0.7%) i/s -      1.782M in   5.069826s

Comparison:
  String#start_with?:  1725408.1 i/s
    String#[0, n] ==:   693028.3 i/s - 2.49x  (± 0.00) slower
   String#[RANGE] ==:   609123.9 i/s - 2.83x  (± 0.00) slower
   String#[0...n] ==:   351529.0 i/s - 4.91x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   135.676k i/100ms
 String#sub!'string'    97.741k i/100ms
String#gsub!'string'    58.158k i/100ms
  String#[/regexp/]=   119.159k i/100ms
 String#sub!/regexp/    85.331k i/100ms
String#gsub!/regexp/    45.542k i/100ms
Calculating -------------------------------------
  String#['string']=      1.373M (± 1.2%) i/s -      6.919M in   5.039240s
 String#sub!'string'    947.134k (± 0.8%) i/s -      4.789M in   5.056930s
String#gsub!'string'    583.028k (± 0.4%) i/s -      2.966M in   5.087407s
  String#[/regexp/]=      1.210M (± 1.7%) i/s -      6.077M in   5.022213s
 String#sub!/regexp/    848.640k (± 0.3%) i/s -      4.267M in   5.027549s
String#gsub!/regexp/    456.556k (± 1.6%) i/s -      2.323M in   5.088713s

Comparison:
  String#['string']=:  1373328.4 i/s
  String#[/regexp/]=:  1210389.1 i/s - 1.13x  (± 0.00) slower
 String#sub!'string':   947133.6 i/s - 1.45x  (± 0.00) slower
 String#sub!/regexp/:   848640.4 i/s - 1.62x  (± 0.00) slower
String#gsub!'string':   583028.4 i/s - 2.36x  (± 0.00) slower
String#gsub!/regexp/:   456555.7 i/s - 3.01x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
          String#sub   115.260k i/100ms
        String#chomp   417.852k i/100ms
String#delete_suffix   451.013k i/100ms
Calculating -------------------------------------
          String#sub      1.092M (± 1.9%) i/s -      5.532M in   5.066573s
        String#chomp      4.171M (± 0.1%) i/s -     20.893M in   5.008443s
String#delete_suffix      4.510M (± 0.1%) i/s -     22.551M in   5.000492s

Comparison:
String#delete_suffix:  4509690.1 i/s
        String#chomp:  4171483.9 i/s - 1.08x  (± 0.00) slower
          String#sub:  1092365.1 i/s - 4.13x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   452.601k i/100ms
          String#sub   120.589k i/100ms
Calculating -------------------------------------
String#delete_prefix      4.537M (± 0.1%) i/s -     23.083M in   5.087610s
          String#sub      1.184M (± 1.7%) i/s -      6.029M in   5.092899s

Comparison:
String#delete_prefix:  4537041.8 i/s
          String#sub:  1184248.8 i/s - 3.83x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   438.682k i/100ms
    String#unpack[0]   344.392k i/100ms
Calculating -------------------------------------
      String#unpack1      4.367M (± 0.8%) i/s -     21.934M in   5.022508s
    String#unpack[0]      3.429M (± 1.4%) i/s -     17.220M in   5.022360s

Comparison:
      String#unpack1:  4367421.3 i/s
    String#unpack[0]:  3429292.2 i/s - 1.27x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    21.210k i/100ms
          Time.parse     7.520k i/100ms
Calculating -------------------------------------
        Time.iso8601    213.332k (± 0.4%) i/s -      1.082M in   5.070630s
          Time.parse     74.956k (± 0.2%) i/s -    376.000k in   5.016297s

Comparison:
        Time.iso8601:   213331.5 i/s
          Time.parse:    74955.9 i/s - 2.85x  (± 0.00) slower

