$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       591.327k i/100ms
Function with splat arguments
                         8.885k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          5.914M (± 0.1%) i/s -     30.158M in   5.099493s
Function with splat arguments
                         88.429k (± 7.2%) i/s -    444.250k in   5.057033s

Comparison:
Function with single Array argument:  5913860.9 i/s
Function with splat arguments:    88429.4 i/s - 66.88x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   977.064k i/100ms
Sequential Assignment
                       936.857k i/100ms
Calculating -------------------------------------
 Parallel Assignment      9.779M (± 0.1%) i/s -     49.830M in   5.095869s
Sequential Assignment
                          9.365M (± 0.0%) i/s -     46.843M in   5.001645s

Comparison:
 Parallel Assignment:  9778563.5 i/s
Sequential Assignment:  9365491.2 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   343.818k i/100ms
       attr_accessor   393.218k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.442M (± 0.1%) i/s -     17.535M in   5.094280s
       attr_accessor      3.953M (± 0.1%) i/s -     20.054M in   5.073660s

Comparison:
       attr_accessor:  3952595.3 i/s
   getter_and_setter:  3442041.2 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    70.100k i/100ms
         respond_to?   599.707k i/100ms
Calculating -------------------------------------
      begin...rescue    708.081k (± 0.4%) i/s -      3.575M in   5.049074s
         respond_to?      5.998M (± 0.2%) i/s -     30.585M in   5.099236s

Comparison:
         respond_to?:  5997984.4 i/s
      begin...rescue:   708081.1 i/s - 8.47x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
              normal   233.419k i/100ms
             &method    87.637k i/100ms
Calculating -------------------------------------
              normal      2.335M (± 0.1%) i/s -     11.904M in   5.097448s
             &method    871.830k (± 0.2%) i/s -      4.382M in   5.026063s

Comparison:
              normal:  2335359.9 i/s
             &method:   871830.4 i/s - 2.68x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       174.000  i/100ms
       define_method   216.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.869k (±20.4%) i/s -      8.178k in   5.001973s
       define_method      2.303k (±23.7%) i/s -      9.720k in   5.044144s

Comparison:
       define_method:     2303.2 i/s
module_eval with string:     1869.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
         Float#round   142.473k i/100ms
       Kernel#format   155.367k i/100ms
            String#%   135.370k i/100ms
Calculating -------------------------------------
         Float#round      1.423M (± 0.1%) i/s -      7.124M in   5.006032s
       Kernel#format      1.553M (± 0.1%) i/s -      7.768M in   5.003338s
            String#%      1.357M (± 0.2%) i/s -      6.904M in   5.087530s

Comparison:
       Kernel#format:  1552636.7 i/s
         Float#round:  1423014.6 i/s - 1.09x  (± 0.00) slower
            String#%:  1357022.3 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
                Hash   691.711k i/100ms
          OpenStruct   370.878k i/100ms
Calculating -------------------------------------
                Hash      6.915M (± 0.1%) i/s -     34.586M in   5.001318s
          OpenStruct      3.711M (± 0.1%) i/s -     18.915M in   5.096331s

Comparison:
                Hash:  6915291.2 i/s
          OpenStruct:  3711451.2 i/s - 1.86x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
                Hash   874.226k i/100ms
          OpenStruct     6.770k i/100ms
Calculating -------------------------------------
                Hash      8.782M (± 0.1%) i/s -     44.586M in   5.076899s
          OpenStruct     67.224k (± 3.8%) i/s -    338.500k in   5.042503s

Comparison:
                Hash:  8782048.5 i/s
          OpenStruct:    67223.8 i/s - 130.64x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   452.448k i/100ms
  ancestors.include?    84.038k i/100ms
Calculating -------------------------------------
  less than or equal      4.520M (± 0.1%) i/s -     22.622M in   5.005034s
  ancestors.include?    841.560k (± 0.1%) i/s -      4.286M in   5.092853s

Comparison:
  less than or equal:  4519931.1 i/s
  ancestors.include?:   841560.1 i/s - 5.37x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.574  (± 0.0%) i/s -      3.000  in   5.224695s
         Kernel loop      0.194  (± 0.0%) i/s -      1.000  in   5.141408s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 2.95x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.272M i/100ms
         Array#first     1.148M i/100ms
Calculating -------------------------------------
           Array#[0]     12.718M (± 0.0%) i/s -     63.601M in   5.001038s
         Array#first     11.503M (± 0.1%) i/s -     58.562M in   5.090906s

Comparison:
           Array#[0]: 12717632.0 i/s
         Array#first: 11503209.1 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.290M i/100ms
          Array#last     1.132M i/100ms
Calculating -------------------------------------
          Array#[-1]     12.957M (± 0.1%) i/s -     65.781M in   5.076938s
          Array#last     11.506M (± 0.1%) i/s -     57.741M in   5.018331s

Comparison:
          Array#[-1]: 12956883.2 i/s
          Array#last: 11506017.3 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    70.978k i/100ms
Calculating -------------------------------------
                find      0.209  (± 0.0%) i/s -      2.000  in   9.561010s
             bsearch    709.686k (± 0.0%) i/s -      3.549M in   5.000665s

Comparison:
             bsearch:   709685.7 i/s
                find:        0.2 i/s - 3392655.99x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    14.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    138.184  (± 2.9%) i/s -    700.000  in   5.068928s
        Array#insert      1.214  (± 0.0%) i/s -      6.000  in   5.016935s

Comparison:
       Array#unshift:      138.2 i/s
        Array#insert:        1.2 i/s - 113.86x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.783M i/100ms
          Array#size     1.829M i/100ms
         Array#count     1.306M i/100ms
Calculating -------------------------------------
        Array#length     17.849M (± 0.1%) i/s -     90.954M in   5.095835s
          Array#size     18.296M (± 0.1%) i/s -     93.291M in   5.099053s
         Array#count     13.065M (± 0.1%) i/s -     66.609M in   5.098338s

Comparison:
          Array#size: 18295868.7 i/s
        Array#length: 17848661.0 i/s - 1.03x  (± 0.00) slower
         Array#count: 13064937.8 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    31.894k i/100ms
        Array#sample   835.665k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    318.175k (± 0.3%) i/s -      1.595M in   5.012065s
        Array#sample      8.368M (± 0.0%) i/s -     42.619M in   5.093372s

Comparison:
        Array#sample:  8367525.1 i/s
 Array#shuffle.first:   318174.6 i/s - 26.30x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    50.369k i/100ms
          Date.parse    23.150k i/100ms
Calculating -------------------------------------
        Date.iso8601    503.439k (± 0.4%) i/s -      2.518M in   5.002583s
          Date.parse    232.350k (± 0.5%) i/s -      1.181M in   5.081449s

Comparison:
        Date.iso8601:   503439.2 i/s
          Date.parse:   232350.2 i/s - 2.17x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    13.396k i/100ms
           Array#map    19.800k i/100ms
Calculating -------------------------------------
   Array#each + push    133.993k (± 0.2%) i/s -    683.196k in   5.098769s
           Array#map    198.856k (± 0.2%) i/s -      1.010M in   5.078062s

Comparison:
           Array#map:   198856.0 i/s
   Array#each + push:   133993.0 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
            For loop    23.933k i/100ms
               #each    26.654k i/100ms
Calculating -------------------------------------
            For loop    239.271k (± 0.0%) i/s -      1.197M in   5.001223s
               #each    265.652k (± 0.2%) i/s -      1.333M in   5.016728s

Comparison:
               #each:   265652.0 i/s
            For loop:   239271.5 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
          While Loop    28.966k i/100ms
     each_with_index    14.635k i/100ms
Calculating -------------------------------------
          While Loop    290.108k (± 0.1%) i/s -      1.477M in   5.092127s
     each_with_index    146.024k (± 0.1%) i/s -    731.750k in   5.011164s

Comparison:
          While Loop:   290108.0 i/s
     each_with_index:   146024.2 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    53.772k i/100ms
      inject to_proc     1.564k i/100ms
        inject block     1.563k i/100ms
Calculating -------------------------------------
       inject symbol    537.724k (± 0.0%) i/s -      2.689M in   4.999966s
      inject to_proc     15.626k (± 0.1%) i/s -     78.200k in   5.004614s
        inject block     15.620k (± 0.3%) i/s -     78.150k in   5.003151s

Comparison:
       inject symbol:   537723.8 i/s
      inject to_proc:    15625.6 i/s - 34.41x  (± 0.00) slower
        inject block:    15620.3 i/s - 34.42x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     5.138k i/100ms
   Array#map.flatten     2.831k i/100ms
      Array#flat_map     6.452k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     51.557k (± 0.1%) i/s -    262.038k in   5.082457s
   Array#map.flatten     28.154k (± 0.5%) i/s -    141.550k in   5.027876s
      Array#flat_map     64.356k (± 0.1%) i/s -    322.600k in   5.012757s

Comparison:
      Array#flat_map:    64355.9 i/s
Array#map.flatten(1):    51557.4 i/s - 1.25x  (± 0.00) slower
   Array#map.flatten:    28153.7 i/s - 2.29x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    25.574k i/100ms
  Array#reverse_each    26.691k i/100ms
Calculating -------------------------------------
  Array#reverse.each    255.440k (± 0.2%) i/s -      1.279M in   5.005891s
  Array#reverse_each    266.867k (± 0.1%) i/s -      1.335M in   5.000814s

Comparison:
  Array#reverse_each:   266866.9 i/s
  Array#reverse.each:   255439.7 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        15.478k i/100ms
   Enumerable#detect    62.102k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        154.843k (± 0.1%) i/s -      3.111M in  20.091863s
   Enumerable#detect    621.619k (± 0.2%) i/s -     12.483M in  20.080756s

Comparison:
   Enumerable#detect:   621618.9 i/s
Enumerable#select.first:   154843.0 i/s - 4.01x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       181.385k i/100ms
Enumerable#select.last
                        12.951k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.807M (± 0.1%) i/s -      9.069M in   5.019833s
Enumerable#select.last
                        129.563k (± 0.2%) i/s -    660.501k in   5.097931s

Comparison:
Enumerable#reverse.detect:  1806687.4 i/s
Enumerable#select.last:   129562.9 i/s - 13.94x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.245k i/100ms
  Enumerable#sort_by     3.189k i/100ms
     Enumerable#sort     1.799k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         32.398k (± 0.2%) i/s -    162.250k in   5.007991s
  Enumerable#sort_by     31.974k (± 0.2%) i/s -    162.639k in   5.086653s
     Enumerable#sort     18.001k (± 0.2%) i/s -     91.749k in   5.096920s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    32398.3 i/s
  Enumerable#sort_by:    31973.9 i/s - 1.01x  (± 0.00) slower
     Enumerable#sort:    18001.0 i/s - 1.80x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    13.606k i/100ms
Enumerable#sort_by...first
                         5.967k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    135.834k (± 0.5%) i/s -    680.300k in   5.008444s
Enumerable#sort_by...first
                         59.585k (± 0.6%) i/s -    298.350k in   5.007350s

Comparison:
   Enumerable#min_by:   135834.5 i/s
Enumerable#sort_by...first:    59584.8 i/s - 2.28x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   271.172k i/100ms
            Hash#dup   210.480k i/100ms
Calculating -------------------------------------
              Hash[]      2.638M (± 3.1%) i/s -     13.287M in   5.042174s
            Hash#dup      1.897M (± 1.5%) i/s -      9.682M in   5.105825s

Comparison:
              Hash[]:  2637681.7 i/s
            Hash#dup:  1896703.7 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.228M i/100ms
  Hash#fetch, symbol   931.319k i/100ms
     Hash#[], string     1.005M i/100ms
  Hash#fetch, string   574.231k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     12.277M (± 0.0%) i/s -     61.388M in   5.000245s
  Hash#fetch, symbol      9.310M (± 0.1%) i/s -     46.566M in   5.001672s
     Hash#[], string     10.051M (± 0.1%) i/s -     50.257M in   5.000387s
  Hash#fetch, string      5.806M (± 0.2%) i/s -     29.286M in   5.043973s

Comparison:
     Hash#[], symbol: 12276959.1 i/s
     Hash#[], string: 10050685.9 i/s - 1.22x  (± 0.00) slower
  Hash#fetch, symbol:  9310081.3 i/s - 1.32x  (± 0.00) slower
  Hash#fetch, string:  5806108.8 i/s - 2.11x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   598.608k i/100ms
             Hash#[]   772.784k i/100ms
          Hash#[] ||   707.202k i/100ms
          Hash#[] &&   316.209k i/100ms
          Hash#fetch   481.237k i/100ms
 Hash#fetch fallback   278.566k i/100ms
Calculating -------------------------------------
            Hash#dig      6.019M (± 0.4%) i/s -     30.529M in   5.072214s
             Hash#[]      7.732M (± 0.2%) i/s -     39.412M in   5.097409s
          Hash#[] ||      7.075M (± 0.1%) i/s -     36.067M in   5.097904s
          Hash#[] &&      3.165M (± 0.1%) i/s -     16.127M in   5.094683s
          Hash#fetch      4.806M (± 0.3%) i/s -     24.062M in   5.006812s
 Hash#fetch fallback      2.783M (± 0.1%) i/s -     13.928M in   5.005224s

Comparison:
             Hash#[]:  7731794.5 i/s
          Hash#[] ||:  7074939.3 i/s - 1.09x  (± 0.00) slower
            Hash#dig:  6018947.6 i/s - 1.28x  (± 0.00) slower
          Hash#fetch:  4805863.6 i/s - 1.61x  (± 0.00) slower
          Hash#[] &&:  3165396.1 i/s - 2.44x  (± 0.00) slower
 Hash#fetch fallback:  2782754.7 i/s - 2.78x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.172M i/100ms
  Hash#fetch + block     1.207M i/100ms
    Hash#fetch + arg   822.954k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     11.711M (± 0.1%) i/s -     58.583M in   5.002236s
  Hash#fetch + block     12.072M (± 0.2%) i/s -     61.567M in   5.099814s
    Hash#fetch + arg      8.224M (± 0.1%) i/s -     41.148M in   5.003305s

Comparison:
  Hash#fetch + block: 12072450.1 i/s
  Hash#fetch + const: 11711284.8 i/s - 1.03x  (± 0.00) slower
    Hash#fetch + arg:  8224108.3 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    19.663k i/100ms
         sort + to_h     9.227k i/100ms
Calculating -------------------------------------
      sort_by + to_h    197.029k (± 0.4%) i/s -      1.003M in   5.089775s
         sort + to_h     92.308k (± 0.2%) i/s -    470.577k in   5.097903s

Comparison:
      sort_by + to_h:   197028.8 i/s
         sort + to_h:    92308.2 i/s - 2.13x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   136.205k i/100ms
       Hash#each_key   144.657k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.359M (± 0.2%) i/s -      6.810M in   5.010052s
       Hash#each_key      1.442M (± 0.0%) i/s -      7.233M in   5.015197s

Comparison:
       Hash#each_key:  1442186.9 i/s
      Hash#keys.each:  1359324.8 i/s - 1.06x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.662k i/100ms
           Hash#key?   711.934k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     16.471k (± 5.4%) i/s -     83.100k in   5.065114s
           Hash#key?      7.119M (± 0.0%) i/s -     35.597M in   5.000287s

Comparison:
           Hash#key?:  7118933.2 i/s
  Hash#keys.include?:    16470.7 i/s - 432.22x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     2.987k i/100ms
            Hash#[]=     7.082k i/100ms
Calculating -------------------------------------
         Hash#merge!     29.823k (± 0.2%) i/s -    149.350k in   5.007815s
            Hash#[]=     70.776k (± 0.3%) i/s -    354.100k in   5.003195s

Comparison:
            Hash#[]=:    70775.5 i/s
         Hash#merge!:    29823.5 i/s - 2.37x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.797k i/100ms
      Hash#merge({})     2.968k i/100ms
 Hash#dup#merge!({})     2.191k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         37.873k (± 1.3%) i/s -    189.850k in   5.013621s
      Hash#merge({})     29.547k (± 0.2%) i/s -    148.400k in   5.022491s
 Hash#dup#merge!({})     21.814k (± 0.2%) i/s -    109.550k in   5.021944s

Comparison:
{}#merge!(Hash) do end:    37873.5 i/s
      Hash#merge({}):    29547.2 i/s - 1.28x  (± 0.00) slower
 Hash#dup#merge!({}):    21814.3 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   279.437k i/100ms
          Hash#merge   250.328k i/100ms
Calculating -------------------------------------
        Hash#**other      2.793M (± 0.6%) i/s -     13.972M in   5.002483s
          Hash#merge      2.496M (± 0.2%) i/s -     12.516M in   5.015481s

Comparison:
        Hash#**other:  2793073.6 i/s
          Hash#merge:  2495560.4 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   982.000  i/100ms
         Hash#merge!     2.595k i/100ms
Calculating -------------------------------------
          Hash#merge     10.928k (± 1.8%) i/s -     54.992k in   5.033849s
         Hash#merge!     29.014k (± 0.3%) i/s -    145.320k in   5.008679s

Comparison:
         Hash#merge!:    29013.9 i/s
          Hash#merge:    10928.1 i/s - 2.65x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      310.812k i/100ms
Array#each             164.365k i/100ms
Array#each_w/_object   121.966k i/100ms
Hash#select-include     49.442k i/100ms
Calculating -------------------------------------
Hash#native-slice         3.109M (± 0.1%) i/s -     15.851M in   5.099165s
Array#each                1.641M (± 0.2%) i/s -      8.218M in   5.007213s
Array#each_w/_object      1.230M (± 0.2%) i/s -      6.220M in   5.055531s
Hash#select-include     486.951k (± 2.0%) i/s -      2.472M in   5.078731s

Comparison:
Hash#native-slice   :  3108630.8 i/s
Array#each          :  1641287.6 i/s - 1.89x  (± 0.00) slower
Array#each_w/_object:  1230394.3 i/s - 2.53x  (± 0.00) slower
Hash#select-include :   486951.3 i/s - 6.38x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   734.000  i/100ms
         Hash#value?   601.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      7.237k (± 4.4%) i/s -     36.700k in   5.082927s
         Hash#value?      6.015k (± 0.1%) i/s -     30.651k in   5.096137s

Comparison:
Hash#values.include?:     7237.3 i/s
         Hash#value?:     6014.6 i/s - 1.20x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
                call   489.444k i/100ms
                send   378.881k i/100ms
      method_missing   275.646k i/100ms
Calculating -------------------------------------
                call      4.893M (± 0.1%) i/s -     24.472M in   5.001175s
                send      3.800M (± 0.1%) i/s -     19.323M in   5.085162s
      method_missing      2.750M (± 1.2%) i/s -     13.782M in   5.013430s

Comparison:
                call:  4893292.5 i/s
                send:  3799867.6 i/s - 1.29x  (± 0.00) slower
      method_missing:  2749520.3 i/s - 1.78x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
               Block     5.588k i/100ms
      Symbol#to_proc     6.158k i/100ms
Calculating -------------------------------------
               Block     55.872k (± 0.1%) i/s -    279.400k in   5.000685s
      Symbol#to_proc     61.470k (± 0.1%) i/s -    307.900k in   5.008955s

Comparison:
      Symbol#to_proc:    61470.0 i/s
               Block:    55872.4 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
          block.call   761.213k i/100ms
       block + yield   815.740k i/100ms
        unused block     1.083M i/100ms
               yield     1.023M i/100ms
Calculating -------------------------------------
          block.call      7.707M (± 0.1%) i/s -     38.822M in   5.037067s
       block + yield      8.181M (± 0.1%) i/s -     41.603M in   5.085461s
        unused block     10.824M (± 0.3%) i/s -     54.170M in   5.004556s
               yield     10.236M (± 0.1%) i/s -     52.188M in   5.098294s

Comparison:
        unused block: 10824293.2 i/s
               yield: 10236293.4 i/s - 1.06x  (± 0.00) slower
       block + yield:  8180725.1 i/s - 1.32x  (± 0.00) slower
          block.call:  7707241.8 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   241.770k i/100ms
      range#include?     9.655k i/100ms
       range#member?     9.686k i/100ms
       plain compare   344.026k i/100ms
Calculating -------------------------------------
        range#cover?      2.418M (± 0.1%) i/s -     12.330M in   5.098730s
      range#include?     96.629k (± 1.0%) i/s -    492.405k in   5.096405s
       range#member?     96.714k (± 0.7%) i/s -    484.300k in   5.007767s
       plain compare      3.454M (± 0.1%) i/s -     17.545M in   5.079772s

Comparison:
       plain compare:  3453966.4 i/s
        range#cover?:  2418303.1 i/s - 1.43x  (± 0.00) slower
       range#member?:    96714.0 i/s - 35.71x  (± 0.00) slower
      range#include?:    96628.6 i/s - 35.74x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
       String#match?   745.023k i/100ms
           String#=~   443.588k i/100ms
          Regexp#===   424.829k i/100ms
        String#match   350.452k i/100ms
Calculating -------------------------------------
       String#match?      7.451M (± 0.1%) i/s -     37.996M in   5.099257s
           String#=~      4.419M (± 0.2%) i/s -     22.179M in   5.019529s
          Regexp#===      4.269M (± 0.1%) i/s -     21.666M in   5.075477s
        String#match      3.500M (± 0.1%) i/s -     17.523M in   5.007033s

Comparison:
       String#match?:  7451318.7 i/s
           String#=~:  4418632.0 i/s - 1.69x  (± 0.00) slower
          Regexp#===:  4268818.8 i/s - 1.75x  (± 0.00) slower
        String#match:  3499602.7 i/s - 2.13x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   443.731k i/100ms
      String#casecmp   606.175k i/100ms
Calculating -------------------------------------
String#downcase + ==      4.439M (± 0.6%) i/s -     22.630M in   5.098016s
      String#casecmp      6.057M (± 0.1%) i/s -     30.309M in   5.004314s

Comparison:
      String#casecmp:  6056529.2 i/s
String#downcase + ==:  4439199.5 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
            String#+   419.854k i/100ms
       String#concat   446.876k i/100ms
       String#append   480.648k i/100ms
         "foo" "bar"   942.853k i/100ms
  "#{'foo'}#{'bar'}"   950.613k i/100ms
Calculating -------------------------------------
            String#+      4.200M (± 0.1%) i/s -     21.413M in   5.098161s
       String#concat      4.466M (± 0.1%) i/s -     22.344M in   5.002713s
       String#append      4.797M (± 0.1%) i/s -     24.032M in   5.009575s
         "foo" "bar"      9.415M (± 0.1%) i/s -     47.143M in   5.007055s
  "#{'foo'}#{'bar'}"      9.490M (± 0.1%) i/s -     47.531M in   5.008713s

Comparison:
  "#{'foo'}#{'bar'}":  9489598.9 i/s
         "foo" "bar":  9415251.3 i/s - 1.01x  (± 0.00) slower
       String#append:  4797298.8 i/s - 1.98x  (± 0.00) slower
       String#concat:  4466338.6 i/s - 2.12x  (± 0.00) slower
            String#+:  4200056.8 i/s - 2.26x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
           String#+@   786.720k i/100ms
          String#dup   408.961k i/100ms
Calculating -------------------------------------
           String#+@      7.905M (± 0.1%) i/s -     40.123M in   5.075883s
          String#dup      4.087M (± 0.1%) i/s -     20.448M in   5.002716s

Comparison:
           String#+@:  7904584.1 i/s
          String#dup:  4087397.4 i/s - 1.93x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
           String#=~   137.185k i/100ms
       String#match?   329.501k i/100ms
    String#end_with?   448.282k i/100ms
Calculating -------------------------------------
           String#=~      1.407M (± 1.6%) i/s -      7.134M in   5.069720s
       String#match?      3.302M (± 0.1%) i/s -     16.805M in   5.088469s
    String#end_with?      4.249M (± 3.8%) i/s -     21.518M in   5.071527s

Comparison:
    String#end_with?:  4248658.7 i/s
       String#match?:  3302478.0 i/s - 1.29x  (± 0.00) slower
           String#=~:  1407443.4 i/s - 3.02x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    82.723k i/100ms
          String#sub   102.751k i/100ms
String#dup["string"]=
                       136.395k i/100ms
Calculating -------------------------------------
         String#gsub    836.974k (± 0.4%) i/s -      4.219M in   5.040710s
          String#sub      1.041M (± 1.6%) i/s -      5.240M in   5.033799s
String#dup["string"]=
                          1.354M (± 1.1%) i/s -      6.820M in   5.036556s

Comparison:
String#dup["string"]=:  1354206.2 i/s
          String#sub:  1041335.3 i/s - 1.30x  (± 0.00) slower
         String#gsub:   836974.3 i/s - 1.62x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    74.770k i/100ms
           String#tr   271.998k i/100ms
Calculating -------------------------------------
         String#gsub    746.777k (± 0.4%) i/s -      3.738M in   5.006247s
           String#tr      2.717M (± 0.2%) i/s -     13.600M in   5.005925s

Comparison:
           String#tr:  2716767.6 i/s
         String#gsub:   746776.7 i/s - 3.64x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   936.631k i/100ms
         With Freeze     1.500M i/100ms
Calculating -------------------------------------
      Without Freeze      9.352M (± 0.2%) i/s -     46.832M in   5.007753s
         With Freeze     14.991M (± 0.1%) i/s -     75.001M in   5.002993s

Comparison:
         With Freeze: 14991314.0 i/s
      Without Freeze:  9351833.2 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.591k i/100ms
      String#squeeze   129.581k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     25.696k (± 0.8%) i/s -    129.550k in   5.041832s
      String#squeeze      1.285M (± 1.0%) i/s -      6.479M in   5.044443s

Comparison:
      String#squeeze:  1284525.5 i/s
 String#gsub/regex+/:    25696.5 i/s - 49.99x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
           String#=~   206.120k i/100ms
       String#match?   583.385k i/100ms
  String#start_with?   662.026k i/100ms
Calculating -------------------------------------
           String#=~      2.061M (± 0.7%) i/s -     10.306M in   5.000858s
       String#match?      5.837M (± 0.0%) i/s -     29.753M in   5.096883s
  String#start_with?      6.617M (± 0.1%) i/s -     33.101M in   5.002304s

Comparison:
  String#start_with?:  6617214.5 i/s
       String#match?:  5837418.5 i/s - 1.13x  (± 0.00) slower
           String#=~:  2060947.6 i/s - 3.21x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   164.570k i/100ms
    String#[0, n] ==    60.143k i/100ms
   String#[RANGE] ==    56.004k i/100ms
   String#[0...n] ==    35.141k i/100ms
Calculating -------------------------------------
  String#start_with?      1.646M (± 0.2%) i/s -      8.393M in   5.099937s
    String#[0, n] ==    600.490k (± 0.2%) i/s -      3.007M in   5.007843s
   String#[RANGE] ==    560.386k (± 0.2%) i/s -      2.856M in   5.096883s
   String#[0...n] ==    350.567k (± 0.2%) i/s -      1.757M in   5.012028s

Comparison:
  String#start_with?:  1645727.5 i/s
    String#[0, n] ==:   600489.9 i/s - 2.74x  (± 0.00) slower
   String#[RANGE] ==:   560385.8 i/s - 2.94x  (± 0.00) slower
   String#[0...n] ==:   350567.5 i/s - 4.69x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   139.238k i/100ms
 String#sub!'string'    99.829k i/100ms
String#gsub!'string'    62.041k i/100ms
  String#[/regexp/]=   123.780k i/100ms
 String#sub!/regexp/    89.490k i/100ms
String#gsub!/regexp/    47.358k i/100ms
Calculating -------------------------------------
  String#['string']=      1.398M (± 0.5%) i/s -      7.101M in   5.080747s
 String#sub!'string'      1.008M (± 0.5%) i/s -      5.091M in   5.052488s
String#gsub!'string'    624.249k (± 0.2%) i/s -      3.164M in   5.068668s
  String#[/regexp/]=      1.245M (± 0.7%) i/s -      6.313M in   5.069971s
 String#sub!/regexp/    921.794k (± 0.3%) i/s -      4.653M in   5.048321s
String#gsub!/regexp/    473.241k (± 0.4%) i/s -      2.368M in   5.003667s

Comparison:
  String#['string']=:  1397689.7 i/s
  String#[/regexp/]=:  1245194.3 i/s - 1.12x  (± 0.00) slower
 String#sub!'string':  1007706.9 i/s - 1.39x  (± 0.00) slower
 String#sub!/regexp/:   921794.1 i/s - 1.52x  (± 0.00) slower
String#gsub!'string':   624248.8 i/s - 2.24x  (± 0.00) slower
String#gsub!/regexp/:   473241.4 i/s - 2.95x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
          String#sub   110.414k i/100ms
        String#chomp   384.575k i/100ms
String#delete_suffix   436.527k i/100ms
Calculating -------------------------------------
          String#sub      1.103M (± 0.4%) i/s -      5.521M in   5.004275s
        String#chomp      3.751M (± 2.6%) i/s -     18.844M in   5.027366s
String#delete_suffix      4.364M (± 0.1%) i/s -     21.826M in   5.001463s

Comparison:
String#delete_suffix:  4363996.0 i/s
        String#chomp:  3750650.3 i/s - 1.16x  (± 0.00) slower
          String#sub:  1103216.1 i/s - 3.96x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   436.282k i/100ms
          String#sub   112.365k i/100ms
Calculating -------------------------------------
String#delete_prefix      4.369M (± 0.1%) i/s -     22.250M in   5.092941s
          String#sub      1.125M (± 0.4%) i/s -      5.731M in   5.093377s

Comparison:
String#delete_prefix:  4368869.2 i/s
          String#sub:  1125130.1 i/s - 3.88x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   442.327k i/100ms
    String#unpack[0]   331.781k i/100ms
Calculating -------------------------------------
      String#unpack1      4.418M (± 0.1%) i/s -     22.116M in   5.005539s
    String#unpack[0]      3.314M (± 0.1%) i/s -     16.589M in   5.005456s

Comparison:
      String#unpack1:  4418378.3 i/s
    String#unpack[0]:  3314195.2 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    19.815k i/100ms
          Time.parse     6.879k i/100ms
Calculating -------------------------------------
        Time.iso8601    199.076k (± 0.5%) i/s -      1.011M in   5.076413s
          Time.parse     69.274k (± 0.3%) i/s -    350.829k in   5.064376s

Comparison:
        Time.iso8601:   199075.7 i/s
          Time.parse:    69274.5 i/s - 2.87x  (± 0.00) slower

