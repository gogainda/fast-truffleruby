$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       552.173k i/100ms
Function with splat arguments
                        22.029k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          5.531M (± 0.4%) i/s -     28.161M in   5.091528s
Function with splat arguments
                        218.950k (± 5.6%) i/s -      1.101M in   5.054824s

Comparison:
Function with single Array argument:  5530996.2 i/s
Function with splat arguments:   218950.4 i/s - 25.26x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   915.600k i/100ms
Sequential Assignment
                       929.722k i/100ms
Calculating -------------------------------------
 Parallel Assignment      9.235M (± 0.1%) i/s -     46.696M in   5.056182s
Sequential Assignment
                          9.146M (± 0.0%) i/s -     46.486M in   5.082855s

Comparison:
 Parallel Assignment:  9235356.8 i/s
Sequential Assignment:  9145668.5 i/s - 1.01x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   349.841k i/100ms
       attr_accessor   398.626k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.468M (± 0.2%) i/s -     17.492M in   5.043688s
       attr_accessor      3.971M (± 0.2%) i/s -     19.931M in   5.019872s

Comparison:
       attr_accessor:  3970501.2 i/s
   getter_and_setter:  3468128.3 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    67.573k i/100ms
         respond_to?   552.763k i/100ms
Calculating -------------------------------------
      begin...rescue    675.763k (± 1.3%) i/s -      3.379M in   5.000601s
         respond_to?      5.540M (± 0.1%) i/s -     28.191M in   5.088420s

Comparison:
         respond_to?:  5540214.0 i/s
      begin...rescue:   675762.8 i/s - 8.20x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
              normal   250.762k i/100ms
             &method    86.448k i/100ms
Calculating -------------------------------------
              normal      2.519M (± 0.9%) i/s -     12.789M in   5.078216s
             &method    864.536k (± 0.1%) i/s -      4.409M in   5.099678s

Comparison:
              normal:  2518588.2 i/s
             &method:   864535.9 i/s - 2.91x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       199.000  i/100ms
       define_method   250.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.988k (±20.7%) i/s -      8.955k in   5.043812s
       define_method      2.679k (±16.4%) i/s -     12.500k in   5.017030s

Comparison:
       define_method:     2678.5 i/s
module_eval with string:     1988.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
         Float#round   140.579k i/100ms
       Kernel#format   149.788k i/100ms
            String#%   132.165k i/100ms
Calculating -------------------------------------
         Float#round      1.402M (± 0.1%) i/s -      7.029M in   5.014610s
       Kernel#format      1.505M (± 0.1%) i/s -      7.639M in   5.074802s
            String#%      1.329M (± 0.2%) i/s -      6.740M in   5.070638s

Comparison:
       Kernel#format:  1505318.2 i/s
         Float#round:  1401694.5 i/s - 1.07x  (± 0.00) slower
            String#%:  1329306.7 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
                Hash   697.958k i/100ms
          OpenStruct   349.726k i/100ms
Calculating -------------------------------------
                Hash      6.974M (± 0.2%) i/s -     34.898M in   5.003789s
          OpenStruct      3.498M (± 0.4%) i/s -     17.836M in   5.099194s

Comparison:
                Hash:  6974319.4 i/s
          OpenStruct:  3497884.0 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
                Hash   826.906k i/100ms
          OpenStruct     7.247k i/100ms
Calculating -------------------------------------
                Hash      8.318M (± 0.1%) i/s -     42.172M in   5.070034s
          OpenStruct     72.261k (± 2.7%) i/s -    362.350k in   5.018201s

Comparison:
                Hash:  8317942.7 i/s
          OpenStruct:    72261.1 i/s - 115.11x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   457.075k i/100ms
  ancestors.include?    90.962k i/100ms
Calculating -------------------------------------
  less than or equal      4.502M (± 2.5%) i/s -     22.854M in   5.080758s
  ancestors.include?    905.385k (± 1.1%) i/s -      4.548M in   5.023957s

Comparison:
  less than or equal:  4501641.4 i/s
  ancestors.include?:   905385.4 i/s - 4.97x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.439  (± 0.0%) i/s -      3.000  in   6.834996s
         Kernel loop      0.185  (± 0.0%) i/s -      1.000  in   5.405552s

Comparison:
          While Loop:        0.4 i/s
         Kernel loop:        0.2 i/s - 2.37x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.277M i/100ms
         Array#first     1.007M i/100ms
Calculating -------------------------------------
           Array#[0]     12.713M (± 0.1%) i/s -     63.873M in   5.024416s
         Array#first     10.176M (± 0.1%) i/s -     51.366M in   5.047864s

Comparison:
           Array#[0]: 12712587.6 i/s
         Array#first: 10175746.4 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.231M i/100ms
          Array#last     1.014M i/100ms
Calculating -------------------------------------
          Array#[-1]     12.364M (± 0.2%) i/s -     62.768M in   5.076812s
          Array#last     10.150M (± 0.1%) i/s -     51.705M in   5.094087s

Comparison:
          Array#[-1]: 12363675.3 i/s
          Array#last: 10149931.4 i/s - 1.22x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    73.439k i/100ms
Calculating -------------------------------------
                find      0.219  (± 0.0%) i/s -      2.000  in   9.121088s
             bsearch    733.822k (± 0.2%) i/s -      3.672M in   5.003896s

Comparison:
             bsearch:   733822.3 i/s
                find:        0.2 i/s - 3346628.70x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    14.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    144.375  (± 2.1%) i/s -    728.000  in   5.044885s
        Array#insert      1.129  (± 0.0%) i/s -      6.000  in   5.318204s

Comparison:
       Array#unshift:      144.4 i/s
        Array#insert:        1.1 i/s - 127.88x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.744M i/100ms
          Array#size     1.748M i/100ms
         Array#count     1.317M i/100ms
Calculating -------------------------------------
        Array#length     17.438M (± 0.2%) i/s -     87.202M in   5.000661s
          Array#size     17.507M (± 0.3%) i/s -     89.145M in   5.092103s
         Array#count     13.197M (± 0.3%) i/s -     67.144M in   5.087792s

Comparison:
          Array#size: 17506645.4 i/s
        Array#length: 17438145.8 i/s - same-ish: difference falls within error
         Array#count: 13197269.6 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    32.598k i/100ms
        Array#sample   774.395k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    325.978k (± 0.2%) i/s -      1.630M in   5.000059s
        Array#sample      7.742M (± 0.1%) i/s -     38.720M in   5.001235s

Comparison:
        Array#sample:  7742039.4 i/s
 Array#shuffle.first:   325978.2 i/s - 23.75x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    47.877k i/100ms
          Date.parse    23.660k i/100ms
Calculating -------------------------------------
        Date.iso8601    477.264k (± 0.4%) i/s -      2.394M in   5.015856s
          Date.parse    237.280k (± 0.3%) i/s -      1.207M in   5.085437s

Comparison:
        Date.iso8601:   477263.6 i/s
          Date.parse:   237279.6 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    14.799k i/100ms
           Array#map    21.007k i/100ms
Calculating -------------------------------------
   Array#each + push    148.626k (± 0.3%) i/s -    754.749k in   5.078228s
           Array#map    211.767k (± 0.3%) i/s -      1.071M in   5.059176s

Comparison:
           Array#map:   211766.9 i/s
   Array#each + push:   148625.8 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
            For loop    23.709k i/100ms
               #each    25.749k i/100ms
Calculating -------------------------------------
            For loop    237.064k (± 0.3%) i/s -      1.185M in   5.000587s
               #each    263.178k (± 0.1%) i/s -      1.339M in   5.087630s

Comparison:
               #each:   263177.5 i/s
            For loop:   237063.7 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
          While Loop    23.494k i/100ms
     each_with_index    14.879k i/100ms
Calculating -------------------------------------
          While Loop    234.794k (± 0.1%) i/s -      1.175M in   5.003122s
     each_with_index    148.799k (± 0.1%) i/s -    758.829k in   5.099692s

Comparison:
          While Loop:   234793.5 i/s
     each_with_index:   148799.1 i/s - 1.58x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    57.407k i/100ms
      inject to_proc     1.683k i/100ms
        inject block     1.630k i/100ms
Calculating -------------------------------------
       inject symbol    571.901k (± 1.3%) i/s -      2.870M in   5.019813s
      inject to_proc     16.846k (± 0.1%) i/s -     85.833k in   5.095091s
        inject block     16.315k (± 0.1%) i/s -     83.130k in   5.095446s

Comparison:
       inject symbol:   571901.3 i/s
      inject to_proc:    16846.2 i/s - 33.95x  (± 0.00) slower
        inject block:    16314.6 i/s - 35.05x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     5.622k i/100ms
   Array#map.flatten     2.970k i/100ms
      Array#flat_map     7.124k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     56.143k (± 0.3%) i/s -    281.100k in   5.006951s
   Array#map.flatten     29.784k (± 0.6%) i/s -    151.470k in   5.085748s
      Array#flat_map     71.585k (± 0.5%) i/s -    363.324k in   5.075561s

Comparison:
      Array#flat_map:    71584.6 i/s
Array#map.flatten(1):    56142.6 i/s - 1.28x  (± 0.00) slower
   Array#map.flatten:    29784.3 i/s - 2.40x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    25.466k i/100ms
  Array#reverse_each    26.491k i/100ms
Calculating -------------------------------------
  Array#reverse.each    254.737k (± 0.2%) i/s -      1.299M in   5.098469s
  Array#reverse_each    264.888k (± 0.1%) i/s -      1.325M in   5.000418s

Comparison:
  Array#reverse_each:   264888.1 i/s
  Array#reverse.each:   254737.4 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        15.457k i/100ms
   Enumerable#detect    62.266k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        153.902k (± 0.5%) i/s -      3.091M in  20.087456s
   Enumerable#detect    622.603k (± 0.1%) i/s -     12.453M in  20.001842s

Comparison:
   Enumerable#detect:   622603.0 i/s
Enumerable#select.first:   153901.6 i/s - 4.05x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       184.560k i/100ms
Enumerable#select.last
                        15.142k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.827M (± 0.2%) i/s -      9.228M in   5.051369s
Enumerable#select.last
                        151.762k (± 0.5%) i/s -    772.242k in   5.088661s

Comparison:
Enumerable#reverse.detect:  1826836.8 i/s
Enumerable#select.last:   151761.9 i/s - 12.04x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.568k i/100ms
  Enumerable#sort_by     3.463k i/100ms
     Enumerable#sort     1.924k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         35.747k (± 0.2%) i/s -    181.968k in   5.090491s
  Enumerable#sort_by     34.527k (± 1.0%) i/s -    173.150k in   5.015475s
     Enumerable#sort     19.147k (± 0.2%) i/s -     96.200k in   5.024333s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    35746.8 i/s
  Enumerable#sort_by:    34527.0 i/s - 1.04x  (± 0.00) slower
     Enumerable#sort:    19146.9 i/s - 1.87x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    14.574k i/100ms
Enumerable#sort_by...first
                         6.420k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    145.864k (± 0.2%) i/s -    743.274k in   5.095669s
Enumerable#sort_by...first
                         63.931k (± 0.6%) i/s -    321.000k in   5.021205s

Comparison:
   Enumerable#min_by:   145864.2 i/s
Enumerable#sort_by...first:    63931.2 i/s - 2.28x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   293.738k i/100ms
            Hash#dup   208.608k i/100ms
Calculating -------------------------------------
              Hash[]      2.694M (± 3.5%) i/s -     13.512M in   5.021715s
            Hash#dup      2.066M (± 3.3%) i/s -     10.430M in   5.054881s

Comparison:
              Hash[]:  2693974.1 i/s
            Hash#dup:  2065733.0 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.126M i/100ms
  Hash#fetch, symbol   916.849k i/100ms
     Hash#[], string   875.305k i/100ms
  Hash#fetch, string   607.339k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     11.266M (± 0.2%) i/s -     57.430M in   5.097697s
  Hash#fetch, symbol      9.163M (± 0.2%) i/s -     45.842M in   5.002826s
     Hash#[], string      8.751M (± 0.1%) i/s -     43.765M in   5.001209s
  Hash#fetch, string      6.071M (± 0.1%) i/s -     30.367M in   5.002178s

Comparison:
     Hash#[], symbol: 11265945.5 i/s
  Hash#fetch, symbol:  9163341.0 i/s - 1.23x  (± 0.00) slower
     Hash#[], string:  8750938.4 i/s - 1.29x  (± 0.00) slower
  Hash#fetch, string:  6070754.0 i/s - 1.86x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   692.629k i/100ms
             Hash#[]   741.910k i/100ms
          Hash#[] ||   696.294k i/100ms
          Hash#[] &&   303.653k i/100ms
          Hash#fetch   465.401k i/100ms
 Hash#fetch fallback   294.806k i/100ms
Calculating -------------------------------------
            Hash#dig      6.934M (± 0.3%) i/s -     35.324M in   5.094561s
             Hash#[]      7.480M (± 0.3%) i/s -     37.837M in   5.058241s
          Hash#[] ||      6.995M (± 0.3%) i/s -     35.511M in   5.076840s
          Hash#[] &&      3.027M (± 0.5%) i/s -     15.183M in   5.016588s
          Hash#fetch      4.664M (± 0.2%) i/s -     23.735M in   5.089549s
 Hash#fetch fallback      2.965M (± 0.3%) i/s -     15.035M in   5.071584s

Comparison:
             Hash#[]:  7480433.2 i/s
          Hash#[] ||:  6994765.9 i/s - 1.07x  (± 0.00) slower
            Hash#dig:  6933732.4 i/s - 1.08x  (± 0.00) slower
          Hash#fetch:  4663593.1 i/s - 1.60x  (± 0.00) slower
          Hash#[] &&:  3026555.1 i/s - 2.47x  (± 0.00) slower
 Hash#fetch fallback:  2964614.1 i/s - 2.52x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.114M i/100ms
  Hash#fetch + block     1.190M i/100ms
    Hash#fetch + arg   820.993k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     11.143M (± 0.2%) i/s -     55.719M in   5.000570s
  Hash#fetch + block     11.899M (± 0.3%) i/s -     60.677M in   5.099383s
    Hash#fetch + arg      8.212M (± 0.2%) i/s -     41.871M in   5.098475s

Comparison:
  Hash#fetch + block: 11899007.9 i/s
  Hash#fetch + const: 11142507.3 i/s - 1.07x  (± 0.00) slower
    Hash#fetch + arg:  8212409.8 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    20.248k i/100ms
         sort + to_h     8.611k i/100ms
Calculating -------------------------------------
      sort_by + to_h    202.489k (± 0.8%) i/s -      1.012M in   5.000080s
         sort + to_h     86.171k (± 0.4%) i/s -    439.161k in   5.096444s

Comparison:
      sort_by + to_h:   202488.7 i/s
         sort + to_h:    86171.2 i/s - 2.35x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   144.266k i/100ms
       Hash#each_key   157.732k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.455M (± 0.2%) i/s -      7.358M in   5.057847s
       Hash#each_key      1.574M (± 0.1%) i/s -      7.887M in   5.009215s

Comparison:
       Hash#each_key:  1574420.2 i/s
      Hash#keys.each:  1454688.8 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.091k i/100ms
           Hash#key?   706.584k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     10.806k (± 4.3%) i/s -     54.550k in   5.059587s
           Hash#key?      7.068M (± 0.1%) i/s -     36.036M in   5.098795s

Comparison:
           Hash#key?:  7067512.8 i/s
  Hash#keys.include?:    10805.8 i/s - 654.05x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.119k i/100ms
            Hash#[]=     7.972k i/100ms
Calculating -------------------------------------
         Hash#merge!     31.165k (± 0.1%) i/s -    155.950k in   5.003966s
            Hash#[]=     79.275k (± 0.7%) i/s -    398.600k in   5.028300s

Comparison:
            Hash#[]=:    79275.5 i/s
         Hash#merge!:    31165.3 i/s - 2.54x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.877k i/100ms
      Hash#merge({})     2.977k i/100ms
 Hash#dup#merge!({})     2.118k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         38.763k (± 0.2%) i/s -    193.850k in   5.000940s
      Hash#merge({})     29.631k (± 0.2%) i/s -    148.850k in   5.023534s
 Hash#dup#merge!({})     21.215k (± 0.2%) i/s -    108.018k in   5.091663s

Comparison:
{}#merge!(Hash) do end:    38762.8 i/s
      Hash#merge({}):    29630.6 i/s - 1.31x  (± 0.00) slower
 Hash#dup#merge!({}):    21214.8 i/s - 1.83x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   286.276k i/100ms
          Hash#merge   250.459k i/100ms
Calculating -------------------------------------
        Hash#**other      2.851M (± 0.7%) i/s -     14.314M in   5.020703s
          Hash#merge      2.500M (± 0.2%) i/s -     12.523M in   5.008834s

Comparison:
        Hash#**other:  2851108.4 i/s
          Hash#merge:  2500187.1 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.190k i/100ms
         Hash#merge!     2.984k i/100ms
Calculating -------------------------------------
          Hash#merge     11.897k (± 1.0%) i/s -     59.500k in   5.001873s
         Hash#merge!     29.848k (± 0.2%) i/s -    152.184k in   5.098620s

Comparison:
         Hash#merge!:    29848.2 i/s
          Hash#merge:    11896.8 i/s - 2.51x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      332.573k i/100ms
Array#each             178.099k i/100ms
Array#each_w/_object   126.522k i/100ms
Hash#select-include     57.548k i/100ms
Calculating -------------------------------------
Hash#native-slice         3.303M (± 1.0%) i/s -     16.629M in   5.034248s
Array#each                1.779M (± 1.1%) i/s -      8.905M in   5.005584s
Array#each_w/_object      1.240M (± 2.7%) i/s -      6.200M in   5.003915s
Hash#select-include     579.423k (± 0.3%) i/s -      2.935M in   5.065328s

Comparison:
Hash#native-slice   :  3303439.8 i/s
Array#each          :  1779237.8 i/s - 1.86x  (± 0.00) slower
Array#each_w/_object:  1239866.9 i/s - 2.66x  (± 0.00) slower
Hash#select-include :   579423.5 i/s - 5.70x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   827.000  i/100ms
         Hash#value?   735.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      8.169k (± 3.9%) i/s -     41.350k in   5.070854s
         Hash#value?      7.358k (± 0.4%) i/s -     37.485k in   5.094556s

Comparison:
Hash#values.include?:     8169.3 i/s
         Hash#value?:     7358.0 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
                call   479.404k i/100ms
                send   371.300k i/100ms
      method_missing   282.181k i/100ms
Calculating -------------------------------------
                call      4.791M (± 0.1%) i/s -     23.970M in   5.003158s
                send      3.783M (± 0.1%) i/s -     18.936M in   5.004983s
      method_missing      2.820M (± 0.1%) i/s -     14.109M in   5.002808s

Comparison:
                call:  4791017.9 i/s
                send:  3783495.5 i/s - 1.27x  (± 0.00) slower
      method_missing:  2820228.7 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
               Block     6.835k i/100ms
      Symbol#to_proc     7.224k i/100ms
Calculating -------------------------------------
               Block     68.273k (± 0.1%) i/s -    341.750k in   5.005669s
      Symbol#to_proc     73.330k (± 0.4%) i/s -    368.424k in   5.024232s

Comparison:
      Symbol#to_proc:    73330.5 i/s
               Block:    68272.7 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
          block.call   752.953k i/100ms
       block + yield   799.305k i/100ms
        unused block     1.042M i/100ms
               yield   996.447k i/100ms
Calculating -------------------------------------
          block.call      7.540M (± 0.1%) i/s -     38.401M in   5.093063s
       block + yield      7.997M (± 0.1%) i/s -     40.765M in   5.097532s
        unused block     10.419M (± 0.1%) i/s -     52.104M in   5.001040s
               yield      9.967M (± 0.1%) i/s -     50.819M in   5.098607s

Comparison:
        unused block: 10418563.0 i/s
               yield:  9967197.1 i/s - 1.05x  (± 0.00) slower
       block + yield:  7996921.8 i/s - 1.30x  (± 0.00) slower
          block.call:  7539790.8 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   248.183k i/100ms
      range#include?     9.520k i/100ms
       range#member?     9.587k i/100ms
       plain compare   364.758k i/100ms
Calculating -------------------------------------
        range#cover?      2.482M (± 0.1%) i/s -     12.657M in   5.099279s
      range#include?     95.012k (± 1.7%) i/s -    476.000k in   5.011558s
       range#member?     94.459k (± 2.8%) i/s -    479.350k in   5.079044s
       plain compare      3.644M (± 0.4%) i/s -     18.238M in   5.004984s

Comparison:
       plain compare:  3643995.8 i/s
        range#cover?:  2482182.8 i/s - 1.47x  (± 0.00) slower
      range#include?:    95011.7 i/s - 38.35x  (± 0.00) slower
       range#member?:    94458.9 i/s - 38.58x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
       String#match?   741.154k i/100ms
           String#=~   501.444k i/100ms
          Regexp#===   455.554k i/100ms
        String#match   339.550k i/100ms
Calculating -------------------------------------
       String#match?      7.420M (± 0.0%) i/s -     37.799M in   5.094312s
           String#=~      5.018M (± 0.1%) i/s -     25.574M in   5.096850s
          Regexp#===      4.553M (± 0.1%) i/s -     22.778M in   5.002519s
        String#match      3.388M (± 0.2%) i/s -     16.978M in   5.010760s

Comparison:
       String#match?:  7419816.1 i/s
           String#=~:  5017541.8 i/s - 1.48x  (± 0.00) slower
          Regexp#===:  4553248.3 i/s - 1.63x  (± 0.00) slower
        String#match:  3388217.0 i/s - 2.19x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   479.397k i/100ms
      String#casecmp   604.920k i/100ms
Calculating -------------------------------------
String#downcase + ==      4.793M (± 0.1%) i/s -     23.970M in   5.000793s
      String#casecmp      6.069M (± 0.1%) i/s -     30.851M in   5.083081s

Comparison:
      String#casecmp:  6069337.4 i/s
String#downcase + ==:  4793217.9 i/s - 1.27x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
            String#+   450.978k i/100ms
       String#concat   462.107k i/100ms
       String#append   519.243k i/100ms
         "foo" "bar"   959.479k i/100ms
  "#{'foo'}#{'bar'}"   970.598k i/100ms
Calculating -------------------------------------
            String#+      4.542M (± 0.6%) i/s -     23.000M in   5.064096s
       String#concat      4.619M (± 0.2%) i/s -     23.105M in   5.001793s
       String#append      5.210M (± 0.2%) i/s -     26.481M in   5.083175s
         "foo" "bar"      9.680M (± 0.2%) i/s -     48.933M in   5.055297s
  "#{'foo'}#{'bar'}"      9.696M (± 0.2%) i/s -     48.530M in   5.005097s

Comparison:
  "#{'foo'}#{'bar'}":  9696129.7 i/s
         "foo" "bar":  9679667.7 i/s - same-ish: difference falls within error
       String#append:  5209644.8 i/s - 1.86x  (± 0.00) slower
       String#concat:  4619430.5 i/s - 2.10x  (± 0.00) slower
            String#+:  4541928.1 i/s - 2.13x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
           String#+@   757.611k i/100ms
          String#dup   416.921k i/100ms
Calculating -------------------------------------
           String#+@      7.552M (± 0.1%) i/s -     37.881M in   5.015952s
          String#dup      4.196M (± 0.1%) i/s -     21.263M in   5.066978s

Comparison:
           String#+@:  7552029.0 i/s
          String#dup:  4196384.2 i/s - 1.80x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
           String#=~   128.543k i/100ms
       String#match?   341.400k i/100ms
    String#end_with?   477.919k i/100ms
Calculating -------------------------------------
           String#=~      1.290M (± 3.3%) i/s -      6.556M in   5.087155s
       String#match?      3.417M (± 0.0%) i/s -     17.411M in   5.095204s
    String#end_with?      4.779M (± 0.2%) i/s -     23.896M in   5.000579s

Comparison:
    String#end_with?:  4778651.5 i/s
       String#match?:  3417214.6 i/s - 1.40x  (± 0.00) slower
           String#=~:  1290013.7 i/s - 3.70x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    78.357k i/100ms
          String#sub   107.570k i/100ms
String#dup["string"]=
                       136.589k i/100ms
Calculating -------------------------------------
         String#gsub    787.598k (± 0.8%) i/s -      3.996M in   5.074225s
          String#sub      1.093M (± 0.4%) i/s -      5.486M in   5.020502s
String#dup["string"]=
                          1.358M (± 1.0%) i/s -      6.829M in   5.028599s

Comparison:
String#dup["string"]=:  1358251.2 i/s
          String#sub:  1092755.5 i/s - 1.24x  (± 0.00) slower
         String#gsub:   787597.9 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    74.061k i/100ms
           String#tr   278.572k i/100ms
Calculating -------------------------------------
         String#gsub    738.599k (± 2.2%) i/s -      3.703M in   5.016155s
           String#tr      2.780M (± 0.3%) i/s -     13.929M in   5.009623s

Comparison:
           String#tr:  2780387.9 i/s
         String#gsub:   738598.5 i/s - 3.76x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   939.418k i/100ms
         With Freeze     1.382M i/100ms
Calculating -------------------------------------
      Without Freeze      9.395M (± 0.2%) i/s -     47.910M in   5.099538s
         With Freeze     13.813M (± 0.3%) i/s -     69.099M in   5.002378s

Comparison:
         With Freeze: 13813301.5 i/s
      Without Freeze:  9395076.2 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.603k i/100ms
      String#squeeze   119.627k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     26.081k (± 0.1%) i/s -    132.753k in   5.089953s
      String#squeeze      1.190M (± 0.2%) i/s -      5.981M in   5.027296s

Comparison:
      String#squeeze:  1189778.0 i/s
 String#gsub/regex+/:    26081.4 i/s - 45.62x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
           String#=~   214.381k i/100ms
       String#match?   590.851k i/100ms
  String#start_with?   682.147k i/100ms
Calculating -------------------------------------
           String#=~      2.144M (± 0.3%) i/s -     10.719M in   5.000120s
       String#match?      5.910M (± 0.1%) i/s -     30.133M in   5.098846s
  String#start_with?      6.838M (± 0.1%) i/s -     34.789M in   5.087611s

Comparison:
  String#start_with?:  6838093.9 i/s
       String#match?:  5909851.0 i/s - 1.16x  (± 0.00) slower
           String#=~:  2143772.9 i/s - 3.19x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   170.449k i/100ms
    String#[0, n] ==    69.666k i/100ms
   String#[RANGE] ==    61.187k i/100ms
   String#[0...n] ==    34.770k i/100ms
Calculating -------------------------------------
  String#start_with?      1.718M (± 1.9%) i/s -      8.693M in   5.062651s
    String#[0, n] ==    697.249k (± 0.3%) i/s -      3.553M in   5.095733s
   String#[RANGE] ==    610.838k (± 0.1%) i/s -      3.059M in   5.008458s
   String#[0...n] ==    348.780k (± 0.5%) i/s -      1.773M in   5.084356s

Comparison:
  String#start_with?:  1717763.8 i/s
    String#[0, n] ==:   697248.9 i/s - 2.46x  (± 0.00) slower
   String#[RANGE] ==:   610837.7 i/s - 2.81x  (± 0.00) slower
   String#[0...n] ==:   348780.0 i/s - 4.93x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   133.078k i/100ms
 String#sub!'string'    93.973k i/100ms
String#gsub!'string'    57.710k i/100ms
  String#[/regexp/]=   118.765k i/100ms
 String#sub!/regexp/    86.585k i/100ms
String#gsub!/regexp/    45.468k i/100ms
Calculating -------------------------------------
  String#['string']=      1.312M (± 1.8%) i/s -      6.654M in   5.074498s
 String#sub!'string'    936.978k (± 1.0%) i/s -      4.699M in   5.015157s
String#gsub!'string'    577.486k (± 0.4%) i/s -      2.943M in   5.096698s
  String#[/regexp/]=      1.197M (± 2.4%) i/s -      6.057M in   5.062250s
 String#sub!/regexp/    846.548k (± 0.4%) i/s -      4.243M in   5.011819s
String#gsub!/regexp/    454.404k (± 0.2%) i/s -      2.273M in   5.003057s

Comparison:
  String#['string']=:  1311663.6 i/s
  String#[/regexp/]=:  1197186.1 i/s - 1.10x  (± 0.00) slower
 String#sub!'string':   936977.6 i/s - 1.40x  (± 0.00) slower
 String#sub!/regexp/:   846548.3 i/s - 1.55x  (± 0.00) slower
String#gsub!'string':   577485.7 i/s - 2.27x  (± 0.00) slower
String#gsub!/regexp/:   454403.9 i/s - 2.89x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
          String#sub   106.518k i/100ms
        String#chomp   411.098k i/100ms
String#delete_suffix   455.140k i/100ms
Calculating -------------------------------------
          String#sub      1.074M (± 1.5%) i/s -      5.432M in   5.057017s
        String#chomp      4.095M (± 0.1%) i/s -     20.555M in   5.019380s
String#delete_suffix      4.554M (± 0.1%) i/s -     23.212M in   5.097477s

Comparison:
String#delete_suffix:  4553658.0 i/s
        String#chomp:  4095110.3 i/s - 1.11x  (± 0.00) slower
          String#sub:  1074470.6 i/s - 4.24x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   457.537k i/100ms
          String#sub   118.258k i/100ms
Calculating -------------------------------------
String#delete_prefix      4.563M (± 0.2%) i/s -     22.877M in   5.013133s
          String#sub      1.147M (± 4.1%) i/s -      5.795M in   5.062183s

Comparison:
String#delete_prefix:  4563397.3 i/s
          String#sub:  1146632.4 i/s - 3.98x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   433.279k i/100ms
    String#unpack[0]   339.908k i/100ms
Calculating -------------------------------------
      String#unpack1      4.330M (± 0.1%) i/s -     21.664M in   5.003216s
    String#unpack[0]      3.446M (± 0.2%) i/s -     17.335M in   5.030020s

Comparison:
      String#unpack1:  4330008.2 i/s
    String#unpack[0]:  3446387.5 i/s - 1.26x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    21.116k i/100ms
          Time.parse     7.396k i/100ms
Calculating -------------------------------------
        Time.iso8601    210.378k (± 0.2%) i/s -      1.056M in   5.018595s
          Time.parse     73.465k (± 1.2%) i/s -    369.800k in   5.034420s

Comparison:
        Time.iso8601:   210378.4 i/s
          Time.parse:    73464.9 i/s - 2.86x  (± 0.00) slower

