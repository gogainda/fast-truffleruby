$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       495.970k i/100ms
Function with splat arguments
                         7.736k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          4.958M (± 0.1%) i/s -     24.798M in   5.001656s
Function with splat arguments
                         74.600k (± 6.0%) i/s -    371.328k in   5.004579s

Comparison:
Function with single Array argument:  4958067.5 i/s
Function with splat arguments:    74600.4 i/s - 66.46x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   811.546k i/100ms
Sequential Assignment
                       838.053k i/100ms
Calculating -------------------------------------
 Parallel Assignment      8.123M (± 0.2%) i/s -     41.389M in   5.095205s
Sequential Assignment
                          8.367M (± 0.4%) i/s -     41.903M in   5.007903s

Comparison:
Sequential Assignment:  8367470.9 i/s
 Parallel Assignment:  8123134.1 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   304.137k i/100ms
       attr_accessor   334.818k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.040M (± 0.1%) i/s -     15.207M in   5.001871s
       attr_accessor      3.347M (± 0.1%) i/s -     16.741M in   5.001946s

Comparison:
       attr_accessor:  3346880.8 i/s
   getter_and_setter:  3040236.2 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    55.474k i/100ms
         respond_to?   489.234k i/100ms
Calculating -------------------------------------
      begin...rescue    554.486k (± 0.5%) i/s -      2.774M in   5.002407s
         respond_to?      4.891M (± 0.5%) i/s -     24.462M in   5.001031s

Comparison:
         respond_to?:  4891462.2 i/s
      begin...rescue:   554485.5 i/s - 8.82x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
              normal   194.159k i/100ms
             &method    74.328k i/100ms
Calculating -------------------------------------
              normal      1.942M (± 0.2%) i/s -      9.902M in   5.099435s
             &method    742.133k (± 0.3%) i/s -      3.716M in   5.007761s

Comparison:
              normal:  1941812.9 i/s
             &method:   742132.8 i/s - 2.62x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       159.000  i/100ms
       define_method   199.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.579k (±18.9%) i/s -      7.632k in   5.459480s
       define_method      2.168k (±20.2%) i/s -      9.751k in   5.024401s

Comparison:
       define_method:     2167.9 i/s
module_eval with string:     1579.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
         Float#round   119.201k i/100ms
       Kernel#format   132.679k i/100ms
            String#%   115.400k i/100ms
Calculating -------------------------------------
         Float#round      1.192M (± 0.1%) i/s -      5.960M in   5.000226s
       Kernel#format      1.327M (± 0.1%) i/s -      6.767M in   5.097917s
            String#%      1.160M (± 0.1%) i/s -      5.885M in   5.073029s

Comparison:
       Kernel#format:  1327335.1 i/s
         Float#round:  1191958.0 i/s - 1.11x  (± 0.00) slower
            String#%:  1160136.8 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
                Hash   569.658k i/100ms
          OpenStruct   304.216k i/100ms
Calculating -------------------------------------
                Hash      5.697M (± 0.2%) i/s -     28.483M in   5.000041s
          OpenStruct      3.040M (± 0.1%) i/s -     15.211M in   5.002924s

Comparison:
                Hash:  5696550.7 i/s
          OpenStruct:  3040384.7 i/s - 1.87x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
                Hash   730.905k i/100ms
          OpenStruct     5.718k i/100ms
Calculating -------------------------------------
                Hash      7.344M (± 0.1%) i/s -     37.276M in   5.075692s
          OpenStruct     57.196k (± 3.7%) i/s -    285.900k in   5.005392s

Comparison:
                Hash:  7344068.1 i/s
          OpenStruct:    57195.6 i/s - 128.40x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   396.380k i/100ms
  ancestors.include?    71.030k i/100ms
Calculating -------------------------------------
  less than or equal      3.966M (± 0.2%) i/s -     20.215M in   5.096599s
  ancestors.include?    710.555k (± 0.3%) i/s -      3.623M in   5.098218s

Comparison:
  less than or equal:  3966457.6 i/s
  ancestors.include?:   710554.9 i/s - 5.58x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.486  (± 0.0%) i/s -      3.000  in   6.175338s
         Kernel loop      0.162  (± 0.0%) i/s -      1.000  in   6.165368s

Comparison:
          While Loop:        0.5 i/s
         Kernel loop:        0.2 i/s - 3.00x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.109M i/100ms
         Array#first   937.389k i/100ms
Calculating -------------------------------------
           Array#[0]     11.082M (± 0.1%) i/s -     55.426M in   5.001553s
         Array#first      9.379M (± 0.2%) i/s -     47.807M in   5.097038s

Comparison:
           Array#[0]: 11081720.2 i/s
         Array#first:  9379369.9 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.017M i/100ms
          Array#last   951.207k i/100ms
Calculating -------------------------------------
          Array#[-1]     10.234M (± 0.1%) i/s -     51.842M in   5.065675s
          Array#last      9.516M (± 0.2%) i/s -     48.512M in   5.097711s

Comparison:
          Array#[-1]: 10233962.7 i/s
          Array#last:  9516381.1 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    60.347k i/100ms
Calculating -------------------------------------
                find      0.178  (± 0.0%) i/s -      1.000  in   5.631113s
             bsearch    603.505k (± 0.1%) i/s -      3.078M in   5.099715s

Comparison:
             bsearch:   603504.6 i/s
                find:        0.2 i/s - 3398402.63x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    11.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    115.132  (± 2.6%) i/s -    583.000  in   5.067783s
        Array#insert      1.130  (± 0.0%) i/s -      6.000  in   5.312435s

Comparison:
       Array#unshift:      115.1 i/s
        Array#insert:        1.1 i/s - 101.92x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.526M i/100ms
          Array#size     1.521M i/100ms
         Array#count     1.138M i/100ms
Calculating -------------------------------------
        Array#length     15.258M (± 0.2%) i/s -     77.804M in   5.099311s
          Array#size     15.250M (± 0.2%) i/s -     77.568M in   5.086441s
         Array#count     11.386M (± 0.1%) i/s -     58.061M in   5.099433s

Comparison:
        Array#length: 15257767.7 i/s
          Array#size: 15249995.0 i/s - same-ish: difference falls within error
         Array#count: 11385788.5 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    26.555k i/100ms
        Array#sample   709.198k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    265.617k (± 0.4%) i/s -      1.354M in   5.098815s
        Array#sample      7.090M (± 0.1%) i/s -     35.460M in   5.001272s

Comparison:
        Array#sample:  7090180.6 i/s
 Array#shuffle.first:   265616.6 i/s - 26.69x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    38.934k i/100ms
          Date.parse    19.139k i/100ms
Calculating -------------------------------------
        Date.iso8601    385.129k (± 0.5%) i/s -      1.947M in   5.054796s
          Date.parse    191.311k (± 0.3%) i/s -    956.950k in   5.002109s

Comparison:
        Date.iso8601:   385128.8 i/s
          Date.parse:   191311.3 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    11.768k i/100ms
           Array#map    16.588k i/100ms
Calculating -------------------------------------
   Array#each + push    117.473k (± 0.2%) i/s -    588.400k in   5.008844s
           Array#map    165.710k (± 0.3%) i/s -    829.400k in   5.005178s

Comparison:
           Array#map:   165709.5 i/s
   Array#each + push:   117472.9 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
            For loop    19.171k i/100ms
               #each    21.314k i/100ms
Calculating -------------------------------------
            For loop    192.166k (± 0.2%) i/s -    977.721k in   5.087933s
               #each    214.023k (± 0.1%) i/s -      1.087M in   5.078954s

Comparison:
               #each:   214023.3 i/s
            For loop:   192165.5 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
          While Loop    24.148k i/100ms
     each_with_index    12.321k i/100ms
Calculating -------------------------------------
          While Loop    241.520k (± 0.1%) i/s -      1.232M in   5.099161s
     each_with_index    123.708k (± 0.3%) i/s -    628.371k in   5.079511s

Comparison:
          While Loop:   241520.2 i/s
     each_with_index:   123708.0 i/s - 1.95x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    44.432k i/100ms
      inject to_proc     1.287k i/100ms
        inject block     1.331k i/100ms
Calculating -------------------------------------
       inject symbol    444.393k (± 0.1%) i/s -      2.266M in   5.099177s
      inject to_proc     12.880k (± 0.5%) i/s -     65.637k in   5.096154s
        inject block     13.316k (± 0.1%) i/s -     67.881k in   5.097605s

Comparison:
       inject symbol:   444392.6 i/s
        inject block:    13316.3 i/s - 33.37x  (± 0.00) slower
      inject to_proc:    12880.1 i/s - 34.50x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     4.212k i/100ms
   Array#map.flatten     2.315k i/100ms
      Array#flat_map     5.549k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     42.085k (± 0.1%) i/s -    210.600k in   5.004184s
   Array#map.flatten     23.220k (± 0.5%) i/s -    118.065k in   5.084677s
      Array#flat_map     55.453k (± 0.2%) i/s -    277.450k in   5.003323s

Comparison:
      Array#flat_map:    55453.4 i/s
Array#map.flatten(1):    42084.8 i/s - 1.32x  (± 0.00) slower
   Array#map.flatten:    23220.4 i/s - 2.39x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    19.933k i/100ms
  Array#reverse_each    20.347k i/100ms
Calculating -------------------------------------
  Array#reverse.each    199.262k (± 0.1%) i/s -    996.650k in   5.001709s
  Array#reverse_each    203.503k (± 0.1%) i/s -      1.038M in   5.099174s

Comparison:
  Array#reverse_each:   203503.2 i/s
  Array#reverse.each:   199262.2 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        12.882k i/100ms
   Enumerable#detect    51.191k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        128.763k (± 0.3%) i/s -      2.576M in  20.009002s
   Enumerable#detect    511.923k (± 0.1%) i/s -     10.289M in  20.099514s

Comparison:
   Enumerable#detect:   511923.1 i/s
Enumerable#select.first:   128763.2 i/s - 3.98x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       151.551k i/100ms
Enumerable#select.last
                        11.207k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.516M (± 0.2%) i/s -      7.729M in   5.097655s
Enumerable#select.last
                        112.167k (± 0.2%) i/s -    571.557k in   5.095631s

Comparison:
Enumerable#reverse.detect:  1516212.6 i/s
Enumerable#select.last:   112166.5 i/s - 13.52x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.727k i/100ms
  Enumerable#sort_by     2.687k i/100ms
     Enumerable#sort     1.525k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         27.251k (± 0.2%) i/s -    136.350k in   5.003541s
  Enumerable#sort_by     26.860k (± 0.2%) i/s -    134.350k in   5.001899s
     Enumerable#sort     15.095k (± 0.2%) i/s -     76.250k in   5.051230s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    27250.8 i/s
  Enumerable#sort_by:    26859.9 i/s - 1.01x  (± 0.00) slower
     Enumerable#sort:    15095.4 i/s - 1.81x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    11.340k i/100ms
Enumerable#sort_by...first
                         5.012k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    113.298k (± 0.5%) i/s -    567.000k in   5.004625s
Enumerable#sort_by...first
                         49.809k (± 0.2%) i/s -    250.600k in   5.031201s

Comparison:
   Enumerable#min_by:   113297.9 i/s
Enumerable#sort_by...first:    49809.5 i/s - 2.27x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   217.597k i/100ms
            Hash#dup   170.251k i/100ms
Calculating -------------------------------------
              Hash[]      2.260M (± 1.8%) i/s -     11.315M in   5.008139s
            Hash#dup      1.723M (± 2.6%) i/s -      8.683M in   5.042801s

Comparison:
              Hash[]:  2260119.3 i/s
            Hash#dup:  1723002.9 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.027M i/100ms
  Hash#fetch, symbol   814.975k i/100ms
     Hash#[], string   856.430k i/100ms
  Hash#fetch, string   481.016k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     10.267M (± 0.1%) i/s -     51.366M in   5.003055s
  Hash#fetch, symbol      8.151M (± 0.2%) i/s -     41.564M in   5.099199s
     Hash#[], string      8.567M (± 0.1%) i/s -     43.678M in   5.098511s
  Hash#fetch, string      4.808M (± 0.1%) i/s -     24.051M in   5.002091s

Comparison:
     Hash#[], symbol: 10266877.0 i/s
     Hash#[], string:  8566811.1 i/s - 1.20x  (± 0.00) slower
  Hash#fetch, symbol:  8151054.8 i/s - 1.26x  (± 0.00) slower
  Hash#fetch, string:  4808155.7 i/s - 2.14x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   581.646k i/100ms
             Hash#[]   643.087k i/100ms
          Hash#[] ||   586.606k i/100ms
          Hash#[] &&   262.562k i/100ms
          Hash#fetch   400.961k i/100ms
 Hash#fetch fallback   233.099k i/100ms
Calculating -------------------------------------
            Hash#dig      5.803M (± 0.1%) i/s -     29.082M in   5.012007s
             Hash#[]      6.425M (± 0.2%) i/s -     32.154M in   5.004224s
          Hash#[] ||      5.874M (± 0.2%) i/s -     29.917M in   5.093236s
          Hash#[] &&      2.624M (± 0.1%) i/s -     13.128M in   5.003061s
          Hash#fetch      4.000M (± 0.4%) i/s -     20.048M in   5.012479s
 Hash#fetch fallback      2.327M (± 0.1%) i/s -     11.655M in   5.008091s

Comparison:
             Hash#[]:  6425458.2 i/s
          Hash#[] ||:  5873875.1 i/s - 1.09x  (± 0.00) slower
            Hash#dig:  5802535.8 i/s - 1.11x  (± 0.00) slower
          Hash#fetch:  3999702.7 i/s - 1.61x  (± 0.00) slower
          Hash#[] &&:  2624017.9 i/s - 2.45x  (± 0.00) slower
 Hash#fetch fallback:  2327226.6 i/s - 2.76x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   946.883k i/100ms
  Hash#fetch + block     1.007M i/100ms
    Hash#fetch + arg   689.852k i/100ms
Calculating -------------------------------------
  Hash#fetch + const      9.471M (± 0.1%) i/s -     48.291M in   5.098764s
  Hash#fetch + block     10.070M (± 0.1%) i/s -     51.354M in   5.099973s
    Hash#fetch + arg      6.897M (± 0.2%) i/s -     34.493M in   5.001096s

Comparison:
  Hash#fetch + block: 10069558.7 i/s
  Hash#fetch + const:  9471136.8 i/s - 1.06x  (± 0.00) slower
    Hash#fetch + arg:  6897033.9 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    16.189k i/100ms
         sort + to_h     7.135k i/100ms
Calculating -------------------------------------
      sort_by + to_h    161.264k (± 0.4%) i/s -    809.450k in   5.019467s
         sort + to_h     71.049k (± 0.3%) i/s -    356.750k in   5.021194s

Comparison:
      sort_by + to_h:   161264.5 i/s
         sort + to_h:    71049.3 i/s - 2.27x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   114.126k i/100ms
       Hash#each_key   121.556k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.140M (± 0.4%) i/s -      5.706M in   5.005703s
       Hash#each_key      1.212M (± 1.4%) i/s -      6.078M in   5.016285s

Comparison:
       Hash#each_key:  1211856.4 i/s
      Hash#keys.each:  1139976.5 i/s - 1.06x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   646.000  i/100ms
           Hash#key?   686.937k i/100ms
Calculating -------------------------------------
  Hash#keys.include?      6.337k (± 4.8%) i/s -     31.654k in   5.008816s
           Hash#key?      6.813M (± 0.1%) i/s -     34.347M in   5.041077s

Comparison:
           Hash#key?:  6813407.8 i/s
  Hash#keys.include?:     6336.9 i/s - 1075.20x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     2.495k i/100ms
            Hash#[]=     5.951k i/100ms
Calculating -------------------------------------
         Hash#merge!     24.969k (± 0.2%) i/s -    127.245k in   5.096157s
            Hash#[]=     59.451k (± 0.5%) i/s -    297.550k in   5.005084s

Comparison:
            Hash#[]=:    59450.9 i/s
         Hash#merge!:    24969.0 i/s - 2.38x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.158k i/100ms
      Hash#merge({})     2.475k i/100ms
 Hash#dup#merge!({})     1.829k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         31.839k (± 0.2%) i/s -    161.058k in   5.058546s
      Hash#merge({})     24.740k (± 0.2%) i/s -    123.750k in   5.001973s
 Hash#dup#merge!({})     18.233k (± 0.2%) i/s -     91.450k in   5.015566s

Comparison:
{}#merge!(Hash) do end:    31838.9 i/s
      Hash#merge({}):    24740.3 i/s - 1.29x  (± 0.00) slower
 Hash#dup#merge!({}):    18233.3 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   235.985k i/100ms
          Hash#merge   208.974k i/100ms
Calculating -------------------------------------
        Hash#**other      2.358M (± 0.2%) i/s -     11.799M in   5.004958s
          Hash#merge      2.089M (± 0.1%) i/s -     10.449M in   5.002352s

Comparison:
        Hash#**other:  2357526.0 i/s
          Hash#merge:  2088761.2 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   895.000  i/100ms
         Hash#merge!     2.429k i/100ms
Calculating -------------------------------------
          Hash#merge      9.111k (± 1.8%) i/s -     45.645k in   5.011530s
         Hash#merge!     24.335k (± 0.2%) i/s -    123.879k in   5.090655s

Comparison:
         Hash#merge!:    24334.6 i/s
          Hash#merge:     9111.1 i/s - 2.67x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      261.203k i/100ms
Array#each             137.387k i/100ms
Array#each_w/_object   106.198k i/100ms
Hash#select-include     40.724k i/100ms
Calculating -------------------------------------
Hash#native-slice         2.606M (± 0.3%) i/s -     13.060M in   5.011644s
Array#each                1.372M (± 0.2%) i/s -      6.869M in   5.005854s
Array#each_w/_object      1.066M (± 0.4%) i/s -      5.416M in   5.082559s
Hash#select-include     426.899k (± 2.0%) i/s -      2.158M in   5.058024s

Comparison:
Hash#native-slice   :  2605978.8 i/s
Array#each          :  1372270.2 i/s - 1.90x  (± 0.00) slower
Array#each_w/_object:  1065637.3 i/s - 2.45x  (± 0.00) slower
Hash#select-include :   426899.3 i/s - 6.10x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.114k i/100ms
         Hash#value?     1.026k i/100ms
Calculating -------------------------------------
Hash#values.include?     10.987k (± 5.5%) i/s -     55.700k in   5.088657s
         Hash#value?     10.273k (± 0.1%) i/s -     52.326k in   5.093570s

Comparison:
Hash#values.include?:    10987.5 i/s
         Hash#value?:    10273.0 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
                call   402.051k i/100ms
                send   326.190k i/100ms
      method_missing   230.351k i/100ms
Calculating -------------------------------------
                call      4.021M (± 0.1%) i/s -     20.505M in   5.099450s
                send      3.260M (± 0.1%) i/s -     16.310M in   5.002331s
      method_missing      2.306M (± 0.1%) i/s -     11.748M in   5.094327s

Comparison:
                call:  4020949.2 i/s
                send:  3260383.6 i/s - 1.23x  (± 0.00) slower
      method_missing:  2306077.3 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
               Block     4.662k i/100ms
      Symbol#to_proc     5.120k i/100ms
Calculating -------------------------------------
               Block     46.633k (± 0.1%) i/s -    237.762k in   5.098629s
      Symbol#to_proc     51.123k (± 0.1%) i/s -    256.000k in   5.007500s

Comparison:
      Symbol#to_proc:    51123.4 i/s
               Block:    46632.6 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
          block.call   638.144k i/100ms
       block + yield   677.661k i/100ms
        unused block   902.687k i/100ms
               yield   855.950k i/100ms
Calculating -------------------------------------
          block.call      6.393M (± 0.1%) i/s -     32.545M in   5.091098s
       block + yield      6.793M (± 0.1%) i/s -     34.561M in   5.087516s
        unused block      9.026M (± 0.1%) i/s -     45.134M in   5.000597s
               yield      8.562M (± 0.1%) i/s -     43.653M in   5.098683s

Comparison:
        unused block:  9025809.7 i/s
               yield:  8561726.5 i/s - 1.05x  (± 0.00) slower
       block + yield:  6793253.6 i/s - 1.33x  (± 0.00) slower
          block.call:  6392604.2 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   199.841k i/100ms
      range#include?     8.253k i/100ms
       range#member?     8.231k i/100ms
       plain compare   303.012k i/100ms
Calculating -------------------------------------
        range#cover?      1.999M (± 0.1%) i/s -     10.192M in   5.099188s
      range#include?     82.468k (± 0.3%) i/s -    412.650k in   5.003801s
       range#member?     82.471k (± 0.2%) i/s -    419.781k in   5.090055s
       plain compare      3.039M (± 0.1%) i/s -     15.454M in   5.084606s

Comparison:
       plain compare:  3039296.3 i/s
        range#cover?:  1998731.1 i/s - 1.52x  (± 0.00) slower
       range#member?:    82471.2 i/s - 36.85x  (± 0.00) slower
      range#include?:    82467.9 i/s - 36.85x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
       String#match?   598.697k i/100ms
           String#=~   377.600k i/100ms
          Regexp#===   356.020k i/100ms
        String#match   261.514k i/100ms
Calculating -------------------------------------
       String#match?      5.990M (± 0.2%) i/s -     30.534M in   5.097649s
           String#=~      3.772M (± 0.3%) i/s -     18.880M in   5.005797s
          Regexp#===      3.548M (± 0.3%) i/s -     17.801M in   5.017462s
        String#match      2.615M (± 0.3%) i/s -     13.076M in   5.000686s

Comparison:
       String#match?:  5989754.6 i/s
           String#=~:  3771671.5 i/s - 1.59x  (± 0.00) slower
          Regexp#===:  3547846.4 i/s - 1.69x  (± 0.00) slower
        String#match:  2614800.8 i/s - 2.29x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   390.430k i/100ms
      String#casecmp   502.005k i/100ms
Calculating -------------------------------------
String#downcase + ==      3.901M (± 0.1%) i/s -     19.522M in   5.004112s
      String#casecmp      5.019M (± 0.1%) i/s -     25.100M in   5.001172s

Comparison:
      String#casecmp:  5018880.0 i/s
String#downcase + ==:  3901096.8 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
            String#+   351.279k i/100ms
       String#concat   370.442k i/100ms
       String#append   400.403k i/100ms
         "foo" "bar"   783.604k i/100ms
  "#{'foo'}#{'bar'}"   793.088k i/100ms
Calculating -------------------------------------
            String#+      3.510M (± 0.3%) i/s -     17.564M in   5.004275s
       String#concat      3.691M (± 0.1%) i/s -     18.522M in   5.017662s
       String#append      4.002M (± 0.6%) i/s -     20.020M in   5.002603s
         "foo" "bar"      7.841M (± 0.1%) i/s -     39.964M in   5.096787s
  "#{'foo'}#{'bar'}"      7.930M (± 0.1%) i/s -     39.654M in   5.000572s

Comparison:
  "#{'foo'}#{'bar'}":  7929984.4 i/s
         "foo" "bar":  7840994.5 i/s - 1.01x  (± 0.00) slower
       String#append:  4002071.7 i/s - 1.98x  (± 0.00) slower
       String#concat:  3691386.3 i/s - 2.15x  (± 0.00) slower
            String#+:  3509816.8 i/s - 2.26x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
           String#+@   646.621k i/100ms
          String#dup   340.778k i/100ms
Calculating -------------------------------------
           String#+@      6.457M (± 0.1%) i/s -     32.331M in   5.007481s
          String#dup      3.407M (± 0.2%) i/s -     17.039M in   5.001799s

Comparison:
           String#+@:  6456556.6 i/s
          String#dup:  3406573.2 i/s - 1.90x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
           String#=~   110.093k i/100ms
       String#match?   275.166k i/100ms
    String#end_with?   375.114k i/100ms
Calculating -------------------------------------
           String#=~      1.103M (± 1.1%) i/s -      5.615M in   5.089185s
       String#match?      2.751M (± 0.1%) i/s -     13.758M in   5.001175s
    String#end_with?      3.751M (± 0.1%) i/s -     18.756M in   5.000465s

Comparison:
    String#end_with?:  3750796.8 i/s
       String#match?:  2751018.2 i/s - 1.36x  (± 0.00) slower
           String#=~:  1103393.3 i/s - 3.40x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    70.932k i/100ms
          String#sub    88.984k i/100ms
String#dup["string"]=
                       109.906k i/100ms
Calculating -------------------------------------
         String#gsub    706.054k (± 0.8%) i/s -      3.547M in   5.023431s
          String#sub    856.093k (± 0.2%) i/s -      4.360M in   5.093188s
String#dup["string"]=
                          1.113M (± 0.6%) i/s -      5.605M in   5.034113s

Comparison:
String#dup["string"]=:  1113485.1 i/s
          String#sub:   856093.0 i/s - 1.30x  (± 0.00) slower
         String#gsub:   706053.6 i/s - 1.58x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    61.545k i/100ms
           String#tr   227.061k i/100ms
Calculating -------------------------------------
         String#gsub    618.300k (± 0.3%) i/s -      3.139M in   5.076536s
           String#tr      2.272M (± 0.1%) i/s -     11.580M in   5.097926s

Comparison:
           String#tr:  2271536.6 i/s
         String#gsub:   618299.6 i/s - 3.67x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   783.593k i/100ms
         With Freeze     1.251M i/100ms
Calculating -------------------------------------
      Without Freeze      7.826M (± 0.1%) i/s -     39.180M in   5.006389s
         With Freeze     12.504M (± 0.1%) i/s -     62.547M in   5.002000s

Comparison:
         With Freeze: 12504336.4 i/s
      Without Freeze:  7825944.2 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.186k i/100ms
      String#squeeze   108.827k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     21.846k (± 0.5%) i/s -    109.300k in   5.003376s
      String#squeeze      1.078M (± 1.2%) i/s -      5.441M in   5.050635s

Comparison:
      String#squeeze:  1077514.8 i/s
 String#gsub/regex+/:    21845.8 i/s - 49.32x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
           String#=~   179.219k i/100ms
       String#match?   479.030k i/100ms
  String#start_with?   555.807k i/100ms
Calculating -------------------------------------
           String#=~      1.795M (± 0.3%) i/s -      9.140M in   5.091813s
       String#match?      4.791M (± 0.1%) i/s -     24.431M in   5.099512s
  String#start_with?      5.553M (± 0.1%) i/s -     27.790M in   5.005003s

Comparison:
  String#start_with?:  5552525.9 i/s
       String#match?:  4790765.6 i/s - 1.16x  (± 0.00) slower
           String#=~:  1795085.6 i/s - 3.09x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   136.912k i/100ms
    String#[0, n] ==    50.093k i/100ms
   String#[RANGE] ==    46.491k i/100ms
   String#[0...n] ==    29.267k i/100ms
Calculating -------------------------------------
  String#start_with?      1.371M (± 0.2%) i/s -      6.983M in   5.093853s
    String#[0, n] ==    501.159k (± 0.2%) i/s -      2.555M in   5.097683s
   String#[RANGE] ==    465.040k (± 0.2%) i/s -      2.371M in   5.098593s
   String#[0...n] ==    292.854k (± 0.1%) i/s -      1.493M in   5.096798s

Comparison:
  String#start_with?:  1370780.4 i/s
    String#[0, n] ==:   501159.3 i/s - 2.74x  (± 0.00) slower
   String#[RANGE] ==:   465040.0 i/s - 2.95x  (± 0.00) slower
   String#[0...n] ==:   292854.2 i/s - 4.68x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   115.124k i/100ms
 String#sub!'string'    83.712k i/100ms
String#gsub!'string'    51.709k i/100ms
  String#[/regexp/]=    99.741k i/100ms
 String#sub!/regexp/    76.383k i/100ms
String#gsub!/regexp/    39.916k i/100ms
Calculating -------------------------------------
  String#['string']=      1.157M (± 1.0%) i/s -      5.871M in   5.075178s
 String#sub!'string'    834.819k (± 1.1%) i/s -      4.186M in   5.014401s
String#gsub!'string'    516.955k (± 0.4%) i/s -      2.585M in   5.001374s
  String#[/regexp/]=      1.035M (± 0.9%) i/s -      5.187M in   5.012559s
 String#sub!/regexp/    780.820k (± 0.5%) i/s -      3.972M in   5.086975s
String#gsub!/regexp/    399.623k (± 0.8%) i/s -      2.036M in   5.094404s

Comparison:
  String#['string']=:  1156978.4 i/s
  String#[/regexp/]=:  1034783.4 i/s - 1.12x  (± 0.00) slower
 String#sub!'string':   834818.6 i/s - 1.39x  (± 0.00) slower
 String#sub!/regexp/:   780820.0 i/s - 1.48x  (± 0.00) slower
String#gsub!'string':   516955.0 i/s - 2.24x  (± 0.00) slower
String#gsub!/regexp/:   399622.9 i/s - 2.90x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
          String#sub    94.205k i/100ms
        String#chomp   329.559k i/100ms
String#delete_suffix   363.150k i/100ms
Calculating -------------------------------------
          String#sub    944.371k (± 0.8%) i/s -      4.804M in   5.087831s
        String#chomp      3.292M (± 0.1%) i/s -     16.478M in   5.005953s
String#delete_suffix      3.626M (± 0.1%) i/s -     18.158M in   5.008059s

Comparison:
String#delete_suffix:  3625664.1 i/s
        String#chomp:  3291677.9 i/s - 1.10x  (± 0.00) slower
          String#sub:   944371.4 i/s - 3.84x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   376.637k i/100ms
          String#sub    95.041k i/100ms
Calculating -------------------------------------
String#delete_prefix      3.763M (± 0.2%) i/s -     18.832M in   5.004725s
          String#sub    955.520k (± 0.5%) i/s -      4.847M in   5.072836s

Comparison:
String#delete_prefix:  3762823.4 i/s
          String#sub:   955519.9 i/s - 3.94x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   370.994k i/100ms
    String#unpack[0]   266.476k i/100ms
Calculating -------------------------------------
      String#unpack1      3.707M (± 0.1%) i/s -     18.550M in   5.003536s
    String#unpack[0]      2.665M (± 0.1%) i/s -     13.590M in   5.099958s

Comparison:
      String#unpack1:  3707323.6 i/s
    String#unpack[0]:  2664786.2 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    17.476k i/100ms
          Time.parse     5.938k i/100ms
Calculating -------------------------------------
        Time.iso8601    174.816k (± 0.2%) i/s -    891.276k in   5.098385s
          Time.parse     59.443k (± 0.3%) i/s -    302.838k in   5.094599s

Comparison:
        Time.iso8601:   174816.4 i/s
          Time.parse:    59443.4 i/s - 2.94x  (± 0.00) slower

