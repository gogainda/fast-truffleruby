$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       593.494k i/100ms
Function with splat arguments
                        11.583k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          5.938M (± 0.1%) i/s -     30.268M in   5.097328s
Function with splat arguments
                        114.560k (± 8.5%) i/s -    579.150k in   5.104074s

Comparison:
Function with single Array argument:  5938054.0 i/s
Function with splat arguments:   114560.2 i/s - 51.83x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   982.342k i/100ms
Sequential Assignment
                       999.436k i/100ms
Calculating -------------------------------------
 Parallel Assignment      9.861M (± 0.2%) i/s -     50.099M in   5.080819s
Sequential Assignment
                          9.973M (± 0.0%) i/s -     49.972M in   5.010789s

Comparison:
Sequential Assignment:  9972843.4 i/s
 Parallel Assignment:  9860562.0 i/s - 1.01x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   363.586k i/100ms
       attr_accessor   407.707k i/100ms
Calculating -------------------------------------
   getter_and_setter      3.629M (± 0.0%) i/s -     18.179M in   5.009634s
       attr_accessor      4.070M (± 0.1%) i/s -     20.385M in   5.008118s

Comparison:
       attr_accessor:  4070462.4 i/s
   getter_and_setter:  3628868.4 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    68.712k i/100ms
         respond_to?   596.958k i/100ms
Calculating -------------------------------------
      begin...rescue    688.224k (± 0.5%) i/s -      3.504M in   5.091951s
         respond_to?      5.961M (± 0.1%) i/s -     29.848M in   5.006805s

Comparison:
         respond_to?:  5961470.0 i/s
      begin...rescue:   688223.9 i/s - 8.66x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
              normal   230.812k i/100ms
             &method    88.616k i/100ms
Calculating -------------------------------------
              normal      2.307M (± 0.1%) i/s -     11.541M in   5.001390s
             &method    886.026k (± 0.1%) i/s -      4.431M in   5.000763s

Comparison:
              normal:  2307479.5 i/s
             &method:   886026.2 i/s - 2.60x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       184.000  i/100ms
       define_method   224.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.914k (±20.1%) i/s -      8.464k in   5.028625s
       define_method      2.333k (±23.7%) i/s -      9.856k in   5.020654s

Comparison:
       define_method:     2333.2 i/s
module_eval with string:     1913.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
         Float#round   143.152k i/100ms
       Kernel#format   159.565k i/100ms
            String#%   138.637k i/100ms
Calculating -------------------------------------
         Float#round      1.429M (± 0.1%) i/s -      7.158M in   5.007994s
       Kernel#format      1.597M (± 0.1%) i/s -      8.138M in   5.095534s
            String#%      1.397M (± 0.1%) i/s -      7.070M in   5.059601s

Comparison:
       Kernel#format:  1597049.4 i/s
         Float#round:  1429235.7 i/s - 1.12x  (± 0.00) slower
            String#%:  1397441.8 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
                Hash   680.637k i/100ms
          OpenStruct   372.383k i/100ms
Calculating -------------------------------------
                Hash      6.801M (± 0.5%) i/s -     34.032M in   5.004387s
          OpenStruct      3.723M (± 0.1%) i/s -     18.619M in   5.001570s

Comparison:
                Hash:  6800586.0 i/s
          OpenStruct:  3722662.1 i/s - 1.83x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
                Hash   874.901k i/100ms
          OpenStruct     6.578k i/100ms
Calculating -------------------------------------
                Hash      8.787M (± 0.1%) i/s -     44.620M in   5.078228s
          OpenStruct     66.675k (± 3.0%) i/s -    335.478k in   5.036153s

Comparison:
                Hash:  8786523.3 i/s
          OpenStruct:    66674.6 i/s - 131.78x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   485.054k i/100ms
  ancestors.include?    84.848k i/100ms
Calculating -------------------------------------
  less than or equal      4.843M (± 0.5%) i/s -     24.253M in   5.008271s
  ancestors.include?    849.033k (± 0.1%) i/s -      4.327M in   5.096684s

Comparison:
  less than or equal:  4842649.0 i/s
  ancestors.include?:   849032.8 i/s - 5.70x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.582  (± 0.0%) i/s -      3.000  in   5.157106s
         Kernel loop      0.190  (± 0.0%) i/s -      1.000  in   5.266209s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 3.06x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.332M i/100ms
         Array#first     1.077M i/100ms
Calculating -------------------------------------
           Array#[0]     13.181M (± 0.3%) i/s -     66.616M in   5.054122s
         Array#first     10.776M (± 0.0%) i/s -     54.944M in   5.098782s

Comparison:
           Array#[0]: 13180770.7 i/s
         Array#first: 10775925.6 i/s - 1.22x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.349M i/100ms
          Array#last     1.157M i/100ms
Calculating -------------------------------------
          Array#[-1]     13.482M (± 0.0%) i/s -     67.438M in   5.002236s
          Array#last     11.570M (± 0.1%) i/s -     58.995M in   5.099009s

Comparison:
          Array#[-1]: 13481543.4 i/s
          Array#last: 11569871.0 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    71.897k i/100ms
Calculating -------------------------------------
                find      0.195  (± 0.0%) i/s -      1.000  in   5.140860s
             bsearch    718.320k (± 0.1%) i/s -      3.595M in   5.004527s

Comparison:
             bsearch:   718319.9 i/s
                find:        0.2 i/s - 3692781.84x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    14.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    138.166  (± 2.9%) i/s -    700.000  in   5.070235s
        Array#insert      1.324  (± 0.0%) i/s -      7.000  in   5.295970s

Comparison:
       Array#unshift:      138.2 i/s
        Array#insert:        1.3 i/s - 104.35x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.837M i/100ms
          Array#size     1.830M i/100ms
         Array#count     1.372M i/100ms
Calculating -------------------------------------
        Array#length     18.239M (± 0.2%) i/s -     91.838M in   5.035184s
          Array#size     18.201M (± 0.1%) i/s -     91.511M in   5.027825s
         Array#count     13.812M (± 0.0%) i/s -     69.960M in   5.065060s

Comparison:
        Array#length: 18239254.1 i/s
          Array#size: 18200954.7 i/s - same-ish: difference falls within error
         Array#count: 13812370.1 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    32.095k i/100ms
        Array#sample   773.459k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    322.451k (± 1.2%) i/s -      1.637M in   5.076995s
        Array#sample      7.761M (± 0.5%) i/s -     39.446M in   5.082510s

Comparison:
        Array#sample:  7761415.5 i/s
 Array#shuffle.first:   322450.9 i/s - 24.07x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    48.632k i/100ms
          Date.parse    24.218k i/100ms
Calculating -------------------------------------
        Date.iso8601    486.987k (± 0.2%) i/s -      2.480M in   5.093046s
          Date.parse    241.671k (± 1.9%) i/s -      1.211M in   5.012539s

Comparison:
        Date.iso8601:   486987.0 i/s
          Date.parse:   241670.5 i/s - 2.02x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    14.202k i/100ms
           Array#map    19.982k i/100ms
Calculating -------------------------------------
   Array#each + push    142.168k (± 0.2%) i/s -    724.302k in   5.094737s
           Array#map    199.724k (± 0.5%) i/s -    999.100k in   5.002526s

Comparison:
           Array#map:   199724.1 i/s
   Array#each + push:   142167.6 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
            For loop    24.325k i/100ms
               #each    27.040k i/100ms
Calculating -------------------------------------
            For loop    241.932k (± 0.2%) i/s -      1.216M in   5.027255s
               #each    270.283k (± 0.1%) i/s -      1.352M in   5.002173s

Comparison:
               #each:   270282.7 i/s
            For loop:   241931.8 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
          While Loop    28.983k i/100ms
     each_with_index    14.743k i/100ms
Calculating -------------------------------------
          While Loop    289.805k (± 0.1%) i/s -      1.449M in   5.000433s
     each_with_index    147.168k (± 0.5%) i/s -    737.150k in   5.009018s

Comparison:
          While Loop:   289805.1 i/s
     each_with_index:   147168.3 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    53.646k i/100ms
      inject to_proc     1.566k i/100ms
        inject block     1.609k i/100ms
Calculating -------------------------------------
       inject symbol    536.488k (± 0.0%) i/s -      2.736M in   5.099738s
      inject to_proc     15.687k (± 0.2%) i/s -     79.866k in   5.091230s
        inject block     16.108k (± 0.1%) i/s -     82.059k in   5.094257s

Comparison:
       inject symbol:   536487.6 i/s
        inject block:    16108.2 i/s - 33.31x  (± 0.00) slower
      inject to_proc:    15687.1 i/s - 34.20x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     5.130k i/100ms
   Array#map.flatten     2.800k i/100ms
      Array#flat_map     6.620k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     51.241k (± 0.1%) i/s -    256.500k in   5.005798s
   Array#map.flatten     28.105k (± 0.6%) i/s -    142.800k in   5.081042s
      Array#flat_map     66.218k (± 0.1%) i/s -    337.620k in   5.098640s

Comparison:
      Array#flat_map:    66217.7 i/s
Array#map.flatten(1):    51240.6 i/s - 1.29x  (± 0.00) slower
   Array#map.flatten:    28105.4 i/s - 2.36x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    25.957k i/100ms
  Array#reverse_each    26.740k i/100ms
Calculating -------------------------------------
  Array#reverse.each    259.359k (± 0.2%) i/s -      1.298M in   5.004079s
  Array#reverse_each    266.493k (± 0.5%) i/s -      1.337M in   5.017118s

Comparison:
  Array#reverse_each:   266493.2 i/s
  Array#reverse.each:   259359.2 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        15.017k i/100ms
   Enumerable#detect    62.633k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        149.950k (± 0.2%) i/s -      3.003M in  20.029468s
   Enumerable#detect    625.725k (± 0.2%) i/s -     12.527M in  20.019440s

Comparison:
   Enumerable#detect:   625725.4 i/s
Enumerable#select.first:   149950.0 i/s - 4.17x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       181.608k i/100ms
Enumerable#select.last
                        12.958k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.817M (± 0.1%) i/s -      9.262M in   5.098694s
Enumerable#select.last
                        129.661k (± 0.2%) i/s -    660.858k in   5.096822s

Comparison:
Enumerable#reverse.detect:  1816547.6 i/s
Enumerable#select.last:   129661.4 i/s - 14.01x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.279k i/100ms
  Enumerable#sort_by     3.229k i/100ms
     Enumerable#sort     1.836k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         32.799k (± 0.2%) i/s -    167.229k in   5.098697s
  Enumerable#sort_by     32.283k (± 0.2%) i/s -    161.450k in   5.001145s
     Enumerable#sort     18.355k (± 0.2%) i/s -     91.800k in   5.001449s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    32798.5 i/s
  Enumerable#sort_by:    32282.8 i/s - 1.02x  (± 0.00) slower
     Enumerable#sort:    18354.8 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    13.434k i/100ms
Enumerable#sort_by...first
                         6.067k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    134.570k (± 0.1%) i/s -    685.134k in   5.091291s
Enumerable#sort_by...first
                         60.301k (± 0.8%) i/s -    303.350k in   5.030879s

Comparison:
   Enumerable#min_by:   134570.0 i/s
Enumerable#sort_by...first:    60301.0 i/s - 2.23x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   270.513k i/100ms
            Hash#dup   205.340k i/100ms
Calculating -------------------------------------
              Hash[]      2.704M (± 1.1%) i/s -     13.526M in   5.002841s
            Hash#dup      1.815M (± 1.6%) i/s -      9.240M in   5.091572s

Comparison:
              Hash[]:  2703921.4 i/s
            Hash#dup:  1815288.1 i/s - 1.49x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.210M i/100ms
  Hash#fetch, symbol   999.502k i/100ms
     Hash#[], string     1.019M i/100ms
  Hash#fetch, string   578.770k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     12.092M (± 0.5%) i/s -     60.501M in   5.003472s
  Hash#fetch, symbol      9.995M (± 0.1%) i/s -     50.975M in   5.099879s
     Hash#[], string     10.192M (± 0.0%) i/s -     50.964M in   5.000188s
  Hash#fetch, string      5.786M (± 0.1%) i/s -     28.938M in   5.001781s

Comparison:
     Hash#[], symbol: 12092004.9 i/s
     Hash#[], string: 10192429.4 i/s - 1.19x  (± 0.00) slower
  Hash#fetch, symbol:  9995263.0 i/s - 1.21x  (± 0.00) slower
  Hash#fetch, string:  5785645.5 i/s - 2.09x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   696.722k i/100ms
             Hash#[]   773.351k i/100ms
          Hash#[] ||   706.545k i/100ms
          Hash#[] &&   316.690k i/100ms
          Hash#fetch   483.357k i/100ms
 Hash#fetch fallback   278.890k i/100ms
Calculating -------------------------------------
            Hash#dig      6.950M (± 0.2%) i/s -     34.836M in   5.012249s
             Hash#[]      7.724M (± 0.2%) i/s -     38.668M in   5.006002s
          Hash#[] ||      7.077M (± 0.2%) i/s -     36.034M in   5.092017s
          Hash#[] &&      3.148M (± 0.1%) i/s -     15.834M in   5.029854s
          Hash#fetch      4.822M (± 0.1%) i/s -     24.168M in   5.011876s
 Hash#fetch fallback      2.786M (± 0.1%) i/s -     13.944M in   5.004860s

Comparison:
             Hash#[]:  7724257.1 i/s
          Hash#[] ||:  7076548.9 i/s - 1.09x  (± 0.00) slower
            Hash#dig:  6950220.3 i/s - 1.11x  (± 0.00) slower
          Hash#fetch:  4822120.2 i/s - 1.60x  (± 0.00) slower
          Hash#[] &&:  3148109.0 i/s - 2.45x  (± 0.00) slower
 Hash#fetch fallback:  2786193.7 i/s - 2.77x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.193M i/100ms
  Hash#fetch + block     1.203M i/100ms
    Hash#fetch + arg   817.624k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     11.933M (± 0.1%) i/s -     60.850M in   5.099187s
  Hash#fetch + block     12.062M (± 0.1%) i/s -     61.331M in   5.084840s
    Hash#fetch + arg      8.195M (± 0.1%) i/s -     41.699M in   5.088638s

Comparison:
  Hash#fetch + block: 12061548.6 i/s
  Hash#fetch + const: 11933240.3 i/s - 1.01x  (± 0.00) slower
    Hash#fetch + arg:  8194500.3 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    19.920k i/100ms
         sort + to_h     9.529k i/100ms
Calculating -------------------------------------
      sort_by + to_h    199.083k (± 0.3%) i/s -    996.000k in   5.002992s
         sort + to_h     95.072k (± 0.5%) i/s -    476.450k in   5.011628s

Comparison:
      sort_by + to_h:   199083.2 i/s
         sort + to_h:    95071.7 i/s - 2.09x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   135.445k i/100ms
       Hash#each_key   144.635k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.366M (± 0.3%) i/s -      6.908M in   5.056919s
       Hash#each_key      1.438M (± 0.1%) i/s -      7.232M in   5.029451s

Comparison:
       Hash#each_key:  1437881.1 i/s
      Hash#keys.each:  1365999.4 i/s - 1.05x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   771.000  i/100ms
           Hash#key?   814.315k i/100ms
Calculating -------------------------------------
  Hash#keys.include?      7.598k (± 4.5%) i/s -     38.550k in   5.085513s
           Hash#key?      8.143M (± 0.5%) i/s -     40.716M in   5.000410s

Comparison:
           Hash#key?:  8142687.4 i/s
  Hash#keys.include?:     7598.4 i/s - 1071.64x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     2.914k i/100ms
            Hash#[]=     7.168k i/100ms
Calculating -------------------------------------
         Hash#merge!     29.400k (± 1.5%) i/s -    148.614k in   5.055976s
            Hash#[]=     71.623k (± 0.6%) i/s -    358.400k in   5.004198s

Comparison:
            Hash#[]=:    71622.6 i/s
         Hash#merge!:    29400.2 i/s - 2.44x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.798k i/100ms
      Hash#merge({})     2.953k i/100ms
 Hash#dup#merge!({})     2.193k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         38.154k (± 0.1%) i/s -    193.698k in   5.076777s
      Hash#merge({})     29.524k (± 0.1%) i/s -    147.650k in   5.001089s
 Hash#dup#merge!({})     21.859k (± 0.3%) i/s -    109.650k in   5.016374s

Comparison:
{}#merge!(Hash) do end:    38153.7 i/s
      Hash#merge({}):    29523.6 i/s - 1.29x  (± 0.00) slower
 Hash#dup#merge!({}):    21858.6 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   282.522k i/100ms
          Hash#merge   249.044k i/100ms
Calculating -------------------------------------
        Hash#**other      2.823M (± 0.1%) i/s -     14.126M in   5.003693s
          Hash#merge      2.487M (± 0.1%) i/s -     12.452M in   5.006943s

Comparison:
        Hash#**other:  2823137.2 i/s
          Hash#merge:  2486988.9 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.117k i/100ms
         Hash#merge!     2.931k i/100ms
Calculating -------------------------------------
          Hash#merge     11.222k (± 1.0%) i/s -     56.967k in   5.076710s
         Hash#merge!     29.293k (± 0.1%) i/s -    146.550k in   5.002858s

Comparison:
         Hash#merge!:    29293.3 i/s
          Hash#merge:    11222.3 i/s - 2.61x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      304.540k i/100ms
Array#each             164.492k i/100ms
Array#each_w/_object   122.594k i/100ms
Hash#select-include     51.732k i/100ms
Calculating -------------------------------------
Hash#native-slice         3.043M (± 0.1%) i/s -     15.227M in   5.004597s
Array#each                1.645M (± 0.1%) i/s -      8.389M in   5.099666s
Array#each_w/_object      1.236M (± 0.3%) i/s -      6.252M in   5.060144s
Hash#select-include     520.705k (± 0.6%) i/s -      2.638M in   5.067015s

Comparison:
Hash#native-slice   :  3042604.1 i/s
Array#each          :  1645029.8 i/s - 1.85x  (± 0.00) slower
Array#each_w/_object:  1235609.2 i/s - 2.46x  (± 0.00) slower
Hash#select-include :   520705.3 i/s - 5.84x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   729.000  i/100ms
         Hash#value?   616.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      7.215k (± 4.4%) i/s -     36.450k in   5.064078s
         Hash#value?      6.197k (± 0.2%) i/s -     31.416k in   5.069447s

Comparison:
Hash#values.include?:     7214.7 i/s
         Hash#value?:     6197.2 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
                call   483.320k i/100ms
                send   385.845k i/100ms
      method_missing   277.748k i/100ms
Calculating -------------------------------------
                call      4.831M (± 0.0%) i/s -     24.166M in   5.002533s
                send      3.858M (± 0.1%) i/s -     19.292M in   5.001078s
      method_missing      2.780M (± 0.2%) i/s -     14.165M in   5.095655s

Comparison:
                call:  4830754.2 i/s
                send:  3857619.8 i/s - 1.25x  (± 0.00) slower
      method_missing:  2779857.8 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
               Block     5.612k i/100ms
      Symbol#to_proc     6.147k i/100ms
Calculating -------------------------------------
               Block     55.982k (± 0.5%) i/s -    280.600k in   5.012445s
      Symbol#to_proc     61.419k (± 0.1%) i/s -    307.350k in   5.004152s

Comparison:
      Symbol#to_proc:    61419.0 i/s
               Block:    55982.2 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
          block.call   771.008k i/100ms
       block + yield   814.651k i/100ms
        unused block     1.067M i/100ms
               yield   996.693k i/100ms
Calculating -------------------------------------
          block.call      7.708M (± 0.1%) i/s -     38.550M in   5.001559s
       block + yield      8.163M (± 0.1%) i/s -     41.547M in   5.089414s
        unused block     10.665M (± 0.4%) i/s -     53.372M in   5.004459s
               yield      9.967M (± 0.3%) i/s -     49.835M in   5.000250s

Comparison:
        unused block: 10665104.0 i/s
               yield:  9966534.6 i/s - 1.07x  (± 0.00) slower
       block + yield:  8163458.3 i/s - 1.31x  (± 0.00) slower
          block.call:  7707679.1 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   241.963k i/100ms
      range#include?     9.851k i/100ms
       range#member?     9.863k i/100ms
       plain compare   369.567k i/100ms
Calculating -------------------------------------
        range#cover?      2.419M (± 0.1%) i/s -     12.098M in   5.000662s
      range#include?     98.371k (± 0.3%) i/s -    492.550k in   5.007100s
       range#member?     98.401k (± 0.6%) i/s -    493.150k in   5.011822s
       plain compare      3.695M (± 0.1%) i/s -     18.478M in   5.000283s

Comparison:
       plain compare:  3695463.7 i/s
        range#cover?:  2419310.8 i/s - 1.53x  (± 0.00) slower
       range#member?:    98400.8 i/s - 37.56x  (± 0.00) slower
      range#include?:    98371.1 i/s - 37.57x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
       String#match?   741.769k i/100ms
           String#=~   450.663k i/100ms
          Regexp#===   413.868k i/100ms
        String#match   345.363k i/100ms
Calculating -------------------------------------
       String#match?      7.412M (± 0.1%) i/s -     37.088M in   5.003860s
           String#=~      4.539M (± 0.1%) i/s -     22.984M in   5.063938s
          Regexp#===      4.140M (± 0.5%) i/s -     21.107M in   5.098509s
        String#match      3.443M (± 0.2%) i/s -     17.268M in   5.015751s

Comparison:
       String#match?:  7411975.0 i/s
           String#=~:  4538731.1 i/s - 1.63x  (± 0.00) slower
          Regexp#===:  4140011.2 i/s - 1.79x  (± 0.00) slower
        String#match:  3442795.9 i/s - 2.15x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   461.115k i/100ms
      String#casecmp   598.743k i/100ms
Calculating -------------------------------------
String#downcase + ==      4.614M (± 0.1%) i/s -     23.517M in   5.096314s
      String#casecmp      5.983M (± 0.1%) i/s -     29.937M in   5.004080s

Comparison:
      String#casecmp:  5982553.4 i/s
String#downcase + ==:  4614487.6 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
            String#+   420.996k i/100ms
       String#concat   445.542k i/100ms
       String#append   478.161k i/100ms
         "foo" "bar"   945.228k i/100ms
  "#{'foo'}#{'bar'}"   958.262k i/100ms
Calculating -------------------------------------
            String#+      4.212M (± 0.1%) i/s -     21.471M in   5.097449s
       String#concat      4.450M (± 0.1%) i/s -     22.277M in   5.006297s
       String#append      4.789M (± 0.1%) i/s -     24.386M in   5.092560s
         "foo" "bar"      9.417M (± 0.1%) i/s -     47.261M in   5.018631s
  "#{'foo'}#{'bar'}"      9.574M (± 0.1%) i/s -     47.913M in   5.004750s

Comparison:
  "#{'foo'}#{'bar'}":  9573529.8 i/s
         "foo" "bar":  9417195.7 i/s - 1.02x  (± 0.00) slower
       String#append:  4788598.9 i/s - 2.00x  (± 0.00) slower
       String#concat:  4449820.0 i/s - 2.15x  (± 0.00) slower
            String#+:  4212070.2 i/s - 2.27x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
           String#+@   787.599k i/100ms
          String#dup   420.140k i/100ms
Calculating -------------------------------------
           String#+@      7.865M (± 0.1%) i/s -     39.380M in   5.007195s
          String#dup      4.199M (± 0.2%) i/s -     21.007M in   5.002998s

Comparison:
           String#+@:  7864676.3 i/s
          String#dup:  4198892.8 i/s - 1.87x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
           String#=~   140.165k i/100ms
       String#match?   329.986k i/100ms
    String#end_with?   448.692k i/100ms
Calculating -------------------------------------
           String#=~      1.408M (± 1.1%) i/s -      7.148M in   5.076185s
       String#match?      3.298M (± 0.5%) i/s -     16.499M in   5.002524s
    String#end_with?      4.510M (± 0.1%) i/s -     22.883M in   5.073879s

Comparison:
    String#end_with?:  4510021.1 i/s
       String#match?:  3298269.7 i/s - 1.37x  (± 0.00) slower
           String#=~:  1408386.0 i/s - 3.20x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    85.258k i/100ms
          String#sub   103.350k i/100ms
String#dup["string"]=
                       140.420k i/100ms
Calculating -------------------------------------
         String#gsub    853.242k (± 0.4%) i/s -      4.348M in   5.096137s
          String#sub      1.094M (± 0.2%) i/s -      5.478M in   5.008396s
String#dup["string"]=
                          1.438M (± 0.3%) i/s -      7.302M in   5.078948s

Comparison:
String#dup["string"]=:  1437679.5 i/s
          String#sub:  1093676.9 i/s - 1.31x  (± 0.00) slower
         String#gsub:   853241.9 i/s - 1.68x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    74.014k i/100ms
           String#tr   271.555k i/100ms
Calculating -------------------------------------
         String#gsub    745.856k (± 0.3%) i/s -      3.775M in   5.060971s
           String#tr      2.715M (± 0.1%) i/s -     13.578M in   5.001756s

Comparison:
           String#tr:  2714597.4 i/s
         String#gsub:   745856.2 i/s - 3.64x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   906.124k i/100ms
         With Freeze     1.461M i/100ms
Calculating -------------------------------------
      Without Freeze      9.053M (± 0.1%) i/s -     45.306M in   5.004575s
         With Freeze     14.605M (± 0.1%) i/s -     73.031M in   5.000397s

Comparison:
         With Freeze: 14605128.0 i/s
      Without Freeze:  9052961.0 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.614k i/100ms
      String#squeeze   128.849k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     26.121k (± 0.2%) i/s -    130.700k in   5.003648s
      String#squeeze      1.293M (± 0.2%) i/s -      6.571M in   5.082530s

Comparison:
      String#squeeze:  1292925.8 i/s
 String#gsub/regex+/:    26121.0 i/s - 49.50x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
           String#=~   205.429k i/100ms
       String#match?   579.672k i/100ms
  String#start_with?   656.269k i/100ms
Calculating -------------------------------------
           String#=~      2.058M (± 0.2%) i/s -     10.477M in   5.090444s
       String#match?      5.793M (± 0.5%) i/s -     28.984M in   5.002894s
  String#start_with?      6.542M (± 0.1%) i/s -     32.813M in   5.015470s

Comparison:
  String#start_with?:  6542451.9 i/s
       String#match?:  5793496.4 i/s - 1.13x  (± 0.00) slower
           String#=~:  2058154.7 i/s - 3.18x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   164.228k i/100ms
    String#[0, n] ==    59.848k i/100ms
   String#[RANGE] ==    55.955k i/100ms
   String#[0...n] ==    35.032k i/100ms
Calculating -------------------------------------
  String#start_with?      1.645M (± 0.3%) i/s -      8.376M in   5.092684s
    String#[0, n] ==    599.602k (± 0.2%) i/s -      3.052M in   5.090466s
   String#[RANGE] ==    558.995k (± 0.5%) i/s -      2.798M in   5.005107s
   String#[0...n] ==    350.926k (± 0.1%) i/s -      1.787M in   5.091197s

Comparison:
  String#start_with?:  1644654.1 i/s
    String#[0, n] ==:   599602.5 i/s - 2.74x  (± 0.00) slower
   String#[RANGE] ==:   558994.9 i/s - 2.94x  (± 0.00) slower
   String#[0...n] ==:   350926.2 i/s - 4.69x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   139.545k i/100ms
 String#sub!'string'   100.323k i/100ms
String#gsub!'string'    61.724k i/100ms
  String#[/regexp/]=   117.638k i/100ms
 String#sub!/regexp/    91.096k i/100ms
String#gsub!/regexp/    47.254k i/100ms
Calculating -------------------------------------
  String#['string']=      1.397M (± 1.0%) i/s -      7.117M in   5.096636s
 String#sub!'string'      1.009M (± 1.1%) i/s -      5.116M in   5.069340s
String#gsub!'string'    615.148k (± 0.4%) i/s -      3.086M in   5.017098s
  String#[/regexp/]=      1.189M (± 0.5%) i/s -      6.000M in   5.044760s
 String#sub!/regexp/    930.074k (± 0.3%) i/s -      4.737M in   5.093183s
String#gsub!/regexp/    477.045k (± 0.4%) i/s -      2.410M in   5.051918s

Comparison:
  String#['string']=:  1396514.3 i/s
  String#[/regexp/]=:  1189286.5 i/s - 1.17x  (± 0.00) slower
 String#sub!'string':  1009417.9 i/s - 1.38x  (± 0.00) slower
 String#sub!/regexp/:   930073.9 i/s - 1.50x  (± 0.00) slower
String#gsub!'string':   615147.8 i/s - 2.27x  (± 0.00) slower
String#gsub!/regexp/:   477044.7 i/s - 2.93x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
          String#sub   113.283k i/100ms
        String#chomp   394.646k i/100ms
String#delete_suffix   434.545k i/100ms
Calculating -------------------------------------
          String#sub      1.132M (± 0.3%) i/s -      5.664M in   5.002557s
        String#chomp      3.944M (± 0.1%) i/s -     19.732M in   5.003142s
String#delete_suffix      4.346M (± 0.1%) i/s -     22.162M in   5.099414s

Comparison:
String#delete_suffix:  4345953.4 i/s
        String#chomp:  3943983.5 i/s - 1.10x  (± 0.00) slower
          String#sub:  1132263.2 i/s - 3.84x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   450.686k i/100ms
          String#sub   116.582k i/100ms
Calculating -------------------------------------
String#delete_prefix      4.504M (± 0.1%) i/s -     22.534M in   5.002723s
          String#sub      1.162M (± 0.5%) i/s -      5.829M in   5.015793s

Comparison:
String#delete_prefix:  4504409.3 i/s
          String#sub:  1162179.8 i/s - 3.88x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   440.384k i/100ms
    String#unpack[0]   329.195k i/100ms
Calculating -------------------------------------
      String#unpack1      4.377M (± 0.1%) i/s -     22.019M in   5.031010s
    String#unpack[0]      3.293M (± 0.1%) i/s -     16.789M in   5.097838s

Comparison:
      String#unpack1:  4376696.9 i/s
    String#unpack[0]:  3293349.1 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    19.758k i/100ms
          Time.parse     6.970k i/100ms
Calculating -------------------------------------
        Time.iso8601    199.166k (± 0.3%) i/s -      1.008M in   5.059435s
          Time.parse     69.931k (± 0.3%) i/s -    355.470k in   5.083215s

Comparison:
        Time.iso8601:   199165.9 i/s
          Time.parse:    69930.6 i/s - 2.85x  (± 0.00) slower

