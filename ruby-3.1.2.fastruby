$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       489.892k i/100ms
Function with splat arguments
                         9.113k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          4.939M (± 0.4%) i/s -     24.984M in   5.059041s
Function with splat arguments
                         89.237k (± 7.6%) i/s -    446.537k in   5.043385s

Comparison:
Function with single Array argument:  4938658.1 i/s
Function with splat arguments:    89237.4 i/s - 55.34x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   812.578k i/100ms
Sequential Assignment
                       840.329k i/100ms
Calculating -------------------------------------
 Parallel Assignment      8.139M (± 0.4%) i/s -     41.441M in   5.091689s
Sequential Assignment
                          8.353M (± 0.3%) i/s -     42.016M in   5.029878s

Comparison:
Sequential Assignment:  8353469.7 i/s
 Parallel Assignment:  8139207.1 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   300.751k i/100ms
       attr_accessor   339.781k i/100ms
Calculating -------------------------------------
   getter_and_setter      2.997M (± 0.2%) i/s -     15.038M in   5.017818s
       attr_accessor      3.389M (± 0.4%) i/s -     16.989M in   5.012532s

Comparison:
       attr_accessor:  3389362.9 i/s
   getter_and_setter:  2996844.6 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    55.779k i/100ms
         respond_to?   502.406k i/100ms
Calculating -------------------------------------
      begin...rescue    566.749k (± 0.6%) i/s -      2.845M in   5.019561s
         respond_to?      5.029M (± 0.5%) i/s -     25.623M in   5.095572s

Comparison:
         respond_to?:  5028529.0 i/s
      begin...rescue:   566748.5 i/s - 8.87x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
              normal   194.835k i/100ms
             &method    74.108k i/100ms
Calculating -------------------------------------
              normal      1.947M (± 0.4%) i/s -      9.742M in   5.004599s
             &method    738.516k (± 0.3%) i/s -      3.705M in   5.017403s

Comparison:
              normal:  1946595.9 i/s
             &method:   738516.2 i/s - 2.64x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       160.000  i/100ms
       define_method   199.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.568k (±20.4%) i/s -      7.040k in   5.006368s
       define_method      2.182k (±19.9%) i/s -     10.149k in   5.066753s

Comparison:
       define_method:     2182.1 i/s
module_eval with string:     1568.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
         Float#round   120.825k i/100ms
       Kernel#format   129.692k i/100ms
            String#%   113.528k i/100ms
Calculating -------------------------------------
         Float#round      1.211M (± 0.5%) i/s -      6.162M in   5.086857s
       Kernel#format      1.296M (± 0.4%) i/s -      6.485M in   5.003389s
            String#%      1.142M (± 0.3%) i/s -      5.790M in   5.071476s

Comparison:
       Kernel#format:  1296064.5 i/s
         Float#round:  1211402.2 i/s - 1.07x  (± 0.00) slower
            String#%:  1141677.0 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
                Hash   578.651k i/100ms
          OpenStruct   310.662k i/100ms
Calculating -------------------------------------
                Hash      5.786M (± 0.3%) i/s -     28.933M in   5.000567s
          OpenStruct      3.107M (± 0.4%) i/s -     15.844M in   5.099258s

Comparison:
                Hash:  5785905.5 i/s
          OpenStruct:  3107117.4 i/s - 1.86x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
                Hash   733.713k i/100ms
          OpenStruct     5.909k i/100ms
Calculating -------------------------------------
                Hash      7.365M (± 0.3%) i/s -     37.419M in   5.080452s
          OpenStruct     58.842k (± 3.5%) i/s -    295.450k in   5.027298s

Comparison:
                Hash:  7365424.1 i/s
          OpenStruct:    58841.5 i/s - 125.17x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   401.516k i/100ms
  ancestors.include?    64.011k i/100ms
Calculating -------------------------------------
  less than or equal      3.976M (± 0.3%) i/s -     20.076M in   5.049089s
  ancestors.include?    651.378k (± 0.4%) i/s -      3.265M in   5.011874s

Comparison:
  less than or equal:  3976169.9 i/s
  ancestors.include?:   651377.8 i/s - 6.10x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.489  (± 0.0%) i/s -      3.000  in   6.138718s
         Kernel loop      0.163  (± 0.0%) i/s -      1.000  in   6.143243s

Comparison:
          While Loop:        0.5 i/s
         Kernel loop:        0.2 i/s - 3.00x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.053M i/100ms
         Array#first   849.317k i/100ms
Calculating -------------------------------------
           Array#[0]     10.548M (± 0.4%) i/s -     53.708M in   5.091693s
         Array#first      8.466M (± 0.3%) i/s -     42.466M in   5.015955s

Comparison:
           Array#[0]: 10548312.3 i/s
         Array#first:  8466214.9 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.130M i/100ms
          Array#last   944.451k i/100ms
Calculating -------------------------------------
          Array#[-1]     11.325M (± 0.4%) i/s -     57.609M in   5.086950s
          Array#last      9.445M (± 0.4%) i/s -     48.167M in   5.099617s

Comparison:
          Array#[-1]: 11325058.5 i/s
          Array#last:  9445367.9 i/s - 1.20x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    60.266k i/100ms
Calculating -------------------------------------
                find      0.179  (± 0.0%) i/s -      1.000  in   5.595666s
             bsearch    601.749k (± 0.4%) i/s -      3.013M in   5.007663s

Comparison:
             bsearch:   601748.6 i/s
                find:        0.2 i/s - 3367184.03x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    11.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    112.057  (± 2.7%) i/s -    561.000  in   5.009884s
        Array#insert      1.104  (± 0.0%) i/s -      6.000  in   5.441801s

Comparison:
       Array#unshift:      112.1 i/s
        Array#insert:        1.1 i/s - 101.53x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
        Array#length     1.530M i/100ms
          Array#size     1.502M i/100ms
         Array#count     1.165M i/100ms
Calculating -------------------------------------
        Array#length     15.315M (± 0.4%) i/s -     78.012M in   5.093846s
          Array#size     14.976M (± 0.3%) i/s -     75.109M in   5.015191s
         Array#count     11.699M (± 0.3%) i/s -     59.434M in   5.080489s

Comparison:
        Array#length: 15315202.2 i/s
          Array#size: 14976476.1 i/s - 1.02x  (± 0.00) slower
         Array#count: 11698579.1 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    27.209k i/100ms
        Array#sample   703.145k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    272.332k (± 0.7%) i/s -      1.388M in   5.095745s
        Array#sample      7.047M (± 0.4%) i/s -     35.860M in   5.088927s

Comparison:
        Array#sample:  7046874.3 i/s
 Array#shuffle.first:   272331.7 i/s - 25.88x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    41.181k i/100ms
          Date.parse    20.510k i/100ms
Calculating -------------------------------------
        Date.iso8601    412.072k (± 0.6%) i/s -      2.100M in   5.096923s
          Date.parse    205.097k (± 0.6%) i/s -      1.026M in   5.000276s

Comparison:
        Date.iso8601:   412071.7 i/s
          Date.parse:   205096.6 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    11.447k i/100ms
           Array#map    16.601k i/100ms
Calculating -------------------------------------
   Array#each + push    114.423k (± 0.4%) i/s -    572.350k in   5.002102s
           Array#map    166.039k (± 0.5%) i/s -    846.651k in   5.099253s

Comparison:
           Array#map:   166038.8 i/s
   Array#each + push:   114423.4 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
            For loop    20.305k i/100ms
               #each    22.483k i/100ms
Calculating -------------------------------------
            For loop    202.578k (± 0.4%) i/s -      1.015M in   5.011720s
               #each    225.595k (± 0.5%) i/s -      1.147M in   5.082819s

Comparison:
               #each:   225594.9 i/s
            For loop:   202578.2 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
          While Loop    24.185k i/100ms
     each_with_index    12.467k i/100ms
Calculating -------------------------------------
          While Loop    240.063k (± 0.2%) i/s -      1.209M in   5.037245s
     each_with_index    124.154k (± 0.3%) i/s -    623.350k in   5.020845s

Comparison:
          While Loop:   240063.2 i/s
     each_with_index:   124153.5 i/s - 1.93x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    44.794k i/100ms
      inject to_proc     1.311k i/100ms
        inject block     1.344k i/100ms
Calculating -------------------------------------
       inject symbol    449.879k (± 0.5%) i/s -      2.284M in   5.078124s
      inject to_proc     13.144k (± 0.6%) i/s -     66.861k in   5.086948s
        inject block     13.417k (± 0.3%) i/s -     67.200k in   5.008660s

Comparison:
       inject symbol:   449879.4 i/s
        inject block:    13416.9 i/s - 33.53x  (± 0.00) slower
      inject to_proc:    13144.1 i/s - 34.23x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     4.296k i/100ms
   Array#map.flatten     2.347k i/100ms
      Array#flat_map     5.535k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     43.046k (± 0.5%) i/s -    219.096k in   5.089856s
   Array#map.flatten     23.685k (± 0.5%) i/s -    119.697k in   5.053875s
      Array#flat_map     55.572k (± 0.4%) i/s -    282.285k in   5.079712s

Comparison:
      Array#flat_map:    55572.1 i/s
Array#map.flatten(1):    43046.5 i/s - 1.29x  (± 0.00) slower
   Array#map.flatten:    23684.7 i/s - 2.35x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    21.738k i/100ms
  Array#reverse_each    22.322k i/100ms
Calculating -------------------------------------
  Array#reverse.each    217.064k (± 0.4%) i/s -      1.087M in   5.007367s
  Array#reverse_each    222.873k (± 0.3%) i/s -      1.116M in   5.007815s

Comparison:
  Array#reverse_each:   222873.2 i/s
  Array#reverse.each:   217064.0 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        12.875k i/100ms
   Enumerable#detect    51.588k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        129.192k (± 0.4%) i/s -      2.588M in  20.031568s
   Enumerable#detect    516.102k (± 0.4%) i/s -     10.369M in  20.091639s

Comparison:
   Enumerable#detect:   516101.5 i/s
Enumerable#select.first:   129192.0 i/s - 3.99x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       151.142k i/100ms
Enumerable#select.last
                        11.232k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.513M (± 0.4%) i/s -      7.708M in   5.093356s
Enumerable#select.last
                        111.424k (± 0.5%) i/s -    561.600k in   5.040322s

Comparison:
Enumerable#reverse.detect:  1513417.3 i/s
Enumerable#select.last:   111424.5 i/s - 13.58x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.731k i/100ms
  Enumerable#sort_by     2.682k i/100ms
     Enumerable#sort     1.521k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         27.262k (± 0.3%) i/s -    136.550k in   5.008874s
  Enumerable#sort_by     26.864k (± 0.5%) i/s -    136.782k in   5.091681s
     Enumerable#sort     15.219k (± 0.4%) i/s -     77.571k in   5.096978s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    27261.9 i/s
  Enumerable#sort_by:    26864.5 i/s - 1.01x  (± 0.00) slower
     Enumerable#sort:    15219.3 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    11.390k i/100ms
Enumerable#sort_by...first
                         5.094k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    113.584k (± 0.4%) i/s -    569.500k in   5.013992s
Enumerable#sort_by...first
                         50.629k (± 0.5%) i/s -    254.700k in   5.030865s

Comparison:
   Enumerable#min_by:   113583.9 i/s
Enumerable#sort_by...first:    50628.7 i/s - 2.24x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   231.399k i/100ms
            Hash#dup   171.994k i/100ms
Calculating -------------------------------------
              Hash[]      2.269M (± 1.8%) i/s -     11.570M in   5.101574s
            Hash#dup      1.708M (± 1.1%) i/s -      8.600M in   5.037023s

Comparison:
              Hash[]:  2268649.4 i/s
            Hash#dup:  1707513.8 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.027M i/100ms
  Hash#fetch, symbol   814.887k i/100ms
     Hash#[], string   861.809k i/100ms
  Hash#fetch, string   483.443k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     10.222M (± 0.2%) i/s -     51.338M in   5.022516s
  Hash#fetch, symbol      8.136M (± 0.3%) i/s -     40.744M in   5.008275s
     Hash#[], string      8.603M (± 0.5%) i/s -     43.090M in   5.008924s
  Hash#fetch, string      4.832M (± 0.4%) i/s -     24.172M in   5.003043s

Comparison:
     Hash#[], symbol: 10221603.8 i/s
     Hash#[], string:  8602947.2 i/s - 1.19x  (± 0.00) slower
  Hash#fetch, symbol:  8135502.4 i/s - 1.26x  (± 0.00) slower
  Hash#fetch, string:  4831578.9 i/s - 2.12x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   579.994k i/100ms
             Hash#[]   643.452k i/100ms
          Hash#[] ||   590.694k i/100ms
          Hash#[] &&   264.767k i/100ms
          Hash#fetch   402.832k i/100ms
 Hash#fetch fallback   234.100k i/100ms
Calculating -------------------------------------
            Hash#dig      5.797M (± 0.4%) i/s -     29.000M in   5.002605s
             Hash#[]      6.444M (± 0.3%) i/s -     32.816M in   5.092478s
          Hash#[] ||      5.859M (± 0.3%) i/s -     29.535M in   5.040885s
          Hash#[] &&      2.639M (± 0.4%) i/s -     13.238M in   5.016659s
          Hash#fetch      4.024M (± 0.3%) i/s -     20.142M in   5.004811s
 Hash#fetch fallback      2.334M (± 0.3%) i/s -     11.705M in   5.015612s

Comparison:
             Hash#[]:  6444091.0 i/s
          Hash#[] ||:  5859099.9 i/s - 1.10x  (± 0.00) slower
            Hash#dig:  5797003.3 i/s - 1.11x  (± 0.00) slower
          Hash#fetch:  4024480.0 i/s - 1.60x  (± 0.00) slower
          Hash#[] &&:  2638911.0 i/s - 2.44x  (± 0.00) slower
 Hash#fetch fallback:  2333738.6 i/s - 2.76x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   992.603k i/100ms
  Hash#fetch + block     1.002M i/100ms
    Hash#fetch + arg   685.817k i/100ms
Calculating -------------------------------------
  Hash#fetch + const      9.926M (± 0.3%) i/s -     49.630M in   5.000154s
  Hash#fetch + block     10.038M (± 0.4%) i/s -     51.115M in   5.092300s
    Hash#fetch + arg      6.831M (± 0.2%) i/s -     34.291M in   5.019865s

Comparison:
  Hash#fetch + block: 10037848.2 i/s
  Hash#fetch + const:  9925842.1 i/s - 1.01x  (± 0.00) slower
    Hash#fetch + arg:  6831048.9 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    16.202k i/100ms
         sort + to_h     7.109k i/100ms
Calculating -------------------------------------
      sort_by + to_h    161.615k (± 0.3%) i/s -    810.100k in   5.012588s
         sort + to_h     71.027k (± 0.4%) i/s -    355.450k in   5.004473s

Comparison:
      sort_by + to_h:   161614.5 i/s
         sort + to_h:    71027.4 i/s - 2.28x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   114.242k i/100ms
       Hash#each_key   120.432k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.143M (± 0.9%) i/s -      5.826M in   5.096192s
       Hash#each_key      1.199M (± 0.3%) i/s -      6.022M in   5.021850s

Comparison:
       Hash#each_key:  1199092.1 i/s
      Hash#keys.each:  1143375.4 i/s - 1.05x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   649.000  i/100ms
           Hash#key?   698.832k i/100ms
Calculating -------------------------------------
  Hash#keys.include?      6.399k (± 4.9%) i/s -     32.450k in   5.085679s
           Hash#key?      7.004M (± 0.4%) i/s -     35.640M in   5.088569s

Comparison:
           Hash#key?:  7004106.1 i/s
  Hash#keys.include?:     6399.0 i/s - 1094.55x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     2.475k i/100ms
            Hash#[]=     5.885k i/100ms
Calculating -------------------------------------
         Hash#merge!     24.865k (± 0.4%) i/s -    126.225k in   5.076516s
            Hash#[]=     59.484k (± 1.8%) i/s -    300.135k in   5.047284s

Comparison:
            Hash#[]=:    59484.2 i/s
         Hash#merge!:    24864.9 i/s - 2.39x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         3.218k i/100ms
      Hash#merge({})     2.498k i/100ms
 Hash#dup#merge!({})     1.838k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         31.988k (± 0.5%) i/s -    160.900k in   5.030186s
      Hash#merge({})     24.838k (± 0.3%) i/s -    124.900k in   5.028747s
 Hash#dup#merge!({})     18.351k (± 0.4%) i/s -     91.900k in   5.008096s

Comparison:
{}#merge!(Hash) do end:    31987.7 i/s
      Hash#merge({}):    24837.5 i/s - 1.29x  (± 0.00) slower
 Hash#dup#merge!({}):    18350.6 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   236.424k i/100ms
          Hash#merge   202.371k i/100ms
Calculating -------------------------------------
        Hash#**other      2.368M (± 0.4%) i/s -     12.058M in   5.092250s
          Hash#merge      2.020M (± 0.4%) i/s -     10.119M in   5.010327s

Comparison:
        Hash#**other:  2367883.2 i/s
          Hash#merge:  2019569.5 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   978.000  i/100ms
         Hash#merge!     2.466k i/100ms
Calculating -------------------------------------
          Hash#merge      9.830k (± 0.9%) i/s -     49.878k in   5.074460s
         Hash#merge!     24.752k (± 0.4%) i/s -    125.766k in   5.081158s

Comparison:
         Hash#merge!:    24751.9 i/s
          Hash#merge:     9830.0 i/s - 2.52x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      260.668k i/100ms
Array#each             137.832k i/100ms
Array#each_w/_object   107.875k i/100ms
Hash#select-include     44.125k i/100ms
Calculating -------------------------------------
Hash#native-slice         2.611M (± 0.4%) i/s -     13.294M in   5.091332s
Array#each                1.376M (± 0.5%) i/s -      6.892M in   5.009779s
Array#each_w/_object      1.076M (± 0.3%) i/s -      5.394M in   5.013520s
Hash#select-include     441.145k (± 1.3%) i/s -      2.206M in   5.002003s

Comparison:
Hash#native-slice   :  2611158.3 i/s
Array#each          :  1375660.0 i/s - 1.90x  (± 0.00) slower
Array#each_w/_object:  1075848.3 i/s - 2.43x  (± 0.00) slower
Hash#select-include :   441145.5 i/s - 5.92x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   663.000  i/100ms
         Hash#value?   543.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      6.524k (± 4.5%) i/s -     33.150k in   5.093729s
         Hash#value?      5.433k (± 0.3%) i/s -     27.693k in   5.096825s

Comparison:
Hash#values.include?:     6523.6 i/s
         Hash#value?:     5433.4 i/s - 1.20x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
                call   405.805k i/100ms
                send   323.168k i/100ms
      method_missing   235.176k i/100ms
Calculating -------------------------------------
                call      4.058M (± 0.5%) i/s -     20.290M in   5.000333s
                send      3.241M (± 0.4%) i/s -     16.482M in   5.085793s
      method_missing      2.354M (± 0.4%) i/s -     11.994M in   5.095827s

Comparison:
                call:  4057887.5 i/s
                send:  3240764.6 i/s - 1.25x  (± 0.00) slower
      method_missing:  2353725.8 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
               Block     4.574k i/100ms
      Symbol#to_proc     5.156k i/100ms
Calculating -------------------------------------
               Block     45.811k (± 0.4%) i/s -    233.274k in   5.092176s
      Symbol#to_proc     51.435k (± 0.5%) i/s -    257.800k in   5.012303s

Comparison:
      Symbol#to_proc:    51434.9 i/s
               Block:    45810.9 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
          block.call   642.250k i/100ms
       block + yield   681.155k i/100ms
        unused block   902.473k i/100ms
               yield   858.032k i/100ms
Calculating -------------------------------------
          block.call      6.425M (± 0.3%) i/s -     32.755M in   5.098073s
       block + yield      6.819M (± 0.4%) i/s -     34.739M in   5.094856s
        unused block      9.025M (± 0.4%) i/s -     45.124M in   5.000181s
               yield      8.571M (± 0.6%) i/s -     42.902M in   5.005419s

Comparison:
        unused block:  9024521.8 i/s
               yield:  8571384.2 i/s - 1.05x  (± 0.00) slower
       block + yield:  6818533.0 i/s - 1.32x  (± 0.00) slower
          block.call:  6424996.3 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   197.270k i/100ms
      range#include?     8.355k i/100ms
       range#member?     8.355k i/100ms
       plain compare   297.928k i/100ms
Calculating -------------------------------------
        range#cover?      1.971M (± 0.3%) i/s -      9.864M in   5.005209s
      range#include?     83.635k (± 0.4%) i/s -    426.105k in   5.094933s
       range#member?     83.523k (± 0.4%) i/s -    417.750k in   5.001690s
       plain compare      2.972M (± 0.6%) i/s -     14.896M in   5.012268s

Comparison:
       plain compare:  2972085.6 i/s
        range#cover?:  1970668.4 i/s - 1.51x  (± 0.00) slower
      range#include?:    83634.6 i/s - 35.54x  (± 0.00) slower
       range#member?:    83523.4 i/s - 35.58x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
       String#match?   593.011k i/100ms
           String#=~   378.657k i/100ms
          Regexp#===   357.120k i/100ms
        String#match   288.917k i/100ms
Calculating -------------------------------------
       String#match?      6.095M (± 0.4%) i/s -     30.837M in   5.059068s
           String#=~      3.769M (± 0.6%) i/s -     18.933M in   5.023924s
          Regexp#===      3.581M (± 0.4%) i/s -     18.213M in   5.086480s
        String#match      2.872M (± 0.6%) i/s -     14.446M in   5.030085s

Comparison:
       String#match?:  6095396.1 i/s
           String#=~:  3768672.3 i/s - 1.62x  (± 0.00) slower
          Regexp#===:  3580760.4 i/s - 1.70x  (± 0.00) slower
        String#match:  2871996.8 i/s - 2.12x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   389.640k i/100ms
      String#casecmp   500.258k i/100ms
Calculating -------------------------------------
String#downcase + ==      3.899M (± 0.4%) i/s -     19.872M in   5.096281s
      String#casecmp      4.982M (± 0.3%) i/s -     25.013M in   5.020750s

Comparison:
      String#casecmp:  4981947.5 i/s
String#downcase + ==:  3899319.1 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
            String#+   353.395k i/100ms
       String#concat   372.455k i/100ms
       String#append   400.342k i/100ms
         "foo" "bar"   787.059k i/100ms
  "#{'foo'}#{'bar'}"   792.184k i/100ms
Calculating -------------------------------------
            String#+      3.533M (± 0.3%) i/s -     17.670M in   5.001272s
       String#concat      3.730M (± 0.4%) i/s -     18.995M in   5.092605s
       String#append      4.005M (± 0.4%) i/s -     20.417M in   5.097985s
         "foo" "bar"      7.861M (± 0.4%) i/s -     39.353M in   5.006004s
  "#{'foo'}#{'bar'}"      7.909M (± 0.3%) i/s -     39.609M in   5.007972s

Comparison:
  "#{'foo'}#{'bar'}":  7909320.5 i/s
         "foo" "bar":  7861264.0 i/s - same-ish: difference falls within error
       String#append:  4005064.9 i/s - 1.97x  (± 0.00) slower
       String#concat:  3730014.9 i/s - 2.12x  (± 0.00) slower
            String#+:  3533079.6 i/s - 2.24x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
           String#+@   630.853k i/100ms
          String#dup   349.411k i/100ms
Calculating -------------------------------------
           String#+@      6.296M (± 0.4%) i/s -     31.543M in   5.010173s
          String#dup      3.507M (± 0.4%) i/s -     17.820M in   5.081817s

Comparison:
           String#+@:  6295798.2 i/s
          String#dup:  3506654.7 i/s - 1.80x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
           String#=~   113.348k i/100ms
       String#match?   272.249k i/100ms
    String#end_with?   368.222k i/100ms
Calculating -------------------------------------
           String#=~      1.144M (± 1.5%) i/s -      5.781M in   5.054059s
       String#match?      2.728M (± 0.4%) i/s -     13.885M in   5.089162s
    String#end_with?      3.671M (± 0.6%) i/s -     18.411M in   5.016074s

Comparison:
    String#end_with?:  3670544.3 i/s
       String#match?:  2728322.8 i/s - 1.35x  (± 0.00) slower
           String#=~:  1144054.5 i/s - 3.21x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    71.366k i/100ms
          String#sub    89.231k i/100ms
String#dup["string"]=
                       117.587k i/100ms
Calculating -------------------------------------
         String#gsub    709.116k (± 0.7%) i/s -      3.568M in   5.032288s
          String#sub    908.908k (± 0.3%) i/s -      4.551M in   5.006901s
String#dup["string"]=
                          1.165M (± 0.7%) i/s -      5.879M in   5.045004s

Comparison:
String#dup["string"]=:  1165445.1 i/s
          String#sub:   908908.2 i/s - 1.28x  (± 0.00) slower
         String#gsub:   709116.3 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    63.085k i/100ms
           String#tr   224.384k i/100ms
Calculating -------------------------------------
         String#gsub    629.704k (± 0.5%) i/s -      3.154M in   5.009213s
           String#tr      2.252M (± 0.4%) i/s -     11.444M in   5.080654s

Comparison:
           String#tr:  2252417.0 i/s
         String#gsub:   629704.2 i/s - 3.58x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   783.561k i/100ms
         With Freeze     1.192M i/100ms
Calculating -------------------------------------
      Without Freeze      7.822M (± 0.3%) i/s -     39.178M in   5.008704s
         With Freeze     11.868M (± 0.3%) i/s -     59.602M in   5.022246s

Comparison:
         With Freeze: 11867666.3 i/s
      Without Freeze:  7822071.7 i/s - 1.52x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     2.196k i/100ms
      String#squeeze   107.919k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     21.899k (± 0.3%) i/s -    109.800k in   5.013901s
      String#squeeze      1.074M (± 2.1%) i/s -      5.396M in   5.026436s

Comparison:
      String#squeeze:  1074002.7 i/s
 String#gsub/regex+/:    21899.4 i/s - 49.04x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
           String#=~   173.298k i/100ms
       String#match?   491.144k i/100ms
  String#start_with?   552.627k i/100ms
Calculating -------------------------------------
           String#=~      1.735M (± 0.3%) i/s -      8.838M in   5.093856s
       String#match?      4.915M (± 0.4%) i/s -     25.048M in   5.096549s
  String#start_with?      5.518M (± 0.6%) i/s -     27.631M in   5.007530s

Comparison:
  String#start_with?:  5518194.7 i/s
       String#match?:  4914846.4 i/s - 1.12x  (± 0.00) slower
           String#=~:  1735091.3 i/s - 3.18x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   137.268k i/100ms
    String#[0, n] ==    50.313k i/100ms
   String#[RANGE] ==    46.469k i/100ms
   String#[0...n] ==    29.451k i/100ms
Calculating -------------------------------------
  String#start_with?      1.371M (± 0.3%) i/s -      6.863M in   5.007432s
    String#[0, n] ==    499.076k (± 0.4%) i/s -      2.516M in   5.040702s
   String#[RANGE] ==    466.305k (± 0.5%) i/s -      2.370M in   5.082456s
   String#[0...n] ==    293.005k (± 0.5%) i/s -      1.473M in   5.025816s

Comparison:
  String#start_with?:  1370659.1 i/s
    String#[0, n] ==:   499076.3 i/s - 2.75x  (± 0.00) slower
   String#[RANGE] ==:   466304.6 i/s - 2.94x  (± 0.00) slower
   String#[0...n] ==:   293004.8 i/s - 4.68x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   116.422k i/100ms
 String#sub!'string'    82.964k i/100ms
String#gsub!'string'    52.337k i/100ms
  String#[/regexp/]=   103.952k i/100ms
 String#sub!/regexp/    77.459k i/100ms
String#gsub!/regexp/    39.883k i/100ms
Calculating -------------------------------------
  String#['string']=      1.172M (± 0.6%) i/s -      5.938M in   5.065919s
 String#sub!'string'    836.188k (± 0.7%) i/s -      4.231M in   5.060307s
String#gsub!'string'    522.704k (± 0.5%) i/s -      2.617M in   5.006501s
  String#[/regexp/]=      1.046M (± 0.9%) i/s -      5.302M in   5.067412s
 String#sub!/regexp/    779.592k (± 0.5%) i/s -      3.950M in   5.067393s
String#gsub!/regexp/    399.567k (± 0.5%) i/s -      2.034M in   5.090728s

Comparison:
  String#['string']=:  1172092.7 i/s
  String#[/regexp/]=:  1046285.9 i/s - 1.12x  (± 0.00) slower
 String#sub!'string':   836187.5 i/s - 1.40x  (± 0.00) slower
 String#sub!/regexp/:   779592.3 i/s - 1.50x  (± 0.00) slower
String#gsub!'string':   522703.8 i/s - 2.24x  (± 0.00) slower
String#gsub!/regexp/:   399567.2 i/s - 2.93x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
          String#sub    94.162k i/100ms
        String#chomp   331.793k i/100ms
String#delete_suffix   363.689k i/100ms
Calculating -------------------------------------
          String#sub    930.004k (± 0.6%) i/s -      4.708M in   5.062652s
        String#chomp      3.324M (± 0.5%) i/s -     16.921M in   5.090366s
String#delete_suffix      3.640M (± 0.3%) i/s -     18.548M in   5.096177s

Comparison:
String#delete_suffix:  3639647.3 i/s
        String#chomp:  3324282.2 i/s - 1.09x  (± 0.00) slower
          String#sub:   930004.0 i/s - 3.91x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   374.907k i/100ms
          String#sub    95.166k i/100ms
Calculating -------------------------------------
String#delete_prefix      3.751M (± 0.3%) i/s -     19.120M in   5.097933s
          String#sub    944.200k (± 0.5%) i/s -      4.758M in   5.039629s

Comparison:
String#delete_prefix:  3750633.6 i/s
          String#sub:   944200.4 i/s - 3.97x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   362.994k i/100ms
    String#unpack[0]   279.676k i/100ms
Calculating -------------------------------------
      String#unpack1      3.665M (± 0.5%) i/s -     18.513M in   5.051868s
    String#unpack[0]      2.813M (± 0.4%) i/s -     14.263M in   5.070348s

Comparison:
      String#unpack1:  3664610.3 i/s
    String#unpack[0]:  2813162.4 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    17.120k i/100ms
          Time.parse     5.769k i/100ms
Calculating -------------------------------------
        Time.iso8601    171.528k (± 0.6%) i/s -    873.120k in   5.090434s
          Time.parse     57.620k (± 0.3%) i/s -    288.450k in   5.006141s

Comparison:
        Time.iso8601:   171527.6 i/s
          Time.parse:    57619.8 i/s - 2.98x  (± 0.00) slower

