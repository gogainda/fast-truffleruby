$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       113.510M i/100ms
Function with splat arguments
                         1.155k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.135B (± 1.0%) i/s -      5.789B in   5.099329s
Function with splat arguments
                         13.654k (± 6.0%) i/s -     68.145k in   5.012078s

Comparison:
Function with single Array argument: 1135356738.6 i/s
Function with splat arguments:    13654.5 i/s - 83149.10x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   113.531M i/100ms
Sequential Assignment
                       113.656M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.136B (± 0.7%) i/s -      5.790B in   5.098459s
Sequential Assignment
                          1.137B (± 0.9%) i/s -      5.796B in   5.098105s

Comparison:
Sequential Assignment: 1137072452.8 i/s
 Parallel Assignment: 1135707939.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   114.244M i/100ms
       attr_accessor   113.418M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.137B (± 0.9%) i/s -      5.712B in   5.023649s
       attr_accessor      1.136B (± 1.1%) i/s -      5.784B in   5.090389s

Comparison:
   getter_and_setter: 1137165389.9 i/s
       attr_accessor: 1136450701.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     7.598k i/100ms
         respond_to?   113.744M i/100ms
Calculating -------------------------------------
      begin...rescue     80.265k (± 4.4%) i/s -    402.694k in   5.027115s
         respond_to?      1.136B (± 0.6%) i/s -      5.687B in   5.007269s

Comparison:
         respond_to?: 1135822151.9 i/s
      begin...rescue:    80265.5 i/s - 14150.82x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   113.476M i/100ms
             &method   113.944M i/100ms
Calculating -------------------------------------
              normal      1.136B (± 0.8%) i/s -      5.787B in   5.094047s
             &method      1.139B (± 1.2%) i/s -      5.697B in   5.003635s

Comparison:
             &method: 1138757425.9 i/s
              normal: 1136153721.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       140.000  i/100ms
       define_method   144.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.275k (±58.9%) i/s -      4.760k in   5.444268s
       define_method      6.194k (±44.9%) i/s -      9.072k in   5.080582s

Comparison:
       define_method:     6194.4 i/s
module_eval with string:     2274.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    82.157k i/100ms
       Kernel#format    73.899k i/100ms
            String#%    74.296k i/100ms
Calculating -------------------------------------
         Float#round    878.788k (± 2.3%) i/s -      4.436M in   5.051201s
       Kernel#format    742.296k (± 2.0%) i/s -      3.769M in   5.079291s
            String#%    741.925k (± 2.0%) i/s -      3.715M in   5.008956s

Comparison:
         Float#round:   878787.9 i/s
       Kernel#format:   742295.8 i/s - 1.18x  (± 0.00) slower
            String#%:   741924.8 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   114.012M i/100ms
          OpenStruct   113.738M i/100ms
Calculating -------------------------------------
                Hash      1.135B (± 0.6%) i/s -      5.701B in   5.024298s
          OpenStruct      1.136B (± 0.9%) i/s -      5.687B in   5.006410s

Comparison:
          OpenStruct: 1136028081.8 i/s
                Hash: 1134653516.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   114.008M i/100ms
          OpenStruct     3.418k i/100ms
Calculating -------------------------------------
                Hash      1.134B (± 0.7%) i/s -      5.700B in   5.027770s
          OpenStruct     36.423k (±12.9%) i/s -    177.736k in   5.006824s

Comparison:
                Hash: 1133843791.7 i/s
          OpenStruct:    36422.5 i/s - 31130.27x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   831.681k i/100ms
  ancestors.include?   158.729k i/100ms
Calculating -------------------------------------
  less than or equal      9.047M (± 3.2%) i/s -     45.742M in   5.061772s
  ancestors.include?      1.652M (± 4.3%) i/s -      8.254M in   5.006327s

Comparison:
  less than or equal:  9046548.2 i/s
  ancestors.include?:  1651910.6 i/s - 5.48x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     11.348  (± 0.0%) i/s -     57.000  in   5.023088s
         Kernel loop     11.364  (± 0.0%) i/s -     57.000  in   5.016224s

Comparison:
         Kernel loop:       11.4 i/s
          While Loop:       11.3 i/s - 1.00x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   113.286M i/100ms
         Array#first   113.767M i/100ms
Calculating -------------------------------------
           Array#[0]      1.137B (± 1.1%) i/s -      5.778B in   5.082182s
         Array#first      1.136B (± 0.6%) i/s -      5.688B in   5.007925s

Comparison:
           Array#[0]: 1136973463.8 i/s
         Array#first: 1135900263.7 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   113.480M i/100ms
          Array#last   113.682M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.138B (± 1.2%) i/s -      5.787B in   5.084186s
          Array#last      1.135B (± 0.8%) i/s -      5.684B in   5.006957s

Comparison:
          Array#[-1]: 1138493635.1 i/s
          Array#last: 1135315858.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   668.674k i/100ms
Calculating -------------------------------------
                find      4.711  (± 0.0%) i/s -     24.000  in   5.094154s
             bsearch      6.671M (± 5.3%) i/s -     33.434M in   5.027102s

Comparison:
             bsearch:  6670799.4 i/s
                find:        4.7 i/s - 1415918.13x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.069  (± 0.0%) i/s -      1.000  in  14.425597s
        Array#insert      1.019  (± 0.0%) i/s -      6.000  in   5.885713s

Comparison:
        Array#insert:        1.0 i/s
       Array#unshift:        0.1 i/s - 14.71x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   113.446M i/100ms
          Array#size   113.693M i/100ms
         Array#count   113.857M i/100ms
Calculating -------------------------------------
        Array#length      1.136B (± 0.7%) i/s -      5.786B in   5.092793s
          Array#size      1.141B (± 1.3%) i/s -      5.798B in   5.083418s
         Array#count      1.139B (± 1.1%) i/s -      5.807B in   5.097749s

Comparison:
          Array#size: 1140832468.5 i/s
         Array#count: 1139213336.3 i/s - same-ish: difference falls within error
        Array#length: 1136120953.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    23.676k i/100ms
        Array#sample     2.794M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    258.983k (± 1.7%) i/s -      1.302M in   5.029563s
        Array#sample     26.887M (± 0.5%) i/s -    136.927M in   5.092783s

Comparison:
        Array#sample: 26887276.5 i/s
 Array#shuffle.first:   258983.1 i/s - 103.82x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601     1.066k i/100ms
          Date.parse   289.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     27.916k (±32.4%) i/s -    117.260k in   5.019128s
          Date.parse      9.698k (±22.9%) i/s -     42.772k in   5.005974s

Comparison:
        Date.iso8601:    27915.5 i/s
          Date.parse:     9697.6 i/s - 2.88x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   242.731k i/100ms
           Array#map     1.089M i/100ms
Calculating -------------------------------------
   Array#each + push      2.496M (± 5.1%) i/s -     12.622M in   5.070958s
           Array#map     10.848M (± 5.9%) i/s -     54.443M in   5.037273s

Comparison:
           Array#map: 10847549.6 i/s
   Array#each + push:  2496119.8 i/s - 4.35x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     9.456M i/100ms
               #each    41.216M i/100ms
Calculating -------------------------------------
            For loop     94.296M (± 0.9%) i/s -    472.797M in   5.014349s
               #each    410.644M (± 1.9%) i/s -      2.061B in   5.020402s

Comparison:
               #each: 410644073.9 i/s
            For loop: 94296375.1 i/s - 4.35x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   837.784k i/100ms
     each_with_index     1.043M i/100ms
Calculating -------------------------------------
          While Loop      8.379M (± 0.0%) i/s -     41.889M in   4.999354s
     each_with_index     10.424M (± 0.0%) i/s -     52.127M in   5.000465s

Comparison:
     each_with_index: 10424352.1 i/s
          While Loop:  8378923.3 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   158.602k i/100ms
      inject to_proc   159.271k i/100ms
        inject block   158.520k i/100ms
Calculating -------------------------------------
       inject symbol      1.594M (± 0.2%) i/s -      8.089M in   5.074968s
      inject to_proc      1.604M (± 0.1%) i/s -      8.123M in   5.064253s
        inject block      1.593M (± 0.1%) i/s -      8.085M in   5.074687s

Comparison:
      inject to_proc:  1603955.1 i/s
       inject symbol:  1593848.2 i/s - 1.01x  (± 0.00) slower
        inject block:  1593109.5 i/s - 1.01x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    17.749k i/100ms
   Array#map.flatten    18.760k i/100ms
      Array#flat_map    45.534k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    189.931k (± 4.5%) i/s -    958.446k in   5.057572s
   Array#map.flatten    194.321k (± 3.7%) i/s -    975.520k in   5.027849s
      Array#flat_map    459.999k (± 1.6%) i/s -      2.322M in   5.049701s

Comparison:
      Array#flat_map:   459999.3 i/s
   Array#map.flatten:   194320.5 i/s - 2.37x  (± 0.00) slower
Array#map.flatten(1):   189931.3 i/s - 2.42x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   264.521k i/100ms
  Array#reverse_each     2.301M i/100ms
Calculating -------------------------------------
  Array#reverse.each      2.709M (± 2.9%) i/s -     13.755M in   5.083012s
  Array#reverse_each     23.048M (± 0.3%) i/s -    117.346M in   5.091403s

Comparison:
  Array#reverse_each: 23048055.2 i/s
  Array#reverse.each:  2708505.2 i/s - 8.51x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       595.002k i/100ms
   Enumerable#detect     2.659M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          6.769M (± 5.4%) i/s -    135.065M in  20.028201s
   Enumerable#detect     26.602M (± 0.2%) i/s -    534.407M in  20.088852s

Comparison:
   Enumerable#detect: 26602302.1 i/s
Enumerable#select.first:  6769089.8 i/s - 3.93x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       233.562k i/100ms
Enumerable#select.last
                       390.623k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.686M (± 2.9%) i/s -     13.547M in   5.047409s
Enumerable#select.last
                          3.950M (± 8.2%) i/s -     19.922M in   5.087742s

Comparison:
Enumerable#select.last:  3949608.8 i/s
Enumerable#reverse.detect:  2686310.4 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.941k i/100ms
  Enumerable#sort_by     2.864k i/100ms
     Enumerable#sort     4.066k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         29.380k (±15.0%) i/s -    144.109k in   5.030984s
  Enumerable#sort_by     27.322k (±19.7%) i/s -    131.744k in   5.062113s
     Enumerable#sort     41.139k (± 1.7%) i/s -    207.366k in   5.042161s

Comparison:
     Enumerable#sort:    41138.7 i/s
Enumerable#sort_by (Symbol#to_proc):    29380.3 i/s - 1.40x  (± 0.00) slower
  Enumerable#sort_by:    27322.2 i/s - 1.51x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   606.400k i/100ms
Enumerable#sort_by...first
                         7.390k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      6.035M (± 2.2%) i/s -     30.320M in   5.026963s
Enumerable#sort_by...first
                         83.309k (± 4.1%) i/s -    421.230k in   5.065980s

Comparison:
   Enumerable#min_by:  6034833.0 i/s
Enumerable#sort_by...first:    83309.3 i/s - 72.44x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   390.675k i/100ms
            Hash#dup   446.980k i/100ms
Calculating -------------------------------------
              Hash[]      4.629M (± 2.4%) i/s -     23.441M in   5.066718s
            Hash#dup      4.673M (± 2.2%) i/s -     23.690M in   5.072513s

Comparison:
            Hash#dup:  4672607.1 i/s
              Hash[]:  4629177.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   113.986M i/100ms
  Hash#fetch, symbol   113.598M i/100ms
     Hash#[], string     3.904M i/100ms
  Hash#fetch, string     3.780M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.143B (± 1.3%) i/s -      5.813B in   5.084731s
  Hash#fetch, symbol      1.143B (± 1.2%) i/s -      5.794B in   5.071035s
     Hash#[], string    155.409M (± 0.5%) i/s -    780.791M in   5.024211s
  Hash#fetch, string    165.611M (± 0.7%) i/s -    831.619M in   5.021785s

Comparison:
     Hash#[], symbol: 1143463460.7 i/s
  Hash#fetch, symbol: 1142627789.8 i/s - same-ish: difference falls within error
  Hash#fetch, string: 165611093.2 i/s - 6.90x  (± 0.00) slower
     Hash#[], string: 155408949.4 i/s - 7.36x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    49.744M i/100ms
             Hash#[]    46.020M i/100ms
          Hash#[] ||    47.451M i/100ms
          Hash#[] &&    46.723M i/100ms
          Hash#fetch    42.198M i/100ms
 Hash#fetch fallback    41.992M i/100ms
Calculating -------------------------------------
            Hash#dig    497.296M (± 0.3%) i/s -      2.487B in   5.001439s
             Hash#[]    465.831M (± 2.3%) i/s -      2.347B in   5.041081s
          Hash#[] ||    468.868M (± 1.5%) i/s -      2.373B in   5.061290s
          Hash#[] &&    465.876M (± 2.7%) i/s -      2.336B in   5.018272s
          Hash#fetch    466.048M (± 1.7%) i/s -      2.363B in   5.071900s
 Hash#fetch fallback    465.796M (± 1.4%) i/s -      2.352B in   5.049435s

Comparison:
            Hash#dig: 497295822.5 i/s
          Hash#[] ||: 468867939.5 i/s - 1.06x  (± 0.00) slower
          Hash#fetch: 466047705.8 i/s - 1.07x  (± 0.00) slower
          Hash#[] &&: 465875541.7 i/s - 1.07x  (± 0.00) slower
             Hash#[]: 465830554.6 i/s - 1.07x  (± 0.00) slower
 Hash#fetch fallback: 465795536.0 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   113.832M i/100ms
  Hash#fetch + block   113.771M i/100ms
    Hash#fetch + arg   113.444M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.137B (± 1.1%) i/s -      5.692B in   5.007717s
  Hash#fetch + block      1.136B (± 0.6%) i/s -      5.689B in   5.006678s
    Hash#fetch + arg      1.139B (± 0.9%) i/s -      5.786B in   5.078946s

Comparison:
    Hash#fetch + arg: 1139231415.4 i/s
  Hash#fetch + const: 1136702665.4 i/s - same-ish: difference falls within error
  Hash#fetch + block: 1136233919.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    23.051k i/100ms
         sort + to_h    11.371k i/100ms
Calculating -------------------------------------
      sort_by + to_h    284.845k (± 7.6%) i/s -      1.429M in   5.049025s
         sort + to_h    173.997k (± 5.2%) i/s -    875.567k in   5.047149s

Comparison:
      sort_by + to_h:   284845.0 i/s
         sort + to_h:   173996.7 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   175.432k i/100ms
       Hash#each_key   222.210k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.941M (±10.3%) i/s -      9.649M in   5.082499s
       Hash#each_key      2.230M (± 3.2%) i/s -     11.333M in   5.087071s

Comparison:
       Hash#each_key:  2230231.1 i/s
      Hash#keys.each:  1940756.6 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   206.000  i/100ms
           Hash#key?    12.170M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      2.008k (±12.6%) i/s -      9.888k in   5.049625s
           Hash#key?    122.498M (± 0.0%) i/s -    620.660M in   5.066701s

Comparison:
           Hash#key?: 122497855.7 i/s
  Hash#keys.include?:     2007.9 i/s - 61006.56x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    42.081k i/100ms
            Hash#[]=    45.648k i/100ms
Calculating -------------------------------------
         Hash#merge!    433.921k (±10.1%) i/s -      2.146M in   5.047480s
            Hash#[]=    464.359k (± 4.8%) i/s -      2.328M in   5.025911s

Comparison:
            Hash#[]=:   464358.7 i/s
         Hash#merge!:   433920.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        24.608k i/100ms
      Hash#merge({})    15.496k i/100ms
 Hash#dup#merge!({})    26.046k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        278.518k (± 3.0%) i/s -      1.403M in   5.040762s
      Hash#merge({})    166.494k (± 2.2%) i/s -    836.784k in   5.028323s
 Hash#dup#merge!({})    259.126k (± 2.4%) i/s -      1.302M in   5.028725s

Comparison:
{}#merge!(Hash) do end:   278517.6 i/s
 Hash#dup#merge!({}):   259125.7 i/s - 1.07x  (± 0.00) slower
      Hash#merge({}):   166494.5 i/s - 1.67x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   114.142M i/100ms
          Hash#merge   113.835M i/100ms
Calculating -------------------------------------
        Hash#**other      1.136B (± 0.6%) i/s -      5.707B in   5.022125s
          Hash#merge      1.138B (± 0.9%) i/s -      5.692B in   5.004132s

Comparison:
          Hash#merge: 1137501483.9 i/s
        Hash#**other: 1136439238.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   726.000  i/100ms
         Hash#merge!    43.340k i/100ms
Calculating -------------------------------------
          Hash#merge      8.323k (± 4.3%) i/s -     42.108k in   5.069642s
         Hash#merge!    447.577k (± 1.9%) i/s -      2.254M in   5.037186s

Comparison:
         Hash#merge!:   447576.9 i/s
          Hash#merge:     8323.2 i/s - 53.77x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.355M i/100ms
Array#each               1.311M i/100ms
Array#each_w/_object     1.386M i/100ms
Hash#select-include      1.984M i/100ms
Calculating -------------------------------------
Hash#native-slice        16.148M (±11.0%) i/s -     79.965M in   5.069732s
Array#each               13.817M (± 3.3%) i/s -     69.502M in   5.036256s
Array#each_w/_object     13.847M (± 5.3%) i/s -     69.293M in   5.019779s
Hash#select-include      19.624M (± 9.1%) i/s -     97.195M in   5.024184s

Comparison:
Hash#select-include : 19623754.4 i/s
Hash#native-slice   : 16148302.5 i/s - same-ish: difference falls within error
Array#each_w/_object: 13846863.5 i/s - 1.42x  (± 0.00) slower
Array#each          : 13817391.5 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   188.000  i/100ms
         Hash#value?   391.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      2.028k (±12.0%) i/s -      9.964k in   5.001651s
         Hash#value?      3.907k (± 0.2%) i/s -     19.550k in   5.003877s

Comparison:
         Hash#value?:     3907.0 i/s
Hash#values.include?:     2027.8 i/s - 1.93x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   114.801M i/100ms
                send   113.550M i/100ms
      method_missing   113.399M i/100ms
Calculating -------------------------------------
                call      1.137B (± 0.8%) i/s -      5.740B in   5.048541s
                send      1.136B (± 0.6%) i/s -      5.791B in   5.097108s
      method_missing      1.139B (± 0.9%) i/s -      5.783B in   5.079069s

Comparison:
      method_missing: 1138758298.0 i/s
                call: 1137048514.7 i/s - same-ish: difference falls within error
                send: 1136195381.2 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    30.584k i/100ms
      Symbol#to_proc    32.326k i/100ms
Calculating -------------------------------------
               Block    340.162k (± 3.0%) i/s -      1.713M in   5.039560s
      Symbol#to_proc    332.466k (± 5.5%) i/s -      1.681M in   5.073416s

Comparison:
               Block:   340161.7 i/s
      Symbol#to_proc:   332466.3 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   113.857M i/100ms
       block + yield   113.789M i/100ms
        unused block   113.448M i/100ms
               yield   113.814M i/100ms
Calculating -------------------------------------
          block.call      1.134B (± 1.5%) i/s -      5.693B in   5.022877s
       block + yield      1.142B (± 1.7%) i/s -      5.803B in   5.083938s
        unused block      1.139B (± 1.1%) i/s -      5.786B in   5.079849s
               yield      1.137B (± 0.8%) i/s -      5.691B in   5.005719s

Comparison:
       block + yield: 1141777566.5 i/s
        unused block: 1139105996.6 i/s - same-ish: difference falls within error
               yield: 1136909015.5 i/s - same-ish: difference falls within error
          block.call: 1133669084.7 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    24.212k i/100ms
      range#include?   313.000  i/100ms
       range#member?   558.000  i/100ms
       plain compare    20.867k i/100ms
Calculating -------------------------------------
        range#cover?     83.923k (±36.3%) i/s -    363.180k in   5.088021s
      range#include?      4.938k (±31.8%) i/s -     22.849k in   5.056789s
       range#member?      4.339k (±20.2%) i/s -     20.088k in   5.045653s
       plain compare    163.676k (±20.0%) i/s -    792.946k in   5.040885s

Comparison:
       plain compare:   163675.7 i/s
        range#cover?:    83923.4 i/s - 1.95x  (± 0.00) slower
      range#include?:     4938.4 i/s - 33.14x  (± 0.00) slower
       range#member?:     4339.1 i/s - 37.72x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    15.071M i/100ms
           String#=~    14.978M i/100ms
          Regexp#===    14.978M i/100ms
        String#match     9.781M i/100ms
Calculating -------------------------------------
       String#match?    143.483M (± 0.2%) i/s -    723.407M in   5.041763s
           String#=~    149.713M (± 0.4%) i/s -    748.904M in   5.002336s
          Regexp#===    149.709M (± 0.4%) i/s -    748.911M in   5.002514s
        String#match     97.870M (± 0.1%) i/s -    498.822M in   5.096812s

Comparison:
           String#=~: 149713195.5 i/s
          Regexp#===: 149708873.3 i/s - same-ish: difference falls within error
       String#match?: 143483267.6 i/s - 1.04x  (± 0.00) slower
        String#match: 97869576.3 i/s - 1.53x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.438M i/100ms
      String#casecmp     4.005M i/100ms
Calculating -------------------------------------
String#downcase + ==     27.700M (± 6.5%) i/s -    138.960M in   5.040025s
      String#casecmp     40.404M (± 4.5%) i/s -    204.257M in   5.066612s

Comparison:
      String#casecmp: 40404426.9 i/s
String#downcase + ==: 27699637.7 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     7.412M i/100ms
       String#concat     8.314M i/100ms
       String#append     8.427M i/100ms
         "foo" "bar"   113.768M i/100ms
  "#{'foo'}#{'bar'}"   113.529M i/100ms
Calculating -------------------------------------
            String#+     84.181M (± 3.6%) i/s -    422.491M in   5.025876s
       String#concat     84.298M (± 3.2%) i/s -    424.008M in   5.035290s
       String#append     84.414M (± 3.0%) i/s -    429.782M in   5.096351s
         "foo" "bar"      1.138B (± 1.0%) i/s -      5.802B in   5.096989s
  "#{'foo'}#{'bar'}"      1.136B (± 0.6%) i/s -      5.790B in   5.097794s

Comparison:
         "foo" "bar": 1138456935.8 i/s
  "#{'foo'}#{'bar'}": 1135820742.4 i/s - same-ish: difference falls within error
       String#append: 84414142.4 i/s - 13.49x  (± 0.00) slower
       String#concat: 84297857.1 i/s - 13.51x  (± 0.00) slower
            String#+: 84180645.4 i/s - 13.52x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   113.643M i/100ms
          String#dup   113.572M i/100ms
Calculating -------------------------------------
           String#+@      1.134B (± 0.7%) i/s -      5.682B in   5.009253s
          String#dup      1.138B (± 0.9%) i/s -      5.792B in   5.088036s

Comparison:
          String#dup: 1138492314.8 i/s
           String#+@: 1134395188.5 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.447M i/100ms
       String#match?     1.721M i/100ms
    String#end_with?     9.455M i/100ms
Calculating -------------------------------------
           String#=~     14.653M (± 2.7%) i/s -     73.780M in   5.038837s
       String#match?     18.658M (± 0.4%) i/s -     94.681M in   5.074619s
    String#end_with?     94.735M (± 1.0%) i/s -    482.189M in   5.090394s

Comparison:
    String#end_with?: 94734651.3 i/s
       String#match?: 18658111.7 i/s - 5.08x  (± 0.00) slower
           String#=~: 14653386.3 i/s - 6.47x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   475.507k i/100ms
          String#sub   556.159k i/100ms
String#dup["string"]=
                        11.266M i/100ms
Calculating -------------------------------------
         String#gsub      5.523M (± 5.6%) i/s -     27.579M in   5.013252s
          String#sub      8.453M (± 2.8%) i/s -     42.268M in   5.004568s
String#dup["string"]=
                        112.822M (± 0.2%) i/s -    574.565M in   5.092694s

Comparison:
String#dup["string"]=: 112821875.4 i/s
          String#sub:  8452698.0 i/s - 13.35x  (± 0.00) slower
         String#gsub:  5522768.8 i/s - 20.43x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   227.477k i/100ms
           String#tr   122.524k i/100ms
Calculating -------------------------------------
         String#gsub      2.798M (± 6.4%) i/s -     14.104M in   5.063154s
           String#tr      1.244M (± 3.9%) i/s -      6.249M in   5.032419s

Comparison:
         String#gsub:  2797961.9 i/s
           String#tr:  1243710.1 i/s - 2.25x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   114.036M i/100ms
         With Freeze   114.261M i/100ms
Calculating -------------------------------------
      Without Freeze      1.137B (± 0.8%) i/s -      5.702B in   5.013854s
         With Freeze      1.137B (± 0.7%) i/s -      5.713B in   5.026876s

Comparison:
      Without Freeze: 1137285463.8 i/s
         With Freeze: 1136548867.2 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     6.782k i/100ms
      String#squeeze    28.560k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     89.736k (± 7.6%) i/s -    447.612k in   5.016365s
      String#squeeze    286.292k (± 1.9%) i/s -      1.457M in   5.089781s

Comparison:
      String#squeeze:   286292.3 i/s
 String#gsub/regex+/:    89736.4 i/s - 3.19x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     3.045M i/100ms
       String#match?     5.073M i/100ms
  String#start_with?    20.535M i/100ms
Calculating -------------------------------------
           String#=~     32.054M (± 2.9%) i/s -    161.366M in   5.038695s
       String#match?     51.733M (± 0.1%) i/s -    258.742M in   5.001531s
  String#start_with?    205.108M (± 0.7%) i/s -      1.027B in   5.006282s

Comparison:
  String#start_with?: 205107712.9 i/s
       String#match?: 51732520.3 i/s - 3.96x  (± 0.00) slower
           String#=~: 32054341.4 i/s - 6.40x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    95.054k i/100ms
    String#[0, n] ==    97.808k i/100ms
   String#[RANGE] ==   213.514k i/100ms
   String#[0...n] ==   172.137k i/100ms
Calculating -------------------------------------
  String#start_with?      4.155M (± 0.1%) i/s -     20.817M in   5.010157s
    String#[0, n] ==      2.198M (± 5.6%) i/s -     10.954M in   5.002881s
   String#[RANGE] ==      2.222M (± 4.1%) i/s -     11.103M in   5.006261s
   String#[0...n] ==      1.750M (± 3.4%) i/s -      8.779M in   5.021371s

Comparison:
  String#start_with?:  4154928.8 i/s
   String#[RANGE] ==:  2221643.5 i/s - 1.87x  (± 0.00) slower
    String#[0, n] ==:  2197799.1 i/s - 1.89x  (± 0.00) slower
   String#[0...n] ==:  1750417.7 i/s - 2.37x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    11.187M i/100ms
 String#sub!'string'   532.257k i/100ms
String#gsub!'string'   585.388k i/100ms
  String#[/regexp/]=     1.810M i/100ms
 String#sub!/regexp/     2.209M i/100ms
String#gsub!/regexp/   618.143k i/100ms
Calculating -------------------------------------
  String#['string']=    113.134M (± 0.0%) i/s -    570.530M in   5.042981s
 String#sub!'string'      8.656M (±13.3%) i/s -     40.452M in   5.045523s
String#gsub!'string'      6.150M (± 2.0%) i/s -     31.026M in   5.046944s
  String#[/regexp/]=     18.314M (± 1.8%) i/s -     92.313M in   5.042373s
 String#sub!/regexp/     21.767M (± 1.5%) i/s -    110.470M in   5.076324s
String#gsub!/regexp/      6.138M (± 2.0%) i/s -     30.907M in   5.037493s

Comparison:
  String#['string']=: 113133570.8 i/s
 String#sub!/regexp/: 21766644.5 i/s - 5.20x  (± 0.00) slower
  String#[/regexp/]=: 18313890.8 i/s - 6.18x  (± 0.00) slower
 String#sub!'string':  8655518.6 i/s - 13.07x  (± 0.00) slower
String#gsub!'string':  6149821.6 i/s - 18.40x  (± 0.00) slower
String#gsub!/regexp/:  6138040.2 i/s - 18.43x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     2.318M i/100ms
        String#chomp     4.769M i/100ms
String#delete_suffix    10.579M i/100ms
Calculating -------------------------------------
          String#sub     26.522M (± 4.8%) i/s -    134.466M in   5.083922s
        String#chomp     47.675M (± 0.5%) i/s -    238.437M in   5.001440s
String#delete_suffix    110.063M (± 7.3%) i/s -    550.102M in   5.027276s

Comparison:
String#delete_suffix: 110062651.0 i/s
        String#chomp: 47675022.9 i/s - 2.31x  (± 0.00) slower
          String#sub: 26521979.2 i/s - 4.15x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   113.872M i/100ms
          String#sub    15.705M i/100ms
Calculating -------------------------------------
String#delete_prefix      1.139B (± 1.1%) i/s -      5.694B in   5.000880s
          String#sub    156.975M (± 0.3%) i/s -    785.238M in   5.002342s

Comparison:
String#delete_prefix: 1138666764.7 i/s
          String#sub: 156975148.4 i/s - 7.25x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.568M i/100ms
    String#unpack[0]     1.657M i/100ms
Calculating -------------------------------------
      String#unpack1     16.733M (± 3.9%) i/s -     84.660M in   5.067621s
    String#unpack[0]     16.762M (± 3.7%) i/s -     84.515M in   5.049203s

Comparison:
    String#unpack[0]: 16762354.2 i/s
      String#unpack1: 16732541.9 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 23.0.0-dev-ab349c2d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    20.406k i/100ms
          Time.parse   357.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    309.861k (±20.7%) i/s -      1.469M in   5.042203s
          Time.parse      8.924k (±25.3%) i/s -     38.913k in   5.018985s

Comparison:
        Time.iso8601:   309861.1 i/s
          Time.parse:     8924.4 i/s - 34.72x  (± 0.00) slower

