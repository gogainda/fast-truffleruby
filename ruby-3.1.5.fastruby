$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       769.918k i/100ms
Function with splat arguments
                        17.252k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.686M (± 0.8%) i/s -     38.496M in   5.008877s
Function with splat arguments
                        166.777k (± 7.5%) i/s -    845.348k in   5.103144s

Comparison:
Function with single Array argument:  7686047.9 i/s
Function with splat arguments:   166777.5 i/s - 46.09x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.018M i/100ms
Sequential Assignment
                       995.772k i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.178M (± 0.4%) i/s -     51.900M in   5.099216s
Sequential Assignment
                         10.012M (± 0.3%) i/s -     50.784M in   5.072226s

Comparison:
 Parallel Assignment: 10178180.6 i/s
Sequential Assignment: 10012335.2 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   480.964k i/100ms
       attr_accessor   549.474k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.813M (± 1.1%) i/s -     24.529M in   5.097259s
       attr_accessor      5.472M (± 0.3%) i/s -     27.474M in   5.020389s

Comparison:
       attr_accessor:  5472463.4 i/s
   getter_and_setter:  4812900.0 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    86.694k i/100ms
         respond_to?   782.672k i/100ms
Calculating -------------------------------------
      begin...rescue    872.065k (± 2.1%) i/s -      4.421M in   5.072484s
         respond_to?      7.822M (± 0.4%) i/s -     39.134M in   5.002856s

Comparison:
         respond_to?:  7822374.4 i/s
      begin...rescue:   872065.4 i/s - 8.97x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
              normal   294.022k i/100ms
             &method   123.433k i/100ms
Calculating -------------------------------------
              normal      2.932M (± 1.2%) i/s -     14.701M in   5.014192s
             &method      1.228M (± 0.7%) i/s -      6.172M in   5.026587s

Comparison:
              normal:  2932313.8 i/s
             &method:  1227856.9 i/s - 2.39x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       219.000  i/100ms
       define_method   291.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.207k (±21.6%) i/s -      9.855k in   5.112587s
       define_method      3.213k (±20.0%) i/s -     14.550k in   5.075430s

Comparison:
       define_method:     3213.3 i/s
module_eval with string:     2207.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
         Float#round   261.544k i/100ms
       Kernel#format   198.479k i/100ms
            String#%   168.377k i/100ms
Calculating -------------------------------------
         Float#round      2.573M (± 0.9%) i/s -     13.077M in   5.082059s
       Kernel#format      1.986M (± 0.6%) i/s -     10.122M in   5.097029s
            String#%      1.687M (± 0.7%) i/s -      8.587M in   5.091900s

Comparison:
         Float#round:  2573398.4 i/s
       Kernel#format:  1986007.5 i/s - 1.30x  (± 0.00) slower
            String#%:  1686532.3 i/s - 1.53x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
                Hash   900.714k i/100ms
          OpenStruct   501.537k i/100ms
Calculating -------------------------------------
                Hash      9.042M (± 0.6%) i/s -     45.936M in   5.080529s
          OpenStruct      5.002M (± 0.7%) i/s -     25.077M in   5.013715s

Comparison:
                Hash:  9041973.5 i/s
          OpenStruct:  5001925.8 i/s - 1.81x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.108M i/100ms
          OpenStruct     9.145k i/100ms
Calculating -------------------------------------
                Hash     11.079M (± 0.5%) i/s -     56.511M in   5.100601s
          OpenStruct     89.197k (± 3.2%) i/s -    448.105k in   5.028958s

Comparison:
                Hash: 11079464.4 i/s
          OpenStruct:    89196.8 i/s - 124.21x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   597.314k i/100ms
  ancestors.include?   117.709k i/100ms
Calculating -------------------------------------
  less than or equal      5.696M (± 0.6%) i/s -     28.671M in   5.033318s
  ancestors.include?      1.175M (± 0.9%) i/s -      5.885M in   5.009989s

Comparison:
  less than or equal:  5696482.9 i/s
  ancestors.include?:  1174846.0 i/s - 4.85x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.572  (± 0.0%) i/s -      3.000  in   5.255375s
         Kernel loop      0.228  (± 0.0%) i/s -      2.000  in   8.782898s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 2.51x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.547M i/100ms
         Array#first     1.326M i/100ms
Calculating -------------------------------------
           Array#[0]     15.432M (± 0.3%) i/s -     77.332M in   5.011173s
         Array#first     13.257M (± 0.5%) i/s -     66.291M in   5.000517s

Comparison:
           Array#[0]: 15432127.2 i/s
         Array#first: 13257032.1 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.541M i/100ms
          Array#last     1.326M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.409M (± 0.4%) i/s -     77.062M in   5.001131s
          Array#last     13.284M (± 0.2%) i/s -     67.621M in   5.090344s

Comparison:
          Array#[-1]: 15409037.9 i/s
          Array#last: 13284295.2 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    95.920k i/100ms
Calculating -------------------------------------
                find      0.286  (± 0.0%) i/s -      2.000  in   6.981658s
             bsearch    960.636k (± 0.4%) i/s -      4.892M in   5.092466s

Comparison:
             bsearch:   960636.0 i/s
                find:        0.3 i/s - 3353407.59x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    19.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    195.236  (± 2.0%) i/s -    988.000  in   5.062825s
        Array#insert      1.449  (± 0.0%) i/s -      8.000  in   5.520874s

Comparison:
       Array#unshift:      195.2 i/s
        Array#insert:        1.4 i/s - 134.73x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.091M i/100ms
          Array#size     2.105M i/100ms
         Array#count     1.633M i/100ms
Calculating -------------------------------------
        Array#length     20.927M (± 0.4%) i/s -    106.626M in   5.095347s
          Array#size     20.341M (± 0.3%) i/s -    103.141M in   5.070674s
         Array#count     16.182M (± 4.0%) i/s -     81.650M in   5.055673s

Comparison:
        Array#length: 20926570.7 i/s
          Array#size: 20340813.5 i/s - 1.03x  (± 0.00) slower
         Array#count: 16181783.2 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.722k i/100ms
        Array#sample     1.033M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    456.375k (± 0.5%) i/s -      2.286M in   5.009404s
        Array#sample     10.299M (± 0.4%) i/s -     51.672M in   5.017012s

Comparison:
        Array#sample: 10299410.2 i/s
 Array#shuffle.first:   456375.5 i/s - 22.57x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    62.914k i/100ms
          Date.parse    31.656k i/100ms
Calculating -------------------------------------
        Date.iso8601    616.257k (± 1.6%) i/s -      3.083M in   5.003757s
          Date.parse    314.359k (± 1.6%) i/s -      1.583M in   5.036393s

Comparison:
        Date.iso8601:   616257.0 i/s
          Date.parse:   314359.3 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    19.004k i/100ms
           Array#map    26.914k i/100ms
Calculating -------------------------------------
   Array#each + push    187.944k (± 0.4%) i/s -    950.200k in   5.055868s
           Array#map    269.010k (± 0.3%) i/s -      1.346M in   5.002465s

Comparison:
           Array#map:   269009.7 i/s
   Array#each + push:   187943.7 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
            For loop    27.640k i/100ms
               #each    32.294k i/100ms
Calculating -------------------------------------
            For loop    276.355k (± 0.5%) i/s -      1.382M in   5.000928s
               #each    326.412k (± 0.4%) i/s -      1.647M in   5.045842s

Comparison:
               #each:   326411.7 i/s
            For loop:   276355.0 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.323k i/100ms
     each_with_index    19.312k i/100ms
Calculating -------------------------------------
          While Loop    275.923k (± 0.2%) i/s -      1.393M in   5.050240s
     each_with_index    193.204k (± 0.2%) i/s -    984.912k in   5.097812s

Comparison:
          While Loop:   275923.3 i/s
     each_with_index:   193203.9 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    92.870k i/100ms
      inject to_proc     2.209k i/100ms
        inject block     2.145k i/100ms
Calculating -------------------------------------
       inject symbol    944.785k (± 7.6%) i/s -      4.736M in   5.035441s
      inject to_proc     22.086k (± 1.3%) i/s -    110.450k in   5.001725s
        inject block     21.465k (± 0.8%) i/s -    109.395k in   5.096771s

Comparison:
       inject symbol:   944785.2 i/s
      inject to_proc:    22086.5 i/s - 42.78x  (± 0.00) slower
        inject block:    21464.9 i/s - 44.02x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.779k i/100ms
   Array#map.flatten     3.960k i/100ms
      Array#flat_map     9.462k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     67.980k (± 0.4%) i/s -    345.729k in   5.085853s
   Array#map.flatten     39.492k (± 0.7%) i/s -    198.000k in   5.014003s
      Array#flat_map     93.887k (± 0.6%) i/s -    473.100k in   5.039272s

Comparison:
      Array#flat_map:    93886.6 i/s
Array#map.flatten(1):    67979.6 i/s - 1.38x  (± 0.00) slower
   Array#map.flatten:    39491.6 i/s - 2.38x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    31.353k i/100ms
  Array#reverse_each    32.476k i/100ms
Calculating -------------------------------------
  Array#reverse.each    313.619k (± 0.3%) i/s -      1.599M in   5.098598s
  Array#reverse_each    324.868k (± 0.5%) i/s -      1.656M in   5.098417s

Comparison:
  Array#reverse_each:   324868.1 i/s
  Array#reverse.each:   313619.0 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.853k i/100ms
   Enumerable#detect    81.605k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        207.442k (± 1.6%) i/s -      4.150M in  20.010062s
   Enumerable#detect    811.121k (± 3.1%) i/s -     16.239M in  20.047541s

Comparison:
   Enumerable#detect:   811121.5 i/s
Enumerable#select.first:   207441.8 i/s - 3.91x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       240.345k i/100ms
Enumerable#select.last
                        18.246k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.438M (± 0.6%) i/s -     12.258M in   5.027747s
Enumerable#select.last
                        182.070k (± 0.6%) i/s -    912.300k in   5.010884s

Comparison:
Enumerable#reverse.detect:  2438092.9 i/s
Enumerable#select.last:   182069.6 i/s - 13.39x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.939k i/100ms
  Enumerable#sort_by     4.844k i/100ms
     Enumerable#sort     2.422k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         50.134k (± 1.5%) i/s -    251.889k in   5.025403s
  Enumerable#sort_by     48.395k (± 1.4%) i/s -    242.200k in   5.005691s
     Enumerable#sort     24.893k (± 0.5%) i/s -    125.944k in   5.059615s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    50134.2 i/s
  Enumerable#sort_by:    48394.7 i/s - 1.04x  (± 0.00) slower
     Enumerable#sort:    24892.6 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.690k i/100ms
Enumerable#sort_by...first
                         8.713k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    178.943k (± 0.2%) i/s -    902.190k in   5.041794s
Enumerable#sort_by...first
                         86.760k (± 0.4%) i/s -    435.650k in   5.021412s

Comparison:
   Enumerable#min_by:   178943.2 i/s
Enumerable#sort_by...first:    86760.0 i/s - 2.06x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   308.129k i/100ms
            Hash#dup   222.349k i/100ms
Calculating -------------------------------------
              Hash[]      2.907M (± 4.8%) i/s -     14.790M in   5.099496s
            Hash#dup      2.230M (± 5.5%) i/s -     11.117M in   5.000682s

Comparison:
              Hash[]:  2907303.4 i/s
            Hash#dup:  2229994.8 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.422M i/100ms
  Hash#fetch, symbol     1.190M i/100ms
     Hash#[], string     1.251M i/100ms
  Hash#fetch, string   792.774k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.394M (± 0.2%) i/s -     72.539M in   5.039620s
  Hash#fetch, symbol     11.856M (± 0.4%) i/s -     59.509M in   5.019391s
     Hash#[], string     12.514M (± 0.4%) i/s -     63.790M in   5.097711s
  Hash#fetch, string      7.933M (± 0.5%) i/s -     40.431M in   5.097031s

Comparison:
     Hash#[], symbol: 14393725.8 i/s
     Hash#[], string: 12513637.9 i/s - 1.15x  (± 0.00) slower
  Hash#fetch, symbol: 11855966.0 i/s - 1.21x  (± 0.00) slower
  Hash#fetch, string:  7932586.1 i/s - 1.81x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   878.479k i/100ms
             Hash#[]     1.037M i/100ms
          Hash#[] ||   902.746k i/100ms
          Hash#[] &&   380.630k i/100ms
          Hash#fetch   597.823k i/100ms
 Hash#fetch fallback   392.214k i/100ms
Calculating -------------------------------------
            Hash#dig      8.725M (± 0.6%) i/s -     43.924M in   5.034424s
             Hash#[]      9.700M (± 3.7%) i/s -     48.746M in   5.032226s
          Hash#[] ||      9.068M (± 4.4%) i/s -     46.040M in   5.090547s
          Hash#[] &&      3.932M (± 2.7%) i/s -     19.793M in   5.037346s
          Hash#fetch      6.307M (± 1.2%) i/s -     31.685M in   5.024606s
 Hash#fetch fallback      3.873M (± 0.9%) i/s -     19.611M in   5.064280s

Comparison:
             Hash#[]:  9700418.2 i/s
          Hash#[] ||:  9068442.8 i/s - same-ish: difference falls within error
            Hash#dig:  8725078.1 i/s - 1.11x  (± 0.00) slower
          Hash#fetch:  6306757.8 i/s - 1.54x  (± 0.00) slower
          Hash#[] &&:  3932064.1 i/s - 2.47x  (± 0.00) slower
 Hash#fetch fallback:  3872692.7 i/s - 2.50x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.442M i/100ms
  Hash#fetch + block     1.451M i/100ms
    Hash#fetch + arg     1.078M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.320M (± 0.6%) i/s -     72.118M in   5.036291s
  Hash#fetch + block     14.679M (± 0.9%) i/s -     73.997M in   5.041505s
    Hash#fetch + arg     10.682M (± 5.0%) i/s -     53.899M in   5.062696s

Comparison:
  Hash#fetch + block: 14678764.5 i/s
  Hash#fetch + const: 14320224.3 i/s - 1.03x  (± 0.00) slower
    Hash#fetch + arg: 10682029.8 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.053k i/100ms
         sort + to_h    10.529k i/100ms
Calculating -------------------------------------
      sort_by + to_h    262.475k (± 2.2%) i/s -      1.326M in   5.052961s
         sort + to_h    104.375k (± 1.6%) i/s -    526.450k in   5.045270s

Comparison:
      sort_by + to_h:   262475.4 i/s
         sort + to_h:   104375.1 i/s - 2.51x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   176.241k i/100ms
       Hash#each_key   204.636k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.777M (± 0.7%) i/s -      8.988M in   5.057445s
       Hash#each_key      2.067M (± 0.6%) i/s -     10.436M in   5.048234s

Comparison:
       Hash#each_key:  2067430.8 i/s
      Hash#keys.each:  1777336.4 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.317k i/100ms
           Hash#key?   944.000k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     12.798k (± 4.5%) i/s -     64.533k in   5.054291s
           Hash#key?      9.512M (± 1.0%) i/s -     48.144M in   5.061788s

Comparison:
           Hash#key?:  9512186.2 i/s
  Hash#keys.include?:    12798.2 i/s - 743.25x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     3.947k i/100ms
            Hash#[]=    10.137k i/100ms
Calculating -------------------------------------
         Hash#merge!     39.217k (± 1.3%) i/s -    197.350k in   5.032995s
            Hash#[]=    100.763k (± 2.1%) i/s -    506.850k in   5.032677s

Comparison:
            Hash#[]=:   100763.0 i/s
         Hash#merge!:    39217.5 i/s - 2.57x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.724k i/100ms
      Hash#merge({})     3.907k i/100ms
 Hash#dup#merge!({})     2.845k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         45.932k (± 0.7%) i/s -    231.476k in   5.039796s
      Hash#merge({})     39.079k (± 0.7%) i/s -    199.257k in   5.099118s
 Hash#dup#merge!({})     28.632k (± 0.8%) i/s -    145.095k in   5.067919s

Comparison:
{}#merge!(Hash) do end:    45932.1 i/s
      Hash#merge({}):    39078.8 i/s - 1.18x  (± 0.00) slower
 Hash#dup#merge!({}):    28631.8 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   394.585k i/100ms
          Hash#merge   370.789k i/100ms
Calculating -------------------------------------
        Hash#**other      3.917M (± 0.6%) i/s -     19.729M in   5.037668s
          Hash#merge      3.657M (± 0.8%) i/s -     18.539M in   5.069600s

Comparison:
        Hash#**other:  3916506.6 i/s
          Hash#merge:  3657209.2 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.363k i/100ms
         Hash#merge!     3.995k i/100ms
Calculating -------------------------------------
          Hash#merge     13.201k (± 2.9%) i/s -     66.787k in   5.063486s
         Hash#merge!     40.335k (± 0.4%) i/s -    203.745k in   5.051409s

Comparison:
         Hash#merge!:    40335.0 i/s
          Hash#merge:    13201.1 i/s - 3.06x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      423.971k i/100ms
Array#each             231.033k i/100ms
Array#each_w/_object   176.103k i/100ms
Hash#select-include     63.507k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.205M (± 0.9%) i/s -     21.199M in   5.041494s
Array#each                2.259M (± 1.1%) i/s -     11.321M in   5.011733s
Array#each_w/_object      1.753M (± 0.5%) i/s -      8.805M in   5.023746s
Hash#select-include     669.459k (± 2.1%) i/s -      3.366M in   5.029855s

Comparison:
Hash#native-slice   :  4205132.1 i/s
Array#each          :  2259112.3 i/s - 1.86x  (± 0.00) slower
Array#each_w/_object:  1752758.7 i/s - 2.40x  (± 0.00) slower
Hash#select-include :   669459.3 i/s - 6.28x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.080k i/100ms
         Hash#value?   834.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     10.630k (± 3.4%) i/s -     54.000k in   5.086374s
         Hash#value?      8.311k (± 0.7%) i/s -     41.700k in   5.017704s

Comparison:
Hash#values.include?:    10629.8 i/s
         Hash#value?:     8311.0 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
                call   660.465k i/100ms
                send   522.076k i/100ms
      method_missing   391.409k i/100ms
Calculating -------------------------------------
                call      6.619M (± 0.4%) i/s -     33.684M in   5.089154s
                send      5.150M (± 0.7%) i/s -     26.104M in   5.069395s
      method_missing      3.890M (± 1.7%) i/s -     19.570M in   5.032138s

Comparison:
                call:  6618842.5 i/s
                send:  5149520.0 i/s - 1.29x  (± 0.00) slower
      method_missing:  3890356.9 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
               Block     9.123k i/100ms
      Symbol#to_proc    10.341k i/100ms
Calculating -------------------------------------
               Block     91.157k (± 0.6%) i/s -    456.150k in   5.004209s
      Symbol#to_proc    102.708k (± 0.6%) i/s -    517.050k in   5.034339s

Comparison:
      Symbol#to_proc:   102708.4 i/s
               Block:    91156.9 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
          block.call   942.461k i/100ms
       block + yield   999.308k i/100ms
        unused block     1.307M i/100ms
               yield     1.194M i/100ms
Calculating -------------------------------------
          block.call      9.416M (± 0.4%) i/s -     47.123M in   5.004649s
       block + yield     10.013M (± 0.4%) i/s -     50.965M in   5.089755s
        unused block     13.105M (± 0.3%) i/s -     66.675M in   5.087743s
               yield     11.929M (± 0.3%) i/s -     59.682M in   5.003234s

Comparison:
        unused block: 13105148.2 i/s
               yield: 11928877.7 i/s - 1.10x  (± 0.00) slower
       block + yield: 10013370.0 i/s - 1.31x  (± 0.00) slower
          block.call:  9416017.3 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   321.007k i/100ms
      range#include?    12.089k i/100ms
       range#member?    11.926k i/100ms
       plain compare   531.130k i/100ms
Calculating -------------------------------------
        range#cover?      3.253M (± 0.6%) i/s -     16.371M in   5.032622s
      range#include?    123.051k (± 0.7%) i/s -    616.539k in   5.010677s
       range#member?    124.019k (± 0.8%) i/s -    632.078k in   5.096981s
       plain compare      5.271M (± 0.5%) i/s -     26.556M in   5.038352s

Comparison:
       plain compare:  5270983.1 i/s
        range#cover?:  3253180.4 i/s - 1.62x  (± 0.00) slower
       range#member?:   124019.1 i/s - 42.50x  (± 0.00) slower
      range#include?:   123051.5 i/s - 42.84x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
       String#match?   918.092k i/100ms
           String#=~   644.999k i/100ms
          Regexp#===   557.064k i/100ms
        String#match   456.830k i/100ms
Calculating -------------------------------------
       String#match?      9.207M (± 0.4%) i/s -     46.823M in   5.085850s
           String#=~      6.407M (± 0.6%) i/s -     32.250M in   5.033784s
          Regexp#===      5.590M (± 0.3%) i/s -     28.410M in   5.082477s
        String#match      4.568M (± 3.8%) i/s -     22.842M in   5.009892s

Comparison:
       String#match?:  9206608.0 i/s
           String#=~:  6406916.3 i/s - 1.44x  (± 0.00) slower
          Regexp#===:  5589910.9 i/s - 1.65x  (± 0.00) slower
        String#match:  4567746.4 i/s - 2.02x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   649.868k i/100ms
      String#casecmp   799.732k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.499M (± 2.6%) i/s -     32.493M in   5.003801s
      String#casecmp      8.110M (± 1.3%) i/s -     40.786M in   5.029944s

Comparison:
      String#casecmp:  8110038.2 i/s
String#downcase + ==:  6498813.2 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
            String#+   589.757k i/100ms
       String#concat   621.410k i/100ms
       String#append   674.424k i/100ms
         "foo" "bar"     1.162M i/100ms
  "#{'foo'}#{'bar'}"     1.171M i/100ms
Calculating -------------------------------------
            String#+      5.947M (± 0.6%) i/s -     30.078M in   5.057686s
       String#concat      6.223M (± 0.6%) i/s -     31.692M in   5.092936s
       String#append      6.758M (± 0.5%) i/s -     34.396M in   5.089771s
         "foo" "bar"     11.659M (± 0.4%) i/s -     59.254M in   5.082407s
  "#{'foo'}#{'bar'}"     11.659M (± 0.4%) i/s -     58.568M in   5.023361s

Comparison:
  "#{'foo'}#{'bar'}": 11659290.9 i/s
         "foo" "bar": 11658929.0 i/s - same-ish: difference falls within error
       String#append:  6757943.2 i/s - 1.73x  (± 0.00) slower
       String#concat:  6222924.4 i/s - 1.87x  (± 0.00) slower
            String#+:  5947161.0 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
           String#+@     1.012M i/100ms
          String#dup   581.006k i/100ms
Calculating -------------------------------------
           String#+@     10.121M (± 0.3%) i/s -     51.588M in   5.097447s
          String#dup      5.840M (± 0.3%) i/s -     29.631M in   5.074074s

Comparison:
           String#+@: 10120542.7 i/s
          String#dup:  5839798.7 i/s - 1.73x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
           String#=~   180.863k i/100ms
       String#match?   417.655k i/100ms
    String#end_with?   598.383k i/100ms
Calculating -------------------------------------
           String#=~      1.848M (± 0.7%) i/s -      9.405M in   5.088878s
       String#match?      4.158M (± 1.1%) i/s -     20.883M in   5.022396s
    String#end_with?      6.103M (± 0.2%) i/s -     30.518M in   5.000238s

Comparison:
    String#end_with?:  6103243.2 i/s
       String#match?:  4158413.4 i/s - 1.47x  (± 0.00) slower
           String#=~:  1848220.8 i/s - 3.30x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   109.551k i/100ms
          String#sub   134.610k i/100ms
String#dup["string"]=
                       178.087k i/100ms
Calculating -------------------------------------
         String#gsub      1.105M (± 1.1%) i/s -      5.587M in   5.058651s
          String#sub      1.409M (± 1.2%) i/s -      7.134M in   5.064325s
String#dup["string"]=
                          1.799M (± 0.7%) i/s -      9.082M in   5.048954s

Comparison:
String#dup["string"]=:  1798975.8 i/s
          String#sub:  1408961.2 i/s - 1.28x  (± 0.00) slower
         String#gsub:  1104610.7 i/s - 1.63x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    99.883k i/100ms
           String#tr   331.232k i/100ms
Calculating -------------------------------------
         String#gsub      1.019M (± 0.5%) i/s -      5.094M in   5.000690s
           String#tr      3.297M (± 0.3%) i/s -     16.562M in   5.024004s

Comparison:
           String#tr:  3296521.9 i/s
         String#gsub:  1018687.8 i/s - 3.24x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.182M i/100ms
         With Freeze     1.686M i/100ms
Calculating -------------------------------------
      Without Freeze     11.698M (± 0.3%) i/s -     59.102M in   5.052397s
         With Freeze     16.876M (± 0.3%) i/s -     86.005M in   5.096445s

Comparison:
         With Freeze: 16875586.4 i/s
      Without Freeze: 11697850.7 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.410k i/100ms
      String#squeeze   155.793k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     34.152k (± 0.8%) i/s -    173.910k in   5.092641s
      String#squeeze      1.559M (± 0.4%) i/s -      7.945M in   5.096414s

Comparison:
      String#squeeze:  1559053.9 i/s
 String#gsub/regex+/:    34151.6 i/s - 45.65x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
           String#=~   283.432k i/100ms
       String#match?   721.232k i/100ms
  String#start_with?   806.718k i/100ms
Calculating -------------------------------------
           String#=~      2.832M (± 1.9%) i/s -     14.172M in   5.005230s
       String#match?      7.214M (± 1.4%) i/s -     36.783M in   5.099984s
  String#start_with?      8.111M (± 0.7%) i/s -     41.143M in   5.072969s

Comparison:
  String#start_with?:  8110633.6 i/s
       String#match?:  7213782.5 i/s - 1.12x  (± 0.00) slower
           String#=~:  2832465.5 i/s - 2.86x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   190.820k i/100ms
    String#[0, n] ==    81.687k i/100ms
   String#[RANGE] ==    76.782k i/100ms
   String#[0...n] ==    47.905k i/100ms
Calculating -------------------------------------
  String#start_with?      1.907M (± 1.2%) i/s -      9.541M in   5.003758s
    String#[0, n] ==    809.672k (± 0.5%) i/s -      4.084M in   5.044572s
   String#[RANGE] ==    752.572k (± 0.9%) i/s -      3.839M in   5.101746s
   String#[0...n] ==    468.128k (± 0.8%) i/s -      2.347M in   5.014625s

Comparison:
  String#start_with?:  1907042.2 i/s
    String#[0, n] ==:   809671.6 i/s - 2.36x  (± 0.00) slower
   String#[RANGE] ==:   752572.1 i/s - 2.53x  (± 0.00) slower
   String#[0...n] ==:   468128.3 i/s - 4.07x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   178.168k i/100ms
 String#sub!'string'   124.867k i/100ms
String#gsub!'string'    77.446k i/100ms
  String#[/regexp/]=   153.897k i/100ms
 String#sub!/regexp/   114.982k i/100ms
String#gsub!/regexp/    60.707k i/100ms
Calculating -------------------------------------
  String#['string']=      1.812M (± 0.8%) i/s -      9.087M in   5.016364s
 String#sub!'string'      1.269M (± 0.5%) i/s -      6.368M in   5.019667s
String#gsub!'string'    773.312k (± 0.6%) i/s -      3.872M in   5.007590s
  String#[/regexp/]=      1.536M (± 0.6%) i/s -      7.695M in   5.009541s
 String#sub!/regexp/      1.139M (± 1.7%) i/s -      5.749M in   5.047284s
String#gsub!/regexp/    600.332k (± 0.7%) i/s -      3.035M in   5.056401s

Comparison:
  String#['string']=:  1811502.5 i/s
  String#[/regexp/]=:  1536091.4 i/s - 1.18x  (± 0.00) slower
 String#sub!'string':  1268679.9 i/s - 1.43x  (± 0.00) slower
 String#sub!/regexp/:  1139398.2 i/s - 1.59x  (± 0.00) slower
String#gsub!'string':   773311.6 i/s - 2.34x  (± 0.00) slower
String#gsub!/regexp/:   600331.7 i/s - 3.02x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
          String#sub   142.189k i/100ms
        String#chomp   566.696k i/100ms
String#delete_suffix   615.216k i/100ms
Calculating -------------------------------------
          String#sub      1.436M (± 0.6%) i/s -      7.252M in   5.051598s
        String#chomp      5.646M (± 0.3%) i/s -     28.335M in   5.019040s
String#delete_suffix      6.167M (± 0.2%) i/s -     31.376M in   5.087737s

Comparison:
String#delete_suffix:  6167007.8 i/s
        String#chomp:  5645512.8 i/s - 1.09x  (± 0.00) slower
          String#sub:  1435561.0 i/s - 4.30x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   633.539k i/100ms
          String#sub   146.706k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.306M (± 0.2%) i/s -     31.677M in   5.023714s
          String#sub      1.465M (± 0.5%) i/s -      7.335M in   5.008076s

Comparison:
String#delete_prefix:  6305506.1 i/s
          String#sub:  1464734.9 i/s - 4.30x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   626.890k i/100ms
    String#unpack[0]   484.116k i/100ms
Calculating -------------------------------------
      String#unpack1      6.339M (± 0.5%) i/s -     31.971M in   5.043900s
    String#unpack[0]      4.832M (± 0.5%) i/s -     24.206M in   5.009658s

Comparison:
      String#unpack1:  6338784.1 i/s
    String#unpack[0]:  4831938.1 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.352k i/100ms
          Time.parse     9.344k i/100ms
Calculating -------------------------------------
        Time.iso8601    272.102k (± 0.4%) i/s -      1.368M in   5.026160s
          Time.parse     93.435k (± 0.4%) i/s -    467.200k in   5.000340s

Comparison:
        Time.iso8601:   272101.5 i/s
          Time.parse:    93435.1 i/s - 2.91x  (± 0.00) slower

