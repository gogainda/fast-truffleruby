$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       766.959k i/100ms
Function with splat arguments
                        22.604k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.638M (± 2.4%) i/s -     38.348M in   5.023965s
Function with splat arguments
                        235.255k (± 6.2%) i/s -      1.175M in   5.022802s

Comparison:
Function with single Array argument:  7638169.5 i/s
Function with splat arguments:   235255.0 i/s - 32.47x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.001M i/100ms
Sequential Assignment
                       989.875k i/100ms
Calculating -------------------------------------
 Parallel Assignment      9.793M (± 0.8%) i/s -     49.047M in   5.008678s
Sequential Assignment
                          9.898M (± 0.6%) i/s -     49.494M in   5.000733s

Comparison:
Sequential Assignment:  9897663.4 i/s
 Parallel Assignment:  9792943.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   483.649k i/100ms
       attr_accessor   551.800k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.840M (± 0.9%) i/s -     24.666M in   5.097150s
       attr_accessor      5.541M (± 0.5%) i/s -     28.142M in   5.078836s

Comparison:
       attr_accessor:  5541128.1 i/s
   getter_and_setter:  4839627.7 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    87.651k i/100ms
         respond_to?   784.167k i/100ms
Calculating -------------------------------------
      begin...rescue    879.970k (± 0.9%) i/s -      4.470M in   5.080330s
         respond_to?      7.791M (± 2.8%) i/s -     39.208M in   5.037225s

Comparison:
         respond_to?:  7791036.7 i/s
      begin...rescue:   879969.7 i/s - 8.85x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
              normal   300.466k i/100ms
             &method   122.960k i/100ms
Calculating -------------------------------------
              normal      3.017M (± 0.5%) i/s -     15.324M in   5.079812s
             &method      1.222M (± 2.8%) i/s -      6.148M in   5.037249s

Comparison:
              normal:  3016684.7 i/s
             &method:  1221575.7 i/s - 2.47x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       236.000  i/100ms
       define_method   308.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.310k (±17.4%) i/s -     10.856k in   5.063474s
       define_method      3.201k (±18.9%) i/s -     14.476k in   5.013465s

Comparison:
       define_method:     3200.6 i/s
module_eval with string:     2309.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
         Float#round   259.379k i/100ms
       Kernel#format   202.872k i/100ms
            String#%   170.661k i/100ms
Calculating -------------------------------------
         Float#round      2.606M (± 0.8%) i/s -     13.228M in   5.077323s
       Kernel#format      2.004M (± 0.6%) i/s -     10.144M in   5.060899s
            String#%      1.718M (± 0.3%) i/s -      8.704M in   5.066390s

Comparison:
         Float#round:  2605560.4 i/s
       Kernel#format:  2004373.7 i/s - 1.30x  (± 0.00) slower
            String#%:  1717949.7 i/s - 1.52x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
                Hash   896.603k i/100ms
          OpenStruct   508.067k i/100ms
Calculating -------------------------------------
                Hash      9.036M (± 2.4%) i/s -     45.727M in   5.063848s
          OpenStruct      5.061M (± 0.4%) i/s -     25.403M in   5.019748s

Comparison:
                Hash:  9035981.1 i/s
          OpenStruct:  5060779.8 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.114M i/100ms
          OpenStruct     9.801k i/100ms
Calculating -------------------------------------
                Hash     11.161M (± 0.5%) i/s -     56.811M in   5.090058s
          OpenStruct     97.162k (± 2.4%) i/s -    490.050k in   5.046617s

Comparison:
                Hash: 11161482.2 i/s
          OpenStruct:    97162.3 i/s - 114.87x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   595.560k i/100ms
  ancestors.include?   120.172k i/100ms
Calculating -------------------------------------
  less than or equal      5.844M (± 0.8%) i/s -     29.778M in   5.095550s
  ancestors.include?      1.191M (± 0.6%) i/s -      6.009M in   5.044785s

Comparison:
  less than or equal:  5844293.1 i/s
  ancestors.include?:  1191099.9 i/s - 4.91x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.690  (± 0.0%) i/s -      4.000  in   5.800994s
         Kernel loop      0.226  (± 0.0%) i/s -      2.000  in   8.845519s

Comparison:
          While Loop:        0.7 i/s
         Kernel loop:        0.2 i/s - 3.05x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.547M i/100ms
         Array#first     1.328M i/100ms
Calculating -------------------------------------
           Array#[0]     15.709M (± 0.2%) i/s -     78.887M in   5.021768s
         Array#first     13.248M (± 0.3%) i/s -     66.380M in   5.010469s

Comparison:
           Array#[0]: 15709119.7 i/s
         Array#first: 13248397.4 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.556M i/100ms
          Array#last     1.331M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.499M (± 2.2%) i/s -     77.792M in   5.021855s
          Array#last     13.256M (± 0.7%) i/s -     66.563M in   5.021428s

Comparison:
          Array#[-1]: 15498687.7 i/s
          Array#last: 13256477.3 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    97.809k i/100ms
Calculating -------------------------------------
                find      0.287  (± 0.0%) i/s -      2.000  in   6.969418s
             bsearch    978.185k (± 1.8%) i/s -      4.890M in   5.001273s

Comparison:
             bsearch:   978184.8 i/s
                find:        0.3 i/s - 3408681.30x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    19.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    195.346  (± 3.6%) i/s -    988.000  in   5.063790s
        Array#insert      1.437  (± 0.0%) i/s -      8.000  in   5.567784s

Comparison:
       Array#unshift:      195.3 i/s
        Array#insert:        1.4 i/s - 135.95x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.091M i/100ms
          Array#size     2.088M i/100ms
         Array#count     1.570M i/100ms
Calculating -------------------------------------
        Array#length     20.734M (± 4.0%) i/s -    104.565M in   5.054490s
          Array#size     20.963M (± 2.4%) i/s -    106.469M in   5.082116s
         Array#count     15.846M (± 0.4%) i/s -     80.083M in   5.053829s

Comparison:
          Array#size: 20963321.7 i/s
        Array#length: 20734282.2 i/s - same-ish: difference falls within error
         Array#count: 15846222.9 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.625k i/100ms
        Array#sample     1.045M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    462.353k (± 0.5%) i/s -      2.327M in   5.032820s
        Array#sample     10.488M (± 0.2%) i/s -     53.311M in   5.083024s

Comparison:
        Array#sample: 10488065.4 i/s
 Array#shuffle.first:   462353.0 i/s - 22.68x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    63.958k i/100ms
          Date.parse    32.723k i/100ms
Calculating -------------------------------------
        Date.iso8601    644.851k (± 0.5%) i/s -      3.262M in   5.058434s
          Date.parse    324.872k (± 0.2%) i/s -      1.636M in   5.036308s

Comparison:
        Date.iso8601:   644851.1 i/s
          Date.parse:   324872.1 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    18.812k i/100ms
           Array#map    27.073k i/100ms
Calculating -------------------------------------
   Array#each + push    189.100k (± 0.8%) i/s -    959.412k in   5.073860s
           Array#map    269.805k (± 0.6%) i/s -      1.354M in   5.017304s

Comparison:
           Array#map:   269805.3 i/s
   Array#each + push:   189100.3 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
            For loop    29.776k i/100ms
               #each    32.494k i/100ms
Calculating -------------------------------------
            For loop    293.498k (± 3.5%) i/s -      1.489M in   5.079446s
               #each    325.595k (± 0.5%) i/s -      1.657M in   5.089871s

Comparison:
               #each:   325595.1 i/s
            For loop:   293498.0 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
          While Loop    28.189k i/100ms
     each_with_index    18.714k i/100ms
Calculating -------------------------------------
          While Loop    282.012k (± 0.7%) i/s -      1.438M in   5.098070s
     each_with_index    187.407k (± 0.3%) i/s -    954.414k in   5.092789s

Comparison:
          While Loop:   282011.9 i/s
     each_with_index:   187407.1 i/s - 1.50x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    92.857k i/100ms
      inject to_proc     2.179k i/100ms
        inject block     2.148k i/100ms
Calculating -------------------------------------
       inject symbol    959.220k (±10.4%) i/s -      4.829M in   5.076379s
      inject to_proc     21.883k (± 2.9%) i/s -    111.129k in   5.083414s
        inject block     21.540k (± 1.0%) i/s -    109.548k in   5.086300s

Comparison:
       inject symbol:   959219.6 i/s
      inject to_proc:    21882.8 i/s - 43.83x  (± 0.00) slower
        inject block:    21540.2 i/s - 44.53x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.887k i/100ms
   Array#map.flatten     4.007k i/100ms
      Array#flat_map     9.475k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     68.846k (± 0.5%) i/s -    344.350k in   5.001856s
   Array#map.flatten     39.669k (± 0.9%) i/s -    200.350k in   5.050994s
      Array#flat_map     95.072k (± 0.2%) i/s -    483.225k in   5.082770s

Comparison:
      Array#flat_map:    95071.7 i/s
Array#map.flatten(1):    68846.4 i/s - 1.38x  (± 0.00) slower
   Array#map.flatten:    39668.6 i/s - 2.40x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    31.485k i/100ms
  Array#reverse_each    32.431k i/100ms
Calculating -------------------------------------
  Array#reverse.each    317.247k (± 0.5%) i/s -      1.606M in   5.061596s
  Array#reverse_each    324.766k (± 0.3%) i/s -      1.654M in   5.092875s

Comparison:
  Array#reverse_each:   324766.2 i/s
  Array#reverse.each:   317246.6 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        21.043k i/100ms
   Enumerable#detect    82.039k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        209.720k (± 0.6%) i/s -      4.209M in  20.068580s
   Enumerable#detect    830.546k (± 1.8%) i/s -     16.654M in  20.059371s

Comparison:
   Enumerable#detect:   830545.8 i/s
Enumerable#select.first:   209720.1 i/s - 3.96x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       241.632k i/100ms
Enumerable#select.last
                        18.915k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.445M (± 0.3%) i/s -     12.323M in   5.040321s
Enumerable#select.last
                        189.124k (± 0.6%) i/s -    945.750k in   5.000852s

Comparison:
Enumerable#reverse.detect:  2444956.6 i/s
Enumerable#select.last:   189124.0 i/s - 12.93x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.912k i/100ms
  Enumerable#sort_by     4.870k i/100ms
     Enumerable#sort     2.465k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         51.324k (± 1.2%) i/s -    260.336k in   5.073156s
  Enumerable#sort_by     49.709k (± 2.5%) i/s -    253.240k in   5.098013s
     Enumerable#sort     24.567k (± 2.1%) i/s -    123.250k in   5.019395s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    51324.3 i/s
  Enumerable#sort_by:    49708.6 i/s - same-ish: difference falls within error
     Enumerable#sort:    24567.0 i/s - 2.09x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.925k i/100ms
Enumerable#sort_by...first
                         8.565k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    179.557k (± 0.1%) i/s -    914.175k in   5.091305s
Enumerable#sort_by...first
                         88.516k (± 0.7%) i/s -    445.380k in   5.031896s

Comparison:
   Enumerable#min_by:   179556.5 i/s
Enumerable#sort_by...first:    88516.1 i/s - 2.03x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   423.360k i/100ms
            Hash#dup   308.369k i/100ms
Calculating -------------------------------------
              Hash[]      4.253M (± 1.2%) i/s -     21.591M in   5.076957s
            Hash#dup      3.021M (± 3.6%) i/s -     15.110M in   5.010100s

Comparison:
              Hash[]:  4253440.2 i/s
            Hash#dup:  3020523.0 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.433M i/100ms
  Hash#fetch, symbol     1.147M i/100ms
     Hash#[], string     1.239M i/100ms
  Hash#fetch, string   787.829k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.341M (± 0.3%) i/s -     73.106M in   5.097747s
  Hash#fetch, symbol     11.726M (± 0.1%) i/s -     59.646M in   5.086727s
     Hash#[], string     12.506M (± 0.2%) i/s -     63.207M in   5.054189s
  Hash#fetch, string      7.872M (± 0.4%) i/s -     39.391M in   5.003912s

Comparison:
     Hash#[], symbol: 14340893.0 i/s
     Hash#[], string: 12505951.1 i/s - 1.15x  (± 0.00) slower
  Hash#fetch, symbol: 11725839.6 i/s - 1.22x  (± 0.00) slower
  Hash#fetch, string:  7872248.0 i/s - 1.82x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   862.869k i/100ms
             Hash#[]     1.026M i/100ms
          Hash#[] ||   946.627k i/100ms
          Hash#[] &&   424.318k i/100ms
          Hash#fetch   600.696k i/100ms
 Hash#fetch fallback   389.595k i/100ms
Calculating -------------------------------------
            Hash#dig      8.491M (± 0.7%) i/s -     43.143M in   5.081311s
             Hash#[]     10.238M (± 0.5%) i/s -     51.296M in   5.010621s
          Hash#[] ||      9.539M (± 0.9%) i/s -     48.278M in   5.061254s
          Hash#[] &&      4.150M (± 0.8%) i/s -     20.792M in   5.009957s
          Hash#fetch      5.931M (± 0.3%) i/s -     30.035M in   5.064337s
 Hash#fetch fallback      3.892M (± 1.0%) i/s -     19.480M in   5.005568s

Comparison:
             Hash#[]: 10237701.2 i/s
          Hash#[] ||:  9539471.0 i/s - 1.07x  (± 0.00) slower
            Hash#dig:  8491008.2 i/s - 1.21x  (± 0.00) slower
          Hash#fetch:  5930720.1 i/s - 1.73x  (± 0.00) slower
          Hash#[] &&:  4150349.1 i/s - 2.47x  (± 0.00) slower
 Hash#fetch fallback:  3892036.9 i/s - 2.63x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.442M i/100ms
  Hash#fetch + block     1.457M i/100ms
    Hash#fetch + arg     1.086M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.571M (± 0.3%) i/s -     73.561M in   5.048369s
  Hash#fetch + block     14.590M (± 0.4%) i/s -     74.313M in   5.093328s
    Hash#fetch + arg     10.844M (± 0.9%) i/s -     54.306M in   5.008170s

Comparison:
  Hash#fetch + block: 14590425.2 i/s
  Hash#fetch + const: 14571302.2 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 10844408.1 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.471k i/100ms
         sort + to_h    10.976k i/100ms
Calculating -------------------------------------
      sort_by + to_h    274.937k (± 1.6%) i/s -      1.401M in   5.097222s
         sort + to_h    110.512k (± 0.6%) i/s -    559.776k in   5.065494s

Comparison:
      sort_by + to_h:   274936.9 i/s
         sort + to_h:   110512.3 i/s - 2.49x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   190.861k i/100ms
       Hash#each_key   207.302k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.894M (± 0.5%) i/s -      9.543M in   5.037466s
       Hash#each_key      2.072M (± 1.2%) i/s -     10.365M in   5.002481s

Comparison:
       Hash#each_key:  2072271.8 i/s
      Hash#keys.each:  1894456.1 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.286k i/100ms
           Hash#key?   979.630k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     12.207k (± 4.0%) i/s -     61.728k in   5.065997s
           Hash#key?      9.775M (± 0.6%) i/s -     48.982M in   5.010836s

Comparison:
           Hash#key?:  9775427.9 i/s
  Hash#keys.include?:    12206.7 i/s - 800.82x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.056k i/100ms
            Hash#[]=    10.619k i/100ms
Calculating -------------------------------------
         Hash#merge!     40.148k (± 0.8%) i/s -    202.800k in   5.051595s
            Hash#[]=    106.172k (± 1.1%) i/s -    530.950k in   5.001430s

Comparison:
            Hash#[]=:   106172.0 i/s
         Hash#merge!:    40148.3 i/s - 2.64x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.746k i/100ms
      Hash#merge({})     4.013k i/100ms
 Hash#dup#merge!({})     2.916k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         48.640k (± 0.7%) i/s -    246.792k in   5.074155s
      Hash#merge({})     39.917k (± 0.5%) i/s -    200.650k in   5.026888s
 Hash#dup#merge!({})     29.114k (± 0.6%) i/s -    145.800k in   5.008152s

Comparison:
{}#merge!(Hash) do end:    48639.6 i/s
      Hash#merge({}):    39916.6 i/s - 1.22x  (± 0.00) slower
 Hash#dup#merge!({}):    29113.5 i/s - 1.67x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   394.849k i/100ms
          Hash#merge   368.288k i/100ms
Calculating -------------------------------------
        Hash#**other      3.953M (± 0.5%) i/s -     20.137M in   5.094211s
          Hash#merge      3.675M (± 0.5%) i/s -     18.414M in   5.011461s

Comparison:
        Hash#**other:  3953074.4 i/s
          Hash#merge:  3674565.1 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.690k i/100ms
         Hash#merge!     3.998k i/100ms
Calculating -------------------------------------
          Hash#merge     16.503k (± 1.1%) i/s -     82.810k in   5.018600s
         Hash#merge!     39.861k (± 0.8%) i/s -    199.900k in   5.015272s

Comparison:
         Hash#merge!:    39860.6 i/s
          Hash#merge:    16502.8 i/s - 2.42x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      427.357k i/100ms
Array#each             232.087k i/100ms
Array#each_w/_object   174.825k i/100ms
Hash#select-include     70.652k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.269M (± 0.7%) i/s -     21.368M in   5.005213s
Array#each                2.278M (± 0.7%) i/s -     11.604M in   5.094673s
Array#each_w/_object      1.762M (± 0.5%) i/s -      8.916M in   5.061515s
Hash#select-include     702.684k (± 3.4%) i/s -      3.533M in   5.034026s

Comparison:
Hash#native-slice   :  4269318.0 i/s
Array#each          :  2277869.9 i/s - 1.87x  (± 0.00) slower
Array#each_w/_object:  1761593.1 i/s - 2.42x  (± 0.00) slower
Hash#select-include :   702684.1 i/s - 6.08x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.281k i/100ms
         Hash#value?     1.013k i/100ms
Calculating -------------------------------------
Hash#values.include?     12.556k (± 4.0%) i/s -     62.769k in   5.008184s
         Hash#value?      9.956k (± 0.7%) i/s -     50.650k in   5.087628s

Comparison:
Hash#values.include?:    12555.6 i/s
         Hash#value?:     9956.0 i/s - 1.26x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
                call   668.989k i/100ms
                send   515.731k i/100ms
      method_missing   389.474k i/100ms
Calculating -------------------------------------
                call      6.691M (± 0.6%) i/s -     34.118M in   5.099154s
                send      5.173M (± 0.4%) i/s -     26.302M in   5.084336s
      method_missing      3.874M (± 2.2%) i/s -     19.474M in   5.029675s

Comparison:
                call:  6691229.2 i/s
                send:  5173298.1 i/s - 1.29x  (± 0.00) slower
      method_missing:  3873827.1 i/s - 1.73x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
               Block     9.108k i/100ms
      Symbol#to_proc    10.222k i/100ms
Calculating -------------------------------------
               Block     90.549k (± 0.5%) i/s -    455.400k in   5.029460s
      Symbol#to_proc    101.926k (± 2.1%) i/s -    511.100k in   5.016887s

Comparison:
      Symbol#to_proc:   101925.5 i/s
               Block:    90549.0 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
          block.call   919.053k i/100ms
       block + yield   973.827k i/100ms
        unused block     1.286M i/100ms
               yield     1.158M i/100ms
Calculating -------------------------------------
          block.call      9.187M (± 0.4%) i/s -     45.953M in   5.001921s
       block + yield      9.743M (± 0.4%) i/s -     49.665M in   5.097410s
        unused block     12.867M (± 0.4%) i/s -     65.609M in   5.099086s
               yield     11.572M (± 0.3%) i/s -     57.892M in   5.002650s

Comparison:
        unused block: 12867099.7 i/s
               yield: 11572411.3 i/s - 1.11x  (± 0.00) slower
       block + yield:  9743366.0 i/s - 1.32x  (± 0.00) slower
          block.call:  9187139.4 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   327.119k i/100ms
      range#include?    12.430k i/100ms
       range#member?    12.431k i/100ms
       plain compare   526.524k i/100ms
Calculating -------------------------------------
        range#cover?      3.276M (± 0.4%) i/s -     16.683M in   5.092050s
      range#include?    126.761k (± 1.6%) i/s -    633.930k in   5.002457s
       range#member?    126.449k (± 0.5%) i/s -    633.981k in   5.013858s
       plain compare      5.254M (± 0.5%) i/s -     26.326M in   5.011032s

Comparison:
       plain compare:  5253806.8 i/s
        range#cover?:  3276347.5 i/s - 1.60x  (± 0.00) slower
      range#include?:   126761.2 i/s - 41.45x  (± 0.00) slower
       range#member?:   126448.6 i/s - 41.55x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
       String#match?   917.277k i/100ms
           String#=~   631.728k i/100ms
          Regexp#===   572.843k i/100ms
        String#match   470.173k i/100ms
Calculating -------------------------------------
       String#match?      9.103M (± 2.2%) i/s -     45.864M in   5.041076s
           String#=~      6.459M (± 0.8%) i/s -     32.850M in   5.086247s
          Regexp#===      5.702M (± 0.1%) i/s -     28.642M in   5.022830s
        String#match      4.712M (± 0.9%) i/s -     23.979M in   5.089280s

Comparison:
       String#match?:  9102762.5 i/s
           String#=~:  6458957.0 i/s - 1.41x  (± 0.00) slower
          Regexp#===:  5702401.2 i/s - 1.60x  (± 0.00) slower
        String#match:  4712012.1 i/s - 1.93x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   643.427k i/100ms
      String#casecmp   810.482k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.392M (± 1.5%) i/s -     32.171M in   5.034625s
      String#casecmp      8.071M (± 1.2%) i/s -     40.524M in   5.021971s

Comparison:
      String#casecmp:  8070625.2 i/s
String#downcase + ==:  6391540.2 i/s - 1.26x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
            String#+   570.587k i/100ms
       String#concat   611.705k i/100ms
       String#append   660.274k i/100ms
         "foo" "bar"     1.064M i/100ms
  "#{'foo'}#{'bar'}"     1.147M i/100ms
Calculating -------------------------------------
            String#+      5.433M (± 2.1%) i/s -     27.388M in   5.043093s
       String#concat      6.126M (± 0.6%) i/s -     31.197M in   5.092827s
       String#append      6.626M (± 0.4%) i/s -     33.674M in   5.082523s
         "foo" "bar"     11.207M (± 0.3%) i/s -     56.368M in   5.029544s
  "#{'foo'}#{'bar'}"     11.483M (± 0.3%) i/s -     58.488M in   5.093388s

Comparison:
  "#{'foo'}#{'bar'}": 11483309.2 i/s
         "foo" "bar": 11207407.2 i/s - 1.02x  (± 0.00) slower
       String#append:  6625576.5 i/s - 1.73x  (± 0.00) slower
       String#concat:  6125861.8 i/s - 1.87x  (± 0.00) slower
            String#+:  5433384.4 i/s - 2.11x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
           String#+@     1.015M i/100ms
          String#dup   585.051k i/100ms
Calculating -------------------------------------
           String#+@     10.089M (± 1.3%) i/s -     50.738M in   5.030032s
          String#dup      5.887M (± 0.5%) i/s -     29.838M in   5.068490s

Comparison:
           String#+@: 10088994.6 i/s
          String#dup:  5887010.7 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
           String#=~   187.884k i/100ms
       String#match?   427.860k i/100ms
    String#end_with?   623.076k i/100ms
Calculating -------------------------------------
           String#=~      1.880M (± 0.7%) i/s -      9.582M in   5.097560s
       String#match?      4.295M (± 1.7%) i/s -     21.821M in   5.081938s
    String#end_with?      6.225M (± 0.5%) i/s -     31.154M in   5.004592s

Comparison:
    String#end_with?:  6225217.2 i/s
       String#match?:  4295203.5 i/s - 1.45x  (± 0.00) slower
           String#=~:  1879822.8 i/s - 3.31x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   113.050k i/100ms
          String#sub   137.796k i/100ms
String#dup["string"]=
                       183.800k i/100ms
Calculating -------------------------------------
         String#gsub      1.142M (± 0.6%) i/s -      5.766M in   5.047878s
          String#sub      1.389M (± 0.6%) i/s -      7.028M in   5.059853s
String#dup["string"]=
                          1.807M (± 0.6%) i/s -      9.190M in   5.085993s

Comparison:
String#dup["string"]=:  1806988.9 i/s
          String#sub:  1388944.3 i/s - 1.30x  (± 0.00) slower
         String#gsub:  1142216.7 i/s - 1.58x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   105.384k i/100ms
           String#tr   347.280k i/100ms
Calculating -------------------------------------
         String#gsub      1.049M (± 1.1%) i/s -      5.269M in   5.024298s
           String#tr      3.463M (± 0.4%) i/s -     17.364M in   5.014521s

Comparison:
           String#tr:  3462813.2 i/s
         String#gsub:  1048864.5 i/s - 3.30x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.179M i/100ms
         With Freeze     1.687M i/100ms
Calculating -------------------------------------
      Without Freeze     11.769M (± 0.5%) i/s -     58.959M in   5.009980s
         With Freeze     16.900M (± 0.3%) i/s -     86.035M in   5.090878s

Comparison:
         With Freeze: 16900114.7 i/s
      Without Freeze: 11768693.5 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.423k i/100ms
      String#squeeze   156.725k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     33.995k (± 2.9%) i/s -    171.150k in   5.039262s
      String#squeeze      1.574M (± 0.3%) i/s -      7.993M in   5.076791s

Comparison:
      String#squeeze:  1574432.7 i/s
 String#gsub/regex+/:    33995.3 i/s - 46.31x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
           String#=~   282.166k i/100ms
       String#match?   758.078k i/100ms
  String#start_with?   863.019k i/100ms
Calculating -------------------------------------
           String#=~      2.815M (± 0.7%) i/s -     14.108M in   5.012015s
       String#match?      7.568M (± 0.5%) i/s -     37.904M in   5.008829s
  String#start_with?      8.608M (± 0.5%) i/s -     43.151M in   5.012865s

Comparison:
  String#start_with?:  8608220.7 i/s
       String#match?:  7567620.9 i/s - 1.14x  (± 0.00) slower
           String#=~:  2815018.7 i/s - 3.06x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   195.447k i/100ms
    String#[0, n] ==    81.021k i/100ms
   String#[RANGE] ==    74.793k i/100ms
   String#[0...n] ==    47.062k i/100ms
Calculating -------------------------------------
  String#start_with?      1.907M (± 0.7%) i/s -      9.577M in   5.022465s
    String#[0, n] ==    806.251k (± 1.1%) i/s -      4.051M in   5.025142s
   String#[RANGE] ==    747.614k (± 0.6%) i/s -      3.740M in   5.002308s
   String#[0...n] ==    468.514k (± 0.3%) i/s -      2.353M in   5.022535s

Comparison:
  String#start_with?:  1906903.2 i/s
    String#[0, n] ==:   806250.6 i/s - 2.37x  (± 0.00) slower
   String#[RANGE] ==:   747614.5 i/s - 2.55x  (± 0.00) slower
   String#[0...n] ==:   468514.1 i/s - 4.07x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   181.763k i/100ms
 String#sub!'string'   127.391k i/100ms
String#gsub!'string'    77.879k i/100ms
  String#[/regexp/]=   152.700k i/100ms
 String#sub!/regexp/   115.057k i/100ms
String#gsub!/regexp/    60.820k i/100ms
Calculating -------------------------------------
  String#['string']=      1.827M (± 0.5%) i/s -      9.270M in   5.072582s
 String#sub!'string'      1.261M (± 2.4%) i/s -      6.370M in   5.052855s
String#gsub!'string'    769.679k (± 0.4%) i/s -      3.894M in   5.059274s
  String#[/regexp/]=      1.525M (± 0.3%) i/s -      7.635M in   5.005097s
 String#sub!/regexp/      1.141M (± 0.6%) i/s -      5.753M in   5.040037s
String#gsub!/regexp/    617.783k (± 1.3%) i/s -      3.102M in   5.021837s

Comparison:
  String#['string']=:  1827497.7 i/s
  String#[/regexp/]=:  1525454.6 i/s - 1.20x  (± 0.00) slower
 String#sub!'string':  1261381.9 i/s - 1.45x  (± 0.00) slower
 String#sub!/regexp/:  1141472.8 i/s - 1.60x  (± 0.00) slower
String#gsub!'string':   769679.4 i/s - 2.37x  (± 0.00) slower
String#gsub!/regexp/:   617783.0 i/s - 2.96x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
          String#sub   143.990k i/100ms
        String#chomp   565.818k i/100ms
String#delete_suffix   617.697k i/100ms
Calculating -------------------------------------
          String#sub      1.436M (± 0.6%) i/s -      7.200M in   5.013403s
        String#chomp      5.657M (± 0.4%) i/s -     28.291M in   5.001140s
String#delete_suffix      6.169M (± 0.5%) i/s -     30.885M in   5.006358s

Comparison:
String#delete_suffix:  6169267.3 i/s
        String#chomp:  5656991.2 i/s - 1.09x  (± 0.00) slower
          String#sub:  1436108.3 i/s - 4.30x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   625.922k i/100ms
          String#sub   148.918k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.244M (± 0.4%) i/s -     31.296M in   5.011997s
          String#sub      1.482M (± 0.6%) i/s -      7.446M in   5.022810s

Comparison:
String#delete_prefix:  6244328.8 i/s
          String#sub:  1482467.5 i/s - 4.21x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   627.466k i/100ms
    String#unpack[0]   464.962k i/100ms
Calculating -------------------------------------
      String#unpack1      6.276M (± 0.4%) i/s -     32.001M in   5.099353s
    String#unpack[0]      4.622M (± 0.6%) i/s -     23.248M in   5.030444s

Comparison:
      String#unpack1:  6275542.4 i/s
    String#unpack[0]:  4621622.3 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    28.398k i/100ms
          Time.parse     9.678k i/100ms
Calculating -------------------------------------
        Time.iso8601    286.395k (± 0.6%) i/s -      1.448M in   5.057163s
          Time.parse     96.485k (± 0.6%) i/s -    483.900k in   5.015479s

Comparison:
        Time.iso8601:   286395.1 i/s
          Time.parse:    96485.0 i/s - 2.97x  (± 0.00) slower

