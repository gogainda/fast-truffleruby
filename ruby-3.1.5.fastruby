$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       776.823k i/100ms
Function with splat arguments
                        26.322k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.771M (± 0.9%) i/s -     39.618M in   5.098305s
Function with splat arguments
                        268.527k (± 5.6%) i/s -      1.342M in   5.021459s

Comparison:
Function with single Array argument:  7771425.0 i/s
Function with splat arguments:   268527.0 i/s - 28.94x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.004M i/100ms
Sequential Assignment
                         1.013M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.082M (± 0.3%) i/s -     51.224M in   5.080830s
Sequential Assignment
                         10.121M (± 2.8%) i/s -     50.669M in   5.010794s

Comparison:
Sequential Assignment: 10121357.7 i/s
 Parallel Assignment: 10081967.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   478.894k i/100ms
       attr_accessor   555.869k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.790M (± 0.3%) i/s -     24.424M in   5.098960s
       attr_accessor      5.549M (± 0.4%) i/s -     27.793M in   5.008652s

Comparison:
       attr_accessor:  5549198.1 i/s
   getter_and_setter:  4789974.2 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    89.882k i/100ms
         respond_to?   772.383k i/100ms
Calculating -------------------------------------
      begin...rescue    896.616k (± 0.7%) i/s -      4.494M in   5.012516s
         respond_to?      7.659M (± 1.7%) i/s -     38.619M in   5.043729s

Comparison:
         respond_to?:  7659117.5 i/s
      begin...rescue:   896615.9 i/s - 8.54x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
              normal   291.357k i/100ms
             &method   123.279k i/100ms
Calculating -------------------------------------
              normal      2.922M (± 0.8%) i/s -     14.859M in   5.086451s
             &method      1.238M (± 0.3%) i/s -      6.287M in   5.078475s

Comparison:
              normal:  2921520.0 i/s
             &method:  1238026.6 i/s - 2.36x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       263.000  i/100ms
       define_method   293.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.375k (±21.8%) i/s -     10.520k in   5.075075s
       define_method      3.231k (±20.8%) i/s -     14.943k in   5.046440s

Comparison:
       define_method:     3231.3 i/s
module_eval with string:     2375.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
         Float#round   262.959k i/100ms
       Kernel#format   201.079k i/100ms
            String#%   172.331k i/100ms
Calculating -------------------------------------
         Float#round      2.644M (± 0.1%) i/s -     13.411M in   5.072273s
       Kernel#format      2.021M (± 0.3%) i/s -     10.255M in   5.074189s
            String#%      1.726M (± 1.1%) i/s -      8.789M in   5.092000s

Comparison:
         Float#round:  2643968.8 i/s
       Kernel#format:  2021042.6 i/s - 1.31x  (± 0.00) slower
            String#%:  1726248.2 i/s - 1.53x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
                Hash   913.923k i/100ms
          OpenStruct   512.111k i/100ms
Calculating -------------------------------------
                Hash      9.105M (± 3.1%) i/s -     45.696M in   5.024592s
          OpenStruct      5.068M (± 0.4%) i/s -     25.606M in   5.052869s

Comparison:
                Hash:  9104800.3 i/s
          OpenStruct:  5067608.3 i/s - 1.80x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.090M i/100ms
          OpenStruct    11.722k i/100ms
Calculating -------------------------------------
                Hash     11.656M (± 0.5%) i/s -     58.855M in   5.049400s
          OpenStruct    117.786k (± 2.6%) i/s -    597.822k in   5.079074s

Comparison:
                Hash: 11656022.9 i/s
          OpenStruct:   117786.4 i/s - 98.96x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   586.265k i/100ms
  ancestors.include?   120.074k i/100ms
Calculating -------------------------------------
  less than or equal      5.975M (± 1.6%) i/s -     29.900M in   5.005700s
  ancestors.include?      1.197M (± 1.4%) i/s -      6.004M in   5.018609s

Comparison:
  less than or equal:  5974581.4 i/s
  ancestors.include?:  1196529.9 i/s - 4.99x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.633  (± 0.0%) i/s -      4.000  in   6.319451s
         Kernel loop      0.228  (± 0.0%) i/s -      2.000  in   8.760135s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 2.77x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.565M i/100ms
         Array#first     1.299M i/100ms
Calculating -------------------------------------
           Array#[0]     15.730M (± 0.4%) i/s -     79.838M in   5.075685s
         Array#first     13.038M (± 0.4%) i/s -     66.272M in   5.082995s

Comparison:
           Array#[0]: 15729657.3 i/s
         Array#first: 13038255.4 i/s - 1.21x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.551M i/100ms
          Array#last     1.328M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.534M (± 0.2%) i/s -     79.102M in   5.092322s
          Array#last     13.275M (± 0.3%) i/s -     66.379M in   5.000304s

Comparison:
          Array#[-1]: 15533626.3 i/s
          Array#last: 13275123.5 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    98.108k i/100ms
Calculating -------------------------------------
                find      0.285  (± 0.0%) i/s -      2.000  in   7.018614s
             bsearch    983.049k (± 0.3%) i/s -      5.004M in   5.089816s

Comparison:
             bsearch:   983049.3 i/s
                find:        0.3 i/s - 3449810.04x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    19.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    194.738  (± 2.1%) i/s -    988.000  in   5.076110s
        Array#insert      1.440  (± 0.0%) i/s -      8.000  in   5.556983s

Comparison:
       Array#unshift:      194.7 i/s
        Array#insert:        1.4 i/s - 135.25x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.096M i/100ms
          Array#size     2.056M i/100ms
         Array#count     1.642M i/100ms
Calculating -------------------------------------
        Array#length     20.879M (± 0.5%) i/s -    104.802M in   5.019547s
          Array#size     20.490M (± 0.6%) i/s -    102.801M in   5.017267s
         Array#count     16.295M (± 0.3%) i/s -     82.077M in   5.037082s

Comparison:
        Array#length: 20879244.3 i/s
          Array#size: 20490182.0 i/s - 1.02x  (± 0.00) slower
         Array#count: 16294661.3 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    46.047k i/100ms
        Array#sample   987.115k i/100ms
Calculating -------------------------------------
 Array#shuffle.first    462.893k (± 1.1%) i/s -      2.348M in   5.073939s
        Array#sample      9.844M (± 0.3%) i/s -     49.356M in   5.013594s

Comparison:
        Array#sample:  9844462.5 i/s
 Array#shuffle.first:   462892.9 i/s - 21.27x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    64.736k i/100ms
          Date.parse    32.372k i/100ms
Calculating -------------------------------------
        Date.iso8601    646.473k (± 0.3%) i/s -      3.237M in   5.006902s
          Date.parse    323.703k (± 0.6%) i/s -      1.619M in   5.000423s

Comparison:
        Date.iso8601:   646473.3 i/s
          Date.parse:   323702.7 i/s - 2.00x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    19.189k i/100ms
           Array#map    27.034k i/100ms
Calculating -------------------------------------
   Array#each + push    190.722k (± 0.9%) i/s -    959.450k in   5.030991s
           Array#map    270.367k (± 0.4%) i/s -      1.379M in   5.099559s

Comparison:
           Array#map:   270367.1 i/s
   Array#each + push:   190722.3 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
            For loop    29.493k i/100ms
               #each    32.546k i/100ms
Calculating -------------------------------------
            For loop    293.676k (± 2.1%) i/s -      1.475M in   5.023947s
               #each    324.946k (± 1.0%) i/s -      1.627M in   5.008462s

Comparison:
               #each:   324946.2 i/s
            For loop:   293675.7 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.925k i/100ms
     each_with_index    19.391k i/100ms
Calculating -------------------------------------
          While Loop    278.063k (± 1.2%) i/s -      1.396M in   5.022058s
     each_with_index    194.686k (± 0.5%) i/s -    988.941k in   5.079790s

Comparison:
          While Loop:   278063.2 i/s
     each_with_index:   194686.1 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
       inject symbol   127.861k i/100ms
      inject to_proc     2.216k i/100ms
        inject block     2.171k i/100ms
Calculating -------------------------------------
       inject symbol    955.929k (± 8.6%) i/s -      4.859M in   5.111128s
      inject to_proc     22.143k (± 0.4%) i/s -    110.800k in   5.003870s
        inject block     21.778k (± 0.4%) i/s -    110.721k in   5.084049s

Comparison:
       inject symbol:   955928.5 i/s
      inject to_proc:    22143.2 i/s - 43.17x  (± 0.00) slower
        inject block:    21778.4 i/s - 43.89x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.803k i/100ms
   Array#map.flatten     4.004k i/100ms
      Array#flat_map     9.477k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     68.464k (± 0.1%) i/s -    346.953k in   5.067651s
   Array#map.flatten     39.733k (± 0.9%) i/s -    200.200k in   5.039074s
      Array#flat_map     94.640k (± 0.7%) i/s -    473.850k in   5.007064s

Comparison:
      Array#flat_map:    94640.4 i/s
Array#map.flatten(1):    68464.4 i/s - 1.38x  (± 0.00) slower
   Array#map.flatten:    39733.2 i/s - 2.38x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    31.834k i/100ms
  Array#reverse_each    32.558k i/100ms
Calculating -------------------------------------
  Array#reverse.each    318.415k (± 0.4%) i/s -      1.624M in   5.098874s
  Array#reverse_each    325.965k (± 0.4%) i/s -      1.660M in   5.094058s

Comparison:
  Array#reverse_each:   325964.6 i/s
  Array#reverse.each:   318415.2 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        20.753k i/100ms
   Enumerable#detect    83.086k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        206.877k (± 0.6%) i/s -      4.151M in  20.063935s
   Enumerable#detect    835.493k (± 0.8%) i/s -     16.783M in  20.089126s

Comparison:
   Enumerable#detect:   835493.4 i/s
Enumerable#select.first:   206876.8 i/s - 4.04x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       246.509k i/100ms
Enumerable#select.last
                        19.518k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.479M (± 0.7%) i/s -     12.572M in   5.071624s
Enumerable#select.last
                        195.355k (± 0.5%) i/s -    995.418k in   5.095564s

Comparison:
Enumerable#reverse.detect:  2479013.4 i/s
Enumerable#select.last:   195355.1 i/s - 12.69x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         5.082k i/100ms
  Enumerable#sort_by     4.931k i/100ms
     Enumerable#sort     2.470k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         51.078k (± 1.0%) i/s -    259.182k in   5.074742s
  Enumerable#sort_by     49.381k (± 1.0%) i/s -    251.481k in   5.093213s
     Enumerable#sort     24.218k (± 0.4%) i/s -    123.500k in   5.099633s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    51077.8 i/s
  Enumerable#sort_by:    49381.0 i/s - 1.03x  (± 0.00) slower
     Enumerable#sort:    24217.9 i/s - 2.11x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.924k i/100ms
Enumerable#sort_by...first
                         8.952k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    179.553k (± 0.4%) i/s -    914.124k in   5.091178s
Enumerable#sort_by...first
                         90.025k (± 0.6%) i/s -    456.552k in   5.071535s

Comparison:
   Enumerable#min_by:   179553.0 i/s
Enumerable#sort_by...first:    90025.4 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   426.150k i/100ms
            Hash#dup   300.819k i/100ms
Calculating -------------------------------------
              Hash[]      4.123M (± 1.5%) i/s -     20.881M in   5.066090s
            Hash#dup      3.254M (± 1.0%) i/s -     16.545M in   5.085568s

Comparison:
              Hash[]:  4122652.3 i/s
            Hash#dup:  3253627.7 i/s - 1.27x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.437M i/100ms
  Hash#fetch, symbol     1.175M i/100ms
     Hash#[], string     1.244M i/100ms
  Hash#fetch, string   806.652k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.377M (± 0.3%) i/s -     73.272M in   5.096345s
  Hash#fetch, symbol     11.955M (± 0.6%) i/s -     59.943M in   5.014143s
     Hash#[], string     12.396M (± 0.4%) i/s -     62.188M in   5.016683s
  Hash#fetch, string      8.109M (± 0.5%) i/s -     41.139M in   5.073243s

Comparison:
     Hash#[], symbol: 14377454.4 i/s
     Hash#[], string: 12396449.5 i/s - 1.16x  (± 0.00) slower
  Hash#fetch, symbol: 11955204.6 i/s - 1.20x  (± 0.00) slower
  Hash#fetch, string:  8109248.0 i/s - 1.77x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   867.693k i/100ms
             Hash#[]     1.042M i/100ms
          Hash#[] ||   935.856k i/100ms
          Hash#[] &&   393.524k i/100ms
          Hash#fetch   623.666k i/100ms
 Hash#fetch fallback   399.155k i/100ms
Calculating -------------------------------------
            Hash#dig      8.573M (± 0.5%) i/s -     43.385M in   5.060847s
             Hash#[]     10.346M (± 0.6%) i/s -     52.104M in   5.036345s
          Hash#[] ||      9.056M (± 1.5%) i/s -     45.857M in   5.064742s
          Hash#[] &&      3.991M (± 1.9%) i/s -     20.070M in   5.029899s
          Hash#fetch      5.964M (± 0.5%) i/s -     29.936M in   5.019491s
 Hash#fetch fallback      3.943M (± 0.9%) i/s -     19.958M in   5.062273s

Comparison:
             Hash#[]: 10345902.0 i/s
          Hash#[] ||:  9056115.5 i/s - 1.14x  (± 0.00) slower
            Hash#dig:  8572852.7 i/s - 1.21x  (± 0.00) slower
          Hash#fetch:  5964094.3 i/s - 1.73x  (± 0.00) slower
          Hash#[] &&:  3991433.3 i/s - 2.59x  (± 0.00) slower
 Hash#fetch fallback:  3942742.1 i/s - 2.62x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.453M i/100ms
  Hash#fetch + block     1.460M i/100ms
    Hash#fetch + arg     1.094M i/100ms
Calculating -------------------------------------
  Hash#fetch + const     14.614M (± 0.5%) i/s -     74.078M in   5.069053s
  Hash#fetch + block     14.444M (± 0.8%) i/s -     73.018M in   5.055690s
    Hash#fetch + arg     10.875M (± 0.4%) i/s -     54.679M in   5.027808s

Comparison:
  Hash#fetch + const: 14614015.2 i/s
  Hash#fetch + block: 14443890.2 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 10875485.2 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    27.864k i/100ms
         sort + to_h    11.075k i/100ms
Calculating -------------------------------------
      sort_by + to_h    278.103k (± 0.6%) i/s -      1.393M in   5.009850s
         sort + to_h    110.891k (± 5.5%) i/s -    553.750k in   5.017932s

Comparison:
      sort_by + to_h:   278102.9 i/s
         sort + to_h:   110891.1 i/s - 2.51x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   195.237k i/100ms
       Hash#each_key   208.407k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.898M (± 0.4%) i/s -      9.567M in   5.040052s
       Hash#each_key      2.065M (± 0.5%) i/s -     10.420M in   5.046610s

Comparison:
       Hash#each_key:  2064884.4 i/s
      Hash#keys.each:  1898150.9 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.376k i/100ms
           Hash#key?   951.328k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     13.750k (± 4.5%) i/s -     68.800k in   5.016022s
           Hash#key?      9.471M (± 0.3%) i/s -     47.566M in   5.022226s

Comparison:
           Hash#key?:  9471270.5 i/s
  Hash#keys.include?:    13749.7 i/s - 688.84x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.073k i/100ms
            Hash#[]=    10.607k i/100ms
Calculating -------------------------------------
         Hash#merge!     40.351k (± 0.7%) i/s -    203.650k in   5.047121s
            Hash#[]=    105.266k (± 1.5%) i/s -    530.350k in   5.039397s

Comparison:
            Hash#[]=:   105266.0 i/s
         Hash#merge!:    40351.5 i/s - 2.61x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.735k i/100ms
      Hash#merge({})     4.013k i/100ms
 Hash#dup#merge!({})     2.923k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         47.772k (± 1.0%) i/s -    241.485k in   5.055409s
      Hash#merge({})     40.018k (± 0.2%) i/s -    200.650k in   5.013994s
 Hash#dup#merge!({})     29.190k (± 0.4%) i/s -    146.150k in   5.006866s

Comparison:
{}#merge!(Hash) do end:    47772.3 i/s
      Hash#merge({}):    40018.1 i/s - 1.19x  (± 0.00) slower
 Hash#dup#merge!({}):    29190.3 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   399.123k i/100ms
          Hash#merge   371.016k i/100ms
Calculating -------------------------------------
        Hash#**other      3.944M (± 0.5%) i/s -     19.956M in   5.060182s
          Hash#merge      3.682M (± 0.4%) i/s -     18.551M in   5.037710s

Comparison:
        Hash#**other:  3943878.8 i/s
          Hash#merge:  3682454.6 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.691k i/100ms
         Hash#merge!     4.005k i/100ms
Calculating -------------------------------------
          Hash#merge     16.892k (± 0.7%) i/s -     84.550k in   5.005469s
         Hash#merge!     39.948k (± 0.4%) i/s -    200.250k in   5.012797s

Comparison:
         Hash#merge!:    39948.3 i/s
          Hash#merge:    16892.3 i/s - 2.36x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      423.570k i/100ms
Array#each             233.055k i/100ms
Array#each_w/_object   176.715k i/100ms
Hash#select-include     71.995k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.233M (± 1.0%) i/s -     21.178M in   5.003598s
Array#each                2.307M (± 0.3%) i/s -     11.653M in   5.050950s
Array#each_w/_object      1.764M (± 0.3%) i/s -      8.836M in   5.010307s
Hash#select-include     719.292k (± 1.0%) i/s -      3.600M in   5.005042s

Comparison:
Hash#native-slice   :  4233119.7 i/s
Array#each          :  2307056.2 i/s - 1.83x  (± 0.00) slower
Array#each_w/_object:  1763534.7 i/s - 2.40x  (± 0.00) slower
Hash#select-include :   719292.5 i/s - 5.89x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.114k i/100ms
         Hash#value?   840.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     10.799k (± 3.2%) i/s -     54.586k in   5.060242s
         Hash#value?      8.392k (± 0.7%) i/s -     42.000k in   5.005186s

Comparison:
Hash#values.include?:    10799.4 i/s
         Hash#value?:     8391.7 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
                call   663.821k i/100ms
                send   522.297k i/100ms
      method_missing   390.221k i/100ms
Calculating -------------------------------------
                call      6.646M (± 0.6%) i/s -     33.855M in   5.094573s
                send      5.204M (± 0.9%) i/s -     26.115M in   5.018445s
      method_missing      3.894M (± 0.5%) i/s -     19.511M in   5.010138s

Comparison:
                call:  6645522.1 i/s
                send:  5204236.6 i/s - 1.28x  (± 0.00) slower
      method_missing:  3894427.1 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
               Block     9.223k i/100ms
      Symbol#to_proc    10.394k i/100ms
Calculating -------------------------------------
               Block     91.531k (± 0.5%) i/s -    461.150k in   5.038340s
      Symbol#to_proc    103.798k (± 0.6%) i/s -    519.700k in   5.007023s

Comparison:
      Symbol#to_proc:   103797.5 i/s
               Block:    91530.8 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
          block.call   925.319k i/100ms
       block + yield   971.476k i/100ms
        unused block     1.293M i/100ms
               yield     1.171M i/100ms
Calculating -------------------------------------
          block.call      9.261M (± 0.3%) i/s -     47.191M in   5.095743s
       block + yield      9.727M (± 0.3%) i/s -     49.545M in   5.093770s
        unused block     12.941M (± 0.3%) i/s -     65.922M in   5.094278s
               yield     11.721M (± 0.2%) i/s -     59.708M in   5.094123s

Comparison:
        unused block: 12940595.9 i/s
               yield: 11721070.5 i/s - 1.10x  (± 0.00) slower
       block + yield:  9726746.0 i/s - 1.33x  (± 0.00) slower
          block.call:  9261029.0 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   319.373k i/100ms
      range#include?    12.435k i/100ms
       range#member?    12.480k i/100ms
       plain compare   521.988k i/100ms
Calculating -------------------------------------
        range#cover?      3.256M (± 0.7%) i/s -     16.288M in   5.002669s
      range#include?    127.293k (± 0.5%) i/s -    646.620k in   5.079918s
       range#member?    126.756k (± 0.6%) i/s -    636.480k in   5.021504s
       plain compare      5.278M (± 0.2%) i/s -     26.621M in   5.043608s

Comparison:
       plain compare:  5278272.4 i/s
        range#cover?:  3256044.9 i/s - 1.62x  (± 0.00) slower
      range#include?:   127292.7 i/s - 41.47x  (± 0.00) slower
       range#member?:   126756.2 i/s - 41.64x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
       String#match?   908.214k i/100ms
           String#=~   656.084k i/100ms
          Regexp#===   575.234k i/100ms
        String#match   469.191k i/100ms
Calculating -------------------------------------
       String#match?      9.025M (± 1.0%) i/s -     45.411M in   5.032445s
           String#=~      6.507M (± 0.6%) i/s -     32.804M in   5.041804s
          Regexp#===      5.732M (± 0.5%) i/s -     28.762M in   5.018272s
        String#match      4.761M (± 0.4%) i/s -     23.929M in   5.025697s

Comparison:
       String#match?:  9024576.5 i/s
           String#=~:  6506664.6 i/s - 1.39x  (± 0.00) slower
          Regexp#===:  5731535.5 i/s - 1.57x  (± 0.00) slower
        String#match:  4761360.4 i/s - 1.90x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   650.923k i/100ms
      String#casecmp   807.500k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.467M (± 1.1%) i/s -     32.546M in   5.033589s
      String#casecmp      8.050M (± 0.5%) i/s -     40.375M in   5.015924s

Comparison:
      String#casecmp:  8049598.6 i/s
String#downcase + ==:  6466633.2 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
            String#+   601.004k i/100ms
       String#concat   628.711k i/100ms
       String#append   663.903k i/100ms
         "foo" "bar"     1.181M i/100ms
  "#{'foo'}#{'bar'}"     1.183M i/100ms
Calculating -------------------------------------
            String#+      6.016M (± 0.3%) i/s -     30.651M in   5.095194s
       String#concat      6.280M (± 0.5%) i/s -     31.436M in   5.006049s
       String#append      6.774M (± 0.5%) i/s -     34.523M in   5.096558s
         "foo" "bar"     11.857M (± 0.3%) i/s -     60.230M in   5.079686s
  "#{'foo'}#{'bar'}"     11.799M (± 0.5%) i/s -     59.129M in   5.011565s

Comparison:
         "foo" "bar": 11857138.7 i/s
  "#{'foo'}#{'bar'}": 11798788.4 i/s - same-ish: difference falls within error
       String#append:  6773985.9 i/s - 1.75x  (± 0.00) slower
       String#concat:  6279666.7 i/s - 1.89x  (± 0.00) slower
            String#+:  6015773.5 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
           String#+@   991.961k i/100ms
          String#dup   587.445k i/100ms
Calculating -------------------------------------
           String#+@      9.948M (± 0.5%) i/s -     50.590M in   5.085538s
          String#dup      5.853M (± 0.6%) i/s -     29.372M in   5.018178s

Comparison:
           String#+@:  9948073.2 i/s
          String#dup:  5853357.0 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
           String#=~   188.199k i/100ms
       String#match?   427.894k i/100ms
    String#end_with?   596.614k i/100ms
Calculating -------------------------------------
           String#=~      1.889M (± 0.5%) i/s -      9.598M in   5.081488s
       String#match?      4.295M (± 0.3%) i/s -     21.823M in   5.081279s
    String#end_with?      6.000M (± 0.5%) i/s -     30.427M in   5.071529s

Comparison:
    String#end_with?:  5999762.4 i/s
       String#match?:  4294756.4 i/s - 1.40x  (± 0.00) slower
           String#=~:  1888888.6 i/s - 3.18x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   114.220k i/100ms
          String#sub   142.880k i/100ms
String#dup["string"]=
                       182.209k i/100ms
Calculating -------------------------------------
         String#gsub      1.148M (± 0.5%) i/s -      5.825M in   5.073062s
          String#sub      1.388M (± 0.6%) i/s -      7.001M in   5.043041s
String#dup["string"]=
                          1.800M (± 0.8%) i/s -      9.110M in   5.061743s

Comparison:
String#dup["string"]=:  1799978.5 i/s
          String#sub:  1388319.9 i/s - 1.30x  (± 0.00) slower
         String#gsub:  1148300.3 i/s - 1.57x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   105.168k i/100ms
           String#tr   341.011k i/100ms
Calculating -------------------------------------
         String#gsub      1.042M (± 0.6%) i/s -      5.258M in   5.047751s
           String#tr      3.412M (± 0.3%) i/s -     17.392M in   5.096880s

Comparison:
           String#tr:  3412230.3 i/s
         String#gsub:  1041765.1 i/s - 3.28x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.182M i/100ms
         With Freeze     1.695M i/100ms
Calculating -------------------------------------
      Without Freeze     11.802M (± 0.4%) i/s -     59.086M in   5.006688s
         With Freeze     16.916M (± 0.4%) i/s -     84.758M in   5.010595s

Comparison:
         With Freeze: 16915884.7 i/s
      Without Freeze: 11801603.9 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.409k i/100ms
      String#squeeze   156.567k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     34.369k (± 0.6%) i/s -    173.859k in   5.058792s
      String#squeeze      1.570M (± 0.5%) i/s -      7.985M in   5.087125s

Comparison:
      String#squeeze:  1569671.5 i/s
 String#gsub/regex+/:    34368.8 i/s - 45.67x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
           String#=~   284.959k i/100ms
       String#match?   754.590k i/100ms
  String#start_with?   875.996k i/100ms
Calculating -------------------------------------
           String#=~      2.872M (± 0.5%) i/s -     14.533M in   5.059609s
       String#match?      7.593M (± 0.4%) i/s -     38.484M in   5.068506s
  String#start_with?      8.712M (± 0.7%) i/s -     43.800M in   5.027720s

Comparison:
  String#start_with?:  8712036.7 i/s
       String#match?:  7592923.2 i/s - 1.15x  (± 0.00) slower
           String#=~:  2872422.3 i/s - 3.03x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   199.895k i/100ms
    String#[0, n] ==    82.820k i/100ms
   String#[RANGE] ==    76.974k i/100ms
   String#[0...n] ==    48.001k i/100ms
Calculating -------------------------------------
  String#start_with?      1.961M (± 2.3%) i/s -      9.995M in   5.098791s
    String#[0, n] ==    818.908k (± 0.7%) i/s -      4.141M in   5.057008s
   String#[RANGE] ==    749.430k (± 0.7%) i/s -      3.772M in   5.033011s
   String#[0...n] ==    476.076k (± 0.4%) i/s -      2.400M in   5.041403s

Comparison:
  String#start_with?:  1961316.6 i/s
    String#[0, n] ==:   818908.2 i/s - 2.40x  (± 0.00) slower
   String#[RANGE] ==:   749429.6 i/s - 2.62x  (± 0.00) slower
   String#[0...n] ==:   476075.8 i/s - 4.12x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   179.627k i/100ms
 String#sub!'string'   126.236k i/100ms
String#gsub!'string'    78.124k i/100ms
  String#[/regexp/]=   154.092k i/100ms
 String#sub!/regexp/   115.694k i/100ms
String#gsub!/regexp/    61.110k i/100ms
Calculating -------------------------------------
  String#['string']=      1.832M (± 0.5%) i/s -      9.161M in   5.001134s
 String#sub!'string'      1.261M (± 0.5%) i/s -      6.312M in   5.005127s
String#gsub!'string'    767.646k (± 0.3%) i/s -      3.906M in   5.088587s
  String#[/regexp/]=      1.546M (± 0.5%) i/s -      7.859M in   5.083048s
 String#sub!/regexp/      1.124M (± 0.5%) i/s -      5.669M in   5.044683s
String#gsub!/regexp/    618.989k (± 0.3%) i/s -      3.117M in   5.035062s

Comparison:
  String#['string']=:  1831827.2 i/s
  String#[/regexp/]=:  1546094.4 i/s - 1.18x  (± 0.00) slower
 String#sub!'string':  1261098.4 i/s - 1.45x  (± 0.00) slower
 String#sub!/regexp/:  1123783.4 i/s - 1.63x  (± 0.00) slower
String#gsub!'string':   767645.9 i/s - 2.39x  (± 0.00) slower
String#gsub!/regexp/:   618988.9 i/s - 2.96x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
          String#sub   145.619k i/100ms
        String#chomp   569.900k i/100ms
String#delete_suffix   594.013k i/100ms
Calculating -------------------------------------
          String#sub      1.453M (± 0.2%) i/s -      7.281M in   5.009851s
        String#chomp      5.684M (± 0.4%) i/s -     28.495M in   5.013330s
String#delete_suffix      6.131M (± 0.4%) i/s -     30.889M in   5.038062s

Comparison:
String#delete_suffix:  6131180.4 i/s
        String#chomp:  5683962.7 i/s - 1.08x  (± 0.00) slower
          String#sub:  1453332.1 i/s - 4.22x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   632.942k i/100ms
          String#sub   149.654k i/100ms
Calculating -------------------------------------
String#delete_prefix      6.320M (± 0.5%) i/s -     31.647M in   5.007794s
          String#sub      1.489M (± 0.6%) i/s -      7.483M in   5.024554s

Comparison:
String#delete_prefix:  6319736.0 i/s
          String#sub:  1489276.0 i/s - 4.24x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   624.123k i/100ms
    String#unpack[0]   474.084k i/100ms
Calculating -------------------------------------
      String#unpack1      6.246M (± 0.4%) i/s -     31.830M in   5.096319s
    String#unpack[0]      4.781M (± 0.6%) i/s -     24.178M in   5.057793s

Comparison:
      String#unpack1:  6245844.6 i/s
    String#unpack[0]:  4780559.3 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.5p252 (2024-04-23 revision 1945f8dc0e) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    28.762k i/100ms
          Time.parse     9.671k i/100ms
Calculating -------------------------------------
        Time.iso8601    286.710k (± 0.3%) i/s -      1.438M in   5.015910s
          Time.parse     96.103k (± 0.7%) i/s -    483.550k in   5.031833s

Comparison:
        Time.iso8601:   286709.6 i/s
          Time.parse:    96102.9 i/s - 2.98x  (± 0.00) slower

