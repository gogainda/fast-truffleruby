$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       752.934k i/100ms
Function with splat arguments
                        26.089k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.500M (± 1.3%) i/s -     37.647M in   5.020194s
Function with splat arguments
                        264.961k (± 6.3%) i/s -      1.331M in   5.049128s

Comparison:
Function with single Array argument:  7500345.7 i/s
Function with splat arguments:   264960.6 i/s - 28.31x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.007M i/100ms
Sequential Assignment
                         1.055M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.093M (± 0.3%) i/s -     51.340M in   5.086987s
Sequential Assignment
                         10.227M (± 3.5%) i/s -     51.693M in   5.061205s

Comparison:
Sequential Assignment: 10226561.6 i/s
 Parallel Assignment: 10092581.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   463.697k i/100ms
       attr_accessor   526.674k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.649M (± 0.7%) i/s -     23.649M in   5.087019s
       attr_accessor      5.257M (± 0.2%) i/s -     26.334M in   5.009494s

Comparison:
       attr_accessor:  5256784.0 i/s
   getter_and_setter:  4649009.3 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    89.115k i/100ms
         respond_to?   772.798k i/100ms
Calculating -------------------------------------
      begin...rescue    893.554k (± 0.4%) i/s -      4.545M in   5.086368s
         respond_to?      7.555M (± 0.4%) i/s -     37.867M in   5.012256s

Comparison:
         respond_to?:  7555039.4 i/s
      begin...rescue:   893554.3 i/s - 8.46x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
              normal   310.917k i/100ms
             &method   120.140k i/100ms
Calculating -------------------------------------
              normal      3.100M (± 0.5%) i/s -     15.546M in   5.015220s
             &method      1.203M (± 0.6%) i/s -      6.127M in   5.095383s

Comparison:
              normal:  3099798.1 i/s
             &method:  1202528.2 i/s - 2.58x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       269.000  i/100ms
       define_method   297.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.465k (±16.8%) i/s -     11.836k in   5.085708s
       define_method      3.284k (±18.8%) i/s -     15.147k in   5.081591s

Comparison:
       define_method:     3284.0 i/s
module_eval with string:     2465.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
         Float#round   256.102k i/100ms
       Kernel#format   202.893k i/100ms
            String#%   174.575k i/100ms
Calculating -------------------------------------
         Float#round      2.555M (± 0.7%) i/s -     12.805M in   5.012545s
       Kernel#format      2.032M (± 0.5%) i/s -     10.348M in   5.092560s
            String#%      1.747M (± 0.8%) i/s -      8.903M in   5.095455s

Comparison:
         Float#round:  2554753.3 i/s
       Kernel#format:  2031949.5 i/s - 1.26x  (± 0.00) slower
            String#%:  1747417.1 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
                Hash   836.586k i/100ms
          OpenStruct   488.048k i/100ms
Calculating -------------------------------------
                Hash      8.443M (± 0.9%) i/s -     42.666M in   5.053850s
          OpenStruct      4.871M (± 0.5%) i/s -     24.402M in   5.009566s

Comparison:
                Hash:  8442903.6 i/s
          OpenStruct:  4871268.5 i/s - 1.73x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.107M i/100ms
          OpenStruct     9.984k i/100ms
Calculating -------------------------------------
                Hash     11.105M (± 0.4%) i/s -     56.448M in   5.083356s
          OpenStruct     98.063k (± 1.9%) i/s -    499.200k in   5.092329s

Comparison:
                Hash: 11104676.4 i/s
          OpenStruct:    98063.4 i/s - 113.24x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   533.481k i/100ms
  ancestors.include?   125.527k i/100ms
Calculating -------------------------------------
  less than or equal      5.797M (± 1.0%) i/s -     29.341M in   5.061826s
  ancestors.include?      1.252M (± 0.3%) i/s -      6.276M in   5.011962s

Comparison:
  less than or equal:  5797232.1 i/s
  ancestors.include?:  1252287.1 i/s - 4.63x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.618  (± 0.0%) i/s -      4.000  in   6.467409s
         Kernel loop      0.206  (± 0.0%) i/s -      2.000  in   9.723874s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 3.01x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.568M i/100ms
         Array#first     1.354M i/100ms
Calculating -------------------------------------
           Array#[0]     15.705M (± 0.3%) i/s -     79.944M in   5.090265s
         Array#first     13.572M (± 0.3%) i/s -     69.074M in   5.089359s

Comparison:
           Array#[0]: 15705423.4 i/s
         Array#first: 13572444.9 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.539M i/100ms
          Array#last     1.352M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.355M (± 1.1%) i/s -     76.936M in   5.011271s
          Array#last     13.504M (± 0.1%) i/s -     67.586M in   5.005069s

Comparison:
          Array#[-1]: 15354597.9 i/s
          Array#last: 13503592.9 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    98.975k i/100ms
Calculating -------------------------------------
                find      0.270  (± 0.0%) i/s -      2.000  in   7.417844s
             bsearch    987.067k (± 1.5%) i/s -      4.949M in   5.014805s

Comparison:
             bsearch:   987067.1 i/s
                find:        0.3 i/s - 3660954.71x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    18.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    189.468  (± 2.6%) i/s -    954.000  in   5.038287s
        Array#insert      1.433  (± 0.0%) i/s -      8.000  in   5.583619s

Comparison:
       Array#unshift:      189.5 i/s
        Array#insert:        1.4 i/s - 132.23x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.187M i/100ms
          Array#size     2.197M i/100ms
         Array#count     1.454M i/100ms
Calculating -------------------------------------
        Array#length     21.823M (± 0.7%) i/s -    109.373M in   5.012141s
          Array#size     21.836M (± 0.5%) i/s -    109.861M in   5.031281s
         Array#count     14.667M (± 0.8%) i/s -     74.143M in   5.055557s

Comparison:
          Array#size: 21836073.1 i/s
        Array#length: 21822509.3 i/s - same-ish: difference falls within error
         Array#count: 14666774.4 i/s - 1.49x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    46.173k i/100ms
        Array#sample     1.051M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    460.836k (± 0.6%) i/s -      2.309M in   5.009863s
        Array#sample     10.556M (± 0.2%) i/s -     53.601M in   5.078016s

Comparison:
        Array#sample: 10555534.9 i/s
 Array#shuffle.first:   460836.3 i/s - 22.91x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    63.978k i/100ms
          Date.parse    31.667k i/100ms
Calculating -------------------------------------
        Date.iso8601    640.861k (± 0.5%) i/s -      3.263M in   5.091541s
          Date.parse    316.902k (± 0.4%) i/s -      1.615M in   5.096326s

Comparison:
        Date.iso8601:   640861.2 i/s
          Date.parse:   316902.3 i/s - 2.02x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    16.640k i/100ms
           Array#map    26.865k i/100ms
Calculating -------------------------------------
   Array#each + push    171.196k (± 2.9%) i/s -    865.280k in   5.058660s
           Array#map    269.216k (± 1.1%) i/s -      1.370M in   5.089877s

Comparison:
           Array#map:   269216.3 i/s
   Array#each + push:   171195.5 i/s - 1.57x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
            For loop    29.898k i/100ms
               #each    33.022k i/100ms
Calculating -------------------------------------
            For loop    299.226k (± 0.6%) i/s -      1.525M in   5.096002s
               #each    330.179k (± 0.5%) i/s -      1.684M in   5.100761s

Comparison:
               #each:   330179.4 i/s
            For loop:   299226.4 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.371k i/100ms
     each_with_index    17.679k i/100ms
Calculating -------------------------------------
          While Loop    273.534k (± 0.2%) i/s -      1.369M in   5.003244s
     each_with_index    176.410k (± 0.3%) i/s -    883.950k in   5.010802s

Comparison:
          While Loop:   273534.0 i/s
     each_with_index:   176410.2 i/s - 1.55x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    71.535k i/100ms
      inject to_proc     2.086k i/100ms
        inject block     1.969k i/100ms
Calculating -------------------------------------
       inject symbol    714.042k (± 0.6%) i/s -      3.577M in   5.009317s
      inject to_proc     20.890k (± 0.5%) i/s -    106.386k in   5.092733s
        inject block     19.624k (± 0.4%) i/s -     98.450k in   5.016835s

Comparison:
       inject symbol:   714041.9 i/s
      inject to_proc:    20890.2 i/s - 34.18x  (± 0.00) slower
        inject block:    19624.3 i/s - 36.39x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     7.480k i/100ms
   Array#map.flatten     4.221k i/100ms
      Array#flat_map    10.288k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     74.467k (± 0.8%) i/s -    374.000k in   5.022640s
   Array#map.flatten     41.959k (± 0.4%) i/s -    211.050k in   5.029945s
      Array#flat_map    102.607k (± 0.3%) i/s -    514.400k in   5.013346s

Comparison:
      Array#flat_map:   102607.1 i/s
Array#map.flatten(1):    74467.4 i/s - 1.38x  (± 0.00) slower
   Array#map.flatten:    41959.4 i/s - 2.45x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    31.990k i/100ms
  Array#reverse_each    32.674k i/100ms
Calculating -------------------------------------
  Array#reverse.each    319.671k (± 0.4%) i/s -      1.600M in   5.003662s
  Array#reverse_each    326.692k (± 0.4%) i/s -      1.634M in   5.000802s

Comparison:
  Array#reverse_each:   326691.8 i/s
  Array#reverse.each:   319671.4 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        19.327k i/100ms
   Enumerable#detect    81.803k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        194.060k (± 0.4%) i/s -      3.885M in  20.018466s
   Enumerable#detect    813.411k (± 0.4%) i/s -     16.279M in  20.013364s

Comparison:
   Enumerable#detect:   813411.0 i/s
Enumerable#select.first:   194060.3 i/s - 4.19x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       239.254k i/100ms
Enumerable#select.last
                        18.474k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.387M (± 0.6%) i/s -     11.963M in   5.012533s
Enumerable#select.last
                        183.922k (± 0.4%) i/s -    923.700k in   5.022314s

Comparison:
Enumerable#reverse.detect:  2386643.6 i/s
Enumerable#select.last:   183921.9 i/s - 12.98x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.753k i/100ms
  Enumerable#sort_by     4.605k i/100ms
     Enumerable#sort     2.341k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         48.037k (± 0.9%) i/s -    242.403k in   5.046590s
  Enumerable#sort_by     45.464k (± 0.8%) i/s -    230.250k in   5.064770s
     Enumerable#sort     23.404k (± 0.7%) i/s -    117.050k in   5.001520s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    48036.6 i/s
  Enumerable#sort_by:    45463.9 i/s - 1.06x  (± 0.00) slower
     Enumerable#sort:    23404.0 i/s - 2.05x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.300k i/100ms
Enumerable#sort_by...first
                         8.451k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    173.020k (± 0.5%) i/s -    882.300k in   5.099526s
Enumerable#sort_by...first
                         84.865k (± 0.5%) i/s -    431.001k in   5.078777s

Comparison:
   Enumerable#min_by:   173020.0 i/s
Enumerable#sort_by...first:    84864.9 i/s - 2.04x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   435.521k i/100ms
            Hash#dup   319.398k i/100ms
Calculating -------------------------------------
              Hash[]      3.826M (± 1.6%) i/s -     19.163M in   5.009466s
            Hash#dup      2.898M (± 1.0%) i/s -     14.692M in   5.070332s

Comparison:
              Hash[]:  3826324.8 i/s
            Hash#dup:  2897991.8 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.412M i/100ms
  Hash#fetch, symbol     1.163M i/100ms
     Hash#[], string     1.232M i/100ms
  Hash#fetch, string   756.426k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.126M (± 0.4%) i/s -     72.030M in   5.099075s
  Hash#fetch, symbol     11.633M (± 0.3%) i/s -     58.163M in   5.000137s
     Hash#[], string     12.426M (± 1.4%) i/s -     62.821M in   5.056628s
  Hash#fetch, string      7.346M (± 0.7%) i/s -     37.065M in   5.045912s

Comparison:
     Hash#[], symbol: 14126395.2 i/s
     Hash#[], string: 12425978.3 i/s - 1.14x  (± 0.00) slower
  Hash#fetch, symbol: 11632503.9 i/s - 1.21x  (± 0.00) slower
  Hash#fetch, string:  7345919.3 i/s - 1.92x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   826.902k i/100ms
             Hash#[]   965.557k i/100ms
          Hash#[] ||   853.376k i/100ms
          Hash#[] &&   372.282k i/100ms
          Hash#fetch   590.621k i/100ms
 Hash#fetch fallback   389.327k i/100ms
Calculating -------------------------------------
            Hash#dig      8.149M (± 0.5%) i/s -     41.345M in   5.073816s
             Hash#[]      9.787M (± 2.0%) i/s -     49.243M in   5.033778s
          Hash#[] ||      8.662M (± 0.4%) i/s -     43.522M in   5.024568s
          Hash#[] &&      3.618M (± 1.1%) i/s -     18.242M in   5.042563s
          Hash#fetch      5.785M (± 0.7%) i/s -     28.940M in   5.002635s
 Hash#fetch fallback      3.725M (± 1.5%) i/s -     18.688M in   5.017713s

Comparison:
             Hash#[]:  9786560.6 i/s
          Hash#[] ||:  8662017.7 i/s - 1.13x  (± 0.00) slower
            Hash#dig:  8148897.3 i/s - 1.20x  (± 0.00) slower
          Hash#fetch:  5785320.3 i/s - 1.69x  (± 0.00) slower
 Hash#fetch fallback:  3725194.9 i/s - 2.63x  (± 0.00) slower
          Hash#[] &&:  3617974.1 i/s - 2.70x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.315M i/100ms
  Hash#fetch + block     1.303M i/100ms
    Hash#fetch + arg   955.674k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     12.647M (± 0.8%) i/s -     64.426M in   5.094556s
  Hash#fetch + block     13.008M (± 0.6%) i/s -     65.128M in   5.006783s
    Hash#fetch + arg      9.458M (± 0.8%) i/s -     47.784M in   5.052354s

Comparison:
  Hash#fetch + block: 13008358.6 i/s
  Hash#fetch + const: 12646787.0 i/s - 1.03x  (± 0.00) slower
    Hash#fetch + arg:  9458331.3 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    25.633k i/100ms
         sort + to_h    11.171k i/100ms
Calculating -------------------------------------
      sort_by + to_h    257.262k (± 0.6%) i/s -      1.307M in   5.081694s
         sort + to_h    112.683k (± 1.3%) i/s -    569.721k in   5.056866s

Comparison:
      sort_by + to_h:   257262.4 i/s
         sort + to_h:   112682.9 i/s - 2.28x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   192.716k i/100ms
       Hash#each_key   195.689k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.933M (± 0.6%) i/s -      9.829M in   5.085190s
       Hash#each_key      1.940M (± 0.4%) i/s -      9.784M in   5.043383s

Comparison:
       Hash#each_key:  1940093.9 i/s
      Hash#keys.each:  1932837.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.590k i/100ms
           Hash#key?   957.175k i/100ms
Calculating -------------------------------------
  Hash#keys.include?     15.859k (± 4.2%) i/s -     79.500k in   5.023517s
           Hash#key?      9.415M (± 0.6%) i/s -     47.859M in   5.083442s

Comparison:
           Hash#key?:  9414991.1 i/s
  Hash#keys.include?:    15859.1 i/s - 593.66x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.121k i/100ms
            Hash#[]=    10.497k i/100ms
Calculating -------------------------------------
         Hash#merge!     41.028k (± 0.6%) i/s -    206.050k in   5.022446s
            Hash#[]=    104.489k (± 1.3%) i/s -    524.850k in   5.023920s

Comparison:
            Hash#[]=:   104488.8 i/s
         Hash#merge!:    41027.6 i/s - 2.55x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.850k i/100ms
      Hash#merge({})     3.790k i/100ms
 Hash#dup#merge!({})     2.858k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         48.191k (± 0.6%) i/s -    242.500k in   5.032252s
      Hash#merge({})     37.794k (± 0.6%) i/s -    189.500k in   5.014228s
 Hash#dup#merge!({})     27.980k (± 0.7%) i/s -    140.042k in   5.005320s

Comparison:
{}#merge!(Hash) do end:    48190.7 i/s
      Hash#merge({}):    37793.7 i/s - 1.28x  (± 0.00) slower
 Hash#dup#merge!({}):    27980.1 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   370.032k i/100ms
          Hash#merge   343.597k i/100ms
Calculating -------------------------------------
        Hash#**other      3.711M (± 0.5%) i/s -     18.872M in   5.085484s
          Hash#merge      3.389M (± 0.3%) i/s -     17.180M in   5.068709s

Comparison:
        Hash#**other:  3710968.2 i/s
          Hash#merge:  3389427.8 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.673k i/100ms
         Hash#merge!     3.947k i/100ms
Calculating -------------------------------------
          Hash#merge     16.442k (± 1.2%) i/s -     83.650k in   5.088442s
         Hash#merge!     39.442k (± 1.0%) i/s -    197.350k in   5.004156s

Comparison:
         Hash#merge!:    39441.7 i/s
          Hash#merge:    16441.7 i/s - 2.40x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      430.009k i/100ms
Array#each             219.519k i/100ms
Array#each_w/_object   171.343k i/100ms
Hash#select-include     74.859k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.282M (± 0.7%) i/s -     21.500M in   5.020838s
Array#each                2.163M (± 1.6%) i/s -     10.976M in   5.076514s
Array#each_w/_object      1.672M (± 0.6%) i/s -      8.396M in   5.022454s
Hash#select-include     748.100k (± 0.4%) i/s -      3.743M in   5.003355s

Comparison:
Hash#native-slice   :  4282458.6 i/s
Array#each          :  2162650.6 i/s - 1.98x  (± 0.00) slower
Array#each_w/_object:  1671725.8 i/s - 2.56x  (± 0.00) slower
Hash#select-include :   748100.1 i/s - 5.72x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     3.445k i/100ms
         Hash#value?     3.438k i/100ms
Calculating -------------------------------------
Hash#values.include?     34.795k (± 5.4%) i/s -    175.695k in   5.072027s
         Hash#value?     35.729k (± 1.3%) i/s -    178.776k in   5.004536s

Comparison:
         Hash#value?:    35729.1 i/s
Hash#values.include?:    34794.9 i/s - same-ish: difference falls within error

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
                call   659.587k i/100ms
                send   505.612k i/100ms
      method_missing   386.719k i/100ms
Calculating -------------------------------------
                call      6.599M (± 0.4%) i/s -     33.639M in   5.097504s
                send      5.041M (± 0.4%) i/s -     25.281M in   5.014787s
      method_missing      3.867M (± 0.8%) i/s -     19.723M in   5.100271s

Comparison:
                call:  6599217.1 i/s
                send:  5041283.7 i/s - 1.31x  (± 0.00) slower
      method_missing:  3867228.5 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
               Block     9.215k i/100ms
      Symbol#to_proc    10.226k i/100ms
Calculating -------------------------------------
               Block     91.068k (± 0.7%) i/s -    460.750k in   5.059648s
      Symbol#to_proc    102.203k (± 0.4%) i/s -    511.300k in   5.002853s

Comparison:
      Symbol#to_proc:   102203.1 i/s
               Block:    91067.8 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
          block.call   947.961k i/100ms
       block + yield   986.571k i/100ms
        unused block     1.321M i/100ms
               yield     1.161M i/100ms
Calculating -------------------------------------
          block.call      9.645M (± 0.4%) i/s -     48.346M in   5.012455s
       block + yield      9.865M (± 0.5%) i/s -     50.315M in   5.100372s
        unused block     13.198M (± 0.4%) i/s -     66.054M in   5.004778s
               yield     11.592M (± 0.5%) i/s -     58.060M in   5.008528s

Comparison:
        unused block: 13198295.8 i/s
               yield: 11592480.8 i/s - 1.14x  (± 0.00) slower
       block + yield:  9865229.4 i/s - 1.34x  (± 0.00) slower
          block.call:  9645364.7 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   301.452k i/100ms
      range#include?    12.596k i/100ms
       range#member?    12.613k i/100ms
       plain compare   483.295k i/100ms
Calculating -------------------------------------
        range#cover?      2.987M (± 0.5%) i/s -     15.073M in   5.046841s
      range#include?    125.647k (± 0.4%) i/s -    629.800k in   5.012504s
       range#member?    126.179k (± 0.6%) i/s -    643.263k in   5.098171s
       plain compare      5.021M (± 0.4%) i/s -     25.131M in   5.005422s

Comparison:
       plain compare:  5020915.0 i/s
        range#cover?:  2986625.6 i/s - 1.68x  (± 0.00) slower
       range#member?:   126179.4 i/s - 39.79x  (± 0.00) slower
      range#include?:   125647.4 i/s - 39.96x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
       String#match?   902.590k i/100ms
           String#=~   622.580k i/100ms
          Regexp#===   585.267k i/100ms
        String#match   450.306k i/100ms
Calculating -------------------------------------
       String#match?      9.251M (± 0.6%) i/s -     46.935M in   5.073911s
           String#=~      6.141M (± 0.5%) i/s -     31.129M in   5.069304s
          Regexp#===      5.936M (± 0.7%) i/s -     29.849M in   5.028759s
        String#match      4.497M (± 0.6%) i/s -     22.515M in   5.006623s

Comparison:
       String#match?:  9250525.9 i/s
           String#=~:  6140861.3 i/s - 1.51x  (± 0.00) slower
          Regexp#===:  5935850.4 i/s - 1.56x  (± 0.00) slower
        String#match:  4497273.9 i/s - 2.06x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   643.701k i/100ms
      String#casecmp   804.513k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.390M (± 0.4%) i/s -     32.185M in   5.036950s
      String#casecmp      7.916M (± 0.7%) i/s -     40.226M in   5.082015s

Comparison:
      String#casecmp:  7915724.7 i/s
String#downcase + ==:  6389908.2 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
            String#+   562.140k i/100ms
       String#concat   604.135k i/100ms
       String#append   669.612k i/100ms
         "foo" "bar"     1.172M i/100ms
  "#{'foo'}#{'bar'}"     1.159M i/100ms
Calculating -------------------------------------
            String#+      5.608M (± 0.8%) i/s -     28.107M in   5.012307s
       String#concat      6.045M (± 0.5%) i/s -     30.811M in   5.096968s
       String#append      6.725M (± 0.5%) i/s -     34.150M in   5.078154s
         "foo" "bar"     11.723M (± 0.3%) i/s -     59.749M in   5.096553s
  "#{'foo'}#{'bar'}"     11.681M (± 0.3%) i/s -     59.126M in   5.061693s

Comparison:
         "foo" "bar": 11723430.4 i/s
  "#{'foo'}#{'bar'}": 11681123.0 i/s - same-ish: difference falls within error
       String#append:  6725095.0 i/s - 1.74x  (± 0.00) slower
       String#concat:  6045107.7 i/s - 1.94x  (± 0.00) slower
            String#+:  5608015.5 i/s - 2.09x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
           String#+@   942.511k i/100ms
          String#dup   561.609k i/100ms
Calculating -------------------------------------
           String#+@      9.402M (± 0.5%) i/s -     47.126M in   5.012163s
          String#dup      5.619M (± 1.3%) i/s -     28.642M in   5.098275s

Comparison:
           String#+@:  9402444.7 i/s
          String#dup:  5618920.9 i/s - 1.67x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
           String#=~   192.038k i/100ms
       String#match?   404.694k i/100ms
    String#end_with?   587.527k i/100ms
Calculating -------------------------------------
           String#=~      1.929M (± 0.5%) i/s -      9.794M in   5.077024s
       String#match?      4.084M (± 0.4%) i/s -     20.639M in   5.054205s
    String#end_with?      5.893M (± 1.2%) i/s -     29.964M in   5.085808s

Comparison:
    String#end_with?:  5892536.8 i/s
       String#match?:  4083676.4 i/s - 1.44x  (± 0.00) slower
           String#=~:  1929116.7 i/s - 3.05x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   109.825k i/100ms
          String#sub   135.277k i/100ms
String#dup["string"]=
                       175.274k i/100ms
Calculating -------------------------------------
         String#gsub      1.113M (± 0.4%) i/s -      5.601M in   5.033245s
          String#sub      1.376M (± 0.7%) i/s -      6.899M in   5.014891s
String#dup["string"]=
                          1.732M (± 0.4%) i/s -      8.764M in   5.059876s

Comparison:
String#dup["string"]=:  1732024.7 i/s
          String#sub:  1375788.4 i/s - 1.26x  (± 0.00) slower
         String#gsub:  1112837.9 i/s - 1.56x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   101.481k i/100ms
           String#tr   335.245k i/100ms
Calculating -------------------------------------
         String#gsub      1.008M (± 0.7%) i/s -      5.074M in   5.035215s
           String#tr      3.340M (± 0.7%) i/s -     16.762M in   5.019128s

Comparison:
           String#tr:  3339849.8 i/s
         String#gsub:  1007761.9 i/s - 3.31x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.170M i/100ms
         With Freeze     1.643M i/100ms
Calculating -------------------------------------
      Without Freeze     11.515M (± 0.6%) i/s -     58.481M in   5.078803s
         With Freeze     16.444M (± 0.3%) i/s -     83.793M in   5.095570s

Comparison:
         With Freeze: 16444420.8 i/s
      Without Freeze: 11515200.5 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.488k i/100ms
      String#squeeze   157.973k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     34.992k (± 1.1%) i/s -    177.888k in   5.084398s
      String#squeeze      1.589M (± 1.0%) i/s -      8.057M in   5.070311s

Comparison:
      String#squeeze:  1589148.1 i/s
 String#gsub/regex+/:    34991.5 i/s - 45.42x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
           String#=~   283.806k i/100ms
       String#match?   698.918k i/100ms
  String#start_with?   835.071k i/100ms
Calculating -------------------------------------
           String#=~      2.842M (± 0.5%) i/s -     14.474M in   5.092552s
       String#match?      7.040M (± 0.9%) i/s -     35.645M in   5.063729s
  String#start_with?      8.371M (± 0.8%) i/s -     42.589M in   5.087684s

Comparison:
  String#start_with?:  8371424.6 i/s
       String#match?:  7039884.7 i/s - 1.19x  (± 0.00) slower
           String#=~:  2842273.5 i/s - 2.95x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   205.821k i/100ms
    String#[0, n] ==    86.336k i/100ms
   String#[RANGE] ==    75.591k i/100ms
   String#[0...n] ==    47.528k i/100ms
Calculating -------------------------------------
  String#start_with?      2.079M (± 0.5%) i/s -     10.497M in   5.048947s
    String#[0, n] ==    858.483k (± 0.7%) i/s -      4.317M in   5.028624s
   String#[RANGE] ==    754.690k (± 0.5%) i/s -      3.780M in   5.008225s
   String#[0...n] ==    467.453k (± 1.6%) i/s -      2.376M in   5.084979s

Comparison:
  String#start_with?:  2079085.9 i/s
    String#[0, n] ==:   858483.0 i/s - 2.42x  (± 0.00) slower
   String#[RANGE] ==:   754689.7 i/s - 2.75x  (± 0.00) slower
   String#[0...n] ==:   467452.8 i/s - 4.45x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   175.296k i/100ms
 String#sub!'string'   125.093k i/100ms
String#gsub!'string'    77.166k i/100ms
  String#[/regexp/]=   163.054k i/100ms
 String#sub!/regexp/   118.982k i/100ms
String#gsub!/regexp/    61.399k i/100ms
Calculating -------------------------------------
  String#['string']=      1.769M (± 0.6%) i/s -      8.940M in   5.052792s
 String#sub!'string'      1.249M (± 1.1%) i/s -      6.255M in   5.009978s
String#gsub!'string'    778.527k (± 0.3%) i/s -      3.935M in   5.055052s
  String#[/regexp/]=      1.617M (± 0.4%) i/s -      8.153M in   5.042362s
 String#sub!/regexp/      1.173M (± 0.6%) i/s -      5.949M in   5.071416s
String#gsub!/regexp/    616.144k (± 0.5%) i/s -      3.131M in   5.082328s

Comparison:
  String#['string']=:  1769412.0 i/s
  String#[/regexp/]=:  1616862.4 i/s - 1.09x  (± 0.00) slower
 String#sub!'string':  1248611.4 i/s - 1.42x  (± 0.00) slower
 String#sub!/regexp/:  1173105.5 i/s - 1.51x  (± 0.00) slower
String#gsub!'string':   778527.1 i/s - 2.27x  (± 0.00) slower
String#gsub!/regexp/:   616143.8 i/s - 2.87x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
          String#sub   147.260k i/100ms
        String#chomp   548.936k i/100ms
String#delete_suffix   591.283k i/100ms
Calculating -------------------------------------
          String#sub      1.461M (± 0.6%) i/s -      7.363M in   5.039890s
        String#chomp      5.480M (± 1.2%) i/s -     27.447M in   5.009600s
String#delete_suffix      5.927M (± 0.6%) i/s -     30.155M in   5.088393s

Comparison:
String#delete_suffix:  5926515.2 i/s
        String#chomp:  5479644.9 i/s - 1.08x  (± 0.00) slower
          String#sub:  1460993.6 i/s - 4.06x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   593.190k i/100ms
          String#sub   152.430k i/100ms
Calculating -------------------------------------
String#delete_prefix      5.860M (± 0.7%) i/s -     29.660M in   5.061900s
          String#sub      1.519M (± 0.4%) i/s -      7.622M in   5.019020s

Comparison:
String#delete_prefix:  5859640.1 i/s
          String#sub:  1518546.7 i/s - 3.86x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   597.841k i/100ms
    String#unpack[0]   468.030k i/100ms
Calculating -------------------------------------
      String#unpack1      5.964M (± 0.6%) i/s -     29.892M in   5.012255s
    String#unpack[0]      4.630M (± 0.6%) i/s -     23.402M in   5.054720s

Comparison:
      String#unpack1:  5963987.3 i/s
    String#unpack[0]:  4629795.9 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.723k i/100ms
          Time.parse     9.198k i/100ms
Calculating -------------------------------------
        Time.iso8601    277.452k (± 0.5%) i/s -      1.414M in   5.096062s
          Time.parse     92.489k (± 0.4%) i/s -    469.098k in   5.072021s

Comparison:
        Time.iso8601:   277452.3 i/s
          Time.parse:    92489.2 i/s - 3.00x  (± 0.00) slower

