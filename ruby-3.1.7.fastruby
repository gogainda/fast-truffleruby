$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       749.367k i/100ms
Function with splat arguments
                        21.945k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.502M (± 1.1%) i/s -     38.218M in   5.094831s
Function with splat arguments
                        222.927k (± 8.1%) i/s -      1.119M in   5.061917s

Comparison:
Function with single Array argument:  7502276.5 i/s
Function with splat arguments:   222927.1 i/s - 33.65x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.009M i/100ms
Sequential Assignment
                         1.053M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.062M (± 0.3%) i/s -     50.445M in   5.013286s
Sequential Assignment
                         10.528M (± 0.2%) i/s -     52.671M in   5.002723s

Comparison:
Sequential Assignment: 10528489.7 i/s
 Parallel Assignment: 10062445.4 i/s - 1.05x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   439.756k i/100ms
       attr_accessor   520.045k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.497M (± 0.5%) i/s -     22.867M in   5.085119s
       attr_accessor      5.210M (± 0.5%) i/s -     26.522M in   5.090641s

Comparison:
       attr_accessor:  5210141.9 i/s
   getter_and_setter:  4497040.3 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    88.148k i/100ms
         respond_to?   774.819k i/100ms
Calculating -------------------------------------
      begin...rescue    883.643k (± 0.6%) i/s -      4.496M in   5.087705s
         respond_to?      7.668M (± 0.5%) i/s -     38.741M in   5.052302s

Comparison:
         respond_to?:  7668169.4 i/s
      begin...rescue:   883643.2 i/s - 8.68x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
              normal   309.537k i/100ms
             &method   119.087k i/100ms
Calculating -------------------------------------
              normal      3.104M (± 0.4%) i/s -     15.786M in   5.086654s
             &method      1.196M (± 1.1%) i/s -      6.073M in   5.078339s

Comparison:
              normal:  3103550.9 i/s
             &method:  1196103.0 i/s - 2.59x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       257.000  i/100ms
       define_method   292.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.339k (±22.3%) i/s -     10.280k in   5.055097s
       define_method      3.184k (±20.5%) i/s -     14.600k in   5.041859s

Comparison:
       define_method:     3184.5 i/s
module_eval with string:     2339.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
         Float#round   255.404k i/100ms
       Kernel#format   200.693k i/100ms
            String#%   173.895k i/100ms
Calculating -------------------------------------
         Float#round      2.533M (± 1.1%) i/s -     12.770M in   5.041656s
       Kernel#format      2.016M (± 0.5%) i/s -     10.235M in   5.077158s
            String#%      1.735M (± 0.4%) i/s -      8.695M in   5.010865s

Comparison:
         Float#round:  2533279.1 i/s
       Kernel#format:  2016009.6 i/s - 1.26x  (± 0.00) slower
            String#%:  1735210.1 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
                Hash   880.160k i/100ms
          OpenStruct   495.282k i/100ms
Calculating -------------------------------------
                Hash      8.554M (± 1.0%) i/s -     43.128M in   5.042186s
          OpenStruct      4.970M (± 0.5%) i/s -     25.259M in   5.082338s

Comparison:
                Hash:  8554231.0 i/s
          OpenStruct:  4970147.8 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.063M i/100ms
          OpenStruct     9.808k i/100ms
Calculating -------------------------------------
                Hash     10.723M (± 0.5%) i/s -     54.234M in   5.058086s
          OpenStruct     95.025k (± 2.7%) i/s -    480.592k in   5.061137s

Comparison:
                Hash: 10722579.9 i/s
          OpenStruct:    95024.8 i/s - 112.84x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   564.369k i/100ms
  ancestors.include?   126.560k i/100ms
Calculating -------------------------------------
  less than or equal      5.482M (± 0.5%) i/s -     27.654M in   5.044235s
  ancestors.include?      1.252M (± 0.7%) i/s -      6.328M in   5.055933s

Comparison:
  less than or equal:  5482480.6 i/s
  ancestors.include?:  1251660.3 i/s - 4.38x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.712  (± 0.0%) i/s -      4.000  in   5.715858s
         Kernel loop      0.207  (± 0.0%) i/s -      2.000  in   9.658045s

Comparison:
          While Loop:        0.7 i/s
         Kernel loop:        0.2 i/s - 3.44x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.547M i/100ms
         Array#first     1.354M i/100ms
Calculating -------------------------------------
           Array#[0]     15.496M (± 0.3%) i/s -     78.883M in   5.090448s
         Array#first     13.535M (± 0.4%) i/s -     67.713M in   5.003010s

Comparison:
           Array#[0]: 15496386.8 i/s
         Array#first: 13534667.9 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.532M i/100ms
          Array#last     1.311M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.293M (± 0.4%) i/s -     76.609M in   5.009525s
          Array#last     13.182M (± 0.1%) i/s -     66.839M in   5.070312s

Comparison:
          Array#[-1]: 15292938.7 i/s
          Array#last: 13182396.5 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    98.567k i/100ms
Calculating -------------------------------------
                find      0.254  (± 0.0%) i/s -      2.000  in   7.866910s
             bsearch    986.943k (± 0.7%) i/s -      5.027M in   5.093715s

Comparison:
             bsearch:   986942.6 i/s
                find:        0.3 i/s - 3882091.33x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    18.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    189.276  (± 2.6%) i/s -    954.000  in   5.043762s
        Array#insert      1.426  (± 0.0%) i/s -      8.000  in   5.609912s

Comparison:
       Array#unshift:      189.3 i/s
        Array#insert:        1.4 i/s - 132.71x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.179M i/100ms
          Array#size     2.190M i/100ms
         Array#count     1.385M i/100ms
Calculating -------------------------------------
        Array#length     21.815M (± 0.4%) i/s -    111.140M in   5.094741s
          Array#size     21.817M (± 0.8%) i/s -    109.489M in   5.018957s
         Array#count     13.842M (± 0.3%) i/s -     69.253M in   5.003124s

Comparison:
          Array#size: 21816507.1 i/s
        Array#length: 21815132.2 i/s - same-ish: difference falls within error
         Array#count: 13842134.9 i/s - 1.58x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.868k i/100ms
        Array#sample     1.029M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    461.511k (± 0.4%) i/s -      2.339M in   5.068787s
        Array#sample     10.262M (± 0.9%) i/s -     51.429M in   5.011781s

Comparison:
        Array#sample: 10262399.4 i/s
 Array#shuffle.first:   461511.0 i/s - 22.24x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    61.576k i/100ms
          Date.parse    30.332k i/100ms
Calculating -------------------------------------
        Date.iso8601    611.378k (± 0.7%) i/s -      3.079M in   5.036125s
          Date.parse    300.381k (± 1.7%) i/s -      1.517M in   5.050520s

Comparison:
        Date.iso8601:   611378.2 i/s
          Date.parse:   300381.3 i/s - 2.04x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    16.474k i/100ms
           Array#map    26.923k i/100ms
Calculating -------------------------------------
   Array#each + push    163.731k (± 0.4%) i/s -    823.700k in   5.030893s
           Array#map    268.237k (± 0.2%) i/s -      1.346M in   5.018535s

Comparison:
           Array#map:   268237.2 i/s
   Array#each + push:   163730.6 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
            For loop    27.499k i/100ms
               #each    30.759k i/100ms
Calculating -------------------------------------
            For loop    275.227k (± 1.0%) i/s -      1.402M in   5.096105s
               #each    307.862k (± 0.3%) i/s -      1.569M in   5.095553s

Comparison:
               #each:   307861.9 i/s
            For loop:   275226.7 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.367k i/100ms
     each_with_index    19.020k i/100ms
Calculating -------------------------------------
          While Loop    273.762k (± 0.3%) i/s -      1.396M in   5.098318s
     each_with_index    189.839k (± 0.5%) i/s -    951.000k in   5.009622s

Comparison:
          While Loop:   273762.2 i/s
     each_with_index:   189838.7 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    71.405k i/100ms
      inject to_proc     2.086k i/100ms
        inject block     1.954k i/100ms
Calculating -------------------------------------
       inject symbol    715.440k (± 0.4%) i/s -      3.642M in   5.090191s
      inject to_proc     20.799k (± 0.6%) i/s -    104.300k in   5.014805s
        inject block     19.760k (± 0.5%) i/s -     99.654k in   5.043294s

Comparison:
       inject symbol:   715440.0 i/s
      inject to_proc:    20799.2 i/s - 34.40x  (± 0.00) slower
        inject block:    19760.1 i/s - 36.21x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     7.438k i/100ms
   Array#map.flatten     4.205k i/100ms
      Array#flat_map    10.126k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     74.263k (± 0.6%) i/s -    371.900k in   5.008056s
   Array#map.flatten     41.675k (± 2.2%) i/s -    210.250k in   5.047684s
      Array#flat_map    101.755k (± 1.0%) i/s -    516.426k in   5.075750s

Comparison:
      Array#flat_map:   101755.4 i/s
Array#map.flatten(1):    74262.9 i/s - 1.37x  (± 0.00) slower
   Array#map.flatten:    41675.0 i/s - 2.44x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    31.673k i/100ms
  Array#reverse_each    32.103k i/100ms
Calculating -------------------------------------
  Array#reverse.each    315.195k (± 0.8%) i/s -      1.584M in   5.024666s
  Array#reverse_each    322.103k (± 0.7%) i/s -      1.637M in   5.083271s

Comparison:
  Array#reverse_each:   322102.7 i/s
  Array#reverse.each:   315194.8 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        18.964k i/100ms
   Enumerable#detect    80.053k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        196.765k (± 0.7%) i/s -      3.945M in  20.047686s
   Enumerable#detect    809.141k (± 0.6%) i/s -     16.251M in  20.084688s

Comparison:
   Enumerable#detect:   809140.7 i/s
Enumerable#select.first:   196765.0 i/s - 4.11x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       237.764k i/100ms
Enumerable#select.last
                        17.984k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.355M (± 1.4%) i/s -     11.888M in   5.049514s
Enumerable#select.last
                        180.099k (± 1.1%) i/s -    917.184k in   5.093288s

Comparison:
Enumerable#reverse.detect:  2354822.8 i/s
Enumerable#select.last:   180098.9 i/s - 13.08x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.671k i/100ms
  Enumerable#sort_by     4.450k i/100ms
     Enumerable#sort     2.361k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         48.874k (± 1.3%) i/s -    247.563k in   5.066201s
  Enumerable#sort_by     45.180k (± 1.6%) i/s -    226.950k in   5.024430s
     Enumerable#sort     23.301k (± 0.9%) i/s -    118.050k in   5.066854s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    48873.5 i/s
  Enumerable#sort_by:    45180.2 i/s - 1.08x  (± 0.00) slower
     Enumerable#sort:    23300.6 i/s - 2.10x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    16.955k i/100ms
Enumerable#sort_by...first
                         8.350k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    172.654k (± 0.8%) i/s -    864.705k in   5.008620s
Enumerable#sort_by...first
                         83.716k (± 1.1%) i/s -    425.850k in   5.087488s

Comparison:
   Enumerable#min_by:   172653.9 i/s
Enumerable#sort_by...first:    83715.5 i/s - 2.06x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   416.389k i/100ms
            Hash#dup   292.061k i/100ms
Calculating -------------------------------------
              Hash[]      4.296M (± 1.0%) i/s -     21.652M in   5.040246s
            Hash#dup      2.916M (± 1.7%) i/s -     14.603M in   5.010006s

Comparison:
              Hash[]:  4296297.7 i/s
            Hash#dup:  2915633.1 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.402M i/100ms
  Hash#fetch, symbol     1.147M i/100ms
     Hash#[], string     1.238M i/100ms
  Hash#fetch, string   743.139k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.047M (± 0.3%) i/s -     71.516M in   5.091168s
  Hash#fetch, symbol     11.467M (± 0.7%) i/s -     57.355M in   5.001861s
     Hash#[], string     12.378M (± 0.4%) i/s -     61.914M in   5.002181s
  Hash#fetch, string      7.392M (± 0.6%) i/s -     37.157M in   5.027004s

Comparison:
     Hash#[], symbol: 14047136.7 i/s
     Hash#[], string: 12377575.3 i/s - 1.13x  (± 0.00) slower
  Hash#fetch, symbol: 11467315.1 i/s - 1.22x  (± 0.00) slower
  Hash#fetch, string:  7391756.6 i/s - 1.90x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   819.856k i/100ms
             Hash#[]   984.284k i/100ms
          Hash#[] ||   869.716k i/100ms
          Hash#[] &&   392.654k i/100ms
          Hash#fetch   602.282k i/100ms
 Hash#fetch fallback   385.883k i/100ms
Calculating -------------------------------------
            Hash#dig      8.149M (± 1.0%) i/s -     40.993M in   5.031180s
             Hash#[]      9.737M (± 0.5%) i/s -     49.214M in   5.054364s
          Hash#[] ||      8.831M (± 0.7%) i/s -     44.356M in   5.022700s
          Hash#[] &&      3.818M (± 1.5%) i/s -     19.240M in   5.040936s
          Hash#fetch      6.023M (± 0.6%) i/s -     30.114M in   5.000167s
 Hash#fetch fallback      3.769M (± 0.8%) i/s -     18.908M in   5.016694s

Comparison:
             Hash#[]:  9737254.9 i/s
          Hash#[] ||:  8831419.9 i/s - 1.10x  (± 0.00) slower
            Hash#dig:  8148544.1 i/s - 1.19x  (± 0.00) slower
          Hash#fetch:  6022843.0 i/s - 1.62x  (± 0.00) slower
          Hash#[] &&:  3817683.9 i/s - 2.55x  (± 0.00) slower
 Hash#fetch fallback:  3769332.2 i/s - 2.58x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.279M i/100ms
  Hash#fetch + block     1.298M i/100ms
    Hash#fetch + arg   948.196k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     12.969M (± 1.7%) i/s -     65.221M in   5.030604s
  Hash#fetch + block     12.944M (± 1.0%) i/s -     64.896M in   5.013932s
    Hash#fetch + arg      9.494M (± 1.2%) i/s -     48.358M in   5.094146s

Comparison:
  Hash#fetch + const: 12968557.7 i/s
  Hash#fetch + block: 12944402.8 i/s - same-ish: difference falls within error
    Hash#fetch + arg:  9494333.7 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    25.796k i/100ms
         sort + to_h    11.474k i/100ms
Calculating -------------------------------------
      sort_by + to_h    257.723k (± 0.8%) i/s -      1.290M in   5.004942s
         sort + to_h    114.113k (± 0.6%) i/s -    573.700k in   5.027653s

Comparison:
      sort_by + to_h:   257722.7 i/s
         sort + to_h:   114112.9 i/s - 2.26x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   184.275k i/100ms
       Hash#each_key   196.558k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.862M (± 2.5%) i/s -      9.398M in   5.051845s
       Hash#each_key      1.953M (± 0.6%) i/s -      9.828M in   5.032264s

Comparison:
       Hash#each_key:  1953059.8 i/s
      Hash#keys.each:  1861578.0 i/s - 1.05x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.186k i/100ms
           Hash#key?     1.024M i/100ms
Calculating -------------------------------------
  Hash#keys.include?     12.126k (± 3.9%) i/s -     61.672k in   5.094826s
           Hash#key?     10.168M (± 0.6%) i/s -     51.196M in   5.035244s

Comparison:
           Hash#key?: 10167935.3 i/s
  Hash#keys.include?:    12126.3 i/s - 838.51x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.103k i/100ms
            Hash#[]=    10.442k i/100ms
Calculating -------------------------------------
         Hash#merge!     41.137k (± 0.7%) i/s -    209.253k in   5.086924s
            Hash#[]=    103.439k (± 1.0%) i/s -    522.100k in   5.047912s

Comparison:
            Hash#[]=:   103439.1 i/s
         Hash#merge!:    41137.4 i/s - 2.51x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.843k i/100ms
      Hash#merge({})     3.768k i/100ms
 Hash#dup#merge!({})     2.813k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         47.818k (± 0.4%) i/s -    242.150k in   5.064076s
      Hash#merge({})     37.825k (± 0.3%) i/s -    192.168k in   5.080514s
 Hash#dup#merge!({})     27.878k (± 0.7%) i/s -    140.650k in   5.045418s

Comparison:
{}#merge!(Hash) do end:    47818.0 i/s
      Hash#merge({}):    37824.9 i/s - 1.26x  (± 0.00) slower
 Hash#dup#merge!({}):    27878.0 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   368.409k i/100ms
          Hash#merge   339.146k i/100ms
Calculating -------------------------------------
        Hash#**other      3.708M (± 0.3%) i/s -     18.789M in   5.067692s
          Hash#merge      3.376M (± 0.4%) i/s -     16.957M in   5.023223s

Comparison:
        Hash#**other:  3707616.5 i/s
          Hash#merge:  3375837.1 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.663k i/100ms
         Hash#merge!     3.949k i/100ms
Calculating -------------------------------------
          Hash#merge     16.780k (± 0.9%) i/s -     84.813k in   5.054675s
         Hash#merge!     39.411k (± 0.6%) i/s -    197.450k in   5.010167s

Comparison:
         Hash#merge!:    39411.4 i/s
          Hash#merge:    16780.4 i/s - 2.35x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      417.437k i/100ms
Array#each             216.088k i/100ms
Array#each_w/_object   167.315k i/100ms
Hash#select-include     73.037k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.218M (± 0.7%) i/s -     21.289M in   5.047110s
Array#each                2.126M (± 0.5%) i/s -     10.804M in   5.082324s
Array#each_w/_object      1.672M (± 0.3%) i/s -      8.366M in   5.003642s
Hash#select-include     726.320k (± 0.4%) i/s -      3.652M in   5.027966s

Comparison:
Hash#native-slice   :  4218301.6 i/s
Array#each          :  2125937.5 i/s - 1.98x  (± 0.00) slower
Array#each_w/_object:  1671947.7 i/s - 2.52x  (± 0.00) slower
Hash#select-include :   726320.2 i/s - 5.81x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.068k i/100ms
         Hash#value?   846.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     10.602k (± 4.2%) i/s -     53.400k in   5.046999s
         Hash#value?      8.368k (± 0.6%) i/s -     42.300k in   5.055398s

Comparison:
Hash#values.include?:    10601.8 i/s
         Hash#value?:     8367.6 i/s - 1.27x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
                call   639.016k i/100ms
                send   511.349k i/100ms
      method_missing   375.666k i/100ms
Calculating -------------------------------------
                call      6.399M (± 0.7%) i/s -     32.590M in   5.093348s
                send      5.110M (± 0.7%) i/s -     25.567M in   5.003499s
      method_missing      3.752M (± 0.6%) i/s -     18.783M in   5.006686s

Comparison:
                call:  6398787.9 i/s
                send:  5110169.0 i/s - 1.25x  (± 0.00) slower
      method_missing:  3751783.5 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
               Block     9.157k i/100ms
      Symbol#to_proc    10.176k i/100ms
Calculating -------------------------------------
               Block     90.887k (± 0.6%) i/s -    457.850k in   5.037763s
      Symbol#to_proc    100.618k (± 0.6%) i/s -    508.800k in   5.056950s

Comparison:
      Symbol#to_proc:   100617.8 i/s
               Block:    90886.8 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
          block.call   974.723k i/100ms
       block + yield     1.002M i/100ms
        unused block     1.323M i/100ms
               yield     1.119M i/100ms
Calculating -------------------------------------
          block.call      9.741M (± 1.0%) i/s -     48.736M in   5.003943s
       block + yield     10.031M (± 0.3%) i/s -     51.108M in   5.095249s
        unused block     13.228M (± 0.4%) i/s -     66.174M in   5.002540s
               yield     11.170M (± 0.3%) i/s -     55.973M in   5.010902s

Comparison:
        unused block: 13228302.2 i/s
               yield: 11170376.5 i/s - 1.18x  (± 0.00) slower
       block + yield: 10030567.3 i/s - 1.32x  (± 0.00) slower
          block.call:  9740570.1 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   304.149k i/100ms
      range#include?    12.562k i/100ms
       range#member?    12.600k i/100ms
       plain compare   500.903k i/100ms
Calculating -------------------------------------
        range#cover?      2.994M (± 0.4%) i/s -     15.207M in   5.078926s
      range#include?    126.650k (± 0.6%) i/s -    640.662k in   5.058702s
       range#member?    126.649k (± 0.5%) i/s -    642.600k in   5.074030s
       plain compare      5.104M (± 0.2%) i/s -     25.546M in   5.005430s

Comparison:
       plain compare:  5103698.6 i/s
        range#cover?:  2994272.1 i/s - 1.70x  (± 0.00) slower
      range#include?:   126650.4 i/s - 40.30x  (± 0.00) slower
       range#member?:   126648.6 i/s - 40.30x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
       String#match?   923.512k i/100ms
           String#=~   616.872k i/100ms
          Regexp#===   596.360k i/100ms
        String#match   447.099k i/100ms
Calculating -------------------------------------
       String#match?      9.234M (± 1.2%) i/s -     46.176M in   5.001561s
           String#=~      6.021M (± 0.6%) i/s -     30.227M in   5.020726s
          Regexp#===      5.902M (± 0.6%) i/s -     29.818M in   5.052315s
        String#match      4.475M (± 0.4%) i/s -     22.802M in   5.095184s

Comparison:
       String#match?:  9233529.9 i/s
           String#=~:  6020607.2 i/s - 1.53x  (± 0.00) slower
          Regexp#===:  5902054.6 i/s - 1.56x  (± 0.00) slower
        String#match:  4475273.4 i/s - 2.06x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   638.395k i/100ms
      String#casecmp   795.780k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.334M (± 0.5%) i/s -     31.920M in   5.039678s
      String#casecmp      8.032M (± 1.8%) i/s -     40.585M in   5.054550s

Comparison:
      String#casecmp:  8032189.7 i/s
String#downcase + ==:  6333877.4 i/s - 1.27x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
            String#+   562.592k i/100ms
       String#concat   606.729k i/100ms
       String#append   671.775k i/100ms
         "foo" "bar"     1.166M i/100ms
  "#{'foo'}#{'bar'}"     1.166M i/100ms
Calculating -------------------------------------
            String#+      5.640M (± 0.5%) i/s -     28.692M in   5.087402s
       String#concat      6.058M (± 0.5%) i/s -     30.336M in   5.007720s
       String#append      6.747M (± 0.4%) i/s -     34.261M in   5.077857s
         "foo" "bar"     11.670M (± 0.3%) i/s -     59.480M in   5.096815s
  "#{'foo'}#{'bar'}"     11.647M (± 0.4%) i/s -     58.311M in   5.006499s

Comparison:
         "foo" "bar": 11670192.8 i/s
  "#{'foo'}#{'bar'}": 11647305.7 i/s - same-ish: difference falls within error
       String#append:  6747171.7 i/s - 1.73x  (± 0.00) slower
       String#concat:  6058064.5 i/s - 1.93x  (± 0.00) slower
            String#+:  5639975.7 i/s - 2.07x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
           String#+@   928.168k i/100ms
          String#dup   549.257k i/100ms
Calculating -------------------------------------
           String#+@      9.272M (± 0.7%) i/s -     46.408M in   5.005375s
          String#dup      5.504M (± 0.5%) i/s -     28.012M in   5.089288s

Comparison:
           String#+@:  9272193.6 i/s
          String#dup:  5504282.8 i/s - 1.68x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
           String#=~   192.698k i/100ms
       String#match?   405.044k i/100ms
    String#end_with?   581.271k i/100ms
Calculating -------------------------------------
           String#=~      1.932M (± 0.5%) i/s -      9.828M in   5.087274s
       String#match?      4.053M (± 0.7%) i/s -     20.657M in   5.097337s
    String#end_with?      5.876M (± 0.6%) i/s -     29.645M in   5.044872s

Comparison:
    String#end_with?:  5876448.2 i/s
       String#match?:  4052786.4 i/s - 1.45x  (± 0.00) slower
           String#=~:  1931855.0 i/s - 3.04x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   109.894k i/100ms
          String#sub   133.180k i/100ms
String#dup["string"]=
                       173.078k i/100ms
Calculating -------------------------------------
         String#gsub      1.109M (± 0.6%) i/s -      5.605M in   5.052165s
          String#sub      1.395M (± 0.7%) i/s -      7.059M in   5.059294s
String#dup["string"]=
                          1.741M (± 0.7%) i/s -      8.827M in   5.070349s

Comparison:
String#dup["string"]=:  1740987.8 i/s
          String#sub:  1395232.0 i/s - 1.25x  (± 0.00) slower
         String#gsub:  1109385.4 i/s - 1.57x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   100.788k i/100ms
           String#tr   326.143k i/100ms
Calculating -------------------------------------
         String#gsub      1.009M (± 1.1%) i/s -      5.140M in   5.095832s
           String#tr      3.271M (± 0.6%) i/s -     16.633M in   5.085377s

Comparison:
           String#tr:  3270919.3 i/s
         String#gsub:  1008828.1 i/s - 3.24x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.154M i/100ms
         With Freeze     1.672M i/100ms
Calculating -------------------------------------
      Without Freeze     11.548M (± 0.4%) i/s -     58.841M in   5.095604s
         With Freeze     16.743M (± 0.3%) i/s -     85.281M in   5.093653s

Comparison:
         With Freeze: 16742738.7 i/s
      Without Freeze: 11547576.1 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.466k i/100ms
      String#squeeze   159.058k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     34.526k (± 1.5%) i/s -    173.300k in   5.020706s
      String#squeeze      1.582M (± 0.9%) i/s -      7.953M in   5.026608s

Comparison:
      String#squeeze:  1582277.6 i/s
 String#gsub/regex+/:    34526.1 i/s - 45.83x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
           String#=~   281.406k i/100ms
       String#match?   681.434k i/100ms
  String#start_with?   842.624k i/100ms
Calculating -------------------------------------
           String#=~      2.823M (± 0.4%) i/s -     14.352M in   5.083556s
       String#match?      6.923M (± 1.2%) i/s -     34.753M in   5.020968s
  String#start_with?      8.513M (± 0.6%) i/s -     42.974M in   5.048444s

Comparison:
  String#start_with?:  8512564.5 i/s
       String#match?:  6922617.7 i/s - 1.23x  (± 0.00) slower
           String#=~:  2823215.4 i/s - 3.02x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   202.950k i/100ms
    String#[0, n] ==    86.517k i/100ms
   String#[RANGE] ==    75.710k i/100ms
   String#[0...n] ==    46.470k i/100ms
Calculating -------------------------------------
  String#start_with?      2.017M (± 0.5%) i/s -     10.148M in   5.032155s
    String#[0, n] ==    850.669k (± 0.6%) i/s -      4.326M in   5.085411s
   String#[RANGE] ==    757.115k (± 0.2%) i/s -      3.861M in   5.099910s
   String#[0...n] ==    465.197k (± 0.2%) i/s -      2.370M in   5.094569s

Comparison:
  String#start_with?:  2016583.0 i/s
    String#[0, n] ==:   850668.6 i/s - 2.37x  (± 0.00) slower
   String#[RANGE] ==:   757115.2 i/s - 2.66x  (± 0.00) slower
   String#[0...n] ==:   465197.4 i/s - 4.33x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   172.370k i/100ms
 String#sub!'string'   124.535k i/100ms
String#gsub!'string'    76.170k i/100ms
  String#[/regexp/]=   159.577k i/100ms
 String#sub!/regexp/   115.653k i/100ms
String#gsub!/regexp/    61.472k i/100ms
Calculating -------------------------------------
  String#['string']=      1.742M (± 0.5%) i/s -      8.791M in   5.045513s
 String#sub!'string'      1.249M (± 0.3%) i/s -      6.351M in   5.085990s
String#gsub!'string'    771.349k (± 0.7%) i/s -      3.885M in   5.036455s
  String#[/regexp/]=      1.610M (± 1.4%) i/s -      8.138M in   5.057472s
 String#sub!/regexp/      1.183M (± 0.7%) i/s -      6.014M in   5.084386s
String#gsub!/regexp/    618.954k (± 0.5%) i/s -      3.135M in   5.065218s

Comparison:
  String#['string']=:  1742358.5 i/s
  String#[/regexp/]=:  1609504.6 i/s - 1.08x  (± 0.00) slower
 String#sub!'string':  1248794.6 i/s - 1.40x  (± 0.00) slower
 String#sub!/regexp/:  1182887.1 i/s - 1.47x  (± 0.00) slower
String#gsub!'string':   771349.1 i/s - 2.26x  (± 0.00) slower
String#gsub!/regexp/:   618954.0 i/s - 2.82x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
          String#sub   145.767k i/100ms
        String#chomp   549.296k i/100ms
String#delete_suffix   594.877k i/100ms
Calculating -------------------------------------
          String#sub      1.453M (± 0.4%) i/s -      7.288M in   5.014446s
        String#chomp      5.494M (± 0.4%) i/s -     28.014M in   5.099450s
String#delete_suffix      5.957M (± 1.0%) i/s -     30.339M in   5.093484s

Comparison:
String#delete_suffix:  5956942.3 i/s
        String#chomp:  5493643.4 i/s - 1.08x  (± 0.00) slower
          String#sub:  1453496.5 i/s - 4.10x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   584.649k i/100ms
          String#sub   148.768k i/100ms
Calculating -------------------------------------
String#delete_prefix      5.901M (± 0.4%) i/s -     29.817M in   5.053034s
          String#sub      1.492M (± 0.7%) i/s -      7.587M in   5.085790s

Comparison:
String#delete_prefix:  5900926.0 i/s
          String#sub:  1491912.1 i/s - 3.96x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   623.353k i/100ms
    String#unpack[0]   458.316k i/100ms
Calculating -------------------------------------
      String#unpack1      6.236M (± 0.9%) i/s -     31.791M in   5.098596s
    String#unpack[0]      4.642M (± 0.6%) i/s -     23.374M in   5.035225s

Comparison:
      String#unpack1:  6235718.6 i/s
    String#unpack[0]:  4642279.3 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.644k i/100ms
          Time.parse     9.213k i/100ms
Calculating -------------------------------------
        Time.iso8601    277.066k (± 0.3%) i/s -      1.410M in   5.088530s
          Time.parse     92.236k (± 0.5%) i/s -    469.863k in   5.094280s

Comparison:
        Time.iso8601:   277066.4 i/s
          Time.parse:    92236.2 i/s - 3.00x  (± 0.00) slower

