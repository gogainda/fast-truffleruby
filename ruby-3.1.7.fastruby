$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       763.381k i/100ms
Function with splat arguments
                        21.192k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.636M (± 2.3%) i/s -     38.169M in   5.001510s
Function with splat arguments
                        217.180k (± 5.5%) i/s -      1.102M in   5.096322s

Comparison:
Function with single Array argument:  7635952.1 i/s
Function with splat arguments:   217180.2 i/s - 35.16x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.011M i/100ms
Sequential Assignment
                         1.054M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.119M (± 0.3%) i/s -     51.553M in   5.094920s
Sequential Assignment
                         10.549M (± 0.4%) i/s -     53.757M in   5.095908s

Comparison:
Sequential Assignment: 10549207.3 i/s
 Parallel Assignment: 10118545.1 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   462.476k i/100ms
       attr_accessor   522.392k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.608M (± 0.4%) i/s -     23.124M in   5.018735s
       attr_accessor      5.243M (± 0.5%) i/s -     26.642M in   5.081959s

Comparison:
       attr_accessor:  5242590.1 i/s
   getter_and_setter:  4607588.0 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    88.777k i/100ms
         respond_to?   744.101k i/100ms
Calculating -------------------------------------
      begin...rescue    884.779k (± 0.5%) i/s -      4.439M in   5.017043s
         respond_to?      7.450M (± 0.5%) i/s -     37.949M in   5.093809s

Comparison:
         respond_to?:  7450233.2 i/s
      begin...rescue:   884779.0 i/s - 8.42x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
              normal   308.287k i/100ms
             &method   120.385k i/100ms
Calculating -------------------------------------
              normal      3.076M (± 2.0%) i/s -     15.414M in   5.013700s
             &method      1.200M (± 2.3%) i/s -      6.019M in   5.021178s

Comparison:
              normal:  3075753.4 i/s
             &method:  1199535.2 i/s - 2.56x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       244.000  i/100ms
       define_method   315.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.314k (±17.7%) i/s -     10.736k in   5.005855s
       define_method      3.213k (±20.3%) i/s -     14.490k in   5.034292s

Comparison:
       define_method:     3213.4 i/s
module_eval with string:     2314.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
         Float#round   255.779k i/100ms
       Kernel#format   199.729k i/100ms
            String#%   170.792k i/100ms
Calculating -------------------------------------
         Float#round      2.581M (± 1.6%) i/s -     13.045M in   5.055563s
       Kernel#format      1.983M (± 0.9%) i/s -      9.986M in   5.035377s
            String#%      1.712M (± 2.0%) i/s -      8.710M in   5.089582s

Comparison:
         Float#round:  2580989.9 i/s
       Kernel#format:  1983429.0 i/s - 1.30x  (± 0.00) slower
            String#%:  1712115.0 i/s - 1.51x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
                Hash   875.959k i/100ms
          OpenStruct   493.502k i/100ms
Calculating -------------------------------------
                Hash      8.632M (± 0.6%) i/s -     43.798M in   5.074147s
          OpenStruct      4.907M (± 0.5%) i/s -     24.675M in   5.029004s

Comparison:
                Hash:  8631891.2 i/s
          OpenStruct:  4906676.6 i/s - 1.76x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.102M i/100ms
          OpenStruct     9.762k i/100ms
Calculating -------------------------------------
                Hash     11.035M (± 0.4%) i/s -     56.218M in   5.094779s
          OpenStruct     94.603k (± 2.7%) i/s -    478.338k in   5.059919s

Comparison:
                Hash: 11034529.4 i/s
          OpenStruct:    94603.0 i/s - 116.64x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   547.174k i/100ms
  ancestors.include?   124.988k i/100ms
Calculating -------------------------------------
  less than or equal      5.469M (± 0.4%) i/s -     27.359M in   5.002994s
  ancestors.include?      1.262M (± 1.0%) i/s -      6.374M in   5.049771s

Comparison:
  less than or equal:  5468575.6 i/s
  ancestors.include?:  1262440.5 i/s - 4.33x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.634  (± 0.0%) i/s -      4.000  in   6.307330s
         Kernel loop      0.209  (± 0.0%) i/s -      2.000  in   9.584492s

Comparison:
          While Loop:        0.6 i/s
         Kernel loop:        0.2 i/s - 3.04x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.571M i/100ms
         Array#first     1.351M i/100ms
Calculating -------------------------------------
           Array#[0]     15.689M (± 1.4%) i/s -     78.533M in   5.006629s
         Array#first     13.501M (± 0.4%) i/s -     67.534M in   5.002354s

Comparison:
           Array#[0]: 15689071.4 i/s
         Array#first: 13500689.2 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.526M i/100ms
          Array#last     1.329M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.294M (± 0.8%) i/s -     77.823M in   5.088789s
          Array#last     13.287M (± 0.4%) i/s -     66.471M in   5.002807s

Comparison:
          Array#[-1]: 15294020.4 i/s
          Array#last: 13286815.8 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    98.951k i/100ms
Calculating -------------------------------------
                find      0.268  (± 0.0%) i/s -      2.000  in   7.449977s
             bsearch    985.786k (± 1.6%) i/s -      4.948M in   5.020322s

Comparison:
             bsearch:   985785.5 i/s
                find:        0.3 i/s - 3672038.41x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    18.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    189.009  (± 2.6%) i/s -    954.000  in   5.050606s
        Array#insert      1.419  (± 0.0%) i/s -      8.000  in   5.636291s

Comparison:
       Array#unshift:      189.0 i/s
        Array#insert:        1.4 i/s - 133.16x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.185M i/100ms
          Array#size     2.182M i/100ms
         Array#count     1.521M i/100ms
Calculating -------------------------------------
        Array#length     21.733M (± 0.4%) i/s -    109.263M in   5.027576s
          Array#size     21.830M (± 1.6%) i/s -    111.285M in   5.099037s
         Array#count     14.273M (± 0.4%) i/s -     71.498M in   5.009529s

Comparison:
          Array#size: 21830464.1 i/s
        Array#length: 21732981.0 i/s - same-ish: difference falls within error
         Array#count: 14272545.3 i/s - 1.53x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.112k i/100ms
        Array#sample     1.049M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    456.163k (± 0.7%) i/s -      2.301M in   5.043903s
        Array#sample     10.495M (± 0.3%) i/s -     53.496M in   5.097356s

Comparison:
        Array#sample: 10495021.2 i/s
 Array#shuffle.first:   456162.6 i/s - 23.01x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    63.329k i/100ms
          Date.parse    31.464k i/100ms
Calculating -------------------------------------
        Date.iso8601    638.595k (± 1.8%) i/s -      3.230M in   5.059445s
          Date.parse    313.346k (± 0.5%) i/s -      1.573M in   5.020788s

Comparison:
        Date.iso8601:   638594.9 i/s
          Date.parse:   313346.0 i/s - 2.04x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    16.804k i/100ms
           Array#map    26.693k i/100ms
Calculating -------------------------------------
   Array#each + push    165.059k (± 1.3%) i/s -    840.200k in   5.091105s
           Array#map    265.896k (± 1.1%) i/s -      1.335M in   5.020084s

Comparison:
           Array#map:   265896.3 i/s
   Array#each + push:   165058.5 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
            For loop    29.888k i/100ms
               #each    32.822k i/100ms
Calculating -------------------------------------
            For loop    298.941k (± 0.4%) i/s -      1.524M in   5.099036s
               #each    328.137k (± 0.5%) i/s -      1.641M in   5.001396s

Comparison:
               #each:   328136.6 i/s
            For loop:   298940.6 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.366k i/100ms
     each_with_index    18.985k i/100ms
Calculating -------------------------------------
          While Loop    276.507k (± 0.3%) i/s -      1.396M in   5.047519s
     each_with_index    185.345k (± 0.5%) i/s -    930.265k in   5.019212s

Comparison:
          While Loop:   276507.2 i/s
     each_with_index:   185345.0 i/s - 1.49x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    71.617k i/100ms
      inject to_proc     2.082k i/100ms
        inject block     1.987k i/100ms
Calculating -------------------------------------
       inject symbol    714.825k (± 0.6%) i/s -      3.581M in   5.009616s
      inject to_proc     20.870k (± 0.4%) i/s -    106.182k in   5.087849s
        inject block     19.871k (± 0.5%) i/s -     99.350k in   4.999931s

Comparison:
       inject symbol:   714824.9 i/s
      inject to_proc:    20870.1 i/s - 34.25x  (± 0.00) slower
        inject block:    19870.7 i/s - 35.97x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     7.445k i/100ms
   Array#map.flatten     4.185k i/100ms
      Array#flat_map    10.170k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     74.104k (± 0.7%) i/s -    372.250k in   5.023563s
   Array#map.flatten     42.000k (± 1.1%) i/s -    213.435k in   5.082479s
      Array#flat_map    101.350k (± 0.5%) i/s -    508.500k in   5.017390s

Comparison:
      Array#flat_map:   101349.8 i/s
Array#map.flatten(1):    74104.0 i/s - 1.37x  (± 0.00) slower
   Array#map.flatten:    41999.7 i/s - 2.41x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    31.714k i/100ms
  Array#reverse_each    32.392k i/100ms
Calculating -------------------------------------
  Array#reverse.each    315.791k (± 0.4%) i/s -      1.586M in   5.021433s
  Array#reverse_each    324.448k (± 0.5%) i/s -      1.652M in   5.091811s

Comparison:
  Array#reverse_each:   324448.4 i/s
  Array#reverse.each:   315791.2 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        19.402k i/100ms
   Enumerable#detect    79.790k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        192.764k (± 1.0%) i/s -      3.861M in  20.031643s
   Enumerable#detect    798.952k (± 0.5%) i/s -     16.038M in  20.074092s

Comparison:
   Enumerable#detect:   798951.5 i/s
Enumerable#select.first:   192763.5 i/s - 4.14x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       235.779k i/100ms
Enumerable#select.last
                        18.046k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.349M (± 0.5%) i/s -     11.789M in   5.019020s
Enumerable#select.last
                        178.580k (± 0.5%) i/s -    902.300k in   5.052774s

Comparison:
Enumerable#reverse.detect:  2348908.0 i/s
Enumerable#select.last:   178579.6 i/s - 13.15x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.633k i/100ms
  Enumerable#sort_by     4.540k i/100ms
     Enumerable#sort     2.353k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         48.707k (± 0.6%) i/s -    245.549k in   5.041511s
  Enumerable#sort_by     45.036k (± 1.2%) i/s -    227.000k in   5.041062s
     Enumerable#sort     23.441k (± 0.9%) i/s -    117.650k in   5.019464s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    48707.5 i/s
  Enumerable#sort_by:    45036.2 i/s - 1.08x  (± 0.00) slower
     Enumerable#sort:    23440.9 i/s - 2.08x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.230k i/100ms
Enumerable#sort_by...first
                         7.903k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    171.624k (± 1.6%) i/s -    861.500k in   5.021089s
Enumerable#sort_by...first
                         82.812k (± 0.5%) i/s -    418.859k in   5.058092s

Comparison:
   Enumerable#min_by:   171624.0 i/s
Enumerable#sort_by...first:    82812.2 i/s - 2.07x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   421.486k i/100ms
            Hash#dup   291.448k i/100ms
Calculating -------------------------------------
              Hash[]      3.776M (± 1.1%) i/s -     18.967M in   5.023366s
            Hash#dup      2.885M (± 1.7%) i/s -     14.572M in   5.053142s

Comparison:
              Hash[]:  3776183.0 i/s
            Hash#dup:  2884638.6 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.394M i/100ms
  Hash#fetch, symbol     1.135M i/100ms
     Hash#[], string     1.225M i/100ms
  Hash#fetch, string   730.461k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.010M (± 0.4%) i/s -     71.079M in   5.073404s
  Hash#fetch, symbol     11.381M (± 0.5%) i/s -     57.876M in   5.085397s
     Hash#[], string     12.081M (± 0.7%) i/s -     61.245M in   5.069729s
  Hash#fetch, string      7.341M (± 1.5%) i/s -     37.254M in   5.075940s

Comparison:
     Hash#[], symbol: 14010276.3 i/s
     Hash#[], string: 12081134.7 i/s - 1.16x  (± 0.00) slower
  Hash#fetch, symbol: 11381089.0 i/s - 1.23x  (± 0.00) slower
  Hash#fetch, string:  7340925.5 i/s - 1.91x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   811.264k i/100ms
             Hash#[]   958.583k i/100ms
          Hash#[] ||   840.583k i/100ms
          Hash#[] &&   354.690k i/100ms
          Hash#fetch   577.608k i/100ms
 Hash#fetch fallback   386.211k i/100ms
Calculating -------------------------------------
            Hash#dig      8.250M (± 1.5%) i/s -     41.374M in   5.016166s
             Hash#[]      9.665M (± 0.8%) i/s -     48.888M in   5.058742s
          Hash#[] ||      8.702M (± 0.8%) i/s -     43.710M in   5.023260s
          Hash#[] &&      3.675M (± 0.3%) i/s -     18.444M in   5.018179s
          Hash#fetch      5.936M (± 0.7%) i/s -     30.036M in   5.060566s
 Hash#fetch fallback      3.805M (± 0.9%) i/s -     19.311M in   5.075739s

Comparison:
             Hash#[]:  9664674.5 i/s
          Hash#[] ||:  8702167.0 i/s - 1.11x  (± 0.00) slower
            Hash#dig:  8250043.3 i/s - 1.17x  (± 0.00) slower
          Hash#fetch:  5935526.3 i/s - 1.63x  (± 0.00) slower
 Hash#fetch fallback:  3804800.0 i/s - 2.54x  (± 0.00) slower
          Hash#[] &&:  3675441.4 i/s - 2.63x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.281M i/100ms
  Hash#fetch + block     1.288M i/100ms
    Hash#fetch + arg   959.903k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     13.047M (± 1.9%) i/s -     65.311M in   5.007620s
  Hash#fetch + block     12.802M (± 1.3%) i/s -     64.395M in   5.030863s
    Hash#fetch + arg      9.553M (± 1.3%) i/s -     47.995M in   5.025116s

Comparison:
  Hash#fetch + const: 13046959.5 i/s
  Hash#fetch + block: 12802221.9 i/s - same-ish: difference falls within error
    Hash#fetch + arg:  9552592.5 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    25.899k i/100ms
         sort + to_h    11.844k i/100ms
Calculating -------------------------------------
      sort_by + to_h    257.819k (± 0.7%) i/s -      1.295M in   5.022959s
         sort + to_h    117.794k (± 0.6%) i/s -    592.200k in   5.027576s

Comparison:
      sort_by + to_h:   257819.1 i/s
         sort + to_h:   117794.4 i/s - 2.19x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   183.060k i/100ms
       Hash#each_key   198.619k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.841M (± 0.2%) i/s -      9.336M in   5.071614s
       Hash#each_key      1.970M (± 0.6%) i/s -      9.931M in   5.042090s

Comparison:
       Hash#each_key:  1969680.0 i/s
      Hash#keys.each:  1840854.0 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?    10.820k i/100ms
           Hash#key?   945.934k i/100ms
Calculating -------------------------------------
  Hash#keys.include?    107.719k (± 5.2%) i/s -    541.000k in   5.043618s
           Hash#key?      9.508M (± 1.5%) i/s -     48.243M in   5.075167s

Comparison:
           Hash#key?:  9507898.9 i/s
  Hash#keys.include?:   107718.9 i/s - 88.27x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.089k i/100ms
            Hash#[]=    10.252k i/100ms
Calculating -------------------------------------
         Hash#merge!     40.911k (± 0.2%) i/s -    208.539k in   5.097450s
            Hash#[]=    101.473k (± 0.9%) i/s -    512.600k in   5.052004s

Comparison:
            Hash#[]=:   101472.8 i/s
         Hash#merge!:    40910.6 i/s - 2.48x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.816k i/100ms
      Hash#merge({})     3.763k i/100ms
 Hash#dup#merge!({})     2.822k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         48.179k (± 0.3%) i/s -    245.616k in   5.098022s
      Hash#merge({})     37.412k (± 0.4%) i/s -    188.150k in   5.029216s
 Hash#dup#merge!({})     28.326k (± 0.9%) i/s -    143.922k in   5.081360s

Comparison:
{}#merge!(Hash) do end:    48179.1 i/s
      Hash#merge({}):    37412.0 i/s - 1.29x  (± 0.00) slower
 Hash#dup#merge!({}):    28325.7 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   370.330k i/100ms
          Hash#merge   339.646k i/100ms
Calculating -------------------------------------
        Hash#**other      3.705M (± 0.3%) i/s -     18.887M in   5.097427s
          Hash#merge      3.384M (± 0.9%) i/s -     16.982M in   5.018404s

Comparison:
        Hash#**other:  3705197.0 i/s
          Hash#merge:  3384290.8 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.658k i/100ms
         Hash#merge!     3.950k i/100ms
Calculating -------------------------------------
          Hash#merge     16.556k (± 1.4%) i/s -     82.900k in   5.008295s
         Hash#merge!     39.458k (± 0.4%) i/s -    197.500k in   5.005443s

Comparison:
         Hash#merge!:    39457.8 i/s
          Hash#merge:    16556.1 i/s - 2.38x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      418.282k i/100ms
Array#each             216.017k i/100ms
Array#each_w/_object   171.864k i/100ms
Hash#select-include     75.261k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.153M (± 0.7%) i/s -     20.914M in   5.035525s
Array#each                2.174M (± 0.9%) i/s -     11.017M in   5.067329s
Array#each_w/_object      1.702M (± 1.4%) i/s -      8.593M in   5.049238s
Hash#select-include     754.020k (± 0.3%) i/s -      3.838M in   5.090518s

Comparison:
Hash#native-slice   :  4153498.0 i/s
Array#each          :  2174291.4 i/s - 1.91x  (± 0.00) slower
Array#each_w/_object:  1702229.5 i/s - 2.44x  (± 0.00) slower
Hash#select-include :   754019.6 i/s - 5.51x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.066k i/100ms
         Hash#value?   842.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     10.722k (± 2.6%) i/s -     54.366k in   5.074356s
         Hash#value?      8.436k (± 0.6%) i/s -     42.942k in   5.090754s

Comparison:
Hash#values.include?:    10721.9 i/s
         Hash#value?:     8435.6 i/s - 1.27x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
                call   657.913k i/100ms
                send   505.356k i/100ms
      method_missing   384.717k i/100ms
Calculating -------------------------------------
                call      6.559M (± 0.6%) i/s -     32.896M in   5.015687s
                send      4.990M (± 0.4%) i/s -     25.268M in   5.063656s
      method_missing      3.838M (± 1.2%) i/s -     19.236M in   5.012197s

Comparison:
                call:  6558770.1 i/s
                send:  4990128.2 i/s - 1.31x  (± 0.00) slower
      method_missing:  3838445.8 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
               Block     9.065k i/100ms
      Symbol#to_proc    10.218k i/100ms
Calculating -------------------------------------
               Block     89.256k (± 4.3%) i/s -    453.250k in   5.089198s
      Symbol#to_proc    101.448k (± 0.5%) i/s -    510.900k in   5.036213s

Comparison:
      Symbol#to_proc:   101448.3 i/s
               Block:    89255.7 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
          block.call   973.816k i/100ms
       block + yield     1.004M i/100ms
        unused block     1.323M i/100ms
               yield     1.146M i/100ms
Calculating -------------------------------------
          block.call      9.759M (± 0.5%) i/s -     49.665M in   5.088991s
       block + yield     10.044M (± 0.5%) i/s -     51.204M in   5.098094s
        unused block     13.238M (± 0.1%) i/s -     67.452M in   5.095446s
               yield     11.427M (± 1.5%) i/s -     57.310M in   5.016468s

Comparison:
        unused block: 13237676.0 i/s
               yield: 11426899.6 i/s - 1.16x  (± 0.00) slower
       block + yield: 10044096.1 i/s - 1.32x  (± 0.00) slower
          block.call:  9759434.8 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   298.136k i/100ms
      range#include?    12.434k i/100ms
       range#member?    12.316k i/100ms
       plain compare   492.434k i/100ms
Calculating -------------------------------------
        range#cover?      3.033M (± 0.7%) i/s -     15.205M in   5.013543s
      range#include?    123.957k (± 0.9%) i/s -    621.700k in   5.015849s
       range#member?    124.629k (± 0.6%) i/s -    628.116k in   5.040068s
       plain compare      4.922M (± 0.4%) i/s -     24.622M in   5.002004s

Comparison:
       plain compare:  4922463.6 i/s
        range#cover?:  3032923.3 i/s - 1.62x  (± 0.00) slower
       range#member?:   124629.0 i/s - 39.50x  (± 0.00) slower
      range#include?:   123956.9 i/s - 39.71x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
       String#match?   893.316k i/100ms
           String#=~   617.028k i/100ms
          Regexp#===   586.343k i/100ms
        String#match   442.950k i/100ms
Calculating -------------------------------------
       String#match?      9.039M (± 0.7%) i/s -     45.559M in   5.040652s
           String#=~      6.154M (± 0.6%) i/s -     30.851M in   5.013251s
          Regexp#===      5.931M (± 0.5%) i/s -     29.903M in   5.042441s
        String#match      4.454M (± 0.4%) i/s -     22.590M in   5.072252s

Comparison:
       String#match?:  9038833.4 i/s
           String#=~:  6154182.4 i/s - 1.47x  (± 0.00) slower
          Regexp#===:  5930537.4 i/s - 1.52x  (± 0.00) slower
        String#match:  4453803.5 i/s - 2.03x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   639.001k i/100ms
      String#casecmp   786.962k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.402M (± 0.4%) i/s -     32.589M in   5.090180s
      String#casecmp      7.849M (± 1.8%) i/s -     39.348M in   5.014555s

Comparison:
      String#casecmp:  7849311.8 i/s
String#downcase + ==:  6402421.6 i/s - 1.23x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
            String#+   559.049k i/100ms
       String#concat   603.636k i/100ms
       String#append   671.192k i/100ms
         "foo" "bar"     1.160M i/100ms
  "#{'foo'}#{'bar'}"     1.158M i/100ms
Calculating -------------------------------------
            String#+      5.602M (± 0.8%) i/s -     28.511M in   5.090099s
       String#concat      6.066M (± 0.7%) i/s -     30.785M in   5.075485s
       String#append      6.772M (± 0.7%) i/s -     34.231M in   5.054890s
         "foo" "bar"     11.618M (± 0.4%) i/s -     59.172M in   5.093295s
  "#{'foo'}#{'bar'}"     11.605M (± 0.6%) i/s -     59.048M in   5.088461s

Comparison:
         "foo" "bar": 11617909.1 i/s
  "#{'foo'}#{'bar'}": 11604769.5 i/s - same-ish: difference falls within error
       String#append:  6772191.6 i/s - 1.72x  (± 0.00) slower
       String#concat:  6065806.9 i/s - 1.92x  (± 0.00) slower
            String#+:  5601734.0 i/s - 2.07x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
           String#+@   934.623k i/100ms
          String#dup   563.577k i/100ms
Calculating -------------------------------------
           String#+@      9.340M (± 0.7%) i/s -     46.731M in   5.003697s
          String#dup      5.598M (± 0.2%) i/s -     28.179M in   5.033661s

Comparison:
           String#+@:  9339865.3 i/s
          String#dup:  5598114.9 i/s - 1.67x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
           String#=~   195.933k i/100ms
       String#match?   412.555k i/100ms
    String#end_with?   586.931k i/100ms
Calculating -------------------------------------
           String#=~      1.929M (± 0.3%) i/s -      9.797M in   5.078963s
       String#match?      4.105M (± 0.3%) i/s -     20.628M in   5.025190s
    String#end_with?      5.899M (± 0.5%) i/s -     29.933M in   5.074247s

Comparison:
    String#end_with?:  5899232.2 i/s
       String#match?:  4104907.2 i/s - 1.44x  (± 0.00) slower
           String#=~:  1928891.1 i/s - 3.06x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   109.563k i/100ms
          String#sub   137.379k i/100ms
String#dup["string"]=
                       176.156k i/100ms
Calculating -------------------------------------
         String#gsub      1.115M (± 0.5%) i/s -      5.588M in   5.013595s
          String#sub      1.350M (± 0.4%) i/s -      6.869M in   5.088183s
String#dup["string"]=
                          1.756M (± 0.1%) i/s -      8.808M in   5.016220s

Comparison:
String#dup["string"]=:  1755867.5 i/s
          String#sub:  1350008.0 i/s - 1.30x  (± 0.00) slower
         String#gsub:  1114544.3 i/s - 1.58x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
         String#gsub    97.471k i/100ms
           String#tr   334.075k i/100ms
Calculating -------------------------------------
         String#gsub    974.348k (± 0.6%) i/s -      4.874M in   5.002041s
           String#tr      3.332M (± 0.4%) i/s -     16.704M in   5.013237s

Comparison:
           String#tr:  3331992.0 i/s
         String#gsub:   974348.1 i/s - 3.42x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.167M i/100ms
         With Freeze     1.651M i/100ms
Calculating -------------------------------------
      Without Freeze     11.674M (± 0.4%) i/s -     59.522M in   5.098617s
         With Freeze     16.648M (± 0.3%) i/s -     84.226M in   5.059339s

Comparison:
         With Freeze: 16647871.6 i/s
      Without Freeze: 11674255.6 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.486k i/100ms
      String#squeeze   156.796k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     34.709k (± 0.7%) i/s -    174.300k in   5.022003s
      String#squeeze      1.561M (± 1.4%) i/s -      7.840M in   5.024688s

Comparison:
      String#squeeze:  1560591.9 i/s
 String#gsub/regex+/:    34708.9 i/s - 44.96x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
           String#=~   278.059k i/100ms
       String#match?   691.199k i/100ms
  String#start_with?   856.479k i/100ms
Calculating -------------------------------------
           String#=~      2.833M (± 0.3%) i/s -     14.181M in   5.005140s
       String#match?      7.109M (± 0.8%) i/s -     35.942M in   5.056039s
  String#start_with?      8.566M (± 0.3%) i/s -     43.680M in   5.099232s

Comparison:
  String#start_with?:  8566152.5 i/s
       String#match?:  7109261.2 i/s - 1.20x  (± 0.00) slower
           String#=~:  2833310.2 i/s - 3.02x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   199.052k i/100ms
    String#[0, n] ==    83.569k i/100ms
   String#[RANGE] ==    74.876k i/100ms
   String#[0...n] ==    46.388k i/100ms
Calculating -------------------------------------
  String#start_with?      2.101M (± 0.5%) i/s -     10.550M in   5.020253s
    String#[0, n] ==    838.938k (± 0.5%) i/s -      4.262M in   5.080371s
   String#[RANGE] ==    758.971k (± 0.6%) i/s -      3.819M in   5.031575s
   String#[0...n] ==    459.099k (± 1.2%) i/s -      2.319M in   5.052789s

Comparison:
  String#start_with?:  2101490.7 i/s
    String#[0, n] ==:   838938.0 i/s - 2.50x  (± 0.00) slower
   String#[RANGE] ==:   758970.5 i/s - 2.77x  (± 0.00) slower
   String#[0...n] ==:   459098.6 i/s - 4.58x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   172.960k i/100ms
 String#sub!'string'   122.186k i/100ms
String#gsub!'string'    77.029k i/100ms
  String#[/regexp/]=   161.352k i/100ms
 String#sub!/regexp/   115.654k i/100ms
String#gsub!/regexp/    61.717k i/100ms
Calculating -------------------------------------
  String#['string']=      1.739M (± 1.2%) i/s -      8.821M in   5.072771s
 String#sub!'string'      1.223M (± 1.4%) i/s -      6.231M in   5.098341s
String#gsub!'string'    771.848k (± 0.7%) i/s -      3.928M in   5.089982s
  String#[/regexp/]=      1.577M (± 1.1%) i/s -      7.906M in   5.014632s
 String#sub!/regexp/      1.178M (± 0.5%) i/s -      5.898M in   5.008804s
String#gsub!/regexp/    602.699k (± 0.5%) i/s -      3.024M in   5.017801s

Comparison:
  String#['string']=:  1739142.5 i/s
  String#[/regexp/]=:  1576834.7 i/s - 1.10x  (± 0.00) slower
 String#sub!'string':  1222514.7 i/s - 1.42x  (± 0.00) slower
 String#sub!/regexp/:  1177629.2 i/s - 1.48x  (± 0.00) slower
String#gsub!'string':   771847.9 i/s - 2.25x  (± 0.00) slower
String#gsub!/regexp/:   602698.7 i/s - 2.89x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
          String#sub   138.765k i/100ms
        String#chomp   524.863k i/100ms
String#delete_suffix   549.207k i/100ms
Calculating -------------------------------------
          String#sub      1.392M (± 1.4%) i/s -      7.077M in   5.083966s
        String#chomp      5.248M (± 1.5%) i/s -     26.243M in   5.001364s
String#delete_suffix      5.584M (± 1.2%) i/s -     28.010M in   5.016665s

Comparison:
String#delete_suffix:  5584077.4 i/s
        String#chomp:  5248388.4 i/s - 1.06x  (± 0.00) slower
          String#sub:  1392298.5 i/s - 4.01x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   595.149k i/100ms
          String#sub   149.853k i/100ms
Calculating -------------------------------------
String#delete_prefix      5.983M (± 0.4%) i/s -     30.353M in   5.073515s
          String#sub      1.500M (± 0.5%) i/s -      7.643M in   5.095476s

Comparison:
String#delete_prefix:  5982645.2 i/s
          String#sub:  1499893.2 i/s - 3.99x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   618.087k i/100ms
    String#unpack[0]   465.980k i/100ms
Calculating -------------------------------------
      String#unpack1      6.170M (± 0.4%) i/s -     30.904M in   5.008540s
    String#unpack[0]      4.629M (± 0.5%) i/s -     23.299M in   5.033275s

Comparison:
      String#unpack1:  6170421.4 i/s
    String#unpack[0]:  4629092.0 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.394k i/100ms
          Time.parse     9.201k i/100ms
Calculating -------------------------------------
        Time.iso8601    275.514k (± 0.5%) i/s -      1.397M in   5.070990s
          Time.parse     91.579k (± 0.5%) i/s -    460.050k in   5.023641s

Comparison:
        Time.iso8601:   275513.6 i/s
          Time.parse:    91579.4 i/s - 3.01x  (± 0.00) slower

