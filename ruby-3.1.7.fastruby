$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       768.699k i/100ms
Function with splat arguments
                        25.911k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.729M (± 0.8%) i/s -     39.204M in   5.072624s
Function with splat arguments
                        260.078k (± 5.5%) i/s -      1.296M in   5.003025s

Comparison:
Function with single Array argument:  7728931.0 i/s
Function with splat arguments:   260078.0 i/s - 29.72x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   992.578k i/100ms
Sequential Assignment
                         1.037M i/100ms
Calculating -------------------------------------
 Parallel Assignment      9.947M (± 0.2%) i/s -     50.621M in   5.089029s
Sequential Assignment
                         10.411M (± 0.6%) i/s -     52.892M in   5.080701s

Comparison:
Sequential Assignment: 10410755.3 i/s
 Parallel Assignment:  9947215.7 i/s - 1.05x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   462.662k i/100ms
       attr_accessor   523.801k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.634M (± 0.5%) i/s -     23.596M in   5.092165s
       attr_accessor      5.246M (± 0.5%) i/s -     26.714M in   5.091879s

Comparison:
       attr_accessor:  5246487.9 i/s
   getter_and_setter:  4633863.8 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    88.603k i/100ms
         respond_to?   755.474k i/100ms
Calculating -------------------------------------
      begin...rescue    886.079k (± 2.0%) i/s -      4.430M in   5.001975s
         respond_to?      7.718M (± 1.2%) i/s -     39.285M in   5.090518s

Comparison:
         respond_to?:  7718261.1 i/s
      begin...rescue:   886078.5 i/s - 8.71x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
              normal   309.715k i/100ms
             &method   119.955k i/100ms
Calculating -------------------------------------
              normal      3.094M (± 1.2%) i/s -     15.486M in   5.005036s
             &method      1.208M (± 0.4%) i/s -      6.118M in   5.062459s

Comparison:
              normal:  3094484.9 i/s
             &method:  1208466.1 i/s - 2.56x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       265.000  i/100ms
       define_method   296.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.398k (±21.4%) i/s -     10.600k in   5.065759s
       define_method      3.321k (±19.4%) i/s -     15.096k in   5.041846s

Comparison:
       define_method:     3321.4 i/s
module_eval with string:     2397.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
         Float#round   256.023k i/100ms
       Kernel#format   201.122k i/100ms
            String#%   173.156k i/100ms
Calculating -------------------------------------
         Float#round      2.584M (± 0.4%) i/s -     13.057M in   5.053477s
       Kernel#format      2.014M (± 0.3%) i/s -     10.257M in   5.092067s
            String#%      1.737M (± 0.4%) i/s -      8.831M in   5.083377s

Comparison:
         Float#round:  2583848.4 i/s
       Kernel#format:  2014376.7 i/s - 1.28x  (± 0.00) slower
            String#%:  1737253.3 i/s - 1.49x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
                Hash   875.619k i/100ms
          OpenStruct   499.561k i/100ms
Calculating -------------------------------------
                Hash      8.526M (± 0.8%) i/s -     42.905M in   5.032758s
          OpenStruct      4.980M (± 0.4%) i/s -     24.978M in   5.015356s

Comparison:
                Hash:  8525775.3 i/s
          OpenStruct:  4980378.6 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.080M i/100ms
          OpenStruct     9.853k i/100ms
Calculating -------------------------------------
                Hash     10.819M (± 0.4%) i/s -     55.082M in   5.091491s
          OpenStruct     97.178k (± 1.8%) i/s -    492.650k in   5.071158s

Comparison:
                Hash: 10818581.6 i/s
          OpenStruct:    97178.3 i/s - 111.33x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   533.800k i/100ms
  ancestors.include?   111.061k i/100ms
Calculating -------------------------------------
  less than or equal      5.378M (± 1.2%) i/s -     27.224M in   5.062553s
  ancestors.include?      1.151M (± 0.4%) i/s -      5.775M in   5.017175s

Comparison:
  less than or equal:  5378264.7 i/s
  ancestors.include?:  1151094.8 i/s - 4.67x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.683  (± 0.0%) i/s -      4.000  in   5.863157s
         Kernel loop      0.212  (± 0.0%) i/s -      2.000  in   9.432952s

Comparison:
          While Loop:        0.7 i/s
         Kernel loop:        0.2 i/s - 3.22x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.578M i/100ms
         Array#first     1.354M i/100ms
Calculating -------------------------------------
           Array#[0]     15.757M (± 0.4%) i/s -     78.906M in   5.007664s
         Array#first     13.495M (± 0.4%) i/s -     67.696M in   5.016432s

Comparison:
           Array#[0]: 15757262.3 i/s
         Array#first: 13495092.3 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.538M i/100ms
          Array#last     1.326M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.362M (± 0.4%) i/s -     76.901M in   5.006134s
          Array#last     13.244M (± 0.6%) i/s -     66.299M in   5.006097s

Comparison:
          Array#[-1]: 15361564.7 i/s
          Array#last: 13244065.2 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    98.426k i/100ms
Calculating -------------------------------------
                find      0.256  (± 0.0%) i/s -      2.000  in   7.822191s
             bsearch    979.256k (± 1.4%) i/s -      4.921M in   5.026588s

Comparison:
             bsearch:   979256.1 i/s
                find:        0.3 i/s - 3829962.41x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    19.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    189.606  (± 2.1%) i/s -    950.000  in   5.013025s
        Array#insert      1.446  (± 0.0%) i/s -      8.000  in   5.534229s

Comparison:
       Array#unshift:      189.6 i/s
        Array#insert:        1.4 i/s - 131.16x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.172M i/100ms
          Array#size     2.185M i/100ms
         Array#count     1.479M i/100ms
Calculating -------------------------------------
        Array#length     21.748M (± 0.3%) i/s -    110.793M in   5.094328s
          Array#size     21.815M (± 0.3%) i/s -    109.271M in   5.008981s
         Array#count     14.168M (± 0.7%) i/s -     71.013M in   5.012474s

Comparison:
          Array#size: 21815138.7 i/s
        Array#length: 21748482.4 i/s - same-ish: difference falls within error
         Array#count: 14167953.0 i/s - 1.54x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.564k i/100ms
        Array#sample     1.060M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    461.192k (± 0.5%) i/s -      2.324M in   5.038757s
        Array#sample     10.536M (± 0.5%) i/s -     53.017M in   5.031888s

Comparison:
        Array#sample: 10536440.5 i/s
 Array#shuffle.first:   461191.8 i/s - 22.85x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    63.032k i/100ms
          Date.parse    30.992k i/100ms
Calculating -------------------------------------
        Date.iso8601    631.098k (± 0.3%) i/s -      3.215M in   5.093747s
          Date.parse    310.977k (± 0.5%) i/s -      1.581M in   5.082785s

Comparison:
        Date.iso8601:   631098.0 i/s
          Date.parse:   310976.9 i/s - 2.03x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    16.781k i/100ms
           Array#map    26.901k i/100ms
Calculating -------------------------------------
   Array#each + push    163.394k (± 0.7%) i/s -    822.269k in   5.032669s
           Array#map    268.857k (± 0.6%) i/s -      1.345M in   5.003059s

Comparison:
           Array#map:   268856.7 i/s
   Array#each + push:   163393.9 i/s - 1.65x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
            For loop    29.815k i/100ms
               #each    32.987k i/100ms
Calculating -------------------------------------
            For loop    297.024k (± 0.5%) i/s -      1.491M in   5.019089s
               #each    329.642k (± 0.5%) i/s -      1.649M in   5.003605s

Comparison:
               #each:   329642.2 i/s
            For loop:   297023.7 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.657k i/100ms
     each_with_index    19.065k i/100ms
Calculating -------------------------------------
          While Loop    273.586k (± 0.3%) i/s -      1.383M in   5.054589s
     each_with_index    189.116k (± 0.4%) i/s -    953.250k in   5.040637s

Comparison:
          While Loop:   273586.1 i/s
     each_with_index:   189115.9 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    71.379k i/100ms
      inject to_proc     2.074k i/100ms
        inject block     1.981k i/100ms
Calculating -------------------------------------
       inject symbol    714.958k (± 0.6%) i/s -      3.640M in   5.091832s
      inject to_proc     20.880k (± 0.5%) i/s -    105.774k in   5.065864s
        inject block     19.739k (± 0.4%) i/s -     99.050k in   5.018194s

Comparison:
       inject symbol:   714957.9 i/s
      inject to_proc:    20880.2 i/s - 34.24x  (± 0.00) slower
        inject block:    19738.5 i/s - 36.22x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     7.405k i/100ms
   Array#map.flatten     4.209k i/100ms
      Array#flat_map    10.106k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     74.052k (± 2.7%) i/s -    370.250k in   5.004194s
   Array#map.flatten     41.759k (± 0.8%) i/s -    210.450k in   5.039916s
      Array#flat_map    100.958k (± 0.6%) i/s -    505.300k in   5.005196s

Comparison:
      Array#flat_map:   100958.4 i/s
Array#map.flatten(1):    74051.7 i/s - 1.36x  (± 0.00) slower
   Array#map.flatten:    41759.3 i/s - 2.42x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    31.121k i/100ms
  Array#reverse_each    31.807k i/100ms
Calculating -------------------------------------
  Array#reverse.each    310.803k (± 0.3%) i/s -      1.556M in   5.006589s
  Array#reverse_each    317.696k (± 0.3%) i/s -      1.590M in   5.005946s

Comparison:
  Array#reverse_each:   317695.6 i/s
  Array#reverse.each:   310803.0 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        19.463k i/100ms
   Enumerable#detect    80.163k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        192.660k (± 1.5%) i/s -      3.854M in  20.007081s
   Enumerable#detect    800.177k (± 0.6%) i/s -     16.033M in  20.037181s

Comparison:
   Enumerable#detect:   800177.0 i/s
Enumerable#select.first:   192659.8 i/s - 4.15x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       235.921k i/100ms
Enumerable#select.last
                        17.270k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.355M (± 0.7%) i/s -     11.796M in   5.009776s
Enumerable#select.last
                        171.348k (± 0.9%) i/s -    863.500k in   5.039845s

Comparison:
Enumerable#reverse.detect:  2354709.0 i/s
Enumerable#select.last:   171348.1 i/s - 13.74x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.836k i/100ms
  Enumerable#sort_by     4.475k i/100ms
     Enumerable#sort     2.345k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         48.138k (± 1.6%) i/s -    241.800k in   5.024391s
  Enumerable#sort_by     45.857k (± 1.2%) i/s -    232.700k in   5.075232s
     Enumerable#sort     23.327k (± 0.6%) i/s -    117.250k in   5.026503s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    48137.8 i/s
  Enumerable#sort_by:    45857.2 i/s - 1.05x  (± 0.00) slower
     Enumerable#sort:    23327.2 i/s - 2.06x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.237k i/100ms
Enumerable#sort_by...first
                         8.465k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    172.642k (± 0.4%) i/s -    879.087k in   5.092070s
Enumerable#sort_by...first
                         84.494k (± 0.6%) i/s -    423.250k in   5.009421s

Comparison:
   Enumerable#min_by:   172641.7 i/s
Enumerable#sort_by...first:    84494.1 i/s - 2.04x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   415.601k i/100ms
            Hash#dup   314.992k i/100ms
Calculating -------------------------------------
              Hash[]      4.104M (± 1.6%) i/s -     20.780M in   5.064020s
            Hash#dup      3.016M (± 0.5%) i/s -     15.120M in   5.013363s

Comparison:
              Hash[]:  4104469.5 i/s
            Hash#dup:  3015946.9 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.354M i/100ms
  Hash#fetch, symbol     1.137M i/100ms
     Hash#[], string     1.228M i/100ms
  Hash#fetch, string   742.485k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     13.536M (± 0.3%) i/s -     67.695M in   5.001110s
  Hash#fetch, symbol     11.365M (± 0.3%) i/s -     56.870M in   5.004104s
     Hash#[], string     12.367M (± 0.4%) i/s -     62.639M in   5.065091s
  Hash#fetch, string      7.335M (± 0.6%) i/s -     37.124M in   5.061429s

Comparison:
     Hash#[], symbol: 13536217.3 i/s
     Hash#[], string: 12366921.2 i/s - 1.09x  (± 0.00) slower
  Hash#fetch, symbol: 11364804.5 i/s - 1.19x  (± 0.00) slower
  Hash#fetch, string:  7334965.4 i/s - 1.85x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   821.981k i/100ms
             Hash#[]   977.337k i/100ms
          Hash#[] ||   867.096k i/100ms
          Hash#[] &&   367.085k i/100ms
          Hash#fetch   598.423k i/100ms
 Hash#fetch fallback   382.719k i/100ms
Calculating -------------------------------------
            Hash#dig      8.300M (± 0.9%) i/s -     41.921M in   5.050887s
             Hash#[]      9.769M (± 0.1%) i/s -     48.867M in   5.002164s
          Hash#[] ||      8.855M (± 0.6%) i/s -     45.089M in   5.092186s
          Hash#[] &&      3.762M (± 0.1%) i/s -     19.088M in   5.073551s
          Hash#fetch      5.955M (± 0.9%) i/s -     29.921M in   5.025292s
 Hash#fetch fallback      3.801M (± 1.0%) i/s -     19.136M in   5.035416s

Comparison:
             Hash#[]:  9769156.8 i/s
          Hash#[] ||:  8854841.8 i/s - 1.10x  (± 0.00) slower
            Hash#dig:  8300354.9 i/s - 1.18x  (± 0.00) slower
          Hash#fetch:  5954542.6 i/s - 1.64x  (± 0.00) slower
 Hash#fetch fallback:  3800615.3 i/s - 2.57x  (± 0.00) slower
          Hash#[] &&:  3762345.3 i/s - 2.60x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.343M i/100ms
  Hash#fetch + block     1.305M i/100ms
    Hash#fetch + arg   917.917k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     12.683M (± 0.6%) i/s -     64.440M in   5.080902s
  Hash#fetch + block     12.813M (± 0.5%) i/s -     65.246M in   5.092181s
    Hash#fetch + arg      9.330M (± 1.0%) i/s -     46.814M in   5.018140s

Comparison:
  Hash#fetch + block: 12813326.4 i/s
  Hash#fetch + const: 12683238.2 i/s - same-ish: difference falls within error
    Hash#fetch + arg:  9329851.1 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    26.002k i/100ms
         sort + to_h    11.783k i/100ms
Calculating -------------------------------------
      sort_by + to_h    261.035k (± 0.5%) i/s -      1.326M in   5.080317s
         sort + to_h    116.234k (± 1.0%) i/s -    589.150k in   5.069145s

Comparison:
      sort_by + to_h:   261034.6 i/s
         sort + to_h:   116234.3 i/s - 2.25x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   186.363k i/100ms
       Hash#each_key   193.126k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.869M (± 0.2%) i/s -      9.505M in   5.085494s
       Hash#each_key      1.940M (± 0.8%) i/s -      9.849M in   5.077726s

Comparison:
       Hash#each_key:  1939843.1 i/s
      Hash#keys.each:  1868955.9 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.232k i/100ms
           Hash#key?     1.009M i/100ms
Calculating -------------------------------------
  Hash#keys.include?     11.953k (± 3.1%) i/s -     60.368k in   5.056115s
           Hash#key?     10.332M (± 1.0%) i/s -     52.471M in   5.078932s

Comparison:
           Hash#key?: 10332117.4 i/s
  Hash#keys.include?:    11952.7 i/s - 864.41x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.088k i/100ms
            Hash#[]=    10.503k i/100ms
Calculating -------------------------------------
         Hash#merge!     40.841k (± 0.6%) i/s -    204.400k in   5.004915s
            Hash#[]=    104.884k (± 0.8%) i/s -    525.150k in   5.007310s

Comparison:
            Hash#[]=:   104883.7 i/s
         Hash#merge!:    40841.2 i/s - 2.57x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.777k i/100ms
      Hash#merge({})     3.802k i/100ms
 Hash#dup#merge!({})     2.883k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         48.012k (± 0.6%) i/s -    243.627k in   5.074521s
      Hash#merge({})     37.763k (± 0.4%) i/s -    190.100k in   5.034114s
 Hash#dup#merge!({})     27.856k (± 0.5%) i/s -    141.267k in   5.071500s

Comparison:
{}#merge!(Hash) do end:    48011.7 i/s
      Hash#merge({}):    37763.1 i/s - 1.27x  (± 0.00) slower
 Hash#dup#merge!({}):    27855.8 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   371.894k i/100ms
          Hash#merge   341.416k i/100ms
Calculating -------------------------------------
        Hash#**other      3.725M (± 0.3%) i/s -     18.967M in   5.091481s
          Hash#merge      3.358M (± 0.6%) i/s -     17.071M in   5.083213s

Comparison:
        Hash#**other:  3725186.4 i/s
          Hash#merge:  3358374.2 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.661k i/100ms
         Hash#merge!     3.926k i/100ms
Calculating -------------------------------------
          Hash#merge     16.376k (± 1.1%) i/s -     83.050k in   5.072081s
         Hash#merge!     39.322k (± 0.5%) i/s -    200.226k in   5.092086s

Comparison:
         Hash#merge!:    39321.9 i/s
          Hash#merge:    16376.0 i/s - 2.40x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      419.115k i/100ms
Array#each             208.564k i/100ms
Array#each_w/_object   170.036k i/100ms
Hash#select-include     74.948k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.252M (± 0.5%) i/s -     21.375M in   5.027367s
Array#each                2.132M (± 1.8%) i/s -     10.845M in   5.089115s
Array#each_w/_object      1.672M (± 0.4%) i/s -      8.502M in   5.085341s
Hash#select-include     752.144k (± 0.4%) i/s -      3.822M in   5.082019s

Comparison:
Hash#native-slice   :  4251804.2 i/s
Array#each          :  2131741.2 i/s - 1.99x  (± 0.00) slower
Array#each_w/_object:  1671848.2 i/s - 2.54x  (± 0.00) slower
Hash#select-include :   752144.1 i/s - 5.65x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     4.372k i/100ms
         Hash#value?     4.667k i/100ms
Calculating -------------------------------------
Hash#values.include?     43.148k (± 5.5%) i/s -    218.600k in   5.089750s
         Hash#value?     47.064k (± 2.8%) i/s -    238.017k in   5.060994s

Comparison:
         Hash#value?:    47064.2 i/s
Hash#values.include?:    43148.1 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
                call   654.342k i/100ms
                send   490.361k i/100ms
      method_missing   386.401k i/100ms
Calculating -------------------------------------
                call      6.556M (± 0.2%) i/s -     33.371M in   5.090039s
                send      4.889M (± 0.4%) i/s -     24.518M in   5.015110s
      method_missing      3.840M (± 0.5%) i/s -     19.320M in   5.031102s

Comparison:
                call:  6556261.3 i/s
                send:  4888899.7 i/s - 1.34x  (± 0.00) slower
      method_missing:  3840210.7 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
               Block     8.773k i/100ms
      Symbol#to_proc    10.081k i/100ms
Calculating -------------------------------------
               Block     87.881k (± 0.2%) i/s -    447.423k in   5.091255s
      Symbol#to_proc    100.490k (± 0.4%) i/s -    504.050k in   5.015989s

Comparison:
      Symbol#to_proc:   100490.3 i/s
               Block:    87881.0 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
          block.call   962.788k i/100ms
       block + yield   957.805k i/100ms
        unused block     1.321M i/100ms
               yield     1.064M i/100ms
Calculating -------------------------------------
          block.call      9.660M (± 0.4%) i/s -     49.102M in   5.083048s
       block + yield      9.590M (± 0.3%) i/s -     48.848M in   5.093539s
        unused block     13.195M (± 0.4%) i/s -     66.040M in   5.005126s
               yield     10.635M (± 0.2%) i/s -     53.185M in   5.001112s

Comparison:
        unused block: 13194775.2 i/s
               yield: 10634739.5 i/s - 1.24x  (± 0.00) slower
          block.call:  9660181.3 i/s - 1.37x  (± 0.00) slower
       block + yield:  9590264.1 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   302.066k i/100ms
      range#include?    12.409k i/100ms
       range#member?    12.471k i/100ms
       plain compare   500.722k i/100ms
Calculating -------------------------------------
        range#cover?      3.024M (± 0.6%) i/s -     15.405M in   5.095207s
      range#include?    125.479k (± 0.6%) i/s -    632.859k in   5.043721s
       range#member?    125.248k (± 0.5%) i/s -    636.021k in   5.078215s
       plain compare      5.039M (± 0.8%) i/s -     25.537M in   5.067963s

Comparison:
       plain compare:  5039174.1 i/s
        range#cover?:  3023624.5 i/s - 1.67x  (± 0.00) slower
      range#include?:   125479.1 i/s - 40.16x  (± 0.00) slower
       range#member?:   125247.6 i/s - 40.23x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
       String#match?   864.078k i/100ms
           String#=~   622.172k i/100ms
          Regexp#===   588.887k i/100ms
        String#match   445.939k i/100ms
Calculating -------------------------------------
       String#match?      9.118M (± 2.9%) i/s -     45.796M in   5.026486s
           String#=~      6.131M (± 0.8%) i/s -     31.109M in   5.074560s
          Regexp#===      5.872M (± 0.5%) i/s -     29.444M in   5.014861s
        String#match      4.461M (± 0.7%) i/s -     22.743M in   5.098412s

Comparison:
       String#match?:  9118437.3 i/s
           String#=~:  6130701.6 i/s - 1.49x  (± 0.00) slower
          Regexp#===:  5871562.4 i/s - 1.55x  (± 0.00) slower
        String#match:  4460972.8 i/s - 2.04x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   635.269k i/100ms
      String#casecmp   793.444k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.339M (± 0.5%) i/s -     31.763M in   5.010839s
      String#casecmp      7.868M (± 1.8%) i/s -     39.672M in   5.043484s

Comparison:
      String#casecmp:  7868469.2 i/s
String#downcase + ==:  6339138.2 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
            String#+   566.910k i/100ms
       String#concat   610.267k i/100ms
       String#append   675.125k i/100ms
         "foo" "bar"     1.171M i/100ms
  "#{'foo'}#{'bar'}"     1.178M i/100ms
Calculating -------------------------------------
            String#+      5.608M (± 0.7%) i/s -     28.346M in   5.055145s
       String#concat      6.104M (± 0.7%) i/s -     31.124M in   5.098923s
       String#append      6.768M (± 0.6%) i/s -     34.431M in   5.087867s
         "foo" "bar"     11.565M (± 0.5%) i/s -     58.556M in   5.063514s
  "#{'foo'}#{'bar'}"     11.761M (± 0.6%) i/s -     58.895M in   5.008023s

Comparison:
  "#{'foo'}#{'bar'}": 11760613.5 i/s
         "foo" "bar": 11564669.1 i/s - 1.02x  (± 0.00) slower
       String#append:  6767604.4 i/s - 1.74x  (± 0.00) slower
       String#concat:  6104268.0 i/s - 1.93x  (± 0.00) slower
            String#+:  5607553.7 i/s - 2.10x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
           String#+@   929.315k i/100ms
          String#dup   561.828k i/100ms
Calculating -------------------------------------
           String#+@      9.386M (± 0.2%) i/s -     47.395M in   5.049521s
          String#dup      5.644M (± 0.5%) i/s -     28.653M in   5.076814s

Comparison:
           String#+@:  9386105.7 i/s
          String#dup:  5644087.7 i/s - 1.66x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
           String#=~   196.217k i/100ms
       String#match?   412.094k i/100ms
    String#end_with?   594.734k i/100ms
Calculating -------------------------------------
           String#=~      1.940M (± 0.5%) i/s -      9.811M in   5.056088s
       String#match?      4.141M (± 0.6%) i/s -     21.017M in   5.075650s
    String#end_with?      5.943M (± 0.5%) i/s -     29.737M in   5.003759s

Comparison:
    String#end_with?:  5943020.0 i/s
       String#match?:  4140848.3 i/s - 1.44x  (± 0.00) slower
           String#=~:  1940444.0 i/s - 3.06x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   110.089k i/100ms
          String#sub   135.079k i/100ms
String#dup["string"]=
                       176.684k i/100ms
Calculating -------------------------------------
         String#gsub      1.110M (± 0.5%) i/s -      5.615M in   5.056891s
          String#sub      1.320M (± 0.4%) i/s -      6.619M in   5.012812s
String#dup["string"]=
                          1.729M (± 0.2%) i/s -      8.658M in   5.006272s

Comparison:
String#dup["string"]=:  1729344.7 i/s
          String#sub:  1320414.7 i/s - 1.31x  (± 0.00) slower
         String#gsub:  1110303.7 i/s - 1.56x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   101.519k i/100ms
           String#tr   328.863k i/100ms
Calculating -------------------------------------
         String#gsub      1.008M (± 0.4%) i/s -      5.076M in   5.035299s
           String#tr      3.303M (± 0.1%) i/s -     16.772M in   5.077770s

Comparison:
           String#tr:  3303031.0 i/s
         String#gsub:  1008093.5 i/s - 3.28x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.145M i/100ms
         With Freeze     1.661M i/100ms
Calculating -------------------------------------
      Without Freeze     11.395M (± 0.5%) i/s -     57.256M in   5.024596s
         With Freeze     16.606M (± 0.3%) i/s -     83.055M in   5.001470s

Comparison:
         With Freeze: 16606372.4 i/s
      Without Freeze: 11395288.3 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.489k i/100ms
      String#squeeze   157.570k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     34.663k (± 0.6%) i/s -    174.450k in   5.032975s
      String#squeeze      1.574M (± 0.9%) i/s -      7.878M in   5.006577s

Comparison:
      String#squeeze:  1573749.4 i/s
 String#gsub/regex+/:    34662.5 i/s - 45.40x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
           String#=~   278.334k i/100ms
       String#match?   708.291k i/100ms
  String#start_with?   830.019k i/100ms
Calculating -------------------------------------
           String#=~      2.822M (± 0.4%) i/s -     14.195M in   5.030818s
       String#match?      7.105M (± 0.9%) i/s -     36.123M in   5.084635s
  String#start_with?      8.304M (± 0.6%) i/s -     42.331M in   5.098027s

Comparison:
  String#start_with?:  8303682.2 i/s
       String#match?:  7104852.0 i/s - 1.17x  (± 0.00) slower
           String#=~:  2821669.0 i/s - 2.94x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   209.832k i/100ms
    String#[0, n] ==    84.748k i/100ms
   String#[RANGE] ==    77.428k i/100ms
   String#[0...n] ==    46.214k i/100ms
Calculating -------------------------------------
  String#start_with?      2.040M (± 0.5%) i/s -     10.282M in   5.040398s
    String#[0, n] ==    860.837k (± 1.2%) i/s -      4.322M in   5.021573s
   String#[RANGE] ==    758.409k (± 0.5%) i/s -      3.794M in   5.002676s
   String#[0...n] ==    466.481k (± 1.2%) i/s -      2.357M in   5.053280s

Comparison:
  String#start_with?:  2039914.8 i/s
    String#[0, n] ==:   860837.0 i/s - 2.37x  (± 0.00) slower
   String#[RANGE] ==:   758408.5 i/s - 2.69x  (± 0.00) slower
   String#[0...n] ==:   466481.3 i/s - 4.37x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   171.097k i/100ms
 String#sub!'string'   124.863k i/100ms
String#gsub!'string'    77.010k i/100ms
  String#[/regexp/]=   160.066k i/100ms
 String#sub!/regexp/   117.431k i/100ms
String#gsub!/regexp/    61.921k i/100ms
Calculating -------------------------------------
  String#['string']=      1.771M (± 0.3%) i/s -      8.897M in   5.024427s
 String#sub!'string'      1.250M (± 0.3%) i/s -      6.368M in   5.095699s
String#gsub!'string'    771.155k (± 0.4%) i/s -      3.928M in   5.093114s
  String#[/regexp/]=      1.617M (± 0.3%) i/s -      8.163M in   5.049007s
 String#sub!/regexp/      1.183M (± 0.9%) i/s -      5.989M in   5.061926s
String#gsub!/regexp/    619.157k (± 0.5%) i/s -      3.158M in   5.100551s

Comparison:
  String#['string']=:  1770775.1 i/s
  String#[/regexp/]=:  1616838.3 i/s - 1.10x  (± 0.00) slower
 String#sub!'string':  1249693.8 i/s - 1.42x  (± 0.00) slower
 String#sub!/regexp/:  1183237.3 i/s - 1.50x  (± 0.00) slower
String#gsub!'string':   771155.1 i/s - 2.30x  (± 0.00) slower
String#gsub!/regexp/:   619157.4 i/s - 2.86x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
          String#sub   142.364k i/100ms
        String#chomp   532.436k i/100ms
String#delete_suffix   576.336k i/100ms
Calculating -------------------------------------
          String#sub      1.444M (± 0.6%) i/s -      7.261M in   5.029400s
        String#chomp      5.529M (± 0.2%) i/s -     27.687M in   5.007216s
String#delete_suffix      5.946M (± 0.4%) i/s -     29.969M in   5.040756s

Comparison:
String#delete_suffix:  5945549.2 i/s
        String#chomp:  5529370.4 i/s - 1.08x  (± 0.00) slower
          String#sub:  1443684.4 i/s - 4.12x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   593.551k i/100ms
          String#sub   147.536k i/100ms
Calculating -------------------------------------
String#delete_prefix      5.957M (± 1.2%) i/s -     30.271M in   5.082557s
          String#sub      1.487M (± 0.5%) i/s -      7.524M in   5.060189s

Comparison:
String#delete_prefix:  5956801.9 i/s
          String#sub:  1487006.7 i/s - 4.01x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   611.609k i/100ms
    String#unpack[0]   466.798k i/100ms
Calculating -------------------------------------
      String#unpack1      6.138M (± 0.3%) i/s -     31.192M in   5.082065s
    String#unpack[0]      4.600M (± 0.6%) i/s -     23.340M in   5.074537s

Comparison:
      String#unpack1:  6137729.2 i/s
    String#unpack[0]:  4599564.8 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.920k i/100ms
          Time.parse     9.152k i/100ms
Calculating -------------------------------------
        Time.iso8601    277.510k (± 0.2%) i/s -      1.396M in   5.030461s
          Time.parse     91.670k (± 0.5%) i/s -    466.752k in   5.091752s

Comparison:
        Time.iso8601:   277510.4 i/s
          Time.parse:    91670.4 i/s - 3.03x  (± 0.00) slower

