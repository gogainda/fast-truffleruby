$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       773.202k i/100ms
Function with splat arguments
                        24.867k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.595M (± 2.2%) i/s -     38.660M in   5.092568s
Function with splat arguments
                        258.866k (± 6.8%) i/s -      1.293M in   5.025803s

Comparison:
Function with single Array argument:  7595424.1 i/s
Function with splat arguments:   258866.0 i/s - 29.34x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.007M i/100ms
Sequential Assignment
                         1.040M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.081M (± 0.4%) i/s -     51.382M in   5.096782s
Sequential Assignment
                         10.558M (± 0.3%) i/s -     53.019M in   5.021758s

Comparison:
Sequential Assignment: 10558048.3 i/s
 Parallel Assignment: 10081381.8 i/s - 1.05x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   443.211k i/100ms
       attr_accessor   519.731k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.457M (± 0.7%) i/s -     22.604M in   5.072110s
       attr_accessor      5.234M (± 0.7%) i/s -     26.506M in   5.064740s

Comparison:
       attr_accessor:  5233774.6 i/s
   getter_and_setter:  4456720.6 i/s - 1.17x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    87.911k i/100ms
         respond_to?   766.215k i/100ms
Calculating -------------------------------------
      begin...rescue    880.790k (± 0.9%) i/s -      4.483M in   5.090695s
         respond_to?      7.688M (± 0.5%) i/s -     39.077M in   5.083094s

Comparison:
         respond_to?:  7687821.1 i/s
      begin...rescue:   880789.9 i/s - 8.73x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
              normal   308.417k i/100ms
             &method   119.595k i/100ms
Calculating -------------------------------------
              normal      3.081M (± 0.9%) i/s -     15.421M in   5.004945s
             &method      1.202M (± 0.6%) i/s -      6.099M in   5.073130s

Comparison:
              normal:  3081398.5 i/s
             &method:  1202334.8 i/s - 2.56x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       262.000  i/100ms
       define_method   295.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.383k (±21.7%) i/s -     10.480k in   5.050095s
       define_method      3.306k (±19.7%) i/s -     15.045k in   5.049395s

Comparison:
       define_method:     3305.8 i/s
module_eval with string:     2382.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
         Float#round   254.667k i/100ms
       Kernel#format   202.145k i/100ms
            String#%   173.585k i/100ms
Calculating -------------------------------------
         Float#round      2.545M (± 0.3%) i/s -     12.733M in   5.003505s
       Kernel#format      2.030M (± 0.4%) i/s -     10.309M in   5.077761s
            String#%      1.750M (± 0.6%) i/s -      8.853M in   5.059854s

Comparison:
         Float#round:  2544913.0 i/s
       Kernel#format:  2030333.1 i/s - 1.25x  (± 0.00) slower
            String#%:  1749688.1 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
                Hash   863.102k i/100ms
          OpenStruct   487.254k i/100ms
Calculating -------------------------------------
                Hash      8.547M (± 0.5%) i/s -     43.155M in   5.049422s
          OpenStruct      4.809M (± 2.5%) i/s -     24.363M in   5.069868s

Comparison:
                Hash:  8546732.6 i/s
          OpenStruct:  4808558.2 i/s - 1.78x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.107M i/100ms
          OpenStruct     9.886k i/100ms
Calculating -------------------------------------
                Hash     11.184M (± 0.6%) i/s -     56.450M in   5.047612s
          OpenStruct     96.819k (± 2.2%) i/s -    484.414k in   5.005695s

Comparison:
                Hash: 11183970.1 i/s
          OpenStruct:    96818.6 i/s - 115.51x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   532.592k i/100ms
  ancestors.include?   124.174k i/100ms
Calculating -------------------------------------
  less than or equal      5.407M (± 0.4%) i/s -     27.162M in   5.023660s
  ancestors.include?      1.236M (± 1.5%) i/s -      6.209M in   5.023737s

Comparison:
  less than or equal:  5406949.0 i/s
  ancestors.include?:  1236160.9 i/s - 4.37x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.765  (± 0.0%) i/s -      4.000  in   5.342296s
         Kernel loop      0.211  (± 0.0%) i/s -      2.000  in   9.492765s

Comparison:
          While Loop:        0.8 i/s
         Kernel loop:        0.2 i/s - 3.63x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.552M i/100ms
         Array#first     1.354M i/100ms
Calculating -------------------------------------
           Array#[0]     15.447M (± 0.4%) i/s -     77.588M in   5.022796s
         Array#first     13.540M (± 0.5%) i/s -     67.709M in   5.000708s

Comparison:
           Array#[0]: 15447429.5 i/s
         Array#first: 13540283.2 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.531M i/100ms
          Array#last     1.345M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.372M (± 0.8%) i/s -     78.089M in   5.080294s
          Array#last     13.434M (± 0.8%) i/s -     67.240M in   5.005668s

Comparison:
          Array#[-1]: 15372091.9 i/s
          Array#last: 13433686.8 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    97.992k i/100ms
Calculating -------------------------------------
                find      0.270  (± 0.0%) i/s -      2.000  in   7.415288s
             bsearch    981.603k (± 1.4%) i/s -      4.998M in   5.092302s

Comparison:
             bsearch:   981603.1 i/s
                find:        0.3 i/s - 3639434.88x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    18.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    186.475  (± 2.1%) i/s -    936.000  in   5.022076s
        Array#insert      1.436  (± 0.0%) i/s -      8.000  in   5.570922s

Comparison:
       Array#unshift:      186.5 i/s
        Array#insert:        1.4 i/s - 129.85x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.190M i/100ms
          Array#size     2.195M i/100ms
         Array#count     1.401M i/100ms
Calculating -------------------------------------
        Array#length     21.921M (± 0.4%) i/s -    111.695M in   5.095346s
          Array#size     21.927M (± 0.4%) i/s -    109.751M in   5.005413s
         Array#count     14.496M (± 0.5%) i/s -     72.877M in   5.027407s

Comparison:
          Array#size: 21926784.9 i/s
        Array#length: 21921276.5 i/s - same-ish: difference falls within error
         Array#count: 14496373.0 i/s - 1.51x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    46.152k i/100ms
        Array#sample     1.034M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    462.347k (± 0.6%) i/s -      2.354M in   5.091065s
        Array#sample     10.310M (± 0.2%) i/s -     51.710M in   5.015451s

Comparison:
        Array#sample: 10310187.6 i/s
 Array#shuffle.first:   462346.8 i/s - 22.30x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    64.120k i/100ms
          Date.parse    31.443k i/100ms
Calculating -------------------------------------
        Date.iso8601    637.698k (± 0.4%) i/s -      3.206M in   5.027527s
          Date.parse    311.873k (± 0.5%) i/s -      1.572M in   5.041111s

Comparison:
        Date.iso8601:   637698.5 i/s
          Date.parse:   311873.0 i/s - 2.04x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    17.019k i/100ms
           Array#map    26.891k i/100ms
Calculating -------------------------------------
   Array#each + push    176.487k (± 0.7%) i/s -    884.988k in   5.014715s
           Array#map    269.937k (± 0.2%) i/s -      1.371M in   5.080613s

Comparison:
           Array#map:   269936.7 i/s
   Array#each + push:   176486.9 i/s - 1.53x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
            For loop    29.975k i/100ms
               #each    32.781k i/100ms
Calculating -------------------------------------
            For loop    299.611k (± 0.5%) i/s -      1.499M in   5.002451s
               #each    327.393k (± 0.3%) i/s -      1.639M in   5.006434s

Comparison:
               #each:   327392.6 i/s
            For loop:   299611.4 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.364k i/100ms
     each_with_index    18.856k i/100ms
Calculating -------------------------------------
          While Loop    273.610k (± 0.4%) i/s -      1.368M in   5.000619s
     each_with_index    188.632k (± 0.4%) i/s -    961.656k in   5.098140s

Comparison:
          While Loop:   273609.7 i/s
     each_with_index:   188631.9 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    71.431k i/100ms
      inject to_proc     2.090k i/100ms
        inject block     1.987k i/100ms
Calculating -------------------------------------
       inject symbol    712.326k (± 1.6%) i/s -      3.572M in   5.015272s
      inject to_proc     20.888k (± 0.4%) i/s -    104.500k in   5.003011s
        inject block     19.815k (± 0.5%) i/s -     99.350k in   5.014092s

Comparison:
       inject symbol:   712326.2 i/s
      inject to_proc:    20887.8 i/s - 34.10x  (± 0.00) slower
        inject block:    19814.6 i/s - 35.95x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     7.463k i/100ms
   Array#map.flatten     4.194k i/100ms
      Array#flat_map    10.265k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     74.811k (± 0.6%) i/s -    380.613k in   5.087850s
   Array#map.flatten     41.700k (± 0.6%) i/s -    209.700k in   5.028948s
      Array#flat_map    102.184k (± 1.0%) i/s -    513.250k in   5.023297s

Comparison:
      Array#flat_map:   102184.3 i/s
Array#map.flatten(1):    74811.0 i/s - 1.37x  (± 0.00) slower
   Array#map.flatten:    41700.3 i/s - 2.45x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    31.632k i/100ms
  Array#reverse_each    32.281k i/100ms
Calculating -------------------------------------
  Array#reverse.each    316.816k (± 0.9%) i/s -      1.613M in   5.092425s
  Array#reverse_each    322.964k (± 0.5%) i/s -      1.646M in   5.097686s

Comparison:
  Array#reverse_each:   322963.6 i/s
  Array#reverse.each:   316815.8 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        19.537k i/100ms
   Enumerable#detect    80.541k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        196.015k (± 0.6%) i/s -      3.927M in  20.034700s
   Enumerable#detect    812.816k (± 0.7%) i/s -     16.269M in  20.016818s

Comparison:
   Enumerable#detect:   812815.9 i/s
Enumerable#select.first:   196015.0 i/s - 4.15x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       238.536k i/100ms
Enumerable#select.last
                        18.260k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.373M (± 0.5%) i/s -     11.927M in   5.026004s
Enumerable#select.last
                        182.045k (± 1.1%) i/s -    913.000k in   5.015865s

Comparison:
Enumerable#reverse.detect:  2373081.4 i/s
Enumerable#select.last:   182044.9 i/s - 13.04x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.748k i/100ms
  Enumerable#sort_by     4.565k i/100ms
     Enumerable#sort     2.353k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         48.718k (± 1.4%) i/s -    246.896k in   5.068868s
  Enumerable#sort_by     46.375k (± 0.9%) i/s -    232.815k in   5.020707s
     Enumerable#sort     23.188k (± 0.4%) i/s -    117.650k in   5.073839s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    48718.1 i/s
  Enumerable#sort_by:    46374.9 i/s - 1.05x  (± 0.00) slower
     Enumerable#sort:    23187.9 i/s - 2.10x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.245k i/100ms
Enumerable#sort_by...first
                         8.436k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    172.287k (± 0.6%) i/s -    862.250k in   5.004883s
Enumerable#sort_by...first
                         83.101k (± 0.9%) i/s -    421.800k in   5.076118s

Comparison:
   Enumerable#min_by:   172287.3 i/s
Enumerable#sort_by...first:    83101.2 i/s - 2.07x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   417.123k i/100ms
            Hash#dup   292.500k i/100ms
Calculating -------------------------------------
              Hash[]      4.254M (± 1.3%) i/s -     21.273M in   5.002100s
            Hash#dup      3.154M (± 1.3%) i/s -     15.795M in   5.008008s

Comparison:
              Hash[]:  4253540.1 i/s
            Hash#dup:  3154464.4 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.399M i/100ms
  Hash#fetch, symbol     1.176M i/100ms
     Hash#[], string     1.222M i/100ms
  Hash#fetch, string   736.542k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.001M (± 0.3%) i/s -     71.344M in   5.095760s
  Hash#fetch, symbol     11.959M (± 0.4%) i/s -     59.986M in   5.016134s
     Hash#[], string     12.276M (± 0.4%) i/s -     62.319M in   5.076685s
  Hash#fetch, string      7.371M (± 0.8%) i/s -     37.564M in   5.096266s

Comparison:
     Hash#[], symbol: 14000761.9 i/s
     Hash#[], string: 12275777.9 i/s - 1.14x  (± 0.00) slower
  Hash#fetch, symbol: 11958860.6 i/s - 1.17x  (± 0.00) slower
  Hash#fetch, string:  7371323.4 i/s - 1.90x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   814.621k i/100ms
             Hash#[]   988.477k i/100ms
          Hash#[] ||   872.670k i/100ms
          Hash#[] &&   379.370k i/100ms
          Hash#fetch   608.439k i/100ms
 Hash#fetch fallback   381.642k i/100ms
Calculating -------------------------------------
            Hash#dig      8.222M (± 0.4%) i/s -     41.546M in   5.053159s
             Hash#[]      9.663M (± 0.6%) i/s -     48.435M in   5.012861s
          Hash#[] ||      8.829M (± 0.6%) i/s -     44.506M in   5.041146s
          Hash#[] &&      3.767M (± 2.9%) i/s -     18.968M in   5.039253s
          Hash#fetch      6.017M (± 0.5%) i/s -     30.422M in   5.056017s
 Hash#fetch fallback      3.771M (± 1.0%) i/s -     19.082M in   5.060216s

Comparison:
             Hash#[]:  9662565.9 i/s
          Hash#[] ||:  8828882.7 i/s - 1.09x  (± 0.00) slower
            Hash#dig:  8221882.0 i/s - 1.18x  (± 0.00) slower
          Hash#fetch:  6017137.6 i/s - 1.61x  (± 0.00) slower
 Hash#fetch fallback:  3771403.1 i/s - 2.56x  (± 0.00) slower
          Hash#[] &&:  3767260.1 i/s - 2.56x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.302M i/100ms
  Hash#fetch + block     1.308M i/100ms
    Hash#fetch + arg   952.627k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     12.967M (± 0.3%) i/s -     65.118M in   5.021971s
  Hash#fetch + block     13.073M (± 0.4%) i/s -     65.411M in   5.003615s
    Hash#fetch + arg      9.442M (± 0.8%) i/s -     47.631M in   5.044967s

Comparison:
  Hash#fetch + block: 13073022.9 i/s
  Hash#fetch + const: 12966812.8 i/s - 1.01x  (± 0.00) slower
    Hash#fetch + arg:  9441998.4 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    25.431k i/100ms
         sort + to_h    10.948k i/100ms
Calculating -------------------------------------
      sort_by + to_h    253.282k (± 0.5%) i/s -      1.272M in   5.020443s
         sort + to_h    107.416k (± 1.0%) i/s -    547.400k in   5.096564s

Comparison:
      sort_by + to_h:   253281.9 i/s
         sort + to_h:   107416.1 i/s - 2.36x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   182.308k i/100ms
       Hash#each_key   198.249k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.830M (± 0.4%) i/s -      9.298M in   5.081934s
       Hash#each_key      1.955M (± 0.6%) i/s -      9.912M in   5.069256s

Comparison:
       Hash#each_key:  1955484.3 i/s
      Hash#keys.each:  1829597.3 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.233k i/100ms
           Hash#key?     1.023M i/100ms
Calculating -------------------------------------
  Hash#keys.include?     12.110k (± 5.3%) i/s -     61.650k in   5.106580s
           Hash#key?     10.167M (± 0.8%) i/s -     51.133M in   5.029800s

Comparison:
           Hash#key?: 10166745.4 i/s
  Hash#keys.include?:    12110.4 i/s - 839.50x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.094k i/100ms
            Hash#[]=    10.257k i/100ms
Calculating -------------------------------------
         Hash#merge!     40.917k (± 0.6%) i/s -    204.700k in   5.002950s
            Hash#[]=    103.459k (± 1.2%) i/s -    523.107k in   5.056960s

Comparison:
            Hash#[]=:   103458.6 i/s
         Hash#merge!:    40917.1 i/s - 2.53x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.813k i/100ms
      Hash#merge({})     3.790k i/100ms
 Hash#dup#merge!({})     2.908k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         48.124k (± 0.4%) i/s -    240.650k in   5.000727s
      Hash#merge({})     37.739k (± 0.4%) i/s -    189.500k in   5.021363s
 Hash#dup#merge!({})     28.243k (± 1.7%) i/s -    142.492k in   5.046618s

Comparison:
{}#merge!(Hash) do end:    48123.7 i/s
      Hash#merge({}):    37739.4 i/s - 1.28x  (± 0.00) slower
 Hash#dup#merge!({}):    28243.0 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   374.600k i/100ms
          Hash#merge   334.252k i/100ms
Calculating -------------------------------------
        Hash#**other      3.753M (± 0.5%) i/s -     19.105M in   5.090958s
          Hash#merge      3.409M (± 0.4%) i/s -     17.047M in   5.000593s

Comparison:
        Hash#**other:  3752760.4 i/s
          Hash#merge:  3409008.7 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.679k i/100ms
         Hash#merge!     3.937k i/100ms
Calculating -------------------------------------
          Hash#merge     16.771k (± 1.2%) i/s -     83.950k in   5.006355s
         Hash#merge!     39.303k (± 0.5%) i/s -    196.850k in   5.008616s

Comparison:
         Hash#merge!:    39303.2 i/s
          Hash#merge:    16771.1 i/s - 2.34x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      421.674k i/100ms
Array#each             213.206k i/100ms
Array#each_w/_object   169.724k i/100ms
Hash#select-include     74.569k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.199M (± 0.6%) i/s -     21.084M in   5.021429s
Array#each                2.173M (± 1.2%) i/s -     10.874M in   5.004280s
Array#each_w/_object      1.694M (± 0.3%) i/s -      8.486M in   5.009953s
Hash#select-include     750.763k (± 0.6%) i/s -      3.803M in   5.065698s

Comparison:
Hash#native-slice   :  4198898.4 i/s
Array#each          :  2173146.5 i/s - 1.93x  (± 0.00) slower
Array#each_w/_object:  1693888.2 i/s - 2.48x  (± 0.00) slower
Hash#select-include :   750762.6 i/s - 5.59x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?     1.027k i/100ms
         Hash#value?   844.000  i/100ms
Calculating -------------------------------------
Hash#values.include?     10.235k (± 3.2%) i/s -     51.350k in   5.022807s
         Hash#value?      8.459k (± 0.3%) i/s -     43.044k in   5.088427s

Comparison:
Hash#values.include?:    10235.0 i/s
         Hash#value?:     8459.3 i/s - 1.21x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
                call   652.049k i/100ms
                send   510.755k i/100ms
      method_missing   382.748k i/100ms
Calculating -------------------------------------
                call      6.535M (± 0.4%) i/s -     33.254M in   5.089057s
                send      5.120M (± 0.7%) i/s -     26.049M in   5.087360s
      method_missing      3.819M (± 0.6%) i/s -     19.137M in   5.011225s

Comparison:
                call:  6534596.0 i/s
                send:  5120470.2 i/s - 1.28x  (± 0.00) slower
      method_missing:  3819066.1 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
               Block     9.183k i/100ms
      Symbol#to_proc    10.257k i/100ms
Calculating -------------------------------------
               Block     91.454k (± 0.5%) i/s -    459.150k in   5.020665s
      Symbol#to_proc    101.717k (± 0.6%) i/s -    512.850k in   5.042100s

Comparison:
      Symbol#to_proc:   101717.1 i/s
               Block:    91454.4 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
          block.call   944.089k i/100ms
       block + yield   897.124k i/100ms
        unused block     1.318M i/100ms
               yield     1.005M i/100ms
Calculating -------------------------------------
          block.call      9.450M (± 0.9%) i/s -     48.149M in   5.095531s
       block + yield      8.986M (± 0.4%) i/s -     45.753M in   5.091675s
        unused block     13.148M (± 2.0%) i/s -     65.902M in   5.014406s
               yield     10.267M (± 0.9%) i/s -     52.264M in   5.091105s

Comparison:
        unused block: 13148434.6 i/s
               yield: 10266661.9 i/s - 1.28x  (± 0.00) slower
          block.call:  9449917.7 i/s - 1.39x  (± 0.00) slower
       block + yield:  8986036.0 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   303.171k i/100ms
      range#include?    12.609k i/100ms
       range#member?    12.751k i/100ms
       plain compare   508.652k i/100ms
Calculating -------------------------------------
        range#cover?      3.035M (± 0.6%) i/s -     15.462M in   5.095072s
      range#include?    126.055k (± 0.6%) i/s -    630.450k in   5.001556s
       range#member?    127.804k (± 1.2%) i/s -    650.301k in   5.088995s
       plain compare      5.057M (± 0.5%) i/s -     25.433M in   5.029790s

Comparison:
       plain compare:  5056516.1 i/s
        range#cover?:  3034763.0 i/s - 1.67x  (± 0.00) slower
       range#member?:   127804.0 i/s - 39.56x  (± 0.00) slower
      range#include?:   126055.1 i/s - 40.11x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
       String#match?   909.016k i/100ms
           String#=~   623.036k i/100ms
          Regexp#===   593.868k i/100ms
        String#match   446.684k i/100ms
Calculating -------------------------------------
       String#match?      9.394M (± 1.0%) i/s -     47.269M in   5.032116s
           String#=~      6.076M (± 0.5%) i/s -     30.529M in   5.024873s
          Regexp#===      5.926M (± 0.8%) i/s -     29.693M in   5.010838s
        String#match      4.468M (± 0.5%) i/s -     22.781M in   5.099118s

Comparison:
       String#match?:  9394346.2 i/s
           String#=~:  6075705.5 i/s - 1.55x  (± 0.00) slower
          Regexp#===:  5926244.9 i/s - 1.59x  (± 0.00) slower
        String#match:  4467728.7 i/s - 2.10x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   638.168k i/100ms
      String#casecmp   797.241k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.369M (± 0.6%) i/s -     31.908M in   5.010006s
      String#casecmp      7.854M (± 1.1%) i/s -     39.862M in   5.075762s

Comparison:
      String#casecmp:  7854450.0 i/s
String#downcase + ==:  6369205.2 i/s - 1.23x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
            String#+   552.092k i/100ms
       String#concat   596.681k i/100ms
       String#append   667.501k i/100ms
         "foo" "bar"     1.147M i/100ms
  "#{'foo'}#{'bar'}"     1.146M i/100ms
Calculating -------------------------------------
            String#+      5.544M (± 0.4%) i/s -     28.157M in   5.078636s
       String#concat      5.975M (± 1.1%) i/s -     30.431M in   5.093290s
       String#append      6.648M (± 0.6%) i/s -     33.375M in   5.020337s
         "foo" "bar"     11.469M (± 0.5%) i/s -     58.473M in   5.098485s
  "#{'foo'}#{'bar'}"     11.468M (± 0.4%) i/s -     58.459M in   5.097777s

Comparison:
         "foo" "bar": 11468960.0 i/s
  "#{'foo'}#{'bar'}": 11467783.9 i/s - same-ish: difference falls within error
       String#append:  6648232.8 i/s - 1.73x  (± 0.00) slower
       String#concat:  5975494.3 i/s - 1.92x  (± 0.00) slower
            String#+:  5544219.6 i/s - 2.07x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
           String#+@   927.799k i/100ms
          String#dup   554.088k i/100ms
Calculating -------------------------------------
           String#+@      9.348M (± 0.3%) i/s -     47.318M in   5.062089s
          String#dup      5.511M (± 0.5%) i/s -     27.704M in   5.027526s

Comparison:
           String#+@:  9347558.1 i/s
          String#dup:  5510685.9 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
           String#=~   193.244k i/100ms
       String#match?   413.402k i/100ms
    String#end_with?   597.766k i/100ms
Calculating -------------------------------------
           String#=~      1.924M (± 1.0%) i/s -      9.662M in   5.022926s
       String#match?      4.126M (± 0.6%) i/s -     20.670M in   5.009859s
    String#end_with?      5.975M (± 0.5%) i/s -     29.888M in   5.001982s

Comparison:
    String#end_with?:  5975459.4 i/s
       String#match?:  4126024.5 i/s - 1.45x  (± 0.00) slower
           String#=~:  1923832.6 i/s - 3.11x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   110.046k i/100ms
          String#sub   136.646k i/100ms
String#dup["string"]=
                       176.955k i/100ms
Calculating -------------------------------------
         String#gsub      1.104M (± 0.6%) i/s -      5.612M in   5.083343s
          String#sub      1.413M (± 0.8%) i/s -      7.106M in   5.029700s
String#dup["string"]=
                          1.767M (± 0.6%) i/s -      8.848M in   5.007806s

Comparison:
String#dup["string"]=:  1766849.6 i/s
          String#sub:  1412811.4 i/s - 1.25x  (± 0.00) slower
         String#gsub:  1104106.4 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   100.454k i/100ms
           String#tr   331.625k i/100ms
Calculating -------------------------------------
         String#gsub      1.010M (± 0.5%) i/s -      5.123M in   5.070274s
           String#tr      3.312M (± 0.5%) i/s -     16.581M in   5.006354s

Comparison:
           String#tr:  3312124.5 i/s
         String#gsub:  1010451.6 i/s - 3.28x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.171M i/100ms
         With Freeze     1.675M i/100ms
Calculating -------------------------------------
      Without Freeze     11.678M (± 0.6%) i/s -     58.560M in   5.014786s
         With Freeze     16.774M (± 0.4%) i/s -     85.410M in   5.091814s

Comparison:
         With Freeze: 16774203.5 i/s
      Without Freeze: 11677894.3 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.469k i/100ms
      String#squeeze   160.507k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     35.011k (± 0.6%) i/s -    176.919k in   5.053460s
      String#squeeze      1.584M (± 1.0%) i/s -      8.025M in   5.067969s

Comparison:
      String#squeeze:  1583687.8 i/s
 String#gsub/regex+/:    35010.8 i/s - 45.23x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
           String#=~   280.952k i/100ms
       String#match?   707.338k i/100ms
  String#start_with?   843.007k i/100ms
Calculating -------------------------------------
           String#=~      2.820M (± 0.5%) i/s -     14.329M in   5.081180s
       String#match?      7.057M (± 0.5%) i/s -     35.367M in   5.011675s
  String#start_with?      8.469M (± 0.7%) i/s -     42.993M in   5.076809s

Comparison:
  String#start_with?:  8468998.3 i/s
       String#match?:  7057064.5 i/s - 1.20x  (± 0.00) slower
           String#=~:  2819992.5 i/s - 3.00x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   203.355k i/100ms
    String#[0, n] ==    85.068k i/100ms
   String#[RANGE] ==    75.649k i/100ms
   String#[0...n] ==    47.268k i/100ms
Calculating -------------------------------------
  String#start_with?      2.002M (± 0.4%) i/s -     10.168M in   5.079424s
    String#[0, n] ==    865.157k (± 1.1%) i/s -      4.338M in   5.015270s
   String#[RANGE] ==    759.695k (± 0.4%) i/s -      3.858M in   5.078566s
   String#[0...n] ==    460.924k (± 0.9%) i/s -      2.316M in   5.025392s

Comparison:
  String#start_with?:  2001791.0 i/s
    String#[0, n] ==:   865156.5 i/s - 2.31x  (± 0.00) slower
   String#[RANGE] ==:   759694.8 i/s - 2.63x  (± 0.00) slower
   String#[0...n] ==:   460923.7 i/s - 4.34x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   173.143k i/100ms
 String#sub!'string'   125.557k i/100ms
String#gsub!'string'    77.289k i/100ms
  String#[/regexp/]=   163.346k i/100ms
 String#sub!/regexp/   118.157k i/100ms
String#gsub!/regexp/    60.627k i/100ms
Calculating -------------------------------------
  String#['string']=      1.751M (± 0.8%) i/s -      8.830M in   5.044422s
 String#sub!'string'      1.260M (± 0.5%) i/s -      6.403M in   5.082218s
String#gsub!'string'    764.805k (± 0.4%) i/s -      3.864M in   5.052934s
  String#[/regexp/]=      1.602M (± 0.5%) i/s -      8.167M in   5.098837s
 String#sub!/regexp/      1.150M (± 0.7%) i/s -      5.790M in   5.035497s
String#gsub!/regexp/    606.273k (± 0.3%) i/s -      3.031M in   5.000032s

Comparison:
  String#['string']=:  1750632.9 i/s
  String#[/regexp/]=:  1601843.8 i/s - 1.09x  (± 0.00) slower
 String#sub!'string':  1259991.9 i/s - 1.39x  (± 0.00) slower
 String#sub!/regexp/:  1149830.6 i/s - 1.52x  (± 0.00) slower
String#gsub!'string':   764804.7 i/s - 2.29x  (± 0.00) slower
String#gsub!/regexp/:   606272.6 i/s - 2.89x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
          String#sub   147.591k i/100ms
        String#chomp   549.294k i/100ms
String#delete_suffix   594.720k i/100ms
Calculating -------------------------------------
          String#sub      1.480M (± 0.7%) i/s -      7.527M in   5.086498s
        String#chomp      5.485M (± 0.5%) i/s -     27.465M in   5.007005s
String#delete_suffix      5.859M (± 0.4%) i/s -     29.736M in   5.075502s

Comparison:
String#delete_suffix:  5858840.6 i/s
        String#chomp:  5485422.3 i/s - 1.07x  (± 0.00) slower
          String#sub:  1479892.9 i/s - 3.96x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   590.240k i/100ms
          String#sub   153.486k i/100ms
Calculating -------------------------------------
String#delete_prefix      5.922M (± 0.4%) i/s -     30.102M in   5.083364s
          String#sub      1.523M (± 0.9%) i/s -      7.674M in   5.040878s

Comparison:
String#delete_prefix:  5921797.9 i/s
          String#sub:  1522542.9 i/s - 3.89x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   622.964k i/100ms
    String#unpack[0]   466.812k i/100ms
Calculating -------------------------------------
      String#unpack1      6.205M (± 0.3%) i/s -     31.148M in   5.020079s
    String#unpack[0]      4.607M (± 0.4%) i/s -     23.341M in   5.066978s

Comparison:
      String#unpack1:  6204767.6 i/s
    String#unpack[0]:  4606506.1 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    27.619k i/100ms
          Time.parse     9.330k i/100ms
Calculating -------------------------------------
        Time.iso8601    276.643k (± 0.5%) i/s -      1.409M in   5.091781s
          Time.parse     92.784k (± 0.4%) i/s -    466.500k in   5.027921s

Comparison:
        Time.iso8601:   276643.2 i/s
          Time.parse:    92783.7 i/s - 2.98x  (± 0.00) slower

