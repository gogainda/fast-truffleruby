$ ruby -v code/general/array-argument-vs-splat-arguments.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       765.341k i/100ms
Function with splat arguments
                        21.730k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          7.655M (± 0.3%) i/s -     39.032M in   5.098771s
Function with splat arguments
                        216.006k (± 6.7%) i/s -      1.086M in   5.057995s

Comparison:
Function with single Array argument:  7655341.4 i/s
Function with splat arguments:   216006.5 i/s - 35.44x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment     1.008M i/100ms
Sequential Assignment
                         1.042M i/100ms
Calculating -------------------------------------
 Parallel Assignment     10.078M (± 0.5%) i/s -     50.413M in   5.002589s
Sequential Assignment
                         10.580M (± 0.3%) i/s -     53.144M in   5.023135s

Comparison:
Sequential Assignment: 10579848.3 i/s
 Parallel Assignment: 10077683.3 i/s - 1.05x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   446.101k i/100ms
       attr_accessor   524.574k i/100ms
Calculating -------------------------------------
   getter_and_setter      4.494M (± 0.6%) i/s -     22.751M in   5.062902s
       attr_accessor      5.218M (± 1.4%) i/s -     26.229M in   5.027709s

Comparison:
       attr_accessor:  5217939.4 i/s
   getter_and_setter:  4493855.3 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    88.599k i/100ms
         respond_to?   745.550k i/100ms
Calculating -------------------------------------
      begin...rescue    888.292k (± 2.3%) i/s -      4.519M in   5.089886s
         respond_to?      7.392M (± 1.3%) i/s -     37.278M in   5.043946s

Comparison:
         respond_to?:  7391867.7 i/s
      begin...rescue:   888292.1 i/s - 8.32x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
              normal   308.153k i/100ms
             &method   120.592k i/100ms
Calculating -------------------------------------
              normal      3.087M (± 1.0%) i/s -     15.716M in   5.091794s
             &method      1.199M (± 0.8%) i/s -      6.030M in   5.030946s

Comparison:
              normal:  3086862.2 i/s
             &method:  1198587.1 i/s - 2.58x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       233.000  i/100ms
       define_method   319.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.313k (±17.5%) i/s -     10.951k in   5.101140s
       define_method      3.243k (±19.3%) i/s -     14.674k in   5.016195s

Comparison:
       define_method:     3242.9 i/s
module_eval with string:     2313.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
         Float#round   254.041k i/100ms
       Kernel#format   202.472k i/100ms
            String#%   174.194k i/100ms
Calculating -------------------------------------
         Float#round      2.561M (± 0.8%) i/s -     12.956M in   5.059012s
       Kernel#format      2.024M (± 0.4%) i/s -     10.124M in   5.001531s
            String#%      1.772M (± 0.3%) i/s -      8.884M in   5.013609s

Comparison:
         Float#round:  2561157.4 i/s
       Kernel#format:  2024129.8 i/s - 1.27x  (± 0.00) slower
            String#%:  1771971.9 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
                Hash   835.242k i/100ms
          OpenStruct   497.774k i/100ms
Calculating -------------------------------------
                Hash      8.587M (± 0.7%) i/s -     43.433M in   5.058129s
          OpenStruct      4.970M (± 0.7%) i/s -     24.889M in   5.007870s

Comparison:
                Hash:  8587133.2 i/s
          OpenStruct:  4970180.0 i/s - 1.73x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
                Hash     1.110M i/100ms
          OpenStruct     9.795k i/100ms
Calculating -------------------------------------
                Hash     11.151M (± 0.6%) i/s -     56.596M in   5.075389s
          OpenStruct     92.657k (± 2.7%) i/s -    470.160k in   5.077872s

Comparison:
                Hash: 11151422.5 i/s
          OpenStruct:    92657.1 i/s - 120.35x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
  less than or equal   544.946k i/100ms
  ancestors.include?   125.900k i/100ms
Calculating -------------------------------------
  less than or equal      5.447M (± 1.5%) i/s -     27.247M in   5.003055s
  ancestors.include?      1.246M (± 1.3%) i/s -      6.295M in   5.054667s

Comparison:
  less than or equal:  5447302.7 i/s
  ancestors.include?:  1245593.3 i/s - 4.37x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop      0.668  (± 0.0%) i/s -      4.000  in   6.001610s
         Kernel loop      0.194  (± 0.0%) i/s -      1.000  in   5.147317s

Comparison:
          While Loop:        0.7 i/s
         Kernel loop:        0.2 i/s - 3.44x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
           Array#[0]     1.577M i/100ms
         Array#first     1.358M i/100ms
Calculating -------------------------------------
           Array#[0]     15.787M (± 0.4%) i/s -     80.417M in   5.094003s
         Array#first     13.598M (± 0.3%) i/s -     69.262M in   5.093504s

Comparison:
           Array#[0]: 15786866.5 i/s
         Array#first: 13598148.2 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]     1.530M i/100ms
          Array#last     1.348M i/100ms
Calculating -------------------------------------
          Array#[-1]     15.350M (± 0.6%) i/s -     78.040M in   5.084214s
          Array#last     13.488M (± 0.2%) i/s -     68.742M in   5.096474s

Comparison:
          Array#[-1]: 15349964.4 i/s
          Array#last: 13488227.4 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch    99.320k i/100ms
Calculating -------------------------------------
                find      0.267  (± 0.0%) i/s -      2.000  in   7.500306s
             bsearch    992.174k (± 0.8%) i/s -      4.966M in   5.005548s

Comparison:
             bsearch:   992174.1 i/s
                find:        0.3 i/s - 3720804.38x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
       Array#unshift    19.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift    189.045  (± 2.1%) i/s -    950.000  in   5.027683s
        Array#insert      1.430  (± 0.0%) i/s -      8.000  in   5.594152s

Comparison:
       Array#unshift:      189.0 i/s
        Array#insert:        1.4 i/s - 132.18x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
        Array#length     2.190M i/100ms
          Array#size     2.183M i/100ms
         Array#count     1.384M i/100ms
Calculating -------------------------------------
        Array#length     21.931M (± 0.1%) i/s -    111.666M in   5.091673s
          Array#size     21.772M (± 0.4%) i/s -    109.127M in   5.012360s
         Array#count     13.878M (± 0.5%) i/s -     70.573M in   5.085394s

Comparison:
        Array#length: 21931063.1 i/s
          Array#size: 21771934.9 i/s - 1.01x  (± 0.00) slower
         Array#count: 13877880.2 i/s - 1.58x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    45.219k i/100ms
        Array#sample     1.063M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    456.172k (± 0.5%) i/s -      2.306M in   5.055592s
        Array#sample     10.590M (± 1.9%) i/s -     53.138M in   5.019662s

Comparison:
        Array#sample: 10590113.8 i/s
 Array#shuffle.first:   456172.3 i/s - 23.22x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    63.761k i/100ms
          Date.parse    31.317k i/100ms
Calculating -------------------------------------
        Date.iso8601    635.415k (± 0.5%) i/s -      3.188M in   5.017406s
          Date.parse    311.549k (± 0.5%) i/s -      1.566M in   5.026159s

Comparison:
        Date.iso8601:   635415.5 i/s
          Date.parse:   311549.0 i/s - 2.04x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    16.778k i/100ms
           Array#map    26.814k i/100ms
Calculating -------------------------------------
   Array#each + push    175.757k (± 0.8%) i/s -    889.234k in   5.059806s
           Array#map    268.423k (± 0.2%) i/s -      1.368M in   5.094645s

Comparison:
           Array#map:   268422.8 i/s
   Array#each + push:   175757.2 i/s - 1.53x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
            For loop    29.891k i/100ms
               #each    32.488k i/100ms
Calculating -------------------------------------
            For loop    298.086k (± 0.5%) i/s -      1.495M in   5.013949s
               #each    324.899k (± 0.8%) i/s -      1.624M in   5.000033s

Comparison:
               #each:   324899.1 i/s
            For loop:   298086.1 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
          While Loop    27.167k i/100ms
     each_with_index    18.971k i/100ms
Calculating -------------------------------------
          While Loop    273.410k (± 0.3%) i/s -      1.386M in   5.067576s
     each_with_index    187.902k (± 3.9%) i/s -    948.550k in   5.057434s

Comparison:
          While Loop:   273410.4 i/s
     each_with_index:   187902.2 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
       inject symbol    71.044k i/100ms
      inject to_proc     2.072k i/100ms
        inject block     1.921k i/100ms
Calculating -------------------------------------
       inject symbol    706.195k (± 0.6%) i/s -      3.552M in   5.030234s
      inject to_proc     20.712k (± 0.5%) i/s -    103.600k in   5.002116s
        inject block     19.161k (± 0.4%) i/s -     96.050k in   5.012858s

Comparison:
       inject symbol:   706195.2 i/s
      inject to_proc:    20711.8 i/s - 34.10x  (± 0.00) slower
        inject block:    19161.0 i/s - 36.86x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     7.369k i/100ms
   Array#map.flatten     4.171k i/100ms
      Array#flat_map    10.104k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     74.115k (± 1.0%) i/s -    375.819k in   5.071280s
   Array#map.flatten     41.758k (± 0.6%) i/s -    212.721k in   5.094363s
      Array#flat_map    100.892k (± 0.9%) i/s -    505.200k in   5.007770s

Comparison:
      Array#flat_map:   100891.7 i/s
Array#map.flatten(1):    74115.4 i/s - 1.36x  (± 0.00) slower
   Array#map.flatten:    41757.8 i/s - 2.42x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    31.400k i/100ms
  Array#reverse_each    32.714k i/100ms
Calculating -------------------------------------
  Array#reverse.each    313.468k (± 2.1%) i/s -      1.570M in   5.010879s
  Array#reverse_each    326.606k (± 0.4%) i/s -      1.636M in   5.008249s

Comparison:
  Array#reverse_each:   326605.6 i/s
  Array#reverse.each:   313468.1 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        18.865k i/100ms
   Enumerable#detect    81.502k i/100ms
Calculating -------------------------------------
Enumerable#select.first
                        190.395k (± 0.7%) i/s -      3.811M in  20.015996s
   Enumerable#detect    818.116k (± 0.3%) i/s -     16.382M in  20.024116s

Comparison:
   Enumerable#detect:   818116.3 i/s
Enumerable#select.first:   190394.5 i/s - 4.30x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       234.176k i/100ms
Enumerable#select.last
                        16.702k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.349M (± 0.6%) i/s -     11.943M in   5.085210s
Enumerable#select.last
                        167.378k (± 0.7%) i/s -    851.802k in   5.089319s

Comparison:
Enumerable#reverse.detect:  2348646.4 i/s
Enumerable#select.last:   167378.3 i/s - 14.03x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.703k i/100ms
  Enumerable#sort_by     4.563k i/100ms
     Enumerable#sort     2.343k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         48.943k (± 0.8%) i/s -    249.259k in   5.093196s
  Enumerable#sort_by     45.419k (± 0.6%) i/s -    228.150k in   5.023478s
     Enumerable#sort     23.303k (± 2.1%) i/s -    117.150k in   5.029884s

Comparison:
Enumerable#sort_by (Symbol#to_proc):    48943.0 i/s
  Enumerable#sort_by:    45418.5 i/s - 1.08x  (± 0.00) slower
     Enumerable#sort:    23302.7 i/s - 2.10x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    17.099k i/100ms
Enumerable#sort_by...first
                         8.281k i/100ms
Calculating -------------------------------------
   Enumerable#min_by    170.745k (± 0.9%) i/s -    854.950k in   5.007565s
Enumerable#sort_by...first
                         82.804k (± 0.6%) i/s -    414.050k in   5.000541s

Comparison:
   Enumerable#min_by:   170745.0 i/s
Enumerable#sort_by...first:    82804.0 i/s - 2.06x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
              Hash[]   412.164k i/100ms
            Hash#dup   290.808k i/100ms
Calculating -------------------------------------
              Hash[]      3.685M (± 2.9%) i/s -     18.547M in   5.037861s
            Hash#dup      3.124M (± 3.1%) i/s -     15.704M in   5.032168s

Comparison:
              Hash[]:  3684961.9 i/s
            Hash#dup:  3123874.3 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol     1.412M i/100ms
  Hash#fetch, symbol     1.164M i/100ms
     Hash#[], string     1.242M i/100ms
  Hash#fetch, string   754.838k i/100ms
Calculating -------------------------------------
     Hash#[], symbol     14.001M (± 0.2%) i/s -     70.577M in   5.040756s
  Hash#fetch, symbol     11.874M (± 0.6%) i/s -     59.380M in   5.001125s
     Hash#[], string     12.334M (± 0.1%) i/s -     62.118M in   5.036312s
  Hash#fetch, string      7.433M (± 1.6%) i/s -     37.742M in   5.078839s

Comparison:
     Hash#[], symbol: 14001384.1 i/s
     Hash#[], string: 12333958.0 i/s - 1.14x  (± 0.00) slower
  Hash#fetch, symbol: 11873759.4 i/s - 1.18x  (± 0.00) slower
  Hash#fetch, string:  7433370.5 i/s - 1.88x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
            Hash#dig   872.449k i/100ms
             Hash#[]   988.613k i/100ms
          Hash#[] ||   882.257k i/100ms
          Hash#[] &&   364.207k i/100ms
          Hash#fetch   593.362k i/100ms
 Hash#fetch fallback   390.324k i/100ms
Calculating -------------------------------------
            Hash#dig      8.334M (± 0.8%) i/s -     41.878M in   5.024962s
             Hash#[]     10.078M (± 0.8%) i/s -     50.419M in   5.003154s
          Hash#[] ||      8.812M (± 1.3%) i/s -     44.113M in   5.007108s
          Hash#[] &&      3.723M (± 0.7%) i/s -     18.939M in   5.086865s
          Hash#fetch      5.945M (± 0.7%) i/s -     30.261M in   5.090231s
 Hash#fetch fallback      3.854M (± 1.3%) i/s -     19.516M in   5.065189s

Comparison:
             Hash#[]: 10078224.2 i/s
          Hash#[] ||:  8811532.6 i/s - 1.14x  (± 0.00) slower
            Hash#dig:  8334446.6 i/s - 1.21x  (± 0.00) slower
          Hash#fetch:  5945312.7 i/s - 1.70x  (± 0.00) slower
 Hash#fetch fallback:  3853648.5 i/s - 2.62x  (± 0.00) slower
          Hash#[] &&:  3723248.8 i/s - 2.71x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const     1.328M i/100ms
  Hash#fetch + block     1.305M i/100ms
    Hash#fetch + arg   959.814k i/100ms
Calculating -------------------------------------
  Hash#fetch + const     12.574M (± 0.7%) i/s -     63.749M in   5.070128s
  Hash#fetch + block     12.807M (± 0.6%) i/s -     65.229M in   5.093523s
    Hash#fetch + arg      9.571M (± 0.6%) i/s -     47.991M in   5.014212s

Comparison:
  Hash#fetch + block: 12806721.3 i/s
  Hash#fetch + const: 12574176.4 i/s - 1.02x  (± 0.00) slower
    Hash#fetch + arg:  9571307.8 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    25.474k i/100ms
         sort + to_h    11.147k i/100ms
Calculating -------------------------------------
      sort_by + to_h    257.955k (± 0.8%) i/s -      1.299M in   5.036745s
         sort + to_h    110.733k (± 0.7%) i/s -    557.350k in   5.033544s

Comparison:
      sort_by + to_h:   257954.7 i/s
         sort + to_h:   110733.3 i/s - 2.33x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   189.545k i/100ms
       Hash#each_key   194.879k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.917M (± 0.6%) i/s -      9.667M in   5.042733s
       Hash#each_key      1.923M (± 0.5%) i/s -      9.744M in   5.067099s

Comparison:
       Hash#each_key:  1923025.8 i/s
      Hash#keys.each:  1917036.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?     1.153k i/100ms
           Hash#key?     1.016M i/100ms
Calculating -------------------------------------
  Hash#keys.include?     11.740k (± 3.5%) i/s -     58.803k in   5.015648s
           Hash#key?     10.141M (± 0.5%) i/s -     50.813M in   5.010984s

Comparison:
           Hash#key?: 10140569.6 i/s
  Hash#keys.include?:    11740.4 i/s - 863.73x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     4.050k i/100ms
            Hash#[]=    10.176k i/100ms
Calculating -------------------------------------
         Hash#merge!     40.315k (± 0.6%) i/s -    202.500k in   5.023163s
            Hash#[]=    101.364k (± 0.7%) i/s -    508.800k in   5.019783s

Comparison:
            Hash#[]=:   101363.7 i/s
         Hash#merge!:    40314.9 i/s - 2.51x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         4.781k i/100ms
      Hash#merge({})     3.733k i/100ms
 Hash#dup#merge!({})     2.870k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         47.213k (± 1.7%) i/s -    239.050k in   5.064762s
      Hash#merge({})     37.259k (± 0.8%) i/s -    186.650k in   5.009865s
 Hash#dup#merge!({})     28.396k (± 1.5%) i/s -    143.500k in   5.054635s

Comparison:
{}#merge!(Hash) do end:    47212.9 i/s
      Hash#merge({}):    37259.2 i/s - 1.27x  (± 0.00) slower
 Hash#dup#merge!({}):    28396.0 i/s - 1.66x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   371.434k i/100ms
          Hash#merge   338.598k i/100ms
Calculating -------------------------------------
        Hash#**other      3.730M (± 0.6%) i/s -     18.943M in   5.078392s
          Hash#merge      3.364M (± 0.6%) i/s -     16.930M in   5.032653s

Comparison:
        Hash#**other:  3730286.5 i/s
          Hash#merge:  3364139.0 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.607k i/100ms
         Hash#merge!     3.974k i/100ms
Calculating -------------------------------------
          Hash#merge     14.941k (± 4.3%) i/s -     75.529k in   5.064486s
         Hash#merge!     39.304k (± 0.4%) i/s -    198.700k in   5.055611s

Comparison:
         Hash#merge!:    39303.6 i/s
          Hash#merge:    14941.4 i/s - 2.63x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      417.933k i/100ms
Array#each             219.385k i/100ms
Array#each_w/_object   169.710k i/100ms
Hash#select-include     70.065k i/100ms
Calculating -------------------------------------
Hash#native-slice         4.222M (± 0.4%) i/s -     21.315M in   5.049056s
Array#each                2.129M (± 1.4%) i/s -     10.750M in   5.049767s
Array#each_w/_object      1.681M (± 0.9%) i/s -      8.486M in   5.048367s
Hash#select-include     711.957k (± 2.4%) i/s -      3.573M in   5.022125s

Comparison:
Hash#native-slice   :  4221572.0 i/s
Array#each          :  2129170.7 i/s - 1.98x  (± 0.00) slower
Array#each_w/_object:  1680994.0 i/s - 2.51x  (± 0.00) slower
Hash#select-include :   711957.3 i/s - 5.93x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?    12.695k i/100ms
         Hash#value?   105.194k i/100ms
Calculating -------------------------------------
Hash#values.include?    126.258k (± 5.5%) i/s -    634.750k in   5.051076s
         Hash#value?      1.048M (± 0.3%) i/s -      5.260M in   5.017726s

Comparison:
         Hash#value?:  1048234.5 i/s
Hash#values.include?:   126258.2 i/s - 8.30x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
                call   651.009k i/100ms
                send   514.330k i/100ms
      method_missing   381.285k i/100ms
Calculating -------------------------------------
                call      6.502M (± 0.4%) i/s -     32.550M in   5.006274s
                send      5.104M (± 0.6%) i/s -     25.716M in   5.038797s
      method_missing      3.818M (± 0.4%) i/s -     19.446M in   5.092990s

Comparison:
                call:  6502040.1 i/s
                send:  5103901.9 i/s - 1.27x  (± 0.00) slower
      method_missing:  3818149.4 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
               Block     9.111k i/100ms
      Symbol#to_proc    10.245k i/100ms
Calculating -------------------------------------
               Block     90.986k (± 0.6%) i/s -    455.550k in   5.006949s
      Symbol#to_proc    100.979k (± 0.4%) i/s -    512.250k in   5.072930s

Comparison:
      Symbol#to_proc:   100978.9 i/s
               Block:    90986.4 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
          block.call   964.722k i/100ms
       block + yield   976.153k i/100ms
        unused block     1.279M i/100ms
               yield     1.144M i/100ms
Calculating -------------------------------------
          block.call      9.668M (± 0.4%) i/s -     49.201M in   5.089151s
       block + yield      9.776M (± 0.3%) i/s -     49.784M in   5.092686s
        unused block     12.826M (± 0.3%) i/s -     65.233M in   5.086179s
               yield     11.444M (± 0.2%) i/s -     58.352M in   5.099204s

Comparison:
        unused block: 12825742.6 i/s
               yield: 11443507.6 i/s - 1.12x  (± 0.00) slower
       block + yield:  9775629.8 i/s - 1.31x  (± 0.00) slower
          block.call:  9667960.3 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
        range#cover?   304.197k i/100ms
      range#include?    12.485k i/100ms
       range#member?    12.490k i/100ms
       plain compare   508.275k i/100ms
Calculating -------------------------------------
        range#cover?      3.060M (± 0.5%) i/s -     15.514M in   5.069560s
      range#include?    124.527k (± 1.0%) i/s -    624.250k in   5.013413s
       range#member?    125.096k (± 0.6%) i/s -    636.990k in   5.092184s
       plain compare      4.893M (± 2.4%) i/s -     24.905M in   5.092408s

Comparison:
       plain compare:  4893410.5 i/s
        range#cover?:  3060310.2 i/s - 1.60x  (± 0.00) slower
       range#member?:   125096.4 i/s - 39.12x  (± 0.00) slower
      range#include?:   124527.4 i/s - 39.30x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
       String#match?   884.605k i/100ms
           String#=~   617.699k i/100ms
          Regexp#===   579.173k i/100ms
        String#match   447.334k i/100ms
Calculating -------------------------------------
       String#match?      8.993M (± 1.4%) i/s -     45.115M in   5.017828s
           String#=~      6.141M (± 0.5%) i/s -     30.885M in   5.029030s
          Regexp#===      5.887M (± 0.5%) i/s -     29.538M in   5.017712s
        String#match      4.482M (± 1.2%) i/s -     22.814M in   5.091037s

Comparison:
       String#match?:  8992839.2 i/s
           String#=~:  6141494.8 i/s - 1.46x  (± 0.00) slower
          Regexp#===:  5886865.4 i/s - 1.53x  (± 0.00) slower
        String#match:  4481956.4 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   638.361k i/100ms
      String#casecmp   808.659k i/100ms
Calculating -------------------------------------
String#downcase + ==      6.408M (± 1.4%) i/s -     32.556M in   5.081737s
      String#casecmp      8.082M (± 0.3%) i/s -     40.433M in   5.002710s

Comparison:
      String#casecmp:  8082296.5 i/s
String#downcase + ==:  6407798.3 i/s - 1.26x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
            String#+   566.839k i/100ms
       String#concat   603.687k i/100ms
       String#append   673.998k i/100ms
         "foo" "bar"     1.163M i/100ms
  "#{'foo'}#{'bar'}"     1.160M i/100ms
Calculating -------------------------------------
            String#+      5.574M (± 0.5%) i/s -     28.342M in   5.085067s
       String#concat      6.027M (± 2.0%) i/s -     30.184M in   5.010766s
       String#append      6.722M (± 0.4%) i/s -     33.700M in   5.013303s
         "foo" "bar"     11.646M (± 0.4%) i/s -     59.316M in   5.093447s
  "#{'foo'}#{'bar'}"     11.562M (± 0.4%) i/s -     57.982M in   5.014977s

Comparison:
         "foo" "bar": 11645698.1 i/s
  "#{'foo'}#{'bar'}": 11562089.1 i/s - same-ish: difference falls within error
       String#append:  6722217.0 i/s - 1.73x  (± 0.00) slower
       String#concat:  6026620.6 i/s - 1.93x  (± 0.00) slower
            String#+:  5573698.8 i/s - 2.09x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
           String#+@   931.091k i/100ms
          String#dup   561.581k i/100ms
Calculating -------------------------------------
           String#+@      9.422M (± 0.3%) i/s -     47.486M in   5.040009s
          String#dup      5.546M (± 0.7%) i/s -     28.079M in   5.062961s

Comparison:
           String#+@:  9421809.8 i/s
          String#dup:  5546223.5 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
           String#=~   193.300k i/100ms
       String#match?   413.205k i/100ms
    String#end_with?   539.510k i/100ms
Calculating -------------------------------------
           String#=~      1.935M (± 0.5%) i/s -      9.858M in   5.094746s
       String#match?      4.126M (± 0.5%) i/s -     20.660M in   5.007095s
    String#end_with?      5.414M (± 0.6%) i/s -     27.515M in   5.081984s

Comparison:
    String#end_with?:  5414416.7 i/s
       String#match?:  4126287.7 i/s - 1.31x  (± 0.00) slower
           String#=~:  1935040.8 i/s - 2.80x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   110.824k i/100ms
          String#sub   138.149k i/100ms
String#dup["string"]=
                       175.462k i/100ms
Calculating -------------------------------------
         String#gsub      1.111M (± 1.7%) i/s -      5.652M in   5.089433s
          String#sub      1.375M (± 0.4%) i/s -      6.907M in   5.023780s
String#dup["string"]=
                          1.751M (± 0.2%) i/s -      8.773M in   5.011036s

Comparison:
String#dup["string"]=:  1750766.6 i/s
          String#sub:  1374975.6 i/s - 1.27x  (± 0.00) slower
         String#gsub:  1110896.9 i/s - 1.58x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
         String#gsub   102.030k i/100ms
           String#tr   321.627k i/100ms
Calculating -------------------------------------
         String#gsub      1.015M (± 1.1%) i/s -      5.102M in   5.026781s
           String#tr      3.240M (± 0.5%) i/s -     16.403M in   5.063304s

Comparison:
           String#tr:  3239658.6 i/s
         String#gsub:  1014981.4 i/s - 3.19x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
      Without Freeze     1.168M i/100ms
         With Freeze     1.682M i/100ms
Calculating -------------------------------------
      Without Freeze     11.663M (± 0.3%) i/s -     58.397M in   5.007154s
         With Freeze     16.988M (± 0.5%) i/s -     85.774M in   5.049333s

Comparison:
         With Freeze: 16987626.4 i/s
      Without Freeze: 11662831.5 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.499k i/100ms
      String#squeeze   157.088k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     34.990k (± 0.7%) i/s -    178.449k in   5.100227s
      String#squeeze      1.566M (± 0.4%) i/s -      7.854M in   5.015304s

Comparison:
      String#squeeze:  1566106.6 i/s
 String#gsub/regex+/:    34990.2 i/s - 44.76x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
           String#=~   282.893k i/100ms
       String#match?   708.370k i/100ms
  String#start_with?   821.677k i/100ms
Calculating -------------------------------------
           String#=~      2.826M (± 0.5%) i/s -     14.145M in   5.004880s
       String#match?      7.004M (± 1.6%) i/s -     35.418M in   5.058292s
  String#start_with?      8.148M (± 0.7%) i/s -     41.084M in   5.042417s

Comparison:
  String#start_with?:  8148003.7 i/s
       String#match?:  7003948.5 i/s - 1.16x  (± 0.00) slower
           String#=~:  2826246.6 i/s - 2.88x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   210.313k i/100ms
    String#[0, n] ==    85.588k i/100ms
   String#[RANGE] ==    74.964k i/100ms
   String#[0...n] ==    46.588k i/100ms
Calculating -------------------------------------
  String#start_with?      2.008M (± 1.3%) i/s -     10.095M in   5.028111s
    String#[0, n] ==    849.857k (± 0.8%) i/s -      4.279M in   5.035725s
   String#[RANGE] ==    745.986k (± 1.6%) i/s -      3.748M in   5.025908s
   String#[0...n] ==    462.548k (± 1.2%) i/s -      2.329M in   5.036752s

Comparison:
  String#start_with?:  2008089.3 i/s
    String#[0, n] ==:   849857.2 i/s - 2.36x  (± 0.00) slower
   String#[RANGE] ==:   745986.2 i/s - 2.69x  (± 0.00) slower
   String#[0...n] ==:   462548.3 i/s - 4.34x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
  String#['string']=   174.356k i/100ms
 String#sub!'string'   124.878k i/100ms
String#gsub!'string'    76.553k i/100ms
  String#[/regexp/]=   160.634k i/100ms
 String#sub!/regexp/   119.941k i/100ms
String#gsub!/regexp/    61.027k i/100ms
Calculating -------------------------------------
  String#['string']=      1.753M (± 0.5%) i/s -      8.892M in   5.073589s
 String#sub!'string'      1.247M (± 1.9%) i/s -      6.244M in   5.007979s
String#gsub!'string'    761.235k (± 2.1%) i/s -      3.828M in   5.030676s
  String#[/regexp/]=      1.616M (± 0.3%) i/s -      8.192M in   5.070761s
 String#sub!/regexp/      1.192M (± 0.5%) i/s -      5.997M in   5.032303s
String#gsub!/regexp/    620.135k (± 0.6%) i/s -      3.112M in   5.019070s

Comparison:
  String#['string']=:  1752688.7 i/s
  String#[/regexp/]=:  1615621.3 i/s - 1.08x  (± 0.00) slower
 String#sub!'string':  1247313.2 i/s - 1.41x  (± 0.00) slower
 String#sub!/regexp/:  1191736.8 i/s - 1.47x  (± 0.00) slower
String#gsub!'string':   761235.1 i/s - 2.30x  (± 0.00) slower
String#gsub!/regexp/:   620135.3 i/s - 2.83x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
          String#sub   149.197k i/100ms
        String#chomp   552.835k i/100ms
String#delete_suffix   593.214k i/100ms
Calculating -------------------------------------
          String#sub      1.499M (± 0.3%) i/s -      7.609M in   5.075290s
        String#chomp      5.500M (± 1.2%) i/s -     27.642M in   5.026538s
String#delete_suffix      5.959M (± 0.4%) i/s -     30.254M in   5.077387s

Comparison:
String#delete_suffix:  5958662.6 i/s
        String#chomp:  5499984.4 i/s - 1.08x  (± 0.00) slower
          String#sub:  1499244.6 i/s - 3.97x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   587.586k i/100ms
          String#sub   154.993k i/100ms
Calculating -------------------------------------
String#delete_prefix      5.800M (± 0.2%) i/s -     29.379M in   5.065354s
          String#sub      1.537M (± 1.7%) i/s -      7.750M in   5.044356s

Comparison:
String#delete_prefix:  5800080.5 i/s
          String#sub:  1536785.7 i/s - 3.77x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   607.744k i/100ms
    String#unpack[0]   464.368k i/100ms
Calculating -------------------------------------
      String#unpack1      6.011M (± 1.5%) i/s -     30.387M in   5.056672s
    String#unpack[0]      4.703M (± 0.5%) i/s -     23.683M in   5.035645s

Comparison:
      String#unpack1:  6010675.4 i/s
    String#unpack[0]:  4703157.6 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
ruby 3.1.7p261 (2025-03-26 revision 0a3704f218) [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    26.797k i/100ms
          Time.parse     9.141k i/100ms
Calculating -------------------------------------
        Time.iso8601    268.249k (± 0.5%) i/s -      1.367M in   5.094816s
          Time.parse     91.876k (± 0.6%) i/s -    466.191k in   5.074316s

Comparison:
        Time.iso8601:   268248.8 i/s
          Time.parse:    91876.0 i/s - 2.92x  (± 0.00) slower

