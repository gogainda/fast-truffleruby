$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       301.786M i/100ms
Function with splat arguments
                         2.036k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.135B (± 3.3%) i/s -     15.693B in   5.012160s
Function with splat arguments
                         21.323k (± 9.2%) i/s -    105.872k in   5.015088s

Comparison:
Function with single Array argument: 3134963570.9 i/s
Function with splat arguments:    21322.9 i/s - 147023.30x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   317.317M i/100ms
Sequential Assignment
                       298.794M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.106B (± 1.7%) i/s -     15.549B in   5.007876s
Sequential Assignment
                          3.081B (± 2.6%) i/s -     15.537B in   5.045736s

Comparison:
 Parallel Assignment: 3105689966.9 i/s
Sequential Assignment: 3081487477.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   316.126M i/100ms
       attr_accessor   313.853M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.036B (± 3.8%) i/s -     15.174B in   5.006245s
       attr_accessor      3.062B (± 3.4%) i/s -     15.379B in   5.029035s

Comparison:
       attr_accessor: 3061795366.6 i/s
   getter_and_setter: 3035880225.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    13.579k i/100ms
         respond_to?   304.259M i/100ms
Calculating -------------------------------------
      begin...rescue    105.237k (± 6.6%) i/s -    529.581k in   5.064528s
         respond_to?      3.089B (± 2.0%) i/s -     15.517B in   5.025744s

Comparison:
         respond_to?: 3088825578.0 i/s
      begin...rescue:   105237.1 i/s - 29351.11x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   298.629M i/100ms
             &method    18.030M i/100ms
Calculating -------------------------------------
              normal      3.059B (± 2.5%) i/s -     15.529B in   5.079045s
             &method    181.980M (± 2.3%) i/s -    919.508M in   5.055736s

Comparison:
              normal: 3059433506.0 i/s
             &method: 181979944.3 i/s - 16.81x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       153.000  i/100ms
       define_method   152.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          3.646k (±55.2%) i/s -      8.109k in   5.027149s
       define_method     11.789k (±46.8%) i/s -     11.856k in   7.458961s

Comparison:
       define_method:    11789.1 i/s
module_eval with string:     3645.6 i/s - 3.23x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   225.839k i/100ms
       Kernel#format   185.198k i/100ms
            String#%   123.735k i/100ms
Calculating -------------------------------------
         Float#round      2.531M (± 2.8%) i/s -     12.647M in   5.000661s
       Kernel#format      1.836M (± 2.6%) i/s -      9.260M in   5.046012s
            String#%      1.237M (± 4.9%) i/s -      6.187M in   5.016317s

Comparison:
         Float#round:  2531098.7 i/s
       Kernel#format:  1836381.3 i/s - 1.38x  (± 0.00) slower
            String#%:  1237317.4 i/s - 2.05x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   306.826M i/100ms
          OpenStruct   296.796M i/100ms
Calculating -------------------------------------
                Hash      3.148B (± 2.0%) i/s -     15.955B in   5.070065s
          OpenStruct      3.144B (± 2.2%) i/s -     15.730B in   5.006445s

Comparison:
                Hash: 3148200425.0 i/s
          OpenStruct: 3143586022.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   300.347M i/100ms
          OpenStruct     5.016k i/100ms
Calculating -------------------------------------
                Hash      2.974B (± 7.7%) i/s -     15.017B in   5.088105s
          OpenStruct     49.642k (±12.4%) i/s -    245.784k in   5.049864s

Comparison:
                Hash: 2973985170.4 i/s
          OpenStruct:    49642.3 i/s - 59908.30x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   948.312k i/100ms
  ancestors.include?   230.901k i/100ms
Calculating -------------------------------------
  less than or equal     10.434M (± 2.8%) i/s -     52.157M in   5.002980s
  ancestors.include?      2.363M (± 9.4%) i/s -     11.776M in   5.046116s

Comparison:
  less than or equal: 10433603.2 i/s
  ancestors.include?:  2362713.4 i/s - 4.42x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     31.911  (± 3.1%) i/s -    160.000  in   5.018535s
         Kernel loop     31.928  (± 0.0%) i/s -    160.000  in   5.012263s

Comparison:
         Kernel loop:       31.9 i/s
          While Loop:       31.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   318.474M i/100ms
         Array#first   312.884M i/100ms
Calculating -------------------------------------
           Array#[0]      3.168B (± 2.1%) i/s -     15.924B in   5.028694s
         Array#first      3.176B (± 1.5%) i/s -     15.957B in   5.024805s

Comparison:
         Array#first: 3176414206.4 i/s
           Array#[0]: 3168111810.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   319.001M i/100ms
          Array#last   313.230M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.112B (± 2.5%) i/s -     15.631B in   5.026366s
          Array#last      3.170B (± 1.4%) i/s -     15.975B in   5.040874s

Comparison:
          Array#last: 3169638412.2 i/s
          Array#[-1]: 3111847772.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   934.743k i/100ms
Calculating -------------------------------------
                find     13.634  (± 0.0%) i/s -     69.000  in   5.063566s
             bsearch      9.435M (± 2.4%) i/s -     47.672M in   5.055917s

Comparison:
             bsearch:  9434937.1 i/s
                find:       13.6 i/s - 692014.75x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.211  (± 0.0%) i/s -      2.000  in   9.483614s
        Array#insert      1.378  (± 0.0%) i/s -      7.000  in   5.079202s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.2 i/s - 6.54x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   317.957M i/100ms
          Array#size   307.117M i/100ms
         Array#count   319.289M i/100ms
Calculating -------------------------------------
        Array#length      3.180B (± 2.1%) i/s -     15.898B in   5.001023s
          Array#size      3.181B (± 1.6%) i/s -     15.970B in   5.021377s
         Array#count      3.153B (± 2.7%) i/s -     15.964B in   5.066472s

Comparison:
          Array#size: 3181283534.5 i/s
        Array#length: 3180392350.0 i/s - same-ish: difference falls within error
         Array#count: 3153408844.7 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    37.573k i/100ms
        Array#sample     3.786M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    376.851k (± 2.4%) i/s -      1.916M in   5.087942s
        Array#sample     37.317M (± 1.4%) i/s -    189.324M in   5.074359s

Comparison:
        Array#sample: 37317497.3 i/s
 Array#shuffle.first:   376850.9 i/s - 99.02x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   920.000  i/100ms
          Date.parse   665.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     19.456k (±45.9%) i/s -     80.960k in   5.005360s
          Date.parse      8.343k (±21.2%) i/s -     39.235k in   5.023762s

Comparison:
        Date.iso8601:    19456.0 i/s
          Date.parse:     8342.9 i/s - 2.33x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   280.403k i/100ms
           Array#map     1.780M i/100ms
Calculating -------------------------------------
   Array#each + push      3.217M (± 2.9%) i/s -     16.263M in   5.060640s
           Array#map     18.592M (±10.0%) i/s -     92.585M in   5.040003s

Comparison:
           Array#map: 18591921.3 i/s
   Array#each + push:  3216573.9 i/s - 5.78x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    11.290M i/100ms
               #each    35.380M i/100ms
Calculating -------------------------------------
            For loop    114.610M (± 0.2%) i/s -    575.811M in   5.024128s
               #each    354.106M (± 1.8%) i/s -      1.804B in   5.097303s

Comparison:
               #each: 354105567.6 i/s
            For loop: 114609845.1 i/s - 3.09x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.400M i/100ms
     each_with_index     2.780M i/100ms
Calculating -------------------------------------
          While Loop     15.086M (± 2.6%) i/s -     75.584M in   5.014364s
     each_with_index     23.663M (± 2.2%) i/s -    119.556M in   5.054938s

Comparison:
     each_with_index: 23662515.8 i/s
          While Loop: 15085677.7 i/s - 1.57x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   306.326k i/100ms
      inject to_proc   311.208k i/100ms
        inject block   310.780k i/100ms
Calculating -------------------------------------
       inject symbol      3.107M (± 1.0%) i/s -     15.623M in   5.028692s
      inject to_proc      3.106M (± 0.6%) i/s -     15.560M in   5.009691s
        inject block      3.109M (± 0.9%) i/s -     15.850M in   5.098932s

Comparison:
        inject block:  3108726.7 i/s
       inject symbol:  3107010.1 i/s - same-ish: difference falls within error
      inject to_proc:  3106155.6 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    22.853k i/100ms
   Array#map.flatten    25.093k i/100ms
      Array#flat_map    54.822k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    252.681k (± 7.3%) i/s -      1.280M in   5.099985s
   Array#map.flatten    258.332k (± 7.1%) i/s -      1.305M in   5.086221s
      Array#flat_map    542.144k (± 7.5%) i/s -      2.741M in   5.099854s

Comparison:
      Array#flat_map:   542144.1 i/s
   Array#map.flatten:   258332.1 i/s - 2.10x  (± 0.00) slower
Array#map.flatten(1):   252681.1 i/s - 2.15x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   305.228k i/100ms
  Array#reverse_each     2.375M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.434M (± 7.1%) i/s -     17.093M in   5.014238s
  Array#reverse_each     23.612M (± 3.2%) i/s -    118.752M in   5.035593s

Comparison:
  Array#reverse_each: 23612027.0 i/s
  Array#reverse.each:  3433884.2 i/s - 6.88x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       946.240k i/100ms
   Enumerable#detect     5.844M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.238M (± 7.6%) i/s -    203.442M in  20.037877s
   Enumerable#detect     58.391M (± 1.7%) i/s -      1.169B in  20.023813s

Comparison:
   Enumerable#detect: 58391099.6 i/s
Enumerable#select.first: 10237821.1 i/s - 5.70x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       372.352k i/100ms
Enumerable#select.last
                       544.247k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.661M (± 6.7%) i/s -     18.245M in   5.019330s
Enumerable#select.last
                          5.279M (± 6.5%) i/s -     26.668M in   5.082565s

Comparison:
Enumerable#select.last:  5279000.5 i/s
Enumerable#reverse.detect:  3661011.0 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.044k i/100ms
  Enumerable#sort_by     4.286k i/100ms
     Enumerable#sort     4.644k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         38.577k (±24.7%) i/s -    165.804k in   5.040363s
  Enumerable#sort_by     40.297k (±17.9%) i/s -    188.584k in   5.101425s
     Enumerable#sort     55.175k (± 4.3%) i/s -    278.640k in   5.061010s

Comparison:
     Enumerable#sort:    55175.4 i/s
  Enumerable#sort_by:    40296.7 i/s - 1.37x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    38577.0 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   937.569k i/100ms
Enumerable#sort_by...first
                         9.946k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      9.461M (± 3.0%) i/s -     47.816M in   5.059011s
Enumerable#sort_by...first
                        112.540k (± 6.4%) i/s -    566.922k in   5.072001s

Comparison:
   Enumerable#min_by:  9460786.5 i/s
Enumerable#sort_by...first:   112540.0 i/s - 84.07x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   662.027k i/100ms
            Hash#dup   770.975k i/100ms
Calculating -------------------------------------
              Hash[]      7.704M (±10.2%) i/s -     38.398M in   5.039032s
            Hash#dup      7.899M (±10.1%) i/s -     39.320M in   5.047870s

Comparison:
            Hash#dup:  7899170.4 i/s
              Hash[]:  7703511.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   315.583M i/100ms
  Hash#fetch, symbol   309.595M i/100ms
     Hash#[], string    29.096M i/100ms
  Hash#fetch, string    26.769M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.205B (± 1.3%) i/s -     16.095B in   5.023183s
  Hash#fetch, symbol      3.192B (± 1.8%) i/s -     16.099B in   5.045886s
     Hash#[], string    291.100M (± 1.2%) i/s -      1.484B in   5.098428s
  Hash#fetch, string    265.781M (± 2.3%) i/s -      1.338B in   5.038623s

Comparison:
     Hash#[], symbol: 3204681797.4 i/s
  Hash#fetch, symbol: 3191605919.3 i/s - same-ish: difference falls within error
     Hash#[], string: 291099632.6 i/s - 11.01x  (± 0.00) slower
  Hash#fetch, string: 265781286.9 i/s - 12.06x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    91.511M i/100ms
             Hash#[]    91.735M i/100ms
          Hash#[] ||    90.710M i/100ms
          Hash#[] &&    91.894M i/100ms
          Hash#fetch    91.846M i/100ms
 Hash#fetch fallback    91.823M i/100ms
Calculating -------------------------------------
            Hash#dig    914.398M (± 1.5%) i/s -      4.576B in   5.005045s
             Hash#[]    916.129M (± 1.0%) i/s -      4.587B in   5.007213s
          Hash#[] ||    910.622M (± 2.1%) i/s -      4.626B in   5.082571s
          Hash#[] &&    917.220M (± 0.7%) i/s -      4.595B in   5.009592s
          Hash#fetch    906.701M (± 3.1%) i/s -      4.592B in   5.070216s
 Hash#fetch fallback    914.198M (± 1.3%) i/s -      4.591B in   5.022903s

Comparison:
          Hash#[] &&: 917219976.3 i/s
             Hash#[]: 916129067.5 i/s - same-ish: difference falls within error
            Hash#dig: 914398377.7 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 914197937.0 i/s - same-ish: difference falls within error
          Hash#[] ||: 910622343.7 i/s - same-ish: difference falls within error
          Hash#fetch: 906700796.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   308.685M i/100ms
  Hash#fetch + block   308.232M i/100ms
    Hash#fetch + arg   321.285M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.167B (± 1.9%) i/s -     16.052B in   5.069550s
  Hash#fetch + block      3.179B (± 2.1%) i/s -     16.028B in   5.043845s
    Hash#fetch + arg      3.199B (± 1.2%) i/s -     16.064B in   5.023112s

Comparison:
    Hash#fetch + arg: 3198563648.2 i/s
  Hash#fetch + block: 3179266510.7 i/s - same-ish: difference falls within error
  Hash#fetch + const: 3167498899.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    22.343k i/100ms
         sort + to_h     2.845k i/100ms
Calculating -------------------------------------
      sort_by + to_h    483.912k (± 8.0%) i/s -      2.413M in   5.023807s
         sort + to_h    226.810k (±13.7%) i/s -      1.095M in   5.003356s

Comparison:
      sort_by + to_h:   483912.0 i/s
         sort + to_h:   226809.8 i/s - 2.13x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   205.973k i/100ms
       Hash#each_key   224.583k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.272M (± 9.3%) i/s -     11.123M in   5.000341s
       Hash#each_key      2.417M (± 2.3%) i/s -     12.127M in   5.020316s

Comparison:
       Hash#each_key:  2417036.1 i/s
      Hash#keys.each:  2271706.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   283.000  i/100ms
           Hash#key?     3.442M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      3.043k (±13.5%) i/s -     14.999k in   5.040772s
           Hash#key?     34.589M (± 0.3%) i/s -    175.536M in   5.074885s

Comparison:
           Hash#key?: 34589361.8 i/s
  Hash#keys.include?:     3042.9 i/s - 11367.38x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    53.266k i/100ms
            Hash#[]=    62.199k i/100ms
Calculating -------------------------------------
         Hash#merge!    552.051k (± 8.6%) i/s -      2.770M in   5.059612s
            Hash#[]=    629.043k (± 8.2%) i/s -      3.172M in   5.085196s

Comparison:
            Hash#[]=:   629042.8 i/s
         Hash#merge!:   552051.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        35.836k i/100ms
      Hash#merge({})    20.061k i/100ms
 Hash#dup#merge!({})    31.661k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        413.193k (± 9.0%) i/s -      2.078M in   5.074949s
      Hash#merge({})    201.417k (± 9.7%) i/s -      1.003M in   5.049216s
 Hash#dup#merge!({})    313.808k (± 9.7%) i/s -      1.551M in   5.004623s

Comparison:
{}#merge!(Hash) do end:   413193.4 i/s
 Hash#dup#merge!({}):   313807.8 i/s - 1.32x  (± 0.00) slower
      Hash#merge({}):   201417.0 i/s - 2.05x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   312.342M i/100ms
          Hash#merge   315.747M i/100ms
Calculating -------------------------------------
        Hash#**other      3.193B (± 1.8%) i/s -     16.242B in   5.088001s
          Hash#merge      3.177B (± 3.1%) i/s -     16.103B in   5.075130s

Comparison:
        Hash#**other: 3193233587.2 i/s
          Hash#merge: 3176635524.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.060k i/100ms
         Hash#merge!    59.369k i/100ms
Calculating -------------------------------------
          Hash#merge     12.101k (±10.4%) i/s -     60.420k in   5.055612s
         Hash#merge!    622.326k (± 4.4%) i/s -      3.147M in   5.067004s

Comparison:
         Hash#merge!:   622325.6 i/s
          Hash#merge:    12100.6 i/s - 51.43x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.520M i/100ms
Array#each               1.611M i/100ms
Array#each_w/_object     1.597M i/100ms
Hash#select-include      2.548M i/100ms
Calculating -------------------------------------
Hash#native-slice        19.596M (± 6.8%) i/s -     98.806M in   5.076200s
Array#each               15.804M (± 5.9%) i/s -     78.958M in   5.020853s
Array#each_w/_object     15.763M (± 6.8%) i/s -     79.834M in   5.097333s
Hash#select-include      24.536M (± 6.6%) i/s -    122.283M in   5.014355s

Comparison:
Hash#select-include : 24536111.5 i/s
Hash#native-slice   : 19596458.5 i/s - 1.25x  (± 0.00) slower
Array#each          : 15803818.3 i/s - 1.55x  (± 0.00) slower
Array#each_w/_object: 15762781.8 i/s - 1.56x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   264.000  i/100ms
         Hash#value?   685.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      3.020k (±12.3%) i/s -     15.048k in   5.080538s
         Hash#value?      6.847k (± 0.7%) i/s -     34.250k in   5.002241s

Comparison:
         Hash#value?:     6847.2 i/s
Hash#values.include?:     3019.9 i/s - 2.27x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   317.705M i/100ms
                send   310.859M i/100ms
      method_missing   318.661M i/100ms
Calculating -------------------------------------
                call      3.152B (± 1.9%) i/s -     15.885B in   5.041286s
                send      3.152B (± 1.9%) i/s -     15.854B in   5.031252s
      method_missing      3.166B (± 2.4%) i/s -     15.933B in   5.035426s

Comparison:
      method_missing: 3166110123.1 i/s
                call: 3152251810.2 i/s - same-ish: difference falls within error
                send: 3152211551.0 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    65.297k i/100ms
      Symbol#to_proc    70.032k i/100ms
Calculating -------------------------------------
               Block    758.776k (±10.1%) i/s -      3.787M in   5.060333s
      Symbol#to_proc    738.521k (±12.8%) i/s -      3.642M in   5.023170s

Comparison:
               Block:   758776.0 i/s
      Symbol#to_proc:   738520.9 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   309.385M i/100ms
       block + yield   302.201M i/100ms
        unused block   321.126M i/100ms
               yield   318.491M i/100ms
Calculating -------------------------------------
          block.call      3.189B (± 1.6%) i/s -     16.088B in   5.045549s
       block + yield      3.169B (± 2.6%) i/s -     16.017B in   5.057370s
        unused block      3.163B (± 2.0%) i/s -     16.056B in   5.077995s
               yield      3.178B (± 1.1%) i/s -     15.925B in   5.011191s

Comparison:
          block.call: 3189382629.2 i/s
               yield: 3178185844.8 i/s - same-ish: difference falls within error
       block + yield: 3169284595.9 i/s - same-ish: difference falls within error
        unused block: 3163276037.0 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     5.846k i/100ms
      range#include?   155.000  i/100ms
       range#member?   210.000  i/100ms
       plain compare     9.020k i/100ms
Calculating -------------------------------------
        range#cover?     57.482k (±20.6%) i/s -    268.916k in   5.036466s
      range#include?      2.473k (±20.9%) i/s -     11.470k in   5.042641s
       range#member?      2.559k (±21.3%) i/s -     12.180k in   5.158431s
       plain compare     92.660k (±18.5%) i/s -    441.980k in   5.039352s

Comparison:
       plain compare:    92659.5 i/s
        range#cover?:    57482.2 i/s - 1.61x  (± 0.00) slower
       range#member?:     2558.9 i/s - 36.21x  (± 0.00) slower
      range#include?:     2472.7 i/s - 37.47x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    14.228M i/100ms
           String#=~    13.914M i/100ms
          Regexp#===    13.969M i/100ms
        String#match    13.934M i/100ms
Calculating -------------------------------------
       String#match?    145.807M (± 0.2%) i/s -    739.855M in   5.074216s
           String#=~    139.005M (± 1.5%) i/s -    695.702M in   5.006046s
          Regexp#===    138.230M (± 3.8%) i/s -    698.449M in   5.061770s
        String#match    138.964M (± 2.0%) i/s -    696.704M in   5.015705s

Comparison:
       String#match?: 145807422.7 i/s
           String#=~: 139004911.8 i/s - 1.05x  (± 0.00) slower
        String#match: 138963922.5 i/s - 1.05x  (± 0.00) slower
          Regexp#===: 138230181.8 i/s - 1.05x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.757M i/100ms
      String#casecmp     4.628M i/100ms
Calculating -------------------------------------
String#downcase + ==     30.320M (± 5.1%) i/s -    151.656M in   5.015512s
      String#casecmp     49.899M (± 5.5%) i/s -    249.934M in   5.024634s

Comparison:
      String#casecmp: 49899354.5 i/s
String#downcase + ==: 30319795.9 i/s - 1.65x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     8.838M i/100ms
       String#concat    10.467M i/100ms
       String#append    10.450M i/100ms
         "foo" "bar"   315.146M i/100ms
  "#{'foo'}#{'bar'}"     9.045M i/100ms
Calculating -------------------------------------
            String#+     88.426M (± 6.2%) i/s -    441.897M in   5.028133s
       String#concat    102.442M (± 5.8%) i/s -    512.897M in   5.030256s
       String#append    101.804M (± 7.1%) i/s -    512.031M in   5.065839s
         "foo" "bar"      3.079B (± 2.8%) i/s -     15.442B in   5.019133s
  "#{'foo'}#{'bar'}"     88.233M (± 5.9%) i/s -    443.185M in   5.048503s

Comparison:
         "foo" "bar": 3079172212.8 i/s
       String#concat: 102442267.7 i/s - 30.06x  (± 0.00) slower
       String#append: 101804436.7 i/s - 30.25x  (± 0.00) slower
            String#+: 88425582.5 i/s - 34.82x  (± 0.00) slower
  "#{'foo'}#{'bar'}": 88233492.5 i/s - 34.90x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   307.695M i/100ms
          String#dup   309.321M i/100ms
Calculating -------------------------------------
           String#+@      3.183B (± 1.1%) i/s -     16.000B in   5.027033s
          String#dup      3.175B (± 2.0%) i/s -     16.085B in   5.068099s

Comparison:
           String#+@: 3183231574.5 i/s
          String#dup: 3175118587.0 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.504M i/100ms
       String#match?     1.783M i/100ms
    String#end_with?    13.385M i/100ms
Calculating -------------------------------------
           String#=~     15.187M (± 2.2%) i/s -     76.696M in   5.052802s
       String#match?     17.923M (± 1.5%) i/s -     90.957M in   5.076155s
    String#end_with?    132.498M (± 3.7%) i/s -    669.265M in   5.059128s

Comparison:
    String#end_with?: 132497977.8 i/s
       String#match?: 17922870.7 i/s - 7.39x  (± 0.00) slower
           String#=~: 15186630.2 i/s - 8.72x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   114.603k i/100ms
          String#sub   969.482k i/100ms
String#dup["string"]=
                        10.363M i/100ms
Calculating -------------------------------------
         String#gsub      8.417M (±13.4%) i/s -     40.684M in   5.006588s
          String#sub      9.920M (± 9.6%) i/s -     49.444M in   5.038228s
String#dup["string"]=
                        103.101M (± 2.1%) i/s -    518.143M in   5.027994s

Comparison:
String#dup["string"]=: 103101222.3 i/s
          String#sub:  9919924.8 i/s - 10.39x  (± 0.00) slower
         String#gsub:  8417212.6 i/s - 12.25x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    90.416k i/100ms
           String#tr   192.117k i/100ms
Calculating -------------------------------------
         String#gsub      4.502M (±13.3%) i/s -     21.881M in   5.013715s
           String#tr      1.925M (± 5.0%) i/s -      9.606M in   5.002201s

Comparison:
         String#gsub:  4501674.6 i/s
           String#tr:  1925372.5 i/s - 2.34x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   320.718M i/100ms
         With Freeze   317.433M i/100ms
Calculating -------------------------------------
      Without Freeze      3.149B (± 3.2%) i/s -     16.036B in   5.097127s
         With Freeze      3.155B (± 2.4%) i/s -     15.872B in   5.032992s

Comparison:
         With Freeze: 3155367280.8 i/s
      Without Freeze: 3149465527.9 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     9.444k i/100ms
      String#squeeze    83.104k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    163.931k (± 9.8%) i/s -    812.184k in   5.019866s
      String#squeeze    863.174k (± 5.7%) i/s -      4.321M in   5.023502s

Comparison:
      String#squeeze:   863174.3 i/s
 String#gsub/regex+/:   163930.9 i/s - 5.27x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     8.289M i/100ms
       String#match?    13.982M i/100ms
  String#start_with?    17.869M i/100ms
Calculating -------------------------------------
           String#=~    108.492M (± 4.5%) i/s -    547.105M in   5.053165s
       String#match?    139.100M (± 1.9%) i/s -    699.107M in   5.027953s
  String#start_with?    176.345M (± 2.9%) i/s -    893.451M in   5.071087s

Comparison:
  String#start_with?: 176344772.7 i/s
       String#match?: 139100124.7 i/s - 1.27x  (± 0.00) slower
           String#=~: 108491700.6 i/s - 1.63x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   389.094k i/100ms
    String#[0, n] ==   227.825k i/100ms
   String#[RANGE] ==   286.806k i/100ms
   String#[0...n] ==   203.975k i/100ms
Calculating -------------------------------------
  String#start_with?      3.937M (± 0.8%) i/s -     19.844M in   5.041260s
    String#[0, n] ==      2.445M (± 3.9%) i/s -     12.303M in   5.039164s
   String#[RANGE] ==      3.130M (± 2.9%) i/s -     15.774M in   5.043807s
   String#[0...n] ==      2.028M (± 3.1%) i/s -     10.199M in   5.034982s

Comparison:
  String#start_with?:  3936524.5 i/s
   String#[RANGE] ==:  3130121.1 i/s - 1.26x  (± 0.00) slower
    String#[0, n] ==:  2445381.6 i/s - 1.61x  (± 0.00) slower
   String#[0...n] ==:  2027608.3 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     9.641M i/100ms
 String#sub!'string'   157.174k i/100ms
String#gsub!'string'   613.375k i/100ms
  String#[/regexp/]=    10.308M i/100ms
 String#sub!/regexp/     1.271M i/100ms
String#gsub!/regexp/   768.671k i/100ms
Calculating -------------------------------------
  String#['string']=    101.531M (± 1.8%) i/s -    510.957M in   5.034352s
 String#sub!'string'     11.447M (±15.0%) i/s -     55.011M in   5.002384s
String#gsub!'string'      6.368M (± 7.5%) i/s -     31.895M in   5.046374s
  String#[/regexp/]=    102.602M (± 1.8%) i/s -    515.411M in   5.025101s
 String#sub!/regexp/     33.648M (± 6.5%) i/s -    167.829M in   5.015410s
String#gsub!/regexp/      9.364M (± 9.2%) i/s -     46.889M in   5.060344s

Comparison:
  String#[/regexp/]=: 102601759.6 i/s
  String#['string']=: 101530773.5 i/s - same-ish: difference falls within error
 String#sub!/regexp/: 33648167.3 i/s - 3.05x  (± 0.00) slower
 String#sub!'string': 11447166.7 i/s - 8.96x  (± 0.00) slower
String#gsub!/regexp/:  9364189.7 i/s - 10.96x  (± 0.00) slower
String#gsub!'string':  6367601.5 i/s - 16.11x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.295M i/100ms
        String#chomp     6.407M i/100ms
String#delete_suffix    11.515M i/100ms
Calculating -------------------------------------
          String#sub     77.034M (± 9.8%) i/s -    380.768M in   5.013560s
        String#chomp     63.842M (± 1.6%) i/s -    320.365M in   5.019494s
String#delete_suffix    120.580M (± 7.4%) i/s -    610.281M in   5.090839s

Comparison:
String#delete_suffix: 120580496.0 i/s
          String#sub: 77034486.0 i/s - 1.57x  (± 0.00) slower
        String#chomp: 63841985.4 i/s - 1.89x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   312.838M i/100ms
          String#sub     2.648M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.092B (± 1.9%) i/s -     15.642B in   5.061396s
          String#sub    339.323M (± 4.6%) i/s -      1.692B in   5.002943s

Comparison:
String#delete_prefix: 3091540142.2 i/s
          String#sub: 339323313.0 i/s - 9.11x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     2.041M i/100ms
    String#unpack[0]     2.167M i/100ms
Calculating -------------------------------------
      String#unpack1     21.375M (± 3.1%) i/s -    108.170M in   5.065595s
    String#unpack[0]     21.237M (± 6.4%) i/s -    106.165M in   5.028304s

Comparison:
      String#unpack1: 21375096.7 i/s
    String#unpack[0]: 21237181.4 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 25.0.0-dev-ac88a0fe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    49.855k i/100ms
          Time.parse   343.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    849.164k (±10.3%) i/s -      4.188M in   5.010510s
          Time.parse      6.180k (±10.2%) i/s -     30.527k in   5.011770s

Comparison:
        Time.iso8601:   849164.5 i/s
          Time.parse:     6180.1 i/s - 137.40x  (± 0.00) slower

