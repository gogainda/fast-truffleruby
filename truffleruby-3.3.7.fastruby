$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       314.458M i/100ms
Function with splat arguments
                         1.976k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.167B (± 3.4%) i/s -     16.037B in   5.070009s
Function with splat arguments
                         20.723k (±10.5%) i/s -    102.752k in   5.030989s

Comparison:
Function with single Array argument: 3167275141.4 i/s
Function with splat arguments:    20722.7 i/s - 152840.55x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   317.431M i/100ms
Sequential Assignment
                       311.326M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.162B (± 2.8%) i/s -     15.872B in   5.023788s
Sequential Assignment
                          3.196B (± 1.4%) i/s -     16.189B in   5.065946s

Comparison:
Sequential Assignment: 3196343144.2 i/s
 Parallel Assignment: 3161832091.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   316.728M i/100ms
       attr_accessor   318.713M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.183B (± 2.0%) i/s -     16.153B in   5.077410s
       attr_accessor      3.186B (± 2.7%) i/s -     15.936B in   5.006464s

Comparison:
       attr_accessor: 3185512955.4 i/s
   getter_and_setter: 3182683005.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     9.708k i/100ms
         respond_to?   321.811M i/100ms
Calculating -------------------------------------
      begin...rescue    104.604k (± 6.5%) i/s -    524.232k in   5.040443s
         respond_to?      3.193B (± 2.5%) i/s -     16.091B in   5.043219s

Comparison:
         respond_to?: 3192732638.8 i/s
      begin...rescue:   104603.8 i/s - 30522.13x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   314.835M i/100ms
             &method    18.219M i/100ms
Calculating -------------------------------------
              normal      3.161B (± 3.9%) i/s -     16.057B in   5.088158s
             &method    181.213M (± 2.4%) i/s -    910.942M in   5.029934s

Comparison:
              normal: 3161066934.3 i/s
             &method: 181212701.9 i/s - 17.44x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       122.000  i/100ms
       define_method   246.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          4.304k (±43.2%) i/s -      8.174k in   5.004059s
       define_method     10.716k (±53.0%) i/s -     11.070k in   5.313009s

Comparison:
       define_method:    10716.0 i/s
module_eval with string:     4304.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   267.068k i/100ms
       Kernel#format   183.861k i/100ms
            String#%   183.890k i/100ms
Calculating -------------------------------------
         Float#round      2.694M (± 5.9%) i/s -     13.620M in   5.080687s
       Kernel#format      1.807M (± 5.7%) i/s -      9.009M in   5.008938s
            String#%      1.777M (± 5.8%) i/s -      9.011M in   5.096428s

Comparison:
         Float#round:  2694458.4 i/s
       Kernel#format:  1807155.6 i/s - 1.49x  (± 0.00) slower
            String#%:  1776638.0 i/s - 1.52x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   316.964M i/100ms
          OpenStruct   311.871M i/100ms
Calculating -------------------------------------
                Hash      3.181B (± 2.1%) i/s -     16.165B in   5.084429s
          OpenStruct      3.199B (± 1.5%) i/s -     16.217B in   5.070850s

Comparison:
          OpenStruct: 3198876421.3 i/s
                Hash: 3180839590.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   321.011M i/100ms
          OpenStruct     4.550k i/100ms
Calculating -------------------------------------
                Hash      3.157B (± 3.2%) i/s -     16.051B in   5.090377s
          OpenStruct     44.684k (±18.2%) i/s -    213.850k in   5.014873s

Comparison:
                Hash: 3156599723.3 i/s
          OpenStruct:    44684.2 i/s - 70642.47x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   709.228k i/100ms
  ancestors.include?   225.529k i/100ms
Calculating -------------------------------------
  less than or equal      9.969M (± 4.3%) i/s -     50.355M in   5.061524s
  ancestors.include?      2.366M (± 3.4%) i/s -     11.953M in   5.057781s

Comparison:
  less than or equal:  9968871.5 i/s
  ancestors.include?:  2366096.9 i/s - 4.21x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     31.732  (± 3.2%) i/s -    159.000  in   5.023829s
         Kernel loop     31.721  (± 6.3%) i/s -    159.000  in   5.030472s

Comparison:
          While Loop:       31.7 i/s
         Kernel loop:       31.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   320.657M i/100ms
         Array#first   315.957M i/100ms
Calculating -------------------------------------
           Array#[0]      3.167B (± 3.0%) i/s -     16.033B in   5.066593s
         Array#first      3.174B (± 2.4%) i/s -     16.114B in   5.080320s

Comparison:
         Array#first: 3173727548.2 i/s
           Array#[0]: 3167441796.7 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   319.561M i/100ms
          Array#last   315.634M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.191B (± 2.0%) i/s -     15.978B in   5.009545s
          Array#last      3.180B (± 2.3%) i/s -     16.097B in   5.064543s

Comparison:
          Array#[-1]: 3190896087.0 i/s
          Array#last: 3180210680.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   922.730k i/100ms
Calculating -------------------------------------
                find     13.652  (± 0.0%) i/s -     69.000  in   5.057359s
             bsearch      9.364M (± 2.5%) i/s -     47.059M in   5.028592s

Comparison:
             bsearch:  9364342.9 i/s
                find:       13.7 i/s - 685911.36x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.210  (± 0.0%) i/s -      2.000  in   9.521670s
        Array#insert      1.383  (± 0.0%) i/s -      7.000  in   5.060587s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.2 i/s - 6.59x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   315.365M i/100ms
          Array#size   318.300M i/100ms
         Array#count   321.311M i/100ms
Calculating -------------------------------------
        Array#length      3.191B (± 1.4%) i/s -     16.084B in   5.041586s
          Array#size      3.194B (± 1.5%) i/s -     16.233B in   5.083945s
         Array#count      3.193B (± 1.9%) i/s -     16.066B in   5.033301s

Comparison:
          Array#size: 3193825868.1 i/s
         Array#count: 3193058979.8 i/s - same-ish: difference falls within error
        Array#length: 3190822555.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    33.191k i/100ms
        Array#sample     3.768M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    379.664k (± 2.7%) i/s -      1.925M in   5.074443s
        Array#sample     37.652M (± 1.7%) i/s -    188.397M in   5.005143s

Comparison:
        Array#sample: 37652027.1 i/s
 Array#shuffle.first:   379663.9 i/s - 99.17x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   933.000  i/100ms
          Date.parse   691.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     19.133k (±39.2%) i/s -     83.970k in   5.019419s
          Date.parse      8.140k (±20.6%) i/s -     38.696k in   5.012302s

Comparison:
        Date.iso8601:    19132.9 i/s
          Date.parse:     8139.7 i/s - 2.35x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   298.846k i/100ms
           Array#map     1.899M i/100ms
Calculating -------------------------------------
   Array#each + push      3.216M (± 4.9%) i/s -     16.138M in   5.031474s
           Array#map     19.312M (± 9.0%) i/s -     96.825M in   5.062291s

Comparison:
           Array#map: 19312185.7 i/s
   Array#each + push:  3215872.6 i/s - 6.01x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    11.664M i/100ms
               #each    35.328M i/100ms
Calculating -------------------------------------
            For loop    117.645M (± 1.8%) i/s -    594.842M in   5.058084s
               #each    351.826M (± 1.4%) i/s -      1.766B in   5.021736s

Comparison:
               #each: 351825731.3 i/s
            For loop: 117644951.6 i/s - 2.99x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.441M i/100ms
     each_with_index     2.727M i/100ms
Calculating -------------------------------------
          While Loop     14.560M (± 4.2%) i/s -     73.495M in   5.057020s
     each_with_index     24.021M (± 5.5%) i/s -    119.966M in   5.008029s

Comparison:
     each_with_index: 24020514.6 i/s
          While Loop: 14560223.4 i/s - 1.65x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   307.432k i/100ms
      inject to_proc   311.337k i/100ms
        inject block   311.005k i/100ms
Calculating -------------------------------------
       inject symbol      3.090M (± 2.4%) i/s -     15.679M in   5.077999s
      inject to_proc      3.097M (± 1.8%) i/s -     15.567M in   5.028192s
        inject block      3.109M (± 0.2%) i/s -     15.550M in   5.002185s

Comparison:
        inject block:  3108710.5 i/s
      inject to_proc:  3097052.9 i/s - same-ish: difference falls within error
       inject symbol:  3089588.6 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    22.575k i/100ms
   Array#map.flatten    25.395k i/100ms
      Array#flat_map    57.774k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    257.968k (± 8.1%) i/s -      1.287M in   5.031950s
   Array#map.flatten    266.044k (± 6.8%) i/s -      1.346M in   5.090573s
      Array#flat_map    567.556k (± 4.1%) i/s -      2.889M in   5.099154s

Comparison:
      Array#flat_map:   567555.5 i/s
   Array#map.flatten:   266044.3 i/s - 2.13x  (± 0.00) slower
Array#map.flatten(1):   257968.0 i/s - 2.20x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   331.686k i/100ms
  Array#reverse_each     2.370M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.401M (± 6.4%) i/s -     16.916M in   5.003748s
  Array#reverse_each     25.814M (±10.1%) i/s -    127.993M in   5.006620s

Comparison:
  Array#reverse_each: 25814078.2 i/s
  Array#reverse.each:  3400625.7 i/s - 7.59x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       948.530k i/100ms
   Enumerable#detect     4.644M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.353M (± 7.1%) i/s -    205.831M in  20.020056s
   Enumerable#detect     46.329M (± 2.4%) i/s -    928.779M in  20.060555s

Comparison:
   Enumerable#detect: 46329027.2 i/s
Enumerable#select.first: 10353248.7 i/s - 4.47x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       342.205k i/100ms
Enumerable#select.last
                       548.298k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.663M (± 6.1%) i/s -     18.479M in   5.071681s
Enumerable#select.last
                          5.332M (± 6.2%) i/s -     26.867M in   5.064952s

Comparison:
Enumerable#select.last:  5331988.3 i/s
Enumerable#reverse.detect:  3663260.9 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.955k i/100ms
  Enumerable#sort_by     1.307k i/100ms
     Enumerable#sort     3.204k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         35.657k (±30.2%) i/s -    146.335k in   5.075545s
  Enumerable#sort_by     31.456k (±33.0%) i/s -    134.621k in   5.025030s
     Enumerable#sort     49.162k (± 6.3%) i/s -    246.708k in   5.039430s

Comparison:
     Enumerable#sort:    49162.0 i/s
Enumerable#sort_by (Symbol#to_proc):    35656.9 i/s - same-ish: difference falls within error
  Enumerable#sort_by:    31455.6 i/s - 1.56x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   991.416k i/100ms
Enumerable#sort_by...first
                         9.779k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      9.927M (± 2.2%) i/s -     50.562M in   5.096055s
Enumerable#sort_by...first
                        112.965k (± 5.7%) i/s -    576.961k in   5.133550s

Comparison:
   Enumerable#min_by:  9927173.7 i/s
Enumerable#sort_by...first:   112964.6 i/s - 87.88x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   644.900k i/100ms
            Hash#dup   771.012k i/100ms
Calculating -------------------------------------
              Hash[]      7.717M (± 9.8%) i/s -     38.049M in   5.002570s
            Hash#dup      7.536M (± 9.7%) i/s -     37.780M in   5.067727s

Comparison:
              Hash[]:  7717032.8 i/s
            Hash#dup:  7535563.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   319.696M i/100ms
  Hash#fetch, symbol   313.789M i/100ms
     Hash#[], string    29.086M i/100ms
  Hash#fetch, string    26.801M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.178B (± 2.5%) i/s -     15.985B in   5.032749s
  Hash#fetch, symbol      3.172B (± 2.8%) i/s -     16.003B in   5.049682s
     Hash#[], string    290.003M (± 2.1%) i/s -      1.454B in   5.017234s
  Hash#fetch, string    266.517M (± 1.6%) i/s -      1.340B in   5.029392s

Comparison:
     Hash#[], symbol: 3178235435.8 i/s
  Hash#fetch, symbol: 3171951184.2 i/s - same-ish: difference falls within error
     Hash#[], string: 290003106.2 i/s - 10.96x  (± 0.00) slower
  Hash#fetch, string: 266516528.3 i/s - 11.93x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    91.240M i/100ms
             Hash#[]    90.806M i/100ms
          Hash#[] ||    91.861M i/100ms
          Hash#[] &&    91.900M i/100ms
          Hash#fetch    91.516M i/100ms
 Hash#fetch fallback    91.898M i/100ms
Calculating -------------------------------------
            Hash#dig    913.975M (± 1.6%) i/s -      4.653B in   5.092574s
             Hash#[]    918.169M (± 0.3%) i/s -      4.631B in   5.043866s
          Hash#[] ||    917.573M (± 0.3%) i/s -      4.593B in   5.005695s
          Hash#[] &&    915.314M (± 1.6%) i/s -      4.595B in   5.021414s
          Hash#fetch    910.618M (± 2.4%) i/s -      4.576B in   5.028160s
 Hash#fetch fallback    916.794M (± 0.8%) i/s -      4.595B in   5.012308s

Comparison:
             Hash#[]: 918169253.2 i/s
          Hash#[] ||: 917573477.9 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 916793534.7 i/s - same-ish: difference falls within error
          Hash#[] &&: 915313877.7 i/s - same-ish: difference falls within error
            Hash#dig: 913974553.0 i/s - same-ish: difference falls within error
          Hash#fetch: 910618031.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   314.609M i/100ms
  Hash#fetch + block   297.977M i/100ms
    Hash#fetch + arg   321.710M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.152B (± 2.7%) i/s -     16.045B in   5.094542s
  Hash#fetch + block      3.159B (± 2.4%) i/s -     15.793B in   5.001821s
    Hash#fetch + arg      3.169B (± 1.8%) i/s -     16.086B in   5.077831s

Comparison:
    Hash#fetch + arg: 3168908585.0 i/s
  Hash#fetch + block: 3159337656.1 i/s - same-ish: difference falls within error
  Hash#fetch + const: 3151917007.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    37.758k i/100ms
         sort + to_h    15.663k i/100ms
Calculating -------------------------------------
      sort_by + to_h    553.483k (±18.5%) i/s -      2.643M in   5.020378s
         sort + to_h    260.573k (± 6.7%) i/s -      1.300M in   5.012684s

Comparison:
      sort_by + to_h:   553482.7 i/s
         sort + to_h:   260572.9 i/s - 2.12x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   213.026k i/100ms
       Hash#each_key   232.104k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.091M (±10.9%) i/s -     10.225M in   5.009698s
       Hash#each_key      2.270M (± 5.7%) i/s -     11.373M in   5.034173s

Comparison:
       Hash#each_key:  2269692.0 i/s
      Hash#keys.each:  2090719.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   294.000  i/100ms
           Hash#key?    15.536M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      3.098k (±14.1%) i/s -     15.288k in   5.057909s
           Hash#key?    155.849M (± 1.4%) i/s -    792.329M in   5.084991s

Comparison:
           Hash#key?: 155848623.6 i/s
  Hash#keys.include?:     3098.0 i/s - 50305.43x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    54.469k i/100ms
            Hash#[]=    61.151k i/100ms
Calculating -------------------------------------
         Hash#merge!    602.112k (± 7.3%) i/s -      2.996M in   5.012947s
            Hash#[]=    611.703k (± 8.2%) i/s -      3.058M in   5.038455s

Comparison:
            Hash#[]=:   611702.8 i/s
         Hash#merge!:   602111.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        43.454k i/100ms
      Hash#merge({})    19.284k i/100ms
 Hash#dup#merge!({})    32.083k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        388.400k (± 9.4%) i/s -      1.955M in   5.084340s
      Hash#merge({})    199.251k (± 8.4%) i/s -      1.003M in   5.082227s
 Hash#dup#merge!({})    317.977k (± 8.1%) i/s -      1.604M in   5.085613s

Comparison:
{}#merge!(Hash) do end:   388400.5 i/s
 Hash#dup#merge!({}):   317977.4 i/s - 1.22x  (± 0.00) slower
      Hash#merge({}):   199250.7 i/s - 1.95x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   313.890M i/100ms
          Hash#merge   319.906M i/100ms
Calculating -------------------------------------
        Hash#**other      3.175B (± 2.2%) i/s -     16.008B in   5.045347s
          Hash#merge      3.176B (± 2.4%) i/s -     15.995B in   5.039414s

Comparison:
          Hash#merge: 3176045383.4 i/s
        Hash#**other: 3174587332.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.086k i/100ms
         Hash#merge!    55.040k i/100ms
Calculating -------------------------------------
          Hash#merge     11.590k (±10.7%) i/s -     57.558k in   5.030844s
         Hash#merge!    590.948k (± 6.7%) i/s -      2.972M in   5.055052s

Comparison:
         Hash#merge!:   590948.4 i/s
          Hash#merge:    11590.2 i/s - 50.99x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.381M i/100ms
Array#each               1.472M i/100ms
Array#each_w/_object     1.483M i/100ms
Hash#select-include      2.546M i/100ms
Calculating -------------------------------------
Hash#native-slice        19.088M (± 7.0%) i/s -     95.277M in   5.027403s
Array#each               15.264M (± 6.1%) i/s -     78.023M in   5.138895s
Array#each_w/_object     14.985M (± 6.0%) i/s -     75.608M in   5.070967s
Hash#select-include      24.465M (± 6.2%) i/s -    122.190M in   5.020380s

Comparison:
Hash#select-include : 24464576.5 i/s
Hash#native-slice   : 19087894.5 i/s - 1.28x  (± 0.00) slower
Array#each          : 15263612.2 i/s - 1.60x  (± 0.00) slower
Array#each_w/_object: 14985167.7 i/s - 1.63x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   258.000  i/100ms
         Hash#value?   674.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      3.090k (±14.0%) i/s -     15.222k in   5.050955s
         Hash#value?      6.747k (± 0.8%) i/s -     34.374k in   5.094664s

Comparison:
         Hash#value?:     6747.5 i/s
Hash#values.include?:     3090.0 i/s - 2.18x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   317.214M i/100ms
                send   317.508M i/100ms
      method_missing   310.931M i/100ms
Calculating -------------------------------------
                call      3.151B (± 3.2%) i/s -     15.861B in   5.039507s
                send      3.178B (± 2.8%) i/s -     15.875B in   4.999969s
      method_missing      3.176B (± 2.7%) i/s -     16.168B in   5.094100s

Comparison:
                send: 3177864692.3 i/s
      method_missing: 3176479583.5 i/s - same-ish: difference falls within error
                call: 3150639213.0 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    61.740k i/100ms
      Symbol#to_proc    75.820k i/100ms
Calculating -------------------------------------
               Block    738.494k (±12.7%) i/s -      3.643M in   5.015722s
      Symbol#to_proc    755.653k (±11.5%) i/s -      3.715M in   5.006991s

Comparison:
      Symbol#to_proc:   755652.7 i/s
               Block:   738494.2 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   314.122M i/100ms
       block + yield   314.540M i/100ms
        unused block   320.600M i/100ms
               yield   321.656M i/100ms
Calculating -------------------------------------
          block.call      3.200B (± 0.9%) i/s -     16.020B in   5.006897s
       block + yield      3.204B (± 1.2%) i/s -     16.042B in   5.006991s
        unused block      3.181B (± 2.3%) i/s -     16.030B in   5.042091s
               yield      3.197B (± 1.7%) i/s -     16.083B in   5.031962s

Comparison:
       block + yield: 3204353884.6 i/s
          block.call: 3199886472.1 i/s - same-ish: difference falls within error
               yield: 3197066093.0 i/s - same-ish: difference falls within error
        unused block: 3180959217.6 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     5.438k i/100ms
      range#include?   167.000  i/100ms
       range#member?   230.000  i/100ms
       plain compare     7.614k i/100ms
Calculating -------------------------------------
        range#cover?     55.715k (±22.8%) i/s -    261.024k in   5.061941s
      range#include?      2.755k (±32.1%) i/s -     12.191k in   5.049243s
       range#member?      2.485k (±23.6%) i/s -     11.500k in   5.052663s
       plain compare     89.671k (±20.6%) i/s -    426.384k in   5.089804s

Comparison:
       plain compare:    89671.4 i/s
        range#cover?:    55714.6 i/s - 1.61x  (± 0.00) slower
      range#include?:     2754.6 i/s - 32.55x  (± 0.00) slower
       range#member?:     2485.0 i/s - 36.09x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    22.877M i/100ms
           String#=~    32.117M i/100ms
          Regexp#===    31.771M i/100ms
        String#match    31.324M i/100ms
Calculating -------------------------------------
       String#match?    344.506M (± 2.1%) i/s -      1.739B in   5.049389s
           String#=~    317.724M (± 2.9%) i/s -      1.606B in   5.059054s
          Regexp#===    318.816M (± 3.3%) i/s -      1.620B in   5.089353s
        String#match    312.113M (± 2.5%) i/s -      1.566B in   5.021614s

Comparison:
       String#match?: 344505848.5 i/s
          Regexp#===: 318816110.0 i/s - 1.08x  (± 0.00) slower
           String#=~: 317723869.1 i/s - 1.08x  (± 0.00) slower
        String#match: 312112649.3 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.396M i/100ms
      String#casecmp     4.497M i/100ms
Calculating -------------------------------------
String#downcase + ==     30.306M (± 8.0%) i/s -    150.956M in   5.023362s
      String#casecmp     49.510M (± 6.0%) i/s -    247.353M in   5.015553s

Comparison:
      String#casecmp: 49510052.0 i/s
String#downcase + ==: 30305714.3 i/s - 1.63x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     9.040M i/100ms
       String#concat    10.821M i/100ms
       String#append    10.358M i/100ms
         "foo" "bar"   319.529M i/100ms
  "#{'foo'}#{'bar'}"    10.656M i/100ms
Calculating -------------------------------------
            String#+    109.254M (± 3.3%) i/s -    551.441M in   5.053164s
       String#concat    107.540M (± 3.8%) i/s -    541.047M in   5.038760s
       String#append    107.196M (± 4.4%) i/s -    538.622M in   5.036461s
         "foo" "bar"      3.187B (± 2.2%) i/s -     15.976B in   5.014904s
  "#{'foo'}#{'bar'}"    106.066M (± 7.2%) i/s -    532.808M in   5.059475s

Comparison:
         "foo" "bar": 3187460183.3 i/s
            String#+: 109254052.0 i/s - 29.17x  (± 0.00) slower
       String#concat: 107539577.7 i/s - 29.64x  (± 0.00) slower
       String#append: 107196447.9 i/s - 29.73x  (± 0.00) slower
  "#{'foo'}#{'bar'}": 106066340.9 i/s - 30.05x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   316.525M i/100ms
          String#dup   304.208M i/100ms
Calculating -------------------------------------
           String#+@      3.175B (± 2.9%) i/s -     16.143B in   5.089402s
          String#dup      3.191B (± 2.0%) i/s -     16.123B in   5.054604s

Comparison:
          String#dup: 3191095217.0 i/s
           String#+@: 3174665609.6 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.512M i/100ms
       String#match?     1.802M i/100ms
    String#end_with?    11.022M i/100ms
Calculating -------------------------------------
           String#=~     14.639M (± 6.7%) i/s -     74.106M in   5.097198s
       String#match?     18.112M (± 1.2%) i/s -     91.908M in   5.075214s
    String#end_with?    110.562M (± 1.0%) i/s -    562.116M in   5.084659s

Comparison:
    String#end_with?: 110562034.6 i/s
       String#match?: 18111748.5 i/s - 6.10x  (± 0.00) slower
           String#=~: 14639220.4 i/s - 7.55x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   211.602k i/100ms
          String#sub   940.518k i/100ms
String#dup["string"]=
                        10.028M i/100ms
Calculating -------------------------------------
         String#gsub      8.388M (±13.9%) i/s -     40.839M in   5.011020s
          String#sub     10.176M (± 7.2%) i/s -     50.788M in   5.018085s
String#dup["string"]=
                         99.384M (± 2.8%) i/s -    501.400M in   5.049599s

Comparison:
String#dup["string"]=: 99384356.2 i/s
          String#sub: 10176237.2 i/s - 9.77x  (± 0.00) slower
         String#gsub:  8387704.8 i/s - 11.85x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   100.535k i/100ms
           String#tr   176.521k i/100ms
Calculating -------------------------------------
         String#gsub      4.562M (±11.5%) i/s -     22.419M in   5.005327s
           String#tr      1.775M (± 4.0%) i/s -      9.003M in   5.081913s

Comparison:
         String#gsub:  4562432.0 i/s
           String#tr:  1774622.1 i/s - 2.57x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   317.159M i/100ms
         With Freeze   319.060M i/100ms
Calculating -------------------------------------
      Without Freeze      3.197B (± 1.5%) i/s -     16.175B in   5.060681s
         With Freeze      3.193B (± 1.6%) i/s -     16.272B in   5.096877s

Comparison:
      Without Freeze: 3196949214.4 i/s
         With Freeze: 3193393765.0 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/    10.776k i/100ms
      String#squeeze    81.862k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    174.938k (± 9.4%) i/s -    872.856k in   5.052389s
      String#squeeze    823.435k (± 3.6%) i/s -      4.175M in   5.077318s

Comparison:
      String#squeeze:   823435.5 i/s
 String#gsub/regex+/:   174938.1 i/s - 4.71x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~    13.845M i/100ms
       String#match?    13.868M i/100ms
  String#start_with?    16.075M i/100ms
Calculating -------------------------------------
           String#=~    152.662M (± 7.1%) i/s -    761.495M in   5.026640s
       String#match?    138.930M (± 2.0%) i/s -    707.259M in   5.092924s
  String#start_with?    159.066M (± 2.7%) i/s -    803.761M in   5.056808s

Comparison:
  String#start_with?: 159066084.1 i/s
           String#=~: 152662051.3 i/s - same-ish: difference falls within error
       String#match?: 138929650.2 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    78.398k i/100ms
    String#[0, n] ==   702.378k i/100ms
   String#[RANGE] ==   221.247k i/100ms
   String#[0...n] ==   637.719k i/100ms
Calculating -------------------------------------
  String#start_with?      7.428M (± 0.6%) i/s -     37.161M in   5.003263s
    String#[0, n] ==      7.178M (± 4.2%) i/s -     35.821M in   4.999610s
   String#[RANGE] ==     13.589M (±12.9%) i/s -     65.932M in   5.009814s
   String#[0...n] ==      6.330M (± 4.0%) i/s -     31.886M in   5.046332s

Comparison:
   String#[RANGE] ==: 13589442.3 i/s
  String#start_with?:  7427534.8 i/s - 1.83x  (± 0.00) slower
    String#[0, n] ==:  7177853.2 i/s - 1.89x  (± 0.00) slower
   String#[0...n] ==:  6329694.3 i/s - 2.15x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     9.896M i/100ms
 String#sub!'string'   428.933k i/100ms
String#gsub!'string'   597.423k i/100ms
  String#[/regexp/]=     9.736M i/100ms
 String#sub!/regexp/     1.632M i/100ms
String#gsub!/regexp/   693.498k i/100ms
Calculating -------------------------------------
  String#['string']=     99.978M (± 1.8%) i/s -    504.702M in   5.049964s
 String#sub!'string'     11.119M (±12.9%) i/s -     54.474M in   5.008972s
String#gsub!'string'      6.035M (± 6.0%) i/s -     30.469M in   5.072031s
  String#[/regexp/]=     96.673M (± 2.5%) i/s -    486.812M in   5.038978s
 String#sub!/regexp/     31.727M (± 4.0%) i/s -    159.977M in   5.050971s
String#gsub!/regexp/      8.801M (±11.2%) i/s -     43.690M in   5.041721s

Comparison:
  String#['string']=: 99978444.7 i/s
  String#[/regexp/]=: 96672993.8 i/s - same-ish: difference falls within error
 String#sub!/regexp/: 31727029.0 i/s - 3.15x  (± 0.00) slower
 String#sub!'string': 11119394.0 i/s - 8.99x  (± 0.00) slower
String#gsub!/regexp/:  8801471.8 i/s - 11.36x  (± 0.00) slower
String#gsub!'string':  6034506.0 i/s - 16.57x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub   232.017k i/100ms
        String#chomp     6.519M i/100ms
String#delete_suffix    11.721M i/100ms
Calculating -------------------------------------
          String#sub     76.510M (±11.8%) i/s -    366.355M in   4.999981s
        String#chomp     64.984M (± 1.6%) i/s -    325.956M in   5.017402s
String#delete_suffix    113.696M (± 8.3%) i/s -    574.346M in   5.093885s

Comparison:
String#delete_suffix: 113696334.7 i/s
          String#sub: 76509543.8 i/s - 1.49x  (± 0.00) slower
        String#chomp: 64983827.6 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   317.477M i/100ms
          String#sub     1.536M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.176B (± 2.4%) i/s -     15.874B in   5.000828s
          String#sub    342.104M (± 3.7%) i/s -      1.707B in   4.999913s

Comparison:
String#delete_prefix: 3176141563.9 i/s
          String#sub: 342104212.4 i/s - 9.28x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.764M i/100ms
    String#unpack[0]     2.065M i/100ms
Calculating -------------------------------------
      String#unpack1     20.457M (± 4.2%) i/s -    102.304M in   5.010174s
    String#unpack[0]     20.414M (± 6.6%) i/s -    103.256M in   5.095890s

Comparison:
      String#unpack1: 20457008.3 i/s
    String#unpack[0]: 20413656.2 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 25.0.0-dev-89ceb11e, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    40.251k i/100ms
          Time.parse   384.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    865.848k (± 9.0%) i/s -      4.307M in   5.019274s
          Time.parse      6.102k (± 9.4%) i/s -     30.336k in   5.037119s

Comparison:
        Time.iso8601:   865848.2 i/s
          Time.parse:     6102.2 i/s - 141.89x  (± 0.00) slower

