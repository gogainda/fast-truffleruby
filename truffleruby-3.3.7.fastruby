$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       294.701M i/100ms
Function with splat arguments
                         1.889k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.165B (± 2.8%) i/s -     15.914B in   5.032352s
Function with splat arguments
                         20.762k (± 9.4%) i/s -    103.895k in   5.066179s

Comparison:
Function with single Array argument: 3164962093.9 i/s
Function with splat arguments:    20762.0 i/s - 152440.17x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   314.819M i/100ms
Sequential Assignment
                       313.771M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.140B (± 3.7%) i/s -     15.741B in   5.020110s
Sequential Assignment
                          3.178B (± 2.8%) i/s -     16.002B in   5.040374s

Comparison:
Sequential Assignment: 3177530715.2 i/s
 Parallel Assignment: 3140250917.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   321.216M i/100ms
       attr_accessor   300.363M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.163B (± 2.9%) i/s -     16.061B in   5.081721s
       attr_accessor      3.195B (± 1.9%) i/s -     16.220B in   5.078719s

Comparison:
       attr_accessor: 3194940114.1 i/s
   getter_and_setter: 3163412389.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    12.996k i/100ms
         respond_to?   310.541M i/100ms
Calculating -------------------------------------
      begin...rescue    102.623k (± 6.3%) i/s -    519.840k in   5.091052s
         respond_to?      3.200B (± 1.7%) i/s -     16.148B in   5.048179s

Comparison:
         respond_to?: 3199836765.3 i/s
      begin...rescue:   102622.6 i/s - 31180.62x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   320.469M i/100ms
             &method    18.068M i/100ms
Calculating -------------------------------------
              normal      3.089B (± 9.3%) i/s -     15.383B in   5.048010s
             &method    183.310M (± 1.7%) i/s -    921.469M in   5.028342s

Comparison:
              normal: 3089400649.3 i/s
             &method: 183309744.8 i/s - 16.85x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       144.000  i/100ms
       define_method   140.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          3.677k (±52.2%) i/s -      7.776k in   5.027835s
       define_method     11.650k (±44.9%) i/s -     11.200k in   6.905375s

Comparison:
       define_method:    11649.8 i/s
module_eval with string:     3677.1 i/s - 3.17x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   191.766k i/100ms
       Kernel#format   189.616k i/100ms
            String#%   124.422k i/100ms
Calculating -------------------------------------
         Float#round      2.737M (± 3.5%) i/s -     13.807M in   5.051421s
       Kernel#format      1.862M (± 3.2%) i/s -      9.481M in   5.097786s
            String#%      1.250M (± 2.6%) i/s -      6.346M in   5.080141s

Comparison:
         Float#round:  2736780.7 i/s
       Kernel#format:  1861732.5 i/s - 1.47x  (± 0.00) slower
            String#%:  1249941.3 i/s - 2.19x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   314.896M i/100ms
          OpenStruct   311.939M i/100ms
Calculating -------------------------------------
                Hash      3.149B (± 2.5%) i/s -     15.745B in   5.002704s
          OpenStruct      3.149B (± 3.4%) i/s -     15.909B in   5.058336s

Comparison:
                Hash: 3149367414.4 i/s
          OpenStruct: 3149040039.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   310.711M i/100ms
          OpenStruct     4.011k i/100ms
Calculating -------------------------------------
                Hash      3.127B (± 3.4%) i/s -     15.846B in   5.074057s
          OpenStruct     46.184k (±20.6%) i/s -    220.605k in   5.067341s

Comparison:
                Hash: 3127020639.4 i/s
          OpenStruct:    46183.9 i/s - 67708.06x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   778.725k i/100ms
  ancestors.include?   230.431k i/100ms
Calculating -------------------------------------
  less than or equal      9.873M (± 3.3%) i/s -     49.838M in   5.053538s
  ancestors.include?      2.288M (± 7.0%) i/s -     11.522M in   5.068834s

Comparison:
  less than or equal:  9873354.4 i/s
  ancestors.include?:  2287982.9 i/s - 4.32x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     32.021  (± 3.1%) i/s -    161.000  in   5.029840s
         Kernel loop     31.844  (± 3.1%) i/s -    159.000  in   5.000793s

Comparison:
          While Loop:       32.0 i/s
         Kernel loop:       31.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   317.331M i/100ms
         Array#first   312.551M i/100ms
Calculating -------------------------------------
           Array#[0]      3.174B (± 2.4%) i/s -     15.867B in   5.002245s
         Array#first      3.182B (± 2.2%) i/s -     15.940B in   5.012021s

Comparison:
         Array#first: 3182000751.5 i/s
           Array#[0]: 3173738730.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   304.671M i/100ms
          Array#last   315.902M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.153B (± 2.2%) i/s -     15.843B in   5.027774s
          Array#last      3.150B (± 2.2%) i/s -     15.795B in   5.016858s

Comparison:
          Array#[-1]: 3152717836.4 i/s
          Array#last: 3149956512.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   924.345k i/100ms
Calculating -------------------------------------
                find     13.690  (± 0.0%) i/s -     69.000  in   5.040148s
             bsearch      9.309M (± 3.8%) i/s -     47.142M in   5.072126s

Comparison:
             bsearch:  9308582.5 i/s
                find:       13.7 i/s - 679939.15x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.212  (± 0.0%) i/s -      2.000  in   9.453401s
        Array#insert      1.382  (± 0.0%) i/s -      7.000  in   5.063439s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.2 i/s - 6.53x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   313.839M i/100ms
          Array#size   302.662M i/100ms
         Array#count   319.067M i/100ms
Calculating -------------------------------------
        Array#length      3.150B (± 2.9%) i/s -     16.006B in   5.085252s
          Array#size      3.114B (± 2.2%) i/s -     15.738B in   5.056057s
         Array#count      3.116B (± 4.2%) i/s -     15.634B in   5.027219s

Comparison:
        Array#length: 3150285737.5 i/s
         Array#count: 3116020107.0 i/s - same-ish: difference falls within error
          Array#size: 3114303078.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    35.105k i/100ms
        Array#sample     3.805M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    375.241k (± 3.0%) i/s -      1.896M in   5.056568s
        Array#sample     38.075M (± 2.2%) i/s -    194.074M in   5.099905s

Comparison:
        Array#sample: 38075110.8 i/s
 Array#shuffle.first:   375240.7 i/s - 101.47x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   905.000  i/100ms
          Date.parse   597.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     18.199k (±40.4%) i/s -     78.735k in   4.999269s
          Date.parse      7.119k (±22.0%) i/s -     34.029k in   5.046025s

Comparison:
        Date.iso8601:    18199.4 i/s
          Date.parse:     7119.1 i/s - 2.56x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   290.191k i/100ms
           Array#map     1.858M i/100ms
Calculating -------------------------------------
   Array#each + push      3.286M (± 6.2%) i/s -     16.541M in   5.054229s
           Array#map     19.230M (± 8.6%) i/s -     96.613M in   5.069829s

Comparison:
           Array#map: 19229552.8 i/s
   Array#each + push:  3286092.3 i/s - 5.85x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    11.658M i/100ms
               #each    35.512M i/100ms
Calculating -------------------------------------
            For loop    117.376M (± 1.6%) i/s -    594.571M in   5.066913s
               #each    352.554M (± 1.9%) i/s -      1.776B in   5.038288s

Comparison:
               #each: 352554268.2 i/s
            For loop: 117375777.4 i/s - 3.00x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.389M i/100ms
     each_with_index     2.329M i/100ms
Calculating -------------------------------------
          While Loop     14.025M (± 2.6%) i/s -     70.841M in   5.054725s
     each_with_index     26.701M (± 6.6%) i/s -    135.073M in   5.083112s

Comparison:
     each_with_index: 26700933.1 i/s
          While Loop: 14025269.2 i/s - 1.90x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   304.593k i/100ms
      inject to_proc   310.948k i/100ms
        inject block   308.814k i/100ms
Calculating -------------------------------------
       inject symbol      3.102M (± 1.1%) i/s -     15.534M in   5.008792s
      inject to_proc      3.089M (± 2.3%) i/s -     15.547M in   5.035875s
        inject block      3.080M (± 4.7%) i/s -     15.441M in   5.029301s

Comparison:
       inject symbol:  3101800.9 i/s
      inject to_proc:  3089061.4 i/s - same-ish: difference falls within error
        inject block:  3079878.0 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    22.716k i/100ms
   Array#map.flatten    25.703k i/100ms
      Array#flat_map    56.523k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    258.881k (± 7.9%) i/s -      1.318M in   5.132440s
   Array#map.flatten    261.145k (± 7.1%) i/s -      1.311M in   5.054040s
      Array#flat_map    566.555k (± 4.5%) i/s -      2.826M in   5.000270s

Comparison:
      Array#flat_map:   566554.9 i/s
   Array#map.flatten:   261145.4 i/s - 2.17x  (± 0.00) slower
Array#map.flatten(1):   258881.2 i/s - 2.19x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   319.438k i/100ms
  Array#reverse_each     2.357M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.462M (± 6.1%) i/s -     17.250M in   5.010227s
  Array#reverse_each     23.709M (± 3.6%) i/s -    120.183M in   5.075004s

Comparison:
  Array#reverse_each: 23709100.9 i/s
  Array#reverse.each:  3462096.7 i/s - 6.85x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       854.704k i/100ms
   Enumerable#detect     4.574M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.285M (± 7.9%) i/s -    204.274M in  20.044851s
   Enumerable#detect     46.302M (± 2.6%) i/s -    928.479M in  20.068461s

Comparison:
   Enumerable#detect: 46302143.7 i/s
Enumerable#select.first: 10284512.0 i/s - 4.50x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       359.195k i/100ms
Enumerable#select.last
                       541.496k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.615M (± 6.5%) i/s -     18.319M in   5.096349s
Enumerable#select.last
                          5.317M (± 6.4%) i/s -     26.533M in   5.019290s

Comparison:
Enumerable#select.last:  5316717.0 i/s
Enumerable#reverse.detect:  3615023.6 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.156k i/100ms
  Enumerable#sort_by     1.246k i/100ms
     Enumerable#sort     3.319k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         27.262k (±37.2%) i/s -    108.056k in   5.085383s
  Enumerable#sort_by     40.950k (±19.5%) i/s -    184.408k in   5.006215s
     Enumerable#sort     49.168k (± 4.0%) i/s -    245.606k in   5.004335s

Comparison:
     Enumerable#sort:    49168.2 i/s
  Enumerable#sort_by:    40950.1 i/s - same-ish: difference falls within error
Enumerable#sort_by (Symbol#to_proc):    27262.1 i/s - 1.80x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   986.797k i/100ms
Enumerable#sort_by...first
                         9.229k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      9.947M (± 1.0%) i/s -     50.327M in   5.060057s
Enumerable#sort_by...first
                        115.458k (± 3.7%) i/s -    581.427k in   5.043137s

Comparison:
   Enumerable#min_by:  9946815.1 i/s
Enumerable#sort_by...first:   115457.7 i/s - 86.15x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   607.659k i/100ms
            Hash#dup   720.266k i/100ms
Calculating -------------------------------------
              Hash[]      7.273M (±10.6%) i/s -     36.460M in   5.069701s
            Hash#dup      7.545M (±10.2%) i/s -     37.454M in   5.031675s

Comparison:
            Hash#dup:  7544928.8 i/s
              Hash[]:  7273432.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   313.363M i/100ms
  Hash#fetch, symbol   309.697M i/100ms
     Hash#[], string    29.223M i/100ms
  Hash#fetch, string    26.558M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.088B (± 2.7%) i/s -     15.668B in   5.077444s
  Hash#fetch, symbol      3.103B (± 2.3%) i/s -     15.795B in   5.092995s
     Hash#[], string    290.386M (± 1.7%) i/s -      1.461B in   5.033296s
  Hash#fetch, string    266.634M (± 1.5%) i/s -      1.354B in   5.081113s

Comparison:
  Hash#fetch, symbol: 3102917142.7 i/s
     Hash#[], symbol: 3088182249.0 i/s - same-ish: difference falls within error
     Hash#[], string: 290386271.8 i/s - 10.69x  (± 0.00) slower
  Hash#fetch, string: 266633577.0 i/s - 11.64x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    90.510M i/100ms
             Hash#[]    90.803M i/100ms
          Hash#[] ||    90.957M i/100ms
          Hash#[] &&    91.179M i/100ms
          Hash#fetch    91.902M i/100ms
 Hash#fetch fallback    91.901M i/100ms
Calculating -------------------------------------
            Hash#dig    915.646M (± 1.7%) i/s -      4.616B in   5.042809s
             Hash#[]    908.590M (± 2.6%) i/s -      4.540B in   5.000623s
          Hash#[] ||    912.156M (± 2.0%) i/s -      4.639B in   5.087671s
          Hash#[] &&    910.757M (± 1.9%) i/s -      4.559B in   5.007514s
          Hash#fetch    912.026M (± 2.1%) i/s -      4.595B in   5.040735s
 Hash#fetch fallback    915.756M (± 1.0%) i/s -      4.595B in   5.018318s

Comparison:
 Hash#fetch fallback: 915755894.2 i/s
            Hash#dig: 915645510.4 i/s - same-ish: difference falls within error
          Hash#[] ||: 912155767.5 i/s - same-ish: difference falls within error
          Hash#fetch: 912025976.5 i/s - same-ish: difference falls within error
          Hash#[] &&: 910756625.0 i/s - same-ish: difference falls within error
             Hash#[]: 908590029.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   315.020M i/100ms
  Hash#fetch + block   315.739M i/100ms
    Hash#fetch + arg   320.884M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.174B (± 2.2%) i/s -     16.066B in   5.064500s
  Hash#fetch + block      3.191B (± 1.8%) i/s -     16.103B in   5.047720s
    Hash#fetch + arg      3.175B (± 2.0%) i/s -     16.044B in   5.054869s

Comparison:
  Hash#fetch + block: 3191229913.9 i/s
    Hash#fetch + arg: 3175368662.8 i/s - same-ish: difference falls within error
  Hash#fetch + const: 3173944808.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    34.666k i/100ms
         sort + to_h     2.677k i/100ms
Calculating -------------------------------------
      sort_by + to_h    464.793k (± 6.8%) i/s -      2.323M in   5.022982s
         sort + to_h    212.403k (±14.3%) i/s -      1.017M in   5.004651s

Comparison:
      sort_by + to_h:   464792.9 i/s
         sort + to_h:   212403.0 i/s - 2.19x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   216.530k i/100ms
       Hash#each_key   253.084k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.327M (± 9.6%) i/s -     11.476M in   5.028703s
       Hash#each_key      2.476M (± 6.1%) i/s -     12.401M in   5.034934s

Comparison:
       Hash#each_key:  2476272.4 i/s
      Hash#keys.each:  2326966.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   304.000  i/100ms
           Hash#key?     3.556M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      3.428k (±10.6%) i/s -     17.024k in   5.055341s
           Hash#key?     35.361M (± 1.9%) i/s -    177.818M in   5.030540s

Comparison:
           Hash#key?: 35360576.4 i/s
  Hash#keys.include?:     3427.8 i/s - 10315.72x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    47.022k i/100ms
            Hash#[]=    57.918k i/100ms
Calculating -------------------------------------
         Hash#merge!    566.483k (± 7.8%) i/s -      2.821M in   5.020523s
            Hash#[]=    603.505k (± 6.6%) i/s -      3.012M in   5.012212s

Comparison:
            Hash#[]=:   603504.9 i/s
         Hash#merge!:   566482.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        33.273k i/100ms
      Hash#merge({})    19.099k i/100ms
 Hash#dup#merge!({})    30.322k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        384.614k (±11.9%) i/s -      1.897M in   5.021108s
      Hash#merge({})    197.987k (± 9.9%) i/s -    993.148k in   5.088105s
 Hash#dup#merge!({})    314.427k (± 8.0%) i/s -      1.577M in   5.049698s

Comparison:
{}#merge!(Hash) do end:   384614.1 i/s
 Hash#dup#merge!({}):   314427.0 i/s - same-ish: difference falls within error
      Hash#merge({}):   197987.4 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   315.626M i/100ms
          Hash#merge   317.120M i/100ms
Calculating -------------------------------------
        Hash#**other      3.087B (± 2.7%) i/s -     15.466B in   5.013781s
          Hash#merge      3.136B (± 3.4%) i/s -     15.856B in   5.062617s

Comparison:
          Hash#merge: 3135713077.1 i/s
        Hash#**other: 3086876257.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.031k i/100ms
         Hash#merge!    53.240k i/100ms
Calculating -------------------------------------
          Hash#merge     11.271k (±11.2%) i/s -     55.674k in   5.009670s
         Hash#merge!    589.045k (± 5.8%) i/s -      2.981M in   5.079256s

Comparison:
         Hash#merge!:   589045.3 i/s
          Hash#merge:    11271.2 i/s - 52.26x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.805M i/100ms
Array#each               1.452M i/100ms
Array#each_w/_object     1.368M i/100ms
Hash#select-include      2.388M i/100ms
Calculating -------------------------------------
Hash#native-slice        19.099M (± 6.3%) i/s -     95.657M in   5.036016s
Array#each               15.463M (± 6.1%) i/s -     76.953M in   5.004970s
Array#each_w/_object     15.231M (± 5.9%) i/s -     76.596M in   5.055539s
Hash#select-include      24.207M (± 6.9%) i/s -    121.789M in   5.063735s

Comparison:
Hash#select-include : 24207454.9 i/s
Hash#native-slice   : 19098844.3 i/s - 1.27x  (± 0.00) slower
Array#each          : 15462507.1 i/s - 1.57x  (± 0.00) slower
Array#each_w/_object: 15230511.2 i/s - 1.59x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   255.000  i/100ms
         Hash#value?   667.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      2.994k (±12.4%) i/s -     14.790k in   5.038466s
         Hash#value?      6.674k (± 1.0%) i/s -     34.017k in   5.097294s

Comparison:
         Hash#value?:     6674.3 i/s
Hash#values.include?:     2993.9 i/s - 2.23x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   304.521M i/100ms
                send   303.459M i/100ms
      method_missing   310.589M i/100ms
Calculating -------------------------------------
                call      3.096B (± 1.8%) i/s -     15.531B in   5.018721s
                send      3.074B (± 3.6%) i/s -     15.476B in   5.041402s
      method_missing      3.047B (± 2.2%) i/s -     15.529B in   5.098680s

Comparison:
                call: 3095528227.4 i/s
                send: 3074240023.0 i/s - same-ish: difference falls within error
      method_missing: 3047239661.8 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    42.079k i/100ms
      Symbol#to_proc    68.533k i/100ms
Calculating -------------------------------------
               Block    709.749k (±13.0%) i/s -      3.493M in   5.054505s
      Symbol#to_proc    707.305k (±13.6%) i/s -      3.495M in   5.051464s

Comparison:
               Block:   709749.1 i/s
      Symbol#to_proc:   707304.7 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   297.986M i/100ms
       block + yield   308.232M i/100ms
        unused block   300.099M i/100ms
               yield   305.334M i/100ms
Calculating -------------------------------------
          block.call      3.075B (± 2.2%) i/s -     15.495B in   5.042354s
       block + yield      3.066B (± 2.4%) i/s -     15.412B in   5.029807s
        unused block      3.037B (± 2.5%) i/s -     15.305B in   5.043671s
               yield      3.064B (± 2.3%) i/s -     15.572B in   5.084223s

Comparison:
          block.call: 3074593569.4 i/s
       block + yield: 3065794974.0 i/s - same-ish: difference falls within error
               yield: 3064404057.8 i/s - same-ish: difference falls within error
        unused block: 3036562975.6 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     2.816k i/100ms
      range#include?   165.000  i/100ms
       range#member?   239.000  i/100ms
       plain compare     8.235k i/100ms
Calculating -------------------------------------
        range#cover?     64.470k (±32.8%) i/s -    270.336k in   5.066765s
      range#include?      2.917k (±37.6%) i/s -     11.715k in   5.015514s
       range#member?      2.476k (±24.0%) i/s -     11.472k in   5.003982s
       plain compare     89.712k (±24.0%) i/s -    419.985k in   5.067749s

Comparison:
       plain compare:    89711.8 i/s
        range#cover?:    64469.8 i/s - same-ish: difference falls within error
      range#include?:     2916.7 i/s - 30.76x  (± 0.00) slower
       range#member?:     2475.7 i/s - 36.24x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    30.957M i/100ms
           String#=~    31.898M i/100ms
          Regexp#===    31.809M i/100ms
        String#match    31.406M i/100ms
Calculating -------------------------------------
       String#match?    343.487M (± 2.0%) i/s -      1.734B in   5.049137s
           String#=~    319.208M (± 1.4%) i/s -      1.627B in   5.097360s
          Regexp#===    318.188M (± 4.0%) i/s -      1.590B in   5.008978s
        String#match    311.632M (± 1.9%) i/s -      1.570B in   5.040919s

Comparison:
       String#match?: 343486591.4 i/s
           String#=~: 319207582.3 i/s - 1.08x  (± 0.00) slower
          Regexp#===: 318187767.6 i/s - 1.08x  (± 0.00) slower
        String#match: 311632055.9 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.615M i/100ms
      String#casecmp     4.981M i/100ms
Calculating -------------------------------------
String#downcase + ==     29.397M (± 6.3%) i/s -    146.445M in   5.002532s
      String#casecmp     49.246M (± 6.1%) i/s -    249.037M in   5.084084s

Comparison:
      String#casecmp: 49246048.4 i/s
String#downcase + ==: 29396952.7 i/s - 1.68x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     9.623M i/100ms
       String#concat    10.717M i/100ms
       String#append    10.699M i/100ms
         "foo" "bar"   320.923M i/100ms
  "#{'foo'}#{'bar'}"    10.963M i/100ms
Calculating -------------------------------------
            String#+    107.189M (± 3.8%) i/s -    538.888M in   5.034912s
       String#concat    105.981M (± 6.5%) i/s -    535.858M in   5.087046s
       String#append    105.690M (± 7.1%) i/s -    534.944M in   5.096859s
         "foo" "bar"      3.190B (± 1.6%) i/s -     16.046B in   5.032007s
  "#{'foo'}#{'bar'}"    105.109M (± 6.7%) i/s -    526.239M in   5.035618s

Comparison:
         "foo" "bar": 3189685894.0 i/s
            String#+: 107189123.5 i/s - 29.76x  (± 0.00) slower
       String#concat: 105980935.4 i/s - 30.10x  (± 0.00) slower
       String#append: 105690184.2 i/s - 30.18x  (± 0.00) slower
  "#{'foo'}#{'bar'}": 105108774.6 i/s - 30.35x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   320.951M i/100ms
          String#dup   307.759M i/100ms
Calculating -------------------------------------
           String#+@      3.163B (± 3.3%) i/s -     16.048B in   5.079654s
          String#dup      3.180B (± 2.6%) i/s -     16.003B in   5.036006s

Comparison:
          String#dup: 3180177260.0 i/s
           String#+@: 3162998311.7 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.489M i/100ms
       String#match?     1.803M i/100ms
    String#end_with?    10.571M i/100ms
Calculating -------------------------------------
           String#=~     15.309M (± 2.4%) i/s -     77.423M in   5.060560s
       String#match?     18.001M (± 2.3%) i/s -     90.161M in   5.011742s
    String#end_with?    106.671M (± 1.5%) i/s -    539.130M in   5.055323s

Comparison:
    String#end_with?: 106670904.6 i/s
       String#match?: 18000672.1 i/s - 5.93x  (± 0.00) slower
           String#=~: 15308582.4 i/s - 6.97x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   186.830k i/100ms
          String#sub   766.449k i/100ms
String#dup["string"]=
                        10.032M i/100ms
Calculating -------------------------------------
         String#gsub      8.273M (±15.2%) i/s -     39.982M in   5.017781s
          String#sub     10.122M (± 9.7%) i/s -     50.586M in   5.051378s
String#dup["string"]=
                         99.917M (± 2.1%) i/s -    501.607M in   5.022675s

Comparison:
String#dup["string"]=: 99916799.1 i/s
          String#sub: 10121612.2 i/s - 9.87x  (± 0.00) slower
         String#gsub:  8273143.2 i/s - 12.08x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    92.380k i/100ms
           String#tr   173.775k i/100ms
Calculating -------------------------------------
         String#gsub      4.622M (±13.2%) i/s -     22.633M in   5.055473s
           String#tr      1.765M (± 4.8%) i/s -      8.863M in   5.032734s

Comparison:
         String#gsub:  4621798.4 i/s
           String#tr:  1765450.0 i/s - 2.62x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   314.551M i/100ms
         With Freeze   320.919M i/100ms
Calculating -------------------------------------
      Without Freeze      3.170B (± 2.5%) i/s -     16.042B in   5.064118s
         With Freeze      3.144B (± 4.0%) i/s -     15.725B in   5.011606s

Comparison:
      Without Freeze: 3169929348.5 i/s
         With Freeze: 3143606568.8 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     8.813k i/100ms
      String#squeeze    79.135k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    172.569k (± 9.5%) i/s -    854.861k in   5.018061s
      String#squeeze    785.332k (± 4.9%) i/s -      3.957M in   5.050580s

Comparison:
      String#squeeze:   785331.6 i/s
 String#gsub/regex+/:   172569.3 i/s - 4.55x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     6.645M i/100ms
       String#match?    13.355M i/100ms
  String#start_with?    16.015M i/100ms
Calculating -------------------------------------
           String#=~    107.108M (± 7.7%) i/s -    531.575M in   5.006938s
       String#match?    133.156M (± 2.2%) i/s -    667.731M in   5.017344s
  String#start_with?    160.058M (± 1.4%) i/s -    800.750M in   5.003981s

Comparison:
  String#start_with?: 160058353.5 i/s
       String#match?: 133155792.6 i/s - 1.20x  (± 0.00) slower
           String#=~: 107107751.9 i/s - 1.49x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   214.871k i/100ms
    String#[0, n] ==   686.067k i/100ms
   String#[RANGE] ==   214.318k i/100ms
   String#[0...n] ==   644.327k i/100ms
Calculating -------------------------------------
  String#start_with?      7.269M (± 3.5%) i/s -     36.313M in   5.004159s
    String#[0, n] ==      7.077M (± 6.6%) i/s -     35.675M in   5.073888s
   String#[RANGE] ==     13.326M (±12.9%) i/s -     64.510M in   5.002535s
   String#[0...n] ==      6.333M (± 2.9%) i/s -     32.216M in   5.091888s

Comparison:
   String#[RANGE] ==: 13326472.0 i/s
  String#start_with?:  7268571.4 i/s - 1.83x  (± 0.00) slower
    String#[0, n] ==:  7077019.6 i/s - 1.88x  (± 0.00) slower
   String#[0...n] ==:  6332751.6 i/s - 2.10x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     9.990M i/100ms
 String#sub!'string'   131.317k i/100ms
String#gsub!'string'   548.854k i/100ms
  String#[/regexp/]=     9.690M i/100ms
 String#sub!/regexp/     1.651M i/100ms
String#gsub!/regexp/   854.142k i/100ms
Calculating -------------------------------------
  String#['string']=     99.574M (± 2.7%) i/s -    499.485M in   5.020175s
 String#sub!'string'     11.181M (±16.6%) i/s -     52.789M in   5.002823s
String#gsub!'string'      6.073M (± 4.8%) i/s -     30.736M in   5.073664s
  String#[/regexp/]=     96.880M (± 1.8%) i/s -    484.490M in   5.002618s
 String#sub!/regexp/     31.105M (± 5.1%) i/s -    155.201M in   5.003924s
String#gsub!/regexp/      9.067M (± 9.7%) i/s -     45.270M in   5.053863s

Comparison:
  String#['string']=: 99574073.6 i/s
  String#[/regexp/]=: 96879567.1 i/s - same-ish: difference falls within error
 String#sub!/regexp/: 31104772.2 i/s - 3.20x  (± 0.00) slower
 String#sub!'string': 11180744.3 i/s - 8.91x  (± 0.00) slower
String#gsub!/regexp/:  9066623.2 i/s - 10.98x  (± 0.00) slower
String#gsub!'string':  6073149.5 i/s - 16.40x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub   227.959k i/100ms
        String#chomp     6.514M i/100ms
String#delete_suffix    11.654M i/100ms
Calculating -------------------------------------
          String#sub     75.997M (±12.6%) i/s -    361.771M in   4.999010s
        String#chomp     65.017M (± 1.2%) i/s -    325.692M in   5.010057s
String#delete_suffix    117.424M (± 8.8%) i/s -    582.709M in   5.010458s

Comparison:
String#delete_suffix: 117423659.8 i/s
          String#sub: 75997458.4 i/s - 1.55x  (± 0.00) slower
        String#chomp: 65016962.1 i/s - 1.81x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   316.935M i/100ms
          String#sub     1.306M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.168B (± 2.1%) i/s -     15.847B in   5.004998s
          String#sub    341.901M (± 2.7%) i/s -      1.708B in   5.000023s

Comparison:
String#delete_prefix: 3167623651.2 i/s
          String#sub: 341900656.8 i/s - 9.26x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.095M i/100ms
    String#unpack[0]     1.916M i/100ms
Calculating -------------------------------------
      String#unpack1     20.082M (± 8.0%) i/s -     99.618M in   5.008155s
    String#unpack[0]     20.057M (± 6.5%) i/s -    101.533M in   5.092580s

Comparison:
      String#unpack1: 20082428.0 i/s
    String#unpack[0]: 20057112.6 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    44.965k i/100ms
          Time.parse   334.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    761.401k (±19.8%) i/s -      3.597M in   5.029041s
          Time.parse      6.131k (±10.5%) i/s -     30.394k in   5.037042s

Comparison:
        Time.iso8601:   761401.3 i/s
          Time.parse:     6131.0 i/s - 124.19x  (± 0.00) slower

