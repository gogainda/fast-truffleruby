$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       282.907M i/100ms
Function with splat arguments
                         1.901k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.167B (± 3.4%) i/s -     15.843B in   5.008400s
Function with splat arguments
                         21.338k (± 8.7%) i/s -    106.456k in   5.035095s

Comparison:
Function with single Array argument: 3167244300.2 i/s
Function with splat arguments:    21337.7 i/s - 148434.49x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   317.589M i/100ms
Sequential Assignment
                       316.991M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.160B (± 3.0%) i/s -     15.879B in   5.029385s
Sequential Assignment
                          3.191B (± 2.0%) i/s -     16.167B in   5.068016s

Comparison:
Sequential Assignment: 3191315796.2 i/s
 Parallel Assignment: 3160326099.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   315.933M i/100ms
       attr_accessor   317.959M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.173B (± 2.6%) i/s -     16.113B in   5.081439s
       attr_accessor      3.193B (± 1.8%) i/s -     16.216B in   5.080532s

Comparison:
       attr_accessor: 3192915913.3 i/s
   getter_and_setter: 3173099795.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    13.200k i/100ms
         respond_to?   317.992M i/100ms
Calculating -------------------------------------
      begin...rescue    102.141k (± 6.9%) i/s -    514.800k in   5.074640s
         respond_to?      3.205B (± 1.1%) i/s -     16.218B in   5.060088s

Comparison:
         respond_to?: 3205417198.6 i/s
      begin...rescue:   102141.5 i/s - 31382.14x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   318.245M i/100ms
             &method    18.186M i/100ms
Calculating -------------------------------------
              normal      3.158B (± 3.9%) i/s -     15.912B in   5.047550s
             &method    181.580M (± 1.8%) i/s -    909.311M in   5.009382s

Comparison:
              normal: 3158132980.8 i/s
             &method: 181580279.3 i/s - 17.39x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       138.000  i/100ms
       define_method   159.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          3.939k (±49.4%) i/s -      8.280k in   5.652909s
       define_method     12.476k (±36.1%) i/s -     12.084k in   5.098957s

Comparison:
       define_method:    12476.5 i/s
module_eval with string:     3938.5 i/s - 3.17x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   259.082k i/100ms
       Kernel#format   187.689k i/100ms
            String#%   188.596k i/100ms
Calculating -------------------------------------
         Float#round      2.745M (± 3.2%) i/s -     13.731M in   5.008761s
       Kernel#format      1.866M (± 2.7%) i/s -      9.384M in   5.034342s
            String#%      1.861M (± 3.4%) i/s -      9.430M in   5.072380s

Comparison:
         Float#round:  2744532.0 i/s
       Kernel#format:  1865611.0 i/s - 1.47x  (± 0.00) slower
            String#%:  1861361.6 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   315.073M i/100ms
          OpenStruct   312.039M i/100ms
Calculating -------------------------------------
                Hash      3.178B (± 3.0%) i/s -     16.069B in   5.061653s
          OpenStruct      3.178B (± 2.7%) i/s -     15.914B in   5.011011s

Comparison:
          OpenStruct: 3178208248.1 i/s
                Hash: 3177857044.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   315.056M i/100ms
          OpenStruct     4.536k i/100ms
Calculating -------------------------------------
                Hash      3.061B (± 9.5%) i/s -     15.123B in   5.005971s
          OpenStruct     45.167k (±21.0%) i/s -    213.192k in   5.055724s

Comparison:
                Hash: 3060954019.6 i/s
          OpenStruct:    45167.3 i/s - 67769.29x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   972.210k i/100ms
  ancestors.include?   224.764k i/100ms
Calculating -------------------------------------
  less than or equal      9.877M (± 2.5%) i/s -     49.583M in   5.023476s
  ancestors.include?      2.254M (± 7.5%) i/s -     11.238M in   5.028152s

Comparison:
  less than or equal:  9876837.3 i/s
  ancestors.include?:  2254291.0 i/s - 4.38x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     31.841  (± 3.1%) i/s -    159.000  in   5.005432s
         Kernel loop     31.898  (± 3.1%) i/s -    160.000  in   5.027853s

Comparison:
         Kernel loop:       31.9 i/s
          While Loop:       31.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   319.500M i/100ms
         Array#first   306.862M i/100ms
Calculating -------------------------------------
           Array#[0]      3.179B (± 2.6%) i/s -     15.975B in   5.029399s
         Array#first      3.187B (± 2.2%) i/s -     15.957B in   5.008694s

Comparison:
         Array#first: 3187479568.0 i/s
           Array#[0]: 3178618138.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   314.255M i/100ms
          Array#last   306.459M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.200B (± 1.4%) i/s -     16.027B in   5.008909s
          Array#last      3.186B (± 2.1%) i/s -     16.242B in   5.100036s

Comparison:
          Array#[-1]: 3200417284.6 i/s
          Array#last: 3186233301.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   926.396k i/100ms
Calculating -------------------------------------
                find     13.708  (± 0.0%) i/s -     69.000  in   5.033809s
             bsearch      9.338M (± 2.3%) i/s -     47.246M in   5.062246s

Comparison:
             bsearch:  9338202.6 i/s
                find:       13.7 i/s - 681221.38x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.210  (± 0.0%) i/s -      2.000  in   9.520658s
        Array#insert      1.386  (± 0.0%) i/s -      7.000  in   5.050087s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.2 i/s - 6.60x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   311.689M i/100ms
          Array#size   320.802M i/100ms
         Array#count   320.733M i/100ms
Calculating -------------------------------------
        Array#length      3.200B (± 1.1%) i/s -     16.208B in   5.065558s
          Array#size      3.201B (± 1.0%) i/s -     16.040B in   5.011159s
         Array#count      3.191B (± 1.9%) i/s -     16.037B in   5.027209s

Comparison:
          Array#size: 3201216370.2 i/s
        Array#length: 3200037494.4 i/s - same-ish: difference falls within error
         Array#count: 3191218161.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    20.509k i/100ms
        Array#sample     3.765M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    377.649k (± 3.2%) i/s -      1.887M in   5.002064s
        Array#sample     37.636M (± 1.1%) i/s -    188.268M in   5.002962s

Comparison:
        Array#sample: 37636162.0 i/s
 Array#shuffle.first:   377648.9 i/s - 99.66x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   949.000  i/100ms
          Date.parse   678.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     16.743k (±34.8%) i/s -     75.920k in   5.041594s
          Date.parse      7.867k (±17.6%) i/s -     37.968k in   5.020375s

Comparison:
        Date.iso8601:    16742.6 i/s
          Date.parse:     7866.7 i/s - 2.13x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   302.446k i/100ms
           Array#map     1.865M i/100ms
Calculating -------------------------------------
   Array#each + push      3.243M (± 5.2%) i/s -     16.332M in   5.050578s
           Array#map     19.206M (± 9.5%) i/s -     95.125M in   5.014775s

Comparison:
           Array#map: 19205883.6 i/s
   Array#each + push:  3243414.2 i/s - 5.92x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    11.164M i/100ms
               #each    34.824M i/100ms
Calculating -------------------------------------
            For loop    116.433M (± 2.3%) i/s -    591.701M in   5.084689s
               #each    345.123M (± 1.3%) i/s -      1.741B in   5.046172s

Comparison:
               #each: 345122728.3 i/s
            For loop: 116433341.0 i/s - 2.96x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.407M i/100ms
     each_with_index     2.326M i/100ms
Calculating -------------------------------------
          While Loop     14.489M (± 3.8%) i/s -     73.142M in   5.055557s
     each_with_index     23.253M (± 1.9%) i/s -    116.309M in   5.003602s

Comparison:
     each_with_index: 23253376.7 i/s
          While Loop: 14488897.0 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   306.859k i/100ms
      inject to_proc   310.905k i/100ms
        inject block   308.558k i/100ms
Calculating -------------------------------------
       inject symbol      3.088M (± 2.3%) i/s -     15.650M in   5.070926s
      inject to_proc      3.086M (± 2.8%) i/s -     15.545M in   5.042064s
        inject block      3.094M (± 2.0%) i/s -     15.736M in   5.088496s

Comparison:
        inject block:  3093972.1 i/s
       inject symbol:  3087915.0 i/s - same-ish: difference falls within error
      inject to_proc:  3085775.0 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    23.220k i/100ms
   Array#map.flatten    24.616k i/100ms
      Array#flat_map    57.068k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    262.487k (± 5.3%) i/s -      1.324M in   5.056567s
   Array#map.flatten    265.290k (± 7.6%) i/s -      1.329M in   5.052358s
      Array#flat_map    571.024k (± 5.4%) i/s -      2.853M in   5.015562s

Comparison:
      Array#flat_map:   571024.4 i/s
   Array#map.flatten:   265290.5 i/s - 2.15x  (± 0.00) slower
Array#map.flatten(1):   262486.6 i/s - 2.18x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   256.112k i/100ms
  Array#reverse_each     2.528M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.495M (± 4.6%) i/s -     17.672M in   5.068193s
  Array#reverse_each     23.693M (± 2.9%) i/s -    118.814M in   5.019026s

Comparison:
  Array#reverse_each: 23693400.3 i/s
  Array#reverse.each:  3495337.0 i/s - 6.78x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       947.628k i/100ms
   Enumerable#detect     4.663M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.316M (± 7.8%) i/s -    204.688M in  20.010971s
   Enumerable#detect     46.425M (± 1.8%) i/s -    932.683M in  20.097057s

Comparison:
   Enumerable#detect: 46425228.9 i/s
Enumerable#select.first: 10315769.9 i/s - 4.50x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       367.791k i/100ms
Enumerable#select.last
                       547.259k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.739M (± 3.4%) i/s -     18.757M in   5.022091s
Enumerable#select.last
                          5.401M (± 5.7%) i/s -     27.363M in   5.090214s

Comparison:
Enumerable#select.last:  5401029.1 i/s
Enumerable#reverse.detect:  3739321.0 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.654k i/100ms
  Enumerable#sort_by     3.262k i/100ms
     Enumerable#sort     4.090k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         40.186k (±17.5%) i/s -    183.126k in   5.017578s
  Enumerable#sort_by     39.803k (±18.4%) i/s -    182.672k in   5.053280s
     Enumerable#sort     53.348k (± 4.0%) i/s -    269.940k in   5.069115s

Comparison:
     Enumerable#sort:    53348.2 i/s
Enumerable#sort_by (Symbol#to_proc):    40185.7 i/s - 1.33x  (± 0.00) slower
  Enumerable#sort_by:    39803.4 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   981.511k i/100ms
Enumerable#sort_by...first
                        10.821k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      9.929M (± 1.4%) i/s -     50.057M in   5.042806s
Enumerable#sort_by...first
                        114.811k (± 5.9%) i/s -    573.513k in   5.021718s

Comparison:
   Enumerable#min_by:  9928551.5 i/s
Enumerable#sort_by...first:   114810.7 i/s - 86.48x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   625.963k i/100ms
            Hash#dup   746.675k i/100ms
Calculating -------------------------------------
              Hash[]      7.652M (±10.9%) i/s -     38.184M in   5.074040s
            Hash#dup      7.685M (±11.5%) i/s -     38.080M in   5.024673s

Comparison:
            Hash#dup:  7684880.4 i/s
              Hash[]:  7652146.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   320.564M i/100ms
  Hash#fetch, symbol   317.773M i/100ms
     Hash#[], string    29.105M i/100ms
  Hash#fetch, string    26.666M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.191B (± 2.1%) i/s -     16.028B in   5.025081s
  Hash#fetch, symbol      3.193B (± 2.0%) i/s -     16.206B in   5.077836s
     Hash#[], string    289.749M (± 2.1%) i/s -      1.455B in   5.024878s
  Hash#fetch, string    266.558M (± 1.6%) i/s -      1.333B in   5.003164s

Comparison:
  Hash#fetch, symbol: 3192980040.6 i/s
     Hash#[], symbol: 3191155974.7 i/s - same-ish: difference falls within error
     Hash#[], string: 289749184.5 i/s - 11.02x  (± 0.00) slower
  Hash#fetch, string: 266558499.4 i/s - 11.98x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    90.747M i/100ms
             Hash#[]    90.800M i/100ms
          Hash#[] ||    91.885M i/100ms
          Hash#[] &&    91.897M i/100ms
          Hash#fetch    91.853M i/100ms
 Hash#fetch fallback    91.844M i/100ms
Calculating -------------------------------------
            Hash#dig    915.385M (± 1.3%) i/s -      4.628B in   5.056897s
             Hash#[]    917.728M (± 0.4%) i/s -      4.631B in   5.046043s
          Hash#[] ||    912.397M (± 1.8%) i/s -      4.594B in   5.037037s
          Hash#[] &&    915.369M (± 1.3%) i/s -      4.595B in   5.020518s
          Hash#fetch    914.093M (± 1.6%) i/s -      4.593B in   5.025556s
 Hash#fetch fallback    914.338M (± 1.5%) i/s -      4.592B in   5.023592s

Comparison:
             Hash#[]: 917727644.2 i/s
            Hash#dig: 915384696.1 i/s - same-ish: difference falls within error
          Hash#[] &&: 915368866.5 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 914338156.9 i/s - same-ish: difference falls within error
          Hash#fetch: 914093034.1 i/s - same-ish: difference falls within error
          Hash#[] ||: 912397055.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   319.739M i/100ms
  Hash#fetch + block   314.339M i/100ms
    Hash#fetch + arg   321.457M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.178B (± 2.4%) i/s -     15.987B in   5.033301s
  Hash#fetch + block      3.197B (± 2.1%) i/s -     16.031B in   5.017258s
    Hash#fetch + arg      3.191B (± 2.1%) i/s -     16.073B in   5.038599s

Comparison:
  Hash#fetch + block: 3196853624.5 i/s
    Hash#fetch + arg: 3191439510.1 i/s - same-ish: difference falls within error
  Hash#fetch + const: 3178235773.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    20.956k i/100ms
         sort + to_h     4.215k i/100ms
Calculating -------------------------------------
      sort_by + to_h    374.568k (±27.7%) i/s -      1.739M in   5.035614s
         sort + to_h    227.171k (±11.8%) i/s -      1.117M in   5.011627s

Comparison:
      sort_by + to_h:   374568.2 i/s
         sort + to_h:   227170.5 i/s - 1.65x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   192.328k i/100ms
       Hash#each_key   252.632k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.319M (±11.0%) i/s -     11.347M in   5.028124s
       Hash#each_key      2.477M (± 3.4%) i/s -     12.379M in   5.004484s

Comparison:
       Hash#each_key:  2476525.6 i/s
      Hash#keys.each:  2319308.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   309.000  i/100ms
           Hash#key?     3.126M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      3.820k (±12.6%) i/s -     18.849k in   5.040971s
           Hash#key?     35.624M (± 1.0%) i/s -    178.155M in   5.001478s

Comparison:
           Hash#key?: 35624105.5 i/s
  Hash#keys.include?:     3819.6 i/s - 9326.58x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    52.201k i/100ms
            Hash#[]=    59.855k i/100ms
Calculating -------------------------------------
         Hash#merge!    589.316k (± 7.5%) i/s -      2.975M in   5.088830s
            Hash#[]=    613.353k (± 8.1%) i/s -      3.053M in   5.020553s

Comparison:
            Hash#[]=:   613353.4 i/s
         Hash#merge!:   589315.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        25.436k i/100ms
      Hash#merge({})    19.350k i/100ms
 Hash#dup#merge!({})    32.994k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        399.649k (±13.0%) i/s -      1.959M in   5.004563s
      Hash#merge({})    201.911k (± 8.2%) i/s -      1.006M in   5.027967s
 Hash#dup#merge!({})    318.332k (± 8.2%) i/s -      1.584M in   5.015340s

Comparison:
{}#merge!(Hash) do end:   399649.3 i/s
 Hash#dup#merge!({}):   318331.6 i/s - 1.26x  (± 0.00) slower
      Hash#merge({}):   201910.8 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   315.900M i/100ms
          Hash#merge   317.214M i/100ms
Calculating -------------------------------------
        Hash#**other      3.179B (± 2.6%) i/s -     16.111B in   5.072172s
          Hash#merge      3.185B (± 2.4%) i/s -     16.178B in   5.082392s

Comparison:
          Hash#merge: 3185146089.5 i/s
        Hash#**other: 3178600231.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.034k i/100ms
         Hash#merge!    57.873k i/100ms
Calculating -------------------------------------
          Hash#merge     12.774k (± 9.0%) i/s -     64.108k in   5.062326s
         Hash#merge!    594.931k (± 7.5%) i/s -      3.009M in   5.089274s

Comparison:
         Hash#merge!:   594931.1 i/s
          Hash#merge:    12774.1 i/s - 46.57x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.623M i/100ms
Array#each               1.524M i/100ms
Array#each_w/_object     1.505M i/100ms
Hash#select-include      2.382M i/100ms
Calculating -------------------------------------
Hash#native-slice        19.220M (± 6.9%) i/s -     95.743M in   5.014590s
Array#each               15.492M (± 6.6%) i/s -     77.730M in   5.048220s
Array#each_w/_object     15.366M (± 7.0%) i/s -     76.746M in   5.031148s
Hash#select-include      24.212M (± 6.5%) i/s -    121.476M in   5.046858s

Comparison:
Hash#select-include : 24211659.7 i/s
Hash#native-slice   : 19220031.2 i/s - 1.26x  (± 0.00) slower
Array#each          : 15492264.6 i/s - 1.56x  (± 0.00) slower
Array#each_w/_object: 15366153.4 i/s - 1.58x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   238.000  i/100ms
         Hash#value?   669.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      3.021k (±13.2%) i/s -     14.756k in   5.007087s
         Hash#value?      6.805k (± 0.7%) i/s -     34.119k in   5.013877s

Comparison:
         Hash#value?:     6805.3 i/s
Hash#values.include?:     3020.6 i/s - 2.25x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   316.970M i/100ms
                send   320.736M i/100ms
      method_missing   320.128M i/100ms
Calculating -------------------------------------
                call      3.180B (± 2.5%) i/s -     16.165B in   5.087251s
                send      3.194B (± 2.1%) i/s -     16.037B in   5.022660s
      method_missing      3.167B (± 3.3%) i/s -     16.006B in   5.060462s

Comparison:
                send: 3194460274.8 i/s
                call: 3179734762.4 i/s - same-ish: difference falls within error
      method_missing: 3166862028.4 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    42.939k i/100ms
      Symbol#to_proc    78.770k i/100ms
Calculating -------------------------------------
               Block    779.436k (±13.8%) i/s -      3.822M in   5.045591s
      Symbol#to_proc    768.568k (±13.3%) i/s -      3.860M in   5.125194s

Comparison:
               Block:   779436.2 i/s
      Symbol#to_proc:   768568.3 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   317.680M i/100ms
       block + yield   313.681M i/100ms
        unused block   317.086M i/100ms
               yield   321.461M i/100ms
Calculating -------------------------------------
          block.call      3.198B (± 1.7%) i/s -     16.202B in   5.068533s
       block + yield      3.194B (± 2.5%) i/s -     15.998B in   5.012495s
        unused block      3.181B (± 2.8%) i/s -     16.171B in   5.087398s
               yield      3.195B (± 2.2%) i/s -     16.073B in   5.033724s

Comparison:
          block.call: 3197559592.5 i/s
               yield: 3194707845.6 i/s - same-ish: difference falls within error
       block + yield: 3193791363.7 i/s - same-ish: difference falls within error
        unused block: 3181318579.0 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     4.521k i/100ms
      range#include?   153.000  i/100ms
       range#member?   212.000  i/100ms
       plain compare     7.704k i/100ms
Calculating -------------------------------------
        range#cover?     58.812k (±22.8%) i/s -    271.260k in   5.051003s
      range#include?      2.681k (±23.4%) i/s -     12.240k in   5.041734s
       range#member?      2.445k (±24.1%) i/s -     11.236k in   5.044335s
       plain compare     88.419k (±20.1%) i/s -    416.016k in   5.053769s

Comparison:
       plain compare:    88418.8 i/s
        range#cover?:    58812.1 i/s - same-ish: difference falls within error
      range#include?:     2680.8 i/s - 32.98x  (± 0.00) slower
       range#member?:     2444.7 i/s - 36.17x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    21.892M i/100ms
           String#=~    31.965M i/100ms
          Regexp#===    32.024M i/100ms
        String#match    31.333M i/100ms
Calculating -------------------------------------
       String#match?    343.900M (± 2.1%) i/s -      1.729B in   5.031369s
           String#=~    318.957M (± 1.5%) i/s -      1.598B in   5.012104s
          Regexp#===    319.637M (± 1.4%) i/s -      1.601B in   5.010524s
        String#match    313.004M (± 1.6%) i/s -      1.567B in   5.006559s

Comparison:
       String#match?: 343899665.3 i/s
          Regexp#===: 319636781.7 i/s - 1.08x  (± 0.00) slower
           String#=~: 318956731.4 i/s - 1.08x  (± 0.00) slower
        String#match: 313004465.2 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.799M i/100ms
      String#casecmp     5.006M i/100ms
Calculating -------------------------------------
String#downcase + ==     30.726M (± 7.2%) i/s -    153.918M in   5.044504s
      String#casecmp     49.835M (± 4.5%) i/s -    250.290M in   5.032515s

Comparison:
      String#casecmp: 49835444.0 i/s
String#downcase + ==: 30725655.4 i/s - 1.62x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+    10.465M i/100ms
       String#concat     9.823M i/100ms
       String#append    10.675M i/100ms
         "foo" "bar"   320.994M i/100ms
  "#{'foo'}#{'bar'}"    10.808M i/100ms
Calculating -------------------------------------
            String#+    107.106M (± 3.5%) i/s -    544.159M in   5.087154s
       String#concat    106.974M (± 2.5%) i/s -    540.247M in   5.053566s
       String#append    107.390M (± 3.4%) i/s -    544.443M in   5.076040s
         "foo" "bar"      3.187B (± 2.6%) i/s -     16.050B in   5.039846s
  "#{'foo'}#{'bar'}"    107.208M (± 2.9%) i/s -    540.419M in   5.045113s

Comparison:
         "foo" "bar": 3186884693.8 i/s
       String#append: 107390280.4 i/s - 29.68x  (± 0.00) slower
  "#{'foo'}#{'bar'}": 107208347.2 i/s - 29.73x  (± 0.00) slower
            String#+: 107105748.4 i/s - 29.75x  (± 0.00) slower
       String#concat: 106973531.0 i/s - 29.79x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   312.600M i/100ms
          String#dup   316.755M i/100ms
Calculating -------------------------------------
           String#+@      3.185B (± 2.0%) i/s -     15.943B in   5.008019s
          String#dup      3.182B (± 2.2%) i/s -     16.155B in   5.079382s

Comparison:
           String#+@: 3184714725.7 i/s
          String#dup: 3182044219.5 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   807.325k i/100ms
       String#match?     1.805M i/100ms
    String#end_with?    10.714M i/100ms
Calculating -------------------------------------
           String#=~     12.640M (±13.8%) i/s -     62.164M in   5.003169s
       String#match?     18.018M (± 2.4%) i/s -     90.256M in   5.012217s
    String#end_with?    106.675M (± 1.7%) i/s -    535.692M in   5.023295s

Comparison:
    String#end_with?: 106674670.0 i/s
       String#match?: 18018368.2 i/s - 5.92x  (± 0.00) slower
           String#=~: 12640261.3 i/s - 8.44x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   120.959k i/100ms
          String#sub   952.276k i/100ms
String#dup["string"]=
                        10.005M i/100ms
Calculating -------------------------------------
         String#gsub      8.315M (±12.6%) i/s -     40.400M in   5.010589s
          String#sub      9.803M (±10.5%) i/s -     48.566M in   5.021953s
String#dup["string"]=
                        100.101M (± 1.3%) i/s -    510.230M in   5.098154s

Comparison:
String#dup["string"]=: 100100786.5 i/s
          String#sub:  9802847.8 i/s - 10.21x  (± 0.00) slower
         String#gsub:  8315455.9 i/s - 12.04x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    91.190k i/100ms
           String#tr   171.948k i/100ms
Calculating -------------------------------------
         String#gsub      4.640M (±11.7%) i/s -     22.797M in   5.008840s
           String#tr      1.756M (± 3.5%) i/s -      8.769M in   5.000130s

Comparison:
         String#gsub:  4639894.6 i/s
           String#tr:  1756161.0 i/s - 2.64x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   315.355M i/100ms
         With Freeze   318.741M i/100ms
Calculating -------------------------------------
      Without Freeze      3.189B (± 2.2%) i/s -     16.083B in   5.046141s
         With Freeze      3.193B (± 1.8%) i/s -     16.256B in   5.092321s

Comparison:
         With Freeze: 3193256157.0 i/s
      Without Freeze: 3188944545.2 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     9.152k i/100ms
      String#squeeze    78.043k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    171.622k (± 9.6%) i/s -    851.136k in   5.025323s
      String#squeeze    800.745k (± 4.0%) i/s -      4.058M in   5.076410s

Comparison:
      String#squeeze:   800744.9 i/s
 String#gsub/regex+/:   171621.9 i/s - 4.67x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~    13.393M i/100ms
       String#match?    13.917M i/100ms
  String#start_with?    16.055M i/100ms
Calculating -------------------------------------
           String#=~    145.378M (± 6.9%) i/s -    723.198M in   5.005990s
       String#match?    139.126M (± 1.9%) i/s -    695.849M in   5.003494s
  String#start_with?    159.884M (± 1.6%) i/s -    802.740M in   5.022098s

Comparison:
  String#start_with?: 159883847.6 i/s
           String#=~: 145378308.3 i/s - 1.10x  (± 0.00) slower
       String#match?: 139126323.8 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    75.065k i/100ms
    String#[0, n] ==   653.184k i/100ms
   String#[RANGE] ==   222.444k i/100ms
   String#[0...n] ==   626.117k i/100ms
Calculating -------------------------------------
  String#start_with?      7.261M (± 4.0%) i/s -     36.256M in   5.007996s
    String#[0, n] ==      7.144M (± 4.6%) i/s -     35.925M in   5.040113s
   String#[RANGE] ==     13.524M (±12.5%) i/s -     65.843M in   5.012721s
   String#[0...n] ==      6.316M (± 6.3%) i/s -     31.932M in   5.088074s

Comparison:
   String#[RANGE] ==: 13524398.1 i/s
  String#start_with?:  7260603.6 i/s - 1.86x  (± 0.00) slower
    String#[0, n] ==:  7143720.5 i/s - 1.89x  (± 0.00) slower
   String#[0...n] ==:  6315941.8 i/s - 2.14x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     9.892M i/100ms
 String#sub!'string'   716.955k i/100ms
String#gsub!'string'   510.881k i/100ms
  String#[/regexp/]=     9.668M i/100ms
 String#sub!/regexp/     1.001M i/100ms
String#gsub!/regexp/   783.764k i/100ms
Calculating -------------------------------------
  String#['string']=     99.933M (± 1.7%) i/s -    504.513M in   5.050121s
 String#sub!'string'     10.829M (±11.2%) i/s -     53.772M in   5.045272s
String#gsub!'string'      5.643M (± 7.2%) i/s -     28.098M in   5.017156s
  String#[/regexp/]=     96.811M (± 2.0%) i/s -    493.056M in   5.095259s
 String#sub!/regexp/     31.484M (± 4.7%) i/s -    157.092M in   5.002461s
String#gsub!/regexp/      9.126M (± 9.0%) i/s -     45.458M in   5.031912s

Comparison:
  String#['string']=: 99932754.1 i/s
  String#[/regexp/]=: 96810651.2 i/s - same-ish: difference falls within error
 String#sub!/regexp/: 31483762.4 i/s - 3.17x  (± 0.00) slower
 String#sub!'string': 10828822.8 i/s - 9.23x  (± 0.00) slower
String#gsub!/regexp/:  9126173.2 i/s - 10.95x  (± 0.00) slower
String#gsub!'string':  5643009.9 i/s - 17.71x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub   228.805k i/100ms
        String#chomp     6.519M i/100ms
String#delete_suffix    11.631M i/100ms
Calculating -------------------------------------
          String#sub     76.093M (±13.0%) i/s -    365.173M in   4.999678s
        String#chomp     64.699M (± 3.7%) i/s -    325.934M in   5.045669s
String#delete_suffix    117.083M (± 7.8%) i/s -    581.545M in   5.006626s

Comparison:
String#delete_suffix: 117082997.4 i/s
          String#sub: 76092820.8 i/s - 1.54x  (± 0.00) slower
        String#chomp: 64698988.6 i/s - 1.81x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   316.158M i/100ms
          String#sub   474.167k i/100ms
Calculating -------------------------------------
String#delete_prefix      3.184B (± 2.4%) i/s -     16.124B in   5.066943s
          String#sub    343.151M (± 1.9%) i/s -      1.715B in   4.998958s

Comparison:
String#delete_prefix: 3184278800.7 i/s
          String#sub: 343151298.5 i/s - 9.28x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     2.005M i/100ms
    String#unpack[0]     2.054M i/100ms
Calculating -------------------------------------
      String#unpack1     20.529M (± 4.2%) i/s -    104.253M in   5.087350s
    String#unpack[0]     20.670M (± 2.5%) i/s -    104.774M in   5.072356s

Comparison:
    String#unpack[0]: 20669635.4 i/s
      String#unpack1: 20529478.4 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 25.0.0-dev-d3120a20, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    41.766k i/100ms
          Time.parse   362.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    869.719k (± 9.3%) i/s -      4.344M in   5.041262s
          Time.parse      6.292k (±10.5%) i/s -     31.132k in   5.037621s

Comparison:
        Time.iso8601:   869719.3 i/s
          Time.parse:     6291.9 i/s - 138.23x  (± 0.00) slower

