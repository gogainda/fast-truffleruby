$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       295.287M i/100ms
Function with splat arguments
                         1.969k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.175B (± 3.0%) i/s -     15.945B in   5.026667s
Function with splat arguments
                         21.294k (± 8.9%) i/s -    106.326k in   5.048897s

Comparison:
Function with single Array argument: 3175305553.1 i/s
Function with splat arguments:    21293.9 i/s - 149117.83x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   313.774M i/100ms
Sequential Assignment
                       312.542M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.180B (± 2.5%) i/s -     16.002B in   5.035738s
Sequential Assignment
                          3.200B (± 1.2%) i/s -     16.252B in   5.078902s

Comparison:
Sequential Assignment: 3200446166.3 i/s
 Parallel Assignment: 3179915027.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   312.330M i/100ms
       attr_accessor   321.066M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.182B (± 2.2%) i/s -     15.929B in   5.008701s
       attr_accessor      3.179B (± 2.9%) i/s -     16.053B in   5.055015s

Comparison:
   getter_and_setter: 3181863247.8 i/s
       attr_accessor: 3178596662.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    13.470k i/100ms
         respond_to?   321.609M i/100ms
Calculating -------------------------------------
      begin...rescue    105.264k (± 6.7%) i/s -    525.330k in   5.024785s
         respond_to?      3.203B (± 1.4%) i/s -     16.080B in   5.021218s

Comparison:
         respond_to?: 3203134537.1 i/s
      begin...rescue:   105264.2 i/s - 30429.49x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   320.417M i/100ms
             &method    17.869M i/100ms
Calculating -------------------------------------
              normal      3.172B (± 2.8%) i/s -     16.021B in   5.054443s
             &method    156.949M (± 2.0%) i/s -    786.230M in   5.011427s

Comparison:
              normal: 3172239369.0 i/s
             &method: 156948553.5 i/s - 20.21x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       143.000  i/100ms
       define_method   164.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          3.997k (±46.7%) i/s -      8.580k in   5.047700s
       define_method     11.650k (±46.1%) i/s -     11.808k in   7.150697s

Comparison:
       define_method:    11650.2 i/s
module_eval with string:     3996.6 i/s - 2.91x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   261.622k i/100ms
       Kernel#format   191.767k i/100ms
            String#%   190.920k i/100ms
Calculating -------------------------------------
         Float#round      2.653M (± 2.6%) i/s -     13.343M in   5.032916s
       Kernel#format      1.907M (± 2.6%) i/s -      9.588M in   5.031043s
            String#%      1.888M (± 5.1%) i/s -      9.546M in   5.074213s

Comparison:
         Float#round:  2652935.1 i/s
       Kernel#format:  1907226.7 i/s - 1.39x  (± 0.00) slower
            String#%:  1887902.5 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   320.770M i/100ms
          OpenStruct   320.869M i/100ms
Calculating -------------------------------------
                Hash      3.198B (± 1.0%) i/s -     16.039B in   5.015242s
          OpenStruct      3.190B (± 2.1%) i/s -     16.043B in   5.032548s

Comparison:
                Hash: 3198301257.1 i/s
          OpenStruct: 3189513764.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   314.238M i/100ms
          OpenStruct     4.989k i/100ms
Calculating -------------------------------------
                Hash      3.068B (± 8.2%) i/s -     15.398B in   5.068120s
          OpenStruct     48.580k (±18.8%) i/s -    234.483k in   5.070871s

Comparison:
                Hash: 3067500662.4 i/s
          OpenStruct:    48580.3 i/s - 63142.85x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   831.412k i/100ms
  ancestors.include?   240.167k i/100ms
Calculating -------------------------------------
  less than or equal     10.461M (± 4.8%) i/s -     52.379M in   5.019560s
  ancestors.include?      2.407M (± 6.8%) i/s -     12.008M in   5.020188s

Comparison:
  less than or equal: 10460969.5 i/s
  ancestors.include?:  2407433.5 i/s - 4.35x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     31.835  (± 3.1%) i/s -    159.000  in   5.003823s
         Kernel loop     31.970  (± 3.1%) i/s -    160.000  in   5.008859s

Comparison:
         Kernel loop:       32.0 i/s
          While Loop:       31.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   318.014M i/100ms
         Array#first   319.406M i/100ms
Calculating -------------------------------------
           Array#[0]      3.167B (± 2.7%) i/s -     15.901B in   5.023753s
         Array#first      3.185B (± 2.3%) i/s -     15.970B in   5.016800s

Comparison:
         Array#first: 3185203551.5 i/s
           Array#[0]: 3167497254.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   320.382M i/100ms
          Array#last   315.513M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.164B (± 5.3%) i/s -     16.019B in   5.083889s
          Array#last      3.166B (± 3.3%) i/s -     16.091B in   5.088843s

Comparison:
          Array#last: 3165902879.6 i/s
          Array#[-1]: 3164107413.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   865.532k i/100ms
Calculating -------------------------------------
                find     13.649  (± 0.0%) i/s -     69.000  in   5.057128s
             bsearch      9.238M (± 3.6%) i/s -     46.739M in   5.066638s

Comparison:
             bsearch:  9237769.3 i/s
                find:       13.6 i/s - 676814.94x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.211  (± 0.0%) i/s -      2.000  in   9.475962s
        Array#insert      1.368  (± 0.0%) i/s -      7.000  in   5.118909s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.2 i/s - 6.48x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   317.259M i/100ms
          Array#size   317.265M i/100ms
         Array#count   320.880M i/100ms
Calculating -------------------------------------
        Array#length      3.182B (± 2.3%) i/s -     16.180B in   5.087824s
          Array#size      3.186B (± 2.1%) i/s -     16.181B in   5.080773s
         Array#count      3.203B (± 1.0%) i/s -     16.044B in   5.009185s

Comparison:
         Array#count: 3203237144.1 i/s
          Array#size: 3186202236.5 i/s - same-ish: difference falls within error
        Array#length: 3182063273.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    36.990k i/100ms
        Array#sample     3.805M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    376.707k (± 2.6%) i/s -      1.886M in   5.011396s
        Array#sample     37.960M (± 1.6%) i/s -    190.257M in   5.013503s

Comparison:
        Array#sample: 37959553.1 i/s
 Array#shuffle.first:   376706.8 i/s - 100.77x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   924.000  i/100ms
          Date.parse   712.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     15.625k (±30.7%) i/s -     72.072k in   5.004207s
          Date.parse      7.594k (±17.8%) i/s -     37.024k in   5.059444s

Comparison:
        Date.iso8601:    15624.5 i/s
          Date.parse:     7593.8 i/s - 2.06x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   287.499k i/100ms
           Array#map     1.822M i/100ms
Calculating -------------------------------------
   Array#each + push      3.278M (± 6.7%) i/s -     16.387M in   5.023694s
           Array#map     19.767M (± 8.5%) i/s -     98.368M in   5.021480s

Comparison:
           Array#map: 19766594.9 i/s
   Array#each + push:  3277927.7 i/s - 6.03x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    11.261M i/100ms
               #each    35.377M i/100ms
Calculating -------------------------------------
            For loop    114.368M (± 0.9%) i/s -    574.318M in   5.022098s
               #each    351.475M (± 2.2%) i/s -      1.769B in   5.035473s

Comparison:
               #each: 351474996.0 i/s
            For loop: 114367816.4 i/s - 3.07x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.410M i/100ms
     each_with_index     2.374M i/100ms
Calculating -------------------------------------
          While Loop     14.166M (± 0.9%) i/s -     71.930M in   5.078194s
     each_with_index     26.066M (± 8.4%) i/s -    130.566M in   5.045402s

Comparison:
     each_with_index: 26066491.2 i/s
          While Loop: 14165553.6 i/s - 1.84x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   306.852k i/100ms
      inject to_proc   311.307k i/100ms
        inject block   310.052k i/100ms
Calculating -------------------------------------
       inject symbol      3.086M (± 2.4%) i/s -     15.649M in   5.074344s
      inject to_proc      3.090M (± 2.3%) i/s -     15.565M in   5.040571s
        inject block      3.091M (± 2.4%) i/s -     15.503M in   5.019225s

Comparison:
        inject block:  3090609.1 i/s
      inject to_proc:  3089751.5 i/s - same-ish: difference falls within error
       inject symbol:  3085971.0 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    22.887k i/100ms
   Array#map.flatten    25.798k i/100ms
      Array#flat_map    54.914k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    264.022k (± 5.7%) i/s -      1.327M in   5.046502s
   Array#map.flatten    266.972k (± 5.7%) i/s -      1.341M in   5.041301s
      Array#flat_map    561.963k (± 4.7%) i/s -      2.856M in   5.094369s

Comparison:
      Array#flat_map:   561962.9 i/s
   Array#map.flatten:   266971.7 i/s - 2.10x  (± 0.00) slower
Array#map.flatten(1):   264022.1 i/s - 2.13x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   316.089k i/100ms
  Array#reverse_each     2.826M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.460M (± 6.8%) i/s -     17.385M in   5.058663s
  Array#reverse_each     24.088M (± 7.9%) i/s -    121.498M in   5.071895s

Comparison:
  Array#reverse_each: 24087579.0 i/s
  Array#reverse.each:  3459573.8 i/s - 6.96x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       895.732k i/100ms
   Enumerable#detect     5.785M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.259M (± 7.7%) i/s -    204.227M in  20.068506s
   Enumerable#detect     57.885M (± 3.2%) i/s -      1.157B in  20.010351s

Comparison:
   Enumerable#detect: 57885020.2 i/s
Enumerable#select.first: 10259362.1 i/s - 5.64x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       367.999k i/100ms
Enumerable#select.last
                       552.736k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.780M (± 3.2%) i/s -     19.136M in   5.067410s
Enumerable#select.last
                          5.500M (± 5.9%) i/s -     27.637M in   5.050035s

Comparison:
Enumerable#select.last:  5499919.0 i/s
Enumerable#reverse.detect:  3780137.7 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.926k i/100ms
  Enumerable#sort_by     4.277k i/100ms
     Enumerable#sort   158.000  i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         32.744k (±43.4%) i/s -    113.854k in   5.009850s
  Enumerable#sort_by     34.761k (±36.9%) i/s -    132.587k in   5.035636s
     Enumerable#sort     52.918k (±10.5%) i/s -    260.226k in   4.997868s

Comparison:
     Enumerable#sort:    52918.2 i/s
  Enumerable#sort_by:    34761.4 i/s - same-ish: difference falls within error
Enumerable#sort_by (Symbol#to_proc):    32744.2 i/s - 1.62x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   937.245k i/100ms
Enumerable#sort_by...first
                         9.561k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      9.396M (± 2.3%) i/s -     47.799M in   5.089987s
Enumerable#sort_by...first
                        103.097k (± 5.9%) i/s -    516.294k in   5.033588s

Comparison:
   Enumerable#min_by:  9396315.5 i/s
Enumerable#sort_by...first:   103097.5 i/s - 91.14x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   662.572k i/100ms
            Hash#dup   756.742k i/100ms
Calculating -------------------------------------
              Hash[]      7.827M (±11.1%) i/s -     39.092M in   5.060332s
            Hash#dup      7.913M (±10.1%) i/s -     39.351M in   5.038101s

Comparison:
            Hash#dup:  7913356.2 i/s
              Hash[]:  7826679.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   307.613M i/100ms
  Hash#fetch, symbol   315.126M i/100ms
     Hash#[], string    29.070M i/100ms
  Hash#fetch, string    26.798M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.199B (± 1.3%) i/s -     15.996B in   5.000918s
  Hash#fetch, symbol      3.187B (± 2.3%) i/s -     16.071B in   5.045459s
     Hash#[], string    290.856M (± 1.6%) i/s -      1.483B in   5.098527s
  Hash#fetch, string    267.218M (± 1.2%) i/s -      1.340B in   5.015079s

Comparison:
     Hash#[], symbol: 3199177483.6 i/s
  Hash#fetch, symbol: 3187181939.7 i/s - same-ish: difference falls within error
     Hash#[], string: 290856470.5 i/s - 11.00x  (± 0.00) slower
  Hash#fetch, string: 267218370.9 i/s - 11.97x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    91.764M i/100ms
             Hash#[]    91.528M i/100ms
          Hash#[] ||    91.811M i/100ms
          Hash#[] &&    91.436M i/100ms
          Hash#fetch    91.441M i/100ms
 Hash#fetch fallback    91.720M i/100ms
Calculating -------------------------------------
            Hash#dig    913.731M (± 1.8%) i/s -      4.588B in   5.023259s
             Hash#[]    918.460M (± 0.2%) i/s -      4.668B in   5.082370s
          Hash#[] ||    915.435M (± 1.4%) i/s -      4.591B in   5.015603s
          Hash#[] &&    912.395M (± 1.8%) i/s -      4.572B in   5.012481s
          Hash#fetch    915.385M (± 1.1%) i/s -      4.664B in   5.095265s
 Hash#fetch fallback    915.147M (± 1.3%) i/s -      4.586B in   5.012138s

Comparison:
             Hash#[]: 918460023.0 i/s
          Hash#[] ||: 915435329.4 i/s - same-ish: difference falls within error
          Hash#fetch: 915385297.9 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 915147140.9 i/s - same-ish: difference falls within error
            Hash#dig: 913730753.6 i/s - same-ish: difference falls within error
          Hash#[] &&: 912394815.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   316.243M i/100ms
  Hash#fetch + block   320.656M i/100ms
    Hash#fetch + arg   311.928M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.164B (± 3.1%) i/s -     15.812B in   5.003226s
  Hash#fetch + block      3.191B (± 2.1%) i/s -     16.033B in   5.026120s
    Hash#fetch + arg      3.140B (± 4.9%) i/s -     15.908B in   5.080351s

Comparison:
  Hash#fetch + block: 3191356732.1 i/s
  Hash#fetch + const: 3163582436.6 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 3140025647.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    36.160k i/100ms
         sort + to_h     6.887k i/100ms
Calculating -------------------------------------
      sort_by + to_h    440.006k (± 9.7%) i/s -      2.170M in   5.010291s
         sort + to_h    194.444k (±14.5%) i/s -    943.519k in   5.015281s

Comparison:
      sort_by + to_h:   440005.9 i/s
         sort + to_h:   194444.4 i/s - 2.26x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   232.963k i/100ms
       Hash#each_key   244.392k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.469M (±10.5%) i/s -     12.114M in   5.020356s
       Hash#each_key      2.609M (± 6.2%) i/s -     13.197M in   5.088249s

Comparison:
       Hash#each_key:  2608516.3 i/s
      Hash#keys.each:  2469041.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   294.000  i/100ms
           Hash#key?     3.837M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      3.165k (±12.8%) i/s -     15.582k in   5.037298s
           Hash#key?     38.531M (± 1.2%) i/s -    195.665M in   5.078927s

Comparison:
           Hash#key?: 38530795.8 i/s
  Hash#keys.include?:     3164.8 i/s - 12174.89x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    50.667k i/100ms
            Hash#[]=    57.586k i/100ms
Calculating -------------------------------------
         Hash#merge!    603.159k (± 7.4%) i/s -      3.040M in   5.079445s
            Hash#[]=    603.983k (± 7.4%) i/s -      3.052M in   5.089322s

Comparison:
            Hash#[]=:   603983.4 i/s
         Hash#merge!:   603158.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        43.437k i/100ms
      Hash#merge({})    19.291k i/100ms
 Hash#dup#merge!({})    32.728k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        408.697k (± 8.7%) i/s -      2.042M in   5.035343s
      Hash#merge({})    202.527k (±10.4%) i/s -      1.003M in   5.024166s
 Hash#dup#merge!({})    323.062k (± 8.0%) i/s -      1.604M in   5.004092s

Comparison:
{}#merge!(Hash) do end:   408697.4 i/s
 Hash#dup#merge!({}):   323062.2 i/s - 1.27x  (± 0.00) slower
      Hash#merge({}):   202526.7 i/s - 2.02x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   320.149M i/100ms
          Hash#merge   311.108M i/100ms
Calculating -------------------------------------
        Hash#**other      3.195B (± 1.6%) i/s -     16.007B in   5.012014s
          Hash#merge      3.186B (± 2.8%) i/s -     16.178B in   5.081607s

Comparison:
        Hash#**other: 3194716941.8 i/s
          Hash#merge: 3186407859.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   739.000  i/100ms
         Hash#merge!    59.509k i/100ms
Calculating -------------------------------------
          Hash#merge     12.786k (±11.3%) i/s -     63.554k in   5.047648s
         Hash#merge!    593.839k (± 4.1%) i/s -      2.975M in   5.019365s

Comparison:
         Hash#merge!:   593839.0 i/s
          Hash#merge:    12785.9 i/s - 46.44x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.750M i/100ms
Array#each               1.610M i/100ms
Array#each_w/_object     1.516M i/100ms
Hash#select-include      2.399M i/100ms
Calculating -------------------------------------
Hash#native-slice        19.421M (± 7.2%) i/s -     97.998M in   5.083235s
Array#each               15.930M (± 6.3%) i/s -     80.515M in   5.085004s
Array#each_w/_object     15.616M (± 7.0%) i/s -     78.850M in   5.083626s
Hash#select-include      24.410M (± 7.7%) i/s -    122.368M in   5.055996s

Comparison:
Hash#select-include : 24410440.7 i/s
Hash#native-slice   : 19421073.6 i/s - 1.26x  (± 0.00) slower
Array#each          : 15930297.6 i/s - 1.53x  (± 0.00) slower
Array#each_w/_object: 15616434.9 i/s - 1.56x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   281.000  i/100ms
         Hash#value?     1.657k i/100ms
Calculating -------------------------------------
Hash#values.include?      3.371k (±11.2%) i/s -     16.579k in   5.007156s
         Hash#value?     16.603k (± 0.7%) i/s -     84.507k in   5.090287s

Comparison:
         Hash#value?:    16602.6 i/s
Hash#values.include?:     3371.5 i/s - 4.92x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   317.218M i/100ms
                send   315.380M i/100ms
      method_missing   311.298M i/100ms
Calculating -------------------------------------
                call      3.198B (± 1.5%) i/s -     16.178B in   5.060521s
                send      3.206B (± 1.2%) i/s -     16.084B in   5.018135s
      method_missing      3.175B (± 2.8%) i/s -     15.876B in   5.003931s

Comparison:
                send: 3205752610.0 i/s
                call: 3197742968.4 i/s - same-ish: difference falls within error
      method_missing: 3175424403.9 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    63.855k i/100ms
      Symbol#to_proc    75.272k i/100ms
Calculating -------------------------------------
               Block    745.619k (±12.4%) i/s -      3.704M in   5.047117s
      Symbol#to_proc    772.112k (±10.4%) i/s -      3.839M in   5.047649s

Comparison:
      Symbol#to_proc:   772112.3 i/s
               Block:   745618.9 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   318.466M i/100ms
       block + yield   312.008M i/100ms
        unused block   321.584M i/100ms
               yield   321.472M i/100ms
Calculating -------------------------------------
          block.call      3.202B (± 1.5%) i/s -     16.242B in   5.073845s
       block + yield      3.189B (± 2.3%) i/s -     16.224B in   5.091139s
        unused block      3.210B (± 0.4%) i/s -     16.079B in   5.008615s
               yield      3.195B (± 1.7%) i/s -     16.074B in   5.032007s

Comparison:
        unused block: 3210351893.6 i/s
          block.call: 3201850058.4 i/s - same-ish: difference falls within error
               yield: 3195262925.2 i/s - same-ish: difference falls within error
       block + yield: 3188550193.6 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     4.618k i/100ms
      range#include?   154.000  i/100ms
       range#member?   228.000  i/100ms
       plain compare     7.911k i/100ms
Calculating -------------------------------------
        range#cover?     56.291k (±21.6%) i/s -    263.226k in   5.106201s
      range#include?      2.323k (±23.4%) i/s -     10.472k in   5.034984s
       range#member?      2.286k (±25.8%) i/s -     10.488k in   5.091489s
       plain compare     83.717k (±21.3%) i/s -    387.639k in   5.024864s

Comparison:
       plain compare:    83717.4 i/s
        range#cover?:    56291.1 i/s - same-ish: difference falls within error
      range#include?:     2323.2 i/s - 36.04x  (± 0.00) slower
       range#member?:     2286.3 i/s - 36.62x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    10.184M i/100ms
           String#=~    13.897M i/100ms
          Regexp#===    13.955M i/100ms
        String#match    13.962M i/100ms
Calculating -------------------------------------
       String#match?    145.518M (± 1.3%) i/s -    733.265M in   5.039875s
           String#=~    139.186M (± 1.2%) i/s -    708.741M in   5.092834s
          Regexp#===    138.530M (± 4.3%) i/s -    697.762M in   5.049356s
        String#match    139.100M (± 2.1%) i/s -    698.104M in   5.021240s

Comparison:
       String#match?: 145517702.1 i/s
           String#=~: 139185605.5 i/s - 1.05x  (± 0.00) slower
        String#match: 139099557.4 i/s - 1.05x  (± 0.00) slower
          Regexp#===: 138530131.1 i/s - same-ish: difference falls within error

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.726M i/100ms
      String#casecmp     4.521M i/100ms
Calculating -------------------------------------
String#downcase + ==     31.019M (± 7.4%) i/s -    155.380M in   5.048378s
      String#casecmp     49.809M (± 5.3%) i/s -    248.673M in   5.007058s

Comparison:
      String#casecmp: 49809042.7 i/s
String#downcase + ==: 31019172.7 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     9.767M i/100ms
       String#concat    10.193M i/100ms
       String#append    10.179M i/100ms
         "foo" "bar"   321.814M i/100ms
  "#{'foo'}#{'bar'}"    10.394M i/100ms
Calculating -------------------------------------
            String#+    103.255M (± 6.3%) i/s -    527.397M in   5.137416s
       String#concat    102.578M (± 6.2%) i/s -    519.844M in   5.097679s
       String#append    101.292M (± 7.0%) i/s -    508.950M in   5.058079s
         "foo" "bar"      3.186B (± 2.2%) i/s -     16.091B in   5.053832s
  "#{'foo'}#{'bar'}"    101.444M (± 7.7%) i/s -    509.297M in   5.064459s

Comparison:
         "foo" "bar": 3185550144.3 i/s
            String#+: 103254879.2 i/s - 30.85x  (± 0.00) slower
       String#concat: 102578255.5 i/s - 31.05x  (± 0.00) slower
  "#{'foo'}#{'bar'}": 101444191.8 i/s - 31.40x  (± 0.00) slower
       String#append: 101292457.1 i/s - 31.45x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   320.979M i/100ms
          String#dup   320.497M i/100ms
Calculating -------------------------------------
           String#+@      3.180B (± 2.3%) i/s -     16.049B in   5.049474s
          String#dup      3.192B (± 2.0%) i/s -     16.025B in   5.023032s

Comparison:
          String#dup: 3191692971.0 i/s
           String#+@: 3180058095.2 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.536M i/100ms
       String#match?     1.792M i/100ms
    String#end_with?    13.308M i/100ms
Calculating -------------------------------------
           String#=~     15.571M (± 2.9%) i/s -     78.359M in   5.037061s
       String#match?     17.941M (± 1.4%) i/s -     91.403M in   5.095802s
    String#end_with?    133.639M (± 0.8%) i/s -    678.701M in   5.078946s

Comparison:
    String#end_with?: 133639011.6 i/s
       String#match?: 17940519.3 i/s - 7.45x  (± 0.00) slower
           String#=~: 15570649.0 i/s - 8.58x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   100.298k i/100ms
          String#sub   713.254k i/100ms
String#dup["string"]=
                        10.317M i/100ms
Calculating -------------------------------------
         String#gsub      8.513M (±14.1%) i/s -     41.022M in   5.006960s
          String#sub     10.089M (±10.8%) i/s -     49.928M in   5.027244s
String#dup["string"]=
                        102.811M (± 3.0%) i/s -    515.852M in   5.022701s

Comparison:
String#dup["string"]=: 102810798.5 i/s
          String#sub: 10089392.4 i/s - 10.19x  (± 0.00) slower
         String#gsub:  8512699.7 i/s - 12.08x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   114.169k i/100ms
           String#tr   176.224k i/100ms
Calculating -------------------------------------
         String#gsub      4.463M (±14.9%) i/s -     21.578M in   5.001814s
           String#tr      1.926M (± 5.4%) i/s -      9.692M in   5.048682s

Comparison:
         String#gsub:  4463279.6 i/s
           String#tr:  1925969.8 i/s - 2.32x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   318.979M i/100ms
         With Freeze   308.541M i/100ms
Calculating -------------------------------------
      Without Freeze      3.143B (± 3.6%) i/s -     15.949B in   5.082021s
         With Freeze      3.186B (± 2.1%) i/s -     16.044B in   5.037478s

Comparison:
         With Freeze: 3186417569.0 i/s
      Without Freeze: 3142662102.4 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     9.844k i/100ms
      String#squeeze    80.420k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    174.939k (± 9.7%) i/s -    866.272k in   5.017471s
      String#squeeze    798.945k (± 4.0%) i/s -      4.021M in   5.040906s

Comparison:
      String#squeeze:   798944.6 i/s
 String#gsub/regex+/:   174938.5 i/s - 4.57x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~    13.345M i/100ms
       String#match?    13.926M i/100ms
  String#start_with?    17.856M i/100ms
Calculating -------------------------------------
           String#=~    152.552M (± 6.4%) i/s -    760.666M in   5.015799s
       String#match?    139.667M (± 0.7%) i/s -    710.238M in   5.085469s
  String#start_with?    178.128M (± 0.7%) i/s -    892.775M in   5.012217s

Comparison:
  String#start_with?: 178127858.5 i/s
           String#=~: 152552151.4 i/s - 1.17x  (± 0.00) slower
       String#match?: 139666924.0 i/s - 1.28x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   299.524k i/100ms
    String#[0, n] ==   216.389k i/100ms
   String#[RANGE] ==   308.321k i/100ms
   String#[0...n] ==   218.977k i/100ms
Calculating -------------------------------------
  String#start_with?      3.679M (± 1.2%) i/s -     18.570M in   5.049048s
    String#[0, n] ==      2.150M (± 6.3%) i/s -     10.819M in   5.061715s
   String#[RANGE] ==      3.059M (± 3.7%) i/s -     15.416M in   5.045832s
   String#[0...n] ==      2.172M (± 2.3%) i/s -     10.949M in   5.042486s

Comparison:
  String#start_with?:  3678576.1 i/s
   String#[RANGE] ==:  3059482.8 i/s - 1.20x  (± 0.00) slower
   String#[0...n] ==:  2172468.2 i/s - 1.69x  (± 0.00) slower
    String#[0, n] ==:  2150422.1 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    10.348M i/100ms
 String#sub!'string'   183.243k i/100ms
String#gsub!'string'   583.733k i/100ms
  String#[/regexp/]=    10.288M i/100ms
 String#sub!/regexp/     1.789M i/100ms
String#gsub!/regexp/   927.858k i/100ms
Calculating -------------------------------------
  String#['string']=    103.472M (± 0.2%) i/s -    517.378M in   5.000212s
 String#sub!'string'     11.356M (±14.7%) i/s -     54.606M in   5.012490s
String#gsub!'string'      6.526M (± 8.1%) i/s -     32.689M in   5.052201s
  String#[/regexp/]=    103.440M (± 0.2%) i/s -    524.699M in   5.072541s
 String#sub!/regexp/     33.620M (± 5.6%) i/s -    168.138M in   5.020538s
String#gsub!/regexp/      9.148M (± 8.5%) i/s -     45.465M in   5.013406s

Comparison:
  String#['string']=: 103471732.1 i/s
  String#[/regexp/]=: 103439702.7 i/s - same-ish: difference falls within error
 String#sub!/regexp/: 33620196.2 i/s - 3.08x  (± 0.00) slower
 String#sub!'string': 11355621.0 i/s - 9.11x  (± 0.00) slower
String#gsub!/regexp/:  9147793.4 i/s - 11.31x  (± 0.00) slower
String#gsub!'string':  6525502.2 i/s - 15.86x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub   214.750k i/100ms
        String#chomp     6.401M i/100ms
String#delete_suffix    11.484M i/100ms
Calculating -------------------------------------
          String#sub     77.998M (±12.1%) i/s -    376.457M in   4.999219s
        String#chomp     63.811M (± 1.8%) i/s -    320.059M in   5.017533s
String#delete_suffix    121.882M (± 7.9%) i/s -    608.651M in   5.032221s

Comparison:
String#delete_suffix: 121881545.2 i/s
          String#sub: 77997748.2 i/s - 1.56x  (± 0.00) slower
        String#chomp: 63810520.0 i/s - 1.91x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   320.919M i/100ms
          String#sub     3.599M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.169B (± 3.1%) i/s -     16.046B in   5.067764s
          String#sub    340.576M (± 2.4%) i/s -      1.702B in   5.002710s

Comparison:
String#delete_prefix: 3169499776.4 i/s
          String#sub: 340575814.1 i/s - 9.31x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.694M i/100ms
    String#unpack[0]     2.017M i/100ms
Calculating -------------------------------------
      String#unpack1     21.215M (± 6.5%) i/s -    106.735M in   5.064116s
    String#unpack[0]     17.668M (± 2.4%) i/s -     88.750M in   5.025922s

Comparison:
      String#unpack1: 21215074.8 i/s
    String#unpack[0]: 17668297.5 i/s - 1.20x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 25.0.0-dev-38b98a1f, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    59.420k i/100ms
          Time.parse   399.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    902.086k (±17.2%) i/s -      4.338M in   5.067611s
          Time.parse      6.313k (±10.4%) i/s -     31.122k in   5.008201s

Comparison:
        Time.iso8601:   902085.7 i/s
          Time.parse:     6313.3 i/s - 142.89x  (± 0.00) slower

