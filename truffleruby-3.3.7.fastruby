$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       205.567M i/100ms
Function with splat arguments
                         1.913k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.023B (± 3.8%) i/s -     15.212B in   5.040022s
Function with splat arguments
                         20.842k (±10.3%) i/s -    103.302k in   5.024336s

Comparison:
Function with single Array argument: 3022782709.5 i/s
Function with splat arguments:    20841.6 i/s - 145036.30x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   300.710M i/100ms
Sequential Assignment
                       301.047M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.003B (± 6.6%) i/s -     15.035B in   5.036647s
Sequential Assignment
                          3.037B (± 2.6%) i/s -     15.353B in   5.059145s

Comparison:
Sequential Assignment: 3036859749.5 i/s
 Parallel Assignment: 3002509008.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   294.000M i/100ms
       attr_accessor   297.606M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.039B (± 4.3%) i/s -     15.288B in   5.041808s
       attr_accessor      3.035B (± 1.9%) i/s -     15.178B in   5.002793s

Comparison:
   getter_and_setter: 3039167766.0 i/s
       attr_accessor: 3035031135.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    13.053k i/100ms
         respond_to?   306.233M i/100ms
Calculating -------------------------------------
      begin...rescue    105.024k (± 6.6%) i/s -    522.120k in   5.003337s
         respond_to?      3.036B (± 4.6%) i/s -     15.312B in   5.054653s

Comparison:
         respond_to?: 3036241454.8 i/s
      begin...rescue:   105023.7 i/s - 28910.07x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   293.710M i/100ms
             &method    18.165M i/100ms
Calculating -------------------------------------
              normal      3.035B (± 3.4%) i/s -     15.273B in   5.038188s
             &method    180.911M (± 1.6%) i/s -    908.233M in   5.021749s

Comparison:
              normal: 3035168530.3 i/s
             &method: 180910904.4 i/s - 16.78x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       120.000  i/100ms
       define_method   144.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          3.679k (±53.5%) i/s -      7.320k in   5.019850s
       define_method     12.080k (±43.6%) i/s -     11.952k in   6.914978s

Comparison:
       define_method:    12080.4 i/s
module_eval with string:     3678.9 i/s - 3.28x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   242.887k i/100ms
       Kernel#format   183.321k i/100ms
            String#%   183.397k i/100ms
Calculating -------------------------------------
         Float#round      2.574M (± 2.6%) i/s -     12.873M in   5.003971s
       Kernel#format      1.815M (± 2.3%) i/s -      9.166M in   5.052299s
            String#%      1.797M (± 3.6%) i/s -      8.986M in   5.006763s

Comparison:
         Float#round:  2574401.8 i/s
       Kernel#format:  1815231.0 i/s - 1.42x  (± 0.00) slower
            String#%:  1797446.1 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   301.555M i/100ms
          OpenStruct   302.907M i/100ms
Calculating -------------------------------------
                Hash      3.067B (± 2.5%) i/s -     15.379B in   5.017984s
          OpenStruct      3.034B (± 2.2%) i/s -     15.448B in   5.094906s

Comparison:
                Hash: 3066786645.0 i/s
          OpenStruct: 3033603687.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   297.673M i/100ms
          OpenStruct     4.593k i/100ms
Calculating -------------------------------------
                Hash      2.922B (± 9.5%) i/s -     14.586B in   5.059061s
          OpenStruct     44.322k (±20.9%) i/s -    211.278k in   5.031154s

Comparison:
                Hash: 2922265199.6 i/s
          OpenStruct:    44322.0 i/s - 65932.56x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   716.162k i/100ms
  ancestors.include?   229.825k i/100ms
Calculating -------------------------------------
  less than or equal     10.018M (± 3.2%) i/s -     50.131M in   5.009750s
  ancestors.include?      2.345M (± 7.0%) i/s -     11.721M in   5.030889s

Comparison:
  less than or equal: 10017709.1 i/s
  ancestors.include?:  2345440.0 i/s - 4.27x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     30.427  (± 3.3%) i/s -    152.000  in   5.009149s
         Kernel loop     30.196  (± 3.3%) i/s -    151.000  in   5.010620s

Comparison:
          While Loop:       30.4 i/s
         Kernel loop:       30.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   300.374M i/100ms
         Array#first   315.258M i/100ms
Calculating -------------------------------------
           Array#[0]      3.016B (± 2.5%) i/s -     15.319B in   5.083206s
         Array#first      3.011B (± 2.9%) i/s -     15.132B in   5.029643s

Comparison:
           Array#[0]: 3015566805.4 i/s
         Array#first: 3011245088.4 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   292.303M i/100ms
          Array#last   306.361M i/100ms
Calculating -------------------------------------
          Array#[-1]      2.997B (± 4.1%) i/s -     15.200B in   5.081622s
          Array#last      3.023B (± 2.7%) i/s -     15.318B in   5.071863s

Comparison:
          Array#last: 3022595021.8 i/s
          Array#[-1]: 2996561058.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   933.691k i/100ms
Calculating -------------------------------------
                find     13.658  (± 0.0%) i/s -     69.000  in   5.053677s
             bsearch      9.409M (± 3.0%) i/s -     47.618M in   5.065791s

Comparison:
             bsearch:  9408632.5 i/s
                find:       13.7 i/s - 688887.51x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.212  (± 0.0%) i/s -      2.000  in   9.430229s
        Array#insert      1.382  (± 0.0%) i/s -      7.000  in   5.067096s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.2 i/s - 6.51x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   307.421M i/100ms
          Array#size   298.723M i/100ms
         Array#count   308.927M i/100ms
Calculating -------------------------------------
        Array#length      3.043B (± 2.3%) i/s -     15.371B in   5.054051s
          Array#size      3.044B (± 3.0%) i/s -     15.235B in   5.009937s
         Array#count      3.015B (± 2.4%) i/s -     15.137B in   5.023305s

Comparison:
          Array#size: 3043643639.9 i/s
        Array#length: 3043007060.0 i/s - same-ish: difference falls within error
         Array#count: 3015286951.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    37.034k i/100ms
        Array#sample     3.815M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    376.167k (± 2.2%) i/s -      1.889M in   5.023653s
        Array#sample     37.978M (± 1.2%) i/s -    190.765M in   5.023743s

Comparison:
        Array#sample: 37978409.4 i/s
 Array#shuffle.first:   376167.3 i/s - 100.96x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   928.000  i/100ms
          Date.parse   582.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     15.569k (±29.6%) i/s -     72.384k in   5.042410s
          Date.parse      7.652k (±18.0%) i/s -     37.248k in   5.079550s

Comparison:
        Date.iso8601:    15568.7 i/s
          Date.parse:     7652.1 i/s - 2.03x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   258.794k i/100ms
           Array#map     1.890M i/100ms
Calculating -------------------------------------
   Array#each + push      3.207M (± 5.8%) i/s -     16.045M in   5.021984s
           Array#map     19.431M (± 8.9%) i/s -     96.375M in   5.010407s

Comparison:
           Array#map: 19431476.6 i/s
   Array#each + push:  3206606.9 i/s - 6.06x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    11.256M i/100ms
               #each    35.443M i/100ms
Calculating -------------------------------------
            For loop    114.021M (± 1.8%) i/s -    574.037M in   5.036238s
               #each    355.272M (± 1.6%) i/s -      1.808B in   5.089128s

Comparison:
               #each: 355272289.2 i/s
            For loop: 114020504.7 i/s - 3.12x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.345M i/100ms
     each_with_index     2.373M i/100ms
Calculating -------------------------------------
          While Loop     14.079M (± 1.6%) i/s -     71.308M in   5.066108s
     each_with_index     25.860M (± 7.5%) i/s -    130.519M in   5.075779s

Comparison:
     each_with_index: 25860472.3 i/s
          While Loop: 14079318.0 i/s - 1.84x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   306.280k i/100ms
      inject to_proc   307.531k i/100ms
        inject block   311.175k i/100ms
Calculating -------------------------------------
       inject symbol      3.098M (± 1.7%) i/s -     15.620M in   5.043326s
      inject to_proc      3.079M (± 2.6%) i/s -     15.684M in   5.098258s
        inject block      3.100M (± 1.4%) i/s -     15.559M in   5.020398s

Comparison:
        inject block:  3099802.1 i/s
       inject symbol:  3098142.4 i/s - same-ish: difference falls within error
      inject to_proc:  3078569.5 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    18.864k i/100ms
   Array#map.flatten    25.436k i/100ms
      Array#flat_map    56.279k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    255.450k (± 8.8%) i/s -      1.283M in   5.071758s
   Array#map.flatten    264.611k (± 7.1%) i/s -      1.323M in   5.034911s
      Array#flat_map    548.763k (± 6.3%) i/s -      2.758M in   5.052604s

Comparison:
      Array#flat_map:   548763.4 i/s
   Array#map.flatten:   264610.5 i/s - 2.07x  (± 0.00) slower
Array#map.flatten(1):   255449.6 i/s - 2.15x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   339.903k i/100ms
  Array#reverse_each     2.281M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.417M (± 6.2%) i/s -     16.995M in   5.004610s
  Array#reverse_each     22.885M (± 3.1%) i/s -    116.320M in   5.087112s

Comparison:
  Array#reverse_each: 22884615.3 i/s
  Array#reverse.each:  3416853.5 i/s - 6.70x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       939.283k i/100ms
   Enumerable#detect     5.727M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.275M (± 7.1%) i/s -    204.764M in  20.066562s
   Enumerable#detect     57.556M (± 2.3%) i/s -      1.151B in  20.011254s

Comparison:
   Enumerable#detect: 57555544.0 i/s
Enumerable#select.first: 10274622.3 i/s - 5.60x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       370.532k i/100ms
Enumerable#select.last
                       515.364k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.735M (± 5.9%) i/s -     18.897M in   5.083498s
Enumerable#select.last
                          5.363M (± 6.1%) i/s -     26.799M in   5.022375s

Comparison:
Enumerable#select.last:  5363459.2 i/s
Enumerable#reverse.detect:  3735491.8 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.351k i/100ms
  Enumerable#sort_by     1.019k i/100ms
     Enumerable#sort   229.000  i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         38.123k (±33.1%) i/s -    145.762k in   5.008648s
  Enumerable#sort_by     42.715k (±15.5%) i/s -    200.743k in   5.012936s
     Enumerable#sort     55.790k (± 9.8%) i/s -    274.800k in   4.997688s

Comparison:
     Enumerable#sort:    55789.8 i/s
  Enumerable#sort_by:    42715.3 i/s - 1.31x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    38123.5 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   938.327k i/100ms
Enumerable#sort_by...first
                         9.281k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      9.423M (± 1.2%) i/s -     47.855M in   5.079102s
Enumerable#sort_by...first
                        115.113k (± 3.6%) i/s -    584.703k in   5.086160s

Comparison:
   Enumerable#min_by:  9423244.3 i/s
Enumerable#sort_by...first:   115113.3 i/s - 81.86x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   641.935k i/100ms
            Hash#dup   732.656k i/100ms
Calculating -------------------------------------
              Hash[]      7.664M (±11.8%) i/s -     37.874M in   5.015231s
            Hash#dup      7.735M (±10.5%) i/s -     38.831M in   5.085054s

Comparison:
            Hash#dup:  7734758.9 i/s
              Hash[]:  7663867.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   304.100M i/100ms
  Hash#fetch, symbol   303.683M i/100ms
     Hash#[], string    29.192M i/100ms
  Hash#fetch, string    26.769M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.094B (± 2.1%) i/s -     15.509B in   5.014899s
  Hash#fetch, symbol      3.042B (± 2.3%) i/s -     15.488B in   5.094218s
     Hash#[], string    290.565M (± 1.7%) i/s -      1.460B in   5.024853s
  Hash#fetch, string    266.422M (± 1.3%) i/s -      1.338B in   5.024747s

Comparison:
     Hash#[], symbol: 3093999810.3 i/s
  Hash#fetch, symbol: 3041899815.1 i/s - same-ish: difference falls within error
     Hash#[], string: 290564713.7 i/s - 10.65x  (± 0.00) slower
  Hash#fetch, string: 266422165.7 i/s - 11.61x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    91.350M i/100ms
             Hash#[]    91.171M i/100ms
          Hash#[] ||    91.002M i/100ms
          Hash#[] &&    91.825M i/100ms
          Hash#fetch    91.939M i/100ms
 Hash#fetch fallback    91.846M i/100ms
Calculating -------------------------------------
            Hash#dig    914.765M (± 1.3%) i/s -      4.659B in   5.093934s
             Hash#[]    915.121M (± 1.2%) i/s -      4.650B in   5.081696s
          Hash#[] ||    912.143M (± 2.0%) i/s -      4.641B in   5.090258s
          Hash#[] &&    912.761M (± 1.7%) i/s -      4.591B in   5.031636s
          Hash#fetch    913.543M (± 1.6%) i/s -      4.597B in   5.033248s
 Hash#fetch fallback    914.954M (± 1.3%) i/s -      4.592B in   5.020079s

Comparison:
             Hash#[]: 915120990.3 i/s
 Hash#fetch fallback: 914954418.3 i/s - same-ish: difference falls within error
            Hash#dig: 914764645.8 i/s - same-ish: difference falls within error
          Hash#fetch: 913542957.7 i/s - same-ish: difference falls within error
          Hash#[] &&: 912760522.8 i/s - same-ish: difference falls within error
          Hash#[] ||: 912143284.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   300.850M i/100ms
  Hash#fetch + block   308.886M i/100ms
    Hash#fetch + arg   296.962M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.047B (± 2.5%) i/s -     15.343B in   5.038328s
  Hash#fetch + block      3.039B (± 2.3%) i/s -     15.444B in   5.085125s
    Hash#fetch + arg      3.007B (± 4.3%) i/s -     15.145B in   5.047907s

Comparison:
  Hash#fetch + const: 3047334305.7 i/s
  Hash#fetch + block: 3038825704.0 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 3006527057.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    21.199k i/100ms
         sort + to_h     2.453k i/100ms
Calculating -------------------------------------
      sort_by + to_h    472.091k (±10.7%) i/s -      2.332M in   5.023715s
         sort + to_h    239.647k (±15.5%) i/s -      1.143M in   5.001796s

Comparison:
      sort_by + to_h:   472091.3 i/s
         sort + to_h:   239646.8 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   238.233k i/100ms
       Hash#each_key   263.953k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.427M (±10.9%) i/s -     11.912M in   5.024182s
       Hash#each_key      2.613M (± 3.2%) i/s -     13.198M in   5.056353s

Comparison:
       Hash#each_key:  2612860.2 i/s
      Hash#keys.each:  2426773.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   291.000  i/100ms
           Hash#key?    12.663M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      2.916k (±13.5%) i/s -     14.259k in   5.027819s
           Hash#key?    126.471M (± 2.0%) i/s -    633.162M in   5.008403s

Comparison:
           Hash#key?: 126470879.2 i/s
  Hash#keys.include?:     2916.5 i/s - 43364.60x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    57.110k i/100ms
            Hash#[]=    60.273k i/100ms
Calculating -------------------------------------
         Hash#merge!    549.987k (± 7.0%) i/s -      2.741M in   5.009043s
            Hash#[]=    629.501k (± 7.8%) i/s -      3.134M in   5.020896s

Comparison:
            Hash#[]=:   629500.5 i/s
         Hash#merge!:   549987.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        41.770k i/100ms
      Hash#merge({})    20.888k i/100ms
 Hash#dup#merge!({})    32.466k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        401.128k (±10.2%) i/s -      2.005M in   5.060326s
      Hash#merge({})    201.116k (± 9.0%) i/s -      1.003M in   5.032493s
 Hash#dup#merge!({})    321.906k (± 9.3%) i/s -      1.623M in   5.099515s

Comparison:
{}#merge!(Hash) do end:   401128.1 i/s
 Hash#dup#merge!({}):   321906.3 i/s - 1.25x  (± 0.00) slower
      Hash#merge({}):   201115.6 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   303.576M i/100ms
          Hash#merge   296.361M i/100ms
Calculating -------------------------------------
        Hash#**other      3.006B (± 3.9%) i/s -     15.179B in   5.058364s
          Hash#merge      3.014B (± 2.2%) i/s -     15.114B in   5.017850s

Comparison:
          Hash#merge: 3013671894.6 i/s
        Hash#**other: 3005638960.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   963.000  i/100ms
         Hash#merge!    59.067k i/100ms
Calculating -------------------------------------
          Hash#merge     12.205k (±12.3%) i/s -     60.669k in   5.068012s
         Hash#merge!    587.963k (± 6.1%) i/s -      2.953M in   5.045023s

Comparison:
         Hash#merge!:   587962.7 i/s
          Hash#merge:    12205.5 i/s - 48.17x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.770M i/100ms
Array#each               1.533M i/100ms
Array#each_w/_object     1.630M i/100ms
Hash#select-include      2.544M i/100ms
Calculating -------------------------------------
Hash#native-slice        19.159M (± 6.5%) i/s -     95.564M in   5.019721s
Array#each               15.206M (± 6.2%) i/s -     76.628M in   5.067669s
Array#each_w/_object     15.702M (± 6.1%) i/s -     78.240M in   5.007959s
Hash#select-include      24.025M (± 5.9%) i/s -    119.556M in   5.000343s

Comparison:
Hash#select-include : 24024922.4 i/s
Hash#native-slice   : 19159314.0 i/s - 1.25x  (± 0.00) slower
Array#each_w/_object: 15702182.9 i/s - 1.53x  (± 0.00) slower
Array#each          : 15205940.7 i/s - 1.58x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   295.000  i/100ms
         Hash#value?    15.803k i/100ms
Calculating -------------------------------------
Hash#values.include?      3.597k (±12.6%) i/s -     17.995k in   5.122304s
         Hash#value?    153.921k (± 1.5%) i/s -    774.347k in   5.031929s

Comparison:
         Hash#value?:   153920.7 i/s
Hash#values.include?:     3596.7 i/s - 42.80x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   292.368M i/100ms
                send   298.875M i/100ms
      method_missing   302.900M i/100ms
Calculating -------------------------------------
                call      3.002B (± 3.3%) i/s -     15.203B in   5.070890s
                send      3.028B (± 2.1%) i/s -     15.243B in   5.036954s
      method_missing      3.017B (± 2.4%) i/s -     15.145B in   5.022554s

Comparison:
                send: 3027627486.5 i/s
      method_missing: 3017157637.4 i/s - same-ish: difference falls within error
                call: 3001507442.9 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    59.092k i/100ms
      Symbol#to_proc    66.309k i/100ms
Calculating -------------------------------------
               Block    737.284k (± 9.8%) i/s -      3.664M in   5.033337s
      Symbol#to_proc    699.982k (±15.3%) i/s -      3.448M in   5.060372s

Comparison:
               Block:   737284.4 i/s
      Symbol#to_proc:   699982.0 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   297.438M i/100ms
       block + yield   294.565M i/100ms
        unused block   298.966M i/100ms
               yield   307.569M i/100ms
Calculating -------------------------------------
          block.call      3.015B (± 2.4%) i/s -     15.169B in   5.034120s
       block + yield      3.018B (± 2.8%) i/s -     15.317B in   5.078898s
        unused block      3.012B (± 2.9%) i/s -     15.247B in   5.067584s
               yield      3.022B (± 2.7%) i/s -     15.378B in   5.092207s

Comparison:
               yield: 3022234934.9 i/s
       block + yield: 3018417764.9 i/s - same-ish: difference falls within error
          block.call: 3015088348.0 i/s - same-ish: difference falls within error
        unused block: 3011525455.7 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     4.366k i/100ms
      range#include?   152.000  i/100ms
       range#member?   224.000  i/100ms
       plain compare     8.060k i/100ms
Calculating -------------------------------------
        range#cover?     61.425k (±28.5%) i/s -    275.058k in   5.048529s
      range#include?      2.921k (±35.6%) i/s -     12.160k in   5.025044s
       range#member?      2.425k (±32.1%) i/s -     10.976k in   5.077117s
       plain compare     89.587k (±25.7%) i/s -    411.060k in   5.028935s

Comparison:
       plain compare:    89587.0 i/s
        range#cover?:    61425.4 i/s - same-ish: difference falls within error
      range#include?:     2920.9 i/s - 30.67x  (± 0.00) slower
       range#member?:     2424.7 i/s - 36.95x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    14.440M i/100ms
           String#=~    13.890M i/100ms
          Regexp#===    13.736M i/100ms
        String#match    13.943M i/100ms
Calculating -------------------------------------
       String#match?    145.269M (± 1.4%) i/s -    736.453M in   5.070706s
           String#=~    139.030M (± 1.1%) i/s -    708.369M in   5.095675s
          Regexp#===    138.442M (± 4.3%) i/s -    700.531M in   5.073496s
        String#match    139.244M (± 1.1%) i/s -    711.093M in   5.107512s

Comparison:
       String#match?: 145268563.3 i/s
        String#match: 139243527.8 i/s - 1.04x  (± 0.00) slower
           String#=~: 139030390.9 i/s - 1.04x  (± 0.00) slower
          Regexp#===: 138442062.5 i/s - same-ish: difference falls within error

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.814M i/100ms
      String#casecmp     5.018M i/100ms
Calculating -------------------------------------
String#downcase + ==     30.821M (± 7.9%) i/s -    154.797M in   5.069625s
      String#casecmp     49.609M (± 6.3%) i/s -    250.923M in   5.087156s

Comparison:
      String#casecmp: 49608543.6 i/s
String#downcase + ==: 30820803.7 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     9.833M i/100ms
       String#concat     9.622M i/100ms
       String#append    10.217M i/100ms
         "foo" "bar"   303.099M i/100ms
  "#{'foo'}#{'bar'}"    10.559M i/100ms
Calculating -------------------------------------
            String#+    102.991M (± 6.2%) i/s -    521.145M in   5.090174s
       String#concat    102.787M (± 6.2%) i/s -    519.601M in   5.083229s
       String#append    102.331M (± 6.2%) i/s -    510.857M in   5.018907s
         "foo" "bar"      3.043B (± 2.5%) i/s -     15.458B in   5.083013s
  "#{'foo'}#{'bar'}"    102.619M (± 6.3%) i/s -    517.377M in   5.070927s

Comparison:
         "foo" "bar": 3043113084.9 i/s
            String#+: 102990817.2 i/s - 29.55x  (± 0.00) slower
       String#concat: 102786857.9 i/s - 29.61x  (± 0.00) slower
  "#{'foo'}#{'bar'}": 102618732.9 i/s - 29.65x  (± 0.00) slower
       String#append: 102330874.8 i/s - 29.74x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   299.929M i/100ms
          String#dup   301.236M i/100ms
Calculating -------------------------------------
           String#+@      3.028B (± 3.2%) i/s -     15.296B in   5.057192s
          String#dup      3.044B (± 2.2%) i/s -     15.363B in   5.049817s

Comparison:
          String#dup: 3043814507.1 i/s
           String#+@: 3027920339.2 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.505M i/100ms
       String#match?     1.794M i/100ms
    String#end_with?    13.403M i/100ms
Calculating -------------------------------------
           String#=~     15.051M (± 6.2%) i/s -     75.265M in   5.031999s
       String#match?     17.814M (± 1.7%) i/s -     89.712M in   5.037350s
    String#end_with?    132.744M (± 2.3%) i/s -    670.136M in   5.051177s

Comparison:
    String#end_with?: 132743596.7 i/s
       String#match?: 17814459.5 i/s - 7.45x  (± 0.00) slower
           String#=~: 15051337.0 i/s - 8.82x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   199.143k i/100ms
          String#sub   741.917k i/100ms
String#dup["string"]=
                        10.243M i/100ms
Calculating -------------------------------------
         String#gsub      8.573M (±15.0%) i/s -     41.820M in   5.042493s
          String#sub     10.401M (±10.7%) i/s -     52.676M in   5.146856s
String#dup["string"]=
                        103.464M (± 0.2%) i/s -    522.405M in   5.049174s

Comparison:
String#dup["string"]=: 103464065.9 i/s
          String#sub: 10401023.0 i/s - 9.95x  (± 0.00) slower
         String#gsub:  8572831.1 i/s - 12.07x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    85.853k i/100ms
           String#tr   191.516k i/100ms
Calculating -------------------------------------
         String#gsub      4.811M (±12.3%) i/s -     23.524M in   5.002772s
           String#tr      1.947M (± 3.7%) i/s -      9.767M in   5.022986s

Comparison:
         String#gsub:  4810879.6 i/s
           String#tr:  1947468.1 i/s - 2.47x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   302.059M i/100ms
         With Freeze   302.119M i/100ms
Calculating -------------------------------------
      Without Freeze      2.988B (± 3.4%) i/s -     15.103B in   5.061408s
         With Freeze      3.014B (± 3.1%) i/s -     15.106B in   5.017744s

Comparison:
         With Freeze: 3013809403.5 i/s
      Without Freeze: 2987523288.3 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     9.284k i/100ms
      String#squeeze    87.036k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    164.579k (±12.0%) i/s -    807.708k in   5.018285s
      String#squeeze    851.378k (± 5.6%) i/s -      4.265M in   5.025695s

Comparison:
      String#squeeze:   851377.7 i/s
 String#gsub/regex+/:   164579.4 i/s - 5.17x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     6.635M i/100ms
       String#match?    13.884M i/100ms
  String#start_with?    17.842M i/100ms
Calculating -------------------------------------
           String#=~    109.669M (± 6.1%) i/s -    550.746M in   5.042879s
       String#match?    139.387M (± 1.0%) i/s -    708.087M in   5.080583s
  String#start_with?    177.035M (± 2.3%) i/s -    892.077M in   5.041907s

Comparison:
  String#start_with?: 177034757.6 i/s
       String#match?: 139386864.1 i/s - 1.27x  (± 0.00) slower
           String#=~: 109669111.7 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   396.154k i/100ms
    String#[0, n] ==   235.849k i/100ms
   String#[RANGE] ==   289.552k i/100ms
   String#[0...n] ==   206.382k i/100ms
Calculating -------------------------------------
  String#start_with?      3.971M (± 1.4%) i/s -     20.204M in   5.088907s
    String#[0, n] ==      2.500M (± 3.5%) i/s -     12.500M in   5.005564s
   String#[RANGE] ==      3.121M (± 4.2%) i/s -     15.636M in   5.019623s
   String#[0...n] ==      2.130M (± 3.6%) i/s -     10.732M in   5.045616s

Comparison:
  String#start_with?:  3971003.1 i/s
   String#[RANGE] ==:  3121463.1 i/s - 1.27x  (± 0.00) slower
    String#[0, n] ==:  2500387.1 i/s - 1.59x  (± 0.00) slower
   String#[0...n] ==:  2129959.9 i/s - 1.86x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    10.290M i/100ms
 String#sub!'string'   208.101k i/100ms
String#gsub!'string'   654.006k i/100ms
  String#[/regexp/]=    10.347M i/100ms
 String#sub!/regexp/     1.239M i/100ms
String#gsub!/regexp/   965.094k i/100ms
Calculating -------------------------------------
  String#['string']=    103.326M (± 0.4%) i/s -    524.805M in   5.079211s
 String#sub!'string'     11.506M (±14.6%) i/s -     55.563M in   5.012672s
String#gsub!'string'      6.503M (± 6.8%) i/s -     32.700M in   5.053759s
  String#[/regexp/]=    103.322M (± 1.5%) i/s -    517.367M in   5.008548s
 String#sub!/regexp/     33.933M (± 5.1%) i/s -    169.784M in   5.021497s
String#gsub!/regexp/      9.635M (± 8.0%) i/s -     48.255M in   5.042251s

Comparison:
  String#['string']=: 103325967.4 i/s
  String#[/regexp/]=: 103321875.1 i/s - same-ish: difference falls within error
 String#sub!/regexp/: 33932601.5 i/s - 3.05x  (± 0.00) slower
 String#sub!'string': 11505510.6 i/s - 8.98x  (± 0.00) slower
String#gsub!/regexp/:  9634915.2 i/s - 10.72x  (± 0.00) slower
String#gsub!'string':  6503222.7 i/s - 15.89x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub   208.908k i/100ms
        String#chomp     6.383M i/100ms
String#delete_suffix    11.442M i/100ms
Calculating -------------------------------------
          String#sub     78.105M (±11.3%) i/s -    377.706M in   4.999830s
        String#chomp     63.713M (± 1.7%) i/s -    319.145M in   5.010578s
String#delete_suffix    120.543M (± 9.5%) i/s -    606.443M in   5.088383s

Comparison:
String#delete_suffix: 120542833.2 i/s
          String#sub: 78104649.5 i/s - 1.54x  (± 0.00) slower
        String#chomp: 63712690.1 i/s - 1.89x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   315.000M i/100ms
          String#sub     1.222M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.040B (± 2.0%) i/s -     15.435B in   5.079673s
          String#sub    339.817M (± 3.0%) i/s -      1.697B in   4.999376s

Comparison:
String#delete_prefix: 3039827477.7 i/s
          String#sub: 339816786.4 i/s - 8.95x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.675M i/100ms
    String#unpack[0]     1.992M i/100ms
Calculating -------------------------------------
      String#unpack1     21.204M (± 6.2%) i/s -    105.511M in   5.007336s
    String#unpack[0]     21.333M (± 4.3%) i/s -    107.542M in   5.050354s

Comparison:
    String#unpack[0]: 21333142.7 i/s
      String#unpack1: 21203688.1 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 25.0.0-dev-fdf602f3, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    39.178k i/100ms
          Time.parse   366.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    535.394k (±24.9%) i/s -      2.547M in   5.041068s
          Time.parse      6.114k (±13.6%) i/s -     30.012k in   5.059762s

Comparison:
        Time.iso8601:   535394.2 i/s
          Time.parse:     6114.0 i/s - 87.57x  (± 0.00) slower

