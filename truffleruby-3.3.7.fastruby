$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       183.669M i/100ms
Function with splat arguments
                         1.972k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.178B (± 3.1%) i/s -     15.979B in   5.033704s
Function with splat arguments
                         21.419k (± 9.2%) i/s -    106.488k in   5.022249s

Comparison:
Function with single Array argument: 3177888878.4 i/s
Function with splat arguments:    21419.2 i/s - 148366.25x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   316.771M i/100ms
Sequential Assignment
                       310.868M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.139B (± 4.4%) i/s -     15.839B in   5.057110s
Sequential Assignment
                          3.167B (± 3.0%) i/s -     15.854B in   5.011115s

Comparison:
Sequential Assignment: 3166967666.5 i/s
 Parallel Assignment: 3138883657.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   320.543M i/100ms
       attr_accessor   321.419M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.176B (± 1.6%) i/s -     16.027B in   5.047802s
       attr_accessor      3.192B (± 1.2%) i/s -     16.071B in   5.035144s

Comparison:
       attr_accessor: 3192250968.3 i/s
   getter_and_setter: 3175966807.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    11.008k i/100ms
         respond_to?   311.968M i/100ms
Calculating -------------------------------------
      begin...rescue     99.983k (± 9.1%) i/s -    495.360k in   5.014910s
         respond_to?      3.191B (± 1.3%) i/s -     16.222B in   5.084820s

Comparison:
         respond_to?: 3190879970.5 i/s
      begin...rescue:    99982.8 i/s - 31914.29x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   317.783M i/100ms
             &method    18.115M i/100ms
Calculating -------------------------------------
              normal      3.103B (± 7.5%) i/s -     15.571B in   5.063259s
             &method    180.548M (± 3.1%) i/s -    905.753M in   5.021852s

Comparison:
              normal: 3102962905.8 i/s
             &method: 180547720.5 i/s - 17.19x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       146.000  i/100ms
       define_method   165.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          3.665k (±54.4%) i/s -      7.592k in   5.438915s
       define_method     12.211k (±38.0%) i/s -     12.705k in   5.211081s

Comparison:
       define_method:    12211.4 i/s
module_eval with string:     3664.8 i/s - 3.33x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   232.971k i/100ms
       Kernel#format   180.719k i/100ms
            String#%   109.595k i/100ms
Calculating -------------------------------------
         Float#round      2.400M (± 2.1%) i/s -     12.114M in   5.049408s
       Kernel#format      1.799M (± 2.8%) i/s -      9.036M in   5.027924s
            String#%      1.106M (± 2.8%) i/s -      5.589M in   5.056545s

Comparison:
         Float#round:  2400317.2 i/s
       Kernel#format:  1798601.5 i/s - 1.33x  (± 0.00) slower
            String#%:  1106267.7 i/s - 2.17x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   310.808M i/100ms
          OpenStruct   302.482M i/100ms
Calculating -------------------------------------
                Hash      3.172B (± 2.4%) i/s -     15.851B in   4.999549s
          OpenStruct      3.192B (± 1.7%) i/s -     16.032B in   5.024183s

Comparison:
          OpenStruct: 3191832411.7 i/s
                Hash: 3172448426.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   320.116M i/100ms
          OpenStruct     4.340k i/100ms
Calculating -------------------------------------
                Hash      3.085B (± 4.5%) i/s -     15.686B in   5.095715s
          OpenStruct     44.922k (±20.1%) i/s -    217.000k in   5.140721s

Comparison:
                Hash: 3085011264.7 i/s
          OpenStruct:    44922.3 i/s - 68674.32x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   906.550k i/100ms
  ancestors.include?   224.977k i/100ms
Calculating -------------------------------------
  less than or equal      9.931M (± 2.8%) i/s -     49.860M in   5.024788s
  ancestors.include?      2.308M (± 6.9%) i/s -     11.474M in   5.005104s

Comparison:
  less than or equal:  9931229.3 i/s
  ancestors.include?:  2307542.1 i/s - 4.30x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     31.868  (± 3.1%) i/s -    160.000  in   5.028491s
         Kernel loop     31.973  (± 3.1%) i/s -    160.000  in   5.008349s

Comparison:
         Kernel loop:       32.0 i/s
          While Loop:       31.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   315.474M i/100ms
         Array#first   314.345M i/100ms
Calculating -------------------------------------
           Array#[0]      3.155B (± 2.5%) i/s -     15.774B in   5.003028s
         Array#first      3.163B (± 2.9%) i/s -     16.032B in   5.073068s

Comparison:
         Array#first: 3163042094.0 i/s
           Array#[0]: 3154885976.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   317.582M i/100ms
          Array#last   308.558M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.168B (± 2.4%) i/s -     15.879B in   5.015512s
          Array#last      3.174B (± 2.2%) i/s -     16.045B in   5.057354s

Comparison:
          Array#last: 3174264326.3 i/s
          Array#[-1]: 3167866707.8 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   916.836k i/100ms
Calculating -------------------------------------
                find     13.538  (± 0.0%) i/s -     68.000  in   5.029622s
             bsearch      9.292M (± 4.0%) i/s -     46.759M in   5.041151s

Comparison:
             bsearch:  9292418.7 i/s
                find:       13.5 i/s - 686382.45x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.211  (± 0.0%) i/s -      2.000  in   9.468117s
        Array#insert      1.382  (± 0.0%) i/s -      7.000  in   5.064257s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.2 i/s - 6.54x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   310.785M i/100ms
          Array#size   305.154M i/100ms
         Array#count   321.517M i/100ms
Calculating -------------------------------------
        Array#length      3.180B (± 2.1%) i/s -     16.161B in   5.084296s
          Array#size      3.184B (± 2.2%) i/s -     16.173B in   5.081592s
         Array#count      3.182B (± 2.2%) i/s -     16.076B in   5.054023s

Comparison:
          Array#size: 3184334607.8 i/s
         Array#count: 3182494396.4 i/s - same-ish: difference falls within error
        Array#length: 3180130341.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    35.815k i/100ms
        Array#sample     3.873M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    358.758k (± 7.2%) i/s -      1.791M in   5.036812s
        Array#sample     38.501M (± 1.5%) i/s -    193.668M in   5.031301s

Comparison:
        Array#sample: 38501455.3 i/s
 Array#shuffle.first:   358757.6 i/s - 107.32x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   891.000  i/100ms
          Date.parse   566.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     15.582k (±34.4%) i/s -     71.280k in   5.031268s
          Date.parse      7.865k (±21.5%) i/s -     37.356k in   5.051439s

Comparison:
        Date.iso8601:    15581.6 i/s
          Date.parse:     7865.0 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   287.958k i/100ms
           Array#map     1.766M i/100ms
Calculating -------------------------------------
   Array#each + push      3.231M (± 4.6%) i/s -     16.126M in   5.002898s
           Array#map     19.434M (± 7.3%) i/s -     97.132M in   5.026241s

Comparison:
           Array#map: 19433693.7 i/s
   Array#each + push:  3230780.8 i/s - 6.02x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     9.672M i/100ms
               #each    34.917M i/100ms
Calculating -------------------------------------
            For loop     97.116M (± 2.0%) i/s -    493.253M in   5.081116s
               #each    348.133M (± 1.4%) i/s -      1.746B in   5.016002s

Comparison:
               #each: 348133436.0 i/s
            For loop: 97115764.8 i/s - 3.58x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.498M i/100ms
     each_with_index     2.366M i/100ms
Calculating -------------------------------------
          While Loop     13.998M (± 3.0%) i/s -     70.415M in   5.035412s
     each_with_index     23.579M (± 2.4%) i/s -    118.302M in   5.020264s

Comparison:
     each_with_index: 23578661.0 i/s
          While Loop: 13997569.1 i/s - 1.68x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   304.204k i/100ms
      inject to_proc   310.856k i/100ms
        inject block   311.040k i/100ms
Calculating -------------------------------------
       inject symbol      3.095M (± 2.0%) i/s -     15.514M in   5.015257s
      inject to_proc      3.087M (± 2.5%) i/s -     15.543M in   5.038926s
        inject block      3.095M (± 1.8%) i/s -     15.552M in   5.026810s

Comparison:
        inject block:  3094894.3 i/s
       inject symbol:  3094799.3 i/s - same-ish: difference falls within error
      inject to_proc:  3086701.8 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    22.157k i/100ms
   Array#map.flatten    25.608k i/100ms
      Array#flat_map    54.880k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    248.702k (± 8.1%) i/s -      1.241M in   5.032722s
   Array#map.flatten    260.549k (± 6.6%) i/s -      1.306M in   5.042265s
      Array#flat_map    533.883k (± 5.0%) i/s -      2.689M in   5.052637s

Comparison:
      Array#flat_map:   533882.7 i/s
   Array#map.flatten:   260548.7 i/s - 2.05x  (± 0.00) slower
Array#map.flatten(1):   248701.5 i/s - 2.15x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   317.427k i/100ms
  Array#reverse_each     2.302M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.544M (± 3.6%) i/s -     17.776M in   5.022545s
  Array#reverse_each     23.311M (± 3.4%) i/s -    117.421M in   5.042192s

Comparison:
  Array#reverse_each: 23310977.1 i/s
  Array#reverse.each:  3543879.8 i/s - 6.58x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       947.312k i/100ms
   Enumerable#detect     4.603M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.242M (± 7.1%) i/s -    203.672M in  20.021570s
   Enumerable#detect     46.373M (± 2.1%) i/s -    929.724M in  20.059645s

Comparison:
   Enumerable#detect: 46372540.9 i/s
Enumerable#select.first: 10242226.3 i/s - 4.53x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       366.250k i/100ms
Enumerable#select.last
                       551.138k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.731M (± 3.6%) i/s -     18.679M in   5.013452s
Enumerable#select.last
                          5.470M (± 5.5%) i/s -     27.557M in   5.060709s

Comparison:
Enumerable#select.last:  5469661.0 i/s
Enumerable#reverse.detect:  3730597.8 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.032k i/100ms
  Enumerable#sort_by     4.225k i/100ms
     Enumerable#sort     4.968k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         37.302k (±25.0%) i/s -    161.280k in   5.055766s
  Enumerable#sort_by     39.134k (±17.2%) i/s -    185.900k in   5.040085s
     Enumerable#sort     55.074k (± 3.6%) i/s -    278.208k in   5.058752s

Comparison:
     Enumerable#sort:    55074.4 i/s
  Enumerable#sort_by:    39134.0 i/s - 1.41x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    37302.3 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   938.881k i/100ms
Enumerable#sort_by...first
                         9.251k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      9.451M (± 1.5%) i/s -     47.883M in   5.067639s
Enumerable#sort_by...first
                        111.536k (± 6.0%) i/s -    555.060k in   5.003923s

Comparison:
   Enumerable#min_by:  9450908.5 i/s
Enumerable#sort_by...first:   111536.2 i/s - 84.73x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   655.664k i/100ms
            Hash#dup   706.787k i/100ms
Calculating -------------------------------------
              Hash[]      7.503M (±10.6%) i/s -     37.373M in   5.039265s
            Hash#dup      7.736M (± 8.3%) i/s -     38.873M in   5.070606s

Comparison:
            Hash#dup:  7736485.3 i/s
              Hash[]:  7503218.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   312.648M i/100ms
  Hash#fetch, symbol   319.490M i/100ms
     Hash#[], string    29.212M i/100ms
  Hash#fetch, string    26.751M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.192B (± 1.9%) i/s -     16.258B in   5.095170s
  Hash#fetch, symbol      3.198B (± 1.5%) i/s -     16.294B in   5.096116s
     Hash#[], string    290.787M (± 1.6%) i/s -      1.461B in   5.024264s
  Hash#fetch, string    266.875M (± 1.6%) i/s -      1.338B in   5.013391s

Comparison:
  Hash#fetch, symbol: 3198077486.8 i/s
     Hash#[], symbol: 3192001914.4 i/s - same-ish: difference falls within error
     Hash#[], string: 290787186.3 i/s - 11.00x  (± 0.00) slower
  Hash#fetch, string: 266874935.5 i/s - 11.98x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    91.554M i/100ms
             Hash#[]    90.917M i/100ms
          Hash#[] ||    91.860M i/100ms
          Hash#[] &&    91.877M i/100ms
          Hash#fetch    91.865M i/100ms
 Hash#fetch fallback    91.941M i/100ms
Calculating -------------------------------------
            Hash#dig    915.685M (± 1.0%) i/s -      4.578B in   4.999744s
             Hash#[]    914.794M (± 1.6%) i/s -      4.637B in   5.069969s
          Hash#[] ||    914.191M (± 1.4%) i/s -      4.593B in   5.025208s
          Hash#[] &&    913.286M (± 1.7%) i/s -      4.594B in   5.031592s
          Hash#fetch    915.062M (± 1.3%) i/s -      4.593B in   5.020435s
 Hash#fetch fallback    913.654M (± 1.8%) i/s -      4.597B in   5.033237s

Comparison:
            Hash#dig: 915684909.1 i/s
          Hash#fetch: 915061762.2 i/s - same-ish: difference falls within error
             Hash#[]: 914793972.8 i/s - same-ish: difference falls within error
          Hash#[] ||: 914190950.3 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 913653610.9 i/s - same-ish: difference falls within error
          Hash#[] &&: 913285533.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   316.479M i/100ms
  Hash#fetch + block   308.138M i/100ms
    Hash#fetch + arg   321.502M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.176B (± 2.6%) i/s -     16.140B in   5.086103s
  Hash#fetch + block      3.192B (± 2.1%) i/s -     16.023B in   5.022039s
    Hash#fetch + arg      3.183B (± 2.4%) i/s -     16.075B in   5.052903s

Comparison:
  Hash#fetch + block: 3192125956.0 i/s
    Hash#fetch + arg: 3183273536.7 i/s - same-ish: difference falls within error
  Hash#fetch + const: 3175674731.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    36.489k i/100ms
         sort + to_h     3.188k i/100ms
Calculating -------------------------------------
      sort_by + to_h    480.244k (± 4.6%) i/s -      2.408M in   5.026166s
         sort + to_h    223.069k (±15.5%) i/s -      1.071M in   5.000488s

Comparison:
      sort_by + to_h:   480244.2 i/s
         sort + to_h:   223069.1 i/s - 2.15x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   229.976k i/100ms
       Hash#each_key   255.116k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.332M (± 9.7%) i/s -     11.499M in   5.029160s
       Hash#each_key      2.505M (± 5.9%) i/s -     12.501M in   5.013677s

Comparison:
       Hash#each_key:  2505427.4 i/s
      Hash#keys.each:  2331879.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   275.000  i/100ms
           Hash#key?    12.607M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      3.108k (±14.3%) i/s -     15.400k in   5.079099s
           Hash#key?    126.013M (± 0.2%) i/s -    630.375M in   5.002472s

Comparison:
           Hash#key?: 126013208.6 i/s
  Hash#keys.include?:     3107.7 i/s - 40548.77x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    53.210k i/100ms
            Hash#[]=    63.753k i/100ms
Calculating -------------------------------------
         Hash#merge!    585.160k (± 6.8%) i/s -      2.927M in   5.025331s
            Hash#[]=    629.504k (± 6.8%) i/s -      3.188M in   5.096477s

Comparison:
            Hash#[]=:   629504.0 i/s
         Hash#merge!:   585160.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        23.007k i/100ms
      Hash#merge({})    19.470k i/100ms
 Hash#dup#merge!({})    31.779k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        390.990k (±13.9%) i/s -      1.910M in   5.014414s
      Hash#merge({})    201.401k (± 9.2%) i/s -      1.012M in   5.087974s
 Hash#dup#merge!({})    320.254k (± 8.6%) i/s -      1.589M in   5.011838s

Comparison:
{}#merge!(Hash) do end:   390990.0 i/s
 Hash#dup#merge!({}):   320253.5 i/s - same-ish: difference falls within error
      Hash#merge({}):   201401.2 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   319.461M i/100ms
          Hash#merge   311.792M i/100ms
Calculating -------------------------------------
        Hash#**other      3.184B (± 1.9%) i/s -     15.973B in   5.018719s
          Hash#merge      3.190B (± 2.5%) i/s -     16.213B in   5.086378s

Comparison:
          Hash#merge: 3189689430.8 i/s
        Hash#**other: 3183970923.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.022k i/100ms
         Hash#merge!    63.418k i/100ms
Calculating -------------------------------------
          Hash#merge     11.655k (±11.7%) i/s -     58.254k in   5.074117s
         Hash#merge!    639.754k (± 6.4%) i/s -      3.234M in   5.078577s

Comparison:
         Hash#merge!:   639753.8 i/s
          Hash#merge:    11655.0 i/s - 54.89x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.839M i/100ms
Array#each               1.659M i/100ms
Array#each_w/_object     1.621M i/100ms
Hash#select-include      2.488M i/100ms
Calculating -------------------------------------
Hash#native-slice        19.403M (± 6.3%) i/s -     97.463M in   5.050785s
Array#each               15.851M (± 7.0%) i/s -     79.644M in   5.057854s
Array#each_w/_object     15.823M (± 6.5%) i/s -     79.431M in   5.050988s
Hash#select-include      24.165M (± 6.5%) i/s -    121.931M in   5.077065s

Comparison:
Hash#select-include : 24165405.0 i/s
Hash#native-slice   : 19403154.6 i/s - 1.25x  (± 0.00) slower
Array#each          : 15851464.7 i/s - 1.52x  (± 0.00) slower
Array#each_w/_object: 15822572.1 i/s - 1.53x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   276.000  i/100ms
         Hash#value?     2.401k i/100ms
Calculating -------------------------------------
Hash#values.include?      3.411k (±11.8%) i/s -     16.836k in   5.054378s
         Hash#value?     24.565k (± 0.4%) i/s -    124.852k in   5.082700s

Comparison:
         Hash#value?:    24564.5 i/s
Hash#values.include?:     3410.6 i/s - 7.20x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   320.467M i/100ms
                send   320.426M i/100ms
      method_missing   319.339M i/100ms
Calculating -------------------------------------
                call      3.153B (± 3.2%) i/s -     16.023B in   5.087761s
                send      3.180B (± 2.2%) i/s -     16.021B in   5.040559s
      method_missing      3.167B (± 2.7%) i/s -     15.967B in   5.044942s

Comparison:
                send: 3180188832.9 i/s
      method_missing: 3167408461.1 i/s - same-ish: difference falls within error
                call: 3152835492.0 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    43.691k i/100ms
      Symbol#to_proc    68.204k i/100ms
Calculating -------------------------------------
               Block    762.968k (±16.6%) i/s -      3.714M in   5.036148s
      Symbol#to_proc    750.748k (±12.7%) i/s -      3.683M in   5.010342s

Comparison:
               Block:   762968.2 i/s
      Symbol#to_proc:   750748.2 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   320.278M i/100ms
       block + yield   315.461M i/100ms
        unused block   312.142M i/100ms
               yield   319.357M i/100ms
Calculating -------------------------------------
          block.call      3.181B (± 2.3%) i/s -     16.014B in   5.037414s
       block + yield      3.195B (± 0.8%) i/s -     16.088B in   5.035180s
        unused block      3.156B (± 3.7%) i/s -     15.919B in   5.050950s
               yield      3.165B (± 2.4%) i/s -     15.968B in   5.048315s

Comparison:
       block + yield: 3195446867.9 i/s
          block.call: 3180747406.8 i/s - same-ish: difference falls within error
               yield: 3164868211.9 i/s - same-ish: difference falls within error
        unused block: 3156376374.0 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     3.999k i/100ms
      range#include?   181.000  i/100ms
       range#member?   232.000  i/100ms
       plain compare     7.809k i/100ms
Calculating -------------------------------------
        range#cover?     59.349k (±29.7%) i/s -    263.934k in   5.047018s
      range#include?      2.279k (±32.6%) i/s -     10.317k in   5.081055s
       range#member?      2.379k (±27.2%) i/s -     11.136k in   5.091438s
       plain compare     88.866k (±20.8%) i/s -    421.686k in   5.070899s

Comparison:
       plain compare:    88865.9 i/s
        range#cover?:    59349.4 i/s - same-ish: difference falls within error
       range#member?:     2379.2 i/s - 37.35x  (± 0.00) slower
      range#include?:     2278.6 i/s - 39.00x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    13.086M i/100ms
           String#=~    13.946M i/100ms
          Regexp#===    13.906M i/100ms
        String#match    13.891M i/100ms
Calculating -------------------------------------
       String#match?    138.770M (± 1.9%) i/s -    693.554M in   4.999782s
           String#=~    138.825M (± 1.7%) i/s -    697.291M in   5.024427s
          Regexp#===    139.100M (± 2.6%) i/s -    695.317M in   5.002887s
        String#match    139.095M (± 2.0%) i/s -    708.426M in   5.095282s

Comparison:
          Regexp#===: 139099715.4 i/s
        String#match: 139095280.1 i/s - same-ish: difference falls within error
           String#=~: 138825055.0 i/s - same-ish: difference falls within error
       String#match?: 138769502.9 i/s - same-ish: difference falls within error

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.737M i/100ms
      String#casecmp     4.612M i/100ms
Calculating -------------------------------------
String#downcase + ==     30.121M (± 7.3%) i/s -    150.518M in   5.031905s
      String#casecmp     49.364M (± 7.1%) i/s -    249.064M in   5.082277s

Comparison:
      String#casecmp: 49363965.5 i/s
String#downcase + ==: 30120640.9 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+    10.821M i/100ms
       String#concat    10.890M i/100ms
       String#append    10.815M i/100ms
         "foo" "bar"   320.558M i/100ms
  "#{'foo'}#{'bar'}"    10.900M i/100ms
Calculating -------------------------------------
            String#+    109.805M (± 6.1%) i/s -    551.889M in   5.052107s
       String#concat    110.105M (± 5.9%) i/s -    555.399M in   5.069203s
       String#append    108.972M (± 7.6%) i/s -    540.744M in   5.003552s
         "foo" "bar"      3.187B (± 2.1%) i/s -     16.028B in   5.030741s
  "#{'foo'}#{'bar'}"    109.322M (± 6.7%) i/s -    544.999M in   5.015967s

Comparison:
         "foo" "bar": 3187461941.2 i/s
       String#concat: 110104750.1 i/s - 28.95x  (± 0.00) slower
            String#+: 109805218.3 i/s - 29.03x  (± 0.00) slower
  "#{'foo'}#{'bar'}": 109321716.9 i/s - 29.16x  (± 0.00) slower
       String#append: 108972117.6 i/s - 29.25x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   320.784M i/100ms
          String#dup   309.516M i/100ms
Calculating -------------------------------------
           String#+@      3.155B (± 3.2%) i/s -     16.039B in   5.088630s
          String#dup      3.176B (± 2.2%) i/s -     16.095B in   5.069911s

Comparison:
          String#dup: 3176241465.7 i/s
           String#+@: 3155493102.0 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   795.603k i/100ms
       String#match?     1.811M i/100ms
    String#end_with?    13.391M i/100ms
Calculating -------------------------------------
           String#=~     15.503M (± 4.9%) i/s -     77.969M in   5.042396s
       String#match?     18.080M (± 2.5%) i/s -     90.566M in   5.012387s
    String#end_with?    132.135M (± 3.3%) i/s -    669.573M in   5.073588s

Comparison:
    String#end_with?: 132134570.3 i/s
       String#match?: 18080239.3 i/s - 7.31x  (± 0.00) slower
           String#=~: 15502824.8 i/s - 8.52x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   206.913k i/100ms
          String#sub   952.159k i/100ms
String#dup["string"]=
                        10.295M i/100ms
Calculating -------------------------------------
         String#gsub      8.527M (±11.9%) i/s -     41.590M in   5.006912s
          String#sub     10.110M (±10.4%) i/s -     50.464M in   5.053283s
String#dup["string"]=
                        102.914M (± 2.7%) i/s -    514.761M in   5.006021s

Comparison:
String#dup["string"]=: 102914254.9 i/s
          String#sub: 10109909.1 i/s - 10.18x  (± 0.00) slower
         String#gsub:  8526967.2 i/s - 12.07x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    89.391k i/100ms
           String#tr   189.901k i/100ms
Calculating -------------------------------------
         String#gsub      4.462M (±11.9%) i/s -     21.901M in   5.012610s
           String#tr      1.929M (± 5.3%) i/s -      9.685M in   5.035763s

Comparison:
         String#gsub:  4462267.6 i/s
           String#tr:  1928929.0 i/s - 2.31x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   312.545M i/100ms
         With Freeze   317.768M i/100ms
Calculating -------------------------------------
      Without Freeze      3.180B (± 2.1%) i/s -     15.940B in   5.015525s
         With Freeze      3.185B (± 2.4%) i/s -     16.206B in   5.091873s

Comparison:
         With Freeze: 3184656761.6 i/s
      Without Freeze: 3179619391.8 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     9.319k i/100ms
      String#squeeze    82.615k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    175.140k (± 9.5%) i/s -    866.667k in   5.011398s
      String#squeeze    804.652k (± 4.5%) i/s -      4.048M in   5.041320s

Comparison:
      String#squeeze:   804651.8 i/s
 String#gsub/regex+/:   175139.7 i/s - 4.59x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     7.826M i/100ms
       String#match?    13.879M i/100ms
  String#start_with?    17.857M i/100ms
Calculating -------------------------------------
           String#=~    106.946M (± 6.4%) i/s -    532.137M in   5.006353s
       String#match?    139.130M (± 1.6%) i/s -    707.819M in   5.088812s
  String#start_with?    177.687M (± 1.6%) i/s -    892.843M in   5.026192s

Comparison:
  String#start_with?: 177686725.6 i/s
       String#match?: 139129507.7 i/s - 1.28x  (± 0.00) slower
           String#=~: 106945605.8 i/s - 1.66x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   476.015k i/100ms
    String#[0, n] ==   235.705k i/100ms
   String#[RANGE] ==   313.052k i/100ms
   String#[0...n] ==   220.474k i/100ms
Calculating -------------------------------------
  String#start_with?      4.805M (± 1.6%) i/s -     24.277M in   5.053554s
    String#[0, n] ==      2.446M (± 3.3%) i/s -     12.257M in   5.017702s
   String#[RANGE] ==      3.164M (± 5.4%) i/s -     15.966M in   5.064285s
   String#[0...n] ==      2.199M (± 3.6%) i/s -     11.024M in   5.018904s

Comparison:
  String#start_with?:  4805133.0 i/s
   String#[RANGE] ==:  3164027.9 i/s - 1.52x  (± 0.00) slower
    String#[0, n] ==:  2445524.0 i/s - 1.96x  (± 0.00) slower
   String#[0...n] ==:  2199441.2 i/s - 2.18x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    10.573M i/100ms
 String#sub!'string'   412.186k i/100ms
String#gsub!'string'   497.265k i/100ms
  String#[/regexp/]=    10.352M i/100ms
 String#sub!/regexp/     1.238M i/100ms
String#gsub!/regexp/   738.523k i/100ms
Calculating -------------------------------------
  String#['string']=    106.149M (± 2.6%) i/s -    539.247M in   5.083752s
 String#sub!'string'     11.090M (±14.4%) i/s -     53.996M in   5.014674s
String#gsub!'string'      5.942M (± 8.5%) i/s -     29.836M in   5.067420s
  String#[/regexp/]=    102.667M (± 2.1%) i/s -    517.600M in   5.043988s
 String#sub!/regexp/     33.753M (± 5.0%) i/s -    168.420M in   5.004218s
String#gsub!/regexp/      9.462M (± 9.3%) i/s -     47.265M in   5.051073s

Comparison:
  String#['string']=: 106149383.7 i/s
  String#[/regexp/]=: 102667467.0 i/s - same-ish: difference falls within error
 String#sub!/regexp/: 33752756.8 i/s - 3.14x  (± 0.00) slower
 String#sub!'string': 11090040.6 i/s - 9.57x  (± 0.00) slower
String#gsub!/regexp/:  9461909.5 i/s - 11.22x  (± 0.00) slower
String#gsub!'string':  5941970.6 i/s - 17.86x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub   210.518k i/100ms
        String#chomp     6.639M i/100ms
String#delete_suffix    11.931M i/100ms
Calculating -------------------------------------
          String#sub     76.420M (±12.3%) i/s -    366.933M in   4.998364s
        String#chomp     65.408M (± 2.2%) i/s -    331.971M in   5.078094s
String#delete_suffix    124.379M (± 9.2%) i/s -    620.434M in   5.042697s

Comparison:
String#delete_suffix: 124378779.9 i/s
          String#sub: 76420173.2 i/s - 1.63x  (± 0.00) slower
        String#chomp: 65408457.9 i/s - 1.90x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   315.558M i/100ms
          String#sub     3.914M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.183B (± 1.4%) i/s -     16.093B in   5.057135s
          String#sub    340.488M (± 2.5%) i/s -      1.702B in   5.003812s

Comparison:
String#delete_prefix: 3182973819.1 i/s
          String#sub: 340487512.7 i/s - 9.35x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.947M i/100ms
    String#unpack[0]     2.072M i/100ms
Calculating -------------------------------------
      String#unpack1     20.656M (± 3.1%) i/s -    103.190M in   5.000667s
    String#unpack[0]     20.499M (± 3.2%) i/s -    103.583M in   5.058397s

Comparison:
      String#unpack1: 20655989.3 i/s
    String#unpack[0]: 20498736.3 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 25.0.0-dev-ad29b9e6, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    39.831k i/100ms
          Time.parse   368.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    669.329k (±27.6%) i/s -      3.107M in   5.036497s
          Time.parse      5.970k (±11.1%) i/s -     29.440k in   5.015567s

Comparison:
        Time.iso8601:   669329.2 i/s
          Time.parse:     5969.9 i/s - 112.12x  (± 0.00) slower

