$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       211.181M i/100ms
Function with splat arguments
                         1.911k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.154B (± 3.0%) i/s -     15.839B in   5.027256s
Function with splat arguments
                         21.025k (± 9.0%) i/s -    105.105k in   5.050513s

Comparison:
Function with single Array argument: 3153629474.8 i/s
Function with splat arguments:    21024.9 i/s - 149995.32x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   320.007M i/100ms
Sequential Assignment
                       302.975M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.169B (± 2.2%) i/s -     16.000B in   5.051628s
Sequential Assignment
                          3.176B (± 2.5%) i/s -     16.058B in   5.059850s

Comparison:
Sequential Assignment: 3175734287.9 i/s
 Parallel Assignment: 3168942924.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   317.792M i/100ms
       attr_accessor   320.810M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.181B (± 2.0%) i/s -     16.207B in   5.097479s
       attr_accessor      3.190B (± 1.4%) i/s -     16.040B in   5.030123s

Comparison:
       attr_accessor: 3189508895.4 i/s
   getter_and_setter: 3180786253.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    13.013k i/100ms
         respond_to?   319.233M i/100ms
Calculating -------------------------------------
      begin...rescue    103.570k (± 6.8%) i/s -    520.520k in   5.058488s
         respond_to?      3.167B (± 3.2%) i/s -     15.962B in   5.045862s

Comparison:
         respond_to?: 3166759707.0 i/s
      begin...rescue:   103570.0 i/s - 30576.03x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   296.120M i/100ms
             &method    18.079M i/100ms
Calculating -------------------------------------
              normal      3.167B (± 3.2%) i/s -     15.990B in   5.054998s
             &method    181.194M (± 2.1%) i/s -    922.043M in   5.091157s

Comparison:
              normal: 3166976888.8 i/s
             &method: 181193946.9 i/s - 17.48x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       177.000  i/100ms
       define_method   158.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          3.369k (±57.6%) i/s -      7.080k in   5.012630s
       define_method     11.057k (±47.6%) i/s -     10.428k in   5.005606s

Comparison:
       define_method:    11057.0 i/s
module_eval with string:     3369.5 i/s - 3.28x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   241.152k i/100ms
       Kernel#format   184.191k i/100ms
            String#%   184.919k i/100ms
Calculating -------------------------------------
         Float#round      2.432M (± 2.3%) i/s -     12.299M in   5.059237s
       Kernel#format      1.842M (± 2.1%) i/s -      9.210M in   5.000918s
            String#%      1.834M (± 2.4%) i/s -      9.246M in   5.044718s

Comparison:
         Float#round:  2432302.7 i/s
       Kernel#format:  1842434.2 i/s - 1.32x  (± 0.00) slower
            String#%:  1833863.1 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   317.742M i/100ms
          OpenStruct   309.078M i/100ms
Calculating -------------------------------------
                Hash      3.179B (± 2.3%) i/s -     15.887B in   4.999657s
          OpenStruct      3.197B (± 1.7%) i/s -     16.072B in   5.029130s

Comparison:
          OpenStruct: 3196759688.9 i/s
                Hash: 3179482885.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   312.016M i/100ms
          OpenStruct     4.232k i/100ms
Calculating -------------------------------------
                Hash      3.125B (± 5.9%) i/s -     15.601B in   5.018247s
          OpenStruct     46.904k (±13.9%) i/s -    228.528k in   5.028060s

Comparison:
                Hash: 3124959582.1 i/s
          OpenStruct:    46904.4 i/s - 66624.09x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal     1.008M i/100ms
  ancestors.include?   202.177k i/100ms
Calculating -------------------------------------
  less than or equal      9.983M (± 6.0%) i/s -     50.411M in   5.066375s
  ancestors.include?      2.074M (± 6.4%) i/s -     10.513M in   5.096668s

Comparison:
  less than or equal:  9983411.1 i/s
  ancestors.include?:  2074481.1 i/s - 4.81x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     31.817  (± 3.1%) i/s -    159.000  in   5.011022s
         Kernel loop     31.991  (± 3.1%) i/s -    160.000  in   5.007064s

Comparison:
         Kernel loop:       32.0 i/s
          While Loop:       31.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   314.634M i/100ms
         Array#first   320.727M i/100ms
Calculating -------------------------------------
           Array#[0]      3.175B (± 3.0%) i/s -     16.046B in   5.059203s
         Array#first      3.179B (± 2.1%) i/s -     16.036B in   5.046760s

Comparison:
         Array#first: 3179076259.1 i/s
           Array#[0]: 3174910984.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   310.067M i/100ms
          Array#last   311.724M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.154B (± 3.6%) i/s -     15.813B in   5.020558s
          Array#last      3.180B (± 2.1%) i/s -     15.898B in   5.002231s

Comparison:
          Array#last: 3179615271.1 i/s
          Array#[-1]: 3154200601.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   929.363k i/100ms
Calculating -------------------------------------
                find     13.632  (± 0.0%) i/s -     69.000  in   5.065813s
             bsearch      9.285M (± 3.4%) i/s -     46.468M in   5.010752s

Comparison:
             bsearch:  9285488.8 i/s
                find:       13.6 i/s - 681166.35x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.210  (± 0.0%) i/s -      2.000  in   9.509070s
        Array#insert      1.388  (± 0.0%) i/s -      7.000  in   5.043384s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.2 i/s - 6.60x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   313.267M i/100ms
          Array#size   313.064M i/100ms
         Array#count   320.560M i/100ms
Calculating -------------------------------------
        Array#length      3.137B (± 2.6%) i/s -     15.977B in   5.096243s
          Array#size      3.176B (± 2.3%) i/s -     15.966B in   5.029575s
         Array#count      3.192B (± 2.0%) i/s -     16.028B in   5.023524s

Comparison:
         Array#count: 3192011505.1 i/s
          Array#size: 3176256203.8 i/s - same-ish: difference falls within error
        Array#length: 3137232440.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    33.926k i/100ms
        Array#sample     3.835M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    376.035k (± 2.5%) i/s -      1.900M in   5.055732s
        Array#sample     38.268M (± 1.3%) i/s -    191.742M in   5.011448s

Comparison:
        Array#sample: 38267885.3 i/s
 Array#shuffle.first:   376034.9 i/s - 101.77x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   885.000  i/100ms
          Date.parse   674.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     19.050k (±45.3%) i/s -     78.765k in   5.016863s
          Date.parse      8.020k (±19.8%) i/s -     38.418k in   5.045442s

Comparison:
        Date.iso8601:    19050.1 i/s
          Date.parse:     8020.3 i/s - 2.38x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   306.586k i/100ms
           Array#map     1.852M i/100ms
Calculating -------------------------------------
   Array#each + push      3.271M (± 6.1%) i/s -     16.556M in   5.082178s
           Array#map     19.134M (± 8.9%) i/s -     96.322M in   5.089675s

Comparison:
           Array#map: 19134225.2 i/s
   Array#each + push:  3271208.3 i/s - 5.85x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    11.032M i/100ms
               #each    34.803M i/100ms
Calculating -------------------------------------
            For loop    113.582M (± 2.7%) i/s -    573.649M in   5.054479s
               #each    347.348M (± 1.2%) i/s -      1.740B in   5.010678s

Comparison:
               #each: 347347675.1 i/s
            For loop: 113582008.7 i/s - 3.06x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.199M i/100ms
     each_with_index     2.490M i/100ms
Calculating -------------------------------------
          While Loop     14.113M (± 1.6%) i/s -     70.718M in   5.012263s
     each_with_index     25.964M (± 8.4%) i/s -    129.467M in   5.023753s

Comparison:
     each_with_index: 25964021.2 i/s
          While Loop: 14112737.3 i/s - 1.84x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   305.159k i/100ms
      inject to_proc   308.749k i/100ms
        inject block   310.997k i/100ms
Calculating -------------------------------------
       inject symbol      3.088M (± 1.7%) i/s -     15.563M in   5.041994s
      inject to_proc      3.089M (± 2.3%) i/s -     15.437M in   4.999987s
        inject block      3.074M (± 4.8%) i/s -     15.550M in   5.073877s

Comparison:
      inject to_proc:  3089296.2 i/s
       inject symbol:  3087699.1 i/s - same-ish: difference falls within error
        inject block:  3073925.2 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    21.426k i/100ms
   Array#map.flatten    25.446k i/100ms
      Array#flat_map    54.787k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    251.803k (± 8.4%) i/s -      1.264M in   5.069229s
   Array#map.flatten    254.652k (± 8.0%) i/s -      1.272M in   5.038010s
      Array#flat_map    544.674k (± 6.0%) i/s -      2.739M in   5.052689s

Comparison:
      Array#flat_map:   544674.1 i/s
   Array#map.flatten:   254651.7 i/s - 2.14x  (± 0.00) slower
Array#map.flatten(1):   251802.9 i/s - 2.16x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   313.388k i/100ms
  Array#reverse_each     2.330M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.440M (± 6.2%) i/s -     17.236M in   5.041473s
  Array#reverse_each     28.567M (± 3.0%) i/s -    144.441M in   5.062035s

Comparison:
  Array#reverse_each: 28567145.8 i/s
  Array#reverse.each:  3440340.6 i/s - 8.30x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       942.982k i/100ms
   Enumerable#detect     4.626M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.369M (± 7.1%) i/s -    206.513M in  20.053418s
   Enumerable#detect     46.504M (± 1.5%) i/s -    934.364M in  20.097789s

Comparison:
   Enumerable#detect: 46503586.8 i/s
Enumerable#select.first: 10368501.6 i/s - 4.49x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       365.440k i/100ms
Enumerable#select.last
                       550.595k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.757M (± 3.5%) i/s -     19.003M in   5.064914s
Enumerable#select.last
                          5.460M (± 5.9%) i/s -     27.530M in   5.067773s

Comparison:
Enumerable#select.last:  5460340.3 i/s
Enumerable#reverse.detect:  3756634.5 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         4.032k i/100ms
  Enumerable#sort_by     4.495k i/100ms
     Enumerable#sort   309.000  i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         24.000k (±64.3%) i/s -     80.640k in   5.037538s
  Enumerable#sort_by     18.025k (±63.8%) i/s -     71.920k in   5.088292s
     Enumerable#sort     52.701k (± 6.7%) i/s -    261.414k in   4.999348s

Comparison:
     Enumerable#sort:    52700.6 i/s
Enumerable#sort_by (Symbol#to_proc):    23999.7 i/s - 2.20x  (± 0.00) slower
  Enumerable#sort_by:    18024.8 i/s - 2.92x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   939.126k i/100ms
Enumerable#sort_by...first
                         9.272k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      9.405M (± 2.0%) i/s -     47.895M in   5.094538s
Enumerable#sort_by...first
                        112.136k (± 6.4%) i/s -    565.592k in   5.076324s

Comparison:
   Enumerable#min_by:  9405250.3 i/s
Enumerable#sort_by...first:   112135.9 i/s - 83.87x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   637.377k i/100ms
            Hash#dup   750.533k i/100ms
Calculating -------------------------------------
              Hash[]      7.585M (±11.4%) i/s -     37.605M in   5.028365s
            Hash#dup      7.537M (±10.3%) i/s -     37.527M in   5.038361s

Comparison:
              Hash[]:  7584583.2 i/s
            Hash#dup:  7537390.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   318.596M i/100ms
  Hash#fetch, symbol   316.338M i/100ms
     Hash#[], string    29.080M i/100ms
  Hash#fetch, string    26.425M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.188B (± 1.4%) i/s -     16.248B in   5.097683s
  Hash#fetch, symbol      3.189B (± 2.3%) i/s -     16.133B in   5.062065s
     Hash#[], string    288.688M (± 3.0%) i/s -      1.454B in   5.041500s
  Hash#fetch, string    266.945M (± 1.0%) i/s -      1.348B in   5.049012s

Comparison:
  Hash#fetch, symbol: 3188858200.0 i/s
     Hash#[], symbol: 3188024594.8 i/s - same-ish: difference falls within error
     Hash#[], string: 288687717.4 i/s - 11.05x  (± 0.00) slower
  Hash#fetch, string: 266945121.9 i/s - 11.95x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    91.638M i/100ms
             Hash#[]    89.773M i/100ms
          Hash#[] ||    91.912M i/100ms
          Hash#[] &&    91.883M i/100ms
          Hash#fetch    91.359M i/100ms
 Hash#fetch fallback    91.910M i/100ms
Calculating -------------------------------------
            Hash#dig    913.432M (± 1.7%) i/s -      4.582B in   5.017745s
             Hash#[]    914.580M (± 1.5%) i/s -      4.578B in   5.007199s
          Hash#[] ||    909.522M (± 2.7%) i/s -      4.596B in   5.056779s
          Hash#[] &&    914.316M (± 1.5%) i/s -      4.594B in   5.025816s
          Hash#fetch    914.510M (± 1.6%) i/s -      4.659B in   5.096234s
 Hash#fetch fallback    914.881M (± 1.6%) i/s -      4.596B in   5.024483s

Comparison:
 Hash#fetch fallback: 914880612.4 i/s
             Hash#[]: 914580355.9 i/s - same-ish: difference falls within error
          Hash#fetch: 914510128.8 i/s - same-ish: difference falls within error
          Hash#[] &&: 914315680.8 i/s - same-ish: difference falls within error
            Hash#dig: 913431668.4 i/s - same-ish: difference falls within error
          Hash#[] ||: 909521619.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   320.280M i/100ms
  Hash#fetch + block   306.541M i/100ms
    Hash#fetch + arg   310.809M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.168B (± 2.9%) i/s -     16.014B in   5.059641s
  Hash#fetch + block      3.194B (± 1.7%) i/s -     16.247B in   5.088062s
    Hash#fetch + arg      3.158B (± 4.0%) i/s -     15.851B in   5.028149s

Comparison:
  Hash#fetch + block: 3194079798.5 i/s
  Hash#fetch + const: 3167897862.4 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 3158161683.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    24.084k i/100ms
         sort + to_h   569.000  i/100ms
Calculating -------------------------------------
      sort_by + to_h    416.849k (± 8.8%) i/s -      2.071M in   5.018058s
         sort + to_h    215.303k (±15.3%) i/s -      1.006M in   4.989600s

Comparison:
      sort_by + to_h:   416848.6 i/s
         sort + to_h:   215303.4 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   208.046k i/100ms
       Hash#each_key   236.964k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.420M (± 9.9%) i/s -     11.859M in   5.014366s
       Hash#each_key      2.498M (± 3.9%) i/s -     12.559M in   5.035971s

Comparison:
       Hash#each_key:  2497775.1 i/s
      Hash#keys.each:  2419925.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   284.000  i/100ms
           Hash#key?     3.805M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      3.350k (±14.4%) i/s -     16.472k in   5.052170s
           Hash#key?     37.905M (± 1.2%) i/s -    190.241M in   5.019667s

Comparison:
           Hash#key?: 37905292.0 i/s
  Hash#keys.include?:     3349.7 i/s - 11315.95x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    51.562k i/100ms
            Hash#[]=    58.206k i/100ms
Calculating -------------------------------------
         Hash#merge!    575.778k (± 7.6%) i/s -      2.887M in   5.045481s
            Hash#[]=    595.541k (± 7.6%) i/s -      2.969M in   5.025213s

Comparison:
            Hash#[]=:   595541.0 i/s
         Hash#merge!:   575778.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        45.090k i/100ms
      Hash#merge({})    18.761k i/100ms
 Hash#dup#merge!({})    30.461k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        393.674k (± 9.8%) i/s -      1.984M in   5.092105s
      Hash#merge({})    199.834k (± 9.0%) i/s -    994.333k in   5.028189s
 Hash#dup#merge!({})    315.314k (± 9.0%) i/s -      1.584M in   5.079366s

Comparison:
{}#merge!(Hash) do end:   393674.4 i/s
 Hash#dup#merge!({}):   315313.9 i/s - 1.25x  (± 0.00) slower
      Hash#merge({}):   199834.4 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   304.579M i/100ms
          Hash#merge   311.440M i/100ms
Calculating -------------------------------------
        Hash#**other      3.165B (± 2.5%) i/s -     15.838B in   5.007925s
          Hash#merge      3.181B (± 1.4%) i/s -     16.195B in   5.091843s

Comparison:
          Hash#merge: 3181148139.7 i/s
        Hash#**other: 3164742723.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   988.000  i/100ms
         Hash#merge!    51.150k i/100ms
Calculating -------------------------------------
          Hash#merge     11.384k (±11.0%) i/s -     56.316k in   5.014966s
         Hash#merge!    590.760k (± 8.0%) i/s -      2.967M in   5.064479s

Comparison:
         Hash#merge!:   590760.2 i/s
          Hash#merge:    11383.5 i/s - 51.90x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.312M i/100ms
Array#each               1.612M i/100ms
Array#each_w/_object     1.605M i/100ms
Hash#select-include      2.496M i/100ms
Calculating -------------------------------------
Hash#native-slice        19.400M (± 5.1%) i/s -     97.086M in   5.018351s
Array#each               15.884M (± 2.7%) i/s -     80.624M in   5.079610s
Array#each_w/_object     15.476M (± 6.4%) i/s -     77.061M in   5.009927s
Hash#select-include      24.085M (± 6.8%) i/s -    119.799M in   5.004404s

Comparison:
Hash#select-include : 24085393.5 i/s
Hash#native-slice   : 19400392.5 i/s - 1.24x  (± 0.00) slower
Array#each          : 15884307.3 i/s - 1.52x  (± 0.00) slower
Array#each_w/_object: 15475991.2 i/s - 1.56x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   281.000  i/100ms
         Hash#value?    10.722k i/100ms
Calculating -------------------------------------
Hash#values.include?      3.663k (±14.9%) i/s -     17.984k in   5.059149s
         Hash#value?    114.245k (± 1.5%) i/s -    578.988k in   5.069169s

Comparison:
         Hash#value?:   114245.0 i/s
Hash#values.include?:     3662.7 i/s - 31.19x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   310.816M i/100ms
                send   317.413M i/100ms
      method_missing   316.597M i/100ms
Calculating -------------------------------------
                call      3.130B (± 2.6%) i/s -     15.852B in   5.068661s
                send      3.157B (± 3.0%) i/s -     15.871B in   5.032343s
      method_missing      3.173B (± 1.7%) i/s -     16.146B in   5.090388s

Comparison:
      method_missing: 3172943201.9 i/s
                send: 3156800512.3 i/s - same-ish: difference falls within error
                call: 3129725056.4 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    64.592k i/100ms
      Symbol#to_proc    77.129k i/100ms
Calculating -------------------------------------
               Block    733.667k (±10.4%) i/s -      3.682M in   5.081211s
      Symbol#to_proc    723.308k (±13.0%) i/s -      3.625M in   5.107599s

Comparison:
               Block:   733666.6 i/s
      Symbol#to_proc:   723307.8 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   319.555M i/100ms
       block + yield   311.540M i/100ms
        unused block   316.405M i/100ms
               yield   317.486M i/100ms
Calculating -------------------------------------
          block.call      3.166B (± 2.1%) i/s -     15.978B in   5.049589s
       block + yield      3.163B (± 2.6%) i/s -     15.889B in   5.027526s
        unused block      3.156B (± 2.3%) i/s -     15.820B in   5.015419s
               yield      3.185B (± 1.5%) i/s -     16.192B in   5.085476s

Comparison:
               yield: 3184694255.3 i/s
          block.call: 3165675583.0 i/s - same-ish: difference falls within error
       block + yield: 3162621818.1 i/s - same-ish: difference falls within error
        unused block: 3156094723.4 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     5.006k i/100ms
      range#include?   179.000  i/100ms
       range#member?   219.000  i/100ms
       plain compare     8.125k i/100ms
Calculating -------------------------------------
        range#cover?     57.770k (±33.9%) i/s -    250.300k in   5.011658s
      range#include?      2.527k (±33.7%) i/s -     11.098k in   5.036768s
       range#member?      2.360k (±29.4%) i/s -     10.950k in   5.192011s
       plain compare     85.041k (±22.2%) i/s -    398.125k in   5.058276s

Comparison:
       plain compare:    85041.2 i/s
        range#cover?:    57769.7 i/s - same-ish: difference falls within error
      range#include?:     2526.5 i/s - 33.66x  (± 0.00) slower
       range#member?:     2360.2 i/s - 36.03x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    11.906M i/100ms
           String#=~    13.959M i/100ms
          Regexp#===    13.903M i/100ms
        String#match    13.823M i/100ms
Calculating -------------------------------------
       String#match?    139.585M (± 0.2%) i/s -    702.450M in   5.032426s
           String#=~    139.501M (± 0.3%) i/s -    697.958M in   5.003291s
          Regexp#===    138.870M (± 1.8%) i/s -    695.173M in   5.007726s
        String#match    139.420M (± 0.8%) i/s -    704.953M in   5.056701s

Comparison:
       String#match?: 139585188.5 i/s
           String#=~: 139501225.3 i/s - same-ish: difference falls within error
        String#match: 139420141.2 i/s - same-ish: difference falls within error
          Regexp#===: 138870011.8 i/s - same-ish: difference falls within error

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.741M i/100ms
      String#casecmp     4.592M i/100ms
Calculating -------------------------------------
String#downcase + ==     30.673M (± 7.1%) i/s -    153.481M in   5.037550s
      String#casecmp     49.406M (± 5.4%) i/s -    247.992M in   5.034462s

Comparison:
      String#casecmp: 49406280.2 i/s
String#downcase + ==: 30672725.7 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+    10.873M i/100ms
       String#concat    10.630M i/100ms
       String#append    10.912M i/100ms
         "foo" "bar"   320.875M i/100ms
  "#{'foo'}#{'bar'}"    11.224M i/100ms
Calculating -------------------------------------
            String#+    112.426M (± 2.9%) i/s -    565.395M in   5.033547s
       String#concat    110.637M (± 3.9%) i/s -    563.375M in   5.100033s
       String#append    110.925M (± 5.1%) i/s -    556.524M in   5.031688s
         "foo" "bar"      3.107B (± 2.8%) i/s -     15.723B in   5.063914s
  "#{'foo'}#{'bar'}"    111.326M (± 4.2%) i/s -    561.224M in   5.051145s

Comparison:
         "foo" "bar": 3107426751.3 i/s
            String#+: 112426050.7 i/s - 27.64x  (± 0.00) slower
  "#{'foo'}#{'bar'}": 111325941.0 i/s - 27.91x  (± 0.00) slower
       String#append: 110925386.0 i/s - 28.01x  (± 0.00) slower
       String#concat: 110637379.0 i/s - 28.09x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   315.817M i/100ms
          String#dup   313.403M i/100ms
Calculating -------------------------------------
           String#+@      3.166B (± 2.7%) i/s -     16.107B in   5.091743s
          String#dup      3.165B (± 2.9%) i/s -     15.984B in   5.054659s

Comparison:
           String#+@: 3165666751.4 i/s
          String#dup: 3165074160.7 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.572M i/100ms
       String#match?     1.826M i/100ms
    String#end_with?    13.396M i/100ms
Calculating -------------------------------------
           String#=~     15.971M (± 2.4%) i/s -     80.148M in   5.021361s
       String#match?     18.171M (± 2.1%) i/s -     91.296M in   5.026597s
    String#end_with?    132.127M (± 3.2%) i/s -    669.823M in   5.075340s

Comparison:
    String#end_with?: 132127017.8 i/s
       String#match?: 18170996.4 i/s - 7.27x  (± 0.00) slower
           String#=~: 15970890.1 i/s - 8.27x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   110.772k i/100ms
          String#sub   729.870k i/100ms
String#dup["string"]=
                        10.036M i/100ms
Calculating -------------------------------------
         String#gsub      8.252M (±13.4%) i/s -     39.767M in   5.002713s
          String#sub      9.875M (±11.6%) i/s -     48.901M in   5.039892s
String#dup["string"]=
                         99.505M (± 2.7%) i/s -    501.801M in   5.047129s

Comparison:
String#dup["string"]=: 99505301.7 i/s
          String#sub:  9875457.9 i/s - 10.08x  (± 0.00) slower
         String#gsub:  8252361.4 i/s - 12.06x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    85.669k i/100ms
           String#tr   182.815k i/100ms
Calculating -------------------------------------
         String#gsub      4.618M (±12.3%) i/s -     22.617M in   5.010509s
           String#tr      1.844M (± 4.4%) i/s -      9.324M in   5.065884s

Comparison:
         String#gsub:  4618437.6 i/s
           String#tr:  1844406.4 i/s - 2.50x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   317.229M i/100ms
         With Freeze   306.096M i/100ms
Calculating -------------------------------------
      Without Freeze      3.173B (± 2.3%) i/s -     15.861B in   5.002154s
         With Freeze      3.188B (± 1.4%) i/s -     16.223B in   5.089976s

Comparison:
         With Freeze: 3187945168.6 i/s
      Without Freeze: 3172689709.8 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     9.749k i/100ms
      String#squeeze    78.315k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    163.462k (±10.2%) i/s -    809.167k in   5.017156s
      String#squeeze    834.261k (± 4.6%) i/s -      4.229M in   5.080526s

Comparison:
      String#squeeze:   834261.2 i/s
 String#gsub/regex+/:   163462.2 i/s - 5.10x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~    15.179M i/100ms
       String#match?    13.403M i/100ms
  String#start_with?    17.744M i/100ms
Calculating -------------------------------------
           String#=~    150.897M (± 6.8%) i/s -    758.929M in   5.060650s
       String#match?    132.884M (± 2.1%) i/s -    670.127M in   5.045360s
  String#start_with?    176.553M (± 2.8%) i/s -    887.186M in   5.029100s

Comparison:
  String#start_with?: 176553044.9 i/s
           String#=~: 150897313.3 i/s - 1.17x  (± 0.00) slower
       String#match?: 132883833.7 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   383.391k i/100ms
    String#[0, n] ==   234.393k i/100ms
   String#[RANGE] ==   315.223k i/100ms
   String#[0...n] ==   200.506k i/100ms
Calculating -------------------------------------
  String#start_with?      3.861M (± 1.6%) i/s -     19.553M in   5.065952s
    String#[0, n] ==      2.339M (± 3.7%) i/s -     11.720M in   5.016977s
   String#[RANGE] ==      3.134M (± 4.2%) i/s -     15.761M in   5.038945s
   String#[0...n] ==      2.118M (± 3.7%) i/s -     10.627M in   5.024186s

Comparison:
  String#start_with?:  3860740.8 i/s
   String#[RANGE] ==:  3134416.0 i/s - 1.23x  (± 0.00) slower
    String#[0, n] ==:  2339444.6 i/s - 1.65x  (± 0.00) slower
   String#[0...n] ==:  2118207.3 i/s - 1.82x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    10.228M i/100ms
 String#sub!'string'   413.563k i/100ms
String#gsub!'string'   519.335k i/100ms
  String#[/regexp/]=    10.355M i/100ms
 String#sub!/regexp/     1.752M i/100ms
String#gsub!/regexp/   767.398k i/100ms
Calculating -------------------------------------
  String#['string']=    102.863M (± 2.2%) i/s -    521.634M in   5.073971s
 String#sub!'string'     11.066M (±13.5%) i/s -     54.177M in   5.029947s
String#gsub!'string'      5.580M (±10.1%) i/s -     27.525M in   5.003775s
  String#[/regexp/]=    103.055M (± 1.8%) i/s -    517.769M in   5.025886s
 String#sub!/regexp/     33.777M (± 4.1%) i/s -    169.917M in   5.040124s
String#gsub!/regexp/      9.346M (±10.0%) i/s -     46.811M in   5.075052s

Comparison:
  String#[/regexp/]=: 103055393.9 i/s
  String#['string']=: 102862581.0 i/s - same-ish: difference falls within error
 String#sub!/regexp/: 33777388.0 i/s - 3.05x  (± 0.00) slower
 String#sub!'string': 11066302.0 i/s - 9.31x  (± 0.00) slower
String#gsub!/regexp/:  9346383.6 i/s - 11.03x  (± 0.00) slower
String#gsub!'string':  5579617.5 i/s - 18.47x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.983M i/100ms
        String#chomp     6.409M i/100ms
String#delete_suffix    11.352M i/100ms
Calculating -------------------------------------
          String#sub     77.079M (± 9.4%) i/s -    380.655M in   5.001928s
        String#chomp     63.760M (± 2.3%) i/s -    320.430M in   5.028322s
String#delete_suffix    122.753M (± 6.3%) i/s -    613.024M in   5.014732s

Comparison:
String#delete_suffix: 122752985.8 i/s
          String#sub: 77079384.2 i/s - 1.59x  (± 0.00) slower
        String#chomp: 63760414.9 i/s - 1.93x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   317.641M i/100ms
          String#sub     1.287M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.191B (± 1.8%) i/s -     16.200B in   5.078228s
          String#sub    340.905M (± 3.9%) i/s -      1.700B in   4.999677s

Comparison:
String#delete_prefix: 3191094294.8 i/s
          String#sub: 340904575.8 i/s - 9.36x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.774M i/100ms
    String#unpack[0]     2.093M i/100ms
Calculating -------------------------------------
      String#unpack1     20.331M (± 7.1%) i/s -    101.094M in   5.006428s
    String#unpack[0]     20.321M (± 7.0%) i/s -    102.564M in   5.082903s

Comparison:
      String#unpack1: 20330758.9 i/s
    String#unpack[0]: 20320897.6 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 25.0.0-dev-2c61a7f4, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    41.391k i/100ms
          Time.parse   366.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    842.119k (±11.0%) i/s -      4.139M in   5.017298s
          Time.parse      6.079k (±14.0%) i/s -     29.646k in   5.046676s

Comparison:
        Time.iso8601:   842119.0 i/s
          Time.parse:     6078.8 i/s - 138.53x  (± 0.00) slower

