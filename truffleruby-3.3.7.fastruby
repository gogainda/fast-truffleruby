$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       307.053M i/100ms
Function with splat arguments
                         1.936k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          3.171B (± 2.8%) i/s -     15.967B in   5.039693s
Function with splat arguments
                         20.193k (± 9.6%) i/s -    100.672k in   5.042683s

Comparison:
Function with single Array argument: 3170903595.4 i/s
Function with splat arguments:    20193.0 i/s - 157029.46x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   317.996M i/100ms
Sequential Assignment
                       320.082M i/100ms
Calculating -------------------------------------
 Parallel Assignment      3.150B (± 4.9%) i/s -     15.900B in   5.064219s
Sequential Assignment
                          3.171B (± 2.5%) i/s -     16.004B in   5.049693s

Comparison:
Sequential Assignment: 3171486689.1 i/s
 Parallel Assignment: 3149586470.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   321.026M i/100ms
       attr_accessor   321.011M i/100ms
Calculating -------------------------------------
   getter_and_setter      3.160B (± 2.9%) i/s -     16.051B in   5.083269s
       attr_accessor      3.187B (± 2.3%) i/s -     16.051B in   5.039793s

Comparison:
       attr_accessor: 3186659616.1 i/s
   getter_and_setter: 3160447792.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     9.467k i/100ms
         respond_to?   319.767M i/100ms
Calculating -------------------------------------
      begin...rescue    102.730k (± 6.8%) i/s -    511.218k in   5.010018s
         respond_to?      3.161B (± 4.3%) i/s -     15.988B in   5.069130s

Comparison:
         respond_to?: 3160852535.5 i/s
      begin...rescue:   102730.4 i/s - 30768.41x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   319.421M i/100ms
             &method    18.171M i/100ms
Calculating -------------------------------------
              normal      3.057B (± 9.6%) i/s -     15.332B in   5.079539s
             &method    180.752M (± 1.9%) i/s -    908.549M in   5.028458s

Comparison:
              normal: 3057326344.4 i/s
             &method: 180752473.5 i/s - 16.91x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       141.000  i/100ms
       define_method   228.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          3.781k (±52.0%) i/s -      7.473k in   5.008797s
       define_method     10.515k (±54.6%) i/s -     11.172k in   7.277387s

Comparison:
       define_method:    10515.1 i/s
module_eval with string:     3781.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round   197.929k i/100ms
       Kernel#format   192.176k i/100ms
            String#%   124.567k i/100ms
Calculating -------------------------------------
         Float#round      2.661M (± 3.4%) i/s -     13.459M in   5.064592s
       Kernel#format      1.906M (± 3.9%) i/s -      9.609M in   5.050705s
            String#%      1.233M (± 5.4%) i/s -      6.228M in   5.072138s

Comparison:
         Float#round:  2660876.6 i/s
       Kernel#format:  1905514.2 i/s - 1.40x  (± 0.00) slower
            String#%:  1232859.7 i/s - 2.16x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   319.216M i/100ms
          OpenStruct   315.795M i/100ms
Calculating -------------------------------------
                Hash      3.176B (± 2.4%) i/s -     15.961B in   5.028893s
          OpenStruct      3.188B (± 1.4%) i/s -     16.106B in   5.052525s

Comparison:
          OpenStruct: 3188229628.3 i/s
                Hash: 3175695799.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   305.056M i/100ms
          OpenStruct     3.455k i/100ms
Calculating -------------------------------------
                Hash      3.019B (±10.3%) i/s -     14.948B in   5.021677s
          OpenStruct     46.468k (±13.7%) i/s -    231.485k in   5.140966s

Comparison:
                Hash: 3018515102.9 i/s
          OpenStruct:    46467.5 i/s - 64959.66x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   945.115k i/100ms
  ancestors.include?   226.509k i/100ms
Calculating -------------------------------------
  less than or equal     10.025M (± 4.2%) i/s -     50.091M in   5.006118s
  ancestors.include?      2.368M (± 4.2%) i/s -     12.005M in   5.079354s

Comparison:
  less than or equal: 10024625.2 i/s
  ancestors.include?:  2367799.2 i/s - 4.23x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     31.964  (± 3.1%) i/s -    160.000  in   5.009524s
         Kernel loop     31.980  (± 3.1%) i/s -    160.000  in   5.008552s

Comparison:
         Kernel loop:       32.0 i/s
          While Loop:       32.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   317.330M i/100ms
         Array#first   310.279M i/100ms
Calculating -------------------------------------
           Array#[0]      3.171B (± 1.9%) i/s -     15.867B in   5.004873s
         Array#first      3.181B (± 2.3%) i/s -     16.135B in   5.075492s

Comparison:
         Array#first: 3180738301.3 i/s
           Array#[0]: 3171425652.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   319.926M i/100ms
          Array#last   319.246M i/100ms
Calculating -------------------------------------
          Array#[-1]      3.164B (± 2.8%) i/s -     15.996B in   5.060401s
          Array#last      3.192B (± 2.0%) i/s -     15.962B in   5.003369s

Comparison:
          Array#last: 3191679984.8 i/s
          Array#[-1]: 3163707815.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   929.024k i/100ms
Calculating -------------------------------------
                find     13.581  (± 0.0%) i/s -     68.000  in   5.012368s
             bsearch      9.342M (± 2.9%) i/s -     47.380M in   5.076098s

Comparison:
             bsearch:  9342056.5 i/s
                find:       13.6 i/s - 687871.44x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.210  (± 0.0%) i/s -      2.000  in   9.505117s
        Array#insert      1.385  (± 0.0%) i/s -      7.000  in   5.055411s

Comparison:
        Array#insert:        1.4 i/s
       Array#unshift:        0.2 i/s - 6.58x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   318.230M i/100ms
          Array#size   315.593M i/100ms
         Array#count   320.979M i/100ms
Calculating -------------------------------------
        Array#length      3.183B (± 2.2%) i/s -     15.912B in   5.002337s
          Array#size      3.192B (± 1.9%) i/s -     16.095B in   5.043704s
         Array#count      3.160B (± 3.4%) i/s -     16.049B in   5.085584s

Comparison:
          Array#size: 3192342612.9 i/s
        Array#length: 3182509813.0 i/s - same-ish: difference falls within error
         Array#count: 3159894888.8 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    36.298k i/100ms
        Array#sample     3.686M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    369.864k (± 2.8%) i/s -      1.851M in   5.009188s
        Array#sample     36.674M (± 2.2%) i/s -    184.298M in   5.027914s

Comparison:
        Array#sample: 36674284.5 i/s
 Array#shuffle.first:   369864.2 i/s - 99.16x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   903.000  i/100ms
          Date.parse   534.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     19.396k (±38.4%) i/s -     83.979k in   5.022397s
          Date.parse      8.031k (±22.9%) i/s -     37.380k in   5.037386s

Comparison:
        Date.iso8601:    19396.2 i/s
          Date.parse:     8030.9 i/s - 2.42x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   291.694k i/100ms
           Array#map     1.841M i/100ms
Calculating -------------------------------------
   Array#each + push      3.241M (± 7.4%) i/s -     16.335M in   5.085250s
           Array#map     18.445M (± 9.9%) i/s -     92.052M in   5.050921s

Comparison:
           Array#map: 18444968.3 i/s
   Array#each + push:  3240646.5 i/s - 5.69x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    11.661M i/100ms
               #each    35.255M i/100ms
Calculating -------------------------------------
            For loop    116.660M (± 2.0%) i/s -    583.054M in   4.999954s
               #each    353.293M (± 1.8%) i/s -      1.798B in   5.090978s

Comparison:
               #each: 353293356.5 i/s
            For loop: 116660478.9 i/s - 3.03x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.476M i/100ms
     each_with_index     2.363M i/100ms
Calculating -------------------------------------
          While Loop     14.242M (± 3.8%) i/s -     72.347M in   5.087606s
     each_with_index     24.815M (± 7.3%) i/s -    125.247M in   5.072836s

Comparison:
     each_with_index: 24814622.7 i/s
          While Loop: 14241545.4 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   305.929k i/100ms
      inject to_proc   305.404k i/100ms
        inject block   308.089k i/100ms
Calculating -------------------------------------
       inject symbol      3.101M (± 1.5%) i/s -     15.602M in   5.032005s
      inject to_proc      3.089M (± 2.3%) i/s -     15.576M in   5.044419s
        inject block      3.093M (± 1.9%) i/s -     15.713M in   5.081508s

Comparison:
       inject symbol:  3101366.8 i/s
        inject block:  3093306.4 i/s - same-ish: difference falls within error
      inject to_proc:  3089444.6 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    20.309k i/100ms
   Array#map.flatten    26.073k i/100ms
      Array#flat_map    59.633k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    263.675k (± 8.7%) i/s -      1.340M in   5.138368s
   Array#map.flatten    266.404k (± 7.5%) i/s -      1.330M in   5.027515s
      Array#flat_map    593.591k (± 2.3%) i/s -      2.982M in   5.025769s

Comparison:
      Array#flat_map:   593590.8 i/s
   Array#map.flatten:   266404.0 i/s - 2.23x  (± 0.00) slower
Array#map.flatten(1):   263675.1 i/s - 2.25x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   242.137k i/100ms
  Array#reverse_each     2.887M i/100ms
Calculating -------------------------------------
  Array#reverse.each      3.506M (± 4.2%) i/s -     17.676M in   5.051319s
  Array#reverse_each     27.118M (± 9.9%) i/s -    135.711M in   5.056962s

Comparison:
  Array#reverse_each: 27117717.1 i/s
  Array#reverse.each:  3505534.1 i/s - 7.74x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       939.724k i/100ms
   Enumerable#detect     4.656M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                         10.316M (± 7.9%) i/s -    204.860M in  20.036843s
   Enumerable#detect     46.435M (± 1.9%) i/s -    931.259M in  20.063783s

Comparison:
   Enumerable#detect: 46434605.7 i/s
Enumerable#select.first: 10315793.0 i/s - 4.50x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       332.893k i/100ms
Enumerable#select.last
                       538.901k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          3.673M (± 6.3%) i/s -     18.309M in   5.013503s
Enumerable#select.last
                          5.388M (± 3.6%) i/s -     26.945M in   5.007900s

Comparison:
Enumerable#select.last:  5387809.7 i/s
Enumerable#reverse.detect:  3673315.2 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         3.861k i/100ms
  Enumerable#sort_by     4.360k i/100ms
     Enumerable#sort     4.972k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         41.718k (±15.4%) i/s -    196.911k in   5.045722s
  Enumerable#sort_by     35.630k (±36.7%) i/s -    135.160k in   5.025765s
     Enumerable#sort     56.686k (± 4.9%) i/s -    283.404k in   5.013661s

Comparison:
     Enumerable#sort:    56685.9 i/s
Enumerable#sort_by (Symbol#to_proc):    41717.6 i/s - 1.36x  (± 0.00) slower
  Enumerable#sort_by:    35630.3 i/s - 1.59x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   987.387k i/100ms
Enumerable#sort_by...first
                         6.897k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      9.900M (± 1.9%) i/s -     50.357M in   5.088280s
Enumerable#sort_by...first
                        109.943k (± 7.4%) i/s -    544.863k in   5.003944s

Comparison:
   Enumerable#min_by:  9900433.4 i/s
Enumerable#sort_by...first:   109943.0 i/s - 90.05x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   605.159k i/100ms
            Hash#dup   647.384k i/100ms
Calculating -------------------------------------
              Hash[]      6.852M (±10.8%) i/s -     34.494M in   5.104512s
            Hash#dup      7.016M (±11.3%) i/s -     34.959M in   5.068204s

Comparison:
            Hash#dup:  7016055.5 i/s
              Hash[]:  6852019.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   319.617M i/100ms
  Hash#fetch, symbol   302.722M i/100ms
     Hash#[], string    26.487M i/100ms
  Hash#fetch, string    26.599M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      3.204B (± 0.4%) i/s -     16.300B in   5.087030s
  Hash#fetch, symbol      3.196B (± 1.7%) i/s -     16.044B in   5.022108s
     Hash#[], string    290.437M (± 1.6%) i/s -      1.457B in   5.017071s
  Hash#fetch, string    263.113M (± 1.9%) i/s -      1.330B in   5.056732s

Comparison:
     Hash#[], symbol: 3204371760.3 i/s
  Hash#fetch, symbol: 3195715675.3 i/s - same-ish: difference falls within error
     Hash#[], string: 290437155.4 i/s - 11.03x  (± 0.00) slower
  Hash#fetch, string: 263112690.7 i/s - 12.18x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    91.035M i/100ms
             Hash#[]    91.843M i/100ms
          Hash#[] ||    91.912M i/100ms
          Hash#[] &&    91.803M i/100ms
          Hash#fetch    91.372M i/100ms
 Hash#fetch fallback    91.281M i/100ms
Calculating -------------------------------------
            Hash#dig    918.464M (± 0.4%) i/s -      4.643B in   5.055026s
             Hash#[]    916.903M (± 1.1%) i/s -      4.592B in   5.008987s
          Hash#[] ||    911.707M (± 1.9%) i/s -      4.596B in   5.042605s
          Hash#[] &&    911.158M (± 1.9%) i/s -      4.590B in   5.039719s
          Hash#fetch    917.383M (± 0.7%) i/s -      4.660B in   5.079934s
 Hash#fetch fallback    916.257M (± 0.9%) i/s -      4.655B in   5.081205s

Comparison:
            Hash#dig: 918464421.4 i/s
          Hash#fetch: 917383367.0 i/s - same-ish: difference falls within error
             Hash#[]: 916903398.8 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 916257177.5 i/s - same-ish: difference falls within error
          Hash#[] ||: 911707468.4 i/s - same-ish: difference falls within error
          Hash#[] &&: 911157859.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   312.381M i/100ms
  Hash#fetch + block   320.190M i/100ms
    Hash#fetch + arg   305.122M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      3.154B (± 2.6%) i/s -     15.931B in   5.054569s
  Hash#fetch + block      3.182B (± 2.5%) i/s -     16.010B in   5.035337s
    Hash#fetch + arg      3.170B (± 2.3%) i/s -     15.866B in   5.007452s

Comparison:
  Hash#fetch + block: 3181563966.3 i/s
    Hash#fetch + arg: 3170382366.9 i/s - same-ish: difference falls within error
  Hash#fetch + const: 3154093701.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    37.718k i/100ms
         sort + to_h     3.349k i/100ms
Calculating -------------------------------------
      sort_by + to_h    475.672k (± 4.9%) i/s -      2.376M in   5.007634s
         sort + to_h    223.216k (±15.1%) i/s -      1.072M in   4.998254s

Comparison:
      sort_by + to_h:   475672.1 i/s
         sort + to_h:   223215.8 i/s - 2.13x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   198.519k i/100ms
       Hash#each_key   253.317k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.381M (± 9.8%) i/s -     11.713M in   5.033754s
       Hash#each_key      2.524M (± 6.7%) i/s -     12.666M in   5.052673s

Comparison:
       Hash#each_key:  2524336.7 i/s
      Hash#keys.each:  2380549.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   313.000  i/100ms
           Hash#key?     3.521M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      3.228k (±11.4%) i/s -     15.963k in   5.040364s
           Hash#key?     35.504M (± 1.2%) i/s -    179.591M in   5.059073s

Comparison:
           Hash#key?: 35504160.1 i/s
  Hash#keys.include?:     3228.5 i/s - 10997.17x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    51.683k i/100ms
            Hash#[]=    57.882k i/100ms
Calculating -------------------------------------
         Hash#merge!    577.108k (± 8.5%) i/s -      2.894M in   5.063995s
            Hash#[]=    614.903k (± 6.1%) i/s -      3.068M in   5.008163s

Comparison:
            Hash#[]=:   614902.8 i/s
         Hash#merge!:   577107.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        35.255k i/100ms
      Hash#merge({})    19.547k i/100ms
 Hash#dup#merge!({})    32.584k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        392.693k (±10.3%) i/s -      1.939M in   5.000704s
      Hash#merge({})    197.288k (± 9.5%) i/s -    996.897k in   5.107291s
 Hash#dup#merge!({})    317.647k (± 8.9%) i/s -      1.597M in   5.075111s

Comparison:
{}#merge!(Hash) do end:   392693.0 i/s
 Hash#dup#merge!({}):   317646.5 i/s - 1.24x  (± 0.00) slower
      Hash#merge({}):   197288.2 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   321.179M i/100ms
          Hash#merge   319.474M i/100ms
Calculating -------------------------------------
        Hash#**other      3.189B (± 1.4%) i/s -     16.059B in   5.036953s
          Hash#merge      3.177B (± 2.7%) i/s -     15.974B in   5.032286s

Comparison:
        Hash#**other: 3188886654.8 i/s
          Hash#merge: 3176710736.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge     1.005k i/100ms
         Hash#merge!    56.751k i/100ms
Calculating -------------------------------------
          Hash#merge     11.036k (±10.8%) i/s -     55.275k in   5.075855s
         Hash#merge!    622.299k (± 6.9%) i/s -      3.121M in   5.043225s

Comparison:
         Hash#merge!:   622298.6 i/s
          Hash#merge:    11035.9 i/s - 56.39x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.781M i/100ms
Array#each               1.509M i/100ms
Array#each_w/_object     1.445M i/100ms
Hash#select-include      2.418M i/100ms
Calculating -------------------------------------
Hash#native-slice        19.524M (± 3.9%) i/s -     97.948M in   5.024761s
Array#each               14.597M (± 3.1%) i/s -     73.919M in   5.068986s
Array#each_w/_object     15.542M (± 3.9%) i/s -     78.022M in   5.027938s
Hash#select-include      24.671M (± 5.6%) i/s -    123.344M in   5.018454s

Comparison:
Hash#select-include : 24670846.5 i/s
Hash#native-slice   : 19523851.9 i/s - 1.26x  (± 0.00) slower
Array#each_w/_object: 15542340.2 i/s - 1.59x  (± 0.00) slower
Array#each          : 14597259.5 i/s - 1.69x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   257.000  i/100ms
         Hash#value?   947.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      3.202k (±12.5%) i/s -     15.677k in   5.007050s
         Hash#value?      9.452k (± 0.8%) i/s -     47.350k in   5.010049s

Comparison:
         Hash#value?:     9451.6 i/s
Hash#values.include?:     3201.7 i/s - 2.95x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   312.416M i/100ms
                send   312.560M i/100ms
      method_missing   312.402M i/100ms
Calculating -------------------------------------
                call      3.186B (± 1.9%) i/s -     15.933B in   5.003181s
                send      3.174B (± 2.8%) i/s -     15.941B in   5.026060s
      method_missing      3.172B (± 2.7%) i/s -     15.933B in   5.026032s

Comparison:
                call: 3185777323.4 i/s
                send: 3174247466.7 i/s - same-ish: difference falls within error
      method_missing: 3172464179.8 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    54.156k i/100ms
      Symbol#to_proc    71.311k i/100ms
Calculating -------------------------------------
               Block    695.694k (±12.7%) i/s -      3.466M in   5.070210s
      Symbol#to_proc    686.212k (±12.8%) i/s -      3.423M in   5.078537s

Comparison:
               Block:   695693.8 i/s
      Symbol#to_proc:   686212.0 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   320.302M i/100ms
       block + yield   312.228M i/100ms
        unused block   314.502M i/100ms
               yield   321.364M i/100ms
Calculating -------------------------------------
          block.call      3.199B (± 1.4%) i/s -     16.015B in   5.007831s
       block + yield      3.201B (± 1.3%) i/s -     16.236B in   5.073244s
        unused block      3.201B (± 1.1%) i/s -     16.040B in   5.012096s
               yield      3.201B (± 1.3%) i/s -     16.068B in   5.020496s

Comparison:
               yield: 3201105407.9 i/s
       block + yield: 3200836199.0 i/s - same-ish: difference falls within error
        unused block: 3200603225.2 i/s - same-ish: difference falls within error
          block.call: 3198704449.9 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     2.764k i/100ms
      range#include?   171.000  i/100ms
       range#member?   228.000  i/100ms
       plain compare     7.687k i/100ms
Calculating -------------------------------------
        range#cover?     63.981k (±33.5%) i/s -    262.580k in   5.030147s
      range#include?      2.618k (±28.7%) i/s -     11.628k in   5.025813s
       range#member?      2.424k (±27.3%) i/s -     11.172k in   5.065000s
       plain compare     83.233k (±22.2%) i/s -    384.350k in   5.029295s

Comparison:
       plain compare:    83233.4 i/s
        range#cover?:    63981.4 i/s - same-ish: difference falls within error
      range#include?:     2617.9 i/s - 31.79x  (± 0.00) slower
       range#member?:     2424.2 i/s - 34.33x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    34.169M i/100ms
           String#=~    32.042M i/100ms
          Regexp#===    32.002M i/100ms
        String#match    31.361M i/100ms
Calculating -------------------------------------
       String#match?    344.433M (± 2.6%) i/s -      1.743B in   5.063134s
           String#=~    319.365M (± 1.4%) i/s -      1.602B in   5.017625s
          Regexp#===    318.471M (± 3.3%) i/s -      1.600B in   5.031130s
        String#match    312.858M (± 1.4%) i/s -      1.568B in   5.013058s

Comparison:
       String#match?: 344433041.6 i/s
           String#=~: 319365279.8 i/s - 1.08x  (± 0.00) slower
          Regexp#===: 318471235.1 i/s - 1.08x  (± 0.00) slower
        String#match: 312857557.1 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.710M i/100ms
      String#casecmp     4.631M i/100ms
Calculating -------------------------------------
String#downcase + ==     30.682M (± 7.7%) i/s -    154.477M in   5.076307s
      String#casecmp     48.900M (± 5.3%) i/s -    245.444M in   5.033997s

Comparison:
      String#casecmp: 48900382.2 i/s
String#downcase + ==: 30682105.7 i/s - 1.59x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+    10.457M i/100ms
       String#concat    10.820M i/100ms
       String#append    10.875M i/100ms
         "foo" "bar"   320.628M i/100ms
  "#{'foo'}#{'bar'}"    10.781M i/100ms
Calculating -------------------------------------
            String#+    106.579M (± 6.0%) i/s -    533.306M in   5.029628s
       String#concat    105.448M (± 6.8%) i/s -    530.170M in   5.059389s
       String#append    104.977M (± 8.1%) i/s -    522.012M in   5.023602s
         "foo" "bar"      3.193B (± 2.2%) i/s -     16.031B in   5.024009s
  "#{'foo'}#{'bar'}"    105.536M (± 7.4%) i/s -    528.251M in   5.046030s

Comparison:
         "foo" "bar": 3192596644.5 i/s
            String#+: 106578538.8 i/s - 29.96x  (± 0.00) slower
  "#{'foo'}#{'bar'}": 105535900.9 i/s - 30.25x  (± 0.00) slower
       String#concat: 105447545.9 i/s - 30.28x  (± 0.00) slower
       String#append: 104977171.2 i/s - 30.41x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   312.226M i/100ms
          String#dup   307.178M i/100ms
Calculating -------------------------------------
           String#+@      3.174B (± 2.6%) i/s -     15.924B in   5.020109s
          String#dup      3.200B (± 1.2%) i/s -     16.280B in   5.089043s

Comparison:
          String#dup: 3199558807.5 i/s
           String#+@: 3174146570.6 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.512M i/100ms
       String#match?     1.825M i/100ms
    String#end_with?    11.075M i/100ms
Calculating -------------------------------------
           String#=~     15.353M (± 2.7%) i/s -     77.116M in   5.026845s
       String#match?     18.025M (± 2.0%) i/s -     91.239M in   5.063895s
    String#end_with?    109.441M (± 3.0%) i/s -    553.750M in   5.064714s

Comparison:
    String#end_with?: 109440933.7 i/s
       String#match?: 18025002.9 i/s - 6.07x  (± 0.00) slower
           String#=~: 15352894.1 i/s - 7.13x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    93.431k i/100ms
          String#sub   844.408k i/100ms
String#dup["string"]=
                        10.033M i/100ms
Calculating -------------------------------------
         String#gsub      8.327M (±12.9%) i/s -     40.269M in   5.002439s
          String#sub      9.764M (± 9.7%) i/s -     48.976M in   5.074268s
String#dup["string"]=
                         99.995M (± 1.4%) i/s -    501.656M in   5.017906s

Comparison:
String#dup["string"]=: 99995466.1 i/s
          String#sub:  9763573.3 i/s - 10.24x  (± 0.00) slower
         String#gsub:  8327274.1 i/s - 12.01x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    90.510k i/100ms
           String#tr   162.450k i/100ms
Calculating -------------------------------------
         String#gsub      4.677M (±13.1%) i/s -     22.809M in   5.007317s
           String#tr      1.657M (± 5.9%) i/s -      8.285M in   5.020207s

Comparison:
         String#gsub:  4677279.2 i/s
           String#tr:  1656546.5 i/s - 2.82x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   316.264M i/100ms
         With Freeze   309.419M i/100ms
Calculating -------------------------------------
      Without Freeze      3.185B (± 1.9%) i/s -     16.129B in   5.066039s
         With Freeze      3.169B (± 1.6%) i/s -     16.090B in   5.078688s

Comparison:
      Without Freeze: 3185070225.0 i/s
         With Freeze: 3168938989.5 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     9.104k i/100ms
      String#squeeze    76.472k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    170.030k (±10.8%) i/s -    837.568k in   5.005168s
      String#squeeze    781.430k (± 5.3%) i/s -      3.900M in   5.005392s

Comparison:
      String#squeeze:   781430.4 i/s
 String#gsub/regex+/:   170029.9 i/s - 4.60x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~    10.629M i/100ms
       String#match?    13.930M i/100ms
  String#start_with?    16.065M i/100ms
Calculating -------------------------------------
           String#=~    106.300M (± 6.1%) i/s -    531.433M in   5.025025s
       String#match?    139.443M (± 1.0%) i/s -    710.428M in   5.095360s
  String#start_with?    160.115M (± 1.4%) i/s -    803.253M in   5.017784s

Comparison:
  String#start_with?: 160114707.2 i/s
       String#match?: 139442518.8 i/s - 1.15x  (± 0.00) slower
           String#=~: 106299580.7 i/s - 1.51x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   103.651k i/100ms
    String#[0, n] ==   668.109k i/100ms
   String#[RANGE] ==   227.699k i/100ms
   String#[0...n] ==   641.475k i/100ms
Calculating -------------------------------------
  String#start_with?      7.316M (± 1.8%) i/s -     36.589M in   5.003644s
    String#[0, n] ==      7.100M (± 5.2%) i/s -     35.410M in   5.002886s
   String#[RANGE] ==     13.442M (±13.4%) i/s -     65.350M in   5.039952s
   String#[0...n] ==      6.435M (± 3.5%) i/s -     32.715M in   5.090416s

Comparison:
   String#[RANGE] ==: 13441918.2 i/s
  String#start_with?:  7315583.0 i/s - 1.84x  (± 0.00) slower
    String#[0, n] ==:  7099927.6 i/s - 1.89x  (± 0.00) slower
   String#[0...n] ==:  6435098.3 i/s - 2.09x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     9.837M i/100ms
 String#sub!'string'   190.489k i/100ms
String#gsub!'string'   617.067k i/100ms
  String#[/regexp/]=     9.726M i/100ms
 String#sub!/regexp/     1.182M i/100ms
String#gsub!/regexp/   777.981k i/100ms
Calculating -------------------------------------
  String#['string']=    100.007M (± 1.5%) i/s -    501.690M in   5.017779s
 String#sub!'string'     10.735M (±15.9%) i/s -     51.242M in   4.998383s
String#gsub!'string'      6.199M (± 4.9%) i/s -     31.470M in   5.090943s
  String#[/regexp/]=     97.238M (± 0.2%) i/s -    486.313M in   5.001292s
 String#sub!/regexp/     31.168M (± 7.1%) i/s -    154.906M in   5.005024s
String#gsub!/regexp/      8.905M (±10.0%) i/s -     44.345M in   5.047428s

Comparison:
  String#['string']=: 100007121.9 i/s
  String#[/regexp/]=: 97237814.3 i/s - 1.03x  (± 0.00) slower
 String#sub!/regexp/: 31167684.0 i/s - 3.21x  (± 0.00) slower
 String#sub!'string': 10735042.3 i/s - 9.32x  (± 0.00) slower
String#gsub!/regexp/:  8904727.4 i/s - 11.23x  (± 0.00) slower
String#gsub!'string':  6199161.6 i/s - 16.13x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub   223.756k i/100ms
        String#chomp     6.521M i/100ms
String#delete_suffix    11.302M i/100ms
Calculating -------------------------------------
          String#sub     75.527M (±13.1%) i/s -    361.366M in   4.999326s
        String#chomp     64.672M (± 2.7%) i/s -    326.066M in   5.045965s
String#delete_suffix    116.124M (± 8.6%) i/s -    576.392M in   5.013306s

Comparison:
String#delete_suffix: 116123707.2 i/s
          String#sub: 75526743.9 i/s - 1.54x  (± 0.00) slower
        String#chomp: 64672181.9 i/s - 1.80x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   315.622M i/100ms
          String#sub     3.679M i/100ms
Calculating -------------------------------------
String#delete_prefix      3.176B (± 2.3%) i/s -     16.097B in   5.070355s
          String#sub    343.045M (± 2.2%) i/s -      1.715B in   5.001251s

Comparison:
String#delete_prefix: 3176487359.4 i/s
          String#sub: 343044850.2 i/s - 9.26x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.935M i/100ms
    String#unpack[0]     2.047M i/100ms
Calculating -------------------------------------
      String#unpack1     20.214M (± 4.7%) i/s -    102.554M in   5.085831s
    String#unpack[0]     20.165M (± 6.2%) i/s -    100.292M in   5.001459s

Comparison:
      String#unpack1: 20213681.9 i/s
    String#unpack[0]: 20164595.6 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 25.0.0-dev-2f1aaebe, like ruby 3.3.7, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    40.789k i/100ms
          Time.parse   343.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    915.481k (±10.1%) i/s -      4.528M in   5.037423s
          Time.parse      5.898k (±13.8%) i/s -     28.812k in   5.018028s

Comparison:
        Time.iso8601:   915480.7 i/s
          Time.parse:     5897.7 i/s - 155.23x  (± 0.00) slower

