$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       204.067M i/100ms
Function with splat arguments
                       529.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          2.067B (± 3.0%) i/s -     10.407B in   5.040188s
Function with splat arguments
                          6.373k (± 6.0%) i/s -     31.740k in   4.999832s

Comparison:
Function with single Array argument: 2066811506.4 i/s
Function with splat arguments:     6373.1 i/s - 324302.24x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   208.226M i/100ms
Sequential Assignment
                       207.337M i/100ms
Calculating -------------------------------------
 Parallel Assignment      2.134B (± 3.2%) i/s -     10.828B in   5.079717s
Sequential Assignment
                          2.091B (± 3.7%) i/s -     10.574B in   5.065174s

Comparison:
 Parallel Assignment: 2133803447.0 i/s
Sequential Assignment: 2090671405.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   203.836M i/100ms
       attr_accessor   200.282M i/100ms
Calculating -------------------------------------
   getter_and_setter      2.095B (± 3.0%) i/s -     10.599B in   5.063650s
       attr_accessor      2.102B (± 3.5%) i/s -     10.615B in   5.055524s

Comparison:
       attr_accessor: 2102298447.3 i/s
   getter_and_setter: 2095224798.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     6.655k i/100ms
         respond_to?   206.564M i/100ms
Calculating -------------------------------------
      begin...rescue     43.882k (± 4.1%) i/s -    219.615k in   5.012841s
         respond_to?      2.092B (± 3.1%) i/s -     10.535B in   5.040977s

Comparison:
         respond_to?: 2091818839.2 i/s
      begin...rescue:    43881.6 i/s - 47669.62x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   195.405M i/100ms
             &method   214.546M i/100ms
Calculating -------------------------------------
              normal      2.100B (± 3.6%) i/s -     10.552B in   5.030396s
             &method      2.069B (± 5.2%) i/s -     10.513B in   5.095523s

Comparison:
              normal: 2100438479.8 i/s
             &method: 2069103112.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        91.000  i/100ms
       define_method   121.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.481k (±55.0%) i/s -      4.186k in   6.311246s
       define_method      3.297k (±53.6%) i/s -      6.292k in   6.143288s

Comparison:
       define_method:     3297.1 i/s
module_eval with string:     1481.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    62.604k i/100ms
       Kernel#format    58.198k i/100ms
            String#%    59.121k i/100ms
Calculating -------------------------------------
         Float#round    669.790k (± 4.3%) i/s -      3.381M in   5.057039s
       Kernel#format    568.373k (± 4.8%) i/s -      2.852M in   5.029013s
            String#%    582.407k (± 7.1%) i/s -      2.897M in   5.004427s

Comparison:
         Float#round:   669789.9 i/s
            String#%:   582406.7 i/s - 1.15x  (± 0.00) slower
       Kernel#format:   568372.8 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   206.021M i/100ms
          OpenStruct   206.967M i/100ms
Calculating -------------------------------------
                Hash      2.123B (± 2.7%) i/s -     10.713B in   5.050402s
          OpenStruct      2.102B (± 3.4%) i/s -     10.555B in   5.026293s

Comparison:
                Hash: 2122779627.0 i/s
          OpenStruct: 2102422250.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   203.962M i/100ms
          OpenStruct     2.441k i/100ms
Calculating -------------------------------------
                Hash      2.001B (± 4.5%) i/s -      9.994B in   5.005428s
          OpenStruct     26.452k (±13.8%) i/s -    129.373k in   5.024431s

Comparison:
                Hash: 2000673497.6 i/s
          OpenStruct:    26451.9 i/s - 75634.35x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   688.313k i/100ms
  ancestors.include?   122.257k i/100ms
Calculating -------------------------------------
  less than or equal      7.866M (± 5.9%) i/s -     39.234M in   5.004872s
  ancestors.include?      1.207M (± 5.2%) i/s -      6.113M in   5.079967s

Comparison:
  less than or equal:  7866255.4 i/s
  ancestors.include?:  1206594.5 i/s - 6.52x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     20.401  (± 4.9%) i/s -    102.000  in   5.007955s
         Kernel loop      6.311  (± 0.0%) i/s -     32.000  in   5.077380s

Comparison:
          While Loop:       20.4 i/s
         Kernel loop:        6.3 i/s - 3.23x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   206.295M i/100ms
         Array#first   198.879M i/100ms
Calculating -------------------------------------
           Array#[0]      2.086B (± 3.3%) i/s -     10.521B in   5.049326s
         Array#first      2.115B (± 3.1%) i/s -     10.739B in   5.083770s

Comparison:
         Array#first: 2114591748.2 i/s
           Array#[0]: 2086007194.9 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   204.787M i/100ms
          Array#last   200.167M i/100ms
Calculating -------------------------------------
          Array#[-1]      2.097B (± 3.7%) i/s -     10.649B in   5.084871s
          Array#last      2.129B (± 3.3%) i/s -     10.809B in   5.081518s

Comparison:
          Array#last: 2129419804.2 i/s
          Array#[-1]: 2097177890.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   478.706k i/100ms
Calculating -------------------------------------
                find      7.492  (±26.7%) i/s -     14.000  in   5.075226s
             bsearch      4.691M (± 4.6%) i/s -     23.457M in   5.011370s

Comparison:
             bsearch:  4690757.2 i/s
                find:        7.5 i/s - 626120.21x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.111  (± 0.0%) i/s -      1.000  in   9.043153s
        Array#insert      0.831  (± 0.0%) i/s -      5.000  in   6.015351s

Comparison:
        Array#insert:        0.8 i/s
       Array#unshift:        0.1 i/s - 7.52x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   203.792M i/100ms
          Array#size   203.087M i/100ms
         Array#count   203.266M i/100ms
Calculating -------------------------------------
        Array#length      2.101B (± 3.2%) i/s -     10.597B in   5.049544s
          Array#size      2.149B (± 5.7%) i/s -     10.764B in   5.024429s
         Array#count      2.132B (± 3.1%) i/s -     10.773B in   5.057703s

Comparison:
          Array#size: 2149052347.4 i/s
         Array#count: 2132069996.1 i/s - same-ish: difference falls within error
        Array#length: 2100764520.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    19.634k i/100ms
        Array#sample     2.203M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    194.587k (± 3.9%) i/s -    981.700k in   5.053017s
        Array#sample     22.599M (± 3.1%) i/s -    114.545M in   5.073485s

Comparison:
        Array#sample: 22598701.9 i/s
 Array#shuffle.first:   194587.2 i/s - 116.14x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   373.000  i/100ms
          Date.parse   137.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     18.564k (±37.2%) i/s -     68.632k in   4.994684s
          Date.parse      7.831k (±31.5%) i/s -     31.099k in   4.996113s

Comparison:
        Date.iso8601:    18563.6 i/s
          Date.parse:     7831.4 i/s - 2.37x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   126.686k i/100ms
           Array#map   478.293k i/100ms
Calculating -------------------------------------
   Array#each + push      1.369M (± 5.5%) i/s -      6.841M in   5.012079s
           Array#map      4.801M (± 7.0%) i/s -     23.915M in   5.005335s

Comparison:
           Array#map:  4801026.7 i/s
   Array#each + push:  1369171.6 i/s - 3.51x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     8.906M i/100ms
               #each    48.683M i/100ms
Calculating -------------------------------------
            For loop     96.265M (± 4.1%) i/s -    480.909M in   5.003766s
               #each    497.102M (± 5.1%) i/s -      2.483B in   5.007592s

Comparison:
               #each: 497101752.6 i/s
            For loop: 96265227.5 i/s - 5.16x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   786.824k i/100ms
     each_with_index     1.159M i/100ms
Calculating -------------------------------------
          While Loop      8.312M (± 3.6%) i/s -     41.702M in   5.023769s
     each_with_index     11.597M (± 3.5%) i/s -     57.930M in   5.001340s

Comparison:
     each_with_index: 11597232.7 i/s
          While Loop:  8311604.6 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   131.304k i/100ms
      inject to_proc   129.601k i/100ms
        inject block   128.927k i/100ms
Calculating -------------------------------------
       inject symbol      1.296M (± 3.1%) i/s -      6.565M in   5.070593s
      inject to_proc      1.284M (± 2.8%) i/s -      6.480M in   5.048904s
        inject block      1.282M (± 2.2%) i/s -      6.446M in   5.031863s

Comparison:
       inject symbol:  1296023.8 i/s
      inject to_proc:  1284464.3 i/s - same-ish: difference falls within error
        inject block:  1281740.8 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     8.383k i/100ms
   Array#map.flatten     9.980k i/100ms
      Array#flat_map    27.413k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    103.794k (± 4.5%) i/s -    519.746k in   5.018586s
   Array#map.flatten    100.382k (± 4.6%) i/s -    508.980k in   5.081857s
      Array#flat_map    275.378k (± 4.2%) i/s -      1.398M in   5.086419s

Comparison:
      Array#flat_map:   275378.3 i/s
Array#map.flatten(1):   103793.8 i/s - 2.65x  (± 0.00) slower
   Array#map.flatten:   100381.9 i/s - 2.74x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   126.021k i/100ms
  Array#reverse_each     1.749M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.346M (± 5.1%) i/s -      6.805M in   5.068838s
  Array#reverse_each     17.180M (± 3.4%) i/s -     87.460M in   5.096850s

Comparison:
  Array#reverse_each: 17180326.2 i/s
  Array#reverse.each:  1346101.5 i/s - 12.76x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       557.500k i/100ms
   Enumerable#detect     3.554M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          6.041M (± 7.0%) i/s -    120.420M in  20.059657s
   Enumerable#detect     35.288M (± 6.1%) i/s -    703.632M in  20.016123s

Comparison:
   Enumerable#detect: 35287775.3 i/s
Enumerable#select.first:  6040770.6 i/s - 5.84x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       112.490k i/100ms
Enumerable#select.last
                       334.353k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.374M (± 4.1%) i/s -      6.862M in   5.001719s
Enumerable#select.last
                          3.743M (± 6.6%) i/s -     18.724M in   5.025534s

Comparison:
Enumerable#select.last:  3742814.8 i/s
Enumerable#reverse.detect:  1374262.5 i/s - 2.72x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         1.871k i/100ms
  Enumerable#sort_by     2.038k i/100ms
     Enumerable#sort     2.685k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         20.738k (± 9.6%) i/s -    102.905k in   5.030299s
  Enumerable#sort_by     19.423k (±22.3%) i/s -     87.634k in   5.013548s
     Enumerable#sort     27.249k (± 3.7%) i/s -    136.935k in   5.032176s

Comparison:
     Enumerable#sort:    27249.4 i/s
Enumerable#sort_by (Symbol#to_proc):    20738.4 i/s - 1.31x  (± 0.00) slower
  Enumerable#sort_by:    19423.2 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   398.820k i/100ms
Enumerable#sort_by...first
                         4.743k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      4.036M (± 3.6%) i/s -     20.340M in   5.046339s
Enumerable#sort_by...first
                         57.068k (± 4.9%) i/s -    284.580k in   4.999323s

Comparison:
   Enumerable#min_by:  4035899.1 i/s
Enumerable#sort_by...first:    57068.0 i/s - 70.72x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   183.583k i/100ms
            Hash#dup   202.404k i/100ms
Calculating -------------------------------------
              Hash[]      2.030M (± 5.2%) i/s -     10.281M in   5.079564s
            Hash#dup      2.047M (± 4.9%) i/s -     10.323M in   5.055411s

Comparison:
            Hash#dup:  2047036.2 i/s
              Hash[]:  2029773.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   196.807M i/100ms
  Hash#fetch, symbol   202.142M i/100ms
     Hash#[], string     2.292M i/100ms
  Hash#fetch, string     2.473M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      2.089B (± 4.0%) i/s -     10.431B in   5.000420s
  Hash#fetch, symbol      2.065B (± 4.0%) i/s -     10.309B in   5.000800s
     Hash#[], string    145.072M (± 5.6%) i/s -    724.333M in   5.010582s
  Hash#fetch, string    116.449M (± 6.2%) i/s -    581.229M in   5.014543s

Comparison:
     Hash#[], symbol: 2089435722.1 i/s
  Hash#fetch, symbol: 2064931708.9 i/s - same-ish: difference falls within error
     Hash#[], string: 145072159.0 i/s - 14.40x  (± 0.00) slower
  Hash#fetch, string: 116449210.6 i/s - 17.94x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    50.649M i/100ms
             Hash#[]    51.361M i/100ms
          Hash#[] ||    51.606M i/100ms
          Hash#[] &&    52.406M i/100ms
          Hash#fetch    52.511M i/100ms
 Hash#fetch fallback    53.210M i/100ms
Calculating -------------------------------------
            Hash#dig    537.149M (± 4.2%) i/s -      2.684B in   5.006483s
             Hash#[]    536.065M (± 4.1%) i/s -      2.722B in   5.086486s
          Hash#[] ||    535.817M (± 3.5%) i/s -      2.684B in   5.014524s
          Hash#[] &&    534.036M (± 3.5%) i/s -      2.673B in   5.010836s
          Hash#fetch    531.094M (± 3.9%) i/s -      2.678B in   5.050483s
 Hash#fetch fallback    516.319M (± 5.6%) i/s -      2.607B in   5.065583s

Comparison:
            Hash#dig: 537148590.9 i/s
             Hash#[]: 536065018.0 i/s - same-ish: difference falls within error
          Hash#[] ||: 535816633.1 i/s - same-ish: difference falls within error
          Hash#[] &&: 534035837.9 i/s - same-ish: difference falls within error
          Hash#fetch: 531094297.1 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 516318901.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   203.999M i/100ms
  Hash#fetch + block   207.008M i/100ms
    Hash#fetch + arg   207.533M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      2.130B (± 3.1%) i/s -     10.812B in   5.081581s
  Hash#fetch + block      2.121B (± 4.1%) i/s -     10.764B in   5.084435s
    Hash#fetch + arg      2.137B (± 3.6%) i/s -     10.792B in   5.056761s

Comparison:
    Hash#fetch + arg: 2136898591.2 i/s
  Hash#fetch + const: 2129705823.5 i/s - same-ish: difference falls within error
  Hash#fetch + block: 2120781773.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    15.600k i/100ms
         sort + to_h    10.761k i/100ms
Calculating -------------------------------------
      sort_by + to_h    214.732k (±12.0%) i/s -      1.061M in   5.015392s
         sort + to_h    134.105k (± 5.0%) i/s -    677.943k in   5.068916s

Comparison:
      sort_by + to_h:   214731.8 i/s
         sort + to_h:   134105.0 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   160.532k i/100ms
       Hash#each_key   178.223k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.566M (±11.8%) i/s -      7.706M in   5.059276s
       Hash#each_key      1.818M (± 4.3%) i/s -      9.089M in   5.009977s

Comparison:
       Hash#each_key:  1817720.8 i/s
      Hash#keys.each:  1565570.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   183.000  i/100ms
           Hash#key?     2.379M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.978k (±12.6%) i/s -      9.699k in   5.058851s
           Hash#key?     23.362M (± 2.9%) i/s -    118.973M in   5.097025s

Comparison:
           Hash#key?: 23362259.4 i/s
  Hash#keys.include?:     1978.2 i/s - 11809.56x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    12.608k i/100ms
            Hash#[]=    21.089k i/100ms
Calculating -------------------------------------
         Hash#merge!    206.206k (±10.9%) i/s -    996.032k in   5.042382s
            Hash#[]=    219.636k (± 4.3%) i/s -      1.118M in   5.098932s

Comparison:
            Hash#[]=:   219635.9 i/s
         Hash#merge!:   206206.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         9.298k i/100ms
      Hash#merge({})     7.685k i/100ms
 Hash#dup#merge!({})    12.447k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        120.249k (± 5.4%) i/s -    604.370k in   5.042778s
      Hash#merge({})     78.142k (± 5.9%) i/s -    391.935k in   5.035363s
 Hash#dup#merge!({})    126.399k (± 3.7%) i/s -    634.797k in   5.029695s

Comparison:
 Hash#dup#merge!({}):   126398.6 i/s
{}#merge!(Hash) do end:   120249.1 i/s - same-ish: difference falls within error
      Hash#merge({}):    78141.9 i/s - 1.62x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   209.657M i/100ms
          Hash#merge   211.360M i/100ms
Calculating -------------------------------------
        Hash#**other      2.159B (± 3.7%) i/s -     10.902B in   5.057156s
          Hash#merge      2.112B (± 4.5%) i/s -     10.568B in   5.013925s

Comparison:
        Hash#**other: 2158683804.6 i/s
          Hash#merge: 2111989457.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   274.000  i/100ms
         Hash#merge!    20.809k i/100ms
Calculating -------------------------------------
          Hash#merge      3.185k (± 5.0%) i/s -     16.166k in   5.088611s
         Hash#merge!    210.241k (± 4.1%) i/s -      1.061M in   5.057066s

Comparison:
         Hash#merge!:   210241.1 i/s
          Hash#merge:     3185.5 i/s - 66.00x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.008M i/100ms
Array#each             900.897k i/100ms
Array#each_w/_object   902.555k i/100ms
Hash#select-include      1.243M i/100ms
Calculating -------------------------------------
Hash#native-slice        10.680M (± 4.8%) i/s -     53.406M in   5.013231s
Array#each                9.045M (± 5.0%) i/s -     45.946M in   5.093193s
Array#each_w/_object      9.044M (± 4.2%) i/s -     46.030M in   5.099079s
Hash#select-include      12.218M (± 4.9%) i/s -     62.155M in   5.100184s

Comparison:
Hash#select-include : 12218036.9 i/s
Hash#native-slice   : 10679508.0 i/s - 1.14x  (± 0.00) slower
Array#each          :  9044764.9 i/s - 1.35x  (± 0.00) slower
Array#each_w/_object:  9044060.1 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   177.000  i/100ms
         Hash#value?     5.064k i/100ms
Calculating -------------------------------------
Hash#values.include?      2.039k (±10.2%) i/s -     10.089k in   5.046855s
         Hash#value?     49.757k (± 3.0%) i/s -    253.200k in   5.093396s

Comparison:
         Hash#value?:    49756.7 i/s
Hash#values.include?:     2038.9 i/s - 24.40x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   207.857M i/100ms
                send   202.771M i/100ms
      method_missing   205.089M i/100ms
Calculating -------------------------------------
                call      2.076B (± 4.5%) i/s -     10.393B in   5.016706s
                send      2.097B (± 3.1%) i/s -     10.544B in   5.033567s
      method_missing      2.043B (± 3.9%) i/s -     10.254B in   5.027350s

Comparison:
                send: 2096746776.4 i/s
                call: 2076213126.8 i/s - same-ish: difference falls within error
      method_missing: 2042870101.1 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    13.691k i/100ms
      Symbol#to_proc    14.422k i/100ms
Calculating -------------------------------------
               Block    146.628k (± 6.6%) i/s -    739.314k in   5.070475s
      Symbol#to_proc    145.232k (± 4.4%) i/s -    735.522k in   5.074684s

Comparison:
               Block:   146627.7 i/s
      Symbol#to_proc:   145231.8 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   203.522M i/100ms
       block + yield   223.623M i/100ms
        unused block   228.143M i/100ms
               yield   224.581M i/100ms
Calculating -------------------------------------
          block.call      2.165B (± 5.9%) i/s -     10.990B in   5.092488s
       block + yield      2.072B (± 5.4%) i/s -     10.510B in   5.087173s
        unused block      2.089B (± 3.3%) i/s -     10.495B in   5.029826s
               yield      2.112B (± 2.8%) i/s -     10.555B in   5.001252s

Comparison:
          block.call: 2165353330.6 i/s
               yield: 2112192317.9 i/s - same-ish: difference falls within error
        unused block: 2088768905.9 i/s - same-ish: difference falls within error
       block + yield: 2071864395.4 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    23.311k i/100ms
      range#include?   290.000  i/100ms
       range#member?   309.000  i/100ms
       plain compare    16.912k i/100ms
Calculating -------------------------------------
        range#cover?    121.985k (±24.4%) i/s -    582.775k in   5.131207s
      range#include?      5.058k (±38.9%) i/s -     20.010k in   5.087708s
       range#member?      6.033k (±36.6%) i/s -     20.085k in   5.148175s
       plain compare    177.627k (±37.4%) i/s -    642.656k in   5.041507s

Comparison:
       plain compare:   177627.4 i/s
        range#cover?:   121985.1 i/s - same-ish: difference falls within error
       range#member?:     6033.4 i/s - 29.44x  (± 0.00) slower
      range#include?:     5057.6 i/s - 35.12x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     9.548M i/100ms
           String#=~    10.001M i/100ms
          Regexp#===     9.556M i/100ms
        String#match     6.287M i/100ms
Calculating -------------------------------------
       String#match?     89.876M (± 3.5%) i/s -    448.777M in   4.999403s
           String#=~    101.174M (± 4.6%) i/s -    510.033M in   5.051686s
          Regexp#===    103.491M (± 6.2%) i/s -    516.033M in   5.005893s
        String#match     69.756M (± 5.3%) i/s -    352.093M in   5.062590s

Comparison:
          Regexp#===: 103491327.5 i/s
           String#=~: 101173502.9 i/s - same-ish: difference falls within error
       String#match?: 89875512.2 i/s - 1.15x  (± 0.00) slower
        String#match: 69756041.3 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.301M i/100ms
      String#casecmp     2.554M i/100ms
Calculating -------------------------------------
String#downcase + ==     15.501M (± 5.4%) i/s -     78.060M in   5.051771s
      String#casecmp     25.552M (± 4.3%) i/s -    127.715M in   5.008037s

Comparison:
      String#casecmp: 25551609.7 i/s
String#downcase + ==: 15500703.1 i/s - 1.65x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     6.063M i/100ms
       String#concat     6.537M i/100ms
       String#append     6.698M i/100ms
         "foo" "bar"   208.386M i/100ms
  "#{'foo'}#{'bar'}"   225.096M i/100ms
Calculating -------------------------------------
            String#+     70.579M (± 6.5%) i/s -    351.669M in   5.005527s
       String#concat     68.816M (± 5.7%) i/s -    346.487M in   5.052001s
       String#append     69.466M (± 4.9%) i/s -    348.320M in   5.026783s
         "foo" "bar"      2.270B (± 4.7%) i/s -     11.461B in   5.060698s
  "#{'foo'}#{'bar'}"      2.306B (± 4.1%) i/s -     11.705B in   5.084361s

Comparison:
  "#{'foo'}#{'bar'}": 2306029672.0 i/s
         "foo" "bar": 2269784267.4 i/s - same-ish: difference falls within error
            String#+: 70578824.6 i/s - 32.67x  (± 0.00) slower
       String#append: 69466046.3 i/s - 33.20x  (± 0.00) slower
       String#concat: 68816226.2 i/s - 33.51x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   224.953M i/100ms
          String#dup   226.935M i/100ms
Calculating -------------------------------------
           String#+@      2.139B (± 5.1%) i/s -     10.798B in   5.062244s
          String#dup      2.107B (± 5.9%) i/s -     10.666B in   5.081512s

Comparison:
           String#+@: 2138710461.8 i/s
          String#dup: 2106558704.0 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   836.561k i/100ms
       String#match?     1.260M i/100ms
    String#end_with?     7.098M i/100ms
Calculating -------------------------------------
           String#=~     10.853M (± 4.6%) i/s -     54.376M in   5.021523s
       String#match?     14.281M (± 5.0%) i/s -     71.822M in   5.042496s
    String#end_with?     79.077M (± 4.6%) i/s -    397.493M in   5.037525s

Comparison:
    String#end_with?: 79077193.4 i/s
       String#match?: 14281087.9 i/s - 5.54x  (± 0.00) slower
           String#=~: 10852898.5 i/s - 7.29x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   235.195k i/100ms
          String#sub   358.473k i/100ms
String#dup["string"]=
                         9.820M i/100ms
Calculating -------------------------------------
         String#gsub      3.447M (±10.0%) i/s -     17.169M in   5.034458s
          String#sub      4.831M (± 9.3%) i/s -     24.018M in   5.019463s
String#dup["string"]=
                         95.749M (± 4.5%) i/s -    481.165M in   5.035323s

Comparison:
String#dup["string"]=: 95748583.2 i/s
          String#sub:  4830646.5 i/s - 19.82x  (± 0.00) slower
         String#gsub:  3447485.7 i/s - 27.77x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    59.639k i/100ms
           String#tr    82.620k i/100ms
Calculating -------------------------------------
         String#gsub      1.901M (± 9.8%) i/s -      9.423M in   5.015136s
           String#tr    867.719k (± 4.8%) i/s -      4.379M in   5.057965s

Comparison:
         String#gsub:  1901466.3 i/s
           String#tr:   867719.3 i/s - 2.19x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   219.092M i/100ms
         With Freeze   215.203M i/100ms
Calculating -------------------------------------
      Without Freeze      2.033B (± 3.9%) i/s -     10.297B in   5.072100s
         With Freeze      2.130B (± 6.3%) i/s -     10.760B in   5.071747s

Comparison:
         With Freeze: 2130160146.9 i/s
      Without Freeze: 2033384501.5 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.992k i/100ms
      String#squeeze    25.694k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     56.791k (± 6.4%) i/s -    283.432k in   5.012951s
      String#squeeze    245.080k (± 4.2%) i/s -      1.233M in   5.041589s

Comparison:
      String#squeeze:   245079.6 i/s
 String#gsub/regex+/:    56790.8 i/s - 4.32x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     2.191M i/100ms
       String#match?     3.495M i/100ms
  String#start_with?    14.425M i/100ms
Calculating -------------------------------------
           String#=~     22.024M (± 7.1%) i/s -    111.757M in   5.101395s
       String#match?     32.731M (± 5.0%) i/s -    164.273M in   5.031941s
  String#start_with?    133.042M (± 5.4%) i/s -    677.967M in   5.110762s

Comparison:
  String#start_with?: 133042109.7 i/s
       String#match?: 32730955.2 i/s - 4.06x  (± 0.00) slower
           String#=~: 22023835.4 i/s - 6.04x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    82.132k i/100ms
    String#[0, n] ==   122.395k i/100ms
   String#[RANGE] ==   133.780k i/100ms
   String#[0...n] ==   100.778k i/100ms
Calculating -------------------------------------
  String#start_with?      3.936M (± 8.5%) i/s -     19.547M in   5.004705s
    String#[0, n] ==      1.368M (± 5.8%) i/s -      6.854M in   5.028399s
   String#[RANGE] ==      1.368M (± 5.5%) i/s -      6.823M in   5.001324s
   String#[0...n] ==      1.046M (± 5.1%) i/s -      5.240M in   5.024077s

Comparison:
  String#start_with?:  3936112.9 i/s
   String#[RANGE] ==:  1368421.0 i/s - 2.88x  (± 0.00) slower
    String#[0, n] ==:  1368084.1 i/s - 2.88x  (± 0.00) slower
   String#[0...n] ==:  1046041.2 i/s - 3.76x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     9.749M i/100ms
 String#sub!'string'   265.272k i/100ms
String#gsub!'string'   354.380k i/100ms
  String#[/regexp/]=     1.222M i/100ms
 String#sub!/regexp/     1.496M i/100ms
String#gsub!/regexp/   386.643k i/100ms
Calculating -------------------------------------
  String#['string']=     93.231M (± 4.8%) i/s -    467.945M in   5.030564s
 String#sub!'string'      4.728M (±13.9%) i/s -     22.018M in   5.012696s
String#gsub!'string'      3.446M (± 6.3%) i/s -     17.365M in   5.061234s
  String#[/regexp/]=     11.774M (± 4.4%) i/s -     59.874M in   5.095114s
 String#sub!/regexp/     13.235M (± 3.8%) i/s -     67.320M in   5.093892s
String#gsub!/regexp/      4.007M (± 5.5%) i/s -     20.105M in   5.033311s

Comparison:
  String#['string']=: 93231429.3 i/s
 String#sub!/regexp/: 13235024.5 i/s - 7.04x  (± 0.00) slower
  String#[/regexp/]=: 11774497.2 i/s - 7.92x  (± 0.00) slower
 String#sub!'string':  4728348.0 i/s - 19.72x  (± 0.00) slower
String#gsub!/regexp/:  4007206.6 i/s - 23.27x  (± 0.00) slower
String#gsub!'string':  3445517.6 i/s - 27.06x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.527M i/100ms
        String#chomp     3.414M i/100ms
String#delete_suffix     3.700M i/100ms
Calculating -------------------------------------
          String#sub     15.254M (± 4.3%) i/s -     76.368M in   5.016247s
        String#chomp     32.585M (± 4.3%) i/s -    163.869M in   5.038462s
String#delete_suffix     36.851M (± 4.8%) i/s -    185.004M in   5.032203s

Comparison:
String#delete_suffix: 36851426.3 i/s
        String#chomp: 32585070.4 i/s - 1.13x  (± 0.00) slower
          String#sub: 15253506.0 i/s - 2.42x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   206.004M i/100ms
          String#sub    10.089M i/100ms
Calculating -------------------------------------
String#delete_prefix      2.147B (± 4.6%) i/s -     10.712B in   5.001107s
          String#sub     98.669M (± 4.4%) i/s -    494.385M in   5.020496s

Comparison:
String#delete_prefix: 2146591129.9 i/s
          String#sub: 98669195.8 i/s - 21.76x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   915.019k i/100ms
    String#unpack[0]     1.068M i/100ms
Calculating -------------------------------------
      String#unpack1     10.685M (± 5.6%) i/s -     53.986M in   5.069328s
    String#unpack[0]     10.808M (± 4.8%) i/s -     54.462M in   5.051285s

Comparison:
    String#unpack[0]: 10808146.3 i/s
      String#unpack1: 10685087.6 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.3.0-dev-ea16721f, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    16.017k i/100ms
          Time.parse   161.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    137.613k (±30.6%) i/s -    640.680k in   5.071399s
          Time.parse      4.748k (±23.9%) i/s -     20.125k in   5.010911s

Comparison:
        Time.iso8601:   137612.7 i/s
          Time.parse:     4747.9 i/s - 28.98x  (± 0.00) slower

