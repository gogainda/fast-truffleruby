$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       238.911M i/100ms
Function with splat arguments
                       608.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          2.387B (± 0.3%) i/s -     11.946B in   5.003861s
Function with splat arguments
                          6.417k (± 5.1%) i/s -     32.224k in   5.035540s

Comparison:
Function with single Array argument: 2387295252.1 i/s
Function with splat arguments:     6416.9 i/s - 372030.03x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   238.802M i/100ms
Sequential Assignment
                       238.708M i/100ms
Calculating -------------------------------------
 Parallel Assignment      2.385B (± 0.4%) i/s -     11.940B in   5.005596s
Sequential Assignment
                          2.388B (± 0.4%) i/s -     12.174B in   5.097196s

Comparison:
Sequential Assignment: 2388434202.0 i/s
 Parallel Assignment: 2385394681.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   238.950M i/100ms
       attr_accessor   238.968M i/100ms
Calculating -------------------------------------
   getter_and_setter      2.387B (± 0.4%) i/s -     11.948B in   5.005865s
       attr_accessor      2.390B (± 0.2%) i/s -     11.948B in   5.000288s

Comparison:
       attr_accessor: 2389555211.7 i/s
   getter_and_setter: 2386738258.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     6.881k i/100ms
         respond_to?   238.707M i/100ms
Calculating -------------------------------------
      begin...rescue     47.949k (± 2.7%) i/s -    240.835k in   5.026411s
         respond_to?      2.390B (± 0.2%) i/s -     12.174B in   5.094792s

Comparison:
         respond_to?: 2389525547.5 i/s
      begin...rescue:    47948.5 i/s - 49835.24x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   238.691M i/100ms
             &method     7.842M i/100ms
Calculating -------------------------------------
              normal      2.386B (± 0.4%) i/s -     11.935B in   5.001039s
             &method     80.673M (± 4.3%) i/s -    407.766M in   5.064275s

Comparison:
              normal: 2386455755.1 i/s
             &method: 80673457.2 i/s - 29.58x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       119.000  i/100ms
       define_method   130.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.577k (±57.9%) i/s -      4.165k in   5.986197s
       define_method      3.707k (±48.3%) i/s -      6.890k in   5.329536s

Comparison:
       define_method:     3707.3 i/s
module_eval with string:     1577.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    75.759k i/100ms
       Kernel#format    62.330k i/100ms
            String#%    64.461k i/100ms
Calculating -------------------------------------
         Float#round    749.457k (± 2.6%) i/s -      3.788M in   5.057752s
       Kernel#format    628.123k (± 2.3%) i/s -      3.179M in   5.063732s
            String#%    648.676k (± 2.3%) i/s -      3.288M in   5.070776s

Comparison:
         Float#round:   749457.2 i/s
            String#%:   648676.2 i/s - 1.16x  (± 0.00) slower
       Kernel#format:   628122.6 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   238.780M i/100ms
          OpenStruct   239.085M i/100ms
Calculating -------------------------------------
                Hash      2.386B (± 0.4%) i/s -     11.939B in   5.004162s
          OpenStruct      2.390B (± 0.1%) i/s -     11.954B in   5.001203s

Comparison:
          OpenStruct: 2390282319.5 i/s
                Hash: 2385857254.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   238.500M i/100ms
          OpenStruct     2.608k i/100ms
Calculating -------------------------------------
                Hash      2.382B (± 0.5%) i/s -     11.925B in   5.006636s
          OpenStruct     28.817k (±12.6%) i/s -    143.440k in   5.088985s

Comparison:
                Hash: 2381904139.3 i/s
          OpenStruct:    28817.5 i/s - 82654.92x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   697.924k i/100ms
  ancestors.include?   125.877k i/100ms
Calculating -------------------------------------
  less than or equal      7.511M (± 3.5%) i/s -     37.688M in   5.024030s
  ancestors.include?      1.316M (± 4.6%) i/s -      6.671M in   5.078817s

Comparison:
  less than or equal:  7511327.9 i/s
  ancestors.include?:  1316452.0 i/s - 5.71x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     23.872  (± 0.0%) i/s -    120.000  in   5.026865s
         Kernel loop      6.051  (± 0.0%) i/s -     31.000  in   5.122880s

Comparison:
          While Loop:       23.9 i/s
         Kernel loop:        6.1 i/s - 3.94x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   238.560M i/100ms
         Array#first   238.542M i/100ms
Calculating -------------------------------------
           Array#[0]      2.366B (± 3.9%) i/s -     11.928B in   5.051116s
         Array#first      2.389B (± 0.3%) i/s -     12.166B in   5.092725s

Comparison:
         Array#first: 2388850466.1 i/s
           Array#[0]: 2366019726.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   238.701M i/100ms
          Array#last   238.962M i/100ms
Calculating -------------------------------------
          Array#[-1]      2.386B (± 0.4%) i/s -     11.935B in   5.002738s
          Array#last      2.390B (± 0.2%) i/s -     11.948B in   5.000006s

Comparison:
          Array#last: 2389627375.1 i/s
          Array#[-1]: 2385737829.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   361.614k i/100ms
Calculating -------------------------------------
                find      8.288  (±24.1%) i/s -     15.000  in   5.005469s
             bsearch      3.621M (± 3.5%) i/s -     18.442M in   5.100033s

Comparison:
             bsearch:  3620738.7 i/s
                find:        8.3 i/s - 436861.77x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.126  (± 0.0%) i/s -      1.000  in   7.927579s
        Array#insert      0.955  (± 0.0%) i/s -      5.000  in   5.234895s

Comparison:
        Array#insert:        1.0 i/s
       Array#unshift:        0.1 i/s - 7.57x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   238.609M i/100ms
          Array#size   238.565M i/100ms
         Array#count   239.109M i/100ms
Calculating -------------------------------------
        Array#length      2.387B (± 0.3%) i/s -     12.169B in   5.097431s
          Array#size      2.389B (± 0.3%) i/s -     12.167B in   5.093007s
         Array#count      2.387B (± 0.4%) i/s -     11.955B in   5.008350s

Comparison:
          Array#size: 2388940294.7 i/s
        Array#length: 2387315767.5 i/s - same-ish: difference falls within error
         Array#count: 2387145277.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    20.936k i/100ms
        Array#sample     2.389M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    226.151k (± 7.7%) i/s -      1.131M in   5.058749s
        Array#sample     24.773M (± 0.1%) i/s -    124.205M in   5.013670s

Comparison:
        Array#sample: 24773291.1 i/s
 Array#shuffle.first:   226151.4 i/s - 109.54x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   772.000  i/100ms
          Date.parse   162.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     15.772k (±33.9%) i/s -     60.988k in   5.032508s
          Date.parse      7.631k (±31.4%) i/s -     30.618k in   5.011666s

Comparison:
        Date.iso8601:    15771.9 i/s
          Date.parse:     7631.2 i/s - 2.07x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   106.461k i/100ms
           Array#map   512.741k i/100ms
Calculating -------------------------------------
   Array#each + push      1.103M (± 3.3%) i/s -      5.536M in   5.026155s
           Array#map      5.324M (± 6.0%) i/s -     26.663M in   5.026919s

Comparison:
           Array#map:  5324074.8 i/s
   Array#each + push:  1102715.1 i/s - 4.83x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     9.846M i/100ms
               #each    72.778M i/100ms
Calculating -------------------------------------
            For loop     99.476M (± 0.4%) i/s -    502.125M in   5.047778s
               #each    717.593M (± 2.0%) i/s -      3.639B in   5.072953s

Comparison:
               #each: 717592575.0 i/s
            For loop: 99475862.0 i/s - 7.21x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   897.963k i/100ms
     each_with_index     1.284M i/100ms
Calculating -------------------------------------
          While Loop      9.049M (± 0.2%) i/s -     45.796M in   5.060900s
     each_with_index     12.799M (± 0.1%) i/s -     64.175M in   5.014162s

Comparison:
     each_with_index: 12798814.4 i/s
          While Loop:  9049061.8 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   146.175k i/100ms
      inject to_proc   147.466k i/100ms
        inject block   147.444k i/100ms
Calculating -------------------------------------
       inject symbol      1.473M (± 0.4%) i/s -      7.455M in   5.062702s
      inject to_proc      1.474M (± 0.1%) i/s -      7.373M in   5.001180s
        inject block      1.474M (± 0.2%) i/s -      7.372M in   5.001354s

Comparison:
      inject to_proc:  1474314.0 i/s
        inject block:  1474045.7 i/s - same-ish: difference falls within error
       inject symbol:  1472540.1 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    10.138k i/100ms
   Array#map.flatten    10.399k i/100ms
      Array#flat_map    28.135k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    106.637k (± 3.5%) i/s -    537.314k in   5.045398s
   Array#map.flatten    105.236k (± 3.4%) i/s -    530.349k in   5.045885s
      Array#flat_map    280.495k (± 2.9%) i/s -      1.407M in   5.019710s

Comparison:
      Array#flat_map:   280495.4 i/s
Array#map.flatten(1):   106636.5 i/s - 2.63x  (± 0.00) slower
   Array#map.flatten:   105235.8 i/s - 2.67x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   154.620k i/100ms
  Array#reverse_each     1.950M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.667M (± 3.4%) i/s -      8.349M in   5.015971s
  Array#reverse_each     19.462M (± 0.1%) i/s -     97.503M in   5.009955s

Comparison:
  Array#reverse_each: 19461813.5 i/s
  Array#reverse.each:  1666614.7 i/s - 11.68x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       545.419k i/100ms
   Enumerable#detect     3.808M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          6.108M (± 5.8%) i/s -    121.628M in  20.003692s
   Enumerable#detect     38.073M (± 0.5%) i/s -    761.515M in  20.002008s

Comparison:
   Enumerable#detect: 38072892.5 i/s
Enumerable#select.first:  6107819.1 i/s - 6.23x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       151.270k i/100ms
Enumerable#select.last
                       355.291k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.651M (± 3.7%) i/s -      8.320M in   5.045706s
Enumerable#select.last
                          3.544M (± 3.6%) i/s -     17.765M in   5.018715s

Comparison:
Enumerable#select.last:  3544393.1 i/s
Enumerable#reverse.detect:  1651272.1 i/s - 2.15x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.063k i/100ms
  Enumerable#sort_by     2.372k i/100ms
     Enumerable#sort     3.135k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         22.051k (±18.5%) i/s -    101.087k in   5.007488s
  Enumerable#sort_by     22.584k (±18.2%) i/s -    104.368k in   5.065918s
     Enumerable#sort     31.254k (± 1.8%) i/s -    156.750k in   5.017064s

Comparison:
     Enumerable#sort:    31254.1 i/s
  Enumerable#sort_by:    22583.9 i/s - 1.38x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    22051.1 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   239.052k i/100ms
Enumerable#sort_by...first
                         4.465k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      2.409M (± 0.3%) i/s -     12.192M in   5.061626s
Enumerable#sort_by...first
                         55.063k (± 3.4%) i/s -    276.830k in   5.033381s

Comparison:
   Enumerable#min_by:  2408658.8 i/s
Enumerable#sort_by...first:    55062.9 i/s - 43.74x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   188.702k i/100ms
            Hash#dup   197.832k i/100ms
Calculating -------------------------------------
              Hash[]      2.025M (± 4.6%) i/s -     10.190M in   5.043057s
            Hash#dup      1.992M (± 3.6%) i/s -     10.089M in   5.071726s

Comparison:
              Hash[]:  2024989.8 i/s
            Hash#dup:  1992072.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   238.996M i/100ms
  Hash#fetch, symbol   238.456M i/100ms
     Hash#[], string     4.232M i/100ms
  Hash#fetch, string     4.470M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      2.387B (± 0.4%) i/s -     11.950B in   5.007147s
  Hash#fetch, symbol      2.389B (± 0.4%) i/s -     12.161B in   5.090795s
     Hash#[], string     42.365M (± 0.4%) i/s -    215.820M in   5.094409s
  Hash#fetch, string     44.724M (± 0.6%) i/s -    227.985M in   5.097812s

Comparison:
  Hash#fetch, symbol: 2388898597.0 i/s
     Hash#[], symbol: 2386594528.5 i/s - same-ish: difference falls within error
  Hash#fetch, string: 44723576.7 i/s - 53.41x  (± 0.00) slower
     Hash#[], string: 42364628.3 i/s - 56.39x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    49.778M i/100ms
             Hash#[]    49.802M i/100ms
          Hash#[] ||    49.813M i/100ms
          Hash#[] &&    49.810M i/100ms
          Hash#fetch    49.817M i/100ms
 Hash#fetch fallback    49.817M i/100ms
Calculating -------------------------------------
            Hash#dig    497.233M (± 0.5%) i/s -      2.489B in   5.005576s
             Hash#[]    497.790M (± 0.2%) i/s -      2.490B in   5.002339s
          Hash#[] ||    497.345M (± 0.4%) i/s -      2.491B in   5.007932s
          Hash#[] &&    497.901M (± 0.1%) i/s -      2.491B in   5.002024s
          Hash#fetch    497.897M (± 0.2%) i/s -      2.491B in   5.002765s
 Hash#fetch fallback    497.983M (± 0.1%) i/s -      2.491B in   5.001907s

Comparison:
 Hash#fetch fallback: 497982522.2 i/s
          Hash#[] &&: 497901091.5 i/s - same-ish: difference falls within error
          Hash#fetch: 497896679.3 i/s - same-ish: difference falls within error
             Hash#[]: 497789824.2 i/s - same-ish: difference falls within error
          Hash#[] ||: 497344993.9 i/s - same-ish: difference falls within error
            Hash#dig: 497232944.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   238.300M i/100ms
  Hash#fetch + block   238.393M i/100ms
    Hash#fetch + arg   239.118M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      2.387B (± 0.4%) i/s -     12.153B in   5.092056s
  Hash#fetch + block      2.389B (± 0.2%) i/s -     12.158B in   5.088495s
    Hash#fetch + arg      2.388B (± 0.4%) i/s -     11.956B in   5.006324s

Comparison:
  Hash#fetch + block: 2389331012.9 i/s
    Hash#fetch + arg: 2388193466.0 i/s - same-ish: difference falls within error
  Hash#fetch + const: 2386749773.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    17.571k i/100ms
         sort + to_h    11.606k i/100ms
Calculating -------------------------------------
      sort_by + to_h    205.036k (± 8.7%) i/s -      1.019M in   5.010131s
         sort + to_h     65.806k (± 2.5%) i/s -    336.574k in   5.118042s

Comparison:
      sort_by + to_h:   205035.7 i/s
         sort + to_h:    65805.6 i/s - 3.12x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   104.869k i/100ms
       Hash#each_key   119.513k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.108M (± 4.1%) i/s -      5.558M in   5.026555s
       Hash#each_key      1.207M (± 3.8%) i/s -      6.095M in   5.056234s

Comparison:
       Hash#each_key:  1207357.5 i/s
      Hash#keys.each:  1107709.3 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   176.000  i/100ms
           Hash#key?     2.853M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.960k (±15.3%) i/s -      9.328k in   4.998535s
           Hash#key?     28.522M (± 0.1%) i/s -    142.637M in   5.000906s

Comparison:
           Hash#key?: 28522283.1 i/s
  Hash#keys.include?:     1959.8 i/s - 14553.53x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    22.717k i/100ms
            Hash#[]=    23.705k i/100ms
Calculating -------------------------------------
         Hash#merge!    220.966k (± 3.5%) i/s -      1.113M in   5.044071s
            Hash#[]=    240.060k (± 3.4%) i/s -      1.209M in   5.042350s

Comparison:
            Hash#[]=:   240060.1 i/s
         Hash#merge!:   220966.0 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        10.462k i/100ms
      Hash#merge({})     7.292k i/100ms
 Hash#dup#merge!({})    12.113k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        114.893k (± 4.2%) i/s -    575.410k in   5.018135s
      Hash#merge({})     74.355k (± 4.4%) i/s -    371.892k in   5.012043s
 Hash#dup#merge!({})    122.880k (± 3.9%) i/s -    617.763k in   5.035811s

Comparison:
 Hash#dup#merge!({}):   122880.1 i/s
{}#merge!(Hash) do end:   114892.6 i/s - same-ish: difference falls within error
      Hash#merge({}):    74355.5 i/s - 1.65x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   238.454M i/100ms
          Hash#merge   239.075M i/100ms
Calculating -------------------------------------
        Hash#**other      2.386B (± 0.3%) i/s -     12.161B in   5.096489s
          Hash#merge      2.387B (± 0.4%) i/s -     11.954B in   5.008673s

Comparison:
          Hash#merge: 2386639576.4 i/s
        Hash#**other: 2386204555.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   267.000  i/100ms
         Hash#merge!    22.469k i/100ms
Calculating -------------------------------------
          Hash#merge      3.057k (± 4.1%) i/s -     15.486k in   5.074022s
         Hash#merge!    229.872k (± 3.4%) i/s -      1.168M in   5.089085s

Comparison:
         Hash#merge!:   229871.5 i/s
          Hash#merge:     3057.3 i/s - 75.19x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.010M i/100ms
Array#each             862.071k i/100ms
Array#each_w/_object   871.899k i/100ms
Hash#select-include    996.165k i/100ms
Calculating -------------------------------------
Hash#native-slice        11.316M (± 3.9%) i/s -     56.542M in   5.004740s
Array#each                8.771M (± 2.6%) i/s -     43.966M in   5.016629s
Array#each_w/_object      8.777M (± 2.6%) i/s -     44.467M in   5.070211s
Hash#select-include      10.026M (± 2.5%) i/s -     50.804M in   5.070551s

Comparison:
Hash#native-slice   : 11316450.7 i/s
Hash#select-include : 10026068.9 i/s - 1.13x  (± 0.00) slower
Array#each_w/_object:  8776615.9 i/s - 1.29x  (± 0.00) slower
Array#each          :  8770552.5 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   169.000  i/100ms
         Hash#value?   659.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      2.047k (±13.6%) i/s -      9.971k in   5.032012s
         Hash#value?      6.651k (± 0.2%) i/s -     33.609k in   5.052998s

Comparison:
         Hash#value?:     6651.3 i/s
Hash#values.include?:     2046.6 i/s - 3.25x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   238.644M i/100ms
                send   238.780M i/100ms
      method_missing   239.092M i/100ms
Calculating -------------------------------------
                call      2.388B (± 0.3%) i/s -     12.171B in   5.097171s
                send      2.387B (± 0.5%) i/s -     11.939B in   5.001844s
      method_missing      2.389B (± 0.3%) i/s -     11.955B in   5.004596s

Comparison:
      method_missing: 2388742117.6 i/s
                call: 2387786194.4 i/s - same-ish: difference falls within error
                send: 2386986619.8 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    16.954k i/100ms
      Symbol#to_proc    17.798k i/100ms
Calculating -------------------------------------
               Block    178.996k (± 3.5%) i/s -    898.562k in   5.026460s
      Symbol#to_proc    179.710k (± 3.2%) i/s -    907.698k in   5.056356s

Comparison:
      Symbol#to_proc:   179710.2 i/s
               Block:   178995.8 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   238.455M i/100ms
       block + yield   238.743M i/100ms
        unused block   239.117M i/100ms
               yield   239.097M i/100ms
Calculating -------------------------------------
          block.call      2.388B (± 0.3%) i/s -     12.161B in   5.092812s
       block + yield      2.388B (± 0.5%) i/s -     12.176B in   5.098605s
        unused block      2.389B (± 0.3%) i/s -     11.956B in   5.005335s
               yield      2.390B (± 0.1%) i/s -     11.955B in   5.002467s

Comparison:
               yield: 2389791147.8 i/s
        unused block: 2388647198.0 i/s - same-ish: difference falls within error
       block + yield: 2388135706.8 i/s - same-ish: difference falls within error
          block.call: 2387935346.2 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    22.511k i/100ms
      range#include?   300.000  i/100ms
       range#member?   304.000  i/100ms
       plain compare    17.182k i/100ms
Calculating -------------------------------------
        range#cover?    107.126k (±25.9%) i/s -    517.753k in   5.202782s
      range#include?      4.413k (±27.4%) i/s -     19.500k in   5.045952s
       range#member?      4.402k (±37.2%) i/s -     15.504k in   5.017519s
       plain compare    169.601k (±20.5%) i/s -    635.734k in   5.016624s

Comparison:
       plain compare:   169600.6 i/s
        range#cover?:   107126.3 i/s - same-ish: difference falls within error
      range#include?:     4412.9 i/s - 38.43x  (± 0.00) slower
       range#member?:     4401.7 i/s - 38.53x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     3.645M i/100ms
           String#=~     6.100M i/100ms
          Regexp#===     6.099M i/100ms
        String#match     2.473M i/100ms
Calculating -------------------------------------
       String#match?     39.799M (± 3.7%) i/s -    200.473M in   5.044533s
           String#=~     60.942M (± 0.3%) i/s -    304.983M in   5.004511s
          Regexp#===     60.990M (± 0.1%) i/s -    304.949M in   4.999974s
        String#match     24.503M (± 2.5%) i/s -    123.648M in   5.049672s

Comparison:
          Regexp#===: 60990098.2 i/s
           String#=~: 60942191.6 i/s - same-ish: difference falls within error
       String#match?: 39798807.4 i/s - 1.53x  (± 0.00) slower
        String#match: 24503054.2 i/s - 2.49x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.162M i/100ms
      String#casecmp     3.328M i/100ms
Calculating -------------------------------------
String#downcase + ==     12.974M (± 4.7%) i/s -     65.083M in   5.028151s
      String#casecmp     33.223M (± 0.2%) i/s -    166.391M in   5.008348s

Comparison:
      String#casecmp: 33222861.5 i/s
String#downcase + ==: 12973607.7 i/s - 2.56x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+   238.782M i/100ms
       String#concat   239.076M i/100ms
       String#append   239.018M i/100ms
         "foo" "bar"   239.085M i/100ms
  "#{'foo'}#{'bar'}"   239.093M i/100ms
Calculating -------------------------------------
            String#+      2.388B (± 0.3%) i/s -     11.939B in   4.999192s
       String#concat      2.389B (± 0.2%) i/s -     11.954B in   5.002766s
       String#append      2.388B (± 0.3%) i/s -     11.951B in   5.004201s
         "foo" "bar"      2.390B (± 0.2%) i/s -     11.954B in   5.001222s
  "#{'foo'}#{'bar'}"      2.390B (± 0.2%) i/s -     11.955B in   5.001909s

Comparison:
         "foo" "bar": 2390271351.8 i/s
  "#{'foo'}#{'bar'}": 2390024303.8 i/s - same-ish: difference falls within error
       String#concat: 2389445870.2 i/s - same-ish: difference falls within error
            String#+: 2388225478.0 i/s - same-ish: difference falls within error
       String#append: 2388200954.8 i/s - same-ish: difference falls within error

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   238.638M i/100ms
          String#dup   239.041M i/100ms
Calculating -------------------------------------
           String#+@      2.387B (± 0.3%) i/s -     11.932B in   4.999800s
          String#dup      2.388B (± 0.4%) i/s -     11.952B in   5.005342s

Comparison:
          String#dup: 2387889876.6 i/s
           String#+@: 2386500758.9 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.479M i/100ms
       String#match?     1.453M i/100ms
    String#end_with?     1.511M i/100ms
Calculating -------------------------------------
           String#=~     14.941M (± 2.8%) i/s -     75.404M in   5.051158s
       String#match?     14.452M (± 2.5%) i/s -     72.626M in   5.028579s
    String#end_with?     15.148M (± 3.6%) i/s -     77.059M in   5.093674s

Comparison:
    String#end_with?: 15148217.6 i/s
           String#=~: 14940885.2 i/s - same-ish: difference falls within error
       String#match?: 14452089.4 i/s - same-ish: difference falls within error

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    45.464k i/100ms
          String#sub   352.918k i/100ms
String#dup["string"]=
                        19.927M i/100ms
Calculating -------------------------------------
         String#gsub    545.815k (± 3.1%) i/s -      2.728M in   5.003618s
          String#sub      4.168M (± 6.7%) i/s -     20.822M in   5.019878s
String#dup["string"]=
                        199.162M (± 0.2%) i/s -    996.357M in   5.002770s

Comparison:
String#dup["string"]=: 199161725.8 i/s
          String#sub:  4168327.7 i/s - 47.78x  (± 0.00) slower
         String#gsub:   545814.9 i/s - 364.89x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    51.814k i/100ms
           String#tr   113.456k i/100ms
Calculating -------------------------------------
         String#gsub      1.671M (± 6.5%) i/s -      8.342M in   5.019569s
           String#tr      1.219M (± 4.9%) i/s -      6.127M in   5.039571s

Comparison:
         String#gsub:  1670659.1 i/s
           String#tr:  1218737.7 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   238.967M i/100ms
         With Freeze   238.439M i/100ms
Calculating -------------------------------------
      Without Freeze      2.385B (± 0.5%) i/s -     11.948B in   5.009456s
         With Freeze      2.390B (± 0.2%) i/s -     12.160B in   5.088934s

Comparison:
         With Freeze: 2389584574.3 i/s
      Without Freeze: 2385217335.9 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     4.660k i/100ms
      String#squeeze    57.892k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     59.861k (± 4.5%) i/s -    302.900k in   5.071140s
      String#squeeze    577.080k (± 2.5%) i/s -      2.895M in   5.019495s

Comparison:
      String#squeeze:   577079.5 i/s
 String#gsub/regex+/:    59861.3 i/s - 9.64x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     2.690M i/100ms
       String#match?     3.038M i/100ms
  String#start_with?     1.594M i/100ms
Calculating -------------------------------------
           String#=~     27.189M (± 2.5%) i/s -    137.169M in   5.048536s
       String#match?     29.974M (± 3.5%) i/s -    151.915M in   5.074640s
  String#start_with?     16.059M (± 3.2%) i/s -     81.270M in   5.066044s

Comparison:
       String#match?: 29973509.2 i/s
           String#=~: 27188559.1 i/s - 1.10x  (± 0.00) slower
  String#start_with?: 16059278.9 i/s - 1.87x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   281.363k i/100ms
    String#[0, n] ==   154.927k i/100ms
   String#[RANGE] ==   166.567k i/100ms
   String#[0...n] ==   128.442k i/100ms
Calculating -------------------------------------
  String#start_with?      3.208M (± 3.9%) i/s -     16.038M in   5.007976s
    String#[0, n] ==      1.584M (± 3.9%) i/s -      8.056M in   5.095300s
   String#[RANGE] ==      1.739M (± 4.5%) i/s -      8.828M in   5.087357s
   String#[0...n] ==      1.297M (± 4.6%) i/s -      6.551M in   5.063040s

Comparison:
  String#start_with?:  3208051.3 i/s
   String#[RANGE] ==:  1739068.6 i/s - 1.84x  (± 0.00) slower
    String#[0, n] ==:  1583800.0 i/s - 2.03x  (± 0.00) slower
   String#[0...n] ==:  1296872.3 i/s - 2.47x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    21.175M i/100ms
 String#sub!'string'   453.229k i/100ms
String#gsub!'string'    54.277k i/100ms
  String#[/regexp/]=     2.143M i/100ms
 String#sub!/regexp/     1.813M i/100ms
String#gsub!/regexp/   439.136k i/100ms
Calculating -------------------------------------
  String#['string']=    213.319M (± 0.2%) i/s -      1.080B in   5.062407s
 String#sub!'string'      4.812M (±13.7%) i/s -     22.661M in   5.004440s
String#gsub!'string'    544.539k (± 2.4%) i/s -      2.768M in   5.086755s
  String#[/regexp/]=     21.606M (± 3.3%) i/s -    109.272M in   5.063400s
 String#sub!/regexp/     17.966M (± 2.9%) i/s -     90.659M in   5.050653s
String#gsub!/regexp/      4.428M (± 5.0%) i/s -     22.396M in   5.071154s

Comparison:
  String#['string']=: 213318800.9 i/s
  String#[/regexp/]=: 21605720.9 i/s - 9.87x  (± 0.00) slower
 String#sub!/regexp/: 17965550.7 i/s - 11.87x  (± 0.00) slower
 String#sub!'string':  4811561.0 i/s - 44.33x  (± 0.00) slower
String#gsub!/regexp/:  4428377.8 i/s - 48.17x  (± 0.00) slower
String#gsub!'string':   544538.6 i/s - 391.74x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.869M i/100ms
        String#chomp     2.453M i/100ms
String#delete_suffix     5.434M i/100ms
Calculating -------------------------------------
          String#sub     18.764M (± 3.4%) i/s -     95.295M in   5.084866s
        String#chomp     25.339M (± 3.0%) i/s -    127.567M in   5.039246s
String#delete_suffix     52.175M (± 2.3%) i/s -    260.811M in   5.001290s

Comparison:
String#delete_suffix: 52175292.1 i/s
        String#chomp: 25339206.6 i/s - 2.06x  (± 0.00) slower
          String#sub: 18764146.6 i/s - 2.78x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix     1.713M i/100ms
          String#sub     7.865M i/100ms
Calculating -------------------------------------
String#delete_prefix     17.839M (± 4.0%) i/s -     89.082M in   5.002303s
          String#sub     78.576M (± 0.3%) i/s -    393.246M in   5.004707s

Comparison:
          String#sub: 78575959.5 i/s
String#delete_prefix: 17838667.3 i/s - 4.40x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.292M i/100ms
    String#unpack[0]     1.337M i/100ms
Calculating -------------------------------------
      String#unpack1     13.584M (± 3.7%) i/s -     68.480M in   5.048266s
    String#unpack[0]     13.448M (± 3.3%) i/s -     68.171M in   5.075273s

Comparison:
      String#unpack1: 13584485.4 i/s
    String#unpack[0]: 13447646.1 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    16.395k i/100ms
          Time.parse   193.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    145.421k (±21.0%) i/s -    688.590k in   5.040075s
          Time.parse      6.361k (±29.2%) i/s -     26.248k in   5.009195s

Comparison:
        Time.iso8601:   145421.3 i/s
          Time.parse:     6361.1 i/s - 22.86x  (± 0.00) slower

