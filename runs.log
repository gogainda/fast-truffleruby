$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       194.079M i/100ms
Function with splat arguments
                       589.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.988B (± 0.3%) i/s -     10.092B in   5.076833s
Function with splat arguments
                          6.056k (± 5.7%) i/s -     30.628k in   5.074346s

Comparison:
Function with single Array argument: 1987894504.0 i/s
Function with splat arguments:     6056.4 i/s - 328227.73x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   198.893M i/100ms
Sequential Assignment
                       199.293M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.977B (± 1.6%) i/s -      9.945B in   5.032176s
Sequential Assignment
                          1.990B (± 0.2%) i/s -      9.965B in   5.007607s

Comparison:
Sequential Assignment: 1989912484.4 i/s
 Parallel Assignment: 1976756395.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   198.429M i/100ms
       attr_accessor   199.093M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.988B (± 0.3%) i/s -     10.120B in   5.091406s
       attr_accessor      1.990B (± 0.3%) i/s -      9.955B in   5.003039s

Comparison:
       attr_accessor: 1989737001.0 i/s
   getter_and_setter: 1987658378.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     6.555k i/100ms
         respond_to?   199.127M i/100ms
Calculating -------------------------------------
      begin...rescue     43.938k (± 3.0%) i/s -    222.870k in   5.076920s
         respond_to?      1.989B (± 0.2%) i/s -      9.956B in   5.005052s

Comparison:
         respond_to?: 1989270967.7 i/s
      begin...rescue:    43938.1 i/s - 45274.43x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   198.624M i/100ms
             &method   198.589M i/100ms
Calculating -------------------------------------
              normal      1.988B (± 0.3%) i/s -     10.130B in   5.095565s
             &method      1.990B (± 0.2%) i/s -     10.128B in   5.089709s

Comparison:
             &method: 1989916810.3 i/s
              normal: 1987994821.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        72.000  i/100ms
       define_method   132.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.325k (±54.7%) i/s -      3.312k in   5.687000s
       define_method      2.866k (±57.4%) i/s -      5.940k in   6.100208s

Comparison:
       define_method:     2865.9 i/s
module_eval with string:     1324.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    26.616k i/100ms
       Kernel#format    35.825k i/100ms
            String#%    36.528k i/100ms
Calculating -------------------------------------
         Float#round    308.210k (± 3.1%) i/s -      1.544M in   5.013905s
       Kernel#format    353.264k (± 1.9%) i/s -      1.791M in   5.072536s
            String#%    366.628k (± 2.0%) i/s -      1.863M in   5.083511s

Comparison:
            String#%:   366627.6 i/s
       Kernel#format:   353264.0 i/s - same-ish: difference falls within error
         Float#round:   308210.3 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   198.767M i/100ms
          OpenStruct   198.628M i/100ms
Calculating -------------------------------------
                Hash      1.987B (± 0.4%) i/s -      9.938B in   5.002225s
          OpenStruct      1.989B (± 0.3%) i/s -     10.130B in   5.093043s

Comparison:
          OpenStruct: 1989013529.4 i/s
                Hash: 1986809852.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   191.463M i/100ms
          OpenStruct     2.123k i/100ms
Calculating -------------------------------------
                Hash      1.875B (± 3.5%) i/s -      9.382B in   5.010929s
          OpenStruct     26.319k (±13.3%) i/s -    129.503k in   5.056626s

Comparison:
                Hash: 1874663052.2 i/s
          OpenStruct:    26319.5 i/s - 71227.28x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   671.340k i/100ms
  ancestors.include?   109.868k i/100ms
Calculating -------------------------------------
  less than or equal      7.183M (± 4.0%) i/s -     36.252M in   5.055428s
  ancestors.include?      1.106M (± 4.8%) i/s -      5.603M in   5.080230s

Comparison:
  less than or equal:  7182942.9 i/s
  ancestors.include?:  1105572.5 i/s - 6.50x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     19.878  (± 0.0%) i/s -    100.000  in   5.030747s
         Kernel loop      4.518  (± 0.0%) i/s -     23.000  in   5.096576s

Comparison:
          While Loop:       19.9 i/s
         Kernel loop:        4.5 i/s - 4.40x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   198.656M i/100ms
         Array#first   198.545M i/100ms
Calculating -------------------------------------
           Array#[0]      1.987B (± 0.3%) i/s -     10.131B in   5.098091s
         Array#first      1.989B (± 0.3%) i/s -     10.126B in   5.091701s

Comparison:
         Array#first: 1988699438.9 i/s
           Array#[0]: 1987320492.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   198.775M i/100ms
          Array#last   198.942M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.987B (± 0.4%) i/s -      9.939B in   5.002599s
          Array#last      1.989B (± 0.2%) i/s -      9.947B in   5.000486s

Comparison:
          Array#last: 1989238378.6 i/s
          Array#[-1]: 1986744933.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   389.901k i/100ms
Calculating -------------------------------------
                find      0.092  (± 0.0%) i/s -      1.000  in  10.826619s
             bsearch      3.955M (± 3.4%) i/s -     19.885M in   5.034752s

Comparison:
             bsearch:  3954559.3 i/s
                find:        0.1 i/s - 42814506.14x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.103  (± 0.0%) i/s -      1.000  in   9.738946s
        Array#insert      0.785  (± 0.0%) i/s -      4.000  in   5.096778s

Comparison:
        Array#insert:        0.8 i/s
       Array#unshift:        0.1 i/s - 7.64x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   198.908M i/100ms
          Array#size   198.608M i/100ms
         Array#count   199.076M i/100ms
Calculating -------------------------------------
        Array#length      1.986B (± 0.7%) i/s -      9.945B in   5.008314s
          Array#size      1.990B (± 0.1%) i/s -     10.129B in   5.090347s
         Array#count      1.990B (± 0.1%) i/s -      9.954B in   5.001256s

Comparison:
         Array#count: 1990265205.4 i/s
          Array#size: 1989854414.4 i/s - same-ish: difference falls within error
        Array#length: 1985866713.4 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    17.481k i/100ms
        Array#sample     2.009M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    188.156k (± 2.1%) i/s -    943.974k in   5.019449s
        Array#sample     20.213M (± 0.2%) i/s -    102.436M in   5.067894s

Comparison:
        Array#sample: 20212749.7 i/s
 Array#shuffle.first:   188156.3 i/s - 107.43x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   256.000  i/100ms
          Date.parse    92.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     11.828k (±32.7%) i/s -     42.752k in   4.999848s
          Date.parse      3.777k (±32.0%) i/s -     15.916k in   5.194275s

Comparison:
        Date.iso8601:    11827.8 i/s
          Date.parse:     3776.5 i/s - 3.13x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    91.090k i/100ms
           Array#map   490.907k i/100ms
Calculating -------------------------------------
   Array#each + push      1.264M (± 4.9%) i/s -      6.376M in   5.057123s
           Array#map      5.108M (± 5.9%) i/s -     25.527M in   5.015055s

Comparison:
           Array#map:  5108407.5 i/s
   Array#each + push:  1264069.3 i/s - 4.04x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     4.008M i/100ms
               #each    10.514M i/100ms
Calculating -------------------------------------
            For loop     45.211M (± 6.1%) i/s -    228.473M in   5.073414s
               #each    105.126M (± 0.1%) i/s -    525.702M in   5.000693s

Comparison:
               #each: 105125818.8 i/s
            For loop: 45211305.1 i/s - 2.33x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   582.235k i/100ms
     each_with_index     1.069M i/100ms
Calculating -------------------------------------
          While Loop      5.827M (± 0.0%) i/s -     29.694M in   5.095902s
     each_with_index     10.657M (± 0.1%) i/s -     53.429M in   5.013576s

Comparison:
     each_with_index: 10656919.4 i/s
          While Loop:  5827033.4 i/s - 1.83x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   122.696k i/100ms
      inject to_proc   122.855k i/100ms
        inject block   122.831k i/100ms
Calculating -------------------------------------
       inject symbol      1.228M (± 0.1%) i/s -      6.257M in   5.095463s
      inject to_proc      1.228M (± 0.0%) i/s -      6.143M in   5.000809s
        inject block      1.228M (± 0.0%) i/s -      6.142M in   5.000011s

Comparison:
      inject to_proc:  1228351.3 i/s
        inject block:  1228307.4 i/s - same-ish: difference falls within error
       inject symbol:  1228053.1 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     8.315k i/100ms
   Array#map.flatten     9.922k i/100ms
      Array#flat_map    26.297k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     99.808k (± 4.4%) i/s -    498.900k in   5.009125s
   Array#map.flatten    100.334k (± 4.0%) i/s -    506.022k in   5.052268s
      Array#flat_map    263.637k (± 3.0%) i/s -      1.341M in   5.092037s

Comparison:
      Array#flat_map:   263637.4 i/s
   Array#map.flatten:   100334.3 i/s - 2.63x  (± 0.00) slower
Array#map.flatten(1):    99808.4 i/s - 2.64x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   131.826k i/100ms
  Array#reverse_each     1.032M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.331M (± 3.0%) i/s -      6.723M in   5.054788s
  Array#reverse_each     10.397M (± 2.5%) i/s -     52.623M in   5.064700s

Comparison:
  Array#reverse_each: 10397304.1 i/s
  Array#reverse.each:  1331301.7 i/s - 7.81x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       559.157k i/100ms
   Enumerable#detect     3.203M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          5.845M (± 6.3%) i/s -    116.305M in  20.015305s
   Enumerable#detect     32.051M (± 0.4%) i/s -    643.862M in  20.088824s

Comparison:
   Enumerable#detect: 32051154.8 i/s
Enumerable#select.first:  5844751.3 i/s - 5.48x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       131.519k i/100ms
Enumerable#select.last
                       272.104k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.347M (± 2.9%) i/s -      6.839M in   5.083521s
Enumerable#select.last
                          2.778M (± 3.6%) i/s -     13.877M in   5.002199s

Comparison:
Enumerable#select.last:  2778080.0 i/s
Enumerable#reverse.detect:  1346548.2 i/s - 2.06x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.029k i/100ms
  Enumerable#sort_by     2.176k i/100ms
     Enumerable#sort     2.291k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         19.278k (±20.5%) i/s -     85.218k in   5.098649s
  Enumerable#sort_by     19.963k (±18.5%) i/s -     89.216k in   5.076153s
     Enumerable#sort     27.670k (± 1.9%) i/s -    139.751k in   5.052902s

Comparison:
     Enumerable#sort:    27669.9 i/s
  Enumerable#sort_by:    19963.5 i/s - 1.39x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    19278.3 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   337.046k i/100ms
Enumerable#sort_by...first
                         4.058k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      3.368M (± 0.2%) i/s -     16.852M in   5.003807s
Enumerable#sort_by...first
                         46.670k (± 3.3%) i/s -    235.364k in   5.048947s

Comparison:
   Enumerable#min_by:  3367916.3 i/s
Enumerable#sort_by...first:    46669.9 i/s - 72.16x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   187.796k i/100ms
            Hash#dup   194.027k i/100ms
Calculating -------------------------------------
              Hash[]      1.989M (± 5.3%) i/s -      9.953M in   5.017881s
            Hash#dup      1.968M (± 5.1%) i/s -      9.895M in   5.042856s

Comparison:
              Hash[]:  1989432.5 i/s
            Hash#dup:  1967577.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   198.855M i/100ms
  Hash#fetch, symbol   198.815M i/100ms
     Hash#[], string     4.073M i/100ms
  Hash#fetch, string     3.860M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.988B (± 0.3%) i/s -      9.943B in   5.000403s
  Hash#fetch, symbol      1.989B (± 0.2%) i/s -     10.140B in   5.097477s
     Hash#[], string     40.744M (± 0.8%) i/s -    207.734M in   5.098840s
  Hash#fetch, string     38.778M (± 0.6%) i/s -    196.860M in   5.076754s

Comparison:
  Hash#fetch, symbol: 1989144831.2 i/s
     Hash#[], symbol: 1988406308.5 i/s - same-ish: difference falls within error
     Hash#[], string: 40743773.9 i/s - 48.82x  (± 0.00) slower
  Hash#fetch, string: 38777973.1 i/s - 51.30x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    47.272M i/100ms
             Hash#[]    49.721M i/100ms
          Hash#[] ||    49.782M i/100ms
          Hash#[] &&    49.786M i/100ms
          Hash#fetch    49.774M i/100ms
 Hash#fetch fallback    49.763M i/100ms
Calculating -------------------------------------
            Hash#dig    497.274M (± 0.2%) i/s -      2.505B in   5.038341s
             Hash#[]    497.208M (± 0.3%) i/s -      2.486B in   5.000094s
          Hash#[] ||    497.548M (± 0.2%) i/s -      2.489B in   5.002720s
          Hash#[] &&    498.156M (± 0.4%) i/s -      2.539B in   5.097080s
          Hash#fetch    496.470M (± 1.4%) i/s -      2.489B in   5.013849s
 Hash#fetch fallback    497.648M (± 0.2%) i/s -      2.488B in   4.999874s

Comparison:
          Hash#[] &&: 498155845.8 i/s
 Hash#fetch fallback: 497647710.6 i/s - same-ish: difference falls within error
          Hash#[] ||: 497548225.6 i/s - same-ish: difference falls within error
            Hash#dig: 497274248.4 i/s - same-ish: difference falls within error
             Hash#[]: 497207794.2 i/s - same-ish: difference falls within error
          Hash#fetch: 496470365.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   198.895M i/100ms
  Hash#fetch + block   198.542M i/100ms
    Hash#fetch + arg   199.034M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.990B (± 0.4%) i/s -     10.144B in   5.098001s
  Hash#fetch + block      1.989B (± 0.3%) i/s -     10.126B in   5.091030s
    Hash#fetch + arg      1.990B (± 0.3%) i/s -      9.952B in   5.000730s

Comparison:
    Hash#fetch + arg: 1990068326.4 i/s
  Hash#fetch + const: 1989754700.1 i/s - same-ish: difference falls within error
  Hash#fetch + block: 1988933557.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    14.178k i/100ms
         sort + to_h     8.404k i/100ms
Calculating -------------------------------------
      sort_by + to_h    173.121k (±10.2%) i/s -    864.858k in   5.049528s
         sort + to_h    108.459k (± 5.0%) i/s -    546.260k in   5.050447s

Comparison:
      sort_by + to_h:   173120.6 i/s
         sort + to_h:   108458.7 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each    88.617k i/100ms
       Hash#each_key    96.915k i/100ms
Calculating -------------------------------------
      Hash#keys.each    946.853k (± 4.4%) i/s -      4.785M in   5.064487s
       Hash#each_key    994.990k (± 3.9%) i/s -      5.040M in   5.073041s

Comparison:
       Hash#each_key:   994989.7 i/s
      Hash#keys.each:   946852.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   152.000  i/100ms
           Hash#key?     2.556M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.976k (±13.1%) i/s -      9.728k in   5.142293s
           Hash#key?     25.458M (± 0.0%) i/s -    127.795M in   5.019913s

Comparison:
           Hash#key?: 25457555.4 i/s
  Hash#keys.include?:     1976.0 i/s - 12883.53x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    13.779k i/100ms
            Hash#[]=    19.799k i/100ms
Calculating -------------------------------------
         Hash#merge!    198.068k (± 4.8%) i/s -    992.088k in   5.021529s
            Hash#[]=    201.527k (± 3.6%) i/s -      1.010M in   5.017335s

Comparison:
            Hash#[]=:   201526.8 i/s
         Hash#merge!:   198068.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         8.877k i/100ms
      Hash#merge({})     7.316k i/100ms
 Hash#dup#merge!({})    12.160k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         98.864k (± 5.6%) i/s -    497.112k in   5.045954s
      Hash#merge({})     75.509k (± 5.4%) i/s -    380.432k in   5.054808s
 Hash#dup#merge!({})    121.596k (± 5.2%) i/s -    608.000k in   5.015165s

Comparison:
 Hash#dup#merge!({}):   121595.6 i/s
{}#merge!(Hash) do end:    98863.7 i/s - 1.23x  (± 0.00) slower
      Hash#merge({}):    75508.7 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   184.312M i/100ms
          Hash#merge   198.757M i/100ms
Calculating -------------------------------------
        Hash#**other      1.988B (± 0.3%) i/s -      9.953B in   5.006277s
          Hash#merge      1.989B (± 0.2%) i/s -     10.137B in   5.095466s

Comparison:
          Hash#merge: 1989348021.4 i/s
        Hash#**other: 1988093776.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   284.000  i/100ms
         Hash#merge!    19.985k i/100ms
Calculating -------------------------------------
          Hash#merge      3.091k (± 5.2%) i/s -     15.620k in   5.067204s
         Hash#merge!    201.944k (± 3.9%) i/s -      1.019M in   5.055199s

Comparison:
         Hash#merge!:   201944.3 i/s
          Hash#merge:     3091.4 i/s - 65.32x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      971.034k i/100ms
Array#each             824.359k i/100ms
Array#each_w/_object   780.975k i/100ms
Hash#select-include      1.098M i/100ms
Calculating -------------------------------------
Hash#native-slice         9.924M (± 3.9%) i/s -     50.494M in   5.096289s
Array#each                8.345M (± 3.0%) i/s -     42.042M in   5.043056s
Array#each_w/_object      8.151M (± 3.2%) i/s -     41.392M in   5.083487s
Hash#select-include      10.965M (± 3.0%) i/s -     54.885M in   5.010314s

Comparison:
Hash#select-include : 10964936.9 i/s
Hash#native-slice   :  9923994.1 i/s - 1.10x  (± 0.00) slower
Array#each          :  8344900.6 i/s - 1.31x  (± 0.00) slower
Array#each_w/_object:  8151389.1 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   120.000  i/100ms
         Hash#value?   557.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.732k (±12.4%) i/s -      8.520k in   5.039081s
         Hash#value?      5.784k (± 0.3%) i/s -     28.964k in   5.007922s

Comparison:
         Hash#value?:     5783.7 i/s
Hash#values.include?:     1732.1 i/s - 3.34x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   199.135M i/100ms
                send   198.421M i/100ms
      method_missing   199.053M i/100ms
Calculating -------------------------------------
                call      1.987B (± 0.3%) i/s -      9.957B in   5.010838s
                send      1.989B (± 0.3%) i/s -     10.119B in   5.088023s
      method_missing      1.992B (± 0.3%) i/s -     10.152B in   5.097561s

Comparison:
      method_missing: 1991503927.9 i/s
                send: 1988896208.7 i/s - same-ish: difference falls within error
                call: 1987061804.0 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    15.675k i/100ms
      Symbol#to_proc    18.207k i/100ms
Calculating -------------------------------------
               Block    180.685k (± 4.4%) i/s -    909.150k in   5.042343s
      Symbol#to_proc    183.165k (± 4.2%) i/s -    928.557k in   5.078831s

Comparison:
      Symbol#to_proc:   183165.3 i/s
               Block:   180684.7 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   198.560M i/100ms
       block + yield   199.027M i/100ms
        unused block   199.053M i/100ms
               yield   199.041M i/100ms
Calculating -------------------------------------
          block.call      1.990B (± 0.3%) i/s -     10.127B in   5.088561s
       block + yield      1.990B (± 0.3%) i/s -      9.951B in   5.000379s
        unused block      1.988B (± 0.5%) i/s -      9.953B in   5.006866s
               yield      1.996B (± 0.6%) i/s -     10.151B in   5.085822s

Comparison:
               yield: 1996032705.6 i/s
       block + yield: 1990140517.4 i/s - same-ish: difference falls within error
          block.call: 1990088991.1 i/s - same-ish: difference falls within error
        unused block: 1987851708.6 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    31.004k i/100ms
      range#include?   213.000  i/100ms
       range#member?   188.000  i/100ms
       plain compare     9.343k i/100ms
Calculating -------------------------------------
        range#cover?    229.578k (±26.5%) i/s -      1.085M in   5.039164s
      range#include?      4.620k (±38.1%) i/s -     16.401k in   5.002832s
       range#member?      5.493k (±31.7%) i/s -     17.484k in   5.013584s
       plain compare    425.356k (±44.5%) i/s -      1.009M in   5.005498s

Comparison:
       plain compare:   425355.5 i/s
        range#cover?:   229578.0 i/s - same-ish: difference falls within error
       range#member?:     5493.2 i/s - 77.43x  (± 0.00) slower
      range#include?:     4619.6 i/s - 92.08x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     3.488M i/100ms
           String#=~     4.879M i/100ms
          Regexp#===     4.880M i/100ms
        String#match     2.975M i/100ms
Calculating -------------------------------------
       String#match?     35.115M (± 3.8%) i/s -    177.874M in   5.073385s
           String#=~     48.857M (± 0.2%) i/s -    248.844M in   5.093291s
          Regexp#===     48.824M (± 0.2%) i/s -    248.865M in   5.097261s
        String#match     29.853M (± 4.6%) i/s -    151.722M in   5.093992s

Comparison:
           String#=~: 48857444.9 i/s
          Regexp#===: 48823520.3 i/s - same-ish: difference falls within error
       String#match?: 35115141.0 i/s - 1.39x  (± 0.00) slower
        String#match: 29852505.7 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.100M i/100ms
      String#casecmp     2.847M i/100ms
Calculating -------------------------------------
String#downcase + ==     12.519M (± 5.0%) i/s -     62.689M in   5.020630s
      String#casecmp     28.438M (± 0.3%) i/s -    142.362M in   5.006112s

Comparison:
      String#casecmp: 28437971.2 i/s
String#downcase + ==: 12518674.0 i/s - 2.27x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+   193.308M i/100ms
       String#concat   198.938M i/100ms
       String#append   199.365M i/100ms
         "foo" "bar"   199.024M i/100ms
  "#{'foo'}#{'bar'}"   199.037M i/100ms
Calculating -------------------------------------
            String#+      1.989B (± 0.3%) i/s -     10.052B in   5.054705s
       String#concat      1.990B (± 0.1%) i/s -     10.146B in   5.098736s
       String#append      1.989B (± 0.2%) i/s -      9.968B in   5.010882s
         "foo" "bar"      1.991B (± 0.1%) i/s -     10.150B in   5.097834s
  "#{'foo'}#{'bar'}"      1.993B (± 0.3%) i/s -     10.151B in   5.094090s

Comparison:
  "#{'foo'}#{'bar'}": 1992699600.4 i/s
         "foo" "bar": 1991092040.5 i/s - same-ish: difference falls within error
       String#concat: 1989873413.7 i/s - same-ish: difference falls within error
       String#append: 1989330115.4 i/s - same-ish: difference falls within error
            String#+: 1988663021.7 i/s - same-ish: difference falls within error

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   198.741M i/100ms
          String#dup   198.669M i/100ms
Calculating -------------------------------------
           String#+@      1.988B (± 0.3%) i/s -     10.136B in   5.098212s
          String#dup      1.990B (± 0.2%) i/s -     10.132B in   5.091620s

Comparison:
          String#dup: 1989975062.5 i/s
           String#+@: 1988125854.7 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   982.095k i/100ms
       String#match?   959.017k i/100ms
    String#end_with?     9.694M i/100ms
Calculating -------------------------------------
           String#=~      9.860M (± 4.8%) i/s -     50.087M in   5.092626s
       String#match?      9.852M (± 4.4%) i/s -     49.869M in   5.072014s
    String#end_with?    103.610M (± 0.2%) i/s -    523.495M in   5.052553s

Comparison:
    String#end_with?: 103610426.4 i/s
           String#=~:  9859525.9 i/s - 10.51x  (± 0.00) slower
       String#match?:  9851845.7 i/s - 10.52x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    45.982k i/100ms
          String#sub   393.272k i/100ms
String#dup["string"]=
                         9.464M i/100ms
Calculating -------------------------------------
         String#gsub    844.205k (± 4.4%) i/s -      4.230M in   5.023210s
          String#sub      4.150M (± 6.8%) i/s -     20.843M in   5.047258s
String#dup["string"]=
                         94.756M (± 0.3%) i/s -    482.685M in   5.094050s

Comparison:
String#dup["string"]=: 94755615.7 i/s
          String#sub:  4150006.6 i/s - 22.83x  (± 0.00) slower
         String#gsub:   844205.2 i/s - 112.24x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    56.767k i/100ms
           String#tr    99.250k i/100ms
Calculating -------------------------------------
         String#gsub      1.688M (± 8.8%) i/s -      8.402M in   5.024816s
           String#tr      1.009M (± 4.7%) i/s -      5.062M in   5.029194s

Comparison:
         String#gsub:  1688368.0 i/s
           String#tr:  1008806.6 i/s - 1.67x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   198.539M i/100ms
         With Freeze   198.644M i/100ms
Calculating -------------------------------------
      Without Freeze      1.990B (± 0.5%) i/s -     10.125B in   5.089111s
         With Freeze      1.991B (± 0.3%) i/s -     10.131B in   5.087388s

Comparison:
         With Freeze: 1991391313.5 i/s
      Without Freeze: 1989679831.6 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     4.474k i/100ms
      String#squeeze    45.292k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     61.416k (± 5.9%) i/s -    308.706k in   5.044823s
      String#squeeze    484.010k (± 2.9%) i/s -      2.446M in   5.057918s

Comparison:
      String#squeeze:   484010.3 i/s
 String#gsub/regex+/:    61416.3 i/s - 7.88x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.753M i/100ms
       String#match?     2.263M i/100ms
  String#start_with?     1.475M i/100ms
Calculating -------------------------------------
           String#=~     20.031M (± 3.3%) i/s -    101.684M in   5.082305s
       String#match?     23.214M (± 3.8%) i/s -    117.658M in   5.076106s
  String#start_with?     15.502M (± 4.4%) i/s -     78.190M in   5.054390s

Comparison:
       String#match?: 23214047.6 i/s
           String#=~: 20031189.6 i/s - 1.16x  (± 0.00) slower
  String#start_with?: 15501715.5 i/s - 1.50x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   261.696k i/100ms
    String#[0, n] ==   153.593k i/100ms
   String#[RANGE] ==   153.205k i/100ms
   String#[0...n] ==   133.947k i/100ms
Calculating -------------------------------------
  String#start_with?      2.705M (± 3.9%) i/s -     13.608M in   5.040140s
    String#[0, n] ==      1.562M (± 4.6%) i/s -      7.833M in   5.024759s
   String#[RANGE] ==      1.587M (± 4.6%) i/s -      7.967M in   5.032111s
   String#[0...n] ==      1.343M (± 3.7%) i/s -      6.831M in   5.094054s

Comparison:
  String#start_with?:  2704618.7 i/s
   String#[RANGE] ==:  1586749.4 i/s - 1.70x  (± 0.00) slower
    String#[0, n] ==:  1562459.5 i/s - 1.73x  (± 0.00) slower
   String#[0...n] ==:  1342998.3 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    14.469M i/100ms
 String#sub!'string'   385.410k i/100ms
String#gsub!'string'    83.798k i/100ms
  String#[/regexp/]=     3.190M i/100ms
 String#sub!/regexp/     1.303M i/100ms
String#gsub!/regexp/   403.605k i/100ms
Calculating -------------------------------------
  String#['string']=    144.458M (± 0.8%) i/s -    723.468M in   5.008463s
 String#sub!'string'      4.264M (±15.1%) i/s -     19.656M in   5.033356s
String#gsub!'string'    877.676k (± 3.2%) i/s -      4.441M in   5.066469s
  String#[/regexp/]=     31.925M (± 0.2%) i/s -    162.674M in   5.095483s
 String#sub!/regexp/     13.458M (± 5.3%) i/s -     67.781M in   5.052377s
String#gsub!/regexp/      4.001M (± 5.7%) i/s -     20.180M in   5.061826s

Comparison:
  String#['string']=: 144457726.6 i/s
  String#[/regexp/]=: 31925208.9 i/s - 4.52x  (± 0.00) slower
 String#sub!/regexp/: 13458365.4 i/s - 10.73x  (± 0.00) slower
 String#sub!'string':  4263581.6 i/s - 33.88x  (± 0.00) slower
String#gsub!/regexp/:  4000760.7 i/s - 36.11x  (± 0.00) slower
String#gsub!'string':   877676.2 i/s - 164.59x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.361M i/100ms
        String#chomp     2.379M i/100ms
String#delete_suffix     4.470M i/100ms
Calculating -------------------------------------
          String#sub     14.140M (± 5.2%) i/s -     70.773M in   5.019969s
        String#chomp     24.037M (± 3.6%) i/s -    121.307M in   5.053584s
String#delete_suffix     44.754M (± 0.4%) i/s -    227.974M in   5.094002s

Comparison:
String#delete_suffix: 44754044.0 i/s
        String#chomp: 24036957.4 i/s - 1.86x  (± 0.00) slower
          String#sub: 14139563.2 i/s - 3.17x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix     1.717M i/100ms
          String#sub     3.550M i/100ms
Calculating -------------------------------------
String#delete_prefix     17.691M (± 4.8%) i/s -     89.275M in   5.058715s
          String#sub     35.626M (± 6.1%) i/s -    177.486M in   5.000917s

Comparison:
          String#sub: 35625589.3 i/s
String#delete_prefix: 17691298.9 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.107M i/100ms
    String#unpack[0]     1.086M i/100ms
Calculating -------------------------------------
      String#unpack1     11.708M (± 3.7%) i/s -     58.670M in   5.018160s
    String#unpack[0]     11.741M (± 3.5%) i/s -     58.658M in   5.002397s

Comparison:
    String#unpack[0]: 11741315.8 i/s
      String#unpack1: 11708499.2 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.1.0-dev-b61f2763, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    11.107k i/100ms
          Time.parse   136.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    114.963k (±20.1%) i/s -    544.243k in   5.052767s
          Time.parse      2.721k (±25.9%) i/s -     12.376k in   5.024301s

Comparison:
        Time.iso8601:   114962.8 i/s
          Time.parse:     2721.0 i/s - 42.25x  (± 0.00) slower

