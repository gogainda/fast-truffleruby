$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       113.782M i/100ms
Function with splat arguments
                         1.225k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.133B (± 0.4%) i/s -      5.689B in   5.022827s
Function with splat arguments
                         13.277k (± 5.9%) i/s -     66.150k in   5.000912s

Comparison:
Function with single Array argument: 1132666557.9 i/s
Function with splat arguments:    13277.4 i/s - 85307.67x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   113.584M i/100ms
Sequential Assignment
                       111.984M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.133B (± 0.3%) i/s -      5.679B in   5.014171s
Sequential Assignment
                          1.134B (± 0.2%) i/s -      5.711B in   5.037034s

Comparison:
Sequential Assignment: 1133839390.2 i/s
 Parallel Assignment: 1132641455.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   113.274M i/100ms
       attr_accessor   113.313M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.133B (± 0.3%) i/s -      5.777B in   5.098873s
       attr_accessor      1.134B (± 0.3%) i/s -      5.779B in   5.097112s

Comparison:
       attr_accessor: 1133776159.1 i/s
   getter_and_setter: 1132998839.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     9.772k i/100ms
         respond_to?   113.749M i/100ms
Calculating -------------------------------------
      begin...rescue     67.664k (± 2.7%) i/s -    342.020k in   5.058397s
         respond_to?      1.134B (± 0.3%) i/s -      5.687B in   5.014105s

Comparison:
         respond_to?: 1134299433.2 i/s
      begin...rescue:    67664.4 i/s - 16763.60x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   113.351M i/100ms
             &method   113.586M i/100ms
Calculating -------------------------------------
              normal      1.133B (± 0.3%) i/s -      5.668B in   5.001489s
             &method      1.136B (± 0.3%) i/s -      5.793B in   5.097622s

Comparison:
             &method: 1136396877.1 i/s
              normal: 1133178937.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       128.000  i/100ms
       define_method   153.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.397k (±59.0%) i/s -      4.992k in   5.699147s
       define_method      6.164k (±45.4%) i/s -      9.333k in   5.054728s

Comparison:
       define_method:     6164.1 i/s
module_eval with string:     2396.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    80.587k i/100ms
       Kernel#format    57.229k i/100ms
            String#%    57.922k i/100ms
Calculating -------------------------------------
         Float#round    874.255k (± 2.3%) i/s -      4.432M in   5.072630s
       Kernel#format    579.855k (± 2.0%) i/s -      2.919M in   5.035508s
            String#%    579.961k (± 1.9%) i/s -      2.954M in   5.095421s

Comparison:
         Float#round:   874254.9 i/s
            String#%:   579960.8 i/s - 1.51x  (± 0.00) slower
       Kernel#format:   579855.5 i/s - 1.51x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.350M i/100ms
          OpenStruct   113.550M i/100ms
Calculating -------------------------------------
                Hash      1.135B (± 0.4%) i/s -      5.781B in   5.095577s
          OpenStruct      1.134B (± 0.2%) i/s -      5.677B in   5.006558s

Comparison:
                Hash: 1134500011.8 i/s
          OpenStruct: 1134015973.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.406M i/100ms
          OpenStruct     2.983k i/100ms
Calculating -------------------------------------
                Hash      1.130B (± 0.5%) i/s -      5.670B in   5.017952s
          OpenStruct     35.275k (± 9.9%) i/s -    175.997k in   5.064039s

Comparison:
                Hash: 1130033335.1 i/s
          OpenStruct:    35275.0 i/s - 32034.99x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   846.205k i/100ms
  ancestors.include?   151.287k i/100ms
Calculating -------------------------------------
  less than or equal      9.084M (± 3.1%) i/s -     45.695M in   5.035110s
  ancestors.include?      1.538M (± 3.8%) i/s -      7.716M in   5.022767s

Comparison:
  less than or equal:  9084199.7 i/s
  ancestors.include?:  1538441.2 i/s - 5.90x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     11.342  (± 0.0%) i/s -     57.000  in   5.025578s
         Kernel loop      3.494  (± 0.0%) i/s -     18.000  in   5.153467s

Comparison:
          While Loop:       11.3 i/s
         Kernel loop:        3.5 i/s - 3.25x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   113.313M i/100ms
         Array#first   113.389M i/100ms
Calculating -------------------------------------
           Array#[0]      1.135B (± 0.7%) i/s -      5.779B in   5.092640s
         Array#first      1.135B (± 0.6%) i/s -      5.783B in   5.096007s

Comparison:
           Array#[0]: 1134825326.4 i/s
         Array#first: 1134813736.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   113.293M i/100ms
          Array#last   113.385M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.133B (± 0.3%) i/s -      5.778B in   5.097731s
          Array#last      1.136B (± 0.7%) i/s -      5.783B in   5.091006s

Comparison:
          Array#last: 1135903124.7 i/s
          Array#[-1]: 1133446696.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   586.256k i/100ms
Calculating -------------------------------------
                find     14.950  (±13.4%) i/s -     48.000  in   5.017428s
             bsearch      5.869M (± 3.7%) i/s -     29.313M in   5.001243s

Comparison:
             bsearch:  5869498.3 i/s
                find:       15.0 i/s - 392600.51x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.068  (± 0.0%) i/s -      1.000  in  14.764879s
        Array#insert      1.025  (± 0.0%) i/s -      6.000  in   5.855681s

Comparison:
        Array#insert:        1.0 i/s
       Array#unshift:        0.1 i/s - 15.13x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   113.502M i/100ms
          Array#size   113.821M i/100ms
         Array#count   113.474M i/100ms
Calculating -------------------------------------
        Array#length      1.133B (± 0.2%) i/s -      5.675B in   5.008237s
          Array#size      1.134B (± 0.4%) i/s -      5.691B in   5.017931s
         Array#count      1.135B (± 0.5%) i/s -      5.787B in   5.099255s

Comparison:
         Array#count: 1134938280.8 i/s
          Array#size: 1134158291.7 i/s - same-ish: difference falls within error
        Array#length: 1133159923.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    23.536k i/100ms
        Array#sample     2.625M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    247.852k (± 2.0%) i/s -      1.247M in   5.034889s
        Array#sample     26.129M (± 0.3%) i/s -    131.246M in   5.023124s

Comparison:
        Array#sample: 26128551.5 i/s
 Array#shuffle.first:   247852.4 i/s - 105.42x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   864.000  i/100ms
          Date.parse   146.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     22.458k (±33.1%) i/s -     91.584k in   5.019323s
          Date.parse      8.783k (±29.0%) i/s -     36.646k in   5.017658s

Comparison:
        Date.iso8601:    22458.4 i/s
          Date.parse:     8782.7 i/s - 2.56x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   232.166k i/100ms
           Array#map     1.035M i/100ms
Calculating -------------------------------------
   Array#each + push      2.429M (± 4.2%) i/s -     12.305M in   5.075789s
           Array#map     10.489M (± 4.8%) i/s -     52.765M in   5.042801s

Comparison:
           Array#map: 10489223.9 i/s
   Array#each + push:  2428827.0 i/s - 4.32x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     6.523M i/100ms
               #each    41.208M i/100ms
Calculating -------------------------------------
            For loop     65.239M (± 1.9%) i/s -    326.168M in   5.001383s
               #each    397.346M (± 1.7%) i/s -      2.019B in   5.083174s

Comparison:
               #each: 397345558.5 i/s
            For loop: 65239202.0 i/s - 6.09x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   835.777k i/100ms
     each_with_index     1.043M i/100ms
Calculating -------------------------------------
          While Loop      8.360M (± 0.0%) i/s -     42.625M in   5.098361s
     each_with_index     10.406M (± 0.0%) i/s -     52.141M in   5.010524s

Comparison:
     each_with_index: 10406357.6 i/s
          While Loop:  8360458.9 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   160.691k i/100ms
      inject to_proc   159.917k i/100ms
        inject block   158.864k i/100ms
Calculating -------------------------------------
       inject symbol      1.593M (± 0.2%) i/s -      8.035M in   5.043542s
      inject to_proc      1.604M (± 0.2%) i/s -      8.156M in   5.084029s
        inject block      1.599M (± 0.2%) i/s -      8.102M in   5.065408s

Comparison:
      inject to_proc:  1604198.7 i/s
        inject block:  1599498.1 i/s - same-ish: difference falls within error
       inject symbol:  1593041.1 i/s - 1.01x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    17.440k i/100ms
   Array#map.flatten    18.085k i/100ms
      Array#flat_map    43.193k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    182.867k (± 3.7%) i/s -    924.320k in   5.062028s
   Array#map.flatten    183.433k (± 3.5%) i/s -    922.335k in   5.034785s
      Array#flat_map    430.528k (± 2.8%) i/s -      2.160M in   5.020435s

Comparison:
      Array#flat_map:   430527.6 i/s
   Array#map.flatten:   183432.8 i/s - 2.35x  (± 0.00) slower
Array#map.flatten(1):   182867.2 i/s - 2.35x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   215.632k i/100ms
  Array#reverse_each     1.878M i/100ms
Calculating -------------------------------------
  Array#reverse.each      2.290M (± 3.0%) i/s -     11.644M in   5.089382s
  Array#reverse_each     18.859M (± 1.3%) i/s -     95.797M in   5.080383s

Comparison:
  Array#reverse_each: 18859337.7 i/s
  Array#reverse.each:  2290017.7 i/s - 8.24x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       685.217k i/100ms
   Enumerable#detect     2.666M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          7.823M (± 5.2%) i/s -    156.229M in  20.045836s
   Enumerable#detect     26.683M (± 0.2%) i/s -    535.924M in  20.085141s

Comparison:
   Enumerable#detect: 26682774.8 i/s
Enumerable#select.first:  7822864.9 i/s - 3.41x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       228.385k i/100ms
Enumerable#select.last
                       403.048k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.315M (± 2.6%) i/s -     11.648M in   5.035722s
Enumerable#select.last
                          4.064M (± 2.7%) i/s -     20.555M in   5.061629s

Comparison:
Enumerable#select.last:  4064069.1 i/s
Enumerable#reverse.detect:  2314598.5 i/s - 1.76x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.669k i/100ms
  Enumerable#sort_by     3.133k i/100ms
     Enumerable#sort     4.089k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         30.196k (±14.8%) i/s -    138.788k in   5.026282s
  Enumerable#sort_by     30.334k (±15.4%) i/s -    137.852k in   5.019342s
     Enumerable#sort     40.462k (± 1.4%) i/s -    204.450k in   5.053956s

Comparison:
     Enumerable#sort:    40461.5 i/s
  Enumerable#sort_by:    30333.8 i/s - 1.33x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    30196.0 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   541.841k i/100ms
Enumerable#sort_by...first
                         7.109k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      5.420M (± 0.0%) i/s -     27.634M in   5.098818s
Enumerable#sort_by...first
                         74.264k (± 2.5%) i/s -    376.777k in   5.076820s

Comparison:
   Enumerable#min_by:  5419667.1 i/s
Enumerable#sort_by...first:    74263.7 i/s - 72.98x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   411.206k i/100ms
            Hash#dup   449.865k i/100ms
Calculating -------------------------------------
              Hash[]      4.615M (± 2.4%) i/s -     23.439M in   5.082009s
            Hash#dup      4.654M (± 2.3%) i/s -     23.393M in   5.028845s

Comparison:
            Hash#dup:  4654296.7 i/s
              Hash[]:  4614839.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   113.335M i/100ms
  Hash#fetch, symbol   113.609M i/100ms
     Hash#[], string     6.655M i/100ms
  Hash#fetch, string     6.526M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.134B (± 0.6%) i/s -      5.780B in   5.097788s
  Hash#fetch, symbol      1.136B (± 0.9%) i/s -      5.680B in   5.000739s
     Hash#[], string     66.523M (± 0.3%) i/s -    332.732M in   5.001849s
  Hash#fetch, string     65.170M (± 0.5%) i/s -    326.324M in   5.007398s

Comparison:
  Hash#fetch, symbol: 1136003319.9 i/s
     Hash#[], symbol: 1133873708.5 i/s - same-ish: difference falls within error
     Hash#[], string: 66522511.5 i/s - 17.08x  (± 0.00) slower
  Hash#fetch, string: 65170441.7 i/s - 17.43x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    41.948M i/100ms
             Hash#[]    49.780M i/100ms
          Hash#[] ||    49.809M i/100ms
          Hash#[] &&    49.814M i/100ms
          Hash#fetch    41.950M i/100ms
 Hash#fetch fallback    41.979M i/100ms
Calculating -------------------------------------
            Hash#dig    419.300M (± 0.9%) i/s -      2.097B in   5.002564s
             Hash#[]    498.040M (± 0.1%) i/s -      2.539B in   5.097503s
          Hash#[] ||    497.796M (± 0.2%) i/s -      2.490B in   5.002991s
          Hash#[] &&    497.738M (± 0.2%) i/s -      2.491B in   5.004014s
          Hash#fetch    418.898M (± 0.7%) i/s -      2.098B in   5.007478s
 Hash#fetch fallback    419.276M (± 0.8%) i/s -      2.099B in   5.006443s

Comparison:
             Hash#[]: 498039784.2 i/s
          Hash#[] ||: 497795725.1 i/s - same-ish: difference falls within error
          Hash#[] &&: 497738480.2 i/s - same-ish: difference falls within error
            Hash#dig: 419299994.4 i/s - 1.19x  (± 0.00) slower
 Hash#fetch fallback: 419275763.1 i/s - 1.19x  (± 0.00) slower
          Hash#fetch: 418898037.9 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   113.448M i/100ms
  Hash#fetch + block   113.511M i/100ms
    Hash#fetch + arg   113.430M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.134B (± 0.6%) i/s -      5.672B in   5.000642s
  Hash#fetch + block      1.137B (± 0.3%) i/s -      5.789B in   5.089418s
    Hash#fetch + arg      1.133B (± 0.2%) i/s -      5.671B in   5.004269s

Comparison:
  Hash#fetch + block: 1137485479.1 i/s
  Hash#fetch + const: 1134371604.4 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 1133334339.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    22.218k i/100ms
         sort + to_h     9.581k i/100ms
Calculating -------------------------------------
      sort_by + to_h    247.675k (± 8.2%) i/s -      1.244M in   5.061235s
         sort + to_h    153.496k (± 5.3%) i/s -    766.480k in   5.008764s

Comparison:
      sort_by + to_h:   247675.2 i/s
         sort + to_h:   153495.8 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   140.980k i/100ms
       Hash#each_key   169.549k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.596M (± 4.3%) i/s -      8.036M in   5.045730s
       Hash#each_key      1.747M (± 4.0%) i/s -      8.817M in   5.056271s

Comparison:
       Hash#each_key:  1746585.6 i/s
      Hash#keys.each:  1595774.4 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   191.000  i/100ms
           Hash#key?   124.444M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.892k (±15.3%) i/s -      9.168k in   5.040105s
           Hash#key?      1.245B (± 0.2%) i/s -      6.347B in   5.099574s

Comparison:
           Hash#key?: 1244549042.4 i/s
  Hash#keys.include?:     1891.8 i/s - 657853.52x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    40.505k i/100ms
            Hash#[]=    43.359k i/100ms
Calculating -------------------------------------
         Hash#merge!    432.576k (± 4.9%) i/s -      2.187M in   5.069378s
            Hash#[]=    441.388k (± 4.3%) i/s -      2.211M in   5.019879s

Comparison:
            Hash#[]=:   441388.3 i/s
         Hash#merge!:   432576.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        23.816k i/100ms
      Hash#merge({})    15.397k i/100ms
 Hash#dup#merge!({})    25.211k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        279.697k (± 2.5%) i/s -      1.405M in   5.027153s
      Hash#merge({})    162.380k (± 2.2%) i/s -    816.041k in   5.028057s
 Hash#dup#merge!({})    252.205k (± 2.1%) i/s -      1.261M in   5.000350s

Comparison:
{}#merge!(Hash) do end:   279697.2 i/s
 Hash#dup#merge!({}):   252205.3 i/s - 1.11x  (± 0.00) slower
      Hash#merge({}):   162380.5 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   113.364M i/100ms
          Hash#merge   113.451M i/100ms
Calculating -------------------------------------
        Hash#**other      1.133B (± 0.3%) i/s -      5.668B in   5.002515s
          Hash#merge      1.133B (± 0.6%) i/s -      5.673B in   5.005799s

Comparison:
          Hash#merge: 1133230019.7 i/s
        Hash#**other: 1133080897.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   672.000  i/100ms
         Hash#merge!    43.679k i/100ms
Calculating -------------------------------------
          Hash#merge      8.120k (± 5.7%) i/s -     40.992k in   5.066780s
         Hash#merge!    445.944k (± 3.7%) i/s -      2.228M in   5.003138s

Comparison:
         Hash#merge!:   445944.3 i/s
          Hash#merge:     8119.5 i/s - 54.92x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.302M i/100ms
Array#each               1.230M i/100ms
Array#each_w/_object     1.256M i/100ms
Hash#select-include      2.105M i/100ms
Calculating -------------------------------------
Hash#native-slice        16.039M (± 2.9%) i/s -     80.732M in   5.038224s
Array#each               12.627M (± 3.3%) i/s -     63.984M in   5.072935s
Array#each_w/_object     12.659M (± 2.4%) i/s -     64.031M in   5.061075s
Hash#select-include      20.770M (± 3.8%) i/s -    105.261M in   5.075315s

Comparison:
Hash#select-include : 20770051.4 i/s
Hash#native-slice   : 16038617.7 i/s - 1.30x  (± 0.00) slower
Array#each_w/_object: 12659157.9 i/s - 1.64x  (± 0.00) slower
Array#each          : 12627271.5 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   224.000  i/100ms
         Hash#value?    28.400k i/100ms
Calculating -------------------------------------
Hash#values.include?      2.530k (± 8.0%) i/s -     12.544k in   5.012816s
         Hash#value?    286.662k (± 0.0%) i/s -      1.448M in   5.052638s

Comparison:
         Hash#value?:   286662.2 i/s
Hash#values.include?:     2529.6 i/s - 113.32x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   113.430M i/100ms
                send   113.381M i/100ms
      method_missing   113.440M i/100ms
Calculating -------------------------------------
                call      1.133B (± 0.3%) i/s -      5.672B in   5.004845s
                send      1.133B (± 0.3%) i/s -      5.669B in   5.001722s
      method_missing      1.135B (± 0.6%) i/s -      5.785B in   5.098129s

Comparison:
      method_missing: 1134856146.0 i/s
                send: 1133433175.7 i/s - same-ish: difference falls within error
                call: 1133213945.1 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    38.253k i/100ms
      Symbol#to_proc    41.269k i/100ms
Calculating -------------------------------------
               Block    426.115k (± 2.4%) i/s -      2.142M in   5.030184s
      Symbol#to_proc    432.985k (± 2.2%) i/s -      2.187M in   5.054072s

Comparison:
      Symbol#to_proc:   432984.6 i/s
               Block:   426114.8 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   113.411M i/100ms
       block + yield   113.371M i/100ms
        unused block   113.472M i/100ms
               yield   113.598M i/100ms
Calculating -------------------------------------
          block.call      1.134B (± 0.3%) i/s -      5.671B in   5.001834s
       block + yield      1.138B (± 1.0%) i/s -      5.782B in   5.080746s
        unused block      1.136B (± 0.5%) i/s -      5.787B in   5.095495s
               yield      1.137B (± 0.9%) i/s -      5.793B in   5.096800s

Comparison:
       block + yield: 1138110258.8 i/s
               yield: 1136775403.2 i/s - same-ish: difference falls within error
        unused block: 1135751848.5 i/s - same-ish: difference falls within error
          block.call: 1133705652.4 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    57.314k i/100ms
      range#include?   551.000  i/100ms
       range#member?   549.000  i/100ms
       plain compare    75.568k i/100ms
Calculating -------------------------------------
        range#cover?    316.946k (±39.7%) i/s -      1.433M in   5.118887s
      range#include?     12.975k (±34.0%) i/s -     46.284k in   5.032741s
       range#member?     12.478k (±40.8%) i/s -     30.195k in   5.270529s
       plain compare    605.504k (±52.9%) i/s -      1.436M in   5.124437s

Comparison:
       plain compare:   605504.2 i/s
        range#cover?:   316945.8 i/s - same-ish: difference falls within error
      range#include?:    12975.1 i/s - 46.67x  (± 0.00) slower
       range#member?:    12477.8 i/s - 48.53x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     6.535M i/100ms
           String#=~     8.193M i/100ms
          Regexp#===     8.224M i/100ms
        String#match     6.633M i/100ms
Calculating -------------------------------------
       String#match?     67.025M (± 4.6%) i/s -    339.827M in   5.081216s
           String#=~     82.215M (± 0.4%) i/s -    417.829M in   5.082234s
          Regexp#===     82.378M (± 0.4%) i/s -    419.423M in   5.091503s
        String#match     66.003M (± 0.4%) i/s -    331.650M in   5.024864s

Comparison:
          Regexp#===: 82378366.7 i/s
           String#=~: 82215256.3 i/s - same-ish: difference falls within error
       String#match?: 67025192.3 i/s - 1.23x  (± 0.00) slower
        String#match: 66002985.9 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.950M i/100ms
      String#casecmp     3.515M i/100ms
Calculating -------------------------------------
String#downcase + ==     20.075M (± 4.4%) i/s -    101.392M in   5.060652s
      String#casecmp     35.543M (± 0.7%) i/s -    179.240M in   5.043184s

Comparison:
      String#casecmp: 35542548.2 i/s
String#downcase + ==: 20074850.1 i/s - 1.77x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+   113.458M i/100ms
       String#concat   114.407M i/100ms
       String#append   113.469M i/100ms
         "foo" "bar"   113.643M i/100ms
  "#{'foo'}#{'bar'}"   113.446M i/100ms
Calculating -------------------------------------
            String#+      1.134B (± 0.5%) i/s -      5.673B in   5.001906s
       String#concat      1.134B (± 0.2%) i/s -      5.720B in   5.043186s
       String#append      1.134B (± 0.6%) i/s -      5.673B in   5.001094s
         "foo" "bar"      1.135B (± 0.3%) i/s -      5.682B in   5.007192s
  "#{'foo'}#{'bar'}"      1.136B (± 0.6%) i/s -      5.786B in   5.092992s

Comparison:
  "#{'foo'}#{'bar'}": 1136063213.3 i/s
         "foo" "bar": 1134805280.9 i/s - same-ish: difference falls within error
       String#append: 1134484206.4 i/s - same-ish: difference falls within error
       String#concat: 1134278179.6 i/s - same-ish: difference falls within error
            String#+: 1134181000.9 i/s - same-ish: difference falls within error

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   113.871M i/100ms
          String#dup   113.297M i/100ms
Calculating -------------------------------------
           String#+@      1.133B (± 0.6%) i/s -      5.694B in   5.023383s
          String#dup      1.134B (± 0.4%) i/s -      5.778B in   5.095185s

Comparison:
          String#dup: 1134054218.3 i/s
           String#+@: 1133446688.1 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.633M i/100ms
       String#match?     1.811M i/100ms
    String#end_with?    21.929M i/100ms
Calculating -------------------------------------
           String#=~     16.300M (± 1.7%) i/s -     81.673M in   5.012299s
       String#match?     18.162M (± 2.4%) i/s -     92.337M in   5.086985s
    String#end_with?    217.384M (± 1.1%) i/s -      1.096B in   5.044516s

Comparison:
    String#end_with?: 217383849.3 i/s
       String#match?: 18162474.4 i/s - 11.97x  (± 0.00) slower
           String#=~: 16299618.6 i/s - 13.34x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   103.321k i/100ms
          String#sub   673.991k i/100ms
String#dup["string"]=
                        22.135M i/100ms
Calculating -------------------------------------
         String#gsub      1.063M (± 3.1%) i/s -      5.373M in   5.058236s
          String#sub      8.198M (± 6.3%) i/s -     41.113M in   5.037476s
String#dup["string"]=
                        218.455M (± 1.4%) i/s -      1.107B in   5.067146s

Comparison:
String#dup["string"]=: 218454667.6 i/s
          String#sub:  8197739.0 i/s - 26.65x  (± 0.00) slower
         String#gsub:  1063403.2 i/s - 205.43x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   262.942k i/100ms
           String#tr   183.142k i/100ms
Calculating -------------------------------------
         String#gsub      2.983M (± 5.8%) i/s -     14.988M in   5.043014s
           String#tr      1.865M (± 3.5%) i/s -      9.340M in   5.015872s

Comparison:
         String#gsub:  2982731.4 i/s
           String#tr:  1864573.5 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   113.948M i/100ms
         With Freeze   113.364M i/100ms
Calculating -------------------------------------
      Without Freeze      1.133B (± 0.3%) i/s -      5.697B in   5.028501s
         With Freeze      1.134B (± 0.2%) i/s -      5.782B in   5.098378s

Comparison:
         With Freeze: 1134003390.1 i/s
      Without Freeze: 1133035865.1 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     8.458k i/100ms
      String#squeeze    66.485k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    122.914k (± 8.0%) i/s -    617.434k in   5.057257s
      String#squeeze    669.163k (± 2.9%) i/s -      3.391M in   5.071800s

Comparison:
      String#squeeze:   669162.8 i/s
 String#gsub/regex+/:   122914.0 i/s - 5.44x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     3.526M i/100ms
       String#match?     4.464M i/100ms
  String#start_with?     2.380M i/100ms
Calculating -------------------------------------
           String#=~     39.558M (± 2.3%) i/s -    200.959M in   5.083060s
       String#match?     45.539M (± 3.0%) i/s -    227.662M in   5.003961s
  String#start_with?     23.997M (± 3.1%) i/s -    121.367M in   5.062662s

Comparison:
       String#match?: 45538628.5 i/s
           String#=~: 39558208.8 i/s - 1.15x  (± 0.00) slower
  String#start_with?: 23997077.1 i/s - 1.90x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   373.071k i/100ms
    String#[0, n] ==   241.544k i/100ms
   String#[RANGE] ==   264.164k i/100ms
   String#[0...n] ==   198.964k i/100ms
Calculating -------------------------------------
  String#start_with?      3.835M (± 3.0%) i/s -     19.400M in   5.063167s
    String#[0, n] ==      2.455M (± 3.7%) i/s -     12.319M in   5.024265s
   String#[RANGE] ==      2.632M (± 4.1%) i/s -     13.208M in   5.027731s
   String#[0...n] ==      2.031M (± 2.9%) i/s -     10.147M in   5.001750s

Comparison:
  String#start_with?:  3835302.2 i/s
   String#[RANGE] ==:  2631856.8 i/s - 1.46x  (± 0.00) slower
    String#[0, n] ==:  2455353.6 i/s - 1.56x  (± 0.00) slower
   String#[0...n] ==:  2030580.4 i/s - 1.89x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    21.637M i/100ms
 String#sub!'string'   801.370k i/100ms
String#gsub!'string'    94.259k i/100ms
  String#[/regexp/]=     5.283M i/100ms
 String#sub!/regexp/     2.678M i/100ms
String#gsub!/regexp/   771.147k i/100ms
Calculating -------------------------------------
  String#['string']=    216.847M (± 1.2%) i/s -      1.103B in   5.089404s
 String#sub!'string'      9.955M (±13.8%) i/s -     45.678M in   5.034537s
String#gsub!'string'      1.094M (± 1.6%) i/s -      5.467M in   5.000184s
  String#[/regexp/]=     52.919M (± 0.2%) i/s -    269.435M in   5.091464s
 String#sub!/regexp/     26.617M (± 2.0%) i/s -    133.906M in   5.033007s
String#gsub!/regexp/      7.602M (± 2.1%) i/s -     38.557M in   5.074229s

Comparison:
  String#['string']=: 216846862.7 i/s
  String#[/regexp/]=: 52919172.7 i/s - 4.10x  (± 0.00) slower
 String#sub!/regexp/: 26616814.0 i/s - 8.15x  (± 0.00) slower
 String#sub!'string':  9954655.8 i/s - 21.78x  (± 0.00) slower
String#gsub!/regexp/:  7602083.9 i/s - 28.52x  (± 0.00) slower
String#gsub!'string':  1093682.8 i/s - 198.27x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     2.629M i/100ms
        String#chomp     3.960M i/100ms
String#delete_suffix     7.004M i/100ms
Calculating -------------------------------------
          String#sub     26.870M (± 3.2%) i/s -    136.706M in   5.093282s
        String#chomp     39.694M (± 2.9%) i/s -    201.976M in   5.092809s
String#delete_suffix     68.041M (± 0.3%) i/s -    343.213M in   5.044270s

Comparison:
String#delete_suffix: 68040843.6 i/s
        String#chomp: 39693668.2 i/s - 1.71x  (± 0.00) slower
          String#sub: 26869512.0 i/s - 2.53x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix     2.650M i/100ms
          String#sub     9.961M i/100ms
Calculating -------------------------------------
String#delete_prefix     28.088M (± 2.1%) i/s -    143.103M in   5.097138s
          String#sub     88.165M (± 0.3%) i/s -    448.252M in   5.084325s

Comparison:
          String#sub: 88164550.9 i/s
String#delete_prefix: 28087983.3 i/s - 3.14x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.832M i/100ms
    String#unpack[0]     1.893M i/100ms
Calculating -------------------------------------
      String#unpack1     18.909M (± 3.3%) i/s -     95.279M in   5.044349s
    String#unpack[0]     19.058M (± 3.0%) i/s -     96.524M in   5.069754s

Comparison:
    String#unpack[0]: 19057721.2 i/s
      String#unpack1: 18909360.1 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.2.0-dev-e2f62b89, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    20.269k i/100ms
          Time.parse   206.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    185.464k (±28.5%) i/s -    810.760k in   5.066670s
          Time.parse      6.588k (±27.1%) i/s -     28.222k in   5.010444s

Comparison:
        Time.iso8601:   185464.2 i/s
          Time.parse:     6588.1 i/s - 28.15x  (± 0.00) slower

