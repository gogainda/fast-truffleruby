$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       238.772M i/100ms
Function with splat arguments
                       655.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          2.386B (± 0.4%) i/s -     11.939B in   5.002967s
Function with splat arguments
                          6.867k (± 5.0%) i/s -     34.715k in   5.068714s

Comparison:
Function with single Array argument: 2386336928.7 i/s
Function with splat arguments:     6866.7 i/s - 347524.03x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   238.371M i/100ms
Sequential Assignment
                       238.566M i/100ms
Calculating -------------------------------------
 Parallel Assignment      2.388B (± 0.3%) i/s -     12.157B in   5.091018s
Sequential Assignment
                          2.389B (± 0.2%) i/s -     12.167B in   5.092191s

Comparison:
Sequential Assignment: 2389335399.6 i/s
 Parallel Assignment: 2387934781.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   238.599M i/100ms
       attr_accessor   239.111M i/100ms
Calculating -------------------------------------
   getter_and_setter      2.386B (± 0.5%) i/s -     11.930B in   5.000894s
       attr_accessor      2.389B (± 0.2%) i/s -     11.956B in   5.004180s

Comparison:
       attr_accessor: 2389123521.0 i/s
   getter_and_setter: 2385630997.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     7.549k i/100ms
         respond_to?   239.056M i/100ms
Calculating -------------------------------------
      begin...rescue     52.558k (± 2.7%) i/s -    264.215k in   5.030740s
         respond_to?      2.389B (± 0.2%) i/s -     11.953B in   5.002598s

Comparison:
         respond_to?: 2389330985.8 i/s
      begin...rescue:    52558.4 i/s - 45460.48x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   238.738M i/100ms
             &method     8.599M i/100ms
Calculating -------------------------------------
              normal      2.388B (± 0.3%) i/s -     12.176B in   5.098477s
             &method     93.708M (± 4.5%) i/s -    472.932M in   5.057595s

Comparison:
              normal: 2388108470.4 i/s
             &method: 93707805.0 i/s - 25.48x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       120.000  i/100ms
       define_method   135.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.415k (±41.0%) i/s -      4.920k in   5.055119s
       define_method      3.152k (±61.3%) i/s -      5.265k in   5.434763s

Comparison:
       define_method:     3152.2 i/s
module_eval with string:     1415.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    77.847k i/100ms
       Kernel#format    64.447k i/100ms
            String#%    65.074k i/100ms
Calculating -------------------------------------
         Float#round    776.710k (± 2.4%) i/s -      3.892M in   5.014206s
       Kernel#format    649.356k (± 2.1%) i/s -      3.287M in   5.063848s
            String#%    646.020k (± 2.4%) i/s -      3.254M in   5.039371s

Comparison:
         Float#round:   776710.0 i/s
       Kernel#format:   649356.3 i/s - 1.20x  (± 0.00) slower
            String#%:   646019.6 i/s - 1.20x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   238.449M i/100ms
          OpenStruct   237.389M i/100ms
Calculating -------------------------------------
                Hash      2.388B (± 0.3%) i/s -     12.161B in   5.092442s
          OpenStruct      2.389B (± 0.2%) i/s -     12.107B in   5.066851s

Comparison:
          OpenStruct: 2389433343.3 i/s
                Hash: 2388047376.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   238.573M i/100ms
          OpenStruct     2.799k i/100ms
Calculating -------------------------------------
                Hash      2.384B (± 0.4%) i/s -     11.929B in   5.003396s
          OpenStruct     29.329k (±13.9%) i/s -    142.749k in   5.013619s

Comparison:
                Hash: 2384151379.7 i/s
          OpenStruct:    29328.8 i/s - 81290.37x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   818.188k i/100ms
  ancestors.include?   142.903k i/100ms
Calculating -------------------------------------
  less than or equal      8.855M (± 3.5%) i/s -     45.000M in   5.088644s
  ancestors.include?      1.446M (± 4.2%) i/s -      7.288M in   5.049536s

Comparison:
  less than or equal:  8854978.9 i/s
  ancestors.include?:  1445938.5 i/s - 6.12x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     23.881  (± 0.0%) i/s -    120.000  in   5.024969s
         Kernel loop      6.044  (± 0.0%) i/s -     31.000  in   5.129667s

Comparison:
          While Loop:       23.9 i/s
         Kernel loop:        6.0 i/s - 3.95x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   238.579M i/100ms
         Array#first   238.611M i/100ms
Calculating -------------------------------------
           Array#[0]      2.385B (± 0.5%) i/s -     11.929B in   5.002103s
         Array#first      2.389B (± 0.2%) i/s -     12.169B in   5.094784s

Comparison:
         Array#first: 2388566465.5 i/s
           Array#[0]: 2384850834.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   238.777M i/100ms
          Array#last   238.679M i/100ms
Calculating -------------------------------------
          Array#[-1]      2.386B (± 0.5%) i/s -     11.939B in   5.004543s
          Array#last      2.389B (± 0.2%) i/s -     12.173B in   5.095152s

Comparison:
          Array#last: 2389066982.5 i/s
          Array#[-1]: 2385656331.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   369.435k i/100ms
Calculating -------------------------------------
                find      8.977  (±22.3%) i/s -     21.000  in   5.066119s
             bsearch      3.711M (± 3.2%) i/s -     18.841M in   5.082550s

Comparison:
             bsearch:  3711085.7 i/s
                find:        9.0 i/s - 413396.64x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.126  (± 0.0%) i/s -      1.000  in   7.934719s
        Array#insert      0.957  (± 0.0%) i/s -      5.000  in   5.226211s

Comparison:
        Array#insert:        1.0 i/s
       Array#unshift:        0.1 i/s - 7.59x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   238.464M i/100ms
          Array#size   238.847M i/100ms
         Array#count   239.093M i/100ms
Calculating -------------------------------------
        Array#length      2.387B (± 0.3%) i/s -     12.162B in   5.094717s
          Array#size      2.389B (± 0.3%) i/s -     11.942B in   4.999996s
         Array#count      2.390B (± 0.2%) i/s -     11.955B in   5.002983s

Comparison:
         Array#count: 2389516832.3 i/s
          Array#size: 2388504129.3 i/s - same-ish: difference falls within error
        Array#length: 2387132570.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    21.251k i/100ms
        Array#sample     2.408M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    238.705k (± 2.3%) i/s -      1.211M in   5.077300s
        Array#sample     23.996M (± 0.2%) i/s -    120.418M in   5.018315s

Comparison:
        Array#sample: 23995864.4 i/s
 Array#shuffle.first:   238704.7 i/s - 100.53x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   662.000  i/100ms
          Date.parse   149.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     21.265k (±29.6%) i/s -     83.412k in   4.997930s
          Date.parse      8.596k (±33.0%) i/s -     32.929k in   4.996445s

Comparison:
        Date.iso8601:    21265.1 i/s
          Date.parse:     8596.3 i/s - 2.47x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   107.452k i/100ms
           Array#map   580.781k i/100ms
Calculating -------------------------------------
   Array#each + push      1.153M (± 3.4%) i/s -      5.802M in   5.037218s
           Array#map      6.077M (± 4.5%) i/s -     30.781M in   5.076018s

Comparison:
           Array#map:  6076611.4 i/s
   Array#each + push:  1153353.0 i/s - 5.27x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     9.766M i/100ms
               #each    74.171M i/100ms
Calculating -------------------------------------
            For loop     99.402M (± 0.4%) i/s -    498.058M in   5.010635s
               #each    740.820M (± 0.7%) i/s -      3.709B in   5.006268s

Comparison:
               #each: 740819573.0 i/s
            For loop: 99401970.4 i/s - 7.45x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   898.625k i/100ms
     each_with_index     1.283M i/100ms
Calculating -------------------------------------
          While Loop      9.048M (± 0.2%) i/s -     45.830M in   5.065121s
     each_with_index     12.817M (± 0.2%) i/s -     64.135M in   5.004115s

Comparison:
     each_with_index: 12816565.8 i/s
          While Loop:  9048186.9 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   146.377k i/100ms
      inject to_proc   147.378k i/100ms
        inject block   147.417k i/100ms
Calculating -------------------------------------
       inject symbol      1.473M (± 0.2%) i/s -      7.465M in   5.067639s
      inject to_proc      1.472M (± 0.6%) i/s -      7.369M in   5.006239s
        inject block      1.474M (± 0.2%) i/s -      7.371M in   5.001178s

Comparison:
        inject block:  1473826.5 i/s
       inject symbol:  1473122.6 i/s - same-ish: difference falls within error
      inject to_proc:  1471989.1 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    10.801k i/100ms
   Array#map.flatten    11.438k i/100ms
      Array#flat_map    30.235k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    118.118k (± 3.7%) i/s -    594.055k in   5.036460s
   Array#map.flatten    116.010k (± 3.0%) i/s -    583.338k in   5.033317s
      Array#flat_map    301.892k (± 2.4%) i/s -      1.512M in   5.010747s

Comparison:
      Array#flat_map:   301891.9 i/s
Array#map.flatten(1):   118118.2 i/s - 2.56x  (± 0.00) slower
   Array#map.flatten:   116009.7 i/s - 2.60x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   163.825k i/100ms
  Array#reverse_each     1.951M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.714M (± 3.4%) i/s -      8.683M in   5.070543s
  Array#reverse_each     19.416M (± 0.1%) i/s -     97.552M in   5.024298s

Comparison:
  Array#reverse_each: 19416134.3 i/s
  Array#reverse.each:  1714377.2 i/s - 11.33x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       643.738k i/100ms
   Enumerable#detect     3.800M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          6.773M (± 6.1%) i/s -    135.185M in  20.055974s
   Enumerable#detect     38.047M (± 0.5%) i/s -    763.889M in  20.077941s

Comparison:
   Enumerable#detect: 38047204.8 i/s
Enumerable#select.first:  6773323.0 i/s - 5.62x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       155.020k i/100ms
Enumerable#select.last
                       363.131k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.712M (± 3.5%) i/s -      8.681M in   5.077560s
Enumerable#select.last
                          3.683M (± 3.9%) i/s -     18.520M in   5.036670s

Comparison:
Enumerable#select.last:  3682769.2 i/s
Enumerable#reverse.detect:  1711924.2 i/s - 2.15x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.276k i/100ms
  Enumerable#sort_by     2.537k i/100ms
     Enumerable#sort     3.200k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         22.969k (±17.4%) i/s -    106.972k in   5.071231s
  Enumerable#sort_by     23.173k (±17.4%) i/s -    106.554k in   5.015157s
     Enumerable#sort     31.906k (± 1.6%) i/s -    160.000k in   5.016109s

Comparison:
     Enumerable#sort:    31906.5 i/s
  Enumerable#sort_by:    23172.9 i/s - 1.38x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    22969.5 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   238.868k i/100ms
Enumerable#sort_by...first
                         4.947k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      2.408M (± 0.2%) i/s -     12.182M in   5.059414s
Enumerable#sort_by...first
                         56.331k (± 3.0%) i/s -    281.979k in   5.010410s

Comparison:
   Enumerable#min_by:  2407855.7 i/s
Enumerable#sort_by...first:    56331.2 i/s - 42.74x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   216.147k i/100ms
            Hash#dup   239.785k i/100ms
Calculating -------------------------------------
              Hash[]      2.362M (± 4.3%) i/s -     11.888M in   5.043884s
            Hash#dup      2.457M (± 4.0%) i/s -     12.469M in   5.084279s

Comparison:
            Hash#dup:  2456677.2 i/s
              Hash[]:  2361664.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   238.917M i/100ms
  Hash#fetch, symbol   238.971M i/100ms
     Hash#[], string     4.276M i/100ms
  Hash#fetch, string     4.466M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      2.389B (± 0.3%) i/s -     11.946B in   5.001251s
  Hash#fetch, symbol      2.390B (± 0.2%) i/s -     11.949B in   5.000046s
     Hash#[], string     42.462M (± 0.4%) i/s -    213.782M in   5.034757s
  Hash#fetch, string     44.847M (± 0.6%) i/s -    227.762M in   5.078780s

Comparison:
  Hash#fetch, symbol: 2389689331.6 i/s
     Hash#[], symbol: 2388593042.9 i/s - same-ish: difference falls within error
  Hash#fetch, string: 44847306.5 i/s - 53.29x  (± 0.00) slower
     Hash#[], string: 42461882.3 i/s - 56.28x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    49.798M i/100ms
             Hash#[]    49.786M i/100ms
          Hash#[] ||    49.779M i/100ms
          Hash#[] &&    49.815M i/100ms
          Hash#fetch    49.813M i/100ms
 Hash#fetch fallback    49.814M i/100ms
Calculating -------------------------------------
            Hash#dig    497.456M (± 0.4%) i/s -      2.490B in   5.005361s
             Hash#[]    497.815M (± 0.2%) i/s -      2.489B in   5.000472s
          Hash#[] ||    497.721M (± 0.3%) i/s -      2.489B in   5.000682s
          Hash#[] &&    497.869M (± 0.2%) i/s -      2.491B in   5.002882s
          Hash#fetch    497.912M (± 0.2%) i/s -      2.491B in   5.002205s
 Hash#fetch fallback    497.916M (± 0.2%) i/s -      2.491B in   5.002284s

Comparison:
 Hash#fetch fallback: 497916011.3 i/s
          Hash#fetch: 497912407.6 i/s - same-ish: difference falls within error
          Hash#[] &&: 497868892.4 i/s - same-ish: difference falls within error
             Hash#[]: 497814926.7 i/s - same-ish: difference falls within error
          Hash#[] ||: 497721416.3 i/s - same-ish: difference falls within error
            Hash#dig: 497456114.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   238.801M i/100ms
  Hash#fetch + block   238.868M i/100ms
    Hash#fetch + arg   239.115M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      2.388B (± 0.3%) i/s -     11.940B in   5.000196s
  Hash#fetch + block      2.389B (± 0.2%) i/s -     12.182B in   5.098883s
    Hash#fetch + arg      2.390B (± 0.2%) i/s -     11.956B in   5.002395s

Comparison:
    Hash#fetch + arg: 2390012438.5 i/s
  Hash#fetch + block: 2389207208.7 i/s - same-ish: difference falls within error
  Hash#fetch + const: 2387935953.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    19.621k i/100ms
         sort + to_h    13.080k i/100ms
Calculating -------------------------------------
      sort_by + to_h    214.955k (± 5.5%) i/s -      1.079M in   5.036286s
         sort + to_h     78.842k (± 2.6%) i/s -    405.480k in   5.146433s

Comparison:
      sort_by + to_h:   214955.5 i/s
         sort + to_h:    78842.0 i/s - 2.73x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   101.125k i/100ms
       Hash#each_key   128.382k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.198M (± 4.6%) i/s -      6.067M in   5.076605s
       Hash#each_key      1.316M (± 4.2%) i/s -      6.676M in   5.082441s

Comparison:
       Hash#each_key:  1316026.6 i/s
      Hash#keys.each:  1197916.6 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   165.000  i/100ms
           Hash#key?    15.671M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.961k (±10.2%) i/s -      9.735k in   5.040267s
           Hash#key?    156.658M (± 0.3%) i/s -    783.553M in   5.001727s

Comparison:
           Hash#key?: 156657770.0 i/s
  Hash#keys.include?:     1961.3 i/s - 79875.79x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    23.966k i/100ms
            Hash#[]=    25.816k i/100ms
Calculating -------------------------------------
         Hash#merge!    246.399k (± 3.7%) i/s -      1.246M in   5.064993s
            Hash#[]=    262.172k (± 3.4%) i/s -      1.317M in   5.028166s

Comparison:
            Hash#[]=:   262172.0 i/s
         Hash#merge!:   246399.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        10.916k i/100ms
      Hash#merge({})     8.514k i/100ms
 Hash#dup#merge!({})    14.039k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        133.708k (± 4.3%) i/s -    676.792k in   5.072166s
      Hash#merge({})     87.587k (± 4.2%) i/s -    442.728k in   5.064568s
 Hash#dup#merge!({})    142.378k (± 2.1%) i/s -    715.989k in   5.031059s

Comparison:
 Hash#dup#merge!({}):   142378.2 i/s
{}#merge!(Hash) do end:   133708.3 i/s - same-ish: difference falls within error
      Hash#merge({}):    87586.9 i/s - 1.63x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   238.596M i/100ms
          Hash#merge   238.867M i/100ms
Calculating -------------------------------------
        Hash#**other      2.388B (± 0.3%) i/s -     12.168B in   5.095679s
          Hash#merge      2.390B (± 0.1%) i/s -     12.182B in   5.096363s

Comparison:
          Hash#merge: 2390377429.2 i/s
        Hash#**other: 2387999866.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   307.000  i/100ms
         Hash#merge!    25.784k i/100ms
Calculating -------------------------------------
          Hash#merge      3.592k (± 4.4%) i/s -     18.113k in   5.052230s
         Hash#merge!    259.839k (± 3.7%) i/s -      1.315M in   5.068276s

Comparison:
         Hash#merge!:   259839.2 i/s
          Hash#merge:     3592.5 i/s - 72.33x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.119M i/100ms
Array#each             908.170k i/100ms
Array#each_w/_object   914.896k i/100ms
Hash#select-include      1.050M i/100ms
Calculating -------------------------------------
Hash#native-slice        11.969M (± 3.7%) i/s -     60.446M in   5.057573s
Array#each                9.277M (± 2.6%) i/s -     47.225M in   5.094280s
Array#each_w/_object      9.192M (± 2.4%) i/s -     46.660M in   5.079306s
Hash#select-include      10.468M (± 2.5%) i/s -     52.506M in   5.019153s

Comparison:
Hash#native-slice   : 11969011.0 i/s
Hash#select-include : 10467825.2 i/s - 1.14x  (± 0.00) slower
Array#each          :  9277227.8 i/s - 1.29x  (± 0.00) slower
Array#each_w/_object:  9191883.0 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   162.000  i/100ms
         Hash#value?   535.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.910k (±14.4%) i/s -      9.234k in   4.999725s
         Hash#value?      5.376k (± 0.2%) i/s -     27.285k in   5.075246s

Comparison:
         Hash#value?:     5376.1 i/s
Hash#values.include?:     1910.4 i/s - 2.81x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   238.960M i/100ms
                send   238.480M i/100ms
      method_missing   239.099M i/100ms
Calculating -------------------------------------
                call      2.388B (± 0.2%) i/s -     11.948B in   5.002916s
                send      2.390B (± 0.2%) i/s -     12.162B in   5.089207s
      method_missing      2.389B (± 0.3%) i/s -     11.955B in   5.004754s

Comparison:
                send: 2389865760.1 i/s
      method_missing: 2388733559.3 i/s - same-ish: difference falls within error
                call: 2388220686.4 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    19.272k i/100ms
      Symbol#to_proc    20.465k i/100ms
Calculating -------------------------------------
               Block    205.701k (± 4.0%) i/s -      1.041M in   5.067880s
      Symbol#to_proc    206.569k (± 3.5%) i/s -      1.044M in   5.059003s

Comparison:
      Symbol#to_proc:   206569.0 i/s
               Block:   205700.5 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   238.613M i/100ms
       block + yield   238.563M i/100ms
        unused block   239.086M i/100ms
               yield   238.966M i/100ms
Calculating -------------------------------------
          block.call      2.388B (± 0.3%) i/s -     12.169B in   5.096093s
       block + yield      2.390B (± 0.2%) i/s -     12.167B in   5.090809s
        unused block      2.390B (± 0.2%) i/s -     11.954B in   5.002098s
               yield      2.390B (± 0.2%) i/s -     11.948B in   5.000026s

Comparison:
       block + yield: 2389947350.0 i/s
        unused block: 2389859346.6 i/s - same-ish: difference falls within error
               yield: 2389653131.5 i/s - same-ish: difference falls within error
          block.call: 2387979860.0 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    22.465k i/100ms
      range#include?   309.000  i/100ms
       range#member?   340.000  i/100ms
       plain compare    19.206k i/100ms
Calculating -------------------------------------
        range#cover?    111.024k (±28.2%) i/s -    516.695k in   5.007267s
      range#include?      5.502k (±34.2%) i/s -     22.866k in   5.064500s
       range#member?      5.388k (±35.1%) i/s -     21.080k in   5.026276s
       plain compare    165.167k (±27.5%) i/s -    614.592k in   5.102012s

Comparison:
       plain compare:   165167.1 i/s
        range#cover?:   111023.9 i/s - same-ish: difference falls within error
      range#include?:     5501.7 i/s - 30.02x  (± 0.00) slower
       range#member?:     5388.3 i/s - 30.65x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     3.935M i/100ms
           String#=~     5.636M i/100ms
          Regexp#===     5.633M i/100ms
        String#match     2.495M i/100ms
Calculating -------------------------------------
       String#match?     43.468M (± 4.2%) i/s -    220.369M in   5.078905s
           String#=~     56.351M (± 0.1%) i/s -    281.822M in   5.001212s
          Regexp#===     56.320M (± 0.2%) i/s -    281.654M in   5.001001s
        String#match     24.889M (± 2.5%) i/s -    124.731M in   5.014945s

Comparison:
           String#=~: 56350898.7 i/s
          Regexp#===: 56319700.7 i/s - same-ish: difference falls within error
       String#match?: 43467820.7 i/s - 1.30x  (± 0.00) slower
        String#match: 24888974.7 i/s - 2.26x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.265M i/100ms
      String#casecmp     3.514M i/100ms
Calculating -------------------------------------
String#downcase + ==     14.210M (± 4.2%) i/s -     72.116M in   5.084521s
      String#casecmp     33.234M (± 0.1%) i/s -    168.687M in   5.075775s

Comparison:
      String#casecmp: 33233834.4 i/s
String#downcase + ==: 14209943.2 i/s - 2.34x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+   238.576M i/100ms
       String#concat   239.079M i/100ms
       String#append   239.096M i/100ms
         "foo" "bar"   239.076M i/100ms
  "#{'foo'}#{'bar'}"   239.047M i/100ms
Calculating -------------------------------------
            String#+      2.389B (± 0.2%) i/s -     12.167B in   5.093562s
       String#concat      2.390B (± 0.2%) i/s -     11.954B in   5.002009s
       String#append      2.387B (± 0.4%) i/s -     11.955B in   5.008356s
         "foo" "bar"      2.389B (± 0.2%) i/s -     11.954B in   5.004221s
  "#{'foo'}#{'bar'}"      2.390B (± 0.1%) i/s -     11.952B in   5.000421s

Comparison:
  "#{'foo'}#{'bar'}": 2390276199.6 i/s
       String#concat: 2389835551.9 i/s - same-ish: difference falls within error
            String#+: 2388789660.3 i/s - same-ish: difference falls within error
         "foo" "bar": 2388754802.8 i/s - same-ish: difference falls within error
       String#append: 2387009711.4 i/s - same-ish: difference falls within error

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   238.500M i/100ms
          String#dup   238.504M i/100ms
Calculating -------------------------------------
           String#+@      2.388B (± 0.3%) i/s -     12.163B in   5.093939s
          String#dup      2.389B (± 0.3%) i/s -     12.164B in   5.091666s

Comparison:
          String#dup: 2388960072.7 i/s
           String#+@: 2387853656.8 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.145M i/100ms
       String#match?     1.207M i/100ms
    String#end_with?     1.530M i/100ms
Calculating -------------------------------------
           String#=~     12.354M (± 2.8%) i/s -     61.853M in   5.010866s
       String#match?     13.884M (± 2.2%) i/s -     70.019M in   5.045712s
    String#end_with?     16.816M (± 4.2%) i/s -     84.175M in   5.014846s

Comparison:
    String#end_with?: 16815588.9 i/s
       String#match?: 13884471.1 i/s - 1.21x  (± 0.00) slower
           String#=~: 12354408.8 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    46.629k i/100ms
          String#sub   445.967k i/100ms
String#dup["string"]=
                        21.347M i/100ms
Calculating -------------------------------------
         String#gsub    556.794k (± 3.2%) i/s -      2.798M in   5.030823s
          String#sub      4.988M (± 6.9%) i/s -     24.974M in   5.031918s
String#dup["string"]=
                        213.414M (± 0.2%) i/s -      1.067B in   5.001385s

Comparison:
String#dup["string"]=: 213413758.0 i/s
          String#sub:  4988328.5 i/s - 42.78x  (± 0.00) slower
         String#gsub:   556794.3 i/s - 383.29x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   111.445k i/100ms
           String#tr   128.005k i/100ms
Calculating -------------------------------------
         String#gsub      1.891M (± 5.5%) i/s -      9.473M in   5.027202s
           String#tr      1.344M (± 4.8%) i/s -      6.784M in   5.059529s

Comparison:
         String#gsub:  1890567.3 i/s
           String#tr:  1344174.2 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   238.489M i/100ms
         With Freeze   238.563M i/100ms
Calculating -------------------------------------
      Without Freeze      2.387B (± 0.3%) i/s -     12.163B in   5.094708s
         With Freeze      2.389B (± 0.2%) i/s -     12.167B in   5.091826s

Comparison:
         With Freeze: 2389472598.4 i/s
      Without Freeze: 2387389814.1 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     5.128k i/100ms
      String#squeeze    59.584k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     68.229k (± 4.5%) i/s -    343.576k in   5.046505s
      String#squeeze    589.134k (± 2.4%) i/s -      2.979M in   5.060067s

Comparison:
      String#squeeze:   589133.8 i/s
 String#gsub/regex+/:    68228.8 i/s - 8.63x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     2.358M i/100ms
       String#match?     2.448M i/100ms
  String#start_with?     1.722M i/100ms
Calculating -------------------------------------
           String#=~     26.898M (± 3.5%) i/s -    136.740M in   5.090337s
       String#match?     27.776M (± 4.0%) i/s -    139.528M in   5.031902s
  String#start_with?     17.564M (± 4.4%) i/s -     87.804M in   5.009218s

Comparison:
       String#match?: 27776210.5 i/s
           String#=~: 26897996.2 i/s - same-ish: difference falls within error
  String#start_with?: 17563984.3 i/s - 1.58x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   289.138k i/100ms
    String#[0, n] ==   181.558k i/100ms
   String#[RANGE] ==   193.144k i/100ms
   String#[0...n] ==   151.103k i/100ms
Calculating -------------------------------------
  String#start_with?      3.302M (± 3.7%) i/s -     16.481M in   4.998679s
    String#[0, n] ==      1.872M (± 4.3%) i/s -      9.441M in   5.053678s
   String#[RANGE] ==      1.952M (± 4.8%) i/s -      9.850M in   5.058510s
   String#[0...n] ==      1.505M (± 3.1%) i/s -      7.555M in   5.025780s

Comparison:
  String#start_with?:  3302044.0 i/s
   String#[RANGE] ==:  1952151.3 i/s - 1.69x  (± 0.00) slower
    String#[0, n] ==:  1871874.2 i/s - 1.76x  (± 0.00) slower
   String#[0...n] ==:  1504832.4 i/s - 2.19x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    19.771M i/100ms
 String#sub!'string'   537.564k i/100ms
String#gsub!'string'    56.025k i/100ms
  String#[/regexp/]=     2.428M i/100ms
 String#sub!/regexp/     1.855M i/100ms
String#gsub!/regexp/   523.397k i/100ms
Calculating -------------------------------------
  String#['string']=    199.123M (± 0.2%) i/s -      1.008B in   5.063772s
 String#sub!'string'      5.928M (±15.0%) i/s -     27.953M in   5.065620s
String#gsub!'string'    499.012k (± 1.7%) i/s -      2.521M in   5.053821s
  String#[/regexp/]=     24.268M (± 2.4%) i/s -    121.422M in   5.006537s
 String#sub!/regexp/     18.401M (± 2.2%) i/s -     92.771M in   5.044319s
String#gsub!/regexp/      5.199M (± 5.5%) i/s -     26.170M in   5.048846s

Comparison:
  String#['string']=: 199123121.7 i/s
  String#[/regexp/]=: 24267551.4 i/s - 8.21x  (± 0.00) slower
 String#sub!/regexp/: 18400935.1 i/s - 10.82x  (± 0.00) slower
 String#sub!'string':  5928072.5 i/s - 33.59x  (± 0.00) slower
String#gsub!/regexp/:  5199431.1 i/s - 38.30x  (± 0.00) slower
String#gsub!'string':   499012.5 i/s - 399.03x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.777M i/100ms
        String#chomp     2.727M i/100ms
String#delete_suffix     5.283M i/100ms
Calculating -------------------------------------
          String#sub     20.387M (± 3.8%) i/s -    103.075M in   5.063789s
        String#chomp     28.280M (± 3.2%) i/s -    141.800M in   5.019531s
String#delete_suffix     51.902M (± 2.0%) i/s -    264.173M in   5.091824s

Comparison:
String#delete_suffix: 51902392.8 i/s
        String#chomp: 28279693.1 i/s - 1.84x  (± 0.00) slower
          String#sub: 20387050.2 i/s - 2.55x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix     1.926M i/100ms
          String#sub     7.116M i/100ms
Calculating -------------------------------------
String#delete_prefix     20.368M (± 4.1%) i/s -    102.055M in   5.019657s
          String#sub     71.134M (± 0.2%) i/s -    355.783M in   5.001603s

Comparison:
          String#sub: 71133974.0 i/s
String#delete_prefix: 20367989.2 i/s - 3.49x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.314M i/100ms
    String#unpack[0]     1.496M i/100ms
Calculating -------------------------------------
      String#unpack1     15.039M (± 3.7%) i/s -     76.218M in   5.075231s
    String#unpack[0]     15.044M (± 3.2%) i/s -     76.295M in   5.076871s

Comparison:
    String#unpack[0]: 15043985.5 i/s
      String#unpack1: 15039363.9 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.3.0-dev-3dfcaa03, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    19.534k i/100ms
          Time.parse   192.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    165.143k (±11.6%) i/s -    820.428k in   5.079147s
          Time.parse      6.167k (±24.7%) i/s -     25.920k in   5.018037s

Comparison:
        Time.iso8601:   165143.2 i/s
          Time.parse:     6167.4 i/s - 26.78x  (± 0.00) slower

