$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       183.282M i/100ms
Function with splat arguments
                       573.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          2.015B (± 5.3%) i/s -     10.081B in   5.016875s
Function with splat arguments
                          6.682k (± 7.7%) i/s -     33.234k in   5.005152s

Comparison:
Function with single Array argument: 2015110523.8 i/s
Function with splat arguments:     6682.3 i/s - 301558.18x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   193.536M i/100ms
Sequential Assignment
                       198.717M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.993B (± 4.8%) i/s -     10.064B in   5.061685s
Sequential Assignment
                          2.013B (± 4.7%) i/s -     10.135B in   5.045656s

Comparison:
Sequential Assignment: 2013035966.7 i/s
 Parallel Assignment: 1992723429.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   189.369M i/100ms
       attr_accessor   197.654M i/100ms
Calculating -------------------------------------
   getter_and_setter      2.011B (± 4.5%) i/s -     10.037B in   5.000983s
       attr_accessor      2.031B (± 4.2%) i/s -     10.278B in   5.069575s

Comparison:
       attr_accessor: 2030928364.0 i/s
   getter_and_setter: 2011054055.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     9.419k i/100ms
         respond_to?   192.809M i/100ms
Calculating -------------------------------------
      begin...rescue     67.487k (± 6.1%) i/s -    339.084k in   5.043366s
         respond_to?      2.012B (± 4.3%) i/s -     10.219B in   5.087360s

Comparison:
         respond_to?: 2012352456.9 i/s
      begin...rescue:    67486.6 i/s - 29818.57x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   192.353M i/100ms
             &method   196.120M i/100ms
Calculating -------------------------------------
              normal      2.012B (± 4.8%) i/s -     10.195B in   5.079418s
             &method      2.025B (± 4.3%) i/s -     10.198B in   5.046206s

Comparison:
             &method: 2024747147.0 i/s
              normal: 2011628818.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        75.000  i/100ms
       define_method   106.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.602k (±48.8%) i/s -      3.300k in   5.010693s
       define_method      4.960k (±52.4%) i/s -      6.466k in   5.246580s

Comparison:
       define_method:     4959.7 i/s
module_eval with string:     1601.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    28.604k i/100ms
       Kernel#format    45.281k i/100ms
            String#%    45.768k i/100ms
Calculating -------------------------------------
         Float#round    322.879k (± 6.0%) i/s -      1.630M in   5.068866s
       Kernel#format    454.716k (± 5.4%) i/s -      2.309M in   5.094552s
            String#%    460.264k (± 4.5%) i/s -      2.334M in   5.082181s

Comparison:
            String#%:   460264.0 i/s
       Kernel#format:   454715.8 i/s - same-ish: difference falls within error
         Float#round:   322878.8 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   199.752M i/100ms
          OpenStruct   191.937M i/100ms
Calculating -------------------------------------
                Hash      2.034B (± 6.0%) i/s -     10.187B in   5.025836s
          OpenStruct      2.001B (± 5.0%) i/s -      9.981B in   4.999759s

Comparison:
                Hash: 2034455545.4 i/s
          OpenStruct: 2001235297.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   184.970M i/100ms
          OpenStruct     2.285k i/100ms
Calculating -------------------------------------
                Hash      1.983B (± 5.6%) i/s -      9.988B in   5.054121s
          OpenStruct     17.946k (±10.8%) i/s -     89.115k in   5.033120s

Comparison:
                Hash: 1982526132.6 i/s
          OpenStruct:    17946.1 i/s - 110470.87x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   776.193k i/100ms
  ancestors.include?   117.802k i/100ms
Calculating -------------------------------------
  less than or equal      8.398M (± 7.8%) i/s -     41.914M in   5.023368s
  ancestors.include?      1.144M (± 5.5%) i/s -      5.772M in   5.061657s

Comparison:
  less than or equal:  8398014.1 i/s
  ancestors.include?:  1143982.2 i/s - 7.34x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     2.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     19.363  (± 5.2%) i/s -     98.000  in   5.086020s
         Kernel loop      4.200  (± 0.0%) i/s -     21.000  in   5.015934s

Comparison:
          While Loop:       19.4 i/s
         Kernel loop:        4.2 i/s - 4.61x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   160.406M i/100ms
         Array#first   170.497M i/100ms
Calculating -------------------------------------
           Array#[0]      1.812B (± 5.4%) i/s -      9.143B in   5.061727s
         Array#first      1.847B (± 5.5%) i/s -      9.377B in   5.093808s

Comparison:
         Array#first: 1846749566.2 i/s
           Array#[0]: 1811761491.7 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   208.994M i/100ms
          Array#last   217.072M i/100ms
Calculating -------------------------------------
          Array#[-1]      2.097B (± 5.4%) i/s -     10.450B in   4.998533s
          Array#last      2.166B (± 5.4%) i/s -     10.854B in   5.025672s

Comparison:
          Array#last: 2166145535.0 i/s
          Array#[-1]: 2096588635.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   520.606k i/100ms
Calculating -------------------------------------
                find     14.852  (±13.5%) i/s -     42.000  in   5.035242s
             bsearch      4.862M (± 6.8%) i/s -     24.468M in   5.056314s

Comparison:
             bsearch:  4862416.1 i/s
                find:       14.9 i/s - 327386.25x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.077  (± 0.0%) i/s -      1.000  in  12.929845s
        Array#insert      0.765  (± 0.0%) i/s -      4.000  in   5.229087s

Comparison:
        Array#insert:        0.8 i/s
       Array#unshift:        0.1 i/s - 9.89x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   189.639M i/100ms
          Array#size   189.869M i/100ms
         Array#count   179.884M i/100ms
Calculating -------------------------------------
        Array#length      1.905B (± 5.3%) i/s -      9.672B in   5.090786s
          Array#size      1.930B (± 5.1%) i/s -      9.683B in   5.031384s
         Array#count      1.951B (± 4.4%) i/s -      9.894B in   5.082514s

Comparison:
         Array#count: 1950680204.4 i/s
          Array#size: 1930054980.5 i/s - same-ish: difference falls within error
        Array#length: 1905337154.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    20.902k i/100ms
        Array#sample     2.506M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    227.120k (± 4.8%) i/s -      1.150M in   5.073639s
        Array#sample     24.473M (± 4.6%) i/s -    122.797M in   5.028419s

Comparison:
        Array#sample: 24472671.4 i/s
 Array#shuffle.first:   227120.2 i/s - 107.75x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   189.000  i/100ms
          Date.parse    76.000  i/100ms
Calculating -------------------------------------
        Date.iso8601      9.762k (±42.0%) i/s -     37.800k in   5.028544s
          Date.parse      5.198k (±36.7%) i/s -     20.140k in   5.016330s

Comparison:
        Date.iso8601:     9762.1 i/s
          Date.parse:     5197.6 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   170.606k i/100ms
           Array#map   887.635k i/100ms
Calculating -------------------------------------
   Array#each + push      2.206M (± 7.7%) i/s -     11.089M in   5.059316s
           Array#map      8.915M (± 7.5%) i/s -     45.269M in   5.108187s

Comparison:
           Array#map:  8914728.2 i/s
   Array#each + push:  2205639.9 i/s - 4.04x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     8.529M i/100ms
               #each    12.978M i/100ms
Calculating -------------------------------------
            For loop     92.597M (± 5.8%) i/s -    469.117M in   5.083666s
               #each    129.549M (± 4.2%) i/s -    648.896M in   5.017451s

Comparison:
               #each: 129548611.7 i/s
            For loop: 92596616.3 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   808.861k i/100ms
     each_with_index     1.157M i/100ms
Calculating -------------------------------------
          While Loop      8.239M (± 4.3%) i/s -     41.252M in   5.016098s
     each_with_index     11.945M (± 4.0%) i/s -     60.139M in   5.042810s

Comparison:
     each_with_index: 11945034.2 i/s
          While Loop:  8239420.3 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   149.150k i/100ms
      inject to_proc   146.472k i/100ms
        inject block   144.262k i/100ms
Calculating -------------------------------------
       inject symbol      1.465M (± 4.8%) i/s -      7.308M in   5.001491s
      inject to_proc      1.503M (± 4.9%) i/s -      7.617M in   5.079204s
        inject block      1.488M (± 3.6%) i/s -      7.502M in   5.049352s

Comparison:
      inject to_proc:  1503367.0 i/s
        inject block:  1487562.8 i/s - same-ish: difference falls within error
       inject symbol:  1464629.3 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    11.465k i/100ms
   Array#map.flatten    15.440k i/100ms
      Array#flat_map    37.631k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    156.260k (± 7.1%) i/s -    779.620k in   5.017555s
   Array#map.flatten    158.160k (± 6.3%) i/s -    802.880k in   5.097876s
      Array#flat_map    370.769k (± 5.9%) i/s -      1.882M in   5.093357s

Comparison:
      Array#flat_map:   370768.7 i/s
   Array#map.flatten:   158160.3 i/s - 2.34x  (± 0.00) slower
Array#map.flatten(1):   156259.7 i/s - 2.37x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   168.478k i/100ms
  Array#reverse_each     1.188M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.844M (± 6.0%) i/s -      9.266M in   5.042853s
  Array#reverse_each     12.061M (± 3.2%) i/s -     60.589M in   5.028477s

Comparison:
  Array#reverse_each: 12061107.5 i/s
  Array#reverse.each:  1844295.3 i/s - 6.54x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       488.745k i/100ms
   Enumerable#detect     2.917M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          5.689M (± 8.3%) i/s -    112.900M in  20.029984s
   Enumerable#detect     29.820M (± 4.9%) i/s -    595.012M in  20.003514s

Comparison:
   Enumerable#detect: 29820152.6 i/s
Enumerable#select.first:  5688794.4 i/s - 5.24x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       168.983k i/100ms
Enumerable#select.last
                       305.553k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.777M (± 6.4%) i/s -      8.956M in   5.062657s
Enumerable#select.last
                          3.092M (± 6.1%) i/s -     15.583M in   5.060870s

Comparison:
Enumerable#select.last:  3091524.0 i/s
Enumerable#reverse.detect:  1776583.0 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.373k i/100ms
  Enumerable#sort_by     2.569k i/100ms
     Enumerable#sort     2.624k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         24.266k (±16.5%) i/s -    111.531k in   5.030870s
  Enumerable#sort_by     24.265k (±17.0%) i/s -    110.467k in   5.047233s
     Enumerable#sort     32.467k (± 5.1%) i/s -    162.688k in   5.024736s

Comparison:
     Enumerable#sort:    32466.9 i/s
Enumerable#sort_by (Symbol#to_proc):    24266.4 i/s - 1.34x  (± 0.00) slower
  Enumerable#sort_by:    24265.2 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   363.857k i/100ms
Enumerable#sort_by...first
                         5.082k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      3.826M (± 3.8%) i/s -     19.284M in   5.047213s
Enumerable#sort_by...first
                         65.618k (± 6.1%) i/s -    330.330k in   5.053670s

Comparison:
   Enumerable#min_by:  3826106.9 i/s
Enumerable#sort_by...first:    65618.1 i/s - 58.31x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   274.847k i/100ms
            Hash#dup   297.994k i/100ms
Calculating -------------------------------------
              Hash[]      3.168M (± 7.1%) i/s -     15.941M in   5.058976s
            Hash#dup      3.134M (± 6.2%) i/s -     15.794M in   5.060164s

Comparison:
              Hash[]:  3168459.6 i/s
            Hash#dup:  3134462.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   169.571M i/100ms
  Hash#fetch, symbol   196.452M i/100ms
     Hash#[], string     5.070M i/100ms
  Hash#fetch, string     5.254M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.703B (± 4.3%) i/s -      8.648B in   5.086294s
  Hash#fetch, symbol      1.979B (± 4.5%) i/s -     10.019B in   5.074525s
     Hash#[], string     55.255M (± 5.3%) i/s -    278.832M in   5.060526s
  Hash#fetch, string     52.164M (± 6.2%) i/s -    262.713M in   5.055553s

Comparison:
  Hash#fetch, symbol: 1978574719.5 i/s
     Hash#[], symbol: 1703446933.6 i/s - 1.16x  (± 0.00) slower
     Hash#[], string: 55255490.7 i/s - 35.81x  (± 0.00) slower
  Hash#fetch, string: 52164361.0 i/s - 37.93x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    75.382M i/100ms
             Hash#[]    78.758M i/100ms
          Hash#[] ||    79.767M i/100ms
          Hash#[] &&    76.689M i/100ms
          Hash#fetch    75.748M i/100ms
 Hash#fetch fallback    72.452M i/100ms
Calculating -------------------------------------
            Hash#dig    701.392M (± 8.6%) i/s -      3.543B in   5.095125s
             Hash#[]    746.381M (± 6.3%) i/s -      3.780B in   5.088220s
          Hash#[] ||    769.800M (± 3.7%) i/s -      3.909B in   5.084401s
          Hash#[] &&    757.214M (± 4.8%) i/s -      3.834B in   5.075716s
          Hash#fetch    787.522M (± 5.0%) i/s -      3.939B in   5.014106s
 Hash#fetch fallback    772.236M (± 6.5%) i/s -      3.912B in   5.087911s

Comparison:
          Hash#fetch: 787521682.3 i/s
 Hash#fetch fallback: 772236018.1 i/s - same-ish: difference falls within error
          Hash#[] ||: 769800284.4 i/s - same-ish: difference falls within error
          Hash#[] &&: 757213723.0 i/s - same-ish: difference falls within error
             Hash#[]: 746381277.9 i/s - same-ish: difference falls within error
            Hash#dig: 701392351.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   201.601M i/100ms
  Hash#fetch + block   181.672M i/100ms
    Hash#fetch + arg   189.774M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.837B (± 3.1%) i/s -      9.274B in   5.052747s
  Hash#fetch + block      1.754B (± 5.5%) i/s -      8.902B in   5.088747s
    Hash#fetch + arg      1.887B (± 5.3%) i/s -      9.489B in   5.042391s

Comparison:
    Hash#fetch + arg: 1887169533.8 i/s
  Hash#fetch + const: 1837140002.4 i/s - same-ish: difference falls within error
  Hash#fetch + block: 1754474320.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    20.508k i/100ms
         sort + to_h    12.553k i/100ms
Calculating -------------------------------------
      sort_by + to_h    216.042k (±20.5%) i/s -      1.046M in   5.057106s
         sort + to_h     90.958k (± 6.8%) i/s -    464.461k in   5.130950s

Comparison:
      sort_by + to_h:   216041.7 i/s
         sort + to_h:    90958.2 i/s - 2.38x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   100.575k i/100ms
       Hash#each_key   119.024k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.169M (± 7.6%) i/s -      5.833M in   5.018606s
       Hash#each_key      1.260M (± 6.4%) i/s -      6.308M in   5.028384s

Comparison:
       Hash#each_key:  1260007.7 i/s
      Hash#keys.each:  1169492.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   117.000  i/100ms
           Hash#key?     2.438M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.921k (±14.1%) i/s -      9.360k in   5.029545s
           Hash#key?     24.608M (± 5.1%) i/s -    124.343M in   5.065605s

Comparison:
           Hash#key?: 24608130.5 i/s
  Hash#keys.include?:     1921.0 i/s - 12810.28x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    24.094k i/100ms
            Hash#[]=    30.636k i/100ms
Calculating -------------------------------------
         Hash#merge!    308.266k (± 7.4%) i/s -      1.542M in   5.033309s
            Hash#[]=    325.503k (± 7.0%) i/s -      1.624M in   5.015771s

Comparison:
            Hash#[]=:   325503.4 i/s
         Hash#merge!:   308265.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        13.594k i/100ms
      Hash#merge({})    11.568k i/100ms
 Hash#dup#merge!({})    20.304k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        236.442k (± 6.2%) i/s -      1.183M in   5.023347s
      Hash#merge({})    128.474k (± 5.5%) i/s -    647.808k in   5.058091s
 Hash#dup#merge!({})    203.706k (± 6.7%) i/s -      1.015M in   5.006307s

Comparison:
{}#merge!(Hash) do end:   236441.6 i/s
 Hash#dup#merge!({}):   203706.4 i/s - 1.16x  (± 0.00) slower
      Hash#merge({}):   128473.7 i/s - 1.84x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   194.621M i/100ms
          Hash#merge   181.954M i/100ms
Calculating -------------------------------------
        Hash#**other      1.969B (± 5.9%) i/s -      9.926B in   5.058314s
          Hash#merge      1.959B (± 5.0%) i/s -      9.826B in   5.028594s

Comparison:
        Hash#**other: 1968953120.0 i/s
          Hash#merge: 1959010065.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   523.000  i/100ms
         Hash#merge!    31.341k i/100ms
Calculating -------------------------------------
          Hash#merge      6.073k (± 9.7%) i/s -     30.334k in   5.046580s
         Hash#merge!    320.518k (± 6.7%) i/s -      1.630M in   5.110424s

Comparison:
         Hash#merge!:   320518.0 i/s
          Hash#merge:     6073.0 i/s - 52.78x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.020M i/100ms
Array#each             849.199k i/100ms
Array#each_w/_object   905.195k i/100ms
Hash#select-include      1.570M i/100ms
Calculating -------------------------------------
Hash#native-slice        10.681M (± 5.4%) i/s -     54.074M in   5.077899s
Array#each                8.586M (± 6.1%) i/s -     43.309M in   5.064165s
Array#each_w/_object      8.676M (± 5.7%) i/s -     43.449M in   5.024625s
Hash#select-include      15.608M (± 7.8%) i/s -     78.497M in   5.061417s

Comparison:
Hash#select-include : 15607609.6 i/s
Hash#native-slice   : 10681410.0 i/s - 1.46x  (± 0.00) slower
Array#each_w/_object:  8676338.1 i/s - 1.80x  (± 0.00) slower
Array#each          :  8586268.5 i/s - 1.82x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   152.000  i/100ms
         Hash#value?   530.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.620k (± 7.1%) i/s -      8.056k in   4.999517s
         Hash#value?      5.276k (± 4.8%) i/s -     26.500k in   5.034961s

Comparison:
         Hash#value?:     5276.4 i/s
Hash#values.include?:     1619.8 i/s - 3.26x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   186.831M i/100ms
                send   190.313M i/100ms
      method_missing   196.877M i/100ms
Calculating -------------------------------------
                call      2.001B (± 4.2%) i/s -     10.089B in   5.051817s
                send      2.025B (± 6.0%) i/s -     10.277B in   5.093954s
      method_missing      1.957B (± 4.8%) i/s -      9.844B in   5.043053s

Comparison:
                send: 2025096484.0 i/s
                call: 2000611756.5 i/s - same-ish: difference falls within error
      method_missing: 1956512958.6 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    33.036k i/100ms
      Symbol#to_proc    38.552k i/100ms
Calculating -------------------------------------
               Block    414.992k (± 4.8%) i/s -      2.081M in   5.027347s
      Symbol#to_proc    401.865k (± 4.0%) i/s -      2.043M in   5.092737s

Comparison:
               Block:   414992.4 i/s
      Symbol#to_proc:   401864.7 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   210.421M i/100ms
       block + yield   211.691M i/100ms
        unused block   210.618M i/100ms
               yield   220.408M i/100ms
Calculating -------------------------------------
          block.call      2.034B (± 5.4%) i/s -     10.311B in   5.084959s
       block + yield      2.106B (± 5.0%) i/s -     10.585B in   5.038446s
        unused block      2.104B (± 4.5%) i/s -     10.531B in   5.015427s
               yield      2.060B (± 4.6%) i/s -     10.359B in   5.038609s

Comparison:
       block + yield: 2106127772.1 i/s
        unused block: 2103949448.7 i/s - same-ish: difference falls within error
               yield: 2060389587.3 i/s - same-ish: difference falls within error
          block.call: 2033616666.0 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    36.889k i/100ms
      range#include?   145.000  i/100ms
       range#member?   194.000  i/100ms
       plain compare    41.785k i/100ms
Calculating -------------------------------------
        range#cover?    269.986k (±54.0%) i/s -    996.003k in   5.043220s
      range#include?      4.815k (±38.4%) i/s -     15.950k in   4.934493s
       range#member?      5.194k (±39.2%) i/s -     15.714k in   5.065698s
       plain compare    541.547k (±36.0%) i/s -      1.713M in   5.050133s

Comparison:
       plain compare:   541546.7 i/s
        range#cover?:   269986.2 i/s - same-ish: difference falls within error
       range#member?:     5193.6 i/s - 104.27x  (± 0.00) slower
      range#include?:     4815.5 i/s - 112.46x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     5.318M i/100ms
           String#=~     8.109M i/100ms
          Regexp#===     8.102M i/100ms
        String#match     6.704M i/100ms
Calculating -------------------------------------
       String#match?     57.277M (± 7.7%) i/s -    287.150M in   5.044839s
           String#=~     81.834M (± 4.3%) i/s -    413.544M in   5.062754s
          Regexp#===     80.839M (± 4.8%) i/s -    405.108M in   5.023149s
        String#match     63.622M (± 6.1%) i/s -    321.776M in   5.076986s

Comparison:
           String#=~: 81833861.1 i/s
          Regexp#===: 80838893.4 i/s - same-ish: difference falls within error
        String#match: 63622237.8 i/s - 1.29x  (± 0.00) slower
       String#match?: 57276613.3 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.582M i/100ms
      String#casecmp     3.210M i/100ms
Calculating -------------------------------------
String#downcase + ==     17.383M (± 7.5%) i/s -     87.034M in   5.035221s
      String#casecmp     28.259M (± 3.7%) i/s -    141.243M in   5.005068s

Comparison:
      String#casecmp: 28258648.6 i/s
String#downcase + ==: 17383477.9 i/s - 1.63x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+   194.677M i/100ms
       String#concat   197.567M i/100ms
       String#append   194.401M i/100ms
         "foo" "bar"   198.222M i/100ms
  "#{'foo'}#{'bar'}"   202.196M i/100ms
Calculating -------------------------------------
            String#+      2.020B (± 4.0%) i/s -     10.123B in   5.018498s
       String#concat      1.960B (± 3.8%) i/s -      9.878B in   5.046721s
       String#append      1.998B (± 4.0%) i/s -     10.109B in   5.068183s
         "foo" "bar"      1.929B (± 4.2%) i/s -      9.713B in   5.043925s
  "#{'foo'}#{'bar'}"      1.915B (± 3.5%) i/s -      9.705B in   5.074009s

Comparison:
            String#+: 2020407381.3 i/s
       String#append: 1997755989.2 i/s - same-ish: difference falls within error
       String#concat: 1960153743.9 i/s - same-ish: difference falls within error
         "foo" "bar": 1928933104.1 i/s - same-ish: difference falls within error
  "#{'foo'}#{'bar'}": 1915082235.2 i/s - same-ish: difference falls within error

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   188.824M i/100ms
          String#dup   199.184M i/100ms
Calculating -------------------------------------
           String#+@      1.985B (± 5.0%) i/s -     10.008B in   5.055110s
          String#dup      2.009B (± 5.7%) i/s -     10.158B in   5.072546s

Comparison:
          String#dup: 2009213636.4 i/s
           String#+@: 1984780374.8 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.666M i/100ms
       String#match?     1.898M i/100ms
    String#end_with?    16.373M i/100ms
Calculating -------------------------------------
           String#=~     17.062M (± 6.5%) i/s -     84.967M in   5.001826s
       String#match?     19.928M (± 7.6%) i/s -    100.616M in   5.080041s
    String#end_with?    163.295M (± 6.2%) i/s -    818.643M in   5.033557s

Comparison:
    String#end_with?: 163294868.9 i/s
       String#match?: 19928455.1 i/s - 8.19x  (± 0.00) slower
           String#=~: 17062067.6 i/s - 9.57x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    94.031k i/100ms
          String#sub     2.070M i/100ms
String#dup["string"]=
                        16.495M i/100ms
Calculating -------------------------------------
         String#gsub      1.341M (± 6.0%) i/s -      6.676M in   4.998108s
          String#sub     21.140M (± 6.2%) i/s -    105.572M in   5.013932s
String#dup["string"]=
                        166.545M (± 5.5%) i/s -    841.238M in   5.066407s

Comparison:
String#dup["string"]=: 166545353.2 i/s
          String#sub: 21139545.5 i/s - 7.88x  (± 0.00) slower
         String#gsub:  1340529.8 i/s - 124.24x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   255.337k i/100ms
           String#tr   119.878k i/100ms
Calculating -------------------------------------
         String#gsub      2.823M (± 8.6%) i/s -     14.044M in   5.014510s
           String#tr      1.200M (± 6.9%) i/s -      5.994M in   5.020123s

Comparison:
         String#gsub:  2823055.2 i/s
           String#tr:  1200364.3 i/s - 2.35x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   201.754M i/100ms
         With Freeze   190.238M i/100ms
Calculating -------------------------------------
      Without Freeze      1.996B (± 5.6%) i/s -     10.088B in   5.071570s
         With Freeze      1.971B (± 4.5%) i/s -      9.892B in   5.030075s

Comparison:
      Without Freeze: 1995538557.9 i/s
         With Freeze: 1970655610.5 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     8.137k i/100ms
      String#squeeze    55.058k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    108.230k (± 9.6%) i/s -    537.042k in   5.011265s
      String#squeeze    549.184k (± 7.1%) i/s -      2.753M in   5.039715s

Comparison:
      String#squeeze:   549183.7 i/s
 String#gsub/regex+/:   108230.2 i/s - 5.07x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     3.047M i/100ms
       String#match?     3.540M i/100ms
  String#start_with?     1.966M i/100ms
Calculating -------------------------------------
           String#=~     34.106M (± 8.1%) i/s -    170.657M in   5.041302s
       String#match?     35.136M (± 8.6%) i/s -    176.980M in   5.075241s
  String#start_with?     19.775M (± 6.7%) i/s -    100.258M in   5.092995s

Comparison:
       String#match?: 35136132.3 i/s
           String#=~: 34105933.7 i/s - same-ish: difference falls within error
  String#start_with?: 19775207.6 i/s - 1.78x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   302.412k i/100ms
    String#[0, n] ==   224.348k i/100ms
   String#[RANGE] ==   225.402k i/100ms
   String#[0...n] ==   172.318k i/100ms
Calculating -------------------------------------
  String#start_with?      3.580M (± 7.8%) i/s -     17.842M in   5.016295s
    String#[0, n] ==      2.287M (± 8.0%) i/s -     11.442M in   5.038767s
   String#[RANGE] ==      2.477M (± 6.3%) i/s -     12.397M in   5.025627s
   String#[0...n] ==      1.802M (± 4.0%) i/s -      9.133M in   5.076997s

Comparison:
  String#start_with?:  3579984.3 i/s
   String#[RANGE] ==:  2477438.1 i/s - 1.45x  (± 0.00) slower
    String#[0, n] ==:  2286777.7 i/s - 1.57x  (± 0.00) slower
   String#[0...n] ==:  1801826.2 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    16.306M i/100ms
 String#sub!'string'     3.080M i/100ms
String#gsub!'string'   108.176k i/100ms
  String#[/regexp/]=     4.361M i/100ms
 String#sub!/regexp/     2.659M i/100ms
String#gsub!/regexp/   677.986k i/100ms
Calculating -------------------------------------
  String#['string']=    154.935M (± 4.4%) i/s -    782.686M in   5.061741s
 String#sub!'string'      8.908M (±26.1%) i/s -     40.044M in   5.249352s
String#gsub!'string'      1.390M (± 6.8%) i/s -      6.923M in   5.009681s
  String#[/regexp/]=     43.381M (± 3.7%) i/s -    218.059M in   5.033368s
 String#sub!/regexp/     28.833M (± 6.5%) i/s -    146.233M in   5.094524s
String#gsub!/regexp/      6.967M (± 7.7%) i/s -     35.255M in   5.093176s

Comparison:
  String#['string']=: 154934546.3 i/s
  String#[/regexp/]=: 43381102.7 i/s - 3.57x  (± 0.00) slower
 String#sub!/regexp/: 28832932.5 i/s - 5.37x  (± 0.00) slower
 String#sub!'string':  8908032.4 i/s - 17.39x  (± 0.00) slower
String#gsub!/regexp/:  6966502.9 i/s - 22.24x  (± 0.00) slower
String#gsub!'string':  1389829.8 i/s - 111.48x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.866M i/100ms
        String#chomp     4.409M i/100ms
String#delete_suffix     5.666M i/100ms
Calculating -------------------------------------
          String#sub     32.777M (± 8.2%) i/s -    164.251M in   5.049954s
        String#chomp     44.671M (± 7.1%) i/s -    224.869M in   5.059779s
String#delete_suffix     55.921M (± 4.9%) i/s -    283.290M in   5.078357s

Comparison:
String#delete_suffix: 55920591.7 i/s
        String#chomp: 44671483.5 i/s - 1.25x  (± 0.00) slower
          String#sub: 32776549.2 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix     2.449M i/100ms
          String#sub    10.297M i/100ms
Calculating -------------------------------------
String#delete_prefix     25.322M (± 7.7%) i/s -    127.346M in   5.061141s
          String#sub    102.482M (± 4.0%) i/s -    514.862M in   5.032203s

Comparison:
          String#sub: 102481782.1 i/s
String#delete_prefix: 25322097.5 i/s - 4.05x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.470M i/100ms
    String#unpack[0]     1.576M i/100ms
Calculating -------------------------------------
      String#unpack1     15.617M (± 7.4%) i/s -     77.908M in   5.018616s
    String#unpack[0]     14.928M (± 6.1%) i/s -     75.631M in   5.085726s

Comparison:
      String#unpack1: 15617133.9 i/s
    String#unpack[0]: 14928450.2 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.1.0-dev-cc5717a5, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    10.082k i/100ms
          Time.parse    45.000  i/100ms
Calculating -------------------------------------
        Time.iso8601     40.081k (± 3.3%) i/s -    201.640k in   5.036361s
          Time.parse      3.010k (±22.4%) i/s -     12.105k in   4.997063s

Comparison:
        Time.iso8601:    40080.7 i/s
          Time.parse:     3009.9 i/s - 13.32x  (± 0.00) slower

