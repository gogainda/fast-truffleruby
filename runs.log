$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       238.172M i/100ms
Function with splat arguments
                       516.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          2.387B (± 0.3%) i/s -     12.147B in   5.089110s
Function with splat arguments
                          5.767k (± 4.5%) i/s -     28.896k in   5.021403s

Comparison:
Function with single Array argument: 2386827569.2 i/s
Function with splat arguments:     5766.8 i/s - 413894.65x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   238.324M i/100ms
Sequential Assignment
                       238.859M i/100ms
Calculating -------------------------------------
 Parallel Assignment      2.387B (± 0.3%) i/s -     12.155B in   5.092706s
Sequential Assignment
                          2.389B (± 0.2%) i/s -     12.182B in   5.098520s

Comparison:
Sequential Assignment: 2389296066.2 i/s
 Parallel Assignment: 2386674614.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   238.703M i/100ms
       attr_accessor   238.563M i/100ms
Calculating -------------------------------------
   getter_and_setter      2.387B (± 0.3%) i/s -     11.935B in   4.999504s
       attr_accessor      2.389B (± 0.2%) i/s -     12.167B in   5.092708s

Comparison:
       attr_accessor: 2389058906.1 i/s
   getter_and_setter: 2387285480.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     7.308k i/100ms
         respond_to?   239.047M i/100ms
Calculating -------------------------------------
      begin...rescue     50.762k (± 2.8%) i/s -    255.780k in   5.042813s
         respond_to?      2.388B (± 0.2%) i/s -     11.952B in   5.004359s

Comparison:
         respond_to?: 2388403473.4 i/s
      begin...rescue:    50761.9 i/s - 47051.07x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   238.427M i/100ms
             &method   238.898M i/100ms
Calculating -------------------------------------
              normal      2.386B (± 0.4%) i/s -     12.160B in   5.096005s
             &method      2.389B (± 0.2%) i/s -     12.184B in   5.099598s

Comparison:
             &method: 2389175352.7 i/s
              normal: 2386172567.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        88.000  i/100ms
       define_method   123.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.455k (±54.0%) i/s -      4.048k in   5.073046s
       define_method      3.150k (±58.6%) i/s -      5.904k in   6.511345s

Comparison:
       define_method:     3150.3 i/s
module_eval with string:     1454.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    31.971k i/100ms
       Kernel#format    46.285k i/100ms
            String#%    46.806k i/100ms
Calculating -------------------------------------
         Float#round    341.918k (± 3.0%) i/s -      1.726M in   5.054106s
       Kernel#format    450.957k (± 1.8%) i/s -      2.268M in   5.031079s
            String#%    462.396k (± 1.9%) i/s -      2.340M in   5.063286s

Comparison:
            String#%:   462396.5 i/s
       Kernel#format:   450956.8 i/s - same-ish: difference falls within error
         Float#round:   341917.8 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   238.612M i/100ms
          OpenStruct   238.880M i/100ms
Calculating -------------------------------------
                Hash      2.386B (± 0.3%) i/s -     11.931B in   4.999532s
          OpenStruct      2.389B (± 0.2%) i/s -     12.183B in   5.099092s

Comparison:
          OpenStruct: 2389231717.3 i/s
                Hash: 2386365118.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   238.841M i/100ms
          OpenStruct     2.512k i/100ms
Calculating -------------------------------------
                Hash      2.381B (± 0.4%) i/s -     11.942B in   5.015928s
          OpenStruct     27.238k (±12.5%) i/s -    133.136k in   5.027646s

Comparison:
                Hash: 2380873038.6 i/s
          OpenStruct:    27237.6 i/s - 87411.15x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   673.601k i/100ms
  ancestors.include?   113.674k i/100ms
Calculating -------------------------------------
  less than or equal      7.391M (± 3.3%) i/s -     37.048M in   5.018239s
  ancestors.include?      1.149M (± 4.1%) i/s -      5.797M in   5.052188s

Comparison:
  less than or equal:  7391004.0 i/s
  ancestors.include?:  1149444.5 i/s - 6.43x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     2.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     23.835  (± 0.0%) i/s -    120.000  in   5.035149s
         Kernel loop      5.553  (± 0.0%) i/s -     28.000  in   5.042145s

Comparison:
          While Loop:       23.8 i/s
         Kernel loop:        5.6 i/s - 4.29x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   238.384M i/100ms
         Array#first   238.327M i/100ms
Calculating -------------------------------------
           Array#[0]      2.383B (± 0.6%) i/s -     11.919B in   5.001155s
         Array#first      2.389B (± 0.2%) i/s -     12.155B in   5.087923s

Comparison:
         Array#first: 2388936264.2 i/s
           Array#[0]: 2383366669.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   238.761M i/100ms
          Array#last   238.651M i/100ms
Calculating -------------------------------------
          Array#[-1]      2.386B (± 0.4%) i/s -     11.938B in   5.004195s
          Array#last      2.389B (± 0.2%) i/s -     12.171B in   5.094911s

Comparison:
          Array#last: 2388910230.6 i/s
          Array#[-1]: 2385637128.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   430.570k i/100ms
Calculating -------------------------------------
                find     13.406  (±14.9%) i/s -     29.000  in   5.038582s
             bsearch      4.309M (± 3.4%) i/s -     21.529M in   5.002780s

Comparison:
             bsearch:  4308712.3 i/s
                find:       13.4 i/s - 321391.12x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.124  (± 0.0%) i/s -      1.000  in   8.085157s
        Array#insert      0.942  (± 0.0%) i/s -      5.000  in   5.309605s

Comparison:
        Array#insert:        0.9 i/s
       Array#unshift:        0.1 i/s - 7.61x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   238.294M i/100ms
          Array#size   238.407M i/100ms
         Array#count   239.033M i/100ms
Calculating -------------------------------------
        Array#length      2.386B (± 0.3%) i/s -     12.153B in   5.092723s
          Array#size      2.389B (± 0.2%) i/s -     12.159B in   5.090317s
         Array#count      2.388B (± 0.3%) i/s -     11.952B in   5.004604s

Comparison:
          Array#size: 2388615484.3 i/s
         Array#count: 2388148157.8 i/s - same-ish: difference falls within error
        Array#length: 2386362265.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    18.936k i/100ms
        Array#sample     2.223M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    216.912k (± 2.4%) i/s -      1.098M in   5.066507s
        Array#sample     22.329M (± 0.1%) i/s -    113.350M in   5.076414s

Comparison:
        Array#sample: 22328779.3 i/s
 Array#shuffle.first:   216912.3 i/s - 102.94x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   373.000  i/100ms
          Date.parse   109.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     10.895k (±36.3%) i/s -     44.014k in   5.011240s
          Date.parse      4.477k (±37.8%) i/s -     18.094k in   5.114523s

Comparison:
        Date.iso8601:    10895.1 i/s
          Date.parse:     4476.5 i/s - 2.43x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   122.750k i/100ms
           Array#map   552.842k i/100ms
Calculating -------------------------------------
   Array#each + push      1.284M (± 3.6%) i/s -      6.506M in   5.073386s
           Array#map      5.315M (± 5.5%) i/s -     26.536M in   5.007650s

Comparison:
           Array#map:  5315454.2 i/s
   Array#each + push:  1284052.6 i/s - 4.14x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     9.938M i/100ms
               #each    13.803M i/100ms
Calculating -------------------------------------
            For loop     99.481M (± 0.1%) i/s -    506.853M in   5.094986s
               #each    141.925M (± 0.7%) i/s -    717.760M in   5.057595s

Comparison:
               #each: 141924662.1 i/s
            For loop: 99480873.6 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   697.165k i/100ms
     each_with_index     1.242M i/100ms
Calculating -------------------------------------
          While Loop      6.979M (± 0.1%) i/s -     35.555M in   5.094270s
     each_with_index     12.421M (± 0.1%) i/s -     62.123M in   5.001560s

Comparison:
     each_with_index: 12420791.3 i/s
          While Loop:  6979493.2 i/s - 1.78x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   147.057k i/100ms
      inject to_proc   147.832k i/100ms
        inject block   147.965k i/100ms
Calculating -------------------------------------
       inject symbol      1.478M (± 0.0%) i/s -      7.500M in   5.073675s
      inject to_proc      1.478M (± 0.0%) i/s -      7.539M in   5.099924s
        inject block      1.479M (± 0.0%) i/s -      7.398M in   5.001029s

Comparison:
        inject block:  1479345.8 i/s
      inject to_proc:  1478342.2 i/s - same-ish: difference falls within error
       inject symbol:  1478200.4 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     8.848k i/100ms
   Array#map.flatten    10.361k i/100ms
      Array#flat_map    29.206k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    104.496k (± 3.7%) i/s -    522.032k in   5.003250s
   Array#map.flatten    104.590k (± 3.2%) i/s -    528.411k in   5.057758s
      Array#flat_map    293.581k (± 2.7%) i/s -      1.490M in   5.077733s

Comparison:
      Array#flat_map:   293580.5 i/s
   Array#map.flatten:   104589.9 i/s - 2.81x  (± 0.00) slower
Array#map.flatten(1):   104495.5 i/s - 2.81x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   150.171k i/100ms
  Array#reverse_each   911.086k i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.743M (± 3.5%) i/s -      8.710M in   5.003331s
  Array#reverse_each      9.111M (± 0.0%) i/s -     45.554M in   4.999976s

Comparison:
  Array#reverse_each:  9110905.8 i/s
  Array#reverse.each:  1743098.0 i/s - 5.23x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       546.094k i/100ms
   Enumerable#detect     3.927M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          6.115M (± 5.9%) i/s -    121.779M in  20.018184s
   Enumerable#detect     39.292M (± 0.2%) i/s -    789.342M in  20.089248s

Comparison:
   Enumerable#detect: 39291946.4 i/s
Enumerable#select.first:  6115165.8 i/s - 6.43x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       156.687k i/100ms
Enumerable#select.last
                       315.571k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.629M (± 3.0%) i/s -      8.148M in   5.005195s
Enumerable#select.last
                          3.216M (± 3.5%) i/s -     16.094M in   5.010813s

Comparison:
Enumerable#select.last:  3215845.1 i/s
Enumerable#reverse.detect:  1629443.8 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.165k i/100ms
  Enumerable#sort_by     2.392k i/100ms
     Enumerable#sort     2.487k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         21.816k (±17.2%) i/s -     99.590k in   5.030869s
  Enumerable#sort_by     22.071k (±18.0%) i/s -     98.072k in   5.006479s
     Enumerable#sort     29.920k (± 2.0%) i/s -    151.707k in   5.072788s

Comparison:
     Enumerable#sort:    29920.1 i/s
  Enumerable#sort_by:    22070.6 i/s - 1.36x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    21816.5 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   315.689k i/100ms
Enumerable#sort_by...first
                         4.526k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      3.158M (± 0.1%) i/s -     16.100M in   5.097954s
Enumerable#sort_by...first
                         56.966k (± 3.4%) i/s -    285.138k in   5.011727s

Comparison:
   Enumerable#min_by:  3158161.4 i/s
Enumerable#sort_by...first:    56965.9 i/s - 55.44x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   178.577k i/100ms
            Hash#dup   187.964k i/100ms
Calculating -------------------------------------
              Hash[]      1.894M (± 4.3%) i/s -      9.465M in   5.007236s
            Hash#dup      1.893M (± 3.6%) i/s -      9.586M in   5.070968s

Comparison:
              Hash[]:  1893910.5 i/s
            Hash#dup:  1893009.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   238.332M i/100ms
  Hash#fetch, symbol   238.319M i/100ms
     Hash#[], string     4.462M i/100ms
  Hash#fetch, string     4.137M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      2.388B (± 0.2%) i/s -     12.155B in   5.089748s
  Hash#fetch, symbol      2.387B (± 0.5%) i/s -     12.154B in   5.092775s
     Hash#[], string     44.642M (± 0.6%) i/s -    227.585M in   5.098207s
  Hash#fetch, string     41.366M (± 0.3%) i/s -    206.853M in   5.000630s

Comparison:
     Hash#[], symbol: 2388135050.7 i/s
  Hash#fetch, symbol: 2386624597.0 i/s - same-ish: difference falls within error
     Hash#[], string: 44642016.8 i/s - 53.50x  (± 0.00) slower
  Hash#fetch, string: 41365901.8 i/s - 57.73x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    59.731M i/100ms
             Hash#[]    67.691M i/100ms
          Hash#[] ||    67.732M i/100ms
          Hash#[] &&    67.722M i/100ms
          Hash#fetch    67.735M i/100ms
 Hash#fetch fallback    67.739M i/100ms
Calculating -------------------------------------
            Hash#dig    676.705M (± 0.3%) i/s -      3.405B in   5.031256s
             Hash#[]    676.913M (± 0.2%) i/s -      3.385B in   5.000005s
          Hash#[] ||    676.804M (± 0.2%) i/s -      3.387B in   5.003825s
          Hash#[] &&    676.977M (± 0.1%) i/s -      3.386B in   5.001824s
          Hash#fetch    677.107M (± 0.1%) i/s -      3.387B in   5.001836s
 Hash#fetch fallback    676.950M (± 0.2%) i/s -      3.387B in   5.003248s

Comparison:
          Hash#fetch: 677107017.6 i/s
          Hash#[] &&: 676976867.7 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 676950265.6 i/s - same-ish: difference falls within error
             Hash#[]: 676912633.5 i/s - same-ish: difference falls within error
          Hash#[] ||: 676804486.3 i/s - same-ish: difference falls within error
            Hash#dig: 676705196.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   270.491M i/100ms
  Hash#fetch + block   270.394M i/100ms
    Hash#fetch + arg   270.896M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      2.707B (± 0.2%) i/s -     13.795B in   5.096555s
  Hash#fetch + block      2.707B (± 0.2%) i/s -     13.790B in   5.094114s
    Hash#fetch + arg      2.707B (± 0.3%) i/s -     13.545B in   5.004442s

Comparison:
  Hash#fetch + block: 2707078140.4 i/s
  Hash#fetch + const: 2706755048.6 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 2706576648.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    17.715k i/100ms
         sort + to_h    10.863k i/100ms
Calculating -------------------------------------
      sort_by + to_h    182.892k (±16.2%) i/s -    903.465k in   5.075377s
         sort + to_h    113.569k (± 4.0%) i/s -    575.739k in   5.078142s

Comparison:
      sort_by + to_h:   182892.0 i/s
         sort + to_h:   113569.4 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   108.267k i/100ms
       Hash#each_key   129.537k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.185M (± 4.0%) i/s -      5.955M in   5.035099s
       Hash#each_key      1.320M (± 4.1%) i/s -      6.606M in   5.014807s

Comparison:
       Hash#each_key:  1319692.1 i/s
      Hash#keys.each:  1184723.1 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   159.000  i/100ms
           Hash#key?     2.822M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.877k (±12.0%) i/s -      9.222k in   5.004875s
           Hash#key?     29.972M (± 0.4%) i/s -    152.400M in   5.084834s

Comparison:
           Hash#key?: 29971862.2 i/s
  Hash#keys.include?:     1876.6 i/s - 15971.46x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    18.931k i/100ms
            Hash#[]=    22.406k i/100ms
Calculating -------------------------------------
         Hash#merge!    214.362k (± 3.4%) i/s -      1.079M in   5.040067s
            Hash#[]=    222.044k (± 6.8%) i/s -      1.120M in   5.077469s

Comparison:
            Hash#[]=:   222044.2 i/s
         Hash#merge!:   214361.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         9.662k i/100ms
      Hash#merge({})     7.236k i/100ms
 Hash#dup#merge!({})    11.832k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        112.057k (± 4.1%) i/s -    560.396k in   5.010335s
      Hash#merge({})     73.516k (± 3.7%) i/s -    369.036k in   5.027132s
 Hash#dup#merge!({})    119.481k (± 3.4%) i/s -    603.432k in   5.056849s

Comparison:
 Hash#dup#merge!({}):   119480.9 i/s
{}#merge!(Hash) do end:   112056.7 i/s - same-ish: difference falls within error
      Hash#merge({}):    73516.0 i/s - 1.63x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   238.305M i/100ms
          Hash#merge   239.046M i/100ms
Calculating -------------------------------------
        Hash#**other      2.387B (± 0.4%) i/s -     12.154B in   5.092132s
          Hash#merge      2.388B (± 0.5%) i/s -     11.952B in   5.006129s

Comparison:
          Hash#merge: 2387589867.3 i/s
        Hash#**other: 2386763367.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   267.000  i/100ms
         Hash#merge!    20.584k i/100ms
Calculating -------------------------------------
          Hash#merge      3.090k (± 4.4%) i/s -     15.486k in   5.022449s
         Hash#merge!    209.904k (± 3.4%) i/s -      1.050M in   5.007258s

Comparison:
         Hash#merge!:   209904.0 i/s
          Hash#merge:     3089.7 i/s - 67.94x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.065M i/100ms
Array#each             881.105k i/100ms
Array#each_w/_object   877.667k i/100ms
Hash#select-include      1.160M i/100ms
Calculating -------------------------------------
Hash#native-slice        11.183M (± 3.7%) i/s -     56.457M in   5.056105s
Array#each                8.825M (± 3.0%) i/s -     44.936M in   5.097234s
Array#each_w/_object      8.833M (± 3.1%) i/s -     44.761M in   5.073116s
Hash#select-include      11.568M (± 3.2%) i/s -     58.006M in   5.019987s

Comparison:
Hash#select-include : 11567820.5 i/s
Hash#native-slice   : 11182514.5 i/s - same-ish: difference falls within error
Array#each_w/_object:  8832540.2 i/s - 1.31x  (± 0.00) slower
Array#each          :  8824849.0 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   176.000  i/100ms
         Hash#value?   419.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.771k (±11.5%) i/s -      8.800k in   5.065733s
         Hash#value?      4.184k (± 0.3%) i/s -     20.950k in   5.006682s

Comparison:
         Hash#value?:     4184.4 i/s
Hash#values.include?:     1770.6 i/s - 2.36x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   238.561M i/100ms
                send   239.058M i/100ms
      method_missing   239.087M i/100ms
Calculating -------------------------------------
                call      2.386B (± 0.4%) i/s -     11.928B in   4.999444s
                send      2.388B (± 0.3%) i/s -     11.953B in   5.006382s
      method_missing      2.389B (± 0.2%) i/s -     11.954B in   5.004424s

Comparison:
      method_missing: 2388762062.9 i/s
                send: 2387557820.0 i/s - same-ish: difference falls within error
                call: 2385913961.9 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    15.354k i/100ms
      Symbol#to_proc    16.645k i/100ms
Calculating -------------------------------------
               Block    173.623k (± 3.5%) i/s -    875.178k in   5.047429s
      Symbol#to_proc    169.593k (± 3.0%) i/s -    848.895k in   5.010376s

Comparison:
               Block:   173623.0 i/s
      Symbol#to_proc:   169593.4 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   238.908M i/100ms
       block + yield   270.636M i/100ms
        unused block   270.975M i/100ms
               yield   269.851M i/100ms
Calculating -------------------------------------
          block.call      2.706B (± 0.3%) i/s -     13.618B in   5.032495s
       block + yield      2.707B (± 0.3%) i/s -     13.802B in   5.098829s
        unused block      2.707B (± 0.2%) i/s -     13.549B in   5.005313s
               yield      2.708B (± 0.2%) i/s -     13.762B in   5.082513s

Comparison:
               yield: 2707803014.4 i/s
       block + yield: 2707009233.2 i/s - same-ish: difference falls within error
        unused block: 2706888675.6 i/s - same-ish: difference falls within error
          block.call: 2705984635.9 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    56.117k i/100ms
      range#include?   259.000  i/100ms
       range#member?   223.000  i/100ms
       plain compare     6.048k i/100ms
Calculating -------------------------------------
        range#cover?    225.219k (±34.4%) i/s -      1.010M in   5.100934s
      range#include?      5.715k (±33.7%) i/s -     20.202k in   5.261534s
       range#member?      5.002k (±41.5%) i/s -     12.488k in   5.004453s
       plain compare    369.807k (±46.6%) i/s -      1.028M in   5.005435s

Comparison:
       plain compare:   369807.1 i/s
        range#cover?:   225218.6 i/s - same-ish: difference falls within error
      range#include?:     5714.7 i/s - 64.71x  (± 0.00) slower
       range#member?:     5001.7 i/s - 73.94x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     3.185M i/100ms
           String#=~     5.190M i/100ms
          Regexp#===     4.896M i/100ms
        String#match     3.738M i/100ms
Calculating -------------------------------------
       String#match?     33.669M (± 4.2%) i/s -    168.783M in   5.022563s
           String#=~     52.019M (± 0.3%) i/s -    264.700M in   5.088571s
          Regexp#===     48.967M (± 0.1%) i/s -    249.717M in   5.099685s
        String#match     37.357M (± 0.2%) i/s -    186.902M in   5.003119s

Comparison:
           String#=~: 52019174.6 i/s
          Regexp#===: 48967248.0 i/s - 1.06x  (± 0.00) slower
        String#match: 37357190.6 i/s - 1.39x  (± 0.00) slower
       String#match?: 33668947.1 i/s - 1.55x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.044M i/100ms
      String#casecmp     3.354M i/100ms
Calculating -------------------------------------
String#downcase + ==     12.563M (± 4.7%) i/s -     62.668M in   4.999730s
      String#casecmp     29.381M (± 0.1%) i/s -    147.563M in   5.022317s

Comparison:
      String#casecmp: 29381433.4 i/s
String#downcase + ==: 12562842.8 i/s - 2.34x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+   238.197M i/100ms
       String#concat   270.454M i/100ms
       String#append   271.018M i/100ms
         "foo" "bar"   270.747M i/100ms
  "#{'foo'}#{'bar'}"   270.921M i/100ms
Calculating -------------------------------------
            String#+      2.707B (± 0.3%) i/s -     13.577B in   5.016401s
       String#concat      2.709B (± 0.2%) i/s -     13.793B in   5.092375s
       String#append      2.706B (± 0.4%) i/s -     13.551B in   5.008391s
         "foo" "bar"      2.708B (± 0.2%) i/s -     13.808B in   5.098580s
  "#{'foo'}#{'bar'}"      2.708B (± 0.2%) i/s -     13.546B in   5.001920s

Comparison:
       String#concat: 2708598179.5 i/s
         "foo" "bar": 2708229147.9 i/s - same-ish: difference falls within error
  "#{'foo'}#{'bar'}": 2708175701.6 i/s - same-ish: difference falls within error
            String#+: 2706584961.8 i/s - same-ish: difference falls within error
       String#append: 2705692023.4 i/s - same-ish: difference falls within error

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   238.108M i/100ms
          String#dup   238.515M i/100ms
Calculating -------------------------------------
           String#+@      2.386B (± 0.3%) i/s -     12.143B in   5.089337s
          String#dup      2.388B (± 0.2%) i/s -     12.164B in   5.093903s

Comparison:
          String#dup: 2388014368.9 i/s
           String#+@: 2386085979.8 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.493M i/100ms
       String#match?     1.357M i/100ms
    String#end_with?    16.071M i/100ms
Calculating -------------------------------------
           String#=~     14.935M (± 3.0%) i/s -     74.652M in   5.003276s
       String#match?     14.101M (± 3.2%) i/s -     70.539M in   5.008049s
    String#end_with?    160.283M (± 0.4%) i/s -    803.532M in   5.013282s

Comparison:
    String#end_with?: 160282774.4 i/s
           String#=~: 14934506.8 i/s - 10.73x  (± 0.00) slower
       String#match?: 14100569.2 i/s - 11.37x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   118.443k i/100ms
          String#sub     1.568M i/100ms
String#dup["string"]=
                        16.769M i/100ms
Calculating -------------------------------------
         String#gsub      1.232M (± 2.3%) i/s -      6.159M in   5.003447s
          String#sub     15.406M (± 2.4%) i/s -     78.380M in   5.090825s
String#dup["string"]=
                        167.511M (± 0.5%) i/s -    838.451M in   5.005465s

Comparison:
String#dup["string"]=: 167511111.2 i/s
          String#sub: 15405844.5 i/s - 10.87x  (± 0.00) slower
         String#gsub:  1231637.4 i/s - 136.01x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   199.807k i/100ms
           String#tr   116.568k i/100ms
Calculating -------------------------------------
         String#gsub      2.095M (± 4.2%) i/s -     10.590M in   5.063539s
           String#tr      1.171M (± 3.6%) i/s -      5.945M in   5.082902s

Comparison:
         String#gsub:  2095324.7 i/s
           String#tr:  1171214.8 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   270.476M i/100ms
         With Freeze   270.440M i/100ms
Calculating -------------------------------------
      Without Freeze      2.705B (± 0.6%) i/s -     13.524B in   5.000580s
         With Freeze      2.708B (± 0.2%) i/s -     13.792B in   5.092767s

Comparison:
         With Freeze: 2708248357.1 i/s
      Without Freeze: 2704559041.0 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     4.769k i/100ms
      String#squeeze    53.359k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     63.472k (± 3.9%) i/s -    319.523k in   5.042157s
      String#squeeze    594.502k (± 2.7%) i/s -      2.988M in   5.030379s

Comparison:
      String#squeeze:   594501.9 i/s
 String#gsub/regex+/:    63471.6 i/s - 9.37x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     2.666M i/100ms
       String#match?     1.932M i/100ms
  String#start_with?     1.368M i/100ms
Calculating -------------------------------------
           String#=~     27.202M (± 2.4%) i/s -    135.958M in   5.001342s
       String#match?     19.721M (± 3.2%) i/s -     98.510M in   5.000455s
  String#start_with?     13.848M (± 2.9%) i/s -     69.753M in   5.041925s

Comparison:
           String#=~: 27201572.9 i/s
       String#match?: 19721331.3 i/s - 1.38x  (± 0.00) slower
  String#start_with?: 13847648.9 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   282.885k i/100ms
    String#[0, n] ==   166.212k i/100ms
   String#[RANGE] ==   176.715k i/100ms
   String#[0...n] ==   127.603k i/100ms
Calculating -------------------------------------
  String#start_with?      3.189M (± 3.5%) i/s -     16.124M in   5.063579s
    String#[0, n] ==      1.689M (± 3.7%) i/s -      8.477M in   5.026409s
   String#[RANGE] ==      1.788M (± 3.9%) i/s -      9.012M in   5.048769s
   String#[0...n] ==      1.297M (± 2.9%) i/s -      6.508M in   5.023323s

Comparison:
  String#start_with?:  3188688.3 i/s
   String#[RANGE] ==:  1788046.1 i/s - 1.78x  (± 0.00) slower
    String#[0, n] ==:  1688837.3 i/s - 1.89x  (± 0.00) slower
   String#[0...n] ==:  1296723.1 i/s - 2.46x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    17.813M i/100ms
 String#sub!'string'     1.727M i/100ms
String#gsub!'string'   116.871k i/100ms
  String#[/regexp/]=     2.645M i/100ms
 String#sub!/regexp/     1.623M i/100ms
String#gsub!/regexp/   461.497k i/100ms
Calculating -------------------------------------
  String#['string']=    178.206M (± 0.1%) i/s -    908.452M in   5.097757s
 String#sub!'string'      5.525M (±22.8%) i/s -     25.907M in   5.275368s
String#gsub!'string'      1.247M (± 3.2%) i/s -      6.311M in   5.065550s
  String#[/regexp/]=     26.557M (± 0.5%) i/s -    134.893M in   5.079587s
 String#sub!/regexp/     16.230M (± 2.8%) i/s -     81.160M in   5.004730s
String#gsub!/regexp/      4.637M (± 4.2%) i/s -     23.536M in   5.084692s

Comparison:
  String#['string']=: 178206344.9 i/s
  String#[/regexp/]=: 26556614.4 i/s - 6.71x  (± 0.00) slower
 String#sub!/regexp/: 16230051.9 i/s - 10.98x  (± 0.00) slower
 String#sub!'string':  5524653.2 i/s - 32.26x  (± 0.00) slower
String#gsub!/regexp/:  4637257.7 i/s - 38.43x  (± 0.00) slower
String#gsub!'string':  1247283.5 i/s - 142.88x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.502M i/100ms
        String#chomp     2.388M i/100ms
String#delete_suffix     3.955M i/100ms
Calculating -------------------------------------
          String#sub     14.948M (± 3.5%) i/s -     75.076M in   5.029020s
        String#chomp     24.106M (± 3.3%) i/s -    121.765M in   5.057007s
String#delete_suffix     39.722M (± 0.5%) i/s -    201.717M in   5.078289s

Comparison:
String#delete_suffix: 39722280.3 i/s
        String#chomp: 24105687.9 i/s - 1.65x  (± 0.00) slower
          String#sub: 14948369.5 i/s - 2.66x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix     1.739M i/100ms
          String#sub     4.233M i/100ms
Calculating -------------------------------------
String#delete_prefix     18.238M (± 3.6%) i/s -     92.143M in   5.059141s
          String#sub     42.309M (± 0.1%) i/s -    211.625M in   5.001904s

Comparison:
          String#sub: 42308942.2 i/s
String#delete_prefix: 18238415.7 i/s - 2.32x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.257M i/100ms
    String#unpack[0]     1.287M i/100ms
Calculating -------------------------------------
      String#unpack1     13.025M (± 3.2%) i/s -     65.373M in   5.024497s
    String#unpack[0]     12.956M (± 3.1%) i/s -     65.637M in   5.071521s

Comparison:
      String#unpack1: 13025068.8 i/s
    String#unpack[0]: 12955663.1 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.1.0-dev-93076dca, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    18.914k i/100ms
          Time.parse   164.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    140.369k (±25.1%) i/s -    643.076k in   5.061026s
          Time.parse      2.923k (±31.3%) i/s -     12.792k in   5.006530s

Comparison:
        Time.iso8601:   140368.6 i/s
          Time.parse:     2923.1 i/s - 48.02x  (± 0.00) slower

