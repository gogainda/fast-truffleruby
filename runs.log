$ ruby -v code/general/inheritance-check.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   226.537k i/100ms
  ancestors.include?    92.700k i/100ms
Calculating -------------------------------------
  less than or equal      7.359M (± 4.0%) i/s -     36.926M in   5.027012s
  ancestors.include?    975.791k (± 2.7%) i/s -      4.913M in   5.038825s

Comparison:
  less than or equal:  7359338.8 i/s
  ancestors.include?:   975791.4 i/s - 7.54x  (± 0.00) slower

$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       124.321M i/100ms
Function with splat arguments
                       562.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.242B (± 0.5%) i/s -      6.216B in   5.003129s
Function with splat arguments
                          5.793k (± 1.4%) i/s -     29.224k in   5.045440s

Comparison:
Function with single Array argument: 1242465334.0 i/s
Function with splat arguments:     5793.3 i/s - 214464.71x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   124.282M i/100ms
          OpenStruct     1.430M i/100ms
Calculating -------------------------------------
                Hash      1.245B (± 0.2%) i/s -      6.338B in   5.092501s
          OpenStruct    414.220M (± 2.7%) i/s -      2.032B in   4.998217s

Comparison:
                Hash: 1244659477.0 i/s
          OpenStruct: 414220466.5 i/s - 3.00x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   122.269M i/100ms
       attr_accessor   124.212M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.238B (± 1.2%) i/s -      6.236B in   5.035675s
       attr_accessor      1.244B (± 0.2%) i/s -      6.335B in   5.093834s

Comparison:
       attr_accessor: 1243623595.5 i/s
   getter_and_setter: 1238488778.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    23.090k i/100ms
       Kernel#format    37.922k i/100ms
            String#%    39.509k i/100ms
Calculating -------------------------------------
         Float#round    295.611k (± 2.9%) i/s -      1.478M in   5.003541s
       Kernel#format    401.736k (± 2.2%) i/s -      2.010M in   5.005579s
            String#%    414.874k (± 2.2%) i/s -      2.094M in   5.049965s

Comparison:
            String#%:   414873.8 i/s
       Kernel#format:   401735.7 i/s - same-ish: difference falls within error
         Float#round:   295611.1 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     20.051  (± 0.0%) i/s -    101.000  in   5.037913s
         Kernel loop      4.381  (± 0.0%) i/s -     22.000  in   5.022518s

Comparison:
          While Loop:       20.1 i/s
         Kernel loop:        4.4 i/s - 4.58x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     7.929k i/100ms
         respond_to?   124.198M i/100ms
Calculating -------------------------------------
      begin...rescue     45.063k (± 2.4%) i/s -    229.941k in   5.105613s
         respond_to?      1.246B (± 0.4%) i/s -      6.334B in   5.083921s

Comparison:
         respond_to?: 1245926057.6 i/s
      begin...rescue:    45062.7 i/s - 27648.70x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        58.000  i/100ms
       define_method   194.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.074k (±30.8%) i/s -      4.872k in   5.005936s
       define_method      3.719k (±40.6%) i/s -     13.580k in   7.393455s

Comparison:
       define_method:     3719.1 i/s
module_eval with string:     2073.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/assignment.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   124.823M i/100ms
Sequential Assignment
                       124.882M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.236B (± 3.5%) i/s -      6.241B in   5.055712s
Sequential Assignment
                          1.244B (± 0.3%) i/s -      6.244B in   5.017943s

Comparison:
Sequential Assignment: 1244363615.3 i/s
 Parallel Assignment: 1236481671.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/block-apply-method.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   124.222M i/100ms
             &method   124.106M i/100ms
Calculating -------------------------------------
              normal      1.245B (± 0.5%) i/s -      6.335B in   5.089358s
             &method      1.246B (± 0.4%) i/s -      6.329B in   5.078029s

Comparison:
             &method: 1246454146.2 i/s
              normal: 1244845543.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   954.993k i/100ms
          OpenStruct   124.359M i/100ms
Calculating -------------------------------------
                Hash      1.250B (± 2.9%) i/s -      6.230B in   4.990162s
          OpenStruct      1.256B (± 0.8%) i/s -      6.342B in   5.051081s

Comparison:
          OpenStruct: 1255721464.3 i/s
                Hash: 1249548990.6 i/s - same-ish: difference falls within error

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   125.871M i/100ms
                send   124.238M i/100ms
      method_missing   124.658M i/100ms
Calculating -------------------------------------
                call      1.243B (± 0.4%) i/s -      6.294B in   5.064690s
                send      1.244B (± 0.3%) i/s -      6.336B in   5.092523s
      method_missing      1.242B (± 0.7%) i/s -      6.233B in   5.018580s

Comparison:
                send: 1244212371.6 i/s
                call: 1242650921.9 i/s - same-ish: difference falls within error
      method_missing: 1242021086.7 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     2.586k i/100ms
      range#include?    58.000  i/100ms
       range#member?   156.000  i/100ms
       plain compare    21.067k i/100ms
Calculating -------------------------------------
        range#cover?    224.862k (±25.8%) i/s -      1.011M in   4.993291s
      range#include?      3.205k (±44.8%) i/s -      9.976k in   5.006264s
       range#member?      3.432k (±43.3%) i/s -     10.920k in   5.152451s
       plain compare    161.942k (±20.3%) i/s -    779.479k in   5.039256s

Comparison:
        range#cover?:   224861.7 i/s
       plain compare:   161942.4 i/s - same-ish: difference falls within error
       range#member?:     3431.9 i/s - 65.52x  (± 0.00) slower
      range#include?:     3205.3 i/s - 70.15x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   124.246M i/100ms
          Array#last   124.066M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.245B (± 0.7%) i/s -      6.337B in   5.089858s
          Array#last      1.245B (± 0.7%) i/s -      6.327B in   5.081108s

Comparison:
          Array#last: 1245327744.1 i/s
          Array#[-1]: 1244990974.9 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    14.089k i/100ms
        Array#sample     2.093M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    196.615k (± 1.9%) i/s -    986.230k in   5.018209s
        Array#sample     20.710M (± 0.7%) i/s -    104.666M in   5.054003s

Comparison:
        Array#sample: 20710425.0 i/s
 Array#shuffle.first:   196615.2 i/s - 105.33x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.102  (± 0.0%) i/s -      1.000  in   9.773626s
        Array#insert      0.783  (± 0.0%) i/s -      4.000  in   5.107489s

Comparison:
        Array#insert:        0.8 i/s
       Array#unshift:        0.1 i/s - 7.65x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   124.077M i/100ms
          Array#size   124.296M i/100ms
         Array#count   124.256M i/100ms
Calculating -------------------------------------
        Array#length      1.248B (± 1.1%) i/s -      6.328B in   5.071293s
          Array#size      1.257B (± 1.5%) i/s -      6.339B in   5.043664s
         Array#count      1.247B (± 0.8%) i/s -      6.337B in   5.081906s

Comparison:
          Array#size: 1257107333.2 i/s
        Array#length: 1247940594.7 i/s - same-ish: difference falls within error
         Array#count: 1247062466.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   334.055k i/100ms
Calculating -------------------------------------
                find      0.090  (± 0.0%) i/s -      1.000  in  11.154194s
             bsearch      3.283M (± 2.9%) i/s -     16.703M in   5.091410s

Comparison:
             bsearch:  3283381.0 i/s
                find:        0.1 i/s - 36623470.51x  (± 0.00) slower

$ ruby -v code/array/array-first-vs-index.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   198.918M i/100ms
         Array#first   198.154M i/100ms
Calculating -------------------------------------
           Array#[0]      1.993B (± 1.0%) i/s -     10.145B in   5.091419s
         Array#first      2.012B (± 1.2%) i/s -     10.106B in   5.024753s

Comparison:
         Array#first: 2011509787.8 i/s
           Array#[0]: 1992717396.7 i/s - same-ish: difference falls within error

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub    84.461k i/100ms
        String#chomp    29.583k i/100ms
String#delete_suffix   810.768k i/100ms
Calculating -------------------------------------
          String#sub      6.318M (±11.3%) i/s -     31.082M in   4.998057s
        String#chomp     45.245M (± 1.8%) i/s -    225.689M in   4.989799s
String#delete_suffix     47.116M (± 1.1%) i/s -    235.933M in   5.008046s

Comparison:
String#delete_suffix: 47116267.5 i/s
        String#chomp: 45244847.2 i/s - 1.04x  (± 0.00) slower
          String#sub:  6318065.3 i/s - 7.46x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   191.279k i/100ms
       String#match?     2.199M i/100ms
  String#start_with?     1.636M i/100ms
Calculating -------------------------------------
           String#=~     21.753M (± 5.0%) i/s -    108.264M in   4.998369s
       String#match?     31.383M (± 1.4%) i/s -    158.329M in   5.045938s
  String#start_with?     16.322M (± 2.7%) i/s -     81.820M in   5.016616s

Comparison:
       String#match?: 31383290.8 i/s
           String#=~: 21753284.8 i/s - 1.44x  (± 0.00) slower
  String#start_with?: 16322281.0 i/s - 1.92x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    35.026k i/100ms
          String#sub    41.107k i/100ms
String#dup["string"]=
                       365.811k i/100ms
Calculating -------------------------------------
         String#gsub    751.272k (±14.2%) i/s -      3.678M in   5.013683s
          String#sub      1.083M (±13.4%) i/s -      5.221M in   5.022402s
String#dup["string"]=
                         98.342M (± 3.1%) i/s -    490.187M in   4.991189s

Comparison:
String#dup["string"]=: 98342229.7 i/s
          String#sub:  1083025.0 i/s - 90.80x  (± 0.00) slower
         String#gsub:   751272.1 i/s - 130.90x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   172.362k i/100ms
    String#[0, n] ==    76.716k i/100ms
   String#[RANGE] ==    90.926k i/100ms
   String#[0...n] ==    71.650k i/100ms
Calculating -------------------------------------
  String#start_with?      2.721M (± 3.8%) i/s -     13.617M in   5.011345s
    String#[0, n] ==      1.707M (± 4.4%) i/s -      8.515M in   4.998944s
   String#[RANGE] ==      1.676M (± 4.2%) i/s -      8.365M in   4.999798s
   String#[0...n] ==      1.254M (± 4.2%) i/s -      6.305M in   5.037968s

Comparison:
  String#start_with?:  2721494.4 i/s
    String#[0, n] ==:  1707029.0 i/s - 1.59x  (± 0.00) slower
   String#[RANGE] ==:  1676251.5 i/s - 1.62x  (± 0.00) slower
   String#[0...n] ==:  1253789.8 i/s - 2.17x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.148M i/100ms
    String#unpack[0]     1.163M i/100ms
Calculating -------------------------------------
      String#unpack1     11.607M (± 2.5%) i/s -     58.546M in   5.047107s
    String#unpack[0]     11.480M (± 2.7%) i/s -     58.156M in   5.069453s

Comparison:
      String#unpack1: 11607229.6 i/s
    String#unpack[0]: 11480490.5 i/s - same-ish: difference falls within error

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    37.157k i/100ms
           String#tr    22.565k i/100ms
Calculating -------------------------------------
         String#gsub      1.358M (±17.7%) i/s -      6.465M in   4.999733s
           String#tr      1.057M (± 7.3%) i/s -      5.258M in   5.007199s

Comparison:
         String#gsub:  1357926.4 i/s
           String#tr:  1056748.7 i/s - same-ish: difference falls within error

$ ruby -v code/string/concatenation.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+   124.240M i/100ms
       String#concat   124.849M i/100ms
       String#append   125.028M i/100ms
         "foo" "bar"   123.335M i/100ms
  "#{'foo'}#{'bar'}"   124.163M i/100ms
Calculating -------------------------------------
            String#+      1.245B (± 0.3%) i/s -      6.336B in   5.089257s
       String#concat      1.244B (± 0.1%) i/s -      6.242B in   5.018094s
       String#append      1.245B (± 0.3%) i/s -      6.251B in   5.020002s
         "foo" "bar"      1.247B (± 0.4%) i/s -      6.290B in   5.045664s
  "#{'foo'}#{'bar'}"      1.245B (± 0.2%) i/s -      6.332B in   5.088171s

Comparison:
         "foo" "bar": 1246656847.9 i/s
       String#append: 1245307291.9 i/s - same-ish: difference falls within error
            String#+: 1245033146.1 i/s - same-ish: difference falls within error
  "#{'foo'}#{'bar'}": 1244517397.8 i/s - same-ish: difference falls within error
       String#concat: 1243992510.4 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     1.155k i/100ms
      String#squeeze    45.219k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     72.749k (± 9.4%) i/s -    360.360k in   5.007241s
      String#squeeze    508.393k (± 3.0%) i/s -      2.577M in   5.074663s

Comparison:
      String#squeeze:   508392.7 i/s
 String#gsub/regex+/:    72749.2 i/s - 6.99x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   898.129k i/100ms
      String#casecmp     2.979M i/100ms
Calculating -------------------------------------
String#downcase + ==     12.276M (± 3.5%) i/s -     61.971M in   5.054296s
      String#casecmp     29.894M (± 0.4%) i/s -    151.941M in   5.082779s

Comparison:
      String#casecmp: 29893739.3 i/s
String#downcase + ==: 12276475.5 i/s - 2.44x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   124.353M i/100ms
         With Freeze   124.419M i/100ms
Calculating -------------------------------------
      Without Freeze      1.243B (± 0.2%) i/s -      6.218B in   5.001382s
         With Freeze      1.243B (± 0.2%) i/s -      6.221B in   5.003365s

Comparison:
         With Freeze: 1243352879.3 i/s
      Without Freeze: 1243192374.5 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   207.665k i/100ms
       String#match?   732.284k i/100ms
    String#end_with?    11.823M i/100ms
Calculating -------------------------------------
           String#=~     10.767M (± 4.0%) i/s -     53.785M in   5.006624s
       String#match?     15.511M (± 0.8%) i/s -     77.622M in   5.004775s
    String#end_with?    118.884M (± 0.7%) i/s -    602.982M in   5.072235s

Comparison:
    String#end_with?: 118884365.7 i/s
       String#match?: 15510697.6 i/s - 7.66x  (± 0.00) slower
           String#=~: 10767018.4 i/s - 11.04x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    13.072M i/100ms
 String#sub!'string'    47.600k i/100ms
String#gsub!'string'    35.872k i/100ms
  String#[/regexp/]=   491.693k i/100ms
 String#sub!/regexp/   268.744k i/100ms
String#gsub!/regexp/    48.726k i/100ms
Calculating -------------------------------------
  String#['string']=    130.902M (± 0.4%) i/s -    666.681M in   5.093053s
 String#sub!'string'      1.330M (±12.7%) i/s -      6.378M in   5.003692s
String#gsub!'string'    841.177k (±24.6%) i/s -      3.659M in   5.007557s
  String#[/regexp/]=     28.373M (± 0.8%) i/s -    142.099M in   5.008654s
 String#sub!/regexp/      6.963M (± 6.2%) i/s -     34.668M in   4.998892s
String#gsub!/regexp/      3.073M (±10.5%) i/s -     15.203M in   5.015834s

Comparison:
  String#['string']=: 130901825.9 i/s
  String#[/regexp/]=: 28372735.7 i/s - 4.61x  (± 0.00) slower
 String#sub!/regexp/:  6963396.1 i/s - 18.80x  (± 0.00) slower
String#gsub!/regexp/:  3073411.1 i/s - 42.59x  (± 0.00) slower
 String#sub!'string':  1330318.2 i/s - 98.40x  (± 0.00) slower
String#gsub!'string':   841177.1 i/s - 155.62x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   124.443M i/100ms
          String#dup   124.761M i/100ms
Calculating -------------------------------------
           String#+@      1.236B (± 4.7%) i/s -      6.222B in   5.050161s
          String#dup      1.245B (± 0.3%) i/s -      6.238B in   5.011734s

Comparison:
          String#dup: 1244693421.1 i/s
           String#+@: 1236170624.4 i/s - same-ish: difference falls within error

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?   235.895k i/100ms
           String#=~     5.038M i/100ms
          Regexp#===     5.070M i/100ms
        String#match     1.450M i/100ms
Calculating -------------------------------------
       String#match?     60.752M (± 1.0%) i/s -    303.597M in   4.997791s
           String#=~     51.067M (± 1.1%) i/s -    256.960M in   5.032401s
          Regexp#===     51.317M (± 1.1%) i/s -    258.580M in   5.039450s
        String#match     41.789M (± 1.0%) i/s -    210.236M in   5.031380s

Comparison:
       String#match?: 60751593.6 i/s
          Regexp#===: 51316994.4 i/s - 1.18x  (± 0.00) slower
           String#=~: 51066768.0 i/s - 1.19x  (± 0.00) slower
        String#match: 41789363.4 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   111.810k i/100ms
          String#sub    91.579k i/100ms
Calculating -------------------------------------
String#delete_prefix     18.253M (± 8.2%) i/s -     90.231M in   5.000442s
          String#sub      6.274M (±11.6%) i/s -     30.862M in   5.000617s

Comparison:
String#delete_prefix: 18252737.1 i/s
          String#sub:  6273867.5 i/s - 2.91x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    65.398k i/100ms
           Array#map   502.828k i/100ms
Calculating -------------------------------------
   Array#each + push      1.512M (± 4.4%) i/s -      7.586M in   5.026936s
           Array#map      5.296M (± 4.2%) i/s -     26.650M in   5.041545s

Comparison:
           Array#map:  5296124.3 i/s
   Array#each + push:  1512341.3 i/s - 3.50x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   582.687k i/100ms
     each_with_index   754.420k i/100ms
Calculating -------------------------------------
          While Loop      5.852M (± 0.5%) i/s -     29.717M in   5.078530s
     each_with_index      7.599M (± 1.0%) i/s -     38.475M in   5.063652s

Comparison:
     each_with_index:  7599037.6 i/s
          While Loop:  5851643.1 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         1.099k i/100ms
  Enumerable#sort_by     2.584k i/100ms
     Enumerable#sort     1.858k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         25.239k (±13.0%) i/s -    117.593k in   5.003030s
  Enumerable#sort_by     24.194k (±15.1%) i/s -    116.280k in   4.999927s
     Enumerable#sort     39.985k (± 2.5%) i/s -    200.664k in   5.022533s

Comparison:
     Enumerable#sort:    39985.3 i/s
Enumerable#sort_by (Symbol#to_proc):    25239.1 i/s - 1.58x  (± 0.00) slower
  Enumerable#sort_by:    24193.7 i/s - 1.65x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     8.266M i/100ms
               #each    10.371M i/100ms
Calculating -------------------------------------
            For loop     82.898M (± 0.2%) i/s -    421.564M in   5.085366s
               #each    104.238M (± 0.8%) i/s -    528.934M in   5.074595s

Comparison:
               #each: 104237900.9 i/s
            For loop: 82897869.3 i/s - 1.26x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       277.260k i/100ms
   Enumerable#detect     3.511M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          5.537M (± 4.2%) i/s -    110.627M in  20.015626s
   Enumerable#detect     35.273M (± 0.5%) i/s -    705.800M in  20.010113s

Comparison:
   Enumerable#detect: 35273004.2 i/s
Enumerable#select.first:  5536798.7 i/s - 6.37x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    82.097k i/100ms
  Array#reverse_each     1.087M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.325M (± 3.0%) i/s -      6.650M in   5.024896s
  Array#reverse_each     10.884M (± 0.3%) i/s -     55.451M in   5.094762s

Comparison:
  Array#reverse_each: 10884002.3 i/s
  Array#reverse.each:  1324660.1 i/s - 8.22x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   124.758k i/100ms
      inject to_proc   122.796k i/100ms
        inject block   122.723k i/100ms
Calculating -------------------------------------
       inject symbol      1.228M (± 0.1%) i/s -      6.238M in   5.079211s
      inject to_proc      1.228M (± 0.6%) i/s -      6.140M in   5.001239s
        inject block      1.229M (± 0.2%) i/s -      6.259M in   5.093075s

Comparison:
        inject block:  1228904.6 i/s
       inject symbol:  1228124.3 i/s - same-ish: difference falls within error
      inject to_proc:  1227701.0 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                        48.269k i/100ms
Enumerable#select.last
                       302.850k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.571M (± 3.9%) i/s -      7.868M in   5.018366s
Enumerable#select.last
                          3.026M (± 2.8%) i/s -     15.143M in   5.007532s

Comparison:
Enumerable#select.last:  3026340.1 i/s
Enumerable#reverse.detect:  1570791.1 i/s - 1.93x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    69.849k i/100ms
Enumerable#sort_by...first
                         2.658k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      2.633M (± 0.2%) i/s -     13.201M in   5.014502s
Enumerable#sort_by...first
                         51.793k (± 3.8%) i/s -    260.484k in   5.037792s

Comparison:
   Enumerable#min_by:  2632668.5 i/s
Enumerable#sort_by...first:    51793.1 i/s - 50.83x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     7.006k i/100ms
   Array#map.flatten     7.066k i/100ms
      Array#flat_map    26.778k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     95.720k (± 3.7%) i/s -    483.414k in   5.057332s
   Array#map.flatten     95.931k (± 3.6%) i/s -    480.488k in   5.015529s
      Array#flat_map    269.533k (± 3.1%) i/s -      1.366M in   5.071858s

Comparison:
      Array#flat_map:   269532.6 i/s
   Array#map.flatten:    95930.8 i/s - 2.81x  (± 0.00) slower
Array#map.flatten(1):    95719.9 i/s - 2.82x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other    54.379k i/100ms
          Hash#merge   141.851k i/100ms
Calculating -------------------------------------
        Hash#**other      1.284B (±16.2%) i/s -      6.121B in   4.856974s
          Hash#merge      1.237B (± 2.0%) i/s -      6.109B in   4.942194s

Comparison:
        Hash#**other: 1283603306.3 i/s
          Hash#merge: 1236754661.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h     5.349k i/100ms
         sort + to_h     1.208k i/100ms
Calculating -------------------------------------
      sort_by + to_h    176.065k (± 9.6%) i/s -    871.887k in   5.004622s
         sort + to_h     46.242k (± 5.5%) i/s -    230.728k in   5.008406s

Comparison:
      sort_by + to_h:   176064.7 i/s
         sort + to_h:    46242.2 i/s - 3.81x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   198.870M i/100ms
  Hash#fetch + block   199.177M i/100ms
    Hash#fetch + arg   199.360M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.991B (± 0.4%) i/s -     10.142B in   5.092978s
  Hash#fetch + block      1.989B (± 0.2%) i/s -      9.959B in   5.005763s
    Hash#fetch + arg      1.990B (± 0.2%) i/s -      9.968B in   5.007901s

Comparison:
  Hash#fetch + const: 1991475045.7 i/s
    Hash#fetch + arg: 1990462077.5 i/s - same-ish: difference falls within error
  Hash#fetch + block: 1989484634.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                       776.000  i/100ms
      Hash#merge({})   793.000  i/100ms
 Hash#dup#merge!({})     2.904k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         95.128k (±10.0%) i/s -    468.704k in   5.001432s
      Hash#merge({})     74.145k (±10.0%) i/s -    365.573k in   4.998765s
 Hash#dup#merge!({})    105.841k (± 6.7%) i/s -    528.528k in   5.018701s

Comparison:
 Hash#dup#merge!({}):   105840.8 i/s
{}#merge!(Hash) do end:    95128.0 i/s - same-ish: difference falls within error
      Hash#merge({}):    74145.0 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   105.367k i/100ms
            Hash#dup   202.928k i/100ms
Calculating -------------------------------------
              Hash[]      2.014M (± 4.8%) i/s -     10.115M in   5.035025s
            Hash#dup      1.983M (± 1.9%) i/s -      9.943M in   5.016330s

Comparison:
              Hash[]:  2013684.3 i/s
            Hash#dup:  1982954.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     1.132k i/100ms
            Hash#[]=    16.796k i/100ms
Calculating -------------------------------------
         Hash#merge!    236.716k (± 9.1%) i/s -      1.164M in   4.994613s
            Hash#[]=    230.168k (± 3.7%) i/s -      1.159M in   5.042324s

Comparison:
         Hash#merge!:   236716.1 i/s
            Hash#[]=:   230168.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      607.705k i/100ms
Array#each             540.439k i/100ms
Array#each_w/_object   533.117k i/100ms
Hash#select-include    552.234k i/100ms
Calculating -------------------------------------
Hash#native-slice         8.247M (± 3.6%) i/s -     41.324M in   5.017797s
Array#each                7.832M (± 3.1%) i/s -     39.452M in   5.042293s
Array#each_w/_object      7.884M (± 3.4%) i/s -     39.451M in   5.010102s
Hash#select-include       9.666M (± 3.6%) i/s -     48.597M in   5.034730s

Comparison:
Hash#select-include :  9665966.6 i/s
Hash#native-slice   :  8246850.9 i/s - 1.17x  (± 0.00) slower
Array#each_w/_object:  7883860.4 i/s - 1.23x  (± 0.00) slower
Array#each          :  7832494.3 i/s - 1.23x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?    85.000  i/100ms
           Hash#key?    12.268M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.471k (±10.7%) i/s -      7.310k in   5.045197s
           Hash#key?    120.955M (± 1.0%) i/s -    613.383M in   5.071642s

Comparison:
           Hash#key?: 120955404.6 i/s
  Hash#keys.include?:     1471.4 i/s - 82205.71x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig     1.416M i/100ms
             Hash#[]    49.013M i/100ms
          Hash#[] ||    48.995M i/100ms
          Hash#[] &&    49.769M i/100ms
          Hash#fetch    49.734M i/100ms
 Hash#fetch fallback    49.768M i/100ms
Calculating -------------------------------------
            Hash#dig    497.409M (± 0.3%) i/s -      2.486B in   4.997703s
             Hash#[]    497.157M (± 0.5%) i/s -      2.500B in   5.028012s
          Hash#[] ||    497.809M (± 0.2%) i/s -      2.499B in   5.019527s
          Hash#[] &&    498.132M (± 0.3%) i/s -      2.538B in   5.095502s
          Hash#fetch    497.793M (± 0.2%) i/s -      2.536B in   5.095364s
 Hash#fetch fallback    497.829M (± 0.2%) i/s -      2.538B in   5.098516s

Comparison:
          Hash#[] &&: 498132463.3 i/s
 Hash#fetch fallback: 497828637.2 i/s - same-ish: difference falls within error
          Hash#[] ||: 497808686.7 i/s - same-ish: difference falls within error
          Hash#fetch: 497792734.6 i/s - same-ish: difference falls within error
            Hash#dig: 497409076.6 i/s - same-ish: difference falls within error
             Hash#[]: 497157481.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   124.295M i/100ms
  Hash#fetch, symbol   198.570M i/100ms
     Hash#[], string     4.057M i/100ms
  Hash#fetch, string     3.806M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.243B (± 0.2%) i/s -      6.339B in   5.098177s
  Hash#fetch, symbol      1.992B (± 0.2%) i/s -     10.127B in   5.084723s
     Hash#[], string     38.982M (± 2.1%) i/s -    198.787M in   5.101709s
  Hash#fetch, string     36.523M (± 1.2%) i/s -    182.672M in   5.002298s

Comparison:
  Hash#fetch, symbol: 1991672702.7 i/s
     Hash#[], symbol: 1243402578.9 i/s - 1.60x  (± 0.00) slower
     Hash#[], string: 38982418.5 i/s - 51.09x  (± 0.00) slower
  Hash#fetch, string: 36522889.2 i/s - 54.53x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   244.000  i/100ms
         Hash#merge!    15.861k i/100ms
Calculating -------------------------------------
          Hash#merge      3.520k (± 3.5%) i/s -     17.812k in   5.065840s
         Hash#merge!    228.458k (± 3.9%) i/s -      1.142M in   5.006746s

Comparison:
         Hash#merge!:   228458.4 i/s
          Hash#merge:     3520.4 i/s - 64.90x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?    92.000  i/100ms
         Hash#value?   755.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.660k (±10.8%) i/s -      8.188k in   5.010518s
         Hash#value?      8.151k (± 0.3%) i/s -     40.770k in   5.001685s

Comparison:
         Hash#value?:     8151.3 i/s
Hash#values.include?:     1660.4 i/s - 4.91x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each    38.289k i/100ms
       Hash#each_key    94.016k i/100ms
Calculating -------------------------------------
      Hash#keys.each    982.224k (± 5.0%) i/s -      4.901M in   5.003676s
       Hash#each_key      1.118M (± 3.3%) i/s -      5.641M in   5.052415s

Comparison:
       Hash#each_key:  1117703.3 i/s
      Hash#keys.each:   982224.1 i/s - 1.14x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    17.076k i/100ms
      Symbol#to_proc    18.731k i/100ms
Calculating -------------------------------------
               Block    187.147k (± 1.7%) i/s -    939.180k in   5.019918s
      Symbol#to_proc    185.237k (± 1.9%) i/s -    936.550k in   5.057878s

Comparison:
               Block:   187147.4 i/s
      Symbol#to_proc:   185237.4 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   121.971M i/100ms
       block + yield   124.195M i/100ms
        unused block   124.259M i/100ms
               yield   124.241M i/100ms
Calculating -------------------------------------
          block.call      1.248B (± 0.6%) i/s -      6.343B in   5.084204s
       block + yield      1.249B (± 0.7%) i/s -      6.334B in   5.070416s
        unused block      1.246B (± 0.3%) i/s -      6.337B in   5.084554s
               yield      1.248B (± 0.5%) i/s -      6.336B in   5.078539s

Comparison:
       block + yield: 1249265840.0 i/s
               yield: 1247691984.8 i/s - same-ish: difference falls within error
          block.call: 1247545465.8 i/s - same-ish: difference falls within error
        unused block: 1246382484.6 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601     1.428k i/100ms
          Time.parse    22.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    103.968k (±14.1%) i/s -    504.084k in   4.990263s
          Time.parse      2.075k (±44.9%) i/s -      8.008k in   4.989883s

Comparison:
        Time.iso8601:   103967.8 i/s
          Time.parse:     2074.9 i/s - 50.11x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    86.000  i/100ms
          Date.parse   104.000  i/100ms
Calculating -------------------------------------
        Date.iso8601      9.349k (±45.6%) i/s -     30.186k in   4.992723s
          Date.parse      3.615k (±62.5%) i/s -     11.544k in   5.022699s

Comparison:
        Date.iso8601:     9349.5 i/s
          Date.parse:     3614.6 i/s - same-ish: difference falls within error

