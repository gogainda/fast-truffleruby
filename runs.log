$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       235.650M i/100ms
Function with splat arguments
                       645.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          2.386B (± 0.3%) i/s -     12.018B in   5.036992s
Function with splat arguments
                          6.802k (± 5.2%) i/s -     34.185k in   5.039668s

Comparison:
Function with single Array argument: 2385993797.2 i/s
Function with splat arguments:     6802.5 i/s - 350754.86x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment    84.830M i/100ms
Sequential Assignment
                       238.269M i/100ms
Calculating -------------------------------------
 Parallel Assignment      2.385B (± 0.6%) i/s -     11.961B in   5.015342s
Sequential Assignment
                          2.387B (± 0.4%) i/s -     12.152B in   5.091390s

Comparison:
Sequential Assignment: 2386753495.3 i/s
 Parallel Assignment: 2384959380.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   238.234M i/100ms
       attr_accessor   238.376M i/100ms
Calculating -------------------------------------
   getter_and_setter      2.386B (± 0.3%) i/s -     12.150B in   5.092224s
       attr_accessor      2.388B (± 0.2%) i/s -     12.157B in   5.091530s

Comparison:
       attr_accessor: 2387732931.2 i/s
   getter_and_setter: 2385992574.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     7.235k i/100ms
         respond_to?   238.948M i/100ms
Calculating -------------------------------------
      begin...rescue     50.352k (± 2.5%) i/s -    253.225k in   5.032336s
         respond_to?      2.387B (± 0.3%) i/s -     11.947B in   5.005093s

Comparison:
         respond_to?: 2387069144.9 i/s
      begin...rescue:    50352.4 i/s - 47407.22x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   238.563M i/100ms
             &method   238.961M i/100ms
Calculating -------------------------------------
              normal      2.383B (± 0.5%) i/s -     11.928B in   5.004948s
             &method      2.388B (± 0.2%) i/s -     11.948B in   5.003338s

Comparison:
             &method: 2388026843.7 i/s
              normal: 2383336107.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       102.000  i/100ms
       define_method   125.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.677k (±51.2%) i/s -      4.896k in   4.998348s
       define_method      3.643k (±54.6%) i/s -      7.500k in   6.916715s

Comparison:
       define_method:     3643.5 i/s
module_eval with string:     1676.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    70.784k i/100ms
       Kernel#format    51.247k i/100ms
            String#%    51.992k i/100ms
Calculating -------------------------------------
         Float#round    766.279k (± 2.6%) i/s -      3.893M in   5.084067s
       Kernel#format    515.628k (± 2.1%) i/s -      2.614M in   5.071225s
            String#%    511.703k (± 2.0%) i/s -      2.600M in   5.082535s

Comparison:
         Float#round:   766279.5 i/s
       Kernel#format:   515627.7 i/s - 1.49x  (± 0.00) slower
            String#%:   511702.8 i/s - 1.50x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   238.293M i/100ms
          OpenStruct   238.472M i/100ms
Calculating -------------------------------------
                Hash      1.492B (±52.5%) i/s -      5.957B in   5.289299s
          OpenStruct    793.238M (± 0.2%) i/s -      4.054B in   5.110744s

Comparison:
                Hash: 1492007204.6 i/s
          OpenStruct: 793238358.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   238.752M i/100ms
          OpenStruct     2.897k i/100ms
Calculating -------------------------------------
                Hash      2.383B (± 0.4%) i/s -     11.938B in   5.008931s
          OpenStruct     30.809k (±11.2%) i/s -    153.541k in   5.075179s

Comparison:
                Hash: 2383297642.9 i/s
          OpenStruct:    30809.4 i/s - 77356.28x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   821.940k i/100ms
  ancestors.include?   131.704k i/100ms
Calculating -------------------------------------
  less than or equal      8.938M (± 3.7%) i/s -     45.207M in   5.065127s
  ancestors.include?      1.341M (± 4.5%) i/s -      6.717M in   5.021015s

Comparison:
  less than or equal:  8938190.8 i/s
  ancestors.include?:  1340560.6 i/s - 6.67x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     23.853  (± 0.0%) i/s -    120.000  in   5.030864s
         Kernel loop      4.975  (± 0.0%) i/s -     25.000  in   5.024754s

Comparison:
          While Loop:       23.9 i/s
         Kernel loop:        5.0 i/s - 4.79x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   238.397M i/100ms
         Array#first   238.529M i/100ms
Calculating -------------------------------------
           Array#[0]      2.385B (± 0.3%) i/s -     12.158B in   5.096862s
         Array#first      2.387B (± 0.3%) i/s -     12.165B in   5.096407s

Comparison:
         Array#first: 2386991985.4 i/s
           Array#[0]: 2385458073.8 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   238.369M i/100ms
          Array#last   238.568M i/100ms
Calculating -------------------------------------
          Array#[-1]      2.685B (± 2.8%) i/s -     13.587B in   5.063936s
          Array#last      2.707B (± 0.2%) i/s -     13.598B in   5.024230s

Comparison:
          Array#last: 2706574256.5 i/s
          Array#[-1]: 2685398838.7 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   437.823k i/100ms
Calculating -------------------------------------
                find     11.878  (±16.8%) i/s -     28.000  in   5.049197s
             bsearch      4.376M (± 3.3%) i/s -     21.891M in   5.008310s

Comparison:
             bsearch:  4376098.6 i/s
                find:       11.9 i/s - 368413.35x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.123  (± 0.0%) i/s -      1.000  in   8.103132s
        Array#insert      0.942  (± 0.0%) i/s -      5.000  in   5.306638s

Comparison:
        Array#insert:        0.9 i/s
       Array#unshift:        0.1 i/s - 7.63x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   238.327M i/100ms
          Array#size   238.601M i/100ms
         Array#count   238.959M i/100ms
Calculating -------------------------------------
        Array#length      2.386B (± 0.3%) i/s -     12.155B in   5.094758s
          Array#size      2.387B (± 0.3%) i/s -     12.169B in   5.098640s
         Array#count      2.387B (± 0.3%) i/s -     11.948B in   5.005577s

Comparison:
         Array#count: 2386940911.2 i/s
          Array#size: 2386667667.6 i/s - same-ish: difference falls within error
        Array#length: 2385745637.4 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    20.865k i/100ms
        Array#sample     2.356M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    233.428k (± 2.1%) i/s -      1.168M in   5.007978s
        Array#sample     23.999M (± 0.1%) i/s -    120.178M in   5.007551s

Comparison:
        Array#sample: 23999376.5 i/s
 Array#shuffle.first:   233428.3 i/s - 102.81x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   366.000  i/100ms
          Date.parse    94.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     18.057k (±37.6%) i/s -     67.344k in   5.008572s
          Date.parse      6.908k (±34.3%) i/s -     26.320k in   5.003761s

Comparison:
        Date.iso8601:    18056.8 i/s
          Date.parse:     6908.4 i/s - 2.61x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   145.071k i/100ms
           Array#map   547.542k i/100ms
Calculating -------------------------------------
   Array#each + push      1.550M (± 4.4%) i/s -      7.834M in   5.063426s
           Array#map      5.727M (± 6.0%) i/s -     29.020M in   5.086794s

Comparison:
           Array#map:  5726547.6 i/s
   Array#each + push:  1550270.1 i/s - 3.69x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     8.483M i/100ms
               #each    56.484M i/100ms
Calculating -------------------------------------
            For loop     84.289M (± 0.8%) i/s -    424.151M in   5.032430s
               #each    568.705M (± 0.3%) i/s -      2.881B in   5.065395s

Comparison:
               #each: 568705418.0 i/s
            For loop: 84288884.8 i/s - 6.75x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   901.152k i/100ms
     each_with_index     1.279M i/100ms
Calculating -------------------------------------
          While Loop      9.072M (± 0.2%) i/s -     45.959M in   5.066100s
     each_with_index     12.824M (± 0.2%) i/s -     65.249M in   5.088072s

Comparison:
     each_with_index: 12823979.2 i/s
          While Loop:  9071865.2 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   146.181k i/100ms
      inject to_proc   147.423k i/100ms
        inject block   147.419k i/100ms
Calculating -------------------------------------
       inject symbol      1.472M (± 0.5%) i/s -      7.455M in   5.064599s
      inject to_proc      1.474M (± 0.2%) i/s -      7.371M in   5.001627s
        inject block      1.474M (± 0.2%) i/s -      7.371M in   5.001845s

Comparison:
      inject to_proc:  1473753.8 i/s
        inject block:  1473651.4 i/s - same-ish: difference falls within error
       inject symbol:  1472068.0 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     9.685k i/100ms
   Array#map.flatten    11.843k i/100ms
      Array#flat_map    32.170k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    122.009k (± 3.7%) i/s -    610.155k in   5.008199s
   Array#map.flatten    119.999k (± 2.8%) i/s -    603.993k in   5.037493s
      Array#flat_map    323.079k (± 2.3%) i/s -      1.641M in   5.081148s

Comparison:
      Array#flat_map:   323079.0 i/s
Array#map.flatten(1):   122008.9 i/s - 2.65x  (± 0.00) slower
   Array#map.flatten:   119999.3 i/s - 2.69x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   193.467k i/100ms
  Array#reverse_each     2.205M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.990M (± 3.3%) i/s -     10.060M in   5.061756s
  Array#reverse_each     21.980M (± 0.4%) i/s -    110.262M in   5.016535s

Comparison:
  Array#reverse_each: 21980049.3 i/s
  Array#reverse.each:  1989706.9 i/s - 11.05x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       572.713k i/100ms
   Enumerable#detect     3.850M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          6.735M (± 6.2%) i/s -    134.015M in  20.003649s
   Enumerable#detect     38.471M (± 0.3%) i/s -    770.020M in  20.015557s

Comparison:
   Enumerable#detect: 38471498.8 i/s
Enumerable#select.first:  6734603.6 i/s - 5.71x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       154.461k i/100ms
Enumerable#select.last
                       329.838k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.782M (± 3.4%) i/s -      8.959M in   5.032304s
Enumerable#select.last
                          3.305M (± 3.2%) i/s -     16.822M in   5.094668s

Comparison:
Enumerable#select.last:  3305408.7 i/s
Enumerable#reverse.detect:  1782431.0 i/s - 1.85x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.254k i/100ms
  Enumerable#sort_by     2.451k i/100ms
     Enumerable#sort     3.153k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         23.322k (±17.5%) i/s -    105.938k in   5.041620s
  Enumerable#sort_by     23.202k (±17.7%) i/s -    105.393k in   5.083136s
     Enumerable#sort     31.840k (± 0.4%) i/s -    160.803k in   5.050430s

Comparison:
     Enumerable#sort:    31840.1 i/s
Enumerable#sort_by (Symbol#to_proc):    23322.4 i/s - 1.37x  (± 0.00) slower
  Enumerable#sort_by:    23201.8 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   500.605k i/100ms
Enumerable#sort_by...first
                         4.954k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      5.043M (± 0.3%) i/s -     25.531M in   5.062448s
Enumerable#sort_by...first
                         56.519k (± 3.1%) i/s -    282.378k in   5.001258s

Comparison:
   Enumerable#min_by:  5043222.2 i/s
Enumerable#sort_by...first:    56519.1 i/s - 89.23x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   185.373k i/100ms
            Hash#dup   231.652k i/100ms
Calculating -------------------------------------
              Hash[]      2.296M (± 4.7%) i/s -     11.493M in   5.017627s
            Hash#dup      2.332M (± 4.3%) i/s -     11.814M in   5.076409s

Comparison:
            Hash#dup:  2331960.7 i/s
              Hash[]:  2295966.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   238.664M i/100ms
  Hash#fetch, symbol   238.712M i/100ms
     Hash#[], string     4.688M i/100ms
  Hash#fetch, string     4.845M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      2.386B (± 0.3%) i/s -     11.933B in   5.000946s
  Hash#fetch, symbol      2.388B (± 0.2%) i/s -     12.174B in   5.098372s
     Hash#[], string     46.997M (± 0.5%) i/s -    239.092M in   5.087486s
  Hash#fetch, string     48.558M (± 0.3%) i/s -    247.080M in   5.088438s

Comparison:
  Hash#fetch, symbol: 2387888174.2 i/s
     Hash#[], symbol: 2386209903.3 i/s - same-ish: difference falls within error
  Hash#fetch, string: 48557507.1 i/s - 49.18x  (± 0.00) slower
     Hash#[], string: 46997254.7 i/s - 50.81x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    59.674M i/100ms
             Hash#[]    59.663M i/100ms
          Hash#[] ||    59.727M i/100ms
          Hash#[] &&    59.730M i/100ms
          Hash#fetch    59.727M i/100ms
 Hash#fetch fallback    59.719M i/100ms
Calculating -------------------------------------
            Hash#dig    595.844M (± 0.9%) i/s -      2.984B in   5.007966s
             Hash#[]    596.890M (± 0.2%) i/s -      3.043B in   5.097818s
          Hash#[] ||    596.807M (± 0.2%) i/s -      2.986B in   5.003925s
          Hash#[] &&    596.957M (± 0.2%) i/s -      2.987B in   5.002905s
          Hash#fetch    597.040M (± 0.2%) i/s -      2.986B in   5.001955s
 Hash#fetch fallback    597.022M (± 0.2%) i/s -      2.986B in   5.001385s

Comparison:
          Hash#fetch: 597040380.8 i/s
 Hash#fetch fallback: 597022160.1 i/s - same-ish: difference falls within error
          Hash#[] &&: 596957213.4 i/s - same-ish: difference falls within error
             Hash#[]: 596890097.6 i/s - same-ish: difference falls within error
          Hash#[] ||: 596806782.7 i/s - same-ish: difference falls within error
            Hash#dig: 595844260.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   238.337M i/100ms
  Hash#fetch + block   238.602M i/100ms
    Hash#fetch + arg   238.869M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      2.385B (± 0.3%) i/s -     12.155B in   5.096184s
  Hash#fetch + block      2.387B (± 0.2%) i/s -     12.169B in   5.098253s
    Hash#fetch + arg      2.388B (± 0.2%) i/s -     11.943B in   5.002414s

Comparison:
    Hash#fetch + arg: 2387552181.1 i/s
  Hash#fetch + block: 2386856878.9 i/s - same-ish: difference falls within error
  Hash#fetch + const: 2385184063.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    16.948k i/100ms
         sort + to_h    11.484k i/100ms
Calculating -------------------------------------
      sort_by + to_h    195.342k (± 5.8%) i/s -    982.984k in   5.049766s
         sort + to_h    122.168k (± 4.9%) i/s -    620.136k in   5.088967s

Comparison:
      sort_by + to_h:   195341.5 i/s
         sort + to_h:   122168.2 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   122.782k i/100ms
       Hash#each_key   139.163k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.285M (± 4.3%) i/s -      6.507M in   5.075358s
       Hash#each_key      1.391M (± 3.9%) i/s -      6.958M in   5.009942s

Comparison:
       Hash#each_key:  1391162.3 i/s
      Hash#keys.each:  1284745.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   165.000  i/100ms
           Hash#key?    17.797M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.906k (±13.6%) i/s -      9.240k in   5.005379s
           Hash#key?    178.073M (± 0.4%) i/s -    907.625M in   5.097024s

Comparison:
           Hash#key?: 178072575.7 i/s
  Hash#keys.include?:     1905.7 i/s - 93441.77x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    21.765k i/100ms
            Hash#[]=    24.289k i/100ms
Calculating -------------------------------------
         Hash#merge!    241.801k (± 3.9%) i/s -      1.219M in   5.048997s
            Hash#[]=    248.301k (± 3.6%) i/s -      1.263M in   5.093443s

Comparison:
            Hash#[]=:   248300.5 i/s
         Hash#merge!:   241800.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        10.275k i/100ms
      Hash#merge({})     8.466k i/100ms
 Hash#dup#merge!({})    14.071k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        129.809k (± 4.7%) i/s -    647.325k in   4.999180s
      Hash#merge({})     86.650k (± 4.0%) i/s -    440.232k in   5.089405s
 Hash#dup#merge!({})    142.462k (± 3.9%) i/s -    717.621k in   5.045803s

Comparison:
 Hash#dup#merge!({}):   142461.5 i/s
{}#merge!(Hash) do end:   129809.2 i/s - 1.10x  (± 0.00) slower
      Hash#merge({}):    86649.7 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   238.523M i/100ms
          Hash#merge   238.933M i/100ms
Calculating -------------------------------------
        Hash#**other      2.385B (± 0.4%) i/s -     11.926B in   5.001557s
          Hash#merge      2.387B (± 0.3%) i/s -     11.947B in   5.005279s

Comparison:
          Hash#merge: 2386830699.5 i/s
        Hash#**other: 2384523295.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   295.000  i/100ms
         Hash#merge!    24.060k i/100ms
Calculating -------------------------------------
          Hash#merge      3.494k (± 4.7%) i/s -     17.700k in   5.077081s
         Hash#merge!    240.996k (± 3.8%) i/s -      1.203M in   4.999437s

Comparison:
         Hash#merge!:   240996.3 i/s
          Hash#merge:     3494.5 i/s - 68.97x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.080M i/100ms
Array#each             960.426k i/100ms
Array#each_w/_object   968.635k i/100ms
Hash#select-include      1.383M i/100ms
Calculating -------------------------------------
Hash#native-slice        12.031M (± 3.2%) i/s -     60.470M in   5.031931s
Array#each                9.740M (± 3.0%) i/s -     48.982M in   5.033712s
Array#each_w/_object      9.786M (± 2.5%) i/s -     49.400M in   5.051687s
Hash#select-include      14.098M (± 3.4%) i/s -     70.532M in   5.008916s

Comparison:
Hash#select-include : 14097774.7 i/s
Hash#native-slice   : 12031376.1 i/s - 1.17x  (± 0.00) slower
Array#each_w/_object:  9785617.7 i/s - 1.44x  (± 0.00) slower
Array#each          :  9740030.6 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   154.000  i/100ms
         Hash#value?   409.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.888k (±13.8%) i/s -      9.240k in   5.017958s
         Hash#value?      4.131k (± 0.3%) i/s -     20.859k in   5.048914s

Comparison:
         Hash#value?:     4131.4 i/s
Hash#values.include?:     1888.1 i/s - 2.19x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   238.432M i/100ms
                send   238.309M i/100ms
      method_missing   238.941M i/100ms
Calculating -------------------------------------
                call      2.383B (± 1.0%) i/s -     11.922B in   5.003731s
                send      2.387B (± 0.2%) i/s -     12.154B in   5.091048s
      method_missing      2.388B (± 0.2%) i/s -     11.947B in   5.002072s

Comparison:
      method_missing: 2388429640.5 i/s
                send: 2387297298.0 i/s - same-ish: difference falls within error
                call: 2382785350.2 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    18.308k i/100ms
      Symbol#to_proc    20.381k i/100ms
Calculating -------------------------------------
               Block    206.929k (± 3.6%) i/s -      1.044M in   5.050164s
      Symbol#to_proc    206.869k (± 3.2%) i/s -      1.039M in   5.029880s

Comparison:
               Block:   206929.1 i/s
      Symbol#to_proc:   206869.0 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   238.707M i/100ms
       block + yield   238.812M i/100ms
        unused block   238.932M i/100ms
               yield   238.950M i/100ms
Calculating -------------------------------------
          block.call      2.387B (± 0.3%) i/s -     11.935B in   5.000631s
       block + yield      2.387B (± 0.2%) i/s -     11.941B in   5.001465s
        unused block      2.388B (± 0.2%) i/s -     11.947B in   5.003282s
               yield      2.388B (± 0.2%) i/s -     11.947B in   5.002579s

Comparison:
               yield: 2388271296.1 i/s
        unused block: 2387762189.9 i/s - same-ish: difference falls within error
       block + yield: 2387437174.2 i/s - same-ish: difference falls within error
          block.call: 2386787779.5 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    55.219k i/100ms
      range#include?   326.000  i/100ms
       range#member?   434.000  i/100ms
       plain compare    47.747k i/100ms
Calculating -------------------------------------
        range#cover?    241.927k (±48.3%) i/s -    938.723k in   5.057836s
      range#include?      7.898k (±47.8%) i/s -     20.864k in   5.110507s
       range#member?      8.265k (±53.8%) i/s -     17.360k in   6.203924s
       plain compare    402.076k (±26.5%) i/s -      1.862M in   5.063048s

Comparison:
       plain compare:   402075.7 i/s
        range#cover?:   241926.9 i/s - same-ish: difference falls within error
       range#member?:     8264.6 i/s - 48.65x  (± 0.00) slower
      range#include?:     7898.1 i/s - 50.91x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     3.224M i/100ms
           String#=~     5.393M i/100ms
          Regexp#===     5.387M i/100ms
        String#match     4.976M i/100ms
Calculating -------------------------------------
       String#match?     41.028M (± 4.2%) i/s -    206.350M in   5.038841s
           String#=~     53.844M (± 0.2%) i/s -    269.643M in   5.007855s
          Regexp#===     53.899M (± 0.3%) i/s -    274.713M in   5.096860s
        String#match     49.756M (± 0.1%) i/s -    248.820M in   5.000805s

Comparison:
          Regexp#===: 53898906.4 i/s
           String#=~: 53844420.5 i/s - same-ish: difference falls within error
        String#match: 49756027.0 i/s - 1.08x  (± 0.00) slower
       String#match?: 41028078.9 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.252M i/100ms
      String#casecmp     3.358M i/100ms
Calculating -------------------------------------
String#downcase + ==     14.480M (± 4.5%) i/s -     72.632M in   5.026726s
      String#casecmp     33.590M (± 0.2%) i/s -    171.263M in   5.098637s

Comparison:
      String#casecmp: 33589989.2 i/s
String#downcase + ==: 14479713.3 i/s - 2.32x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+   270.474M i/100ms
       String#concat   238.659M i/100ms
       String#append   238.956M i/100ms
         "foo" "bar"   238.965M i/100ms
  "#{'foo'}#{'bar'}"   238.959M i/100ms
Calculating -------------------------------------
            String#+      2.387B (± 0.2%) i/s -     12.171B in   5.097965s
       String#concat      2.388B (± 0.2%) i/s -     12.172B in   5.097065s
       String#append      2.388B (± 0.3%) i/s -     11.948B in   5.004341s
         "foo" "bar"      2.388B (± 0.2%) i/s -     11.948B in   5.002940s
  "#{'foo'}#{'bar'}"      2.389B (± 0.1%) i/s -     11.948B in   5.001445s

Comparison:
  "#{'foo'}#{'bar'}": 2388901335.1 i/s
         "foo" "bar": 2388255874.0 i/s - same-ish: difference falls within error
       String#concat: 2387973013.5 i/s - same-ish: difference falls within error
       String#append: 2387502882.3 i/s - same-ish: difference falls within error
            String#+: 2387499344.7 i/s - same-ish: difference falls within error

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   238.269M i/100ms
          String#dup   238.928M i/100ms
Calculating -------------------------------------
           String#+@      2.386B (± 0.3%) i/s -     12.152B in   5.093824s
          String#dup      2.388B (± 0.2%) i/s -     11.946B in   5.003149s

Comparison:
          String#dup: 2387790474.8 i/s
           String#+@: 2385601878.2 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.287M i/100ms
       String#match?     1.334M i/100ms
    String#end_with?    15.721M i/100ms
Calculating -------------------------------------
           String#=~     13.006M (± 3.2%) i/s -     65.635M in   5.052324s
       String#match?     13.511M (± 2.4%) i/s -     68.031M in   5.038199s
    String#end_with?    157.046M (± 0.3%) i/s -    786.062M in   5.005336s

Comparison:
    String#end_with?: 157045899.2 i/s
       String#match?: 13511449.8 i/s - 11.62x  (± 0.00) slower
           String#=~: 13005528.0 i/s - 12.08x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    81.450k i/100ms
          String#sub   434.862k i/100ms
String#dup["string"]=
                        18.514M i/100ms
Calculating -------------------------------------
         String#gsub    859.058k (± 3.7%) i/s -      4.317M in   5.033083s
          String#sub      4.898M (± 7.8%) i/s -     24.352M in   5.005102s
String#dup["string"]=
                        184.598M (± 0.7%) i/s -    925.682M in   5.014814s

Comparison:
String#dup["string"]=: 184598060.3 i/s
          String#sub:  4898214.8 i/s - 37.69x  (± 0.00) slower
         String#gsub:   859058.4 i/s - 214.88x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   163.060k i/100ms
           String#tr   118.143k i/100ms
Calculating -------------------------------------
         String#gsub      1.908M (± 4.5%) i/s -      9.621M in   5.053859s
           String#tr      1.179M (± 4.7%) i/s -      5.907M in   5.020660s

Comparison:
         String#gsub:  1907754.6 i/s
           String#tr:  1179315.3 i/s - 1.62x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   238.781M i/100ms
         With Freeze   238.593M i/100ms
Calculating -------------------------------------
      Without Freeze      2.385B (± 0.4%) i/s -     11.939B in   5.005469s
         With Freeze      2.386B (± 0.4%) i/s -     11.930B in   5.000290s

Comparison:
         With Freeze: 2385831074.3 i/s
      Without Freeze: 2385230193.9 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     4.879k i/100ms
      String#squeeze    53.488k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     67.890k (± 4.7%) i/s -    341.530k in   5.042375s
      String#squeeze    531.646k (± 2.5%) i/s -      2.674M in   5.034004s

Comparison:
      String#squeeze:   531645.9 i/s
 String#gsub/regex+/:    67889.6 i/s - 7.83x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     2.583M i/100ms
       String#match?     2.881M i/100ms
  String#start_with?     1.723M i/100ms
Calculating -------------------------------------
           String#=~     26.314M (± 2.4%) i/s -    131.714M in   5.008737s
       String#match?     29.770M (± 3.5%) i/s -    149.790M in   5.037776s
  String#start_with?     17.517M (± 3.3%) i/s -     87.886M in   5.023105s

Comparison:
       String#match?: 29770041.7 i/s
           String#=~: 26313748.4 i/s - 1.13x  (± 0.00) slower
  String#start_with?: 17516533.5 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   315.551k i/100ms
    String#[0, n] ==   185.395k i/100ms
   String#[RANGE] ==   182.237k i/100ms
   String#[0...n] ==   145.929k i/100ms
Calculating -------------------------------------
  String#start_with?      3.312M (± 3.2%) i/s -     16.724M in   5.055722s
    String#[0, n] ==      1.843M (± 5.3%) i/s -      9.270M in   5.044472s
   String#[RANGE] ==      1.831M (± 5.4%) i/s -      9.294M in   5.093162s
   String#[0...n] ==      1.471M (± 3.9%) i/s -      7.442M in   5.066097s

Comparison:
  String#start_with?:  3311634.0 i/s
    String#[0, n] ==:  1842926.5 i/s - 1.80x  (± 0.00) slower
   String#[RANGE] ==:  1830605.0 i/s - 1.81x  (± 0.00) slower
   String#[0...n] ==:  1471465.5 i/s - 2.25x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    21.978M i/100ms
 String#sub!'string'   569.182k i/100ms
String#gsub!'string'    87.290k i/100ms
  String#[/regexp/]=     4.455M i/100ms
 String#sub!/regexp/     2.105M i/100ms
String#gsub!/regexp/   527.015k i/100ms
Calculating -------------------------------------
  String#['string']=    225.085M (± 0.5%) i/s -      1.143B in   5.077615s
 String#sub!'string'      5.894M (±13.8%) i/s -     27.321M in   5.025765s
String#gsub!'string'      1.092M (± 3.1%) i/s -      5.499M in   5.042378s
  String#[/regexp/]=     44.448M (± 1.1%) i/s -    222.738M in   5.011910s
 String#sub!/regexp/     21.223M (± 3.2%) i/s -    107.347M in   5.063905s
String#gsub!/regexp/      5.406M (± 5.3%) i/s -     27.405M in   5.085227s

Comparison:
  String#['string']=: 225085171.5 i/s
  String#[/regexp/]=: 44447553.0 i/s - 5.06x  (± 0.00) slower
 String#sub!/regexp/: 21223241.7 i/s - 10.61x  (± 0.00) slower
 String#sub!'string':  5894361.5 i/s - 38.19x  (± 0.00) slower
String#gsub!/regexp/:  5405682.3 i/s - 41.64x  (± 0.00) slower
String#gsub!'string':  1091874.2 i/s - 206.15x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.983M i/100ms
        String#chomp     2.815M i/100ms
String#delete_suffix     6.505M i/100ms
Calculating -------------------------------------
          String#sub     21.499M (± 2.7%) i/s -    109.050M in   5.076277s
        String#chomp     28.102M (± 3.4%) i/s -    140.770M in   5.015041s
String#delete_suffix     64.981M (± 0.3%) i/s -    325.249M in   5.005321s

Comparison:
String#delete_suffix: 64981266.9 i/s
        String#chomp: 28101630.1 i/s - 2.31x  (± 0.00) slower
          String#sub: 21498522.1 i/s - 3.02x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix     1.889M i/100ms
          String#sub     7.112M i/100ms
Calculating -------------------------------------
String#delete_prefix     19.991M (± 4.3%) i/s -    100.126M in   5.018138s
          String#sub     71.106M (± 0.1%) i/s -    355.608M in   5.001078s

Comparison:
          String#sub: 71106360.7 i/s
String#delete_prefix: 19991386.5 i/s - 3.56x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.254M i/100ms
    String#unpack[0]     1.499M i/100ms
Calculating -------------------------------------
      String#unpack1     15.209M (± 4.0%) i/s -     76.511M in   5.039348s
    String#unpack[0]     15.123M (± 3.3%) i/s -     76.436M in   5.060266s

Comparison:
      String#unpack1: 15208501.6 i/s
    String#unpack[0]: 15122948.5 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.2.0-dev-51b68e7a, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    16.982k i/100ms
          Time.parse   167.000  i/100ms
Calculating -------------------------------------
        Time.iso8601     99.530k (±38.1%) i/s -    441.532k in   5.010248s
          Time.parse      4.344k (±21.3%) i/s -     19.706k in   5.016069s

Comparison:
        Time.iso8601:    99530.0 i/s
          Time.parse:     4344.3 i/s - 22.91x  (± 0.00) slower

