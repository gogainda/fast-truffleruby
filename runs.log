$ ruby -v code/general/inheritance-check.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   221.247k i/100ms
  ancestors.include?    94.691k i/100ms
Calculating -------------------------------------
  less than or equal      7.848M (± 5.2%) i/s -     39.161M in   5.005023s
  ancestors.include?      1.038M (± 3.6%) i/s -      5.208M in   5.023846s

Comparison:
  less than or equal:  7848286.4 i/s
  ancestors.include?:  1038028.6 i/s - 7.56x  (± 0.00) slower

$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       126.276M i/100ms
Function with splat arguments
                       551.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.289B (± 3.3%) i/s -      6.440B in   5.000382s
Function with splat arguments
                          5.658k (± 3.7%) i/s -     28.652k in   5.071683s

Comparison:
Function with single Array argument: 1289382885.7 i/s
Function with splat arguments:     5657.5 i/s - 227906.74x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   131.170M i/100ms
          OpenStruct     1.446M i/100ms
Calculating -------------------------------------
                Hash      1.334B (± 2.2%) i/s -      6.690B in   5.016907s
          OpenStruct    441.583M (± 5.3%) i/s -      2.202B in   5.000764s

Comparison:
                Hash: 1334045067.3 i/s
          OpenStruct: 441583082.8 i/s - 3.02x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   126.886M i/100ms
       attr_accessor   130.376M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.263B (± 3.3%) i/s -      6.344B in   5.029336s
       attr_accessor      1.237B (± 4.3%) i/s -      6.258B in   5.070671s

Comparison:
   getter_and_setter: 1262917600.3 i/s
       attr_accessor: 1236502437.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    22.970k i/100ms
       Kernel#format    42.282k i/100ms
            String#%    41.615k i/100ms
Calculating -------------------------------------
         Float#round    314.534k (± 4.9%) i/s -      1.585M in   5.051877s
       Kernel#format    432.261k (± 2.6%) i/s -      2.199M in   5.090081s
            String#%    424.946k (± 3.3%) i/s -      2.122M in   5.000138s

Comparison:
       Kernel#format:   432260.9 i/s
            String#%:   424946.4 i/s - same-ish: difference falls within error
         Float#round:   314534.3 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     21.041  (± 0.0%) i/s -    106.000  in   5.039731s
         Kernel loop      4.692  (± 0.0%) i/s -     24.000  in   5.117906s

Comparison:
          While Loop:       21.0 i/s
         Kernel loop:        4.7 i/s - 4.48x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     7.797k i/100ms
         respond_to?   128.172M i/100ms
Calculating -------------------------------------
      begin...rescue     44.671k (± 4.3%) i/s -    226.113k in   5.071780s
         respond_to?      1.283B (± 3.6%) i/s -      6.409B in   5.001248s

Comparison:
         respond_to?: 1283102073.0 i/s
      begin...rescue:    44671.3 i/s - 28723.17x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        58.000  i/100ms
       define_method   188.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.176k (±31.3%) i/s -      5.278k in   5.072810s
       define_method      3.743k (±40.0%) i/s -     12.408k in   6.655881s

Comparison:
       define_method:     3742.9 i/s
module_eval with string:     2176.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/assignment.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   129.701M i/100ms
Sequential Assignment
                       129.748M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.286B (± 2.4%) i/s -      6.485B in   5.046443s
Sequential Assignment
                          1.308B (± 1.5%) i/s -      6.617B in   5.061748s

Comparison:
Sequential Assignment: 1307572542.7 i/s
 Parallel Assignment: 1285870514.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/block-apply-method.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   129.844M i/100ms
             &method   130.037M i/100ms
Calculating -------------------------------------
              normal      1.280B (± 2.0%) i/s -      6.492B in   5.073125s
             &method      1.284B (± 1.7%) i/s -      6.502B in   5.066108s

Comparison:
             &method: 1283754837.1 i/s
              normal: 1280256562.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   123.226M i/100ms
          OpenStruct   128.158M i/100ms
Calculating -------------------------------------
                Hash      1.256B (± 3.1%) i/s -      6.285B in   5.007473s
          OpenStruct      1.276B (± 4.1%) i/s -      6.408B in   5.030711s

Comparison:
          OpenStruct: 1276041487.5 i/s
                Hash: 1256276340.3 i/s - same-ish: difference falls within error

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   127.319M i/100ms
                send   128.523M i/100ms
      method_missing   126.832M i/100ms
Calculating -------------------------------------
                call      1.278B (± 3.3%) i/s -      6.493B in   5.086134s
                send      1.285B (± 3.7%) i/s -      6.426B in   5.006259s
      method_missing      1.282B (± 4.1%) i/s -      6.468B in   5.054597s

Comparison:
                send: 1285418144.7 i/s
      method_missing: 1281915959.1 i/s - same-ish: difference falls within error
                call: 1278039733.8 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     2.764k i/100ms
      range#include?    59.000  i/100ms
       range#member?   157.000  i/100ms
       plain compare    17.746k i/100ms
Calculating -------------------------------------
        range#cover?    191.998k (±39.7%) i/s -    790.504k in   5.002420s
      range#include?      3.315k (±44.8%) i/s -     10.325k in   4.989086s
       range#member?      3.347k (±49.3%) i/s -     11.461k in   5.731834s
       plain compare    147.918k (±24.1%) i/s -    709.840k in   5.097559s

Comparison:
        range#cover?:   191997.6 i/s
       plain compare:   147917.6 i/s - same-ish: difference falls within error
       range#member?:     3346.5 i/s - 57.37x  (± 0.00) slower
      range#include?:     3315.1 i/s - 57.92x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   132.174M i/100ms
          Array#last   131.945M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.297B (± 1.5%) i/s -      6.609B in   5.097909s
          Array#last      1.325B (± 2.1%) i/s -      6.729B in   5.082546s

Comparison:
          Array#last: 1324564357.0 i/s
          Array#[-1]: 1296660037.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    14.735k i/100ms
        Array#sample     2.175M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    210.292k (± 3.0%) i/s -      1.061M in   5.049904s
        Array#sample     22.353M (± 2.1%) i/s -    113.094M in   5.061622s

Comparison:
        Array#sample: 22353034.4 i/s
 Array#shuffle.first:   210291.7 i/s - 106.30x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.107  (± 0.0%) i/s -      1.000  in   9.385442s
        Array#insert      0.826  (± 0.0%) i/s -      5.000  in   6.056689s

Comparison:
        Array#insert:        0.8 i/s
       Array#unshift:        0.1 i/s - 7.75x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   124.743M i/100ms
          Array#size   122.915M i/100ms
         Array#count   128.217M i/100ms
Calculating -------------------------------------
        Array#length      1.280B (± 2.0%) i/s -      6.487B in   5.068136s
          Array#size      1.320B (± 2.0%) i/s -      6.637B in   5.029907s
         Array#count      1.303B (± 2.6%) i/s -      6.539B in   5.022320s

Comparison:
          Array#size: 1320104122.9 i/s
         Array#count: 1302882008.0 i/s - same-ish: difference falls within error
        Array#length: 1280382559.9 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   349.964k i/100ms
Calculating -------------------------------------
                find      0.098  (± 0.0%) i/s -      1.000  in  10.251120s
             bsearch      3.450M (± 3.5%) i/s -     17.498M in   5.078715s

Comparison:
             bsearch:  3449558.2 i/s
                find:        0.1 i/s - 35361833.53x  (± 0.00) slower

$ ruby -v code/array/array-first-vs-index.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   208.155M i/100ms
         Array#first   207.079M i/100ms
Calculating -------------------------------------
           Array#[0]      2.082B (± 1.3%) i/s -     10.408B in   4.999745s
         Array#first      2.101B (± 4.9%) i/s -     10.561B in   5.041734s

Comparison:
         Array#first: 2100733918.1 i/s
           Array#[0]: 2081996333.3 i/s - same-ish: difference falls within error

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub    82.937k i/100ms
        String#chomp   215.577k i/100ms
String#delete_suffix     1.077M i/100ms
Calculating -------------------------------------
          String#sub      6.316M (±10.9%) i/s -     31.101M in   4.997302s
        String#chomp     47.451M (± 4.2%) i/s -    236.919M in   5.001177s
String#delete_suffix     49.933M (± 3.2%) i/s -    249.849M in   5.008686s

Comparison:
String#delete_suffix: 49932993.9 i/s
        String#chomp: 47450635.1 i/s - same-ish: difference falls within error
          String#sub:  6316119.0 i/s - 7.91x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   203.197k i/100ms
       String#match?   792.000k i/100ms
  String#start_with?     1.694M i/100ms
Calculating -------------------------------------
           String#=~     23.154M (± 6.4%) i/s -    115.213M in   5.003837s
       String#match?     32.836M (± 4.1%) i/s -    163.944M in   5.000719s
  String#start_with?     16.544M (± 3.5%) i/s -     83.015M in   5.023955s

Comparison:
       String#match?: 32836123.5 i/s
           String#=~: 23154252.1 i/s - 1.42x  (± 0.00) slower
  String#start_with?: 16544460.5 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    35.525k i/100ms
          String#sub    42.736k i/100ms
String#dup["string"]=
                       370.338k i/100ms
Calculating -------------------------------------
         String#gsub    808.249k (±14.0%) i/s -      3.943M in   4.998462s
          String#sub      1.147M (±13.2%) i/s -      5.513M in   5.004090s
String#dup["string"]=
                        105.833M (± 6.2%) i/s -    527.361M in   5.001034s

Comparison:
String#dup["string"]=: 105832947.8 i/s
          String#sub:  1146863.7 i/s - 92.28x  (± 0.00) slower
         String#gsub:   808249.0 i/s - 130.94x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   177.728k i/100ms
    String#[0, n] ==    75.032k i/100ms
   String#[RANGE] ==    90.422k i/100ms
   String#[0...n] ==    68.364k i/100ms
Calculating -------------------------------------
  String#start_with?      2.809M (± 5.5%) i/s -     14.041M in   5.014968s
    String#[0, n] ==      1.703M (± 6.8%) i/s -      8.554M in   5.048742s
   String#[RANGE] ==      1.749M (± 4.8%) i/s -      8.771M in   5.026168s
   String#[0...n] ==      1.301M (± 4.6%) i/s -      6.495M in   5.003666s

Comparison:
  String#start_with?:  2808599.3 i/s
   String#[RANGE] ==:  1749435.1 i/s - 1.61x  (± 0.00) slower
    String#[0, n] ==:  1702825.1 i/s - 1.65x  (± 0.00) slower
   String#[0...n] ==:  1300853.0 i/s - 2.16x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.156M i/100ms
    String#unpack[0]     1.185M i/100ms
Calculating -------------------------------------
      String#unpack1     11.803M (± 2.7%) i/s -     60.086M in   5.094434s
    String#unpack[0]     11.734M (± 2.7%) i/s -     59.245M in   5.052802s

Comparison:
      String#unpack1: 11803489.5 i/s
    String#unpack[0]: 11734134.0 i/s - same-ish: difference falls within error

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    37.102k i/100ms
           String#tr    22.682k i/100ms
Calculating -------------------------------------
         String#gsub      1.356M (±20.3%) i/s -      6.344M in   4.995881s
           String#tr      1.085M (± 7.7%) i/s -      5.398M in   5.010116s

Comparison:
         String#gsub:  1356162.0 i/s
           String#tr:  1084916.6 i/s - same-ish: difference falls within error

$ ruby -v code/string/concatenation.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+   122.294M i/100ms
       String#concat   126.818M i/100ms
       String#append   126.160M i/100ms
         "foo" "bar"   128.069M i/100ms
  "#{'foo'}#{'bar'}"   129.165M i/100ms
Calculating -------------------------------------
            String#+      1.321B (± 2.0%) i/s -      6.604B in   5.002837s
       String#concat      1.320B (± 2.6%) i/s -      6.721B in   5.095093s
       String#append      1.342B (± 2.5%) i/s -      6.813B in   5.080621s
         "foo" "bar"      1.323B (± 2.2%) i/s -      6.660B in   5.036934s
  "#{'foo'}#{'bar'}"      1.325B (± 1.7%) i/s -      6.717B in   5.069168s

Comparison:
       String#append: 1341752706.5 i/s
  "#{'foo'}#{'bar'}": 1325354500.4 i/s - same-ish: difference falls within error
         "foo" "bar": 1322808041.5 i/s - same-ish: difference falls within error
            String#+: 1320568342.0 i/s - same-ish: difference falls within error
       String#concat: 1320104696.4 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     1.092k i/100ms
      String#squeeze    45.867k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     74.768k (± 9.6%) i/s -    370.188k in   5.007560s
      String#squeeze    543.103k (± 3.1%) i/s -      2.752M in   5.072283s

Comparison:
      String#squeeze:   543102.9 i/s
 String#gsub/regex+/:    74768.5 i/s - 7.26x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   895.972k i/100ms
      String#casecmp     3.069M i/100ms
Calculating -------------------------------------
String#downcase + ==     12.550M (± 4.3%) i/s -     62.718M in   5.007254s
      String#casecmp     29.360M (± 3.8%) i/s -    147.329M in   5.025348s

Comparison:
      String#casecmp: 29359849.8 i/s
String#downcase + ==: 12549539.3 i/s - 2.34x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   129.261M i/100ms
         With Freeze   124.967M i/100ms
Calculating -------------------------------------
      Without Freeze      1.284B (± 1.4%) i/s -      6.463B in   5.034266s
         With Freeze      1.305B (± 1.7%) i/s -      6.623B in   5.078102s

Comparison:
         With Freeze: 1304650693.2 i/s
      Without Freeze: 1284086509.7 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   206.097k i/100ms
       String#match?   687.715k i/100ms
    String#end_with?    12.950M i/100ms
Calculating -------------------------------------
           String#=~     10.670M (± 6.7%) i/s -     53.173M in   5.011170s
       String#match?     15.954M (± 4.0%) i/s -     79.775M in   5.009163s
    String#end_with?    126.910M (± 3.5%) i/s -    634.535M in   5.006189s

Comparison:
    String#end_with?: 126909591.0 i/s
       String#match?: 15954168.0 i/s - 7.95x  (± 0.00) slower
           String#=~: 10669868.7 i/s - 11.89x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    13.384M i/100ms
 String#sub!'string'    49.072k i/100ms
String#gsub!'string'     4.769k i/100ms
  String#[/regexp/]=     6.058k i/100ms
 String#sub!/regexp/    11.813k i/100ms
String#gsub!/regexp/    91.627k i/100ms
Calculating -------------------------------------
  String#['string']=    137.503M (± 2.0%) i/s -    695.962M in   5.063459s
 String#sub!'string'      1.341M (±13.0%) i/s -      6.527M in   5.031171s
String#gsub!'string'    678.820k (±22.0%) i/s -      3.066M in   5.003835s
  String#[/regexp/]=     30.049M (± 7.1%) i/s -    148.651M in   4.970012s
 String#sub!/regexp/      7.077M (±11.2%) i/s -     33.915M in   4.992099s
String#gsub!/regexp/      3.244M (± 7.1%) i/s -     16.126M in   4.998523s

Comparison:
  String#['string']=: 137502581.9 i/s
  String#[/regexp/]=: 30048989.0 i/s - 4.58x  (± 0.00) slower
 String#sub!/regexp/:  7077463.8 i/s - 19.43x  (± 0.00) slower
String#gsub!/regexp/:  3244369.9 i/s - 42.38x  (± 0.00) slower
 String#sub!'string':  1341309.7 i/s - 102.51x  (± 0.00) slower
String#gsub!'string':   678820.4 i/s - 202.56x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   129.605M i/100ms
          String#dup   130.300M i/100ms
Calculating -------------------------------------
           String#+@      1.308B (± 1.4%) i/s -      6.610B in   5.053824s
          String#dup      1.324B (± 2.1%) i/s -      6.645B in   5.023113s

Comparison:
          String#dup: 1323501846.8 i/s
           String#+@: 1308131457.8 i/s - same-ish: difference falls within error

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?   259.557k i/100ms
           String#=~     5.435M i/100ms
          Regexp#===     5.426M i/100ms
        String#match     1.474M i/100ms
Calculating -------------------------------------
       String#match?     64.696M (± 5.2%) i/s -    322.629M in   4.999432s
           String#=~     54.247M (± 2.1%) i/s -    271.739M in   5.011529s
          Regexp#===     54.019M (± 1.6%) i/s -    271.301M in   5.023529s
        String#match     43.690M (± 3.1%) i/s -    219.608M in   5.031080s

Comparison:
       String#match?: 64696291.6 i/s
           String#=~: 54246823.2 i/s - 1.19x  (± 0.00) slower
          Regexp#===: 54019392.0 i/s - 1.20x  (± 0.00) slower
        String#match: 43690015.2 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   109.213k i/100ms
          String#sub    89.914k i/100ms
Calculating -------------------------------------
String#delete_prefix     18.416M (± 8.9%) i/s -     90.865M in   4.999514s
          String#sub      6.222M (±11.0%) i/s -     30.661M in   5.001241s

Comparison:
String#delete_prefix: 18415869.5 i/s
          String#sub:  6222415.3 i/s - 2.96x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    64.917k i/100ms
           Array#map   508.206k i/100ms
Calculating -------------------------------------
   Array#each + push      1.533M (± 7.2%) i/s -      7.660M in   5.025763s
           Array#map      4.929M (± 3.9%) i/s -     24.902M in   5.060084s

Comparison:
           Array#map:  4928831.7 i/s
   Array#each + push:  1533124.5 i/s - 3.21x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   596.368k i/100ms
     each_with_index   781.563k i/100ms
Calculating -------------------------------------
          While Loop      6.055M (± 3.4%) i/s -     30.415M in   5.029151s
     each_with_index      7.850M (± 3.3%) i/s -     39.860M in   5.083123s

Comparison:
     each_with_index:  7850173.4 i/s
          While Loop:  6054633.2 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         1.083k i/100ms
  Enumerable#sort_by     2.457k i/100ms
     Enumerable#sort   125.000  i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         23.015k (±19.8%) i/s -     99.636k in   5.012851s
  Enumerable#sort_by     22.207k (±21.9%) i/s -     98.280k in   5.072159s
     Enumerable#sort     33.748k (± 9.8%) i/s -    165.625k in   4.997157s

Comparison:
     Enumerable#sort:    33748.1 i/s
Enumerable#sort_by (Symbol#to_proc):    23015.1 i/s - 1.47x  (± 0.00) slower
  Enumerable#sort_by:    22206.5 i/s - 1.52x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     8.386M i/100ms
               #each    11.182M i/100ms
Calculating -------------------------------------
            For loop     88.845M (± 2.0%) i/s -    444.478M in   5.004851s
               #each    110.761M (± 2.3%) i/s -    559.095M in   5.050317s

Comparison:
               #each: 110761281.9 i/s
            For loop: 88844693.8 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       270.324k i/100ms
   Enumerable#detect     3.754M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          5.811M (± 4.5%) i/s -    115.969M in  19.996677s
   Enumerable#detect     36.876M (± 2.3%) i/s -    739.442M in  20.062452s

Comparison:
   Enumerable#detect: 36875957.8 i/s
Enumerable#select.first:  5811088.3 i/s - 6.35x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    87.437k i/100ms
  Array#reverse_each     1.173M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.408M (± 3.1%) i/s -      7.082M in   5.034997s
  Array#reverse_each     11.621M (± 1.9%) i/s -     58.632M in   5.047137s

Comparison:
  Array#reverse_each: 11621000.9 i/s
  Array#reverse.each:  1408103.9 i/s - 8.25x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   137.162k i/100ms
      inject to_proc   130.477k i/100ms
        inject block   131.324k i/100ms
Calculating -------------------------------------
       inject symbol      1.310M (± 1.5%) i/s -      6.584M in   5.026268s
      inject to_proc      1.301M (± 1.9%) i/s -      6.524M in   5.018185s
        inject block      1.319M (± 2.0%) i/s -      6.698M in   5.081648s

Comparison:
        inject block:  1318522.2 i/s
       inject symbol:  1310167.4 i/s - same-ish: difference falls within error
      inject to_proc:  1300508.1 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                        48.714k i/100ms
Enumerable#select.last
                       317.144k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.657M (± 4.9%) i/s -      8.281M in   5.010443s
Enumerable#select.last
                          3.220M (± 3.4%) i/s -     16.174M in   5.028497s

Comparison:
Enumerable#select.last:  3220413.4 i/s
Enumerable#reverse.detect:  1657293.5 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    73.743k i/100ms
Enumerable#sort_by...first
                         4.028k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      2.807M (± 3.4%) i/s -     14.085M in   5.023096s
Enumerable#sort_by...first
                         54.851k (± 3.4%) i/s -    273.904k in   4.999637s

Comparison:
   Enumerable#min_by:  2807058.6 i/s
Enumerable#sort_by...first:    54851.3 i/s - 51.18x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     6.957k i/100ms
   Array#map.flatten     7.450k i/100ms
      Array#flat_map    28.495k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     96.999k (± 3.6%) i/s -    486.990k in   5.027005s
   Array#map.flatten     96.968k (± 3.7%) i/s -    484.250k in   5.000857s
      Array#flat_map    278.528k (± 3.4%) i/s -      1.396M in   5.018876s

Comparison:
      Array#flat_map:   278528.4 i/s
Array#map.flatten(1):    96999.4 i/s - 2.87x  (± 0.00) slower
   Array#map.flatten:    96967.9 i/s - 2.87x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other    55.488k i/100ms
          Hash#merge   132.674k i/100ms
Calculating -------------------------------------
        Hash#**other      1.350B (±18.1%) i/s -      6.394B in   4.855627s
          Hash#merge      1.329B (± 8.2%) i/s -      6.518B in   4.934085s

Comparison:
        Hash#**other: 1349557624.0 i/s
          Hash#merge: 1329447180.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h     6.679k i/100ms
         sort + to_h     1.275k i/100ms
Calculating -------------------------------------
      sort_by + to_h    176.473k (± 8.2%) i/s -    874.949k in   4.995833s
         sort + to_h     52.153k (±14.1%) i/s -    255.000k in   5.033111s

Comparison:
      sort_by + to_h:   176472.5 i/s
         sort + to_h:    52153.1 i/s - 3.38x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   210.361M i/100ms
  Hash#fetch + block   206.015M i/100ms
    Hash#fetch + arg   208.462M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      2.093B (± 1.5%) i/s -     10.518B in   5.026029s
  Hash#fetch + block      2.122B (± 1.9%) i/s -     10.713B in   5.050097s
    Hash#fetch + arg      2.117B (± 1.8%) i/s -     10.632B in   5.022930s

Comparison:
  Hash#fetch + block: 2122083628.3 i/s
    Hash#fetch + arg: 2117275510.5 i/s - same-ish: difference falls within error
  Hash#fetch + const: 2093180688.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                       795.000  i/100ms
      Hash#merge({})   786.000  i/100ms
 Hash#dup#merge!({})     3.151k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         94.172k (± 9.7%) i/s -    464.280k in   4.999647s
      Hash#merge({})     73.036k (± 9.9%) i/s -    360.774k in   5.004985s
 Hash#dup#merge!({})    105.809k (± 6.2%) i/s -    529.368k in   5.024257s

Comparison:
 Hash#dup#merge!({}):   105809.1 i/s
{}#merge!(Hash) do end:    94172.1 i/s - same-ish: difference falls within error
      Hash#merge({}):    73036.1 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   104.904k i/100ms
            Hash#dup   207.596k i/100ms
Calculating -------------------------------------
              Hash[]      2.042M (± 4.6%) i/s -     10.281M in   5.044944s
            Hash#dup      2.034M (± 1.9%) i/s -     10.172M in   5.003192s

Comparison:
              Hash[]:  2042174.9 i/s
            Hash#dup:  2033938.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     1.155k i/100ms
            Hash#[]=    17.408k i/100ms
Calculating -------------------------------------
         Hash#merge!    240.205k (± 9.2%) i/s -      1.182M in   4.996027s
            Hash#[]=    238.513k (± 3.8%) i/s -      1.201M in   5.043669s

Comparison:
         Hash#merge!:   240204.9 i/s
            Hash#[]=:   238513.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      628.683k i/100ms
Array#each             834.079k i/100ms
Array#each_w/_object   557.051k i/100ms
Hash#select-include    561.978k i/100ms
Calculating -------------------------------------
Hash#native-slice         9.191M (± 4.4%) i/s -     45.894M in   5.003272s
Array#each                8.490M (± 2.8%) i/s -     42.538M in   5.014299s
Array#each_w/_object      8.455M (± 5.8%) i/s -     42.336M in   5.029459s
Hash#select-include      10.151M (± 4.3%) i/s -     51.140M in   5.047895s

Comparison:
Hash#select-include : 10150916.4 i/s
Hash#native-slice   :  9190820.5 i/s - 1.10x  (± 0.00) slower
Array#each          :  8489940.5 i/s - 1.20x  (± 0.00) slower
Array#each_w/_object:  8454570.1 i/s - 1.20x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   111.000  i/100ms
           Hash#key?     2.503M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      2.050k (±11.6%) i/s -     10.101k in   5.017450s
           Hash#key?     25.081M (± 2.2%) i/s -    127.642M in   5.091707s

Comparison:
           Hash#key?: 25080741.7 i/s
  Hash#keys.include?:     2050.5 i/s - 12231.66x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    50.565M i/100ms
             Hash#[]    49.733M i/100ms
          Hash#[] ||    50.370M i/100ms
          Hash#[] &&    48.640M i/100ms
          Hash#fetch    50.017M i/100ms
 Hash#fetch fallback    51.859M i/100ms
Calculating -------------------------------------
            Hash#dig    511.461M (± 5.0%) i/s -      2.579B in   5.055588s
             Hash#[]    529.075M (± 1.8%) i/s -      2.686B in   5.077596s
          Hash#[] ||    531.180M (± 1.5%) i/s -      2.670B in   5.027017s
          Hash#[] &&    526.283M (± 2.4%) i/s -      2.675B in   5.086060s
          Hash#fetch    533.529M (± 1.7%) i/s -      2.701B in   5.063820s
 Hash#fetch fallback    530.224M (± 2.4%) i/s -      2.697B in   5.088870s

Comparison:
          Hash#fetch: 533528779.2 i/s
          Hash#[] ||: 531180108.1 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 530224167.3 i/s - same-ish: difference falls within error
             Hash#[]: 529074844.6 i/s - same-ish: difference falls within error
          Hash#[] &&: 526282928.8 i/s - same-ish: difference falls within error
            Hash#dig: 511460547.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   128.199M i/100ms
  Hash#fetch, symbol   208.087M i/100ms
     Hash#[], string     3.847M i/100ms
  Hash#fetch, string     3.686M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.314B (± 2.2%) i/s -      6.666B in   5.076378s
  Hash#fetch, symbol      2.119B (± 2.2%) i/s -     10.612B in   5.011645s
     Hash#[], string     38.980M (± 1.8%) i/s -    196.182M in   5.034527s
  Hash#fetch, string     37.074M (± 1.7%) i/s -    187.967M in   5.071568s

Comparison:
  Hash#fetch, symbol: 2118602823.3 i/s
     Hash#[], symbol: 1313847155.0 i/s - 1.61x  (± 0.00) slower
     Hash#[], string: 38979803.4 i/s - 54.35x  (± 0.00) slower
  Hash#fetch, string: 37073526.8 i/s - 57.15x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   245.000  i/100ms
         Hash#merge!    16.348k i/100ms
Calculating -------------------------------------
          Hash#merge      3.491k (± 3.4%) i/s -     17.640k in   5.058586s
         Hash#merge!    227.195k (± 3.7%) i/s -      1.144M in   5.043881s

Comparison:
         Hash#merge!:   227194.6 i/s
          Hash#merge:     3491.3 i/s - 65.07x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?    92.000  i/100ms
         Hash#value?   364.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.640k (±10.5%) i/s -      8.096k in   5.009694s
         Hash#value?      3.802k (± 1.0%) i/s -     19.292k in   5.074629s

Comparison:
         Hash#value?:     3802.0 i/s
Hash#values.include?:     1640.2 i/s - 2.32x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each    39.509k i/100ms
       Hash#each_key   103.288k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.011M (± 5.2%) i/s -      5.057M in   5.015627s
       Hash#each_key      1.194M (± 3.1%) i/s -      5.991M in   5.021888s

Comparison:
       Hash#each_key:  1194083.0 i/s
      Hash#keys.each:  1011179.6 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    16.756k i/100ms
      Symbol#to_proc    18.279k i/100ms
Calculating -------------------------------------
               Block    184.268k (± 2.5%) i/s -    921.580k in   5.004620s
      Symbol#to_proc    184.070k (± 1.7%) i/s -    932.229k in   5.066160s

Comparison:
               Block:   184268.5 i/s
      Symbol#to_proc:   184069.7 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   129.984M i/100ms
       block + yield   129.448M i/100ms
        unused block   131.549M i/100ms
               yield   127.713M i/100ms
Calculating -------------------------------------
          block.call      1.314B (± 2.0%) i/s -      6.629B in   5.047871s
       block + yield      1.323B (± 2.2%) i/s -      6.731B in   5.088592s
        unused block      1.328B (± 2.1%) i/s -      6.709B in   5.055741s
               yield      1.322B (± 1.9%) i/s -      6.641B in   5.025450s

Comparison:
        unused block: 1327602180.3 i/s
       block + yield: 1323452474.4 i/s - same-ish: difference falls within error
               yield: 1321953851.7 i/s - same-ish: difference falls within error
          block.call: 1313790590.8 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601     1.503k i/100ms
          Time.parse    24.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    107.049k (±14.2%) i/s -    520.038k in   5.002158s
          Time.parse      2.522k (±41.6%) i/s -      9.480k in   4.992834s

Comparison:
        Time.iso8601:   107048.9 i/s
          Time.parse:     2522.2 i/s - 42.44x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 21.3.0-dev-5e49a731, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601    92.000  i/100ms
          Date.parse   108.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     10.526k (±37.9%) i/s -     37.168k in   4.989597s
          Date.parse      3.404k (±42.4%) i/s -     13.284k in   5.008586s

Comparison:
        Date.iso8601:    10526.2 i/s
          Date.parse:     3403.7 i/s - 3.09x  (± 0.00) slower

