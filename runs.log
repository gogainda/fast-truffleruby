$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       121.399M i/100ms
Function with splat arguments
                       515.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.214B (± 3.0%) i/s -      6.070B in   5.004663s
Function with splat arguments
                          5.567k (± 5.6%) i/s -     27.810k in   5.011976s

Comparison:
Function with single Array argument: 1214001875.5 i/s
Function with splat arguments:     5567.2 i/s - 218064.36x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   124.358M i/100ms
Sequential Assignment
                       119.447M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.194B (± 2.0%) i/s -      6.094B in   5.103527s
Sequential Assignment
                          1.196B (± 3.2%) i/s -      5.972B in   4.999388s

Comparison:
Sequential Assignment: 1195949964.7 i/s
 Parallel Assignment: 1194459177.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   119.663M i/100ms
       attr_accessor   119.222M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.198B (± 2.0%) i/s -      5.983B in   4.997960s
       attr_accessor      1.194B (± 2.4%) i/s -      6.080B in   5.093407s

Comparison:
   getter_and_setter: 1197631525.4 i/s
       attr_accessor: 1194477845.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     6.590k i/100ms
         respond_to?   124.459M i/100ms
Calculating -------------------------------------
      begin...rescue     47.567k (± 2.9%) i/s -    243.830k in   5.130354s
         respond_to?      1.244B (± 0.2%) i/s -      6.223B in   5.003947s

Comparison:
         respond_to?: 1243618063.9 i/s
      begin...rescue:    47567.2 i/s - 26144.43x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   120.633M i/100ms
             &method   120.642M i/100ms
Calculating -------------------------------------
              normal      1.243B (± 0.4%) i/s -      6.273B in   5.047892s
             &method      1.244B (± 0.3%) i/s -      6.273B in   5.042966s

Comparison:
             &method: 1243998755.8 i/s
              normal: 1242695743.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        80.000  i/100ms
       define_method   106.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.514k (±60.5%) i/s -      3.040k in   6.342273s
       define_method      3.537k (±46.1%) i/s -      6.254k in   5.100142s

Comparison:
       define_method:     3536.9 i/s
module_eval with string:     1514.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    26.250k i/100ms
       Kernel#format    40.250k i/100ms
            String#%    41.896k i/100ms
Calculating -------------------------------------
         Float#round    310.952k (± 3.2%) i/s -      1.575M in   5.070502s
       Kernel#format    419.550k (± 2.2%) i/s -      2.133M in   5.087266s
            String#%    423.300k (± 2.0%) i/s -      2.137M in   5.049844s

Comparison:
            String#%:   423300.1 i/s
       Kernel#format:   419550.0 i/s - same-ish: difference falls within error
         Float#round:   310952.4 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   124.687M i/100ms
          OpenStruct   120.867M i/100ms
Calculating -------------------------------------
                Hash      1.203B (± 2.2%) i/s -      6.110B in   5.080269s
          OpenStruct      1.248B (± 0.5%) i/s -      6.285B in   5.035860s

Comparison:
          OpenStruct: 1248099496.0 i/s
                Hash: 1203267321.6 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   119.845M i/100ms
          OpenStruct     2.223k i/100ms
Calculating -------------------------------------
                Hash      1.239B (± 0.8%) i/s -      6.232B in   5.031361s
          OpenStruct     24.982k (± 9.8%) i/s -    124.488k in   5.074704s

Comparison:
                Hash: 1238695892.3 i/s
          OpenStruct:    24981.8 i/s - 49583.98x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   535.832k i/100ms
  ancestors.include?   102.754k i/100ms
Calculating -------------------------------------
  less than or equal      6.447M (± 3.9%) i/s -     32.686M in   5.078449s
  ancestors.include?      1.050M (± 4.4%) i/s -      5.343M in   5.100863s

Comparison:
  less than or equal:  6446829.0 i/s
  ancestors.include?:  1049567.0 i/s - 6.14x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     19.876  (± 0.0%) i/s -    100.000  in   5.031226s
         Kernel loop      4.692  (± 0.0%) i/s -     24.000  in   5.115672s

Comparison:
          While Loop:       19.9 i/s
         Kernel loop:        4.7 i/s - 4.24x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   198.839M i/100ms
         Array#first   193.201M i/100ms
Calculating -------------------------------------
           Array#[0]      1.994B (± 0.7%) i/s -     10.141B in   5.085100s
         Array#first      1.993B (± 0.4%) i/s -     10.046B in   5.041946s

Comparison:
           Array#[0]: 1994305418.0 i/s
         Array#first: 1992614159.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   119.000M i/100ms
          Array#last   120.070M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.230B (± 2.5%) i/s -      6.188B in   5.032438s
          Array#last      1.202B (± 2.7%) i/s -      6.004B in   4.999690s

Comparison:
          Array#[-1]: 1230425434.8 i/s
          Array#last: 1201722557.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   359.293k i/100ms
Calculating -------------------------------------
                find      0.093  (± 0.0%) i/s -      1.000  in  10.716115s
             bsearch      3.634M (± 3.4%) i/s -     18.324M in   5.048501s

Comparison:
             bsearch:  3634123.1 i/s
                find:        0.1 i/s - 38943681.79x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.103  (± 0.0%) i/s -      1.000  in   9.731662s
        Array#insert      0.786  (± 0.0%) i/s -      4.000  in   5.090056s

Comparison:
        Array#insert:        0.8 i/s
       Array#unshift:        0.1 i/s - 7.65x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   120.798M i/100ms
          Array#size   124.368M i/100ms
         Array#count   124.764M i/100ms
Calculating -------------------------------------
        Array#length      1.245B (± 0.6%) i/s -      6.281B in   5.046714s
          Array#size      1.250B (± 0.5%) i/s -      6.343B in   5.075784s
         Array#count      1.246B (± 0.5%) i/s -      6.238B in   5.005562s

Comparison:
          Array#size: 1249645189.6 i/s
         Array#count: 1246284894.7 i/s - same-ish: difference falls within error
        Array#length: 1244715301.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    19.015k i/100ms
        Array#sample     2.039M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    199.250k (± 2.4%) i/s -      1.008M in   5.060944s
        Array#sample     20.044M (± 0.3%) i/s -    101.965M in   5.087178s

Comparison:
        Array#sample: 20043749.2 i/s
 Array#shuffle.first:   199250.1 i/s - 100.60x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   354.000  i/100ms
          Date.parse    82.000  i/100ms
Calculating -------------------------------------
        Date.iso8601      8.454k (±27.7%) i/s -     37.524k in   4.992720s
          Date.parse      4.124k (±34.9%) i/s -     16.974k in   5.026979s

Comparison:
        Date.iso8601:     8454.1 i/s
          Date.parse:     4124.4 i/s - 2.05x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   111.755k i/100ms
           Array#map   513.439k i/100ms
Calculating -------------------------------------
   Array#each + push      1.263M (± 4.1%) i/s -      6.370M in   5.050980s
           Array#map      5.097M (± 5.6%) i/s -     25.672M in   5.053183s

Comparison:
           Array#map:  5096850.2 i/s
   Array#each + push:  1263378.1 i/s - 4.03x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     4.049M i/100ms
               #each    10.507M i/100ms
Calculating -------------------------------------
            For loop     46.622M (± 5.8%) i/s -    234.844M in   5.055382s
               #each    105.464M (± 0.5%) i/s -    535.853M in   5.081024s

Comparison:
               #each: 105463987.6 i/s
            For loop: 46622074.6 i/s - 2.26x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   549.427k i/100ms
     each_with_index     1.044M i/100ms
Calculating -------------------------------------
          While Loop      5.843M (± 0.2%) i/s -     29.669M in   5.077635s
     each_with_index     10.370M (± 0.3%) i/s -     52.176M in   5.031302s

Comparison:
     each_with_index: 10370448.8 i/s
          While Loop:  5843100.2 i/s - 1.77x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   120.557k i/100ms
      inject to_proc   122.884k i/100ms
        inject block   122.798k i/100ms
Calculating -------------------------------------
       inject symbol      1.228M (± 0.1%) i/s -      6.148M in   5.005979s
      inject to_proc      1.228M (± 0.1%) i/s -      6.144M in   5.001792s
        inject block      1.229M (± 0.2%) i/s -      6.263M in   5.096541s

Comparison:
        inject block:  1228817.0 i/s
      inject to_proc:  1228400.5 i/s - same-ish: difference falls within error
       inject symbol:  1228214.0 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     8.582k i/100ms
   Array#map.flatten     9.991k i/100ms
      Array#flat_map    27.607k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    100.540k (± 4.1%) i/s -    506.338k in   5.045402s
   Array#map.flatten    101.225k (± 3.6%) i/s -    509.541k in   5.040725s
      Array#flat_map    280.069k (± 3.2%) i/s -      1.408M in   5.032941s

Comparison:
      Array#flat_map:   280069.0 i/s
   Array#map.flatten:   101225.1 i/s - 2.77x  (± 0.00) slower
Array#map.flatten(1):   100540.4 i/s - 2.79x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   115.967k i/100ms
  Array#reverse_each   982.899k i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.222M (± 2.9%) i/s -      6.146M in   5.033218s
  Array#reverse_each      9.811M (± 2.7%) i/s -     49.145M in   5.012663s

Comparison:
  Array#reverse_each:  9811437.1 i/s
  Array#reverse.each:  1222211.5 i/s - 8.03x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       549.541k i/100ms
   Enumerable#detect     2.997M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          5.889M (± 6.4%) i/s -    117.052M in  20.003593s
   Enumerable#detect     30.005M (± 0.4%) i/s -    602.359M in  20.075923s

Comparison:
   Enumerable#detect: 30004632.4 i/s
Enumerable#select.first:  5888548.0 i/s - 5.10x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                        99.996k i/100ms
Enumerable#select.last
                       312.267k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.221M (± 3.0%) i/s -      6.100M in   4.999127s
Enumerable#select.last
                          3.158M (± 3.9%) i/s -     15.926M in   5.051479s

Comparison:
Enumerable#select.last:  3157511.8 i/s
Enumerable#reverse.detect:  1221329.8 i/s - 2.59x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.427k i/100ms
  Enumerable#sort_by     2.856k i/100ms
     Enumerable#sort     3.082k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         25.616k (±19.6%) i/s -    111.642k in   5.004313s
  Enumerable#sort_by     25.991k (±18.4%) i/s -    114.240k in   5.023238s
     Enumerable#sort     40.561k (± 2.2%) i/s -    203.412k in   5.017878s

Comparison:
     Enumerable#sort:    40561.4 i/s
  Enumerable#sort_by:    25990.8 i/s - 1.56x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    25615.6 i/s - 1.58x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   265.852k i/100ms
Enumerable#sort_by...first
                         3.796k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      2.658M (± 0.2%) i/s -     13.293M in   5.000473s
Enumerable#sort_by...first
                         48.469k (± 3.7%) i/s -    242.944k in   5.019432s

Comparison:
   Enumerable#min_by:  2658284.3 i/s
Enumerable#sort_by...first:    48469.4 i/s - 54.84x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   187.733k i/100ms
            Hash#dup   197.933k i/100ms
Calculating -------------------------------------
              Hash[]      2.004M (± 4.8%) i/s -     10.138M in   5.071693s
            Hash#dup      2.013M (± 4.3%) i/s -     10.095M in   5.023742s

Comparison:
            Hash#dup:  2013355.1 i/s
              Hash[]:  2003708.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   124.300M i/100ms
  Hash#fetch, symbol   199.024M i/100ms
     Hash#[], string     4.212M i/100ms
  Hash#fetch, string     3.714M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.243B (± 0.2%) i/s -      6.215B in   5.001008s
  Hash#fetch, symbol      1.989B (± 0.3%) i/s -      9.951B in   5.003778s
     Hash#[], string     42.076M (± 0.7%) i/s -    210.615M in   5.005764s
  Hash#fetch, string     37.112M (± 0.2%) i/s -    185.683M in   5.003329s

Comparison:
  Hash#fetch, symbol: 1988754725.7 i/s
     Hash#[], symbol: 1242753047.2 i/s - 1.60x  (± 0.00) slower
     Hash#[], string: 42076410.2 i/s - 47.27x  (± 0.00) slower
  Hash#fetch, string: 37111997.4 i/s - 53.59x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    49.701M i/100ms
             Hash#[]    49.700M i/100ms
          Hash#[] ||    49.404M i/100ms
          Hash#[] &&    49.670M i/100ms
          Hash#fetch    49.668M i/100ms
 Hash#fetch fallback    49.764M i/100ms
Calculating -------------------------------------
            Hash#dig    497.084M (± 0.3%) i/s -      2.485B in   4.999286s
             Hash#[]    498.753M (± 0.6%) i/s -      2.535B in   5.082261s
          Hash#[] ||    499.474M (± 0.5%) i/s -      2.520B in   5.044640s
          Hash#[] &&    498.171M (± 0.4%) i/s -      2.533B in   5.085011s
          Hash#fetch    498.940M (± 0.5%) i/s -      2.533B in   5.077013s
 Hash#fetch fallback    499.714M (± 0.5%) i/s -      2.538B in   5.078945s

Comparison:
 Hash#fetch fallback: 499713619.6 i/s
          Hash#[] ||: 499474395.0 i/s - same-ish: difference falls within error
          Hash#fetch: 498939956.0 i/s - same-ish: difference falls within error
             Hash#[]: 498752616.7 i/s - same-ish: difference falls within error
          Hash#[] &&: 498171308.3 i/s - same-ish: difference falls within error
            Hash#dig: 497084387.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   124.317M i/100ms
  Hash#fetch + block   199.170M i/100ms
    Hash#fetch + arg   125.049M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.248B (± 0.6%) i/s -      6.340B in   5.082236s
  Hash#fetch + block      1.990B (± 1.1%) i/s -      9.958B in   5.005132s
    Hash#fetch + arg      1.247B (± 0.5%) i/s -      6.252B in   5.015069s

Comparison:
  Hash#fetch + block: 1989914962.6 i/s
  Hash#fetch + const: 1247557048.2 i/s - 1.60x  (± 0.00) slower
    Hash#fetch + arg: 1246769297.1 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    16.030k i/100ms
         sort + to_h     9.743k i/100ms
Calculating -------------------------------------
      sort_by + to_h    185.590k (±14.9%) i/s -    913.710k in   5.036401s
         sort + to_h    101.190k (± 4.6%) i/s -    506.636k in   5.018405s

Comparison:
      sort_by + to_h:   185590.3 i/s
         sort + to_h:   101189.6 i/s - 1.83x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each    92.265k i/100ms
       Hash#each_key   104.823k i/100ms
Calculating -------------------------------------
      Hash#keys.each    959.396k (± 4.6%) i/s -      4.798M in   5.012426s
       Hash#each_key      1.069M (± 4.3%) i/s -      5.346M in   5.012366s

Comparison:
       Hash#each_key:  1068693.2 i/s
      Hash#keys.each:   959396.3 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   143.000  i/100ms
           Hash#key?    27.642M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.553k (±11.9%) i/s -      7.579k in   5.010084s
           Hash#key?    276.810M (± 0.4%) i/s -      1.410B in   5.092823s

Comparison:
           Hash#key?: 276810115.5 i/s
  Hash#keys.include?:     1553.3 i/s - 178205.14x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    12.187k i/100ms
            Hash#[]=    20.144k i/100ms
Calculating -------------------------------------
         Hash#merge!    200.223k (± 4.8%) i/s -    999.334k in   5.003978s
            Hash#[]=    203.450k (± 3.6%) i/s -      1.027M in   5.056497s

Comparison:
            Hash#[]=:   203450.1 i/s
         Hash#merge!:   200222.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         9.012k i/100ms
      Hash#merge({})     7.807k i/100ms
 Hash#dup#merge!({})    12.362k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        103.148k (± 6.4%) i/s -    513.684k in   5.002484s
      Hash#merge({})     78.974k (± 6.9%) i/s -    398.157k in   5.068498s
 Hash#dup#merge!({})    127.230k (± 5.7%) i/s -    642.824k in   5.070842s

Comparison:
 Hash#dup#merge!({}):   127230.3 i/s
{}#merge!(Hash) do end:   103148.1 i/s - 1.23x  (± 0.00) slower
      Hash#merge({}):    78974.3 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   124.486M i/100ms
          Hash#merge   123.848M i/100ms
Calculating -------------------------------------
        Hash#**other      1.244B (± 1.6%) i/s -      6.224B in   5.006677s
          Hash#merge      1.243B (± 0.4%) i/s -      6.316B in   5.080287s

Comparison:
        Hash#**other: 1243526781.4 i/s
          Hash#merge: 1243302450.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   272.000  i/100ms
         Hash#merge!    20.056k i/100ms
Calculating -------------------------------------
          Hash#merge      3.286k (± 5.5%) i/s -     16.592k in   5.066602s
         Hash#merge!    201.608k (± 3.9%) i/s -      1.023M in   5.081927s

Comparison:
         Hash#merge!:   201608.0 i/s
          Hash#merge:     3285.5 i/s - 61.36x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      702.258k i/100ms
Array#each             779.526k i/100ms
Array#each_w/_object   793.561k i/100ms
Hash#select-include      1.056M i/100ms
Calculating -------------------------------------
Hash#native-slice         9.837M (± 3.6%) i/s -     49.158M in   5.004358s
Array#each                7.944M (± 3.3%) i/s -     39.756M in   5.010475s
Array#each_w/_object      7.957M (± 2.7%) i/s -     40.472M in   5.090393s
Hash#select-include      10.434M (± 3.4%) i/s -     52.797M in   5.066082s

Comparison:
Hash#select-include : 10434157.2 i/s
Hash#native-slice   :  9837304.5 i/s - same-ish: difference falls within error
Array#each_w/_object:  7956992.6 i/s - 1.31x  (± 0.00) slower
Array#each          :  7943654.2 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   141.000  i/100ms
         Hash#value?   377.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.554k (± 7.4%) i/s -      7.755k in   5.020332s
         Hash#value?      3.777k (± 0.3%) i/s -     19.227k in   5.090815s

Comparison:
         Hash#value?:     3776.8 i/s
Hash#values.include?:     1553.6 i/s - 2.43x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   124.242M i/100ms
                send   124.208M i/100ms
      method_missing   124.404M i/100ms
Calculating -------------------------------------
                call      1.243B (± 0.3%) i/s -      6.336B in   5.098565s
                send      1.241B (± 1.1%) i/s -      6.210B in   5.004606s
      method_missing      1.235B (± 1.6%) i/s -      6.220B in   5.037050s

Comparison:
                call: 1242772918.3 i/s
                send: 1241102592.1 i/s - same-ish: difference falls within error
      method_missing: 1235231451.3 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    17.542k i/100ms
      Symbol#to_proc    18.502k i/100ms
Calculating -------------------------------------
               Block    190.363k (± 4.4%) i/s -    964.810k in   5.078702s
      Symbol#to_proc    187.728k (± 4.1%) i/s -    943.602k in   5.035512s

Comparison:
               Block:   190362.7 i/s
      Symbol#to_proc:   187727.6 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   198.598M i/100ms
       block + yield   198.589M i/100ms
        unused block   199.957M i/100ms
               yield   199.682M i/100ms
Calculating -------------------------------------
          block.call      1.996B (± 0.6%) i/s -     10.128B in   5.073741s
       block + yield      1.999B (± 0.5%) i/s -     10.128B in   5.067765s
        unused block      1.997B (± 0.8%) i/s -      9.998B in   5.007541s
               yield      2.001B (± 0.6%) i/s -     10.184B in   5.090027s

Comparison:
               yield: 2000797925.8 i/s
       block + yield: 1998560398.5 i/s - same-ish: difference falls within error
        unused block: 1996681845.5 i/s - same-ish: difference falls within error
          block.call: 1996326962.1 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    14.457k i/100ms
      range#include?   134.000  i/100ms
       range#member?   132.000  i/100ms
       plain compare    21.793k i/100ms
Calculating -------------------------------------
        range#cover?    111.984k (±33.2%) i/s -    505.995k in   5.029987s
      range#include?      4.564k (±35.3%) i/s -     15.276k in   5.017022s
       range#member?      2.195k (±70.6%) i/s -      5.544k in   5.024686s
       plain compare    233.462k (±20.4%) i/s -      1.133M in   5.073220s

Comparison:
       plain compare:   233461.7 i/s
        range#cover?:   111983.9 i/s - 2.08x  (± 0.00) slower
      range#include?:     4564.3 i/s - 51.15x  (± 0.00) slower
       range#member?:     2195.4 i/s - 106.34x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     3.327M i/100ms
           String#=~     5.531M i/100ms
          Regexp#===     5.530M i/100ms
        String#match     3.118M i/100ms
Calculating -------------------------------------
       String#match?     36.089M (± 4.2%) i/s -    182.994M in   5.080315s
           String#=~     55.298M (± 0.1%) i/s -    276.546M in   5.001010s
          Regexp#===     55.253M (± 0.5%) i/s -    276.493M in   5.004237s
        String#match     32.358M (± 5.2%) i/s -    162.116M in   5.024964s

Comparison:
           String#=~: 55297991.4 i/s
          Regexp#===: 55253204.8 i/s - same-ish: difference falls within error
       String#match?: 36089215.0 i/s - 1.53x  (± 0.00) slower
        String#match: 32357577.1 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.059M i/100ms
      String#casecmp     2.793M i/100ms
Calculating -------------------------------------
String#downcase + ==     12.497M (± 4.8%) i/s -     62.461M in   5.009966s
      String#casecmp     27.933M (± 0.1%) i/s -    142.426M in   5.098875s

Comparison:
      String#casecmp: 27932887.1 i/s
String#downcase + ==: 12497369.6 i/s - 2.24x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+   124.370M i/100ms
       String#concat   124.234M i/100ms
       String#append   124.419M i/100ms
         "foo" "bar"   124.497M i/100ms
  "#{'foo'}#{'bar'}"   124.386M i/100ms
Calculating -------------------------------------
            String#+      1.243B (± 0.2%) i/s -      6.219B in   5.002686s
       String#concat      1.243B (± 0.3%) i/s -      6.336B in   5.097522s
       String#append      1.243B (± 0.2%) i/s -      6.221B in   5.003308s
         "foo" "bar"      1.244B (± 0.2%) i/s -      6.225B in   5.005305s
  "#{'foo'}#{'bar'}"      1.243B (± 0.2%) i/s -      6.219B in   5.002135s

Comparison:
         "foo" "bar": 1243648862.4 i/s
       String#append: 1243371976.2 i/s - same-ish: difference falls within error
  "#{'foo'}#{'bar'}": 1243337332.4 i/s - same-ish: difference falls within error
            String#+: 1243039175.2 i/s - same-ish: difference falls within error
       String#concat: 1242954382.7 i/s - same-ish: difference falls within error

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   124.160M i/100ms
          String#dup   124.284M i/100ms
Calculating -------------------------------------
           String#+@      1.242B (± 0.3%) i/s -      6.208B in   4.999652s
          String#dup      1.243B (± 0.2%) i/s -      6.338B in   5.098694s

Comparison:
          String#dup: 1243161046.1 i/s
           String#+@: 1241697838.5 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.074M i/100ms
       String#match?     1.180M i/100ms
    String#end_with?    14.799M i/100ms
Calculating -------------------------------------
           String#=~     11.172M (± 2.8%) i/s -     55.856M in   5.004121s
       String#match?     12.448M (± 3.6%) i/s -     62.531M in   5.030538s
    String#end_with?    144.860M (± 0.6%) i/s -    725.165M in   5.006156s

Comparison:
    String#end_with?: 144860257.6 i/s
       String#match?: 12447698.2 i/s - 11.64x  (± 0.00) slower
           String#=~: 11171983.5 i/s - 12.97x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    87.313k i/100ms
          String#sub     1.211M i/100ms
String#dup["string"]=
                        13.824M i/100ms
Calculating -------------------------------------
         String#gsub    889.344k (± 2.8%) i/s -      4.453M in   5.011444s
          String#sub     12.563M (± 4.9%) i/s -     62.977M in   5.025425s
String#dup["string"]=
                        138.192M (± 0.1%) i/s -    691.210M in   5.001815s

Comparison:
String#dup["string"]=: 138191992.3 i/s
          String#sub: 12563079.5 i/s - 11.00x  (± 0.00) slower
         String#gsub:   889344.3 i/s - 155.39x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   162.092k i/100ms
           String#tr   104.119k i/100ms
Calculating -------------------------------------
         String#gsub      2.071M (± 6.4%) i/s -     10.374M in   5.030201s
           String#tr      1.043M (± 4.2%) i/s -      5.310M in   5.099718s

Comparison:
         String#gsub:  2071395.6 i/s
           String#tr:  1043177.4 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   124.258M i/100ms
         With Freeze   124.267M i/100ms
Calculating -------------------------------------
      Without Freeze      1.242B (± 0.3%) i/s -      6.213B in   5.003105s
         With Freeze      1.243B (± 0.2%) i/s -      6.338B in   5.098149s

Comparison:
         With Freeze: 1243131047.9 i/s
      Without Freeze: 1241824288.8 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     4.748k i/100ms
      String#squeeze    49.742k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     60.496k (± 5.1%) i/s -    303.872k in   5.037035s
      String#squeeze    493.834k (± 2.8%) i/s -      2.487M in   5.040579s

Comparison:
      String#squeeze:   493833.6 i/s
 String#gsub/regex+/:    60495.8 i/s - 8.16x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     2.283M i/100ms
       String#match?     1.933M i/100ms
  String#start_with?     1.583M i/100ms
Calculating -------------------------------------
           String#=~     23.360M (± 2.7%) i/s -    118.703M in   5.085861s
       String#match?     19.509M (± 3.8%) i/s -     98.583M in   5.060829s
  String#start_with?     15.800M (± 3.6%) i/s -     79.136M in   5.015843s

Comparison:
           String#=~: 23359849.6 i/s
       String#match?: 19509406.7 i/s - 1.20x  (± 0.00) slower
  String#start_with?: 15799796.6 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   165.275k i/100ms
    String#[0, n] ==   166.765k i/100ms
   String#[RANGE] ==   166.515k i/100ms
   String#[0...n] ==   134.978k i/100ms
Calculating -------------------------------------
  String#start_with?      2.826M (± 3.9%) i/s -     14.214M in   5.037853s
    String#[0, n] ==      1.691M (± 4.1%) i/s -      8.505M in   5.038393s
   String#[RANGE] ==      1.691M (± 4.2%) i/s -      8.492M in   5.031915s
   String#[0...n] ==      1.343M (± 3.7%) i/s -      6.749M in   5.031616s

Comparison:
  String#start_with?:  2826472.6 i/s
    String#[0, n] ==:  1691089.1 i/s - 1.67x  (± 0.00) slower
   String#[RANGE] ==:  1690837.5 i/s - 1.67x  (± 0.00) slower
   String#[0...n] ==:  1343207.9 i/s - 2.10x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    13.822M i/100ms
 String#sub!'string'     1.626M i/100ms
String#gsub!'string'    79.766k i/100ms
  String#[/regexp/]=     3.319M i/100ms
 String#sub!/regexp/     1.549M i/100ms
String#gsub!/regexp/   445.993k i/100ms
Calculating -------------------------------------
  String#['string']=    138.234M (± 0.1%) i/s -    691.087M in   4.999391s
 String#sub!'string'      5.424M (±24.1%) i/s -     24.389M in   5.183997s
String#gsub!'string'    826.447k (± 2.9%) i/s -      4.148M in   5.023779s
  String#[/regexp/]=     33.178M (± 0.1%) i/s -    165.950M in   5.001845s
 String#sub!/regexp/     15.790M (± 3.6%) i/s -     78.985M in   5.009611s
String#gsub!/regexp/      4.462M (± 5.0%) i/s -     22.300M in   5.010526s

Comparison:
  String#['string']=: 138234305.0 i/s
  String#[/regexp/]=: 33177724.6 i/s - 4.17x  (± 0.00) slower
 String#sub!/regexp/: 15790010.1 i/s - 8.75x  (± 0.00) slower
 String#sub!'string':  5424433.9 i/s - 25.48x  (± 0.00) slower
String#gsub!/regexp/:  4462348.4 i/s - 30.98x  (± 0.00) slower
String#gsub!'string':   826447.5 i/s - 167.26x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.288M i/100ms
        String#chomp     2.366M i/100ms
String#delete_suffix     4.080M i/100ms
Calculating -------------------------------------
          String#sub     15.165M (± 6.3%) i/s -     76.003M in   5.032874s
        String#chomp     23.934M (± 4.5%) i/s -    120.675M in   5.052911s
String#delete_suffix     42.723M (± 0.6%) i/s -    216.219M in   5.061059s

Comparison:
String#delete_suffix: 42723497.6 i/s
        String#chomp: 23933506.9 i/s - 1.79x  (± 0.00) slower
          String#sub: 15165387.9 i/s - 2.82x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix     1.551M i/100ms
          String#sub     3.884M i/100ms
Calculating -------------------------------------
String#delete_prefix     18.558M (± 5.6%) i/s -     93.066M in   5.032169s
          String#sub     39.116M (± 6.5%) i/s -    198.091M in   5.086639s

Comparison:
          String#sub: 39116199.4 i/s
String#delete_prefix: 18557703.6 i/s - 2.11x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.016M i/100ms
    String#unpack[0]     1.154M i/100ms
Calculating -------------------------------------
      String#unpack1     11.523M (± 3.8%) i/s -     57.918M in   5.034134s
    String#unpack[0]     11.352M (± 3.1%) i/s -     57.702M in   5.088122s

Comparison:
      String#unpack1: 11523024.2 i/s
    String#unpack[0]: 11352044.5 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.1.0-dev-18f125b8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    12.276k i/100ms
          Time.parse    55.000  i/100ms
Calculating -------------------------------------
        Time.iso8601     56.243k (± 2.6%) i/s -    282.348k in   5.023585s
          Time.parse      3.346k (±21.3%) i/s -     13.530k in   4.997355s

Comparison:
        Time.iso8601:    56243.0 i/s
          Time.parse:     3346.2 i/s - 16.81x  (± 0.00) slower

