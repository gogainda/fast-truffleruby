$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       238.417M i/100ms
Function with splat arguments
                       571.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          2.386B (± 0.4%) i/s -     12.159B in   5.096318s
Function with splat arguments
                          6.103k (± 5.0%) i/s -     30.834k in   5.065960s

Comparison:
Function with single Array argument: 2385922316.5 i/s
Function with splat arguments:     6102.8 i/s - 390953.99x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   238.377M i/100ms
Sequential Assignment
                       238.452M i/100ms
Calculating -------------------------------------
 Parallel Assignment      2.386B (± 0.3%) i/s -     12.157B in   5.094998s
Sequential Assignment
                          2.389B (± 0.2%) i/s -     12.161B in   5.089967s

Comparison:
Sequential Assignment: 2389224524.7 i/s
 Parallel Assignment: 2386138326.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   238.360M i/100ms
       attr_accessor   239.035M i/100ms
Calculating -------------------------------------
   getter_and_setter      2.388B (± 0.2%) i/s -     12.156B in   5.090600s
       attr_accessor      2.387B (± 0.3%) i/s -     11.952B in   5.006017s

Comparison:
   getter_and_setter: 2388012146.0 i/s
       attr_accessor: 2387498650.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     6.801k i/100ms
         respond_to?   239.097M i/100ms
Calculating -------------------------------------
      begin...rescue     47.955k (± 2.6%) i/s -    244.836k in   5.109122s
         respond_to?      2.390B (± 0.2%) i/s -     11.955B in   5.002790s

Comparison:
         respond_to?: 2389639194.1 i/s
      begin...rescue:    47955.2 i/s - 49830.67x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   238.535M i/100ms
             &method   239.103M i/100ms
Calculating -------------------------------------
              normal      2.378B (± 1.2%) i/s -     11.927B in   5.016543s
             &method      2.388B (± 0.3%) i/s -     11.955B in   5.006985s

Comparison:
             &method: 2387709028.7 i/s
              normal: 2377851492.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        99.000  i/100ms
       define_method   134.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.526k (±55.7%) i/s -      4.455k in   6.388391s
       define_method      3.343k (±53.4%) i/s -      7.102k in   6.438891s

Comparison:
       define_method:     3342.6 i/s
module_eval with string:     1526.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    31.449k i/100ms
       Kernel#format    42.598k i/100ms
            String#%    42.488k i/100ms
Calculating -------------------------------------
         Float#round    355.854k (± 2.9%) i/s -      1.793M in   5.041945s
       Kernel#format    427.901k (± 1.8%) i/s -      2.172M in   5.078970s
            String#%    432.510k (± 1.9%) i/s -      2.167M in   5.012024s

Comparison:
            String#%:   432510.4 i/s
       Kernel#format:   427901.3 i/s - same-ish: difference falls within error
         Float#round:   355853.6 i/s - 1.22x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   238.537M i/100ms
          OpenStruct   238.330M i/100ms
Calculating -------------------------------------
                Hash      2.383B (± 0.9%) i/s -     11.927B in   5.004525s
          OpenStruct      2.389B (± 0.2%) i/s -     12.155B in   5.087462s

Comparison:
          OpenStruct: 2389177939.8 i/s
                Hash: 2383411354.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   237.707M i/100ms
          OpenStruct     2.593k i/100ms
Calculating -------------------------------------
                Hash      2.382B (± 0.5%) i/s -     12.123B in   5.088714s
          OpenStruct     23.763k (± 9.3%) i/s -    119.278k in   5.082763s

Comparison:
                Hash: 2382391705.7 i/s
          OpenStruct:    23763.3 i/s - 100255.03x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   753.838k i/100ms
  ancestors.include?   123.515k i/100ms
Calculating -------------------------------------
  less than or equal      8.052M (± 4.8%) i/s -     40.707M in   5.067655s
  ancestors.include?      1.253M (± 4.6%) i/s -      6.299M in   5.039844s

Comparison:
  less than or equal:  8051692.2 i/s
  ancestors.include?:  1252619.0 i/s - 6.43x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     2.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     23.870  (± 0.0%) i/s -    120.000  in   5.027322s
         Kernel loop      5.532  (± 0.0%) i/s -     28.000  in   5.063915s

Comparison:
          While Loop:       23.9 i/s
         Kernel loop:        5.5 i/s - 4.31x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   238.677M i/100ms
         Array#first   238.128M i/100ms
Calculating -------------------------------------
           Array#[0]      2.387B (± 0.3%) i/s -     11.934B in   4.999721s
         Array#first      2.389B (± 0.2%) i/s -     12.145B in   5.082999s

Comparison:
         Array#first: 2389254261.9 i/s
           Array#[0]: 2386920501.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   238.928M i/100ms
          Array#last   238.591M i/100ms
Calculating -------------------------------------
          Array#[-1]      2.386B (± 0.4%) i/s -     11.946B in   5.006751s
          Array#last      2.388B (± 0.3%) i/s -     12.168B in   5.095256s

Comparison:
          Array#last: 2388150152.5 i/s
          Array#[-1]: 2386088546.4 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   421.605k i/100ms
Calculating -------------------------------------
                find      0.102  (± 0.0%) i/s -      1.000  in   9.785264s
             bsearch      4.216M (± 3.4%) i/s -     21.080M in   5.005662s

Comparison:
             bsearch:  4216312.9 i/s
                find:        0.1 i/s - 41257734.28x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.123  (± 0.0%) i/s -      1.000  in   8.105296s
        Array#insert      0.943  (± 0.0%) i/s -      5.000  in   5.301956s

Comparison:
        Array#insert:        0.9 i/s
       Array#unshift:        0.1 i/s - 7.64x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   238.511M i/100ms
          Array#size   238.671M i/100ms
         Array#count   239.091M i/100ms
Calculating -------------------------------------
        Array#length      2.387B (± 0.3%) i/s -     12.164B in   5.095611s
          Array#size      2.388B (± 0.3%) i/s -     12.172B in   5.096735s
         Array#count      2.386B (± 0.4%) i/s -     11.955B in   5.009700s

Comparison:
          Array#size: 2388254325.1 i/s
        Array#length: 2387188501.9 i/s - same-ish: difference falls within error
         Array#count: 2386320261.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    22.707k i/100ms
        Array#sample     2.515M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    225.700k (± 2.2%) i/s -      1.135M in   5.032917s
        Array#sample     25.070M (± 0.1%) i/s -    125.737M in   5.015482s

Comparison:
        Array#sample: 25069692.7 i/s
 Array#shuffle.first:   225700.4 i/s - 111.08x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   350.000  i/100ms
          Date.parse   123.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     10.459k (±24.3%) i/s -     44.800k in   5.005951s
          Date.parse      4.182k (±36.7%) i/s -     17.466k in   4.997956s

Comparison:
        Date.iso8601:    10458.9 i/s
          Date.parse:     4181.8 i/s - 2.50x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   141.288k i/100ms
           Array#map   520.868k i/100ms
Calculating -------------------------------------
   Array#each + push      1.479M (± 3.0%) i/s -      7.488M in   5.066436s
           Array#map      5.178M (± 5.8%) i/s -     26.043M in   5.046449s

Comparison:
           Array#map:  5178034.3 i/s
   Array#each + push:  1479482.2 i/s - 3.50x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     4.009M i/100ms
               #each    14.083M i/100ms
Calculating -------------------------------------
            For loop     45.802M (± 5.1%) i/s -    228.490M in   5.002045s
               #each    140.873M (± 0.1%) i/s -    718.245M in   5.098528s

Comparison:
               #each: 140873181.8 i/s
            For loop: 45802014.7 i/s - 3.08x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   699.745k i/100ms
     each_with_index     1.282M i/100ms
Calculating -------------------------------------
          While Loop      6.995M (± 0.1%) i/s -     34.987M in   5.001456s
     each_with_index     12.817M (± 0.1%) i/s -     65.359M in   5.099281s

Comparison:
     each_with_index: 12817290.7 i/s
          While Loop:  6995418.8 i/s - 1.83x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   147.442k i/100ms
      inject to_proc   147.493k i/100ms
        inject block   147.490k i/100ms
Calculating -------------------------------------
       inject symbol      1.475M (± 0.0%) i/s -      7.520M in   5.098584s
      inject to_proc      1.475M (± 0.0%) i/s -      7.375M in   4.999947s
        inject block      1.475M (± 0.0%) i/s -      7.375M in   5.000074s

Comparison:
      inject to_proc:  1474945.7 i/s
        inject block:  1474878.6 i/s - same-ish: difference falls within error
       inject symbol:  1474829.8 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     9.936k i/100ms
   Array#map.flatten    10.729k i/100ms
      Array#flat_map    30.270k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    103.933k (± 3.7%) i/s -    526.608k in   5.074124s
   Array#map.flatten    107.822k (± 3.7%) i/s -    547.179k in   5.082236s
      Array#flat_map    301.727k (± 2.8%) i/s -      1.514M in   5.020474s

Comparison:
      Array#flat_map:   301727.1 i/s
   Array#map.flatten:   107822.3 i/s - 2.80x  (± 0.00) slower
Array#map.flatten(1):   103933.4 i/s - 2.90x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   136.650k i/100ms
  Array#reverse_each     1.195M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.560M (± 3.6%) i/s -      7.789M in   5.001258s
  Array#reverse_each     11.990M (± 2.5%) i/s -     60.925M in   5.084532s

Comparison:
  Array#reverse_each: 11990356.2 i/s
  Array#reverse.each:  1559537.7 i/s - 7.69x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       561.685k i/100ms
   Enumerable#detect     3.827M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          5.901M (± 5.8%) i/s -    117.954M in  20.081229s
   Enumerable#detect     38.288M (± 0.2%) i/s -    769.262M in  20.091375s

Comparison:
   Enumerable#detect: 38288356.3 i/s
Enumerable#select.first:  5901148.8 i/s - 6.49x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       153.710k i/100ms
Enumerable#select.last
                       274.612k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.574M (± 3.2%) i/s -      7.993M in   5.084193s
Enumerable#select.last
                          2.784M (± 3.1%) i/s -     14.005M in   5.036426s

Comparison:
Enumerable#select.last:  2783527.7 i/s
Enumerable#reverse.detect:  1573827.5 i/s - 1.77x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.238k i/100ms
  Enumerable#sort_by     2.452k i/100ms
     Enumerable#sort     2.639k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         22.462k (±17.1%) i/s -    102.948k in   5.033898s
  Enumerable#sort_by     22.931k (±16.4%) i/s -    105.436k in   5.085623s
     Enumerable#sort     31.871k (± 1.9%) i/s -    160.979k in   5.053134s

Comparison:
     Enumerable#sort:    31871.0 i/s
  Enumerable#sort_by:    22931.4 i/s - 1.39x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    22462.1 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   355.758k i/100ms
Enumerable#sort_by...first
                         4.241k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      3.558M (± 0.0%) i/s -     18.144M in   5.098974s
Enumerable#sort_by...first
                         55.575k (± 3.6%) i/s -    279.906k in   5.043614s

Comparison:
   Enumerable#min_by:  3558296.3 i/s
Enumerable#sort_by...first:    55574.5 i/s - 64.03x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   182.743k i/100ms
            Hash#dup   181.633k i/100ms
Calculating -------------------------------------
              Hash[]      1.902M (± 4.3%) i/s -      9.503M in   5.004987s
            Hash#dup      1.855M (± 3.6%) i/s -      9.263M in   4.999281s

Comparison:
              Hash[]:  1902317.0 i/s
            Hash#dup:  1855471.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   238.594M i/100ms
  Hash#fetch, symbol   238.825M i/100ms
     Hash#[], string     4.918M i/100ms
  Hash#fetch, string     4.509M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      2.387B (± 0.3%) i/s -     12.168B in   5.098550s
  Hash#fetch, symbol      2.389B (± 0.2%) i/s -     12.180B in   5.097909s
     Hash#[], string     47.558M (± 1.2%) i/s -    240.994M in   5.068153s
  Hash#fetch, string     45.027M (± 0.6%) i/s -    225.467M in   5.007490s

Comparison:
  Hash#fetch, symbol: 2389233716.5 i/s
     Hash#[], symbol: 2386644339.6 i/s - same-ish: difference falls within error
     Hash#[], string: 47557840.9 i/s - 50.24x  (± 0.00) slower
  Hash#fetch, string: 45027420.8 i/s - 53.06x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    59.721M i/100ms
             Hash#[]    59.720M i/100ms
          Hash#[] ||    59.764M i/100ms
          Hash#[] &&    59.758M i/100ms
          Hash#fetch    59.765M i/100ms
 Hash#fetch fallback    59.762M i/100ms
Calculating -------------------------------------
            Hash#dig    596.905M (± 0.3%) i/s -      2.986B in   5.002625s
             Hash#[]    597.111M (± 0.3%) i/s -      2.986B in   5.000810s
          Hash#[] ||    597.127M (± 0.3%) i/s -      2.988B in   5.004328s
          Hash#[] &&    597.276M (± 0.2%) i/s -      2.988B in   5.002593s
          Hash#fetch    597.455M (± 0.2%) i/s -      2.988B in   5.001610s
 Hash#fetch fallback    597.327M (± 0.2%) i/s -      2.988B in   5.002450s

Comparison:
          Hash#fetch: 597454812.4 i/s
 Hash#fetch fallback: 597326876.2 i/s - same-ish: difference falls within error
          Hash#[] &&: 597275892.6 i/s - same-ish: difference falls within error
          Hash#[] ||: 597126625.7 i/s - same-ish: difference falls within error
             Hash#[]: 597111067.7 i/s - same-ish: difference falls within error
            Hash#dig: 596904754.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   238.807M i/100ms
  Hash#fetch + block   238.544M i/100ms
    Hash#fetch + arg   238.994M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      2.387B (± 0.3%) i/s -     11.940B in   5.002132s
  Hash#fetch + block      2.388B (± 0.3%) i/s -     12.166B in   5.093845s
    Hash#fetch + arg      2.389B (± 0.2%) i/s -     11.950B in   5.002414s

Comparison:
    Hash#fetch + arg: 2388803210.6 i/s
  Hash#fetch + block: 2388334885.6 i/s - same-ish: difference falls within error
  Hash#fetch + const: 2387079444.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    16.763k i/100ms
         sort + to_h     8.777k i/100ms
Calculating -------------------------------------
      sort_by + to_h    162.137k (±10.9%) i/s -    804.624k in   5.024991s
         sort + to_h     98.760k (± 4.6%) i/s -    500.289k in   5.077461s

Comparison:
      sort_by + to_h:   162137.3 i/s
         sort + to_h:    98760.0 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each    91.407k i/100ms
       Hash#each_key   117.824k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.111M (± 4.9%) i/s -      5.576M in   5.029932s
       Hash#each_key      1.220M (± 4.3%) i/s -      6.127M in   5.030430s

Comparison:
       Hash#each_key:  1220392.9 i/s
      Hash#keys.each:  1111497.5 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   160.000  i/100ms
           Hash#key?    33.203M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.900k (±13.5%) i/s -      9.280k in   5.002996s
           Hash#key?    331.872M (± 0.2%) i/s -      1.660B in   5.002449s

Comparison:
           Hash#key?: 331871737.4 i/s
  Hash#keys.include?:     1900.1 i/s - 174657.00x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    19.721k i/100ms
            Hash#[]=    20.843k i/100ms
Calculating -------------------------------------
         Hash#merge!    203.779k (± 4.1%) i/s -      1.025M in   5.041506s
            Hash#[]=    209.430k (± 3.5%) i/s -      1.063M in   5.082062s

Comparison:
            Hash#[]=:   209430.2 i/s
         Hash#merge!:   203779.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         8.496k i/100ms
      Hash#merge({})     7.218k i/100ms
 Hash#dup#merge!({})    12.018k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         94.017k (± 4.1%) i/s -    475.776k in   5.069800s
      Hash#merge({})     73.167k (± 3.9%) i/s -    368.118k in   5.039393s
 Hash#dup#merge!({})    122.265k (± 4.1%) i/s -    612.918k in   5.022284s

Comparison:
 Hash#dup#merge!({}):   122265.0 i/s
{}#merge!(Hash) do end:    94016.7 i/s - 1.30x  (± 0.00) slower
      Hash#merge({}):    73166.6 i/s - 1.67x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   238.770M i/100ms
          Hash#merge   238.997M i/100ms
Calculating -------------------------------------
        Hash#**other      2.386B (± 0.4%) i/s -     11.938B in   5.004670s
          Hash#merge      2.389B (± 0.2%) i/s -     11.950B in   5.002348s

Comparison:
          Hash#merge: 2388856356.9 i/s
        Hash#**other: 2385500391.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   289.000  i/100ms
         Hash#merge!    21.115k i/100ms
Calculating -------------------------------------
          Hash#merge      3.108k (± 3.9%) i/s -     15.606k in   5.028693s
         Hash#merge!    214.596k (± 3.5%) i/s -      1.077M in   5.024665s

Comparison:
         Hash#merge!:   214596.2 i/s
          Hash#merge:     3108.4 i/s - 69.04x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.025M i/100ms
Array#each             885.696k i/100ms
Array#each_w/_object   875.949k i/100ms
Hash#select-include      1.177M i/100ms
Calculating -------------------------------------
Hash#native-slice        11.358M (± 3.7%) i/s -     57.392M in   5.060310s
Array#each                8.941M (± 2.6%) i/s -     45.170M in   5.055474s
Array#each_w/_object      8.806M (± 2.9%) i/s -     44.673M in   5.077321s
Hash#select-include      11.940M (± 2.7%) i/s -     60.040M in   5.032417s

Comparison:
Hash#select-include : 11939819.0 i/s
Hash#native-slice   : 11358341.3 i/s - same-ish: difference falls within error
Array#each          :  8941340.6 i/s - 1.34x  (± 0.00) slower
Array#each_w/_object:  8806468.0 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   147.000  i/100ms
         Hash#value?   754.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      2.066k (±12.5%) i/s -     10.143k in   5.020853s
         Hash#value?      7.628k (± 0.1%) i/s -     38.454k in   5.040950s

Comparison:
         Hash#value?:     7628.3 i/s
Hash#values.include?:     2065.6 i/s - 3.69x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   238.384M i/100ms
                send   238.583M i/100ms
      method_missing   239.062M i/100ms
Calculating -------------------------------------
                call      2.387B (± 0.3%) i/s -     12.158B in   5.092304s
                send      2.387B (± 0.5%) i/s -     12.168B in   5.096945s
      method_missing      2.386B (± 0.3%) i/s -     11.953B in   5.009346s

Comparison:
                call: 2387461502.7 i/s
                send: 2387318273.2 i/s - same-ish: difference falls within error
      method_missing: 2386186065.6 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    16.195k i/100ms
      Symbol#to_proc    17.085k i/100ms
Calculating -------------------------------------
               Block    171.528k (± 3.7%) i/s -    858.335k in   5.011463s
      Symbol#to_proc    170.647k (± 3.3%) i/s -    854.250k in   5.011774s

Comparison:
               Block:   171528.3 i/s
      Symbol#to_proc:   170647.4 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   238.933M i/100ms
       block + yield   239.039M i/100ms
        unused block   238.966M i/100ms
               yield   239.054M i/100ms
Calculating -------------------------------------
          block.call      2.389B (± 0.2%) i/s -     11.947B in   5.001644s
       block + yield      2.389B (± 0.2%) i/s -     11.952B in   5.002736s
        unused block      2.390B (± 0.1%) i/s -     11.948B in   5.000302s
               yield      2.389B (± 0.2%) i/s -     11.953B in   5.002690s

Comparison:
        unused block: 2389524152.5 i/s
               yield: 2389263127.6 i/s - same-ish: difference falls within error
       block + yield: 2389093070.3 i/s - same-ish: difference falls within error
          block.call: 2388557625.3 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    64.529k i/100ms
      range#include?   279.000  i/100ms
       range#member?   226.000  i/100ms
       plain compare    42.368k i/100ms
Calculating -------------------------------------
        range#cover?    215.727k (±49.6%) i/s -    903.406k in   5.134840s
      range#include?      4.701k (±52.4%) i/s -     16.740k in   5.023272s
       range#member?      4.088k (±56.5%) i/s -      9.944k in   5.039897s
       plain compare    431.938k (±35.6%) i/s -      1.398M in   5.077037s

Comparison:
       plain compare:   431938.0 i/s
        range#cover?:   215727.3 i/s - same-ish: difference falls within error
      range#include?:     4701.2 i/s - 91.88x  (± 0.00) slower
       range#member?:     4087.8 i/s - 105.67x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     3.542M i/100ms
           String#=~     6.094M i/100ms
          Regexp#===     6.097M i/100ms
        String#match     3.186M i/100ms
Calculating -------------------------------------
       String#match?     38.873M (± 3.8%) i/s -    194.801M in   5.018892s
           String#=~     60.914M (± 0.1%) i/s -    304.702M in   5.002206s
          Regexp#===     60.920M (± 0.1%) i/s -    304.837M in   5.003889s
        String#match     31.702M (± 3.9%) i/s -    159.305M in   5.033381s

Comparison:
          Regexp#===: 60920144.8 i/s
           String#=~: 60913709.2 i/s - same-ish: difference falls within error
       String#match?: 38873402.6 i/s - 1.57x  (± 0.00) slower
        String#match: 31702080.4 i/s - 1.92x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.105M i/100ms
      String#casecmp     3.483M i/100ms
Calculating -------------------------------------
String#downcase + ==     12.512M (± 4.6%) i/s -     62.989M in   5.045373s
      String#casecmp     34.867M (± 0.2%) i/s -    177.650M in   5.095144s

Comparison:
      String#casecmp: 34866655.3 i/s
String#downcase + ==: 12512147.8 i/s - 2.79x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+   238.605M i/100ms
       String#concat   238.541M i/100ms
       String#append   239.069M i/100ms
         "foo" "bar"   239.018M i/100ms
  "#{'foo'}#{'bar'}"   239.073M i/100ms
Calculating -------------------------------------
            String#+      2.388B (± 0.3%) i/s -     12.169B in   5.094862s
       String#concat      2.388B (± 0.3%) i/s -     12.166B in   5.093626s
       String#append      2.387B (± 0.4%) i/s -     11.953B in   5.007282s
         "foo" "bar"      2.390B (± 0.2%) i/s -     11.951B in   5.000916s
  "#{'foo'}#{'bar'}"      2.390B (± 0.1%) i/s -     11.954B in   5.001128s

Comparison:
  "#{'foo'}#{'bar'}": 2390197368.1 i/s
         "foo" "bar": 2389749621.4 i/s - same-ish: difference falls within error
            String#+: 2388476863.2 i/s - same-ish: difference falls within error
       String#concat: 2388408513.5 i/s - same-ish: difference falls within error
       String#append: 2387248940.0 i/s - same-ish: difference falls within error

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   238.611M i/100ms
          String#dup   239.086M i/100ms
Calculating -------------------------------------
           String#+@      2.386B (± 0.3%) i/s -     11.931B in   4.999258s
          String#dup      2.389B (± 0.2%) i/s -     11.954B in   5.004025s

Comparison:
          String#dup: 2388943285.4 i/s
           String#+@: 2386488399.7 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.236M i/100ms
       String#match?     1.322M i/100ms
    String#end_with?    14.160M i/100ms
Calculating -------------------------------------
           String#=~     12.448M (± 2.8%) i/s -     63.052M in   5.069623s
       String#match?     13.578M (± 4.0%) i/s -     68.724M in   5.069853s
    String#end_with?    141.074M (± 0.5%) i/s -    708.005M in   5.018815s

Comparison:
    String#end_with?: 141073949.8 i/s
       String#match?: 13577585.1 i/s - 10.39x  (± 0.00) slower
           String#=~: 12447941.0 i/s - 11.33x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    93.529k i/100ms
          String#sub   350.243k i/100ms
String#dup["string"]=
                        12.304M i/100ms
Calculating -------------------------------------
         String#gsub    982.318k (± 3.2%) i/s -      4.957M in   5.052021s
          String#sub      3.556M (± 5.5%) i/s -     17.862M in   5.039182s
String#dup["string"]=
                        123.389M (± 0.7%) i/s -    627.499M in   5.085753s

Comparison:
String#dup["string"]=: 123388976.6 i/s
          String#sub:  3555722.7 i/s - 34.70x  (± 0.00) slower
         String#gsub:   982318.0 i/s - 125.61x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   117.716k i/100ms
           String#tr   126.879k i/100ms
Calculating -------------------------------------
         String#gsub      1.779M (± 5.5%) i/s -      8.946M in   5.044536s
           String#tr      1.294M (± 3.9%) i/s -      6.471M in   5.007586s

Comparison:
         String#gsub:  1779408.3 i/s
           String#tr:  1294284.0 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   238.511M i/100ms
         With Freeze   239.091M i/100ms
Calculating -------------------------------------
      Without Freeze      2.388B (± 0.3%) i/s -     12.164B in   5.094608s
         With Freeze      2.389B (± 0.3%) i/s -     11.955B in   5.004629s

Comparison:
         With Freeze: 2388714493.9 i/s
      Without Freeze: 2387657826.1 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     4.418k i/100ms
      String#squeeze    56.787k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     59.811k (± 4.5%) i/s -    300.424k in   5.033899s
      String#squeeze    569.392k (± 2.6%) i/s -      2.896M in   5.090128s

Comparison:
      String#squeeze:   569391.8 i/s
 String#gsub/regex+/:    59811.3 i/s - 9.52x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     2.849M i/100ms
       String#match?     1.870M i/100ms
  String#start_with?     1.701M i/100ms
Calculating -------------------------------------
           String#=~     28.862M (± 2.8%) i/s -    145.300M in   5.038779s
       String#match?     19.654M (± 3.6%) i/s -     99.117M in   5.049745s
  String#start_with?     17.249M (± 3.4%) i/s -     86.742M in   5.034843s

Comparison:
           String#=~: 28861826.1 i/s
       String#match?: 19654189.8 i/s - 1.47x  (± 0.00) slower
  String#start_with?: 17249498.9 i/s - 1.67x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   322.547k i/100ms
    String#[0, n] ==   183.856k i/100ms
   String#[RANGE] ==   174.586k i/100ms
   String#[0...n] ==   125.839k i/100ms
Calculating -------------------------------------
  String#start_with?      3.298M (± 3.1%) i/s -     16.772M in   5.091596s
    String#[0, n] ==      1.850M (± 3.9%) i/s -      9.377M in   5.076720s
   String#[RANGE] ==      1.744M (± 3.5%) i/s -      8.729M in   5.013067s
   String#[0...n] ==      1.289M (± 2.9%) i/s -      6.544M in   5.080250s

Comparison:
  String#start_with?:  3297657.6 i/s
    String#[0, n] ==:  1849897.1 i/s - 1.78x  (± 0.00) slower
   String#[RANGE] ==:  1743528.0 i/s - 1.89x  (± 0.00) slower
   String#[0...n] ==:  1289172.1 i/s - 2.56x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    12.381M i/100ms
 String#sub!'string'   407.239k i/100ms
String#gsub!'string'    91.953k i/100ms
  String#[/regexp/]=     3.723M i/100ms
 String#sub!/regexp/     1.429M i/100ms
String#gsub!/regexp/   417.727k i/100ms
Calculating -------------------------------------
  String#['string']=    123.666M (± 0.5%) i/s -    619.067M in   5.006112s
 String#sub!'string'      4.378M (±20.0%) i/s -     18.733M in   5.098177s
String#gsub!'string'      1.028M (± 3.7%) i/s -      5.149M in   5.015694s
  String#[/regexp/]=     37.270M (± 0.1%) i/s -    189.885M in   5.094849s
 String#sub!/regexp/     14.652M (± 4.6%) i/s -     74.325M in   5.084802s
String#gsub!/regexp/      4.141M (± 5.5%) i/s -     20.886M in   5.061072s

Comparison:
  String#['string']=: 123665601.4 i/s
  String#[/regexp/]=: 37270074.5 i/s - 3.32x  (± 0.00) slower
 String#sub!/regexp/: 14651500.5 i/s - 8.44x  (± 0.00) slower
 String#sub!'string':  4377945.0 i/s - 28.25x  (± 0.00) slower
String#gsub!/regexp/:  4140719.5 i/s - 29.87x  (± 0.00) slower
String#gsub!'string':  1028321.1 i/s - 120.26x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.337M i/100ms
        String#chomp     2.395M i/100ms
String#delete_suffix     5.606M i/100ms
Calculating -------------------------------------
          String#sub     13.829M (± 4.5%) i/s -     69.524M in   5.038283s
        String#chomp     24.598M (± 3.3%) i/s -    124.534M in   5.068857s
String#delete_suffix     56.070M (± 0.3%) i/s -    285.919M in   5.099381s

Comparison:
String#delete_suffix: 56069816.3 i/s
        String#chomp: 24597873.0 i/s - 2.28x  (± 0.00) slower
          String#sub: 13828865.4 i/s - 4.05x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix     1.493M i/100ms
          String#sub     3.148M i/100ms
Calculating -------------------------------------
String#delete_prefix     18.586M (± 4.6%) i/s -     94.078M in   5.073427s
          String#sub     33.134M (± 5.2%) i/s -    166.829M in   5.049116s

Comparison:
          String#sub: 33133993.6 i/s
String#delete_prefix: 18585964.7 i/s - 1.78x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.314M i/100ms
    String#unpack[0]     1.371M i/100ms
Calculating -------------------------------------
      String#unpack1     13.571M (± 3.8%) i/s -     68.338M in   5.043472s
    String#unpack[0]     13.648M (± 3.3%) i/s -     68.566M in   5.029644s

Comparison:
    String#unpack[0]: 13648257.2 i/s
      String#unpack1: 13571067.2 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.1.0-dev-2a84e021, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    13.462k i/100ms
          Time.parse   160.000  i/100ms
Calculating -------------------------------------
        Time.iso8601     99.133k (±45.0%) i/s -    430.784k in   5.024553s
          Time.parse      3.327k (±30.4%) i/s -     14.400k in   5.014140s

Comparison:
        Time.iso8601:    99132.9 i/s
          Time.parse:     3326.7 i/s - 29.80x  (± 0.00) slower

