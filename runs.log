$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       149.309M i/100ms
Function with splat arguments
                       571.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.492B (± 0.2%) i/s -      7.465B in   5.002319s
Function with splat arguments
                          5.929k (± 4.8%) i/s -     29.692k in   5.020585s

Comparison:
Function with single Array argument: 1492399545.2 i/s
Function with splat arguments:     5928.5 i/s - 251731.72x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   149.295M i/100ms
Sequential Assignment
                       149.179M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.490B (± 0.5%) i/s -      7.465B in   5.010042s
Sequential Assignment
                          1.492B (± 0.3%) i/s -      7.608B in   5.097961s

Comparison:
Sequential Assignment: 1492403408.9 i/s
 Parallel Assignment: 1489999108.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   149.277M i/100ms
       attr_accessor   149.190M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.491B (± 0.4%) i/s -      7.464B in   5.007676s
       attr_accessor      1.493B (± 0.3%) i/s -      7.609B in   5.096683s

Comparison:
       attr_accessor: 1492882544.6 i/s
   getter_and_setter: 1490507044.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     7.830k i/100ms
         respond_to?   149.361M i/100ms
Calculating -------------------------------------
      begin...rescue     55.576k (± 2.7%) i/s -    281.880k in   5.075649s
         respond_to?      1.493B (± 0.2%) i/s -      7.468B in   5.001569s

Comparison:
         respond_to?: 1493145775.4 i/s
      begin...rescue:    55575.7 i/s - 26866.90x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   149.205M i/100ms
             &method   149.345M i/100ms
Calculating -------------------------------------
              normal      1.492B (± 0.3%) i/s -      7.460B in   5.000853s
             &method      1.492B (± 0.3%) i/s -      7.467B in   5.004740s

Comparison:
             &method: 1492051571.8 i/s
              normal: 1491803855.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        89.000  i/100ms
       define_method   107.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.982k (±51.3%) i/s -      4.005k in   5.114486s
       define_method      3.859k (±48.4%) i/s -      6.206k in   5.003167s

Comparison:
       define_method:     3858.7 i/s
module_eval with string:     1982.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    31.907k i/100ms
       Kernel#format    49.461k i/100ms
            String#%    49.623k i/100ms
Calculating -------------------------------------
         Float#round    343.406k (± 2.9%) i/s -      1.723M in   5.021776s
       Kernel#format    493.817k (± 1.7%) i/s -      2.473M in   5.009646s
            String#%    493.855k (± 1.7%) i/s -      2.481M in   5.025620s

Comparison:
            String#%:   493855.0 i/s
       Kernel#format:   493816.7 i/s - same-ish: difference falls within error
         Float#round:   343406.5 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   149.151M i/100ms
          OpenStruct   149.076M i/100ms
Calculating -------------------------------------
                Hash      1.492B (± 0.3%) i/s -      7.607B in   5.098491s
          OpenStruct      1.492B (± 0.5%) i/s -      7.603B in   5.097602s

Comparison:
                Hash: 1491968354.9 i/s
          OpenStruct: 1491507103.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   149.350M i/100ms
          OpenStruct     2.530k i/100ms
Calculating -------------------------------------
                Hash      1.488B (± 0.4%) i/s -      7.467B in   5.018781s
          OpenStruct     24.544k (±11.2%) i/s -    121.440k in   5.043053s

Comparison:
                Hash: 1487937357.5 i/s
          OpenStruct:    24544.2 i/s - 60622.77x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   846.755k i/100ms
  ancestors.include?   123.884k i/100ms
Calculating -------------------------------------
  less than or equal      8.666M (± 4.2%) i/s -     44.031M in   5.090117s
  ancestors.include?      1.228M (± 3.3%) i/s -      6.194M in   5.048510s

Comparison:
  less than or equal:  8665705.3 i/s
  ancestors.include?:  1228353.9 i/s - 7.05x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     23.864  (± 0.0%) i/s -    120.000  in   5.028608s
         Kernel loop      0.291  (± 0.0%) i/s -      2.000  in   6.872901s

Comparison:
          While Loop:       23.9 i/s
         Kernel loop:        0.3 i/s - 82.00x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   238.582M i/100ms
         Array#first   238.418M i/100ms
Calculating -------------------------------------
           Array#[0]      2.386B (± 0.3%) i/s -     11.929B in   4.999306s
         Array#first      2.389B (± 0.2%) i/s -     12.159B in   5.090044s

Comparison:
         Array#first: 2388861661.8 i/s
           Array#[0]: 2386181053.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   149.194M i/100ms
          Array#last   149.204M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.491B (± 0.3%) i/s -      7.460B in   5.002849s
          Array#last      1.493B (± 0.3%) i/s -      7.609B in   5.097107s

Comparison:
          Array#last: 1492897789.4 i/s
          Array#[-1]: 1491107672.7 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   410.434k i/100ms
Calculating -------------------------------------
                find      0.103  (± 0.0%) i/s -      1.000  in   9.693060s
             bsearch      4.150M (± 3.0%) i/s -     20.932M in   5.048239s

Comparison:
             bsearch:  4150305.4 i/s
                find:        0.1 i/s - 40229158.57x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.123  (± 0.0%) i/s -      1.000  in   8.130079s
        Array#insert      0.901  (± 0.0%) i/s -      5.000  in   5.547229s

Comparison:
        Array#insert:        0.9 i/s
       Array#unshift:        0.1 i/s - 7.33x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   149.257M i/100ms
          Array#size   149.317M i/100ms
         Array#count   149.415M i/100ms
Calculating -------------------------------------
        Array#length      1.492B (± 0.3%) i/s -      7.463B in   5.002519s
          Array#size      1.493B (± 0.2%) i/s -      7.615B in   5.099312s
         Array#count      1.493B (± 0.2%) i/s -      7.471B in   5.003295s

Comparison:
          Array#size: 1493381643.9 i/s
         Array#count: 1493173236.2 i/s - same-ish: difference falls within error
        Array#length: 1491830109.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    24.872k i/100ms
        Array#sample     2.751M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    249.393k (± 1.5%) i/s -      1.268M in   5.087472s
        Array#sample     27.472M (± 0.0%) i/s -    137.561M in   5.007304s

Comparison:
        Array#sample: 27472144.1 i/s
 Array#shuffle.first:   249393.0 i/s - 110.16x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   365.000  i/100ms
          Date.parse    74.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     12.946k (±46.0%) i/s -     48.545k in   5.104148s
          Date.parse      6.092k (±46.0%) i/s -     22.274k in   4.999003s

Comparison:
        Date.iso8601:    12945.5 i/s
          Date.parse:     6092.0 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   133.122k i/100ms
           Array#map   511.574k i/100ms
Calculating -------------------------------------
   Array#each + push      1.454M (± 3.1%) i/s -      7.322M in   5.040506s
           Array#map      5.664M (± 6.0%) i/s -     28.648M in   5.077463s

Comparison:
           Array#map:  5663558.6 i/s
   Array#each + push:  1454076.9 i/s - 3.89x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     9.347M i/100ms
               #each    12.226M i/100ms
Calculating -------------------------------------
            For loop     93.337M (± 0.1%) i/s -    467.359M in   5.007208s
               #each    122.172M (± 0.2%) i/s -    611.287M in   5.003532s

Comparison:
               #each: 122171581.1 i/s
            For loop: 93337420.4 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   696.673k i/100ms
     each_with_index     1.246M i/100ms
Calculating -------------------------------------
          While Loop      7.015M (± 0.0%) i/s -     35.530M in   5.064966s
     each_with_index     12.455M (± 0.1%) i/s -     62.294M in   5.001579s

Comparison:
     each_with_index: 12454852.3 i/s
          While Loop:  7014919.7 i/s - 1.78x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   168.182k i/100ms
      inject to_proc   168.173k i/100ms
        inject block   168.198k i/100ms
Calculating -------------------------------------
       inject symbol      1.682M (± 0.0%) i/s -      8.409M in   5.000142s
      inject to_proc      1.682M (± 0.0%) i/s -      8.577M in   5.099748s
        inject block      1.682M (± 0.0%) i/s -      8.410M in   5.001341s

Comparison:
      inject to_proc:  1681813.3 i/s
       inject symbol:  1681772.6 i/s - same-ish: difference falls within error
        inject block:  1681529.2 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     9.847k i/100ms
   Array#map.flatten    10.520k i/100ms
      Array#flat_map    32.238k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    106.079k (± 3.2%) i/s -    531.738k in   5.018235s
   Array#map.flatten    106.305k (± 3.1%) i/s -    536.520k in   5.052174s
      Array#flat_map    325.653k (± 3.2%) i/s -      1.644M in   5.054455s

Comparison:
      Array#flat_map:   325652.7 i/s
   Array#map.flatten:   106305.3 i/s - 3.06x  (± 0.00) slower
Array#map.flatten(1):   106079.3 i/s - 3.07x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   123.514k i/100ms
  Array#reverse_each     1.306M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.415M (± 3.1%) i/s -      7.164M in   5.069358s
  Array#reverse_each     13.055M (± 0.0%) i/s -     65.296M in   5.001482s

Comparison:
  Array#reverse_each: 13055272.1 i/s
  Array#reverse.each:  1414563.9 i/s - 9.23x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       592.771k i/100ms
   Enumerable#detect     3.600M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          6.064M (± 5.9%) i/s -    120.925M in  20.034441s
   Enumerable#detect     36.005M (± 0.0%) i/s -    723.660M in  20.098805s

Comparison:
   Enumerable#detect: 36005117.0 i/s
Enumerable#select.first:  6063793.5 i/s - 5.94x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       142.805k i/100ms
Enumerable#select.last
                       363.576k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.396M (± 2.5%) i/s -      6.997M in   5.014468s
Enumerable#select.last
                          3.678M (± 3.3%) i/s -     18.542M in   5.046783s

Comparison:
Enumerable#select.last:  3678207.8 i/s
Enumerable#reverse.detect:  1396374.1 i/s - 2.63x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.298k i/100ms
  Enumerable#sort_by     3.087k i/100ms
     Enumerable#sort     4.566k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         28.427k (±13.2%) i/s -    140.178k in   5.039413s
  Enumerable#sort_by     32.999k (± 5.3%) i/s -    166.698k in   5.066231s
     Enumerable#sort     46.732k (± 1.6%) i/s -    237.432k in   5.082167s

Comparison:
     Enumerable#sort:    46731.9 i/s
  Enumerable#sort_by:    32998.5 i/s - 1.42x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    28427.4 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   319.279k i/100ms
Enumerable#sort_by...first
                         4.803k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      3.190M (± 0.2%) i/s -     15.964M in   5.004202s
Enumerable#sort_by...first
                         53.838k (± 2.8%) i/s -    268.968k in   5.000053s

Comparison:
   Enumerable#min_by:  3190119.6 i/s
Enumerable#sort_by...first:    53837.6 i/s - 59.25x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   165.004k i/100ms
            Hash#dup   191.975k i/100ms
Calculating -------------------------------------
              Hash[]      2.015M (± 3.8%) i/s -     10.065M in   5.002802s
            Hash#dup      1.959M (± 3.8%) i/s -      9.791M in   5.005510s

Comparison:
              Hash[]:  2015091.6 i/s
            Hash#dup:  1958862.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   149.182M i/100ms
  Hash#fetch, symbol   238.477M i/100ms
     Hash#[], string     5.053M i/100ms
  Hash#fetch, string     4.459M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.493B (± 0.3%) i/s -      7.608B in   5.097661s
  Hash#fetch, symbol      2.390B (± 0.2%) i/s -     12.162B in   5.089773s
     Hash#[], string     50.475M (± 0.3%) i/s -    252.643M in   5.005315s
  Hash#fetch, string     44.584M (± 0.2%) i/s -    222.970M in   5.001165s

Comparison:
  Hash#fetch, symbol: 2389565604.8 i/s
     Hash#[], symbol: 1492511611.8 i/s - 1.60x  (± 0.00) slower
     Hash#[], string: 50475338.6 i/s - 47.34x  (± 0.00) slower
  Hash#fetch, string: 44583647.5 i/s - 53.60x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    59.650M i/100ms
             Hash#[]    59.730M i/100ms
          Hash#[] ||    59.762M i/100ms
          Hash#[] &&    59.757M i/100ms
          Hash#fetch    59.745M i/100ms
 Hash#fetch fallback    59.768M i/100ms
Calculating -------------------------------------
            Hash#dig    596.666M (± 0.3%) i/s -      3.042B in   5.098666s
             Hash#[]    596.998M (± 0.2%) i/s -      2.987B in   5.002573s
          Hash#[] ||    597.391M (± 0.1%) i/s -      2.988B in   5.001889s
          Hash#[] &&    597.064M (± 0.2%) i/s -      2.988B in   5.004241s
          Hash#fetch    597.137M (± 0.1%) i/s -      2.987B in   5.002626s
 Hash#fetch fallback    597.156M (± 0.2%) i/s -      2.988B in   5.004365s

Comparison:
          Hash#[] ||: 597390959.6 i/s
 Hash#fetch fallback: 597155904.9 i/s - same-ish: difference falls within error
          Hash#fetch: 597136774.2 i/s - same-ish: difference falls within error
          Hash#[] &&: 597064372.8 i/s - same-ish: difference falls within error
             Hash#[]: 596997984.9 i/s - same-ish: difference falls within error
            Hash#dig: 596665563.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   149.082M i/100ms
  Hash#fetch + block   238.443M i/100ms
    Hash#fetch + arg   149.333M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.491B (± 0.3%) i/s -      7.454B in   4.999854s
  Hash#fetch + block      2.389B (± 0.2%) i/s -     12.161B in   5.090276s
    Hash#fetch + arg      1.493B (± 0.2%) i/s -      7.467B in   5.000572s

Comparison:
  Hash#fetch + block: 2388993604.7 i/s
    Hash#fetch + arg: 1493169887.5 i/s - 1.60x  (± 0.00) slower
  Hash#fetch + const: 1490883005.6 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    12.864k i/100ms
         sort + to_h     6.379k i/100ms
Calculating -------------------------------------
      sort_by + to_h    254.029k (± 4.9%) i/s -      1.274M in   5.027465s
         sort + to_h     64.432k (± 3.9%) i/s -    325.329k in   5.057339s

Comparison:
      sort_by + to_h:   254028.9 i/s
         sort + to_h:    64431.9 i/s - 3.94x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each    89.491k i/100ms
       Hash#each_key   115.159k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.081M (± 4.4%) i/s -      5.459M in   5.062438s
       Hash#each_key      1.173M (± 4.0%) i/s -      5.873M in   5.016481s

Comparison:
       Hash#each_key:  1172789.8 i/s
      Hash#keys.each:  1080542.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   113.000  i/100ms
           Hash#key?     2.733M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.864k (±12.4%) i/s -      9.153k in   5.046317s
           Hash#key?     26.410M (± 0.1%) i/s -    133.932M in   5.071248s

Comparison:
           Hash#key?: 26410091.9 i/s
  Hash#keys.include?:     1863.8 i/s - 14169.73x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    19.380k i/100ms
            Hash#[]=    21.845k i/100ms
Calculating -------------------------------------
         Hash#merge!    211.542k (± 3.5%) i/s -      1.066M in   5.045244s
            Hash#[]=    220.464k (± 3.0%) i/s -      1.114M in   5.058097s

Comparison:
            Hash#[]=:   220464.3 i/s
         Hash#merge!:   211542.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        11.190k i/100ms
      Hash#merge({})     7.540k i/100ms
 Hash#dup#merge!({})    12.520k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        118.965k (± 4.0%) i/s -    604.260k in   5.088216s
      Hash#merge({})     76.826k (± 4.2%) i/s -    384.540k in   5.014722s
 Hash#dup#merge!({})    126.723k (± 3.7%) i/s -    638.520k in   5.046368s

Comparison:
 Hash#dup#merge!({}):   126723.3 i/s
{}#merge!(Hash) do end:   118964.8 i/s - same-ish: difference falls within error
      Hash#merge({}):    76825.9 i/s - 1.65x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   149.252M i/100ms
          Hash#merge   149.429M i/100ms
Calculating -------------------------------------
        Hash#**other      1.492B (± 0.3%) i/s -      7.463B in   5.000584s
          Hash#merge      1.493B (± 0.3%) i/s -      7.471B in   5.004302s

Comparison:
          Hash#merge: 1493012439.9 i/s
        Hash#**other: 1492357465.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   304.000  i/100ms
         Hash#merge!    21.314k i/100ms
Calculating -------------------------------------
          Hash#merge      3.294k (± 4.1%) i/s -     16.720k in   5.084745s
         Hash#merge!    213.705k (± 3.1%) i/s -      1.087M in   5.091737s

Comparison:
         Hash#merge!:   213704.7 i/s
          Hash#merge:     3294.2 i/s - 64.87x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.034M i/100ms
Array#each             910.379k i/100ms
Array#each_w/_object   957.457k i/100ms
Hash#select-include      1.231M i/100ms
Calculating -------------------------------------
Hash#native-slice        11.555M (± 3.2%) i/s -     57.909M in   5.017340s
Array#each                9.642M (± 3.1%) i/s -     48.250M in   5.009370s
Array#each_w/_object      9.418M (± 2.6%) i/s -     47.873M in   5.086564s
Hash#select-include      12.270M (± 3.9%) i/s -     61.558M in   5.024957s

Comparison:
Hash#select-include : 12269794.5 i/s
Hash#native-slice   : 11554940.0 i/s - same-ish: difference falls within error
Array#each          :  9642005.4 i/s - 1.27x  (± 0.00) slower
Array#each_w/_object:  9418332.6 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?    95.000  i/100ms
         Hash#value?   730.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      2.087k (±13.5%) i/s -     10.165k in   5.027600s
         Hash#value?      7.420k (± 0.2%) i/s -     37.230k in   5.017569s

Comparison:
         Hash#value?:     7420.0 i/s
Hash#values.include?:     2087.2 i/s - 3.55x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   149.295M i/100ms
                send   149.018M i/100ms
      method_missing   149.333M i/100ms
Calculating -------------------------------------
                call      1.492B (± 0.3%) i/s -      7.465B in   5.003511s
                send      1.493B (± 0.3%) i/s -      7.600B in   5.090499s
      method_missing      1.493B (± 0.3%) i/s -      7.467B in   5.000418s

Comparison:
      method_missing: 1493213991.3 i/s
                send: 1492971344.4 i/s - same-ish: difference falls within error
                call: 1491920982.3 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    17.094k i/100ms
      Symbol#to_proc    17.858k i/100ms
Calculating -------------------------------------
               Block    181.895k (± 5.9%) i/s -    905.982k in   5.003000s
      Symbol#to_proc    181.507k (± 3.2%) i/s -    910.758k in   5.023203s

Comparison:
               Block:   181895.0 i/s
      Symbol#to_proc:   181507.3 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   238.656M i/100ms
       block + yield   238.908M i/100ms
        unused block   239.073M i/100ms
               yield   239.028M i/100ms
Calculating -------------------------------------
          block.call      2.388B (± 0.2%) i/s -     12.171B in   5.097213s
       block + yield      2.390B (± 0.2%) i/s -     12.184B in   5.099096s
        unused block      2.389B (± 0.2%) i/s -     11.954B in   5.003102s
               yield      2.389B (± 0.2%) i/s -     11.951B in   5.002259s

Comparison:
       block + yield: 2389511384.5 i/s
        unused block: 2389260801.8 i/s - same-ish: difference falls within error
               yield: 2389205768.6 i/s - same-ish: difference falls within error
          block.call: 2387873713.3 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    24.496k i/100ms
      range#include?   185.000  i/100ms
       range#member?   203.000  i/100ms
       plain compare    28.686k i/100ms
Calculating -------------------------------------
        range#cover?    158.308k (±32.4%) i/s -    710.384k in   5.050037s
      range#include?      4.438k (±41.6%) i/s -     15.170k in   5.015281s
       range#member?      1.990k (±106.5%) i/s -      4.263k in   5.042933s
       plain compare    251.271k (±27.9%) i/s -      1.147M in   5.001891s

Comparison:
       plain compare:   251271.2 i/s
        range#cover?:   158307.6 i/s - same-ish: difference falls within error
      range#include?:     4438.3 i/s - 56.61x  (± 0.00) slower
       range#member?:     1990.3 i/s - 126.25x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     2.346M i/100ms
           String#=~     2.246M i/100ms
          Regexp#===     2.368M i/100ms
        String#match     2.165M i/100ms
Calculating -------------------------------------
       String#match?     24.707M (± 3.9%) i/s -    124.312M in   5.039690s
           String#=~     23.136M (± 4.1%) i/s -    116.777M in   5.057110s
          Regexp#===     24.051M (± 3.8%) i/s -    120.750M in   5.028475s
        String#match     21.302M (± 3.7%) i/s -    108.229M in   5.088447s

Comparison:
       String#match?: 24707255.9 i/s
          Regexp#===: 24051231.0 i/s - same-ish: difference falls within error
           String#=~: 23135632.9 i/s - same-ish: difference falls within error
        String#match: 21301674.0 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.059M i/100ms
      String#casecmp     3.315M i/100ms
Calculating -------------------------------------
String#downcase + ==     13.537M (± 4.9%) i/s -     67.747M in   5.017186s
      String#casecmp     33.258M (± 0.3%) i/s -    169.071M in   5.083633s

Comparison:
      String#casecmp: 33258149.9 i/s
String#downcase + ==: 13536699.1 i/s - 2.46x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+   149.244M i/100ms
       String#concat   149.148M i/100ms
       String#append   149.418M i/100ms
         "foo" "bar"   149.117M i/100ms
  "#{'foo'}#{'bar'}"   148.726M i/100ms
Calculating -------------------------------------
            String#+      1.493B (± 0.3%) i/s -      7.462B in   4.999283s
       String#concat      1.494B (± 0.1%) i/s -      7.607B in   5.092459s
       String#append      1.493B (± 0.2%) i/s -      7.471B in   5.002693s
         "foo" "bar"      1.494B (± 0.2%) i/s -      7.605B in   5.091282s
  "#{'foo'}#{'bar'}"      1.494B (± 0.1%) i/s -      7.585B in   5.077478s

Comparison:
  "#{'foo'}#{'bar'}": 1493857234.8 i/s
         "foo" "bar": 1493731790.3 i/s - same-ish: difference falls within error
       String#concat: 1493688260.7 i/s - same-ish: difference falls within error
       String#append: 1493384753.3 i/s - same-ish: difference falls within error
            String#+: 1492664787.1 i/s - same-ish: difference falls within error

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   149.265M i/100ms
          String#dup   149.294M i/100ms
Calculating -------------------------------------
           String#+@      1.490B (± 0.5%) i/s -      7.463B in   5.008580s
          String#dup      1.493B (± 0.2%) i/s -      7.614B in   5.099385s

Comparison:
          String#dup: 1493131307.4 i/s
           String#+@: 1490127479.1 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   540.451k i/100ms
       String#match?     1.126M i/100ms
    String#end_with?    14.944M i/100ms
Calculating -------------------------------------
           String#=~      5.954M (± 4.7%) i/s -     29.725M in   5.004049s
       String#match?     11.622M (± 3.4%) i/s -     58.529M in   5.042172s
    String#end_with?    149.302M (± 0.2%) i/s -    747.214M in   5.004746s

Comparison:
    String#end_with?: 149301890.3 i/s
       String#match?: 11622299.4 i/s - 12.85x  (± 0.00) slower
           String#=~:  5954340.8 i/s - 25.07x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    86.761k i/100ms
          String#sub   357.911k i/100ms
String#dup["string"]=
                        16.603M i/100ms
Calculating -------------------------------------
         String#gsub    866.559k (± 2.9%) i/s -      4.338M in   5.010992s
          String#sub      4.785M (± 7.0%) i/s -     23.980M in   5.038578s
String#dup["string"]=
                        166.033M (± 0.0%) i/s -    830.165M in   4.999997s

Comparison:
String#dup["string"]=: 166033148.3 i/s
          String#sub:  4784508.0 i/s - 34.70x  (± 0.00) slower
         String#gsub:   866558.5 i/s - 191.60x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   112.193k i/100ms
           String#tr   127.772k i/100ms
Calculating -------------------------------------
         String#gsub      1.878M (± 6.5%) i/s -      9.424M in   5.042561s
           String#tr      1.308M (± 4.0%) i/s -      6.644M in   5.088685s

Comparison:
         String#gsub:  1877688.3 i/s
           String#tr:  1307897.6 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   149.123M i/100ms
         With Freeze   149.156M i/100ms
Calculating -------------------------------------
      Without Freeze      1.491B (± 0.4%) i/s -      7.456B in   5.000471s
         With Freeze      1.493B (± 0.2%) i/s -      7.607B in   5.094042s

Comparison:
         With Freeze: 1493310197.2 i/s
      Without Freeze: 1491109865.1 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     4.104k i/100ms
      String#squeeze    53.472k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     57.121k (± 5.0%) i/s -    287.280k in   5.043052s
      String#squeeze    533.835k (± 2.5%) i/s -      2.674M in   5.011735s

Comparison:
      String#squeeze:   533835.0 i/s
 String#gsub/regex+/:    57121.2 i/s - 9.35x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   669.190k i/100ms
       String#match?     1.779M i/100ms
  String#start_with?     1.819M i/100ms
Calculating -------------------------------------
           String#=~      7.394M (± 5.0%) i/s -     37.475M in   5.081852s
       String#match?     18.073M (± 3.4%) i/s -     90.708M in   5.025185s
  String#start_with?     18.898M (± 3.8%) i/s -     94.578M in   5.012492s

Comparison:
  String#start_with?: 18898246.0 i/s
       String#match?: 18073353.6 i/s - same-ish: difference falls within error
           String#=~:  7394156.2 i/s - 2.56x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   356.261k i/100ms
    String#[0, n] ==   164.242k i/100ms
   String#[RANGE] ==   182.726k i/100ms
   String#[0...n] ==   142.315k i/100ms
Calculating -------------------------------------
  String#start_with?      3.683M (± 2.1%) i/s -     18.526M in   5.031925s
    String#[0, n] ==      1.930M (± 3.8%) i/s -      9.690M in   5.027722s
   String#[RANGE] ==      1.840M (± 2.7%) i/s -      9.319M in   5.069551s
   String#[0...n] ==      1.449M (± 4.9%) i/s -      7.258M in   5.022003s

Comparison:
  String#start_with?:  3683296.1 i/s
    String#[0, n] ==:  1930221.7 i/s - 1.91x  (± 0.00) slower
   String#[RANGE] ==:  1839627.6 i/s - 2.00x  (± 0.00) slower
   String#[0...n] ==:  1448794.9 i/s - 2.54x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    16.559M i/100ms
 String#sub!'string'   445.548k i/100ms
String#gsub!'string'    97.937k i/100ms
  String#[/regexp/]=   660.027k i/100ms
 String#sub!/regexp/   442.054k i/100ms
String#gsub!/regexp/   308.556k i/100ms
Calculating -------------------------------------
  String#['string']=    166.029M (± 0.0%) i/s -    844.508M in   5.086505s
 String#sub!'string'      5.024M (± 6.9%) i/s -     25.396M in   5.081394s
String#gsub!'string'    946.643k (± 2.7%) i/s -      4.799M in   5.073629s
  String#[/regexp/]=      6.715M (± 7.2%) i/s -     33.661M in   5.041663s
 String#sub!/regexp/      4.518M (± 5.2%) i/s -     22.545M in   5.005174s
String#gsub!/regexp/      3.252M (± 2.2%) i/s -     16.353M in   5.031313s

Comparison:
  String#['string']=: 166029175.1 i/s
  String#[/regexp/]=:  6714727.0 i/s - 24.73x  (± 0.00) slower
 String#sub!'string':  5023846.2 i/s - 33.05x  (± 0.00) slower
 String#sub!/regexp/:  4518072.9 i/s - 36.75x  (± 0.00) slower
String#gsub!/regexp/:  3252062.3 i/s - 51.05x  (± 0.00) slower
String#gsub!'string':   946643.4 i/s - 175.39x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub   315.980k i/100ms
        String#chomp     2.740M i/100ms
String#delete_suffix     5.651M i/100ms
Calculating -------------------------------------
          String#sub      4.640M (± 6.9%) i/s -     23.383M in   5.065968s
        String#chomp     27.407M (± 2.9%) i/s -    137.016M in   5.003764s
String#delete_suffix     56.625M (± 0.8%) i/s -    288.200M in   5.089951s

Comparison:
String#delete_suffix: 56624733.6 i/s
        String#chomp: 27407277.1 i/s - 2.07x  (± 0.00) slower
          String#sub:  4639859.9 i/s - 12.20x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix     2.218M i/100ms
          String#sub   396.503k i/100ms
Calculating -------------------------------------
String#delete_prefix     24.195M (± 4.8%) i/s -    121.989M in   5.054428s
          String#sub      4.804M (± 6.0%) i/s -     24.187M in   5.054140s

Comparison:
String#delete_prefix: 24195126.5 i/s
          String#sub:  4804190.7 i/s - 5.04x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.315M i/100ms
    String#unpack[0]     1.359M i/100ms
Calculating -------------------------------------
      String#unpack1     13.693M (± 3.7%) i/s -     69.708M in   5.098082s
    String#unpack[0]     13.616M (± 3.0%) i/s -     69.327M in   5.096459s

Comparison:
      String#unpack1: 13692975.4 i/s
    String#unpack[0]: 13615883.8 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.0.0-dev-2ad13ce6, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    19.446k i/100ms
          Time.parse    72.000  i/100ms
Calculating -------------------------------------
        Time.iso8601     73.727k (± 1.5%) i/s -    369.474k in   5.012484s
          Time.parse      3.906k (±21.6%) i/s -     16.344k in   4.997571s

Comparison:
        Time.iso8601:    73726.5 i/s
          Time.parse:     3906.0 i/s - 18.88x  (± 0.00) slower

