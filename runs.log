$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       205.268M i/100ms
Function with splat arguments
                       652.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          2.083B (± 5.4%) i/s -     10.469B in   5.040454s
Function with splat arguments
                          7.048k (± 6.8%) i/s -     35.208k in   5.019975s

Comparison:
Function with single Array argument: 2083435324.2 i/s
Function with splat arguments:     7047.6 i/s - 295625.40x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   207.534M i/100ms
Sequential Assignment
                       199.542M i/100ms
Calculating -------------------------------------
 Parallel Assignment      2.122B (± 4.7%) i/s -     10.584B in   4.999880s
Sequential Assignment
                          2.153B (± 3.8%) i/s -     10.775B in   5.013268s

Comparison:
Sequential Assignment: 2152564327.2 i/s
 Parallel Assignment: 2121808703.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   208.593M i/100ms
       attr_accessor   197.995M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.818B (± 1.9%) i/s -      9.178B in   5.050658s
       attr_accessor      1.921B (± 7.5%) i/s -      9.702B in   5.076703s

Comparison:
       attr_accessor: 1921359077.6 i/s
   getter_and_setter: 1817864011.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     9.224k i/100ms
         respond_to?   182.131M i/100ms
Calculating -------------------------------------
      begin...rescue     70.760k (± 5.3%) i/s -    359.736k in   5.098771s
         respond_to?      2.073B (± 4.4%) i/s -     10.381B in   5.017888s

Comparison:
         respond_to?: 2073029480.6 i/s
      begin...rescue:    70759.9 i/s - 29296.66x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   212.356M i/100ms
             &method   207.772M i/100ms
Calculating -------------------------------------
              normal      2.068B (± 4.0%) i/s -     10.405B in   5.039614s
             &method      2.081B (± 5.5%) i/s -     10.389B in   5.007330s

Comparison:
             &method: 2081349705.5 i/s
              normal: 2068121198.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        84.000  i/100ms
       define_method   114.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.809k (±51.0%) i/s -      3.948k in   5.135471s
       define_method      5.141k (±49.3%) i/s -      7.068k in   5.007150s

Comparison:
       define_method:     5140.9 i/s
module_eval with string:     1809.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    31.407k i/100ms
       Kernel#format    45.847k i/100ms
            String#%    45.124k i/100ms
Calculating -------------------------------------
         Float#round    356.551k (± 5.3%) i/s -      1.790M in   5.035792s
       Kernel#format    460.380k (± 5.3%) i/s -      2.338M in   5.093620s
            String#%    432.035k (± 4.4%) i/s -      2.166M in   5.023702s

Comparison:
       Kernel#format:   460380.4 i/s
            String#%:   432035.4 i/s - same-ish: difference falls within error
         Float#round:   356551.0 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   201.891M i/100ms
          OpenStruct   219.226M i/100ms
Calculating -------------------------------------
                Hash      2.079B (± 4.4%) i/s -     10.498B in   5.060731s
          OpenStruct      2.092B (± 3.7%) i/s -     10.523B in   5.038217s

Comparison:
          OpenStruct: 2091625654.8 i/s
                Hash: 2078663212.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   205.943M i/100ms
          OpenStruct     2.226k i/100ms
Calculating -------------------------------------
                Hash      2.084B (± 3.9%) i/s -     10.503B in   5.048557s
          OpenStruct     25.113k (±10.2%) i/s -    124.656k in   5.043140s

Comparison:
                Hash: 2083596540.0 i/s
          OpenStruct:    25113.2 i/s - 82968.18x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   729.186k i/100ms
  ancestors.include?   123.463k i/100ms
Calculating -------------------------------------
  less than or equal      8.519M (± 5.7%) i/s -     43.022M in   5.067413s
  ancestors.include?      1.194M (± 5.2%) i/s -      6.050M in   5.079530s

Comparison:
  less than or equal:  8518741.1 i/s
  ancestors.include?:  1194312.7 i/s - 7.13x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     2.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     23.043  (± 4.3%) i/s -    116.000  in   5.046965s
         Kernel loop      4.905  (± 0.0%) i/s -     25.000  in   5.104183s

Comparison:
          While Loop:       23.0 i/s
         Kernel loop:        4.9 i/s - 4.70x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   208.135M i/100ms
         Array#first   209.763M i/100ms
Calculating -------------------------------------
           Array#[0]      1.811B (± 4.2%) i/s -      9.158B in   5.065065s
         Array#first      1.816B (± 1.7%) i/s -      9.230B in   5.082808s

Comparison:
         Array#first: 1816379769.1 i/s
           Array#[0]: 1811204322.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   182.435M i/100ms
          Array#last   181.357M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.806B (± 1.9%) i/s -      9.122B in   5.051639s
          Array#last      1.799B (± 3.7%) i/s -      9.068B in   5.047185s

Comparison:
          Array#[-1]: 1806370125.2 i/s
          Array#last: 1799407229.9 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   442.258k i/100ms
Calculating -------------------------------------
                find      0.102  (± 0.0%) i/s -      1.000  in   9.793804s
             bsearch      4.663M (± 5.2%) i/s -     23.440M in   5.039923s

Comparison:
             bsearch:  4663424.1 i/s
                find:        0.1 i/s - 45672662.84x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.090  (± 0.0%) i/s -      1.000  in  11.129557s
        Array#insert      0.822  (± 0.0%) i/s -      5.000  in   6.082635s

Comparison:
        Array#insert:        0.8 i/s
       Array#unshift:        0.1 i/s - 9.15x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   206.610M i/100ms
          Array#size   200.755M i/100ms
         Array#count   217.565M i/100ms
Calculating -------------------------------------
        Array#length      2.026B (± 3.6%) i/s -     10.124B in   5.004143s
          Array#size      2.094B (± 4.6%) i/s -     10.640B in   5.092103s
         Array#count      2.074B (± 4.1%) i/s -     10.443B in   5.043939s

Comparison:
          Array#size: 2094116924.6 i/s
         Array#count: 2074078798.9 i/s - same-ish: difference falls within error
        Array#length: 2025648675.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    19.555k i/100ms
        Array#sample     2.327M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    219.938k (± 4.8%) i/s -      1.115M in   5.080711s
        Array#sample     23.815M (± 4.8%) i/s -    120.979M in   5.092319s

Comparison:
        Array#sample: 23815239.9 i/s
 Array#shuffle.first:   219938.0 i/s - 108.28x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   336.000  i/100ms
          Date.parse   163.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     10.141k (±35.5%) i/s -     40.992k in   5.084892s
          Date.parse      4.519k (±30.5%) i/s -     18.745k in   5.000032s

Comparison:
        Date.iso8601:    10141.0 i/s
          Date.parse:     4519.5 i/s - 2.24x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   214.998k i/100ms
           Array#map   933.448k i/100ms
Calculating -------------------------------------
   Array#each + push      2.291M (± 7.0%) i/s -     11.395M in   5.001089s
           Array#map      9.656M (± 6.9%) i/s -     48.539M in   5.051236s

Comparison:
           Array#map:  9655933.8 i/s
   Array#each + push:  2290629.4 i/s - 4.22x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     9.279M i/100ms
               #each     9.404M i/100ms
Calculating -------------------------------------
            For loop     96.431M (± 3.7%) i/s -    482.517M in   5.010778s
               #each    112.129M (± 5.6%) i/s -    564.249M in   5.048383s

Comparison:
               #each: 112128587.3 i/s
            For loop: 96430564.3 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   785.264k i/100ms
     each_with_index     1.053M i/100ms
Calculating -------------------------------------
          While Loop      7.992M (± 6.1%) i/s -     40.048M in   5.028417s
     each_with_index     10.966M (± 1.4%) i/s -     55.830M in   5.092433s

Comparison:
     each_with_index: 10965504.3 i/s
          While Loop:  7991981.0 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   159.510k i/100ms
      inject to_proc   168.358k i/100ms
        inject block   165.294k i/100ms
Calculating -------------------------------------
       inject symbol      1.630M (± 5.5%) i/s -      8.135M in   5.008092s
      inject to_proc      1.667M (± 3.9%) i/s -      8.418M in   5.058056s
        inject block      1.652M (± 4.6%) i/s -      8.265M in   5.013607s

Comparison:
      inject to_proc:  1666939.9 i/s
        inject block:  1652196.9 i/s - same-ish: difference falls within error
       inject symbol:  1629794.5 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    16.496k i/100ms
   Array#map.flatten    17.229k i/100ms
      Array#flat_map    41.904k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    169.744k (± 7.4%) i/s -    857.792k in   5.081605s
   Array#map.flatten    176.643k (± 5.6%) i/s -    895.908k in   5.088540s
      Array#flat_map    420.467k (± 5.9%) i/s -      2.095M in   5.001821s

Comparison:
      Array#flat_map:   420466.7 i/s
   Array#map.flatten:   176643.4 i/s - 2.38x  (± 0.00) slower
Array#map.flatten(1):   169744.1 i/s - 2.48x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   190.959k i/100ms
  Array#reverse_each     1.339M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.812M (±10.4%) i/s -      8.975M in   5.005848s
  Array#reverse_each     13.208M (± 3.4%) i/s -     66.939M in   5.074073s

Comparison:
  Array#reverse_each: 13207765.1 i/s
  Array#reverse.each:  1811892.4 i/s - 7.29x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       633.751k i/100ms
   Enumerable#detect     2.905M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          5.886M (± 6.2%) i/s -    117.244M in  20.001414s
   Enumerable#detect     28.381M (± 8.3%) i/s -    566.454M in  20.088175s

Comparison:
   Enumerable#detect: 28380957.2 i/s
Enumerable#select.first:  5885719.2 i/s - 4.82x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       179.989k i/100ms
Enumerable#select.last
                       339.870k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.924M (± 5.1%) i/s -      9.719M in   5.066725s
Enumerable#select.last
                          3.466M (± 4.8%) i/s -     17.333M in   5.011864s

Comparison:
Enumerable#select.last:  3466483.8 i/s
Enumerable#reverse.detect:  1923519.8 i/s - 1.80x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.519k i/100ms
  Enumerable#sort_by     2.491k i/100ms
     Enumerable#sort     2.658k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         24.658k (±17.9%) i/s -    110.836k in   5.026239s
  Enumerable#sort_by     25.852k (±17.2%) i/s -    117.077k in   5.047984s
     Enumerable#sort     36.468k (± 4.7%) i/s -    183.402k in   5.041023s

Comparison:
     Enumerable#sort:    36468.5 i/s
  Enumerable#sort_by:    25852.3 i/s - 1.41x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    24657.5 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   404.104k i/100ms
Enumerable#sort_by...first
                         5.374k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      4.237M (± 3.5%) i/s -     21.418M in   5.061705s
Enumerable#sort_by...first
                         70.439k (± 5.3%) i/s -    354.684k in   5.050255s

Comparison:
   Enumerable#min_by:  4236579.3 i/s
Enumerable#sort_by...first:    70438.7 i/s - 60.15x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   290.191k i/100ms
            Hash#dup   345.257k i/100ms
Calculating -------------------------------------
              Hash[]      3.460M (± 7.5%) i/s -     17.411M in   5.063214s
            Hash#dup      3.577M (± 4.8%) i/s -     17.953M in   5.031639s

Comparison:
            Hash#dup:  3577144.6 i/s
              Hash[]:  3460272.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   201.610M i/100ms
  Hash#fetch, symbol   177.351M i/100ms
     Hash#[], string     4.466M i/100ms
  Hash#fetch, string     4.377M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      2.103B (± 4.5%) i/s -     10.685B in   5.090954s
  Hash#fetch, symbol      1.902B (± 8.1%) i/s -      9.577B in   5.067408s
     Hash#[], string     44.584M (± 3.7%) i/s -    223.284M in   5.014792s
  Hash#fetch, string     44.724M (± 2.1%) i/s -    227.594M in   5.091014s

Comparison:
     Hash#[], symbol: 2103204570.6 i/s
  Hash#fetch, symbol: 1901730124.4 i/s - same-ish: difference falls within error
  Hash#fetch, string: 44724342.3 i/s - 47.03x  (± 0.00) slower
     Hash#[], string: 44583622.0 i/s - 47.17x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    70.771M i/100ms
             Hash#[]    71.616M i/100ms
          Hash#[] ||    82.928M i/100ms
          Hash#[] &&    71.210M i/100ms
          Hash#fetch    69.623M i/100ms
 Hash#fetch fallback    70.369M i/100ms
Calculating -------------------------------------
            Hash#dig    720.355M (± 5.7%) i/s -      3.609B in   5.026143s
             Hash#[]    796.531M (± 7.4%) i/s -      4.011B in   5.063922s
          Hash#[] ||    730.920M (± 2.5%) i/s -      3.732B in   5.108594s
          Hash#[] &&    695.908M (± 3.5%) i/s -      3.489B in   5.020409s
          Hash#fetch    689.330M (± 2.3%) i/s -      3.481B in   5.052870s
 Hash#fetch fallback    703.033M (± 3.3%) i/s -      3.518B in   5.010216s

Comparison:
             Hash#[]: 796531280.8 i/s
          Hash#[] ||: 730919568.2 i/s - same-ish: difference falls within error
            Hash#dig: 720355238.1 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 703033400.9 i/s - 1.13x  (± 0.00) slower
          Hash#[] &&: 695908314.4 i/s - 1.14x  (± 0.00) slower
          Hash#fetch: 689329645.1 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   171.480M i/100ms
  Hash#fetch + block   178.262M i/100ms
    Hash#fetch + arg   173.004M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      2.100B (± 3.8%) i/s -     10.632B in   5.069315s
  Hash#fetch + block      1.965B (± 7.9%) i/s -      9.804B in   5.021203s
    Hash#fetch + arg      2.061B (± 5.1%) i/s -     10.380B in   5.050530s

Comparison:
  Hash#fetch + const: 2100462594.5 i/s
    Hash#fetch + arg: 2060799271.1 i/s - same-ish: difference falls within error
  Hash#fetch + block: 1964733025.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    21.234k i/100ms
         sort + to_h    11.698k i/100ms
Calculating -------------------------------------
      sort_by + to_h    214.983k (±19.3%) i/s -      1.040M in   5.031035s
         sort + to_h    121.704k (± 6.7%) i/s -    608.296k in   5.021212s

Comparison:
      sort_by + to_h:   214982.8 i/s
         sort + to_h:   121704.3 i/s - 1.77x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   121.831k i/100ms
       Hash#each_key   139.979k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.307M (± 6.0%) i/s -      6.579M in   5.054105s
       Hash#each_key      1.453M (± 5.8%) i/s -      7.279M in   5.027894s

Comparison:
       Hash#each_key:  1453024.6 i/s
      Hash#keys.each:  1306596.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   155.000  i/100ms
           Hash#key?    17.228M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.772k (±16.9%) i/s -      8.525k in   5.032620s
           Hash#key?    171.316M (± 4.8%) i/s -    861.393M in   5.040987s

Comparison:
           Hash#key?: 171315667.7 i/s
  Hash#keys.include?:     1772.1 i/s - 96673.47x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    23.832k i/100ms
            Hash#[]=    34.639k i/100ms
Calculating -------------------------------------
         Hash#merge!    296.878k (± 6.7%) i/s -      1.478M in   5.001985s
            Hash#[]=    343.791k (± 7.1%) i/s -      1.732M in   5.065173s

Comparison:
            Hash#[]=:   343791.1 i/s
         Hash#merge!:   296877.9 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        19.774k i/100ms
      Hash#merge({})    13.135k i/100ms
 Hash#dup#merge!({})    21.468k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        245.762k (± 4.7%) i/s -      1.226M in   5.000108s
      Hash#merge({})    144.239k (± 4.2%) i/s -    722.425k in   5.017358s
 Hash#dup#merge!({})    216.418k (± 3.8%) i/s -      1.095M in   5.066481s

Comparison:
{}#merge!(Hash) do end:   245761.5 i/s
 Hash#dup#merge!({}):   216418.2 i/s - 1.14x  (± 0.00) slower
      Hash#merge({}):   144238.7 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   206.554M i/100ms
          Hash#merge   209.575M i/100ms
Calculating -------------------------------------
        Hash#**other      2.073B (± 4.2%) i/s -     10.534B in   5.090408s
          Hash#merge      2.103B (± 3.8%) i/s -     10.688B in   5.091025s

Comparison:
          Hash#merge: 2102607248.2 i/s
        Hash#**other: 2073332745.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   544.000  i/100ms
         Hash#merge!    30.598k i/100ms
Calculating -------------------------------------
          Hash#merge      6.635k (± 9.2%) i/s -     33.184k in   5.047043s
         Hash#merge!    318.188k (± 5.8%) i/s -      1.591M in   5.019445s

Comparison:
         Hash#merge!:   318187.9 i/s
          Hash#merge:     6635.3 i/s - 47.95x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.122M i/100ms
Array#each             957.799k i/100ms
Array#each_w/_object   947.287k i/100ms
Hash#select-include      1.712M i/100ms
Calculating -------------------------------------
Hash#native-slice        11.863M (± 5.8%) i/s -     59.478M in   5.032089s
Array#each                9.679M (± 4.9%) i/s -     48.848M in   5.059635s
Array#each_w/_object      9.804M (± 4.7%) i/s -     49.259M in   5.035587s
Hash#select-include      17.002M (± 5.4%) i/s -     85.592M in   5.049187s

Comparison:
Hash#select-include : 17002469.5 i/s
Hash#native-slice   : 11862556.1 i/s - 1.43x  (± 0.00) slower
Array#each_w/_object:  9804155.3 i/s - 1.73x  (± 0.00) slower
Array#each          :  9678534.2 i/s - 1.76x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   160.000  i/100ms
         Hash#value?   427.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.646k (±13.9%) i/s -      8.160k in   5.080245s
         Hash#value?      4.310k (± 2.6%) i/s -     21.777k in   5.056193s

Comparison:
         Hash#value?:     4309.9 i/s
Hash#values.include?:     1645.8 i/s - 2.62x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   192.465M i/100ms
                send   207.833M i/100ms
      method_missing   208.909M i/100ms
Calculating -------------------------------------
                call      2.042B (± 3.5%) i/s -     10.201B in   5.001463s
                send      2.141B (± 4.2%) i/s -     10.807B in   5.056384s
      method_missing      2.106B (± 4.2%) i/s -     10.654B in   5.066737s

Comparison:
                send: 2141321627.7 i/s
      method_missing: 2106494065.6 i/s - same-ish: difference falls within error
                call: 2042042879.7 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    39.530k i/100ms
      Symbol#to_proc    41.677k i/100ms
Calculating -------------------------------------
               Block    441.456k (± 4.2%) i/s -      2.214M in   5.024003s
      Symbol#to_proc    434.438k (± 5.5%) i/s -      2.167M in   5.004832s

Comparison:
               Block:   441455.5 i/s
      Symbol#to_proc:   434437.7 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   203.787M i/100ms
       block + yield   211.484M i/100ms
        unused block   218.500M i/100ms
               yield   215.577M i/100ms
Calculating -------------------------------------
          block.call      2.108B (± 4.5%) i/s -     10.597B in   5.038467s
       block + yield      2.050B (± 4.3%) i/s -     10.363B in   5.065476s
        unused block      2.075B (± 4.4%) i/s -     10.488B in   5.063303s
               yield      2.100B (± 4.1%) i/s -     10.563B in   5.038338s

Comparison:
          block.call: 2107599933.9 i/s
               yield: 2100151088.2 i/s - same-ish: difference falls within error
        unused block: 2075417122.6 i/s - same-ish: difference falls within error
       block + yield: 2049603698.8 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    60.733k i/100ms
      range#include?   196.000  i/100ms
       range#member?   153.000  i/100ms
       plain compare    50.890k i/100ms
Calculating -------------------------------------
        range#cover?    111.744k (±24.0%) i/s -    546.597k in   5.168861s
      range#include?      4.722k (±45.7%) i/s -     17.836k in   5.061488s
       range#member?      3.886k (±53.5%) i/s -      7.038k in   5.029082s
       plain compare    421.364k (±29.4%) i/s -      1.934M in   5.067334s

Comparison:
       plain compare:   421364.4 i/s
        range#cover?:   111744.5 i/s - 3.77x  (± 0.00) slower
      range#include?:     4721.7 i/s - 89.24x  (± 0.00) slower
       range#member?:     3886.5 i/s - 108.42x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     4.421M i/100ms
           String#=~     6.644M i/100ms
          Regexp#===     6.610M i/100ms
        String#match     4.878M i/100ms
Calculating -------------------------------------
       String#match?     48.955M (± 5.5%) i/s -    247.593M in   5.073812s
           String#=~     66.705M (± 4.0%) i/s -    338.824M in   5.087954s
          Regexp#===     66.038M (± 3.1%) i/s -    330.492M in   5.009457s
        String#match     48.019M (± 4.5%) i/s -    243.901M in   5.090097s

Comparison:
           String#=~: 66704882.5 i/s
          Regexp#===: 66038113.9 i/s - same-ish: difference falls within error
       String#match?: 48954662.7 i/s - 1.36x  (± 0.00) slower
        String#match: 48019287.9 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.623M i/100ms
      String#casecmp     3.142M i/100ms
Calculating -------------------------------------
String#downcase + ==     17.786M (± 7.1%) i/s -     89.239M in   5.044026s
      String#casecmp     31.945M (± 5.3%) i/s -    160.252M in   5.031607s

Comparison:
      String#casecmp: 31944985.4 i/s
String#downcase + ==: 17785631.3 i/s - 1.80x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+   206.154M i/100ms
       String#concat   206.978M i/100ms
       String#append   213.089M i/100ms
         "foo" "bar"   216.171M i/100ms
  "#{'foo'}#{'bar'}"   213.822M i/100ms
Calculating -------------------------------------
            String#+      2.077B (± 4.1%) i/s -     10.514B in   5.071310s
       String#concat      2.127B (± 4.2%) i/s -     10.763B in   5.068354s
       String#append      2.121B (± 4.1%) i/s -     10.654B in   5.031698s
         "foo" "bar"      2.123B (± 4.3%) i/s -     10.592B in   4.999814s
  "#{'foo'}#{'bar'}"      2.123B (± 3.7%) i/s -     10.691B in   5.044118s

Comparison:
       String#concat: 2127463151.8 i/s
         "foo" "bar": 2122664718.2 i/s - same-ish: difference falls within error
  "#{'foo'}#{'bar'}": 2122527228.3 i/s - same-ish: difference falls within error
       String#append: 2121096990.7 i/s - same-ish: difference falls within error
            String#+: 2076732172.5 i/s - same-ish: difference falls within error

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   204.448M i/100ms
          String#dup   202.116M i/100ms
Calculating -------------------------------------
           String#+@      2.017B (± 3.3%) i/s -     10.222B in   5.073081s
          String#dup      2.077B (± 4.3%) i/s -     10.510B in   5.070498s

Comparison:
          String#dup: 2076654639.7 i/s
           String#+@: 2017185146.9 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.325M i/100ms
       String#match?     1.709M i/100ms
    String#end_with?    17.394M i/100ms
Calculating -------------------------------------
           String#=~     14.768M (± 4.7%) i/s -     74.172M in   5.033878s
       String#match?     16.659M (± 5.7%) i/s -     83.736M in   5.043585s
    String#end_with?    172.220M (± 4.1%) i/s -    869.690M in   5.058523s

Comparison:
    String#end_with?: 172219990.0 i/s
       String#match?: 16659007.7 i/s - 10.34x  (± 0.00) slower
           String#=~: 14768045.8 i/s - 11.66x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   132.369k i/100ms
          String#sub     1.882M i/100ms
String#dup["string"]=
                        15.602M i/100ms
Calculating -------------------------------------
         String#gsub      1.402M (± 5.7%) i/s -      7.016M in   5.021384s
          String#sub     20.408M (± 5.4%) i/s -    103.494M in   5.087066s
String#dup["string"]=
                        164.288M (± 4.3%) i/s -    826.909M in   5.043048s

Comparison:
String#dup["string"]=: 164287981.6 i/s
          String#sub: 20408379.1 i/s - 8.05x  (± 0.00) slower
         String#gsub:  1401873.1 i/s - 117.19x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   190.033k i/100ms
           String#tr   136.232k i/100ms
Calculating -------------------------------------
         String#gsub      2.967M (± 8.6%) i/s -     14.823M in   5.037873s
           String#tr      1.411M (± 4.9%) i/s -      7.084M in   5.034610s

Comparison:
         String#gsub:  2966573.1 i/s
           String#tr:  1410663.2 i/s - 2.10x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   206.505M i/100ms
         With Freeze   201.086M i/100ms
Calculating -------------------------------------
      Without Freeze      2.126B (± 3.9%) i/s -     10.738B in   5.059272s
         With Freeze      2.122B (± 4.4%) i/s -     10.658B in   5.032395s

Comparison:
      Without Freeze: 2125805917.2 i/s
         With Freeze: 2122086915.5 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     8.754k i/100ms
      String#squeeze    59.279k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    112.546k (± 8.5%) i/s -    560.256k in   5.015640s
      String#squeeze    608.492k (± 4.6%) i/s -      3.083M in   5.076967s

Comparison:
      String#squeeze:   608492.2 i/s
 String#gsub/regex+/:   112546.2 i/s - 5.41x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     2.895M i/100ms
       String#match?     2.908M i/100ms
  String#start_with?     2.180M i/100ms
Calculating -------------------------------------
           String#=~     28.153M (± 6.0%) i/s -    141.837M in   5.058164s
       String#match?     31.095M (± 7.0%) i/s -    157.057M in   5.077399s
  String#start_with?     21.989M (± 6.3%) i/s -    111.178M in   5.077209s

Comparison:
       String#match?: 31095348.7 i/s
           String#=~: 28153445.7 i/s - same-ish: difference falls within error
  String#start_with?: 21989151.5 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   299.886k i/100ms
    String#[0, n] ==   226.802k i/100ms
   String#[RANGE] ==   223.264k i/100ms
   String#[0...n] ==   189.515k i/100ms
Calculating -------------------------------------
  String#start_with?      3.484M (± 6.2%) i/s -     17.393M in   5.013178s
    String#[0, n] ==      2.348M (± 7.3%) i/s -     11.794M in   5.051120s
   String#[RANGE] ==      2.475M (± 8.1%) i/s -     12.503M in   5.088246s
   String#[0...n] ==      1.876M (± 8.4%) i/s -      9.476M in   5.089992s

Comparison:
  String#start_with?:  3484012.0 i/s
   String#[RANGE] ==:  2474883.7 i/s - 1.41x  (± 0.00) slower
    String#[0, n] ==:  2348465.0 i/s - 1.48x  (± 0.00) slower
   String#[0...n] ==:  1876182.7 i/s - 1.86x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    15.708M i/100ms
 String#sub!'string'     2.244M i/100ms
String#gsub!'string'   119.413k i/100ms
  String#[/regexp/]=     2.810M i/100ms
 String#sub!/regexp/     2.107M i/100ms
String#gsub!/regexp/   623.995k i/100ms
Calculating -------------------------------------
  String#['string']=    155.674M (± 4.0%) i/s -    785.396M in   5.053775s
 String#sub!'string'      8.940M (±23.4%) i/s -     40.400M in   5.220634s
String#gsub!'string'      1.462M (± 4.2%) i/s -      7.404M in   5.074441s
  String#[/regexp/]=     30.295M (± 3.8%) i/s -    151.764M in   5.017117s
 String#sub!/regexp/     20.856M (± 5.0%) i/s -    105.333M in   5.063990s
String#gsub!/regexp/      6.898M (± 8.4%) i/s -     34.320M in   5.011323s

Comparison:
  String#['string']=: 155674423.4 i/s
  String#[/regexp/]=: 30295344.2 i/s - 5.14x  (± 0.00) slower
 String#sub!/regexp/: 20856112.0 i/s - 7.46x  (± 0.00) slower
 String#sub!'string':  8940201.7 i/s - 17.41x  (± 0.00) slower
String#gsub!/regexp/:  6898394.7 i/s - 22.57x  (± 0.00) slower
String#gsub!'string':  1461676.7 i/s - 106.50x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     2.187M i/100ms
        String#chomp     3.971M i/100ms
String#delete_suffix     4.325M i/100ms
Calculating -------------------------------------
          String#sub     22.789M (± 5.6%) i/s -    115.892M in   5.102823s
        String#chomp     40.783M (± 6.2%) i/s -    206.515M in   5.084503s
String#delete_suffix     41.602M (± 3.7%) i/s -    211.933M in   5.101878s

Comparison:
String#delete_suffix: 41601794.1 i/s
        String#chomp: 40783430.2 i/s - same-ish: difference falls within error
          String#sub: 22789308.7 i/s - 1.83x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix     2.155M i/100ms
          String#sub     4.372M i/100ms
Calculating -------------------------------------
String#delete_prefix     22.942M (± 6.5%) i/s -    114.237M in   5.001700s
          String#sub     43.839M (± 3.2%) i/s -    222.997M in   5.091876s

Comparison:
          String#sub: 43839296.5 i/s
String#delete_prefix: 22942318.0 i/s - 1.91x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.073M i/100ms
    String#unpack[0]     1.543M i/100ms
Calculating -------------------------------------
      String#unpack1     15.588M (± 6.9%) i/s -     78.342M in   5.052626s
    String#unpack[0]     15.426M (± 5.8%) i/s -     77.152M in   5.019386s

Comparison:
      String#unpack1: 15587960.0 i/s
    String#unpack[0]: 15426095.7 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.1.0-dev-f0142dae, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    11.226k i/100ms
          Time.parse   127.000  i/100ms
Calculating -------------------------------------
        Time.iso8601     99.360k (±23.9%) i/s -    460.266k in   5.091640s
          Time.parse      2.457k (±35.2%) i/s -     10.414k in   5.012133s

Comparison:
        Time.iso8601:    99360.5 i/s
          Time.parse:     2457.1 i/s - 40.44x  (± 0.00) slower

