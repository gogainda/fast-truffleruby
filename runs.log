$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       186.276M i/100ms
Function with splat arguments
                       843.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.909B (± 3.2%) i/s -      9.686B in   5.079226s
Function with splat arguments
                          8.598k (± 8.4%) i/s -     42.993k in   5.037656s

Comparison:
Function with single Array argument: 1909051228.2 i/s
Function with splat arguments:     8598.5 i/s - 222022.42x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   192.027M i/100ms
Sequential Assignment
                       191.681M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.896B (± 3.7%) i/s -      9.601B in   5.072220s
Sequential Assignment
                          1.903B (± 3.1%) i/s -      9.584B in   5.041584s

Comparison:
Sequential Assignment: 1902952220.1 i/s
 Parallel Assignment: 1895595693.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   187.374M i/100ms
       attr_accessor   188.630M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.889B (± 3.6%) i/s -      9.556B in   5.065362s
       attr_accessor      1.905B (± 3.3%) i/s -      9.620B in   5.055635s

Comparison:
       attr_accessor: 1905050439.6 i/s
   getter_and_setter: 1889047861.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     7.742k i/100ms
         respond_to?   187.203M i/100ms
Calculating -------------------------------------
      begin...rescue     57.381k (± 4.7%) i/s -    286.454k in   5.003212s
         respond_to?      1.903B (± 3.2%) i/s -      9.547B in   5.021536s

Comparison:
         respond_to?: 1903340797.6 i/s
      begin...rescue:    57381.2 i/s - 33170.13x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   186.575M i/100ms
             &method    15.866M i/100ms
Calculating -------------------------------------
              normal      1.892B (± 3.4%) i/s -      9.515B in   5.035413s
             &method    173.324M (± 8.2%) i/s -    872.637M in   5.074665s

Comparison:
              normal: 1891949863.5 i/s
             &method: 173324044.2 i/s - 10.92x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        83.000  i/100ms
       define_method   140.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.422k (±54.1%) i/s -      3.818k in   5.126316s
       define_method      4.656k (±55.3%) i/s -      7.840k in   5.192266s

Comparison:
       define_method:     4655.8 i/s
module_eval with string:     1422.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    68.917k i/100ms
       Kernel#format    57.435k i/100ms
            String#%    57.800k i/100ms
Calculating -------------------------------------
         Float#round    700.336k (± 4.4%) i/s -      3.515M in   5.028983s
       Kernel#format    558.129k (± 6.0%) i/s -      2.814M in   5.062792s
            String#%    597.872k (± 5.5%) i/s -      3.006M in   5.042976s

Comparison:
         Float#round:   700335.7 i/s
            String#%:   597872.0 i/s - 1.17x  (± 0.00) slower
       Kernel#format:   558128.8 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   198.499M i/100ms
          OpenStruct   197.978M i/100ms
Calculating -------------------------------------
                Hash      2.065B (± 5.6%) i/s -     10.322B in   5.015855s
          OpenStruct      2.065B (± 5.2%) i/s -     10.295B in   4.999311s

Comparison:
          OpenStruct: 2065282864.5 i/s
                Hash: 2065015463.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   204.561M i/100ms
          OpenStruct     2.217k i/100ms
Calculating -------------------------------------
                Hash      1.948B (± 5.3%) i/s -      9.819B in   5.053443s
          OpenStruct     21.926k (±13.9%) i/s -    108.633k in   5.067416s

Comparison:
                Hash: 1948407500.3 i/s
          OpenStruct:    21925.6 i/s - 88864.43x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   695.357k i/100ms
  ancestors.include?   129.381k i/100ms
Calculating -------------------------------------
  less than or equal      7.265M (± 4.1%) i/s -     36.854M in   5.081634s
  ancestors.include?      1.203M (± 3.3%) i/s -      6.081M in   5.060474s

Comparison:
  less than or equal:  7264986.2 i/s
  ancestors.include?:  1202985.1 i/s - 6.04x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     20.291  (± 4.9%) i/s -    102.000  in   5.035135s
         Kernel loop      4.243  (± 0.0%) i/s -     22.000  in   5.186843s

Comparison:
          While Loop:       20.3 i/s
         Kernel loop:        4.2 i/s - 4.78x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   185.398M i/100ms
         Array#first   187.901M i/100ms
Calculating -------------------------------------
           Array#[0]      1.867B (± 2.7%) i/s -      9.455B in   5.068099s
         Array#first      1.865B (± 3.1%) i/s -      9.395B in   5.041530s

Comparison:
           Array#[0]: 1867138069.3 i/s
         Array#first: 1865429607.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   187.091M i/100ms
          Array#last   189.566M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.849B (± 3.6%) i/s -      9.355B in   5.065808s
          Array#last      1.861B (± 3.9%) i/s -      9.289B in   4.999428s

Comparison:
          Array#last: 1860797334.6 i/s
          Array#[-1]: 1849050004.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   359.070k i/100ms
Calculating -------------------------------------
                find      0.116  (± 0.0%) i/s -      1.000  in   8.649169s
             bsearch      3.699M (± 4.3%) i/s -     18.672M in   5.056838s

Comparison:
             bsearch:  3699354.3 i/s
                find:        0.1 i/s - 31996339.63x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.081  (± 0.0%) i/s -      1.000  in  12.406402s
        Array#insert      0.732  (± 0.0%) i/s -      4.000  in   5.461675s

Comparison:
        Array#insert:        0.7 i/s
       Array#unshift:        0.1 i/s - 9.09x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   186.488M i/100ms
          Array#size   189.770M i/100ms
         Array#count   185.039M i/100ms
Calculating -------------------------------------
        Array#length      1.859B (± 3.5%) i/s -      9.324B in   5.022224s
          Array#size      1.897B (± 3.1%) i/s -      9.489B in   5.007183s
         Array#count      1.896B (± 3.6%) i/s -      9.622B in   5.082199s

Comparison:
          Array#size: 1896848565.4 i/s
         Array#count: 1895895785.7 i/s - same-ish: difference falls within error
        Array#length: 1859020974.8 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    18.709k i/100ms
        Array#sample     2.329M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    212.503k (± 4.4%) i/s -      1.066M in   5.028823s
        Array#sample     21.353M (± 4.0%) i/s -    107.146M in   5.026495s

Comparison:
        Array#sample: 21352630.1 i/s
 Array#shuffle.first:   212503.1 i/s - 100.48x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   307.000  i/100ms
          Date.parse   207.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     13.601k (±36.9%) i/s -     52.497k in   5.011262s
          Date.parse      5.812k (±46.8%) i/s -     22.770k in   5.002268s

Comparison:
        Date.iso8601:    13600.7 i/s
          Date.parse:     5812.2 i/s - 2.34x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   144.523k i/100ms
           Array#map   897.639k i/100ms
Calculating -------------------------------------
   Array#each + push      1.581M (± 6.9%) i/s -      7.949M in   5.053654s
           Array#map      9.101M (± 9.0%) i/s -     45.780M in   5.072793s

Comparison:
           Array#map:  9100940.7 i/s
   Array#each + push:  1580936.1 i/s - 5.76x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     8.180M i/100ms
               #each    43.400M i/100ms
Calculating -------------------------------------
            For loop     84.952M (± 3.6%) i/s -    425.370M in   5.013762s
               #each    426.805M (± 2.9%) i/s -      2.170B in   5.088735s

Comparison:
               #each: 426805169.9 i/s
            For loop: 84952352.0 i/s - 5.02x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   807.595k i/100ms
     each_with_index     1.123M i/100ms
Calculating -------------------------------------
          While Loop      8.214M (± 3.8%) i/s -     41.187M in   5.021521s
     each_with_index     11.772M (± 4.8%) i/s -     59.508M in   5.068006s

Comparison:
     each_with_index: 11771587.1 i/s
          While Loop:  8214206.9 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   150.748k i/100ms
      inject to_proc   146.754k i/100ms
        inject block   145.174k i/100ms
Calculating -------------------------------------
       inject symbol      1.492M (± 4.1%) i/s -      7.537M in   5.059527s
      inject to_proc      1.530M (± 2.9%) i/s -      7.778M in   5.087896s
        inject block      1.482M (± 4.5%) i/s -      7.404M in   5.004445s

Comparison:
      inject to_proc:  1530038.6 i/s
       inject symbol:  1492314.8 i/s - same-ish: difference falls within error
        inject block:  1482470.9 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    10.962k i/100ms
   Array#map.flatten    14.754k i/100ms
      Array#flat_map    37.232k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    157.482k (± 7.3%) i/s -    789.264k in   5.040481s
   Array#map.flatten    152.957k (± 5.5%) i/s -    767.208k in   5.031863s
      Array#flat_map    365.103k (± 5.8%) i/s -      1.824M in   5.014909s

Comparison:
      Array#flat_map:   365103.2 i/s
Array#map.flatten(1):   157482.4 i/s - 2.32x  (± 0.00) slower
   Array#map.flatten:   152956.7 i/s - 2.39x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   165.515k i/100ms
  Array#reverse_each     1.742M i/100ms
Calculating -------------------------------------
  Array#reverse.each      2.005M (± 6.2%) i/s -     10.096M in   5.054922s
  Array#reverse_each     17.107M (± 5.1%) i/s -     85.362M in   5.003566s

Comparison:
  Array#reverse_each: 17106812.6 i/s
  Array#reverse.each:  2005415.8 i/s - 8.53x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       576.597k i/100ms
   Enumerable#detect     3.008M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          6.311M (± 8.2%) i/s -    125.698M in  20.080335s
   Enumerable#detect     29.988M (± 4.0%) i/s -    601.564M in  20.093395s

Comparison:
   Enumerable#detect: 29988424.4 i/s
Enumerable#select.first:  6311105.5 i/s - 4.75x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       192.722k i/100ms
Enumerable#select.last
                       333.488k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.032M (± 5.1%) i/s -     10.214M in   5.039567s
Enumerable#select.last
                          3.375M (± 5.6%) i/s -     17.008M in   5.056688s

Comparison:
Enumerable#select.last:  3374932.0 i/s
Enumerable#reverse.detect:  2032421.4 i/s - 1.66x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.095k i/100ms
  Enumerable#sort_by     2.445k i/100ms
     Enumerable#sort     2.953k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         21.680k (±19.7%) i/s -     96.370k in   5.024415s
  Enumerable#sort_by     22.337k (±19.0%) i/s -    100.245k in   5.025806s
     Enumerable#sort     30.100k (± 5.4%) i/s -    150.603k in   5.018369s

Comparison:
     Enumerable#sort:    30100.3 i/s
  Enumerable#sort_by:    22337.3 i/s - 1.35x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    21680.0 i/s - 1.39x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   337.497k i/100ms
Enumerable#sort_by...first
                         6.366k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      3.344M (± 3.5%) i/s -     16.875M in   5.052548s
Enumerable#sort_by...first
                         67.853k (± 4.8%) i/s -    343.764k in   5.078427s

Comparison:
   Enumerable#min_by:  3344172.9 i/s
Enumerable#sort_by...first:    67852.9 i/s - 49.29x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   289.229k i/100ms
            Hash#dup   314.900k i/100ms
Calculating -------------------------------------
              Hash[]      3.311M (±11.5%) i/s -     16.486M in   5.056961s
            Hash#dup      3.267M (± 8.2%) i/s -     16.375M in   5.048535s

Comparison:
              Hash[]:  3310541.9 i/s
            Hash#dup:  3267404.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   192.169M i/100ms
  Hash#fetch, symbol   191.474M i/100ms
     Hash#[], string     4.686M i/100ms
  Hash#fetch, string     4.509M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.890B (± 3.0%) i/s -      9.608B in   5.088303s
  Hash#fetch, symbol      1.859B (± 3.4%) i/s -      9.382B in   5.053918s
     Hash#[], string     47.943M (± 2.7%) i/s -    243.694M in   5.086685s
  Hash#fetch, string     47.050M (± 3.8%) i/s -    238.999M in   5.087686s

Comparison:
     Hash#[], symbol: 1890129691.3 i/s
  Hash#fetch, symbol: 1858732338.9 i/s - same-ish: difference falls within error
     Hash#[], string: 47943192.9 i/s - 39.42x  (± 0.00) slower
  Hash#fetch, string: 47049607.9 i/s - 40.17x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    71.911M i/100ms
             Hash#[]    71.426M i/100ms
          Hash#[] ||    73.257M i/100ms
          Hash#[] &&    73.139M i/100ms
          Hash#fetch    72.008M i/100ms
 Hash#fetch fallback    72.792M i/100ms
Calculating -------------------------------------
            Hash#dig    723.972M (± 2.9%) i/s -      3.667B in   5.070034s
             Hash#[]    728.975M (± 2.6%) i/s -      3.643B in   5.000424s
          Hash#[] ||    716.342M (± 3.3%) i/s -      3.590B in   5.016538s
          Hash#[] &&    731.503M (± 2.9%) i/s -      3.657B in   5.003601s
          Hash#fetch    724.529M (± 3.8%) i/s -      3.672B in   5.076255s
 Hash#fetch fallback    731.569M (± 3.0%) i/s -      3.712B in   5.079164s

Comparison:
 Hash#fetch fallback: 731569088.3 i/s
          Hash#[] &&: 731502787.1 i/s - same-ish: difference falls within error
             Hash#[]: 728975006.5 i/s - same-ish: difference falls within error
          Hash#fetch: 724529310.5 i/s - same-ish: difference falls within error
            Hash#dig: 723971701.2 i/s - same-ish: difference falls within error
          Hash#[] ||: 716341669.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   181.208M i/100ms
  Hash#fetch + block   186.657M i/100ms
    Hash#fetch + arg   193.630M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.893B (± 3.3%) i/s -      9.604B in   5.080054s
  Hash#fetch + block      1.886B (± 3.9%) i/s -      9.519B in   5.055953s
    Hash#fetch + arg      1.897B (± 3.1%) i/s -      9.488B in   5.005793s

Comparison:
    Hash#fetch + arg: 1897320272.6 i/s
  Hash#fetch + const: 1892694698.9 i/s - same-ish: difference falls within error
  Hash#fetch + block: 1885847195.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    17.421k i/100ms
         sort + to_h    11.931k i/100ms
Calculating -------------------------------------
      sort_by + to_h    238.675k (±10.5%) i/s -      1.185M in   5.027182s
         sort + to_h    135.240k (± 6.5%) i/s -    680.067k in   5.051856s

Comparison:
      sort_by + to_h:   238674.6 i/s
         sort + to_h:   135239.6 i/s - 1.76x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   107.761k i/100ms
       Hash#each_key   129.708k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.161M (± 6.2%) i/s -      5.819M in   5.034548s
       Hash#each_key      1.297M (± 5.9%) i/s -      6.485M in   5.018164s

Comparison:
       Hash#each_key:  1297087.4 i/s
      Hash#keys.each:  1160653.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   139.000  i/100ms
           Hash#key?     2.141M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.792k (±16.2%) i/s -      8.757k in   5.050072s
           Hash#key?     22.705M (± 4.1%) i/s -    113.484M in   5.007531s

Comparison:
           Hash#key?: 22705011.4 i/s
  Hash#keys.include?:     1792.4 i/s - 12667.61x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    25.540k i/100ms
            Hash#[]=    31.743k i/100ms
Calculating -------------------------------------
         Hash#merge!    352.507k (± 7.6%) i/s -      1.762M in   5.031453s
            Hash#[]=    351.632k (± 6.3%) i/s -      1.778M in   5.076672s

Comparison:
         Hash#merge!:   352507.0 i/s
            Hash#[]=:   351632.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        12.847k i/100ms
      Hash#merge({})    14.310k i/100ms
 Hash#dup#merge!({})    23.406k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        239.059k (± 7.2%) i/s -      1.195M in   5.028331s
      Hash#merge({})    146.121k (± 4.5%) i/s -    729.810k in   5.005264s
 Hash#dup#merge!({})    222.558k (± 5.3%) i/s -      1.123M in   5.063347s

Comparison:
{}#merge!(Hash) do end:   239059.1 i/s
 Hash#dup#merge!({}):   222557.6 i/s - same-ish: difference falls within error
      Hash#merge({}):   146121.1 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   191.812M i/100ms
          Hash#merge   187.383M i/100ms
Calculating -------------------------------------
        Hash#**other      1.881B (± 3.0%) i/s -      9.399B in   5.001510s
          Hash#merge      1.868B (± 3.8%) i/s -      9.369B in   5.023767s

Comparison:
        Hash#**other: 1880915802.1 i/s
          Hash#merge: 1867834846.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   545.000  i/100ms
         Hash#merge!    31.165k i/100ms
Calculating -------------------------------------
          Hash#merge      6.044k (± 9.6%) i/s -     29.975k in   5.009276s
         Hash#merge!    316.899k (± 6.8%) i/s -      1.589M in   5.042238s

Comparison:
         Hash#merge!:   316899.1 i/s
          Hash#merge:     6043.8 i/s - 52.43x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      742.521k i/100ms
Array#each             781.319k i/100ms
Array#each_w/_object   776.762k i/100ms
Hash#select-include      1.132M i/100ms
Calculating -------------------------------------
Hash#native-slice         9.684M (± 5.1%) i/s -     48.264M in   4.998306s
Array#each                7.825M (± 4.4%) i/s -     39.066M in   5.002932s
Array#each_w/_object      7.912M (± 4.9%) i/s -     39.615M in   5.020556s
Hash#select-include      11.961M (± 4.4%) i/s -     60.009M in   5.027522s

Comparison:
Hash#select-include : 11960796.6 i/s
Hash#native-slice   :  9684223.0 i/s - 1.24x  (± 0.00) slower
Array#each_w/_object:  7911619.0 i/s - 1.51x  (± 0.00) slower
Array#each          :  7824769.8 i/s - 1.53x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   157.000  i/100ms
         Hash#value?   796.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      2.023k (±15.3%) i/s -      9.891k in   5.063378s
         Hash#value?      8.175k (± 3.7%) i/s -     41.392k in   5.069977s

Comparison:
         Hash#value?:     8175.3 i/s
Hash#values.include?:     2022.5 i/s - 4.04x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   187.813M i/100ms
                send   184.321M i/100ms
      method_missing   189.681M i/100ms
Calculating -------------------------------------
                call      1.897B (± 3.8%) i/s -      9.578B in   5.057775s
                send      1.883B (± 4.5%) i/s -      9.400B in   5.003267s
      method_missing      1.885B (± 4.4%) i/s -      9.484B in   5.042400s

Comparison:
                call: 1896673055.4 i/s
      method_missing: 1884797024.0 i/s - same-ish: difference falls within error
                send: 1882939922.1 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    33.028k i/100ms
      Symbol#to_proc    40.193k i/100ms
Calculating -------------------------------------
               Block    423.801k (± 4.7%) i/s -      2.114M in   4.999477s
      Symbol#to_proc    421.231k (± 5.2%) i/s -      2.130M in   5.072218s

Comparison:
               Block:   423801.4 i/s
      Symbol#to_proc:   421230.9 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   186.171M i/100ms
       block + yield   184.732M i/100ms
        unused block   190.105M i/100ms
               yield   188.950M i/100ms
Calculating -------------------------------------
          block.call      1.887B (± 3.1%) i/s -      9.495B in   5.035904s
       block + yield      1.886B (± 4.0%) i/s -      9.421B in   5.003532s
        unused block      1.922B (± 4.4%) i/s -      9.695B in   5.052973s
               yield      1.999B (± 6.4%) i/s -     10.014B in   5.030364s

Comparison:
               yield: 1999456676.0 i/s
        unused block: 1922495350.9 i/s - same-ish: difference falls within error
          block.call: 1887217775.7 i/s - same-ish: difference falls within error
       block + yield: 1886155279.8 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    30.761k i/100ms
      range#include?   347.000  i/100ms
       range#member?   763.000  i/100ms
       plain compare    56.593k i/100ms
Calculating -------------------------------------
        range#cover?    300.193k (±45.2%) i/s -      1.261M in   5.025246s
      range#include?     15.087k (±45.1%) i/s -     37.823k in   7.117294s
       range#member?     10.588k (±55.2%) i/s -     19.075k in   5.027608s
       plain compare    432.257k (±18.4%) i/s -      2.094M in   5.009103s

Comparison:
       plain compare:   432257.4 i/s
        range#cover?:   300193.4 i/s - same-ish: difference falls within error
      range#include?:    15087.1 i/s - 28.65x  (± 0.00) slower
       range#member?:    10587.6 i/s - 40.83x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     5.058M i/100ms
           String#=~     6.586M i/100ms
          Regexp#===     6.933M i/100ms
        String#match     5.482M i/100ms
Calculating -------------------------------------
       String#match?     53.062M (± 6.5%) i/s -    268.069M in   5.074838s
           String#=~     64.872M (± 2.4%) i/s -    329.296M in   5.079125s
          Regexp#===     65.094M (± 2.9%) i/s -    325.856M in   5.010484s
        String#match     54.338M (± 4.5%) i/s -    274.078M in   5.054922s

Comparison:
          Regexp#===: 65093610.4 i/s
           String#=~: 64871510.8 i/s - same-ish: difference falls within error
        String#match: 54338098.1 i/s - 1.20x  (± 0.00) slower
       String#match?: 53061942.3 i/s - 1.23x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.396M i/100ms
      String#casecmp     2.742M i/100ms
Calculating -------------------------------------
String#downcase + ==     15.540M (± 6.4%) i/s -     78.172M in   5.052228s
      String#casecmp     29.532M (± 2.7%) i/s -    148.075M in   5.017773s

Comparison:
      String#casecmp: 29531581.6 i/s
String#downcase + ==: 15540134.1 i/s - 1.90x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+   188.633M i/100ms
       String#concat   189.328M i/100ms
       String#append   191.592M i/100ms
         "foo" "bar"   186.131M i/100ms
  "#{'foo'}#{'bar'}"   185.617M i/100ms
Calculating -------------------------------------
            String#+      1.907B (± 3.2%) i/s -      9.620B in   5.051502s
       String#concat      1.880B (± 3.2%) i/s -      9.466B in   5.039889s
       String#append      1.883B (± 2.7%) i/s -      9.580B in   5.091647s
         "foo" "bar"      1.877B (± 3.6%) i/s -      9.493B in   5.065439s
  "#{'foo'}#{'bar'}"      1.871B (± 3.5%) i/s -      9.466B in   5.065756s

Comparison:
            String#+: 1906512278.4 i/s
       String#append: 1882825251.1 i/s - same-ish: difference falls within error
       String#concat: 1880333346.8 i/s - same-ish: difference falls within error
         "foo" "bar": 1876823874.1 i/s - same-ish: difference falls within error
  "#{'foo'}#{'bar'}": 1871081478.6 i/s - same-ish: difference falls within error

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   185.698M i/100ms
          String#dup   183.481M i/100ms
Calculating -------------------------------------
           String#+@      1.888B (± 2.8%) i/s -      9.471B in   5.021355s
          String#dup      1.894B (± 2.8%) i/s -      9.541B in   5.041020s

Comparison:
          String#dup: 1894190890.3 i/s
           String#+@: 1887538102.4 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.269M i/100ms
       String#match?     1.540M i/100ms
    String#end_with?     3.145M i/100ms
Calculating -------------------------------------
           String#=~     13.345M (± 4.2%) i/s -     67.250M in   5.048920s
       String#match?     15.341M (± 4.2%) i/s -     76.979M in   5.027771s
    String#end_with?     36.615M (± 9.5%) i/s -    182.410M in   5.029567s

Comparison:
    String#end_with?: 36615349.5 i/s
       String#match?: 15340717.6 i/s - 2.39x  (± 0.00) slower
           String#=~: 13345307.4 i/s - 2.74x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    48.966k i/100ms
          String#sub   485.673k i/100ms
String#dup["string"]=
                        15.997M i/100ms
Calculating -------------------------------------
         String#gsub    896.476k (± 8.2%) i/s -      4.456M in   5.012553s
          String#sub      5.927M (±10.9%) i/s -     29.626M in   5.067118s
String#dup["string"]=
                        161.381M (± 4.2%) i/s -    815.845M in   5.064916s

Comparison:
String#dup["string"]=: 161381464.7 i/s
          String#sub:  5926638.6 i/s - 27.23x  (± 0.00) slower
         String#gsub:   896475.9 i/s - 180.02x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   117.891k i/100ms
           String#tr   120.529k i/100ms
Calculating -------------------------------------
         String#gsub      2.278M (±10.1%) i/s -     11.318M in   5.028252s
           String#tr      1.302M (± 6.3%) i/s -      6.509M in   5.021240s

Comparison:
         String#gsub:  2277546.9 i/s
           String#tr:  1301738.6 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   204.477M i/100ms
         With Freeze   209.059M i/100ms
Calculating -------------------------------------
      Without Freeze      2.038B (± 5.8%) i/s -     10.224B in   5.034702s
         With Freeze      1.949B (± 6.9%) i/s -      9.826B in   5.065465s

Comparison:
      Without Freeze: 2037939812.8 i/s
         With Freeze: 1949455004.7 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     7.701k i/100ms
      String#squeeze    48.382k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    103.689k (±11.6%) i/s -    515.967k in   5.047975s
      String#squeeze    511.883k (± 5.4%) i/s -      2.564M in   5.025662s

Comparison:
      String#squeeze:   511883.0 i/s
 String#gsub/regex+/:   103689.5 i/s - 4.94x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     3.051M i/100ms
       String#match?     3.456M i/100ms
  String#start_with?     1.859M i/100ms
Calculating -------------------------------------
           String#=~     30.297M (± 3.9%) i/s -    152.544M in   5.043046s
       String#match?     34.680M (± 4.9%) i/s -    176.241M in   5.094972s
  String#start_with?     19.006M (± 5.4%) i/s -     94.817M in   5.004220s

Comparison:
       String#match?: 34679926.0 i/s
           String#=~: 30297231.3 i/s - 1.14x  (± 0.00) slower
  String#start_with?: 19006469.1 i/s - 1.82x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   165.439k i/100ms
    String#[0, n] ==   196.120k i/100ms
   String#[RANGE] ==   197.795k i/100ms
   String#[0...n] ==   156.111k i/100ms
Calculating -------------------------------------
  String#start_with?      3.050M (± 6.2%) i/s -     15.220M in   5.014182s
    String#[0, n] ==      1.963M (± 5.4%) i/s -      9.806M in   5.011419s
   String#[RANGE] ==      2.048M (± 6.6%) i/s -     10.285M in   5.045428s
   String#[0...n] ==      1.560M (± 7.4%) i/s -      7.806M in   5.033335s

Comparison:
  String#start_with?:  3050196.6 i/s
   String#[RANGE] ==:  2048035.9 i/s - 1.49x  (± 0.00) slower
    String#[0, n] ==:  1962801.1 i/s - 1.55x  (± 0.00) slower
   String#[0...n] ==:  1560159.6 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    17.129M i/100ms
 String#sub!'string'   628.317k i/100ms
String#gsub!'string'    88.234k i/100ms
  String#[/regexp/]=     3.114M i/100ms
 String#sub!/regexp/     2.369M i/100ms
String#gsub!/regexp/   554.533k i/100ms
Calculating -------------------------------------
  String#['string']=    168.690M (± 4.5%) i/s -    856.429M in   5.088336s
 String#sub!'string'      6.545M (±19.7%) i/s -     29.531M in   5.059923s
String#gsub!'string'    947.683k (± 5.1%) i/s -      4.765M in   5.043582s
  String#[/regexp/]=     32.636M (± 6.4%) i/s -    165.029M in   5.080208s
 String#sub!/regexp/     24.290M (± 3.9%) i/s -    123.167M in   5.078733s
String#gsub!/regexp/      5.894M (± 5.0%) i/s -     29.390M in   5.000287s

Comparison:
  String#['string']=: 168689555.9 i/s
  String#[/regexp/]=: 32635553.3 i/s - 5.17x  (± 0.00) slower
 String#sub!/regexp/: 24289571.8 i/s - 6.94x  (± 0.00) slower
 String#sub!'string':  6544860.2 i/s - 25.77x  (± 0.00) slower
String#gsub!/regexp/:  5894041.9 i/s - 28.62x  (± 0.00) slower
String#gsub!'string':   947683.1 i/s - 178.00x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.209M i/100ms
        String#chomp     4.156M i/100ms
String#delete_suffix     5.265M i/100ms
Calculating -------------------------------------
          String#sub     24.894M (± 7.5%) i/s -    124.569M in   5.039454s
        String#chomp     42.890M (± 6.4%) i/s -    216.137M in   5.061064s
String#delete_suffix     51.623M (± 3.5%) i/s -    257.980M in   5.003850s

Comparison:
String#delete_suffix: 51622783.0 i/s
        String#chomp: 42890377.0 i/s - 1.20x  (± 0.00) slower
          String#sub: 24894400.5 i/s - 2.07x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix     2.012M i/100ms
          String#sub     7.395M i/100ms
Calculating -------------------------------------
String#delete_prefix     23.279M (± 4.4%) i/s -    116.669M in   5.021636s
          String#sub     75.351M (± 2.5%) i/s -    377.164M in   5.008709s

Comparison:
          String#sub: 75350971.5 i/s
String#delete_prefix: 23278791.2 i/s - 3.24x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.328M i/100ms
    String#unpack[0]     1.403M i/100ms
Calculating -------------------------------------
      String#unpack1     13.566M (± 4.8%) i/s -     67.745M in   5.005722s
    String#unpack[0]     14.335M (± 5.5%) i/s -     71.569M in   5.008336s

Comparison:
    String#unpack[0]: 14334887.0 i/s
      String#unpack1: 13566357.6 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.2.0-dev-dcd78ca3, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    10.897k i/100ms
          Time.parse   160.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    120.373k (±19.4%) i/s -    566.644k in   5.030680s
          Time.parse      4.407k (±26.2%) i/s -     18.720k in   5.013428s

Comparison:
        Time.iso8601:   120373.1 i/s
          Time.parse:     4407.3 i/s - 27.31x  (± 0.00) slower

