$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       238.598M i/100ms
Function with splat arguments
                       594.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          2.386B (± 0.3%) i/s -     11.930B in   5.000481s
Function with splat arguments
                          6.240k (± 4.4%) i/s -     31.482k in   5.055407s

Comparison:
Function with single Array argument: 2385777710.3 i/s
Function with splat arguments:     6240.0 i/s - 382335.40x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   238.265M i/100ms
Sequential Assignment
                       238.700M i/100ms
Calculating -------------------------------------
 Parallel Assignment      2.385B (± 0.4%) i/s -     12.152B in   5.095074s
Sequential Assignment
                          2.387B (± 0.3%) i/s -     12.174B in   5.099164s

Comparison:
Sequential Assignment: 2387407191.2 i/s
 Parallel Assignment: 2384988343.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   238.727M i/100ms
       attr_accessor   238.637M i/100ms
Calculating -------------------------------------
   getter_and_setter      2.383B (± 0.6%) i/s -     11.936B in   5.008927s
       attr_accessor      2.388B (± 0.2%) i/s -     12.171B in   5.096667s

Comparison:
       attr_accessor: 2387945598.4 i/s
   getter_and_setter: 2383087037.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     6.860k i/100ms
         respond_to?   238.971M i/100ms
Calculating -------------------------------------
      begin...rescue     47.698k (± 2.7%) i/s -    240.100k in   5.037637s
         respond_to?      2.389B (± 0.2%) i/s -     11.949B in   5.002130s

Comparison:
         respond_to?: 2388703012.6 i/s
      begin...rescue:    47697.9 i/s - 50079.79x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   238.883M i/100ms
             &method   238.954M i/100ms
Calculating -------------------------------------
              normal      2.387B (± 0.2%) i/s -     11.944B in   5.002887s
             &method      2.387B (± 0.3%) i/s -     11.948B in   5.004816s

Comparison:
              normal: 2387457615.2 i/s
             &method: 2387258386.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        93.000  i/100ms
       define_method   131.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.552k (±54.0%) i/s -      4.464k in   5.065647s
       define_method      3.386k (±54.6%) i/s -      6.288k in   6.483045s

Comparison:
       define_method:     3386.2 i/s
module_eval with string:     1552.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    69.087k i/100ms
       Kernel#format    48.839k i/100ms
            String#%    50.780k i/100ms
Calculating -------------------------------------
         Float#round    746.810k (± 2.8%) i/s -      3.731M in   4.999494s
       Kernel#format    495.287k (± 2.3%) i/s -      2.491M in   5.031785s
            String#%    497.885k (± 2.2%) i/s -      2.488M in   5.000101s

Comparison:
         Float#round:   746810.1 i/s
            String#%:   497884.6 i/s - 1.50x  (± 0.00) slower
       Kernel#format:   495287.2 i/s - 1.51x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   270.269M i/100ms
          OpenStruct   270.833M i/100ms
Calculating -------------------------------------
                Hash      2.702B (± 0.7%) i/s -     13.513B in   5.002113s
          OpenStruct      2.706B (± 0.3%) i/s -     13.542B in   5.003847s

Comparison:
          OpenStruct: 2706263881.8 i/s
                Hash: 2701677377.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   270.093M i/100ms
          OpenStruct     3.062k i/100ms
Calculating -------------------------------------
                Hash      2.138B (±40.2%) i/s -      8.373B in   5.270623s
          OpenStruct     11.340k (±14.2%) i/s -     55.116k in   5.022787s

Comparison:
                Hash: 2137541992.6 i/s
          OpenStruct:    11339.7 i/s - 188500.04x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   681.597k i/100ms
  ancestors.include?   126.844k i/100ms
Calculating -------------------------------------
  less than or equal      8.154M (± 4.6%) i/s -     40.896M in   5.026673s
  ancestors.include?      1.275M (± 4.3%) i/s -      6.469M in   5.082181s

Comparison:
  less than or equal:  8153930.2 i/s
  ancestors.include?:  1275331.9 i/s - 6.39x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     23.855  (± 0.0%) i/s -    120.000  in   5.030540s
         Kernel loop      5.949  (± 0.0%) i/s -     30.000  in   5.042676s

Comparison:
          While Loop:       23.9 i/s
         Kernel loop:        5.9 i/s - 4.01x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   238.797M i/100ms
         Array#first   238.454M i/100ms
Calculating -------------------------------------
           Array#[0]      2.386B (± 0.3%) i/s -     11.940B in   5.005165s
         Array#first      2.388B (± 0.2%) i/s -     12.161B in   5.092641s

Comparison:
         Array#first: 2388002188.1 i/s
           Array#[0]: 2385533148.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   238.563M i/100ms
          Array#last   238.681M i/100ms
Calculating -------------------------------------
          Array#[-1]      2.385B (± 0.3%) i/s -     11.928B in   5.000413s
          Array#last      2.389B (± 0.1%) i/s -     12.173B in   5.095081s

Comparison:
          Array#last: 2389114720.9 i/s
          Array#[-1]: 2385466255.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   491.401k i/100ms
Calculating -------------------------------------
                find     11.683  (±17.1%) i/s -     24.000  in   5.029434s
             bsearch      4.882M (± 3.5%) i/s -     24.570M in   5.039493s

Comparison:
             bsearch:  4881597.3 i/s
                find:       11.7 i/s - 417852.87x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.139  (± 0.0%) i/s -      1.000  in   7.184735s
        Array#insert      1.067  (± 0.0%) i/s -      6.000  in   5.622677s

Comparison:
        Array#insert:        1.1 i/s
       Array#unshift:        0.1 i/s - 7.67x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   269.897M i/100ms
          Array#size   269.998M i/100ms
         Array#count   238.937M i/100ms
Calculating -------------------------------------
        Array#length      2.385B (± 0.3%) i/s -     12.145B in   5.092167s
          Array#size      2.389B (± 0.1%) i/s -     12.150B in   5.086472s
         Array#count      2.388B (± 0.2%) i/s -     11.947B in   5.002782s

Comparison:
          Array#size: 2388678777.0 i/s
         Array#count: 2388053861.2 i/s - same-ish: difference falls within error
        Array#length: 2385132658.7 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    23.225k i/100ms
        Array#sample     2.451M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    243.860k (± 2.0%) i/s -      1.231M in   5.049966s
        Array#sample     24.530M (± 0.1%) i/s -    124.980M in   5.094934s

Comparison:
        Array#sample: 24530303.2 i/s
 Array#shuffle.first:   243860.3 i/s - 100.59x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   428.000  i/100ms
          Date.parse   180.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     15.620k (±32.7%) i/s -     65.056k in   5.008464s
          Date.parse      5.252k (±32.8%) i/s -     20.880k in   5.012699s

Comparison:
        Date.iso8601:    15620.5 i/s
          Date.parse:     5252.1 i/s - 2.97x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   148.264k i/100ms
           Array#map   519.796k i/100ms
Calculating -------------------------------------
   Array#each + push      1.515M (± 2.7%) i/s -      7.710M in   5.092113s
           Array#map      5.355M (± 7.8%) i/s -     27.029M in   5.078636s

Comparison:
           Array#map:  5355143.2 i/s
   Array#each + push:  1515243.2 i/s - 3.53x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     9.411M i/100ms
               #each    64.503M i/100ms
Calculating -------------------------------------
            For loop     95.263M (± 0.9%) i/s -    479.962M in   5.038621s
               #each    644.669M (± 0.4%) i/s -      3.225B in   5.002891s

Comparison:
               #each: 644668549.6 i/s
            For loop: 95263497.9 i/s - 6.77x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   693.474k i/100ms
     each_with_index     1.279M i/100ms
Calculating -------------------------------------
          While Loop      6.991M (± 0.2%) i/s -     35.367M in   5.058738s
     each_with_index     12.812M (± 0.2%) i/s -     65.238M in   5.091826s

Comparison:
     each_with_index: 12812299.4 i/s
          While Loop:  6991340.1 i/s - 1.83x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   146.280k i/100ms
      inject to_proc   147.469k i/100ms
        inject block   147.457k i/100ms
Calculating -------------------------------------
       inject symbol      1.473M (± 0.2%) i/s -      7.460M in   5.063468s
      inject to_proc      1.474M (± 0.1%) i/s -      7.373M in   5.001491s
        inject block      1.474M (± 0.2%) i/s -      7.373M in   5.001575s

Comparison:
      inject to_proc:  1474253.0 i/s
        inject block:  1474109.4 i/s - same-ish: difference falls within error
       inject symbol:  1473362.6 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     9.835k i/100ms
   Array#map.flatten    10.558k i/100ms
      Array#flat_map    30.792k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    109.392k (± 3.4%) i/s -    550.760k in   5.040746s
   Array#map.flatten    106.602k (± 2.7%) i/s -    538.458k in   5.054999s
      Array#flat_map    308.011k (± 2.6%) i/s -      1.570M in   5.102353s

Comparison:
      Array#flat_map:   308011.4 i/s
Array#map.flatten(1):   109392.3 i/s - 2.82x  (± 0.00) slower
   Array#map.flatten:   106602.5 i/s - 2.89x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   180.254k i/100ms
  Array#reverse_each     1.039M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.825M (± 3.3%) i/s -      9.193M in   5.043446s
  Array#reverse_each     10.382M (± 0.2%) i/s -     51.930M in   5.002104s

Comparison:
  Array#reverse_each: 10381696.7 i/s
  Array#reverse.each:  1824806.5 i/s - 5.69x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       573.043k i/100ms
   Enumerable#detect     4.307M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          6.357M (± 5.7%) i/s -    126.643M in  20.005830s
   Enumerable#detect     43.551M (± 0.4%) i/s -    874.326M in  20.076310s

Comparison:
   Enumerable#detect: 43550721.2 i/s
Enumerable#select.first:  6357335.9 i/s - 6.85x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       162.266k i/100ms
Enumerable#select.last
                       352.033k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.851M (± 3.1%) i/s -      9.249M in   5.001350s
Enumerable#select.last
                          3.539M (± 3.3%) i/s -     17.954M in   5.078731s

Comparison:
Enumerable#select.last:  3539159.6 i/s
Enumerable#reverse.detect:  1851200.8 i/s - 1.91x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.283k i/100ms
  Enumerable#sort_by     2.626k i/100ms
     Enumerable#sort     3.615k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         23.226k (±16.5%) i/s -    107.301k in   5.065103s
  Enumerable#sort_by     23.839k (±18.4%) i/s -    107.666k in   5.063571s
     Enumerable#sort     35.907k (± 2.3%) i/s -    180.750k in   5.036875s

Comparison:
     Enumerable#sort:    35906.7 i/s
  Enumerable#sort_by:    23838.9 i/s - 1.51x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    23226.3 i/s - 1.55x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   560.440k i/100ms
Enumerable#sort_by...first
                         5.356k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      5.714M (± 0.5%) i/s -     28.582M in   5.002492s
Enumerable#sort_by...first
                         58.542k (± 2.7%) i/s -    294.580k in   5.035858s

Comparison:
   Enumerable#min_by:  5713759.9 i/s
Enumerable#sort_by...first:    58541.7 i/s - 97.60x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   185.486k i/100ms
            Hash#dup   195.276k i/100ms
Calculating -------------------------------------
              Hash[]      1.984M (± 3.9%) i/s -     10.016M in   5.058057s
            Hash#dup      1.978M (± 4.0%) i/s -      9.959M in   5.042929s

Comparison:
              Hash[]:  1983522.0 i/s
            Hash#dup:  1978189.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   270.332M i/100ms
  Hash#fetch, symbol   270.484M i/100ms
     Hash#[], string     5.318M i/100ms
  Hash#fetch, string     5.500M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      2.514B (± 6.1%) i/s -     12.706B in   5.072472s
  Hash#fetch, symbol      2.387B (± 0.3%) i/s -     12.172B in   5.099975s
     Hash#[], string     46.777M (± 0.5%) i/s -    233.974M in   5.002021s
  Hash#fetch, string     48.563M (± 0.3%) i/s -    247.491M in   5.096304s

Comparison:
     Hash#[], symbol: 2513819097.3 i/s
  Hash#fetch, symbol: 2386660805.3 i/s - same-ish: difference falls within error
  Hash#fetch, string: 48563236.6 i/s - 51.76x  (± 0.00) slower
     Hash#[], string: 46777038.0 i/s - 53.74x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    59.679M i/100ms
             Hash#[]    59.639M i/100ms
          Hash#[] ||    59.740M i/100ms
          Hash#[] &&    59.748M i/100ms
          Hash#fetch    59.747M i/100ms
 Hash#fetch fallback    59.733M i/100ms
Calculating -------------------------------------
            Hash#dig    596.627M (± 0.3%) i/s -      2.984B in   5.001392s
             Hash#[]    597.026M (± 0.2%) i/s -      3.042B in   5.094615s
          Hash#[] ||    597.097M (± 0.2%) i/s -      2.987B in   5.002536s
          Hash#[] &&    596.939M (± 0.2%) i/s -      2.987B in   5.004596s
          Hash#fetch    597.161M (± 0.2%) i/s -      2.987B in   5.002575s
 Hash#fetch fallback    597.099M (± 0.2%) i/s -      2.987B in   5.001974s

Comparison:
          Hash#fetch: 597160702.2 i/s
 Hash#fetch fallback: 597098936.6 i/s - same-ish: difference falls within error
          Hash#[] ||: 597096907.7 i/s - same-ish: difference falls within error
             Hash#[]: 597026166.6 i/s - same-ish: difference falls within error
          Hash#[] &&: 596938866.6 i/s - same-ish: difference falls within error
            Hash#dig: 596626517.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   238.536M i/100ms
  Hash#fetch + block   238.495M i/100ms
    Hash#fetch + arg   238.959M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      2.385B (± 0.4%) i/s -     11.927B in   5.000870s
  Hash#fetch + block      2.388B (± 0.2%) i/s -     12.163B in   5.093394s
    Hash#fetch + arg      2.388B (± 0.2%) i/s -     11.948B in   5.003007s

Comparison:
    Hash#fetch + arg: 2388170637.8 i/s
  Hash#fetch + block: 2388060170.8 i/s - same-ish: difference falls within error
  Hash#fetch + const: 2384980508.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    17.759k i/100ms
         sort + to_h    12.352k i/100ms
Calculating -------------------------------------
      sort_by + to_h    206.217k (± 5.7%) i/s -      1.030M in   5.011524s
         sort + to_h    128.562k (± 3.8%) i/s -    642.304k in   5.003757s

Comparison:
      sort_by + to_h:   206217.4 i/s
         sort + to_h:   128562.4 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   105.811k i/100ms
       Hash#each_key   125.247k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.151M (± 4.1%) i/s -      5.820M in   5.066599s
       Hash#each_key      1.279M (± 4.0%) i/s -      6.388M in   5.004431s

Comparison:
       Hash#each_key:  1278598.6 i/s
      Hash#keys.each:  1150733.4 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   183.000  i/100ms
           Hash#key?     3.324M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      2.560k (± 8.3%) i/s -     12.627k in   5.002409s
           Hash#key?     33.401M (± 0.3%) i/s -    169.522M in   5.075402s

Comparison:
           Hash#key?: 33401165.5 i/s
  Hash#keys.include?:     2560.1 i/s - 13046.93x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    21.597k i/100ms
            Hash#[]=    23.194k i/100ms
Calculating -------------------------------------
         Hash#merge!    230.547k (± 3.4%) i/s -      1.166M in   5.064604s
            Hash#[]=    232.209k (± 3.0%) i/s -      1.183M in   5.099011s

Comparison:
            Hash#[]=:   232208.8 i/s
         Hash#merge!:   230546.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        10.595k i/100ms
      Hash#merge({})     7.555k i/100ms
 Hash#dup#merge!({})    12.499k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        115.785k (± 3.7%) i/s -    582.725k in   5.040394s
      Hash#merge({})     76.952k (± 3.9%) i/s -    385.305k in   5.015344s
 Hash#dup#merge!({})    125.551k (± 3.6%) i/s -    637.449k in   5.084404s

Comparison:
 Hash#dup#merge!({}):   125550.6 i/s
{}#merge!(Hash) do end:   115785.2 i/s - 1.08x  (± 0.00) slower
      Hash#merge({}):    76952.1 i/s - 1.63x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   270.097M i/100ms
          Hash#merge   238.886M i/100ms
Calculating -------------------------------------
        Hash#**other      2.385B (± 0.3%) i/s -     12.154B in   5.095395s
          Hash#merge      2.389B (± 0.2%) i/s -     11.944B in   5.000540s

Comparison:
          Hash#merge: 2388606777.4 i/s
        Hash#**other: 2385390454.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   267.000  i/100ms
         Hash#merge!    22.077k i/100ms
Calculating -------------------------------------
          Hash#merge      3.088k (± 4.0%) i/s -     15.486k in   5.023625s
         Hash#merge!    223.029k (± 3.5%) i/s -      1.126M in   5.054988s

Comparison:
         Hash#merge!:   223028.7 i/s
          Hash#merge:     3087.7 i/s - 72.23x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      969.574k i/100ms
Array#each             878.525k i/100ms
Array#each_w/_object   884.136k i/100ms
Hash#select-include      1.150M i/100ms
Calculating -------------------------------------
Hash#native-slice        10.812M (± 3.5%) i/s -     54.296M in   5.028412s
Array#each                8.879M (± 2.6%) i/s -     44.805M in   5.049651s
Array#each_w/_object      8.923M (± 3.1%) i/s -     45.091M in   5.058604s
Hash#select-include      11.555M (± 2.6%) i/s -     58.659M in   5.080230s

Comparison:
Hash#select-include : 11554862.8 i/s
Hash#native-slice   : 10812095.3 i/s - 1.07x  (± 0.00) slower
Array#each_w/_object:  8922550.3 i/s - 1.30x  (± 0.00) slower
Array#each          :  8879175.2 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   163.000  i/100ms
         Hash#value?     1.522k i/100ms
Calculating -------------------------------------
Hash#values.include?      2.225k (±10.9%) i/s -     10.921k in   5.002837s
         Hash#value?     14.965k (± 0.4%) i/s -     76.100k in   5.085338s

Comparison:
         Hash#value?:    14964.8 i/s
Hash#values.include?:     2224.7 i/s - 6.73x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   238.663M i/100ms
                send   270.589M i/100ms
      method_missing   270.711M i/100ms
Calculating -------------------------------------
                call      2.705B (± 0.3%) i/s -     13.604B in   5.030019s
                send      2.707B (± 0.2%) i/s -     13.800B in   5.097921s
      method_missing      2.706B (± 0.2%) i/s -     13.536B in   5.002876s

Comparison:
                send: 2707002674.0 i/s
      method_missing: 2705565278.2 i/s - same-ish: difference falls within error
                call: 2704550851.4 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block     9.011k i/100ms
      Symbol#to_proc    11.640k i/100ms
Calculating -------------------------------------
               Block    120.230k (± 9.7%) i/s -    594.726k in   5.007002s
      Symbol#to_proc    120.457k (± 7.7%) i/s -    605.280k in   5.059749s

Comparison:
      Symbol#to_proc:   120457.3 i/s
               Block:   120230.5 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call    79.235M i/100ms
       block + yield   270.089M i/100ms
        unused block   270.849M i/100ms
               yield   270.877M i/100ms
Calculating -------------------------------------
          block.call      2.705B (± 0.6%) i/s -     13.549B in   5.009814s
       block + yield      2.706B (± 0.3%) i/s -     13.775B in   5.090446s
        unused block      2.706B (± 0.3%) i/s -     13.542B in   5.004634s
               yield      2.707B (± 0.2%) i/s -     13.544B in   5.004088s

Comparison:
               yield: 2706573984.2 i/s
        unused block: 2705995551.0 i/s - same-ish: difference falls within error
       block + yield: 2705975314.3 i/s - same-ish: difference falls within error
          block.call: 2704614032.2 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    33.754k i/100ms
      range#include?   450.000  i/100ms
       range#member?   554.000  i/100ms
       plain compare    33.871k i/100ms
Calculating -------------------------------------
        range#cover?    254.796k (±35.3%) i/s -      1.148M in   5.014769s
      range#include?      7.881k (±35.1%) i/s -     29.700k in   5.014643s
       range#member?      8.860k (±43.5%) i/s -     22.714k in   5.127079s
       plain compare    433.178k (±36.6%) i/s -      1.287M in   5.010356s

Comparison:
       plain compare:   433178.4 i/s
        range#cover?:   254795.9 i/s - same-ish: difference falls within error
       range#member?:     8860.5 i/s - 48.89x  (± 0.00) slower
      range#include?:     7880.6 i/s - 54.97x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     3.758M i/100ms
           String#=~     5.871M i/100ms
          Regexp#===     5.879M i/100ms
        String#match     5.404M i/100ms
Calculating -------------------------------------
       String#match?     37.691M (± 3.7%) i/s -    191.660M in   5.092206s
           String#=~     58.617M (± 1.5%) i/s -    293.551M in   5.009092s
          Regexp#===     58.708M (± 0.9%) i/s -    293.945M in   5.007313s
        String#match     54.028M (± 1.2%) i/s -    270.204M in   5.001944s

Comparison:
          Regexp#===: 58707786.7 i/s
           String#=~: 58617067.6 i/s - same-ish: difference falls within error
        String#match: 54028354.5 i/s - 1.09x  (± 0.00) slower
       String#match?: 37690583.2 i/s - 1.56x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.224M i/100ms
      String#casecmp     3.754M i/100ms
Calculating -------------------------------------
String#downcase + ==     13.704M (± 4.1%) i/s -     68.543M in   5.010519s
      String#casecmp     37.541M (± 0.1%) i/s -    187.719M in   5.000400s

Comparison:
      String#casecmp: 37540857.2 i/s
String#downcase + ==: 13704099.3 i/s - 2.74x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+   238.619M i/100ms
       String#concat   238.896M i/100ms
       String#append   238.906M i/100ms
         "foo" "bar"   238.975M i/100ms
  "#{'foo'}#{'bar'}"   238.936M i/100ms
Calculating -------------------------------------
            String#+      2.387B (± 0.3%) i/s -     12.170B in   5.098663s
       String#concat      2.388B (± 0.2%) i/s -     11.945B in   5.001215s
       String#append      2.387B (± 0.3%) i/s -     11.945B in   5.003910s
         "foo" "bar"      2.387B (± 0.2%) i/s -     11.949B in   5.004925s
  "#{'foo'}#{'bar'}"      2.388B (± 0.2%) i/s -     11.947B in   5.002072s

Comparison:
       String#concat: 2388385190.6 i/s
  "#{'foo'}#{'bar'}": 2388379069.3 i/s - same-ish: difference falls within error
         "foo" "bar": 2387402927.5 i/s - same-ish: difference falls within error
       String#append: 2387208907.8 i/s - same-ish: difference falls within error
            String#+: 2386828089.3 i/s - same-ish: difference falls within error

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   238.467M i/100ms
          String#dup   238.945M i/100ms
Calculating -------------------------------------
           String#+@      2.386B (± 0.3%) i/s -     12.162B in   5.097389s
          String#dup      2.388B (± 0.3%) i/s -     11.947B in   5.004004s

Comparison:
          String#dup: 2387553791.4 i/s
           String#+@: 2385910449.3 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.103M i/100ms
       String#match?     1.223M i/100ms
    String#end_with?    14.936M i/100ms
Calculating -------------------------------------
           String#=~     12.460M (± 2.9%) i/s -     62.866M in   5.049753s
       String#match?     12.284M (± 2.6%) i/s -     62.359M in   5.080020s
    String#end_with?    149.237M (± 0.3%) i/s -    746.780M in   5.004026s

Comparison:
    String#end_with?: 149236772.1 i/s
           String#=~: 12460066.9 i/s - 11.98x  (± 0.00) slower
       String#match?: 12283809.6 i/s - 12.15x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    68.721k i/100ms
          String#sub   345.485k i/100ms
String#dup["string"]=
                        18.671M i/100ms
Calculating -------------------------------------
         String#gsub    861.692k (± 3.7%) i/s -      4.329M in   5.032542s
          String#sub      4.087M (± 6.0%) i/s -     20.384M in   5.007082s
String#dup["string"]=
                        186.586M (± 0.2%) i/s -    933.560M in   5.003383s

Comparison:
String#dup["string"]=: 186586411.4 i/s
          String#sub:  4087012.6 i/s - 45.65x  (± 0.00) slower
         String#gsub:   861692.2 i/s - 216.53x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   123.247k i/100ms
           String#tr   117.987k i/100ms
Calculating -------------------------------------
         String#gsub      2.030M (± 5.6%) i/s -     10.230M in   5.056349s
           String#tr      1.159M (± 4.7%) i/s -      5.899M in   5.101280s

Comparison:
         String#gsub:  2030201.7 i/s
           String#tr:  1159012.8 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   270.234M i/100ms
         With Freeze   270.475M i/100ms
Calculating -------------------------------------
      Without Freeze      2.704B (± 0.3%) i/s -     13.782B in   5.097151s
         With Freeze      2.707B (± 0.2%) i/s -     13.794B in   5.095742s

Comparison:
         With Freeze: 2707026209.5 i/s
      Without Freeze: 2703883490.0 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     4.821k i/100ms
      String#squeeze    59.721k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     60.962k (± 3.9%) i/s -    308.544k in   5.069619s
      String#squeeze    595.461k (± 2.4%) i/s -      2.986M in   5.017907s

Comparison:
      String#squeeze:   595460.5 i/s
 String#gsub/regex+/:    60961.6 i/s - 9.77x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     2.834M i/100ms
       String#match?     3.069M i/100ms
  String#start_with?     1.836M i/100ms
Calculating -------------------------------------
           String#=~     29.013M (± 2.8%) i/s -    147.376M in   5.083955s
       String#match?     31.421M (± 3.3%) i/s -    159.610M in   5.085596s
  String#start_with?     18.603M (± 3.1%) i/s -     93.635M in   5.038664s

Comparison:
       String#match?: 31420943.8 i/s
           String#=~: 29013247.6 i/s - 1.08x  (± 0.00) slower
  String#start_with?: 18602862.9 i/s - 1.69x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   339.682k i/100ms
    String#[0, n] ==   176.236k i/100ms
   String#[RANGE] ==   179.584k i/100ms
   String#[0...n] ==   140.006k i/100ms
Calculating -------------------------------------
  String#start_with?      3.567M (± 3.5%) i/s -     18.003M in   5.053994s
    String#[0, n] ==      1.807M (± 3.3%) i/s -      9.164M in   5.077292s
   String#[RANGE] ==      1.827M (± 3.3%) i/s -      9.159M in   5.018131s
   String#[0...n] ==      1.406M (± 2.9%) i/s -      7.140M in   5.083388s

Comparison:
  String#start_with?:  3566785.4 i/s
   String#[RANGE] ==:  1827292.0 i/s - 1.95x  (± 0.00) slower
    String#[0, n] ==:  1806997.0 i/s - 1.97x  (± 0.00) slower
   String#[0...n] ==:  1405872.4 i/s - 2.54x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    22.168M i/100ms
 String#sub!'string'   431.024k i/100ms
String#gsub!'string'    89.374k i/100ms
  String#[/regexp/]=     4.455M i/100ms
 String#sub!/regexp/     2.022M i/100ms
String#gsub!/regexp/   483.318k i/100ms
Calculating -------------------------------------
  String#['string']=    224.959M (± 0.4%) i/s -      1.131B in   5.025753s
 String#sub!'string'      5.085M (±15.9%) i/s -     23.275M in   5.000186s
String#gsub!'string'      1.109M (± 2.9%) i/s -      5.541M in   4.999217s
  String#[/regexp/]=     44.468M (± 0.8%) i/s -    222.754M in   5.009680s
 String#sub!/regexp/     20.355M (± 3.0%) i/s -    103.141M in   5.072082s
String#gsub!/regexp/      4.834M (± 4.9%) i/s -     24.166M in   5.011814s

Comparison:
  String#['string']=: 224958648.5 i/s
  String#[/regexp/]=: 44468024.0 i/s - 5.06x  (± 0.00) slower
 String#sub!/regexp/: 20354929.8 i/s - 11.05x  (± 0.00) slower
 String#sub!'string':  5085086.8 i/s - 44.24x  (± 0.00) slower
String#gsub!/regexp/:  4833946.1 i/s - 46.54x  (± 0.00) slower
String#gsub!'string':  1109438.4 i/s - 202.77x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.751M i/100ms
        String#chomp     2.477M i/100ms
String#delete_suffix     5.711M i/100ms
Calculating -------------------------------------
          String#sub     18.316M (± 3.1%) i/s -     92.813M in   5.072485s
        String#chomp     24.939M (± 3.3%) i/s -    126.334M in   5.071559s
String#delete_suffix     57.195M (± 0.3%) i/s -    291.276M in   5.092737s

Comparison:
String#delete_suffix: 57194834.0 i/s
        String#chomp: 24938799.6 i/s - 2.29x  (± 0.00) slower
          String#sub: 18316036.8 i/s - 3.12x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix     1.902M i/100ms
          String#sub     8.056M i/100ms
Calculating -------------------------------------
String#delete_prefix     19.729M (± 4.0%) i/s -     98.881M in   5.020537s
          String#sub     80.551M (± 0.2%) i/s -    402.818M in   5.000829s

Comparison:
          String#sub: 80550691.1 i/s
String#delete_prefix: 19728537.8 i/s - 4.08x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.319M i/100ms
    String#unpack[0]     1.357M i/100ms
Calculating -------------------------------------
      String#unpack1     13.963M (± 3.9%) i/s -     69.897M in   5.013654s
    String#unpack[0]     13.695M (± 3.6%) i/s -     69.190M in   5.059185s

Comparison:
      String#unpack1: 13963426.2 i/s
    String#unpack[0]: 13694755.7 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    18.469k i/100ms
          Time.parse   158.000  i/100ms
Calculating -------------------------------------
        Time.iso8601     76.900k (±16.1%) i/s -    387.849k in   5.123504s
          Time.parse      3.270k (±26.4%) i/s -     14.536k in   5.000393s

Comparison:
        Time.iso8601:    76900.3 i/s
          Time.parse:     3270.3 i/s - 23.51x  (± 0.00) slower

