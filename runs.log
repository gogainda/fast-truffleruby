$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       238.816M i/100ms
Function with splat arguments
                       585.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          2.386B (± 0.3%) i/s -     11.941B in   5.004946s
Function with splat arguments
                          6.305k (± 5.4%) i/s -     31.590k in   5.025579s

Comparison:
Function with single Array argument: 2385828191.4 i/s
Function with splat arguments:     6305.1 i/s - 378396.11x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   238.448M i/100ms
Sequential Assignment
                       238.707M i/100ms
Calculating -------------------------------------
 Parallel Assignment      2.384B (± 0.4%) i/s -     11.922B in   5.000192s
Sequential Assignment
                          2.385B (± 0.5%) i/s -     11.935B in   5.003510s

Comparison:
Sequential Assignment: 2385460881.2 i/s
 Parallel Assignment: 2384427548.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   238.797M i/100ms
       attr_accessor   238.616M i/100ms
Calculating -------------------------------------
   getter_and_setter      2.386B (± 0.4%) i/s -     11.940B in   5.005085s
       attr_accessor      2.388B (± 0.2%) i/s -     12.169B in   5.095473s

Comparison:
       attr_accessor: 2388297640.9 i/s
   getter_and_setter: 2385571204.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     7.062k i/100ms
         respond_to?   238.822M i/100ms
Calculating -------------------------------------
      begin...rescue     48.198k (± 2.7%) i/s -    247.170k in   5.131896s
         respond_to?      2.388B (± 0.2%) i/s -     12.180B in   5.099454s

Comparison:
         respond_to?: 2388487048.8 i/s
      begin...rescue:    48198.4 i/s - 49555.27x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   238.775M i/100ms
             &method   238.596M i/100ms
Calculating -------------------------------------
              normal      2.386B (± 0.4%) i/s -     11.939B in   5.004241s
             &method      2.387B (± 0.3%) i/s -     12.168B in   5.096920s

Comparison:
             &method: 2387418362.9 i/s
              normal: 2385754974.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        97.000  i/100ms
       define_method   135.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.372k (±51.3%) i/s -      4.462k in   6.373625s
       define_method      3.013k (±57.5%) i/s -      5.940k in   5.874454s

Comparison:
       define_method:     3012.7 i/s
module_eval with string:     1371.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    70.070k i/100ms
       Kernel#format    63.989k i/100ms
            String#%    65.906k i/100ms
Calculating -------------------------------------
         Float#round    747.973k (± 2.8%) i/s -      3.784M in   5.062659s
       Kernel#format    662.783k (± 2.4%) i/s -      3.327M in   5.023519s
            String#%    662.842k (± 2.4%) i/s -      3.361M in   5.074109s

Comparison:
         Float#round:   747972.8 i/s
            String#%:   662841.9 i/s - 1.13x  (± 0.00) slower
       Kernel#format:   662783.1 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   238.715M i/100ms
          OpenStruct   236.440M i/100ms
Calculating -------------------------------------
                Hash      2.378B (± 1.8%) i/s -     11.936B in   5.021612s
          OpenStruct      2.389B (± 0.2%) i/s -     12.058B in   5.047412s

Comparison:
          OpenStruct: 2389042653.1 i/s
                Hash: 2377683411.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   238.328M i/100ms
          OpenStruct     2.593k i/100ms
Calculating -------------------------------------
                Hash      2.383B (± 0.4%) i/s -     11.916B in   5.001592s
          OpenStruct     29.074k (±12.7%) i/s -    142.615k in   5.020396s

Comparison:
                Hash: 2382563434.1 i/s
          OpenStruct:    29074.3 i/s - 81947.35x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   688.109k i/100ms
  ancestors.include?   131.849k i/100ms
Calculating -------------------------------------
  less than or equal      8.571M (± 4.9%) i/s -     43.351M in   5.070420s
  ancestors.include?      1.345M (± 4.8%) i/s -      6.724M in   5.012852s

Comparison:
  less than or equal:  8571308.7 i/s
  ancestors.include?:  1344561.3 i/s - 6.37x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     23.865  (± 0.0%) i/s -    120.000  in   5.028478s
         Kernel loop      7.127  (± 0.0%) i/s -     36.000  in   5.054181s

Comparison:
          While Loop:       23.9 i/s
         Kernel loop:        7.1 i/s - 3.35x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   238.097M i/100ms
         Array#first   238.541M i/100ms
Calculating -------------------------------------
           Array#[0]      2.386B (± 0.3%) i/s -     12.143B in   5.090131s
         Array#first      2.387B (± 0.3%) i/s -     12.166B in   5.096083s

Comparison:
         Array#first: 2387258221.8 i/s
           Array#[0]: 2385611737.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   238.301M i/100ms
          Array#last   238.484M i/100ms
Calculating -------------------------------------
          Array#[-1]      2.386B (± 0.3%) i/s -     12.153B in   5.093324s
          Array#last      2.387B (± 0.3%) i/s -     12.163B in   5.094521s

Comparison:
          Array#last: 2387425136.7 i/s
          Array#[-1]: 2386158149.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   487.194k i/100ms
Calculating -------------------------------------
                find      8.321  (±24.0%) i/s -     15.000  in   5.010575s
             bsearch      4.906M (± 3.4%) i/s -     24.847M in   5.070841s

Comparison:
             bsearch:  4906004.2 i/s
                find:        8.3 i/s - 589566.01x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.118  (± 0.0%) i/s -      1.000  in   8.443270s
        Array#insert      0.943  (± 0.0%) i/s -      5.000  in   5.301830s

Comparison:
        Array#insert:        0.9 i/s
       Array#unshift:        0.1 i/s - 7.96x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   238.342M i/100ms
          Array#size   238.770M i/100ms
         Array#count   239.010M i/100ms
Calculating -------------------------------------
        Array#length      2.385B (± 0.3%) i/s -     12.155B in   5.095848s
          Array#size      2.387B (± 0.3%) i/s -     11.938B in   5.001229s
         Array#count      2.389B (± 0.2%) i/s -     11.951B in   5.003186s

Comparison:
         Array#count: 2388589554.7 i/s
          Array#size: 2387132836.5 i/s - same-ish: difference falls within error
        Array#length: 2385387070.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    22.457k i/100ms
        Array#sample     2.574M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    221.118k (± 1.8%) i/s -      1.123M in   5.079833s
        Array#sample     25.398M (± 0.2%) i/s -    128.696M in   5.067166s

Comparison:
        Array#sample: 25398086.8 i/s
 Array#shuffle.first:   221117.5 i/s - 114.86x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   424.000  i/100ms
          Date.parse   157.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     21.273k (±32.8%) i/s -     78.440k in   5.029897s
          Date.parse      8.338k (±27.4%) i/s -     33.598k in   5.453516s

Comparison:
        Date.iso8601:    21272.7 i/s
          Date.parse:     8337.5 i/s - 2.55x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   140.561k i/100ms
           Array#map   498.329k i/100ms
Calculating -------------------------------------
   Array#each + push      1.492M (± 3.7%) i/s -      7.590M in   5.095093s
           Array#map      5.156M (± 7.7%) i/s -     25.913M in   5.054839s

Comparison:
           Array#map:  5156198.3 i/s
   Array#each + push:  1491820.9 i/s - 3.46x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    10.585M i/100ms
               #each    56.427M i/100ms
Calculating -------------------------------------
            For loop    105.694M (± 0.8%) i/s -    529.254M in   5.007748s
               #each    568.591M (± 0.4%) i/s -      2.878B in   5.061299s

Comparison:
               #each: 568590887.0 i/s
            For loop: 105694267.7 i/s - 5.38x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   900.293k i/100ms
     each_with_index     1.278M i/100ms
Calculating -------------------------------------
          While Loop      9.074M (± 0.2%) i/s -     45.915M in   5.060059s
     each_with_index     12.811M (± 0.2%) i/s -     65.180M in   5.087953s

Comparison:
     each_with_index: 12810793.2 i/s
          While Loop:  9074040.3 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   146.283k i/100ms
      inject to_proc   147.450k i/100ms
        inject block   147.450k i/100ms
Calculating -------------------------------------
       inject symbol      1.472M (± 0.5%) i/s -      7.460M in   5.066669s
      inject to_proc      1.474M (± 0.2%) i/s -      7.372M in   5.001952s
        inject block      1.474M (± 0.2%) i/s -      7.372M in   5.001142s

Comparison:
        inject block:  1474168.1 i/s
      inject to_proc:  1473928.9 i/s - same-ish: difference falls within error
       inject symbol:  1472489.8 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     9.054k i/100ms
   Array#map.flatten    10.202k i/100ms
      Array#flat_map    30.363k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    104.453k (± 3.9%) i/s -    525.132k in   5.035703s
   Array#map.flatten    103.825k (± 3.6%) i/s -    520.302k in   5.018171s
      Array#flat_map    304.426k (± 3.0%) i/s -      1.549M in   5.091580s

Comparison:
      Array#flat_map:   304426.4 i/s
Array#map.flatten(1):   104452.6 i/s - 2.91x  (± 0.00) slower
   Array#map.flatten:   103824.6 i/s - 2.93x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   152.403k i/100ms
  Array#reverse_each     1.950M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.552M (± 3.4%) i/s -      7.773M in   5.013250s
  Array#reverse_each     19.488M (± 0.1%) i/s -     97.504M in   5.003421s

Comparison:
  Array#reverse_each: 19487510.8 i/s
  Array#reverse.each:  1552302.2 i/s - 12.55x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       582.011k i/100ms
   Enumerable#detect     3.829M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          6.045M (± 6.1%) i/s -    120.476M in  20.029148s
   Enumerable#detect     38.286M (± 0.2%) i/s -    765.851M in  20.003549s

Comparison:
   Enumerable#detect: 38285876.1 i/s
Enumerable#select.first:  6044929.8 i/s - 6.33x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       154.352k i/100ms
Enumerable#select.last
                       375.995k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.545M (± 3.3%) i/s -      7.718M in   5.000832s
Enumerable#select.last
                          3.785M (± 3.5%) i/s -     19.176M in   5.072364s

Comparison:
Enumerable#select.last:  3785230.2 i/s
Enumerable#reverse.detect:  1545035.3 i/s - 2.45x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.263k i/100ms
  Enumerable#sort_by     2.438k i/100ms
     Enumerable#sort     3.340k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         24.249k (± 8.2%) i/s -    119.939k in   5.000538s
  Enumerable#sort_by     23.242k (±19.6%) i/s -    107.272k in   5.033939s
     Enumerable#sort     31.871k (± 0.6%) i/s -    160.320k in   5.030511s

Comparison:
     Enumerable#sort:    31870.7 i/s
Enumerable#sort_by (Symbol#to_proc):    24249.2 i/s - 1.31x  (± 0.00) slower
  Enumerable#sort_by:    23242.1 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   462.266k i/100ms
Enumerable#sort_by...first
                         5.258k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      4.663M (± 0.4%) i/s -     23.576M in   5.055606s
Enumerable#sort_by...first
                         62.582k (± 3.2%) i/s -    315.480k in   5.046306s

Comparison:
   Enumerable#min_by:  4663310.2 i/s
Enumerable#sort_by...first:    62581.6 i/s - 74.52x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   166.455k i/100ms
            Hash#dup   201.997k i/100ms
Calculating -------------------------------------
              Hash[]      2.048M (± 4.8%) i/s -     10.320M in   5.050983s
            Hash#dup      2.047M (± 3.8%) i/s -     10.302M in   5.041157s

Comparison:
              Hash[]:  2048327.3 i/s
            Hash#dup:  2046669.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   238.574M i/100ms
  Hash#fetch, symbol   238.331M i/100ms
     Hash#[], string     2.523M i/100ms
  Hash#fetch, string     2.678M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      2.387B (± 0.3%) i/s -     12.167B in   5.097807s
  Hash#fetch, symbol      2.389B (± 0.2%) i/s -     12.155B in   5.088647s
     Hash#[], string    165.872M (± 0.5%) i/s -    830.076M in   5.004452s
  Hash#fetch, string    135.619M (± 0.5%) i/s -    680.323M in   5.016564s

Comparison:
  Hash#fetch, symbol: 2388641376.4 i/s
     Hash#[], symbol: 2386783229.5 i/s - same-ish: difference falls within error
     Hash#[], string: 165872034.1 i/s - 14.40x  (± 0.00) slower
  Hash#fetch, string: 135618816.8 i/s - 17.61x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    59.675M i/100ms
             Hash#[]    59.671M i/100ms
          Hash#[] ||    59.673M i/100ms
          Hash#[] &&    59.742M i/100ms
          Hash#fetch    59.753M i/100ms
 Hash#fetch fallback    59.751M i/100ms
Calculating -------------------------------------
            Hash#dig    596.814M (± 0.3%) i/s -      2.984B in   4.999528s
             Hash#[]    596.903M (± 0.3%) i/s -      3.043B in   5.098368s
          Hash#[] ||    597.153M (± 0.2%) i/s -      3.043B in   5.096411s
          Hash#[] &&    596.963M (± 0.2%) i/s -      2.987B in   5.003832s
          Hash#fetch    597.163M (± 0.2%) i/s -      2.988B in   5.003114s
 Hash#fetch fallback    596.952M (± 0.3%) i/s -      2.988B in   5.004744s

Comparison:
          Hash#fetch: 597162687.3 i/s
          Hash#[] ||: 597152885.9 i/s - same-ish: difference falls within error
          Hash#[] &&: 596963178.2 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 596951634.1 i/s - same-ish: difference falls within error
             Hash#[]: 596903448.4 i/s - same-ish: difference falls within error
            Hash#dig: 596814260.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   238.564M i/100ms
  Hash#fetch + block   238.516M i/100ms
    Hash#fetch + arg   239.001M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      2.386B (± 0.3%) i/s -     12.167B in   5.098372s
  Hash#fetch + block      2.388B (± 0.2%) i/s -     12.164B in   5.094315s
    Hash#fetch + arg      2.387B (± 0.3%) i/s -     11.950B in   5.006030s

Comparison:
  Hash#fetch + block: 2387833747.1 i/s
    Hash#fetch + arg: 2387162503.3 i/s - same-ish: difference falls within error
  Hash#fetch + const: 2386418955.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    14.857k i/100ms
         sort + to_h     5.777k i/100ms
Calculating -------------------------------------
      sort_by + to_h    185.080k (± 5.2%) i/s -    935.991k in   5.071495s
         sort + to_h    113.987k (± 5.1%) i/s -    571.923k in   5.032697s

Comparison:
      sort_by + to_h:   185080.2 i/s
         sort + to_h:   113987.1 i/s - 1.62x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   169.133k i/100ms
       Hash#each_key   196.784k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.699M (±10.6%) i/s -      8.288M in   4.999517s
       Hash#each_key      1.978M (± 3.1%) i/s -     10.036M in   5.078803s

Comparison:
       Hash#each_key:  1978051.5 i/s
      Hash#keys.each:  1698608.0 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   182.000  i/100ms
           Hash#key?    11.949M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.903k (±11.2%) i/s -      9.464k in   5.060043s
           Hash#key?    119.461M (± 0.2%) i/s -    597.450M in   5.001244s

Comparison:
           Hash#key?: 119460578.8 i/s
  Hash#keys.include?:     1902.9 i/s - 62778.44x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    20.869k i/100ms
            Hash#[]=    22.741k i/100ms
Calculating -------------------------------------
         Hash#merge!    214.142k (±11.0%) i/s -      1.043M in   5.031373s
            Hash#[]=    230.079k (± 3.7%) i/s -      1.160M in   5.048035s

Comparison:
            Hash#[]=:   230079.0 i/s
         Hash#merge!:   214141.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         9.299k i/100ms
      Hash#merge({})     7.196k i/100ms
 Hash#dup#merge!({})    11.919k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        113.233k (± 5.1%) i/s -    567.239k in   5.024419s
      Hash#merge({})     73.404k (± 4.8%) i/s -    366.996k in   5.012061s
 Hash#dup#merge!({})    120.617k (± 3.7%) i/s -    607.869k in   5.046910s

Comparison:
 Hash#dup#merge!({}):   120617.3 i/s
{}#merge!(Hash) do end:   113233.1 i/s - same-ish: difference falls within error
      Hash#merge({}):    73404.3 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   238.577M i/100ms
          Hash#merge   238.959M i/100ms
Calculating -------------------------------------
        Hash#**other      2.387B (± 0.3%) i/s -     12.167B in   5.098350s
          Hash#merge      2.387B (± 0.4%) i/s -     11.948B in   5.004883s

Comparison:
          Hash#merge: 2387290078.8 i/s
        Hash#**other: 2386561312.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   269.000  i/100ms
         Hash#merge!    22.310k i/100ms
Calculating -------------------------------------
          Hash#merge      3.083k (± 4.5%) i/s -     15.602k in   5.071969s
         Hash#merge!    225.414k (± 3.7%) i/s -      1.138M in   5.055000s

Comparison:
         Hash#merge!:   225414.1 i/s
          Hash#merge:     3082.6 i/s - 73.12x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      995.757k i/100ms
Array#each             932.227k i/100ms
Array#each_w/_object   935.967k i/100ms
Hash#select-include      1.292M i/100ms
Calculating -------------------------------------
Hash#native-slice        11.095M (± 3.8%) i/s -     55.762M in   5.033739s
Array#each                9.478M (± 3.0%) i/s -     47.544M in   5.020984s
Array#each_w/_object      9.526M (± 3.4%) i/s -     47.734M in   5.017405s
Hash#select-include      12.947M (± 2.8%) i/s -     65.899M in   5.094266s

Comparison:
Hash#select-include : 12946677.2 i/s
Hash#native-slice   : 11095346.5 i/s - 1.17x  (± 0.00) slower
Array#each_w/_object:  9525517.5 i/s - 1.36x  (± 0.00) slower
Array#each          :  9478159.2 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   177.000  i/100ms
         Hash#value?   382.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.777k (±11.1%) i/s -      8.850k in   5.067229s
         Hash#value?      3.836k (± 0.4%) i/s -     19.482k in   5.078231s

Comparison:
         Hash#value?:     3836.4 i/s
Hash#values.include?:     1776.6 i/s - 2.16x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   238.304M i/100ms
                send   238.819M i/100ms
      method_missing   239.064M i/100ms
Calculating -------------------------------------
                call      2.387B (± 0.3%) i/s -     12.153B in   5.092631s
                send      2.386B (± 0.4%) i/s -     11.941B in   5.004395s
      method_missing      2.389B (± 0.2%) i/s -     11.953B in   5.004313s

Comparison:
      method_missing: 2388589317.5 i/s
                call: 2386509999.4 i/s - same-ish: difference falls within error
                send: 2386134144.4 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    12.720k i/100ms
      Symbol#to_proc    13.723k i/100ms
Calculating -------------------------------------
               Block    137.223k (± 5.2%) i/s -    686.880k in   5.022378s
      Symbol#to_proc    138.820k (± 3.3%) i/s -    699.873k in   5.047329s

Comparison:
      Symbol#to_proc:   138819.7 i/s
               Block:   137222.6 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   238.525M i/100ms
       block + yield   238.737M i/100ms
        unused block   239.023M i/100ms
               yield   238.871M i/100ms
Calculating -------------------------------------
          block.call      2.388B (± 0.3%) i/s -     12.165B in   5.094823s
       block + yield      2.389B (± 0.2%) i/s -     12.176B in   5.096394s
        unused block      2.388B (± 0.3%) i/s -     11.951B in   5.005177s
               yield      2.388B (± 0.3%) i/s -     11.944B in   5.001708s

Comparison:
       block + yield: 2389069942.0 i/s
               yield: 2387913180.3 i/s - same-ish: difference falls within error
        unused block: 2387779968.6 i/s - same-ish: difference falls within error
          block.call: 2387690231.8 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    24.605k i/100ms
      range#include?   330.000  i/100ms
       range#member?   363.000  i/100ms
       plain compare    21.141k i/100ms
Calculating -------------------------------------
        range#cover?    123.547k (±23.7%) i/s -    590.520k in   5.090274s
      range#include?      4.808k (±38.8%) i/s -     19.140k in   5.974875s
       range#member?      4.139k (±40.5%) i/s -     13.431k in   5.116645s
       plain compare    206.358k (±22.6%) i/s -    972.486k in   5.031889s

Comparison:
       plain compare:   206358.2 i/s
        range#cover?:   123547.2 i/s - 1.67x  (± 0.00) slower
      range#include?:     4808.4 i/s - 42.92x  (± 0.00) slower
       range#member?:     4139.2 i/s - 49.85x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    10.181M i/100ms
           String#=~    11.065M i/100ms
          Regexp#===    11.063M i/100ms
        String#match     6.640M i/100ms
Calculating -------------------------------------
       String#match?    102.916M (± 0.3%) i/s -    519.231M in   5.045214s
           String#=~    110.622M (± 0.1%) i/s -    553.261M in   5.001377s
          Regexp#===    110.605M (± 0.1%) i/s -    553.172M in   5.001336s
        String#match     66.348M (± 0.2%) i/s -    331.981M in   5.003656s

Comparison:
           String#=~: 110621844.4 i/s
          Regexp#===: 110605074.8 i/s - same-ish: difference falls within error
       String#match?: 102916185.0 i/s - 1.07x  (± 0.00) slower
        String#match: 66347788.4 i/s - 1.67x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.392M i/100ms
      String#casecmp     2.398M i/100ms
Calculating -------------------------------------
String#downcase + ==     15.114M (± 4.2%) i/s -     76.571M in   5.075838s
      String#casecmp     24.335M (± 3.5%) i/s -    122.304M in   5.032539s

Comparison:
      String#casecmp: 24334833.1 i/s
String#downcase + ==: 15114312.1 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     5.998M i/100ms
       String#concat     7.469M i/100ms
       String#append     7.313M i/100ms
         "foo" "bar"   239.014M i/100ms
  "#{'foo'}#{'bar'}"   239.030M i/100ms
Calculating -------------------------------------
            String#+     74.704M (± 4.6%) i/s -    377.901M in   5.070535s
       String#concat     74.472M (± 4.2%) i/s -    373.451M in   5.023970s
       String#append     77.068M (± 4.3%) i/s -    387.591M in   5.039039s
         "foo" "bar"      2.388B (± 0.1%) i/s -     11.951B in   5.003570s
  "#{'foo'}#{'bar'}"      2.388B (± 0.2%) i/s -     11.951B in   5.004519s

Comparison:
         "foo" "bar": 2388443868.0 i/s
  "#{'foo'}#{'bar'}": 2388152298.1 i/s - same-ish: difference falls within error
       String#append: 77068398.6 i/s - 30.99x  (± 0.00) slower
            String#+: 74704074.0 i/s - 31.97x  (± 0.00) slower
       String#concat: 74471881.1 i/s - 32.07x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   238.777M i/100ms
          String#dup   238.087M i/100ms
Calculating -------------------------------------
           String#+@      2.386B (± 0.3%) i/s -     11.939B in   5.004683s
          String#dup      2.387B (± 0.3%) i/s -     12.142B in   5.086043s

Comparison:
          String#dup: 2387431850.4 i/s
           String#+@: 2385558650.5 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.165M i/100ms
       String#match?     1.493M i/100ms
    String#end_with?     8.183M i/100ms
Calculating -------------------------------------
           String#=~     11.852M (± 3.1%) i/s -     59.402M in   5.017128s
       String#match?     14.933M (± 0.1%) i/s -     74.673M in   5.000560s
    String#end_with?     81.979M (± 0.6%) i/s -    417.353M in   5.091206s

Comparison:
    String#end_with?: 81978546.5 i/s
       String#match?: 14932864.2 i/s - 5.49x  (± 0.00) slower
           String#=~: 11852058.7 i/s - 6.92x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   238.557k i/100ms
          String#sub   303.395k i/100ms
String#dup["string"]=
                        10.296M i/100ms
Calculating -------------------------------------
         String#gsub      3.016M (± 6.6%) i/s -     15.029M in   5.006839s
          String#sub      4.733M (± 8.5%) i/s -     23.665M in   5.042141s
String#dup["string"]=
                        102.823M (± 0.2%) i/s -    514.789M in   5.006598s

Comparison:
String#dup["string"]=: 102822500.1 i/s
          String#sub:  4732926.1 i/s - 21.72x  (± 0.00) slower
         String#gsub:  3016334.7 i/s - 34.09x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   120.873k i/100ms
           String#tr    84.478k i/100ms
Calculating -------------------------------------
         String#gsub      1.839M (± 6.5%) i/s -      9.186M in   5.018417s
           String#tr    850.921k (± 3.6%) i/s -      4.308M in   5.070268s

Comparison:
         String#gsub:  1839131.2 i/s
           String#tr:   850920.9 i/s - 2.16x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   238.422M i/100ms
         With Freeze   238.517M i/100ms
Calculating -------------------------------------
      Without Freeze      2.385B (± 0.4%) i/s -     12.160B in   5.097608s
         With Freeze      2.388B (± 0.3%) i/s -     12.164B in   5.094713s

Comparison:
         With Freeze: 2387661079.1 i/s
      Without Freeze: 2385367421.4 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     4.314k i/100ms
      String#squeeze    27.886k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     54.935k (± 4.7%) i/s -    276.096k in   5.037684s
      String#squeeze    277.915k (± 2.0%) i/s -      1.394M in   5.019123s

Comparison:
      String#squeeze:   277914.5 i/s
 String#gsub/regex+/:    54934.7 i/s - 5.06x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     2.142M i/100ms
       String#match?     3.654M i/100ms
  String#start_with?    14.934M i/100ms
Calculating -------------------------------------
           String#=~     23.029M (± 3.8%) i/s -    115.664M in   5.030182s
       String#match?     36.830M (± 1.0%) i/s -    186.373M in   5.060897s
  String#start_with?    149.277M (± 0.2%) i/s -    746.684M in   5.002017s

Comparison:
  String#start_with?: 149276966.9 i/s
       String#match?: 36829800.5 i/s - 4.05x  (± 0.00) slower
           String#=~: 23029438.8 i/s - 6.48x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    92.425k i/100ms
    String#[0, n] ==   135.126k i/100ms
   String#[RANGE] ==   141.843k i/100ms
   String#[0...n] ==   104.656k i/100ms
Calculating -------------------------------------
  String#start_with?      4.162M (± 0.2%) i/s -     20.888M in   5.018876s
    String#[0, n] ==      1.405M (± 4.0%) i/s -      7.027M in   5.009986s
   String#[RANGE] ==      1.428M (± 4.1%) i/s -      7.234M in   5.075616s
   String#[0...n] ==      1.047M (± 3.5%) i/s -      5.233M in   5.006838s

Comparison:
  String#start_with?:  4161922.5 i/s
   String#[RANGE] ==:  1427841.8 i/s - 2.91x  (± 0.00) slower
    String#[0, n] ==:  1404917.9 i/s - 2.96x  (± 0.00) slower
   String#[0...n] ==:  1046518.5 i/s - 3.98x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    10.264M i/100ms
 String#sub!'string'   302.632k i/100ms
String#gsub!'string'   341.771k i/100ms
  String#[/regexp/]=     1.236M i/100ms
 String#sub!/regexp/     1.432M i/100ms
String#gsub!/regexp/   350.983k i/100ms
Calculating -------------------------------------
  String#['string']=    103.006M (± 0.1%) i/s -    523.472M in   5.081938s
 String#sub!'string'      4.692M (±12.7%) i/s -     22.092M in   5.034240s
String#gsub!'string'      3.465M (± 4.5%) i/s -     17.430M in   5.041478s
  String#[/regexp/]=     12.595M (± 3.5%) i/s -     63.058M in   5.013426s
 String#sub!/regexp/     14.578M (± 2.4%) i/s -     73.043M in   5.013562s
String#gsub!/regexp/      3.578M (± 4.3%) i/s -     17.900M in   5.013253s

Comparison:
  String#['string']=: 103006358.1 i/s
 String#sub!/regexp/: 14578478.2 i/s - 7.07x  (± 0.00) slower
  String#[/regexp/]=: 12595179.7 i/s - 8.18x  (± 0.00) slower
 String#sub!'string':  4691556.0 i/s - 21.96x  (± 0.00) slower
String#gsub!/regexp/:  3577608.9 i/s - 28.79x  (± 0.00) slower
String#gsub!'string':  3464886.5 i/s - 29.73x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.545M i/100ms
        String#chomp     3.802M i/100ms
String#delete_suffix     3.654M i/100ms
Calculating -------------------------------------
          String#sub     16.364M (± 3.3%) i/s -     81.898M in   5.010539s
        String#chomp     37.944M (± 1.2%) i/s -    190.101M in   5.010689s
String#delete_suffix     36.508M (± 3.5%) i/s -    182.719M in   5.011191s

Comparison:
        String#chomp: 37944296.0 i/s
String#delete_suffix: 36507980.0 i/s - same-ish: difference falls within error
          String#sub: 16364231.2 i/s - 2.32x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   238.184M i/100ms
          String#sub    11.065M i/100ms
Calculating -------------------------------------
String#delete_prefix      2.386B (± 0.5%) i/s -     12.147B in   5.091640s
          String#sub    110.576M (± 0.3%) i/s -    553.256M in   5.003415s

Comparison:
String#delete_prefix: 2385808616.4 i/s
          String#sub: 110576354.1 i/s - 21.58x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   992.279k i/100ms
    String#unpack[0]     1.117M i/100ms
Calculating -------------------------------------
      String#unpack1     11.302M (± 4.0%) i/s -     56.560M in   5.013372s
    String#unpack[0]     11.268M (± 3.8%) i/s -     56.943M in   5.061192s

Comparison:
      String#unpack1: 11301631.9 i/s
    String#unpack[0]: 11268191.7 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.3.0-dev-4e6b7fda, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    13.014k i/100ms
          Time.parse   187.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    147.363k (±30.1%) i/s -    676.728k in   5.024386s
          Time.parse      5.059k (±21.8%) i/s -     23.001k in   5.003257s

Comparison:
        Time.iso8601:   147362.7 i/s
          Time.parse:     5059.4 i/s - 29.13x  (± 0.00) slower

