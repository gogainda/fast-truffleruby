$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       190.898M i/100ms
Function with splat arguments
                       567.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.908B (± 0.3%) i/s -      9.545B in   5.001444s
Function with splat arguments
                          6.060k (± 5.4%) i/s -     30.618k in   5.068409s

Comparison:
Function with single Array argument: 1908451379.3 i/s
Function with splat arguments:     6059.9 i/s - 314929.31x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   190.720M i/100ms
Sequential Assignment
                       190.614M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.907B (± 0.3%) i/s -      9.536B in   4.999376s
Sequential Assignment
                          1.910B (± 0.2%) i/s -      9.721B in   5.090278s

Comparison:
Sequential Assignment: 1909790720.7 i/s
 Parallel Assignment: 1907460619.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   190.732M i/100ms
       attr_accessor   191.003M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.909B (± 0.3%) i/s -      9.727B in   5.096841s
       attr_accessor      1.910B (± 0.2%) i/s -      9.550B in   5.000741s

Comparison:
       attr_accessor: 1909758226.3 i/s
   getter_and_setter: 1908522179.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     6.384k i/100ms
         respond_to?   190.696M i/100ms
Calculating -------------------------------------
      begin...rescue     43.109k (± 3.0%) i/s -    217.056k in   5.039764s
         respond_to?      1.910B (± 0.2%) i/s -      9.725B in   5.092218s

Comparison:
         respond_to?: 1909883599.7 i/s
      begin...rescue:    43109.0 i/s - 44303.64x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   190.920M i/100ms
             &method   191.165M i/100ms
Calculating -------------------------------------
              normal      1.907B (± 0.5%) i/s -      9.546B in   5.005768s
             &method      1.910B (± 0.3%) i/s -      9.558B in   5.005588s

Comparison:
             &method: 1909527608.5 i/s
              normal: 1907045887.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       108.000  i/100ms
       define_method   112.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.013k (±30.1%) i/s -      2.808k in   5.466923s
       define_method      2.160k (±47.6%) i/s -      4.480k in   5.328527s

Comparison:
       define_method:     2160.1 i/s
module_eval with string:     1013.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    56.725k i/100ms
       Kernel#format    40.426k i/100ms
            String#%    39.998k i/100ms
Calculating -------------------------------------
         Float#round    598.834k (± 2.8%) i/s -      3.006M in   5.024444s
       Kernel#format    400.991k (± 2.4%) i/s -      2.021M in   5.043850s
            String#%    412.456k (± 2.4%) i/s -      2.080M in   5.045793s

Comparison:
         Float#round:   598833.8 i/s
            String#%:   412455.8 i/s - 1.45x  (± 0.00) slower
       Kernel#format:   400991.1 i/s - 1.49x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   190.602M i/100ms
          OpenStruct   190.856M i/100ms
Calculating -------------------------------------
                Hash      1.908B (± 0.4%) i/s -      9.721B in   5.094911s
          OpenStruct      1.910B (± 0.2%) i/s -      9.734B in   5.095400s

Comparison:
          OpenStruct: 1910295115.9 i/s
                Hash: 1907952936.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   190.791M i/100ms
          OpenStruct     2.286k i/100ms
Calculating -------------------------------------
                Hash      1.900B (± 1.4%) i/s -      9.540B in   5.022409s
          OpenStruct     24.938k (± 9.0%) i/s -    123.444k in   5.023295s

Comparison:
                Hash: 1899829858.3 i/s
          OpenStruct:    24938.1 i/s - 76181.80x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   633.895k i/100ms
  ancestors.include?   110.312k i/100ms
Calculating -------------------------------------
  less than or equal      7.078M (± 4.0%) i/s -     35.498M in   5.024231s
  ancestors.include?      1.111M (± 4.6%) i/s -      5.626M in   5.076791s

Comparison:
  less than or equal:  7077543.2 i/s
  ancestors.include?:  1110563.9 i/s - 6.37x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     19.092  (± 0.0%) i/s -     96.000  in   5.028344s
         Kernel loop      4.742  (± 0.0%) i/s -     24.000  in   5.061530s

Comparison:
          While Loop:       19.1 i/s
         Kernel loop:        4.7 i/s - 4.03x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   190.712M i/100ms
         Array#first   190.992M i/100ms
Calculating -------------------------------------
           Array#[0]      1.909B (± 0.3%) i/s -      9.726B in   5.096190s
         Array#first      1.910B (± 0.2%) i/s -      9.741B in   5.098918s

Comparison:
         Array#first: 1910336551.3 i/s
           Array#[0]: 1908556480.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   191.016M i/100ms
          Array#last   190.554M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.907B (± 0.4%) i/s -      9.551B in   5.007053s
          Array#last      1.910B (± 0.2%) i/s -      9.718B in   5.086810s

Comparison:
          Array#last: 1910491778.6 i/s
          Array#[-1]: 1907494855.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   370.058k i/100ms
Calculating -------------------------------------
                find      0.087  (± 0.0%) i/s -      1.000  in  11.527537s
             bsearch      3.749M (± 3.3%) i/s -     18.873M in   5.039867s

Comparison:
             bsearch:  3749082.0 i/s
                find:        0.1 i/s - 43217680.23x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.098  (± 0.0%) i/s -      1.000  in  10.193142s
        Array#insert      0.753  (± 0.0%) i/s -      4.000  in   5.315132s

Comparison:
        Array#insert:        0.8 i/s
       Array#unshift:        0.1 i/s - 7.67x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   190.586M i/100ms
          Array#size   190.760M i/100ms
         Array#count   191.143M i/100ms
Calculating -------------------------------------
        Array#length      1.908B (± 0.3%) i/s -      9.720B in   5.094436s
          Array#size      1.909B (± 0.3%) i/s -      9.729B in   5.095225s
         Array#count      1.911B (± 0.1%) i/s -      9.557B in   5.002094s

Comparison:
         Array#count: 1910634012.5 i/s
          Array#size: 1909396700.3 i/s - same-ish: difference falls within error
        Array#length: 1907962217.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    18.998k i/100ms
        Array#sample     1.955M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    195.291k (± 2.0%) i/s -    987.896k in   5.060862s
        Array#sample     19.600M (± 0.1%) i/s -     99.701M in   5.086797s

Comparison:
        Array#sample: 19600004.9 i/s
 Array#shuffle.first:   195290.9 i/s - 100.36x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   192.000  i/100ms
          Date.parse    84.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     14.461k (±22.5%) i/s -     56.832k in   4.991552s
          Date.parse      4.613k (±21.3%) i/s -     19.068k in   5.004103s

Comparison:
        Date.iso8601:    14461.0 i/s
          Date.parse:     4612.7 i/s - 3.14x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   118.917k i/100ms
           Array#map   490.617k i/100ms
Calculating -------------------------------------
   Array#each + push      1.241M (± 3.8%) i/s -      6.303M in   5.086493s
           Array#map      4.957M (± 5.8%) i/s -     25.021M in   5.065375s

Comparison:
           Array#map:  4957079.9 i/s
   Array#each + push:  1241017.6 i/s - 3.99x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     6.719M i/100ms
               #each    45.414M i/100ms
Calculating -------------------------------------
            For loop     67.306M (± 0.6%) i/s -    342.680M in   5.091535s
               #each    454.099M (± 0.4%) i/s -      2.271B in   5.000509s

Comparison:
               #each: 454098839.9 i/s
            For loop: 67305968.7 i/s - 6.75x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   558.909k i/100ms
     each_with_index     1.022M i/100ms
Calculating -------------------------------------
          While Loop      5.595M (± 0.1%) i/s -     28.504M in   5.094738s
     each_with_index     10.258M (± 0.1%) i/s -     52.120M in   5.080993s

Comparison:
     each_with_index: 10257827.2 i/s
          While Loop:  5594864.2 i/s - 1.83x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   117.910k i/100ms
      inject to_proc   117.954k i/100ms
        inject block   117.914k i/100ms
Calculating -------------------------------------
       inject symbol      1.179M (± 0.1%) i/s -      5.896M in   5.000158s
      inject to_proc      1.179M (± 0.1%) i/s -      5.898M in   5.001273s
        inject block      1.179M (± 0.1%) i/s -      5.896M in   5.000826s

Comparison:
      inject to_proc:  1179240.8 i/s
       inject symbol:  1179063.1 i/s - same-ish: difference falls within error
        inject block:  1178945.6 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     7.676k i/100ms
   Array#map.flatten     9.628k i/100ms
      Array#flat_map    24.161k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    101.696k (± 4.8%) i/s -    514.292k in   5.069765s
   Array#map.flatten     97.665k (± 4.2%) i/s -    491.028k in   5.037097s
      Array#flat_map    242.366k (± 3.2%) i/s -      1.232M in   5.089646s

Comparison:
      Array#flat_map:   242366.4 i/s
Array#map.flatten(1):   101695.6 i/s - 2.38x  (± 0.00) slower
   Array#map.flatten:    97664.7 i/s - 2.48x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   132.182k i/100ms
  Array#reverse_each   732.809k i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.342M (± 3.5%) i/s -      6.741M in   5.028678s
  Array#reverse_each      7.328M (± 0.1%) i/s -     37.373M in   5.099760s

Comparison:
  Array#reverse_each:  7328436.9 i/s
  Array#reverse.each:  1342281.2 i/s - 5.46x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       495.163k i/100ms
   Enumerable#detect     3.073M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          5.686M (± 6.5%) i/s -    113.392M in  20.063111s
   Enumerable#detect     30.692M (± 1.2%) i/s -    614.538M in  20.025658s

Comparison:
   Enumerable#detect: 30692491.5 i/s
Enumerable#select.first:  5686384.6 i/s - 5.40x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       130.312k i/100ms
Enumerable#select.last
                       264.056k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.348M (± 3.5%) i/s -      6.776M in   5.031882s
Enumerable#select.last
                          2.678M (± 3.7%) i/s -     13.467M in   5.035063s

Comparison:
Enumerable#select.last:  2678453.0 i/s
Enumerable#reverse.detect:  1348416.6 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         1.847k i/100ms
  Enumerable#sort_by     2.076k i/100ms
     Enumerable#sort     2.651k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         18.873k (±19.5%) i/s -     83.115k in   5.018684s
  Enumerable#sort_by     18.858k (±17.7%) i/s -     87.192k in   5.074516s
     Enumerable#sort     25.777k (± 0.5%) i/s -    129.899k in   5.039371s

Comparison:
     Enumerable#sort:    25777.5 i/s
Enumerable#sort_by (Symbol#to_proc):    18873.0 i/s - 1.37x  (± 0.00) slower
  Enumerable#sort_by:    18857.7 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   403.507k i/100ms
Enumerable#sort_by...first
                         4.386k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      4.037M (± 0.1%) i/s -     20.579M in   5.097380s
Enumerable#sort_by...first
                         46.708k (± 3.1%) i/s -    236.844k in   5.075817s

Comparison:
   Enumerable#min_by:  4037144.7 i/s
Enumerable#sort_by...first:    46708.1 i/s - 86.43x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   165.803k i/100ms
            Hash#dup   201.204k i/100ms
Calculating -------------------------------------
              Hash[]      2.024M (± 5.4%) i/s -     10.114M in   5.013188s
            Hash#dup      2.025M (± 4.8%) i/s -     10.261M in   5.079964s

Comparison:
            Hash#dup:  2024999.4 i/s
              Hash[]:  2023915.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   190.900M i/100ms
  Hash#fetch, symbol   190.898M i/100ms
     Hash#[], string     3.748M i/100ms
  Hash#fetch, string     3.878M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.910B (± 0.2%) i/s -      9.736B in   5.098192s
  Hash#fetch, symbol      1.910B (± 0.2%) i/s -      9.736B in   5.096879s
     Hash#[], string     37.550M (± 0.4%) i/s -    191.159M in   5.090898s
  Hash#fetch, string     38.889M (± 0.3%) i/s -    197.785M in   5.085985s

Comparison:
  Hash#fetch, symbol: 1910157317.2 i/s
     Hash#[], symbol: 1909690387.6 i/s - same-ish: difference falls within error
  Hash#fetch, string: 38888539.2 i/s - 49.12x  (± 0.00) slower
     Hash#[], string: 37549918.5 i/s - 50.87x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    47.711M i/100ms
             Hash#[]    47.728M i/100ms
          Hash#[] ||    47.777M i/100ms
          Hash#[] &&    47.774M i/100ms
          Hash#fetch    47.773M i/100ms
 Hash#fetch fallback    47.786M i/100ms
Calculating -------------------------------------
            Hash#dig    477.185M (± 0.3%) i/s -      2.386B in   4.999251s
             Hash#[]    477.347M (± 0.2%) i/s -      2.434B in   5.099344s
          Hash#[] ||    477.432M (± 0.2%) i/s -      2.389B in   5.003609s
          Hash#[] &&    466.756M (± 4.8%) i/s -      2.341B in   5.028193s
          Hash#fetch    477.501M (± 0.2%) i/s -      2.389B in   5.002430s
 Hash#fetch fallback    477.572M (± 0.2%) i/s -      2.389B in   5.003036s

Comparison:
 Hash#fetch fallback: 477571805.0 i/s
          Hash#fetch: 477500602.8 i/s - same-ish: difference falls within error
          Hash#[] ||: 477431644.2 i/s - same-ish: difference falls within error
             Hash#[]: 477346838.9 i/s - same-ish: difference falls within error
            Hash#dig: 477185088.7 i/s - same-ish: difference falls within error
          Hash#[] &&: 466756413.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   190.848M i/100ms
  Hash#fetch + block   191.098M i/100ms
    Hash#fetch + arg   191.112M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.908B (± 0.3%) i/s -      9.542B in   5.001040s
  Hash#fetch + block      1.910B (± 0.2%) i/s -      9.555B in   5.002498s
    Hash#fetch + arg      1.910B (± 0.2%) i/s -      9.556B in   5.003184s

Comparison:
  Hash#fetch + block: 1910035757.2 i/s
    Hash#fetch + arg: 1909908454.2 i/s - same-ish: difference falls within error
  Hash#fetch + const: 1908103651.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    15.977k i/100ms
         sort + to_h     9.984k i/100ms
Calculating -------------------------------------
      sort_by + to_h    167.365k (± 4.9%) i/s -    846.781k in   5.072136s
         sort + to_h    103.178k (± 6.2%) i/s -    519.168k in   5.053872s

Comparison:
      sort_by + to_h:   167365.3 i/s
         sort + to_h:   103178.0 i/s - 1.62x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each    88.341k i/100ms
       Hash#each_key   103.305k i/100ms
Calculating -------------------------------------
      Hash#keys.each    945.104k (± 4.3%) i/s -      4.770M in   5.057449s
       Hash#each_key      1.049M (± 4.0%) i/s -      5.269M in   5.030358s

Comparison:
       Hash#each_key:  1049134.3 i/s
      Hash#keys.each:   945103.7 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   134.000  i/100ms
           Hash#key?    79.513M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.295k (±16.0%) i/s -      6.298k in   5.149444s
           Hash#key?    795.491M (± 0.3%) i/s -      4.055B in   5.097746s

Comparison:
           Hash#key?: 795491036.2 i/s
  Hash#keys.include?:     1294.7 i/s - 614399.99x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    17.006k i/100ms
            Hash#[]=    20.944k i/100ms
Calculating -------------------------------------
         Hash#merge!    211.145k (± 4.6%) i/s -      1.054M in   5.004985s
            Hash#[]=    214.701k (± 4.3%) i/s -      1.089M in   5.082669s

Comparison:
            Hash#[]=:   214701.3 i/s
         Hash#merge!:   211144.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         9.045k i/100ms
      Hash#merge({})     7.446k i/100ms
 Hash#dup#merge!({})    11.918k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        115.753k (± 5.1%) i/s -    578.880k in   5.015336s
      Hash#merge({})     76.120k (± 4.8%) i/s -    379.746k in   5.001566s
 Hash#dup#merge!({})    122.057k (± 4.6%) i/s -    619.736k in   5.089337s

Comparison:
 Hash#dup#merge!({}):   122056.7 i/s
{}#merge!(Hash) do end:   115753.5 i/s - same-ish: difference falls within error
      Hash#merge({}):    76119.8 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   191.040M i/100ms
          Hash#merge   191.124M i/100ms
Calculating -------------------------------------
        Hash#**other      1.908B (± 0.3%) i/s -      9.552B in   5.006826s
          Hash#merge      1.909B (± 0.4%) i/s -      9.556B in   5.006070s

Comparison:
          Hash#merge: 1908960009.7 i/s
        Hash#**other: 1907814986.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   284.000  i/100ms
         Hash#merge!    20.543k i/100ms
Calculating -------------------------------------
          Hash#merge      3.136k (± 5.0%) i/s -     15.904k in   5.084289s
         Hash#merge!    208.230k (± 3.6%) i/s -      1.048M in   5.038419s

Comparison:
         Hash#merge!:   208230.0 i/s
          Hash#merge:     3136.5 i/s - 66.39x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      883.898k i/100ms
Array#each             784.252k i/100ms
Array#each_w/_object   785.906k i/100ms
Hash#select-include      1.021M i/100ms
Calculating -------------------------------------
Hash#native-slice         9.787M (± 4.2%) i/s -     49.498M in   5.067086s
Array#each                7.895M (± 3.2%) i/s -     39.997M in   5.071350s
Array#each_w/_object      7.925M (± 3.4%) i/s -     40.081M in   5.063471s
Hash#select-include      10.169M (± 3.4%) i/s -     51.057M in   5.027174s

Comparison:
Hash#select-include : 10168796.0 i/s
Hash#native-slice   :  9787306.2 i/s - same-ish: difference falls within error
Array#each_w/_object:  7925432.6 i/s - 1.28x  (± 0.00) slower
Array#each          :  7895464.4 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   155.000  i/100ms
         Hash#value?   359.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.595k (± 9.2%) i/s -      7.905k in   5.008693s
         Hash#value?      3.574k (± 0.3%) i/s -     17.950k in   5.022808s

Comparison:
         Hash#value?:     3573.7 i/s
Hash#values.include?:     1595.2 i/s - 2.24x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   190.713M i/100ms
                send   180.831M i/100ms
      method_missing   191.149M i/100ms
Calculating -------------------------------------
                call      1.909B (± 0.3%) i/s -      9.726B in   5.095373s
                send      1.908B (± 0.5%) i/s -      9.584B in   5.023014s
      method_missing      1.910B (± 0.2%) i/s -      9.557B in   5.004544s

Comparison:
      method_missing: 1909765368.2 i/s
                call: 1908876376.0 i/s - same-ish: difference falls within error
                send: 1908071286.3 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    15.775k i/100ms
      Symbol#to_proc    18.135k i/100ms
Calculating -------------------------------------
               Block    181.926k (± 4.4%) i/s -    914.950k in   5.039959s
      Symbol#to_proc    181.328k (± 3.8%) i/s -    906.750k in   5.008521s

Comparison:
               Block:   181926.2 i/s
      Symbol#to_proc:   181327.6 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   191.135M i/100ms
       block + yield   191.131M i/100ms
        unused block   191.144M i/100ms
               yield   191.101M i/100ms
Calculating -------------------------------------
          block.call      1.908B (± 0.4%) i/s -      9.557B in   5.009097s
       block + yield      1.910B (± 0.3%) i/s -      9.557B in   5.004172s
        unused block      1.910B (± 0.2%) i/s -      9.557B in   5.003124s
               yield      1.911B (± 0.1%) i/s -      9.555B in   5.000809s

Comparison:
               yield: 1910708465.5 i/s
        unused block: 1910257859.7 i/s - same-ish: difference falls within error
       block + yield: 1909729034.1 i/s - same-ish: difference falls within error
          block.call: 1907915255.3 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    42.521k i/100ms
      range#include?   332.000  i/100ms
       range#member?   644.000  i/100ms
       plain compare    32.477k i/100ms
Calculating -------------------------------------
        range#cover?    227.517k (±33.6%) i/s -      1.021M in   5.015433s
      range#include?      8.160k (±37.0%) i/s -     28.884k in   5.045417s
       range#member?      7.472k (±41.4%) i/s -     19.320k in   5.200954s
       plain compare    498.461k (±35.5%) i/s -      1.299M in   5.021645s

Comparison:
       plain compare:   498460.7 i/s
        range#cover?:   227516.8 i/s - 2.19x  (± 0.00) slower
      range#include?:     8159.8 i/s - 61.09x  (± 0.00) slower
       range#member?:     7472.1 i/s - 66.71x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     3.332M i/100ms
           String#=~     4.153M i/100ms
          Regexp#===     4.158M i/100ms
        String#match     3.828M i/100ms
Calculating -------------------------------------
       String#match?     35.038M (± 4.2%) i/s -    176.606M in   5.049816s
           String#=~     41.628M (± 0.2%) i/s -    211.793M in   5.087727s
          Regexp#===     41.657M (± 0.2%) i/s -    212.077M in   5.091102s
        String#match     38.209M (± 0.7%) i/s -    191.389M in   5.009224s

Comparison:
          Regexp#===: 41656575.5 i/s
           String#=~: 41628250.6 i/s - same-ish: difference falls within error
        String#match: 38208865.7 i/s - 1.09x  (± 0.00) slower
       String#match?: 35038499.4 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.148M i/100ms
      String#casecmp     2.641M i/100ms
Calculating -------------------------------------
String#downcase + ==     12.194M (± 4.8%) i/s -     60.857M in   5.002630s
      String#casecmp     26.497M (± 0.1%) i/s -    134.669M in   5.082397s

Comparison:
      String#casecmp: 26497132.2 i/s
String#downcase + ==: 12194382.5 i/s - 2.17x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+   190.904M i/100ms
       String#concat   191.034M i/100ms
       String#append   191.178M i/100ms
         "foo" "bar"   191.147M i/100ms
  "#{'foo'}#{'bar'}"   191.081M i/100ms
Calculating -------------------------------------
            String#+      1.907B (± 0.7%) i/s -      9.545B in   5.006119s
       String#concat      1.910B (± 0.2%) i/s -      9.552B in   5.000388s
       String#append      1.910B (± 0.2%) i/s -      9.559B in   5.005215s
         "foo" "bar"      1.910B (± 0.2%) i/s -      9.557B in   5.002607s
  "#{'foo'}#{'bar'}"      1.910B (± 0.2%) i/s -      9.554B in   5.001266s

Comparison:
         "foo" "bar": 1910476617.6 i/s
  "#{'foo'}#{'bar'}": 1910334632.0 i/s - same-ish: difference falls within error
       String#concat: 1910196690.8 i/s - same-ish: difference falls within error
       String#append: 1909800528.1 i/s - same-ish: difference falls within error
            String#+: 1906794424.0 i/s - same-ish: difference falls within error

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   190.875M i/100ms
          String#dup   191.100M i/100ms
Calculating -------------------------------------
           String#+@      1.908B (± 0.4%) i/s -      9.544B in   5.002008s
          String#dup      1.909B (± 0.4%) i/s -      9.555B in   5.004363s

Comparison:
          String#dup: 1909363340.2 i/s
           String#+@: 1908011595.8 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.031M i/100ms
       String#match?     1.069M i/100ms
    String#end_with?    11.931M i/100ms
Calculating -------------------------------------
           String#=~     10.413M (± 2.7%) i/s -     52.596M in   5.054664s
       String#match?     10.597M (± 2.5%) i/s -     53.450M in   5.047418s
    String#end_with?    119.338M (± 0.3%) i/s -    608.477M in   5.098817s

Comparison:
    String#end_with?: 119337785.2 i/s
       String#match?: 10596677.4 i/s - 11.26x  (± 0.00) slower
           String#=~: 10413403.8 i/s - 11.46x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    49.402k i/100ms
          String#sub   367.047k i/100ms
String#dup["string"]=
                        14.932M i/100ms
Calculating -------------------------------------
         String#gsub    694.047k (± 3.9%) i/s -      3.508M in   5.063474s
          String#sub      4.093M (± 7.4%) i/s -     20.555M in   5.052231s
String#dup["string"]=
                        149.320M (± 0.1%) i/s -    746.592M in   4.999952s

Comparison:
String#dup["string"]=: 149319853.0 i/s
          String#sub:  4093124.5 i/s - 36.48x  (± 0.00) slower
         String#gsub:   694046.6 i/s - 215.14x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    53.812k i/100ms
           String#tr    99.501k i/100ms
Calculating -------------------------------------
         String#gsub      1.725M (± 7.8%) i/s -      8.556M in   5.001246s
           String#tr    990.240k (± 4.7%) i/s -      4.975M in   5.035865s

Comparison:
         String#gsub:  1724546.6 i/s
           String#tr:   990240.1 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   191.047M i/100ms
         With Freeze   190.792M i/100ms
Calculating -------------------------------------
      Without Freeze      1.908B (± 0.4%) i/s -      9.552B in   5.007338s
         With Freeze      1.908B (± 0.8%) i/s -      9.540B in   5.000033s

Comparison:
         With Freeze: 1908016701.3 i/s
      Without Freeze: 1907700086.8 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     4.385k i/100ms
      String#squeeze    45.235k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     61.133k (± 5.7%) i/s -    306.950k in   5.039032s
      String#squeeze    453.188k (± 2.7%) i/s -      2.307M in   5.094853s

Comparison:
      String#squeeze:   453188.0 i/s
 String#gsub/regex+/:    61133.4 i/s - 7.41x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     2.024M i/100ms
       String#match?     2.219M i/100ms
  String#start_with?     1.513M i/100ms
Calculating -------------------------------------
           String#=~     20.516M (± 2.8%) i/s -    103.243M in   5.036492s
       String#match?     22.649M (± 3.8%) i/s -    113.146M in   5.003524s
  String#start_with?     15.289M (± 3.7%) i/s -     77.180M in   5.055751s

Comparison:
       String#match?: 22648835.8 i/s
           String#=~: 20516212.1 i/s - 1.10x  (± 0.00) slower
  String#start_with?: 15288559.1 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   221.558k i/100ms
    String#[0, n] ==   145.448k i/100ms
   String#[RANGE] ==   163.469k i/100ms
   String#[0...n] ==   132.157k i/100ms
Calculating -------------------------------------
  String#start_with?      2.655M (± 4.4%) i/s -     13.293M in   5.018299s
    String#[0, n] ==      1.520M (± 4.5%) i/s -      7.709M in   5.081178s
   String#[RANGE] ==      1.666M (± 5.2%) i/s -      8.337M in   5.017928s
   String#[0...n] ==      1.312M (± 3.2%) i/s -      6.608M in   5.041153s

Comparison:
  String#start_with?:  2654690.7 i/s
   String#[RANGE] ==:  1666291.3 i/s - 1.59x  (± 0.00) slower
    String#[0, n] ==:  1520372.8 i/s - 1.75x  (± 0.00) slower
   String#[0...n] ==:  1312256.9 i/s - 2.02x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    15.883M i/100ms
 String#sub!'string'   453.101k i/100ms
String#gsub!'string'    68.905k i/100ms
  String#[/regexp/]=     3.144M i/100ms
 String#sub!/regexp/     1.593M i/100ms
String#gsub!/regexp/   430.624k i/100ms
Calculating -------------------------------------
  String#['string']=    159.016M (± 0.2%) i/s -    810.042M in   5.094107s
 String#sub!'string'      4.756M (±18.3%) i/s -     21.296M in   5.018847s
String#gsub!'string'    759.376k (± 2.6%) i/s -      3.859M in   5.085131s
  String#[/regexp/]=     31.442M (± 0.0%) i/s -    160.332M in   5.099314s
 String#sub!/regexp/     15.836M (± 3.5%) i/s -     79.667M in   5.037595s
String#gsub!/regexp/      4.396M (± 6.2%) i/s -     21.962M in   5.016163s

Comparison:
  String#['string']=: 159016080.2 i/s
  String#[/regexp/]=: 31441916.8 i/s - 5.06x  (± 0.00) slower
 String#sub!/regexp/: 15836156.8 i/s - 10.04x  (± 0.00) slower
 String#sub!'string':  4756471.8 i/s - 33.43x  (± 0.00) slower
String#gsub!/regexp/:  4396287.1 i/s - 36.17x  (± 0.00) slower
String#gsub!'string':   759376.0 i/s - 209.40x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.564M i/100ms
        String#chomp     2.458M i/100ms
String#delete_suffix     4.569M i/100ms
Calculating -------------------------------------
          String#sub     15.829M (± 3.7%) i/s -     79.741M in   5.045225s
        String#chomp     24.568M (± 4.0%) i/s -    122.875M in   5.010020s
String#delete_suffix     45.451M (± 1.4%) i/s -    228.430M in   5.026824s

Comparison:
String#delete_suffix: 45451330.5 i/s
        String#chomp: 24567848.2 i/s - 1.85x  (± 0.00) slower
          String#sub: 15828896.1 i/s - 2.87x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix     1.618M i/100ms
          String#sub     5.690M i/100ms
Calculating -------------------------------------
String#delete_prefix     16.836M (± 4.4%) i/s -     84.138M in   5.007435s
          String#sub     56.850M (± 0.3%) i/s -    284.475M in   5.003978s

Comparison:
          String#sub: 56850310.2 i/s
String#delete_prefix: 16836038.0 i/s - 3.38x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.021M i/100ms
    String#unpack[0]     1.143M i/100ms
Calculating -------------------------------------
      String#unpack1     11.632M (± 4.1%) i/s -     58.192M in   5.011855s
    String#unpack[0]     11.665M (± 3.2%) i/s -     58.292M in   5.002694s

Comparison:
    String#unpack[0]: 11664670.6 i/s
      String#unpack1: 11632201.6 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.2.0-dev-dc3fc7ef, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    11.288k i/100ms
          Time.parse   136.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    116.862k (±25.4%) i/s -    530.536k in   5.014339s
          Time.parse      2.854k (±17.2%) i/s -     13.600k in   5.030180s

Comparison:
        Time.iso8601:   116861.8 i/s
          Time.parse:     2854.2 i/s - 40.94x  (± 0.00) slower

