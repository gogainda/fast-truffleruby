$ ruby -v code/general/inheritance-check.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   688.951k i/100ms
  ancestors.include?   116.880k i/100ms
Calculating -------------------------------------
  less than or equal      7.428M (± 3.6%) i/s -     37.203M in   5.015513s
  ancestors.include?      1.166M (± 4.1%) i/s -      5.844M in   5.022461s

Comparison:
  less than or equal:  7427803.9 i/s
  ancestors.include?:  1165581.9 i/s - 6.37x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   149.090M i/100ms
             &method   149.324M i/100ms
Calculating -------------------------------------
              normal      1.491B (± 0.3%) i/s -      7.454B in   4.999597s
             &method      1.493B (± 0.2%) i/s -      7.466B in   5.002337s

Comparison:
             &method: 1492549444.0 i/s
              normal: 1491031239.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   148.962M i/100ms
          OpenStruct     2.896k i/100ms
Calculating -------------------------------------
                Hash      1.490B (± 0.4%) i/s -      7.448B in   4.999735s
          OpenStruct     24.706k (±11.1%) i/s -    121.632k in   5.002398s

Comparison:
                Hash: 1489715042.3 i/s
          OpenStruct:    24706.3 i/s - 60296.94x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     7.780k i/100ms
         respond_to?   149.394M i/100ms
Calculating -------------------------------------
      begin...rescue     53.347k (± 2.8%) i/s -    272.300k in   5.108331s
         respond_to?      1.492B (± 0.5%) i/s -      7.470B in   5.008283s

Comparison:
         respond_to?: 1491509175.9 i/s
      begin...rescue:    53346.8 i/s - 27958.76x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     23.863  (± 0.0%) i/s -    120.000  in   5.028941s
         Kernel loop      0.274  (± 0.0%) i/s -      2.000  in   7.287190s

Comparison:
          While Loop:       23.9 i/s
         Kernel loop:        0.3 i/s - 86.94x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    32.487k i/100ms
       Kernel#format    50.451k i/100ms
            String#%    50.907k i/100ms
Calculating -------------------------------------
         Float#round    347.444k (± 2.6%) i/s -      1.754M in   5.052588s
       Kernel#format    504.365k (± 1.7%) i/s -      2.523M in   5.003011s
            String#%    505.723k (± 1.7%) i/s -      2.545M in   5.034712s

Comparison:
            String#%:   505722.6 i/s
       Kernel#format:   504365.4 i/s - same-ish: difference falls within error
         Float#round:   347443.6 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        87.000  i/100ms
       define_method   109.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.917k (±50.7%) i/s -      4.089k in   5.160108s
       define_method      3.569k (±49.4%) i/s -      5.995k in   5.002412s

Comparison:
       define_method:     3568.9 i/s
module_eval with string:     1917.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/assignment.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   149.110M i/100ms
Sequential Assignment
                       149.030M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.491B (± 0.3%) i/s -      7.456B in   4.999279s
Sequential Assignment
                          1.492B (± 0.2%) i/s -      7.601B in   5.093489s

Comparison:
Sequential Assignment: 1492211289.2 i/s
 Parallel Assignment: 1491327450.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       149.187M i/100ms
Function with splat arguments
                       528.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.490B (± 0.6%) i/s -      7.459B in   5.006093s
Function with splat arguments
                          5.473k (± 4.3%) i/s -     27.456k in   5.026476s

Comparison:
Function with single Array argument: 1490101565.2 i/s
Function with splat arguments:     5472.9 i/s - 272270.80x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   149.244M i/100ms
       attr_accessor   149.336M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.491B (± 0.4%) i/s -      7.462B in   5.005997s
       attr_accessor      1.492B (± 0.3%) i/s -      7.467B in   5.004176s

Comparison:
       attr_accessor: 1492121057.3 i/s
   getter_and_setter: 1490675468.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   149.055M i/100ms
          OpenStruct   149.255M i/100ms
Calculating -------------------------------------
                Hash      1.491B (± 0.3%) i/s -      7.602B in   5.098703s
          OpenStruct      1.492B (± 0.3%) i/s -      7.463B in   5.002992s

Comparison:
          OpenStruct: 1491664827.4 i/s
                Hash: 1490944824.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   148.764M i/100ms
  Hash#fetch + block   238.541M i/100ms
    Hash#fetch + arg   149.291M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.492B (± 0.2%) i/s -      7.587B in   5.084396s
  Hash#fetch + block      2.388B (± 0.2%) i/s -     12.166B in   5.095424s
    Hash#fetch + arg      1.491B (± 0.5%) i/s -      7.465B in   5.005058s

Comparison:
  Hash#fetch + block: 2387562045.8 i/s
  Hash#fetch + const: 1492211238.9 i/s - 1.60x  (± 0.00) slower
    Hash#fetch + arg: 1491438851.2 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   198.000  i/100ms
         Hash#value?     5.880k i/100ms
Calculating -------------------------------------
Hash#values.include?      2.310k (±11.0%) i/s -     11.484k in   5.060331s
         Hash#value?     60.408k (± 0.1%) i/s -    305.760k in   5.061568s

Comparison:
         Hash#value?:    60408.2 i/s
Hash#values.include?:     2309.7 i/s - 26.15x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   180.000  i/100ms
           Hash#key?    14.312M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.851k (±11.7%) i/s -      9.180k in   5.056432s
           Hash#key?    143.147M (± 0.3%) i/s -    729.897M in   5.098982s

Comparison:
           Hash#key?: 143146964.4 i/s
  Hash#keys.include?:     1851.1 i/s - 77330.13x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   149.018M i/100ms
          Hash#merge   148.962M i/100ms
Calculating -------------------------------------
        Hash#**other      1.491B (± 0.3%) i/s -      7.600B in   5.095537s
          Hash#merge      1.492B (± 0.2%) i/s -      7.597B in   5.090209s

Comparison:
          Hash#merge: 1492494191.0 i/s
        Hash#**other: 1491496847.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   268.000  i/100ms
         Hash#merge!    20.238k i/100ms
Calculating -------------------------------------
          Hash#merge      3.044k (± 3.9%) i/s -     15.276k in   5.027286s
         Hash#merge!    202.830k (± 3.4%) i/s -      1.032M in   5.094696s

Comparison:
         Hash#merge!:   202830.5 i/s
          Hash#merge:     3043.6 i/s - 66.64x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.040M i/100ms
Array#each             872.325k i/100ms
Array#each_w/_object   871.119k i/100ms
Hash#select-include      1.242M i/100ms
Calculating -------------------------------------
Hash#native-slice        10.759M (± 2.8%) i/s -     54.070M in   5.029794s
Array#each                8.804M (± 2.4%) i/s -     44.489M in   5.056567s
Array#each_w/_object      8.783M (± 2.5%) i/s -     44.427M in   5.061979s
Hash#select-include      12.467M (± 3.2%) i/s -     63.327M in   5.084780s

Comparison:
Hash#select-include : 12467250.8 i/s
Hash#native-slice   : 10758794.7 i/s - 1.16x  (± 0.00) slower
Array#each          :  8803751.3 i/s - 1.42x  (± 0.00) slower
Array#each_w/_object:  8782513.9 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    15.755k i/100ms
            Hash#[]=    20.381k i/100ms
Calculating -------------------------------------
         Hash#merge!    203.835k (± 3.7%) i/s -      1.024M in   5.031294s
            Hash#[]=    207.481k (± 3.3%) i/s -      1.039M in   5.015446s

Comparison:
            Hash#[]=:   207481.0 i/s
         Hash#merge!:   203835.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         7.398k i/100ms
      Hash#merge({})     7.010k i/100ms
 Hash#dup#merge!({})    11.693k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        111.704k (± 4.5%) i/s -    562.248k in   5.044798s
      Hash#merge({})     71.546k (± 3.9%) i/s -    357.510k in   5.005304s
 Hash#dup#merge!({})    120.926k (± 3.5%) i/s -    608.036k in   5.034837s

Comparison:
 Hash#dup#merge!({}):   120926.1 i/s
{}#merge!(Hash) do end:   111703.8 i/s - same-ish: difference falls within error
      Hash#merge({}):    71545.7 i/s - 1.69x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each    98.473k i/100ms
       Hash#each_key   111.042k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.032M (± 3.9%) i/s -      5.219M in   5.067347s
       Hash#each_key      1.104M (± 3.6%) i/s -      5.552M in   5.037882s

Comparison:
       Hash#each_key:  1103635.1 i/s
      Hash#keys.each:  1031636.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    59.614M i/100ms
             Hash#[]    59.643M i/100ms
          Hash#[] ||    59.731M i/100ms
          Hash#[] &&    59.746M i/100ms
          Hash#fetch    59.735M i/100ms
 Hash#fetch fallback    59.728M i/100ms
Calculating -------------------------------------
            Hash#dig    596.828M (± 0.2%) i/s -      3.040B in   5.094115s
             Hash#[]    596.884M (± 0.3%) i/s -      3.042B in   5.096188s
          Hash#[] ||    596.905M (± 0.2%) i/s -      2.987B in   5.003424s
          Hash#[] &&    597.097M (± 0.3%) i/s -      2.987B in   5.003083s
          Hash#fetch    597.212M (± 0.2%) i/s -      2.987B in   5.001136s
 Hash#fetch fallback    597.226M (± 0.2%) i/s -      2.986B in   5.000458s

Comparison:
 Hash#fetch fallback: 597226125.6 i/s
          Hash#fetch: 597211798.7 i/s - same-ish: difference falls within error
          Hash#[] &&: 597097390.9 i/s - same-ish: difference falls within error
          Hash#[] ||: 596905355.2 i/s - same-ish: difference falls within error
             Hash#[]: 596884260.3 i/s - same-ish: difference falls within error
            Hash#dig: 596828274.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   149.171M i/100ms
  Hash#fetch, symbol   238.765M i/100ms
     Hash#[], string     5.232M i/100ms
  Hash#fetch, string     5.062M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.492B (± 0.2%) i/s -      7.608B in   5.098663s
  Hash#fetch, symbol      2.388B (± 0.2%) i/s -     12.177B in   5.099662s
     Hash#[], string     52.258M (± 0.3%) i/s -    261.585M in   5.005664s
  Hash#fetch, string     50.582M (± 0.2%) i/s -    253.123M in   5.004263s

Comparison:
  Hash#fetch, symbol: 2387818775.7 i/s
     Hash#[], symbol: 1492105403.5 i/s - 1.60x  (± 0.00) slower
     Hash#[], string: 52258134.9 i/s - 45.69x  (± 0.00) slower
  Hash#fetch, string: 50581843.0 i/s - 47.21x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    12.461k i/100ms
         sort + to_h     6.338k i/100ms
Calculating -------------------------------------
      sort_by + to_h    244.281k (± 5.1%) i/s -      1.221M in   5.013035s
         sort + to_h     63.760k (± 7.5%) i/s -    323.238k in   5.097104s

Comparison:
      sort_by + to_h:   244281.2 i/s
         sort + to_h:    63759.8 i/s - 3.83x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   183.835k i/100ms
            Hash#dup   188.185k i/100ms
Calculating -------------------------------------
              Hash[]      1.908M (± 4.2%) i/s -      9.559M in   5.018908s
            Hash#dup      1.895M (± 3.5%) i/s -      9.597M in   5.070078s

Comparison:
              Hash[]:  1908171.5 i/s
            Hash#dup:  1895434.6 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    15.041k i/100ms
      range#include?   192.000  i/100ms
       range#member?   148.000  i/100ms
       plain compare    25.887k i/100ms
Calculating -------------------------------------
        range#cover?    140.943k (±34.4%) i/s -    631.722k in   5.077154s
      range#include?      4.585k (±44.1%) i/s -     16.512k in   5.084943s
       range#member?      5.423k (±42.4%) i/s -      8.732k in   5.417554s
       plain compare    233.621k (±22.2%) i/s -      1.113M in   5.015568s

Comparison:
       plain compare:   233621.5 i/s
        range#cover?:   140943.0 i/s - same-ish: difference falls within error
       range#member?:     5422.5 i/s - 43.08x  (± 0.00) slower
      range#include?:     4584.9 i/s - 50.96x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    15.023k i/100ms
      Symbol#to_proc    16.586k i/100ms
Calculating -------------------------------------
               Block    166.105k (± 6.3%) i/s -    826.265k in   5.002469s
      Symbol#to_proc    166.521k (± 2.9%) i/s -    845.886k in   5.084132s

Comparison:
      Symbol#to_proc:   166520.6 i/s
               Block:   166105.2 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   238.405M i/100ms
       block + yield   238.812M i/100ms
        unused block   238.948M i/100ms
               yield   238.910M i/100ms
Calculating -------------------------------------
          block.call      2.386B (± 0.3%) i/s -     12.159B in   5.095751s
       block + yield      2.386B (± 0.3%) i/s -     11.941B in   5.004010s
        unused block      2.387B (± 0.2%) i/s -     11.947B in   5.004914s
               yield      2.388B (± 0.2%) i/s -     11.946B in   5.002482s

Comparison:
               yield: 2387925482.7 i/s
        unused block: 2387144069.5 i/s - same-ish: difference falls within error
       block + yield: 2386232302.4 i/s - same-ish: difference falls within error
          block.call: 2386057873.3 i/s - same-ish: difference falls within error

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub   264.764k i/100ms
        String#chomp     2.396M i/100ms
String#delete_suffix     5.132M i/100ms
Calculating -------------------------------------
          String#sub      4.318M (± 7.6%) i/s -     21.446M in   4.999266s
        String#chomp     24.632M (± 3.3%) i/s -    124.570M in   5.063433s
String#delete_suffix     51.116M (± 0.6%) i/s -    256.611M in   5.020334s

Comparison:
String#delete_suffix: 51116167.9 i/s
        String#chomp: 24631512.7 i/s - 2.08x  (± 0.00) slower
          String#sub:  4318176.4 i/s - 11.84x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.274M i/100ms
    String#unpack[0]     1.313M i/100ms
Calculating -------------------------------------
      String#unpack1     13.431M (± 3.0%) i/s -     67.498M in   5.030336s
    String#unpack[0]     13.224M (± 3.1%) i/s -     66.947M in   5.067896s

Comparison:
      String#unpack1: 13431332.0 i/s
    String#unpack[0]: 13223852.5 i/s - same-ish: difference falls within error

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   149.278M i/100ms
          String#dup   149.225M i/100ms
Calculating -------------------------------------
           String#+@      1.491B (± 0.4%) i/s -      7.464B in   5.006170s
          String#dup      1.492B (± 0.5%) i/s -      7.461B in   5.002140s

Comparison:
          String#dup: 1491647003.2 i/s
           String#+@: 1490958349.6 i/s - same-ish: difference falls within error

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix     1.844M i/100ms
          String#sub   437.869k i/100ms
Calculating -------------------------------------
String#delete_prefix     19.162M (± 4.8%) i/s -     95.880M in   5.016427s
          String#sub      4.408M (± 5.6%) i/s -     22.331M in   5.082065s

Comparison:
String#delete_prefix: 19161581.3 i/s
          String#sub:  4408341.9 i/s - 4.35x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   668.414k i/100ms
       String#match?     1.664M i/100ms
  String#start_with?     1.687M i/100ms
Calculating -------------------------------------
           String#=~      7.054M (± 5.1%) i/s -     35.426M in   5.036499s
       String#match?     17.061M (± 3.7%) i/s -     86.506M in   5.078089s
  String#start_with?     16.964M (± 3.2%) i/s -     86.058M in   5.078585s

Comparison:
       String#match?: 17061027.0 i/s
  String#start_with?: 16964016.4 i/s - same-ish: difference falls within error
           String#=~:  7053705.9 i/s - 2.42x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+   149.189M i/100ms
       String#concat   149.231M i/100ms
       String#append   149.369M i/100ms
         "foo" "bar"   149.045M i/100ms
  "#{'foo'}#{'bar'}"   149.369M i/100ms
Calculating -------------------------------------
            String#+      1.492B (± 0.3%) i/s -      7.459B in   5.000734s
       String#concat      1.492B (± 0.2%) i/s -      7.611B in   5.099401s
       String#append      1.492B (± 0.3%) i/s -      7.468B in   5.005658s
         "foo" "bar"      1.493B (± 0.2%) i/s -      7.601B in   5.092199s
  "#{'foo'}#{'bar'}"      1.492B (± 0.4%) i/s -      7.468B in   5.005424s

Comparison:
         "foo" "bar": 1492742210.1 i/s
       String#concat: 1492499379.5 i/s - same-ish: difference falls within error
  "#{'foo'}#{'bar'}": 1492088442.7 i/s - same-ish: difference falls within error
       String#append: 1492015704.6 i/s - same-ish: difference falls within error
            String#+: 1491687384.1 i/s - same-ish: difference falls within error

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     2.237M i/100ms
           String#=~     2.190M i/100ms
          Regexp#===     2.348M i/100ms
        String#match     1.964M i/100ms
Calculating -------------------------------------
       String#match?     23.785M (± 3.6%) i/s -    120.795M in   5.085670s
           String#=~     22.505M (± 3.5%) i/s -    113.862M in   5.065972s
          Regexp#===     24.327M (± 3.4%) i/s -    122.107M in   5.025662s
        String#match     19.649M (± 2.9%) i/s -     98.178M in   5.001323s

Comparison:
          Regexp#===: 24327410.6 i/s
       String#match?: 23784816.0 i/s - same-ish: difference falls within error
           String#=~: 22504634.4 i/s - 1.08x  (± 0.00) slower
        String#match: 19648897.2 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   427.572k i/100ms
       String#match?     1.133M i/100ms
    String#end_with?    15.653M i/100ms
Calculating -------------------------------------
           String#=~      5.880M (± 5.5%) i/s -     29.502M in   5.034120s
       String#match?     11.397M (± 3.3%) i/s -     57.803M in   5.077971s
    String#end_with?    156.377M (± 0.3%) i/s -    782.651M in   5.004953s

Comparison:
    String#end_with?: 156377271.1 i/s
       String#match?: 11396634.7 i/s - 13.72x  (± 0.00) slower
           String#=~:  5879721.2 i/s - 26.60x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    16.589M i/100ms
 String#sub!'string'   385.311k i/100ms
String#gsub!'string'    87.044k i/100ms
  String#[/regexp/]=   625.284k i/100ms
 String#sub!/regexp/   397.672k i/100ms
String#gsub!/regexp/   272.120k i/100ms
Calculating -------------------------------------
  String#['string']=    165.911M (± 0.0%) i/s -    829.459M in   4.999414s
 String#sub!'string'      4.737M (± 5.9%) i/s -     23.889M in   5.061259s
String#gsub!'string'      1.009M (± 3.1%) i/s -      5.049M in   5.009467s
  String#[/regexp/]=      6.320M (± 5.5%) i/s -     31.889M in   5.062562s
 String#sub!/regexp/      4.090M (± 4.5%) i/s -     20.679M in   5.067422s
String#gsub!/regexp/      3.325M (± 4.7%) i/s -     16.599M in   5.004829s

Comparison:
  String#['string']=: 165911316.2 i/s
  String#[/regexp/]=:  6319504.3 i/s - 26.25x  (± 0.00) slower
 String#sub!'string':  4737376.0 i/s - 35.02x  (± 0.00) slower
 String#sub!/regexp/:  4089827.3 i/s - 40.57x  (± 0.00) slower
String#gsub!/regexp/:  3324997.2 i/s - 49.90x  (± 0.00) slower
String#gsub!'string':  1008914.7 i/s - 164.45x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    49.939k i/100ms
          String#sub   356.840k i/100ms
String#dup["string"]=
                        16.583M i/100ms
Calculating -------------------------------------
         String#gsub    917.169k (± 3.5%) i/s -      4.594M in   5.016599s
          String#sub      4.437M (± 6.7%) i/s -     22.124M in   5.010617s
String#dup["string"]=
                        165.901M (± 0.0%) i/s -    845.752M in   5.097933s

Comparison:
String#dup["string"]=: 165901033.7 i/s
          String#sub:  4436899.4 i/s - 37.39x  (± 0.00) slower
         String#gsub:   917169.0 i/s - 180.88x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   149.010M i/100ms
         With Freeze   147.363M i/100ms
Calculating -------------------------------------
      Without Freeze      1.490B (± 0.3%) i/s -      7.450B in   4.998957s
         With Freeze      1.492B (± 0.2%) i/s -      7.516B in   5.036571s

Comparison:
         With Freeze: 1492199884.5 i/s
      Without Freeze: 1490422638.0 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     3.880k i/100ms
      String#squeeze    57.131k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     53.422k (± 4.7%) i/s -    267.720k in   5.023588s
      String#squeeze    576.410k (± 2.6%) i/s -      2.914M in   5.058620s

Comparison:
      String#squeeze:   576410.0 i/s
 String#gsub/regex+/:    53421.5 i/s - 10.79x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    53.670k i/100ms
           String#tr   113.253k i/100ms
Calculating -------------------------------------
         String#gsub      1.825M (± 7.0%) i/s -      9.070M in   5.001196s
           String#tr      1.123M (± 4.2%) i/s -      5.663M in   5.053016s

Comparison:
         String#gsub:  1825049.2 i/s
           String#tr:  1122657.0 i/s - 1.63x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   320.782k i/100ms
    String#[0, n] ==   165.311k i/100ms
   String#[RANGE] ==   182.424k i/100ms
   String#[0...n] ==   118.009k i/100ms
Calculating -------------------------------------
  String#start_with?      3.278M (± 3.2%) i/s -     16.681M in   5.094267s
    String#[0, n] ==      1.687M (± 3.8%) i/s -      8.596M in   5.102339s
   String#[RANGE] ==      1.808M (± 4.4%) i/s -      9.121M in   5.055193s
   String#[0...n] ==      1.181M (± 2.8%) i/s -      5.900M in   5.002103s

Comparison:
  String#start_with?:  3277979.4 i/s
   String#[RANGE] ==:  1808019.2 i/s - 1.81x  (± 0.00) slower
    String#[0, n] ==:  1687291.0 i/s - 1.94x  (± 0.00) slower
   String#[0...n] ==:  1180576.1 i/s - 2.78x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.173M i/100ms
      String#casecmp     3.926M i/100ms
Calculating -------------------------------------
String#downcase + ==     12.753M (± 3.7%) i/s -     64.535M in   5.067479s
      String#casecmp     39.294M (± 0.1%) i/s -    200.210M in   5.095239s

Comparison:
      String#casecmp: 39293590.8 i/s
String#downcase + ==: 12753423.1 i/s - 3.08x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   377.000  i/100ms
          Date.parse   110.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     13.285k (±32.1%) i/s -     51.649k in   5.004016s
          Date.parse      6.204k (±37.3%) i/s -     23.870k in   4.991723s

Comparison:
        Date.iso8601:    13284.8 i/s
          Date.parse:     6204.1 i/s - 2.14x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   145.300k i/100ms
           Array#map   540.819k i/100ms
Calculating -------------------------------------
   Array#each + push      1.465M (± 3.5%) i/s -      7.410M in   5.065498s
           Array#map      5.282M (± 7.1%) i/s -     26.500M in   5.042903s

Comparison:
           Array#map:  5282120.9 i/s
   Array#each + push:  1464773.0 i/s - 3.61x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   168.050k i/100ms
      inject to_proc   168.092k i/100ms
        inject block   168.079k i/100ms
Calculating -------------------------------------
       inject symbol      1.680M (± 0.0%) i/s -      8.403M in   5.000404s
      inject to_proc      1.681M (± 0.0%) i/s -      8.405M in   5.000632s
        inject block      1.680M (± 0.0%) i/s -      8.404M in   5.000976s

Comparison:
      inject to_proc:  1680707.8 i/s
        inject block:  1680462.1 i/s - same-ish: difference falls within error
       inject symbol:  1680364.6 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    10.571M i/100ms
               #each    14.282M i/100ms
Calculating -------------------------------------
            For loop    105.698M (± 0.1%) i/s -    528.572M in   5.000781s
               #each    142.706M (± 0.2%) i/s -    714.083M in   5.003901s

Comparison:
               #each: 142705680.9 i/s
            For loop: 105697952.2 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   186.853k i/100ms
  Array#reverse_each     1.479M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.871M (± 3.3%) i/s -      9.343M in   5.000132s
  Array#reverse_each     14.783M (± 0.0%) i/s -     73.930M in   5.000940s

Comparison:
  Array#reverse_each: 14783233.9 i/s
  Array#reverse.each:  1870575.8 i/s - 7.90x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    10.120k i/100ms
   Array#map.flatten    10.983k i/100ms
      Array#flat_map    32.960k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    107.505k (± 3.2%) i/s -    546.480k in   5.088628s
   Array#map.flatten    109.382k (± 3.4%) i/s -    549.150k in   5.026576s
      Array#flat_map    329.378k (± 2.9%) i/s -      1.648M in   5.007734s

Comparison:
      Array#flat_map:   329378.3 i/s
   Array#map.flatten:   109382.4 i/s - 3.01x  (± 0.00) slower
Array#map.flatten(1):   107505.0 i/s - 3.06x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       184.484k i/100ms
Enumerable#select.last
                       396.642k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.878M (± 3.1%) i/s -      9.409M in   5.014191s
Enumerable#select.last
                          3.975M (± 3.3%) i/s -     20.229M in   5.094269s

Comparison:
Enumerable#select.last:  3975438.4 i/s
Enumerable#reverse.detect:  1878341.3 i/s - 2.12x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.483k i/100ms
  Enumerable#sort_by     2.729k i/100ms
     Enumerable#sort     4.773k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         28.201k (±13.2%) i/s -    139.048k in   5.037030s
  Enumerable#sort_by     31.661k (± 4.1%) i/s -    158.282k in   5.008125s
     Enumerable#sort     48.841k (± 0.3%) i/s -    248.196k in   5.081723s

Comparison:
     Enumerable#sort:    48841.3 i/s
  Enumerable#sort_by:    31660.8 i/s - 1.54x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    28200.8 i/s - 1.73x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   316.299k i/100ms
Enumerable#sort_by...first
                         4.760k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      3.165M (± 0.1%) i/s -     16.131M in   5.096952s
Enumerable#sort_by...first
                         58.190k (± 3.2%) i/s -    295.120k in   5.077193s

Comparison:
   Enumerable#min_by:  3164886.5 i/s
Enumerable#sort_by...first:    58190.0 i/s - 54.39x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       535.816k i/100ms
   Enumerable#detect     3.598M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          5.630M (± 6.0%) i/s -    112.521M in  20.083792s
   Enumerable#detect     35.985M (± 0.1%) i/s -    723.122M in  20.095127s

Comparison:
   Enumerable#detect: 35984955.7 i/s
Enumerable#select.first:  5630475.9 i/s - 6.39x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   700.559k i/100ms
     each_with_index     1.248M i/100ms
Calculating -------------------------------------
          While Loop      7.011M (± 0.0%) i/s -     35.729M in   5.096262s
     each_with_index     12.441M (± 0.1%) i/s -     62.425M in   5.017503s

Comparison:
     each_with_index: 12441388.7 i/s
          While Loop:  7010729.7 i/s - 1.77x  (± 0.00) slower

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   425.311k i/100ms
Calculating -------------------------------------
                find      0.109  (± 0.0%) i/s -      1.000  in   9.145744s
             bsearch      4.243M (± 3.1%) i/s -     21.266M in   5.016433s

Comparison:
             bsearch:  4243347.3 i/s
                find:        0.1 i/s - 38808570.24x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.123  (± 0.0%) i/s -      1.000  in   8.128037s
        Array#insert      0.900  (± 0.0%) i/s -      5.000  in   5.556166s

Comparison:
        Array#insert:        0.9 i/s
       Array#unshift:        0.1 i/s - 7.31x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   149.261M i/100ms
          Array#last   149.219M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.490B (± 0.4%) i/s -      7.463B in   5.009051s
          Array#last      1.492B (± 0.2%) i/s -      7.461B in   5.000434s

Comparison:
          Array#last: 1492073316.0 i/s
          Array#[-1]: 1489936801.9 i/s - same-ish: difference falls within error

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   149.069M i/100ms
          Array#size   149.006M i/100ms
         Array#count   149.360M i/100ms
Calculating -------------------------------------
        Array#length      1.492B (± 0.2%) i/s -      7.603B in   5.096254s
          Array#size      1.491B (± 0.3%) i/s -      7.599B in   5.095979s
         Array#count      1.491B (± 0.3%) i/s -      7.468B in   5.007390s

Comparison:
        Array#length: 1491796668.3 i/s
         Array#count: 1491413652.4 i/s - same-ish: difference falls within error
          Array#size: 1491252548.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    24.599k i/100ms
        Array#sample     2.637M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    250.900k (± 1.7%) i/s -      1.255M in   5.001777s
        Array#sample     26.357M (± 0.1%) i/s -    131.831M in   5.001644s

Comparison:
        Array#sample: 26357449.3 i/s
 Array#shuffle.first:   250899.9 i/s - 105.05x  (± 0.00) slower

$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   238.233M i/100ms
         Array#first   238.043M i/100ms
Calculating -------------------------------------
           Array#[0]      2.385B (± 0.3%) i/s -     12.150B in   5.094999s
         Array#first      2.387B (± 0.2%) i/s -     12.140B in   5.085205s

Comparison:
         Array#first: 2387366114.2 i/s
           Array#[0]: 2384693122.3 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    12.884k i/100ms
          Time.parse    60.000  i/100ms
Calculating -------------------------------------
        Time.iso8601     61.114k (± 2.3%) i/s -    309.216k in   5.062453s
          Time.parse      3.563k (±22.4%) i/s -     14.280k in   4.991502s

Comparison:
        Time.iso8601:    61114.5 i/s
          Time.parse:     3563.0 i/s - 17.15x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.0.0-dev-9fd8b4b9, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   148.924M i/100ms
                send   148.944M i/100ms
      method_missing   149.304M i/100ms
Calculating -------------------------------------
                call      1.491B (± 0.3%) i/s -      7.595B in   5.093401s
                send      1.491B (± 0.3%) i/s -      7.596B in   5.093833s
      method_missing      1.492B (± 0.3%) i/s -      7.465B in   5.003284s

Comparison:
      method_missing: 1492071727.3 i/s
                send: 1491260906.2 i/s - same-ish: difference falls within error
                call: 1491180155.1 i/s - same-ish: difference falls within error

