$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       113.695M i/100ms
Function with splat arguments
                         1.153k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.137B (± 0.8%) i/s -      5.685B in   5.001259s
Function with splat arguments
                         12.789k (± 6.8%) i/s -     64.568k in   5.075639s

Comparison:
Function with single Array argument: 1136728564.9 i/s
Function with splat arguments:    12788.9 i/s - 88884.02x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   113.978M i/100ms
Sequential Assignment
                       113.644M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.136B (± 0.7%) i/s -      5.699B in   5.014883s
Sequential Assignment
                          1.137B (± 0.6%) i/s -      5.796B in   5.098931s

Comparison:
Sequential Assignment: 1136723186.4 i/s
 Parallel Assignment: 1136455443.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   114.292M i/100ms
       attr_accessor   113.441M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.134B (± 0.8%) i/s -      5.715B in   5.038768s
       attr_accessor      1.137B (± 0.9%) i/s -      5.786B in   5.090803s

Comparison:
       attr_accessor: 1136548376.6 i/s
   getter_and_setter: 1134205505.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    10.229k i/100ms
         respond_to?   114.642M i/100ms
Calculating -------------------------------------
      begin...rescue     69.882k (± 3.0%) i/s -    358.015k in   5.127595s
         respond_to?      1.137B (± 0.9%) i/s -      5.732B in   5.040465s

Comparison:
         respond_to?: 1137296196.6 i/s
      begin...rescue:    69882.4 i/s - 16274.43x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   113.513M i/100ms
             &method   114.188M i/100ms
Calculating -------------------------------------
              normal      1.135B (± 0.7%) i/s -      5.676B in   4.999377s
             &method      1.136B (± 0.7%) i/s -      5.709B in   5.026102s

Comparison:
             &method: 1136003879.5 i/s
              normal: 1135333442.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       122.000  i/100ms
       define_method   151.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.076k (±56.8%) i/s -      5.612k in   6.002159s
       define_method      5.812k (±46.9%) i/s -      9.513k in   5.142626s

Comparison:
       define_method:     5812.0 i/s
module_eval with string:     2076.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    83.036k i/100ms
       Kernel#format    71.775k i/100ms
            String#%    73.464k i/100ms
Calculating -------------------------------------
         Float#round    905.138k (± 2.4%) i/s -      4.567M in   5.048623s
       Kernel#format    703.378k (± 3.4%) i/s -      3.517M in   5.006038s
            String#%    722.221k (± 4.5%) i/s -      3.673M in   5.096468s

Comparison:
         Float#round:   905137.9 i/s
            String#%:   722221.1 i/s - 1.25x  (± 0.00) slower
       Kernel#format:   703377.7 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   114.192M i/100ms
          OpenStruct   113.714M i/100ms
Calculating -------------------------------------
                Hash      1.135B (± 0.9%) i/s -      5.710B in   5.028819s
          OpenStruct      1.135B (± 0.6%) i/s -      5.686B in   5.011210s

Comparison:
                Hash: 1135475330.2 i/s
          OpenStruct: 1134641320.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.718M i/100ms
          OpenStruct     3.382k i/100ms
Calculating -------------------------------------
                Hash      1.133B (± 0.6%) i/s -      5.686B in   5.018725s
          OpenStruct     36.341k (±13.4%) i/s -    179.246k in   5.070383s

Comparison:
                Hash: 1132981548.6 i/s
          OpenStruct:    36340.8 i/s - 31176.61x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   884.390k i/100ms
  ancestors.include?   165.832k i/100ms
Calculating -------------------------------------
  less than or equal      8.961M (± 3.5%) i/s -     45.104M in   5.040256s
  ancestors.include?      1.675M (± 4.3%) i/s -      8.457M in   5.059270s

Comparison:
  less than or equal:  8960670.8 i/s
  ancestors.include?:  1674805.2 i/s - 5.35x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     11.344  (± 0.0%) i/s -     57.000  in   5.025261s
         Kernel loop     11.354  (± 0.0%) i/s -     57.000  in   5.020281s

Comparison:
         Kernel loop:       11.4 i/s
          While Loop:       11.3 i/s - 1.00x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   113.702M i/100ms
         Array#first   113.877M i/100ms
Calculating -------------------------------------
           Array#[0]      1.136B (± 1.0%) i/s -      5.685B in   5.004418s
         Array#first      1.137B (± 1.0%) i/s -      5.694B in   5.006189s

Comparison:
         Array#first: 1137475154.2 i/s
           Array#[0]: 1136127731.7 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   114.045M i/100ms
          Array#last   113.663M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.135B (± 0.5%) i/s -      5.702B in   5.023460s
          Array#last      1.135B (± 0.5%) i/s -      5.683B in   5.006986s

Comparison:
          Array#[-1]: 1135156602.5 i/s
          Array#last: 1135071596.8 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   687.750k i/100ms
Calculating -------------------------------------
                find      4.710  (± 0.0%) i/s -     24.000  in   5.095740s
             bsearch      6.761M (± 4.2%) i/s -     34.388M in   5.095341s

Comparison:
             bsearch:  6760746.6 i/s
                find:        4.7 i/s - 1435454.91x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.069  (± 0.0%) i/s -      1.000  in  14.518221s
        Array#insert      1.020  (± 0.0%) i/s -      6.000  in   5.882699s

Comparison:
        Array#insert:        1.0 i/s
       Array#unshift:        0.1 i/s - 14.81x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   113.689M i/100ms
          Array#size   113.559M i/100ms
         Array#count   113.514M i/100ms
Calculating -------------------------------------
        Array#length      1.137B (± 1.1%) i/s -      5.684B in   5.000702s
          Array#size      1.136B (± 0.8%) i/s -      5.792B in   5.099843s
         Array#count      1.134B (± 0.5%) i/s -      5.676B in   5.004053s

Comparison:
        Array#length: 1136856375.2 i/s
          Array#size: 1135705080.4 i/s - same-ish: difference falls within error
         Array#count: 1134253935.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    22.964k i/100ms
        Array#sample     2.626M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    248.362k (± 2.4%) i/s -      1.263M in   5.088598s
        Array#sample     28.031M (± 0.3%) i/s -    141.819M in   5.059382s

Comparison:
        Array#sample: 28031171.4 i/s
 Array#shuffle.first:   248361.9 i/s - 112.86x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601     1.358k i/100ms
          Date.parse   163.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     24.709k (±27.0%) i/s -    108.640k in   5.045066s
          Date.parse     10.045k (±26.7%) i/s -     42.217k in   4.991434s

Comparison:
        Date.iso8601:    24708.9 i/s
          Date.parse:    10045.0 i/s - 2.46x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   220.840k i/100ms
           Array#map     1.018M i/100ms
Calculating -------------------------------------
   Array#each + push      2.440M (± 5.1%) i/s -     12.367M in   5.082240s
           Array#map     10.080M (± 5.4%) i/s -     50.894M in   5.063698s

Comparison:
           Array#map: 10080396.7 i/s
   Array#each + push:  2440012.1 i/s - 4.13x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     9.420M i/100ms
               #each    41.246M i/100ms
Calculating -------------------------------------
            For loop     94.297M (± 0.8%) i/s -    480.417M in   5.095045s
               #each    409.230M (± 1.0%) i/s -      2.062B in   5.039998s

Comparison:
               #each: 409229779.2 i/s
            For loop: 94297258.7 i/s - 4.34x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   837.833k i/100ms
     each_with_index     1.043M i/100ms
Calculating -------------------------------------
          While Loop      8.378M (± 0.0%) i/s -     41.892M in   4.999947s
     each_with_index     10.424M (± 0.0%) i/s -     52.127M in   5.000496s

Comparison:
     each_with_index: 10424327.4 i/s
          While Loop:  8378421.3 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   160.812k i/100ms
      inject to_proc   161.689k i/100ms
        inject block   160.961k i/100ms
Calculating -------------------------------------
       inject symbol      1.594M (± 0.2%) i/s -      8.041M in   5.043518s
      inject to_proc      1.611M (± 0.2%) i/s -      8.084M in   5.019409s
        inject block      1.608M (± 0.2%) i/s -      8.048M in   5.006168s

Comparison:
      inject to_proc:  1610646.7 i/s
        inject block:  1607633.0 i/s - same-ish: difference falls within error
       inject symbol:  1594248.4 i/s - 1.01x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    16.191k i/100ms
   Array#map.flatten    18.195k i/100ms
      Array#flat_map    41.617k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    183.523k (± 5.0%) i/s -    922.887k in   5.042454s
   Array#map.flatten    185.777k (± 4.9%) i/s -    927.945k in   5.008069s
      Array#flat_map    450.292k (± 2.6%) i/s -      2.289M in   5.087042s

Comparison:
      Array#flat_map:   450292.1 i/s
   Array#map.flatten:   185776.7 i/s - 2.42x  (± 0.00) slower
Array#map.flatten(1):   183523.0 i/s - 2.45x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   193.107k i/100ms
  Array#reverse_each     2.304M i/100ms
Calculating -------------------------------------
  Array#reverse.each      2.681M (± 4.2%) i/s -     13.517M in   5.050510s
  Array#reverse_each     23.043M (± 0.4%) i/s -    117.501M in   5.099193s

Comparison:
  Array#reverse_each: 23043342.1 i/s
  Array#reverse.each:  2681449.7 i/s - 8.59x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       604.138k i/100ms
   Enumerable#detect     2.674M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          6.803M (± 5.5%) i/s -    135.931M in  20.064621s
   Enumerable#detect     26.712M (± 0.3%) i/s -    534.835M in  20.022167s

Comparison:
   Enumerable#detect: 26712335.7 i/s
Enumerable#select.first:  6802590.2 i/s - 3.93x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       231.461k i/100ms
Enumerable#select.last
                       398.388k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.609M (± 3.0%) i/s -     13.193M in   5.062135s
Enumerable#select.last
                          4.030M (± 3.4%) i/s -     20.318M in   5.047082s

Comparison:
Enumerable#select.last:  4030496.4 i/s
Enumerable#reverse.detect:  2608649.0 i/s - 1.55x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.872k i/100ms
  Enumerable#sort_by     3.043k i/100ms
     Enumerable#sort     4.066k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         29.575k (±14.1%) i/s -    146.472k in   5.060948s
  Enumerable#sort_by     28.238k (±18.2%) i/s -    136.935k in   5.038337s
     Enumerable#sort     40.881k (± 1.5%) i/s -    207.366k in   5.073690s

Comparison:
     Enumerable#sort:    40881.2 i/s
Enumerable#sort_by (Symbol#to_proc):    29575.2 i/s - 1.38x  (± 0.00) slower
  Enumerable#sort_by:    28238.2 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   605.733k i/100ms
Enumerable#sort_by...first
                         7.561k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      6.057M (± 0.1%) i/s -     30.287M in   5.000185s
Enumerable#sort_by...first
                         82.741k (± 2.7%) i/s -    415.855k in   5.029674s

Comparison:
   Enumerable#min_by:  6057109.0 i/s
Enumerable#sort_by...first:    82741.5 i/s - 73.21x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   366.022k i/100ms
            Hash#dup   429.590k i/100ms
Calculating -------------------------------------
              Hash[]      4.510M (± 3.1%) i/s -     22.693M in   5.036989s
            Hash#dup      4.551M (± 3.1%) i/s -     22.768M in   5.007593s

Comparison:
            Hash#dup:  4551242.3 i/s
              Hash[]:  4509826.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   113.413M i/100ms
  Hash#fetch, symbol   113.716M i/100ms
     Hash#[], string     3.688M i/100ms
  Hash#fetch, string     3.495M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.138B (± 0.7%) i/s -      5.784B in   5.084541s
  Hash#fetch, symbol      1.136B (± 0.7%) i/s -      5.686B in   5.003206s
     Hash#[], string    155.448M (± 0.4%) i/s -    778.133M in   5.005831s
  Hash#fetch, string    159.729M (± 1.5%) i/s -    800.414M in   5.012252s

Comparison:
     Hash#[], symbol: 1137632211.4 i/s
  Hash#fetch, symbol: 1136485567.0 i/s - same-ish: difference falls within error
  Hash#fetch, string: 159729021.7 i/s - 7.12x  (± 0.00) slower
     Hash#[], string: 155448225.1 i/s - 7.32x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    49.758M i/100ms
             Hash#[]    42.077M i/100ms
          Hash#[] ||    42.003M i/100ms
          Hash#[] &&    42.314M i/100ms
          Hash#fetch    42.316M i/100ms
 Hash#fetch fallback    47.564M i/100ms
Calculating -------------------------------------
            Hash#dig    497.247M (± 0.3%) i/s -      2.488B in   5.003411s
             Hash#[]    419.767M (± 0.8%) i/s -      2.104B in   5.012328s
          Hash#[] ||    421.427M (± 0.9%) i/s -      2.142B in   5.083521s
          Hash#[] &&    420.357M (± 1.1%) i/s -      2.116B in   5.033711s
          Hash#fetch    419.710M (± 0.8%) i/s -      2.116B in   5.041444s
 Hash#fetch fallback    418.714M (± 0.5%) i/s -      2.140B in   5.111925s

Comparison:
            Hash#dig: 497247015.8 i/s
          Hash#[] ||: 421427222.8 i/s - 1.18x  (± 0.00) slower
          Hash#[] &&: 420357052.3 i/s - 1.18x  (± 0.00) slower
             Hash#[]: 419766676.6 i/s - 1.18x  (± 0.00) slower
          Hash#fetch: 419709701.5 i/s - 1.18x  (± 0.00) slower
 Hash#fetch fallback: 418714393.8 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   113.466M i/100ms
  Hash#fetch + block   113.821M i/100ms
    Hash#fetch + arg   113.901M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.138B (± 1.1%) i/s -      5.787B in   5.086232s
  Hash#fetch + block      1.139B (± 1.1%) i/s -      5.805B in   5.095110s
    Hash#fetch + arg      1.138B (± 0.7%) i/s -      5.695B in   5.006326s

Comparison:
  Hash#fetch + block: 1139438864.9 i/s
  Hash#fetch + const: 1137866935.8 i/s - same-ish: difference falls within error
    Hash#fetch + arg: 1137633651.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    22.017k i/100ms
         sort + to_h    11.606k i/100ms
Calculating -------------------------------------
      sort_by + to_h    261.978k (±13.6%) i/s -      1.299M in   5.055745s
         sort + to_h    180.658k (± 5.7%) i/s -    905.268k in   5.029373s

Comparison:
      sort_by + to_h:   261978.1 i/s
         sort + to_h:   180658.0 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   184.295k i/100ms
       Hash#each_key   219.864k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.891M (±10.2%) i/s -      9.399M in   5.078239s
       Hash#each_key      2.190M (± 3.4%) i/s -     10.993M in   5.025040s

Comparison:
       Hash#each_key:  2190350.5 i/s
      Hash#keys.each:  1890980.0 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   164.000  i/100ms
           Hash#key?    12.256M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.996k (±12.8%) i/s -      9.840k in   5.035054s
           Hash#key?    122.516M (± 0.0%) i/s -    612.805M in   5.001841s

Comparison:
           Hash#key?: 122515881.6 i/s
  Hash#keys.include?:     1996.1 i/s - 61377.23x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    38.180k i/100ms
            Hash#[]=    35.256k i/100ms
Calculating -------------------------------------
         Hash#merge!    414.215k (±10.2%) i/s -      2.062M in   5.083112s
            Hash#[]=    445.474k (± 5.1%) i/s -      2.221M in   5.000260s

Comparison:
            Hash#[]=:   445473.5 i/s
         Hash#merge!:   414215.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        23.040k i/100ms
      Hash#merge({})    10.821k i/100ms
 Hash#dup#merge!({})    25.798k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        274.371k (± 3.8%) i/s -      1.382M in   5.046154s
      Hash#merge({})    162.432k (± 4.0%) i/s -    811.575k in   5.005098s
 Hash#dup#merge!({})    258.250k (± 2.9%) i/s -      1.316M in   5.099061s

Comparison:
{}#merge!(Hash) do end:   274370.7 i/s
 Hash#dup#merge!({}):   258250.5 i/s - same-ish: difference falls within error
      Hash#merge({}):   162431.5 i/s - 1.69x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   113.458M i/100ms
          Hash#merge   114.016M i/100ms
Calculating -------------------------------------
        Hash#**other      1.135B (± 0.5%) i/s -      5.786B in   5.098598s
          Hash#merge      1.137B (± 0.7%) i/s -      5.701B in   5.015684s

Comparison:
          Hash#merge: 1136653661.6 i/s
        Hash#**other: 1134916597.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   643.000  i/100ms
         Hash#merge!    41.910k i/100ms
Calculating -------------------------------------
          Hash#merge      7.643k (± 8.1%) i/s -     37.937k in   4.999968s
         Hash#merge!    440.233k (± 2.2%) i/s -      2.221M in   5.048253s

Comparison:
         Hash#merge!:   440232.6 i/s
          Hash#merge:     7643.2 i/s - 57.60x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.286M i/100ms
Array#each               1.362M i/100ms
Array#each_w/_object     1.370M i/100ms
Hash#select-include      1.979M i/100ms
Calculating -------------------------------------
Hash#native-slice        15.983M (± 4.6%) i/s -     79.750M in   5.001356s
Array#each               13.631M (± 3.5%) i/s -     68.081M in   5.001329s
Array#each_w/_object     13.871M (± 3.7%) i/s -     69.847M in   5.043046s
Hash#select-include      19.883M (± 3.9%) i/s -    100.934M in   5.085012s

Comparison:
Hash#select-include : 19882835.8 i/s
Hash#native-slice   : 15982944.8 i/s - 1.24x  (± 0.00) slower
Array#each_w/_object: 13870975.6 i/s - 1.43x  (± 0.00) slower
Array#each          : 13630546.3 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   176.000  i/100ms
         Hash#value?   389.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.978k (±12.1%) i/s -      9.856k in   5.075128s
         Hash#value?      3.888k (± 0.4%) i/s -     19.450k in   5.002299s

Comparison:
         Hash#value?:     3888.3 i/s
Hash#values.include?:     1977.6 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   113.680M i/100ms
                send   113.661M i/100ms
      method_missing   113.843M i/100ms
Calculating -------------------------------------
                call      1.135B (± 0.7%) i/s -      5.684B in   5.008034s
                send      1.137B (± 0.6%) i/s -      5.797B in   5.100145s
      method_missing      1.135B (± 0.4%) i/s -      5.692B in   5.013977s

Comparison:
                send: 1136617604.6 i/s
      method_missing: 1135270246.1 i/s - same-ish: difference falls within error
                call: 1135030377.2 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    25.118k i/100ms
      Symbol#to_proc    32.069k i/100ms
Calculating -------------------------------------
               Block    334.064k (± 3.5%) i/s -      1.683M in   5.044323s
      Symbol#to_proc    333.469k (± 2.9%) i/s -      1.668M in   5.005159s

Comparison:
               Block:   334063.9 i/s
      Symbol#to_proc:   333468.7 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   113.541M i/100ms
       block + yield   113.988M i/100ms
        unused block   113.521M i/100ms
               yield   113.611M i/100ms
Calculating -------------------------------------
          block.call      1.136B (± 0.5%) i/s -      5.791B in   5.095954s
       block + yield      1.139B (± 0.6%) i/s -      5.699B in   5.005346s
        unused block      1.138B (± 1.0%) i/s -      5.790B in   5.086101s
               yield      1.138B (± 0.7%) i/s -      5.794B in   5.091398s

Comparison:
       block + yield: 1138707845.0 i/s
        unused block: 1138418143.5 i/s - same-ish: difference falls within error
               yield: 1138084574.7 i/s - same-ish: difference falls within error
          block.call: 1136344508.4 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    25.874k i/100ms
      range#include?   265.000  i/100ms
       range#member?   642.000  i/100ms
       plain compare    15.776k i/100ms
Calculating -------------------------------------
        range#cover?    109.585k (±32.7%) i/s -    491.606k in   5.057006s
      range#include?      5.804k (±30.9%) i/s -     26.235k in   5.064219s
       range#member?      4.884k (±18.0%) i/s -     23.754k in   5.022536s
       plain compare    188.783k (±28.3%) i/s -    836.128k in   5.044116s

Comparison:
       plain compare:   188783.5 i/s
        range#cover?:   109584.7 i/s - same-ish: difference falls within error
      range#include?:     5804.4 i/s - 32.52x  (± 0.00) slower
       range#member?:     4884.4 i/s - 38.65x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    15.003M i/100ms
           String#=~    14.372M i/100ms
          Regexp#===    14.346M i/100ms
        String#match     9.481M i/100ms
Calculating -------------------------------------
       String#match?    150.754M (± 0.1%) i/s -    765.131M in   5.075380s
           String#=~    149.764M (± 0.0%) i/s -    761.715M in   5.086103s
          Regexp#===    149.782M (± 0.0%) i/s -    760.351M in   5.076381s
        String#match     97.786M (± 0.4%) i/s -    493.032M in   5.042055s

Comparison:
       String#match?: 150753500.4 i/s
          Regexp#===: 149782173.1 i/s - 1.01x  (± 0.00) slower
           String#=~: 149763904.7 i/s - 1.01x  (± 0.00) slower
        String#match: 97785808.7 i/s - 1.54x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.419M i/100ms
      String#casecmp     3.977M i/100ms
Calculating -------------------------------------
String#downcase + ==     27.597M (± 6.6%) i/s -    137.864M in   5.019321s
      String#casecmp     40.149M (± 4.8%) i/s -    202.826M in   5.064418s

Comparison:
      String#casecmp: 40149495.5 i/s
String#downcase + ==: 27596676.5 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     7.421M i/100ms
       String#concat     8.348M i/100ms
       String#append     8.420M i/100ms
         "foo" "bar"   113.415M i/100ms
  "#{'foo'}#{'bar'}"   113.565M i/100ms
Calculating -------------------------------------
            String#+     84.023M (± 3.7%) i/s -    423.014M in   5.041818s
       String#concat     84.249M (± 2.9%) i/s -    425.737M in   5.057899s
       String#append     84.499M (± 2.4%) i/s -    429.436M in   5.085120s
         "foo" "bar"      1.137B (± 1.0%) i/s -      5.784B in   5.087361s
  "#{'foo'}#{'bar'}"      1.137B (± 0.7%) i/s -      5.792B in   5.092887s

Comparison:
  "#{'foo'}#{'bar'}": 1137289722.1 i/s
         "foo" "bar": 1137085327.2 i/s - same-ish: difference falls within error
       String#append: 84498874.1 i/s - 13.46x  (± 0.00) slower
       String#concat: 84248895.3 i/s - 13.50x  (± 0.00) slower
            String#+: 84022909.0 i/s - 13.54x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   114.152M i/100ms
          String#dup   113.467M i/100ms
Calculating -------------------------------------
           String#+@      1.136B (± 0.5%) i/s -      5.708B in   5.025045s
          String#dup      1.135B (± 0.5%) i/s -      5.787B in   5.096515s

Comparison:
           String#+@: 1135858206.7 i/s
          String#dup: 1135479894.8 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.414M i/100ms
       String#match?     1.361M i/100ms
    String#end_with?     9.701M i/100ms
Calculating -------------------------------------
           String#=~     14.915M (± 2.0%) i/s -     74.951M in   5.027376s
       String#match?     18.654M (± 0.5%) i/s -     93.891M in   5.033352s
    String#end_with?     96.756M (± 0.5%) i/s -    485.051M in   5.013271s

Comparison:
    String#end_with?: 96756294.8 i/s
       String#match?: 18654255.1 i/s - 5.19x  (± 0.00) slower
           String#=~: 14914979.3 i/s - 6.49x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   284.986k i/100ms
          String#sub   521.868k i/100ms
String#dup["string"]=
                        11.229M i/100ms
Calculating -------------------------------------
         String#gsub      5.487M (± 8.2%) i/s -     27.359M in   5.031957s
          String#sub      8.358M (± 3.9%) i/s -     41.749M in   5.003247s
String#dup["string"]=
                        111.881M (± 0.6%) i/s -    561.461M in   5.018543s

Comparison:
String#dup["string"]=: 111881060.6 i/s
          String#sub:  8358065.1 i/s - 13.39x  (± 0.00) slower
         String#gsub:  5487043.6 i/s - 20.39x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   130.096k i/100ms
           String#tr   119.504k i/100ms
Calculating -------------------------------------
         String#gsub      2.655M (± 6.6%) i/s -     13.270M in   5.023680s
           String#tr      1.212M (± 2.7%) i/s -      6.095M in   5.030569s

Comparison:
         String#gsub:  2654682.3 i/s
           String#tr:  1212426.2 i/s - 2.19x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   114.319M i/100ms
         With Freeze   114.290M i/100ms
Calculating -------------------------------------
      Without Freeze      1.136B (± 0.6%) i/s -      5.716B in   5.032908s
         With Freeze      1.136B (± 0.5%) i/s -      5.715B in   5.031016s

Comparison:
         With Freeze: 1135884486.6 i/s
      Without Freeze: 1135757730.9 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     8.446k i/100ms
      String#squeeze    27.323k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    108.304k (± 8.0%) i/s -    540.544k in   5.025403s
      String#squeeze    273.633k (± 2.2%) i/s -      1.393M in   5.095255s

Comparison:
      String#squeeze:   273633.3 i/s
 String#gsub/regex+/:   108304.1 i/s - 2.53x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     3.131M i/100ms
       String#match?     4.936M i/100ms
  String#start_with?    20.384M i/100ms
Calculating -------------------------------------
           String#=~     31.945M (± 2.2%) i/s -    159.661M in   5.000388s
       String#match?     50.667M (± 0.1%) i/s -    256.647M in   5.065353s
  String#start_with?    203.869M (± 1.1%) i/s -      1.019B in   5.000046s

Comparison:
  String#start_with?: 203869111.1 i/s
       String#match?: 50667081.3 i/s - 4.02x  (± 0.00) slower
           String#=~: 31944986.8 i/s - 6.38x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    98.884k i/100ms
    String#[0, n] ==   193.143k i/100ms
   String#[RANGE] ==   219.188k i/100ms
   String#[0...n] ==   174.924k i/100ms
Calculating -------------------------------------
  String#start_with?      4.158M (± 0.1%) i/s -     20.865M in   5.018422s
    String#[0, n] ==      2.058M (± 4.4%) i/s -     10.430M in   5.079141s
   String#[RANGE] ==      2.215M (± 3.7%) i/s -     11.179M in   5.055050s
   String#[0...n] ==      1.727M (± 3.9%) i/s -      8.746M in   5.071851s

Comparison:
  String#start_with?:  4157590.5 i/s
   String#[RANGE] ==:  2214536.5 i/s - 1.88x  (± 0.00) slower
    String#[0, n] ==:  2057585.3 i/s - 2.02x  (± 0.00) slower
   String#[0...n] ==:  1727166.0 i/s - 2.41x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    11.300M i/100ms
 String#sub!'string'   530.279k i/100ms
String#gsub!'string'   554.893k i/100ms
  String#[/regexp/]=     1.779M i/100ms
 String#sub!/regexp/     2.141M i/100ms
String#gsub!/regexp/   623.277k i/100ms
Calculating -------------------------------------
  String#['string']=    113.118M (± 0.1%) i/s -    576.279M in   5.094524s
 String#sub!'string'      8.489M (±12.6%) i/s -     39.771M in   5.033823s
String#gsub!'string'      5.758M (± 3.0%) i/s -     28.854M in   5.015802s
  String#[/regexp/]=     17.902M (± 2.7%) i/s -     90.735M in   5.072164s
 String#sub!/regexp/     22.230M (± 2.1%) i/s -    111.311M in   5.009450s
String#gsub!/regexp/      6.170M (± 6.8%) i/s -     31.164M in   5.075308s

Comparison:
  String#['string']=: 113117509.8 i/s
 String#sub!/regexp/: 22230497.3 i/s - 5.09x  (± 0.00) slower
  String#[/regexp/]=: 17902118.9 i/s - 6.32x  (± 0.00) slower
 String#sub!'string':  8488989.7 i/s - 13.33x  (± 0.00) slower
String#gsub!/regexp/:  6169894.5 i/s - 18.33x  (± 0.00) slower
String#gsub!'string':  5758294.4 i/s - 19.64x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     2.263M i/100ms
        String#chomp     4.776M i/100ms
String#delete_suffix    10.471M i/100ms
Calculating -------------------------------------
          String#sub     26.393M (± 4.0%) i/s -    133.493M in   5.066756s
        String#chomp     47.739M (± 0.2%) i/s -    238.808M in   5.002393s
String#delete_suffix    105.817M (± 8.1%) i/s -    534.020M in   5.081749s

Comparison:
String#delete_suffix: 105816630.4 i/s
        String#chomp: 47738810.1 i/s - 2.22x  (± 0.00) slower
          String#sub: 26393352.3 i/s - 4.01x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   114.047M i/100ms
          String#sub    15.703M i/100ms
Calculating -------------------------------------
String#delete_prefix      1.137B (± 0.8%) i/s -      5.702B in   5.016926s
          String#sub    156.974M (± 0.2%) i/s -    785.144M in   5.001753s

Comparison:
String#delete_prefix: 1136693592.9 i/s
          String#sub: 156974189.9 i/s - 7.24x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.554M i/100ms
    String#unpack[0]     1.648M i/100ms
Calculating -------------------------------------
      String#unpack1     16.684M (± 4.0%) i/s -     83.899M in   5.037131s
    String#unpack[0]     16.718M (± 3.7%) i/s -     84.049M in   5.034972s

Comparison:
    String#unpack[0]: 16717722.0 i/s
      String#unpack1: 16684472.4 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 23.0.0-dev-c4730d70, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    19.825k i/100ms
          Time.parse   207.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    369.506k (±12.0%) i/s -      1.824M in   5.019257s
          Time.parse     10.134k (±23.1%) i/s -     42.228k in   5.008691s

Comparison:
        Time.iso8601:   369506.0 i/s
          Time.parse:    10134.4 i/s - 36.46x  (± 0.00) slower

