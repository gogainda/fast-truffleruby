$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       198.748M i/100ms
Function with splat arguments
                       582.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.988B (± 0.3%) i/s -      9.937B in   4.999711s
Function with splat arguments
                          6.147k (± 5.5%) i/s -     30.846k in   5.034924s

Comparison:
Function with single Array argument: 1987613578.9 i/s
Function with splat arguments:     6146.5 i/s - 323372.89x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   198.328M i/100ms
Sequential Assignment
                       195.743M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.982B (± 1.1%) i/s -      9.916B in   5.005101s
Sequential Assignment
                          1.987B (± 0.6%) i/s -      9.983B in   5.025036s

Comparison:
Sequential Assignment: 1986720622.8 i/s
 Parallel Assignment: 1981506439.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   198.926M i/100ms
       attr_accessor   198.990M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.989B (± 0.3%) i/s -      9.946B in   5.000362s
       attr_accessor      1.990B (± 0.2%) i/s -      9.950B in   5.000044s

Comparison:
       attr_accessor: 1989899161.4 i/s
   getter_and_setter: 1989133233.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     6.301k i/100ms
         respond_to?   196.043M i/100ms
Calculating -------------------------------------
      begin...rescue     44.284k (± 2.9%) i/s -    226.836k in   5.126740s
         respond_to?      1.989B (± 0.3%) i/s -      9.998B in   5.025583s

Comparison:
         respond_to?: 1989467087.7 i/s
      begin...rescue:    44284.1 i/s - 44925.05x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   195.004M i/100ms
             &method     7.609M i/100ms
Calculating -------------------------------------
              normal      1.987B (± 0.5%) i/s -      9.945B in   5.004966s
             &method     83.789M (± 5.1%) i/s -    418.506M in   5.008712s

Comparison:
              normal: 1987108878.7 i/s
             &method: 83788974.0 i/s - 23.72x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        92.000  i/100ms
       define_method   124.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.520k (±52.3%) i/s -      4.324k in   5.008213s
       define_method      3.010k (±59.5%) i/s -      5.828k in   6.638393s

Comparison:
       define_method:     3010.5 i/s
module_eval with string:     1519.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    62.641k i/100ms
       Kernel#format    53.369k i/100ms
            String#%    53.779k i/100ms
Calculating -------------------------------------
         Float#round    631.751k (± 3.5%) i/s -      3.195M in   5.063579s
       Kernel#format    534.200k (± 2.8%) i/s -      2.722M in   5.099222s
            String#%    536.108k (± 2.5%) i/s -      2.689M in   5.019023s

Comparison:
         Float#round:   631750.6 i/s
            String#%:   536108.0 i/s - 1.18x  (± 0.00) slower
       Kernel#format:   534199.9 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   199.078M i/100ms
          OpenStruct   198.738M i/100ms
Calculating -------------------------------------
                Hash      1.986B (± 0.7%) i/s -      9.954B in   5.013398s
          OpenStruct      1.983B (± 2.1%) i/s -      9.937B in   5.012508s

Comparison:
                Hash: 1985563949.2 i/s
          OpenStruct: 1983401638.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   198.091M i/100ms
          OpenStruct     2.252k i/100ms
Calculating -------------------------------------
                Hash      1.972B (± 2.2%) i/s -      9.905B in   5.026200s
          OpenStruct     24.625k (±12.7%) i/s -    121.608k in   5.058163s

Comparison:
                Hash: 1971570873.1 i/s
          OpenStruct:    24625.4 i/s - 80062.38x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   601.100k i/100ms
  ancestors.include?   112.169k i/100ms
Calculating -------------------------------------
  less than or equal      6.842M (± 4.0%) i/s -     34.263M in   5.016304s
  ancestors.include?      1.143M (± 4.6%) i/s -      5.721M in   5.014284s

Comparison:
  less than or equal:  6841770.0 i/s
  ancestors.include?:  1143368.4 i/s - 5.98x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     19.843  (± 0.0%) i/s -    100.000  in   5.040720s
         Kernel loop      5.020  (± 0.0%) i/s -     26.000  in   5.180075s

Comparison:
          While Loop:       19.8 i/s
         Kernel loop:        5.0 i/s - 3.95x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   198.363M i/100ms
         Array#first   196.330M i/100ms
Calculating -------------------------------------
           Array#[0]      1.986B (± 0.5%) i/s -     10.117B in   5.094983s
         Array#first      1.989B (± 0.2%) i/s -     10.013B in   5.032899s

Comparison:
         Array#first: 1989478717.1 i/s
           Array#[0]: 1985635726.9 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   197.108M i/100ms
          Array#last   198.678M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.985B (± 0.5%) i/s -     10.052B in   5.063442s
          Array#last      1.989B (± 0.3%) i/s -     10.133B in   5.095222s

Comparison:
          Array#last: 1988661050.5 i/s
          Array#[-1]: 1985358517.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   308.030k i/100ms
Calculating -------------------------------------
                find      7.291  (±27.4%) i/s -     13.000  in   5.042991s
             bsearch      3.097M (± 3.6%) i/s -     15.710M in   5.079404s

Comparison:
             bsearch:  3096986.1 i/s
                find:        7.3 i/s - 424766.33x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.105  (± 0.0%) i/s -      1.000  in   9.516168s
        Array#insert      0.784  (± 0.0%) i/s -      4.000  in   5.102445s

Comparison:
        Array#insert:        0.8 i/s
       Array#unshift:        0.1 i/s - 7.46x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   198.846M i/100ms
          Array#size   198.891M i/100ms
         Array#count   198.739M i/100ms
Calculating -------------------------------------
        Array#length      1.986B (± 0.5%) i/s -      9.942B in   5.005238s
          Array#size      1.986B (± 1.2%) i/s -      9.945B in   5.008423s
         Array#count      1.990B (± 0.2%) i/s -     10.136B in   5.093656s

Comparison:
         Array#count: 1989870750.3 i/s
        Array#length: 1986426433.2 i/s - same-ish: difference falls within error
          Array#size: 1985858736.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    18.950k i/100ms
        Array#sample     1.956M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    193.814k (± 1.9%) i/s -    985.400k in   5.086161s
        Array#sample     20.222M (± 0.6%) i/s -    101.703M in   5.029496s

Comparison:
        Array#sample: 20222145.3 i/s
 Array#shuffle.first:   193813.7 i/s - 104.34x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   335.000  i/100ms
          Date.parse    86.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     12.548k (±41.5%) i/s -     45.895k in   5.036971s
          Date.parse      5.866k (±39.8%) i/s -     22.704k in   4.995514s

Comparison:
        Date.iso8601:    12547.9 i/s
          Date.parse:     5866.1 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    87.706k i/100ms
           Array#map   498.649k i/100ms
Calculating -------------------------------------
   Array#each + push    985.339k (± 3.7%) i/s -      4.999M in   5.080849s
           Array#map      5.121M (± 5.8%) i/s -     25.930M in   5.081062s

Comparison:
           Array#map:  5120821.9 i/s
   Array#each + push:   985339.2 i/s - 5.20x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     8.249M i/100ms
               #each    61.096M i/100ms
Calculating -------------------------------------
            For loop     82.747M (± 0.2%) i/s -    420.705M in   5.084279s
               #each    611.350M (± 1.3%) i/s -      3.116B in   5.097666s

Comparison:
               #each: 611349687.1 i/s
            For loop: 82746524.4 i/s - 7.39x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   720.308k i/100ms
     each_with_index     1.066M i/100ms
Calculating -------------------------------------
          While Loop      7.541M (± 0.1%) i/s -     38.176M in   5.062793s
     each_with_index     10.663M (± 0.3%) i/s -     54.372M in   5.099375s

Comparison:
     each_with_index: 10662666.6 i/s
          While Loop:  7540570.2 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   121.099k i/100ms
      inject to_proc   122.781k i/100ms
        inject block   122.458k i/100ms
Calculating -------------------------------------
       inject symbol      1.222M (± 1.9%) i/s -      6.176M in   5.054561s
      inject to_proc      1.226M (± 0.4%) i/s -      6.139M in   5.006541s
        inject block      1.228M (± 0.1%) i/s -      6.245M in   5.087734s

Comparison:
        inject block:  1227533.1 i/s
      inject to_proc:  1226226.9 i/s - same-ish: difference falls within error
       inject symbol:  1222399.9 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     8.796k i/100ms
   Array#map.flatten     9.908k i/100ms
      Array#flat_map    24.892k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    103.147k (± 4.0%) i/s -    518.964k in   5.039896s
   Array#map.flatten     99.955k (± 4.3%) i/s -    505.308k in   5.065328s
      Array#flat_map    250.593k (± 3.0%) i/s -      1.269M in   5.070834s

Comparison:
      Array#flat_map:   250592.6 i/s
Array#map.flatten(1):   103146.5 i/s - 2.43x  (± 0.00) slower
   Array#map.flatten:    99955.0 i/s - 2.51x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   137.282k i/100ms
  Array#reverse_each     1.621M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.433M (± 3.3%) i/s -      7.276M in   5.082470s
  Array#reverse_each     16.219M (± 0.1%) i/s -     82.675M in   5.097399s

Comparison:
  Array#reverse_each: 16219025.0 i/s
  Array#reverse.each:  1433176.6 i/s - 11.32x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       512.028k i/100ms
   Enumerable#detect     3.181M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          5.865M (± 6.5%) i/s -    116.742M in  20.022670s
   Enumerable#detect     31.753M (± 0.7%) i/s -    636.274M in  20.039689s

Comparison:
   Enumerable#detect: 31752527.7 i/s
Enumerable#select.first:  5865239.6 i/s - 5.41x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       130.522k i/100ms
Enumerable#select.last
                       336.331k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.429M (± 3.6%) i/s -      7.179M in   5.030799s
Enumerable#select.last
                          3.354M (± 4.7%) i/s -     16.817M in   5.025515s

Comparison:
Enumerable#select.last:  3353908.5 i/s
Enumerable#reverse.detect:  1428944.2 i/s - 2.35x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         1.938k i/100ms
  Enumerable#sort_by     2.188k i/100ms
     Enumerable#sort     2.780k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         19.573k (±19.9%) i/s -     89.148k in   5.055441s
  Enumerable#sort_by     19.626k (±21.3%) i/s -     87.520k in   5.072661s
     Enumerable#sort     28.427k (± 1.1%) i/s -    144.560k in   5.085897s

Comparison:
     Enumerable#sort:    28427.3 i/s
  Enumerable#sort_by:    19626.0 i/s - 1.45x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    19573.3 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   186.908k i/100ms
Enumerable#sort_by...first
                         4.693k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      2.007M (± 0.1%) i/s -     10.093M in   5.030062s
Enumerable#sort_by...first
                         46.925k (± 3.0%) i/s -    234.650k in   5.005159s

Comparison:
   Enumerable#min_by:  2006544.0 i/s
Enumerable#sort_by...first:    46925.4 i/s - 42.76x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   174.974k i/100ms
            Hash#dup   196.798k i/100ms
Calculating -------------------------------------
              Hash[]      2.034M (± 4.9%) i/s -     10.148M in   5.001915s
            Hash#dup      1.996M (± 4.2%) i/s -     10.037M in   5.037870s

Comparison:
              Hash[]:  2034218.2 i/s
            Hash#dup:  1995940.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   198.598M i/100ms
  Hash#fetch, symbol   190.819M i/100ms
     Hash#[], string     3.532M i/100ms
  Hash#fetch, string     3.723M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.978B (± 1.7%) i/s -      9.930B in   5.021556s
  Hash#fetch, symbol      1.988B (± 0.5%) i/s -     10.113B in   5.087943s
     Hash#[], string     35.281M (± 1.2%) i/s -    176.601M in   5.006448s
  Hash#fetch, string     37.174M (± 1.0%) i/s -    186.144M in   5.007857s

Comparison:
  Hash#fetch, symbol: 1987784106.1 i/s
     Hash#[], symbol: 1978063585.1 i/s - same-ish: difference falls within error
  Hash#fetch, string: 37174222.3 i/s - 53.47x  (± 0.00) slower
     Hash#[], string: 35280585.7 i/s - 56.34x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    41.332M i/100ms
             Hash#[]    41.449M i/100ms
          Hash#[] ||    41.298M i/100ms
          Hash#[] &&    41.466M i/100ms
          Hash#fetch    41.477M i/100ms
 Hash#fetch fallback    41.378M i/100ms
Calculating -------------------------------------
            Hash#dig    413.842M (± 0.6%) i/s -      2.108B in   5.093700s
             Hash#[]    414.564M (± 0.2%) i/s -      2.114B in   5.099099s
          Hash#[] ||    413.963M (± 0.3%) i/s -      2.106B in   5.087951s
          Hash#[] &&    413.906M (± 0.4%) i/s -      2.073B in   5.009145s
          Hash#fetch    414.381M (± 0.4%) i/s -      2.074B in   5.004776s
 Hash#fetch fallback    414.385M (± 0.3%) i/s -      2.110B in   5.092597s

Comparison:
             Hash#[]: 414564245.0 i/s
 Hash#fetch fallback: 414385327.8 i/s - same-ish: difference falls within error
          Hash#fetch: 414380660.1 i/s - same-ish: difference falls within error
          Hash#[] ||: 413963205.3 i/s - same-ish: difference falls within error
          Hash#[] &&: 413906267.6 i/s - same-ish: difference falls within error
            Hash#dig: 413841985.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   198.869M i/100ms
  Hash#fetch + block   198.755M i/100ms
    Hash#fetch + arg   198.797M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.988B (± 0.4%) i/s -      9.943B in   5.002984s
  Hash#fetch + block      1.990B (± 0.2%) i/s -     10.137B in   5.094377s
    Hash#fetch + arg      1.990B (± 0.3%) i/s -     10.139B in   5.095671s

Comparison:
  Hash#fetch + block: 1989758256.8 i/s
    Hash#fetch + arg: 1989673323.6 i/s - same-ish: difference falls within error
  Hash#fetch + const: 1987532751.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    15.894k i/100ms
         sort + to_h    11.329k i/100ms
Calculating -------------------------------------
      sort_by + to_h    184.225k (± 5.9%) i/s -    921.852k in   5.022014s
         sort + to_h     73.314k (± 3.1%) i/s -    373.857k in   5.104356s

Comparison:
      sort_by + to_h:   184225.1 i/s
         sort + to_h:    73313.8 i/s - 2.51x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each    93.131k i/100ms
       Hash#each_key   108.264k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.011M (± 4.7%) i/s -      5.122M in   5.079318s
       Hash#each_key      1.102M (± 4.3%) i/s -      5.521M in   5.020944s

Comparison:
       Hash#each_key:  1101841.8 i/s
      Hash#keys.each:  1010794.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   157.000  i/100ms
           Hash#key?    22.618M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.682k (±13.3%) i/s -      8.321k in   5.069333s
           Hash#key?    224.787M (± 2.7%) i/s -      1.131B in   5.035237s

Comparison:
           Hash#key?: 224786838.9 i/s
  Hash#keys.include?:     1681.9 i/s - 133652.09x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    20.892k i/100ms
            Hash#[]=    22.835k i/100ms
Calculating -------------------------------------
         Hash#merge!    217.114k (± 4.3%) i/s -      1.086M in   5.013577s
            Hash#[]=    232.302k (± 3.9%) i/s -      1.165M in   5.021403s

Comparison:
            Hash#[]=:   232301.6 i/s
         Hash#merge!:   217114.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         9.235k i/100ms
      Hash#merge({})     7.596k i/100ms
 Hash#dup#merge!({})    11.962k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        118.959k (± 5.2%) i/s -    600.275k in   5.061779s
      Hash#merge({})     76.878k (± 5.4%) i/s -    387.396k in   5.055115s
 Hash#dup#merge!({})    123.152k (± 4.6%) i/s -    622.024k in   5.062519s

Comparison:
 Hash#dup#merge!({}):   123151.8 i/s
{}#merge!(Hash) do end:   118959.2 i/s - same-ish: difference falls within error
      Hash#merge({}):    76877.6 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   198.669M i/100ms
          Hash#merge   199.170M i/100ms
Calculating -------------------------------------
        Hash#**other      1.983B (± 1.9%) i/s -      9.933B in   5.012498s
          Hash#merge      1.990B (± 0.3%) i/s -      9.959B in   5.005533s

Comparison:
          Hash#merge: 1989519790.7 i/s
        Hash#**other: 1982522677.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   270.000  i/100ms
         Hash#merge!    22.168k i/100ms
Calculating -------------------------------------
          Hash#merge      3.169k (± 5.2%) i/s -     15.930k in   5.040927s
         Hash#merge!    224.907k (± 4.3%) i/s -      1.131M in   5.036900s

Comparison:
         Hash#merge!:   224907.3 i/s
          Hash#merge:     3169.2 i/s - 70.97x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      947.239k i/100ms
Array#each             758.872k i/100ms
Array#each_w/_object   726.593k i/100ms
Hash#select-include    865.522k i/100ms
Calculating -------------------------------------
Hash#native-slice        10.140M (± 4.1%) i/s -     51.151M in   5.053915s
Array#each                7.626M (± 3.5%) i/s -     38.702M in   5.081828s
Array#each_w/_object      7.630M (± 3.4%) i/s -     38.509M in   5.053448s
Hash#select-include       8.909M (± 3.6%) i/s -     45.007M in   5.059389s

Comparison:
Hash#native-slice   : 10139831.4 i/s
Hash#select-include :  8908702.5 i/s - 1.14x  (± 0.00) slower
Array#each_w/_object:  7630093.0 i/s - 1.33x  (± 0.00) slower
Array#each          :  7625862.4 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   126.000  i/100ms
         Hash#value?   357.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.473k (±12.4%) i/s -      7.182k in   5.003792s
         Hash#value?      3.579k (± 1.2%) i/s -     18.207k in   5.088441s

Comparison:
         Hash#value?:     3578.6 i/s
Hash#values.include?:     1472.9 i/s - 2.43x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   198.189M i/100ms
                send   197.374M i/100ms
      method_missing   199.097M i/100ms
Calculating -------------------------------------
                call      1.987B (± 0.3%) i/s -     10.108B in   5.085732s
                send      1.990B (± 0.2%) i/s -     10.066B in   5.059521s
      method_missing      1.989B (± 0.3%) i/s -      9.955B in   5.005860s

Comparison:
                send: 1989538239.9 i/s
      method_missing: 1988650676.5 i/s - same-ish: difference falls within error
                call: 1987474788.8 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    16.542k i/100ms
      Symbol#to_proc    18.100k i/100ms
Calculating -------------------------------------
               Block    184.202k (± 4.7%) i/s -    926.352k in   5.041005s
      Symbol#to_proc    185.152k (± 4.3%) i/s -    941.200k in   5.093711s

Comparison:
      Symbol#to_proc:   185152.0 i/s
               Block:   184202.0 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   197.931M i/100ms
       block + yield   198.965M i/100ms
        unused block   198.849M i/100ms
               yield   199.081M i/100ms
Calculating -------------------------------------
          block.call      1.985B (± 0.8%) i/s -     10.094B in   5.084599s
       block + yield      1.988B (± 0.4%) i/s -      9.948B in   5.003810s
        unused block      1.989B (± 0.3%) i/s -     10.141B in   5.098501s
               yield      1.990B (± 0.2%) i/s -      9.954B in   5.002585s

Comparison:
               yield: 1989787075.7 i/s
        unused block: 1989091613.7 i/s - same-ish: difference falls within error
       block + yield: 1988164494.8 i/s - same-ish: difference falls within error
          block.call: 1985433665.4 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    14.325k i/100ms
      range#include?   237.000  i/100ms
       range#member?   278.000  i/100ms
       plain compare    14.320k i/100ms
Calculating -------------------------------------
        range#cover?    116.821k (±12.7%) i/s -    587.325k in   5.112359s
      range#include?      6.210k (±29.5%) i/s -     23.700k in   5.066256s
       range#member?      5.052k (±33.3%) i/s -     16.402k in   5.011319s
       plain compare    141.569k (±30.1%) i/s -    529.840k in   5.081732s

Comparison:
       plain compare:   141568.7 i/s
        range#cover?:   116820.8 i/s - same-ish: difference falls within error
      range#include?:     6209.6 i/s - 22.80x  (± 0.00) slower
       range#member?:     5052.0 i/s - 28.02x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     3.742M i/100ms
           String#=~     5.070M i/100ms
          Regexp#===     5.061M i/100ms
        String#match     2.094M i/100ms
Calculating -------------------------------------
       String#match?     39.460M (± 4.2%) i/s -    198.341M in   5.035908s
           String#=~     50.543M (± 0.4%) i/s -    253.481M in   5.015291s
          Regexp#===     50.506M (± 0.3%) i/s -    253.053M in   5.010440s
        String#match     21.031M (± 3.1%) i/s -    106.797M in   5.083347s

Comparison:
           String#=~: 50542700.7 i/s
          Regexp#===: 50505540.3 i/s - same-ish: difference falls within error
       String#match?: 39459586.4 i/s - 1.28x  (± 0.00) slower
        String#match: 21031004.5 i/s - 2.40x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.043M i/100ms
      String#casecmp     2.810M i/100ms
Calculating -------------------------------------
String#downcase + ==     11.794M (± 4.8%) i/s -     59.462M in   5.054002s
      String#casecmp     28.002M (± 0.3%) i/s -    140.487M in   5.017140s

Comparison:
      String#casecmp: 28001645.2 i/s
String#downcase + ==: 11793692.0 i/s - 2.37x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+   198.059M i/100ms
       String#concat   198.594M i/100ms
       String#append   198.886M i/100ms
         "foo" "bar"   198.720M i/100ms
  "#{'foo'}#{'bar'}"   198.254M i/100ms
Calculating -------------------------------------
            String#+      1.971B (± 2.1%) i/s -      9.903B in   5.027216s
       String#concat      1.989B (± 0.3%) i/s -     10.128B in   5.092218s
       String#append      1.989B (± 0.3%) i/s -     10.143B in   5.098597s
         "foo" "bar"      1.989B (± 0.6%) i/s -     10.135B in   5.096615s
  "#{'foo'}#{'bar'}"      1.990B (± 0.2%) i/s -     10.111B in   5.079831s

Comparison:
  "#{'foo'}#{'bar'}": 1990412074.1 i/s
       String#append: 1989425355.8 i/s - same-ish: difference falls within error
       String#concat: 1988985750.7 i/s - same-ish: difference falls within error
         "foo" "bar": 1988597518.4 i/s - same-ish: difference falls within error
            String#+: 1970819256.5 i/s - same-ish: difference falls within error

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   198.233M i/100ms
          String#dup   198.532M i/100ms
Calculating -------------------------------------
           String#+@      1.988B (± 0.4%) i/s -     10.110B in   5.086444s
          String#dup      1.988B (± 0.6%) i/s -     10.125B in   5.094138s

Comparison:
          String#dup: 1987685594.1 i/s
           String#+@: 1987637316.4 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.151M i/100ms
       String#match?     1.258M i/100ms
    String#end_with?     1.480M i/100ms
Calculating -------------------------------------
           String#=~     12.129M (± 3.1%) i/s -     60.995M in   5.034267s
       String#match?     12.669M (± 2.9%) i/s -     64.180M in   5.070394s
    String#end_with?     15.058M (± 4.2%) i/s -     75.457M in   5.020267s

Comparison:
    String#end_with?: 15057672.3 i/s
       String#match?: 12669093.5 i/s - 1.19x  (± 0.00) slower
           String#=~: 12129358.4 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    38.807k i/100ms
          String#sub   387.855k i/100ms
String#dup["string"]=
                        16.592M i/100ms
Calculating -------------------------------------
         String#gsub    459.444k (± 2.9%) i/s -      2.328M in   5.073225s
          String#sub      4.411M (± 7.0%) i/s -     22.108M in   5.037496s
String#dup["string"]=
                        165.373M (± 1.1%) i/s -    829.575M in   5.017012s

Comparison:
String#dup["string"]=: 165372739.7 i/s
          String#sub:  4411484.2 i/s - 37.49x  (± 0.00) slower
         String#gsub:   459444.2 i/s - 359.94x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    52.596k i/100ms
           String#tr   116.280k i/100ms
Calculating -------------------------------------
         String#gsub      1.568M (± 7.9%) i/s -      7.784M in   5.005334s
           String#tr      1.138M (± 5.7%) i/s -      5.698M in   5.021660s

Comparison:
         String#gsub:  1567693.5 i/s
           String#tr:  1138453.4 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   198.554M i/100ms
         With Freeze   198.619M i/100ms
Calculating -------------------------------------
      Without Freeze      1.984B (± 1.0%) i/s -      9.928B in   5.003651s
         With Freeze      1.990B (± 0.2%) i/s -     10.130B in   5.090711s

Comparison:
         With Freeze: 1989827983.5 i/s
      Without Freeze: 1984289301.4 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     4.211k i/100ms
      String#squeeze    49.011k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     61.154k (± 5.5%) i/s -    307.403k in   5.043041s
      String#squeeze    488.251k (± 7.2%) i/s -      2.451M in   5.064922s

Comparison:
      String#squeeze:   488251.4 i/s
 String#gsub/regex+/:    61153.9 i/s - 7.98x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     2.187M i/100ms
       String#match?     2.728M i/100ms
  String#start_with?     1.451M i/100ms
Calculating -------------------------------------
           String#=~     22.621M (± 2.8%) i/s -    113.748M in   5.032885s
       String#match?     27.450M (± 3.4%) i/s -    139.115M in   5.074144s
  String#start_with?     14.477M (± 3.4%) i/s -     72.575M in   5.019365s

Comparison:
       String#match?: 27450322.5 i/s
           String#=~: 22621002.8 i/s - 1.21x  (± 0.00) slower
  String#start_with?: 14476977.0 i/s - 1.90x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   160.906k i/100ms
    String#[0, n] ==   155.557k i/100ms
   String#[RANGE] ==   165.767k i/100ms
   String#[0...n] ==   129.724k i/100ms
Calculating -------------------------------------
  String#start_with?      2.766M (± 3.9%) i/s -     13.838M in   5.011261s
    String#[0, n] ==      1.577M (± 4.2%) i/s -      7.933M in   5.039153s
   String#[RANGE] ==      1.673M (± 4.7%) i/s -      8.454M in   5.064598s
   String#[0...n] ==      1.276M (± 4.0%) i/s -      6.486M in   5.093336s

Comparison:
  String#start_with?:  2766301.5 i/s
   String#[RANGE] ==:  1673177.8 i/s - 1.65x  (± 0.00) slower
    String#[0, n] ==:  1577353.8 i/s - 1.75x  (± 0.00) slower
   String#[0...n] ==:  1275695.0 i/s - 2.17x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    16.979M i/100ms
 String#sub!'string'   447.087k i/100ms
String#gsub!'string'    51.229k i/100ms
  String#[/regexp/]=     2.029M i/100ms
 String#sub!/regexp/     1.577M i/100ms
String#gsub!/regexp/   427.231k i/100ms
Calculating -------------------------------------
  String#['string']=    177.563M (± 0.5%) i/s -    899.881M in   5.068059s
 String#sub!'string'      4.617M (±15.4%) i/s -     21.460M in   5.028523s
String#gsub!'string'    509.750k (± 2.7%) i/s -      2.561M in   5.028999s
  String#[/regexp/]=     20.503M (± 3.9%) i/s -    103.500M in   5.056471s
 String#sub!/regexp/     15.883M (± 3.2%) i/s -     80.428M in   5.069664s
String#gsub!/regexp/      4.351M (± 5.8%) i/s -     21.789M in   5.026446s

Comparison:
  String#['string']=: 177563010.8 i/s
  String#[/regexp/]=: 20503239.9 i/s - 8.66x  (± 0.00) slower
 String#sub!/regexp/: 15882554.4 i/s - 11.18x  (± 0.00) slower
 String#sub!'string':  4616805.3 i/s - 38.46x  (± 0.00) slower
String#gsub!/regexp/:  4351229.1 i/s - 40.81x  (± 0.00) slower
String#gsub!'string':   509749.9 i/s - 348.33x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.509M i/100ms
        String#chomp     2.430M i/100ms
String#delete_suffix     4.431M i/100ms
Calculating -------------------------------------
          String#sub     17.132M (± 4.2%) i/s -     86.033M in   5.031392s
        String#chomp     24.710M (± 3.7%) i/s -    123.930M in   5.022575s
String#delete_suffix     44.921M (± 1.5%) i/s -    225.976M in   5.031658s

Comparison:
String#delete_suffix: 44920830.4 i/s
        String#chomp: 24710208.1 i/s - 1.82x  (± 0.00) slower
          String#sub: 17131848.6 i/s - 2.62x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix     1.434M i/100ms
          String#sub     6.547M i/100ms
Calculating -------------------------------------
String#delete_prefix     16.737M (± 4.8%) i/s -     84.627M in   5.068419s
          String#sub     65.462M (± 0.1%) i/s -    327.346M in   5.000595s

Comparison:
          String#sub: 65461585.4 i/s
String#delete_prefix: 16737104.1 i/s - 3.91x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.134M i/100ms
    String#unpack[0]     1.181M i/100ms
Calculating -------------------------------------
      String#unpack1     12.137M (± 3.9%) i/s -     61.225M in   5.052905s
    String#unpack[0]     11.922M (± 3.4%) i/s -     60.214M in   5.056872s

Comparison:
      String#unpack1: 12136631.3 i/s
    String#unpack[0]: 11921523.9 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.3.0-dev-0e42c2a6, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    12.015k i/100ms
          Time.parse   165.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    129.099k (±23.5%) i/s -    600.750k in   5.025056s
          Time.parse      4.770k (±28.2%) i/s -     20.130k in   5.013423s

Comparison:
        Time.iso8601:   129099.1 i/s
          Time.parse:     4769.9 i/s - 27.07x  (± 0.00) slower

