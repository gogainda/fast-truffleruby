$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       113.573M i/100ms
Function with splat arguments
                         1.229k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.135B (± 0.6%) i/s -      5.679B in   5.003078s
Function with splat arguments
                         13.403k (± 5.4%) i/s -     67.595k in   5.059901s

Comparison:
Function with single Array argument: 1135065068.9 i/s
Function with splat arguments:    13402.6 i/s - 84690.01x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   113.888M i/100ms
Sequential Assignment
                       114.330M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.134B (± 0.6%) i/s -      5.694B in   5.023190s
Sequential Assignment
                          1.136B (± 0.5%) i/s -      5.716B in   5.032344s

Comparison:
Sequential Assignment: 1135973320.7 i/s
 Parallel Assignment: 1133659282.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   113.878M i/100ms
       attr_accessor   113.591M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.135B (± 0.5%) i/s -      5.694B in   5.015284s
       attr_accessor      1.137B (± 0.7%) i/s -      5.793B in   5.093268s

Comparison:
       attr_accessor: 1137475913.5 i/s
   getter_and_setter: 1135334852.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     9.430k i/100ms
         respond_to?   113.538M i/100ms
Calculating -------------------------------------
      begin...rescue     67.784k (± 2.7%) i/s -    339.480k in   5.011854s
         respond_to?      1.136B (± 0.3%) i/s -      5.790B in   5.096916s

Comparison:
         respond_to?: 1136080913.4 i/s
      begin...rescue:    67783.7 i/s - 16760.38x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   113.365M i/100ms
             &method   113.845M i/100ms
Calculating -------------------------------------
              normal      1.138B (± 1.1%) i/s -      5.782B in   5.079576s
             &method      1.137B (± 0.7%) i/s -      5.692B in   5.006673s

Comparison:
              normal: 1138340270.1 i/s
             &method: 1136990320.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       128.000  i/100ms
       define_method   148.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.398k (±53.2%) i/s -      6.656k in   5.103004s
       define_method      5.374k (±56.8%) i/s -      7.844k in   6.313797s

Comparison:
       define_method:     5374.2 i/s
module_eval with string:     2398.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    31.194k i/100ms
       Kernel#format    49.833k i/100ms
            String#%    50.664k i/100ms
Calculating -------------------------------------
         Float#round    345.204k (± 3.1%) i/s -      1.747M in   5.065501s
       Kernel#format    519.861k (± 4.2%) i/s -      2.641M in   5.089659s
            String#%    512.388k (± 4.4%) i/s -      2.584M in   5.052715s

Comparison:
       Kernel#format:   519861.4 i/s
            String#%:   512387.6 i/s - same-ish: difference falls within error
         Float#round:   345204.1 i/s - 1.51x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.350M i/100ms
          OpenStruct   114.473M i/100ms
Calculating -------------------------------------
                Hash      1.134B (± 0.7%) i/s -      5.781B in   5.097791s
          OpenStruct      1.134B (± 0.5%) i/s -      5.724B in   5.046597s

Comparison:
          OpenStruct: 1134180533.5 i/s
                Hash: 1134052275.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.964M i/100ms
          OpenStruct     3.019k i/100ms
Calculating -------------------------------------
                Hash      1.133B (± 0.4%) i/s -      5.698B in   5.029633s
          OpenStruct     34.965k (±10.4%) i/s -    172.083k in   5.012216s

Comparison:
                Hash: 1132940422.6 i/s
          OpenStruct:    34964.5 i/s - 32402.56x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   802.695k i/100ms
  ancestors.include?   146.821k i/100ms
Calculating -------------------------------------
  less than or equal      8.659M (± 2.9%) i/s -     43.346M in   5.010029s
  ancestors.include?      1.485M (± 3.6%) i/s -      7.488M in   5.049795s

Comparison:
  less than or equal:  8659441.1 i/s
  ancestors.include?:  1484777.1 i/s - 5.83x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     11.341  (± 0.0%) i/s -     57.000  in   5.026048s
         Kernel loop      3.887  (± 0.0%) i/s -     20.000  in   5.156431s

Comparison:
          While Loop:       11.3 i/s
         Kernel loop:        3.9 i/s - 2.92x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   113.595M i/100ms
         Array#first   113.314M i/100ms
Calculating -------------------------------------
           Array#[0]      1.134B (± 0.6%) i/s -      5.680B in   5.009058s
         Array#first      1.136B (± 0.6%) i/s -      5.779B in   5.088949s

Comparison:
         Array#first: 1135648348.0 i/s
           Array#[0]: 1133933999.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   113.550M i/100ms
          Array#last   114.099M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.134B (± 0.4%) i/s -      5.677B in   5.006997s
          Array#last      1.135B (± 0.3%) i/s -      5.705B in   5.026862s

Comparison:
          Array#last: 1134901921.7 i/s
          Array#[-1]: 1133928331.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   643.783k i/100ms
Calculating -------------------------------------
                find     14.980  (±13.4%) i/s -     50.000  in   5.027451s
             bsearch      6.432M (± 3.8%) i/s -     32.189M in   5.011885s

Comparison:
             bsearch:  6432482.0 i/s
                find:       15.0 i/s - 429390.92x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.068  (± 0.0%) i/s -      1.000  in  14.716243s
        Array#insert      1.018  (± 0.0%) i/s -      6.000  in   5.895891s

Comparison:
        Array#insert:        1.0 i/s
       Array#unshift:        0.1 i/s - 14.98x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   113.558M i/100ms
          Array#size   113.719M i/100ms
         Array#count   113.569M i/100ms
Calculating -------------------------------------
        Array#length      1.136B (± 0.7%) i/s -      5.791B in   5.096528s
          Array#size      1.136B (± 1.6%) i/s -      5.686B in   5.007375s
         Array#count      1.137B (± 0.8%) i/s -      5.792B in   5.093941s

Comparison:
         Array#count: 1137116462.0 i/s
        Array#length: 1136408078.0 i/s - same-ish: difference falls within error
          Array#size: 1135795645.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    18.239k i/100ms
        Array#sample     2.701M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    140.706k (± 2.8%) i/s -    711.321k in   5.059235s
        Array#sample     26.959M (± 0.5%) i/s -    135.074M in   5.010499s

Comparison:
        Array#sample: 26958862.1 i/s
 Array#shuffle.first:   140706.4 i/s - 191.60x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   734.000  i/100ms
          Date.parse   126.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     17.667k (±31.4%) i/s -     72.666k in   5.293904s
          Date.parse      7.668k (±36.8%) i/s -     30.870k in   4.998807s

Comparison:
        Date.iso8601:    17667.1 i/s
          Date.parse:     7668.0 i/s - 2.30x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   235.283k i/100ms
           Array#map     1.055M i/100ms
Calculating -------------------------------------
   Array#each + push      2.204M (± 4.3%) i/s -     11.058M in   5.026878s
           Array#map     10.530M (± 5.2%) i/s -     52.770M in   5.025682s

Comparison:
           Array#map: 10529510.9 i/s
   Array#each + push:  2204062.1 i/s - 4.78x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     7.891M i/100ms
               #each    41.061M i/100ms
Calculating -------------------------------------
            For loop     85.526M (± 6.9%) i/s -    433.978M in   5.100018s
               #each    391.263M (± 1.2%) i/s -      1.971B in   5.038132s

Comparison:
               #each: 391263280.3 i/s
            For loop: 85525665.0 i/s - 4.57x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   820.439k i/100ms
     each_with_index     1.043M i/100ms
Calculating -------------------------------------
          While Loop      8.211M (± 0.0%) i/s -     41.842M in   5.095656s
     each_with_index     10.424M (± 0.2%) i/s -     52.153M in   5.003341s

Comparison:
     each_with_index: 10423749.2 i/s
          While Loop:  8211386.1 i/s - 1.27x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   160.335k i/100ms
      inject to_proc   160.230k i/100ms
        inject block   160.596k i/100ms
Calculating -------------------------------------
       inject symbol      1.605M (± 0.2%) i/s -      8.177M in   5.093198s
      inject to_proc      1.605M (± 0.2%) i/s -      8.172M in   5.089929s
        inject block      1.606M (± 0.3%) i/s -      8.190M in   5.098336s

Comparison:
        inject block:  1606499.6 i/s
       inject symbol:  1605497.0 i/s - same-ish: difference falls within error
      inject to_proc:  1605475.7 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    17.564k i/100ms
   Array#map.flatten    17.376k i/100ms
      Array#flat_map    44.195k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    183.723k (± 4.2%) i/s -    930.892k in   5.076345s
   Array#map.flatten    184.826k (± 3.8%) i/s -    938.304k in   5.084419s
      Array#flat_map    439.121k (± 3.0%) i/s -      2.210M in   5.037256s

Comparison:
      Array#flat_map:   439121.4 i/s
   Array#map.flatten:   184826.2 i/s - 2.38x  (± 0.00) slower
Array#map.flatten(1):   183722.7 i/s - 2.39x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   216.585k i/100ms
  Array#reverse_each     1.553M i/100ms
Calculating -------------------------------------
  Array#reverse.each      2.309M (± 2.4%) i/s -     11.696M in   5.067750s
  Array#reverse_each     15.600M (± 2.1%) i/s -     79.200M in   5.079244s

Comparison:
  Array#reverse_each: 15600262.8 i/s
  Array#reverse.each:  2309235.6 i/s - 6.76x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       740.290k i/100ms
   Enumerable#detect     2.663M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          7.812M (± 5.4%) i/s -    156.201M in  20.074888s
   Enumerable#detect     26.662M (± 0.2%) i/s -    535.331M in  20.078751s

Comparison:
   Enumerable#detect: 26661707.8 i/s
Enumerable#select.first:  7811559.2 i/s - 3.41x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       217.268k i/100ms
Enumerable#select.last
                       401.433k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.324M (± 2.5%) i/s -     11.732M in   5.052090s
Enumerable#select.last
                          4.057M (± 2.9%) i/s -     20.473M in   5.051144s

Comparison:
Enumerable#select.last:  4056715.2 i/s
Enumerable#reverse.detect:  2323856.5 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.941k i/100ms
  Enumerable#sort_by     3.181k i/100ms
     Enumerable#sort     4.034k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         30.445k (±14.8%) i/s -    141.168k in   5.025048s
  Enumerable#sort_by     30.541k (±15.5%) i/s -    139.964k in   5.039989s
     Enumerable#sort     40.762k (± 1.5%) i/s -    205.734k in   5.048424s

Comparison:
     Enumerable#sort:    40762.2 i/s
  Enumerable#sort_by:    30540.5 i/s - 1.33x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    30445.2 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   413.323k i/100ms
Enumerable#sort_by...first
                         7.151k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      4.141M (± 0.8%) i/s -     21.079M in   5.090899s
Enumerable#sort_by...first
                         74.367k (± 2.5%) i/s -    371.852k in   5.003556s

Comparison:
   Enumerable#min_by:  4140895.3 i/s
Enumerable#sort_by...first:    74367.1 i/s - 55.68x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   408.604k i/100ms
            Hash#dup   451.957k i/100ms
Calculating -------------------------------------
              Hash[]      4.784M (± 2.5%) i/s -     24.108M in   5.042801s
            Hash#dup      4.696M (± 2.2%) i/s -     23.502M in   5.006654s

Comparison:
              Hash[]:  4783776.1 i/s
            Hash#dup:  4696446.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   114.242M i/100ms
  Hash#fetch, symbol   113.677M i/100ms
     Hash#[], string     6.539M i/100ms
  Hash#fetch, string     6.576M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.136B (± 0.8%) i/s -      5.712B in   5.028552s
  Hash#fetch, symbol      1.139B (± 1.2%) i/s -      5.798B in   5.092240s
     Hash#[], string     65.736M (± 0.4%) i/s -    333.466M in   5.072882s
  Hash#fetch, string     64.836M (± 0.3%) i/s -    328.817M in   5.071542s

Comparison:
  Hash#fetch, symbol: 1138661789.0 i/s
     Hash#[], symbol: 1136012240.0 i/s - same-ish: difference falls within error
     Hash#[], string: 65736388.8 i/s - 17.32x  (± 0.00) slower
  Hash#fetch, string: 64836232.5 i/s - 17.56x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    41.715M i/100ms
             Hash#[]    49.770M i/100ms
          Hash#[] ||    49.803M i/100ms
          Hash#[] &&    49.805M i/100ms
          Hash#fetch    42.689M i/100ms
 Hash#fetch fallback    42.787M i/100ms
Calculating -------------------------------------
            Hash#dig    418.709M (± 0.7%) i/s -      2.127B in   5.081292s
             Hash#[]    497.887M (± 0.1%) i/s -      2.538B in   5.098132s
          Hash#[] ||    497.325M (± 0.4%) i/s -      2.490B in   5.007189s
          Hash#[] &&    497.544M (± 0.3%) i/s -      2.490B in   5.005119s
          Hash#fetch    424.762M (± 1.2%) i/s -      2.134B in   5.025800s
 Hash#fetch fallback    422.995M (± 1.0%) i/s -      2.139B in   5.058151s

Comparison:
             Hash#[]: 497886644.2 i/s
          Hash#[] &&: 497544412.7 i/s - same-ish: difference falls within error
          Hash#[] ||: 497324573.3 i/s - same-ish: difference falls within error
          Hash#fetch: 424762025.2 i/s - 1.17x  (± 0.00) slower
 Hash#fetch fallback: 422994748.9 i/s - 1.18x  (± 0.00) slower
            Hash#dig: 418709001.8 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   114.701M i/100ms
  Hash#fetch + block   113.385M i/100ms
    Hash#fetch + arg   113.469M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.135B (± 0.7%) i/s -      5.735B in   5.055198s
  Hash#fetch + block      1.135B (± 0.6%) i/s -      5.783B in   5.095471s
    Hash#fetch + arg      1.138B (± 1.1%) i/s -      5.787B in   5.085080s

Comparison:
    Hash#fetch + arg: 1138160262.9 i/s
  Hash#fetch + block: 1134898819.4 i/s - same-ish: difference falls within error
  Hash#fetch + const: 1134548591.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    21.859k i/100ms
         sort + to_h    13.145k i/100ms
Calculating -------------------------------------
      sort_by + to_h    292.361k (± 8.3%) i/s -      1.465M in   5.048818s
         sort + to_h    161.981k (± 4.0%) i/s -    814.990k in   5.039754s

Comparison:
      sort_by + to_h:   292361.0 i/s
         sort + to_h:   161980.9 i/s - 1.80x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   135.799k i/100ms
       Hash#each_key   160.766k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.427M (± 4.1%) i/s -      7.197M in   5.052575s
       Hash#each_key      1.649M (± 4.1%) i/s -      8.360M in   5.077959s

Comparison:
       Hash#each_key:  1649225.5 i/s
      Hash#keys.each:  1427031.0 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   215.000  i/100ms
           Hash#key?     3.460M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      2.053k (±14.1%) i/s -     10.105k in   5.091465s
           Hash#key?     34.584M (± 0.3%) i/s -    172.983M in   5.001903s

Comparison:
           Hash#key?: 34583707.3 i/s
  Hash#keys.include?:     2053.3 i/s - 16842.84x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    39.249k i/100ms
            Hash#[]=    43.251k i/100ms
Calculating -------------------------------------
         Hash#merge!    423.226k (± 4.4%) i/s -      2.119M in   5.018311s
            Hash#[]=    437.360k (± 4.2%) i/s -      2.206M in   5.052951s

Comparison:
            Hash#[]=:   437360.3 i/s
         Hash#merge!:   423225.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        21.311k i/100ms
      Hash#merge({})    15.374k i/100ms
 Hash#dup#merge!({})    25.230k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        250.525k (± 2.6%) i/s -      1.257M in   5.022411s
      Hash#merge({})    161.917k (± 2.3%) i/s -    814.822k in   5.035057s
 Hash#dup#merge!({})    253.169k (± 2.1%) i/s -      1.287M in   5.084806s

Comparison:
 Hash#dup#merge!({}):   253168.6 i/s
{}#merge!(Hash) do end:   250524.6 i/s - same-ish: difference falls within error
      Hash#merge({}):   161917.1 i/s - 1.56x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   113.458M i/100ms
          Hash#merge   113.990M i/100ms
Calculating -------------------------------------
        Hash#**other      1.136B (± 0.6%) i/s -      5.786B in   5.092376s
          Hash#merge      1.138B (± 0.9%) i/s -      5.699B in   5.007236s

Comparison:
          Hash#merge: 1138340641.6 i/s
        Hash#**other: 1136314835.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   663.000  i/100ms
         Hash#merge!    41.141k i/100ms
Calculating -------------------------------------
          Hash#merge      8.135k (± 5.5%) i/s -     41.106k in   5.069652s
         Hash#merge!    424.729k (± 2.6%) i/s -      2.139M in   5.040561s

Comparison:
         Hash#merge!:   424729.4 i/s
          Hash#merge:     8135.4 i/s - 52.21x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.382M i/100ms
Array#each               1.264M i/100ms
Array#each_w/_object     1.274M i/100ms
Hash#select-include      1.959M i/100ms
Calculating -------------------------------------
Hash#native-slice        16.422M (± 3.0%) i/s -     82.913M in   5.053647s
Array#each               12.791M (± 3.2%) i/s -     64.454M in   5.044124s
Array#each_w/_object     12.842M (± 3.0%) i/s -     64.970M in   5.063964s
Hash#select-include      19.571M (± 2.6%) i/s -     97.957M in   5.008569s

Comparison:
Hash#select-include : 19571213.2 i/s
Hash#native-slice   : 16421946.4 i/s - 1.19x  (± 0.00) slower
Array#each_w/_object: 12842361.2 i/s - 1.52x  (± 0.00) slower
Array#each          : 12791285.8 i/s - 1.53x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   176.000  i/100ms
         Hash#value?   452.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      2.081k (±11.1%) i/s -     10.384k in   5.070332s
         Hash#value?      4.534k (± 0.1%) i/s -     23.052k in   5.084755s

Comparison:
         Hash#value?:     4533.6 i/s
Hash#values.include?:     2081.4 i/s - 2.18x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   113.528M i/100ms
                send   113.709M i/100ms
      method_missing   113.617M i/100ms
Calculating -------------------------------------
                call      1.135B (± 0.6%) i/s -      5.676B in   5.001474s
                send      1.143B (± 1.4%) i/s -      5.799B in   5.076297s
      method_missing      1.144B (± 1.6%) i/s -      5.794B in   5.067166s

Comparison:
      method_missing: 1143820667.2 i/s
                send: 1142622720.5 i/s - same-ish: difference falls within error
                call: 1134991858.3 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    39.175k i/100ms
      Symbol#to_proc    43.021k i/100ms
Calculating -------------------------------------
               Block    436.217k (± 2.3%) i/s -      2.194M in   5.031971s
      Symbol#to_proc    439.008k (± 2.2%) i/s -      2.194M in   5.000233s

Comparison:
      Symbol#to_proc:   439007.6 i/s
               Block:   436216.9 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   113.377M i/100ms
       block + yield   114.085M i/100ms
        unused block   113.438M i/100ms
               yield   113.570M i/100ms
Calculating -------------------------------------
          block.call      1.144B (± 1.4%) i/s -      5.782B in   5.056209s
       block + yield      1.143B (± 1.3%) i/s -      5.818B in   5.089063s
        unused block      1.143B (± 1.9%) i/s -      5.785B in   5.063420s
               yield      1.147B (± 1.6%) i/s -      5.792B in   5.051997s

Comparison:
               yield: 1146778687.6 i/s
          block.call: 1143792489.5 i/s - same-ish: difference falls within error
       block + yield: 1143476282.3 i/s - same-ish: difference falls within error
        unused block: 1142971131.6 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    63.876k i/100ms
      range#include?   296.000  i/100ms
       range#member?   229.000  i/100ms
       plain compare     7.752k i/100ms
Calculating -------------------------------------
        range#cover?    383.615k (±42.7%) i/s -      1.341M in   5.000054s
      range#include?      8.539k (±35.4%) i/s -     27.232k in   5.024228s
       range#member?      7.123k (±39.6%) i/s -     16.717k in   5.015342s
       plain compare    700.804k (±51.9%) i/s -      1.550M in   5.002691s

Comparison:
       plain compare:   700804.0 i/s
        range#cover?:   383615.2 i/s - same-ish: difference falls within error
      range#include?:     8538.9 i/s - 82.07x  (± 0.00) slower
       range#member?:     7122.8 i/s - 98.39x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     6.162M i/100ms
           String#=~     8.588M i/100ms
          Regexp#===     8.588M i/100ms
        String#match     5.667M i/100ms
Calculating -------------------------------------
       String#match?     72.077M (± 4.7%) i/s -    363.582M in   5.056283s
           String#=~     85.874M (± 0.0%) i/s -    429.395M in   5.000294s
          Regexp#===     85.874M (± 0.0%) i/s -    429.397M in   5.000341s
        String#match     57.437M (± 4.6%) i/s -    289.005M in   5.042847s

Comparison:
           String#=~: 85873860.2 i/s
          Regexp#===: 85873519.1 i/s - same-ish: difference falls within error
       String#match?: 72077113.4 i/s - 1.19x  (± 0.00) slower
        String#match: 57436863.6 i/s - 1.50x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.859M i/100ms
      String#casecmp     3.383M i/100ms
Calculating -------------------------------------
String#downcase + ==     20.670M (± 4.7%) i/s -    104.082M in   5.047074s
      String#casecmp     33.770M (± 0.6%) i/s -    169.163M in   5.009458s

Comparison:
      String#casecmp: 33770063.1 i/s
String#downcase + ==: 20670249.3 i/s - 1.63x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+   114.410M i/100ms
       String#concat   113.697M i/100ms
       String#append   113.892M i/100ms
         "foo" "bar"   113.678M i/100ms
  "#{'foo'}#{'bar'}"   113.700M i/100ms
Calculating -------------------------------------
            String#+      1.150B (± 2.0%) i/s -      5.835B in   5.076714s
       String#concat      1.148B (± 1.7%) i/s -      5.799B in   5.052957s
       String#append      1.138B (± 0.9%) i/s -      5.695B in   5.003305s
         "foo" "bar"      1.141B (± 0.8%) i/s -      5.798B in   5.082718s
  "#{'foo'}#{'bar'}"      1.137B (± 0.5%) i/s -      5.685B in   5.002159s

Comparison:
            String#+: 1149801577.5 i/s
       String#concat: 1147878387.1 i/s - same-ish: difference falls within error
         "foo" "bar": 1140720846.2 i/s - same-ish: difference falls within error
       String#append: 1138254740.2 i/s - same-ish: difference falls within error
  "#{'foo'}#{'bar'}": 1136546101.2 i/s - same-ish: difference falls within error

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   113.635M i/100ms
          String#dup   113.776M i/100ms
Calculating -------------------------------------
           String#+@      1.138B (± 1.0%) i/s -      5.795B in   5.094499s
          String#dup      1.137B (± 0.8%) i/s -      5.689B in   5.002282s

Comparison:
           String#+@: 1137677219.7 i/s
          String#dup: 1137322010.3 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.506M i/100ms
       String#match?     1.730M i/100ms
    String#end_with?    18.521M i/100ms
Calculating -------------------------------------
           String#=~     17.515M (± 2.1%) i/s -     88.873M in   5.076502s
       String#match?     17.874M (± 1.8%) i/s -     89.983M in   5.035840s
    String#end_with?    185.037M (± 0.7%) i/s -    926.061M in   5.004983s

Comparison:
    String#end_with?: 185037467.7 i/s
       String#match?: 17874255.0 i/s - 10.35x  (± 0.00) slower
           String#=~: 17514713.9 i/s - 10.56x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   116.328k i/100ms
          String#sub   662.646k i/100ms
String#dup["string"]=
                        17.233M i/100ms
Calculating -------------------------------------
         String#gsub      1.255M (± 5.5%) i/s -      6.282M in   5.021762s
          String#sub      8.268M (± 2.6%) i/s -     41.747M in   5.052503s
String#dup["string"]=
                        173.248M (± 0.8%) i/s -    878.884M in   5.073277s

Comparison:
String#dup["string"]=: 173247839.0 i/s
          String#sub:  8268368.3 i/s - 20.95x  (± 0.00) slower
         String#gsub:  1255063.6 i/s - 138.04x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   266.373k i/100ms
           String#tr   190.088k i/100ms
Calculating -------------------------------------
         String#gsub      3.005M (± 7.3%) i/s -     15.183M in   5.082249s
           String#tr      1.915M (± 4.3%) i/s -      9.694M in   5.073912s

Comparison:
         String#gsub:  3004948.0 i/s
           String#tr:  1914636.3 i/s - 1.57x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   113.461M i/100ms
         With Freeze   114.222M i/100ms
Calculating -------------------------------------
      Without Freeze      1.136B (± 0.9%) i/s -      5.787B in   5.092098s
         With Freeze      1.136B (± 0.3%) i/s -      5.711B in   5.028594s

Comparison:
      Without Freeze: 1136456827.9 i/s
         With Freeze: 1135735966.5 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     8.950k i/100ms
      String#squeeze    66.174k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    125.694k (± 7.1%) i/s -    626.500k in   5.010988s
      String#squeeze    668.006k (± 3.0%) i/s -      3.375M in   5.057324s

Comparison:
      String#squeeze:   668005.8 i/s
 String#gsub/regex+/:   125694.3 i/s - 5.31x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     3.846M i/100ms
       String#match?     4.399M i/100ms
  String#start_with?     2.458M i/100ms
Calculating -------------------------------------
           String#=~     39.352M (± 2.3%) i/s -    200.007M in   5.085373s
       String#match?     45.696M (± 3.0%) i/s -    228.728M in   5.010087s
  String#start_with?     24.742M (± 3.3%) i/s -    125.376M in   5.073192s

Comparison:
       String#match?: 45695938.5 i/s
           String#=~: 39351853.5 i/s - 1.16x  (± 0.00) slower
  String#start_with?: 24742392.6 i/s - 1.85x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   386.927k i/100ms
    String#[0, n] ==   237.745k i/100ms
   String#[RANGE] ==   256.615k i/100ms
   String#[0...n] ==   186.232k i/100ms
Calculating -------------------------------------
  String#start_with?      4.059M (± 3.8%) i/s -     20.507M in   5.059914s
    String#[0, n] ==      2.426M (± 4.8%) i/s -     12.125M in   5.009636s
   String#[RANGE] ==      2.592M (± 5.4%) i/s -     13.087M in   5.065435s
   String#[0...n] ==      1.942M (± 5.2%) i/s -      9.684M in   5.001642s

Comparison:
  String#start_with?:  4059487.9 i/s
   String#[RANGE] ==:  2591813.7 i/s - 1.57x  (± 0.00) slower
    String#[0, n] ==:  2426392.8 i/s - 1.67x  (± 0.00) slower
   String#[0...n] ==:  1942034.4 i/s - 2.09x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    18.428M i/100ms
 String#sub!'string'   753.597k i/100ms
String#gsub!'string'   112.747k i/100ms
  String#[/regexp/]=     5.082M i/100ms
 String#sub!/regexp/     2.604M i/100ms
String#gsub!/regexp/   744.641k i/100ms
Calculating -------------------------------------
  String#['string']=    184.274M (± 0.3%) i/s -    921.376M in   5.000082s
 String#sub!'string'      9.324M (±12.9%) i/s -     42.955M in   5.067156s
String#gsub!'string'      1.367M (± 1.8%) i/s -      6.878M in   5.031375s
  String#[/regexp/]=     50.816M (± 0.0%) i/s -    254.109M in   5.000572s
 String#sub!/regexp/     26.127M (± 2.0%) i/s -    132.801M in   5.085054s
String#gsub!/regexp/      7.490M (± 2.3%) i/s -     37.977M in   5.073089s

Comparison:
  String#['string']=: 184273733.4 i/s
  String#[/regexp/]=: 50815947.3 i/s - 3.63x  (± 0.00) slower
 String#sub!/regexp/: 26127047.5 i/s - 7.05x  (± 0.00) slower
 String#sub!'string':  9324072.6 i/s - 19.76x  (± 0.00) slower
String#gsub!/regexp/:  7490137.6 i/s - 24.60x  (± 0.00) slower
String#gsub!'string':  1367412.6 i/s - 134.76x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     2.378M i/100ms
        String#chomp     3.836M i/100ms
String#delete_suffix     6.861M i/100ms
Calculating -------------------------------------
          String#sub     25.285M (± 5.3%) i/s -    126.023M in   4.999465s
        String#chomp     38.394M (± 3.1%) i/s -    191.791M in   5.000314s
String#delete_suffix     68.022M (± 1.2%) i/s -    343.027M in   5.043627s

Comparison:
String#delete_suffix: 68022241.5 i/s
        String#chomp: 38394159.8 i/s - 1.77x  (± 0.00) slower
          String#sub: 25284650.4 i/s - 2.69x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix     2.740M i/100ms
          String#sub     6.180M i/100ms
Calculating -------------------------------------
String#delete_prefix     28.790M (± 5.1%) i/s -    145.245M in   5.058913s
          String#sub     61.529M (± 6.3%) i/s -    309.013M in   5.043027s

Comparison:
          String#sub: 61529130.8 i/s
String#delete_prefix: 28790452.9 i/s - 2.14x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.729M i/100ms
    String#unpack[0]     1.774M i/100ms
Calculating -------------------------------------
      String#unpack1     17.888M (± 3.2%) i/s -     89.885M in   5.030161s
    String#unpack[0]     17.880M (± 3.0%) i/s -     90.459M in   5.063917s

Comparison:
      String#unpack1: 17887867.7 i/s
    String#unpack[0]: 17880443.9 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.1.0-dev-0e730617, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    19.497k i/100ms
          Time.parse   287.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    177.287k (±16.3%) i/s -    857.868k in   5.087629s
          Time.parse      6.021k (±33.9%) i/s -     26.404k in   5.025126s

Comparison:
        Time.iso8601:   177287.3 i/s
          Time.parse:     6021.5 i/s - 29.44x  (± 0.00) slower

