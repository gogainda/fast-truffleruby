$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       113.872M i/100ms
Function with splat arguments
                         1.202k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.134B (± 0.8%) i/s -      5.694B in   5.022217s
Function with splat arguments
                         13.191k (± 7.0%) i/s -     66.110k in   5.038911s

Comparison:
Function with single Array argument: 1133761092.9 i/s
Function with splat arguments:    13190.8 i/s - 85951.01x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   113.983M i/100ms
Sequential Assignment
                       113.378M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.133B (± 0.5%) i/s -      5.699B in   5.029868s
Sequential Assignment
                          1.135B (± 0.5%) i/s -      5.782B in   5.096511s

Comparison:
Sequential Assignment: 1134592293.1 i/s
 Parallel Assignment: 1133093800.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   113.494M i/100ms
       attr_accessor   113.299M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.134B (± 0.6%) i/s -      5.675B in   5.004702s
       attr_accessor      1.137B (± 0.8%) i/s -      5.778B in   5.082389s

Comparison:
       attr_accessor: 1136990053.2 i/s
   getter_and_setter: 1133912172.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue    10.362k i/100ms
         respond_to?   113.384M i/100ms
Calculating -------------------------------------
      begin...rescue     70.942k (± 2.9%) i/s -    362.670k in   5.116464s
         respond_to?      1.135B (± 0.6%) i/s -      5.783B in   5.093534s

Comparison:
         respond_to?: 1135315524.5 i/s
      begin...rescue:    70941.8 i/s - 16003.47x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   113.276M i/100ms
             &method   113.298M i/100ms
Calculating -------------------------------------
              normal      1.134B (± 0.6%) i/s -      5.777B in   5.094813s
             &method      1.135B (± 0.4%) i/s -      5.778B in   5.092296s

Comparison:
             &method: 1134714209.8 i/s
              normal: 1133953373.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       137.000  i/100ms
       define_method   151.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.226k (±57.3%) i/s -      4.932k in   5.647456s
       define_method      6.267k (±46.4%) i/s -      8.909k in   5.055597s

Comparison:
       define_method:     6267.2 i/s
module_eval with string:     2225.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    84.127k i/100ms
       Kernel#format    75.281k i/100ms
            String#%    76.118k i/100ms
Calculating -------------------------------------
         Float#round    902.701k (± 2.4%) i/s -      4.543M in   5.035521s
       Kernel#format    761.331k (± 2.1%) i/s -      3.839M in   5.045318s
            String#%    761.319k (± 2.0%) i/s -      3.806M in   5.001176s

Comparison:
         Float#round:   902700.9 i/s
       Kernel#format:   761331.4 i/s - 1.19x  (± 0.00) slower
            String#%:   761318.9 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.318M i/100ms
          OpenStruct   113.741M i/100ms
Calculating -------------------------------------
                Hash      1.134B (± 0.6%) i/s -      5.779B in   5.096021s
          OpenStruct      1.133B (± 0.2%) i/s -      5.687B in   5.018725s

Comparison:
                Hash: 1134106988.2 i/s
          OpenStruct: 1133174567.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.701M i/100ms
          OpenStruct     3.069k i/100ms
Calculating -------------------------------------
                Hash      1.131B (± 0.7%) i/s -      5.685B in   5.027070s
          OpenStruct     34.466k (±10.0%) i/s -    171.864k in   5.065721s

Comparison:
                Hash: 1130940155.1 i/s
          OpenStruct:    34466.3 i/s - 32812.96x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   820.213k i/100ms
  ancestors.include?   165.779k i/100ms
Calculating -------------------------------------
  less than or equal      8.904M (± 3.7%) i/s -     45.112M in   5.074266s
  ancestors.include?      1.685M (± 5.0%) i/s -      8.455M in   5.032256s

Comparison:
  less than or equal:  8903743.7 i/s
  ancestors.include?:  1684527.1 i/s - 5.29x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     11.336  (± 0.0%) i/s -     57.000  in   5.028300s
         Kernel loop     11.380  (± 0.0%) i/s -     57.000  in   5.008814s

Comparison:
         Kernel loop:       11.4 i/s
          While Loop:       11.3 i/s - 1.00x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   113.480M i/100ms
         Array#first   113.322M i/100ms
Calculating -------------------------------------
           Array#[0]      1.135B (± 0.8%) i/s -      5.787B in   5.098360s
         Array#first      1.135B (± 0.8%) i/s -      5.779B in   5.092149s

Comparison:
           Array#[0]: 1135229657.1 i/s
         Array#first: 1135045711.8 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   113.974M i/100ms
          Array#last   113.525M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.134B (± 0.5%) i/s -      5.699B in   5.024911s
          Array#last      1.136B (± 0.3%) i/s -      5.790B in   5.095592s

Comparison:
          Array#last: 1136238248.1 i/s
          Array#[-1]: 1134116864.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   695.133k i/100ms
Calculating -------------------------------------
                find      4.714  (± 0.0%) i/s -     24.000  in   5.091240s
             bsearch      6.942M (± 4.1%) i/s -     34.757M in   5.015448s

Comparison:
             bsearch:  6941671.5 i/s
                find:        4.7 i/s - 1472556.46x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.069  (± 0.0%) i/s -      1.000  in  14.503910s
        Array#insert      1.021  (± 0.0%) i/s -      6.000  in   5.878197s

Comparison:
        Array#insert:        1.0 i/s
       Array#unshift:        0.1 i/s - 14.80x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   113.485M i/100ms
          Array#size   113.366M i/100ms
         Array#count   113.524M i/100ms
Calculating -------------------------------------
        Array#length      1.134B (± 0.6%) i/s -      5.674B in   5.003104s
          Array#size      1.134B (± 0.3%) i/s -      5.782B in   5.098596s
         Array#count      1.134B (± 0.2%) i/s -      5.676B in   5.003367s

Comparison:
         Array#count: 1134478884.3 i/s
        Array#length: 1134180549.8 i/s - same-ish: difference falls within error
          Array#size: 1133981424.4 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    23.384k i/100ms
        Array#sample     2.796M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    238.590k (± 1.6%) i/s -      1.193M in   4.999816s
        Array#sample     27.960M (± 0.1%) i/s -    142.585M in   5.099609s

Comparison:
        Array#sample: 27960086.8 i/s
 Array#shuffle.first:   238590.0 i/s - 117.19x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601     1.043k i/100ms
          Date.parse   181.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     30.423k (±29.7%) i/s -    130.375k in   5.015875s
          Date.parse     10.302k (±26.4%) i/s -     43.802k in   5.009607s

Comparison:
        Date.iso8601:    30422.9 i/s
          Date.parse:    10301.8 i/s - 2.95x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   227.571k i/100ms
           Array#map     1.045M i/100ms
Calculating -------------------------------------
   Array#each + push      2.479M (± 4.6%) i/s -     12.516M in   5.061208s
           Array#map     10.377M (± 5.1%) i/s -     52.261M in   5.050017s

Comparison:
           Array#map: 10377213.1 i/s
   Array#each + push:  2478556.0 i/s - 4.19x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     9.379M i/100ms
               #each    41.381M i/100ms
Calculating -------------------------------------
            For loop     94.144M (± 1.0%) i/s -    478.342M in   5.081457s
               #each    413.367M (± 0.4%) i/s -      2.069B in   5.005427s

Comparison:
               #each: 413366897.8 i/s
            For loop: 94143523.2 i/s - 4.39x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   837.532k i/100ms
     each_with_index     1.043M i/100ms
Calculating -------------------------------------
          While Loop      8.380M (± 0.0%) i/s -     42.714M in   5.096857s
     each_with_index     10.427M (± 0.0%) i/s -     52.144M in   5.001023s

Comparison:
     each_with_index: 10426608.8 i/s
          While Loop:  8380485.7 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   161.985k i/100ms
      inject to_proc   161.234k i/100ms
        inject block   161.492k i/100ms
Calculating -------------------------------------
       inject symbol      1.612M (± 0.2%) i/s -      8.099M in   5.024843s
      inject to_proc      1.609M (± 0.4%) i/s -      8.062M in   5.010181s
        inject block      1.608M (± 0.1%) i/s -      8.075M in   5.020855s

Comparison:
       inject symbol:  1611850.5 i/s
      inject to_proc:  1609092.5 i/s - same-ish: difference falls within error
        inject block:  1608214.8 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    16.677k i/100ms
   Array#map.flatten    18.484k i/100ms
      Array#flat_map    45.413k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    187.418k (± 4.8%) i/s -    950.589k in   5.084744s
   Array#map.flatten    191.558k (± 3.8%) i/s -    961.168k in   5.025580s
      Array#flat_map    458.122k (± 1.6%) i/s -      2.316M in   5.056950s

Comparison:
      Array#flat_map:   458121.8 i/s
   Array#map.flatten:   191558.2 i/s - 2.39x  (± 0.00) slower
Array#map.flatten(1):   187417.5 i/s - 2.44x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   260.862k i/100ms
  Array#reverse_each     2.310M i/100ms
Calculating -------------------------------------
  Array#reverse.each      2.632M (± 3.4%) i/s -     13.304M in   5.061540s
  Array#reverse_each     23.106M (± 0.4%) i/s -    117.826M in   5.099497s

Comparison:
  Array#reverse_each: 23105762.6 i/s
  Array#reverse.each:  2631511.8 i/s - 8.78x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       606.997k i/100ms
   Enumerable#detect     2.677M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          6.762M (± 5.1%) i/s -    134.753M in  19.998580s
   Enumerable#detect     26.766M (± 0.3%) i/s -    535.440M in  20.004545s

Comparison:
   Enumerable#detect: 26766120.3 i/s
Enumerable#select.first:  6762004.5 i/s - 3.96x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       208.112k i/100ms
Enumerable#select.last
                       403.025k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.622M (± 3.4%) i/s -     13.111M in   5.007344s
Enumerable#select.last
                          4.045M (± 3.1%) i/s -     20.554M in   5.086098s

Comparison:
Enumerable#select.last:  4045416.9 i/s
Enumerable#reverse.detect:  2621639.2 i/s - 1.54x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.946k i/100ms
  Enumerable#sort_by     3.050k i/100ms
     Enumerable#sort     4.063k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         29.387k (±15.4%) i/s -    144.354k in   5.048485s
  Enumerable#sort_by     28.901k (±18.2%) i/s -    140.300k in   5.053519s
     Enumerable#sort     41.035k (± 1.3%) i/s -    207.213k in   5.050648s

Comparison:
     Enumerable#sort:    41035.0 i/s
Enumerable#sort_by (Symbol#to_proc):    29387.2 i/s - 1.40x  (± 0.00) slower
  Enumerable#sort_by:    28900.7 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   605.989k i/100ms
Enumerable#sort_by...first
                         7.582k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      6.059M (± 0.0%) i/s -     30.299M in   5.000424s
Enumerable#sort_by...first
                         84.059k (± 2.8%) i/s -    424.592k in   5.055204s

Comparison:
   Enumerable#min_by:  6059376.7 i/s
Enumerable#sort_by...first:    84059.4 i/s - 72.08x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   388.133k i/100ms
            Hash#dup   458.187k i/100ms
Calculating -------------------------------------
              Hash[]      4.822M (± 2.7%) i/s -     24.452M in   5.075169s
            Hash#dup      4.820M (± 2.2%) i/s -     24.284M in   5.040747s

Comparison:
              Hash[]:  4821696.1 i/s
            Hash#dup:  4819827.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   113.502M i/100ms
  Hash#fetch, symbol   113.481M i/100ms
     Hash#[], string    14.028M i/100ms
  Hash#fetch, string     3.683M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.138B (± 0.8%) i/s -      5.789B in   5.088594s
  Hash#fetch, symbol      1.148B (± 1.3%) i/s -      5.788B in   5.044243s
     Hash#[], string    177.721M (± 0.2%) i/s -    897.786M in   5.051683s
  Hash#fetch, string    160.330M (± 1.3%) i/s -    802.807M in   5.008117s

Comparison:
  Hash#fetch, symbol: 1147548716.7 i/s
     Hash#[], symbol: 1137632243.7 i/s - same-ish: difference falls within error
     Hash#[], string: 177721272.0 i/s - 6.46x  (± 0.00) slower
  Hash#fetch, string: 160329693.7 i/s - 7.16x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    49.766M i/100ms
             Hash#[]    42.240M i/100ms
          Hash#[] ||    42.071M i/100ms
          Hash#[] &&    46.815M i/100ms
          Hash#fetch    41.976M i/100ms
 Hash#fetch fallback    42.158M i/100ms
Calculating -------------------------------------
            Hash#dig    497.327M (± 0.3%) i/s -      2.488B in   5.003368s
             Hash#[]    423.934M (± 1.0%) i/s -      2.154B in   5.082051s
          Hash#[] ||    422.762M (± 1.1%) i/s -      2.146B in   5.075884s
          Hash#[] &&    422.802M (± 1.4%) i/s -      2.153B in   5.094389s
          Hash#fetch    468.312M (± 3.6%) i/s -      2.351B in   5.026707s
 Hash#fetch fallback    421.360M (± 1.0%) i/s -      2.108B in   5.003099s

Comparison:
            Hash#dig: 497327418.8 i/s
          Hash#fetch: 468312218.3 i/s - 1.06x  (± 0.00) slower
             Hash#[]: 423934099.7 i/s - 1.17x  (± 0.00) slower
          Hash#[] &&: 422802322.5 i/s - 1.18x  (± 0.00) slower
          Hash#[] ||: 422761667.6 i/s - 1.18x  (± 0.00) slower
 Hash#fetch fallback: 421360279.6 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   113.666M i/100ms
  Hash#fetch + block   113.586M i/100ms
    Hash#fetch + arg   114.242M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.135B (± 0.5%) i/s -      5.683B in   5.007340s
  Hash#fetch + block      1.137B (± 0.9%) i/s -      5.793B in   5.093638s
    Hash#fetch + arg      1.138B (± 0.9%) i/s -      5.712B in   5.019852s

Comparison:
    Hash#fetch + arg: 1137987433.9 i/s
  Hash#fetch + block: 1137364831.1 i/s - same-ish: difference falls within error
  Hash#fetch + const: 1135020518.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    23.582k i/100ms
         sort + to_h    12.999k i/100ms
Calculating -------------------------------------
      sort_by + to_h    325.538k (±10.8%) i/s -      1.627M in   5.061351s
         sort + to_h    194.034k (± 5.7%) i/s -    974.925k in   5.042603s

Comparison:
      sort_by + to_h:   325538.4 i/s
         sort + to_h:   194033.5 i/s - 1.68x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   175.788k i/100ms
       Hash#each_key   216.399k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.998M (±10.5%) i/s -      9.844M in   5.039951s
       Hash#each_key      2.198M (± 3.2%) i/s -     11.036M in   5.027012s

Comparison:
       Hash#each_key:  2197814.2 i/s
      Hash#keys.each:  1997905.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   221.000  i/100ms
           Hash#key?     2.968M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      2.327k (± 8.2%) i/s -     11.713k in   5.094572s
           Hash#key?     29.630M (± 0.1%) i/s -    148.408M in   5.008760s

Comparison:
           Hash#key?: 29629659.0 i/s
  Hash#keys.include?:     2327.3 i/s - 12731.52x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    38.835k i/100ms
            Hash#[]=    45.531k i/100ms
Calculating -------------------------------------
         Hash#merge!    401.170k (± 9.7%) i/s -      1.981M in   5.028682s
            Hash#[]=    462.739k (± 4.8%) i/s -      2.322M in   5.030409s

Comparison:
            Hash#[]=:   462738.8 i/s
         Hash#merge!:   401170.4 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        22.711k i/100ms
      Hash#merge({})    15.432k i/100ms
 Hash#dup#merge!({})    25.735k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        284.241k (± 2.7%) i/s -      1.431M in   5.037522s
      Hash#merge({})    167.002k (± 2.4%) i/s -    848.760k in   5.085448s
 Hash#dup#merge!({})    261.959k (± 2.1%) i/s -      1.312M in   5.012529s

Comparison:
{}#merge!(Hash) do end:   284241.1 i/s
 Hash#dup#merge!({}):   261959.2 i/s - 1.09x  (± 0.00) slower
      Hash#merge({}):   167002.2 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   113.341M i/100ms
          Hash#merge   113.617M i/100ms
Calculating -------------------------------------
        Hash#**other      1.134B (± 0.6%) i/s -      5.780B in   5.096208s
          Hash#merge      1.136B (± 0.6%) i/s -      5.681B in   5.001475s

Comparison:
          Hash#merge: 1135878116.3 i/s
        Hash#**other: 1134283456.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   725.000  i/100ms
         Hash#merge!    41.730k i/100ms
Calculating -------------------------------------
          Hash#merge      7.970k (± 5.8%) i/s -     39.875k in   5.021422s
         Hash#merge!    433.890k (± 2.0%) i/s -      2.170M in   5.003175s

Comparison:
         Hash#merge!:   433890.0 i/s
          Hash#merge:     7970.0 i/s - 54.44x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.376M i/100ms
Array#each               1.386M i/100ms
Array#each_w/_object     1.386M i/100ms
Hash#select-include      2.002M i/100ms
Calculating -------------------------------------
Hash#native-slice        16.293M (± 3.9%) i/s -     82.532M in   5.073983s
Array#each               14.163M (± 2.7%) i/s -     72.081M in   5.093416s
Array#each_w/_object     14.010M (± 3.4%) i/s -     70.702M in   5.052481s
Hash#select-include      20.260M (± 2.6%) i/s -    102.077M in   5.041960s

Comparison:
Hash#select-include : 20260048.0 i/s
Hash#native-slice   : 16293494.3 i/s - 1.24x  (± 0.00) slower
Array#each          : 14162688.7 i/s - 1.43x  (± 0.00) slower
Array#each_w/_object: 14010186.1 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   210.000  i/100ms
         Hash#value?   380.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.936k (±10.8%) i/s -      9.660k in   5.080017s
         Hash#value?      3.780k (± 0.3%) i/s -     19.000k in   5.026762s

Comparison:
         Hash#value?:     3779.8 i/s
Hash#values.include?:     1935.7 i/s - 1.95x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   114.142M i/100ms
                send   113.992M i/100ms
      method_missing   113.655M i/100ms
Calculating -------------------------------------
                call      1.135B (± 0.8%) i/s -      5.707B in   5.027552s
                send      1.135B (± 1.5%) i/s -      5.700B in   5.021634s
      method_missing      1.134B (± 0.9%) i/s -      5.683B in   5.012714s

Comparison:
                send: 1135265024.1 i/s
                call: 1135225043.6 i/s - same-ish: difference falls within error
      method_missing: 1133753040.6 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    31.273k i/100ms
      Symbol#to_proc    33.679k i/100ms
Calculating -------------------------------------
               Block    346.228k (± 2.3%) i/s -      1.751M in   5.060966s
      Symbol#to_proc    346.063k (± 2.2%) i/s -      1.751M in   5.063091s

Comparison:
               Block:   346227.6 i/s
      Symbol#to_proc:   346063.2 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   113.866M i/100ms
       block + yield   113.664M i/100ms
        unused block   113.584M i/100ms
               yield   113.846M i/100ms
Calculating -------------------------------------
          block.call      1.143B (± 1.3%) i/s -      5.807B in   5.081451s
       block + yield      1.139B (± 1.1%) i/s -      5.797B in   5.089716s
        unused block      1.141B (± 1.0%) i/s -      5.793B in   5.077643s
               yield      1.146B (± 1.4%) i/s -      5.806B in   5.065550s

Comparison:
               yield: 1146423881.3 i/s
          block.call: 1143008350.3 i/s - same-ish: difference falls within error
        unused block: 1140952820.4 i/s - same-ish: difference falls within error
       block + yield: 1139067915.4 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    25.291k i/100ms
      range#include?   333.000  i/100ms
       range#member?   601.000  i/100ms
       plain compare    11.968k i/100ms
Calculating -------------------------------------
        range#cover?    115.283k (±30.8%) i/s -    531.111k in   5.123419s
      range#include?      5.482k (±25.0%) i/s -     25.641k in   5.024888s
       range#member?      5.396k (±23.9%) i/s -     24.641k in   5.076752s
       plain compare    209.740k (±23.3%) i/s -      1.005M in   5.064737s

Comparison:
       plain compare:   209740.2 i/s
        range#cover?:   115282.5 i/s - 1.82x  (± 0.00) slower
      range#include?:     5482.1 i/s - 38.26x  (± 0.00) slower
       range#member?:     5396.4 i/s - 38.87x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    15.022M i/100ms
           String#=~    14.982M i/100ms
          Regexp#===    14.978M i/100ms
        String#match     9.708M i/100ms
Calculating -------------------------------------
       String#match?    152.165M (± 1.2%) i/s -    766.130M in   5.035699s
           String#=~    149.707M (± 0.4%) i/s -    749.082M in   5.003719s
          Regexp#===    149.695M (± 0.4%) i/s -    748.899M in   5.002903s
        String#match     95.282M (± 0.1%) i/s -    485.382M in   5.094163s

Comparison:
       String#match?: 152165148.5 i/s
           String#=~: 149707285.2 i/s - 1.02x  (± 0.00) slower
          Regexp#===: 149695082.4 i/s - 1.02x  (± 0.00) slower
        String#match: 95282065.5 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.381M i/100ms
      String#casecmp     4.013M i/100ms
Calculating -------------------------------------
String#downcase + ==     27.383M (± 5.7%) i/s -    138.076M in   5.060052s
      String#casecmp     39.619M (± 4.2%) i/s -    200.642M in   5.074020s

Comparison:
      String#casecmp: 39619069.0 i/s
String#downcase + ==: 27382798.3 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     7.593M i/100ms
       String#concat     8.320M i/100ms
       String#append     8.437M i/100ms
         "foo" "bar"   113.972M i/100ms
  "#{'foo'}#{'bar'}"   113.415M i/100ms
Calculating -------------------------------------
            String#+     83.296M (± 3.9%) i/s -    417.588M in   5.021293s
       String#concat     83.872M (± 3.3%) i/s -    424.331M in   5.064864s
       String#append     84.034M (± 3.2%) i/s -    421.873M in   5.025768s
         "foo" "bar"      1.133B (± 0.9%) i/s -      5.699B in   5.029197s
  "#{'foo'}#{'bar'}"      1.136B (± 0.7%) i/s -      5.784B in   5.092940s

Comparison:
  "#{'foo'}#{'bar'}": 1135779744.6 i/s
         "foo" "bar": 1133206925.2 i/s - same-ish: difference falls within error
       String#append: 84033576.8 i/s - 13.52x  (± 0.00) slower
       String#concat: 83872403.2 i/s - 13.54x  (± 0.00) slower
            String#+: 83296476.6 i/s - 13.64x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   113.113M i/100ms
          String#dup   113.272M i/100ms
Calculating -------------------------------------
           String#+@      1.134B (± 1.1%) i/s -      5.769B in   5.086064s
          String#dup      1.135B (± 0.5%) i/s -      5.777B in   5.091550s

Comparison:
          String#dup: 1134632875.5 i/s
           String#+@: 1134361625.7 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.470M i/100ms
       String#match?     1.723M i/100ms
    String#end_with?     9.027M i/100ms
Calculating -------------------------------------
           String#=~     14.203M (± 2.7%) i/s -     72.019M in   5.074429s
       String#match?     18.245M (± 0.3%) i/s -     91.327M in   5.005599s
    String#end_with?     90.454M (± 0.4%) i/s -    460.352M in   5.089440s

Comparison:
    String#end_with?: 90453962.6 i/s
       String#match?: 18245125.8 i/s - 4.96x  (± 0.00) slower
           String#=~: 14203355.7 i/s - 6.37x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   482.421k i/100ms
          String#sub   834.642k i/100ms
String#dup["string"]=
                        11.280M i/100ms
Calculating -------------------------------------
         String#gsub      5.403M (± 9.6%) i/s -     27.016M in   5.050514s
          String#sub      8.389M (± 7.2%) i/s -     41.732M in   5.004325s
String#dup["string"]=
                        112.320M (± 0.6%) i/s -    564.023M in   5.021745s

Comparison:
String#dup["string"]=: 112319744.0 i/s
          String#sub:  8389215.3 i/s - 13.39x  (± 0.00) slower
         String#gsub:  5403439.6 i/s - 20.79x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   239.654k i/100ms
           String#tr   121.304k i/100ms
Calculating -------------------------------------
         String#gsub      2.599M (± 6.8%) i/s -     12.941M in   5.004086s
           String#tr      1.230M (± 4.2%) i/s -      6.187M in   5.037958s

Comparison:
         String#gsub:  2598503.4 i/s
           String#tr:  1230381.6 i/s - 2.11x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   113.428M i/100ms
         With Freeze   113.722M i/100ms
Calculating -------------------------------------
      Without Freeze      1.134B (± 0.6%) i/s -      5.671B in   5.000283s
         With Freeze      1.136B (± 0.8%) i/s -      5.686B in   5.007622s

Comparison:
         With Freeze: 1135562531.1 i/s
      Without Freeze: 1134258797.8 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     8.190k i/100ms
      String#squeeze    28.425k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    101.780k (± 6.5%) i/s -    515.970k in   5.091601s
      String#squeeze    285.704k (± 1.9%) i/s -      1.450M in   5.076216s

Comparison:
      String#squeeze:   285704.1 i/s
 String#gsub/regex+/:   101779.6 i/s - 2.81x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     3.247M i/100ms
       String#match?     5.073M i/100ms
  String#start_with?     3.409M i/100ms
Calculating -------------------------------------
           String#=~     33.043M (± 3.1%) i/s -    165.585M in   5.016270s
       String#match?     50.798M (± 0.2%) i/s -    258.727M in   5.093311s
  String#start_with?    203.786M (± 1.6%) i/s -      1.019B in   5.002909s

Comparison:
  String#start_with?: 203785571.6 i/s
       String#match?: 50797622.4 i/s - 4.01x  (± 0.00) slower
           String#=~: 33042902.4 i/s - 6.17x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   108.326k i/100ms
    String#[0, n] ==   194.927k i/100ms
   String#[RANGE] ==   220.063k i/100ms
   String#[0...n] ==   171.343k i/100ms
Calculating -------------------------------------
  String#start_with?      4.078M (± 0.1%) i/s -     20.474M in   5.021000s
    String#[0, n] ==      2.086M (± 4.4%) i/s -     10.526M in   5.057120s
   String#[RANGE] ==      2.253M (± 3.8%) i/s -     11.443M in   5.088055s
   String#[0...n] ==      1.755M (± 1.8%) i/s -      8.910M in   5.077385s

Comparison:
  String#start_with?:  4077603.0 i/s
   String#[RANGE] ==:  2252739.5 i/s - 1.81x  (± 0.00) slower
    String#[0, n] ==:  2085909.0 i/s - 1.95x  (± 0.00) slower
   String#[0...n] ==:  1755426.4 i/s - 2.32x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    11.282M i/100ms
 String#sub!'string'   687.754k i/100ms
String#gsub!'string'   520.326k i/100ms
  String#[/regexp/]=     1.841M i/100ms
 String#sub!/regexp/     2.173M i/100ms
String#gsub!/regexp/   637.029k i/100ms
Calculating -------------------------------------
  String#['string']=    113.191M (± 0.0%) i/s -    575.401M in   5.083465s
 String#sub!'string'      8.466M (±18.8%) i/s -     37.139M in   5.004896s
String#gsub!'string'      5.318M (± 2.0%) i/s -     27.057M in   5.089583s
  String#[/regexp/]=     18.487M (± 1.9%) i/s -     93.882M in   5.080245s
 String#sub!/regexp/     22.021M (± 1.5%) i/s -    110.845M in   5.034991s
String#gsub!/regexp/      6.311M (± 2.1%) i/s -     31.851M in   5.049642s

Comparison:
  String#['string']=: 113190668.1 i/s
 String#sub!/regexp/: 22020641.1 i/s - 5.14x  (± 0.00) slower
  String#[/regexp/]=: 18486562.2 i/s - 6.12x  (± 0.00) slower
 String#sub!'string':  8465821.4 i/s - 13.37x  (± 0.00) slower
String#gsub!/regexp/:  6310612.4 i/s - 17.94x  (± 0.00) slower
String#gsub!'string':  5318429.8 i/s - 21.28x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     2.285M i/100ms
        String#chomp     4.771M i/100ms
String#delete_suffix    10.136M i/100ms
Calculating -------------------------------------
          String#sub     26.408M (± 4.1%) i/s -    132.531M in   5.028387s
        String#chomp     47.744M (± 0.2%) i/s -    243.331M in   5.096564s
String#delete_suffix    102.115M (± 7.0%) i/s -    516.933M in   5.088007s

Comparison:
String#delete_suffix: 102114841.6 i/s
        String#chomp: 47744424.4 i/s - 2.14x  (± 0.00) slower
          String#sub: 26407656.7 i/s - 3.87x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   113.514M i/100ms
          String#sub    15.712M i/100ms
Calculating -------------------------------------
String#delete_prefix      1.134B (± 1.0%) i/s -      5.676B in   5.007459s
          String#sub    145.873M (± 1.0%) i/s -    738.458M in   5.062861s

Comparison:
String#delete_prefix: 1133572917.8 i/s
          String#sub: 145872717.0 i/s - 7.77x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.312M i/100ms
    String#unpack[0]     1.654M i/100ms
Calculating -------------------------------------
      String#unpack1     16.715M (± 4.7%) i/s -     83.942M in   5.033758s
    String#unpack[0]     16.739M (± 4.0%) i/s -     84.365M in   5.048441s

Comparison:
    String#unpack[0]: 16738902.2 i/s
      String#unpack1: 16715382.5 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    20.442k i/100ms
          Time.parse   381.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    367.495k (±11.4%) i/s -      1.819M in   5.023837s
          Time.parse      9.969k (±24.3%) i/s -     42.672k in   5.006734s

Comparison:
        Time.iso8601:   367494.6 i/s
          Time.parse:     9969.2 i/s - 36.86x  (± 0.00) slower

