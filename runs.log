$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       238.348M i/100ms
Function with splat arguments
                       627.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          2.386B (± 0.2%) i/s -     12.156B in   5.094859s
Function with splat arguments
                          6.727k (± 5.0%) i/s -     33.858k in   5.046341s

Comparison:
Function with single Array argument: 2385902330.8 i/s
Function with splat arguments:     6727.2 i/s - 354665.27x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   238.365M i/100ms
Sequential Assignment
                       238.168M i/100ms
Calculating -------------------------------------
 Parallel Assignment      2.386B (± 0.3%) i/s -     12.157B in   5.095821s
Sequential Assignment
                          2.388B (± 0.3%) i/s -     12.147B in   5.087240s

Comparison:
Sequential Assignment: 2387669139.5 i/s
 Parallel Assignment: 2385625126.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   238.318M i/100ms
       attr_accessor   238.967M i/100ms
Calculating -------------------------------------
   getter_and_setter      2.385B (± 0.3%) i/s -     12.154B in   5.096782s
       attr_accessor      2.386B (± 0.3%) i/s -     11.948B in   5.007054s

Comparison:
       attr_accessor: 2386327280.4 i/s
   getter_and_setter: 2384708426.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     7.373k i/100ms
         respond_to?   238.932M i/100ms
Calculating -------------------------------------
      begin...rescue     51.369k (± 2.7%) i/s -    258.055k in   5.027222s
         respond_to?      2.388B (± 0.2%) i/s -     11.947B in   5.002250s

Comparison:
         respond_to?: 2388254799.4 i/s
      begin...rescue:    51368.8 i/s - 46492.31x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   238.086M i/100ms
             &method     8.537M i/100ms
Calculating -------------------------------------
              normal      2.386B (± 0.3%) i/s -     12.142B in   5.089234s
             &method     93.786M (± 4.9%) i/s -    469.546M in   5.018936s

Comparison:
              normal: 2385918873.5 i/s
             &method: 93786025.3 i/s - 25.44x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       104.000  i/100ms
       define_method   125.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.467k (±40.4%) i/s -      5.096k in   5.032422s
       define_method      3.093k (±61.9%) i/s -      5.000k in   5.264330s

Comparison:
       define_method:     3093.5 i/s
module_eval with string:     1466.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    76.390k i/100ms
       Kernel#format    58.684k i/100ms
            String#%    65.109k i/100ms
Calculating -------------------------------------
         Float#round    746.555k (± 2.2%) i/s -      3.743M in   5.016243s
       Kernel#format    643.158k (± 2.7%) i/s -      3.228M in   5.022209s
            String#%    649.017k (± 2.2%) i/s -      3.255M in   5.018540s

Comparison:
         Float#round:   746555.2 i/s
            String#%:   649016.7 i/s - 1.15x  (± 0.00) slower
       Kernel#format:   643158.1 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   238.379M i/100ms
          OpenStruct   238.994M i/100ms
Calculating -------------------------------------
                Hash      2.386B (± 0.4%) i/s -     12.157B in   5.096224s
          OpenStruct      2.388B (± 0.2%) i/s -     11.950B in   5.004188s

Comparison:
          OpenStruct: 2387945908.3 i/s
                Hash: 2385584985.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   238.767M i/100ms
          OpenStruct     2.596k i/100ms
Calculating -------------------------------------
                Hash      2.378B (± 0.7%) i/s -     11.938B in   5.021580s
          OpenStruct     27.819k (±10.4%) i/s -    137.588k in   5.035220s

Comparison:
                Hash: 2377536842.9 i/s
          OpenStruct:    27819.0 i/s - 85464.61x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   709.861k i/100ms
  ancestors.include?   133.381k i/100ms
Calculating -------------------------------------
  less than or equal      7.969M (± 3.3%) i/s -     40.462M in   5.083291s
  ancestors.include?      1.373M (± 4.3%) i/s -      6.936M in   5.059508s

Comparison:
  less than or equal:  7969280.2 i/s
  ancestors.include?:  1373493.4 i/s - 5.80x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     23.847  (± 0.0%) i/s -    120.000  in   5.032180s
         Kernel loop      6.037  (± 0.0%) i/s -     31.000  in   5.135056s

Comparison:
          While Loop:       23.8 i/s
         Kernel loop:        6.0 i/s - 3.95x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   238.368M i/100ms
         Array#first   238.682M i/100ms
Calculating -------------------------------------
           Array#[0]      2.385B (± 0.5%) i/s -     12.157B in   5.097729s
         Array#first      2.388B (± 0.2%) i/s -     12.173B in   5.097957s

Comparison:
         Array#first: 2387792215.2 i/s
           Array#[0]: 2384799921.4 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   238.061M i/100ms
          Array#last   238.401M i/100ms
Calculating -------------------------------------
          Array#[-1]      2.377B (± 2.3%) i/s -     11.903B in   5.010040s
          Array#last      2.387B (± 0.3%) i/s -     12.158B in   5.093182s

Comparison:
          Array#last: 2387219581.2 i/s
          Array#[-1]: 2377318908.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   369.475k i/100ms
Calculating -------------------------------------
                find      8.968  (±22.3%) i/s -     21.000  in   5.100562s
             bsearch      3.707M (± 3.1%) i/s -     18.843M in   5.088048s

Comparison:
             bsearch:  3707303.1 i/s
                find:        9.0 i/s - 413389.93x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.125  (± 0.0%) i/s -      1.000  in   7.971980s
        Array#insert      0.967  (± 0.0%) i/s -      5.000  in   5.169012s

Comparison:
        Array#insert:        1.0 i/s
       Array#unshift:        0.1 i/s - 7.71x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   238.538M i/100ms
          Array#size   238.639M i/100ms
         Array#count   239.027M i/100ms
Calculating -------------------------------------
        Array#length      2.387B (± 0.2%) i/s -     12.165B in   5.096456s
          Array#size      2.388B (± 0.2%) i/s -     12.171B in   5.096485s
         Array#count      2.388B (± 0.3%) i/s -     11.951B in   5.005537s

Comparison:
          Array#size: 2388046189.4 i/s
         Array#count: 2387647781.1 i/s - same-ish: difference falls within error
        Array#length: 2387052506.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    22.573k i/100ms
        Array#sample     2.499M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    234.951k (± 1.7%) i/s -      1.196M in   5.093689s
        Array#sample     24.664M (± 0.1%) i/s -    124.974M in   5.067062s

Comparison:
        Array#sample: 24663960.1 i/s
 Array#shuffle.first:   234951.3 i/s - 104.97x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   910.000  i/100ms
          Date.parse   108.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     19.085k (±26.9%) i/s -     79.170k in   5.035643s
          Date.parse      8.362k (±38.5%) i/s -     26.244k in   4.956825s

Comparison:
        Date.iso8601:    19085.0 i/s
          Date.parse:     8361.9 i/s - 2.28x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   104.912k i/100ms
           Array#map   588.447k i/100ms
Calculating -------------------------------------
   Array#each + push      1.140M (± 3.5%) i/s -      5.770M in   5.069837s
           Array#map      5.985M (± 5.8%) i/s -     30.011M in   5.031667s

Comparison:
           Array#map:  5985195.8 i/s
   Array#each + push:  1139624.4 i/s - 5.25x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     9.745M i/100ms
               #each    74.180M i/100ms
Calculating -------------------------------------
            For loop     99.212M (± 0.6%) i/s -    497.007M in   5.009683s
               #each    742.273M (± 0.5%) i/s -      3.783B in   5.096868s

Comparison:
               #each: 742272560.7 i/s
            For loop: 99212491.4 i/s - 7.48x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   896.923k i/100ms
     each_with_index     1.280M i/100ms
Calculating -------------------------------------
          While Loop      9.044M (± 0.2%) i/s -     45.743M in   5.057625s
     each_with_index     12.794M (± 0.1%) i/s -     63.976M in   5.000637s

Comparison:
     each_with_index: 12793676.5 i/s
          While Loop:  9044429.7 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   146.220k i/100ms
      inject to_proc   147.385k i/100ms
        inject block   147.400k i/100ms
Calculating -------------------------------------
       inject symbol      1.473M (± 0.2%) i/s -      7.457M in   5.063377s
      inject to_proc      1.474M (± 0.1%) i/s -      7.369M in   5.000506s
        inject block      1.473M (± 0.2%) i/s -      7.370M in   5.001788s

Comparison:
      inject to_proc:  1473703.2 i/s
        inject block:  1473477.7 i/s - same-ish: difference falls within error
       inject symbol:  1472782.7 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     9.697k i/100ms
   Array#map.flatten    11.284k i/100ms
      Array#flat_map    29.139k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    118.973k (± 4.2%) i/s -    601.214k in   5.062759s
   Array#map.flatten    114.322k (± 3.5%) i/s -    575.484k in   5.040384s
      Array#flat_map    291.480k (± 2.9%) i/s -      1.457M in   5.002998s

Comparison:
      Array#flat_map:   291479.9 i/s
Array#map.flatten(1):   118973.1 i/s - 2.45x  (± 0.00) slower
   Array#map.flatten:   114322.4 i/s - 2.55x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   162.064k i/100ms
  Array#reverse_each     1.941M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.717M (± 3.1%) i/s -      8.589M in   5.008171s
  Array#reverse_each     19.471M (± 0.1%) i/s -     98.978M in   5.083413s

Comparison:
  Array#reverse_each: 19470882.1 i/s
  Array#reverse.each:  1716807.6 i/s - 11.34x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       599.493k i/100ms
   Enumerable#detect     3.831M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          6.823M (± 6.2%) i/s -    136.085M in  20.047036s
   Enumerable#detect     38.296M (± 0.4%) i/s -    766.271M in  20.009316s

Comparison:
   Enumerable#detect: 38296182.3 i/s
Enumerable#select.first:  6823039.9 i/s - 5.61x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       161.708k i/100ms
Enumerable#select.last
                       364.223k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.707M (± 3.4%) i/s -      8.571M in   5.025357s
Enumerable#select.last
                          3.678M (± 3.6%) i/s -     18.575M in   5.057698s

Comparison:
Enumerable#select.last:  3677748.2 i/s
Enumerable#reverse.detect:  1707461.3 i/s - 2.15x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.317k i/100ms
  Enumerable#sort_by     2.553k i/100ms
     Enumerable#sort     3.388k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         23.121k (±21.7%) i/s -    104.265k in   5.042416s
  Enumerable#sort_by     24.409k (±17.8%) i/s -    112.332k in   5.030159s
     Enumerable#sort     33.583k (± 0.3%) i/s -    169.400k in   5.044344s

Comparison:
     Enumerable#sort:    33582.5 i/s
  Enumerable#sort_by:    24408.7 i/s - 1.38x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    23121.1 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   238.698k i/100ms
Enumerable#sort_by...first
                         5.525k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      2.406M (± 0.2%) i/s -     12.174M in   5.059803s
Enumerable#sort_by...first
                         56.949k (± 2.8%) i/s -    287.300k in   5.049014s

Comparison:
   Enumerable#min_by:  2405954.3 i/s
Enumerable#sort_by...first:    56948.9 i/s - 42.25x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   223.249k i/100ms
            Hash#dup   233.317k i/100ms
Calculating -------------------------------------
              Hash[]      2.331M (± 4.2%) i/s -     11.832M in   5.086038s
            Hash#dup      2.348M (± 3.4%) i/s -     11.899M in   5.075151s

Comparison:
            Hash#dup:  2347503.5 i/s
              Hash[]:  2330709.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   238.505M i/100ms
  Hash#fetch, symbol   238.519M i/100ms
     Hash#[], string     4.274M i/100ms
  Hash#fetch, string     4.509M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      2.387B (± 0.3%) i/s -     12.164B in   5.095739s
  Hash#fetch, symbol      2.389B (± 0.2%) i/s -     12.164B in   5.092188s
     Hash#[], string     42.628M (± 0.3%) i/s -    213.687M in   5.012868s
  Hash#fetch, string     45.134M (± 0.5%) i/s -    229.954M in   5.095087s

Comparison:
  Hash#fetch, symbol: 2388863778.3 i/s
     Hash#[], symbol: 2387070149.5 i/s - same-ish: difference falls within error
  Hash#fetch, string: 45133775.7 i/s - 52.93x  (± 0.00) slower
     Hash#[], string: 42628101.9 i/s - 56.04x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    49.709M i/100ms
             Hash#[]    49.792M i/100ms
          Hash#[] ||    49.792M i/100ms
          Hash#[] &&    49.770M i/100ms
          Hash#fetch    49.780M i/100ms
 Hash#fetch fallback    49.782M i/100ms
Calculating -------------------------------------
            Hash#dig    497.225M (± 0.3%) i/s -      2.535B in   5.098616s
             Hash#[]    497.520M (± 0.2%) i/s -      2.490B in   5.004064s
          Hash#[] ||    497.479M (± 0.2%) i/s -      2.490B in   5.004485s
          Hash#[] &&    497.545M (± 0.2%) i/s -      2.489B in   5.001622s
          Hash#fetch    497.574M (± 0.2%) i/s -      2.489B in   5.002350s
 Hash#fetch fallback    497.300M (± 0.5%) i/s -      2.489B in   5.005357s

Comparison:
          Hash#fetch: 497573760.1 i/s
          Hash#[] &&: 497545406.6 i/s - same-ish: difference falls within error
             Hash#[]: 497519773.6 i/s - same-ish: difference falls within error
          Hash#[] ||: 497478833.5 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 497299716.6 i/s - same-ish: difference falls within error
            Hash#dig: 497224759.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   238.426M i/100ms
  Hash#fetch + block   238.447M i/100ms
    Hash#fetch + arg   238.939M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      2.385B (± 0.4%) i/s -     12.160B in   5.098546s
  Hash#fetch + block      2.387B (± 0.2%) i/s -     12.161B in   5.093638s
    Hash#fetch + arg      2.387B (± 0.3%) i/s -     11.947B in   5.004888s

Comparison:
  Hash#fetch + block: 2387460668.6 i/s
    Hash#fetch + arg: 2387078930.3 i/s - same-ish: difference falls within error
  Hash#fetch + const: 2384969868.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    17.018k i/100ms
         sort + to_h    12.096k i/100ms
Calculating -------------------------------------
      sort_by + to_h    216.463k (± 8.4%) i/s -      1.089M in   5.069544s
         sort + to_h     69.450k (± 2.6%) i/s -    350.784k in   5.054406s

Comparison:
      sort_by + to_h:   216463.5 i/s
         sort + to_h:    69449.8 i/s - 3.12x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   114.977k i/100ms
       Hash#each_key   127.030k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.180M (± 4.3%) i/s -      5.979M in   5.074709s
       Hash#each_key      1.266M (± 4.1%) i/s -      6.351M in   5.026898s

Comparison:
       Hash#each_key:  1265737.2 i/s
      Hash#keys.each:  1180463.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   166.000  i/100ms
           Hash#key?    27.163M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.586k (±15.9%) i/s -      7.636k in   5.037812s
           Hash#key?    271.376M (± 0.2%) i/s -      1.358B in   5.004735s

Comparison:
           Hash#key?: 271376170.0 i/s
  Hash#keys.include?:     1586.0 i/s - 171104.20x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    24.602k i/100ms
            Hash#[]=    25.637k i/100ms
Calculating -------------------------------------
         Hash#merge!    242.568k (± 3.4%) i/s -      1.230M in   5.077496s
            Hash#[]=    258.336k (± 3.5%) i/s -      1.307M in   5.067818s

Comparison:
            Hash#[]=:   258335.6 i/s
         Hash#merge!:   242567.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        10.977k i/100ms
      Hash#merge({})     8.488k i/100ms
 Hash#dup#merge!({})    14.010k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        132.664k (± 4.8%) i/s -    669.597k in   5.060403s
      Hash#merge({})     87.056k (± 4.2%) i/s -    441.376k in   5.080065s
 Hash#dup#merge!({})    142.031k (± 2.1%) i/s -    714.510k in   5.032999s

Comparison:
 Hash#dup#merge!({}):   142031.5 i/s
{}#merge!(Hash) do end:   132664.3 i/s - same-ish: difference falls within error
      Hash#merge({}):    87056.5 i/s - 1.63x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   238.511M i/100ms
          Hash#merge   238.934M i/100ms
Calculating -------------------------------------
        Hash#**other      2.386B (± 0.3%) i/s -     12.164B in   5.097419s
          Hash#merge      2.388B (± 0.2%) i/s -     11.947B in   5.001803s

Comparison:
          Hash#merge: 2388482384.6 i/s
        Hash#**other: 2386343510.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   301.000  i/100ms
         Hash#merge!    25.339k i/100ms
Calculating -------------------------------------
          Hash#merge      3.508k (± 4.6%) i/s -     17.759k in   5.073292s
         Hash#merge!    255.067k (± 3.7%) i/s -      1.292M in   5.073922s

Comparison:
         Hash#merge!:   255067.1 i/s
          Hash#merge:     3508.3 i/s - 72.70x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.142M i/100ms
Array#each             904.471k i/100ms
Array#each_w/_object   895.518k i/100ms
Hash#select-include      1.040M i/100ms
Calculating -------------------------------------
Hash#native-slice        11.658M (± 3.7%) i/s -     58.254M in   5.004244s
Array#each                9.111M (± 3.0%) i/s -     46.128M in   5.067986s
Array#each_w/_object      9.024M (± 3.0%) i/s -     45.671M in   5.065915s
Hash#select-include      10.735M (± 2.8%) i/s -     54.100M in   5.044089s

Comparison:
Hash#native-slice   : 11657847.6 i/s
Hash#select-include : 10734593.0 i/s - 1.09x  (± 0.00) slower
Array#each          :  9110898.9 i/s - 1.28x  (± 0.00) slower
Array#each_w/_object:  9024087.9 i/s - 1.29x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   160.000  i/100ms
         Hash#value?   420.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.862k (±12.1%) i/s -      9.120k in   4.998676s
         Hash#value?      4.213k (± 0.3%) i/s -     21.420k in   5.083778s

Comparison:
         Hash#value?:     4213.4 i/s
Hash#values.include?:     1862.3 i/s - 2.26x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   238.231M i/100ms
                send   238.242M i/100ms
      method_missing   238.646M i/100ms
Calculating -------------------------------------
                call      2.385B (± 0.3%) i/s -     12.150B in   5.093416s
                send      2.386B (± 0.5%) i/s -     12.150B in   5.093020s
      method_missing      2.385B (± 0.5%) i/s -     11.932B in   5.002848s

Comparison:
                send: 2385748155.7 i/s
                call: 2385414887.3 i/s - same-ish: difference falls within error
      method_missing: 2385153428.3 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    19.070k i/100ms
      Symbol#to_proc    20.345k i/100ms
Calculating -------------------------------------
               Block    206.038k (± 3.8%) i/s -      1.030M in   5.005814s
      Symbol#to_proc    207.071k (± 3.7%) i/s -      1.038M in   5.017987s

Comparison:
      Symbol#to_proc:   207071.3 i/s
               Block:   206038.0 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   238.443M i/100ms
       block + yield   238.294M i/100ms
        unused block   238.917M i/100ms
               yield   238.917M i/100ms
Calculating -------------------------------------
          block.call      2.387B (± 0.3%) i/s -     12.161B in   5.094593s
       block + yield      2.388B (± 0.2%) i/s -     12.153B in   5.088732s
        unused block      2.387B (± 0.3%) i/s -     11.946B in   5.003793s
               yield      2.388B (± 0.2%) i/s -     11.946B in   5.001549s

Comparison:
               yield: 2388437331.2 i/s
       block + yield: 2388225994.2 i/s - same-ish: difference falls within error
        unused block: 2387378225.0 i/s - same-ish: difference falls within error
          block.call: 2386979030.4 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    20.268k i/100ms
      range#include?   345.000  i/100ms
       range#member?   381.000  i/100ms
       plain compare    19.552k i/100ms
Calculating -------------------------------------
        range#cover?    121.734k (±27.8%) i/s -    567.504k in   5.113970s
      range#include?      5.435k (±31.2%) i/s -     22.770k in   5.021973s
       range#member?      5.280k (±33.6%) i/s -     21.336k in   5.097090s
       plain compare    191.688k (±40.4%) i/s -    606.112k in   5.000922s

Comparison:
       plain compare:   191687.7 i/s
        range#cover?:   121733.6 i/s - same-ish: difference falls within error
      range#include?:     5435.1 i/s - 35.27x  (± 0.00) slower
       range#member?:     5280.0 i/s - 36.30x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     4.379M i/100ms
           String#=~     6.097M i/100ms
          Regexp#===     6.095M i/100ms
        String#match     2.488M i/100ms
Calculating -------------------------------------
       String#match?     45.849M (± 3.9%) i/s -    232.107M in   5.070566s
           String#=~     60.939M (± 0.1%) i/s -    304.831M in   5.002215s
          Regexp#===     60.951M (± 0.1%) i/s -    310.842M in   5.099891s
        String#match     25.211M (± 3.1%) i/s -    126.886M in   5.038617s

Comparison:
          Regexp#===: 60950847.8 i/s
           String#=~: 60939210.4 i/s - same-ish: difference falls within error
       String#match?: 45849445.7 i/s - 1.33x  (± 0.00) slower
        String#match: 25210517.0 i/s - 2.42x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.348M i/100ms
      String#casecmp     3.325M i/100ms
Calculating -------------------------------------
String#downcase + ==     14.112M (± 4.4%) i/s -     71.423M in   5.071374s
      String#casecmp     33.309M (± 0.2%) i/s -    169.587M in   5.091388s

Comparison:
      String#casecmp: 33308798.7 i/s
String#downcase + ==: 14111506.3 i/s - 2.36x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+   238.467M i/100ms
       String#concat   239.011M i/100ms
       String#append   238.963M i/100ms
         "foo" "bar"   238.964M i/100ms
  "#{'foo'}#{'bar'}"   238.983M i/100ms
Calculating -------------------------------------
            String#+      2.387B (± 0.3%) i/s -     12.162B in   5.095162s
       String#concat      2.388B (± 0.2%) i/s -     11.951B in   5.004136s
       String#append      2.387B (± 0.2%) i/s -     11.948B in   5.004935s
         "foo" "bar"      2.388B (± 0.1%) i/s -     11.948B in   5.003224s
  "#{'foo'}#{'bar'}"      2.388B (± 0.2%) i/s -     11.949B in   5.004335s

Comparison:
       String#concat: 2388137197.5 i/s
         "foo" "bar": 2388105786.2 i/s - same-ish: difference falls within error
  "#{'foo'}#{'bar'}": 2387772982.5 i/s - same-ish: difference falls within error
       String#append: 2387284976.1 i/s - same-ish: difference falls within error
            String#+: 2386950523.7 i/s - same-ish: difference falls within error

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   238.362M i/100ms
          String#dup   238.405M i/100ms
Calculating -------------------------------------
           String#+@      2.385B (± 0.4%) i/s -     12.156B in   5.097565s
          String#dup      2.388B (± 0.2%) i/s -     12.159B in   5.091274s

Comparison:
          String#dup: 2388144231.8 i/s
           String#+@: 2384787637.4 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.465M i/100ms
       String#match?     1.512M i/100ms
    String#end_with?     1.620M i/100ms
Calculating -------------------------------------
           String#=~     14.977M (± 2.8%) i/s -     76.185M in   5.091035s
       String#match?     15.200M (± 2.4%) i/s -     77.133M in   5.077704s
    String#end_with?     16.433M (± 3.5%) i/s -     82.612M in   5.033320s

Comparison:
    String#end_with?: 16433077.5 i/s
       String#match?: 15199687.5 i/s - 1.08x  (± 0.00) slower
           String#=~: 14976927.8 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    44.695k i/100ms
          String#sub   446.820k i/100ms
String#dup["string"]=
                        19.910M i/100ms
Calculating -------------------------------------
         String#gsub    557.511k (± 2.5%) i/s -      2.816M in   5.054161s
          String#sub      4.736M (± 5.9%) i/s -     23.681M in   5.018770s
String#dup["string"]=
                        199.013M (± 0.2%) i/s -    995.495M in   5.002180s

Comparison:
String#dup["string"]=: 199012769.4 i/s
          String#sub:  4735728.7 i/s - 42.02x  (± 0.00) slower
         String#gsub:   557510.7 i/s - 356.97x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   175.226k i/100ms
           String#tr   126.618k i/100ms
Calculating -------------------------------------
         String#gsub      1.813M (± 4.6%) i/s -      9.112M in   5.037786s
           String#tr      1.298M (± 5.2%) i/s -      6.584M in   5.086408s

Comparison:
         String#gsub:  1812680.8 i/s
           String#tr:  1298066.0 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   238.201M i/100ms
         With Freeze   238.474M i/100ms
Calculating -------------------------------------
      Without Freeze      2.386B (± 0.3%) i/s -     12.148B in   5.091830s
         With Freeze      2.385B (± 0.7%) i/s -     12.162B in   5.099508s

Comparison:
      Without Freeze: 2385853484.9 i/s
         With Freeze: 2385101327.9 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     5.327k i/100ms
      String#squeeze    60.127k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     67.707k (± 4.6%) i/s -    340.928k in   5.046664s
      String#squeeze    603.366k (± 2.6%) i/s -      3.066M in   5.085911s

Comparison:
      String#squeeze:   603366.0 i/s
 String#gsub/regex+/:    67706.6 i/s - 8.91x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     2.374M i/100ms
       String#match?     3.081M i/100ms
  String#start_with?     1.669M i/100ms
Calculating -------------------------------------
           String#=~     27.752M (± 3.2%) i/s -    140.084M in   5.053483s
       String#match?     32.193M (± 3.7%) i/s -    163.284M in   5.079185s
  String#start_with?     16.980M (± 3.9%) i/s -     85.128M in   5.021179s

Comparison:
       String#match?: 32192618.5 i/s
           String#=~: 27752060.5 i/s - 1.16x  (± 0.00) slower
  String#start_with?: 16980346.9 i/s - 1.90x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   175.369k i/100ms
    String#[0, n] ==   194.202k i/100ms
   String#[RANGE] ==   190.259k i/100ms
   String#[0...n] ==   143.288k i/100ms
Calculating -------------------------------------
  String#start_with?      3.309M (± 4.2%) i/s -     16.660M in   5.045072s
    String#[0, n] ==      1.935M (± 4.4%) i/s -      9.710M in   5.029806s
   String#[RANGE] ==      1.929M (± 5.2%) i/s -      9.703M in   5.044522s
   String#[0...n] ==      1.483M (± 5.4%) i/s -      7.451M in   5.039912s

Comparison:
  String#start_with?:  3309208.0 i/s
    String#[0, n] ==:  1934503.0 i/s - 1.71x  (± 0.00) slower
   String#[RANGE] ==:  1929116.7 i/s - 1.72x  (± 0.00) slower
   String#[0...n] ==:  1483182.7 i/s - 2.23x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    21.137M i/100ms
 String#sub!'string'   488.321k i/100ms
String#gsub!'string'    58.886k i/100ms
  String#[/regexp/]=     2.296M i/100ms
 String#sub!/regexp/     1.854M i/100ms
String#gsub!/regexp/   493.403k i/100ms
Calculating -------------------------------------
  String#['string']=    213.190M (± 0.2%) i/s -      1.078B in   5.056481s
 String#sub!'string'      5.362M (±14.0%) i/s -     25.393M in   5.055371s
String#gsub!'string'    588.667k (± 2.7%) i/s -      2.944M in   5.006064s
  String#[/regexp/]=     23.181M (± 3.6%) i/s -    117.076M in   5.057840s
 String#sub!/regexp/     18.866M (± 2.9%) i/s -     94.538M in   5.015708s
String#gsub!/regexp/      5.021M (± 5.6%) i/s -     25.164M in   5.028659s

Comparison:
  String#['string']=: 213190482.2 i/s
  String#[/regexp/]=: 23181097.6 i/s - 9.20x  (± 0.00) slower
 String#sub!/regexp/: 18866434.2 i/s - 11.30x  (± 0.00) slower
 String#sub!'string':  5362275.5 i/s - 39.76x  (± 0.00) slower
String#gsub!/regexp/:  5021258.0 i/s - 42.46x  (± 0.00) slower
String#gsub!'string':   588667.2 i/s - 362.16x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.977M i/100ms
        String#chomp     2.755M i/100ms
String#delete_suffix     5.430M i/100ms
Calculating -------------------------------------
          String#sub     20.425M (± 3.4%) i/s -    102.820M in   5.040310s
        String#chomp     28.502M (± 3.2%) i/s -    143.260M in   5.031575s
String#delete_suffix     54.478M (± 1.2%) i/s -    276.929M in   5.084098s

Comparison:
String#delete_suffix: 54477729.5 i/s
        String#chomp: 28502373.6 i/s - 1.91x  (± 0.00) slower
          String#sub: 20424863.3 i/s - 2.67x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix     1.857M i/100ms
          String#sub     7.859M i/100ms
Calculating -------------------------------------
String#delete_prefix     19.337M (± 3.9%) i/s -     96.554M in   5.001104s
          String#sub     78.481M (± 0.5%) i/s -    392.961M in   5.007191s

Comparison:
          String#sub: 78481091.6 i/s
String#delete_prefix: 19336711.0 i/s - 4.06x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.214M i/100ms
    String#unpack[0]     1.407M i/100ms
Calculating -------------------------------------
      String#unpack1     14.285M (± 3.7%) i/s -     71.601M in   5.019614s
    String#unpack[0]     14.284M (± 3.6%) i/s -     71.746M in   5.029881s

Comparison:
      String#unpack1: 14285418.0 i/s
    String#unpack[0]: 14283550.6 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.3.0-dev-925274f4, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    17.135k i/100ms
          Time.parse   203.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    181.608k (±18.7%) i/s -    873.885k in   5.047635s
          Time.parse      6.720k (±31.0%) i/s -     27.202k in   5.008391s

Comparison:
        Time.iso8601:   181608.5 i/s
          Time.parse:     6720.0 i/s - 27.02x  (± 0.00) slower

