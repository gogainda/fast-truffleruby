$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       193.038M i/100ms
Function with splat arguments
                       787.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.958B (± 3.1%) i/s -      9.845B in   5.032970s
Function with splat arguments
                          8.235k (± 8.1%) i/s -     40.924k in   5.005888s

Comparison:
Function with single Array argument: 1958010615.2 i/s
Function with splat arguments:     8235.2 i/s - 237760.22x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   189.924M i/100ms
Sequential Assignment
                       187.227M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.870B (± 4.9%) i/s -      9.496B in   5.092009s
Sequential Assignment
                          1.919B (± 4.9%) i/s -      9.736B in   5.087879s

Comparison:
Sequential Assignment: 1918574451.7 i/s
 Parallel Assignment: 1869656889.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   191.318M i/100ms
       attr_accessor   194.234M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.949B (± 3.1%) i/s -      9.757B in   5.010380s
       attr_accessor      1.910B (± 4.4%) i/s -      9.712B in   5.094848s

Comparison:
   getter_and_setter: 1949317286.5 i/s
       attr_accessor: 1909930829.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     8.552k i/100ms
         respond_to?   185.781M i/100ms
Calculating -------------------------------------
      begin...rescue     61.775k (± 5.1%) i/s -    316.424k in   5.135468s
         respond_to?      1.913B (± 3.5%) i/s -      9.661B in   5.055530s

Comparison:
         respond_to?: 1913260854.0 i/s
      begin...rescue:    61774.9 i/s - 30971.47x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   177.223M i/100ms
             &method   170.592M i/100ms
Calculating -------------------------------------
              normal      1.874B (± 5.3%) i/s -      9.393B in   5.027227s
             &method      1.901B (± 4.6%) i/s -      9.553B in   5.037909s

Comparison:
             &method: 1900534698.2 i/s
              normal: 1873903173.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        83.000  i/100ms
       define_method   129.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.705k (±45.3%) i/s -      4.482k in   5.125334s
       define_method      4.699k (±54.3%) i/s -      7.224k in   5.069311s

Comparison:
       define_method:     4698.6 i/s
module_eval with string:     1704.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    65.793k i/100ms
       Kernel#format    58.904k i/100ms
            String#%    62.399k i/100ms
Calculating -------------------------------------
         Float#round    706.809k (± 5.1%) i/s -      3.553M in   5.040513s
       Kernel#format    564.625k (± 4.9%) i/s -      2.827M in   5.019966s
            String#%    578.202k (± 4.4%) i/s -      2.933M in   5.082648s

Comparison:
         Float#round:   706809.0 i/s
            String#%:   578201.8 i/s - 1.22x  (± 0.00) slower
       Kernel#format:   564625.2 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   187.498M i/100ms
          OpenStruct   194.082M i/100ms
Calculating -------------------------------------
                Hash      1.930B (± 3.8%) i/s -      9.750B in   5.058046s
          OpenStruct      1.962B (± 3.1%) i/s -      9.898B in   5.048590s

Comparison:
          OpenStruct: 1962498841.5 i/s
                Hash: 1930363955.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   196.259M i/100ms
          OpenStruct     2.011k i/100ms
Calculating -------------------------------------
                Hash      1.903B (± 4.0%) i/s -      9.617B in   5.061102s
          OpenStruct     21.866k (±10.7%) i/s -    108.594k in   5.049149s

Comparison:
                Hash: 1903331408.3 i/s
          OpenStruct:    21866.4 i/s - 87043.57x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   599.276k i/100ms
  ancestors.include?   131.817k i/100ms
Calculating -------------------------------------
  less than or equal      7.497M (± 6.0%) i/s -     37.754M in   5.056297s
  ancestors.include?      1.388M (± 6.1%) i/s -      6.986M in   5.052602s

Comparison:
  less than or equal:  7496897.1 i/s
  ancestors.include?:  1388071.5 i/s - 5.40x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     21.268  (± 4.7%) i/s -    106.000  in   5.002474s
         Kernel loop      4.386  (± 0.0%) i/s -     22.000  in   5.020955s

Comparison:
          While Loop:       21.3 i/s
         Kernel loop:        4.4 i/s - 4.85x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   193.549M i/100ms
         Array#first   188.054M i/100ms
Calculating -------------------------------------
           Array#[0]      1.944B (± 3.5%) i/s -      9.871B in   5.085400s
         Array#first      1.965B (± 3.1%) i/s -      9.967B in   5.078590s

Comparison:
         Array#first: 1964518524.0 i/s
           Array#[0]: 1943501431.4 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   194.847M i/100ms
          Array#last   196.425M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.906B (± 4.2%) i/s -      9.548B in   5.017046s
          Array#last      1.952B (± 4.0%) i/s -      9.821B in   5.039860s

Comparison:
          Array#last: 1951997635.0 i/s
          Array#[-1]: 1906379685.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   555.652k i/100ms
Calculating -------------------------------------
                find     10.172  (±19.7%) i/s -     28.000  in   5.082448s
             bsearch      5.604M (± 5.4%) i/s -     28.338M in   5.072876s

Comparison:
             bsearch:  5604013.5 i/s
                find:       10.2 i/s - 550946.30x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.083  (± 0.0%) i/s -      1.000  in  11.978658s
        Array#insert      0.770  (± 0.0%) i/s -      4.000  in   5.198355s

Comparison:
        Array#insert:        0.8 i/s
       Array#unshift:        0.1 i/s - 9.22x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   198.759M i/100ms
          Array#size   189.183M i/100ms
         Array#count   193.158M i/100ms
Calculating -------------------------------------
        Array#length      1.919B (± 3.9%) i/s -      9.739B in   5.082074s
          Array#size      1.898B (± 4.4%) i/s -      9.648B in   5.093385s
         Array#count      1.936B (± 4.3%) i/s -      9.851B in   5.097681s

Comparison:
         Array#count: 1935965282.8 i/s
        Array#length: 1919388521.4 i/s - same-ish: difference falls within error
          Array#size: 1898001389.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    21.471k i/100ms
        Array#sample     2.591M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    231.476k (± 4.7%) i/s -      1.159M in   5.020227s
        Array#sample     25.522M (± 4.1%) i/s -    129.548M in   5.084621s

Comparison:
        Array#sample: 25522021.1 i/s
 Array#shuffle.first:   231476.3 i/s - 110.26x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   180.000  i/100ms
          Date.parse   293.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     14.740k (±31.8%) i/s -     57.780k in   4.998979s
          Date.parse      4.951k (±26.8%) i/s -     21.975k in   5.038117s

Comparison:
        Date.iso8601:    14740.1 i/s
          Date.parse:     4951.1 i/s - 2.98x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   164.258k i/100ms
           Array#map   885.037k i/100ms
Calculating -------------------------------------
   Array#each + push      2.024M (± 8.0%) i/s -     10.184M in   5.067892s
           Array#map      8.976M (± 8.0%) i/s -     45.137M in   5.063672s

Comparison:
           Array#map:  8975575.6 i/s
   Array#each + push:  2024337.0 i/s - 4.43x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     7.795M i/100ms
               #each    44.649M i/100ms
Calculating -------------------------------------
            For loop     85.916M (± 4.9%) i/s -    428.698M in   5.001822s
               #each    442.654M (± 4.6%) i/s -      2.232B in   5.054375s

Comparison:
               #each: 442654293.0 i/s
            For loop: 85916401.3 i/s - 5.15x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   849.913k i/100ms
     each_with_index     1.188M i/100ms
Calculating -------------------------------------
          While Loop      8.247M (± 4.7%) i/s -     41.646M in   5.061513s
     each_with_index     11.593M (± 3.5%) i/s -     58.208M in   5.026911s

Comparison:
     each_with_index: 11593393.8 i/s
          While Loop:  8247385.7 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   144.512k i/100ms
      inject to_proc   149.401k i/100ms
        inject block   154.812k i/100ms
Calculating -------------------------------------
       inject symbol      1.531M (± 3.7%) i/s -      7.659M in   5.009403s
      inject to_proc      1.533M (± 3.5%) i/s -      7.769M in   5.073455s
        inject block      1.454M (± 5.8%) i/s -      7.276M in   5.023267s

Comparison:
      inject to_proc:  1533108.1 i/s
       inject symbol:  1531060.5 i/s - same-ish: difference falls within error
        inject block:  1453660.5 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    11.230k i/100ms
   Array#map.flatten    16.205k i/100ms
      Array#flat_map    40.279k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    165.023k (± 7.7%) i/s -    819.790k in   5.001237s
   Array#map.flatten    168.456k (± 6.3%) i/s -    842.660k in   5.023724s
      Array#flat_map    408.232k (± 6.3%) i/s -      2.054M in   5.054004s

Comparison:
      Array#flat_map:   408231.7 i/s
   Array#map.flatten:   168456.4 i/s - 2.42x  (± 0.00) slower
Array#map.flatten(1):   165022.6 i/s - 2.47x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   148.131k i/100ms
  Array#reverse_each     1.715M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.887M (± 6.9%) i/s -      9.480M in   5.048767s
  Array#reverse_each     17.270M (± 3.5%) i/s -     87.461M in   5.070496s

Comparison:
  Array#reverse_each: 17270403.5 i/s
  Array#reverse.each:  1886981.6 i/s - 9.15x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       598.450k i/100ms
   Enumerable#detect     2.961M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          6.273M (± 8.2%) i/s -    124.478M in  20.007106s
   Enumerable#detect     30.208M (± 3.7%) i/s -    603.943M in  20.021183s

Comparison:
   Enumerable#detect: 30208190.1 i/s
Enumerable#select.first:  6273035.6 i/s - 4.82x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       186.858k i/100ms
Enumerable#select.last
                       314.503k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.952M (± 5.0%) i/s -      9.903M in   5.085930s
Enumerable#select.last
                          3.159M (± 5.7%) i/s -     16.040M in   5.095091s

Comparison:
Enumerable#select.last:  3159093.3 i/s
Enumerable#reverse.detect:  1952414.0 i/s - 1.62x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.150k i/100ms
  Enumerable#sort_by   620.000  i/100ms
     Enumerable#sort     3.030k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         25.964k (±11.6%) i/s -    126.850k in   4.999795s
  Enumerable#sort_by     23.431k (±24.4%) i/s -    102.920k in   5.017781s
     Enumerable#sort     35.578k (± 4.1%) i/s -    178.770k in   5.033304s

Comparison:
     Enumerable#sort:    35577.9 i/s
Enumerable#sort_by (Symbol#to_proc):    25963.8 i/s - 1.37x  (± 0.00) slower
  Enumerable#sort_by:    23431.2 i/s - 1.52x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   466.698k i/100ms
Enumerable#sort_by...first
                         5.755k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      4.751M (± 5.5%) i/s -     23.802M in   5.025932s
Enumerable#sort_by...first
                         72.887k (± 5.9%) i/s -    368.320k in   5.071836s

Comparison:
   Enumerable#min_by:  4751192.7 i/s
Enumerable#sort_by...first:    72887.0 i/s - 65.19x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   266.870k i/100ms
            Hash#dup   306.279k i/100ms
Calculating -------------------------------------
              Hash[]      3.222M (± 7.3%) i/s -     16.012M in   4.999921s
            Hash#dup      3.222M (± 3.5%) i/s -     16.233M in   5.044990s

Comparison:
              Hash[]:  3222070.2 i/s
            Hash#dup:  3221645.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   191.039M i/100ms
  Hash#fetch, symbol   193.670M i/100ms
     Hash#[], string     2.962M i/100ms
  Hash#fetch, string     3.146M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.931B (± 3.6%) i/s -      9.743B in   5.052261s
  Hash#fetch, symbol      1.937B (± 3.5%) i/s -      9.684B in   5.005630s
     Hash#[], string    162.302M (± 6.1%) i/s -    808.508M in   5.001681s
  Hash#fetch, string    130.273M (± 5.0%) i/s -    651.126M in   5.011291s

Comparison:
  Hash#fetch, symbol: 1937022191.2 i/s
     Hash#[], symbol: 1931053453.4 i/s - same-ish: difference falls within error
     Hash#[], string: 162301654.2 i/s - 11.93x  (± 0.00) slower
  Hash#fetch, string: 130272909.9 i/s - 14.87x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    74.632M i/100ms
             Hash#[]    78.047M i/100ms
          Hash#[] ||    77.350M i/100ms
          Hash#[] &&    79.696M i/100ms
          Hash#fetch    78.804M i/100ms
 Hash#fetch fallback    79.452M i/100ms
Calculating -------------------------------------
            Hash#dig    780.315M (± 4.8%) i/s -      3.955B in   5.080788s
             Hash#[]    777.759M (± 4.1%) i/s -      3.902B in   5.026554s
          Hash#[] ||    771.480M (± 3.1%) i/s -      3.867B in   5.018006s
          Hash#[] &&    756.714M (± 3.6%) i/s -      3.825B in   5.061859s
          Hash#fetch    748.338M (± 4.6%) i/s -      3.783B in   5.065303s
 Hash#fetch fallback    775.553M (± 4.0%) i/s -      3.893B in   5.028498s

Comparison:
            Hash#dig: 780314921.7 i/s
             Hash#[]: 777758656.0 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 775552717.0 i/s - same-ish: difference falls within error
          Hash#[] ||: 771480043.6 i/s - same-ish: difference falls within error
          Hash#[] &&: 756714233.2 i/s - same-ish: difference falls within error
          Hash#fetch: 748337890.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   193.417M i/100ms
  Hash#fetch + block   197.711M i/100ms
    Hash#fetch + arg   197.533M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.923B (± 5.3%) i/s -      9.671B in   5.043384s
  Hash#fetch + block      1.954B (± 3.4%) i/s -      9.886B in   5.066438s
    Hash#fetch + arg      1.950B (± 4.4%) i/s -      9.877B in   5.075457s

Comparison:
  Hash#fetch + block: 1953543392.0 i/s
    Hash#fetch + arg: 1949797469.1 i/s - same-ish: difference falls within error
  Hash#fetch + const: 1923168429.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    18.226k i/100ms
         sort + to_h    11.628k i/100ms
Calculating -------------------------------------
      sort_by + to_h    243.195k (± 9.8%) i/s -      1.203M in   4.996770s
         sort + to_h    158.605k (± 7.9%) i/s -    790.704k in   5.019400s

Comparison:
      sort_by + to_h:   243194.5 i/s
         sort + to_h:   158605.3 i/s - 1.53x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   162.114k i/100ms
       Hash#each_key   195.439k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.681M (±12.3%) i/s -      8.268M in   5.071079s
       Hash#each_key      1.966M (± 5.3%) i/s -      9.967M in   5.083698s

Comparison:
       Hash#each_key:  1966341.1 i/s
      Hash#keys.each:  1681446.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   164.000  i/100ms
           Hash#key?     2.288M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.650k (± 8.7%) i/s -      8.200k in   5.016213s
           Hash#key?     23.018M (± 2.8%) i/s -    116.671M in   5.072917s

Comparison:
           Hash#key?: 23017676.4 i/s
  Hash#keys.include?:     1649.9 i/s - 13951.18x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    27.077k i/100ms
            Hash#[]=    30.866k i/100ms
Calculating -------------------------------------
         Hash#merge!    314.260k (±14.5%) i/s -      1.516M in   5.083117s
            Hash#[]=    329.455k (± 6.2%) i/s -      1.667M in   5.079825s

Comparison:
            Hash#[]=:   329455.4 i/s
         Hash#merge!:   314260.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        14.491k i/100ms
      Hash#merge({})    13.217k i/100ms
 Hash#dup#merge!({})    23.090k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        234.039k (± 5.6%) i/s -      1.174M in   5.031937s
      Hash#merge({})    144.286k (± 5.1%) i/s -    726.935k in   5.052539s
 Hash#dup#merge!({})    231.814k (± 4.2%) i/s -      1.178M in   5.089148s

Comparison:
{}#merge!(Hash) do end:   234039.3 i/s
 Hash#dup#merge!({}):   231814.5 i/s - same-ish: difference falls within error
      Hash#merge({}):   144285.6 i/s - 1.62x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   189.742M i/100ms
          Hash#merge   189.295M i/100ms
Calculating -------------------------------------
        Hash#**other      1.922B (± 4.6%) i/s -      9.677B in   5.046760s
          Hash#merge      1.923B (± 2.8%) i/s -      9.654B in   5.023349s

Comparison:
          Hash#merge: 1923386937.9 i/s
        Hash#**other: 1921714784.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   490.000  i/100ms
         Hash#merge!    31.045k i/100ms
Calculating -------------------------------------
          Hash#merge      5.881k (±10.7%) i/s -     29.400k in   5.062484s
         Hash#merge!    328.094k (± 6.8%) i/s -      1.645M in   5.040856s

Comparison:
         Hash#merge!:   328093.9 i/s
          Hash#merge:     5881.0 i/s - 55.79x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.024M i/100ms
Array#each             907.902k i/100ms
Array#each_w/_object   892.219k i/100ms
Hash#select-include      1.654M i/100ms
Calculating -------------------------------------
Hash#native-slice        10.754M (± 5.8%) i/s -     54.252M in   5.063083s
Array#each                9.130M (± 5.5%) i/s -     46.303M in   5.088400s
Array#each_w/_object      9.252M (± 6.1%) i/s -     46.395M in   5.035277s
Hash#select-include      16.308M (± 7.8%) i/s -     81.024M in   5.003767s

Comparison:
Hash#select-include : 16307908.1 i/s
Hash#native-slice   : 10753559.3 i/s - 1.52x  (± 0.00) slower
Array#each_w/_object:  9252125.4 i/s - 1.76x  (± 0.00) slower
Array#each          :  9130367.8 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   176.000  i/100ms
         Hash#value?     1.400k i/100ms
Calculating -------------------------------------
Hash#values.include?      2.058k (±13.5%) i/s -     10.032k in   4.999142s
         Hash#value?     13.767k (± 2.3%) i/s -     70.000k in   5.087303s

Comparison:
         Hash#value?:    13767.4 i/s
Hash#values.include?:     2058.1 i/s - 6.69x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   193.303M i/100ms
                send   180.623M i/100ms
      method_missing   186.485M i/100ms
Calculating -------------------------------------
                call      1.940B (± 3.7%) i/s -      9.858B in   5.088136s
                send      1.969B (± 4.8%) i/s -      9.934B in   5.058268s
      method_missing      1.942B (± 3.4%) i/s -      9.697B in   4.999894s

Comparison:
                send: 1968638472.9 i/s
      method_missing: 1941789771.7 i/s - same-ish: difference falls within error
                call: 1940185686.7 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    27.085k i/100ms
      Symbol#to_proc    30.044k i/100ms
Calculating -------------------------------------
               Block    314.909k (± 7.1%) i/s -      1.571M in   5.021289s
      Symbol#to_proc    323.945k (± 4.0%) i/s -      1.622M in   5.016652s

Comparison:
      Symbol#to_proc:   323944.7 i/s
               Block:   314908.5 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   180.609M i/100ms
       block + yield   189.008M i/100ms
        unused block   202.064M i/100ms
               yield   204.219M i/100ms
Calculating -------------------------------------
          block.call      1.935B (± 4.6%) i/s -      9.753B in   5.050970s
       block + yield      1.940B (± 4.0%) i/s -      9.828B in   5.074318s
        unused block      2.059B (± 4.1%) i/s -     10.305B in   5.014339s
               yield      1.844B (± 6.2%) i/s -      9.190B in   5.002348s

Comparison:
        unused block: 2058548518.8 i/s
       block + yield: 1940095649.0 i/s - same-ish: difference falls within error
          block.call: 1935199134.7 i/s - same-ish: difference falls within error
               yield: 1844337358.5 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    24.725k i/100ms
      range#include?   278.000  i/100ms
       range#member?   284.000  i/100ms
       plain compare    18.492k i/100ms
Calculating -------------------------------------
        range#cover?    148.189k (±35.6%) i/s -    642.850k in   5.058637s
      range#include?      5.314k (±41.7%) i/s -     20.572k in   5.031163s
       range#member?      5.246k (±40.2%) i/s -     17.324k in   5.044235s
       plain compare    196.935k (±50.2%) i/s -    684.204k in   5.067349s

Comparison:
       plain compare:   196934.7 i/s
        range#cover?:   148188.7 i/s - same-ish: difference falls within error
      range#include?:     5314.3 i/s - 37.06x  (± 0.00) slower
       range#member?:     5246.2 i/s - 37.54x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    13.293M i/100ms
           String#=~    13.005M i/100ms
          Regexp#===    10.854M i/100ms
        String#match     8.771M i/100ms
Calculating -------------------------------------
       String#match?    135.005M (± 4.9%) i/s -    677.942M in   5.034114s
           String#=~    125.631M (± 5.0%) i/s -    637.225M in   5.084889s
          Regexp#===    127.737M (± 4.5%) i/s -    640.405M in   5.023547s
        String#match     87.942M (± 5.1%) i/s -    438.554M in   5.000339s

Comparison:
       String#match?: 135005122.8 i/s
          Regexp#===: 127737401.7 i/s - same-ish: difference falls within error
           String#=~: 125631486.2 i/s - same-ish: difference falls within error
        String#match: 87942393.0 i/s - 1.54x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.022M i/100ms
      String#casecmp     3.456M i/100ms
Calculating -------------------------------------
String#downcase + ==     23.401M (± 8.8%) i/s -    117.266M in   5.054862s
      String#casecmp     36.224M (± 6.8%) i/s -    183.187M in   5.083264s

Comparison:
      String#casecmp: 36223731.7 i/s
String#downcase + ==: 23400508.3 i/s - 1.55x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     5.564M i/100ms
       String#concat     6.664M i/100ms
       String#append     6.832M i/100ms
         "foo" "bar"   204.075M i/100ms
  "#{'foo'}#{'bar'}"   202.239M i/100ms
Calculating -------------------------------------
            String#+     70.704M (± 7.0%) i/s -    356.110M in   5.062742s
       String#concat     68.495M (± 6.8%) i/s -    346.549M in   5.083793s
       String#append     68.314M (± 6.6%) i/s -    341.593M in   5.023189s
         "foo" "bar"      1.969B (± 3.4%) i/s -     10.000B in   5.085309s
  "#{'foo'}#{'bar'}"      1.938B (± 5.3%) i/s -      9.707B in   5.022181s

Comparison:
         "foo" "bar": 1968632130.4 i/s
  "#{'foo'}#{'bar'}": 1938360901.3 i/s - same-ish: difference falls within error
            String#+: 70703569.4 i/s - 27.84x  (± 0.00) slower
       String#concat: 68494970.2 i/s - 28.74x  (± 0.00) slower
       String#append: 68313514.6 i/s - 28.82x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   194.858M i/100ms
          String#dup   187.906M i/100ms
Calculating -------------------------------------
           String#+@      1.978B (± 4.3%) i/s -      9.938B in   5.034610s
          String#dup      2.011B (± 4.6%) i/s -     10.147B in   5.056193s

Comparison:
          String#dup: 2011073292.6 i/s
           String#+@: 1977596702.8 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.301M i/100ms
       String#match?     1.233M i/100ms
    String#end_with?     7.664M i/100ms
Calculating -------------------------------------
           String#=~     13.182M (± 5.0%) i/s -     66.372M in   5.048265s
       String#match?     16.549M (± 3.5%) i/s -     83.837M in   5.071957s
    String#end_with?     82.622M (± 4.4%) i/s -    413.881M in   5.019107s

Comparison:
    String#end_with?: 82622435.1 i/s
       String#match?: 16548946.6 i/s - 4.99x  (± 0.00) slower
           String#=~: 13181736.6 i/s - 6.27x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   126.024k i/100ms
          String#sub   322.695k i/100ms
String#dup["string"]=
                         9.568M i/100ms
Calculating -------------------------------------
         String#gsub      4.109M (±14.9%) i/s -     19.912M in   5.006888s
          String#sub      5.368M (±13.9%) i/s -     26.461M in   5.050648s
String#dup["string"]=
                         95.900M (± 3.6%) i/s -    487.977M in   5.094981s

Comparison:
String#dup["string"]=: 95900176.7 i/s
          String#sub:  5367726.3 i/s - 17.87x  (± 0.00) slower
         String#gsub:  4108800.3 i/s - 23.34x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   132.988k i/100ms
           String#tr    93.632k i/100ms
Calculating -------------------------------------
         String#gsub      2.031M (± 9.0%) i/s -     10.107M in   5.019748s
           String#tr    919.786k (± 5.1%) i/s -      4.682M in   5.104058s

Comparison:
         String#gsub:  2031399.6 i/s
           String#tr:   919786.1 i/s - 2.21x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   193.142M i/100ms
         With Freeze   183.536M i/100ms
Calculating -------------------------------------
      Without Freeze      1.961B (± 4.4%) i/s -      9.850B in   5.032400s
         With Freeze      1.926B (± 4.1%) i/s -      9.727B in   5.058305s

Comparison:
      Without Freeze: 1961262235.4 i/s
         With Freeze: 1926201231.1 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     5.242k i/100ms
      String#squeeze    24.295k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     93.497k (± 9.8%) i/s -    466.538k in   5.042765s
      String#squeeze    235.668k (± 5.6%) i/s -      1.190M in   5.068875s

Comparison:
      String#squeeze:   235668.0 i/s
 String#gsub/regex+/:    93497.1 i/s - 2.52x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     2.712M i/100ms
       String#match?     4.062M i/100ms
  String#start_with?    19.820M i/100ms
Calculating -------------------------------------
           String#=~     24.264M (± 5.3%) i/s -    122.055M in   5.045089s
       String#match?     40.152M (± 3.9%) i/s -    203.121M in   5.066436s
  String#start_with?    191.996M (± 4.1%) i/s -    971.197M in   5.067082s

Comparison:
  String#start_with?: 191996055.4 i/s
       String#match?: 40152159.4 i/s - 4.78x  (± 0.00) slower
           String#=~: 24263838.8 i/s - 7.91x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    79.779k i/100ms
    String#[0, n] ==   146.374k i/100ms
   String#[RANGE] ==   127.925k i/100ms
   String#[0...n] ==   135.370k i/100ms
Calculating -------------------------------------
  String#start_with?      3.632M (± 6.1%) i/s -     18.110M in   5.006266s
    String#[0, n] ==      1.605M (± 7.0%) i/s -      8.051M in   5.042046s
   String#[RANGE] ==      1.358M (± 6.7%) i/s -      6.780M in   5.017681s
   String#[0...n] ==      1.366M (± 6.3%) i/s -      6.904M in   5.073749s

Comparison:
  String#start_with?:  3631638.8 i/s
    String#[0, n] ==:  1605140.5 i/s - 2.26x  (± 0.00) slower
   String#[0...n] ==:  1366360.4 i/s - 2.66x  (± 0.00) slower
   String#[RANGE] ==:  1357612.8 i/s - 2.68x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=     9.647M i/100ms
 String#sub!'string'   386.622k i/100ms
String#gsub!'string'   355.946k i/100ms
  String#[/regexp/]=     1.889M i/100ms
 String#sub!/regexp/     1.692M i/100ms
String#gsub!/regexp/   520.807k i/100ms
Calculating -------------------------------------
  String#['string']=     96.724M (± 3.9%) i/s -    492.011M in   5.094402s
 String#sub!'string'      6.275M (±15.4%) i/s -     28.610M in   5.004177s
String#gsub!'string'      4.355M (± 4.5%) i/s -     22.069M in   5.078137s
  String#[/regexp/]=     19.273M (± 5.0%) i/s -     96.361M in   5.013396s
 String#sub!/regexp/     17.007M (± 5.9%) i/s -     86.284M in   5.091679s
String#gsub!/regexp/      5.042M (± 7.6%) i/s -     25.520M in   5.092276s

Comparison:
  String#['string']=: 96724205.9 i/s
  String#[/regexp/]=: 19272903.0 i/s - 5.02x  (± 0.00) slower
 String#sub!/regexp/: 17007261.2 i/s - 5.69x  (± 0.00) slower
 String#sub!'string':  6274745.5 i/s - 15.41x  (± 0.00) slower
String#gsub!/regexp/:  5042193.6 i/s - 19.18x  (± 0.00) slower
String#gsub!'string':  4355309.1 i/s - 22.21x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.140M i/100ms
        String#chomp     4.167M i/100ms
String#delete_suffix     6.498M i/100ms
Calculating -------------------------------------
          String#sub     20.750M (± 7.4%) i/s -    103.719M in   5.030477s
        String#chomp     40.714M (± 2.5%) i/s -    204.161M in   5.017739s
String#delete_suffix     65.221M (± 8.3%) i/s -    324.920M in   5.018624s

Comparison:
String#delete_suffix: 65220794.3 i/s
        String#chomp: 40713752.1 i/s - 1.60x  (± 0.00) slower
          String#sub: 20749979.7 i/s - 3.14x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   187.000M i/100ms
          String#sub    13.180M i/100ms
Calculating -------------------------------------
String#delete_prefix      1.919B (± 4.4%) i/s -      9.724B in   5.078666s
          String#sub    133.272M (± 3.6%) i/s -    672.178M in   5.050344s

Comparison:
String#delete_prefix: 1918537169.0 i/s
          String#sub: 133271993.6 i/s - 14.40x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.086M i/100ms
    String#unpack[0]     1.269M i/100ms
Calculating -------------------------------------
      String#unpack1     13.044M (± 6.4%) i/s -     65.170M in   5.018183s
    String#unpack[0]     12.714M (± 5.6%) i/s -     63.457M in   5.007746s

Comparison:
      String#unpack1: 13043776.0 i/s
    String#unpack[0]: 12713798.1 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    10.895k i/100ms
          Time.parse    85.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    173.857k (±16.0%) i/s -    849.810k in   4.999346s
          Time.parse      4.297k (±21.7%) i/s -     18.700k in   5.005678s

Comparison:
        Time.iso8601:   173856.9 i/s
          Time.parse:     4297.0 i/s - 40.46x  (± 0.00) slower

