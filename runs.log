$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       238.417M i/100ms
Function with splat arguments
                       603.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          2.388B (± 0.3%) i/s -     12.159B in   5.092377s
Function with splat arguments
                          6.324k (± 4.7%) i/s -     31.959k in   5.065242s

Comparison:
Function with single Array argument: 2387761349.9 i/s
Function with splat arguments:     6324.0 i/s - 377569.88x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   238.175M i/100ms
Sequential Assignment
                       238.838M i/100ms
Calculating -------------------------------------
 Parallel Assignment      2.387B (± 0.2%) i/s -     12.147B in   5.089638s
Sequential Assignment
                          2.388B (± 0.2%) i/s -     11.942B in   5.000841s

Comparison:
Sequential Assignment: 2387994789.0 i/s
 Parallel Assignment: 2386612334.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   238.397M i/100ms
       attr_accessor   239.068M i/100ms
Calculating -------------------------------------
   getter_and_setter      2.388B (± 0.3%) i/s -     12.158B in   5.090682s
       attr_accessor      2.389B (± 0.2%) i/s -     11.953B in   5.004005s

Comparison:
       attr_accessor: 2388782402.2 i/s
   getter_and_setter: 2388352955.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     6.766k i/100ms
         respond_to?   239.135M i/100ms
Calculating -------------------------------------
      begin...rescue     47.635k (± 2.7%) i/s -    243.576k in   5.117250s
         respond_to?      2.389B (± 0.2%) i/s -     11.957B in   5.004961s

Comparison:
         respond_to?: 2388988541.6 i/s
      begin...rescue:    47634.7 i/s - 50152.32x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   238.366M i/100ms
             &method   239.126M i/100ms
Calculating -------------------------------------
              normal      2.388B (± 0.3%) i/s -     12.157B in   5.090635s
             &method      2.390B (± 0.3%) i/s -     11.956B in   5.003304s

Comparison:
             &method: 2389699941.9 i/s
              normal: 2388075519.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       103.000  i/100ms
       define_method   134.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.572k (±54.8%) i/s -      4.635k in   5.135825s
       define_method      3.487k (±52.7%) i/s -      6.968k in   6.791518s

Comparison:
       define_method:     3486.8 i/s
module_eval with string:     1571.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    31.162k i/100ms
       Kernel#format    46.235k i/100ms
            String#%    46.281k i/100ms
Calculating -------------------------------------
         Float#round    343.160k (± 3.0%) i/s -      1.714M in   4.999380s
       Kernel#format    479.074k (± 2.0%) i/s -      2.404M in   5.020615s
            String#%    480.189k (± 1.8%) i/s -      2.407M in   5.013642s

Comparison:
            String#%:   480188.9 i/s
       Kernel#format:   479073.9 i/s - same-ish: difference falls within error
         Float#round:   343160.2 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   238.739M i/100ms
          OpenStruct   238.962M i/100ms
Calculating -------------------------------------
                Hash      2.387B (± 0.3%) i/s -     11.937B in   5.001190s
          OpenStruct      2.380B (± 2.8%) i/s -     11.948B in   5.025849s

Comparison:
                Hash: 2386853800.1 i/s
          OpenStruct: 2379701920.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   238.474M i/100ms
          OpenStruct     2.563k i/100ms
Calculating -------------------------------------
                Hash      2.382B (± 0.5%) i/s -     11.924B in   5.006780s
          OpenStruct     28.210k (±12.1%) i/s -    138.402k in   5.038649s

Comparison:
                Hash: 2381566604.3 i/s
          OpenStruct:    28210.0 i/s - 84422.80x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   697.508k i/100ms
  ancestors.include?   122.279k i/100ms
Calculating -------------------------------------
  less than or equal      7.434M (± 3.4%) i/s -     37.665M in   5.073053s
  ancestors.include?      1.248M (± 4.1%) i/s -      6.236M in   5.007006s

Comparison:
  less than or equal:  7433550.4 i/s
  ancestors.include?:  1247621.4 i/s - 5.96x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     23.866  (± 0.0%) i/s -    120.000  in   5.028288s
         Kernel loop      5.713  (± 0.0%) i/s -     29.000  in   5.076107s

Comparison:
          While Loop:       23.9 i/s
         Kernel loop:        5.7 i/s - 4.18x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   238.740M i/100ms
         Array#first   238.618M i/100ms
Calculating -------------------------------------
           Array#[0]      2.386B (± 0.3%) i/s -     11.937B in   5.003353s
         Array#first      2.389B (± 0.2%) i/s -     12.170B in   5.093885s

Comparison:
         Array#first: 2389052657.5 i/s
           Array#[0]: 2385823464.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   238.946M i/100ms
          Array#last   238.230M i/100ms
Calculating -------------------------------------
          Array#[-1]      2.386B (± 0.3%) i/s -     11.947B in   5.006447s
          Array#last      2.390B (± 0.2%) i/s -     12.150B in   5.084634s

Comparison:
          Array#last: 2389512480.1 i/s
          Array#[-1]: 2386408348.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   433.365k i/100ms
Calculating -------------------------------------
                find      0.101  (± 0.0%) i/s -      1.000  in   9.938357s
             bsearch      4.339M (± 2.9%) i/s -     22.102M in   5.097754s

Comparison:
             bsearch:  4339159.5 i/s
                find:        0.1 i/s - 43124115.11x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.124  (± 0.0%) i/s -      1.000  in   8.071802s
        Array#insert      0.944  (± 0.0%) i/s -      5.000  in   5.298237s

Comparison:
        Array#insert:        0.9 i/s
       Array#unshift:        0.1 i/s - 7.62x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   238.697M i/100ms
          Array#size   238.847M i/100ms
         Array#count   239.047M i/100ms
Calculating -------------------------------------
        Array#length      2.388B (± 0.3%) i/s -     12.174B in   5.098313s
          Array#size      2.389B (± 0.3%) i/s -     12.181B in   5.099636s
         Array#count      2.390B (± 0.2%) i/s -     11.952B in   5.001241s

Comparison:
         Array#count: 2389887971.9 i/s
          Array#size: 2388658202.6 i/s - same-ish: difference falls within error
        Array#length: 2387780740.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    21.682k i/100ms
        Array#sample     2.496M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    240.233k (± 2.4%) i/s -      1.214M in   5.057426s
        Array#sample     24.977M (± 0.1%) i/s -    127.305M in   5.096889s

Comparison:
        Array#sample: 24976956.3 i/s
 Array#shuffle.first:   240232.6 i/s - 103.97x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   419.000  i/100ms
          Date.parse   130.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     13.438k (±28.7%) i/s -     56.565k in   5.012224s
          Date.parse      5.064k (±34.6%) i/s -     19.110k in   5.001930s

Comparison:
        Date.iso8601:    13438.1 i/s
          Date.parse:     5064.4 i/s - 2.65x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   135.160k i/100ms
           Array#map   524.616k i/100ms
Calculating -------------------------------------
   Array#each + push      1.432M (± 3.5%) i/s -      7.163M in   5.010039s
           Array#map      5.317M (± 5.8%) i/s -     26.755M in   5.049767s

Comparison:
           Array#map:  5316891.3 i/s
   Array#each + push:  1431603.5 i/s - 3.71x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     4.182M i/100ms
               #each    56.920M i/100ms
Calculating -------------------------------------
            For loop     46.093M (± 4.9%) i/s -    230.009M in   5.002448s
               #each    567.916M (± 0.6%) i/s -      2.846B in   5.011527s

Comparison:
               #each: 567915972.4 i/s
            For loop: 46093481.4 i/s - 12.32x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   698.702k i/100ms
     each_with_index     1.282M i/100ms
Calculating -------------------------------------
          While Loop      6.994M (± 0.1%) i/s -     35.634M in   5.095274s
     each_with_index     12.821M (± 0.1%) i/s -     64.118M in   5.001038s

Comparison:
     each_with_index: 12820995.0 i/s
          While Loop:  6993502.4 i/s - 1.83x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   146.397k i/100ms
      inject to_proc   147.425k i/100ms
        inject block   147.533k i/100ms
Calculating -------------------------------------
       inject symbol      1.475M (± 0.1%) i/s -      7.466M in   5.062215s
      inject to_proc      1.475M (± 0.1%) i/s -      7.519M in   5.098052s
        inject block      1.475M (± 0.1%) i/s -      7.377M in   5.001388s

Comparison:
        inject block:  1474921.0 i/s
       inject symbol:  1474898.2 i/s - same-ish: difference falls within error
      inject to_proc:  1474815.7 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     9.115k i/100ms
   Array#map.flatten    10.558k i/100ms
      Array#flat_map    29.577k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    106.763k (± 3.5%) i/s -    537.785k in   5.044020s
   Array#map.flatten    107.073k (± 3.3%) i/s -    538.458k in   5.034650s
      Array#flat_map    297.330k (± 2.6%) i/s -      1.508M in   5.076997s

Comparison:
      Array#flat_map:   297329.6 i/s
   Array#map.flatten:   107072.8 i/s - 2.78x  (± 0.00) slower
Array#map.flatten(1):   106762.8 i/s - 2.78x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   155.344k i/100ms
  Array#reverse_each     1.205M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.548M (± 2.9%) i/s -      7.767M in   5.021857s
  Array#reverse_each     12.117M (± 2.7%) i/s -     61.475M in   5.077327s

Comparison:
  Array#reverse_each: 12116989.8 i/s
  Array#reverse.each:  1548070.1 i/s - 7.83x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       583.909k i/100ms
   Enumerable#detect     3.807M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          6.129M (± 5.8%) i/s -    122.037M in  20.000799s
   Enumerable#detect     38.207M (± 0.7%) i/s -    765.202M in  20.028842s

Comparison:
   Enumerable#detect: 38206874.8 i/s
Enumerable#select.first:  6129329.8 i/s - 6.23x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       154.185k i/100ms
Enumerable#select.last
                       314.906k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.566M (± 3.0%) i/s -      7.863M in   5.027347s
Enumerable#select.last
                          3.206M (± 3.2%) i/s -     16.060M in   5.014655s

Comparison:
Enumerable#select.last:  3206135.1 i/s
Enumerable#reverse.detect:  1565664.2 i/s - 2.05x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.318k i/100ms
  Enumerable#sort_by     2.481k i/100ms
     Enumerable#sort     2.746k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         23.218k (±16.2%) i/s -    106.628k in   5.028397s
  Enumerable#sort_by     23.487k (±17.2%) i/s -    106.683k in   5.072666s
     Enumerable#sort     33.024k (± 1.9%) i/s -    167.506k in   5.074416s

Comparison:
     Enumerable#sort:    33023.9 i/s
  Enumerable#sort_by:    23487.2 i/s - 1.41x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    23218.5 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   320.656k i/100ms
Enumerable#sort_by...first
                         4.538k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      3.207M (± 0.0%) i/s -     16.033M in   4.999567s
Enumerable#sort_by...first
                         54.596k (± 3.4%) i/s -    276.818k in   5.076416s

Comparison:
   Enumerable#min_by:  3206838.1 i/s
Enumerable#sort_by...first:    54596.3 i/s - 58.74x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   182.264k i/100ms
            Hash#dup   189.610k i/100ms
Calculating -------------------------------------
              Hash[]      1.923M (± 3.8%) i/s -      9.660M in   5.030279s
            Hash#dup      1.935M (± 3.9%) i/s -      9.670M in   5.006386s

Comparison:
            Hash#dup:  1934560.1 i/s
              Hash[]:  1923268.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   238.859M i/100ms
  Hash#fetch, symbol   239.061M i/100ms
     Hash#[], string     4.678M i/100ms
  Hash#fetch, string     4.553M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      2.389B (± 0.3%) i/s -     11.943B in   4.999802s
  Hash#fetch, symbol      2.390B (± 0.2%) i/s -     11.953B in   5.001163s
     Hash#[], string     46.885M (± 0.9%) i/s -    238.570M in   5.088821s
  Hash#fetch, string     45.704M (± 0.6%) i/s -    232.187M in   5.080450s

Comparison:
  Hash#fetch, symbol: 2390065080.5 i/s
     Hash#[], symbol: 2388703624.7 i/s - same-ish: difference falls within error
     Hash#[], string: 46884820.1 i/s - 50.98x  (± 0.00) slower
  Hash#fetch, string: 45703732.4 i/s - 52.29x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    59.762M i/100ms
             Hash#[]    59.751M i/100ms
          Hash#[] ||    59.777M i/100ms
          Hash#[] &&    59.779M i/100ms
          Hash#fetch    59.772M i/100ms
 Hash#fetch fallback    59.777M i/100ms
Calculating -------------------------------------
            Hash#dig    597.312M (± 0.2%) i/s -      2.988B in   5.002580s
             Hash#[]    597.312M (± 0.3%) i/s -      2.988B in   5.001676s
          Hash#[] ||    597.347M (± 0.2%) i/s -      2.989B in   5.003571s
          Hash#[] &&    597.206M (± 0.3%) i/s -      2.989B in   5.004900s
          Hash#fetch    597.609M (± 0.1%) i/s -      2.989B in   5.000966s
 Hash#fetch fallback    597.517M (± 0.2%) i/s -      2.989B in   5.002100s

Comparison:
          Hash#fetch: 597608795.4 i/s
 Hash#fetch fallback: 597517326.6 i/s - same-ish: difference falls within error
          Hash#[] ||: 597347262.2 i/s - same-ish: difference falls within error
             Hash#[]: 597311780.0 i/s - same-ish: difference falls within error
            Hash#dig: 597311506.4 i/s - same-ish: difference falls within error
          Hash#[] &&: 597205862.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   238.823M i/100ms
  Hash#fetch + block   238.593M i/100ms
    Hash#fetch + arg   239.050M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      2.388B (± 0.3%) i/s -     11.941B in   5.001535s
  Hash#fetch + block      2.389B (± 0.2%) i/s -     12.168B in   5.093544s
    Hash#fetch + arg      2.390B (± 0.2%) i/s -     11.952B in   5.001735s

Comparison:
    Hash#fetch + arg: 2389679504.2 i/s
  Hash#fetch + block: 2388969100.8 i/s - same-ish: difference falls within error
  Hash#fetch + const: 2387526597.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    16.816k i/100ms
         sort + to_h    10.621k i/100ms
Calculating -------------------------------------
      sort_by + to_h    186.468k (± 4.5%) i/s -    941.696k in   5.060878s
         sort + to_h    115.505k (± 5.6%) i/s -    584.155k in   5.077471s

Comparison:
      sort_by + to_h:   186468.1 i/s
         sort + to_h:   115505.5 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each    87.111k i/100ms
       Hash#each_key   105.992k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.020M (± 4.1%) i/s -      5.140M in   5.047992s
       Hash#each_key      1.075M (± 3.3%) i/s -      5.406M in   5.034430s

Comparison:
       Hash#each_key:  1074993.8 i/s
      Hash#keys.each:  1019950.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   154.000  i/100ms
           Hash#key?    33.211M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.997k (±13.8%) i/s -      9.856k in   5.060678s
           Hash#key?    331.938M (± 0.2%) i/s -      1.661B in   5.002590s

Comparison:
           Hash#key?: 331937989.2 i/s
  Hash#keys.include?:     1997.3 i/s - 166193.09x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    18.292k i/100ms
            Hash#[]=    20.852k i/100ms
Calculating -------------------------------------
         Hash#merge!    211.564k (± 3.8%) i/s -      1.061M in   5.022317s
            Hash#[]=    212.212k (± 3.4%) i/s -      1.063M in   5.017399s

Comparison:
            Hash#[]=:   212212.3 i/s
         Hash#merge!:   211563.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         8.322k i/100ms
      Hash#merge({})     6.546k i/100ms
 Hash#dup#merge!({})    12.295k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         95.001k (± 4.1%) i/s -    474.354k in   5.002126s
      Hash#merge({})     74.517k (± 4.0%) i/s -    373.122k in   5.016184s
 Hash#dup#merge!({})    124.518k (± 3.8%) i/s -    627.045k in   5.043686s

Comparison:
 Hash#dup#merge!({}):   124517.7 i/s
{}#merge!(Hash) do end:    95000.9 i/s - 1.31x  (± 0.00) slower
      Hash#merge({}):    74516.5 i/s - 1.67x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   238.733M i/100ms
          Hash#merge   239.135M i/100ms
Calculating -------------------------------------
        Hash#**other      2.387B (± 0.3%) i/s -     11.937B in   5.000011s
          Hash#merge      2.389B (± 0.3%) i/s -     11.957B in   5.005503s

Comparison:
          Hash#merge: 2388749886.6 i/s
        Hash#**other: 2387344676.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   292.000  i/100ms
         Hash#merge!    21.042k i/100ms
Calculating -------------------------------------
          Hash#merge      3.107k (± 3.8%) i/s -     15.768k in   5.082101s
         Hash#merge!    210.984k (± 3.0%) i/s -      1.073M in   5.091102s

Comparison:
         Hash#merge!:   210984.5 i/s
          Hash#merge:     3107.5 i/s - 67.90x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.066M i/100ms
Array#each             889.575k i/100ms
Array#each_w/_object   889.398k i/100ms
Hash#select-include      1.151M i/100ms
Calculating -------------------------------------
Hash#native-slice        11.263M (± 3.5%) i/s -     56.472M in   5.020597s
Array#each                8.864M (± 2.7%) i/s -     44.479M in   5.022067s
Array#each_w/_object      8.955M (± 2.4%) i/s -     45.359M in   5.068195s
Hash#select-include      11.587M (± 2.9%) i/s -     58.694M in   5.070020s

Comparison:
Hash#select-include : 11587216.4 i/s
Hash#native-slice   : 11262972.3 i/s - same-ish: difference falls within error
Array#each_w/_object:  8955489.4 i/s - 1.29x  (± 0.00) slower
Array#each          :  8863715.9 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   155.000  i/100ms
         Hash#value?   471.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.943k (±13.5%) i/s -      9.610k in   5.062541s
         Hash#value?      4.724k (± 0.7%) i/s -     24.021k in   5.084697s

Comparison:
         Hash#value?:     4724.4 i/s
Hash#values.include?:     1942.5 i/s - 2.43x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   238.625M i/100ms
                send   239.076M i/100ms
      method_missing   239.140M i/100ms
Calculating -------------------------------------
                call      2.386B (± 0.4%) i/s -     11.931B in   5.000921s
                send      2.389B (± 0.2%) i/s -     11.954B in   5.002683s
      method_missing      2.389B (± 0.3%) i/s -     11.957B in   5.005264s

Comparison:
                send: 2389488751.0 i/s
      method_missing: 2388905724.8 i/s - same-ish: difference falls within error
                call: 2385858972.5 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    15.519k i/100ms
      Symbol#to_proc    17.340k i/100ms
Calculating -------------------------------------
               Block    174.935k (± 3.6%) i/s -    884.583k in   5.063612s
      Symbol#to_proc    174.314k (± 3.4%) i/s -    884.340k in   5.079436s

Comparison:
               Block:   174935.4 i/s
      Symbol#to_proc:   174313.8 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   238.410M i/100ms
       block + yield   239.134M i/100ms
        unused block   239.086M i/100ms
               yield   239.095M i/100ms
Calculating -------------------------------------
          block.call      2.387B (± 0.4%) i/s -     12.159B in   5.093793s
       block + yield      2.389B (± 0.2%) i/s -     11.957B in   5.004454s
        unused block      2.388B (± 0.3%) i/s -     11.954B in   5.006050s
               yield      2.390B (± 0.2%) i/s -     11.955B in   5.001484s

Comparison:
               yield: 2390241481.4 i/s
       block + yield: 2389219347.4 i/s - same-ish: difference falls within error
        unused block: 2387994492.3 i/s - same-ish: difference falls within error
          block.call: 2387044218.1 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    65.716k i/100ms
      range#include?   235.000  i/100ms
       range#member?   306.000  i/100ms
       plain compare    12.564k i/100ms
Calculating -------------------------------------
        range#cover?    226.823k (±27.4%) i/s -      1.051M in   5.031498s
      range#include?      4.271k (±47.0%) i/s -     16.215k in   6.294143s
       range#member?      4.431k (±52.2%) i/s -      8.262k in   5.796287s
       plain compare    441.491k (±36.8%) i/s -      1.872M in   5.021697s

Comparison:
       plain compare:   441490.7 i/s
        range#cover?:   226823.4 i/s - same-ish: difference falls within error
       range#member?:     4431.4 i/s - 99.63x  (± 0.00) slower
      range#include?:     4271.1 i/s - 103.37x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     3.428M i/100ms
           String#=~     5.861M i/100ms
          Regexp#===     5.861M i/100ms
        String#match     3.108M i/100ms
Calculating -------------------------------------
       String#match?     35.972M (± 3.6%) i/s -    181.687M in   5.057760s
           String#=~     58.599M (± 0.0%) i/s -    293.027M in   5.000513s
          Regexp#===     58.600M (± 0.0%) i/s -    293.065M in   5.001131s
        String#match     31.717M (± 4.1%) i/s -    158.504M in   5.006289s

Comparison:
          Regexp#===: 58599724.2 i/s
           String#=~: 58599492.2 i/s - same-ish: difference falls within error
       String#match?: 35971767.2 i/s - 1.63x  (± 0.00) slower
        String#match: 31716784.7 i/s - 1.85x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.138M i/100ms
      String#casecmp     3.645M i/100ms
Calculating -------------------------------------
String#downcase + ==     12.784M (± 4.1%) i/s -     64.870M in   5.083083s
      String#casecmp     36.437M (± 0.1%) i/s -    182.245M in   5.001618s

Comparison:
      String#casecmp: 36437130.3 i/s
String#downcase + ==: 12783971.1 i/s - 2.85x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+   238.518M i/100ms
       String#concat   239.137M i/100ms
       String#append   238.980M i/100ms
         "foo" "bar"   239.105M i/100ms
  "#{'foo'}#{'bar'}"   239.098M i/100ms
Calculating -------------------------------------
            String#+      2.389B (± 0.2%) i/s -     12.164B in   5.092454s
       String#concat      2.389B (± 0.2%) i/s -     11.957B in   5.005544s
       String#append      2.388B (± 0.3%) i/s -     11.949B in   5.003942s
         "foo" "bar"      2.390B (± 0.2%) i/s -     11.955B in   5.002676s
  "#{'foo'}#{'bar'}"      2.390B (± 0.2%) i/s -     11.955B in   5.002971s

Comparison:
         "foo" "bar": 2389775969.5 i/s
  "#{'foo'}#{'bar'}": 2389569033.6 i/s - same-ish: difference falls within error
       String#concat: 2388732039.4 i/s - same-ish: difference falls within error
            String#+: 2388729172.7 i/s - same-ish: difference falls within error
       String#append: 2387931811.8 i/s - same-ish: difference falls within error

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   238.556M i/100ms
          String#dup   238.872M i/100ms
Calculating -------------------------------------
           String#+@      2.387B (± 0.4%) i/s -     12.166B in   5.097112s
          String#dup      2.388B (± 0.3%) i/s -     11.944B in   5.000643s

Comparison:
          String#dup: 2388440534.9 i/s
           String#+@: 2386951218.2 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.212M i/100ms
       String#match?     1.194M i/100ms
    String#end_with?    14.235M i/100ms
Calculating -------------------------------------
           String#=~     12.144M (± 2.4%) i/s -     61.835M in   5.094830s
       String#match?     12.104M (± 2.5%) i/s -     60.911M in   5.035661s
    String#end_with?    142.254M (± 0.2%) i/s -    711.728M in   5.003223s

Comparison:
    String#end_with?: 142254348.8 i/s
           String#=~: 12144293.4 i/s - 11.71x  (± 0.00) slower
       String#match?: 12104104.9 i/s - 11.75x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    93.140k i/100ms
          String#sub   388.854k i/100ms
String#dup["string"]=
                        11.372M i/100ms
Calculating -------------------------------------
         String#gsub    972.601k (± 3.2%) i/s -      4.936M in   5.081266s
          String#sub      4.001M (± 5.4%) i/s -     20.220M in   5.069317s
String#dup["string"]=
                        113.760M (± 0.2%) i/s -    579.988M in   5.098360s

Comparison:
String#dup["string"]=: 113759938.3 i/s
          String#sub:  4001088.4 i/s - 28.43x  (± 0.00) slower
         String#gsub:   972600.7 i/s - 116.96x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   155.623k i/100ms
           String#tr   123.199k i/100ms
Calculating -------------------------------------
         String#gsub      1.750M (± 5.1%) i/s -      8.871M in   5.083465s
           String#tr      1.292M (± 4.2%) i/s -      6.530M in   5.063014s

Comparison:
         String#gsub:  1749921.5 i/s
           String#tr:  1292100.2 i/s - 1.35x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   238.319M i/100ms
         With Freeze   238.681M i/100ms
Calculating -------------------------------------
      Without Freeze      2.387B (± 0.3%) i/s -     12.154B in   5.091184s
         With Freeze      2.390B (± 0.2%) i/s -     12.173B in   5.093604s

Comparison:
         With Freeze: 2389818068.1 i/s
      Without Freeze: 2387337929.7 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     5.049k i/100ms
      String#squeeze    57.902k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     61.320k (± 4.2%) i/s -    307.989k in   5.031917s
      String#squeeze    576.921k (± 2.5%) i/s -      2.895M in   5.021620s

Comparison:
      String#squeeze:   576921.3 i/s
 String#gsub/regex+/:    61319.7 i/s - 9.41x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     2.380M i/100ms
       String#match?     2.701M i/100ms
  String#start_with?     1.616M i/100ms
Calculating -------------------------------------
           String#=~     26.264M (± 2.6%) i/s -    133.290M in   5.078861s
       String#match?     27.786M (± 2.6%) i/s -    140.428M in   5.057412s
  String#start_with?     16.230M (± 3.0%) i/s -     82.429M in   5.083696s

Comparison:
       String#match?: 27786022.5 i/s
           String#=~: 26263898.7 i/s - 1.06x  (± 0.00) slower
  String#start_with?: 16229733.2 i/s - 1.71x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   302.414k i/100ms
    String#[0, n] ==   161.191k i/100ms
   String#[RANGE] ==   164.967k i/100ms
   String#[0...n] ==   126.449k i/100ms
Calculating -------------------------------------
  String#start_with?      3.158M (± 3.3%) i/s -     16.028M in   5.081823s
    String#[0, n] ==      1.644M (± 3.3%) i/s -      8.221M in   5.007574s
   String#[RANGE] ==      1.642M (± 3.5%) i/s -      8.248M in   5.029689s
   String#[0...n] ==      1.274M (± 2.9%) i/s -      6.449M in   5.068475s

Comparison:
  String#start_with?:  3157654.1 i/s
    String#[0, n] ==:  1643593.2 i/s - 1.92x  (± 0.00) slower
   String#[RANGE] ==:  1642080.7 i/s - 1.92x  (± 0.00) slower
   String#[0...n] ==:  1273520.2 i/s - 2.48x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    17.215M i/100ms
 String#sub!'string'   412.510k i/100ms
String#gsub!'string'    92.306k i/100ms
  String#[/regexp/]=     3.832M i/100ms
 String#sub!/regexp/     1.498M i/100ms
String#gsub!/regexp/   412.101k i/100ms
Calculating -------------------------------------
  String#['string']=    172.070M (± 0.9%) i/s -    860.734M in   5.002632s
 String#sub!'string'      4.516M (±15.6%) i/s -     20.626M in   5.007391s
String#gsub!'string'      1.049M (± 2.3%) i/s -      5.261M in   5.020818s
  String#[/regexp/]=     38.318M (± 0.0%) i/s -    191.612M in   5.000576s
 String#sub!/regexp/     14.754M (± 2.5%) i/s -     74.911M in   5.080701s
String#gsub!/regexp/      4.077M (± 5.3%) i/s -     20.605M in   5.067708s

Comparison:
  String#['string']=: 172069708.0 i/s
  String#[/regexp/]=: 38317979.7 i/s - 4.49x  (± 0.00) slower
 String#sub!/regexp/: 14753873.1 i/s - 11.66x  (± 0.00) slower
 String#sub!'string':  4516369.3 i/s - 38.10x  (± 0.00) slower
String#gsub!/regexp/:  4077461.7 i/s - 42.20x  (± 0.00) slower
String#gsub!'string':  1048533.9 i/s - 164.11x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.267M i/100ms
        String#chomp     2.513M i/100ms
String#delete_suffix     5.287M i/100ms
Calculating -------------------------------------
          String#sub     14.809M (± 4.9%) i/s -     74.772M in   5.062215s
        String#chomp     25.497M (± 3.2%) i/s -    128.174M in   5.032337s
String#delete_suffix     52.815M (± 0.6%) i/s -    264.336M in   5.005140s

Comparison:
String#delete_suffix: 52814898.7 i/s
        String#chomp: 25497398.4 i/s - 2.07x  (± 0.00) slower
          String#sub: 14808544.8 i/s - 3.57x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix     1.778M i/100ms
          String#sub     3.447M i/100ms
Calculating -------------------------------------
String#delete_prefix     18.472M (± 2.7%) i/s -     92.465M in   5.009390s
          String#sub     32.815M (± 7.4%) i/s -    165.461M in   5.087827s

Comparison:
          String#sub: 32814976.8 i/s
String#delete_prefix: 18472042.2 i/s - 1.78x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.160M i/100ms
    String#unpack[0]     1.302M i/100ms
Calculating -------------------------------------
      String#unpack1     13.070M (± 3.6%) i/s -     66.103M in   5.064624s
    String#unpack[0]     13.058M (± 3.2%) i/s -     66.425M in   5.092522s

Comparison:
      String#unpack1: 13070124.4 i/s
    String#unpack[0]: 13057581.1 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.1.0-dev-1c888c9e, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    13.067k i/100ms
          Time.parse   174.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    111.212k (±13.3%) i/s -    548.814k in   5.024948s
          Time.parse      3.524k (±21.9%) i/s -     16.182k in   5.032042s

Comparison:
        Time.iso8601:   111211.9 i/s
          Time.parse:     3524.3 i/s - 31.56x  (± 0.00) slower

