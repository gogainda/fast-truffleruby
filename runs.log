$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       238.572M i/100ms
Function with splat arguments
                       635.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          2.385B (± 0.3%) i/s -     11.929B in   5.000654s
Function with splat arguments
                          6.739k (± 5.4%) i/s -     33.655k in   5.009401s

Comparison:
Function with single Array argument: 2385425596.3 i/s
Function with splat arguments:     6739.5 i/s - 353948.91x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   238.230M i/100ms
Sequential Assignment
                       237.884M i/100ms
Calculating -------------------------------------
 Parallel Assignment      2.382B (± 0.5%) i/s -     11.911B in   5.001680s
Sequential Assignment
                          2.387B (± 0.2%) i/s -     12.132B in   5.082448s

Comparison:
Sequential Assignment: 2387067316.4 i/s
 Parallel Assignment: 2381558037.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   238.392M i/100ms
       attr_accessor   238.369M i/100ms
Calculating -------------------------------------
   getter_and_setter      2.382B (± 0.4%) i/s -     11.920B in   5.003105s
       attr_accessor      2.383B (± 0.8%) i/s -     11.918B in   5.000945s

Comparison:
       attr_accessor: 2383387188.5 i/s
   getter_and_setter: 2382474136.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     7.639k i/100ms
         respond_to?   238.360M i/100ms
Calculating -------------------------------------
      begin...rescue     51.464k (± 2.7%) i/s -    259.726k in   5.050438s
         respond_to?      2.387B (± 0.4%) i/s -     12.156B in   5.093616s

Comparison:
         respond_to?: 2386623478.6 i/s
      begin...rescue:    51463.6 i/s - 46375.02x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   237.962M i/100ms
             &method   238.863M i/100ms
Calculating -------------------------------------
              normal      2.384B (± 0.4%) i/s -     12.136B in   5.089654s
             &method      2.388B (± 0.2%) i/s -     11.943B in   5.001222s

Comparison:
             &method: 2388054588.6 i/s
              normal: 2384485032.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       102.000  i/100ms
       define_method   130.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.422k (±43.9%) i/s -      4.794k in   5.074397s
       define_method      3.522k (±61.1%) i/s -      5.070k in   5.363886s

Comparison:
       define_method:     3522.2 i/s
module_eval with string:     1422.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    80.268k i/100ms
       Kernel#format    67.811k i/100ms
            String#%    67.760k i/100ms
Calculating -------------------------------------
         Float#round    806.523k (± 1.9%) i/s -      4.094M in   5.077622s
       Kernel#format    678.447k (± 1.9%) i/s -      3.391M in   4.999411s
            String#%    680.941k (± 1.8%) i/s -      3.456M in   5.076645s

Comparison:
         Float#round:   806522.9 i/s
            String#%:   680941.3 i/s - 1.18x  (± 0.00) slower
       Kernel#format:   678446.8 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   238.238M i/100ms
          OpenStruct   238.500M i/100ms
Calculating -------------------------------------
                Hash      2.386B (± 0.3%) i/s -     12.150B in   5.092974s
          OpenStruct      2.388B (± 0.2%) i/s -     12.164B in   5.093857s

Comparison:
          OpenStruct: 2387888447.6 i/s
                Hash: 2385686442.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   238.589M i/100ms
          OpenStruct     2.636k i/100ms
Calculating -------------------------------------
                Hash      2.382B (± 0.4%) i/s -     11.929B in   5.007242s
          OpenStruct     28.637k (± 9.9%) i/s -    142.344k in   5.053347s

Comparison:
                Hash: 2382473466.9 i/s
          OpenStruct:    28636.6 i/s - 83196.82x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   779.603k i/100ms
  ancestors.include?   140.212k i/100ms
Calculating -------------------------------------
  less than or equal      8.529M (± 3.9%) i/s -     42.878M in   5.035155s
  ancestors.include?      1.426M (± 4.6%) i/s -      7.151M in   5.025387s

Comparison:
  less than or equal:  8529335.9 i/s
  ancestors.include?:  1426138.6 i/s - 5.98x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     23.848  (± 0.0%) i/s -    120.000  in   5.031911s
         Kernel loop     23.877  (± 0.0%) i/s -    120.000  in   5.025870s

Comparison:
         Kernel loop:       23.9 i/s
          While Loop:       23.8 i/s - 1.00x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   238.333M i/100ms
         Array#first   238.443M i/100ms
Calculating -------------------------------------
           Array#[0]      2.383B (± 0.4%) i/s -     11.917B in   5.001281s
         Array#first      2.387B (± 0.2%) i/s -     12.161B in   5.093688s

Comparison:
         Array#first: 2387393818.5 i/s
           Array#[0]: 2382748896.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   238.563M i/100ms
          Array#last   238.153M i/100ms
Calculating -------------------------------------
          Array#[-1]      2.385B (± 0.3%) i/s -     11.928B in   5.000755s
          Array#last      2.389B (± 0.2%) i/s -     12.146B in   5.084971s

Comparison:
          Array#last: 2388580978.1 i/s
          Array#[-1]: 2385294077.4 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   526.587k i/100ms
Calculating -------------------------------------
                find      7.162  (±27.9%) i/s -     17.000  in   5.118104s
             bsearch      5.280M (± 3.7%) i/s -     26.856M in   5.093889s

Comparison:
             bsearch:  5279799.0 i/s
                find:        7.2 i/s - 737235.99x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.119  (± 0.0%) i/s -      1.000  in   8.434460s
        Array#insert      0.945  (± 0.0%) i/s -      5.000  in   5.289907s

Comparison:
        Array#insert:        0.9 i/s
       Array#unshift:        0.1 i/s - 7.97x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   238.180M i/100ms
          Array#size   238.531M i/100ms
         Array#count   239.059M i/100ms
Calculating -------------------------------------
        Array#length      2.386B (± 0.3%) i/s -     12.147B in   5.091734s
          Array#size      2.388B (± 0.2%) i/s -     12.165B in   5.094559s
         Array#count      2.388B (± 0.2%) i/s -     11.953B in   5.005043s

Comparison:
         Array#count: 2388192078.9 i/s
          Array#size: 2387874283.8 i/s - same-ish: difference falls within error
        Array#length: 2385690659.7 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    23.363k i/100ms
        Array#sample     2.568M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    238.060k (± 1.8%) i/s -      1.192M in   5.006773s
        Array#sample     23.891M (± 0.8%) i/s -    120.685M in   5.051756s

Comparison:
        Array#sample: 23891042.2 i/s
 Array#shuffle.first:   238060.3 i/s - 100.36x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   933.000  i/100ms
          Date.parse   113.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     23.513k (±22.7%) i/s -    106.362k in   5.022444s
          Date.parse      8.934k (±36.2%) i/s -     34.804k in   4.991806s

Comparison:
        Date.iso8601:    23513.3 i/s
          Date.parse:     8934.1 i/s - 2.63x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   158.999k i/100ms
           Array#map   588.174k i/100ms
Calculating -------------------------------------
   Array#each + push      1.627M (± 4.0%) i/s -      8.268M in   5.090995s
           Array#map      5.994M (± 6.2%) i/s -     29.997M in   5.023837s

Comparison:
           Array#map:  5994120.8 i/s
   Array#each + push:  1626834.0 i/s - 3.68x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    10.700M i/100ms
               #each    56.444M i/100ms
Calculating -------------------------------------
            For loop    105.905M (± 1.0%) i/s -    534.980M in   5.052002s
               #each    568.794M (± 0.3%) i/s -      2.879B in   5.060995s

Comparison:
               #each: 568794373.0 i/s
            For loop: 105905176.5 i/s - 5.37x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   902.012k i/100ms
     each_with_index     1.280M i/100ms
Calculating -------------------------------------
          While Loop      9.072M (± 0.2%) i/s -     46.003M in   5.071119s
     each_with_index     12.800M (± 0.2%) i/s -     65.257M in   5.098165s

Comparison:
     each_with_index: 12800099.3 i/s
          While Loop:  9071523.2 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   145.973k i/100ms
      inject to_proc   147.420k i/100ms
        inject block   147.414k i/100ms
Calculating -------------------------------------
       inject symbol      1.473M (± 0.2%) i/s -      7.445M in   5.053633s
      inject to_proc      1.474M (± 0.1%) i/s -      7.371M in   5.000910s
        inject block      1.474M (± 0.1%) i/s -      7.371M in   5.001027s

Comparison:
      inject to_proc:  1473933.8 i/s
        inject block:  1473839.9 i/s - same-ish: difference falls within error
       inject symbol:  1473128.5 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     9.813k i/100ms
   Array#map.flatten    11.854k i/100ms
      Array#flat_map    32.346k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    120.633k (± 4.1%) i/s -    608.406k in   5.052548s
   Array#map.flatten    120.113k (± 3.8%) i/s -    604.554k in   5.041169s
      Array#flat_map    324.985k (± 3.3%) i/s -      1.650M in   5.081957s

Comparison:
      Array#flat_map:   324984.5 i/s
Array#map.flatten(1):   120632.8 i/s - 2.69x  (± 0.00) slower
   Array#map.flatten:   120112.7 i/s - 2.71x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   191.771k i/100ms
  Array#reverse_each     1.950M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.938M (± 3.3%) i/s -      9.780M in   5.052687s
  Array#reverse_each     19.486M (± 0.1%) i/s -     97.521M in   5.004637s

Comparison:
  Array#reverse_each: 19486204.1 i/s
  Array#reverse.each:  1937797.7 i/s - 10.06x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       628.597k i/100ms
   Enumerable#detect     3.830M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          6.761M (± 6.3%) i/s -    134.520M in  20.000935s
   Enumerable#detect     38.280M (± 0.2%) i/s -    765.944M in  20.009243s

Comparison:
   Enumerable#detect: 38279654.9 i/s
Enumerable#select.first:  6760959.5 i/s - 5.66x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       201.182k i/100ms
Enumerable#select.last
                       397.768k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.010M (± 2.9%) i/s -     10.059M in   5.008334s
Enumerable#select.last
                          4.028M (± 3.5%) i/s -     20.286M in   5.042474s

Comparison:
Enumerable#select.last:  4028307.0 i/s
Enumerable#reverse.detect:  2010189.0 i/s - 2.00x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.311k i/100ms
  Enumerable#sort_by     1.214k i/100ms
     Enumerable#sort     3.019k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         23.405k (±11.5%) i/s -    115.550k in   5.006769s
  Enumerable#sort_by     22.701k (±15.0%) i/s -    111.688k in   5.037111s
     Enumerable#sort     32.213k (± 0.7%) i/s -    163.026k in   5.061190s

Comparison:
     Enumerable#sort:    32212.6 i/s
Enumerable#sort_by (Symbol#to_proc):    23405.2 i/s - 1.38x  (± 0.00) slower
  Enumerable#sort_by:    22701.3 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   461.389k i/100ms
Enumerable#sort_by...first
                         4.866k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      4.651M (± 0.6%) i/s -     23.531M in   5.059376s
Enumerable#sort_by...first
                         64.356k (± 3.4%) i/s -    326.022k in   5.072175s

Comparison:
   Enumerable#min_by:  4651099.6 i/s
Enumerable#sort_by...first:    64356.0 i/s - 72.27x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   198.519k i/100ms
            Hash#dup   233.304k i/100ms
Calculating -------------------------------------
              Hash[]      2.353M (± 4.6%) i/s -     11.911M in   5.074640s
            Hash#dup      2.346M (± 3.8%) i/s -     11.899M in   5.079399s

Comparison:
              Hash[]:  2352585.3 i/s
            Hash#dup:  2346124.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   238.519M i/100ms
  Hash#fetch, symbol   238.018M i/100ms
     Hash#[], string    10.594M i/100ms
  Hash#fetch, string     2.784M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      2.387B (± 0.2%) i/s -     12.164B in   5.095754s
  Hash#fetch, symbol      2.388B (± 0.2%) i/s -     12.139B in   5.083723s
     Hash#[], string    134.921M (± 0.4%) i/s -    677.993M in   5.025218s
  Hash#fetch, string    128.453M (± 0.7%) i/s -    643.203M in   5.007512s

Comparison:
  Hash#fetch, symbol: 2387808155.5 i/s
     Hash#[], symbol: 2387191262.3 i/s - same-ish: difference falls within error
     Hash#[], string: 134920793.5 i/s - 17.70x  (± 0.00) slower
  Hash#fetch, string: 128453206.6 i/s - 18.59x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    59.611M i/100ms
             Hash#[]    59.640M i/100ms
          Hash#[] ||    59.605M i/100ms
          Hash#[] &&    59.722M i/100ms
          Hash#fetch    59.721M i/100ms
 Hash#fetch fallback    59.718M i/100ms
Calculating -------------------------------------
            Hash#dig    596.562M (± 0.3%) i/s -      3.040B in   5.096179s
             Hash#[]    597.047M (± 0.2%) i/s -      3.042B in   5.094497s
          Hash#[] ||    596.881M (± 0.2%) i/s -      3.040B in   5.092943s
          Hash#[] &&    597.020M (± 0.2%) i/s -      2.986B in   5.001707s
          Hash#fetch    597.064M (± 0.1%) i/s -      2.986B in   5.001226s
 Hash#fetch fallback    596.582M (± 0.3%) i/s -      2.986B in   5.005090s

Comparison:
          Hash#fetch: 597063671.3 i/s
             Hash#[]: 597047496.7 i/s - same-ish: difference falls within error
          Hash#[] &&: 597019799.9 i/s - same-ish: difference falls within error
          Hash#[] ||: 596881436.7 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 596581717.3 i/s - same-ish: difference falls within error
            Hash#dig: 596562319.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   238.405M i/100ms
  Hash#fetch + block   238.292M i/100ms
    Hash#fetch + arg   238.984M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      2.382B (± 0.7%) i/s -     11.920B in   5.003942s
  Hash#fetch + block      2.387B (± 0.3%) i/s -     12.153B in   5.092164s
    Hash#fetch + arg      2.386B (± 0.5%) i/s -     11.949B in   5.007733s

Comparison:
  Hash#fetch + block: 2386606339.9 i/s
    Hash#fetch + arg: 2386209082.3 i/s - same-ish: difference falls within error
  Hash#fetch + const: 2382280510.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    17.995k i/100ms
         sort + to_h     6.120k i/100ms
Calculating -------------------------------------
      sort_by + to_h    232.871k (±10.5%) i/s -      1.152M in   5.005061s
         sort + to_h    142.550k (± 5.5%) i/s -    709.920k in   4.997539s

Comparison:
      sort_by + to_h:   232870.9 i/s
         sort + to_h:   142549.8 i/s - 1.63x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   133.065k i/100ms
       Hash#each_key   151.790k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.450M (± 9.9%) i/s -      7.186M in   5.054966s
       Hash#each_key      1.543M (± 3.0%) i/s -      7.741M in   5.020348s

Comparison:
       Hash#each_key:  1543469.6 i/s
      Hash#keys.each:  1450125.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   164.000  i/100ms
           Hash#key?    11.944M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.861k (±12.3%) i/s -      9.184k in   5.051026s
           Hash#key?    119.419M (± 0.1%) i/s -    597.186M in   5.000791s

Comparison:
           Hash#key?: 119418596.0 i/s
  Hash#keys.include?:     1860.8 i/s - 64174.31x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    22.842k i/100ms
            Hash#[]=    27.343k i/100ms
Calculating -------------------------------------
         Hash#merge!    244.540k (± 9.5%) i/s -      1.211M in   5.051002s
            Hash#[]=    274.760k (± 3.5%) i/s -      1.394M in   5.081913s

Comparison:
            Hash#[]=:   274759.8 i/s
         Hash#merge!:   244540.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        10.829k i/100ms
      Hash#merge({})     8.506k i/100ms
 Hash#dup#merge!({})    14.126k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        129.510k (± 4.6%) i/s -    649.740k in   5.028714s
      Hash#merge({})     86.466k (± 4.3%) i/s -    433.806k in   5.027238s
 Hash#dup#merge!({})    143.226k (± 2.2%) i/s -    720.426k in   5.032515s

Comparison:
 Hash#dup#merge!({}):   143226.4 i/s
{}#merge!(Hash) do end:   129509.7 i/s - 1.11x  (± 0.00) slower
      Hash#merge({}):    86466.3 i/s - 1.66x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   236.607M i/100ms
          Hash#merge   238.987M i/100ms
Calculating -------------------------------------
        Hash#**other      2.386B (± 0.3%) i/s -     12.067B in   5.057972s
          Hash#merge      2.387B (± 0.2%) i/s -     11.949B in   5.005241s

Comparison:
          Hash#merge: 2387376710.3 i/s
        Hash#**other: 2385753632.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   322.000  i/100ms
         Hash#merge!    25.415k i/100ms
Calculating -------------------------------------
          Hash#merge      3.522k (± 4.2%) i/s -     17.710k in   5.038243s
         Hash#merge!    253.776k (± 5.1%) i/s -      1.271M in   5.021508s

Comparison:
         Hash#merge!:   253776.2 i/s
          Hash#merge:     3521.8 i/s - 72.06x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.108M i/100ms
Array#each               1.012M i/100ms
Array#each_w/_object     1.023M i/100ms
Hash#select-include      1.468M i/100ms
Calculating -------------------------------------
Hash#native-slice        12.179M (± 3.6%) i/s -     60.934M in   5.010348s
Array#each               10.306M (± 3.0%) i/s -     51.637M in   5.015051s
Array#each_w/_object     10.265M (± 2.8%) i/s -     52.168M in   5.086496s
Hash#select-include      14.618M (± 2.8%) i/s -     73.381M in   5.024030s

Comparison:
Hash#select-include : 14617992.6 i/s
Hash#native-slice   : 12178954.2 i/s - 1.20x  (± 0.00) slower
Array#each          : 10306498.2 i/s - 1.42x  (± 0.00) slower
Array#each_w/_object: 10264637.8 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   196.000  i/100ms
         Hash#value?   414.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.984k (± 7.5%) i/s -      9.996k in   5.073178s
         Hash#value?      4.143k (± 0.3%) i/s -     21.114k in   5.095873s

Comparison:
         Hash#value?:     4143.4 i/s
Hash#values.include?:     1983.8 i/s - 2.09x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   238.348M i/100ms
                send   238.711M i/100ms
      method_missing   238.749M i/100ms
Calculating -------------------------------------
                call      2.387B (± 0.3%) i/s -     12.156B in   5.093415s
                send      2.385B (± 0.7%) i/s -     11.936B in   5.003981s
      method_missing      2.388B (± 0.2%) i/s -     12.176B in   5.098602s

Comparison:
      method_missing: 2388161962.9 i/s
                call: 2386588077.7 i/s - same-ish: difference falls within error
                send: 2385329632.6 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    14.265k i/100ms
      Symbol#to_proc    16.121k i/100ms
Calculating -------------------------------------
               Block    162.632k (± 4.1%) i/s -    813.105k in   5.008363s
      Symbol#to_proc    163.161k (± 3.8%) i/s -    822.171k in   5.046915s

Comparison:
      Symbol#to_proc:   163160.6 i/s
               Block:   162631.5 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   238.545M i/100ms
       block + yield   238.316M i/100ms
        unused block   238.899M i/100ms
               yield   239.032M i/100ms
Calculating -------------------------------------
          block.call      2.387B (± 0.2%) i/s -     12.166B in   5.095672s
       block + yield      2.388B (± 0.3%) i/s -     12.154B in   5.090563s
        unused block      2.388B (± 0.2%) i/s -     11.945B in   5.002217s
               yield      2.389B (± 0.2%) i/s -     11.952B in   5.003765s

Comparison:
               yield: 2388534007.3 i/s
        unused block: 2387947424.8 i/s - same-ish: difference falls within error
       block + yield: 2387591256.5 i/s - same-ish: difference falls within error
          block.call: 2387486823.2 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    20.984k i/100ms
      range#include?   265.000  i/100ms
       range#member?   471.000  i/100ms
       plain compare    17.583k i/100ms
Calculating -------------------------------------
        range#cover?     76.868k (±38.5%) i/s -    335.744k in   5.146691s
      range#include?      5.509k (±25.5%) i/s -     24.910k in   4.999932s
       range#member?      5.139k (±21.7%) i/s -     24.963k in   5.170714s
       plain compare    170.504k (±12.7%) i/s -    843.984k in   5.034352s

Comparison:
       plain compare:   170504.1 i/s
        range#cover?:    76868.3 i/s - 2.22x  (± 0.00) slower
      range#include?:     5508.7 i/s - 30.95x  (± 0.00) slower
       range#member?:     5138.9 i/s - 33.18x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    10.211M i/100ms
           String#=~    11.061M i/100ms
          Regexp#===    11.062M i/100ms
        String#match     6.635M i/100ms
Calculating -------------------------------------
       String#match?    102.908M (± 0.2%) i/s -    520.757M in   5.060425s
           String#=~    110.592M (± 0.1%) i/s -    553.040M in   5.000757s
          Regexp#===    110.585M (± 0.1%) i/s -    553.081M in   5.001423s
        String#match     66.347M (± 0.2%) i/s -    331.742M in   5.000158s

Comparison:
           String#=~: 110591507.9 i/s
          Regexp#===: 110584842.6 i/s - same-ish: difference falls within error
       String#match?: 102908241.6 i/s - 1.07x  (± 0.00) slower
        String#match: 66346537.9 i/s - 1.67x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.521M i/100ms
      String#casecmp     2.812M i/100ms
Calculating -------------------------------------
String#downcase + ==     16.646M (± 4.3%) i/s -     83.640M in   5.034206s
      String#casecmp     27.343M (± 3.6%) i/s -    137.799M in   5.046577s

Comparison:
      String#casecmp: 27343158.9 i/s
String#downcase + ==: 16646423.7 i/s - 1.64x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     7.518M i/100ms
       String#concat     7.607M i/100ms
       String#append     7.734M i/100ms
         "foo" "bar"   238.851M i/100ms
  "#{'foo'}#{'bar'}"   238.911M i/100ms
Calculating -------------------------------------
            String#+     79.562M (± 4.3%) i/s -    398.454M in   5.018113s
       String#concat     79.707M (± 3.9%) i/s -    403.196M in   5.066982s
       String#append     79.399M (± 3.8%) i/s -    402.158M in   5.073216s
         "foo" "bar"      2.388B (± 0.2%) i/s -     11.943B in   5.001682s
  "#{'foo'}#{'bar'}"      2.388B (± 0.2%) i/s -     11.946B in   5.002909s

Comparison:
  "#{'foo'}#{'bar'}": 2387725214.1 i/s
         "foo" "bar": 2387717136.0 i/s - same-ish: difference falls within error
       String#concat: 79707391.0 i/s - 29.96x  (± 0.00) slower
            String#+: 79561785.4 i/s - 30.01x  (± 0.00) slower
       String#append: 79398823.8 i/s - 30.07x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   238.520M i/100ms
          String#dup   238.604M i/100ms
Calculating -------------------------------------
           String#+@      2.384B (± 0.5%) i/s -     11.926B in   5.003020s
          String#dup      2.387B (± 0.2%) i/s -     12.169B in   5.097255s

Comparison:
          String#dup: 2387334041.8 i/s
           String#+@: 2383816478.5 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.054M i/100ms
       String#match?     1.499M i/100ms
    String#end_with?     8.037M i/100ms
Calculating -------------------------------------
           String#=~     11.524M (± 3.0%) i/s -     57.998M in   5.037447s
       String#match?     14.995M (± 0.1%) i/s -     76.463M in   5.099284s
    String#end_with?     80.292M (± 0.3%) i/s -    401.851M in   5.004912s

Comparison:
    String#end_with?: 80291851.6 i/s
       String#match?: 14994804.2 i/s - 5.35x  (± 0.00) slower
           String#=~: 11524171.8 i/s - 6.97x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   127.816k i/100ms
          String#sub   328.663k i/100ms
String#dup["string"]=
                        10.297M i/100ms
Calculating -------------------------------------
         String#gsub      3.934M (± 9.8%) i/s -     19.428M in   5.001578s
          String#sub      5.116M (± 9.0%) i/s -     25.636M in   5.059031s
String#dup["string"]=
                        102.979M (± 0.1%) i/s -    525.126M in   5.099354s

Comparison:
String#dup["string"]=: 102978976.7 i/s
          String#sub:  5115574.6 i/s - 20.13x  (± 0.00) slower
         String#gsub:  3934462.6 i/s - 26.17x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   115.060k i/100ms
           String#tr    91.088k i/100ms
Calculating -------------------------------------
         String#gsub      2.059M (± 7.3%) i/s -     10.355M in   5.060256s
           String#tr    916.578k (± 3.7%) i/s -      4.645M in   5.075555s

Comparison:
         String#gsub:  2058590.6 i/s
           String#tr:   916578.4 i/s - 2.25x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   238.503M i/100ms
         With Freeze   238.126M i/100ms
Calculating -------------------------------------
      Without Freeze      2.383B (± 0.4%) i/s -     11.925B in   5.004021s
         With Freeze      2.385B (± 0.4%) i/s -     12.144B in   5.091295s

Comparison:
         With Freeze: 2385367217.7 i/s
      Without Freeze: 2383148919.1 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     4.700k i/100ms
      String#squeeze    27.818k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     61.250k (± 4.5%) i/s -    305.500k in   4.998642s
      String#squeeze    278.302k (± 2.2%) i/s -      1.391M in   5.000505s

Comparison:
      String#squeeze:   278302.3 i/s
 String#gsub/regex+/:    61249.8 i/s - 4.54x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     2.325M i/100ms
       String#match?     3.884M i/100ms
  String#start_with?    14.896M i/100ms
Calculating -------------------------------------
           String#=~     24.138M (± 2.9%) i/s -    120.902M in   5.013288s
       String#match?     38.694M (± 0.5%) i/s -    194.198M in   5.018875s
  String#start_with?    149.178M (± 0.3%) i/s -    759.688M in   5.092519s

Comparison:
  String#start_with?: 149178491.2 i/s
       String#match?: 38694446.0 i/s - 3.86x  (± 0.00) slower
           String#=~: 24137792.3 i/s - 6.18x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    89.745k i/100ms
    String#[0, n] ==   163.323k i/100ms
   String#[RANGE] ==   158.833k i/100ms
   String#[0...n] ==   122.942k i/100ms
Calculating -------------------------------------
  String#start_with?      4.139M (± 0.1%) i/s -     20.731M in   5.008954s
    String#[0, n] ==      1.646M (± 3.8%) i/s -      8.329M in   5.069414s
   String#[RANGE] ==      1.604M (± 4.0%) i/s -      8.100M in   5.058389s
   String#[0...n] ==      1.232M (± 3.5%) i/s -      6.270M in   5.096086s

Comparison:
  String#start_with?:  4138811.0 i/s
    String#[0, n] ==:  1645657.3 i/s - 2.51x  (± 0.00) slower
   String#[RANGE] ==:  1604151.5 i/s - 2.58x  (± 0.00) slower
   String#[0...n] ==:  1231995.5 i/s - 3.36x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    10.287M i/100ms
 String#sub!'string'   380.579k i/100ms
String#gsub!'string'   367.146k i/100ms
  String#[/regexp/]=     1.212M i/100ms
 String#sub!/regexp/     1.520M i/100ms
String#gsub!/regexp/   386.271k i/100ms
Calculating -------------------------------------
  String#['string']=    102.951M (± 0.1%) i/s -    524.662M in   5.096208s
 String#sub!'string'      5.528M (±14.2%) i/s -     25.879M in   5.051819s
String#gsub!'string'      3.869M (± 3.6%) i/s -     19.459M in   5.036502s
  String#[/regexp/]=     12.322M (± 3.1%) i/s -     61.802M in   5.020751s
 String#sub!/regexp/     15.272M (± 2.3%) i/s -     77.506M in   5.077714s
String#gsub!/regexp/      4.279M (± 4.9%) i/s -     21.631M in   5.068708s

Comparison:
  String#['string']=: 102951408.2 i/s
 String#sub!/regexp/: 15272346.9 i/s - 6.74x  (± 0.00) slower
  String#[/regexp/]=: 12321885.6 i/s - 8.36x  (± 0.00) slower
 String#sub!'string':  5527926.6 i/s - 18.62x  (± 0.00) slower
String#gsub!/regexp/:  4278644.5 i/s - 24.06x  (± 0.00) slower
String#gsub!'string':  3869021.1 i/s - 26.61x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.745M i/100ms
        String#chomp     3.764M i/100ms
String#delete_suffix     4.607M i/100ms
Calculating -------------------------------------
          String#sub     17.575M (± 3.7%) i/s -     89.004M in   5.071940s
        String#chomp     37.748M (± 0.8%) i/s -    191.964M in   5.085774s
String#delete_suffix     46.693M (± 3.5%) i/s -    234.950M in   5.038089s

Comparison:
String#delete_suffix: 46692956.2 i/s
        String#chomp: 37747904.4 i/s - 1.24x  (± 0.00) slower
          String#sub: 17574669.1 i/s - 2.66x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   238.008M i/100ms
          String#sub    11.060M i/100ms
Calculating -------------------------------------
String#delete_prefix      2.385B (± 0.3%) i/s -     12.138B in   5.089576s
          String#sub    110.275M (± 1.1%) i/s -    552.992M in   5.015317s

Comparison:
String#delete_prefix: 2384981211.1 i/s
          String#sub: 110274787.2 i/s - 21.63x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.157M i/100ms
    String#unpack[0]     1.208M i/100ms
Calculating -------------------------------------
      String#unpack1     12.120M (± 4.1%) i/s -     61.308M in   5.067551s
    String#unpack[0]     11.922M (± 5.3%) i/s -     60.419M in   5.084850s

Comparison:
      String#unpack1: 12120001.5 i/s
    String#unpack[0]: 11921690.7 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.3.0-dev-76cfbe8d, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    20.274k i/100ms
          Time.parse   193.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    197.097k (±33.8%) i/s -    871.782k in   5.048472s
          Time.parse      5.678k (±23.5%) i/s -     25.090k in   5.042627s

Comparison:
        Time.iso8601:   197096.9 i/s
          Time.parse:     5678.2 i/s - 34.71x  (± 0.00) slower

