$ ruby -v code/general/assignment.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   197.611M i/100ms
Sequential Assignment
                       195.893M i/100ms
Calculating -------------------------------------
 Parallel Assignment      2.021B (± 4.9%) i/s -     10.078B in   4.999846s
Sequential Assignment
                          2.053B (± 4.6%) i/s -     10.382B in   5.068040s

Comparison:
Sequential Assignment: 2053096828.3 i/s
 Parallel Assignment: 2020818229.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    28.525k i/100ms
       Kernel#format    45.590k i/100ms
            String#%    43.843k i/100ms
Calculating -------------------------------------
         Float#round    265.028k (± 7.4%) i/s -      1.341M in   5.087368s
       Kernel#format    410.888k (± 5.7%) i/s -      2.052M in   5.010152s
            String#%    428.647k (± 6.1%) i/s -      2.148M in   5.031581s

Comparison:
            String#%:   428646.9 i/s
       Kernel#format:   410887.6 i/s - same-ish: difference falls within error
         Float#round:   265028.0 i/s - 1.62x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   697.514k i/100ms
  ancestors.include?   109.584k i/100ms
Calculating -------------------------------------
  less than or equal      8.245M (± 6.3%) i/s -     41.153M in   5.011518s
  ancestors.include?      1.125M (± 6.8%) i/s -      5.698M in   5.090263s

Comparison:
  less than or equal:  8244920.8 i/s
  ancestors.include?:  1124843.2 i/s - 7.33x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   201.957M i/100ms
             &method   214.334M i/100ms
Calculating -------------------------------------
              normal      1.999B (± 4.7%) i/s -     10.098B in   5.063786s
             &method      1.988B (± 3.7%) i/s -     10.074B in   5.073515s

Comparison:
              normal: 1998587795.7 i/s
             &method: 1988315754.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       103.000  i/100ms
       define_method   116.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.649k (±54.1%) i/s -      3.811k in   5.003664s
       define_method      5.376k (±52.8%) i/s -      6.960k in   5.084106s

Comparison:
       define_method:     5375.5 i/s
module_eval with string:     1649.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   215.711M i/100ms
          OpenStruct     2.326k i/100ms
Calculating -------------------------------------
                Hash      2.056B (± 5.8%) i/s -     10.354B in   5.052505s
          OpenStruct     18.821k (±10.3%) i/s -     93.040k in   5.011703s

Comparison:
                Hash: 2056377558.0 i/s
          OpenStruct:    18821.3 i/s - 109258.09x  (± 0.00) slower

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     8.928k i/100ms
         respond_to?   202.984M i/100ms
Calculating -------------------------------------
      begin...rescue     62.644k (± 8.2%) i/s -    312.480k in   5.022290s
         respond_to?      1.838B (± 5.1%) i/s -      9.337B in   5.094380s

Comparison:
         respond_to?: 1837828861.4 i/s
      begin...rescue:    62643.5 i/s - 29337.89x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   180.003M i/100ms
       attr_accessor   190.840M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.907B (± 6.3%) i/s -      9.540B in   5.023652s
       attr_accessor      1.898B (± 3.5%) i/s -      9.542B in   5.033832s

Comparison:
   getter_and_setter: 1906545530.2 i/s
       attr_accessor: 1898095622.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     19.131  (± 5.2%) i/s -     96.000  in   5.034197s
         Kernel loop      0.399  (± 0.0%) i/s -      2.000  in   5.013308s

Comparison:
          While Loop:       19.1 i/s
         Kernel loop:        0.4 i/s - 47.93x  (± 0.00) slower

$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       189.321M i/100ms
Function with splat arguments
                       557.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.806B (± 5.1%) i/s -      9.087B in   5.044298s
Function with splat arguments
                          6.270k (± 7.9%) i/s -     31.749k in   5.098771s

Comparison:
Function with single Array argument: 1806398483.5 i/s
Function with splat arguments:     6269.6 i/s - 288121.29x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   179.854M i/100ms
          OpenStruct   153.807M i/100ms
Calculating -------------------------------------
                Hash      1.827B (± 5.7%) i/s -      9.173B in   5.036164s
          OpenStruct      1.587B (± 4.2%) i/s -      7.998B in   5.049219s

Comparison:
                Hash: 1827397167.8 i/s
          OpenStruct: 1586970136.9 i/s - 1.15x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   212.000  i/100ms
          Date.parse   140.000  i/100ms
Calculating -------------------------------------
        Date.iso8601      8.694k (±45.2%) i/s -     33.072k in   4.994651s
          Date.parse      4.089k (±33.9%) i/s -     17.500k in   5.000539s

Comparison:
        Date.iso8601:     8694.4 i/s
          Date.parse:     4089.3 i/s - same-ish: difference falls within error

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   191.990M i/100ms
         With Freeze   199.895M i/100ms
Calculating -------------------------------------
      Without Freeze      2.005B (± 3.6%) i/s -     10.175B in   5.082485s
         With Freeze      2.034B (± 3.7%) i/s -     10.195B in   5.019391s

Comparison:
         With Freeze: 2033868898.4 i/s
      Without Freeze: 2004653331.4 i/s - same-ish: difference falls within error

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    47.735k i/100ms
           String#tr   131.886k i/100ms
Calculating -------------------------------------
         String#gsub      2.152M (±11.5%) i/s -     10.597M in   5.011353s
           String#tr      1.338M (± 4.4%) i/s -      6.726M in   5.035851s

Comparison:
         String#gsub:  2152368.8 i/s
           String#tr:  1338338.1 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.244M i/100ms
    String#unpack[0]     1.372M i/100ms
Calculating -------------------------------------
      String#unpack1     13.280M (± 6.1%) i/s -     67.165M in   5.077554s
    String#unpack[0]     13.288M (± 5.0%) i/s -     67.212M in   5.071456s

Comparison:
    String#unpack[0]: 13287785.5 i/s
      String#unpack1: 13279664.4 i/s - same-ish: difference falls within error

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.414M i/100ms
      String#casecmp     2.924M i/100ms
Calculating -------------------------------------
String#downcase + ==     15.763M (± 6.4%) i/s -     79.208M in   5.046318s
      String#casecmp     28.310M (± 2.4%) i/s -    143.256M in   5.063075s

Comparison:
      String#casecmp: 28310478.4 i/s
String#downcase + ==: 15763041.8 i/s - 1.80x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub   129.093k i/100ms
        String#chomp     4.005M i/100ms
String#delete_suffix     5.858M i/100ms
Calculating -------------------------------------
          String#sub      5.409M (±13.0%) i/s -     26.335M in   5.004610s
        String#chomp     42.085M (± 7.0%) i/s -    212.273M in   5.071145s
String#delete_suffix     59.468M (± 3.0%) i/s -    298.776M in   5.028654s

Comparison:
String#delete_suffix: 59467930.2 i/s
        String#chomp: 42084961.2 i/s - 1.41x  (± 0.00) slower
          String#sub:  5408571.7 i/s - 11.00x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    49.293k i/100ms
          String#sub   532.546k i/100ms
String#dup["string"]=
                        13.617M i/100ms
Calculating -------------------------------------
         String#gsub      1.064M (± 6.0%) i/s -      5.324M in   5.024295s
          String#sub      5.799M (± 9.2%) i/s -     28.757M in   5.004640s
String#dup["string"]=
                        135.994M (± 4.8%) i/s -    680.842M in   5.018133s

Comparison:
String#dup["string"]=: 135993816.1 i/s
          String#sub:  5798755.8 i/s - 23.45x  (± 0.00) slower
         String#gsub:  1064025.1 i/s - 127.81x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+   177.076M i/100ms
       String#concat   182.198M i/100ms
       String#append   185.656M i/100ms
         "foo" "bar"   186.553M i/100ms
  "#{'foo'}#{'bar'}"   196.288M i/100ms
Calculating -------------------------------------
            String#+      1.891B (± 3.5%) i/s -      9.562B in   5.064041s
       String#concat      1.905B (± 2.8%) i/s -      9.657B in   5.072394s
       String#append      1.926B (± 4.5%) i/s -      9.654B in   5.022066s
         "foo" "bar"      1.923B (± 4.4%) i/s -      9.701B in   5.055574s
  "#{'foo'}#{'bar'}"      1.948B (± 4.7%) i/s -      9.814B in   5.049989s

Comparison:
  "#{'foo'}#{'bar'}": 1947960141.7 i/s
       String#append: 1926419379.8 i/s - same-ish: difference falls within error
         "foo" "bar": 1922567550.8 i/s - same-ish: difference falls within error
       String#concat: 1905205986.0 i/s - same-ish: difference falls within error
            String#+: 1890645602.8 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   530.015k i/100ms
       String#match?     1.286M i/100ms
    String#end_with?    14.956M i/100ms
Calculating -------------------------------------
           String#=~      6.256M (± 7.2%) i/s -     31.271M in   5.026430s
       String#match?     12.978M (± 5.6%) i/s -     65.593M in   5.071467s
    String#end_with?    147.369M (± 5.0%) i/s -    747.796M in   5.087443s

Comparison:
    String#end_with?: 147368807.3 i/s
       String#match?: 12977503.3 i/s - 11.36x  (± 0.00) slower
           String#=~:  6255625.1 i/s - 23.56x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   194.357M i/100ms
          String#dup   178.184M i/100ms
Calculating -------------------------------------
           String#+@      1.934B (± 3.6%) i/s -      9.718B in   5.032324s
          String#dup      1.974B (± 3.5%) i/s -      9.978B in   5.060155s

Comparison:
          String#dup: 1974382164.6 i/s
           String#+@: 1933675164.3 i/s - same-ish: difference falls within error

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   862.235k i/100ms
       String#match?     2.226M i/100ms
  String#start_with?     2.100M i/100ms
Calculating -------------------------------------
           String#=~      8.772M (± 8.4%) i/s -     43.974M in   5.053043s
       String#match?     22.022M (± 6.5%) i/s -    111.280M in   5.075706s
  String#start_with?     20.704M (± 6.3%) i/s -    104.990M in   5.092991s

Comparison:
       String#match?: 22021902.7 i/s
  String#start_with?: 20703716.2 i/s - same-ish: difference falls within error
           String#=~:  8771653.1 i/s - 2.51x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   312.130k i/100ms
    String#[0, n] ==   194.131k i/100ms
   String#[RANGE] ==   212.027k i/100ms
   String#[0...n] ==   162.129k i/100ms
Calculating -------------------------------------
  String#start_with?      3.316M (± 5.5%) i/s -     16.543M in   5.004456s
    String#[0, n] ==      1.973M (± 5.2%) i/s -      9.901M in   5.032519s
   String#[RANGE] ==      2.150M (± 6.9%) i/s -     10.813M in   5.055390s
   String#[0...n] ==      1.651M (± 5.5%) i/s -      8.269M in   5.023986s

Comparison:
  String#start_with?:  3316327.9 i/s
   String#[RANGE] ==:  2149616.0 i/s - 1.54x  (± 0.00) slower
    String#[0, n] ==:  1972918.3 i/s - 1.68x  (± 0.00) slower
   String#[0...n] ==:  1651150.7 i/s - 2.01x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix     1.917M i/100ms
          String#sub   608.243k i/100ms
Calculating -------------------------------------
String#delete_prefix     24.111M (± 9.2%) i/s -    120.794M in   5.058253s
          String#sub      5.982M (± 9.8%) i/s -     29.804M in   5.033115s

Comparison:
String#delete_prefix: 24111408.6 i/s
          String#sub:  5982465.7 i/s - 4.03x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    14.075M i/100ms
 String#sub!'string'   576.381k i/100ms
String#gsub!'string'   120.690k i/100ms
  String#[/regexp/]=   732.833k i/100ms
 String#sub!/regexp/   583.805k i/100ms
String#gsub!/regexp/   351.979k i/100ms
Calculating -------------------------------------
  String#['string']=    142.245M (± 3.1%) i/s -    717.830M in   5.051129s
 String#sub!'string'      6.996M (± 5.3%) i/s -     35.159M in   5.040819s
String#gsub!'string'      1.210M (± 4.7%) i/s -      6.035M in   5.000458s
  String#[/regexp/]=      7.947M (± 3.4%) i/s -     40.306M in   5.077484s
 String#sub!/regexp/      5.842M (± 4.1%) i/s -     29.190M in   5.004857s
String#gsub!/regexp/      3.926M (± 3.9%) i/s -     19.711M in   5.028203s

Comparison:
  String#['string']=: 142244967.2 i/s
  String#[/regexp/]=:  7947397.5 i/s - 17.90x  (± 0.00) slower
 String#sub!'string':  6995928.7 i/s - 20.33x  (± 0.00) slower
 String#sub!/regexp/:  5842300.9 i/s - 24.35x  (± 0.00) slower
String#gsub!/regexp/:  3926086.0 i/s - 36.23x  (± 0.00) slower
String#gsub!'string':  1209518.5 i/s - 117.60x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     2.640M i/100ms
           String#=~     2.618M i/100ms
          Regexp#===     2.645M i/100ms
        String#match     2.393M i/100ms
Calculating -------------------------------------
       String#match?     28.636M (± 5.5%) i/s -    145.187M in   5.086520s
           String#=~     25.589M (± 5.8%) i/s -    128.289M in   5.031146s
          Regexp#===     26.244M (± 5.4%) i/s -    132.265M in   5.055472s
        String#match     24.604M (± 5.4%) i/s -    124.451M in   5.073837s

Comparison:
       String#match?: 28636051.4 i/s
          Regexp#===: 26243889.2 i/s - same-ish: difference falls within error
           String#=~: 25589455.8 i/s - same-ish: difference falls within error
        String#match: 24604322.8 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     4.289k i/100ms
      String#squeeze    52.499k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     80.570k (±10.5%) i/s -    398.877k in   5.015137s
      String#squeeze    512.345k (± 5.2%) i/s -      2.572M in   5.035658s

Comparison:
      String#squeeze:   512345.4 i/s
 String#gsub/regex+/:    80570.3 i/s - 6.36x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    15.837k i/100ms
      range#include?   143.000  i/100ms
       range#member?   149.000  i/100ms
       plain compare    24.930k i/100ms
Calculating -------------------------------------
        range#cover?     98.047k (±40.4%) i/s -    427.599k in   5.002951s
      range#include?      3.587k (±49.3%) i/s -     12.870k in   4.971461s
       range#member?      3.225k (±46.6%) i/s -      9.685k in   5.025229s
       plain compare    229.213k (±25.4%) i/s -      1.072M in   4.987938s

Comparison:
       plain compare:   229212.8 i/s
        range#cover?:    98046.5 i/s - 2.34x  (± 0.00) slower
      range#include?:     3586.6 i/s - 63.91x  (± 0.00) slower
       range#member?:     3224.5 i/s - 71.08x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    10.526k i/100ms
          Time.parse    42.000  i/100ms
Calculating -------------------------------------
        Time.iso8601     42.096k (± 2.3%) i/s -    210.520k in   5.003663s
          Time.parse      2.976k (±22.9%) i/s -     12.810k in   4.996312s

Comparison:
        Time.iso8601:    42096.0 i/s
          Time.parse:     2975.7 i/s - 14.15x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each    95.289k i/100ms
       Hash#each_key   125.109k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.163M (± 6.3%) i/s -      5.813M in   5.018597s
       Hash#each_key      1.281M (± 5.8%) i/s -      6.381M in   4.999308s

Comparison:
       Hash#each_key:  1280774.6 i/s
      Hash#keys.each:  1162999.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    72.720M i/100ms
             Hash#[]    74.831M i/100ms
          Hash#[] ||    73.844M i/100ms
          Hash#[] &&    74.587M i/100ms
          Hash#fetch    74.998M i/100ms
 Hash#fetch fallback    73.386M i/100ms
Calculating -------------------------------------
            Hash#dig    731.809M (± 3.6%) i/s -      3.709B in   5.074778s
             Hash#[]    751.953M (± 4.0%) i/s -      3.816B in   5.083403s
          Hash#[] ||    726.295M (± 3.3%) i/s -      3.692B in   5.089119s
          Hash#[] &&    716.099M (± 2.5%) i/s -      3.580B in   5.002734s
          Hash#fetch    721.085M (± 4.2%) i/s -      3.600B in   5.001351s
 Hash#fetch fallback    721.588M (± 3.7%) i/s -      3.669B in   5.092335s

Comparison:
             Hash#[]: 751953393.9 i/s
            Hash#dig: 731809000.5 i/s - same-ish: difference falls within error
          Hash#[] ||: 726295291.1 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 721588037.0 i/s - same-ish: difference falls within error
          Hash#fetch: 721084970.2 i/s - same-ish: difference falls within error
          Hash#[] &&: 716099378.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   515.000  i/100ms
         Hash#merge!    28.712k i/100ms
Calculating -------------------------------------
          Hash#merge      6.112k (± 9.1%) i/s -     30.385k in   5.016645s
         Hash#merge!    312.578k (± 6.4%) i/s -      1.579M in   5.074607s

Comparison:
         Hash#merge!:   312577.7 i/s
          Hash#merge:     6112.5 i/s - 51.14x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    14.073k i/100ms
         sort + to_h     8.345k i/100ms
Calculating -------------------------------------
      sort_by + to_h    297.269k (±10.7%) i/s -      1.478M in   5.035412s
         sort + to_h    139.076k (± 7.7%) i/s -    692.635k in   5.013713s

Comparison:
      sort_by + to_h:   297269.2 i/s
         sort + to_h:   139075.6 i/s - 2.14x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   183.053M i/100ms
  Hash#fetch, symbol   177.522M i/100ms
     Hash#[], string     4.980M i/100ms
  Hash#fetch, string     5.034M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.829B (± 5.5%) i/s -      9.153B in   5.021058s
  Hash#fetch, symbol      1.761B (± 2.7%) i/s -      8.876B in   5.043787s
     Hash#[], string     50.949M (± 3.4%) i/s -    258.963M in   5.089158s
  Hash#fetch, string     50.409M (± 3.6%) i/s -    256.733M in   5.099922s

Comparison:
     Hash#[], symbol: 1828784105.6 i/s
  Hash#fetch, symbol: 1761115537.6 i/s - same-ish: difference falls within error
     Hash#[], string: 50948688.8 i/s - 35.89x  (± 0.00) slower
  Hash#fetch, string: 50408502.4 i/s - 36.28x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        11.428k i/100ms
      Hash#merge({})    11.286k i/100ms
 Hash#dup#merge!({})    18.160k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        230.689k (± 4.8%) i/s -      1.154M in   5.015909s
      Hash#merge({})    125.130k (± 4.2%) i/s -    632.016k in   5.060281s
 Hash#dup#merge!({})    197.902k (± 3.8%) i/s -    998.800k in   5.054433s

Comparison:
{}#merge!(Hash) do end:   230688.6 i/s
 Hash#dup#merge!({}):   197902.5 i/s - 1.17x  (± 0.00) slower
      Hash#merge({}):   125129.9 i/s - 1.84x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   190.327M i/100ms
  Hash#fetch + block   183.521M i/100ms
    Hash#fetch + arg   195.991M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.988B (± 3.8%) i/s -     10.087B in   5.082120s
  Hash#fetch + block      1.808B (± 3.4%) i/s -      9.176B in   5.082192s
    Hash#fetch + arg      1.852B (± 6.9%) i/s -      9.212B in   5.000303s

Comparison:
  Hash#fetch + const: 1987682248.8 i/s
    Hash#fetch + arg: 1851547434.0 i/s - same-ish: difference falls within error
  Hash#fetch + block: 1807642930.1 i/s - 1.10x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   100.000  i/100ms
         Hash#value?     1.154k i/100ms
Calculating -------------------------------------
Hash#values.include?      1.915k (±14.0%) i/s -      9.300k in   5.027892s
         Hash#value?     11.996k (± 4.4%) i/s -     60.008k in   5.012759s

Comparison:
         Hash#value?:    11995.6 i/s
Hash#values.include?:     1914.9 i/s - 6.26x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      933.040k i/100ms
Array#each             779.273k i/100ms
Array#each_w/_object   807.475k i/100ms
Hash#select-include      1.579M i/100ms
Calculating -------------------------------------
Hash#native-slice        10.497M (± 6.7%) i/s -     52.250M in   5.001118s
Array#each                8.774M (± 6.0%) i/s -     44.419M in   5.081329s
Array#each_w/_object      9.079M (± 5.4%) i/s -     46.026M in   5.084273s
Hash#select-include      15.348M (± 6.9%) i/s -     77.353M in   5.064930s

Comparison:
Hash#select-include : 15348188.8 i/s
Hash#native-slice   : 10496557.7 i/s - 1.46x  (± 0.00) slower
Array#each_w/_object:  9079352.7 i/s - 1.69x  (± 0.00) slower
Array#each          :  8773849.6 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    12.979k i/100ms
            Hash#[]=    33.152k i/100ms
Calculating -------------------------------------
         Hash#merge!    334.943k (± 8.8%) i/s -      1.661M in   5.006617s
            Hash#[]=    345.132k (± 6.9%) i/s -      1.724M in   5.020161s

Comparison:
            Hash#[]=:   345132.5 i/s
         Hash#merge!:   334943.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   287.872k i/100ms
            Hash#dup   338.882k i/100ms
Calculating -------------------------------------
              Hash[]      3.473M (± 7.0%) i/s -     17.272M in   5.000609s
            Hash#dup      3.533M (± 3.3%) i/s -     17.961M in   5.089249s

Comparison:
            Hash#dup:  3533117.5 i/s
              Hash[]:  3472563.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   217.155M i/100ms
          Hash#merge   210.880M i/100ms
Calculating -------------------------------------
        Hash#**other      2.213B (± 4.2%) i/s -     11.075B in   5.013082s
          Hash#merge      2.252B (± 4.6%) i/s -     11.388B in   5.068652s

Comparison:
          Hash#merge: 2251602921.3 i/s
        Hash#**other: 2213170227.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   106.000  i/100ms
           Hash#key?     2.340M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.683k (±15.7%) i/s -      8.162k in   5.010691s
           Hash#key?     24.765M (± 3.2%) i/s -    124.028M in   5.013194s

Comparison:
           Hash#key?: 24765121.7 i/s
  Hash#keys.include?:     1683.3 i/s - 14712.01x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   203.642M i/100ms
                send   200.032M i/100ms
      method_missing   215.699M i/100ms
Calculating -------------------------------------
                call      2.093B (± 4.7%) i/s -     10.589B in   5.070257s
                send      2.040B (± 3.7%) i/s -     10.202B in   5.008881s
      method_missing      2.040B (± 5.0%) i/s -     10.354B in   5.087331s

Comparison:
                call: 2093034615.2 i/s
      method_missing: 2040288444.6 i/s - same-ish: difference falls within error
                send: 2039514611.4 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   474.451k i/100ms
Calculating -------------------------------------
                find      0.102  (± 0.0%) i/s -      1.000  in   9.777193s
             bsearch      4.369M (± 6.2%) i/s -     21.825M in   5.015094s

Comparison:
             bsearch:  4369189.3 i/s
                find:        0.1 i/s - 42718408.57x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    11.649k i/100ms
        Array#sample     2.476M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    241.791k (± 5.2%) i/s -      1.211M in   5.024843s
        Array#sample     24.851M (± 3.4%) i/s -    126.285M in   5.087476s

Comparison:
        Array#sample: 24851414.9 i/s
 Array#shuffle.first:   241791.2 i/s - 102.78x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.083  (± 0.0%) i/s -      1.000  in  12.091447s
        Array#insert      0.709  (± 0.0%) i/s -      4.000  in   5.638654s

Comparison:
        Array#insert:        0.7 i/s
       Array#unshift:        0.1 i/s - 8.58x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   179.626M i/100ms
          Array#last   168.094M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.761B (± 3.7%) i/s -      8.802B in   5.005401s
          Array#last      1.698B (± 4.7%) i/s -      8.573B in   5.058961s

Comparison:
          Array#[-1]: 1760858610.2 i/s
          Array#last: 1698450859.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   217.127M i/100ms
          Array#size   222.194M i/100ms
         Array#count   209.777M i/100ms
Calculating -------------------------------------
        Array#length      2.087B (± 5.1%) i/s -     10.422B in   5.006519s
          Array#size      2.100B (± 4.2%) i/s -     10.665B in   5.087578s
         Array#count      2.084B (± 5.3%) i/s -     10.489B in   5.047667s

Comparison:
          Array#size: 2100161823.5 i/s
        Array#length: 2087212811.9 i/s - same-ish: difference falls within error
         Array#count: 2083693633.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   189.024M i/100ms
         Array#first   184.433M i/100ms
Calculating -------------------------------------
           Array#[0]      1.912B (± 3.6%) i/s -      9.640B in   5.047318s
         Array#first      1.934B (± 3.3%) i/s -      9.775B in   5.060920s

Comparison:
         Array#first: 1933642342.7 i/s
           Array#[0]: 1912454695.1 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   189.843k i/100ms
           Array#map   722.827k i/100ms
Calculating -------------------------------------
   Array#each + push      1.906M (± 4.9%) i/s -      9.682M in   5.091008s
           Array#map      7.652M (± 6.1%) i/s -     38.310M in   5.026422s

Comparison:
           Array#map:  7651660.4 i/s
   Array#each + push:  1906460.1 i/s - 4.01x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   356.789k i/100ms
Enumerable#sort_by...first
                         4.476k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      3.715M (± 3.9%) i/s -     18.553M in   5.002530s
Enumerable#sort_by...first
                         68.638k (± 5.0%) i/s -    344.652k in   5.034720s

Comparison:
   Enumerable#min_by:  3714590.7 i/s
Enumerable#sort_by...first:    68637.6 i/s - 54.12x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     8.966M i/100ms
               #each    12.047M i/100ms
Calculating -------------------------------------
            For loop     91.061M (± 4.6%) i/s -    457.275M in   5.032855s
               #each    125.522M (± 4.9%) i/s -    626.429M in   5.003156s

Comparison:
               #each: 125521914.3 i/s
            For loop: 91060752.1 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       573.960k i/100ms
   Enumerable#detect     2.959M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          6.068M (± 7.4%) i/s -    121.106M in  20.094318s
   Enumerable#detect     29.241M (± 3.3%) i/s -    585.932M in  20.060840s

Comparison:
   Enumerable#detect: 29240880.9 i/s
Enumerable#select.first:  6067989.2 i/s - 4.82x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.455k i/100ms
  Enumerable#sort_by     2.894k i/100ms
     Enumerable#sort     4.288k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         27.627k (±14.4%) i/s -    135.025k in   5.020610s
  Enumerable#sort_by     33.930k (± 6.8%) i/s -    170.746k in   5.057069s
     Enumerable#sort     52.367k (± 3.5%) i/s -    265.856k in   5.083043s

Comparison:
     Enumerable#sort:    52366.9 i/s
  Enumerable#sort_by:    33930.5 i/s - 1.54x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    27627.1 i/s - 1.90x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       187.384k i/100ms
Enumerable#select.last
                       310.176k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.826M (± 5.4%) i/s -      9.182M in   5.042544s
Enumerable#select.last
                          3.140M (± 4.5%) i/s -     15.819M in   5.048069s

Comparison:
Enumerable#select.last:  3140361.7 i/s
Enumerable#reverse.detect:  1826284.3 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   805.122k i/100ms
     each_with_index     1.047M i/100ms
Calculating -------------------------------------
          While Loop      8.420M (± 4.2%) i/s -     42.671M in   5.077113s
     each_with_index     11.506M (± 4.2%) i/s -     57.585M in   5.013597s

Comparison:
     each_with_index: 11505555.3 i/s
          While Loop:  8419729.6 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   182.595k i/100ms
  Array#reverse_each     1.214M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.762M (± 5.3%) i/s -      8.947M in   5.092785s
  Array#reverse_each     12.349M (± 3.9%) i/s -     61.915M in   5.021781s

Comparison:
  Array#reverse_each: 12348694.8 i/s
  Array#reverse.each:  1761749.8 i/s - 7.01x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    11.411k i/100ms
   Array#map.flatten    16.041k i/100ms
      Array#flat_map    38.183k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    165.317k (± 7.4%) i/s -    821.592k in   5.000569s
   Array#map.flatten    165.599k (± 6.2%) i/s -    834.132k in   5.057511s
      Array#flat_map    400.331k (± 5.3%) i/s -      2.024M in   5.070517s

Comparison:
      Array#flat_map:   400330.5 i/s
   Array#map.flatten:   165599.3 i/s - 2.42x  (± 0.00) slower
Array#map.flatten(1):   165316.5 i/s - 2.42x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   154.916k i/100ms
      inject to_proc   155.013k i/100ms
        inject block   153.554k i/100ms
Calculating -------------------------------------
       inject symbol      1.548M (± 4.2%) i/s -      7.746M in   5.014008s
      inject to_proc      1.553M (± 3.5%) i/s -      7.906M in   5.095640s
        inject block      1.579M (± 4.2%) i/s -      7.985M in   5.065975s

Comparison:
        inject block:  1579018.8 i/s
      inject to_proc:  1553312.8 i/s - same-ish: difference falls within error
       inject symbol:  1547612.8 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   192.288M i/100ms
       block + yield   191.543M i/100ms
        unused block   206.337M i/100ms
               yield   191.422M i/100ms
Calculating -------------------------------------
          block.call      1.967B (± 4.4%) i/s -      9.999B in   5.093998s
       block + yield      1.953B (± 4.2%) i/s -      9.769B in   5.010090s
        unused block      1.965B (± 3.1%) i/s -      9.904B in   5.044027s
               yield      1.945B (± 4.0%) i/s -      9.763B in   5.027064s

Comparison:
          block.call: 1966592021.8 i/s
        unused block: 1965439570.7 i/s - same-ish: difference falls within error
       block + yield: 1953180621.5 i/s - same-ish: difference falls within error
               yield: 1945078584.4 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.0.0-dev-59020ff8, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    32.905k i/100ms
      Symbol#to_proc    38.874k i/100ms
Calculating -------------------------------------
               Block    418.549k (± 6.8%) i/s -      2.106M in   5.066313s
      Symbol#to_proc    408.609k (± 3.4%) i/s -      2.060M in   5.048082s

Comparison:
               Block:   418548.7 i/s
      Symbol#to_proc:   408608.7 i/s - same-ish: difference falls within error

