$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       198.818M i/100ms
Function with splat arguments
                       595.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.989B (± 0.3%) i/s -     10.140B in   5.097301s
Function with splat arguments
                          6.318k (± 5.6%) i/s -     31.535k in   5.008029s

Comparison:
Function with single Array argument: 1989243540.7 i/s
Function with splat arguments:     6318.3 i/s - 314840.02x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   197.822M i/100ms
Sequential Assignment
                       198.732M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.988B (± 0.4%) i/s -     10.089B in   5.074230s
Sequential Assignment
                          1.990B (± 0.2%) i/s -     10.135B in   5.092655s

Comparison:
Sequential Assignment: 1990194550.9 i/s
 Parallel Assignment: 1988287972.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   198.828M i/100ms
       attr_accessor   198.741M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.984B (± 1.4%) i/s -      9.941B in   5.010933s
       attr_accessor      1.990B (± 0.2%) i/s -     10.136B in   5.092868s

Comparison:
       attr_accessor: 1990206311.0 i/s
   getter_and_setter: 1984344723.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     6.757k i/100ms
         respond_to?   198.704M i/100ms
Calculating -------------------------------------
      begin...rescue     45.491k (± 3.0%) i/s -    229.738k in   5.054732s
         respond_to?      1.993B (± 0.3%) i/s -     10.134B in   5.085505s

Comparison:
         respond_to?: 1992717379.1 i/s
      begin...rescue:    45490.6 i/s - 43805.02x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   198.982M i/100ms
             &method   200.314M i/100ms
Calculating -------------------------------------
              normal      1.996B (± 0.5%) i/s -     10.148B in   5.085219s
             &method      2.000B (± 0.5%) i/s -     10.016B in   5.009233s

Comparison:
             &method: 1999503531.1 i/s
              normal: 1995661134.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        94.000  i/100ms
       define_method   128.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.426k (±53.4%) i/s -      4.230k in   5.018372s
       define_method      3.062k (±60.0%) i/s -      6.144k in   6.710838s

Comparison:
       define_method:     3061.7 i/s
module_eval with string:     1425.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    58.798k i/100ms
       Kernel#format    43.621k i/100ms
            String#%    43.740k i/100ms
Calculating -------------------------------------
         Float#round    631.399k (± 2.7%) i/s -      3.175M in   5.032431s
       Kernel#format    426.787k (± 2.3%) i/s -      2.137M in   5.010930s
            String#%    429.608k (± 2.3%) i/s -      2.187M in   5.093614s

Comparison:
         Float#round:   631399.4 i/s
            String#%:   429608.0 i/s - 1.47x  (± 0.00) slower
       Kernel#format:   426787.2 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   199.263M i/100ms
          OpenStruct   200.535M i/100ms
Calculating -------------------------------------
                Hash      1.997B (± 0.5%) i/s -     10.162B in   5.088447s
          OpenStruct      2.000B (± 0.6%) i/s -     10.027B in   5.012596s

Comparison:
          OpenStruct: 2000382540.0 i/s
                Hash: 1997209266.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   199.107M i/100ms
          OpenStruct     2.314k i/100ms
Calculating -------------------------------------
                Hash      1.991B (± 0.5%) i/s -      9.955B in   5.001068s
          OpenStruct     25.508k (± 8.9%) i/s -    127.270k in   5.060193s

Comparison:
                Hash: 1990682383.7 i/s
          OpenStruct:    25508.4 i/s - 78040.31x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   606.700k i/100ms
  ancestors.include?   108.033k i/100ms
Calculating -------------------------------------
  less than or equal      6.728M (± 3.8%) i/s -     33.975M in   5.057812s
  ancestors.include?      1.091M (± 4.3%) i/s -      5.510M in   5.061724s

Comparison:
  less than or equal:  6727621.6 i/s
  ancestors.include?:  1090602.5 i/s - 6.17x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     19.926  (± 0.0%) i/s -    100.000  in   5.018679s
         Kernel loop      4.960  (± 0.0%) i/s -     25.000  in   5.040590s

Comparison:
          While Loop:       19.9 i/s
         Kernel loop:        5.0 i/s - 4.02x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   198.841M i/100ms
         Array#first   199.019M i/100ms
Calculating -------------------------------------
           Array#[0]      1.993B (± 0.4%) i/s -     10.141B in   5.088892s
         Array#first      1.991B (± 0.3%) i/s -     10.150B in   5.097896s

Comparison:
           Array#[0]: 1992786304.9 i/s
         Array#first: 1991034709.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   199.017M i/100ms
          Array#last   198.916M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.998B (± 0.5%) i/s -     10.150B in   5.079430s
          Array#last      1.999B (± 0.4%) i/s -     10.145B in   5.073971s

Comparison:
          Array#last: 1999400855.1 i/s
          Array#[-1]: 1998285373.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   391.403k i/100ms
Calculating -------------------------------------
                find      0.091  (± 0.0%) i/s -      1.000  in  10.984909s
             bsearch      3.956M (± 3.4%) i/s -     19.962M in   5.052430s

Comparison:
             bsearch:  3955853.0 i/s
                find:        0.1 i/s - 43454686.08x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.103  (± 0.0%) i/s -      1.000  in   9.714668s
        Array#insert      0.785  (± 0.0%) i/s -      4.000  in   5.096095s

Comparison:
        Array#insert:        0.8 i/s
       Array#unshift:        0.1 i/s - 7.63x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   198.952M i/100ms
          Array#size   199.085M i/100ms
         Array#count   199.163M i/100ms
Calculating -------------------------------------
        Array#length      1.990B (± 0.2%) i/s -      9.948B in   4.999552s
          Array#size      1.990B (± 0.2%) i/s -      9.954B in   5.001750s
         Array#count      1.990B (± 0.3%) i/s -      9.958B in   5.004458s

Comparison:
          Array#size: 1990160611.5 i/s
         Array#count: 1989878042.0 i/s - same-ish: difference falls within error
        Array#length: 1989706791.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    18.926k i/100ms
        Array#sample     2.034M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    194.593k (± 1.8%) i/s -    984.152k in   5.059317s
        Array#sample     20.115M (± 1.9%) i/s -    101.722M in   5.058883s

Comparison:
        Array#sample: 20115270.2 i/s
 Array#shuffle.first:   194593.3 i/s - 103.37x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   192.000  i/100ms
          Date.parse    78.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     11.928k (±31.7%) i/s -     44.928k in   4.991683s
          Date.parse      3.449k (±30.3%) i/s -     14.508k in   5.013613s

Comparison:
        Date.iso8601:    11928.3 i/s
          Date.parse:     3448.7 i/s - 3.46x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   122.459k i/100ms
           Array#map   488.898k i/100ms
Calculating -------------------------------------
   Array#each + push      1.264M (± 5.0%) i/s -      6.368M in   5.052040s
           Array#map      4.913M (± 6.8%) i/s -     24.934M in   5.097975s

Comparison:
           Array#map:  4913188.0 i/s
   Array#each + push:  1263662.5 i/s - 3.89x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     7.012M i/100ms
               #each    47.423M i/100ms
Calculating -------------------------------------
            For loop     71.315M (± 1.7%) i/s -    357.606M in   5.015930s
               #each    473.413M (± 0.5%) i/s -      2.371B in   5.008714s

Comparison:
               #each: 473413258.1 i/s
            For loop: 71314515.4 i/s - 6.64x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   577.515k i/100ms
     each_with_index     1.067M i/100ms
Calculating -------------------------------------
          While Loop      5.824M (± 0.2%) i/s -     29.453M in   5.057449s
     each_with_index     10.661M (± 0.5%) i/s -     53.349M in   5.004105s

Comparison:
     each_with_index: 10661387.5 i/s
          While Loop:  5823767.2 i/s - 1.83x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   122.647k i/100ms
      inject to_proc   122.912k i/100ms
        inject block   122.943k i/100ms
Calculating -------------------------------------
       inject symbol      1.229M (± 0.1%) i/s -      6.255M in   5.089041s
      inject to_proc      1.229M (± 0.1%) i/s -      6.146M in   5.001283s
        inject block      1.230M (± 0.2%) i/s -      6.270M in   5.098769s

Comparison:
        inject block:  1229732.5 i/s
       inject symbol:  1229112.5 i/s - same-ish: difference falls within error
      inject to_proc:  1228805.2 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     9.054k i/100ms
   Array#map.flatten    10.269k i/100ms
      Array#flat_map    25.790k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    105.796k (± 3.9%) i/s -    534.186k in   5.057700s
   Array#map.flatten    105.017k (± 3.8%) i/s -    533.988k in   5.092573s
      Array#flat_map    246.669k (± 5.8%) i/s -      1.238M in   5.036064s

Comparison:
      Array#flat_map:   246669.5 i/s
Array#map.flatten(1):   105796.2 i/s - 2.33x  (± 0.00) slower
   Array#map.flatten:   105017.3 i/s - 2.35x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   129.443k i/100ms
  Array#reverse_each   764.179k i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.397M (± 3.3%) i/s -      6.990M in   5.007755s
  Array#reverse_each      7.635M (± 0.0%) i/s -     38.209M in   5.004128s

Comparison:
  Array#reverse_each:  7635488.0 i/s
  Array#reverse.each:  1397439.5 i/s - 5.46x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       513.142k i/100ms
   Enumerable#detect     3.203M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          5.844M (± 6.2%) i/s -    116.483M in  20.044600s
   Enumerable#detect     32.051M (± 0.4%) i/s -    643.724M in  20.084408s

Comparison:
   Enumerable#detect: 32051389.6 i/s
Enumerable#select.first:  5844154.9 i/s - 5.48x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       121.306k i/100ms
Enumerable#select.last
                       273.023k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.402M (± 3.7%) i/s -      7.036M in   5.025105s
Enumerable#select.last
                          2.764M (± 3.7%) i/s -     13.924M in   5.045858s

Comparison:
Enumerable#select.last:  2763506.8 i/s
Enumerable#reverse.detect:  1402173.3 i/s - 1.97x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         1.846k i/100ms
  Enumerable#sort_by     2.107k i/100ms
     Enumerable#sort     2.585k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         18.828k (±18.5%) i/s -     84.916k in   5.044392s
  Enumerable#sort_by     19.263k (±18.1%) i/s -     86.387k in   5.053764s
     Enumerable#sort     25.911k (± 0.2%) i/s -    131.835k in   5.088036s

Comparison:
     Enumerable#sort:    25910.9 i/s
  Enumerable#sort_by:    19262.9 i/s - 1.35x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    18828.2 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   421.285k i/100ms
Enumerable#sort_by...first
                         4.326k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      4.213M (± 0.2%) i/s -     21.064M in   4.999618s
Enumerable#sort_by...first
                         47.922k (± 3.0%) i/s -    242.256k in   5.059985s

Comparison:
   Enumerable#min_by:  4213194.2 i/s
Enumerable#sort_by...first:    47921.9 i/s - 87.92x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   165.246k i/100ms
            Hash#dup   197.740k i/100ms
Calculating -------------------------------------
              Hash[]      2.025M (± 5.5%) i/s -     10.245M in   5.076716s
            Hash#dup      1.998M (± 4.4%) i/s -     10.085M in   5.056843s

Comparison:
              Hash[]:  2024693.6 i/s
            Hash#dup:  1998271.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   199.474M i/100ms
  Hash#fetch, symbol   199.566M i/100ms
     Hash#[], string     3.889M i/100ms
  Hash#fetch, string     4.032M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.996B (± 0.4%) i/s -     10.173B in   5.097222s
  Hash#fetch, symbol      1.997B (± 0.4%) i/s -     10.178B in   5.096674s
     Hash#[], string     38.868M (± 0.5%) i/s -    194.454M in   5.002997s
  Hash#fetch, string     40.314M (± 0.4%) i/s -    201.578M in   5.000281s

Comparison:
  Hash#fetch, symbol: 1996987667.4 i/s
     Hash#[], symbol: 1995860738.6 i/s - same-ish: difference falls within error
  Hash#fetch, string: 40313981.5 i/s - 49.54x  (± 0.00) slower
     Hash#[], string: 38868305.7 i/s - 51.38x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    49.755M i/100ms
             Hash#[]    49.764M i/100ms
          Hash#[] ||    50.270M i/100ms
          Hash#[] &&    49.816M i/100ms
          Hash#fetch    49.859M i/100ms
 Hash#fetch fallback    49.866M i/100ms
Calculating -------------------------------------
            Hash#dig    497.704M (± 0.4%) i/s -      2.537B in   5.098468s
             Hash#[]    498.069M (± 0.3%) i/s -      2.538B in   5.095620s
          Hash#[] ||    498.943M (± 0.4%) i/s -      2.514B in   5.037761s
          Hash#[] &&    501.581M (± 0.6%) i/s -      2.541B in   5.065411s
          Hash#fetch    499.703M (± 1.3%) i/s -      2.543B in   5.089577s
 Hash#fetch fallback    499.962M (± 0.5%) i/s -      2.543B in   5.086850s

Comparison:
          Hash#[] &&: 501580822.0 i/s
 Hash#fetch fallback: 499961733.3 i/s - same-ish: difference falls within error
          Hash#fetch: 499703072.8 i/s - same-ish: difference falls within error
          Hash#[] ||: 498942711.8 i/s - same-ish: difference falls within error
             Hash#[]: 498069228.9 i/s - same-ish: difference falls within error
            Hash#dig: 497704237.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   199.860M i/100ms
  Hash#fetch + block   199.247M i/100ms
    Hash#fetch + arg   199.816M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.994B (± 0.7%) i/s -      9.993B in   5.012651s
  Hash#fetch + block      1.991B (± 0.3%) i/s -      9.962B in   5.003527s
    Hash#fetch + arg      1.998B (± 0.5%) i/s -      9.991B in   5.001177s

Comparison:
    Hash#fetch + arg: 1997737378.8 i/s
  Hash#fetch + const: 1993636082.5 i/s - same-ish: difference falls within error
  Hash#fetch + block: 1991085455.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    16.940k i/100ms
         sort + to_h    10.389k i/100ms
Calculating -------------------------------------
      sort_by + to_h    177.180k (± 5.4%) i/s -    897.820k in   5.082062s
         sort + to_h    110.136k (± 3.8%) i/s -    550.617k in   5.006988s

Comparison:
      sort_by + to_h:   177180.4 i/s
         sort + to_h:   110136.3 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each    92.523k i/100ms
       Hash#each_key    98.235k i/100ms
Calculating -------------------------------------
      Hash#keys.each    924.404k (± 4.7%) i/s -      4.626M in   5.016333s
       Hash#each_key    959.107k (± 5.2%) i/s -      4.814M in   5.033059s

Comparison:
       Hash#each_key:   959107.3 i/s
      Hash#keys.each:   924404.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   151.000  i/100ms
           Hash#key?    83.002M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.586k (±14.8%) i/s -      7.701k in   5.053236s
           Hash#key?    829.786M (± 0.2%) i/s -      4.150B in   5.001412s

Comparison:
           Hash#key?: 829785850.9 i/s
  Hash#keys.include?:     1585.5 i/s - 523349.47x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    19.805k i/100ms
            Hash#[]=    21.604k i/100ms
Calculating -------------------------------------
         Hash#merge!    214.533k (± 3.9%) i/s -      1.089M in   5.085753s
            Hash#[]=    217.817k (± 3.9%) i/s -      1.102M in   5.066264s

Comparison:
            Hash#[]=:   217817.1 i/s
         Hash#merge!:   214532.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         9.508k i/100ms
      Hash#merge({})     7.722k i/100ms
 Hash#dup#merge!({})    12.400k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        120.406k (± 5.0%) i/s -    608.512k in   5.068219s
      Hash#merge({})     79.057k (± 4.8%) i/s -    401.544k in   5.091823s
 Hash#dup#merge!({})    126.107k (± 4.4%) i/s -    632.400k in   5.025413s

Comparison:
 Hash#dup#merge!({}):   126106.5 i/s
{}#merge!(Hash) do end:   120405.7 i/s - same-ish: difference falls within error
      Hash#merge({}):    79057.0 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   198.972M i/100ms
          Hash#merge   199.164M i/100ms
Calculating -------------------------------------
        Hash#**other      1.990B (± 0.3%) i/s -      9.949B in   5.000443s
          Hash#merge      1.991B (± 0.3%) i/s -      9.958B in   5.002850s

Comparison:
          Hash#merge: 1990516836.8 i/s
        Hash#**other: 1989563143.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   276.000  i/100ms
         Hash#merge!    21.702k i/100ms
Calculating -------------------------------------
          Hash#merge      3.290k (± 5.1%) i/s -     16.560k in   5.047659s
         Hash#merge!    221.306k (± 3.6%) i/s -      1.107M in   5.008337s

Comparison:
         Hash#merge!:   221306.3 i/s
          Hash#merge:     3290.0 i/s - 67.27x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      936.865k i/100ms
Array#each             805.249k i/100ms
Array#each_w/_object   815.639k i/100ms
Hash#select-include      1.100M i/100ms
Calculating -------------------------------------
Hash#native-slice        10.168M (± 4.8%) i/s -     51.528M in   5.080294s
Array#each                8.126M (± 3.6%) i/s -     41.068M in   5.060741s
Array#each_w/_object      8.192M (± 3.2%) i/s -     41.598M in   5.083816s
Hash#select-include      11.023M (± 3.5%) i/s -     56.097M in   5.095844s

Comparison:
Hash#select-include : 11023369.2 i/s
Hash#native-slice   : 10168005.7 i/s - same-ish: difference falls within error
Array#each_w/_object:  8191726.5 i/s - 1.35x  (± 0.00) slower
Array#each          :  8126259.4 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   168.000  i/100ms
         Hash#value?   728.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.899k (±12.4%) i/s -      9.408k in   5.071906s
         Hash#value?      7.420k (± 0.2%) i/s -     37.128k in   5.003836s

Comparison:
         Hash#value?:     7419.9 i/s
Hash#values.include?:     1899.1 i/s - 3.91x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   199.510M i/100ms
                send   199.225M i/100ms
      method_missing   199.931M i/100ms
Calculating -------------------------------------
                call      2.002B (± 0.8%) i/s -     10.175B in   5.082512s
                send      1.997B (± 0.5%) i/s -     10.160B in   5.086761s
      method_missing      1.998B (± 0.4%) i/s -      9.997B in   5.003137s

Comparison:
                call: 2002102139.9 i/s
      method_missing: 1998093317.6 i/s - same-ish: difference falls within error
                send: 1997474285.5 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    17.844k i/100ms
      Symbol#to_proc    18.856k i/100ms
Calculating -------------------------------------
               Block    192.434k (± 4.5%) i/s -    963.576k in   5.018089s
      Symbol#to_proc    192.395k (± 3.9%) i/s -    961.656k in   5.006460s

Comparison:
               Block:   192434.2 i/s
      Symbol#to_proc:   192394.9 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   199.740M i/100ms
       block + yield   199.422M i/100ms
        unused block   200.438M i/100ms
               yield   201.019M i/100ms
Calculating -------------------------------------
          block.call      1.999B (± 0.5%) i/s -     10.187B in   5.097051s
       block + yield      2.012B (± 0.8%) i/s -     10.171B in   5.056098s
        unused block      2.007B (± 0.6%) i/s -     10.222B in   5.094558s
               yield      1.998B (± 0.5%) i/s -     10.051B in   5.030425s

Comparison:
       block + yield: 2011659178.1 i/s
        unused block: 2006601283.2 i/s - same-ish: difference falls within error
          block.call: 1998612908.7 i/s - same-ish: difference falls within error
               yield: 1998087053.7 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    29.512k i/100ms
      range#include?   181.000  i/100ms
       range#member?   212.000  i/100ms
       plain compare    28.575k i/100ms
Calculating -------------------------------------
        range#cover?    277.352k (±31.7%) i/s -      1.269M in   5.085387s
      range#include?      5.850k (±34.7%) i/s -     19.367k in   5.110264s
       range#member?      5.504k (±37.1%) i/s -     13.780k in   5.208371s
       plain compare    462.916k (±34.2%) i/s -      1.257M in   5.092304s

Comparison:
       plain compare:   462916.0 i/s
        range#cover?:   277352.2 i/s - same-ish: difference falls within error
      range#include?:     5849.6 i/s - 79.14x  (± 0.00) slower
       range#member?:     5504.4 i/s - 84.10x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     3.439M i/100ms
           String#=~     4.328M i/100ms
          Regexp#===     4.322M i/100ms
        String#match     3.980M i/100ms
Calculating -------------------------------------
       String#match?     36.323M (± 4.1%) i/s -    182.292M in   5.027473s
           String#=~     43.474M (± 0.7%) i/s -    220.707M in   5.077073s
          Regexp#===     43.612M (± 0.8%) i/s -    220.429M in   5.054649s
        String#match     39.660M (± 0.8%) i/s -    198.988M in   5.017632s

Comparison:
          Regexp#===: 43611925.0 i/s
           String#=~: 43473528.7 i/s - same-ish: difference falls within error
        String#match: 39660356.5 i/s - 1.10x  (± 0.00) slower
       String#match?: 36322550.6 i/s - 1.20x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.126M i/100ms
      String#casecmp     2.916M i/100ms
Calculating -------------------------------------
String#downcase + ==     12.570M (± 4.6%) i/s -     63.076M in   5.029493s
      String#casecmp     28.889M (± 0.9%) i/s -    145.814M in   5.047750s

Comparison:
      String#casecmp: 28888966.1 i/s
String#downcase + ==: 12569649.0 i/s - 2.30x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+   200.754M i/100ms
       String#concat   199.567M i/100ms
       String#append   202.718M i/100ms
         "foo" "bar"   202.328M i/100ms
  "#{'foo'}#{'bar'}"   200.902M i/100ms
Calculating -------------------------------------
            String#+      2.036B (± 1.0%) i/s -     10.238B in   5.028467s
       String#concat      2.033B (± 1.1%) i/s -     10.178B in   5.007697s
       String#append      2.040B (± 1.1%) i/s -     10.339B in   5.069242s
         "foo" "bar"      2.024B (± 0.8%) i/s -     10.319B in   5.098316s
  "#{'foo'}#{'bar'}"      2.035B (± 1.0%) i/s -     10.246B in   5.036629s

Comparison:
       String#append: 2039741035.3 i/s
            String#+: 2036322348.1 i/s - same-ish: difference falls within error
  "#{'foo'}#{'bar'}": 2034505061.3 i/s - same-ish: difference falls within error
       String#concat: 2032689537.2 i/s - same-ish: difference falls within error
         "foo" "bar": 2024078484.9 i/s - same-ish: difference falls within error

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   202.277M i/100ms
          String#dup   200.630M i/100ms
Calculating -------------------------------------
           String#+@      2.027B (± 1.1%) i/s -     10.316B in   5.090459s
          String#dup      2.035B (± 1.0%) i/s -     10.232B in   5.028749s

Comparison:
          String#dup: 2034929194.2 i/s
           String#+@: 2026807319.0 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.076M i/100ms
       String#match?     1.137M i/100ms
    String#end_with?    12.016M i/100ms
Calculating -------------------------------------
           String#=~     10.811M (± 3.4%) i/s -     54.889M in   5.082992s
       String#match?     11.381M (± 3.0%) i/s -     56.870M in   5.001383s
    String#end_with?    122.237M (± 1.1%) i/s -    612.822M in   5.014038s

Comparison:
    String#end_with?: 122236572.5 i/s
       String#match?: 11381357.4 i/s - 10.74x  (± 0.00) slower
           String#=~: 10811088.9 i/s - 11.31x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    53.151k i/100ms
          String#sub   388.582k i/100ms
String#dup["string"]=
                        16.026M i/100ms
Calculating -------------------------------------
         String#gsub    742.064k (± 4.4%) i/s -      3.721M in   5.025662s
          String#sub      4.254M (± 6.9%) i/s -     21.372M in   5.049606s
String#dup["string"]=
                        160.199M (± 1.2%) i/s -    801.290M in   5.002515s

Comparison:
String#dup["string"]=: 160199300.9 i/s
          String#sub:  4254102.9 i/s - 37.66x  (± 0.00) slower
         String#gsub:   742063.8 i/s - 215.88x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   142.598k i/100ms
           String#tr   117.019k i/100ms
Calculating -------------------------------------
         String#gsub      1.744M (± 5.0%) i/s -      8.698M in   5.000517s
           String#tr      1.185M (± 4.4%) i/s -      5.968M in   5.044704s

Comparison:
         String#gsub:  1744272.8 i/s
           String#tr:  1185395.9 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   201.096M i/100ms
         With Freeze   201.551M i/100ms
Calculating -------------------------------------
      Without Freeze      2.045B (± 1.1%) i/s -     10.256B in   5.016045s
         With Freeze      2.038B (± 1.3%) i/s -     10.279B in   5.045135s

Comparison:
      Without Freeze: 2044875588.8 i/s
         With Freeze: 2037780111.0 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     4.603k i/100ms
      String#squeeze    52.095k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     64.346k (± 5.1%) i/s -    322.210k in   5.021283s
      String#squeeze    515.728k (± 2.7%) i/s -      2.605M in   5.054726s

Comparison:
      String#squeeze:   515727.5 i/s
 String#gsub/regex+/:    64346.4 i/s - 8.01x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     2.177M i/100ms
       String#match?     2.561M i/100ms
  String#start_with?     1.425M i/100ms
Calculating -------------------------------------
           String#=~     22.302M (± 2.7%) i/s -    113.194M in   5.079324s
       String#match?     26.122M (± 3.1%) i/s -    130.593M in   5.004520s
  String#start_with?     14.614M (± 3.4%) i/s -     74.083M in   5.075446s

Comparison:
       String#match?: 26121755.6 i/s
           String#=~: 22302239.9 i/s - 1.17x  (± 0.00) slower
  String#start_with?: 14613938.2 i/s - 1.79x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   247.387k i/100ms
    String#[0, n] ==   157.181k i/100ms
   String#[RANGE] ==   174.498k i/100ms
   String#[0...n] ==   132.786k i/100ms
Calculating -------------------------------------
  String#start_with?      2.842M (± 4.1%) i/s -     14.348M in   5.057556s
    String#[0, n] ==      1.602M (± 4.5%) i/s -      8.016M in   5.013287s
   String#[RANGE] ==      1.746M (± 5.0%) i/s -      8.725M in   5.009456s
   String#[0...n] ==      1.368M (± 5.5%) i/s -      6.905M in   5.065358s

Comparison:
  String#start_with?:  2842415.3 i/s
   String#[RANGE] ==:  1746402.9 i/s - 1.63x  (± 0.00) slower
    String#[0, n] ==:  1602450.0 i/s - 1.77x  (± 0.00) slower
   String#[0...n] ==:  1367711.8 i/s - 2.08x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    16.731M i/100ms
 String#sub!'string'   415.859k i/100ms
String#gsub!'string'    73.644k i/100ms
  String#[/regexp/]=     3.338M i/100ms
 String#sub!/regexp/     1.638M i/100ms
String#gsub!/regexp/   426.535k i/100ms
Calculating -------------------------------------
  String#['string']=    165.648M (± 0.5%) i/s -    836.544M in   5.050248s
 String#sub!'string'      4.958M (±15.9%) i/s -     22.456M in   5.011539s
String#gsub!'string'    841.743k (± 3.1%) i/s -      4.271M in   5.080085s
  String#[/regexp/]=     32.845M (± 0.6%) i/s -    166.909M in   5.081825s
 String#sub!/regexp/     16.790M (± 3.3%) i/s -     85.181M in   5.079300s
String#gsub!/regexp/      4.338M (± 5.4%) i/s -     21.753M in   5.030956s

Comparison:
  String#['string']=: 165648002.1 i/s
  String#[/regexp/]=: 32845276.8 i/s - 5.04x  (± 0.00) slower
 String#sub!/regexp/: 16790479.3 i/s - 9.87x  (± 0.00) slower
 String#sub!'string':  4958236.9 i/s - 33.41x  (± 0.00) slower
String#gsub!/regexp/:  4337671.1 i/s - 38.19x  (± 0.00) slower
String#gsub!'string':   841743.3 i/s - 196.79x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.597M i/100ms
        String#chomp     2.479M i/100ms
String#delete_suffix     4.810M i/100ms
Calculating -------------------------------------
          String#sub     16.579M (± 3.8%) i/s -     83.022M in   5.015540s
        String#chomp     25.467M (± 3.4%) i/s -    128.916M in   5.068498s
String#delete_suffix     48.915M (± 1.0%) i/s -    245.307M in   5.015461s

Comparison:
String#delete_suffix: 48915168.7 i/s
        String#chomp: 25466742.1 i/s - 1.92x  (± 0.00) slower
          String#sub: 16578594.9 i/s - 2.95x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix     1.671M i/100ms
          String#sub     6.072M i/100ms
Calculating -------------------------------------
String#delete_prefix     17.790M (± 3.8%) i/s -     90.219M in   5.079222s
          String#sub     61.069M (± 1.2%) i/s -    309.695M in   5.071894s

Comparison:
          String#sub: 61069378.7 i/s
String#delete_prefix: 17789620.4 i/s - 3.43x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.174M i/100ms
    String#unpack[0]     1.248M i/100ms
Calculating -------------------------------------
      String#unpack1     12.097M (± 3.5%) i/s -     61.037M in   5.052028s
    String#unpack[0]     12.195M (± 3.4%) i/s -     61.170M in   5.021988s

Comparison:
    String#unpack[0]: 12195429.0 i/s
      String#unpack1: 12096831.8 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.2.0-dev-5c7903e0, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    13.245k i/100ms
          Time.parse   136.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    112.725k (±35.1%) i/s -    490.065k in   5.028703s
          Time.parse      3.242k (±24.3%) i/s -     14.688k in   4.999537s

Comparison:
        Time.iso8601:   112725.4 i/s
          Time.parse:     3241.9 i/s - 34.77x  (± 0.00) slower

