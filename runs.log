$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       113.816M i/100ms
Function with splat arguments
                         1.187k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.135B (± 1.2%) i/s -      5.691B in   5.014635s
Function with splat arguments
                         13.086k (± 7.3%) i/s -     65.285k in   5.019151s

Comparison:
Function with single Array argument: 1135007398.2 i/s
Function with splat arguments:    13085.6 i/s - 86737.16x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   113.723M i/100ms
Sequential Assignment
                       114.603M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.138B (± 1.1%) i/s -      5.800B in   5.098385s
Sequential Assignment
                          1.139B (± 0.9%) i/s -      5.730B in   5.033338s

Comparison:
Sequential Assignment: 1138524277.0 i/s
 Parallel Assignment: 1137731172.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   114.093M i/100ms
       attr_accessor   113.478M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.135B (± 0.5%) i/s -      5.705B in   5.024594s
       attr_accessor      1.136B (± 0.6%) i/s -      5.787B in   5.094172s

Comparison:
       attr_accessor: 1136113122.3 i/s
   getter_and_setter: 1135370320.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     9.874k i/100ms
         respond_to?   114.194M i/100ms
Calculating -------------------------------------
      begin...rescue     69.190k (± 3.3%) i/s -    355.464k in   5.143152s
         respond_to?      1.139B (± 0.7%) i/s -      5.710B in   5.013980s

Comparison:
         respond_to?: 1138816662.1 i/s
      begin...rescue:    69189.5 i/s - 16459.38x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   113.770M i/100ms
             &method   113.684M i/100ms
Calculating -------------------------------------
              normal      1.137B (± 0.8%) i/s -      5.688B in   5.004623s
             &method      1.139B (± 0.9%) i/s -      5.798B in   5.092579s

Comparison:
             &method: 1138590950.0 i/s
              normal: 1136725205.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       136.000  i/100ms
       define_method   146.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.757k (±56.2%) i/s -      5.304k in   6.035143s
       define_method      6.021k (±46.5%) i/s -     10.220k in   5.129172s

Comparison:
       define_method:     6020.6 i/s
module_eval with string:     1757.1 i/s - 3.43x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    82.364k i/100ms
       Kernel#format    73.058k i/100ms
            String#%    73.914k i/100ms
Calculating -------------------------------------
         Float#round    882.712k (± 2.9%) i/s -      4.448M in   5.043004s
       Kernel#format    699.280k (± 2.5%) i/s -      3.507M in   5.018099s
            String#%    706.422k (± 2.0%) i/s -      3.548M in   5.024454s

Comparison:
         Float#round:   882712.2 i/s
            String#%:   706421.8 i/s - 1.25x  (± 0.00) slower
       Kernel#format:   699279.9 i/s - 1.26x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   114.230M i/100ms
          OpenStruct   114.098M i/100ms
Calculating -------------------------------------
                Hash      1.138B (± 1.1%) i/s -      5.711B in   5.021581s
          OpenStruct      1.138B (± 0.9%) i/s -      5.705B in   5.011547s

Comparison:
          OpenStruct: 1138452633.1 i/s
                Hash: 1137511914.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   114.002M i/100ms
          OpenStruct     2.969k i/100ms
Calculating -------------------------------------
                Hash      1.138B (± 0.9%) i/s -      5.700B in   5.008157s
          OpenStruct     33.578k (±10.3%) i/s -    166.264k in   5.034946s

Comparison:
                Hash: 1138261248.5 i/s
          OpenStruct:    33578.4 i/s - 33898.63x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   862.986k i/100ms
  ancestors.include?   171.029k i/100ms
Calculating -------------------------------------
  less than or equal      8.730M (± 3.6%) i/s -     44.012M in   5.048650s
  ancestors.include?      1.715M (± 4.7%) i/s -      8.722M in   5.098646s

Comparison:
  less than or equal:  8729966.4 i/s
  ancestors.include?:  1714553.1 i/s - 5.09x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     11.364  (± 0.0%) i/s -     57.000  in   5.016263s
         Kernel loop      3.279  (± 0.0%) i/s -     17.000  in   5.184405s

Comparison:
          While Loop:       11.4 i/s
         Kernel loop:        3.3 i/s - 3.47x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   113.827M i/100ms
         Array#first   113.722M i/100ms
Calculating -------------------------------------
           Array#[0]      1.139B (± 1.1%) i/s -      5.805B in   5.097886s
         Array#first      1.141B (± 1.1%) i/s -      5.800B in   5.084814s

Comparison:
         Array#first: 1140737699.0 i/s
           Array#[0]: 1138883278.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   114.079M i/100ms
          Array#last   113.527M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.139B (± 1.2%) i/s -      5.704B in   5.008733s
          Array#last      1.136B (± 0.6%) i/s -      5.790B in   5.095036s

Comparison:
          Array#[-1]: 1138965442.2 i/s
          Array#last: 1136407725.7 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   684.878k i/100ms
Calculating -------------------------------------
                find     10.880  (± 0.0%) i/s -     55.000  in   5.055555s
             bsearch      6.896M (± 4.3%) i/s -     34.929M in   5.074558s

Comparison:
             bsearch:  6896300.6 i/s
                find:       10.9 i/s - 633866.33x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.069  (± 0.0%) i/s -      1.000  in  14.494955s
        Array#insert      1.019  (± 0.0%) i/s -      6.000  in   5.889693s

Comparison:
        Array#insert:        1.0 i/s
       Array#unshift:        0.1 i/s - 14.77x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   113.439M i/100ms
          Array#size   114.303M i/100ms
         Array#count   113.969M i/100ms
Calculating -------------------------------------
        Array#length      1.139B (± 1.1%) i/s -      5.785B in   5.078175s
          Array#size      1.144B (± 1.3%) i/s -      5.829B in   5.095062s
         Array#count      1.138B (± 1.0%) i/s -      5.698B in   5.008127s

Comparison:
          Array#size: 1144309805.2 i/s
        Array#length: 1139401497.8 i/s - same-ish: difference falls within error
         Array#count: 1137948943.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    22.888k i/100ms
        Array#sample     2.705M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    250.461k (± 2.2%) i/s -      1.259M in   5.028643s
        Array#sample     25.010M (± 0.3%) i/s -    127.135M in   5.083361s

Comparison:
        Array#sample: 25010202.7 i/s
 Array#shuffle.first:   250461.1 i/s - 99.86x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   955.000  i/100ms
          Date.parse   265.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     21.653k (±34.2%) i/s -     79.265k in   5.022403s
          Date.parse      9.096k (±25.4%) i/s -     38.955k in   4.997328s

Comparison:
        Date.iso8601:    21652.6 i/s
          Date.parse:     9096.0 i/s - 2.38x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   234.009k i/100ms
           Array#map     1.041M i/100ms
Calculating -------------------------------------
   Array#each + push      2.396M (± 4.4%) i/s -     12.168M in   5.088086s
           Array#map     10.371M (± 5.5%) i/s -     52.054M in   5.035072s

Comparison:
           Array#map: 10370614.4 i/s
   Array#each + push:  2396484.6 i/s - 4.33x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     9.430M i/100ms
               #each    41.072M i/100ms
Calculating -------------------------------------
            For loop     94.194M (± 0.9%) i/s -    471.503M in   5.006048s
               #each    408.486M (± 1.1%) i/s -      2.054B in   5.027864s

Comparison:
               #each: 408486125.6 i/s
            For loop: 94194237.2 i/s - 4.34x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   837.787k i/100ms
     each_with_index     1.042M i/100ms
Calculating -------------------------------------
          While Loop      8.379M (± 0.1%) i/s -     42.727M in   5.099162s
     each_with_index     10.425M (± 0.0%) i/s -     53.159M in   5.099217s

Comparison:
     each_with_index: 10425012.6 i/s
          While Loop:  8379249.6 i/s - 1.24x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   159.355k i/100ms
      inject to_proc   159.276k i/100ms
        inject block   158.960k i/100ms
Calculating -------------------------------------
       inject symbol      1.593M (± 0.1%) i/s -      7.968M in   5.002618s
      inject to_proc      1.587M (± 0.1%) i/s -      7.964M in   5.019586s
        inject block      1.607M (± 0.2%) i/s -      8.107M in   5.044597s

Comparison:
        inject block:  1607064.1 i/s
       inject symbol:  1592718.6 i/s - 1.01x  (± 0.00) slower
      inject to_proc:  1586547.5 i/s - 1.01x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    16.608k i/100ms
   Array#map.flatten    18.235k i/100ms
      Array#flat_map    45.551k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    185.874k (± 4.3%) i/s -    930.048k in   5.013447s
   Array#map.flatten    187.464k (± 4.2%) i/s -    948.220k in   5.067576s
      Array#flat_map    458.884k (± 3.1%) i/s -      2.323M in   5.068020s

Comparison:
      Array#flat_map:   458884.3 i/s
   Array#map.flatten:   187464.5 i/s - 2.45x  (± 0.00) slower
Array#map.flatten(1):   185874.5 i/s - 2.47x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   187.026k i/100ms
  Array#reverse_each     2.308M i/100ms
Calculating -------------------------------------
  Array#reverse.each      2.311M (± 3.7%) i/s -     11.596M in   5.025586s
  Array#reverse_each     23.070M (± 0.3%) i/s -    115.377M in   5.001136s

Comparison:
  Array#reverse_each: 23070253.4 i/s
  Array#reverse.each:  2310580.6 i/s - 9.98x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       646.509k i/100ms
   Enumerable#detect     2.655M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          6.774M (± 5.3%) i/s -    135.120M in  20.021113s
   Enumerable#detect     26.579M (± 0.2%) i/s -    533.655M in  20.077969s

Comparison:
   Enumerable#detect: 26579230.8 i/s
Enumerable#select.first:  6774457.0 i/s - 3.92x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       200.357k i/100ms
Enumerable#select.last
                       399.503k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.348M (± 3.1%) i/s -     11.821M in   5.039764s
Enumerable#select.last
                          4.053M (± 3.0%) i/s -     20.375M in   5.032112s

Comparison:
Enumerable#select.last:  4052742.1 i/s
Enumerable#reverse.detect:  2347927.4 i/s - 1.73x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.959k i/100ms
  Enumerable#sort_by     3.150k i/100ms
     Enumerable#sort     4.143k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         25.748k (±38.1%) i/s -     94.688k in   5.087716s
  Enumerable#sort_by     28.019k (±29.6%) i/s -    113.400k in   5.020015s
     Enumerable#sort     41.422k (± 0.6%) i/s -    207.150k in   5.001196s

Comparison:
     Enumerable#sort:    41421.6 i/s
  Enumerable#sort_by:    28019.5 i/s - 1.48x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    25747.6 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   607.236k i/100ms
Enumerable#sort_by...first
                         5.794k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      6.067M (± 0.1%) i/s -     30.362M in   5.004793s
Enumerable#sort_by...first
                         86.170k (± 3.6%) i/s -    434.550k in   5.049803s

Comparison:
   Enumerable#min_by:  6066555.5 i/s
Enumerable#sort_by...first:    86169.9 i/s - 70.40x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   380.759k i/100ms
            Hash#dup   420.675k i/100ms
Calculating -------------------------------------
              Hash[]      4.349M (± 2.4%) i/s -     22.084M in   5.081479s
            Hash#dup      4.335M (± 2.3%) i/s -     21.875M in   5.048969s

Comparison:
              Hash[]:  4348610.5 i/s
            Hash#dup:  4334870.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   113.884M i/100ms
  Hash#fetch, symbol   113.940M i/100ms
     Hash#[], string    14.905M i/100ms
  Hash#fetch, string     3.726M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.137B (± 0.7%) i/s -      5.694B in   5.008323s
  Hash#fetch, symbol      1.139B (± 1.0%) i/s -      5.697B in   5.001141s
     Hash#[], string    199.132M (± 1.0%) i/s -    998.640M in   5.015450s
  Hash#fetch, string    161.347M (± 1.5%) i/s -    808.454M in   5.011712s

Comparison:
  Hash#fetch, symbol: 1139262514.1 i/s
     Hash#[], symbol: 1137003584.2 i/s - same-ish: difference falls within error
     Hash#[], string: 199131852.1 i/s - 5.72x  (± 0.00) slower
  Hash#fetch, string: 161347365.7 i/s - 7.06x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    49.774M i/100ms
             Hash#[]    41.875M i/100ms
          Hash#[] ||    42.139M i/100ms
          Hash#[] &&    49.793M i/100ms
          Hash#fetch    41.937M i/100ms
 Hash#fetch fallback    41.813M i/100ms
Calculating -------------------------------------
            Hash#dig    497.447M (± 0.2%) i/s -      2.489B in   5.002986s
             Hash#[]    418.078M (± 0.8%) i/s -      2.094B in   5.008300s
          Hash#[] ||    419.230M (± 0.8%) i/s -      2.107B in   5.026103s
          Hash#[] &&    497.614M (± 0.2%) i/s -      2.490B in   5.003151s
          Hash#fetch    420.450M (± 0.9%) i/s -      2.139B in   5.087251s
 Hash#fetch fallback    419.377M (± 0.8%) i/s -      2.132B in   5.085146s

Comparison:
          Hash#[] &&: 497613834.9 i/s
            Hash#dig: 497446927.2 i/s - same-ish: difference falls within error
          Hash#fetch: 420449697.8 i/s - 1.18x  (± 0.00) slower
 Hash#fetch fallback: 419376707.1 i/s - 1.19x  (± 0.00) slower
          Hash#[] ||: 419229877.9 i/s - 1.19x  (± 0.00) slower
             Hash#[]: 418078328.0 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   113.571M i/100ms
  Hash#fetch + block   114.521M i/100ms
    Hash#fetch + arg   113.255M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.136B (± 0.8%) i/s -      5.679B in   5.000750s
  Hash#fetch + block      1.140B (± 1.1%) i/s -      5.726B in   5.022249s
    Hash#fetch + arg      1.138B (± 0.8%) i/s -      5.776B in   5.077956s

Comparison:
  Hash#fetch + block: 1140281050.0 i/s
    Hash#fetch + arg: 1137543411.1 i/s - same-ish: difference falls within error
  Hash#fetch + const: 1135607327.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    24.532k i/100ms
         sort + to_h    13.830k i/100ms
Calculating -------------------------------------
      sort_by + to_h    282.262k (± 6.8%) i/s -      1.423M in   5.065372s
         sort + to_h    107.610k (± 3.5%) i/s -    539.370k in   5.018657s

Comparison:
      sort_by + to_h:   282261.8 i/s
         sort + to_h:   107609.6 i/s - 2.62x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   223.299k i/100ms
       Hash#each_key   263.605k i/100ms
Calculating -------------------------------------
      Hash#keys.each      2.313M (±10.5%) i/s -     11.388M in   5.047641s
       Hash#each_key      2.720M (± 3.2%) i/s -     13.707M in   5.045284s

Comparison:
       Hash#each_key:  2719892.1 i/s
      Hash#keys.each:  2312803.5 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   215.000  i/100ms
           Hash#key?     3.032M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      2.189k (±12.6%) i/s -     10.750k in   5.057443s
           Hash#key?     30.605M (± 0.2%) i/s -    154.632M in   5.052580s

Comparison:
           Hash#key?: 30604580.6 i/s
  Hash#keys.include?:     2189.0 i/s - 13981.32x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    40.722k i/100ms
            Hash#[]=    44.142k i/100ms
Calculating -------------------------------------
         Hash#merge!    421.287k (±11.4%) i/s -      2.036M in   5.002779s
            Hash#[]=    447.770k (± 5.2%) i/s -      2.251M in   5.042640s

Comparison:
            Hash#[]=:   447769.5 i/s
         Hash#merge!:   421287.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        23.851k i/100ms
      Hash#merge({})    15.640k i/100ms
 Hash#dup#merge!({})    26.053k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        281.986k (± 2.7%) i/s -      1.431M in   5.078699s
      Hash#merge({})    166.090k (± 2.4%) i/s -    844.560k in   5.087836s
 Hash#dup#merge!({})    260.488k (± 2.2%) i/s -      1.303M in   5.003255s

Comparison:
{}#merge!(Hash) do end:   281986.3 i/s
 Hash#dup#merge!({}):   260487.8 i/s - 1.08x  (± 0.00) slower
      Hash#merge({}):   166090.4 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   113.558M i/100ms
          Hash#merge   114.211M i/100ms
Calculating -------------------------------------
        Hash#**other      1.140B (± 1.2%) i/s -      5.791B in   5.081769s
          Hash#merge      1.139B (± 0.8%) i/s -      5.711B in   5.016162s

Comparison:
        Hash#**other: 1139805128.8 i/s
          Hash#merge: 1138505043.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   673.000  i/100ms
         Hash#merge!    43.288k i/100ms
Calculating -------------------------------------
          Hash#merge      7.810k (± 5.5%) i/s -     39.034k in   5.017215s
         Hash#merge!    434.549k (± 2.2%) i/s -      2.208M in   5.083005s

Comparison:
         Hash#merge!:   434548.6 i/s
          Hash#merge:     7809.7 i/s - 55.64x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.527M i/100ms
Array#each               1.398M i/100ms
Array#each_w/_object     1.400M i/100ms
Hash#select-include      2.026M i/100ms
Calculating -------------------------------------
Hash#native-slice        16.689M (± 4.3%) i/s -     83.999M in   5.043245s
Array#each               14.192M (± 3.5%) i/s -     71.288M in   5.029974s
Array#each_w/_object     14.195M (± 3.3%) i/s -     71.382M in   5.034654s
Hash#select-include      20.482M (± 3.6%) i/s -    103.331M in   5.051918s

Comparison:
Hash#select-include : 20482161.4 i/s
Hash#native-slice   : 16688920.2 i/s - 1.23x  (± 0.00) slower
Array#each_w/_object: 14194771.5 i/s - 1.44x  (± 0.00) slower
Array#each          : 14191680.3 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   205.000  i/100ms
         Hash#value?   369.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.927k (±12.1%) i/s -      9.635k in   5.103474s
         Hash#value?      3.687k (± 0.3%) i/s -     18.450k in   5.004405s

Comparison:
         Hash#value?:     3686.8 i/s
Hash#values.include?:     1927.2 i/s - 1.91x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   114.042M i/100ms
                send   113.989M i/100ms
      method_missing   114.221M i/100ms
Calculating -------------------------------------
                call      1.137B (± 0.8%) i/s -      5.702B in   5.016333s
                send      1.137B (± 0.5%) i/s -      5.699B in   5.014436s
      method_missing      1.137B (± 0.5%) i/s -      5.711B in   5.023787s

Comparison:
      method_missing: 1136833801.8 i/s
                call: 1136772633.6 i/s - same-ish: difference falls within error
                send: 1136642008.7 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    31.143k i/100ms
      Symbol#to_proc    33.242k i/100ms
Calculating -------------------------------------
               Block    341.754k (± 4.5%) i/s -      1.713M in   5.025060s
      Symbol#to_proc    342.796k (± 2.4%) i/s -      1.729M in   5.045493s

Comparison:
      Symbol#to_proc:   342796.3 i/s
               Block:   341753.5 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   113.905M i/100ms
       block + yield   113.705M i/100ms
        unused block   113.490M i/100ms
               yield   113.715M i/100ms
Calculating -------------------------------------
          block.call      1.139B (± 0.8%) i/s -      5.695B in   5.001782s
       block + yield      1.142B (± 1.2%) i/s -      5.799B in   5.080759s
        unused block      1.142B (± 1.3%) i/s -      5.788B in   5.068091s
               yield      1.138B (± 0.8%) i/s -      5.799B in   5.098279s

Comparison:
        unused block: 1142230628.3 i/s
       block + yield: 1141515864.9 i/s - same-ish: difference falls within error
          block.call: 1138707131.2 i/s - same-ish: difference falls within error
               yield: 1137606756.7 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    34.791k i/100ms
      range#include?   305.000  i/100ms
       range#member?   417.000  i/100ms
       plain compare    28.962k i/100ms
Calculating -------------------------------------
        range#cover?    162.397k (±27.4%) i/s -    765.402k in   5.091945s
      range#include?      5.958k (±36.4%) i/s -     24.095k in   5.031510s
       range#member?      8.032k (±40.2%) i/s -     27.939k in   6.575750s
       plain compare    240.802k (±32.4%) i/s -      1.130M in   5.048751s

Comparison:
       plain compare:   240801.6 i/s
        range#cover?:   162396.6 i/s - same-ish: difference falls within error
       range#member?:     8032.4 i/s - 29.98x  (± 0.00) slower
      range#include?:     5958.1 i/s - 40.42x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    15.258M i/100ms
           String#=~    13.698M i/100ms
          Regexp#===    13.700M i/100ms
        String#match     9.711M i/100ms
Calculating -------------------------------------
       String#match?    154.568M (± 0.2%) i/s -    778.177M in   5.034566s
           String#=~    149.733M (± 0.0%) i/s -    753.387M in   5.031551s
          Regexp#===    149.735M (± 0.0%) i/s -    753.517M in   5.032335s
        String#match     90.123M (± 0.8%) i/s -    456.420M in   5.064762s

Comparison:
       String#match?: 154567631.6 i/s
          Regexp#===: 149735093.2 i/s - 1.03x  (± 0.00) slower
           String#=~: 149732531.3 i/s - 1.03x  (± 0.00) slower
        String#match: 90122751.3 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     2.580M i/100ms
      String#casecmp     3.963M i/100ms
Calculating -------------------------------------
String#downcase + ==     27.688M (± 5.6%) i/s -    139.337M in   5.048855s
      String#casecmp     38.058M (± 4.0%) i/s -    190.227M in   5.007104s

Comparison:
      String#casecmp: 38057762.5 i/s
String#downcase + ==: 27688498.8 i/s - 1.37x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     7.987M i/100ms
       String#concat     8.297M i/100ms
       String#append     8.366M i/100ms
         "foo" "bar"   114.195M i/100ms
  "#{'foo'}#{'bar'}"   114.032M i/100ms
Calculating -------------------------------------
            String#+     84.213M (± 3.5%) i/s -    423.297M in   5.033096s
       String#concat     84.265M (± 3.3%) i/s -    423.167M in   5.027705s
       String#append     84.349M (± 3.2%) i/s -    426.645M in   5.063713s
         "foo" "bar"      1.139B (± 0.9%) i/s -      5.710B in   5.013586s
  "#{'foo'}#{'bar'}"      1.140B (± 1.2%) i/s -      5.702B in   5.001719s

Comparison:
  "#{'foo'}#{'bar'}": 1140101016.8 i/s
         "foo" "bar": 1138948246.7 i/s - same-ish: difference falls within error
       String#append: 84349313.1 i/s - 13.52x  (± 0.00) slower
       String#concat: 84265328.3 i/s - 13.53x  (± 0.00) slower
            String#+: 84213107.4 i/s - 13.54x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   114.305M i/100ms
          String#dup   114.187M i/100ms
Calculating -------------------------------------
           String#+@      1.138B (± 0.9%) i/s -      5.715B in   5.023470s
          String#dup      1.138B (± 0.7%) i/s -      5.709B in   5.017226s

Comparison:
          String#dup: 1138003014.8 i/s
           String#+@: 1137793442.0 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.455M i/100ms
       String#match?     1.433M i/100ms
    String#end_with?    10.820M i/100ms
Calculating -------------------------------------
           String#=~     13.560M (± 1.7%) i/s -     68.362M in   5.043050s
       String#match?     18.213M (± 0.4%) i/s -     91.743M in   5.037379s
    String#end_with?    108.112M (± 0.2%) i/s -    541.015M in   5.004258s

Comparison:
    String#end_with?: 108111580.7 i/s
       String#match?: 18212672.0 i/s - 5.94x  (± 0.00) slower
           String#=~: 13559979.3 i/s - 7.97x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   447.977k i/100ms
          String#sub   786.490k i/100ms
String#dup["string"]=
                        11.282M i/100ms
Calculating -------------------------------------
         String#gsub      5.433M (± 8.8%) i/s -     27.327M in   5.073656s
          String#sub      8.408M (± 6.4%) i/s -     42.470M in   5.074960s
String#dup["string"]=
                        112.765M (± 0.2%) i/s -    564.078M in   5.002244s

Comparison:
String#dup["string"]=: 112765411.0 i/s
          String#sub:  8407994.0 i/s - 13.41x  (± 0.00) slower
         String#gsub:  5433253.9 i/s - 20.75x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   221.558k i/100ms
           String#tr   107.174k i/100ms
Calculating -------------------------------------
         String#gsub      2.674M (± 6.0%) i/s -     13.515M in   5.073696s
           String#tr      1.074M (± 3.6%) i/s -      5.466M in   5.094423s

Comparison:
         String#gsub:  2673993.5 i/s
           String#tr:  1074456.9 i/s - 2.49x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   113.717M i/100ms
         With Freeze   113.868M i/100ms
Calculating -------------------------------------
      Without Freeze      1.136B (± 0.8%) i/s -      5.686B in   5.003928s
         With Freeze      1.139B (± 0.7%) i/s -      5.693B in   5.000621s

Comparison:
         With Freeze: 1138593951.1 i/s
      Without Freeze: 1136344601.0 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     8.737k i/100ms
      String#squeeze    28.713k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    108.467k (± 8.4%) i/s -    541.694k in   5.031824s
      String#squeeze    287.940k (± 2.8%) i/s -      1.464M in   5.090006s

Comparison:
      String#squeeze:   287940.4 i/s
 String#gsub/regex+/:   108467.2 i/s - 2.65x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     3.319M i/100ms
       String#match?     5.054M i/100ms
  String#start_with?    20.542M i/100ms
Calculating -------------------------------------
           String#=~     33.917M (± 2.2%) i/s -    172.577M in   5.090930s
       String#match?     50.550M (± 0.2%) i/s -    257.767M in   5.099238s
  String#start_with?    205.619M (± 0.6%) i/s -      1.048B in   5.095312s

Comparison:
  String#start_with?: 205618522.3 i/s
       String#match?: 50550323.2 i/s - 4.07x  (± 0.00) slower
           String#=~: 33916522.2 i/s - 6.06x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    99.811k i/100ms
    String#[0, n] ==   171.331k i/100ms
   String#[RANGE] ==   176.245k i/100ms
   String#[0...n] ==   148.851k i/100ms
Calculating -------------------------------------
  String#start_with?      4.115M (± 0.1%) i/s -     20.661M in   5.020492s
    String#[0, n] ==      1.852M (± 3.8%) i/s -      9.252M in   5.003510s
   String#[RANGE] ==      1.796M (± 3.9%) i/s -      8.988M in   5.012455s
   String#[0...n] ==      1.500M (± 3.2%) i/s -      7.591M in   5.067964s

Comparison:
  String#start_with?:  4115312.6 i/s
    String#[0, n] ==:  1851958.3 i/s - 2.22x  (± 0.00) slower
   String#[RANGE] ==:  1796139.5 i/s - 2.29x  (± 0.00) slower
   String#[0...n] ==:  1499515.3 i/s - 2.74x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    11.313M i/100ms
 String#sub!'string'   744.494k i/100ms
String#gsub!'string'   585.321k i/100ms
  String#[/regexp/]=     1.857M i/100ms
 String#sub!/regexp/     2.077M i/100ms
String#gsub!/regexp/   647.358k i/100ms
Calculating -------------------------------------
  String#['string']=    113.135M (± 0.1%) i/s -    565.653M in   4.999800s
 String#sub!'string'      8.331M (±16.2%) i/s -     37.969M in   5.056336s
String#gsub!'string'      6.056M (± 2.2%) i/s -     30.437M in   5.028021s
  String#[/regexp/]=     18.449M (± 2.0%) i/s -     92.867M in   5.035855s
 String#sub!/regexp/     21.641M (± 2.1%) i/s -    110.062M in   5.088171s
String#gsub!/regexp/      6.387M (± 2.6%) i/s -     32.368M in   5.071506s

Comparison:
  String#['string']=: 113135187.0 i/s
 String#sub!/regexp/: 21641198.7 i/s - 5.23x  (± 0.00) slower
  String#[/regexp/]=: 18449335.0 i/s - 6.13x  (± 0.00) slower
 String#sub!'string':  8330623.0 i/s - 13.58x  (± 0.00) slower
String#gsub!/regexp/:  6386828.3 i/s - 17.71x  (± 0.00) slower
String#gsub!'string':  6056395.8 i/s - 18.68x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     2.316M i/100ms
        String#chomp     4.777M i/100ms
String#delete_suffix     7.912M i/100ms
Calculating -------------------------------------
          String#sub     26.204M (± 4.2%) i/s -    132.026M in   5.048334s
        String#chomp     47.704M (± 0.5%) i/s -    238.832M in   5.006659s
String#delete_suffix     79.050M (± 6.1%) i/s -    395.602M in   5.023375s

Comparison:
String#delete_suffix: 79050379.6 i/s
        String#chomp: 47703957.9 i/s - 1.66x  (± 0.00) slower
          String#sub: 26203684.1 i/s - 3.02x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   114.307M i/100ms
          String#sub    13.897M i/100ms
Calculating -------------------------------------
String#delete_prefix      1.137B (± 1.0%) i/s -      5.715B in   5.025268s
          String#sub    156.950M (± 0.2%) i/s -    792.101M in   5.046850s

Comparison:
String#delete_prefix: 1137425106.3 i/s
          String#sub: 156950442.4 i/s - 7.25x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.427M i/100ms
    String#unpack[0]     1.641M i/100ms
Calculating -------------------------------------
      String#unpack1     16.627M (± 4.5%) i/s -     84.220M in   5.076429s
    String#unpack[0]     16.680M (± 4.0%) i/s -     83.677M in   5.025251s

Comparison:
    String#unpack[0]: 16679545.8 i/s
      String#unpack1: 16626633.2 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.3.0-dev-01607d73, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    20.059k i/100ms
          Time.parse   359.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    283.719k (±22.0%) i/s -      1.324M in   5.021774s
          Time.parse      8.893k (±26.2%) i/s -     38.413k in   5.022141s

Comparison:
        Time.iso8601:   283718.7 i/s
          Time.parse:     8892.9 i/s - 31.90x  (± 0.00) slower

