$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       153.462M i/100ms
Function with splat arguments
                       629.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.566B (± 3.9%) i/s -      7.827B in   5.005439s
Function with splat arguments
                          6.793k (± 7.1%) i/s -     33.966k in   5.027661s

Comparison:
Function with single Array argument: 1565976528.8 i/s
Function with splat arguments:     6792.9 i/s - 230530.67x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   156.005M i/100ms
Sequential Assignment
                       157.626M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.569B (± 5.3%) i/s -      7.956B in   5.086543s
Sequential Assignment
                          1.592B (± 3.8%) i/s -      8.039B in   5.055995s

Comparison:
Sequential Assignment: 1592130717.0 i/s
 Parallel Assignment: 1568501070.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   153.276M i/100ms
       attr_accessor   159.603M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.581B (± 4.4%) i/s -      7.970B in   5.051786s
       attr_accessor      1.570B (± 3.6%) i/s -      7.980B in   5.090717s

Comparison:
   getter_and_setter: 1580778987.7 i/s
       attr_accessor: 1569599780.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     7.922k i/100ms
         respond_to?   156.520M i/100ms
Calculating -------------------------------------
      begin...rescue     62.879k (± 4.7%) i/s -    316.880k in   5.050633s
         respond_to?      1.603B (± 3.8%) i/s -      8.139B in   5.085977s

Comparison:
         respond_to?: 1602666620.3 i/s
      begin...rescue:    62878.9 i/s - 25488.13x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   157.904M i/100ms
             &method   152.990M i/100ms
Calculating -------------------------------------
              normal      1.534B (± 3.4%) i/s -      7.737B in   5.049966s
             &method      1.568B (± 3.8%) i/s -      7.955B in   5.081827s

Comparison:
             &method: 1567697987.5 i/s
              normal: 1533925197.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        83.000  i/100ms
       define_method   119.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.595k (±52.3%) i/s -      3.569k in   5.001209s
       define_method      5.446k (±49.2%) i/s -      7.259k in   5.074491s

Comparison:
       define_method:     5446.2 i/s
module_eval with string:     1594.7 i/s - 3.42x  (± 0.00) slower

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    30.635k i/100ms
       Kernel#format    43.729k i/100ms
            String#%    44.871k i/100ms
Calculating -------------------------------------
         Float#round    303.551k (± 4.2%) i/s -      1.532M in   5.055335s
       Kernel#format    445.576k (± 3.1%) i/s -      2.230M in   5.010236s
            String#%    448.634k (± 2.9%) i/s -      2.244M in   5.005404s

Comparison:
            String#%:   448633.9 i/s
       Kernel#format:   445575.5 i/s - same-ish: difference falls within error
         Float#round:   303551.0 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   151.834M i/100ms
          OpenStruct   144.762M i/100ms
Calculating -------------------------------------
                Hash      1.546B (± 3.8%) i/s -      7.744B in   5.015438s
          OpenStruct      1.473B (± 2.8%) i/s -      7.383B in   5.016032s

Comparison:
                Hash: 1546165224.3 i/s
          OpenStruct: 1473006540.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   157.939M i/100ms
          OpenStruct     2.203k i/100ms
Calculating -------------------------------------
                Hash      1.555B (± 5.0%) i/s -      7.897B in   5.092398s
          OpenStruct     18.196k (±10.2%) i/s -     90.323k in   5.031476s

Comparison:
                Hash: 1554700431.0 i/s
          OpenStruct:    18195.9 i/s - 85442.50x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   656.017k i/100ms
  ancestors.include?   103.062k i/100ms
Calculating -------------------------------------
  less than or equal      7.534M (± 3.9%) i/s -     38.049M in   5.058637s
  ancestors.include?      1.055M (± 4.1%) i/s -      5.359M in   5.086922s

Comparison:
  less than or equal:  7533641.9 i/s
  ancestors.include?:  1055415.9 i/s - 7.14x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     17.212  (± 5.8%) i/s -     86.000  in   5.012346s
         Kernel loop      0.407  (± 0.0%) i/s -      3.000  in   7.381268s

Comparison:
          While Loop:       17.2 i/s
         Kernel loop:        0.4 i/s - 42.33x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   189.142M i/100ms
         Array#first   183.886M i/100ms
Calculating -------------------------------------
           Array#[0]      1.915B (± 2.0%) i/s -      9.646B in   5.038376s
         Array#first      1.912B (± 2.7%) i/s -      9.562B in   5.005230s

Comparison:
           Array#[0]: 1915329580.7 i/s
         Array#first: 1911901855.7 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   141.459M i/100ms
          Array#last   145.935M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.436B (± 3.3%) i/s -      7.214B in   5.028481s
          Array#last      1.414B (± 5.7%) i/s -      7.151B in   5.077978s

Comparison:
          Array#[-1]: 1436354004.2 i/s
          Array#last: 1414066682.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   462.660k i/100ms
Calculating -------------------------------------
                find      0.096  (± 0.0%) i/s -      1.000  in  10.371387s
             bsearch      4.695M (± 4.8%) i/s -     23.596M in   5.038622s

Comparison:
             bsearch:  4694548.5 i/s
                find:        0.1 i/s - 48688980.17x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.080  (± 0.0%) i/s -      1.000  in  12.575800s
        Array#insert      0.696  (± 0.0%) i/s -      4.000  in   5.749195s

Comparison:
        Array#insert:        0.7 i/s
       Array#unshift:        0.1 i/s - 8.75x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   151.222M i/100ms
          Array#size   157.746M i/100ms
         Array#count   157.138M i/100ms
Calculating -------------------------------------
        Array#length      1.546B (± 5.1%) i/s -      7.712B in   5.003118s
          Array#size      1.571B (± 3.9%) i/s -      7.887B in   5.028302s
         Array#count      1.583B (± 6.6%) i/s -      8.014B in   5.091047s

Comparison:
         Array#count: 1583085774.4 i/s
          Array#size: 1570957693.8 i/s - same-ish: difference falls within error
        Array#length: 1545546231.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    23.002k i/100ms
        Array#sample     2.393M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    232.404k (± 2.2%) i/s -      1.173M in   5.050279s
        Array#sample     24.153M (± 1.8%) i/s -    122.054M in   5.055073s

Comparison:
        Array#sample: 24152906.4 i/s
 Array#shuffle.first:   232403.5 i/s - 103.93x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   192.000  i/100ms
          Date.parse   139.000  i/100ms
Calculating -------------------------------------
        Date.iso8601      9.081k (±50.0%) i/s -     34.176k in   5.023917s
          Date.parse      4.065k (±30.7%) i/s -     17.375k in   4.997890s

Comparison:
        Date.iso8601:     9080.7 i/s
          Date.parse:     4065.1 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   197.655k i/100ms
           Array#map   766.421k i/100ms
Calculating -------------------------------------
   Array#each + push      2.089M (± 5.1%) i/s -     10.476M in   5.028563s
           Array#map      7.650M (± 5.9%) i/s -     38.321M in   5.027966s

Comparison:
           Array#map:  7649536.8 i/s
   Array#each + push:  2089224.1 i/s - 3.66x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     8.841M i/100ms
               #each    10.320M i/100ms
Calculating -------------------------------------
            For loop     88.532M (± 1.8%) i/s -    450.867M in   5.094494s
               #each    102.984M (± 1.6%) i/s -    515.991M in   5.011735s

Comparison:
               #each: 102984315.3 i/s
            For loop: 88531857.7 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   794.679k i/100ms
     each_with_index     1.131M i/100ms
Calculating -------------------------------------
          While Loop      7.930M (± 2.3%) i/s -     39.734M in   5.013222s
     each_with_index     11.301M (± 3.1%) i/s -     56.546M in   5.008547s

Comparison:
     each_with_index: 11301326.3 i/s
          While Loop:  7930022.3 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   141.472k i/100ms
      inject to_proc   142.882k i/100ms
        inject block   143.528k i/100ms
Calculating -------------------------------------
       inject symbol      1.427M (± 2.9%) i/s -      7.215M in   5.059970s
      inject to_proc      1.439M (± 2.1%) i/s -      7.287M in   5.066787s
        inject block      1.437M (± 1.8%) i/s -      7.320M in   5.093851s

Comparison:
      inject to_proc:  1438849.6 i/s
        inject block:  1437486.9 i/s - same-ish: difference falls within error
       inject symbol:  1427159.9 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     9.811k i/100ms
   Array#map.flatten    15.091k i/100ms
      Array#flat_map    36.374k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    153.470k (± 6.5%) i/s -    765.258k in   5.009999s
   Array#map.flatten    154.758k (± 5.5%) i/s -    784.732k in   5.087620s
      Array#flat_map    364.541k (± 4.6%) i/s -      1.855M in   5.100773s

Comparison:
      Array#flat_map:   364540.9 i/s
   Array#map.flatten:   154758.4 i/s - 2.36x  (± 0.00) slower
Array#map.flatten(1):   153469.5 i/s - 2.38x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   169.372k i/100ms
  Array#reverse_each     1.155M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.673M (± 4.1%) i/s -      8.469M in   5.071418s
  Array#reverse_each     11.518M (± 2.3%) i/s -     57.739M in   5.015635s

Comparison:
  Array#reverse_each: 11518150.9 i/s
  Array#reverse.each:  1672836.3 i/s - 6.89x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       540.340k i/100ms
   Enumerable#detect     2.824M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          6.056M (± 7.3%) i/s -    120.496M in  20.032881s
   Enumerable#detect     28.385M (± 3.5%) i/s -    567.531M in  20.020786s

Comparison:
   Enumerable#detect: 28384927.3 i/s
Enumerable#select.first:  6056027.0 i/s - 4.69x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       174.022k i/100ms
Enumerable#select.last
                       288.591k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.749M (± 3.3%) i/s -      8.875M in   5.078748s
Enumerable#select.last
                          2.939M (± 3.7%) i/s -     14.718M in   5.014651s

Comparison:
Enumerable#select.last:  2939359.2 i/s
Enumerable#reverse.detect:  1749495.4 i/s - 1.68x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.445k i/100ms
  Enumerable#sort_by     2.997k i/100ms
     Enumerable#sort     4.609k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         31.478k (±17.9%) i/s -    151.590k in   5.038042s
  Enumerable#sort_by     33.119k (± 8.8%) i/s -    164.835k in   5.015997s
     Enumerable#sort     45.571k (± 5.6%) i/s -    230.450k in   5.077781s

Comparison:
     Enumerable#sort:    45571.4 i/s
  Enumerable#sort_by:    33118.8 i/s - 1.38x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    31477.6 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   361.132k i/100ms
Enumerable#sort_by...first
                         4.668k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      3.598M (± 3.4%) i/s -     18.057M in   5.024232s
Enumerable#sort_by...first
                         64.003k (± 4.8%) i/s -    322.092k in   5.045202s

Comparison:
   Enumerable#min_by:  3598228.9 i/s
Enumerable#sort_by...first:    64003.4 i/s - 56.22x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   286.578k i/100ms
            Hash#dup   322.849k i/100ms
Calculating -------------------------------------
              Hash[]      3.360M (± 7.4%) i/s -     16.908M in   5.061967s
            Hash#dup      3.480M (± 4.2%) i/s -     17.434M in   5.018881s

Comparison:
            Hash#dup:  3480281.6 i/s
              Hash[]:  3360471.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   182.856M i/100ms
  Hash#fetch, symbol   191.986M i/100ms
     Hash#[], string     5.170M i/100ms
  Hash#fetch, string     5.104M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.832B (± 4.4%) i/s -      9.143B in   5.001261s
  Hash#fetch, symbol      1.890B (± 3.8%) i/s -      9.599B in   5.086626s
     Hash#[], string     49.561M (± 2.7%) i/s -    248.145M in   5.010522s
  Hash#fetch, string     49.844M (± 3.4%) i/s -    250.093M in   5.023785s

Comparison:
  Hash#fetch, symbol: 1890058608.9 i/s
     Hash#[], symbol: 1831732588.0 i/s - same-ish: difference falls within error
  Hash#fetch, string: 49843725.3 i/s - 37.92x  (± 0.00) slower
     Hash#[], string: 49561068.0 i/s - 38.14x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    72.192M i/100ms
             Hash#[]    73.006M i/100ms
          Hash#[] ||    72.538M i/100ms
          Hash#[] &&    73.595M i/100ms
          Hash#fetch    73.732M i/100ms
 Hash#fetch fallback    72.982M i/100ms
Calculating -------------------------------------
            Hash#dig    736.061M (± 2.2%) i/s -      3.682B in   5.004422s
             Hash#[]    728.421M (± 3.9%) i/s -      3.650B in   5.019929s
          Hash#[] ||    735.603M (± 2.5%) i/s -      3.699B in   5.032330s
          Hash#[] &&    732.534M (± 3.2%) i/s -      3.680B in   5.028803s
          Hash#fetch    732.180M (± 3.0%) i/s -      3.687B in   5.039964s
 Hash#fetch fallback    709.074M (± 5.8%) i/s -      3.576B in   5.061584s

Comparison:
            Hash#dig: 736061268.1 i/s
          Hash#[] ||: 735602910.6 i/s - same-ish: difference falls within error
          Hash#[] &&: 732534035.4 i/s - same-ish: difference falls within error
          Hash#fetch: 732179596.5 i/s - same-ish: difference falls within error
             Hash#[]: 728421046.7 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 709074202.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   166.323M i/100ms
  Hash#fetch + block   192.077M i/100ms
    Hash#fetch + arg   161.106M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.615B (± 5.2%) i/s -      8.150B in   5.060669s
  Hash#fetch + block      1.896B (± 4.8%) i/s -      9.604B in   5.079902s
    Hash#fetch + arg      1.600B (± 4.7%) i/s -      8.055B in   5.048205s

Comparison:
  Hash#fetch + block: 1895570621.3 i/s
  Hash#fetch + const: 1615124914.1 i/s - 1.17x  (± 0.00) slower
    Hash#fetch + arg: 1599570883.9 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    19.589k i/100ms
         sort + to_h    10.019k i/100ms
Calculating -------------------------------------
      sort_by + to_h    342.918k (± 7.6%) i/s -      1.724M in   5.061360s
         sort + to_h     90.604k (± 5.9%) i/s -    460.874k in   5.105082s

Comparison:
      sort_by + to_h:   342917.5 i/s
         sort + to_h:    90604.3 i/s - 3.78x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each    85.195k i/100ms
       Hash#each_key   117.681k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.104M (± 8.1%) i/s -      5.538M in   5.059524s
       Hash#each_key      1.195M (± 4.5%) i/s -      6.002M in   5.032853s

Comparison:
       Hash#each_key:  1195029.4 i/s
      Hash#keys.each:  1103669.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?    94.000  i/100ms
           Hash#key?    12.823M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.778k (±16.5%) i/s -      8.460k in   5.007226s
           Hash#key?    128.461M (± 2.7%) i/s -    653.994M in   5.095089s

Comparison:
           Hash#key?: 128460588.8 i/s
  Hash#keys.include?:     1777.5 i/s - 72269.54x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    14.073k i/100ms
            Hash#[]=    30.015k i/100ms
Calculating -------------------------------------
         Hash#merge!    313.838k (± 8.8%) i/s -      1.562M in   5.026334s
            Hash#[]=    317.000k (± 4.9%) i/s -      1.591M in   5.031373s

Comparison:
            Hash#[]=:   317000.3 i/s
         Hash#merge!:   313838.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        14.553k i/100ms
      Hash#merge({})    12.422k i/100ms
 Hash#dup#merge!({})    20.931k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        239.307k (± 4.6%) i/s -      1.193M in   4.998559s
      Hash#merge({})    135.157k (± 3.8%) i/s -    683.210k in   5.062701s
 Hash#dup#merge!({})    205.247k (± 3.8%) i/s -      1.026M in   5.004787s

Comparison:
{}#merge!(Hash) do end:   239306.8 i/s
 Hash#dup#merge!({}):   205247.4 i/s - 1.17x  (± 0.00) slower
      Hash#merge({}):   135157.2 i/s - 1.77x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   154.750M i/100ms
          Hash#merge   159.429M i/100ms
Calculating -------------------------------------
        Hash#**other      1.530B (± 5.2%) i/s -      7.738B in   5.070468s
          Hash#merge      1.578B (± 4.5%) i/s -      7.971B in   5.063124s

Comparison:
          Hash#merge: 1577607949.7 i/s
        Hash#**other: 1530111160.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   538.000  i/100ms
         Hash#merge!    30.387k i/100ms
Calculating -------------------------------------
          Hash#merge      6.280k (± 9.2%) i/s -     31.204k in   5.015090s
         Hash#merge!    310.781k (± 6.0%) i/s -      1.550M in   5.007577s

Comparison:
         Hash#merge!:   310781.5 i/s
          Hash#merge:     6280.3 i/s - 49.49x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      764.197k i/100ms
Array#each             766.088k i/100ms
Array#each_w/_object   774.405k i/100ms
Hash#select-include      1.561M i/100ms
Calculating -------------------------------------
Hash#native-slice         9.311M (± 5.5%) i/s -     46.616M in   5.021826s
Array#each                7.816M (± 4.0%) i/s -     39.070M in   5.007063s
Array#each_w/_object      7.905M (± 4.2%) i/s -     39.495M in   5.005477s
Hash#select-include      14.691M (± 4.0%) i/s -     74.944M in   5.109808s

Comparison:
Hash#select-include : 14690750.6 i/s
Hash#native-slice   :  9311488.9 i/s - 1.58x  (± 0.00) slower
Array#each_w/_object:  7905306.0 i/s - 1.86x  (± 0.00) slower
Array#each          :  7816498.8 i/s - 1.88x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?    89.000  i/100ms
         Hash#value?   713.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.924k (±14.4%) i/s -      9.256k in   4.998698s
         Hash#value?      7.323k (± 3.5%) i/s -     37.076k in   5.069354s

Comparison:
         Hash#value?:     7323.3 i/s
Hash#values.include?:     1924.1 i/s - 3.81x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   160.389M i/100ms
                send   155.161M i/100ms
      method_missing   157.739M i/100ms
Calculating -------------------------------------
                call      1.571B (± 4.1%) i/s -      7.859B in   5.010658s
                send      1.537B (± 4.2%) i/s -      7.758B in   5.055091s
      method_missing      1.578B (± 4.1%) i/s -      7.887B in   5.007430s

Comparison:
      method_missing: 1577801961.9 i/s
                call: 1571157585.3 i/s - same-ish: difference falls within error
                send: 1537416801.1 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    36.749k i/100ms
      Symbol#to_proc    38.114k i/100ms
Calculating -------------------------------------
               Block    406.224k (± 8.2%) i/s -      2.021M in   5.017693s
      Symbol#to_proc    410.370k (± 6.0%) i/s -      2.058M in   5.035096s

Comparison:
      Symbol#to_proc:   410369.9 i/s
               Block:   406224.4 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   191.483M i/100ms
       block + yield   189.450M i/100ms
        unused block   192.600M i/100ms
               yield   193.115M i/100ms
Calculating -------------------------------------
          block.call      1.918B (± 3.5%) i/s -      9.574B in   4.998197s
       block + yield      1.898B (± 5.5%) i/s -      9.472B in   5.007543s
        unused block      1.923B (± 2.3%) i/s -      9.630B in   5.010950s
               yield      1.910B (± 3.8%) i/s -      9.656B in   5.063059s

Comparison:
        unused block: 1922833622.7 i/s
          block.call: 1918209902.7 i/s - same-ish: difference falls within error
               yield: 1910287257.0 i/s - same-ish: difference falls within error
       block + yield: 1898333388.7 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    25.376k i/100ms
      range#include?   144.000  i/100ms
       range#member?   109.000  i/100ms
       plain compare    23.569k i/100ms
Calculating -------------------------------------
        range#cover?     96.054k (±30.6%) i/s -    456.768k in   5.182268s
      range#include?      4.542k (±33.8%) i/s -     15.984k in   5.006253s
       range#member?      4.588k (±38.4%) i/s -     12.208k in   5.036881s
       plain compare    289.051k (±30.0%) i/s -      1.296M in   5.039195s

Comparison:
       plain compare:   289051.2 i/s
        range#cover?:    96054.5 i/s - 3.01x  (± 0.00) slower
       range#member?:     4588.1 i/s - 63.00x  (± 0.00) slower
      range#include?:     4541.7 i/s - 63.64x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     2.406M i/100ms
           String#=~     2.564M i/100ms
          Regexp#===     2.560M i/100ms
        String#match     2.452M i/100ms
Calculating -------------------------------------
       String#match?     27.752M (± 6.4%) i/s -    139.557M in   5.052241s
           String#=~     26.144M (± 5.1%) i/s -    130.777M in   5.016509s
          Regexp#===     26.812M (± 4.2%) i/s -    135.678M in   5.069839s
        String#match     24.582M (± 4.4%) i/s -    122.617M in   4.999062s

Comparison:
       String#match?: 27751764.2 i/s
          Regexp#===: 26812040.3 i/s - same-ish: difference falls within error
           String#=~: 26143869.4 i/s - same-ish: difference falls within error
        String#match: 24581675.7 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.473M i/100ms
      String#casecmp     2.928M i/100ms
Calculating -------------------------------------
String#downcase + ==     16.140M (± 8.8%) i/s -     81.040M in   5.070588s
      String#casecmp     29.092M (± 4.4%) i/s -    146.389M in   5.044994s

Comparison:
      String#casecmp: 29091694.7 i/s
String#downcase + ==: 16139926.3 i/s - 1.80x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+   157.999M i/100ms
       String#concat   159.430M i/100ms
       String#append   161.401M i/100ms
         "foo" "bar"   163.011M i/100ms
  "#{'foo'}#{'bar'}"   158.075M i/100ms
Calculating -------------------------------------
            String#+      1.646B (± 3.6%) i/s -      8.374B in   5.092774s
       String#concat      1.564B (± 4.6%) i/s -      7.812B in   5.006916s
       String#append      1.583B (± 4.1%) i/s -      7.909B in   5.003230s
         "foo" "bar"      1.568B (± 4.4%) i/s -      7.825B in   4.999163s
  "#{'foo'}#{'bar'}"      1.549B (± 3.9%) i/s -      7.746B in   5.008452s

Comparison:
            String#+: 1646449033.5 i/s
       String#append: 1583313584.1 i/s - same-ish: difference falls within error
         "foo" "bar": 1568159300.4 i/s - same-ish: difference falls within error
       String#concat: 1563628474.0 i/s - same-ish: difference falls within error
  "#{'foo'}#{'bar'}": 1548830774.2 i/s - same-ish: difference falls within error

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   152.420M i/100ms
          String#dup   158.568M i/100ms
Calculating -------------------------------------
           String#+@      1.583B (± 6.3%) i/s -      7.926B in   5.030314s
          String#dup      1.577B (± 4.6%) i/s -      7.928B in   5.037533s

Comparison:
           String#+@: 1582539741.4 i/s
          String#dup: 1577357870.2 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   620.772k i/100ms
       String#match?     1.273M i/100ms
    String#end_with?    15.211M i/100ms
Calculating -------------------------------------
           String#=~      6.989M (± 7.5%) i/s -     35.384M in   5.093570s
       String#match?     12.878M (± 4.8%) i/s -     64.941M in   5.055714s
    String#end_with?    151.177M (± 1.9%) i/s -    760.536M in   5.032681s

Comparison:
    String#end_with?: 151176973.9 i/s
       String#match?: 12877600.1 i/s - 11.74x  (± 0.00) slower
           String#=~:  6989038.6 i/s - 21.63x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    50.498k i/100ms
          String#sub   505.235k i/100ms
String#dup["string"]=
                        13.421M i/100ms
Calculating -------------------------------------
         String#gsub      1.092M (± 5.6%) i/s -      5.454M in   5.011923s
          String#sub      5.783M (± 9.2%) i/s -     28.798M in   5.026481s
String#dup["string"]=
                        136.384M (± 1.3%) i/s -    684.457M in   5.019486s

Comparison:
String#dup["string"]=: 136383608.5 i/s
          String#sub:  5782577.8 i/s - 23.59x  (± 0.00) slower
         String#gsub:  1092357.4 i/s - 124.85x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    89.963k i/100ms
           String#tr   127.422k i/100ms
Calculating -------------------------------------
         String#gsub      2.199M (± 9.5%) i/s -     10.886M in   5.004906s
           String#tr      1.279M (± 4.4%) i/s -      6.499M in   5.092657s

Comparison:
         String#gsub:  2198542.5 i/s
           String#tr:  1278698.3 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   156.108M i/100ms
         With Freeze   155.007M i/100ms
Calculating -------------------------------------
      Without Freeze      1.589B (± 3.8%) i/s -      7.962B in   5.017917s
         With Freeze      1.623B (± 3.7%) i/s -      8.215B in   5.069448s

Comparison:
         With Freeze: 1622816484.9 i/s
      Without Freeze: 1588964424.5 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     4.438k i/100ms
      String#squeeze    50.895k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     75.003k (±12.2%) i/s -    368.354k in   5.018350s
      String#squeeze    515.055k (± 3.9%) i/s -      2.596M in   5.047911s

Comparison:
      String#squeeze:   515055.0 i/s
 String#gsub/regex+/:    75003.3 i/s - 6.87x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   739.885k i/100ms
       String#match?     2.162M i/100ms
  String#start_with?     2.020M i/100ms
Calculating -------------------------------------
           String#=~      9.517M (± 8.8%) i/s -     47.353M in   5.019061s
       String#match?     22.349M (± 5.0%) i/s -    112.438M in   5.045467s
  String#start_with?     20.258M (± 2.8%) i/s -    103.012M in   5.089189s

Comparison:
       String#match?: 22349465.9 i/s
  String#start_with?: 20258215.1 i/s - 1.10x  (± 0.00) slower
           String#=~:  9517470.1 i/s - 2.35x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   325.965k i/100ms
    String#[0, n] ==   200.531k i/100ms
   String#[RANGE] ==   223.546k i/100ms
   String#[0...n] ==   168.131k i/100ms
Calculating -------------------------------------
  String#start_with?      3.307M (± 4.8%) i/s -     16.624M in   5.039485s
    String#[0, n] ==      2.012M (± 6.4%) i/s -     10.227M in   5.105901s
   String#[RANGE] ==      2.229M (± 5.8%) i/s -     11.177M in   5.033722s
   String#[0...n] ==      1.705M (± 6.7%) i/s -      8.575M in   5.053939s

Comparison:
  String#start_with?:  3307040.9 i/s
   String#[RANGE] ==:  2228500.0 i/s - 1.48x  (± 0.00) slower
    String#[0, n] ==:  2011801.3 i/s - 1.64x  (± 0.00) slower
   String#[0...n] ==:  1705173.8 i/s - 1.94x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    14.309M i/100ms
 String#sub!'string'   440.079k i/100ms
String#gsub!'string'   116.476k i/100ms
  String#[/regexp/]=   776.637k i/100ms
 String#sub!/regexp/   577.780k i/100ms
String#gsub!/regexp/   342.836k i/100ms
Calculating -------------------------------------
  String#['string']=    142.562M (± 2.3%) i/s -    715.427M in   5.021214s
 String#sub!'string'      7.144M (± 5.6%) i/s -     35.646M in   5.007410s
String#gsub!'string'      1.170M (± 2.4%) i/s -      5.940M in   5.081992s
  String#[/regexp/]=      8.328M (± 4.0%) i/s -     41.938M in   5.043977s
 String#sub!/regexp/      5.722M (± 3.5%) i/s -     28.889M in   5.055414s
String#gsub!/regexp/      4.036M (± 3.4%) i/s -     20.227M in   5.018736s

Comparison:
  String#['string']=: 142562203.6 i/s
  String#[/regexp/]=:  8328492.1 i/s - 17.12x  (± 0.00) slower
 String#sub!'string':  7144020.5 i/s - 19.96x  (± 0.00) slower
 String#sub!/regexp/:  5721928.2 i/s - 24.92x  (± 0.00) slower
String#gsub!/regexp/:  4035604.4 i/s - 35.33x  (± 0.00) slower
String#gsub!'string':  1169634.0 i/s - 121.89x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub   413.210k i/100ms
        String#chomp     4.222M i/100ms
String#delete_suffix     5.116M i/100ms
Calculating -------------------------------------
          String#sub      5.562M (±12.3%) i/s -     27.685M in   5.064539s
        String#chomp     41.026M (± 5.8%) i/s -    206.866M in   5.060609s
String#delete_suffix     51.255M (± 5.3%) i/s -    260.936M in   5.107956s

Comparison:
String#delete_suffix: 51255031.9 i/s
        String#chomp: 41025694.9 i/s - 1.25x  (± 0.00) slower
          String#sub:  5561850.9 i/s - 9.22x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix     2.003M i/100ms
          String#sub   617.457k i/100ms
Calculating -------------------------------------
String#delete_prefix     23.670M (± 7.3%) i/s -    118.177M in   5.022437s
          String#sub      6.127M (± 9.5%) i/s -     30.873M in   5.086846s

Comparison:
String#delete_prefix: 23670107.8 i/s
          String#sub:  6127410.9 i/s - 3.86x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.116M i/100ms
    String#unpack[0]     1.334M i/100ms
Calculating -------------------------------------
      String#unpack1     13.598M (± 4.9%) i/s -     68.098M in   5.020930s
    String#unpack[0]     13.571M (± 4.3%) i/s -     68.018M in   5.021705s

Comparison:
      String#unpack1: 13597657.1 i/s
    String#unpack[0]: 13571391.2 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.0.0-dev-9bcfd4f0, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    10.132k i/100ms
          Time.parse    40.000  i/100ms
Calculating -------------------------------------
        Time.iso8601     46.351k (± 4.1%) i/s -    233.036k in   5.036891s
          Time.parse      2.851k (±20.9%) i/s -     11.520k in   4.995054s

Comparison:
        Time.iso8601:    46351.0 i/s
          Time.parse:     2850.5 i/s - 16.26x  (± 0.00) slower

