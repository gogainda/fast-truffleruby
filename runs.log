$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       113.682M i/100ms
Function with splat arguments
                         1.186k i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.138B (± 1.1%) i/s -      5.798B in   5.096098s
Function with splat arguments
                         12.889k (± 7.6%) i/s -     64.044k in   4.999956s

Comparison:
Function with single Array argument: 1137813107.1 i/s
Function with splat arguments:    12888.7 i/s - 88280.08x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   113.706M i/100ms
Sequential Assignment
                       113.392M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.139B (± 1.1%) i/s -      5.799B in   5.092817s
Sequential Assignment
                          1.137B (± 0.6%) i/s -      5.783B in   5.087948s

Comparison:
 Parallel Assignment: 1138783045.1 i/s
Sequential Assignment: 1136644981.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   113.605M i/100ms
       attr_accessor   114.006M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.135B (± 0.7%) i/s -      5.680B in   5.003534s
       attr_accessor      1.139B (± 0.9%) i/s -      5.700B in   5.007096s

Comparison:
       attr_accessor: 1138529518.3 i/s
   getter_and_setter: 1135303105.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     9.705k i/100ms
         respond_to?   113.670M i/100ms
Calculating -------------------------------------
      begin...rescue     68.410k (± 3.0%) i/s -    349.380k in   5.111896s
         respond_to?      1.137B (± 0.8%) i/s -      5.797B in   5.099907s

Comparison:
         respond_to?: 1136786249.4 i/s
      begin...rescue:    68409.9 i/s - 16617.28x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   114.019M i/100ms
             &method    18.612M i/100ms
Calculating -------------------------------------
              normal      1.134B (± 0.6%) i/s -      5.701B in   5.025801s
             &method    228.521M (± 2.5%) i/s -      1.154B in   5.053049s

Comparison:
              normal: 1134382227.8 i/s
             &method: 228521056.7 i/s - 4.96x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       144.000  i/100ms
       define_method   151.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.259k (±60.7%) i/s -      4.896k in   5.535401s
       define_method      5.821k (±47.1%) i/s -      8.607k in   5.015110s

Comparison:
       define_method:     5820.6 i/s
module_eval with string:     2259.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    84.195k i/100ms
       Kernel#format    73.281k i/100ms
            String#%    73.973k i/100ms
Calculating -------------------------------------
         Float#round    909.969k (± 2.5%) i/s -      4.547M in   4.999472s
       Kernel#format    747.699k (± 2.5%) i/s -      3.737M in   5.001694s
            String#%    748.705k (± 2.4%) i/s -      3.773M in   5.041818s

Comparison:
         Float#round:   909969.2 i/s
            String#%:   748705.1 i/s - 1.22x  (± 0.00) slower
       Kernel#format:   747699.3 i/s - 1.22x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   114.040M i/100ms
          OpenStruct   113.524M i/100ms
Calculating -------------------------------------
                Hash      1.136B (± 0.9%) i/s -      5.702B in   5.019918s
          OpenStruct      1.137B (± 0.7%) i/s -      5.790B in   5.094181s

Comparison:
          OpenStruct: 1136589883.5 i/s
                Hash: 1135956433.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   113.510M i/100ms
          OpenStruct     2.867k i/100ms
Calculating -------------------------------------
                Hash      1.131B (± 0.5%) i/s -      5.676B in   5.016685s
          OpenStruct     32.570k (± 9.9%) i/s -    163.419k in   5.098699s

Comparison:
                Hash: 1131356372.4 i/s
          OpenStruct:    32570.3 i/s - 34735.85x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   848.540k i/100ms
  ancestors.include?   164.098k i/100ms
Calculating -------------------------------------
  less than or equal      9.169M (± 3.1%) i/s -     45.821M in   5.002839s
  ancestors.include?      1.664M (± 4.1%) i/s -      8.369M in   5.038606s

Comparison:
  less than or equal:  9168600.8 i/s
  ancestors.include?:  1663787.1 i/s - 5.51x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     11.385  (± 0.0%) i/s -     57.000  in   5.007230s
         Kernel loop      3.718  (± 0.0%) i/s -     19.000  in   5.113552s

Comparison:
          While Loop:       11.4 i/s
         Kernel loop:        3.7 i/s - 3.06x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   113.687M i/100ms
         Array#first   113.803M i/100ms
Calculating -------------------------------------
           Array#[0]      1.139B (± 1.1%) i/s -      5.798B in   5.093087s
         Array#first      1.141B (± 1.0%) i/s -      5.804B in   5.087785s

Comparison:
         Array#first: 1140883941.7 i/s
           Array#[0]: 1138550976.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   114.125M i/100ms
          Array#last   114.047M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.136B (± 0.7%) i/s -      5.706B in   5.025005s
          Array#last      1.137B (± 0.7%) i/s -      5.702B in   5.014765s

Comparison:
          Array#last: 1137171846.8 i/s
          Array#[-1]: 1135616095.3 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   506.163k i/100ms
Calculating -------------------------------------
                find     10.103  (±19.8%) i/s -     31.000  in   5.083010s
             bsearch      5.091M (± 3.5%) i/s -     25.814M in   5.076929s

Comparison:
             bsearch:  5091141.7 i/s
                find:       10.1 i/s - 503917.93x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.068  (± 0.0%) i/s -      1.000  in  14.666135s
        Array#insert      1.018  (± 0.0%) i/s -      6.000  in   5.891449s

Comparison:
        Array#insert:        1.0 i/s
       Array#unshift:        0.1 i/s - 14.94x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   113.427M i/100ms
          Array#size   114.267M i/100ms
         Array#count   113.793M i/100ms
Calculating -------------------------------------
        Array#length      1.137B (± 1.0%) i/s -      5.785B in   5.090445s
          Array#size      1.137B (± 0.8%) i/s -      5.713B in   5.024588s
         Array#count      1.135B (± 0.4%) i/s -      5.690B in   5.013245s

Comparison:
          Array#size: 1137158109.1 i/s
        Array#length: 1136503648.3 i/s - same-ish: difference falls within error
         Array#count: 1134934185.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    22.480k i/100ms
        Array#sample     2.677M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    242.556k (± 1.7%) i/s -      1.214M in   5.006282s
        Array#sample     26.740M (± 0.1%) i/s -    133.827M in   5.004661s

Comparison:
        Array#sample: 26740402.8 i/s
 Array#shuffle.first:   242556.0 i/s - 110.24x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   732.000  i/100ms
          Date.parse   331.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     25.542k (±34.5%) i/s -     95.160k in   4.707268s
          Date.parse      9.110k (±27.8%) i/s -     38.065k in   5.014667s

Comparison:
        Date.iso8601:    25541.6 i/s
          Date.parse:     9110.3 i/s - 2.80x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   170.976k i/100ms
           Array#map     1.074M i/100ms
Calculating -------------------------------------
   Array#each + push      1.948M (± 5.0%) i/s -      9.746M in   5.016457s
           Array#map     10.874M (± 5.9%) i/s -     54.757M in   5.053568s

Comparison:
           Array#map: 10874180.8 i/s
   Array#each + push:  1948117.5 i/s - 5.58x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     9.690M i/100ms
               #each    39.678M i/100ms
Calculating -------------------------------------
            For loop     97.123M (± 0.3%) i/s -    494.197M in   5.088416s
               #each    393.885M (± 1.2%) i/s -      1.984B in   5.037465s

Comparison:
               #each: 393884962.8 i/s
            For loop: 97122648.7 i/s - 4.06x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   836.348k i/100ms
     each_with_index     1.043M i/100ms
Calculating -------------------------------------
          While Loop      8.364M (± 0.1%) i/s -     41.817M in   4.999874s
     each_with_index     10.426M (± 0.0%) i/s -     52.139M in   5.000832s

Comparison:
     each_with_index: 10426136.5 i/s
          While Loop:  8363696.7 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   159.404k i/100ms
      inject to_proc   158.969k i/100ms
        inject block   160.374k i/100ms
Calculating -------------------------------------
       inject symbol      1.607M (± 0.1%) i/s -      8.130M in   5.059534s
      inject to_proc      1.589M (± 0.1%) i/s -      7.948M in   5.001322s
        inject block      1.628M (± 0.0%) i/s -      8.179M in   5.024754s

Comparison:
        inject block:  1627756.5 i/s
       inject symbol:  1606791.4 i/s - 1.01x  (± 0.00) slower
      inject to_proc:  1589271.6 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    17.187k i/100ms
   Array#map.flatten    17.874k i/100ms
      Array#flat_map    42.687k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    179.983k (± 4.1%) i/s -    910.911k in   5.070257s
   Array#map.flatten    181.507k (± 3.9%) i/s -    911.574k in   5.030380s
      Array#flat_map    425.391k (± 3.1%) i/s -      2.134M in   5.022573s

Comparison:
      Array#flat_map:   425390.6 i/s
   Array#map.flatten:   181506.6 i/s - 2.34x  (± 0.00) slower
Array#map.flatten(1):   179982.7 i/s - 2.36x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   246.598k i/100ms
  Array#reverse_each     2.113M i/100ms
Calculating -------------------------------------
  Array#reverse.each      2.503M (± 3.2%) i/s -     12.576M in   5.029887s
  Array#reverse_each     21.028M (± 1.3%) i/s -    105.670M in   5.026084s

Comparison:
  Array#reverse_each: 21028109.0 i/s
  Array#reverse.each:  2503057.4 i/s - 8.40x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       701.877k i/100ms
   Enumerable#detect     2.717M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          7.650M (± 5.9%) i/s -    152.307M in  19.999298s
   Enumerable#detect     27.156M (± 0.3%) i/s -    543.396M in  20.010472s

Comparison:
   Enumerable#detect: 27155907.2 i/s
Enumerable#select.first:  7649662.1 i/s - 3.55x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       249.560k i/100ms
Enumerable#select.last
                       400.536k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          2.550M (± 2.8%) i/s -     12.977M in   5.094376s
Enumerable#select.last
                          4.045M (± 3.0%) i/s -     20.427M in   5.054616s

Comparison:
Enumerable#select.last:  4045097.9 i/s
Enumerable#reverse.detect:  2549511.7 i/s - 1.59x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.593k i/100ms
  Enumerable#sort_by     3.122k i/100ms
     Enumerable#sort     4.078k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         29.595k (±16.5%) i/s -    137.429k in   5.070406s
  Enumerable#sort_by     29.755k (±16.4%) i/s -    137.368k in   5.053872s
     Enumerable#sort     40.733k (± 1.4%) i/s -    203.900k in   5.006851s

Comparison:
     Enumerable#sort:    40733.1 i/s
  Enumerable#sort_by:    29754.9 i/s - 1.37x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    29595.3 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   340.062k i/100ms
Enumerable#sort_by...first
                         6.915k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      3.401M (± 0.1%) i/s -     17.003M in   4.999636s
Enumerable#sort_by...first
                         72.824k (± 2.6%) i/s -    366.495k in   5.036123s

Comparison:
   Enumerable#min_by:  3400869.6 i/s
Enumerable#sort_by...first:    72823.8 i/s - 46.70x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   379.738k i/100ms
            Hash#dup   422.908k i/100ms
Calculating -------------------------------------
              Hash[]      4.563M (± 2.5%) i/s -     23.164M in   5.080133s
            Hash#dup      4.521M (± 2.8%) i/s -     22.837M in   5.055738s

Comparison:
              Hash[]:  4562747.7 i/s
            Hash#dup:  4520713.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   113.682M i/100ms
  Hash#fetch, symbol   114.076M i/100ms
     Hash#[], string     6.547M i/100ms
  Hash#fetch, string     6.049M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.137B (± 0.6%) i/s -      5.798B in   5.099127s
  Hash#fetch, symbol      1.137B (± 0.8%) i/s -      5.704B in   5.016927s
     Hash#[], string     65.729M (± 0.4%) i/s -    333.882M in   5.079744s
  Hash#fetch, string     62.470M (± 0.5%) i/s -    314.571M in   5.035706s

Comparison:
     Hash#[], symbol: 1137060522.7 i/s
  Hash#fetch, symbol: 1136988806.8 i/s - same-ish: difference falls within error
     Hash#[], string: 65729238.8 i/s - 17.30x  (± 0.00) slower
  Hash#fetch, string: 62469955.6 i/s - 18.20x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    41.729M i/100ms
             Hash#[]    42.135M i/100ms
          Hash#[] ||    42.048M i/100ms
          Hash#[] &&    49.799M i/100ms
          Hash#fetch    41.779M i/100ms
 Hash#fetch fallback    41.705M i/100ms
Calculating -------------------------------------
            Hash#dig    420.610M (± 1.0%) i/s -      2.128B in   5.060144s
             Hash#[]    420.847M (± 0.8%) i/s -      2.107B in   5.006297s
          Hash#[] ||    421.094M (± 1.1%) i/s -      2.144B in   5.093106s
          Hash#[] &&    497.743M (± 0.2%) i/s -      2.490B in   5.002479s
          Hash#fetch    420.961M (± 0.9%) i/s -      2.131B in   5.062030s
 Hash#fetch fallback    419.720M (± 0.7%) i/s -      2.127B in   5.067776s

Comparison:
          Hash#[] &&: 497743488.4 i/s
          Hash#[] ||: 421094468.9 i/s - 1.18x  (± 0.00) slower
          Hash#fetch: 420961039.0 i/s - 1.18x  (± 0.00) slower
             Hash#[]: 420846646.0 i/s - 1.18x  (± 0.00) slower
            Hash#dig: 420610228.7 i/s - 1.18x  (± 0.00) slower
 Hash#fetch fallback: 419720394.0 i/s - 1.19x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   113.409M i/100ms
  Hash#fetch + block   113.574M i/100ms
    Hash#fetch + arg   113.526M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.133B (± 1.3%) i/s -      5.670B in   5.004410s
  Hash#fetch + block      1.136B (± 0.7%) i/s -      5.792B in   5.099765s
    Hash#fetch + arg      1.137B (± 0.7%) i/s -      5.790B in   5.094015s

Comparison:
    Hash#fetch + arg: 1136646746.3 i/s
  Hash#fetch + block: 1135847240.0 i/s - same-ish: difference falls within error
  Hash#fetch + const: 1133290679.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    23.370k i/100ms
         sort + to_h     9.002k i/100ms
Calculating -------------------------------------
      sort_by + to_h    268.163k (± 9.0%) i/s -      1.332M in   5.008996s
         sort + to_h    162.586k (± 5.0%) i/s -    819.182k in   5.052942s

Comparison:
      sort_by + to_h:   268162.6 i/s
         sort + to_h:   162585.8 i/s - 1.65x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   145.227k i/100ms
       Hash#each_key   167.013k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.549M (± 4.7%) i/s -      7.842M in   5.075869s
       Hash#each_key      1.663M (± 3.9%) i/s -      8.351M in   5.028786s

Comparison:
       Hash#each_key:  1663295.4 i/s
      Hash#keys.each:  1548706.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   228.000  i/100ms
           Hash#key?     3.002M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      2.241k (±12.5%) i/s -     11.172k in   5.084968s
           Hash#key?     30.219M (± 0.5%) i/s -    153.078M in   5.065795s

Comparison:
           Hash#key?: 30218609.7 i/s
  Hash#keys.include?:     2241.0 i/s - 13484.56x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    38.472k i/100ms
            Hash#[]=    43.781k i/100ms
Calculating -------------------------------------
         Hash#merge!    439.128k (± 4.7%) i/s -      2.193M in   5.005625s
            Hash#[]=    447.275k (± 4.3%) i/s -      2.233M in   5.001918s

Comparison:
            Hash#[]=:   447274.9 i/s
         Hash#merge!:   439128.1 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        24.563k i/100ms
      Hash#merge({})    15.208k i/100ms
 Hash#dup#merge!({})    24.925k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        272.299k (± 2.4%) i/s -      1.376M in   5.054529s
      Hash#merge({})    159.824k (± 2.8%) i/s -    806.024k in   5.047337s
 Hash#dup#merge!({})    250.756k (± 2.1%) i/s -      1.271M in   5.071795s

Comparison:
{}#merge!(Hash) do end:   272299.3 i/s
 Hash#dup#merge!({}):   250755.6 i/s - 1.09x  (± 0.00) slower
      Hash#merge({}):   159824.4 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   113.368M i/100ms
          Hash#merge   113.976M i/100ms
Calculating -------------------------------------
        Hash#**other      1.135B (± 0.5%) i/s -      5.782B in   5.092613s
          Hash#merge      1.137B (± 0.6%) i/s -      5.699B in   5.012658s

Comparison:
          Hash#merge: 1136922286.4 i/s
        Hash#**other: 1135349541.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   668.000  i/100ms
         Hash#merge!    44.126k i/100ms
Calculating -------------------------------------
          Hash#merge      8.052k (± 6.9%) i/s -     40.080k in   5.003612s
         Hash#merge!    451.729k (± 4.3%) i/s -      2.295M in   5.089859s

Comparison:
         Hash#merge!:   451728.9 i/s
          Hash#merge:     8051.8 i/s - 56.10x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.443M i/100ms
Array#each               1.127M i/100ms
Array#each_w/_object     1.122M i/100ms
Hash#select-include      1.519M i/100ms
Calculating -------------------------------------
Hash#native-slice        15.275M (± 3.7%) i/s -     76.501M in   5.015620s
Array#each               11.330M (± 2.5%) i/s -     57.459M in   5.074806s
Array#each_w/_object     11.238M (± 2.3%) i/s -     57.227M in   5.095329s
Hash#select-include      15.187M (± 3.2%) i/s -     75.953M in   5.006404s

Comparison:
Hash#native-slice   : 15274981.0 i/s
Hash#select-include : 15187085.7 i/s - same-ish: difference falls within error
Array#each          : 11330149.0 i/s - 1.35x  (± 0.00) slower
Array#each_w/_object: 11237589.5 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   194.000  i/100ms
         Hash#value?   386.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.949k (±12.5%) i/s -      9.700k in   5.090499s
         Hash#value?      3.884k (± 0.2%) i/s -     19.686k in   5.069026s

Comparison:
         Hash#value?:     3883.6 i/s
Hash#values.include?:     1948.8 i/s - 1.99x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   113.536M i/100ms
                send   113.732M i/100ms
      method_missing   114.213M i/100ms
Calculating -------------------------------------
                call      1.138B (± 0.8%) i/s -      5.790B in   5.088839s
                send      1.139B (± 1.2%) i/s -      5.800B in   5.092763s
      method_missing      1.138B (± 0.9%) i/s -      5.711B in   5.020372s

Comparison:
                send: 1139085425.8 i/s
                call: 1137930587.2 i/s - same-ish: difference falls within error
      method_missing: 1137589163.1 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    38.988k i/100ms
      Symbol#to_proc    41.677k i/100ms
Calculating -------------------------------------
               Block    432.691k (± 2.4%) i/s -      2.183M in   5.048837s
      Symbol#to_proc    435.799k (± 2.2%) i/s -      2.209M in   5.071055s

Comparison:
      Symbol#to_proc:   435799.3 i/s
               Block:   432691.4 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   114.186M i/100ms
       block + yield   113.921M i/100ms
        unused block   113.917M i/100ms
               yield   113.495M i/100ms
Calculating -------------------------------------
          block.call      1.136B (± 1.3%) i/s -      5.709B in   5.028431s
       block + yield      1.136B (± 0.6%) i/s -      5.696B in   5.012546s
        unused block      1.137B (± 0.8%) i/s -      5.696B in   5.012011s
               yield      1.137B (± 0.8%) i/s -      5.788B in   5.090220s

Comparison:
               yield: 1137203194.9 i/s
        unused block: 1136506538.5 i/s - same-ish: difference falls within error
       block + yield: 1136399788.3 i/s - same-ish: difference falls within error
          block.call: 1135592240.4 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    30.934k i/100ms
      range#include?   314.000  i/100ms
       range#member?   446.000  i/100ms
       plain compare    15.984k i/100ms
Calculating -------------------------------------
        range#cover?    146.421k (±25.3%) i/s -    711.482k in   5.186109s
      range#include?      6.485k (±45.6%) i/s -     26.062k in   5.038511s
       range#member?      5.815k (±52.5%) i/s -     16.502k in   5.053829s
       plain compare    228.958k (±46.9%) i/s -    703.296k in   5.000706s

Comparison:
       plain compare:   228957.6 i/s
        range#cover?:   146421.4 i/s - same-ish: difference falls within error
      range#include?:     6485.3 i/s - 35.30x  (± 0.00) slower
       range#member?:     5814.6 i/s - 39.38x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     6.020M i/100ms
           String#=~     8.089M i/100ms
          Regexp#===     8.084M i/100ms
        String#match     6.824M i/100ms
Calculating -------------------------------------
       String#match?     70.399M (± 5.8%) i/s -    355.167M in   5.062923s
           String#=~     81.137M (± 0.5%) i/s -    412.550M in   5.084767s
          Regexp#===     81.084M (± 0.4%) i/s -    412.298M in   5.084905s
        String#match     68.951M (± 0.4%) i/s -    348.019M in   5.047380s

Comparison:
           String#=~: 81136502.5 i/s
          Regexp#===: 81084278.2 i/s - same-ish: difference falls within error
       String#match?: 70398693.4 i/s - 1.15x  (± 0.00) slower
        String#match: 68951492.5 i/s - 1.18x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.910M i/100ms
      String#casecmp     3.421M i/100ms
Calculating -------------------------------------
String#downcase + ==     20.078M (± 5.0%) i/s -    101.231M in   5.055054s
      String#casecmp     32.668M (± 0.0%) i/s -    164.186M in   5.025849s

Comparison:
      String#casecmp: 32668401.5 i/s
String#downcase + ==: 20077622.1 i/s - 1.63x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+   113.647M i/100ms
       String#concat   113.514M i/100ms
       String#append   113.324M i/100ms
         "foo" "bar"   113.611M i/100ms
  "#{'foo'}#{'bar'}"   113.450M i/100ms
Calculating -------------------------------------
            String#+      1.138B (± 0.9%) i/s -      5.796B in   5.092223s
       String#concat      1.134B (± 1.0%) i/s -      5.676B in   5.005269s
       String#append      1.138B (± 1.0%) i/s -      5.780B in   5.081052s
         "foo" "bar"      1.138B (± 0.6%) i/s -      5.794B in   5.093578s
  "#{'foo'}#{'bar'}"      1.134B (± 1.2%) i/s -      5.673B in   5.004261s

Comparison:
            String#+: 1138290421.7 i/s
         "foo" "bar": 1137585404.1 i/s - same-ish: difference falls within error
       String#append: 1137568080.0 i/s - same-ish: difference falls within error
       String#concat: 1134048662.1 i/s - same-ish: difference falls within error
  "#{'foo'}#{'bar'}": 1133712390.1 i/s - same-ish: difference falls within error

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   112.941M i/100ms
          String#dup   113.282M i/100ms
Calculating -------------------------------------
           String#+@      1.136B (± 0.8%) i/s -      5.760B in   5.069631s
          String#dup      1.136B (± 0.5%) i/s -      5.777B in   5.085173s

Comparison:
           String#+@: 1136243864.0 i/s
          String#dup: 1136151724.9 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.657M i/100ms
       String#match?     1.803M i/100ms
    String#end_with?     2.784M i/100ms
Calculating -------------------------------------
           String#=~     16.842M (± 2.5%) i/s -     84.510M in   5.021355s
       String#match?     18.176M (± 2.4%) i/s -     91.961M in   5.062661s
    String#end_with?     29.219M (± 4.7%) i/s -    147.534M in   5.060777s

Comparison:
    String#end_with?: 29219448.2 i/s
       String#match?: 18175713.4 i/s - 1.61x  (± 0.00) slower
           String#=~: 16842100.7 i/s - 1.73x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    96.828k i/100ms
          String#sub   724.628k i/100ms
String#dup["string"]=
                        20.749M i/100ms
Calculating -------------------------------------
         String#gsub      1.032M (± 4.4%) i/s -      5.229M in   5.078069s
          String#sub      8.639M (± 2.4%) i/s -     43.478M in   5.036038s
String#dup["string"]=
                        207.295M (± 0.4%) i/s -      1.037B in   5.004879s

Comparison:
String#dup["string"]=: 207295187.0 i/s
          String#sub:  8638629.2 i/s - 24.00x  (± 0.00) slower
         String#gsub:  1032094.6 i/s - 200.85x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   262.627k i/100ms
           String#tr   170.073k i/100ms
Calculating -------------------------------------
         String#gsub      2.962M (± 6.4%) i/s -     14.970M in   5.075698s
           String#tr      1.720M (± 4.4%) i/s -      8.674M in   5.052058s

Comparison:
         String#gsub:  2962310.4 i/s
           String#tr:  1720478.6 i/s - 1.72x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   113.843M i/100ms
         With Freeze   114.459M i/100ms
Calculating -------------------------------------
      Without Freeze      1.136B (± 0.8%) i/s -      5.692B in   5.009687s
         With Freeze      1.136B (± 0.8%) i/s -      5.723B in   5.036818s

Comparison:
         With Freeze: 1136299985.2 i/s
      Without Freeze: 1136296956.2 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/    10.409k i/100ms
      String#squeeze    68.516k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/    122.847k (± 7.4%) i/s -    614.131k in   5.027864s
      String#squeeze    690.802k (± 3.4%) i/s -      3.494M in   5.064881s

Comparison:
      String#squeeze:   690801.7 i/s
 String#gsub/regex+/:   122847.1 i/s - 5.62x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     3.937M i/100ms
       String#match?     4.488M i/100ms
  String#start_with?     2.409M i/100ms
Calculating -------------------------------------
           String#=~     40.321M (± 2.3%) i/s -    204.705M in   5.079828s
       String#match?     45.772M (± 3.3%) i/s -    228.882M in   5.006116s
  String#start_with?     24.369M (± 3.5%) i/s -    122.842M in   5.047645s

Comparison:
       String#match?: 45771664.0 i/s
           String#=~: 40321072.6 i/s - 1.14x  (± 0.00) slower
  String#start_with?: 24368660.6 i/s - 1.88x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   361.051k i/100ms
    String#[0, n] ==   226.930k i/100ms
   String#[RANGE] ==   257.697k i/100ms
   String#[0...n] ==   194.963k i/100ms
Calculating -------------------------------------
  String#start_with?      3.799M (± 3.7%) i/s -     19.136M in   5.044681s
    String#[0, n] ==      2.345M (± 5.0%) i/s -     11.800M in   5.045861s
   String#[RANGE] ==      2.572M (± 5.7%) i/s -     12.885M in   5.027556s
   String#[0...n] ==      2.050M (± 3.6%) i/s -     10.333M in   5.047252s

Comparison:
  String#start_with?:  3799353.0 i/s
   String#[RANGE] ==:  2571808.6 i/s - 1.48x  (± 0.00) slower
    String#[0, n] ==:  2345042.7 i/s - 1.62x  (± 0.00) slower
   String#[0...n] ==:  2050265.0 i/s - 1.85x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    21.191M i/100ms
 String#sub!'string'   878.065k i/100ms
String#gsub!'string'    97.270k i/100ms
  String#[/regexp/]=     3.381M i/100ms
 String#sub!/regexp/     2.582M i/100ms
String#gsub!/regexp/   754.483k i/100ms
Calculating -------------------------------------
  String#['string']=    212.235M (± 0.4%) i/s -      1.081B in   5.092267s
 String#sub!'string'      9.972M (±12.7%) i/s -     46.537M in   5.022867s
String#gsub!'string'      1.115M (± 2.5%) i/s -      5.642M in   5.063746s
  String#[/regexp/]=     33.964M (± 1.8%) i/s -    172.426M in   5.078602s
 String#sub!/regexp/     26.291M (± 2.1%) i/s -    131.693M in   5.011303s
String#gsub!/regexp/      7.684M (± 2.7%) i/s -     38.479M in   5.011799s

Comparison:
  String#['string']=: 212235100.7 i/s
  String#[/regexp/]=: 33963523.7 i/s - 6.25x  (± 0.00) slower
 String#sub!/regexp/: 26291097.9 i/s - 8.07x  (± 0.00) slower
 String#sub!'string':  9972254.9 i/s - 21.28x  (± 0.00) slower
String#gsub!/regexp/:  7683559.1 i/s - 27.62x  (± 0.00) slower
String#gsub!'string':  1114909.8 i/s - 190.36x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     2.555M i/100ms
        String#chomp     3.829M i/100ms
String#delete_suffix     7.099M i/100ms
Calculating -------------------------------------
          String#sub     25.417M (± 2.2%) i/s -    127.735M in   5.028218s
        String#chomp     39.435M (± 3.8%) i/s -    199.128M in   5.056887s
String#delete_suffix     71.085M (± 0.2%) i/s -    362.052M in   5.093264s

Comparison:
String#delete_suffix: 71084766.1 i/s
        String#chomp: 39434589.3 i/s - 1.80x  (± 0.00) slower
          String#sub: 25416816.8 i/s - 2.80x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix     2.706M i/100ms
          String#sub    10.351M i/100ms
Calculating -------------------------------------
String#delete_prefix     28.360M (± 2.1%) i/s -    143.441M in   5.060199s
          String#sub    103.646M (± 0.3%) i/s -    527.899M in   5.093333s

Comparison:
          String#sub: 103646179.7 i/s
String#delete_prefix: 28359507.1 i/s - 3.65x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.779M i/100ms
    String#unpack[0]     1.852M i/100ms
Calculating -------------------------------------
      String#unpack1     18.637M (± 3.4%) i/s -     94.261M in   5.063991s
    String#unpack[0]     18.674M (± 3.1%) i/s -     94.438M in   5.062193s

Comparison:
    String#unpack[0]: 18673962.5 i/s
      String#unpack1: 18636515.9 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.3.0-dev-e01a7732, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    18.800k i/100ms
          Time.parse   275.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    197.248k (±14.6%) i/s -    958.800k in   5.024587s
          Time.parse      8.656k (±28.1%) i/s -     36.850k in   5.017921s

Comparison:
        Time.iso8601:   197248.3 i/s
          Time.parse:     8656.0 i/s - 22.79x  (± 0.00) slower

