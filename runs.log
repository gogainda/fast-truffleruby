$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       149.117M i/100ms
Function with splat arguments
                       543.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.491B (± 0.3%) i/s -      7.456B in   5.001081s
Function with splat arguments
                          5.616k (± 4.6%) i/s -     28.236k in   5.038880s

Comparison:
Function with single Array argument: 1490861083.0 i/s
Function with splat arguments:     5616.4 i/s - 265449.25x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   149.137M i/100ms
Sequential Assignment
                       148.965M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.490B (± 0.4%) i/s -      7.457B in   5.004053s
Sequential Assignment
                          1.491B (± 0.4%) i/s -      7.597B in   5.094298s

Comparison:
Sequential Assignment: 1491336103.6 i/s
 Parallel Assignment: 1490184080.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   148.936M i/100ms
       attr_accessor   149.036M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.490B (± 0.4%) i/s -      7.596B in   5.098456s
       attr_accessor      1.491B (± 0.6%) i/s -      7.601B in   5.098450s

Comparison:
       attr_accessor: 1490877066.8 i/s
   getter_and_setter: 1489832178.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     7.352k i/100ms
         respond_to?   149.333M i/100ms
Calculating -------------------------------------
      begin...rescue     51.504k (± 2.8%) i/s -    257.320k in   5.000098s
         respond_to?      1.492B (± 0.2%) i/s -      7.467B in   5.004646s

Comparison:
         respond_to?: 1491950336.2 i/s
      begin...rescue:    51503.9 i/s - 28967.71x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   149.136M i/100ms
             &method   148.989M i/100ms
Calculating -------------------------------------
              normal      1.491B (± 0.3%) i/s -      7.457B in   5.002831s
             &method      1.492B (± 0.2%) i/s -      7.598B in   5.092532s

Comparison:
             &method: 1492078672.1 i/s
              normal: 1490538537.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        82.000  i/100ms
       define_method   106.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.698k (±58.4%) i/s -      3.362k in   6.290636s
       define_method      3.569k (±47.3%) i/s -      6.360k in   5.002339s

Comparison:
       define_method:     3569.1 i/s
module_eval with string:     1697.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    31.395k i/100ms
       Kernel#format    50.945k i/100ms
            String#%    50.107k i/100ms
Calculating -------------------------------------
         Float#round    363.681k (± 3.0%) i/s -      1.821M in   5.011526s
       Kernel#format    511.198k (± 2.0%) i/s -      2.598M in   5.084817s
            String#%    499.700k (± 1.9%) i/s -      2.505M in   5.015752s

Comparison:
       Kernel#format:   511198.2 i/s
            String#%:   499699.6 i/s - same-ish: difference falls within error
         Float#round:   363681.1 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   149.138M i/100ms
          OpenStruct   149.041M i/100ms
Calculating -------------------------------------
                Hash      1.491B (± 0.3%) i/s -      7.457B in   5.002321s
          OpenStruct      1.492B (± 0.2%) i/s -      7.601B in   5.093261s

Comparison:
          OpenStruct: 1492386026.2 i/s
                Hash: 1490701886.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   149.060M i/100ms
          OpenStruct     2.484k i/100ms
Calculating -------------------------------------
                Hash      1.488B (± 0.4%) i/s -      7.453B in   5.008864s
          OpenStruct     27.224k (±12.6%) i/s -    134.136k in   5.067671s

Comparison:
                Hash: 1487977062.2 i/s
          OpenStruct:    27223.6 i/s - 54657.69x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   676.874k i/100ms
  ancestors.include?   121.328k i/100ms
Calculating -------------------------------------
  less than or equal      7.440M (± 3.8%) i/s -     37.228M in   5.011411s
  ancestors.include?      1.215M (± 4.1%) i/s -      6.066M in   4.999925s

Comparison:
  less than or equal:  7439845.7 i/s
  ancestors.include?:  1215419.2 i/s - 6.12x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     2.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     23.862  (± 0.0%) i/s -    120.000  in   5.029056s
         Kernel loop      5.675  (± 0.0%) i/s -     29.000  in   5.110079s

Comparison:
          While Loop:       23.9 i/s
         Kernel loop:        5.7 i/s - 4.20x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   238.270M i/100ms
         Array#first   238.567M i/100ms
Calculating -------------------------------------
           Array#[0]      2.386B (± 0.3%) i/s -     12.152B in   5.093598s
         Array#first      2.387B (± 0.3%) i/s -     12.167B in   5.096593s

Comparison:
         Array#first: 2387278217.5 i/s
           Array#[0]: 2385714249.8 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   149.169M i/100ms
          Array#last   149.017M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.491B (± 0.3%) i/s -      7.458B in   5.003937s
          Array#last      1.492B (± 0.3%) i/s -      7.600B in   5.093024s

Comparison:
          Array#last: 1492221823.8 i/s
          Array#[-1]: 1490530241.8 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   423.820k i/100ms
Calculating -------------------------------------
                find     12.924  (±15.5%) i/s -     27.000  in   5.025143s
             bsearch      4.233M (± 3.4%) i/s -     21.191M in   5.012213s

Comparison:
             bsearch:  4233165.7 i/s
                find:       12.9 i/s - 327544.13x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.123  (± 0.0%) i/s -      1.000  in   8.106872s
        Array#insert      0.941  (± 0.0%) i/s -      5.000  in   5.312968s

Comparison:
        Array#insert:        0.9 i/s
       Array#unshift:        0.1 i/s - 7.63x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   149.143M i/100ms
          Array#size   149.000M i/100ms
         Array#count   149.316M i/100ms
Calculating -------------------------------------
        Array#length      1.491B (± 0.4%) i/s -      7.457B in   5.002221s
          Array#size      1.492B (± 0.3%) i/s -      7.599B in   5.093883s
         Array#count      1.492B (± 0.2%) i/s -      7.466B in   5.003270s

Comparison:
         Array#count: 1492194246.7 i/s
          Array#size: 1491805064.2 i/s - same-ish: difference falls within error
        Array#length: 1490788335.1 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    22.476k i/100ms
        Array#sample     2.429M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    233.358k (± 2.6%) i/s -      1.169M in   5.012029s
        Array#sample     24.344M (± 0.2%) i/s -    123.896M in   5.089413s

Comparison:
        Array#sample: 24343963.3 i/s
 Array#shuffle.first:   233357.7 i/s - 104.32x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   478.000  i/100ms
          Date.parse    94.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     12.589k (±44.1%) i/s -     47.800k in   5.005677s
          Date.parse      5.716k (±38.1%) i/s -     22.842k in   4.983419s

Comparison:
        Date.iso8601:    12589.4 i/s
          Date.parse:     5715.6 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   139.784k i/100ms
           Array#map   512.607k i/100ms
Calculating -------------------------------------
   Array#each + push      1.456M (± 3.5%) i/s -      7.269M in   4.999974s
           Array#map      5.310M (± 7.4%) i/s -     26.656M in   5.048880s

Comparison:
           Array#map:  5309968.1 i/s
   Array#each + push:  1455595.6 i/s - 3.65x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     3.902M i/100ms
               #each    12.607M i/100ms
Calculating -------------------------------------
            For loop     43.405M (± 4.9%) i/s -    218.528M in   5.047134s
               #each    125.994M (± 0.1%) i/s -    630.360M in   5.003108s

Comparison:
               #each: 125993825.0 i/s
            For loop: 43404634.6 i/s - 2.90x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   664.588k i/100ms
     each_with_index     1.244M i/100ms
Calculating -------------------------------------
          While Loop      7.010M (± 0.0%) i/s -     35.223M in   5.024391s
     each_with_index     12.445M (± 0.1%) i/s -     63.454M in   5.098787s

Comparison:
     each_with_index: 12444907.7 i/s
          While Loop:  7010435.7 i/s - 1.78x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   147.343k i/100ms
      inject to_proc   147.446k i/100ms
        inject block   147.431k i/100ms
Calculating -------------------------------------
       inject symbol      1.474M (± 0.0%) i/s -      7.514M in   5.097116s
      inject to_proc      1.474M (± 0.0%) i/s -      7.372M in   5.000406s
        inject block      1.474M (± 0.1%) i/s -      7.372M in   5.000111s

Comparison:
      inject to_proc:  1474340.4 i/s
        inject block:  1474278.2 i/s - same-ish: difference falls within error
       inject symbol:  1474263.9 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     9.465k i/100ms
   Array#map.flatten    10.336k i/100ms
      Array#flat_map    29.185k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    103.965k (± 3.8%) i/s -    520.575k in   5.014959s
   Array#map.flatten    104.437k (± 3.4%) i/s -    527.136k in   5.053522s
      Array#flat_map    292.743k (± 3.2%) i/s -      1.488M in   5.090062s

Comparison:
      Array#flat_map:   292742.9 i/s
   Array#map.flatten:   104437.4 i/s - 2.80x  (± 0.00) slower
Array#map.flatten(1):   103965.4 i/s - 2.82x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   131.654k i/100ms
  Array#reverse_each     1.135M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.413M (± 3.3%) i/s -      7.109M in   5.037582s
  Array#reverse_each     11.445M (± 3.1%) i/s -     57.878M in   5.062036s

Comparison:
  Array#reverse_each: 11444779.0 i/s
  Array#reverse.each:  1412856.8 i/s - 8.10x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       516.544k i/100ms
   Enumerable#detect     3.599M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          5.812M (± 5.7%) i/s -    115.706M in  20.006510s
   Enumerable#detect     35.982M (± 0.1%) i/s -    719.763M in  20.003450s

Comparison:
   Enumerable#detect: 35982005.2 i/s
Enumerable#select.first:  5812235.1 i/s - 6.19x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       134.762k i/100ms
Enumerable#select.last
                       348.073k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.426M (± 3.4%) i/s -      7.142M in   5.014977s
Enumerable#select.last
                          3.649M (± 3.9%) i/s -     18.448M in   5.063739s

Comparison:
Enumerable#select.last:  3648964.8 i/s
Enumerable#reverse.detect:  1425932.6 i/s - 2.56x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.815k i/100ms
  Enumerable#sort_by     3.201k i/100ms
     Enumerable#sort     4.395k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         29.201k (±15.8%) i/s -    135.120k in   5.072493s
  Enumerable#sort_by     29.669k (±19.5%) i/s -    137.643k in   5.043631s
     Enumerable#sort     48.508k (± 2.2%) i/s -    246.120k in   5.076421s

Comparison:
     Enumerable#sort:    48507.8 i/s
  Enumerable#sort_by:    29669.1 i/s - 1.63x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    29201.4 i/s - 1.66x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   317.160k i/100ms
Enumerable#sort_by...first
                         5.094k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      3.162M (± 0.1%) i/s -     15.858M in   5.014974s
Enumerable#sort_by...first
                         53.713k (± 3.2%) i/s -    269.982k in   5.031777s

Comparison:
   Enumerable#min_by:  3162132.9 i/s
Enumerable#sort_by...first:    53712.6 i/s - 58.87x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   178.982k i/100ms
            Hash#dup   187.275k i/100ms
Calculating -------------------------------------
              Hash[]      1.873M (± 3.8%) i/s -      9.486M in   5.071982s
            Hash#dup      1.885M (± 4.0%) i/s -      9.551M in   5.076424s

Comparison:
            Hash#dup:  1884538.0 i/s
              Hash[]:  1873104.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   149.146M i/100ms
  Hash#fetch, symbol   238.078M i/100ms
     Hash#[], string     5.060M i/100ms
  Hash#fetch, string     4.458M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.492B (± 0.2%) i/s -      7.606B in   5.097912s
  Hash#fetch, symbol      2.387B (± 0.3%) i/s -     12.142B in   5.086309s
     Hash#[], string     50.534M (± 0.5%) i/s -    252.997M in   5.006562s
  Hash#fetch, string     44.554M (± 0.2%) i/s -    222.894M in   5.002758s

Comparison:
  Hash#fetch, symbol: 2387207180.1 i/s
     Hash#[], symbol: 1492080493.7 i/s - 1.60x  (± 0.00) slower
     Hash#[], string: 50534147.4 i/s - 47.24x  (± 0.00) slower
  Hash#fetch, string: 44554264.7 i/s - 53.58x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    59.671M i/100ms
             Hash#[]    59.664M i/100ms
          Hash#[] ||    59.734M i/100ms
          Hash#[] &&    59.721M i/100ms
          Hash#fetch    59.729M i/100ms
 Hash#fetch fallback    59.726M i/100ms
Calculating -------------------------------------
            Hash#dig    596.472M (± 0.3%) i/s -      2.984B in   5.002005s
             Hash#[]    596.766M (± 0.3%) i/s -      3.043B in   5.098946s
          Hash#[] ||    596.706M (± 0.2%) i/s -      2.987B in   5.005378s
          Hash#[] &&    596.803M (± 0.2%) i/s -      2.986B in   5.003464s
          Hash#fetch    597.058M (± 0.2%) i/s -      2.986B in   5.001974s
 Hash#fetch fallback    596.899M (± 0.2%) i/s -      2.986B in   5.003058s

Comparison:
          Hash#fetch: 597057614.2 i/s
 Hash#fetch fallback: 596898808.0 i/s - same-ish: difference falls within error
          Hash#[] &&: 596802817.9 i/s - same-ish: difference falls within error
             Hash#[]: 596765764.3 i/s - same-ish: difference falls within error
          Hash#[] ||: 596705573.6 i/s - same-ish: difference falls within error
            Hash#dig: 596472179.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   148.941M i/100ms
  Hash#fetch + block   238.441M i/100ms
    Hash#fetch + arg   149.329M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.491B (± 0.3%) i/s -      7.596B in   5.094556s
  Hash#fetch + block      2.387B (± 0.3%) i/s -     12.160B in   5.094668s
    Hash#fetch + arg      1.491B (± 0.4%) i/s -      7.466B in   5.006388s

Comparison:
  Hash#fetch + block: 2386917596.6 i/s
    Hash#fetch + arg: 1491403078.1 i/s - 1.60x  (± 0.00) slower
  Hash#fetch + const: 1491013736.0 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    16.983k i/100ms
         sort + to_h    10.314k i/100ms
Calculating -------------------------------------
      sort_by + to_h    179.364k (±18.3%) i/s -    866.133k in   5.034578s
         sort + to_h    106.596k (± 4.7%) i/s -    536.328k in   5.043908s

Comparison:
      sort_by + to_h:   179363.6 i/s
         sort + to_h:   106595.9 i/s - 1.68x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each    99.884k i/100ms
       Hash#each_key   115.752k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.076M (± 4.1%) i/s -      5.394M in   5.023085s
       Hash#each_key      1.172M (± 4.0%) i/s -      5.903M in   5.045568s

Comparison:
       Hash#each_key:  1171981.8 i/s
      Hash#keys.each:  1075785.9 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   169.000  i/100ms
           Hash#key?     2.990M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.783k (± 9.9%) i/s -      8.788k in   5.011957s
           Hash#key?     29.608M (± 0.2%) i/s -    149.521M in   5.050114s

Comparison:
           Hash#key?: 29607684.1 i/s
  Hash#keys.include?:     1783.5 i/s - 16601.03x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    18.341k i/100ms
            Hash#[]=    20.966k i/100ms
Calculating -------------------------------------
         Hash#merge!    212.830k (± 3.7%) i/s -      1.064M in   5.005437s
            Hash#[]=    212.649k (± 3.3%) i/s -      1.069M in   5.034284s

Comparison:
         Hash#merge!:   212830.5 i/s
            Hash#[]=:   212649.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         8.031k i/100ms
      Hash#merge({})     7.110k i/100ms
 Hash#dup#merge!({})    11.596k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         92.757k (± 4.1%) i/s -    465.798k in   5.031095s
      Hash#merge({})     71.943k (± 3.7%) i/s -    362.610k in   5.047884s
 Hash#dup#merge!({})    118.606k (± 3.7%) i/s -    602.992k in   5.091791s

Comparison:
 Hash#dup#merge!({}):   118606.3 i/s
{}#merge!(Hash) do end:    92757.3 i/s - 1.28x  (± 0.00) slower
      Hash#merge({}):    71943.5 i/s - 1.65x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   149.132M i/100ms
          Hash#merge   149.323M i/100ms
Calculating -------------------------------------
        Hash#**other      1.491B (± 0.2%) i/s -      7.457B in   4.999508s
          Hash#merge      1.492B (± 0.2%) i/s -      7.466B in   5.003664s

Comparison:
          Hash#merge: 1492149012.9 i/s
        Hash#**other: 1491471166.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   285.000  i/100ms
         Hash#merge!    20.489k i/100ms
Calculating -------------------------------------
          Hash#merge      3.078k (± 3.8%) i/s -     15.390k in   5.007769s
         Hash#merge!    209.452k (± 3.3%) i/s -      1.065M in   5.092634s

Comparison:
         Hash#merge!:   209452.4 i/s
          Hash#merge:     3077.9 i/s - 68.05x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      996.295k i/100ms
Array#each             869.114k i/100ms
Array#each_w/_object   872.110k i/100ms
Hash#select-include      1.145M i/100ms
Calculating -------------------------------------
Hash#native-slice        10.548M (± 3.3%) i/s -     52.804M in   5.012185s
Array#each                8.796M (± 2.6%) i/s -     44.325M in   5.043172s
Array#each_w/_object      8.722M (± 2.9%) i/s -     43.606M in   5.004189s
Hash#select-include      11.412M (± 2.9%) i/s -     57.245M in   5.020482s

Comparison:
Hash#select-include : 11412443.1 i/s
Hash#native-slice   : 10547503.4 i/s - 1.08x  (± 0.00) slower
Array#each          :  8795507.9 i/s - 1.30x  (± 0.00) slower
Array#each_w/_object:  8721771.9 i/s - 1.31x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   175.000  i/100ms
         Hash#value?     3.608k i/100ms
Calculating -------------------------------------
Hash#values.include?      2.137k (±11.0%) i/s -     10.500k in   5.016817s
         Hash#value?     35.690k (± 0.2%) i/s -    180.400k in   5.054644s

Comparison:
         Hash#value?:    35690.1 i/s
Hash#values.include?:     2136.9 i/s - 16.70x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   149.113M i/100ms
                send   149.066M i/100ms
      method_missing   149.348M i/100ms
Calculating -------------------------------------
                call      1.491B (± 0.3%) i/s -      7.456B in   4.999165s
                send      1.492B (± 0.3%) i/s -      7.602B in   5.095687s
      method_missing      1.492B (± 0.3%) i/s -      7.467B in   5.004661s

Comparison:
      method_missing: 1492094510.0 i/s
                send: 1491928170.8 i/s - same-ish: difference falls within error
                call: 1491394781.8 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    15.685k i/100ms
      Symbol#to_proc    16.416k i/100ms
Calculating -------------------------------------
               Block    166.318k (± 3.3%) i/s -    831.305k in   5.004184s
      Symbol#to_proc    165.037k (± 3.1%) i/s -    837.216k in   5.077975s

Comparison:
               Block:   166317.6 i/s
      Symbol#to_proc:   165037.5 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   238.181M i/100ms
       block + yield   238.414M i/100ms
        unused block   238.972M i/100ms
               yield   238.947M i/100ms
Calculating -------------------------------------
          block.call      2.387B (± 0.2%) i/s -     12.147B in   5.089181s
       block + yield      2.388B (± 0.2%) i/s -     12.159B in   5.092524s
        unused block      2.387B (± 0.2%) i/s -     11.949B in   5.005346s
               yield      2.388B (± 0.2%) i/s -     11.947B in   5.003974s

Comparison:
       block + yield: 2387643380.5 i/s
               yield: 2387583045.1 i/s - same-ish: difference falls within error
        unused block: 2387177341.2 i/s - same-ish: difference falls within error
          block.call: 2386883732.3 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    27.265k i/100ms
      range#include?   179.000  i/100ms
       range#member?   172.000  i/100ms
       plain compare    22.290k i/100ms
Calculating -------------------------------------
        range#cover?    117.621k (±35.0%) i/s -    545.300k in   5.186961s
      range#include?      4.367k (±49.5%) i/s -     15.215k in   5.051858s
       range#member?      4.213k (±50.5%) i/s -     10.664k in   6.478216s
       plain compare    222.635k (±22.8%) i/s -      1.070M in   5.069288s

Comparison:
       plain compare:   222634.7 i/s
        range#cover?:   117621.1 i/s - 1.89x  (± 0.00) slower
      range#include?:     4366.9 i/s - 50.98x  (± 0.00) slower
       range#member?:     4213.4 i/s - 52.84x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     3.298M i/100ms
           String#=~     6.493M i/100ms
          Regexp#===     6.491M i/100ms
        String#match     3.281M i/100ms
Calculating -------------------------------------
       String#match?     36.469M (± 3.7%) i/s -    184.692M in   5.071706s
           String#=~     64.919M (± 0.0%) i/s -    324.626M in   5.000471s
          Regexp#===     64.921M (± 0.0%) i/s -    331.039M in   5.099061s
        String#match     33.331M (± 4.3%) i/s -    167.309M in   5.029510s

Comparison:
          Regexp#===: 64921496.0 i/s
           String#=~: 64919126.8 i/s - same-ish: difference falls within error
       String#match?: 36469119.2 i/s - 1.78x  (± 0.00) slower
        String#match: 33331282.7 i/s - 1.95x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.034M i/100ms
      String#casecmp     3.471M i/100ms
Calculating -------------------------------------
String#downcase + ==     12.819M (± 4.6%) i/s -     64.129M in   5.014128s
      String#casecmp     34.722M (± 0.1%) i/s -    177.018M in   5.098098s

Comparison:
      String#casecmp: 34722367.1 i/s
String#downcase + ==: 12818619.2 i/s - 2.71x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+   149.109M i/100ms
       String#concat   149.093M i/100ms
       String#append   149.300M i/100ms
         "foo" "bar"   148.959M i/100ms
  "#{'foo'}#{'bar'}"   149.313M i/100ms
Calculating -------------------------------------
            String#+      1.491B (± 0.5%) i/s -      7.455B in   5.000735s
       String#concat      1.492B (± 0.3%) i/s -      7.604B in   5.096708s
       String#append      1.492B (± 0.2%) i/s -      7.465B in   5.004182s
         "foo" "bar"      1.492B (± 0.2%) i/s -      7.597B in   5.091059s
  "#{'foo'}#{'bar'}"      1.493B (± 0.2%) i/s -      7.466B in   5.002062s

Comparison:
  "#{'foo'}#{'bar'}": 1492517844.8 i/s
         "foo" "bar": 1492209188.0 i/s - same-ish: difference falls within error
       String#concat: 1491899921.1 i/s - same-ish: difference falls within error
       String#append: 1491762657.8 i/s - same-ish: difference falls within error
            String#+: 1490902840.6 i/s - same-ish: difference falls within error

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   148.963M i/100ms
          String#dup   149.174M i/100ms
Calculating -------------------------------------
           String#+@      1.491B (± 0.3%) i/s -      7.597B in   5.095915s
          String#dup      1.492B (± 0.3%) i/s -      7.608B in   5.098788s

Comparison:
          String#dup: 1492099803.9 i/s
           String#+@: 1490840856.7 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.208M i/100ms
       String#match?     1.324M i/100ms
    String#end_with?    17.358M i/100ms
Calculating -------------------------------------
           String#=~     13.087M (± 3.4%) i/s -     66.428M in   5.082207s
       String#match?     13.594M (± 3.4%) i/s -     68.843M in   5.070537s
    String#end_with?    173.648M (± 0.6%) i/s -    885.239M in   5.098053s

Comparison:
    String#end_with?: 173648040.8 i/s
       String#match?: 13593914.3 i/s - 12.77x  (± 0.00) slower
           String#=~: 13086617.4 i/s - 13.27x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   102.863k i/100ms
          String#sub     1.259M i/100ms
String#dup["string"]=
                        16.591M i/100ms
Calculating -------------------------------------
         String#gsub      1.064M (± 3.0%) i/s -      5.349M in   5.029792s
          String#sub     13.219M (± 4.6%) i/s -     66.705M in   5.057338s
String#dup["string"]=
                        165.887M (± 0.1%) i/s -    829.551M in   5.000713s

Comparison:
String#dup["string"]=: 165886608.9 i/s
          String#sub: 13218995.0 i/s - 12.55x  (± 0.00) slower
         String#gsub:  1064496.2 i/s - 155.84x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   190.859k i/100ms
           String#tr   112.009k i/100ms
Calculating -------------------------------------
         String#gsub      2.199M (± 5.2%) i/s -     11.070M in   5.048902s
           String#tr      1.142M (± 3.9%) i/s -      5.712M in   5.009269s

Comparison:
         String#gsub:  2198917.7 i/s
           String#tr:  1142186.6 i/s - 1.93x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   149.071M i/100ms
         With Freeze   149.124M i/100ms
Calculating -------------------------------------
      Without Freeze      1.491B (± 0.4%) i/s -      7.454B in   5.000431s
         With Freeze      1.493B (± 0.2%) i/s -      7.605B in   5.094909s

Comparison:
         With Freeze: 1492738351.8 i/s
      Without Freeze: 1490603677.5 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     4.297k i/100ms
      String#squeeze    57.889k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     58.831k (± 4.7%) i/s -    296.493k in   5.051760s
      String#squeeze    579.191k (± 2.9%) i/s -      2.894M in   5.002040s

Comparison:
      String#squeeze:   579190.6 i/s
 String#gsub/regex+/:    58831.3 i/s - 9.84x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     2.690M i/100ms
       String#match?     1.882M i/100ms
  String#start_with?     1.744M i/100ms
Calculating -------------------------------------
           String#=~     27.716M (± 2.8%) i/s -    139.862M in   5.050792s
       String#match?     18.903M (± 3.0%) i/s -     95.962M in   5.081256s
  String#start_with?     17.429M (± 3.5%) i/s -     87.188M in   5.008999s

Comparison:
           String#=~: 27715834.8 i/s
       String#match?: 18903119.6 i/s - 1.47x  (± 0.00) slower
  String#start_with?: 17429428.8 i/s - 1.59x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   173.127k i/100ms
    String#[0, n] ==   173.205k i/100ms
   String#[RANGE] ==   170.871k i/100ms
   String#[0...n] ==   132.805k i/100ms
Calculating -------------------------------------
  String#start_with?      3.284M (± 3.7%) i/s -     16.447M in   5.016118s
    String#[0, n] ==      1.785M (± 4.0%) i/s -      9.007M in   5.053865s
   String#[RANGE] ==      1.732M (± 3.9%) i/s -      8.714M in   5.039126s
   String#[0...n] ==      1.341M (± 4.1%) i/s -      6.773M in   5.058429s

Comparison:
  String#start_with?:  3284443.4 i/s
    String#[0, n] ==:  1785191.8 i/s - 1.84x  (± 0.00) slower
   String#[RANGE] ==:  1732264.2 i/s - 1.90x  (± 0.00) slower
   String#[0...n] ==:  1341410.2 i/s - 2.45x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    16.533M i/100ms
 String#sub!'string'     1.525M i/100ms
String#gsub!'string'    79.708k i/100ms
  String#[/regexp/]=     3.983M i/100ms
 String#sub!/regexp/     1.519M i/100ms
String#gsub!/regexp/   452.616k i/100ms
Calculating -------------------------------------
  String#['string']=    165.882M (± 0.1%) i/s -    843.194M in   5.083097s
 String#sub!'string'      5.438M (±22.6%) i/s -     24.408M in   5.090576s
String#gsub!'string'      1.008M (± 3.6%) i/s -      5.101M in   5.069141s
  String#[/regexp/]=     39.820M (± 0.0%) i/s -    199.126M in   5.000659s
 String#sub!/regexp/     15.232M (± 3.9%) i/s -     77.490M in   5.095811s
String#gsub!/regexp/      4.445M (± 4.9%) i/s -     22.178M in   5.001916s

Comparison:
  String#['string']=: 165882049.5 i/s
  String#[/regexp/]=: 39819942.8 i/s - 4.17x  (± 0.00) slower
 String#sub!/regexp/: 15231744.7 i/s - 10.89x  (± 0.00) slower
 String#sub!'string':  5438408.5 i/s - 30.50x  (± 0.00) slower
String#gsub!/regexp/:  4445445.6 i/s - 37.32x  (± 0.00) slower
String#gsub!'string':  1007946.1 i/s - 164.57x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub   783.605k i/100ms
        String#chomp     2.468M i/100ms
String#delete_suffix     5.131M i/100ms
Calculating -------------------------------------
          String#sub     15.650M (± 6.3%) i/s -     78.361M in   5.030714s
        String#chomp     24.774M (± 3.3%) i/s -    125.866M in   5.086743s
String#delete_suffix     51.151M (± 0.6%) i/s -    256.555M in   5.015859s

Comparison:
String#delete_suffix: 51150709.0 i/s
        String#chomp: 24773982.1 i/s - 2.06x  (± 0.00) slower
          String#sub: 15650059.4 i/s - 3.27x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix     1.843M i/100ms
          String#sub     3.599M i/100ms
Calculating -------------------------------------
String#delete_prefix     19.855M (± 4.6%) i/s -     99.545M in   5.024477s
          String#sub     35.301M (± 4.1%) i/s -    176.332M in   5.003579s

Comparison:
          String#sub: 35301372.7 i/s
String#delete_prefix: 19855169.4 i/s - 1.78x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.279M i/100ms
    String#unpack[0]     1.348M i/100ms
Calculating -------------------------------------
      String#unpack1     13.289M (± 3.4%) i/s -     66.500M in   5.010291s
    String#unpack[0]     13.645M (± 3.3%) i/s -     68.755M in   5.044609s

Comparison:
    String#unpack[0]: 13644998.9 i/s
      String#unpack1: 13289278.9 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.0.0-dev-b6e9f15d, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    12.375k i/100ms
          Time.parse    63.000  i/100ms
Calculating -------------------------------------
        Time.iso8601     60.633k (± 2.4%) i/s -    309.375k in   5.105322s
          Time.parse      3.548k (±21.6%) i/s -     14.868k in   5.023639s

Comparison:
        Time.iso8601:    60633.4 i/s
          Time.parse:     3548.0 i/s - 17.09x  (± 0.00) slower

