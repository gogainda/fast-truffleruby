$ ruby -v code/general/inheritance-check.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   368.267k i/100ms
  ancestors.include?   121.783k i/100ms
Calculating -------------------------------------
  less than or equal      9.102M (± 3.5%) i/s -     45.665M in   5.023555s
  ancestors.include?      1.303M (± 2.3%) i/s -      6.576M in   5.048228s

Comparison:
  less than or equal:  9102127.8 i/s
  ancestors.include?:  1303366.2 i/s - 6.98x  (± 0.00) slower

$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       149.165M i/100ms
Function with splat arguments
                       598.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.494B (± 0.1%) i/s -      7.607B in   5.093388s
Function with splat arguments
                          6.322k (± 1.6%) i/s -     31.694k in   5.015056s

Comparison:
Function with single Array argument: 1493593600.1 i/s
Function with splat arguments:     6321.5 i/s - 236271.76x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   149.348M i/100ms
          OpenStruct     1.628M i/100ms
Calculating -------------------------------------
                Hash      1.494B (± 0.1%) i/s -      7.617B in   5.098461s
          OpenStruct    497.907M (± 0.1%) i/s -      2.489B in   4.999611s

Comparison:
                Hash: 1493928132.0 i/s
          OpenStruct: 497907351.4 i/s - 3.00x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   149.283M i/100ms
       attr_accessor   149.407M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.490B (± 0.9%) i/s -      7.464B in   5.009519s
       attr_accessor      1.493B (± 0.2%) i/s -      7.470B in   5.005226s

Comparison:
       attr_accessor: 1492515291.5 i/s
   getter_and_setter: 1490109257.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    26.362k i/100ms
       Kernel#format    52.026k i/100ms
            String#%    53.078k i/100ms
Calculating -------------------------------------
         Float#round    363.868k (± 2.9%) i/s -      1.819M in   5.003640s
       Kernel#format    520.451k (± 1.7%) i/s -      2.601M in   4.999756s
            String#%    530.180k (± 1.7%) i/s -      2.654M in   5.007186s

Comparison:
            String#%:   530179.8 i/s
       Kernel#format:   520451.4 i/s - same-ish: difference falls within error
         Float#round:   363868.5 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     23.905  (± 0.0%) i/s -    120.000  in   5.019818s
         Kernel loop      5.544  (± 0.0%) i/s -     28.000  in   5.054999s

Comparison:
          While Loop:       23.9 i/s
         Kernel loop:        5.5 i/s - 4.31x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     9.130k i/100ms
         respond_to?   149.135M i/100ms
Calculating -------------------------------------
      begin...rescue     51.702k (± 2.5%) i/s -    264.770k in   5.124420s
         respond_to?      1.494B (± 0.0%) i/s -      7.606B in   5.091034s

Comparison:
         respond_to?: 1493975796.4 i/s
      begin...rescue:    51702.1 i/s - 28895.82x  (± 0.00) slower

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        64.000  i/100ms
       define_method   206.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          2.354k (±33.0%) i/s -      5.824k in   5.086420s
       define_method      4.147k (±41.7%) i/s -     12.154k in   6.214725s

Comparison:
       define_method:     4147.1 i/s
module_eval with string:     2354.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/assignment.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   148.848M i/100ms
Sequential Assignment
                       149.162M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.491B (± 0.2%) i/s -      7.591B in   5.092640s
Sequential Assignment
                          1.493B (± 0.1%) i/s -      7.607B in   5.094279s

Comparison:
Sequential Assignment: 1493296750.4 i/s
 Parallel Assignment: 1490641861.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   149.286M i/100ms
             &method   149.371M i/100ms
Calculating -------------------------------------
              normal      1.492B (± 0.1%) i/s -      7.464B in   5.002002s
             &method      1.493B (± 0.5%) i/s -      7.469B in   5.003941s

Comparison:
             &method: 1492574441.3 i/s
              normal: 1492260524.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   149.328M i/100ms
          OpenStruct   149.370M i/100ms
Calculating -------------------------------------
                Hash      1.493B (± 0.0%) i/s -      7.466B in   5.000422s
          OpenStruct      1.494B (± 0.1%) i/s -      7.618B in   5.099490s

Comparison:
          OpenStruct: 1493853323.0 i/s
                Hash: 1493150585.2 i/s - same-ish: difference falls within error

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   149.249M i/100ms
                send   149.100M i/100ms
      method_missing   149.348M i/100ms
Calculating -------------------------------------
                call      1.492B (± 0.3%) i/s -      7.462B in   5.001089s
                send      1.494B (± 0.0%) i/s -      7.604B in   5.090775s
      method_missing      1.491B (± 1.2%) i/s -      7.467B in   5.009290s

Comparison:
                send: 1493699061.8 i/s
                call: 1492183510.2 i/s - same-ish: difference falls within error
      method_missing: 1490964365.8 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     6.671k i/100ms
      range#include?    68.000  i/100ms
       range#member?   127.000  i/100ms
       plain compare    29.737k i/100ms
Calculating -------------------------------------
        range#cover?    264.428k (±28.8%) i/s -      1.167M in   4.982086s
      range#include?      3.862k (±49.9%) i/s -     11.900k in   4.984985s
       range#member?      4.621k (±40.4%) i/s -     14.097k in   5.016725s
       plain compare    180.230k (±21.5%) i/s -    862.373k in   5.046024s

Comparison:
        range#cover?:   264428.4 i/s
       plain compare:   180230.2 i/s - same-ish: difference falls within error
       range#member?:     4620.9 i/s - 57.22x  (± 0.00) slower
      range#include?:     3862.3 i/s - 68.46x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   148.905M i/100ms
          Array#last   148.116M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.488B (± 0.4%) i/s -      7.445B in   5.002545s
          Array#last      1.491B (± 0.2%) i/s -      7.554B in   5.065821s

Comparison:
          Array#last: 1491154719.5 i/s
          Array#[-1]: 1488314034.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    17.592k i/100ms
        Array#sample     2.702M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    255.521k (± 1.9%) i/s -      1.284M in   5.027995s
        Array#sample     27.115M (± 0.1%) i/s -    137.827M in   5.083103s

Comparison:
        Array#sample: 27114737.2 i/s
 Array#shuffle.first:   255520.8 i/s - 106.12x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.041  (± 0.0%) i/s -      1.000  in  24.539075s
        Array#insert      0.306  (± 0.0%) i/s -      2.000  in   6.546827s

Comparison:
        Array#insert:        0.3 i/s
       Array#unshift:        0.0 i/s - 7.50x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length    49.169M i/100ms
          Array#size    49.265M i/100ms
         Array#count    49.226M i/100ms
Calculating -------------------------------------
        Array#length    491.883M (± 1.6%) i/s -      2.458B in   4.999519s
          Array#size    494.834M (± 0.4%) i/s -      2.513B in   5.077557s
         Array#count    495.289M (± 0.3%) i/s -      2.511B in   5.068836s

Comparison:
         Array#count: 495289366.0 i/s
          Array#size: 494833567.6 i/s - same-ish: difference falls within error
        Array#length: 491882586.9 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   427.681k i/100ms
Calculating -------------------------------------
                find      0.110  (± 0.0%) i/s -      1.000  in   9.101563s
             bsearch      4.281M (± 3.8%) i/s -     21.384M in   5.002332s

Comparison:
             bsearch:  4281364.3 i/s
                find:        0.1 i/s - 38967108.41x  (± 0.00) slower

$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   237.965M i/100ms
         Array#first   237.295M i/100ms
Calculating -------------------------------------
           Array#[0]      2.379B (± 0.6%) i/s -     11.898B in   5.002043s
         Array#first      2.385B (± 0.2%) i/s -     12.102B in   5.074676s

Comparison:
         Array#first: 2384797069.7 i/s
           Array#[0]: 2378773687.0 i/s - same-ish: difference falls within error

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub    45.318k i/100ms
        String#chomp   876.011k i/100ms
String#delete_suffix     1.147M i/100ms
Calculating -------------------------------------
          String#sub      7.007M (±11.1%) i/s -     33.127M in   4.997325s
        String#chomp     18.004M (± 0.6%) i/s -     90.229M in   5.011879s
String#delete_suffix     18.686M (± 0.3%) i/s -     94.090M in   5.035330s

Comparison:
String#delete_suffix: 18686048.0 i/s
        String#chomp: 18003691.8 i/s - 1.04x  (± 0.00) slower
          String#sub:  7006807.9 i/s - 2.67x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   223.850k i/100ms
       String#match?     2.486M i/100ms
  String#start_with?     1.811M i/100ms
Calculating -------------------------------------
           String#=~     29.680M (± 5.2%) i/s -    147.741M in   5.001922s
       String#match?     40.304M (± 0.6%) i/s -    203.874M in   5.058658s
  String#start_with?     17.956M (± 4.1%) i/s -     90.545M in   5.052373s

Comparison:
       String#match?: 40303604.1 i/s
           String#=~: 29680261.8 i/s - 1.36x  (± 0.00) slower
  String#start_with?: 17955515.8 i/s - 2.24x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    26.603k i/100ms
          String#sub    55.929k i/100ms
String#dup["string"]=
                        16.510M i/100ms
Calculating -------------------------------------
         String#gsub    989.018k (± 4.0%) i/s -      4.948M in   5.013636s
          String#sub     18.560M (±13.1%) i/s -     86.970M in   4.992831s
String#dup["string"]=
                        165.674M (± 0.5%) i/s -    842.035M in   5.082610s

Comparison:
String#dup["string"]=: 165673860.2 i/s
          String#sub: 18560457.2 i/s - 8.93x  (± 0.00) slower
         String#gsub:   989018.0 i/s - 167.51x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   224.673k i/100ms
    String#[0, n] ==    84.175k i/100ms
   String#[RANGE] ==   111.951k i/100ms
   String#[0...n] ==    84.010k i/100ms
Calculating -------------------------------------
  String#start_with?      3.113M (± 3.3%) i/s -     15.727M in   5.057904s
    String#[0, n] ==      1.955M (± 4.2%) i/s -      9.764M in   5.004296s
   String#[RANGE] ==      1.998M (± 3.7%) i/s -     10.076M in   5.050146s
   String#[0...n] ==      1.479M (± 3.9%) i/s -      7.393M in   5.007705s

Comparison:
  String#start_with?:  3112991.2 i/s
   String#[RANGE] ==:  1997889.8 i/s - 1.56x  (± 0.00) slower
    String#[0, n] ==:  1954817.4 i/s - 1.59x  (± 0.00) slower
   String#[0...n] ==:  1478547.6 i/s - 2.11x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.463M i/100ms
    String#unpack[0]     1.462M i/100ms
Calculating -------------------------------------
      String#unpack1     14.409M (± 2.5%) i/s -     73.162M in   5.080594s
    String#unpack[0]     14.232M (± 2.6%) i/s -     71.651M in   5.037886s

Comparison:
      String#unpack1: 14409240.3 i/s
    String#unpack[0]: 14232226.1 i/s - same-ish: difference falls within error

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    13.805k i/100ms
           String#tr    50.453k i/100ms
Calculating -------------------------------------
         String#gsub    971.384k (±19.9%) i/s -      4.238M in   4.998387s
           String#tr    605.042k (± 5.9%) i/s -      3.027M in   5.022716s

Comparison:
         String#gsub:   971384.1 i/s
           String#tr:   605042.1 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+   148.650M i/100ms
       String#concat   148.681M i/100ms
       String#append   148.977M i/100ms
         "foo" "bar"   148.871M i/100ms
  "#{'foo'}#{'bar'}"   148.768M i/100ms
Calculating -------------------------------------
            String#+      1.490B (± 0.3%) i/s -      7.581B in   5.087148s
       String#concat      1.491B (± 0.2%) i/s -      7.583B in   5.086558s
       String#append      1.491B (± 0.1%) i/s -      7.598B in   5.094802s
         "foo" "bar"      1.492B (± 0.1%) i/s -      7.592B in   5.090293s
  "#{'foo'}#{'bar'}"      1.491B (± 0.2%) i/s -      7.587B in   5.089502s

Comparison:
         "foo" "bar": 1491552464.1 i/s
       String#append: 1491294252.8 i/s - same-ish: difference falls within error
  "#{'foo'}#{'bar'}": 1490750099.5 i/s - same-ish: difference falls within error
       String#concat: 1490748793.2 i/s - same-ish: difference falls within error
            String#+: 1490261374.3 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     1.545k i/100ms
      String#squeeze    47.998k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     61.291k (± 8.0%) i/s -    304.365k in   5.003600s
      String#squeeze    549.890k (± 2.8%) i/s -      2.784M in   5.066710s

Comparison:
      String#squeeze:   549889.8 i/s
 String#gsub/regex+/:    61290.8 i/s - 8.97x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   970.251k i/100ms
      String#casecmp     2.624M i/100ms
Calculating -------------------------------------
String#downcase + ==     13.266M (± 5.6%) i/s -     66.947M in   5.065120s
      String#casecmp     26.288M (± 0.1%) i/s -    133.834M in   5.091146s

Comparison:
      String#casecmp: 26287650.6 i/s
String#downcase + ==: 13266168.5 i/s - 1.98x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   148.061M i/100ms
         With Freeze   148.600M i/100ms
Calculating -------------------------------------
      Without Freeze      1.482B (± 0.6%) i/s -      7.551B in   5.094609s
         With Freeze      1.489B (± 0.3%) i/s -      7.579B in   5.089249s

Comparison:
         With Freeze: 1489147915.2 i/s
      Without Freeze: 1482226436.7 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   219.378k i/100ms
       String#match?   744.886k i/100ms
    String#end_with?    14.903M i/100ms
Calculating -------------------------------------
           String#=~     12.997M (± 4.1%) i/s -     64.936M in   5.008423s
       String#match?     17.735M (± 0.2%) i/s -     89.386M in   5.040083s
    String#end_with?    148.945M (± 0.5%) i/s -    745.162M in   5.003071s

Comparison:
    String#end_with?: 148944505.5 i/s
       String#match?: 17735144.0 i/s - 8.40x  (± 0.00) slower
           String#=~: 12997303.1 i/s - 11.46x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    16.480M i/100ms
 String#sub!'string'    56.893k i/100ms
String#gsub!'string'    35.753k i/100ms
  String#[/regexp/]=     1.123M i/100ms
 String#sub!/regexp/   296.153k i/100ms
String#gsub!/regexp/   221.508k i/100ms
Calculating -------------------------------------
  String#['string']=    165.739M (± 0.2%) i/s -    840.493M in   5.071189s
 String#sub!'string'      6.879M (±18.2%) i/s -     29.072M in   5.003678s
String#gsub!'string'    906.039k (±17.8%) i/s -      4.290M in   5.022707s
  String#[/regexp/]=     35.992M (± 0.5%) i/s -    180.816M in   5.023875s
 String#sub!/regexp/     18.260M (± 5.7%) i/s -     90.919M in   4.999897s
String#gsub!/regexp/      4.598M (± 4.0%) i/s -     23.037M in   5.018914s

Comparison:
  String#['string']=: 165739447.6 i/s
  String#[/regexp/]=: 35992382.2 i/s - 4.60x  (± 0.00) slower
 String#sub!/regexp/: 18260060.7 i/s - 9.08x  (± 0.00) slower
 String#sub!'string':  6879470.8 i/s - 24.09x  (± 0.00) slower
String#gsub!/regexp/:  4597653.5 i/s - 36.05x  (± 0.00) slower
String#gsub!'string':   906038.7 i/s - 182.93x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   149.222M i/100ms
          String#dup   148.823M i/100ms
Calculating -------------------------------------
           String#+@      1.491B (± 0.4%) i/s -      7.461B in   5.003615s
          String#dup      1.492B (± 0.5%) i/s -      7.590B in   5.086654s

Comparison:
          String#dup: 1492171394.2 i/s
           String#+@: 1491160627.0 i/s - same-ish: difference falls within error

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?   244.247k i/100ms
           String#=~     6.494M i/100ms
          Regexp#===     6.497M i/100ms
        String#match     2.250M i/100ms
Calculating -------------------------------------
       String#match?     69.388M (± 2.1%) i/s -    346.586M in   5.000927s
           String#=~     64.951M (± 0.0%) i/s -    331.176M in   5.098877s
          Regexp#===     64.960M (± 0.1%) i/s -    324.840M in   5.000594s
        String#match     50.269M (± 0.4%) i/s -    251.971M in   5.012506s

Comparison:
       String#match?: 69388331.7 i/s
          Regexp#===: 64960222.8 i/s - 1.07x  (± 0.00) slower
           String#=~: 64950875.9 i/s - 1.07x  (± 0.00) slower
        String#match: 50269273.8 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   125.529k i/100ms
          String#sub    52.134k i/100ms
Calculating -------------------------------------
String#delete_prefix     20.711M (± 8.6%) i/s -    102.306M in   5.002373s
          String#sub     67.828M (± 1.2%) i/s -    338.245M in   4.992860s

Comparison:
          String#sub: 67827868.6 i/s
String#delete_prefix: 20710837.7 i/s - 3.27x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    84.681k i/100ms
           Array#map   631.700k i/100ms
Calculating -------------------------------------
   Array#each + push      1.533M (± 3.6%) i/s -      7.706M in   5.032104s
           Array#map      5.909M (± 4.3%) i/s -     29.690M in   5.033995s

Comparison:
           Array#map:  5908534.9 i/s
   Array#each + push:  1533457.8 i/s - 3.85x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   700.233k i/100ms
     each_with_index     1.265M i/100ms
Calculating -------------------------------------
          While Loop      7.015M (± 0.0%) i/s -     35.712M in   5.090771s
     each_with_index     12.647M (± 0.1%) i/s -     64.496M in   5.099610s

Comparison:
     each_with_index: 12647180.6 i/s
          While Loop:  7015025.4 i/s - 1.80x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         1.720k i/100ms
  Enumerable#sort_by     3.150k i/100ms
     Enumerable#sort    74.000  i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         30.561k (±15.1%) i/s -    137.600k in   5.006464s
  Enumerable#sort_by     29.592k (±21.2%) i/s -    126.000k in   5.075335s
     Enumerable#sort     47.079k (± 5.9%) i/s -    233.766k in   4.995157s

Comparison:
     Enumerable#sort:    47079.3 i/s
Enumerable#sort_by (Symbol#to_proc):    30560.6 i/s - 1.54x  (± 0.00) slower
  Enumerable#sort_by:    29591.8 i/s - 1.59x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     9.554M i/100ms
               #each    10.301M i/100ms
Calculating -------------------------------------
            For loop     99.490M (± 0.0%) i/s -    506.384M in   5.089792s
               #each    103.051M (± 0.1%) i/s -    525.337M in   5.097828s

Comparison:
               #each: 103051243.7 i/s
            For loop: 99490055.6 i/s - 1.04x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       492.711k i/100ms
   Enumerable#detect     4.228M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          6.494M (± 2.4%) i/s -    130.076M in  20.042358s
   Enumerable#detect     42.285M (± 0.0%) i/s -    849.739M in  20.095628s

Comparison:
   Enumerable#detect: 42284784.5 i/s
Enumerable#select.first:  6493628.5 i/s - 6.51x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    92.292k i/100ms
  Array#reverse_each     1.316M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.848M (± 3.1%) i/s -      9.229M in   4.998625s
  Array#reverse_each     13.163M (± 0.0%) i/s -     67.121M in   5.099066s

Comparison:
  Array#reverse_each: 13163382.0 i/s
  Array#reverse.each:  1848331.7 i/s - 7.12x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   160.284k i/100ms
      inject to_proc   147.470k i/100ms
        inject block   147.459k i/100ms
Calculating -------------------------------------
       inject symbol      1.475M (± 0.0%) i/s -      7.373M in   5.000159s
      inject to_proc      1.475M (± 0.0%) i/s -      7.374M in   5.000229s
        inject block      1.475M (± 0.0%) i/s -      7.373M in   5.000099s

Comparison:
      inject to_proc:  1474632.7 i/s
       inject symbol:  1474566.1 i/s - same-ish: difference falls within error
        inject block:  1474561.0 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                        55.457k i/100ms
Enumerable#select.last
                       376.638k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.653M (± 3.5%) i/s -      8.263M in   5.007127s
Enumerable#select.last
                          3.778M (± 2.5%) i/s -     19.209M in   5.088292s

Comparison:
Enumerable#select.last:  3777517.8 i/s
Enumerable#reverse.detect:  1652721.0 i/s - 2.29x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    90.972k i/100ms
Enumerable#sort_by...first
                         4.510k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      3.157M (± 0.8%) i/s -     15.829M in   5.014134s
Enumerable#sort_by...first
                         62.453k (± 2.6%) i/s -    315.700k in   5.058706s

Comparison:
   Enumerable#min_by:  3157139.3 i/s
Enumerable#sort_by...first:    62452.5 i/s - 50.55x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     7.743k i/100ms
   Array#map.flatten    11.332k i/100ms
      Array#flat_map    32.309k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    107.333k (± 3.1%) i/s -    542.010k in   5.054754s
   Array#map.flatten    111.983k (± 2.0%) i/s -    566.600k in   5.061831s
      Array#flat_map    320.873k (± 2.7%) i/s -      1.615M in   5.038347s

Comparison:
      Array#flat_map:   320873.0 i/s
   Array#map.flatten:   111983.2 i/s - 2.87x  (± 0.00) slower
Array#map.flatten(1):   107333.1 i/s - 2.99x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other    62.354k i/100ms
          Hash#merge   812.512k i/100ms
Calculating -------------------------------------
        Hash#**other      1.437B (± 8.6%) i/s -      6.929B in   4.872724s
          Hash#merge      1.492B (± 0.6%) i/s -      7.442B in   4.988643s

Comparison:
          Hash#merge: 1491802178.2 i/s
        Hash#**other: 1436729190.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h     7.346k i/100ms
         sort + to_h   487.000  i/100ms
Calculating -------------------------------------
      sort_by + to_h    206.376k (± 9.6%) i/s -      1.021M in   4.996100s
         sort + to_h     46.113k (± 6.9%) i/s -    228.890k in   4.997882s

Comparison:
      sort_by + to_h:   206376.4 i/s
         sort + to_h:    46112.9 i/s - 4.48x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   149.142M i/100ms
  Hash#fetch + block   238.589M i/100ms
    Hash#fetch + arg   149.410M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.486B (± 3.2%) i/s -      7.457B in   5.026398s
  Hash#fetch + block      2.389B (± 0.1%) i/s -     12.168B in   5.092750s
    Hash#fetch + arg      1.494B (± 0.0%) i/s -      7.471B in   5.000706s

Comparison:
  Hash#fetch + block: 2389289307.6 i/s
    Hash#fetch + arg: 1493894128.7 i/s - 1.60x  (± 0.00) slower
  Hash#fetch + const: 1485504626.7 i/s - 1.61x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                       848.000  i/100ms
      Hash#merge({})   941.000  i/100ms
 Hash#dup#merge!({})     4.307k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        102.003k (± 9.6%) i/s -    503.712k in   5.002438s
      Hash#merge({})     79.458k (± 9.4%) i/s -    393.338k in   5.007047s
 Hash#dup#merge!({})    116.418k (± 5.5%) i/s -    581.445k in   5.010403s

Comparison:
 Hash#dup#merge!({}):   116418.1 i/s
{}#merge!(Hash) do end:   102003.0 i/s - same-ish: difference falls within error
      Hash#merge({}):    79457.7 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   115.944k i/100ms
            Hash#dup   228.832k i/100ms
Calculating -------------------------------------
              Hash[]      2.034M (±13.4%) i/s -     10.087M in   5.065560s
            Hash#dup      2.100M (±10.7%) i/s -     10.526M in   5.084205s

Comparison:
            Hash#dup:  2099685.9 i/s
              Hash[]:  2033774.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     1.316k i/100ms
            Hash#[]=    19.537k i/100ms
Calculating -------------------------------------
         Hash#merge!    269.203k (± 9.2%) i/s -      1.327M in   5.002233s
            Hash#[]=    263.660k (± 3.1%) i/s -      1.329M in   5.043680s

Comparison:
         Hash#merge!:   269202.6 i/s
            Hash#[]=:   263659.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      688.455k i/100ms
Array#each             917.351k i/100ms
Array#each_w/_object   940.195k i/100ms
Hash#select-include    839.951k i/100ms
Calculating -------------------------------------
Hash#native-slice        11.449M (± 4.2%) i/s -     57.142M in   5.000342s
Array#each                9.258M (± 2.2%) i/s -     46.785M in   5.056092s
Array#each_w/_object      9.306M (± 2.4%) i/s -     47.010M in   5.054432s
Hash#select-include      11.571M (± 3.1%) i/s -     57.957M in   5.013637s

Comparison:
Hash#select-include : 11571178.1 i/s
Hash#native-slice   : 11448604.5 i/s - same-ish: difference falls within error
Array#each_w/_object:  9306024.8 i/s - 1.24x  (± 0.00) slower
Array#each          :  9257739.8 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   107.000  i/100ms
           Hash#key?     2.932M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.923k (±10.2%) i/s -      9.523k in   5.021319s
           Hash#key?     28.530M (± 0.5%) i/s -    143.656M in   5.035368s

Comparison:
           Hash#key?: 28530227.8 i/s
  Hash#keys.include?:     1923.3 i/s - 14833.75x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    59.756M i/100ms
             Hash#[]    59.762M i/100ms
          Hash#[] ||    59.697M i/100ms
          Hash#[] &&    59.721M i/100ms
          Hash#fetch    59.756M i/100ms
 Hash#fetch fallback    59.759M i/100ms
Calculating -------------------------------------
            Hash#dig    597.482M (± 0.0%) i/s -      2.988B in   5.000644s
             Hash#[]    597.495M (± 0.0%) i/s -      2.988B in   5.001064s
          Hash#[] ||    597.382M (± 0.1%) i/s -      3.045B in   5.096487s
          Hash#[] &&    597.403M (± 0.0%) i/s -      3.046B in   5.098395s
          Hash#fetch    597.344M (± 0.0%) i/s -      2.988B in   5.001833s
 Hash#fetch fallback    597.508M (± 0.0%) i/s -      2.988B in   5.000666s

Comparison:
 Hash#fetch fallback: 597507849.2 i/s
             Hash#[]: 597495430.0 i/s - same-ish: difference falls within error
            Hash#dig: 597481982.8 i/s - same-ish: difference falls within error
          Hash#[] &&: 597402851.2 i/s - same-ish: difference falls within error
          Hash#[] ||: 597381777.0 i/s - same-ish: difference falls within error
          Hash#fetch: 597343743.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   149.294M i/100ms
  Hash#fetch, symbol   238.824M i/100ms
     Hash#[], string     4.680M i/100ms
  Hash#fetch, string     4.392M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.493B (± 0.1%) i/s -      7.465B in   5.000361s
  Hash#fetch, symbol      2.390B (± 0.0%) i/s -     12.180B in   5.096280s
     Hash#[], string     46.121M (± 0.9%) i/s -    234.017M in   5.074461s
  Hash#fetch, string     43.620M (± 0.4%) i/s -    219.585M in   5.034109s

Comparison:
  Hash#fetch, symbol: 2389987719.1 i/s
     Hash#[], symbol: 1492838444.1 i/s - 1.60x  (± 0.00) slower
     Hash#[], string: 46120658.9 i/s - 51.82x  (± 0.00) slower
  Hash#fetch, string: 43620148.9 i/s - 54.79x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   267.000  i/100ms
         Hash#merge!    18.372k i/100ms
Calculating -------------------------------------
          Hash#merge      3.831k (± 2.7%) i/s -     19.224k in   5.021391s
         Hash#merge!    263.904k (± 3.3%) i/s -      1.323M in   5.018290s

Comparison:
         Hash#merge!:   263903.7 i/s
          Hash#merge:     3831.3 i/s - 68.88x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   145.000  i/100ms
         Hash#value?    11.414k i/100ms
Calculating -------------------------------------
Hash#values.include?      2.362k (±10.8%) i/s -     11.745k in   5.049567s
         Hash#value?    114.121k (± 0.1%) i/s -    570.700k in   5.000858s

Comparison:
         Hash#value?:   114120.5 i/s
Hash#values.include?:     2362.0 i/s - 48.31x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each    45.903k i/100ms
       Hash#each_key   111.905k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.200M (± 4.7%) i/s -      6.013M in   5.024193s
       Hash#each_key      1.311M (± 2.7%) i/s -      6.602M in   5.038503s

Comparison:
       Hash#each_key:  1311373.5 i/s
      Hash#keys.each:  1199726.2 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    18.380k i/100ms
      Symbol#to_proc    19.450k i/100ms
Calculating -------------------------------------
               Block    195.729k (± 1.6%) i/s -    992.520k in   5.072234s
      Symbol#to_proc    194.138k (± 1.9%) i/s -    972.500k in   5.011092s

Comparison:
               Block:   195728.7 i/s
      Symbol#to_proc:   194138.2 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   238.121M i/100ms
       block + yield   238.085M i/100ms
        unused block   238.190M i/100ms
               yield   238.062M i/100ms
Calculating -------------------------------------
          block.call      2.384B (± 1.1%) i/s -     12.144B in   5.094316s
       block + yield      2.389B (± 0.4%) i/s -     12.142B in   5.083193s
        unused block      2.375B (± 3.2%) i/s -     11.910B in   5.021860s
               yield      2.390B (± 0.1%) i/s -     12.141B in   5.079886s

Comparison:
               yield: 2390042260.0 i/s
       block + yield: 2388761858.8 i/s - same-ish: difference falls within error
          block.call: 2384164511.4 i/s - same-ish: difference falls within error
        unused block: 2374567564.6 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601     1.677k i/100ms
          Time.parse    24.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    124.978k (±13.1%) i/s -    608.751k in   4.997268s
          Time.parse      3.183k (±39.3%) i/s -     12.408k in   4.990735s

Comparison:
        Time.iso8601:   124978.4 i/s
          Time.parse:     3182.5 i/s - 39.27x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.0.0-dev-641865bc, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   102.000  i/100ms
          Date.parse   116.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     12.358k (±53.0%) i/s -     39.984k in   4.963998s
          Date.parse      5.968k (±52.8%) i/s -     20.416k in   5.003666s

Comparison:
        Date.iso8601:    12357.7 i/s
          Date.parse:     5967.7 i/s - same-ish: difference falls within error

