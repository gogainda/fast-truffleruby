$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       276.137M i/100ms
Function with splat arguments
                       626.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          2.771B (± 1.3%) i/s -     14.083B in   5.082309s
Function with splat arguments
                          6.536k (± 4.4%) i/s -     33.178k in   5.086423s

Comparison:
Function with single Array argument: 2771449919.1 i/s
Function with splat arguments:     6535.9 i/s - 424034.12x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   276.350M i/100ms
Sequential Assignment
                       272.087M i/100ms
Calculating -------------------------------------
 Parallel Assignment      2.744B (± 0.9%) i/s -     13.817B in   5.035580s
Sequential Assignment
                          2.761B (± 1.1%) i/s -     13.876B in   5.027304s

Comparison:
Sequential Assignment: 2760565536.0 i/s
 Parallel Assignment: 2744180199.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   271.375M i/100ms
       attr_accessor   274.540M i/100ms
Calculating -------------------------------------
   getter_and_setter      2.768B (± 1.1%) i/s -     13.840B in   5.001239s
       attr_accessor      2.755B (± 0.9%) i/s -     14.002B in   5.083540s

Comparison:
   getter_and_setter: 2767669089.4 i/s
       attr_accessor: 2754521499.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     8.371k i/100ms
         respond_to?   276.965M i/100ms
Calculating -------------------------------------
      begin...rescue     59.399k (± 2.3%) i/s -    301.356k in   5.076267s
         respond_to?      2.780B (± 1.0%) i/s -     14.125B in   5.081442s

Comparison:
         respond_to?: 2780028228.2 i/s
      begin...rescue:    59398.5 i/s - 46802.97x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   271.995M i/100ms
             &method   276.186M i/100ms
Calculating -------------------------------------
              normal      2.786B (± 1.1%) i/s -     14.144B in   5.076758s
             &method      2.774B (± 1.2%) i/s -     14.085B in   5.078639s

Comparison:
              normal: 2786304705.6 i/s
             &method: 2773881428.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       121.000  i/100ms
       define_method   107.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.845k (±59.6%) i/s -      4.477k in   6.451900s
       define_method      4.357k (±44.2%) i/s -      8.025k in   5.008261s

Comparison:
       define_method:     4356.8 i/s
module_eval with string:     1845.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    37.249k i/100ms
       Kernel#format    54.165k i/100ms
            String#%    56.015k i/100ms
Calculating -------------------------------------
         Float#round    418.311k (± 2.6%) i/s -      2.123M in   5.079202s
       Kernel#format    559.725k (± 1.9%) i/s -      2.817M in   5.034014s
            String#%    549.185k (± 2.1%) i/s -      2.745M in   5.000143s

Comparison:
       Kernel#format:   559725.4 i/s
            String#%:   549184.9 i/s - same-ish: difference falls within error
         Float#round:   418311.4 i/s - 1.34x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   270.601M i/100ms
          OpenStruct   271.084M i/100ms
Calculating -------------------------------------
                Hash      2.726B (± 0.9%) i/s -     13.801B in   5.062950s
          OpenStruct      2.712B (± 0.5%) i/s -     13.825B in   5.097282s

Comparison:
                Hash: 2726051175.6 i/s
          OpenStruct: 2712344954.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   270.579M i/100ms
          OpenStruct     2.884k i/100ms
Calculating -------------------------------------
                Hash      2.385B (± 0.3%) i/s -     12.176B in   5.104439s
          OpenStruct     30.044k (±11.6%) i/s -    149.968k in   5.087774s

Comparison:
                Hash: 2385400968.1 i/s
          OpenStruct:    30043.6 i/s - 79397.97x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   850.862k i/100ms
  ancestors.include?   139.932k i/100ms
Calculating -------------------------------------
  less than or equal      9.229M (± 3.5%) i/s -     46.797M in   5.077199s
  ancestors.include?      1.410M (± 3.8%) i/s -      7.137M in   5.068516s

Comparison:
  less than or equal:  9228900.8 i/s
  ancestors.include?:  1410076.9 i/s - 6.54x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     2.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     27.538  (± 0.0%) i/s -    138.000  in   5.012598s
         Kernel loop      6.361  (± 0.0%) i/s -     32.000  in   5.031362s

Comparison:
          While Loop:       27.5 i/s
         Kernel loop:        6.4 i/s - 4.33x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   274.199M i/100ms
         Array#first   238.616M i/100ms
Calculating -------------------------------------
           Array#[0]      2.387B (± 0.3%) i/s -     12.065B in   5.055348s
         Array#first      2.386B (± 0.9%) i/s -     11.931B in   5.001116s

Comparison:
           Array#[0]: 2386556343.0 i/s
         Array#first: 2385829771.8 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   238.555M i/100ms
          Array#last   238.510M i/100ms
Calculating -------------------------------------
          Array#[-1]      2.388B (± 0.3%) i/s -     12.166B in   5.095398s
          Array#last      2.390B (± 0.2%) i/s -     12.164B in   5.090512s

Comparison:
          Array#last: 2389561977.8 i/s
          Array#[-1]: 2387728751.9 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   434.204k i/100ms
Calculating -------------------------------------
                find     17.087  (±17.6%) i/s -     43.000  in   5.028621s
             bsearch      4.333M (± 3.6%) i/s -     21.710M in   5.017380s

Comparison:
             bsearch:  4332972.6 i/s
                find:       17.1 i/s - 253578.86x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.124  (± 0.0%) i/s -      1.000  in   8.084632s
        Array#insert      0.943  (± 0.0%) i/s -      5.000  in   5.301607s

Comparison:
        Array#insert:        0.9 i/s
       Array#unshift:        0.1 i/s - 7.62x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   238.986M i/100ms
          Array#size   273.117M i/100ms
         Array#count   273.697M i/100ms
Calculating -------------------------------------
        Array#length      2.722B (± 0.8%) i/s -     13.622B in   5.003916s
          Array#size      2.743B (± 0.8%) i/s -     13.929B in   5.078247s
         Array#count      2.739B (± 0.8%) i/s -     13.959B in   5.097101s

Comparison:
          Array#size: 2743041511.4 i/s
         Array#count: 2738707826.1 i/s - same-ish: difference falls within error
        Array#length: 2722494636.7 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    26.495k i/100ms
        Array#sample     2.947M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    264.624k (± 2.0%) i/s -      1.325M in   5.008206s
        Array#sample     29.441M (± 0.7%) i/s -    147.343M in   5.004856s

Comparison:
        Array#sample: 29441353.1 i/s
 Array#shuffle.first:   264623.8 i/s - 111.26x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   386.000  i/100ms
          Date.parse   118.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     13.464k (±36.1%) i/s -     52.496k in   5.003500s
          Date.parse      6.960k (±39.2%) i/s -     25.960k in   4.983247s

Comparison:
        Date.iso8601:    13464.4 i/s
          Date.parse:     6959.8 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   158.123k i/100ms
           Array#map   610.326k i/100ms
Calculating -------------------------------------
   Array#each + push      1.616M (± 4.1%) i/s -      8.064M in   5.000226s
           Array#map      6.232M (± 6.2%) i/s -     31.127M in   5.014195s

Comparison:
           Array#map:  6231726.0 i/s
   Array#each + push:  1615695.8 i/s - 3.86x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    12.022M i/100ms
               #each    14.495M i/100ms
Calculating -------------------------------------
            For loop    119.452M (± 0.6%) i/s -    601.120M in   5.032456s
               #each    143.435M (± 0.3%) i/s -    724.737M in   5.052787s

Comparison:
               #each: 143434795.7 i/s
            For loop: 119452307.3 i/s - 1.20x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   798.193k i/100ms
     each_with_index     1.395M i/100ms
Calculating -------------------------------------
          While Loop      8.017M (± 0.6%) i/s -     40.708M in   5.077849s
     each_with_index     13.938M (± 0.5%) i/s -     69.741M in   5.003815s

Comparison:
     each_with_index: 13938043.0 i/s
          While Loop:  8017064.1 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   168.437k i/100ms
      inject to_proc   168.817k i/100ms
        inject block   169.560k i/100ms
Calculating -------------------------------------
       inject symbol      1.690M (± 0.4%) i/s -      8.590M in   5.083400s
      inject to_proc      1.688M (± 0.3%) i/s -      8.441M in   5.001115s
        inject block      1.689M (± 0.3%) i/s -      8.478M in   5.018260s

Comparison:
       inject symbol:  1689895.3 i/s
        inject block:  1689449.3 i/s - same-ish: difference falls within error
      inject to_proc:  1687806.7 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    10.254k i/100ms
   Array#map.flatten    12.297k i/100ms
      Array#flat_map    34.533k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    124.154k (± 3.4%) i/s -    625.494k in   5.044287s
   Array#map.flatten    124.835k (± 2.4%) i/s -    627.147k in   5.026838s
      Array#flat_map    347.849k (± 2.3%) i/s -      1.761M in   5.065819s

Comparison:
      Array#flat_map:   347848.9 i/s
   Array#map.flatten:   124835.4 i/s - 2.79x  (± 0.00) slower
Array#map.flatten(1):   124154.1 i/s - 2.80x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   143.580k i/100ms
  Array#reverse_each   916.934k i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.675M (± 3.0%) i/s -      8.471M in   5.061792s
  Array#reverse_each      9.168M (± 0.0%) i/s -     45.847M in   5.000680s

Comparison:
  Array#reverse_each:  9168094.5 i/s
  Array#reverse.each:  1675108.6 i/s - 5.47x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       645.084k i/100ms
   Enumerable#detect     4.520M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          7.353M (± 6.3%) i/s -    146.434M in  20.016759s
   Enumerable#detect     45.021M (± 0.9%) i/s -    903.956M in  20.080067s

Comparison:
   Enumerable#detect: 45020940.4 i/s
Enumerable#select.first:  7353367.7 i/s - 6.12x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       181.629k i/100ms
Enumerable#select.last
                       379.026k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.908M (± 3.8%) i/s -      9.626M in   5.053102s
Enumerable#select.last
                          3.915M (± 3.1%) i/s -     19.709M in   5.039562s

Comparison:
Enumerable#select.last:  3914841.9 i/s
Enumerable#reverse.detect:  1907944.0 i/s - 2.05x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.706k i/100ms
  Enumerable#sort_by     2.958k i/100ms
     Enumerable#sort     3.872k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         27.852k (±14.1%) i/s -    132.594k in   5.039338s
  Enumerable#sort_by     27.948k (±14.0%) i/s -    133.110k in   5.041665s
     Enumerable#sort     40.111k (± 2.1%) i/s -    201.344k in   5.021900s

Comparison:
     Enumerable#sort:    40111.5 i/s
  Enumerable#sort_by:    27947.6 i/s - 1.44x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    27851.9 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   382.940k i/100ms
Enumerable#sort_by...first
                         5.320k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      3.835M (± 1.1%) i/s -     19.530M in   5.093244s
Enumerable#sort_by...first
                         64.919k (± 2.9%) i/s -    324.520k in   5.003118s

Comparison:
   Enumerable#min_by:  3834914.3 i/s
Enumerable#sort_by...first:    64918.7 i/s - 59.07x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   236.402k i/100ms
            Hash#dup   236.366k i/100ms
Calculating -------------------------------------
              Hash[]      2.454M (± 3.7%) i/s -     12.293M in   5.016610s
            Hash#dup      2.386M (± 3.2%) i/s -     12.055M in   5.057253s

Comparison:
              Hash[]:  2453974.4 i/s
            Hash#dup:  2386196.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   280.758M i/100ms
  Hash#fetch, symbol   283.093M i/100ms
     Hash#[], string     6.154M i/100ms
  Hash#fetch, string     5.348M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      2.842B (± 1.5%) i/s -     14.319B in   5.039256s
  Hash#fetch, symbol      2.827B (± 1.7%) i/s -     14.155B in   5.009200s
     Hash#[], string     60.087M (± 1.8%) i/s -    301.526M in   5.019725s
  Hash#fetch, string     52.159M (± 1.8%) i/s -    262.047M in   5.025570s

Comparison:
     Hash#[], symbol: 2842063924.9 i/s
  Hash#fetch, symbol: 2826551045.3 i/s - same-ish: difference falls within error
     Hash#[], string: 60086999.0 i/s - 47.30x  (± 0.00) slower
  Hash#fetch, string: 52159301.8 i/s - 54.49x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    69.552M i/100ms
             Hash#[]    69.590M i/100ms
          Hash#[] ||    70.772M i/100ms
          Hash#[] &&    71.149M i/100ms
          Hash#fetch    69.212M i/100ms
 Hash#fetch fallback    69.907M i/100ms
Calculating -------------------------------------
            Hash#dig    706.085M (± 1.1%) i/s -      3.547B in   5.024375s
             Hash#[]    706.057M (± 1.1%) i/s -      3.549B in   5.027332s
          Hash#[] ||    703.588M (± 1.2%) i/s -      3.539B in   5.030149s
          Hash#[] &&    702.253M (± 1.3%) i/s -      3.557B in   5.066687s
          Hash#fetch    704.492M (± 0.9%) i/s -      3.530B in   5.010850s
 Hash#fetch fallback    693.995M (± 1.0%) i/s -      3.495B in   5.037067s

Comparison:
            Hash#dig: 706084578.7 i/s
             Hash#[]: 706056735.7 i/s - same-ish: difference falls within error
          Hash#fetch: 704492146.6 i/s - same-ish: difference falls within error
          Hash#[] ||: 703588413.9 i/s - same-ish: difference falls within error
          Hash#[] &&: 702253402.3 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 693995307.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   273.657M i/100ms
  Hash#fetch + block   280.483M i/100ms
    Hash#fetch + arg   275.003M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      2.745B (± 1.2%) i/s -     13.957B in   5.085145s
  Hash#fetch + block      2.723B (± 1.0%) i/s -     13.744B in   5.047845s
    Hash#fetch + arg      2.772B (± 1.7%) i/s -     14.025B in   5.061438s

Comparison:
    Hash#fetch + arg: 2771738293.9 i/s
  Hash#fetch + const: 2744933684.6 i/s - same-ish: difference falls within error
  Hash#fetch + block: 2722954439.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    20.551k i/100ms
         sort + to_h    13.946k i/100ms
Calculating -------------------------------------
      sort_by + to_h    232.544k (±15.7%) i/s -      1.130M in   5.006335s
         sort + to_h     86.752k (± 2.3%) i/s -    446.272k in   5.146878s

Comparison:
      sort_by + to_h:   232544.1 i/s
         sort + to_h:    86752.0 i/s - 2.68x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   118.561k i/100ms
       Hash#each_key   140.482k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.313M (± 4.0%) i/s -      6.639M in   5.064485s
       Hash#each_key      1.388M (± 3.7%) i/s -      7.024M in   5.069123s

Comparison:
       Hash#each_key:  1387689.9 i/s
      Hash#keys.each:  1313129.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   244.000  i/100ms
           Hash#key?     3.515M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      2.561k (±11.8%) i/s -     12.444k in   4.998804s
           Hash#key?     36.683M (± 1.6%) i/s -    186.281M in   5.079389s

Comparison:
           Hash#key?: 36683482.2 i/s
  Hash#keys.include?:     2561.5 i/s - 14321.11x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    21.566k i/100ms
            Hash#[]=    24.968k i/100ms
Calculating -------------------------------------
         Hash#merge!    246.111k (± 3.0%) i/s -      1.229M in   4.999409s
            Hash#[]=    251.361k (± 2.9%) i/s -      1.273M in   5.070310s

Comparison:
            Hash#[]=:   251361.0 i/s
         Hash#merge!:   246110.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        11.368k i/100ms
      Hash#merge({})     8.997k i/100ms
 Hash#dup#merge!({})    14.702k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        139.683k (± 3.8%) i/s -    704.816k in   5.053774s
      Hash#merge({})     91.505k (± 3.4%) i/s -    458.847k in   5.020580s
 Hash#dup#merge!({})    148.947k (± 2.7%) i/s -    749.802k in   5.038186s

Comparison:
 Hash#dup#merge!({}):   148946.7 i/s
{}#merge!(Hash) do end:   139683.1 i/s - same-ish: difference falls within error
      Hash#merge({}):    91504.7 i/s - 1.63x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   238.704M i/100ms
          Hash#merge   239.140M i/100ms
Calculating -------------------------------------
        Hash#**other      2.387B (± 0.4%) i/s -     11.935B in   5.000572s
          Hash#merge      2.389B (± 0.3%) i/s -     11.957B in   5.005358s

Comparison:
          Hash#merge: 2388864861.9 i/s
        Hash#**other: 2386805807.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   329.000  i/100ms
         Hash#merge!    24.430k i/100ms
Calculating -------------------------------------
          Hash#merge      3.822k (± 4.5%) i/s -     19.411k in   5.089224s
         Hash#merge!    244.971k (± 2.9%) i/s -      1.246M in   5.090672s

Comparison:
         Hash#merge!:   244971.3 i/s
          Hash#merge:     3822.2 i/s - 64.09x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.344M i/100ms
Array#each               1.103M i/100ms
Array#each_w/_object     1.099M i/100ms
Hash#select-include      1.486M i/100ms
Calculating -------------------------------------
Hash#native-slice        14.039M (± 2.7%) i/s -     71.222M in   5.077280s
Array#each               10.915M (± 2.7%) i/s -     55.138M in   5.055394s
Array#each_w/_object     10.957M (± 3.1%) i/s -     54.951M in   5.020021s
Hash#select-include      14.804M (± 2.7%) i/s -     74.311M in   5.023364s

Comparison:
Hash#select-include : 14804243.9 i/s
Hash#native-slice   : 14038608.6 i/s - same-ish: difference falls within error
Array#each_w/_object: 10957330.5 i/s - 1.35x  (± 0.00) slower
Array#each          : 10915160.2 i/s - 1.36x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   185.000  i/100ms
         Hash#value?   432.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.790k (± 9.3%) i/s -      8.880k in   5.025920s
         Hash#value?      4.334k (± 0.2%) i/s -     22.032k in   5.083885s

Comparison:
         Hash#value?:     4333.7 i/s
Hash#values.include?:     1790.4 i/s - 2.42x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   238.711M i/100ms
                send   238.674M i/100ms
      method_missing   239.112M i/100ms
Calculating -------------------------------------
                call      2.387B (± 0.3%) i/s -     11.936B in   4.999427s
                send      2.388B (± 0.4%) i/s -     12.172B in   5.097927s
      method_missing      2.389B (± 0.3%) i/s -     11.956B in   5.004577s

Comparison:
      method_missing: 2388950163.4 i/s
                send: 2387744364.6 i/s - same-ish: difference falls within error
                call: 2387406269.6 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    17.892k i/100ms
      Symbol#to_proc    20.158k i/100ms
Calculating -------------------------------------
               Block    206.190k (± 4.0%) i/s -      1.038M in   5.041350s
      Symbol#to_proc    206.174k (± 3.3%) i/s -      1.048M in   5.090025s

Comparison:
               Block:   206189.6 i/s
      Symbol#to_proc:   206173.9 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   238.856M i/100ms
       block + yield   239.068M i/100ms
        unused block   239.148M i/100ms
               yield   239.070M i/100ms
Calculating -------------------------------------
          block.call      2.388B (± 0.3%) i/s -     11.943B in   5.001496s
       block + yield      2.390B (± 0.2%) i/s -     11.953B in   5.001358s
        unused block      2.390B (± 0.2%) i/s -     11.957B in   5.003872s
               yield      2.390B (± 0.2%) i/s -     11.953B in   5.001988s

Comparison:
       block + yield: 2390041392.9 i/s
               yield: 2389755713.1 i/s - same-ish: difference falls within error
        unused block: 2389638627.0 i/s - same-ish: difference falls within error
          block.call: 2387869160.8 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    45.039k i/100ms
      range#include?   330.000  i/100ms
       range#member?   257.000  i/100ms
       plain compare    30.308k i/100ms
Calculating -------------------------------------
        range#cover?    305.260k (±36.4%) i/s -      1.351M in   5.111182s
      range#include?      4.884k (±50.1%) i/s -     18.480k in   5.055579s
       range#member?      4.925k (±55.4%) i/s -     11.822k in   5.005613s
       plain compare    527.081k (±30.8%) i/s -      2.364M in   5.014579s

Comparison:
       plain compare:   527080.9 i/s
        range#cover?:   305260.0 i/s - same-ish: difference falls within error
       range#member?:     4924.6 i/s - 107.03x  (± 0.00) slower
      range#include?:     4883.9 i/s - 107.92x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     4.286M i/100ms
           String#=~     7.951M i/100ms
          Regexp#===     7.820M i/100ms
        String#match     5.825M i/100ms
Calculating -------------------------------------
       String#match?     45.346M (± 4.0%) i/s -    227.161M in   5.017939s
           String#=~     78.224M (± 1.6%) i/s -    397.575M in   5.083917s
          Regexp#===     79.057M (± 1.2%) i/s -    398.845M in   5.045799s
        String#match     58.053M (± 1.3%) i/s -    291.264M in   5.018101s

Comparison:
          Regexp#===: 79056604.6 i/s
           String#=~: 78223620.8 i/s - same-ish: difference falls within error
        String#match: 58052832.1 i/s - 1.36x  (± 0.00) slower
       String#match?: 45345797.5 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.370M i/100ms
      String#casecmp     3.984M i/100ms
Calculating -------------------------------------
String#downcase + ==     15.618M (± 3.9%) i/s -     78.088M in   5.007900s
      String#casecmp     40.183M (± 1.1%) i/s -    203.194M in   5.057441s

Comparison:
      String#casecmp: 40182548.9 i/s
String#downcase + ==: 15617848.4 i/s - 2.57x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+   279.886M i/100ms
       String#concat   281.861M i/100ms
       String#append   273.123M i/100ms
         "foo" "bar"   278.231M i/100ms
  "#{'foo'}#{'bar'}"   275.794M i/100ms
Calculating -------------------------------------
            String#+      2.773B (± 1.9%) i/s -     13.994B in   5.047508s
       String#concat      2.736B (± 1.0%) i/s -     13.811B in   5.049017s
       String#append      2.813B (± 1.6%) i/s -     14.202B in   5.050678s
         "foo" "bar"      2.780B (± 1.5%) i/s -     13.912B in   5.005871s
  "#{'foo'}#{'bar'}"      2.760B (± 1.3%) i/s -     14.066B in   5.097660s

Comparison:
       String#append: 2812716428.9 i/s
         "foo" "bar": 2779668115.5 i/s - same-ish: difference falls within error
            String#+: 2773475615.5 i/s - same-ish: difference falls within error
  "#{'foo'}#{'bar'}": 2759672353.1 i/s - same-ish: difference falls within error
       String#concat: 2735678004.4 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   270.600M i/100ms
          String#dup   272.812M i/100ms
Calculating -------------------------------------
           String#+@      2.733B (± 1.0%) i/s -     13.801B in   5.049367s
          String#dup      2.755B (± 1.2%) i/s -     13.913B in   5.050394s

Comparison:
          String#dup: 2755329506.3 i/s
           String#+@: 2733385611.8 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.384M i/100ms
       String#match?     1.595M i/100ms
    String#end_with?    21.383M i/100ms
Calculating -------------------------------------
           String#=~     14.154M (± 3.4%) i/s -     71.974M in   5.091326s
       String#match?     16.397M (± 3.0%) i/s -     82.949M in   5.063522s
    String#end_with?    217.850M (± 2.0%) i/s -      1.091B in   5.007866s

Comparison:
    String#end_with?: 217850189.2 i/s
       String#match?: 16396878.7 i/s - 13.29x  (± 0.00) slower
           String#=~: 14154341.2 i/s - 15.39x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   112.461k i/100ms
          String#sub     1.897M i/100ms
String#dup["string"]=
                        13.730M i/100ms
Calculating -------------------------------------
         String#gsub      1.171M (± 2.2%) i/s -      5.960M in   5.091844s
          String#sub     19.008M (± 2.6%) i/s -     96.747M in   5.093268s
String#dup["string"]=
                        136.913M (± 1.0%) i/s -    686.489M in   5.014513s

Comparison:
String#dup["string"]=: 136913141.4 i/s
          String#sub: 19008456.6 i/s - 7.20x  (± 0.00) slower
         String#gsub:  1171176.7 i/s - 116.90x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   259.157k i/100ms
           String#tr   146.177k i/100ms
Calculating -------------------------------------
         String#gsub      2.771M (± 5.1%) i/s -     13.994M in   5.064692s
           String#tr      1.482M (± 4.4%) i/s -      7.455M in   5.040849s

Comparison:
         String#gsub:  2770662.4 i/s
           String#tr:  1481945.1 i/s - 1.87x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   273.691M i/100ms
         With Freeze   271.051M i/100ms
Calculating -------------------------------------
      Without Freeze      2.750B (± 1.5%) i/s -     13.958B in   5.076438s
         With Freeze      2.772B (± 1.5%) i/s -     14.095B in   5.086237s

Comparison:
         With Freeze: 2771784975.7 i/s
      Without Freeze: 2750235193.3 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     5.782k i/100ms
      String#squeeze    67.344k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     72.564k (± 3.8%) i/s -    364.266k in   5.027578s
      String#squeeze    676.909k (± 2.4%) i/s -      3.435M in   5.076942s

Comparison:
      String#squeeze:   676909.0 i/s
 String#gsub/regex+/:    72564.0 i/s - 9.33x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     3.091M i/100ms
       String#match?     2.388M i/100ms
  String#start_with?     2.047M i/100ms
Calculating -------------------------------------
           String#=~     32.416M (± 2.8%) i/s -    163.810M in   5.057697s
       String#match?     24.112M (± 3.1%) i/s -    121.797M in   5.056289s
  String#start_with?     20.577M (± 3.0%) i/s -    104.405M in   5.078788s

Comparison:
           String#=~: 32415771.4 i/s
       String#match?: 24111961.4 i/s - 1.34x  (± 0.00) slower
  String#start_with?: 20577442.6 i/s - 1.58x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   343.632k i/100ms
    String#[0, n] ==   220.362k i/100ms
   String#[RANGE] ==   222.519k i/100ms
   String#[0...n] ==   166.171k i/100ms
Calculating -------------------------------------
  String#start_with?      3.863M (± 3.1%) i/s -     19.587M in   5.076098s
    String#[0, n] ==      2.293M (± 3.7%) i/s -     11.459M in   5.004694s
   String#[RANGE] ==      2.303M (± 2.9%) i/s -     11.571M in   5.027795s
   String#[0...n] ==      1.642M (± 4.5%) i/s -      8.309M in   5.069114s

Comparison:
  String#start_with?:  3862640.5 i/s
   String#[RANGE] ==:  2303471.8 i/s - 1.68x  (± 0.00) slower
    String#[0, n] ==:  2292972.6 i/s - 1.68x  (± 0.00) slower
   String#[0...n] ==:  1642421.4 i/s - 2.35x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    15.049M i/100ms
 String#sub!'string'     2.468M i/100ms
String#gsub!'string'   117.173k i/100ms
  String#[/regexp/]=     4.584M i/100ms
 String#sub!/regexp/     2.230M i/100ms
String#gsub!/regexp/   593.893k i/100ms
Calculating -------------------------------------
  String#['string']=    158.536M (± 1.3%) i/s -    797.608M in   5.031906s
 String#sub!'string'      7.145M (±21.2%) i/s -     34.547M in   5.284300s
String#gsub!'string'      1.304M (± 2.7%) i/s -      6.562M in   5.035776s
  String#[/regexp/]=     44.846M (± 1.0%) i/s -    224.592M in   5.008594s
 String#sub!/regexp/     22.515M (± 2.4%) i/s -    113.712M in   5.053637s
String#gsub!/regexp/      6.080M (± 4.3%) i/s -     30.882M in   5.088772s

Comparison:
  String#['string']=: 158536010.6 i/s
  String#[/regexp/]=: 44845626.2 i/s - 3.54x  (± 0.00) slower
 String#sub!/regexp/: 22514805.6 i/s - 7.04x  (± 0.00) slower
 String#sub!'string':  7144895.7 i/s - 22.19x  (± 0.00) slower
String#gsub!/regexp/:  6080477.3 i/s - 26.07x  (± 0.00) slower
String#gsub!'string':  1304013.6 i/s - 121.58x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     2.113M i/100ms
        String#chomp     2.965M i/100ms
String#delete_suffix     6.035M i/100ms
Calculating -------------------------------------
          String#sub     24.669M (± 3.6%) i/s -    124.694M in   5.061849s
        String#chomp     29.831M (± 2.8%) i/s -    151.210M in   5.073060s
String#delete_suffix     60.529M (± 0.7%) i/s -    307.775M in   5.085002s

Comparison:
String#delete_suffix: 60528978.7 i/s
        String#chomp: 29831418.3 i/s - 2.03x  (± 0.00) slower
          String#sub: 24669073.3 i/s - 2.45x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix     2.340M i/100ms
          String#sub     8.349M i/100ms
Calculating -------------------------------------
String#delete_prefix     23.249M (± 3.9%) i/s -    117.021M in   5.041378s
          String#sub     83.381M (± 0.8%) i/s -    417.438M in   5.006663s

Comparison:
          String#sub: 83381312.1 i/s
String#delete_prefix: 23248903.3 i/s - 3.59x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.568M i/100ms
    String#unpack[0]     1.597M i/100ms
Calculating -------------------------------------
      String#unpack1     16.015M (± 3.2%) i/s -     81.528M in   5.096107s
    String#unpack[0]     16.082M (± 3.1%) i/s -     81.452M in   5.070108s

Comparison:
    String#unpack[0]: 16081909.7 i/s
      String#unpack1: 16015189.3 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.1.0-dev-c1655b30, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    21.102k i/100ms
          Time.parse   189.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    132.123k (±39.6%) i/s -    548.652k in   5.021979s
          Time.parse      3.969k (±33.1%) i/s -     16.443k in   5.008315s

Comparison:
        Time.iso8601:   132123.1 i/s
          Time.parse:     3968.6 i/s - 33.29x  (± 0.00) slower

