$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       198.546M i/100ms
Function with splat arguments
                       495.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.930B (± 3.1%) i/s -      9.729B in   5.047407s
Function with splat arguments
                          5.965k (± 6.3%) i/s -     29.700k in   5.000378s

Comparison:
Function with single Array argument: 1929544366.4 i/s
Function with splat arguments:     5965.4 i/s - 323456.90x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   194.354M i/100ms
Sequential Assignment
                       198.848M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.988B (± 0.3%) i/s -     10.106B in   5.084282s
Sequential Assignment
                          1.989B (± 0.3%) i/s -     10.141B in   5.097703s

Comparison:
Sequential Assignment: 1989403992.6 i/s
 Parallel Assignment: 1987796435.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   198.680M i/100ms
       attr_accessor   198.977M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.989B (± 0.4%) i/s -     10.133B in   5.095171s
       attr_accessor      1.991B (± 0.3%) i/s -     10.148B in   5.097170s

Comparison:
       attr_accessor: 1990897284.7 i/s
   getter_and_setter: 1988710194.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     5.806k i/100ms
         respond_to?   194.241M i/100ms
Calculating -------------------------------------
      begin...rescue     43.533k (± 3.2%) i/s -    220.628k in   5.073453s
         respond_to?      1.989B (± 0.2%) i/s -     10.101B in   5.077197s

Comparison:
         respond_to?: 1989400159.0 i/s
      begin...rescue:    43533.5 i/s - 45698.18x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   198.885M i/100ms
             &method   199.489M i/100ms
Calculating -------------------------------------
              normal      1.989B (± 0.3%) i/s -     10.143B in   5.098500s
             &method      1.989B (± 0.5%) i/s -      9.974B in   5.015665s

Comparison:
              normal: 1989448688.4 i/s
             &method: 1988698895.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        85.000  i/100ms
       define_method   120.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.501k (±53.1%) i/s -      4.250k in   5.083529s
       define_method      2.975k (±60.3%) i/s -      5.880k in   6.646392s

Comparison:
       define_method:     2974.6 i/s
module_eval with string:     1500.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    27.493k i/100ms
       Kernel#format    44.949k i/100ms
            String#%    43.889k i/100ms
Calculating -------------------------------------
         Float#round    315.694k (± 3.1%) i/s -      1.595M in   5.056337s
       Kernel#format    449.639k (± 2.0%) i/s -      2.247M in   5.000435s
            String#%    440.273k (± 2.0%) i/s -      2.238M in   5.086198s

Comparison:
       Kernel#format:   449639.1 i/s
            String#%:   440272.8 i/s - same-ish: difference falls within error
         Float#round:   315694.1 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   197.180M i/100ms
          OpenStruct   195.871M i/100ms
Calculating -------------------------------------
                Hash      1.987B (± 0.3%) i/s -     10.056B in   5.060191s
          OpenStruct      1.987B (± 0.6%) i/s -      9.989B in   5.028769s

Comparison:
                Hash: 1987329878.5 i/s
          OpenStruct: 1986515368.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   192.330M i/100ms
          OpenStruct     2.412k i/100ms
Calculating -------------------------------------
                Hash      1.987B (± 0.4%) i/s -     10.001B in   5.034561s
          OpenStruct     27.239k (±13.0%) i/s -    135.072k in   5.093183s

Comparison:
                Hash: 1986530105.9 i/s
          OpenStruct:    27238.7 i/s - 72930.37x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   617.850k i/100ms
  ancestors.include?   102.938k i/100ms
Calculating -------------------------------------
  less than or equal      6.865M (± 3.8%) i/s -     34.600M in   5.047648s
  ancestors.include?      1.060M (± 4.3%) i/s -      5.353M in   5.061344s

Comparison:
  less than or equal:  6865099.2 i/s
  ancestors.include?:  1059631.2 i/s - 6.48x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     19.878  (± 0.0%) i/s -    100.000  in   5.030682s
         Kernel loop      4.945  (± 0.0%) i/s -     25.000  in   5.056196s

Comparison:
          While Loop:       19.9 i/s
         Kernel loop:        4.9 i/s - 4.02x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   199.046M i/100ms
         Array#first   198.751M i/100ms
Calculating -------------------------------------
           Array#[0]      1.988B (± 0.4%) i/s -      9.952B in   5.005529s
         Array#first      1.990B (± 0.3%) i/s -     10.136B in   5.094575s

Comparison:
         Array#first: 1989649424.5 i/s
           Array#[0]: 1988285495.4 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   199.036M i/100ms
          Array#last   198.937M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.988B (± 0.4%) i/s -      9.952B in   5.005053s
          Array#last      1.989B (± 0.2%) i/s -      9.947B in   4.999879s

Comparison:
          Array#last: 1989432235.9 i/s
          Array#[-1]: 1988384378.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   387.271k i/100ms
Calculating -------------------------------------
                find      0.093  (± 0.0%) i/s -      1.000  in  10.741019s
             bsearch      3.932M (± 3.3%) i/s -     19.751M in   5.029190s

Comparison:
             bsearch:  3931822.7 i/s
                find:        0.1 i/s - 42231783.65x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.100  (± 0.0%) i/s -      1.000  in   9.955298s
        Array#insert      0.785  (± 0.0%) i/s -      4.000  in   5.094525s

Comparison:
        Array#insert:        0.8 i/s
       Array#unshift:        0.1 i/s - 7.82x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   199.024M i/100ms
          Array#size   194.572M i/100ms
         Array#count   194.472M i/100ms
Calculating -------------------------------------
        Array#length      1.989B (± 0.4%) i/s -      9.951B in   5.004327s
          Array#size      1.989B (± 0.3%) i/s -     10.118B in   5.086354s
         Array#count      1.991B (± 0.3%) i/s -     10.113B in   5.079995s

Comparison:
         Array#count: 1990675450.2 i/s
          Array#size: 1989219194.6 i/s - same-ish: difference falls within error
        Array#length: 1988555989.4 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    19.298k i/100ms
        Array#sample     2.083M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    190.129k (± 2.0%) i/s -    964.900k in   5.077194s
        Array#sample     21.383M (± 0.3%) i/s -    108.294M in   5.064541s

Comparison:
        Array#sample: 21382839.0 i/s
 Array#shuffle.first:   190129.3 i/s - 112.46x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   280.000  i/100ms
          Date.parse    96.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     11.470k (±40.3%) i/s -     44.240k in   4.993895s
          Date.parse      4.119k (±31.2%) i/s -     17.376k in   5.002206s

Comparison:
        Date.iso8601:    11469.7 i/s
          Date.parse:     4119.1 i/s - 2.78x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   123.323k i/100ms
           Array#map   499.777k i/100ms
Calculating -------------------------------------
   Array#each + push      1.273M (± 3.4%) i/s -      6.413M in   5.042622s
           Array#map      4.854M (± 7.4%) i/s -     24.489M in   5.071255s

Comparison:
           Array#map:  4854436.4 i/s
   Array#each + push:  1273259.3 i/s - 3.81x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     6.991M i/100ms
               #each    46.524M i/100ms
Calculating -------------------------------------
            For loop     70.177M (± 2.9%) i/s -    356.524M in   5.084824s
               #each    472.952M (± 0.7%) i/s -      2.373B in   5.017119s

Comparison:
               #each: 472951782.1 i/s
            For loop: 70176859.0 i/s - 6.74x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   571.315k i/100ms
     each_with_index     1.038M i/100ms
Calculating -------------------------------------
          While Loop      5.830M (± 0.2%) i/s -     29.708M in   5.095438s
     each_with_index     10.663M (± 0.2%) i/s -     53.999M in   5.064328s

Comparison:
     each_with_index: 10662721.1 i/s
          While Loop:  5830415.4 i/s - 1.83x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   122.709k i/100ms
      inject to_proc   122.882k i/100ms
        inject block   122.942k i/100ms
Calculating -------------------------------------
       inject symbol      1.229M (± 0.2%) i/s -      6.258M in   5.092738s
      inject to_proc      1.201M (± 1.3%) i/s -      6.021M in   5.012871s
        inject block      1.201M (± 1.6%) i/s -      6.024M in   5.017995s

Comparison:
       inject symbol:  1228845.1 i/s
      inject to_proc:  1201364.5 i/s - 1.02x  (± 0.00) slower
        inject block:  1200844.3 i/s - 1.02x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     9.029k i/100ms
   Array#map.flatten     9.802k i/100ms
      Array#flat_map    25.698k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)     99.181k (± 4.5%) i/s -    496.595k in   5.017811s
   Array#map.flatten    100.829k (± 3.6%) i/s -    509.704k in   5.061958s
      Array#flat_map    264.155k (± 2.9%) i/s -      1.336M in   5.063201s

Comparison:
      Array#flat_map:   264155.4 i/s
   Array#map.flatten:   100828.6 i/s - 2.62x  (± 0.00) slower
Array#map.flatten(1):    99180.8 i/s - 2.66x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   131.930k i/100ms
  Array#reverse_each   763.495k i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.352M (± 3.0%) i/s -      6.860M in   5.080081s
  Array#reverse_each      7.634M (± 0.2%) i/s -     38.175M in   5.000428s

Comparison:
  Array#reverse_each:  7634327.8 i/s
  Array#reverse.each:  1351751.3 i/s - 5.65x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       508.327k i/100ms
   Enumerable#detect     3.198M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          5.797M (± 6.3%) i/s -    115.390M in  20.023143s
   Enumerable#detect     31.278M (± 2.7%) i/s -    626.733M in  20.052611s

Comparison:
   Enumerable#detect: 31278459.8 i/s
Enumerable#select.first:  5797196.5 i/s - 5.40x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       133.768k i/100ms
Enumerable#select.last
                       274.445k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.360M (± 3.0%) i/s -      6.822M in   5.021886s
Enumerable#select.last
                          2.779M (± 3.2%) i/s -     13.997M in   5.041992s

Comparison:
Enumerable#select.last:  2778969.2 i/s
Enumerable#reverse.detect:  1359772.1 i/s - 2.04x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         1.926k i/100ms
  Enumerable#sort_by     1.958k i/100ms
     Enumerable#sort     2.199k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         18.640k (±20.2%) i/s -     82.818k in   5.053167s
  Enumerable#sort_by     18.543k (±20.2%) i/s -     82.236k in   5.035527s
     Enumerable#sort     26.295k (± 2.6%) i/s -    131.940k in   5.021593s

Comparison:
     Enumerable#sort:    26295.1 i/s
Enumerable#sort_by (Symbol#to_proc):    18640.1 i/s - 1.41x  (± 0.00) slower
  Enumerable#sort_by:    18542.7 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   266.922k i/100ms
Enumerable#sort_by...first
                         4.065k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      2.669M (± 0.2%) i/s -     13.346M in   5.000369s
Enumerable#sort_by...first
                         51.413k (± 3.1%) i/s -    260.160k in   5.065428s

Comparison:
   Enumerable#min_by:  2669029.8 i/s
Enumerable#sort_by...first:    51413.4 i/s - 51.91x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   181.891k i/100ms
            Hash#dup   189.487k i/100ms
Calculating -------------------------------------
              Hash[]      1.967M (± 5.1%) i/s -      9.822M in   5.008144s
            Hash#dup      1.948M (± 4.0%) i/s -      9.853M in   5.066290s

Comparison:
              Hash[]:  1966531.6 i/s
            Hash#dup:  1948102.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   192.706M i/100ms
  Hash#fetch, symbol   195.996M i/100ms
     Hash#[], string     3.856M i/100ms
  Hash#fetch, string     3.844M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.988B (± 0.3%) i/s -     10.021B in   5.039683s
  Hash#fetch, symbol      1.989B (± 0.2%) i/s -      9.996B in   5.024386s
     Hash#[], string     38.489M (± 0.6%) i/s -    192.790M in   5.009094s
  Hash#fetch, string     38.518M (± 1.5%) i/s -    196.054M in   5.091075s

Comparison:
  Hash#fetch, symbol: 1989464450.7 i/s
     Hash#[], symbol: 1988376277.1 i/s - same-ish: difference falls within error
  Hash#fetch, string: 38518060.5 i/s - 51.65x  (± 0.00) slower
     Hash#[], string: 38489274.2 i/s - 51.69x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    49.710M i/100ms
             Hash#[]    49.731M i/100ms
          Hash#[] ||    49.782M i/100ms
          Hash#[] &&    49.767M i/100ms
          Hash#fetch    49.784M i/100ms
 Hash#fetch fallback    49.785M i/100ms
Calculating -------------------------------------
            Hash#dig    497.140M (± 0.3%) i/s -      2.486B in   4.999688s
             Hash#[]    497.108M (± 0.2%) i/s -      2.487B in   5.002054s
          Hash#[] ||    497.490M (± 0.4%) i/s -      2.489B in   5.003433s
          Hash#[] &&    497.376M (± 0.3%) i/s -      2.488B in   5.002950s
          Hash#fetch    497.442M (± 0.2%) i/s -      2.489B in   5.003982s
 Hash#fetch fallback    496.494M (± 1.0%) i/s -      2.489B in   5.014232s

Comparison:
          Hash#[] ||: 497489837.3 i/s
          Hash#fetch: 497441870.0 i/s - same-ish: difference falls within error
          Hash#[] &&: 497376037.8 i/s - same-ish: difference falls within error
            Hash#dig: 497140081.5 i/s - same-ish: difference falls within error
             Hash#[]: 497108232.1 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 496494459.3 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   195.822M i/100ms
  Hash#fetch + block   198.763M i/100ms
    Hash#fetch + arg   199.236M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.987B (± 0.3%) i/s -      9.987B in   5.026041s
  Hash#fetch + block      1.988B (± 0.3%) i/s -     10.137B in   5.098302s
    Hash#fetch + arg      1.990B (± 0.3%) i/s -      9.962B in   5.005629s

Comparison:
    Hash#fetch + arg: 1990137190.8 i/s
  Hash#fetch + block: 1988304352.7 i/s - same-ish: difference falls within error
  Hash#fetch + const: 1987054858.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    14.355k i/100ms
         sort + to_h     9.738k i/100ms
Calculating -------------------------------------
      sort_by + to_h    167.343k (± 7.9%) i/s -    832.590k in   5.005763s
         sort + to_h    100.773k (± 4.0%) i/s -    506.376k in   5.033517s

Comparison:
      sort_by + to_h:   167342.7 i/s
         sort + to_h:   100772.7 i/s - 1.66x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each    94.985k i/100ms
       Hash#each_key    98.095k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.006M (± 4.0%) i/s -      5.034M in   5.014481s
       Hash#each_key    998.633k (± 3.5%) i/s -      5.003M in   5.016313s

Comparison:
      Hash#keys.each:  1005631.4 i/s
       Hash#each_key:   998633.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   123.000  i/100ms
           Hash#key?    12.782M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.555k (±10.9%) i/s -      7.749k in   5.095323s
           Hash#key?    130.928M (± 0.1%) i/s -    664.658M in   5.076509s

Comparison:
           Hash#key?: 130928386.9 i/s
  Hash#keys.include?:     1555.3 i/s - 84181.43x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    18.247k i/100ms
            Hash#[]=    20.995k i/100ms
Calculating -------------------------------------
         Hash#merge!    202.644k (± 4.2%) i/s -      1.022M in   5.052132s
            Hash#[]=    211.406k (± 3.7%) i/s -      1.071M in   5.072171s

Comparison:
            Hash#[]=:   211405.8 i/s
         Hash#merge!:   202643.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         8.845k i/100ms
      Hash#merge({})     7.532k i/100ms
 Hash#dup#merge!({})    12.346k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        117.956k (± 5.6%) i/s -    592.615k in   5.041380s
      Hash#merge({})     76.774k (± 4.2%) i/s -    384.132k in   5.012750s
 Hash#dup#merge!({})    125.187k (± 3.3%) i/s -    629.646k in   5.035743s

Comparison:
 Hash#dup#merge!({}):   125187.0 i/s
{}#merge!(Hash) do end:   117955.8 i/s - same-ish: difference falls within error
      Hash#merge({}):    76774.3 i/s - 1.63x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   194.106M i/100ms
          Hash#merge   199.026M i/100ms
Calculating -------------------------------------
        Hash#**other      1.988B (± 0.3%) i/s -     10.093B in   5.076260s
          Hash#merge      1.991B (± 0.2%) i/s -     10.150B in   5.098206s

Comparison:
          Hash#merge: 1990969005.4 i/s
        Hash#**other: 1988390124.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   295.000  i/100ms
         Hash#merge!    20.675k i/100ms
Calculating -------------------------------------
          Hash#merge      3.211k (± 4.6%) i/s -     16.225k in   5.064522s
         Hash#merge!    206.363k (± 3.8%) i/s -      1.034M in   5.016996s

Comparison:
         Hash#merge!:   206363.1 i/s
          Hash#merge:     3210.8 i/s - 64.27x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      908.997k i/100ms
Array#each             787.712k i/100ms
Array#each_w/_object   806.208k i/100ms
Hash#select-include      1.038M i/100ms
Calculating -------------------------------------
Hash#native-slice         9.792M (± 3.1%) i/s -     49.086M in   5.018067s
Array#each                8.023M (± 3.2%) i/s -     40.173M in   5.012815s
Array#each_w/_object      8.127M (± 3.2%) i/s -     41.117M in   5.064834s
Hash#select-include      10.630M (± 3.0%) i/s -     53.987M in   5.083489s

Comparison:
Hash#select-include : 10630011.6 i/s
Hash#native-slice   :  9791795.4 i/s - 1.09x  (± 0.00) slower
Array#each_w/_object:  8127065.4 i/s - 1.31x  (± 0.00) slower
Array#each          :  8022638.1 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   127.000  i/100ms
         Hash#value?     1.832k i/100ms
Calculating -------------------------------------
Hash#values.include?      1.935k (±13.3%) i/s -      9.398k in   4.998292s
         Hash#value?     18.908k (± 0.3%) i/s -     95.264k in   5.038210s

Comparison:
         Hash#value?:    18908.5 i/s
Hash#values.include?:     1934.8 i/s - 9.77x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   195.668M i/100ms
                send   194.077M i/100ms
      method_missing   199.764M i/100ms
Calculating -------------------------------------
                call      1.989B (± 0.5%) i/s -      9.979B in   5.017420s
                send      1.995B (± 0.5%) i/s -     10.092B in   5.057869s
      method_missing      1.997B (± 0.5%) i/s -      9.988B in   5.001197s

Comparison:
      method_missing: 1997207947.6 i/s
                send: 1995368349.8 i/s - same-ish: difference falls within error
                call: 1988941039.3 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    15.424k i/100ms
      Symbol#to_proc    18.131k i/100ms
Calculating -------------------------------------
               Block    183.356k (± 4.4%) i/s -    925.440k in   5.057870s
      Symbol#to_proc    183.432k (± 3.5%) i/s -    924.681k in   5.047448s

Comparison:
      Symbol#to_proc:   183432.0 i/s
               Block:   183356.2 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   198.622M i/100ms
       block + yield   192.218M i/100ms
        unused block   195.225M i/100ms
               yield   199.007M i/100ms
Calculating -------------------------------------
          block.call      1.988B (± 0.3%) i/s -     10.130B in   5.094594s
       block + yield      1.989B (± 0.3%) i/s -      9.995B in   5.025082s
        unused block      1.991B (± 0.3%) i/s -      9.956B in   5.000563s
               yield      1.989B (± 0.3%) i/s -      9.950B in   5.001718s

Comparison:
        unused block: 1991088415.9 i/s
               yield: 1989404746.3 i/s - same-ish: difference falls within error
       block + yield: 1989099937.1 i/s - same-ish: difference falls within error
          block.call: 1988347085.8 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    31.925k i/100ms
      range#include?   206.000  i/100ms
       range#member?   188.000  i/100ms
       plain compare    40.916k i/100ms
Calculating -------------------------------------
        range#cover?    272.921k (±32.4%) i/s -      1.245M in   5.111858s
      range#include?      5.196k (±39.8%) i/s -     17.716k in   5.277054s
       range#member?      4.525k (±43.8%) i/s -     11.092k in   5.026792s
       plain compare    368.496k (±40.1%) i/s -      1.105M in   5.048574s

Comparison:
       plain compare:   368496.4 i/s
        range#cover?:   272920.7 i/s - same-ish: difference falls within error
      range#include?:     5195.7 i/s - 70.92x  (± 0.00) slower
       range#member?:     4525.5 i/s - 81.43x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     2.771M i/100ms
           String#=~     4.921M i/100ms
          Regexp#===     4.937M i/100ms
        String#match     3.801M i/100ms
Calculating -------------------------------------
       String#match?     32.796M (± 5.7%) i/s -    163.501M in   5.002214s
           String#=~     50.179M (± 0.4%) i/s -    250.956M in   5.001297s
          Regexp#===     50.342M (± 0.4%) i/s -    251.809M in   5.002067s
        String#match     38.997M (± 0.3%) i/s -    197.643M in   5.068157s

Comparison:
          Regexp#===: 50341861.3 i/s
           String#=~: 50179056.4 i/s - same-ish: difference falls within error
        String#match: 38997418.6 i/s - 1.29x  (± 0.00) slower
       String#match?: 32795520.6 i/s - 1.54x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.091M i/100ms
      String#casecmp     2.761M i/100ms
Calculating -------------------------------------
String#downcase + ==     12.370M (± 4.6%) i/s -     62.201M in   5.039769s
      String#casecmp     27.695M (± 0.3%) i/s -    140.790M in   5.083609s

Comparison:
      String#casecmp: 27695236.2 i/s
String#downcase + ==: 12369718.4 i/s - 2.24x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+   198.816M i/100ms
       String#concat   192.952M i/100ms
       String#append   189.973M i/100ms
         "foo" "bar"   199.978M i/100ms
  "#{'foo'}#{'bar'}"   199.231M i/100ms
Calculating -------------------------------------
            String#+      1.989B (± 0.3%) i/s -     10.140B in   5.097872s
       String#concat      1.937B (± 2.1%) i/s -      9.841B in   5.083222s
       String#append      1.992B (± 0.5%) i/s -     10.069B in   5.053975s
         "foo" "bar"      1.991B (± 0.3%) i/s -      9.999B in   5.022407s
  "#{'foo'}#{'bar'}"      1.993B (± 0.4%) i/s -     10.161B in   5.098372s

Comparison:
  "#{'foo'}#{'bar'}": 1992974687.8 i/s
       String#append: 1992254261.2 i/s - same-ish: difference falls within error
         "foo" "bar": 1990870196.3 i/s - same-ish: difference falls within error
            String#+: 1989006602.4 i/s - same-ish: difference falls within error
       String#concat: 1936782596.0 i/s - 1.03x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   192.289M i/100ms
          String#dup   195.281M i/100ms
Calculating -------------------------------------
           String#+@      1.949B (± 2.9%) i/s -      9.807B in   5.035570s
          String#dup      1.993B (± 0.4%) i/s -     10.155B in   5.095653s

Comparison:
          String#dup: 1992836401.8 i/s
           String#+@: 1949228029.7 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.198M i/100ms
       String#match?     1.031M i/100ms
    String#end_with?     9.662M i/100ms
Calculating -------------------------------------
           String#=~     11.701M (± 4.1%) i/s -     58.687M in   5.023953s
       String#match?     10.354M (± 2.2%) i/s -     52.565M in   5.079442s
    String#end_with?     97.236M (± 0.6%) i/s -    492.739M in   5.067691s

Comparison:
    String#end_with?: 97235526.0 i/s
           String#=~: 11701307.2 i/s - 8.31x  (± 0.00) slower
       String#match?: 10354109.7 i/s - 9.39x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    43.789k i/100ms
          String#sub   382.175k i/100ms
String#dup["string"]=
                        10.161M i/100ms
Calculating -------------------------------------
         String#gsub    665.537k (± 3.4%) i/s -      3.328M in   5.007128s
          String#sub      4.265M (± 6.2%) i/s -     21.402M in   5.038607s
String#dup["string"]=
                        102.318M (± 1.3%) i/s -    518.200M in   5.065414s

Comparison:
String#dup["string"]=: 102317734.4 i/s
          String#sub:  4264661.4 i/s - 23.99x  (± 0.00) slower
         String#gsub:   665536.7 i/s - 153.74x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   119.031k i/100ms
           String#tr   113.896k i/100ms
Calculating -------------------------------------
         String#gsub      1.695M (± 5.4%) i/s -      8.451M in   5.000698s
           String#tr      1.154M (± 4.3%) i/s -      5.809M in   5.041688s

Comparison:
         String#gsub:  1695399.8 i/s
           String#tr:  1154448.0 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   192.278M i/100ms
         With Freeze   193.928M i/100ms
Calculating -------------------------------------
      Without Freeze      1.988B (± 0.4%) i/s -      9.998B in   5.028913s
         With Freeze      1.997B (± 0.5%) i/s -     10.084B in   5.049788s

Comparison:
         With Freeze: 1997010378.7 i/s
      Without Freeze: 1988227971.4 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     4.640k i/100ms
      String#squeeze    47.792k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     62.276k (± 5.2%) i/s -    310.880k in   5.006313s
      String#squeeze    479.914k (± 2.8%) i/s -      2.437M in   5.083192s

Comparison:
      String#squeeze:   479914.1 i/s
 String#gsub/regex+/:    62275.6 i/s - 7.71x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     2.255M i/100ms
       String#match?     2.520M i/100ms
  String#start_with?     1.446M i/100ms
Calculating -------------------------------------
           String#=~     23.257M (± 2.6%) i/s -    117.271M in   5.046037s
       String#match?     25.515M (± 3.5%) i/s -    128.511M in   5.043098s
  String#start_with?     15.022M (± 3.6%) i/s -     75.184M in   5.011894s

Comparison:
       String#match?: 25514683.1 i/s
           String#=~: 23257064.6 i/s - 1.10x  (± 0.00) slower
  String#start_with?: 15021852.8 i/s - 1.70x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   255.339k i/100ms
    String#[0, n] ==   152.788k i/100ms
   String#[RANGE] ==   155.668k i/100ms
   String#[0...n] ==   132.060k i/100ms
Calculating -------------------------------------
  String#start_with?      2.728M (± 3.5%) i/s -     13.788M in   5.061332s
    String#[0, n] ==      1.563M (± 3.9%) i/s -      7.945M in   5.092570s
   String#[RANGE] ==      1.575M (± 4.3%) i/s -      7.939M in   5.049642s
   String#[0...n] ==      1.322M (± 3.0%) i/s -      6.735M in   5.097736s

Comparison:
  String#start_with?:  2728045.5 i/s
   String#[RANGE] ==:  1575328.7 i/s - 1.73x  (± 0.00) slower
    String#[0, n] ==:  1562675.8 i/s - 1.75x  (± 0.00) slower
   String#[0...n] ==:  1322489.8 i/s - 2.06x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    10.744M i/100ms
 String#sub!'string'   466.181k i/100ms
String#gsub!'string'    67.129k i/100ms
  String#[/regexp/]=     3.226M i/100ms
 String#sub!/regexp/     1.629M i/100ms
String#gsub!/regexp/   407.636k i/100ms
Calculating -------------------------------------
  String#['string']=    107.375M (± 0.5%) i/s -    537.193M in   5.003056s
 String#sub!'string'      4.942M (±14.3%) i/s -     22.843M in   5.024423s
String#gsub!'string'    884.376k (± 2.4%) i/s -      4.431M in   5.013235s
  String#[/regexp/]=     32.385M (± 0.4%) i/s -    164.501M in   5.079556s
 String#sub!/regexp/     16.367M (± 2.4%) i/s -     83.060M in   5.078063s
String#gsub!/regexp/      4.142M (± 4.7%) i/s -     20.789M in   5.031459s

Comparison:
  String#['string']=: 107375288.4 i/s
  String#[/regexp/]=: 32385414.6 i/s - 3.32x  (± 0.00) slower
 String#sub!/regexp/: 16367306.8 i/s - 6.56x  (± 0.00) slower
 String#sub!'string':  4942423.4 i/s - 21.73x  (± 0.00) slower
String#gsub!/regexp/:  4141912.7 i/s - 25.92x  (± 0.00) slower
String#gsub!'string':   884376.3 i/s - 121.41x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.517M i/100ms
        String#chomp     2.427M i/100ms
String#delete_suffix     4.318M i/100ms
Calculating -------------------------------------
          String#sub     15.743M (± 3.7%) i/s -     78.908M in   5.019657s
        String#chomp     24.990M (± 3.3%) i/s -    126.204M in   5.055966s
String#delete_suffix     43.203M (± 0.5%) i/s -    220.227M in   5.097655s

Comparison:
String#delete_suffix: 43202748.4 i/s
        String#chomp: 24990120.1 i/s - 1.73x  (± 0.00) slower
          String#sub: 15742782.9 i/s - 2.74x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix     1.662M i/100ms
          String#sub     5.718M i/100ms
Calculating -------------------------------------
String#delete_prefix     18.009M (± 4.4%) i/s -     91.432M in   5.087438s
          String#sub     57.016M (± 1.0%) i/s -    285.896M in   5.014803s

Comparison:
          String#sub: 57016363.5 i/s
String#delete_prefix: 18008861.5 i/s - 3.17x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.127M i/100ms
    String#unpack[0]     1.133M i/100ms
Calculating -------------------------------------
      String#unpack1     11.631M (± 3.4%) i/s -     58.626M in   5.046918s
    String#unpack[0]     11.471M (± 3.2%) i/s -     57.781M in   5.042649s

Comparison:
      String#unpack1: 11630752.6 i/s
    String#unpack[0]: 11470911.6 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.1.0-dev-8553bb8b, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    11.836k i/100ms
          Time.parse   144.000  i/100ms
Calculating -------------------------------------
        Time.iso8601     88.677k (±36.9%) i/s -    402.424k in   5.061615s
          Time.parse      2.586k (±28.3%) i/s -     11.808k in   5.048219s

Comparison:
        Time.iso8601:    88676.9 i/s
          Time.parse:     2586.0 i/s - 34.29x  (± 0.00) slower

