$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       238.367M i/100ms
Function with splat arguments
                       668.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          2.387B (± 0.4%) i/s -     12.157B in   5.093786s
Function with splat arguments
                          7.042k (± 5.1%) i/s -     35.404k in   5.041130s

Comparison:
Function with single Array argument: 2386614602.8 i/s
Function with splat arguments:     7042.0 i/s - 338913.41x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   238.758M i/100ms
Sequential Assignment
                       238.388M i/100ms
Calculating -------------------------------------
 Parallel Assignment      2.387B (± 0.4%) i/s -     11.938B in   5.001798s
Sequential Assignment
                          2.389B (± 0.3%) i/s -     12.158B in   5.088841s

Comparison:
Sequential Assignment: 2389126652.2 i/s
 Parallel Assignment: 2386754818.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   238.473M i/100ms
       attr_accessor   238.906M i/100ms
Calculating -------------------------------------
   getter_and_setter      2.384B (± 0.5%) i/s -     11.924B in   5.001589s
       attr_accessor      2.390B (± 0.2%) i/s -     12.184B in   5.098794s

Comparison:
       attr_accessor: 2389633925.7 i/s
   getter_and_setter: 2384020888.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     7.688k i/100ms
         respond_to?   238.870M i/100ms
Calculating -------------------------------------
      begin...rescue     52.067k (± 2.5%) i/s -    261.392k in   5.023448s
         respond_to?      2.389B (± 0.3%) i/s -     11.943B in   5.000115s

Comparison:
         respond_to?: 2388666305.0 i/s
      begin...rescue:    52067.4 i/s - 45876.46x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   238.859M i/100ms
             &method   239.029M i/100ms
Calculating -------------------------------------
              normal      2.387B (± 0.3%) i/s -     11.943B in   5.002763s
             &method      2.387B (± 0.4%) i/s -     11.951B in   5.006749s

Comparison:
              normal: 2387295453.5 i/s
             &method: 2387110565.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                       105.000  i/100ms
       define_method   141.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.729k (±50.0%) i/s -      5.145k in   5.103505s
       define_method      3.754k (±56.2%) i/s -      7.614k in   6.802724s

Comparison:
       define_method:     3753.9 i/s
module_eval with string:     1729.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    77.894k i/100ms
       Kernel#format    68.411k i/100ms
            String#%    68.635k i/100ms
Calculating -------------------------------------
         Float#round    787.842k (± 1.8%) i/s -      3.973M in   5.044131s
       Kernel#format    676.691k (± 1.8%) i/s -      3.421M in   5.056503s
            String#%    678.988k (± 5.1%) i/s -      3.432M in   5.073539s

Comparison:
         Float#round:   787842.1 i/s
            String#%:   678988.3 i/s - 1.16x  (± 0.00) slower
       Kernel#format:   676691.4 i/s - 1.16x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   238.884M i/100ms
          OpenStruct   238.890M i/100ms
Calculating -------------------------------------
                Hash      2.386B (± 0.4%) i/s -     11.944B in   5.005873s
          OpenStruct      2.389B (± 0.3%) i/s -     11.944B in   5.000364s

Comparison:
          OpenStruct: 2388743892.6 i/s
                Hash: 2386065932.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   238.264M i/100ms
          OpenStruct     2.622k i/100ms
Calculating -------------------------------------
                Hash      2.384B (± 0.4%) i/s -     12.151B in   5.096985s
          OpenStruct     29.304k (±10.0%) i/s -    144.210k in   5.007154s

Comparison:
                Hash: 2384089648.0 i/s
          OpenStruct:    29303.7 i/s - 81358.05x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   832.268k i/100ms
  ancestors.include?   140.532k i/100ms
Calculating -------------------------------------
  less than or equal      8.629M (± 4.0%) i/s -     43.278M in   5.023588s
  ancestors.include?      1.412M (± 4.1%) i/s -      7.167M in   5.083983s

Comparison:
  less than or equal:  8629450.3 i/s
  ancestors.include?:  1412193.9 i/s - 6.11x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     23.873  (± 0.0%) i/s -    120.000  in   5.026786s
         Kernel loop      7.231  (± 0.0%) i/s -     37.000  in   5.118925s

Comparison:
          While Loop:       23.9 i/s
         Kernel loop:        7.2 i/s - 3.30x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   238.791M i/100ms
         Array#first   238.867M i/100ms
Calculating -------------------------------------
           Array#[0]      2.385B (± 0.4%) i/s -     11.940B in   5.005368s
         Array#first      2.388B (± 0.3%) i/s -     11.943B in   5.001591s

Comparison:
         Array#first: 2387933177.3 i/s
           Array#[0]: 2385396132.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   238.555M i/100ms
          Array#last   238.845M i/100ms
Calculating -------------------------------------
          Array#[-1]      2.385B (± 0.4%) i/s -     11.928B in   5.000524s
          Array#last      2.389B (± 0.2%) i/s -     12.181B in   5.097988s

Comparison:
          Array#last: 2389398790.8 i/s
          Array#[-1]: 2385340138.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   535.912k i/100ms
Calculating -------------------------------------
                find      8.970  (±22.3%) i/s -     20.000  in   5.039837s
             bsearch      5.326M (± 3.4%) i/s -     26.796M in   5.037281s

Comparison:
             bsearch:  5325540.6 i/s
                find:        9.0 i/s - 593727.16x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.119  (± 0.0%) i/s -      1.000  in   8.423479s
        Array#insert      0.944  (± 0.0%) i/s -      5.000  in   5.296952s

Comparison:
        Array#insert:        0.9 i/s
       Array#unshift:        0.1 i/s - 7.95x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   238.149M i/100ms
          Array#size   238.629M i/100ms
         Array#count   239.126M i/100ms
Calculating -------------------------------------
        Array#length      2.387B (± 0.3%) i/s -     12.146B in   5.087390s
          Array#size      2.389B (± 0.3%) i/s -     12.170B in   5.093756s
         Array#count      2.390B (± 0.2%) i/s -     11.956B in   5.002446s

Comparison:
         Array#count: 2390091812.8 i/s
          Array#size: 2389232744.3 i/s - same-ish: difference falls within error
        Array#length: 2387417038.9 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    21.043k i/100ms
        Array#sample     2.595M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    225.302k (± 2.0%) i/s -      1.136M in   5.045748s
        Array#sample     25.907M (± 0.1%) i/s -    129.751M in   5.008421s

Comparison:
        Array#sample: 25906658.5 i/s
 Array#shuffle.first:   225302.5 i/s - 114.99x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   804.000  i/100ms
          Date.parse   136.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     21.852k (±33.4%) i/s -     83.616k in   5.371172s
          Date.parse      9.038k (±26.0%) i/s -     34.408k in   5.007760s

Comparison:
        Date.iso8601:    21852.0 i/s
          Date.parse:     9038.1 i/s - 2.42x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   146.373k i/100ms
           Array#map   610.616k i/100ms
Calculating -------------------------------------
   Array#each + push      1.595M (± 4.3%) i/s -      8.051M in   5.055511s
           Array#map      5.982M (± 5.9%) i/s -     29.920M in   5.019093s

Comparison:
           Array#map:  5982296.1 i/s
   Array#each + push:  1595477.7 i/s - 3.75x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    10.694M i/100ms
               #each    56.789M i/100ms
Calculating -------------------------------------
            For loop    104.841M (± 0.9%) i/s -    534.701M in   5.100547s
               #each    568.833M (± 0.3%) i/s -      2.896B in   5.091616s

Comparison:
               #each: 568833321.7 i/s
            For loop: 104840636.7 i/s - 5.43x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   901.933k i/100ms
     each_with_index     1.280M i/100ms
Calculating -------------------------------------
          While Loop      9.079M (± 0.2%) i/s -     45.999M in   5.066511s
     each_with_index     12.819M (± 0.2%) i/s -     65.299M in   5.093890s

Comparison:
     each_with_index: 12819164.4 i/s
          While Loop:  9078986.8 i/s - 1.41x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   146.040k i/100ms
      inject to_proc   147.521k i/100ms
        inject block   147.533k i/100ms
Calculating -------------------------------------
       inject symbol      1.473M (± 0.5%) i/s -      7.448M in   5.055286s
      inject to_proc      1.475M (± 0.1%) i/s -      7.376M in   5.000900s
        inject block      1.475M (± 0.2%) i/s -      7.377M in   5.001928s

Comparison:
      inject to_proc:  1474946.7 i/s
        inject block:  1474765.1 i/s - same-ish: difference falls within error
       inject symbol:  1473350.5 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     9.548k i/100ms
   Array#map.flatten    11.181k i/100ms
      Array#flat_map    31.451k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    116.625k (± 4.0%) i/s -    582.428k in   5.002743s
   Array#map.flatten    113.167k (± 3.2%) i/s -    570.231k in   5.044469s
      Array#flat_map    317.150k (± 2.9%) i/s -      1.604M in   5.062153s

Comparison:
      Array#flat_map:   317150.2 i/s
Array#map.flatten(1):   116624.6 i/s - 2.72x  (± 0.00) slower
   Array#map.flatten:   113166.7 i/s - 2.80x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   159.864k i/100ms
  Array#reverse_each     1.951M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.610M (± 3.0%) i/s -      8.153M in   5.070197s
  Array#reverse_each     19.497M (± 0.2%) i/s -     97.543M in   5.003058s

Comparison:
  Array#reverse_each: 19496755.1 i/s
  Array#reverse.each:  1609539.4 i/s - 12.11x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       595.107k i/100ms
   Enumerable#detect     3.804M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          6.847M (± 6.1%) i/s -    136.280M in  20.001122s
   Enumerable#detect     38.310M (± 0.2%) i/s -    768.322M in  20.055637s

Comparison:
   Enumerable#detect: 38309687.7 i/s
Enumerable#select.first:  6847299.4 i/s - 5.59x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       158.022k i/100ms
Enumerable#select.last
                       398.374k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.594M (± 2.8%) i/s -      8.059M in   5.060180s
Enumerable#select.last
                          4.039M (± 3.3%) i/s -     20.317M in   5.035676s

Comparison:
Enumerable#select.last:  4039076.7 i/s
Enumerable#reverse.detect:  1594019.8 i/s - 2.53x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.371k i/100ms
  Enumerable#sort_by     2.478k i/100ms
     Enumerable#sort     3.344k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         20.977k (±34.2%) i/s -     82.985k in   5.077412s
  Enumerable#sort_by     19.131k (±44.2%) i/s -     66.906k in   5.000873s
     Enumerable#sort     33.504k (± 0.5%) i/s -    170.544k in   5.090484s

Comparison:
     Enumerable#sort:    33503.6 i/s
Enumerable#sort_by (Symbol#to_proc):    20976.5 i/s - 1.60x  (± 0.00) slower
  Enumerable#sort_by:    19131.3 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   461.901k i/100ms
Enumerable#sort_by...first
                         4.844k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      4.653M (± 0.4%) i/s -     23.557M in   5.063126s
Enumerable#sort_by...first
                         64.665k (± 3.5%) i/s -    324.548k in   5.025336s

Comparison:
   Enumerable#min_by:  4652713.6 i/s
Enumerable#sort_by...first:    64665.3 i/s - 71.95x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   187.243k i/100ms
            Hash#dup   235.369k i/100ms
Calculating -------------------------------------
              Hash[]      2.367M (± 4.5%) i/s -     11.984M in   5.073109s
            Hash#dup      2.380M (± 3.9%) i/s -     12.004M in   5.052356s

Comparison:
            Hash#dup:  2379787.6 i/s
              Hash[]:  2367441.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   238.760M i/100ms
  Hash#fetch, symbol   238.910M i/100ms
     Hash#[], string     2.746M i/100ms
  Hash#fetch, string     2.919M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      2.386B (± 0.4%) i/s -     11.938B in   5.003751s
  Hash#fetch, symbol      2.390B (± 0.2%) i/s -     12.184B in   5.097848s
     Hash#[], string    165.864M (± 0.5%) i/s -    829.295M in   4.999970s
  Hash#fetch, string    135.653M (± 0.4%) i/s -    680.015M in   5.013002s

Comparison:
  Hash#fetch, symbol: 2390121531.6 i/s
     Hash#[], symbol: 2385857361.8 i/s - same-ish: difference falls within error
     Hash#[], string: 165863617.0 i/s - 14.41x  (± 0.00) slower
  Hash#fetch, string: 135653132.0 i/s - 17.62x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    59.756M i/100ms
             Hash#[]    59.748M i/100ms
          Hash#[] ||    59.747M i/100ms
          Hash#[] &&    59.780M i/100ms
          Hash#fetch    59.777M i/100ms
 Hash#fetch fallback    59.776M i/100ms
Calculating -------------------------------------
            Hash#dig    596.632M (± 0.5%) i/s -      2.988B in   5.007878s
             Hash#[]    597.392M (± 0.2%) i/s -      2.987B in   5.000715s
          Hash#[] ||    597.269M (± 0.2%) i/s -      2.987B in   5.001677s
          Hash#[] &&    597.071M (± 0.3%) i/s -      2.989B in   5.006167s
          Hash#fetch    597.588M (± 0.1%) i/s -      2.989B in   5.001494s
 Hash#fetch fallback    597.459M (± 0.1%) i/s -      2.989B in   5.002559s

Comparison:
          Hash#fetch: 597588266.9 i/s
 Hash#fetch fallback: 597458671.3 i/s - same-ish: difference falls within error
             Hash#[]: 597391754.0 i/s - same-ish: difference falls within error
          Hash#[] ||: 597268881.4 i/s - same-ish: difference falls within error
          Hash#[] &&: 597071390.4 i/s - same-ish: difference falls within error
            Hash#dig: 596631612.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   239.003M i/100ms
  Hash#fetch + block   238.942M i/100ms
    Hash#fetch + arg   239.124M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      2.387B (± 0.3%) i/s -     11.950B in   5.005972s
  Hash#fetch + block      2.388B (± 0.3%) i/s -     11.947B in   5.002760s
    Hash#fetch + arg      2.389B (± 0.2%) i/s -     11.956B in   5.003906s

Comparison:
    Hash#fetch + arg: 2389385049.1 i/s
  Hash#fetch + block: 2388121100.7 i/s - same-ish: difference falls within error
  Hash#fetch + const: 2387203497.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    17.629k i/100ms
         sort + to_h     8.583k i/100ms
Calculating -------------------------------------
      sort_by + to_h    225.854k (± 8.3%) i/s -      1.128M in   5.028381s
         sort + to_h     83.206k (± 3.7%) i/s -    420.567k in   5.061771s

Comparison:
      sort_by + to_h:   225854.3 i/s
         sort + to_h:    83205.7 i/s - 2.71x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each   183.241k i/100ms
       Hash#each_key   197.182k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.883M (± 3.4%) i/s -      9.529M in   5.066746s
       Hash#each_key      2.023M (± 3.2%) i/s -     10.253M in   5.073224s

Comparison:
       Hash#each_key:  2023344.2 i/s
      Hash#keys.each:  1882966.7 i/s - 1.07x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   192.000  i/100ms
           Hash#key?    11.955M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.917k (±12.3%) i/s -      9.408k in   5.005904s
           Hash#key?    119.526M (± 0.1%) i/s -    597.746M in   5.000968s

Comparison:
           Hash#key?: 119526224.4 i/s
  Hash#keys.include?:     1916.5 i/s - 62365.55x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    21.839k i/100ms
            Hash#[]=    25.905k i/100ms
Calculating -------------------------------------
         Hash#merge!    250.026k (± 3.9%) i/s -      1.267M in   5.074428s
            Hash#[]=    261.909k (± 3.7%) i/s -      1.321M in   5.051586s

Comparison:
            Hash#[]=:   261909.0 i/s
         Hash#merge!:   250025.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                        10.690k i/100ms
      Hash#merge({})     8.652k i/100ms
 Hash#dup#merge!({})    14.127k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        134.388k (± 4.6%) i/s -    673.470k in   5.023304s
      Hash#merge({})     87.999k (± 4.3%) i/s -    441.252k in   5.024161s
 Hash#dup#merge!({})    143.834k (± 2.1%) i/s -    720.477k in   5.011435s

Comparison:
 Hash#dup#merge!({}):   143834.2 i/s
{}#merge!(Hash) do end:   134388.3 i/s - 1.07x  (± 0.00) slower
      Hash#merge({}):    87999.2 i/s - 1.63x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   238.545M i/100ms
          Hash#merge   239.121M i/100ms
Calculating -------------------------------------
        Hash#**other      2.387B (± 0.4%) i/s -     12.166B in   5.097593s
          Hash#merge      2.389B (± 0.2%) i/s -     11.956B in   5.003867s

Comparison:
          Hash#merge: 2389370998.6 i/s
        Hash#**other: 2386607616.6 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   302.000  i/100ms
         Hash#merge!    24.586k i/100ms
Calculating -------------------------------------
          Hash#merge      3.562k (± 4.6%) i/s -     17.818k in   5.013531s
         Hash#merge!    248.969k (± 3.6%) i/s -      1.254M in   5.043242s

Comparison:
         Hash#merge!:   248968.9 i/s
          Hash#merge:     3561.9 i/s - 69.90x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.105M i/100ms
Array#each               1.011M i/100ms
Array#each_w/_object     1.025M i/100ms
Hash#select-include      1.461M i/100ms
Calculating -------------------------------------
Hash#native-slice        12.013M (± 3.6%) i/s -     60.775M in   5.066202s
Array#each               10.242M (± 3.1%) i/s -     51.554M in   5.038853s
Array#each_w/_object     10.223M (± 3.3%) i/s -     51.255M in   5.019830s
Hash#select-include      14.477M (± 3.5%) i/s -     73.034M in   5.051437s

Comparison:
Hash#select-include : 14476925.1 i/s
Hash#native-slice   : 12013423.2 i/s - 1.21x  (± 0.00) slower
Array#each          : 10241961.7 i/s - 1.41x  (± 0.00) slower
Array#each_w/_object: 10222550.8 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   192.000  i/100ms
         Hash#value?   399.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.875k (±11.3%) i/s -      9.216k in   5.002068s
         Hash#value?      3.986k (± 0.2%) i/s -     19.950k in   5.004874s

Comparison:
         Hash#value?:     3986.1 i/s
Hash#values.include?:     1874.8 i/s - 2.13x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   238.875M i/100ms
                send   238.639M i/100ms
      method_missing   239.114M i/100ms
Calculating -------------------------------------
                call      2.387B (± 0.3%) i/s -     11.944B in   5.003757s
                send      2.389B (± 0.3%) i/s -     12.171B in   5.094194s
      method_missing      2.390B (± 0.1%) i/s -     11.956B in   5.001763s

Comparison:
      method_missing: 2390298392.7 i/s
                send: 2389130922.8 i/s - same-ish: difference falls within error
                call: 2386987409.3 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    14.786k i/100ms
      Symbol#to_proc    16.361k i/100ms
Calculating -------------------------------------
               Block    164.383k (± 4.1%) i/s -    828.016k in   5.046328s
      Symbol#to_proc    164.776k (± 4.0%) i/s -    834.411k in   5.072735s

Comparison:
      Symbol#to_proc:   164775.6 i/s
               Block:   164383.4 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   238.941M i/100ms
       block + yield   238.706M i/100ms
        unused block   239.142M i/100ms
               yield   239.131M i/100ms
Calculating -------------------------------------
          block.call      2.389B (± 0.2%) i/s -     11.947B in   5.000454s
       block + yield      2.391B (± 0.1%) i/s -     12.174B in   5.091988s
        unused block      2.390B (± 0.2%) i/s -     11.957B in   5.002578s
               yield      2.389B (± 0.2%) i/s -     11.957B in   5.004477s

Comparison:
       block + yield: 2390819133.8 i/s
        unused block: 2390196047.4 i/s - same-ish: difference falls within error
          block.call: 2389206560.4 i/s - same-ish: difference falls within error
               yield: 2389178031.6 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    23.480k i/100ms
      range#include?   311.000  i/100ms
       range#member?   360.000  i/100ms
       plain compare    20.354k i/100ms
Calculating -------------------------------------
        range#cover?    126.891k (±23.8%) i/s -    610.480k in   5.129096s
      range#include?      6.497k (±47.1%) i/s -     23.325k in   5.037114s
       range#member?      6.758k (±46.8%) i/s -     18.000k in   5.077744s
       plain compare    188.424k (±32.1%) i/s -    630.974k in   5.083232s

Comparison:
       plain compare:   188424.3 i/s
        range#cover?:   126890.9 i/s - same-ish: difference falls within error
       range#member?:     6757.6 i/s - 27.88x  (± 0.00) slower
      range#include?:     6497.5 i/s - 29.00x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?    10.118M i/100ms
           String#=~    11.071M i/100ms
          Regexp#===    11.069M i/100ms
        String#match     2.179M i/100ms
Calculating -------------------------------------
       String#match?    102.977M (± 0.2%) i/s -    516.003M in   5.010905s
           String#=~    110.679M (± 0.1%) i/s -    553.538M in   5.001308s
          Regexp#===    110.644M (± 0.2%) i/s -    553.463M in   5.002245s
        String#match     21.884M (± 2.6%) i/s -    111.108M in   5.080734s

Comparison:
           String#=~: 110678911.8 i/s
          Regexp#===: 110643641.4 i/s - same-ish: difference falls within error
       String#match?: 102976556.3 i/s - 1.07x  (± 0.00) slower
        String#match: 21884456.4 i/s - 5.06x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.587M i/100ms
      String#casecmp     2.900M i/100ms
Calculating -------------------------------------
String#downcase + ==     17.177M (± 4.3%) i/s -     87.272M in   5.090790s
      String#casecmp     28.613M (± 4.3%) i/s -    144.998M in   5.077484s

Comparison:
      String#casecmp: 28612960.2 i/s
String#downcase + ==: 17177263.6 i/s - 1.67x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+     6.237M i/100ms
       String#concat     7.760M i/100ms
       String#append     7.751M i/100ms
         "foo" "bar"   239.111M i/100ms
  "#{'foo'}#{'bar'}"   239.023M i/100ms
Calculating -------------------------------------
            String#+     78.668M (± 4.3%) i/s -    392.933M in   5.004985s
       String#concat     78.904M (± 3.9%) i/s -    395.780M in   5.024171s
       String#append     78.060M (± 4.0%) i/s -    395.311M in   5.072962s
         "foo" "bar"      2.390B (± 0.2%) i/s -     11.956B in   5.002547s
  "#{'foo'}#{'bar'}"      2.390B (± 0.2%) i/s -     11.951B in   5.001185s

Comparison:
         "foo" "bar": 2389895831.1 i/s
  "#{'foo'}#{'bar'}": 2389676342.4 i/s - same-ish: difference falls within error
       String#concat: 78903895.6 i/s - 30.29x  (± 0.00) slower
            String#+: 78668014.0 i/s - 30.38x  (± 0.00) slower
       String#append: 78060314.2 i/s - 30.62x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   238.681M i/100ms
          String#dup   237.417M i/100ms
Calculating -------------------------------------
           String#+@      2.387B (± 0.3%) i/s -     11.934B in   4.999021s
          String#dup      2.389B (± 0.3%) i/s -     12.108B in   5.068956s

Comparison:
          String#dup: 2388735199.9 i/s
           String#+@: 2387304144.6 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.166M i/100ms
       String#match?     1.489M i/100ms
    String#end_with?     8.165M i/100ms
Calculating -------------------------------------
           String#=~     11.802M (± 2.7%) i/s -     59.486M in   5.044295s
       String#match?     14.933M (± 0.1%) i/s -     75.955M in   5.086286s
    String#end_with?     81.753M (± 0.4%) i/s -    416.420M in   5.093700s

Comparison:
    String#end_with?: 81753402.7 i/s
       String#match?: 14933233.2 i/s - 5.47x  (± 0.00) slower
           String#=~: 11801983.3 i/s - 6.93x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   268.707k i/100ms
          String#sub   406.183k i/100ms
String#dup["string"]=
                        10.277M i/100ms
Calculating -------------------------------------
         String#gsub      3.814M (± 8.2%) i/s -     19.078M in   5.039573s
          String#sub      5.366M (± 8.5%) i/s -     26.808M in   5.036390s
String#dup["string"]=
                        102.779M (± 0.2%) i/s -    524.130M in   5.099606s

Comparison:
String#dup["string"]=: 102779067.3 i/s
          String#sub:  5365559.2 i/s - 19.16x  (± 0.00) slower
         String#gsub:  3814119.8 i/s - 26.95x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   125.723k i/100ms
           String#tr    92.042k i/100ms
Calculating -------------------------------------
         String#gsub      1.973M (± 5.8%) i/s -      9.932M in   5.051979s
           String#tr    933.074k (± 3.8%) i/s -      4.694M in   5.038691s

Comparison:
         String#gsub:  1973135.8 i/s
           String#tr:   933073.7 i/s - 2.11x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   238.536M i/100ms
         With Freeze   238.917M i/100ms
Calculating -------------------------------------
      Without Freeze      2.387B (± 0.3%) i/s -     12.165B in   5.096226s
         With Freeze      2.388B (± 0.3%) i/s -     11.946B in   5.001951s

Comparison:
         With Freeze: 2388265785.6 i/s
      Without Freeze: 2387148591.1 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     4.744k i/100ms
      String#squeeze    29.222k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     62.024k (± 4.8%) i/s -    313.104k in   5.060544s
      String#squeeze    291.766k (± 2.1%) i/s -      1.461M in   5.010298s

Comparison:
      String#squeeze:   291765.8 i/s
 String#gsub/regex+/:    62023.8 i/s - 4.70x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     2.133M i/100ms
       String#match?     3.669M i/100ms
  String#start_with?    14.945M i/100ms
Calculating -------------------------------------
           String#=~     23.719M (± 3.4%) i/s -    119.442M in   5.041978s
       String#match?     36.658M (± 0.8%) i/s -    183.465M in   5.005022s
  String#start_with?    149.308M (± 0.3%) i/s -    747.242M in   5.004732s

Comparison:
  String#start_with?: 149307974.2 i/s
       String#match?: 36658394.5 i/s - 4.07x  (± 0.00) slower
           String#=~: 23719108.8 i/s - 6.29x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?    96.529k i/100ms
    String#[0, n] ==   146.482k i/100ms
   String#[RANGE] ==   155.228k i/100ms
   String#[0...n] ==   123.252k i/100ms
Calculating -------------------------------------
  String#start_with?      4.143M (± 0.2%) i/s -     20.754M in   5.009848s
    String#[0, n] ==      1.513M (± 3.7%) i/s -      7.617M in   5.041754s
   String#[RANGE] ==      1.576M (± 4.0%) i/s -      7.917M in   5.032739s
   String#[0...n] ==      1.237M (± 3.5%) i/s -      6.286M in   5.086713s

Comparison:
  String#start_with?:  4142600.5 i/s
   String#[RANGE] ==:  1575699.8 i/s - 2.63x  (± 0.00) slower
    String#[0, n] ==:  1513030.9 i/s - 2.74x  (± 0.00) slower
   String#[0...n] ==:  1237336.8 i/s - 3.35x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    10.277M i/100ms
 String#sub!'string'   398.762k i/100ms
String#gsub!'string'   391.805k i/100ms
  String#[/regexp/]=     1.381M i/100ms
 String#sub!/regexp/     1.517M i/100ms
String#gsub!/regexp/   432.062k i/100ms
Calculating -------------------------------------
  String#['string']=    103.056M (± 0.0%) i/s -    524.145M in   5.086015s
 String#sub!'string'      5.399M (±13.0%) i/s -     25.521M in   5.048144s
String#gsub!'string'      3.956M (± 4.1%) i/s -     19.982M in   5.060464s
  String#[/regexp/]=     13.921M (± 2.4%) i/s -     70.440M in   5.063152s
 String#sub!/regexp/     15.503M (± 2.1%) i/s -     78.869M in   5.089875s
String#gsub!/regexp/      4.424M (± 4.9%) i/s -     22.467M in   5.091644s

Comparison:
  String#['string']=: 103056102.3 i/s
 String#sub!/regexp/: 15502734.3 i/s - 6.65x  (± 0.00) slower
  String#[/regexp/]=: 13921154.8 i/s - 7.40x  (± 0.00) slower
 String#sub!'string':  5398574.8 i/s - 19.09x  (± 0.00) slower
String#gsub!/regexp/:  4423615.8 i/s - 23.30x  (± 0.00) slower
String#gsub!'string':  3956000.5 i/s - 26.05x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.545M i/100ms
        String#chomp     3.738M i/100ms
String#delete_suffix     3.924M i/100ms
Calculating -------------------------------------
          String#sub     17.403M (± 3.4%) i/s -     88.092M in   5.068291s
        String#chomp     37.487M (± 0.9%) i/s -    190.644M in   5.085935s
String#delete_suffix     42.698M (± 4.2%) i/s -    215.846M in   5.064390s

Comparison:
String#delete_suffix: 42698252.9 i/s
        String#chomp: 37487419.3 i/s - 1.14x  (± 0.00) slower
          String#sub: 17403076.5 i/s - 2.45x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix   238.937M i/100ms
          String#sub    11.054M i/100ms
Calculating -------------------------------------
String#delete_prefix      2.387B (± 0.3%) i/s -     11.947B in   5.004228s
          String#sub    110.661M (± 0.1%) i/s -    563.778M in   5.094644s

Comparison:
String#delete_prefix: 2387380109.7 i/s
          String#sub: 110661022.8 i/s - 21.57x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.116M i/100ms
    String#unpack[0]     1.214M i/100ms
Calculating -------------------------------------
      String#unpack1     12.031M (± 4.0%) i/s -     60.255M in   5.016684s
    String#unpack[0]     12.139M (± 3.9%) i/s -     60.684M in   5.007104s

Comparison:
    String#unpack[0]: 12138580.6 i/s
      String#unpack1: 12031269.0 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.3.0-dev-6e384700, like ruby 3.0.3, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    18.980k i/100ms
          Time.parse   195.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    287.325k (±13.9%) i/s -      1.423M in   5.046430s
          Time.parse      7.057k (±27.6%) i/s -     30.615k in   5.174216s

Comparison:
        Time.iso8601:   287325.2 i/s
          Time.parse:     7057.1 i/s - 40.71x  (± 0.00) slower

