$ ruby -v code/general/assignment.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   201.644M i/100ms
Sequential Assignment
                       197.644M i/100ms
Calculating -------------------------------------
 Parallel Assignment      2.017B (± 3.9%) i/s -     10.082B in   5.005160s
Sequential Assignment
                          2.042B (± 4.7%) i/s -     10.277B in   5.044085s

Comparison:
Sequential Assignment: 2042383644.8 i/s
 Parallel Assignment: 2017394463.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    31.314k i/100ms
       Kernel#format    44.745k i/100ms
            String#%    41.023k i/100ms
Calculating -------------------------------------
         Float#round    318.206k (± 6.7%) i/s -      1.597M in   5.042627s
       Kernel#format    441.884k (± 3.9%) i/s -      2.237M in   5.070897s
            String#%    459.871k (± 5.6%) i/s -      2.297M in   5.012008s

Comparison:
            String#%:   459871.3 i/s
       Kernel#format:   441884.5 i/s - same-ish: difference falls within error
         Float#round:   318206.4 i/s - 1.45x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   568.802k i/100ms
  ancestors.include?   111.412k i/100ms
Calculating -------------------------------------
  less than or equal      8.152M (± 6.0%) i/s -     40.954M in   5.042741s
  ancestors.include?      1.167M (± 5.5%) i/s -      5.905M in   5.074763s

Comparison:
  less than or equal:  8151661.4 i/s
  ancestors.include?:  1167210.8 i/s - 6.98x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   191.631M i/100ms
             &method   203.382M i/100ms
Calculating -------------------------------------
              normal      2.143B (± 2.5%) i/s -     10.731B in   5.010777s
             &method      2.131B (± 4.1%) i/s -     10.779B in   5.067700s

Comparison:
              normal: 2143034483.7 i/s
             &method: 2130826165.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        74.000  i/100ms
       define_method   159.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.958k (±41.0%) i/s -      6.586k in   7.909170s
       define_method      3.434k (±75.7%) i/s -      1.908k in   6.997044s

Comparison:
       define_method:     3433.7 i/s
module_eval with string:     1957.8 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   200.918M i/100ms
          OpenStruct   207.689M i/100ms
Calculating -------------------------------------
                Hash      2.096B (± 4.8%) i/s -     10.448B in   4.997849s
          OpenStruct      2.096B (± 4.1%) i/s -     10.592B in   5.061697s

Comparison:
          OpenStruct: 2096232393.7 i/s
                Hash: 2095641324.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     9.262k i/100ms
         respond_to?   209.719M i/100ms
Calculating -------------------------------------
      begin...rescue     64.237k (± 5.6%) i/s -    324.170k in   5.062836s
         respond_to?      2.097B (± 5.1%) i/s -     10.486B in   5.014830s

Comparison:
         respond_to?: 2096702545.7 i/s
      begin...rescue:    64236.9 i/s - 32640.14x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   204.036M i/100ms
       attr_accessor   200.122M i/100ms
Calculating -------------------------------------
   getter_and_setter      2.147B (± 3.7%) i/s -     10.814B in   5.044459s
       attr_accessor      2.134B (± 4.5%) i/s -     10.807B in   5.075404s

Comparison:
   getter_and_setter: 2146756870.7 i/s
       attr_accessor: 2133615844.6 i/s - same-ish: difference falls within error

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     2.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     20.586  (± 4.9%) i/s -    104.000  in   5.063911s
         Kernel loop      0.398  (± 0.0%) i/s -      2.000  in   5.028705s

Comparison:
          While Loop:       20.6 i/s
         Kernel loop:        0.4 i/s - 51.76x  (± 0.00) slower

$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       199.954M i/100ms
Function with splat arguments
                       625.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          2.125B (± 4.8%) i/s -     10.598B in   4.999335s
Function with splat arguments
                          6.634k (± 5.1%) i/s -     33.125k in   5.006745s

Comparison:
Function with single Array argument: 2124806071.4 i/s
Function with splat arguments:     6633.8 i/s - 320299.67x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   201.933M i/100ms
          OpenStruct     1.706M i/100ms
Calculating -------------------------------------
                Hash      2.127B (± 4.5%) i/s -     10.702B in   5.042571s
          OpenStruct    782.897M (±11.9%) i/s -      3.850B in   4.994881s

Comparison:
                Hash: 2127075518.1 i/s
          OpenStruct: 782896885.2 i/s - 2.72x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   194.000  i/100ms
          Date.parse    67.000  i/100ms
Calculating -------------------------------------
        Date.iso8601      7.069k (±46.2%) i/s -     29.100k in   5.007310s
          Date.parse      4.266k (±48.4%) i/s -     16.080k in   4.991361s

Comparison:
        Date.iso8601:     7069.0 i/s
          Date.parse:     4266.3 i/s - same-ish: difference falls within error

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   215.298M i/100ms
         With Freeze   193.110M i/100ms
Calculating -------------------------------------
      Without Freeze      2.128B (± 4.0%) i/s -     10.765B in   5.066843s
         With Freeze      2.117B (± 4.1%) i/s -     10.621B in   5.025842s

Comparison:
      Without Freeze: 2128017092.1 i/s
         With Freeze: 2116781440.2 i/s - same-ish: difference falls within error

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    49.925k i/100ms
           String#tr   122.476k i/100ms
Calculating -------------------------------------
         String#gsub      2.254M (± 9.9%) i/s -     11.133M in   5.000145s
           String#tr      1.297M (± 5.3%) i/s -      6.491M in   5.020733s

Comparison:
         String#gsub:  2253631.6 i/s
           String#tr:  1296772.5 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.252M i/100ms
    String#unpack[0]     1.441M i/100ms
Calculating -------------------------------------
      String#unpack1     14.521M (± 5.6%) i/s -     72.637M in   5.018427s
    String#unpack[0]     14.571M (± 4.9%) i/s -     73.498M in   5.056635s

Comparison:
    String#unpack[0]: 14570643.6 i/s
      String#unpack1: 14520717.9 i/s - same-ish: difference falls within error

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.427M i/100ms
      String#casecmp     3.208M i/100ms
Calculating -------------------------------------
String#downcase + ==     16.696M (± 6.8%) i/s -     84.187M in   5.068655s
      String#casecmp     31.288M (± 3.2%) i/s -    157.187M in   5.028845s

Comparison:
      String#casecmp: 31287930.6 i/s
String#downcase + ==: 16695619.8 i/s - 1.87x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub    51.419k i/100ms
        String#chomp     6.698M i/100ms
String#delete_suffix     5.541M i/100ms
Calculating -------------------------------------
          String#sub      5.188M (±16.8%) i/s -     24.887M in   5.001173s
        String#chomp     58.525M (± 3.6%) i/s -    294.699M in   5.041980s
String#delete_suffix     58.155M (± 4.3%) i/s -    293.658M in   5.058671s

Comparison:
        String#chomp: 58525138.4 i/s
String#delete_suffix: 58154708.0 i/s - same-ish: difference falls within error
          String#sub:  5188483.3 i/s - 11.28x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    55.879k i/100ms
          String#sub   375.553k i/100ms
String#dup["string"]=
                        13.534M i/100ms
Calculating -------------------------------------
         String#gsub      1.131M (± 6.1%) i/s -      5.644M in   5.007427s
          String#sub      5.925M (± 5.5%) i/s -     29.669M in   5.023629s
String#dup["string"]=
                        139.580M (± 5.0%) i/s -    703.766M in   5.054550s

Comparison:
String#dup["string"]=: 139580129.2 i/s
          String#sub:  5925023.7 i/s - 23.56x  (± 0.00) slower
         String#gsub:  1131395.4 i/s - 123.37x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+   207.618M i/100ms
       String#concat   193.318M i/100ms
       String#append   199.024M i/100ms
         "foo" "bar"   190.073M i/100ms
  "#{'foo'}#{'bar'}"   199.204M i/100ms
Calculating -------------------------------------
            String#+      1.955B (± 3.2%) i/s -      9.966B in   5.103651s
       String#concat      1.939B (± 5.3%) i/s -      9.666B in   4.999606s
       String#append      2.143B (± 3.9%) i/s -     10.747B in   5.022634s
         "foo" "bar"      2.085B (± 4.9%) i/s -     10.454B in   5.026982s
  "#{'foo'}#{'bar'}"      2.071B (± 4.9%) i/s -     10.359B in   5.013310s

Comparison:
       String#append: 2143101243.2 i/s
         "foo" "bar": 2084614206.7 i/s - same-ish: difference falls within error
  "#{'foo'}#{'bar'}": 2071289931.9 i/s - same-ish: difference falls within error
            String#+: 1954646406.1 i/s - 1.10x  (± 0.00) slower
       String#concat: 1938573407.2 i/s - 1.11x  (± 0.00) slower

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   576.390k i/100ms
       String#match?   916.037k i/100ms
    String#end_with?    16.377M i/100ms
Calculating -------------------------------------
           String#=~      6.906M (± 5.5%) i/s -     34.583M in   5.023838s
       String#match?      8.798M (± 5.2%) i/s -     43.970M in   5.011335s
    String#end_with?    157.175M (± 4.3%) i/s -    786.078M in   5.010553s

Comparison:
    String#end_with?: 157175493.0 i/s
       String#match?:  8797876.1 i/s - 17.87x  (± 0.00) slower
           String#=~:  6905913.9 i/s - 22.76x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   183.121M i/100ms
          String#dup   218.960M i/100ms
Calculating -------------------------------------
           String#+@      2.102B (± 4.7%) i/s -     10.621B in   5.064236s
          String#dup      2.128B (± 2.9%) i/s -     10.729B in   5.046417s

Comparison:
          String#dup: 2127921402.2 i/s
           String#+@: 2102109495.6 i/s - same-ish: difference falls within error

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   793.552k i/100ms
       String#match?     1.263M i/100ms
  String#start_with?     2.314M i/100ms
Calculating -------------------------------------
           String#=~      8.954M (± 4.7%) i/s -     45.232M in   5.063508s
       String#match?     12.076M (± 5.1%) i/s -     60.616M in   5.033846s
  String#start_with?     22.251M (± 4.7%) i/s -    111.064M in   5.003184s

Comparison:
  String#start_with?: 22250840.0 i/s
       String#match?: 12076087.0 i/s - 1.84x  (± 0.00) slower
           String#=~:  8953986.2 i/s - 2.49x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   126.135k i/100ms
    String#[0, n] ==   194.193k i/100ms
   String#[RANGE] ==   214.094k i/100ms
   String#[0...n] ==   171.580k i/100ms
Calculating -------------------------------------
  String#start_with?      3.279M (± 6.5%) i/s -     16.398M in   5.022890s
    String#[0, n] ==      2.094M (± 5.9%) i/s -     10.486M in   5.025828s
   String#[RANGE] ==      2.205M (± 4.0%) i/s -     11.133M in   5.057183s
   String#[0...n] ==      1.674M (± 4.1%) i/s -      8.407M in   5.031907s

Comparison:
  String#start_with?:  3278801.4 i/s
   String#[RANGE] ==:  2204849.7 i/s - 1.49x  (± 0.00) slower
    String#[0, n] ==:  2093946.5 i/s - 1.57x  (± 0.00) slower
   String#[0...n] ==:  1673680.8 i/s - 1.96x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix     2.203M i/100ms
          String#sub   605.867k i/100ms
Calculating -------------------------------------
String#delete_prefix     26.458M (± 5.7%) i/s -    132.160M in   5.011449s
          String#sub      6.495M (± 4.0%) i/s -     32.717M in   5.045367s

Comparison:
String#delete_prefix: 26458462.0 i/s
          String#sub:  6495076.7 i/s - 4.07x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    15.147M i/100ms
 String#sub!'string'   424.893k i/100ms
String#gsub!'string'   116.014k i/100ms
  String#[/regexp/]=   835.398k i/100ms
 String#sub!/regexp/   559.429k i/100ms
String#gsub!/regexp/   402.229k i/100ms
Calculating -------------------------------------
  String#['string']=    151.868M (± 4.1%) i/s -    772.485M in   5.095269s
 String#sub!'string'      7.058M (± 6.1%) i/s -     35.266M in   5.016150s
String#gsub!'string'      1.239M (± 4.9%) i/s -      6.265M in   5.069256s
  String#[/regexp/]=      8.131M (± 3.7%) i/s -     40.935M in   5.041463s
 String#sub!/regexp/      5.579M (± 4.4%) i/s -     27.971M in   5.023252s
String#gsub!/regexp/      4.088M (± 4.2%) i/s -     20.514M in   5.026322s

Comparison:
  String#['string']=: 151868228.4 i/s
  String#[/regexp/]=:  8130946.2 i/s - 18.68x  (± 0.00) slower
 String#sub!'string':  7057586.6 i/s - 21.52x  (± 0.00) slower
 String#sub!/regexp/:  5578969.7 i/s - 27.22x  (± 0.00) slower
String#gsub!/regexp/:  4088357.5 i/s - 37.15x  (± 0.00) slower
String#gsub!'string':  1238918.0 i/s - 122.58x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     2.051M i/100ms
           String#=~     2.824M i/100ms
          Regexp#===     2.766M i/100ms
        String#match     2.619M i/100ms
Calculating -------------------------------------
       String#match?     28.041M (± 5.8%) i/s -    141.516M in   5.064191s
           String#=~     27.257M (± 5.1%) i/s -    138.366M in   5.089588s
          Regexp#===     27.358M (± 5.1%) i/s -    138.305M in   5.069072s
        String#match     25.893M (± 3.7%) i/s -    130.959M in   5.064588s

Comparison:
       String#match?: 28040995.2 i/s
          Regexp#===: 27357765.2 i/s - same-ish: difference falls within error
           String#=~: 27256931.3 i/s - same-ish: difference falls within error
        String#match: 25893418.0 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     4.247k i/100ms
      String#squeeze    56.276k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     86.055k (± 5.5%) i/s -    428.947k in   5.000226s
      String#squeeze    562.529k (± 4.3%) i/s -      2.814M in   5.011434s

Comparison:
      String#squeeze:   562529.1 i/s
 String#gsub/regex+/:    86055.5 i/s - 6.54x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    12.569k i/100ms
      range#include?   142.000  i/100ms
       range#member?   174.000  i/100ms
       plain compare    22.095k i/100ms
Calculating -------------------------------------
        range#cover?    114.076k (±39.9%) i/s -    502.760k in   5.078038s
      range#include?      4.127k (±49.2%) i/s -     13.206k in   5.961330s
       range#member?      3.058k (±45.8%) i/s -     12.354k in   5.005389s
       plain compare    225.450k (±38.7%) i/s -    994.275k in   5.083147s

Comparison:
       plain compare:   225450.3 i/s
        range#cover?:   114076.2 i/s - same-ish: difference falls within error
      range#include?:     4126.9 i/s - 54.63x  (± 0.00) slower
       range#member?:     3057.6 i/s - 73.73x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601     6.344k i/100ms
          Time.parse    51.000  i/100ms
Calculating -------------------------------------
        Time.iso8601     38.677k (± 3.5%) i/s -    196.664k in   5.091175s
          Time.parse      3.313k (±27.7%) i/s -     12.801k in   5.043442s

Comparison:
        Time.iso8601:    38677.4 i/s
          Time.parse:     3313.1 i/s - 11.67x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each    99.881k i/100ms
       Hash#each_key   136.342k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.232M (± 5.5%) i/s -      6.193M in   5.041623s
       Hash#each_key      1.389M (± 6.3%) i/s -      6.953M in   5.025509s

Comparison:
       Hash#each_key:  1389084.6 i/s
      Hash#keys.each:  1232019.8 i/s - 1.13x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    74.420M i/100ms
             Hash#[]    76.281M i/100ms
          Hash#[] ||    76.801M i/100ms
          Hash#[] &&    76.973M i/100ms
          Hash#fetch    79.125M i/100ms
 Hash#fetch fallback    77.353M i/100ms
Calculating -------------------------------------
            Hash#dig    784.662M (± 4.0%) i/s -      3.944B in   5.034946s
             Hash#[]    795.965M (± 3.3%) i/s -      4.043B in   5.085031s
          Hash#[] ||    792.266M (± 3.1%) i/s -      3.994B in   5.045694s
          Hash#[] &&    790.800M (± 4.1%) i/s -      4.003B in   5.070121s
          Hash#fetch    794.108M (± 4.1%) i/s -      4.035B in   5.090549s
 Hash#fetch fallback    792.677M (± 3.7%) i/s -      4.022B in   5.081187s

Comparison:
             Hash#[]: 795965166.6 i/s
          Hash#fetch: 794108499.2 i/s - same-ish: difference falls within error
 Hash#fetch fallback: 792677100.7 i/s - same-ish: difference falls within error
          Hash#[] ||: 792266036.2 i/s - same-ish: difference falls within error
          Hash#[] &&: 790800195.3 i/s - same-ish: difference falls within error
            Hash#dig: 784662446.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   355.000  i/100ms
         Hash#merge!    31.461k i/100ms
Calculating -------------------------------------
          Hash#merge      6.137k (± 5.6%) i/s -     30.885k in   5.049156s
         Hash#merge!    307.575k (± 4.5%) i/s -      1.542M in   5.022500s

Comparison:
         Hash#merge!:   307574.6 i/s
          Hash#merge:     6137.0 i/s - 50.12x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    13.367k i/100ms
         sort + to_h     7.841k i/100ms
Calculating -------------------------------------
      sort_by + to_h    198.100k (±10.2%) i/s -    989.158k in   5.051458s
         sort + to_h    148.632k (± 8.7%) i/s -    737.054k in   4.999953s

Comparison:
      sort_by + to_h:   198100.1 i/s
         sort + to_h:   148632.4 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   212.469M i/100ms
  Hash#fetch, symbol   187.988M i/100ms
     Hash#[], string     5.522M i/100ms
  Hash#fetch, string     5.587M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      2.154B (± 3.6%) i/s -     10.836B in   5.036212s
  Hash#fetch, symbol      1.986B (± 3.4%) i/s -      9.963B in   5.021847s
     Hash#[], string     56.283M (± 4.1%) i/s -    281.607M in   5.012137s
  Hash#fetch, string     54.423M (± 4.2%) i/s -    273.742M in   5.038804s

Comparison:
     Hash#[], symbol: 2154454185.6 i/s
  Hash#fetch, symbol: 1986265680.2 i/s - 1.08x  (± 0.00) slower
     Hash#[], string: 56283028.1 i/s - 38.28x  (± 0.00) slower
  Hash#fetch, string: 54422740.8 i/s - 39.59x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         6.033k i/100ms
      Hash#merge({})    12.608k i/100ms
 Hash#dup#merge!({})    20.153k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        231.285k (± 9.2%) i/s -      1.146M in   5.002025s
      Hash#merge({})    129.856k (± 4.7%) i/s -    655.616k in   5.059879s
 Hash#dup#merge!({})    205.985k (± 4.7%) i/s -      1.028M in   5.000665s

Comparison:
{}#merge!(Hash) do end:   231284.7 i/s
 Hash#dup#merge!({}):   205985.5 i/s - same-ish: difference falls within error
      Hash#merge({}):   129856.2 i/s - 1.78x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   219.501M i/100ms
  Hash#fetch + block   193.050M i/100ms
    Hash#fetch + arg   216.472M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      2.112B (± 4.3%) i/s -     10.536B in   4.998528s
  Hash#fetch + block      1.983B (± 4.1%) i/s -     10.039B in   5.070847s
    Hash#fetch + arg      2.101B (± 4.0%) i/s -     10.607B in   5.055591s

Comparison:
  Hash#fetch + const: 2111780070.1 i/s
    Hash#fetch + arg: 2101372610.0 i/s - same-ish: difference falls within error
  Hash#fetch + block: 1983257108.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?    46.000  i/100ms
         Hash#value?   402.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.589k (±14.7%) i/s -      7.636k in   4.997597s
         Hash#value?      4.191k (± 3.1%) i/s -     21.306k in   5.089088s

Comparison:
         Hash#value?:     4190.9 i/s
Hash#values.include?:     1588.9 i/s - 2.64x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      910.383k i/100ms
Array#each             866.424k i/100ms
Array#each_w/_object   805.892k i/100ms
Hash#select-include      1.454M i/100ms
Calculating -------------------------------------
Hash#native-slice         9.631M (± 3.8%) i/s -     48.250M in   5.017297s
Array#each                7.773M (± 3.4%) i/s -     38.989M in   5.022023s
Array#each_w/_object      7.749M (± 3.9%) i/s -     38.683M in   5.000111s
Hash#select-include      13.594M (± 3.7%) i/s -     68.344M in   5.034736s

Comparison:
Hash#select-include : 13593803.7 i/s
Hash#native-slice   :  9630827.4 i/s - 1.41x  (± 0.00) slower
Array#each          :  7773221.1 i/s - 1.75x  (± 0.00) slower
Array#each_w/_object:  7748776.6 i/s - 1.75x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    14.260k i/100ms
            Hash#[]=    27.952k i/100ms
Calculating -------------------------------------
         Hash#merge!    287.139k (± 7.9%) i/s -      1.426M in   5.001824s
            Hash#[]=    282.862k (± 5.0%) i/s -      1.426M in   5.053058s

Comparison:
         Hash#merge!:   287138.8 i/s
            Hash#[]=:   282861.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   269.195k i/100ms
            Hash#dup   323.832k i/100ms
Calculating -------------------------------------
              Hash[]      3.168M (± 3.9%) i/s -     15.883M in   5.021171s
            Hash#dup      3.218M (± 3.8%) i/s -     16.192M in   5.038795s

Comparison:
            Hash#dup:  3218063.4 i/s
              Hash[]:  3167954.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   193.095M i/100ms
          Hash#merge   199.011M i/100ms
Calculating -------------------------------------
        Hash#**other      1.906B (± 2.7%) i/s -      9.655B in   5.068121s
          Hash#merge      1.968B (± 4.8%) i/s -      9.951B in   5.068667s

Comparison:
          Hash#merge: 1967502221.3 i/s
        Hash#**other: 1906404090.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?    20.000  i/100ms
           Hash#key?    29.915M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.589k (±15.5%) i/s -      7.500k in   4.994553s
           Hash#key?    280.917M (± 3.2%) i/s -      1.406B in   5.010471s

Comparison:
           Hash#key?: 280916760.8 i/s
  Hash#keys.include?:     1588.8 i/s - 176808.54x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   188.567M i/100ms
                send   200.687M i/100ms
      method_missing   207.577M i/100ms
Calculating -------------------------------------
                call      2.003B (± 4.2%) i/s -      9.994B in   4.997844s
                send      2.045B (± 4.0%) i/s -     10.235B in   5.012766s
      method_missing      1.996B (± 4.3%) i/s -      9.964B in   5.000298s

Comparison:
                send: 2045151392.8 i/s
                call: 2003285842.2 i/s - same-ish: difference falls within error
      method_missing: 1996265509.9 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   451.671k i/100ms
Calculating -------------------------------------
                find      0.104  (± 0.0%) i/s -      1.000  in   9.593207s
             bsearch      4.838M (± 4.6%) i/s -     24.390M in   5.052487s

Comparison:
             bsearch:  4838067.1 i/s
                find:        0.1 i/s - 46412580.68x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    12.983k i/100ms
        Array#sample     2.656M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    237.414k (± 7.2%) i/s -      1.181M in   5.003040s
        Array#sample     24.992M (± 4.3%) i/s -    124.816M in   5.003096s

Comparison:
        Array#sample: 24992378.0 i/s
 Array#shuffle.first:   237414.3 i/s - 105.27x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.084  (± 0.0%) i/s -      1.000  in  11.936017s
        Array#insert      0.720  (± 0.0%) i/s -      4.000  in   5.554513s

Comparison:
        Array#insert:        0.7 i/s
       Array#unshift:        0.1 i/s - 8.60x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   174.994M i/100ms
          Array#last   179.102M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.783B (± 4.6%) i/s -      8.925B in   5.015734s
          Array#last      1.792B (± 4.4%) i/s -      8.955B in   5.007118s

Comparison:
          Array#last: 1791937234.8 i/s
          Array#[-1]: 1783251777.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   214.771M i/100ms
          Array#size   207.338M i/100ms
         Array#count   215.866M i/100ms
Calculating -------------------------------------
        Array#length      2.033B (± 6.6%) i/s -     10.309B in   5.095475s
          Array#size      2.126B (± 4.2%) i/s -     10.782B in   5.079159s
         Array#count      2.093B (± 4.9%) i/s -     10.577B in   5.065130s

Comparison:
          Array#size: 2126476122.5 i/s
         Array#count: 2093476537.7 i/s - same-ish: difference falls within error
        Array#length: 2032571657.9 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   192.748M i/100ms
         Array#first   199.067M i/100ms
Calculating -------------------------------------
           Array#[0]      1.914B (± 2.6%) i/s -      9.637B in   5.037854s
         Array#first      1.903B (± 3.7%) i/s -      9.555B in   5.029820s

Comparison:
           Array#[0]: 1914324140.1 i/s
         Array#first: 1902565270.0 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   172.577k i/100ms
           Array#map   742.500k i/100ms
Calculating -------------------------------------
   Array#each + push      1.957M (± 5.8%) i/s -      9.837M in   5.042535s
           Array#map      7.882M (± 5.4%) i/s -     39.353M in   5.007676s

Comparison:
           Array#map:  7881610.3 i/s
   Array#each + push:  1957464.5 i/s - 4.03x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by    22.905k i/100ms
Enumerable#sort_by...first
                         5.136k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      4.049M (± 9.0%) i/s -     20.065M in   4.997416s
Enumerable#sort_by...first
                         66.999k (± 5.0%) i/s -    338.976k in   5.072505s

Comparison:
   Enumerable#min_by:  4048559.9 i/s
Enumerable#sort_by...first:    66999.5 i/s - 60.43x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     9.394M i/100ms
               #each    12.532M i/100ms
Calculating -------------------------------------
            For loop     95.133M (± 3.6%) i/s -    479.094M in   5.042519s
               #each    133.400M (± 4.4%) i/s -    676.749M in   5.083179s

Comparison:
               #each: 133400489.4 i/s
            For loop: 95132853.6 i/s - 1.40x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       509.400k i/100ms
   Enumerable#detect     3.146M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          6.448M (± 6.9%) i/s -    128.369M in  20.045352s
   Enumerable#detect     30.118M (± 4.0%) i/s -    604.072M in  20.089470s

Comparison:
   Enumerable#detect: 30117710.4 i/s
Enumerable#select.first:  6448139.5 i/s - 4.67x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         1.426k i/100ms
  Enumerable#sort_by     2.796k i/100ms
     Enumerable#sort     4.832k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         27.345k (±17.1%) i/s -    132.618k in   5.028722s
  Enumerable#sort_by     34.189k (± 6.0%) i/s -    170.556k in   5.007925s
     Enumerable#sort     48.199k (± 4.3%) i/s -    241.600k in   5.021998s

Comparison:
     Enumerable#sort:    48198.9 i/s
  Enumerable#sort_by:    34189.2 i/s - 1.41x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    27345.4 i/s - 1.76x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       182.804k i/100ms
Enumerable#select.last
                       261.362k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.851M (± 5.5%) i/s -      9.323M in   5.052689s
Enumerable#select.last
                          2.729M (± 5.9%) i/s -     13.852M in   5.093676s

Comparison:
Enumerable#select.last:  2729373.3 i/s
Enumerable#reverse.detect:  1850747.9 i/s - 1.47x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   852.366k i/100ms
     each_with_index     1.187M i/100ms
Calculating -------------------------------------
          While Loop      8.324M (± 4.7%) i/s -     41.766M in   5.029259s
     each_with_index     11.840M (± 4.2%) i/s -     59.343M in   5.020942s

Comparison:
     each_with_index: 11839643.8 i/s
          While Loop:  8323765.4 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each    12.186k i/100ms
  Array#reverse_each     1.252M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.827M (±12.3%) i/s -      8.932M in   5.001252s
  Array#reverse_each     12.416M (± 4.1%) i/s -     62.580M in   5.048591s

Comparison:
  Array#reverse_each: 12416380.2 i/s
  Array#reverse.each:  1827266.0 i/s - 6.80x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)    11.461k i/100ms
   Array#map.flatten    16.099k i/100ms
      Array#flat_map    36.954k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    160.835k (± 5.6%) i/s -    802.270k in   5.003870s
   Array#map.flatten    159.167k (± 5.6%) i/s -    804.950k in   5.073751s
      Array#flat_map    384.895k (± 5.1%) i/s -      1.922M in   5.005759s

Comparison:
      Array#flat_map:   384895.2 i/s
Array#map.flatten(1):   160835.3 i/s - 2.39x  (± 0.00) slower
   Array#map.flatten:   159166.6 i/s - 2.42x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   151.926k i/100ms
      inject to_proc   153.552k i/100ms
        inject block   146.631k i/100ms
Calculating -------------------------------------
       inject symbol      1.518M (± 5.8%) i/s -      7.596M in   5.021828s
      inject to_proc      1.547M (± 4.6%) i/s -      7.831M in   5.071567s
        inject block      1.537M (± 4.3%) i/s -      7.771M in   5.065471s

Comparison:
      inject to_proc:  1547391.6 i/s
        inject block:  1537080.6 i/s - same-ish: difference falls within error
       inject symbol:  1517980.9 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   195.485M i/100ms
       block + yield   192.253M i/100ms
        unused block   188.355M i/100ms
               yield   192.326M i/100ms
Calculating -------------------------------------
          block.call      1.961B (± 3.9%) i/s -      9.970B in   5.090754s
       block + yield      1.969B (± 4.1%) i/s -      9.997B in   5.085750s
        unused block      1.986B (± 4.2%) i/s -      9.983B in   5.035844s
               yield      1.971B (± 3.3%) i/s -     10.001B in   5.080244s

Comparison:
        unused block: 1985991850.0 i/s
               yield: 1970772898.1 i/s - same-ish: difference falls within error
       block + yield: 1969059974.4 i/s - same-ish: difference falls within error
          block.call: 1961436175.8 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.0.0-dev-96b66cc3, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    31.094k i/100ms
      Symbol#to_proc    38.832k i/100ms
Calculating -------------------------------------
               Block    392.806k (± 6.4%) i/s -      1.959M in   5.016286s
      Symbol#to_proc    384.653k (± 3.8%) i/s -      1.942M in   5.055296s

Comparison:
               Block:   392806.0 i/s
      Symbol#to_proc:   384652.7 i/s - same-ish: difference falls within error

