$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       233.668M i/100ms
Function with splat arguments
                       573.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          2.333B (± 2.8%) i/s -     11.683B in   5.010814s
Function with splat arguments
                          6.321k (± 5.2%) i/s -     31.515k in   5.000409s

Comparison:
Function with single Array argument: 2333499389.4 i/s
Function with splat arguments:     6321.0 i/s - 369167.89x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   238.605M i/100ms
Sequential Assignment
                       231.303M i/100ms
Calculating -------------------------------------
 Parallel Assignment      2.381B (± 0.9%) i/s -     11.930B in   5.010249s
Sequential Assignment
                          2.387B (± 0.2%) i/s -     12.028B in   5.039006s

Comparison:
Sequential Assignment: 2386941966.3 i/s
 Parallel Assignment: 2381359465.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   229.140M i/100ms
       attr_accessor   238.411M i/100ms
Calculating -------------------------------------
   getter_and_setter      2.387B (± 0.3%) i/s -     12.144B in   5.088623s
       attr_accessor      2.389B (± 0.2%) i/s -     12.159B in   5.090132s

Comparison:
       attr_accessor: 2388743491.3 i/s
   getter_and_setter: 2386602027.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     6.345k i/100ms
         respond_to?   224.424M i/100ms
Calculating -------------------------------------
      begin...rescue     46.964k (± 2.8%) i/s -    234.765k in   5.002655s
         respond_to?      2.389B (± 0.2%) i/s -     12.119B in   5.073637s

Comparison:
         respond_to?: 2388615305.9 i/s
      begin...rescue:    46964.5 i/s - 50860.03x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   238.764M i/100ms
             &method   224.079M i/100ms
Calculating -------------------------------------
              normal      2.385B (± 0.3%) i/s -     11.938B in   5.006135s
             &method      2.388B (± 0.2%) i/s -     12.100B in   5.068000s

Comparison:
             &method: 2387593933.5 i/s
              normal: 2384735990.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        93.000  i/100ms
       define_method   119.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.121k (±30.3%) i/s -      2.976k in   5.119965s
       define_method      2.565k (±56.0%) i/s -      6.307k in   5.960182s

Comparison:
       define_method:     2564.7 i/s
module_eval with string:     1121.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    27.715k i/100ms
       Kernel#format    42.627k i/100ms
            String#%    41.742k i/100ms
Calculating -------------------------------------
         Float#round    342.731k (± 3.3%) i/s -      1.718M in   5.019587s
       Kernel#format    426.760k (± 1.9%) i/s -      2.174M in   5.096152s
            String#%    426.210k (± 1.9%) i/s -      2.171M in   5.094876s

Comparison:
       Kernel#format:   426759.6 i/s
            String#%:   426209.7 i/s - same-ish: difference falls within error
         Float#round:   342731.1 i/s - 1.25x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   237.882M i/100ms
          OpenStruct   238.200M i/100ms
Calculating -------------------------------------
                Hash      2.384B (± 0.6%) i/s -     12.132B in   5.088470s
          OpenStruct      2.388B (± 0.2%) i/s -     12.148B in   5.086331s

Comparison:
          OpenStruct: 2388409167.8 i/s
                Hash: 2384313214.0 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   238.438M i/100ms
          OpenStruct     2.733k i/100ms
Calculating -------------------------------------
                Hash      2.382B (± 0.4%) i/s -     11.922B in   5.005138s
          OpenStruct     29.052k (±12.8%) i/s -    142.116k in   5.003575s

Comparison:
                Hash: 2381977250.2 i/s
          OpenStruct:    29051.8 i/s - 81990.69x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   717.179k i/100ms
  ancestors.include?   124.079k i/100ms
Calculating -------------------------------------
  less than or equal      8.202M (± 4.5%) i/s -     41.596M in   5.081876s
  ancestors.include?      1.270M (± 4.2%) i/s -      6.452M in   5.090834s

Comparison:
  less than or equal:  8202332.9 i/s
  ancestors.include?:  1269720.8 i/s - 6.46x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     23.864  (± 0.0%) i/s -    120.000  in   5.028528s
         Kernel loop      5.551  (± 0.0%) i/s -     28.000  in   5.044182s

Comparison:
          While Loop:       23.9 i/s
         Kernel loop:        5.6 i/s - 4.30x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   227.018M i/100ms
         Array#first   236.770M i/100ms
Calculating -------------------------------------
           Array#[0]      2.385B (± 0.3%) i/s -     12.032B in   5.045405s
         Array#first      2.386B (± 0.3%) i/s -     12.075B in   5.060392s

Comparison:
         Array#first: 2386246427.7 i/s
           Array#[0]: 2384767161.8 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   238.154M i/100ms
          Array#last   238.732M i/100ms
Calculating -------------------------------------
          Array#[-1]      2.384B (± 0.4%) i/s -     12.146B in   5.095562s
          Array#last      2.386B (± 0.3%) i/s -     11.937B in   5.002763s

Comparison:
          Array#last: 2386024481.2 i/s
          Array#[-1]: 2383650535.4 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   478.860k i/100ms
Calculating -------------------------------------
                find      0.083  (± 0.0%) i/s -      1.000  in  12.108745s
             bsearch      4.857M (± 3.7%) i/s -     24.422M in   5.035442s

Comparison:
             bsearch:  4856893.5 i/s
                find:        0.1 i/s - 58810886.81x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.123  (± 0.0%) i/s -      1.000  in   8.117145s
        Array#insert      0.943  (± 0.0%) i/s -      5.000  in   5.302695s

Comparison:
        Array#insert:        0.9 i/s
       Array#unshift:        0.1 i/s - 7.65x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   238.372M i/100ms
          Array#size   221.427M i/100ms
         Array#count   238.769M i/100ms
Calculating -------------------------------------
        Array#length      2.277B (± 4.9%) i/s -     11.442B in   5.038846s
          Array#size      2.387B (± 0.2%) i/s -     11.957B in   5.009383s
         Array#count      2.387B (± 0.2%) i/s -     11.938B in   5.002372s

Comparison:
          Array#size: 2386948845.6 i/s
         Array#count: 2386569448.7 i/s - same-ish: difference falls within error
        Array#length: 2276596199.6 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    20.866k i/100ms
        Array#sample     2.583M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    217.841k (± 2.1%) i/s -      1.106M in   5.079047s
        Array#sample     25.190M (± 0.1%) i/s -    126.556M in   5.024070s

Comparison:
        Array#sample: 25189941.4 i/s
 Array#shuffle.first:   217841.0 i/s - 115.63x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   316.000  i/100ms
          Date.parse   133.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     13.285k (±34.7%) i/s -     52.140k in   4.993588s
          Date.parse      5.526k (±36.9%) i/s -     22.078k in   5.008700s

Comparison:
        Date.iso8601:    13284.5 i/s
          Date.parse:     5525.7 i/s - 2.40x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   136.478k i/100ms
           Array#map   512.406k i/100ms
Calculating -------------------------------------
   Array#each + push      1.410M (± 3.9%) i/s -      7.097M in   5.040497s
           Array#map      5.261M (± 6.2%) i/s -     26.645M in   5.084891s

Comparison:
           Array#map:  5260907.7 i/s
   Array#each + push:  1410267.5 i/s - 3.73x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     4.372M i/100ms
               #each    56.812M i/100ms
Calculating -------------------------------------
            For loop     45.896M (± 6.0%) i/s -    231.733M in   5.069022s
               #each    568.558M (± 0.4%) i/s -      2.897B in   5.096123s

Comparison:
               #each: 568557890.7 i/s
            For loop: 45895782.4 i/s - 12.39x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   698.217k i/100ms
     each_with_index     1.281M i/100ms
Calculating -------------------------------------
          While Loop      6.991M (± 0.1%) i/s -     35.609M in   5.093491s
     each_with_index     12.806M (± 0.1%) i/s -     64.028M in   4.999818s

Comparison:
     each_with_index: 12806076.2 i/s
          While Loop:  6991095.8 i/s - 1.83x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   146.932k i/100ms
      inject to_proc   147.304k i/100ms
        inject block   147.323k i/100ms
Calculating -------------------------------------
       inject symbol      1.473M (± 0.1%) i/s -      7.494M in   5.086075s
      inject to_proc      1.474M (± 0.1%) i/s -      7.513M in   5.098023s
        inject block      1.474M (± 0.1%) i/s -      7.513M in   5.098874s

Comparison:
      inject to_proc:  1473612.0 i/s
        inject block:  1473556.4 i/s - same-ish: difference falls within error
       inject symbol:  1473343.9 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     9.386k i/100ms
   Array#map.flatten    10.303k i/100ms
      Array#flat_map    29.019k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    103.620k (± 3.7%) i/s -    525.616k in   5.079993s
   Array#map.flatten    104.476k (± 3.3%) i/s -    525.453k in   5.035514s
      Array#flat_map    291.615k (± 2.9%) i/s -      1.480M in   5.079891s

Comparison:
      Array#flat_map:   291614.6 i/s
   Array#map.flatten:   104475.6 i/s - 2.79x  (± 0.00) slower
Array#map.flatten(1):   103619.6 i/s - 2.81x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   125.193k i/100ms
  Array#reverse_each     1.201M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.527M (± 3.7%) i/s -      7.637M in   5.008091s
  Array#reverse_each     12.121M (± 2.6%) i/s -     61.265M in   5.057823s

Comparison:
  Array#reverse_each: 12121340.7 i/s
  Array#reverse.each:  1527050.2 i/s - 7.94x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       554.202k i/100ms
   Enumerable#detect     3.851M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          5.958M (± 5.6%) i/s -    118.599M in  19.997054s
   Enumerable#detect     38.507M (± 0.3%) i/s -    770.141M in  20.000094s

Comparison:
   Enumerable#detect: 38507217.5 i/s
Enumerable#select.first:  5957609.8 i/s - 6.46x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       152.091k i/100ms
Enumerable#select.last
                       314.924k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.534M (± 2.9%) i/s -      7.757M in   5.060429s
Enumerable#select.last
                          3.190M (± 3.1%) i/s -     16.061M in   5.040033s

Comparison:
Enumerable#select.last:  3189975.5 i/s
Enumerable#reverse.detect:  1534140.4 i/s - 2.08x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.161k i/100ms
  Enumerable#sort_by     2.377k i/100ms
     Enumerable#sort     2.556k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         21.878k (±16.8%) i/s -    101.567k in   5.085516s
  Enumerable#sort_by     22.296k (±16.9%) i/s -    102.211k in   5.090947s
     Enumerable#sort     31.556k (± 2.0%) i/s -    158.472k in   5.024188s

Comparison:
     Enumerable#sort:    31556.1 i/s
  Enumerable#sort_by:    22295.9 i/s - 1.42x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    21878.4 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   319.817k i/100ms
Enumerable#sort_by...first
                         4.941k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      3.199M (± 0.1%) i/s -     16.311M in   5.098143s
Enumerable#sort_by...first
                         52.584k (± 3.3%) i/s -    266.814k in   5.079810s

Comparison:
   Enumerable#min_by:  3199337.7 i/s
Enumerable#sort_by...first:    52583.7 i/s - 60.84x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   176.216k i/100ms
            Hash#dup   190.298k i/100ms
Calculating -------------------------------------
              Hash[]      1.880M (± 3.7%) i/s -      9.516M in   5.069393s
            Hash#dup      1.941M (± 3.8%) i/s -      9.705M in   5.006803s

Comparison:
            Hash#dup:  1941417.4 i/s
              Hash[]:  1879835.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   238.159M i/100ms
  Hash#fetch, symbol   230.111M i/100ms
     Hash#[], string     4.960M i/100ms
  Hash#fetch, string     4.658M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      2.385B (± 0.3%) i/s -     12.146B in   5.092573s
  Hash#fetch, symbol      2.386B (± 0.3%) i/s -     11.966B in   5.014181s
     Hash#[], string     49.422M (± 0.7%) i/s -    247.980M in   5.017876s
  Hash#fetch, string     46.630M (± 0.5%) i/s -    237.549M in   5.094445s

Comparison:
  Hash#fetch, symbol: 2386408293.2 i/s
     Hash#[], symbol: 2385088492.9 i/s - same-ish: difference falls within error
     Hash#[], string: 49421698.5 i/s - 48.29x  (± 0.00) slower
  Hash#fetch, string: 46630139.8 i/s - 51.18x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    56.660M i/100ms
             Hash#[]    56.104M i/100ms
          Hash#[] ||    59.692M i/100ms
          Hash#[] &&    59.689M i/100ms
          Hash#fetch    59.700M i/100ms
 Hash#fetch fallback    59.709M i/100ms
Calculating -------------------------------------
            Hash#dig    596.401M (± 0.3%) i/s -      3.003B in   5.035216s
             Hash#[]    596.600M (± 0.2%) i/s -      3.030B in   5.078176s
          Hash#[] ||    596.667M (± 0.2%) i/s -      2.985B in   5.002164s
          Hash#[] &&    596.593M (± 0.2%) i/s -      2.984B in   5.002505s
          Hash#fetch    596.611M (± 0.2%) i/s -      2.985B in   5.003300s
 Hash#fetch fallback    596.697M (± 0.1%) i/s -      2.985B in   5.003309s

Comparison:
 Hash#fetch fallback: 596697011.9 i/s
          Hash#[] ||: 596666791.9 i/s - same-ish: difference falls within error
          Hash#fetch: 596611480.3 i/s - same-ish: difference falls within error
             Hash#[]: 596600469.8 i/s - same-ish: difference falls within error
          Hash#[] &&: 596592713.3 i/s - same-ish: difference falls within error
            Hash#dig: 596400887.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   238.058M i/100ms
  Hash#fetch + block   238.031M i/100ms
    Hash#fetch + arg   238.839M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      2.382B (± 0.4%) i/s -     12.141B in   5.096051s
  Hash#fetch + block      2.386B (± 0.2%) i/s -     12.140B in   5.088396s
    Hash#fetch + arg      2.387B (± 0.2%) i/s -     11.942B in   5.003815s

Comparison:
    Hash#fetch + arg: 2386577820.2 i/s
  Hash#fetch + block: 2385753602.2 i/s - same-ish: difference falls within error
  Hash#fetch + const: 2382463526.7 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    17.354k i/100ms
         sort + to_h    10.533k i/100ms
Calculating -------------------------------------
      sort_by + to_h    201.000k (± 9.2%) i/s -      1.007M in   5.048218s
         sort + to_h    123.429k (± 4.4%) i/s -    621.447k in   5.045600s

Comparison:
      sort_by + to_h:   200999.7 i/s
         sort + to_h:   123429.5 i/s - 1.63x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each    97.424k i/100ms
       Hash#each_key   111.288k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.043M (± 4.1%) i/s -      5.261M in   5.055065s
       Hash#each_key      1.118M (± 3.6%) i/s -      5.676M in   5.081740s

Comparison:
       Hash#each_key:  1118432.4 i/s
      Hash#keys.each:  1042537.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   167.000  i/100ms
           Hash#key?    33.167M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.833k (±11.8%) i/s -      9.018k in   5.020077s
           Hash#key?    331.482M (± 0.3%) i/s -      1.658B in   5.002821s

Comparison:
           Hash#key?: 331481751.3 i/s
  Hash#keys.include?:     1833.3 i/s - 180811.83x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    18.940k i/100ms
            Hash#[]=    20.964k i/100ms
Calculating -------------------------------------
         Hash#merge!    206.276k (± 3.8%) i/s -      1.042M in   5.057808s
            Hash#[]=    211.653k (± 3.5%) i/s -      1.069M in   5.058086s

Comparison:
            Hash#[]=:   211652.9 i/s
         Hash#merge!:   206276.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         8.565k i/100ms
      Hash#merge({})     7.129k i/100ms
 Hash#dup#merge!({})    11.648k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                         91.481k (± 4.4%) i/s -    462.510k in   5.066621s
      Hash#merge({})     72.264k (± 4.5%) i/s -    363.579k in   5.042111s
 Hash#dup#merge!({})    120.670k (± 4.1%) i/s -    605.696k in   5.028709s

Comparison:
 Hash#dup#merge!({}):   120669.5 i/s
{}#merge!(Hash) do end:    91481.3 i/s - 1.32x  (± 0.00) slower
      Hash#merge({}):    72264.1 i/s - 1.67x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   238.343M i/100ms
          Hash#merge   238.789M i/100ms
Calculating -------------------------------------
        Hash#**other      2.384B (± 0.3%) i/s -     12.156B in   5.097831s
          Hash#merge      2.381B (± 1.5%) i/s -     11.939B in   5.015095s

Comparison:
        Hash#**other: 2384467262.5 i/s
          Hash#merge: 2381290053.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   275.000  i/100ms
         Hash#merge!    19.688k i/100ms
Calculating -------------------------------------
          Hash#merge      3.053k (± 4.4%) i/s -     15.400k in   5.054227s
         Hash#merge!    205.831k (± 3.4%) i/s -      1.043M in   5.075711s

Comparison:
         Hash#merge!:   205831.1 i/s
          Hash#merge:     3053.2 i/s - 67.41x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      972.976k i/100ms
Array#each             876.626k i/100ms
Array#each_w/_object   877.189k i/100ms
Hash#select-include      1.170M i/100ms
Calculating -------------------------------------
Hash#native-slice        10.997M (± 3.8%) i/s -     55.460M in   5.050984s
Array#each                8.856M (± 2.7%) i/s -     44.708M in   5.052115s
Array#each_w/_object      8.838M (± 2.8%) i/s -     44.737M in   5.066166s
Hash#select-include      11.525M (± 2.7%) i/s -     58.482M in   5.078388s

Comparison:
Hash#select-include : 11524746.7 i/s
Hash#native-slice   : 10997323.4 i/s - same-ish: difference falls within error
Array#each          :  8856378.1 i/s - 1.30x  (± 0.00) slower
Array#each_w/_object:  8838294.0 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   144.000  i/100ms
         Hash#value?   414.000  i/100ms
Calculating -------------------------------------
Hash#values.include?      1.796k (±13.7%) i/s -      8.784k in   5.019129s
         Hash#value?      4.131k (± 0.3%) i/s -     20.700k in   5.010449s

Comparison:
         Hash#value?:     4131.4 i/s
Hash#values.include?:     1796.4 i/s - 2.30x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   227.452M i/100ms
                send   237.684M i/100ms
      method_missing   238.830M i/100ms
Calculating -------------------------------------
                call      2.384B (± 0.3%) i/s -     12.055B in   5.055922s
                send      2.386B (± 0.3%) i/s -     12.122B in   5.080378s
      method_missing      2.386B (± 0.3%) i/s -     11.941B in   5.005273s

Comparison:
                send: 2386037225.2 i/s
      method_missing: 2385798492.6 i/s - same-ish: difference falls within error
                call: 2384345284.0 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    16.164k i/100ms
      Symbol#to_proc    16.723k i/100ms
Calculating -------------------------------------
               Block    168.949k (± 3.5%) i/s -    856.692k in   5.077367s
      Symbol#to_proc    169.674k (± 3.2%) i/s -    852.873k in   5.032118s

Comparison:
      Symbol#to_proc:   169674.2 i/s
               Block:   168948.5 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   238.110M i/100ms
       block + yield   223.371M i/100ms
        unused block   238.742M i/100ms
               yield   238.803M i/100ms
Calculating -------------------------------------
          block.call      2.386B (± 0.2%) i/s -     12.144B in   5.090290s
       block + yield      2.387B (± 0.2%) i/s -     12.062B in   5.052782s
        unused block      2.386B (± 0.3%) i/s -     11.937B in   5.003600s
               yield      2.386B (± 0.2%) i/s -     11.940B in   5.003907s

Comparison:
       block + yield: 2387218232.1 i/s
               yield: 2386181135.7 i/s - same-ish: difference falls within error
        unused block: 2385720290.3 i/s - same-ish: difference falls within error
          block.call: 2385654689.7 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    34.696k i/100ms
      range#include?   218.000  i/100ms
       range#member?   333.000  i/100ms
       plain compare   811.000  i/100ms
Calculating -------------------------------------
        range#cover?    214.688k (±40.0%) i/s -    936.792k in   5.010153s
      range#include?      5.618k (±31.8%) i/s -     19.620k in   5.193417s
       range#member?      2.536k (±81.2%) i/s -      5.661k in   5.094214s
       plain compare    675.067k (±39.3%) i/s -      2.012M in   4.990166s

Comparison:
       plain compare:   675066.6 i/s
        range#cover?:   214687.9 i/s - 3.14x  (± 0.00) slower
      range#include?:     5618.4 i/s - 120.15x  (± 0.00) slower
       range#member?:     2535.6 i/s - 266.23x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     3.522M i/100ms
           String#=~     5.854M i/100ms
          Regexp#===     5.851M i/100ms
        String#match     3.274M i/100ms
Calculating -------------------------------------
       String#match?     35.980M (± 3.5%) i/s -    179.618M in   4.998873s
           String#=~     58.523M (± 0.1%) i/s -    292.698M in   5.001395s
          Regexp#===     58.473M (± 0.5%) i/s -    292.565M in   5.003541s
        String#match     33.540M (± 4.3%) i/s -    170.263M in   5.086358s

Comparison:
           String#=~: 58523393.4 i/s
          Regexp#===: 58473158.3 i/s - same-ish: difference falls within error
       String#match?: 35979700.5 i/s - 1.63x  (± 0.00) slower
        String#match: 33539726.1 i/s - 1.74x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.067M i/100ms
      String#casecmp     3.317M i/100ms
Calculating -------------------------------------
String#downcase + ==     12.546M (± 4.5%) i/s -     62.946M in   5.027840s
      String#casecmp     33.155M (± 0.1%) i/s -    165.832M in   5.001676s

Comparison:
      String#casecmp: 33155295.6 i/s
String#downcase + ==: 12546451.5 i/s - 2.64x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+   238.001M i/100ms
       String#concat   238.190M i/100ms
       String#append   238.784M i/100ms
         "foo" "bar"   238.860M i/100ms
  "#{'foo'}#{'bar'}"   238.797M i/100ms
Calculating -------------------------------------
            String#+      2.384B (± 0.3%) i/s -     12.138B in   5.090576s
       String#concat      2.387B (± 0.1%) i/s -     12.148B in   5.089578s
       String#append      2.385B (± 0.3%) i/s -     11.939B in   5.005454s
         "foo" "bar"      2.386B (± 0.3%) i/s -     11.943B in   5.005997s
  "#{'foo'}#{'bar'}"      2.383B (± 0.5%) i/s -     11.940B in   5.010496s

Comparison:
       String#concat: 2386779115.1 i/s
         "foo" "bar": 2385762625.5 i/s - same-ish: difference falls within error
       String#append: 2385256462.1 i/s - same-ish: difference falls within error
            String#+: 2384444688.4 i/s - same-ish: difference falls within error
  "#{'foo'}#{'bar'}": 2383036155.8 i/s - same-ish: difference falls within error

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   238.375M i/100ms
          String#dup   238.851M i/100ms
Calculating -------------------------------------
           String#+@      2.384B (± 0.3%) i/s -     11.919B in   4.999737s
          String#dup      2.386B (± 0.2%) i/s -     11.943B in   5.005237s

Comparison:
          String#dup: 2386023027.2 i/s
           String#+@: 2383904818.8 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.288M i/100ms
       String#match?     1.198M i/100ms
    String#end_with?    14.195M i/100ms
Calculating -------------------------------------
           String#=~     12.656M (± 3.0%) i/s -     64.387M in   5.092522s
       String#match?     11.970M (± 2.5%) i/s -     59.910M in   5.008148s
    String#end_with?    142.022M (± 0.3%) i/s -    723.968M in   5.097607s

Comparison:
    String#end_with?: 142022201.9 i/s
           String#=~: 12655573.9 i/s - 11.22x  (± 0.00) slower
       String#match?: 11970357.0 i/s - 11.86x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    86.405k i/100ms
          String#sub   365.267k i/100ms
String#dup["string"]=
                        11.364M i/100ms
Calculating -------------------------------------
         String#gsub    971.723k (± 3.9%) i/s -      4.925M in   5.077308s
          String#sub      4.155M (± 6.8%) i/s -     20.820M in   5.035923s
String#dup["string"]=
                        113.643M (± 0.1%) i/s -    579.546M in   5.099723s

Comparison:
String#dup["string"]=: 113642771.6 i/s
          String#sub:  4154663.7 i/s - 27.35x  (± 0.00) slower
         String#gsub:   971723.4 i/s - 116.95x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   140.398k i/100ms
           String#tr   124.639k i/100ms
Calculating -------------------------------------
         String#gsub      1.732M (± 5.3%) i/s -      8.705M in   5.040523s
           String#tr      1.251M (± 4.6%) i/s -      6.357M in   5.092571s

Comparison:
         String#gsub:  1732185.0 i/s
           String#tr:  1250951.3 i/s - 1.38x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   230.811M i/100ms
         With Freeze   236.327M i/100ms
Calculating -------------------------------------
      Without Freeze      2.302B (± 2.5%) i/s -     11.541B in   5.015596s
         With Freeze      2.298B (± 2.3%) i/s -     11.580B in   5.041826s

Comparison:
      Without Freeze: 2302479268.0 i/s
         With Freeze: 2298064348.6 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     4.625k i/100ms
      String#squeeze    57.460k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     60.184k (± 4.1%) i/s -    300.625k in   5.004225s
      String#squeeze    573.437k (± 2.6%) i/s -      2.873M in   5.013735s

Comparison:
      String#squeeze:   573437.4 i/s
 String#gsub/regex+/:    60183.8 i/s - 9.53x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     2.362M i/100ms
       String#match?     2.739M i/100ms
  String#start_with?     1.605M i/100ms
Calculating -------------------------------------
           String#=~     24.119M (± 2.4%) i/s -    122.806M in   5.095056s
       String#match?     27.839M (± 3.3%) i/s -    139.712M in   5.024301s
  String#start_with?     16.462M (± 3.1%) i/s -     83.479M in   5.076075s

Comparison:
       String#match?: 27838791.3 i/s
           String#=~: 24118774.0 i/s - 1.15x  (± 0.00) slower
  String#start_with?: 16462051.7 i/s - 1.69x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   265.973k i/100ms
    String#[0, n] ==   167.053k i/100ms
   String#[RANGE] ==   164.101k i/100ms
   String#[0...n] ==   129.135k i/100ms
Calculating -------------------------------------
  String#start_with?      3.170M (± 4.0%) i/s -     15.958M in   5.043910s
    String#[0, n] ==      1.706M (± 3.9%) i/s -      8.520M in   5.003395s
   String#[RANGE] ==      1.665M (± 4.6%) i/s -      8.369M in   5.038719s
   String#[0...n] ==      1.333M (± 4.8%) i/s -      6.715M in   5.050670s

Comparison:
  String#start_with?:  3169579.0 i/s
    String#[0, n] ==:  1705598.6 i/s - 1.86x  (± 0.00) slower
   String#[RANGE] ==:  1664677.7 i/s - 1.90x  (± 0.00) slower
   String#[0...n] ==:  1332850.1 i/s - 2.38x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    17.404M i/100ms
 String#sub!'string'   360.924k i/100ms
String#gsub!'string'    89.384k i/100ms
  String#[/regexp/]=     3.831M i/100ms
 String#sub!/regexp/     1.451M i/100ms
String#gsub!/regexp/   415.170k i/100ms
Calculating -------------------------------------
  String#['string']=    174.100M (± 0.7%) i/s -    887.611M in   5.098523s
 String#sub!'string'      4.437M (±14.6%) i/s -     20.573M in   5.016501s
String#gsub!'string'      1.040M (± 3.6%) i/s -      5.274M in   5.080735s
  String#[/regexp/]=     38.310M (± 0.0%) i/s -    191.563M in   5.000332s
 String#sub!/regexp/     14.082M (± 4.0%) i/s -     71.084M in   5.056702s
String#gsub!/regexp/      4.207M (± 5.4%) i/s -     21.174M in   5.048355s

Comparison:
  String#['string']=: 174100417.3 i/s
  String#[/regexp/]=: 38310033.0 i/s - 4.54x  (± 0.00) slower
 String#sub!/regexp/: 14082452.3 i/s - 12.36x  (± 0.00) slower
 String#sub!'string':  4437297.8 i/s - 39.24x  (± 0.00) slower
String#gsub!/regexp/:  4207366.4 i/s - 41.38x  (± 0.00) slower
String#gsub!'string':  1039537.9 i/s - 167.48x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.394M i/100ms
        String#chomp     2.404M i/100ms
String#delete_suffix     5.369M i/100ms
Calculating -------------------------------------
          String#sub     14.809M (± 4.9%) i/s -     73.894M in   5.002376s
        String#chomp     25.243M (± 3.3%) i/s -    127.434M in   5.054260s
String#delete_suffix     53.244M (± 1.0%) i/s -    268.442M in   5.042238s

Comparison:
String#delete_suffix: 53244074.1 i/s
        String#chomp: 25242716.7 i/s - 2.11x  (± 0.00) slower
          String#sub: 14809336.6 i/s - 3.60x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix     1.725M i/100ms
          String#sub     3.457M i/100ms
Calculating -------------------------------------
String#delete_prefix     18.623M (± 4.5%) i/s -     93.132M in   5.012032s
          String#sub     34.221M (± 5.1%) i/s -    172.841M in   5.064366s

Comparison:
          String#sub: 34221247.6 i/s
String#delete_prefix: 18622674.2 i/s - 1.84x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.197M i/100ms
    String#unpack[0]     1.291M i/100ms
Calculating -------------------------------------
      String#unpack1     13.123M (± 3.3%) i/s -     65.825M in   5.021813s
    String#unpack[0]     13.148M (± 3.0%) i/s -     65.816M in   5.010374s

Comparison:
    String#unpack[0]: 13148305.6 i/s
      String#unpack1: 13123181.9 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.1.0-dev-8d985822, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    13.118k i/100ms
          Time.parse   165.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    100.502k (±35.9%) i/s -    446.012k in   5.026976s
          Time.parse      3.858k (±24.6%) i/s -     16.995k in   5.007419s

Comparison:
        Time.iso8601:   100502.4 i/s
          Time.parse:     3857.8 i/s - 26.05x  (± 0.00) slower

