$ ruby -v code/general/assignment.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   168.658M i/100ms
Sequential Assignment
                       167.720M i/100ms
Calculating -------------------------------------
 Parallel Assignment      1.687B (± 0.8%) i/s -      8.433B in   5.000301s
Sequential Assignment
                          1.690B (± 0.3%) i/s -      8.554B in   5.061111s

Comparison:
Sequential Assignment: 1690107165.8 i/s
 Parallel Assignment: 1686587148.7 i/s - same-ish: difference falls within error

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    34.774k i/100ms
       Kernel#format    55.804k i/100ms
            String#%    54.362k i/100ms
Calculating -------------------------------------
         Float#round    382.033k (± 2.8%) i/s -      1.913M in   5.010296s
       Kernel#format    543.415k (± 2.0%) i/s -      2.734M in   5.034124s
            String#%    558.558k (± 2.3%) i/s -      2.827M in   5.063777s

Comparison:
            String#%:   558558.3 i/s
       Kernel#format:   543414.7 i/s - same-ish: difference falls within error
         Float#round:   382033.0 i/s - 1.46x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   809.143k i/100ms
  ancestors.include?   126.460k i/100ms
Calculating -------------------------------------
  less than or equal      8.935M (± 3.8%) i/s -     45.312M in   5.079589s
  ancestors.include?      1.297M (± 3.0%) i/s -      6.576M in   5.075529s

Comparison:
  less than or equal:  8934559.7 i/s
  ancestors.include?:  1296826.2 i/s - 6.89x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   148.918M i/100ms
             &method   148.802M i/100ms
Calculating -------------------------------------
              normal      1.491B (± 0.1%) i/s -      7.595B in   5.092735s
             &method      1.492B (± 0.1%) i/s -      7.589B in   5.086726s

Comparison:
             &method: 1491908759.2 i/s
              normal: 1491310112.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        62.000  i/100ms
       define_method    84.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.270k (±30.1%) i/s -      4.216k in   5.008350s
       define_method      2.634k (±51.0%) i/s -      8.148k in   6.168767s

Comparison:
       define_method:     2633.8 i/s
module_eval with string:     1270.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   168.773M i/100ms
          OpenStruct   161.000M i/100ms
Calculating -------------------------------------
                Hash      1.689B (± 0.5%) i/s -      8.607B in   5.095083s
          OpenStruct      1.691B (± 0.1%) i/s -      8.533B in   5.046310s

Comparison:
          OpenStruct: 1690937807.3 i/s
                Hash: 1689394503.1 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     6.927k i/100ms
         respond_to?   149.222M i/100ms
Calculating -------------------------------------
      begin...rescue     45.751k (± 2.7%) i/s -    228.591k in   5.000153s
         respond_to?      1.492B (± 0.1%) i/s -      7.461B in   5.000764s

Comparison:
         respond_to?: 1491996981.8 i/s
      begin...rescue:    45751.0 i/s - 32611.23x  (± 0.00) slower

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   168.854M i/100ms
       attr_accessor   168.573M i/100ms
Calculating -------------------------------------
   getter_and_setter      1.685B (± 2.5%) i/s -      8.443B in   5.013792s
       attr_accessor      1.582B (± 9.2%) i/s -      7.923B in   5.055299s

Comparison:
   getter_and_setter: 1685158312.9 i/s
       attr_accessor: 1581648362.5 i/s - same-ish: difference falls within error

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     2.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     23.872  (± 0.0%) i/s -    120.000  in   5.026768s
         Kernel loop      0.253  (± 0.0%) i/s -      2.000  in   7.917535s

Comparison:
          While Loop:       23.9 i/s
         Kernel loop:        0.3 i/s - 94.48x  (± 0.00) slower

$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       142.949M i/100ms
Function with splat arguments
                       487.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          1.674B (± 3.5%) i/s -      8.434B in   5.044396s
Function with splat arguments
                          5.658k (± 3.9%) i/s -     28.246k in   5.000422s

Comparison:
Function with single Array argument: 1674273698.4 i/s
Function with splat arguments:     5657.7 i/s - 295930.71x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   168.728M i/100ms
          OpenStruct     1.038M i/100ms
Calculating -------------------------------------
                Hash      1.691B (± 0.1%) i/s -      8.605B in   5.088257s
          OpenStruct    676.552M (± 0.3%) i/s -      3.381B in   4.997372s

Comparison:
                Hash: 1691180477.7 i/s
          OpenStruct: 676552126.2 i/s - 2.50x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   143.000  i/100ms
          Date.parse   152.000  i/100ms
Calculating -------------------------------------
        Date.iso8601      9.450k (±33.2%) i/s -     33.748k in   4.993175s
          Date.parse      3.159k (±33.2%) i/s -     13.832k in   5.182514s

Comparison:
        Date.iso8601:     9449.9 i/s
          Date.parse:     3159.4 i/s - 2.99x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   144.394M i/100ms
         With Freeze   148.950M i/100ms
Calculating -------------------------------------
      Without Freeze      1.491B (± 0.1%) i/s -      7.508B in   5.035772s
         With Freeze      1.492B (± 0.1%) i/s -      7.596B in   5.091290s

Comparison:
         With Freeze: 1492049670.9 i/s
      Without Freeze: 1491030519.3 i/s - same-ish: difference falls within error

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    18.501k i/100ms
           String#tr   120.545k i/100ms
Calculating -------------------------------------
         String#gsub      1.710M (±18.6%) i/s -      8.066M in   5.000108s
           String#tr      1.193M (± 4.7%) i/s -      6.027M in   5.062990s

Comparison:
         String#gsub:  1710413.7 i/s
           String#tr:  1193149.8 i/s - 1.43x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1   642.702k i/100ms
    String#unpack[0]   791.770k i/100ms
Calculating -------------------------------------
      String#unpack1     13.083M (± 5.6%) i/s -     65.556M in   5.027777s
    String#unpack[0]     13.169M (± 4.6%) i/s -     65.717M in   5.001221s

Comparison:
    String#unpack[0]: 13168916.8 i/s
      String#unpack1: 13083032.0 i/s - same-ish: difference falls within error

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==   879.642k i/100ms
      String#casecmp     3.785M i/100ms
Calculating -------------------------------------
String#downcase + ==     12.624M (± 4.6%) i/s -     63.334M in   5.028466s
      String#casecmp     37.865M (± 0.2%) i/s -    193.035M in   5.097957s

Comparison:
      String#casecmp: 37865250.2 i/s
String#downcase + ==: 12623535.6 i/s - 3.00x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub    30.443k i/100ms
        String#chomp     5.740M i/100ms
String#delete_suffix     5.632M i/100ms
Calculating -------------------------------------
          String#sub      4.044M (±13.3%) i/s -     19.605M in   4.998574s
        String#chomp     57.361M (± 0.1%) i/s -    286.997M in   5.003318s
String#delete_suffix     56.266M (± 0.4%) i/s -    281.577M in   5.004452s

Comparison:
        String#chomp: 57361450.6 i/s
String#delete_suffix: 56266000.3 i/s - 1.02x  (± 0.00) slower
          String#sub:  4043835.7 i/s - 14.18x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    32.651k i/100ms
          String#sub   318.781k i/100ms
String#dup["string"]=
                        18.804M i/100ms
Calculating -------------------------------------
         String#gsub    932.492k (± 4.3%) i/s -      4.669M in   5.019401s
          String#sub      4.655M (± 3.8%) i/s -     23.271M in   5.006439s
String#dup["string"]=
                        187.995M (± 0.1%) i/s -    940.188M in   5.001120s

Comparison:
String#dup["string"]=: 187995440.0 i/s
          String#sub:  4655261.9 i/s - 40.38x  (± 0.00) slower
         String#gsub:   932492.2 i/s - 201.61x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+   168.888M i/100ms
       String#concat   168.741M i/100ms
       String#append   168.796M i/100ms
         "foo" "bar"   169.184M i/100ms
  "#{'foo'}#{'bar'}"   169.177M i/100ms
Calculating -------------------------------------
            String#+      1.690B (± 0.4%) i/s -      8.613B in   5.096299s
       String#concat      1.691B (± 0.1%) i/s -      8.606B in   5.088694s
       String#append      1.691B (± 0.1%) i/s -      8.609B in   5.090556s
         "foo" "bar"      1.691B (± 0.1%) i/s -      8.459B in   5.001095s
  "#{'foo'}#{'bar'}"      1.692B (± 0.1%) i/s -      8.459B in   5.000132s

Comparison:
  "#{'foo'}#{'bar'}": 1691723653.8 i/s
         "foo" "bar": 1691473099.8 i/s - same-ish: difference falls within error
       String#concat: 1691161750.2 i/s - same-ish: difference falls within error
       String#append: 1691098094.8 i/s - same-ish: difference falls within error
            String#+: 1690130602.9 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   484.813k i/100ms
       String#match?   656.826k i/100ms
    String#end_with?    17.783M i/100ms
Calculating -------------------------------------
           String#=~      6.476M (± 4.4%) i/s -     32.482M in   5.026476s
       String#match?      6.666M (± 3.1%) i/s -     33.498M in   5.029856s
    String#end_with?    177.629M (± 0.2%) i/s -    889.164M in   5.005762s

Comparison:
    String#end_with?: 177628941.4 i/s
       String#match?:  6666471.8 i/s - 26.65x  (± 0.00) slower
           String#=~:  6476071.9 i/s - 27.43x  (± 0.00) slower

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   148.526M i/100ms
          String#dup   149.041M i/100ms
Calculating -------------------------------------
           String#+@      1.492B (± 0.2%) i/s -      7.575B in   5.077552s
          String#dup      1.492B (± 0.1%) i/s -      7.601B in   5.093007s

Comparison:
          String#dup: 1492454220.5 i/s
           String#+@: 1491831579.3 i/s - same-ish: difference falls within error

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~   516.636k i/100ms
       String#match?   723.497k i/100ms
  String#start_with?     1.918M i/100ms
Calculating -------------------------------------
           String#=~      7.484M (± 3.3%) i/s -     37.714M in   5.044930s
       String#match?      7.525M (± 2.8%) i/s -     37.622M in   5.003820s
  String#start_with?     19.283M (± 2.3%) i/s -     97.835M in   5.076459s

Comparison:
  String#start_with?: 19283305.0 i/s
       String#match?:  7524557.4 i/s - 2.56x  (± 0.00) slower
           String#=~:  7484081.1 i/s - 2.58x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   211.806k i/100ms
    String#[0, n] ==   178.375k i/100ms
   String#[RANGE] ==   179.488k i/100ms
   String#[0...n] ==    72.202k i/100ms
Calculating -------------------------------------
  String#start_with?      3.501M (± 2.7%) i/s -     17.580M in   5.025190s
    String#[0, n] ==      1.828M (± 3.0%) i/s -      9.276M in   5.079905s
   String#[RANGE] ==      1.802M (± 2.3%) i/s -      9.154M in   5.081870s
   String#[0...n] ==      1.289M (± 3.3%) i/s -      6.498M in   5.047365s

Comparison:
  String#start_with?:  3501101.8 i/s
    String#[0, n] ==:  1827583.5 i/s - 1.92x  (± 0.00) slower
   String#[RANGE] ==:  1802253.2 i/s - 1.94x  (± 0.00) slower
   String#[0...n] ==:  1288882.1 i/s - 2.72x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix     1.474M i/100ms
          String#sub   355.796k i/100ms
Calculating -------------------------------------
String#delete_prefix     19.236M (± 4.7%) i/s -     97.296M in   5.070292s
          String#sub      4.354M (± 4.4%) i/s -     22.059M in   5.076839s

Comparison:
String#delete_prefix: 19236103.9 i/s
          String#sub:  4353727.5 i/s - 4.42x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    16.504M i/100ms
 String#sub!'string'   371.755k i/100ms
String#gsub!'string'    73.534k i/100ms
  String#[/regexp/]=   570.805k i/100ms
 String#sub!/regexp/   373.521k i/100ms
String#gsub!/regexp/   269.189k i/100ms
Calculating -------------------------------------
  String#['string']=    165.744M (± 0.5%) i/s -    841.700M in   5.078422s
 String#sub!'string'      4.920M (± 5.2%) i/s -     24.536M in   5.001202s
String#gsub!'string'    977.929k (± 2.2%) i/s -      4.927M in   5.040533s
  String#[/regexp/]=      6.020M (± 2.5%) i/s -     30.253M in   5.028365s
 String#sub!/regexp/      3.827M (± 2.6%) i/s -     19.423M in   5.079376s
String#gsub!/regexp/      3.099M (± 2.7%) i/s -     15.613M in   5.041415s

Comparison:
  String#['string']=: 165744336.8 i/s
  String#[/regexp/]=:  6020281.0 i/s - 27.53x  (± 0.00) slower
 String#sub!'string':  4920407.3 i/s - 33.69x  (± 0.00) slower
 String#sub!/regexp/:  3826524.9 i/s - 43.31x  (± 0.00) slower
String#gsub!/regexp/:  3099263.8 i/s - 53.48x  (± 0.00) slower
String#gsub!'string':   977929.1 i/s - 169.49x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     2.302M i/100ms
           String#=~     2.328M i/100ms
          Regexp#===     2.397M i/100ms
        String#match     2.324M i/100ms
Calculating -------------------------------------
       String#match?     25.160M (± 2.6%) i/s -    126.599M in   5.035314s
           String#=~     23.905M (± 2.8%) i/s -    121.078M in   5.069087s
          Regexp#===     24.062M (± 2.4%) i/s -    122.236M in   5.083144s
        String#match     23.354M (± 2.2%) i/s -    118.534M in   5.078142s

Comparison:
       String#match?: 25160468.7 i/s
          Regexp#===: 24062082.0 i/s - same-ish: difference falls within error
           String#=~: 23904558.8 i/s - same-ish: difference falls within error
        String#match: 23354206.9 i/s - 1.08x  (± 0.00) slower

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     1.250k i/100ms
      String#squeeze    62.164k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     54.945k (± 7.8%) i/s -    273.750k in   5.019631s
      String#squeeze    630.389k (± 2.6%) i/s -      3.170M in   5.032751s

Comparison:
      String#squeeze:   630388.8 i/s
 String#gsub/regex+/:    54944.6 i/s - 11.47x  (± 0.00) slower

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?     3.816k i/100ms
      range#include?    83.000  i/100ms
       range#member?   232.000  i/100ms
       plain compare    18.675k i/100ms
Calculating -------------------------------------
        range#cover?    149.454k (±44.5%) i/s -    610.560k in   4.981238s
      range#include?      4.287k (±50.0%) i/s -     13.031k in   5.042431s
       range#member?      3.336k (±36.9%) i/s -     11.600k in   5.104169s
       plain compare    210.886k (±40.6%) i/s -    933.750k in   5.061703s

Comparison:
       plain compare:   210886.1 i/s
        range#cover?:   149454.2 i/s - same-ish: difference falls within error
      range#include?:     4287.4 i/s - 49.19x  (± 0.00) slower
       range#member?:     3336.4 i/s - 63.21x  (± 0.00) slower

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601     5.088k i/100ms
          Time.parse    50.000  i/100ms
Calculating -------------------------------------
        Time.iso8601    135.292k (±17.0%) i/s -    641.088k in   5.010265s
          Time.parse      3.600k (±37.0%) i/s -     12.900k in   4.993826s

Comparison:
        Time.iso8601:   135291.9 i/s
          Time.parse:     3599.8 i/s - 37.58x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each    89.628k i/100ms
       Hash#each_key   117.191k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.129M (± 4.6%) i/s -      5.647M in   5.013476s
       Hash#each_key      1.259M (± 3.4%) i/s -      6.328M in   5.032293s

Comparison:
       Hash#each_key:  1259086.3 i/s
      Hash#keys.each:  1128810.0 i/s - 1.12x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    67.553M i/100ms
             Hash#[]    59.450M i/100ms
          Hash#[] ||    59.706M i/100ms
          Hash#[] &&    59.710M i/100ms
          Hash#fetch    59.716M i/100ms
 Hash#fetch fallback    59.720M i/100ms
Calculating -------------------------------------
            Hash#dig    596.349M (± 0.3%) i/s -      3.040B in   5.097555s
             Hash#[]    596.764M (± 0.2%) i/s -      3.032B in   5.080630s
          Hash#[] ||    596.351M (± 0.6%) i/s -      2.985B in   5.006119s
          Hash#[] &&    596.823M (± 0.1%) i/s -      2.985B in   5.002317s
          Hash#fetch    596.849M (± 0.1%) i/s -      2.986B in   5.002572s
 Hash#fetch fallback    596.873M (± 0.1%) i/s -      2.986B in   5.002766s

Comparison:
 Hash#fetch fallback: 596873065.6 i/s
          Hash#fetch: 596848937.4 i/s - same-ish: difference falls within error
          Hash#[] &&: 596822556.4 i/s - same-ish: difference falls within error
             Hash#[]: 596763613.7 i/s - same-ish: difference falls within error
          Hash#[] ||: 596351199.6 i/s - same-ish: difference falls within error
            Hash#dig: 596348990.8 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   214.000  i/100ms
         Hash#merge!    20.380k i/100ms
Calculating -------------------------------------
          Hash#merge      3.025k (± 4.5%) i/s -     15.194k in   5.033082s
         Hash#merge!    211.545k (± 3.5%) i/s -      1.060M in   5.015908s

Comparison:
         Hash#merge!:   211544.8 i/s
          Hash#merge:     3025.4 i/s - 69.92x  (± 0.00) slower

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h     2.779k i/100ms
         sort + to_h     2.419k i/100ms
Calculating -------------------------------------
      sort_by + to_h    139.944k (± 9.2%) i/s -    691.971k in   4.995183s
         sort + to_h    115.490k (±10.0%) i/s -    570.884k in   5.005350s

Comparison:
      sort_by + to_h:   139943.5 i/s
         sort + to_h:   115489.6 i/s - 1.21x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   148.861M i/100ms
  Hash#fetch, symbol   238.223M i/100ms
     Hash#[], string     5.226M i/100ms
  Hash#fetch, string     4.697M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      1.492B (± 0.1%) i/s -      7.592B in   5.088339s
  Hash#fetch, symbol      2.387B (± 0.1%) i/s -     12.149B in   5.089647s
     Hash#[], string     52.612M (± 1.0%) i/s -    266.548M in   5.066785s
  Hash#fetch, string     46.962M (± 0.5%) i/s -    234.842M in   5.000819s

Comparison:
  Hash#fetch, symbol: 2387075766.5 i/s
     Hash#[], symbol: 1492028628.6 i/s - 1.60x  (± 0.00) slower
     Hash#[], string: 52611792.3 i/s - 45.37x  (± 0.00) slower
  Hash#fetch, string: 46961785.9 i/s - 50.83x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         5.048k i/100ms
      Hash#merge({})     6.898k i/100ms
 Hash#dup#merge!({})    11.417k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        111.914k (± 4.1%) i/s -    560.328k in   5.015987s
      Hash#merge({})     70.335k (± 3.1%) i/s -    351.798k in   5.006675s
 Hash#dup#merge!({})    116.251k (± 2.5%) i/s -    582.267k in   5.011907s

Comparison:
 Hash#dup#merge!({}):   116251.3 i/s
{}#merge!(Hash) do end:   111913.8 i/s - same-ish: difference falls within error
      Hash#merge({}):    70335.4 i/s - 1.65x  (± 0.00) slower

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   159.464M i/100ms
  Hash#fetch + block   269.726M i/100ms
    Hash#fetch + arg   169.201M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      1.691B (± 0.1%) i/s -      8.611B in   5.092452s
  Hash#fetch + block      2.705B (± 0.1%) i/s -     13.756B in   5.084887s
    Hash#fetch + arg      1.691B (± 0.1%) i/s -      8.460B in   5.002716s

Comparison:
  Hash#fetch + block: 2705279739.5 i/s
    Hash#fetch + arg: 1691090885.2 i/s - 1.60x  (± 0.00) slower
  Hash#fetch + const: 1690950490.8 i/s - 1.60x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?    61.000  i/100ms
         Hash#value?     2.649k i/100ms
Calculating -------------------------------------
Hash#values.include?      2.323k (±15.1%) i/s -     11.041k in   5.004798s
         Hash#value?     44.302k (± 0.3%) i/s -    222.516k in   5.022788s

Comparison:
         Hash#value?:    44301.8 i/s
Hash#values.include?:     2323.0 i/s - 19.07x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice      912.470k i/100ms
Array#each             988.904k i/100ms
Array#each_w/_object   996.867k i/100ms
Hash#select-include    719.223k i/100ms
Calculating -------------------------------------
Hash#native-slice        11.395M (± 2.8%) i/s -     57.486M in   5.048932s
Array#each                9.989M (± 2.9%) i/s -     50.434M in   5.053452s
Array#each_w/_object     10.079M (± 2.4%) i/s -     50.840M in   5.047090s
Hash#select-include      13.275M (± 3.2%) i/s -     66.888M in   5.044106s

Comparison:
Hash#select-include : 13274817.7 i/s
Hash#native-slice   : 11395079.4 i/s - 1.16x  (± 0.00) slower
Array#each_w/_object: 10079364.0 i/s - 1.32x  (± 0.00) slower
Array#each          :  9988625.7 i/s - 1.33x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!     9.243k i/100ms
            Hash#[]=    18.844k i/100ms
Calculating -------------------------------------
         Hash#merge!    214.728k (± 5.4%) i/s -      1.072M in   5.008960s
            Hash#[]=    215.595k (± 3.9%) i/s -      1.093M in   5.077559s

Comparison:
            Hash#[]=:   215595.2 i/s
         Hash#merge!:   214728.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   168.118k i/100ms
            Hash#dup   179.152k i/100ms
Calculating -------------------------------------
              Hash[]      1.947M (± 3.8%) i/s -      9.751M in   5.016312s
            Hash#dup      1.866M (± 3.4%) i/s -      9.495M in   5.093317s

Comparison:
              Hash[]:  1946726.1 i/s
            Hash#dup:  1866417.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   168.542M i/100ms
          Hash#merge   167.879M i/100ms
Calculating -------------------------------------
        Hash#**other      1.691B (± 0.2%) i/s -      8.596B in   5.083266s
          Hash#merge      1.690B (± 0.9%) i/s -      8.562B in   5.067929s

Comparison:
        Hash#**other: 1690976542.8 i/s
          Hash#merge: 1689541018.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?    56.000  i/100ms
           Hash#key?     2.903M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.615k (±15.6%) i/s -      7.448k in   5.025283s
           Hash#key?     29.411M (± 0.4%) i/s -    148.075M in   5.034749s

Comparison:
           Hash#key?: 29411077.6 i/s
  Hash#keys.include?:     1615.0 i/s - 18211.39x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   148.620M i/100ms
                send   148.662M i/100ms
      method_missing   149.290M i/100ms
Calculating -------------------------------------
                call      1.492B (± 0.1%) i/s -      7.580B in   5.080560s
                send      1.492B (± 0.1%) i/s -      7.582B in   5.081142s
      method_missing      1.492B (± 0.1%) i/s -      7.465B in   5.003604s

Comparison:
                send: 1492143190.9 i/s
                call: 1491891150.3 i/s - same-ish: difference falls within error
      method_missing: 1491828075.5 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   415.604k i/100ms
Calculating -------------------------------------
                find      0.115  (± 0.0%) i/s -      1.000  in   8.699504s
             bsearch      4.199M (± 3.2%) i/s -     21.196M in   5.053795s

Comparison:
             bsearch:  4198658.2 i/s
                find:        0.1 i/s - 36526245.80x  (± 0.00) slower

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first     8.410k i/100ms
        Array#sample     2.552M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    235.697k (± 3.8%) i/s -      1.177M in   5.004694s
        Array#sample     25.645M (± 0.1%) i/s -    130.165M in   5.075707s

Comparison:
        Array#sample: 25644677.7 i/s
 Array#shuffle.first:   235697.4 i/s - 108.80x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.122  (± 0.0%) i/s -      1.000  in   8.193237s
        Array#insert      0.868  (± 0.0%) i/s -      5.000  in   5.762996s

Comparison:
        Array#insert:        0.9 i/s
       Array#unshift:        0.1 i/s - 7.11x  (± 0.00) slower

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   168.550M i/100ms
          Array#last   167.979M i/100ms
Calculating -------------------------------------
          Array#[-1]      1.689B (± 0.3%) i/s -      8.596B in   5.087988s
          Array#last      1.637B (± 6.8%) i/s -      8.231B in   5.053689s

Comparison:
          Array#[-1]: 1689499055.2 i/s
          Array#last: 1637385117.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   148.704M i/100ms
          Array#size   148.614M i/100ms
         Array#count   149.227M i/100ms
Calculating -------------------------------------
        Array#length      1.491B (± 0.5%) i/s -      7.584B in   5.087851s
          Array#size      1.492B (± 0.2%) i/s -      7.579B in   5.081099s
         Array#count      1.492B (± 0.1%) i/s -      7.461B in   5.001873s

Comparison:
         Array#count: 1491713633.9 i/s
          Array#size: 1491677996.3 i/s - same-ish: difference falls within error
        Array#length: 1490634065.9 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   235.453M i/100ms
         Array#first   238.114M i/100ms
Calculating -------------------------------------
           Array#[0]      2.384B (± 0.5%) i/s -     12.008B in   5.037181s
         Array#first      2.386B (± 0.2%) i/s -     12.144B in   5.088624s

Comparison:
         Array#first: 2386469018.8 i/s
           Array#[0]: 2383947701.0 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push    16.488k i/100ms
           Array#map   462.151k i/100ms
Calculating -------------------------------------
   Array#each + push      1.330M (± 7.6%) i/s -      6.595M in   4.998781s
           Array#map      5.038M (± 6.2%) i/s -     25.418M in   5.064983s

Comparison:
           Array#map:  5038443.2 i/s
   Array#each + push:  1329713.5 i/s - 3.79x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by     5.657k i/100ms
Enumerable#sort_by...first
                         2.120k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      3.174M (± 0.9%) i/s -     15.857M in   4.996379s
Enumerable#sort_by...first
                         55.629k (± 6.9%) i/s -    277.720k in   5.018043s

Comparison:
   Enumerable#min_by:  3173967.6 i/s
Enumerable#sort_by...first:    55628.5 i/s - 57.06x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop    13.400k i/100ms
               #each    12.310M i/100ms
Calculating -------------------------------------
            For loop     92.837M (± 1.4%) i/s -    460.102M in   4.957485s
               #each    122.781M (± 0.3%) i/s -    615.479M in   5.012883s

Comparison:
               #each: 122780500.8 i/s
            For loop: 92837246.1 i/s - 1.32x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                        24.327k i/100ms
   Enumerable#detect     3.597M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          5.870M (± 8.9%) i/s -    114.580M in  19.959252s
   Enumerable#detect     35.968M (± 0.1%) i/s -    719.331M in  19.999023s

Comparison:
   Enumerable#detect: 35968329.6 i/s
Enumerable#select.first:  5869682.4 i/s - 6.13x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         1.424k i/100ms
  Enumerable#sort_by     2.189k i/100ms
     Enumerable#sort     2.122k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         27.618k (±10.9%) i/s -    136.704k in   5.019385s
  Enumerable#sort_by     31.782k (± 5.0%) i/s -    159.797k in   5.041736s
     Enumerable#sort     50.901k (± 2.7%) i/s -    254.640k in   5.007710s

Comparison:
     Enumerable#sort:    50901.2 i/s
  Enumerable#sort_by:    31781.6 i/s - 1.60x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    27618.4 i/s - 1.84x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                         9.078k i/100ms
Enumerable#select.last
                       352.748k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.646M (± 6.1%) i/s -      8.161M in   4.996079s
Enumerable#select.last
                          3.624M (± 3.6%) i/s -     18.343M in   5.067540s

Comparison:
Enumerable#select.last:  3624462.0 i/s
Enumerable#reverse.detect:  1645548.8 i/s - 2.20x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   699.395k i/100ms
     each_with_index     1.244M i/100ms
Calculating -------------------------------------
          While Loop      7.005M (± 0.1%) i/s -     35.669M in   5.092068s
     each_with_index     12.435M (± 0.1%) i/s -     62.181M in   5.000295s

Comparison:
     each_with_index: 12435406.3 i/s
          While Loop:  7004847.0 i/s - 1.78x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each     6.247k i/100ms
  Array#reverse_each     1.305M i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.689M (± 7.7%) i/s -      8.309M in   4.994530s
  Array#reverse_each     13.042M (± 0.1%) i/s -     65.232M in   5.001639s

Comparison:
  Array#reverse_each: 13042097.4 i/s
  Array#reverse.each:  1688928.9 i/s - 7.72x  (± 0.00) slower

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     4.159k i/100ms
   Array#map.flatten    10.205k i/100ms
      Array#flat_map    10.601k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    104.931k (± 4.2%) i/s -    524.034k in   5.004037s
   Array#map.flatten    106.328k (± 2.8%) i/s -    540.865k in   5.090865s
      Array#flat_map    319.155k (± 4.4%) i/s -      1.601M in   5.026469s

Comparison:
      Array#flat_map:   319155.2 i/s
   Array#map.flatten:   106327.7 i/s - 3.00x  (± 0.00) slower
Array#map.flatten(1):   104931.0 i/s - 3.04x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol     1.398k i/100ms
      inject to_proc   168.017k i/100ms
        inject block   168.033k i/100ms
Calculating -------------------------------------
       inject symbol      1.679M (± 0.5%) i/s -      8.381M in   4.992570s
      inject to_proc      1.680M (± 0.0%) i/s -      8.401M in   5.000400s
        inject block      1.680M (± 0.1%) i/s -      8.402M in   5.000974s

Comparison:
      inject to_proc:  1680035.9 i/s
        inject block:  1680003.3 i/s - same-ish: difference falls within error
       inject symbol:  1678734.6 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   235.746M i/100ms
       block + yield   234.719M i/100ms
        unused block   238.848M i/100ms
               yield   238.881M i/100ms
Calculating -------------------------------------
          block.call      2.386B (± 0.1%) i/s -     12.023B in   5.038343s
       block + yield      2.384B (± 0.6%) i/s -     11.971B in   5.020996s
        unused block      2.388B (± 0.1%) i/s -     11.942B in   5.001256s
               yield      2.388B (± 0.1%) i/s -     11.944B in   5.002101s

Comparison:
        unused block: 2387883740.5 i/s
               yield: 2387808360.0 i/s - same-ish: difference falls within error
          block.call: 2386311710.2 i/s - same-ish: difference falls within error
       block + yield: 2384221717.4 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.0.0-dev-bfed1234, like ruby 2.7.4, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    14.321k i/100ms
      Symbol#to_proc    15.503k i/100ms
Calculating -------------------------------------
               Block    165.404k (± 6.9%) i/s -    830.618k in   5.056664s
      Symbol#to_proc    164.304k (± 4.1%) i/s -    821.659k in   5.009584s

Comparison:
               Block:   165404.1 i/s
      Symbol#to_proc:   164304.2 i/s - same-ish: difference falls within error

