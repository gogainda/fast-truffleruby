$ ruby -v code/general/array-argument-vs-splat-arguments.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Function with single Array argument
                       238.573M i/100ms
Function with splat arguments
                       581.000  i/100ms
Calculating -------------------------------------
Function with single Array argument
                          2.387B (± 0.3%) i/s -     12.167B in   5.097429s
Function with splat arguments
                          6.035k (± 4.8%) i/s -     30.212k in   5.018415s

Comparison:
Function with single Array argument: 2386956048.3 i/s
Function with splat arguments:     6034.9 i/s - 395526.26x  (± 0.00) slower

$ ruby -v code/general/assignment.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Parallel Assignment   238.812M i/100ms
Sequential Assignment
                       238.981M i/100ms
Calculating -------------------------------------
 Parallel Assignment      2.386B (± 0.3%) i/s -     11.941B in   5.003557s
Sequential Assignment
                          2.387B (± 0.7%) i/s -     11.949B in   5.006684s

Comparison:
Sequential Assignment: 2386736120.6 i/s
 Parallel Assignment: 2386441794.4 i/s - same-ish: difference falls within error

$ ruby -v code/general/attr-accessor-vs-getter-and-setter.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   getter_and_setter   238.476M i/100ms
       attr_accessor   239.021M i/100ms
Calculating -------------------------------------
   getter_and_setter      2.387B (± 0.3%) i/s -     12.162B in   5.096197s
       attr_accessor      2.388B (± 0.3%) i/s -     11.951B in   5.004393s

Comparison:
       attr_accessor: 2388131767.9 i/s
   getter_and_setter: 2386557756.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/begin-rescue-vs-respond-to.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      begin...rescue     7.081k i/100ms
         respond_to?   238.788M i/100ms
Calculating -------------------------------------
      begin...rescue     46.573k (± 2.6%) i/s -    233.673k in   5.020743s
         respond_to?      2.388B (± 0.2%) i/s -     12.178B in   5.098984s

Comparison:
         respond_to?: 2388369886.0 i/s
      begin...rescue:    46573.2 i/s - 51282.11x  (± 0.00) slower

$ ruby -v code/general/block-apply-method.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              normal   238.455M i/100ms
             &method   238.920M i/100ms
Calculating -------------------------------------
              normal      2.387B (± 0.3%) i/s -     12.161B in   5.094401s
             &method      2.388B (± 0.3%) i/s -     11.946B in   5.002997s

Comparison:
             &method: 2387788025.2 i/s
              normal: 2387188971.3 i/s - same-ish: difference falls within error

$ ruby -v code/general/define_method-vs-module-eval.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
module_eval with string
                        92.000  i/100ms
       define_method   130.000  i/100ms
Calculating -------------------------------------
module_eval with string
                          1.495k (±55.8%) i/s -      3.864k in   5.653040s
       define_method      2.698k (±55.3%) i/s -      6.370k in   6.058622s

Comparison:
       define_method:     2697.9 i/s
module_eval with string:     1495.2 i/s - same-ish: difference falls within error

$ ruby -v code/general/format-vs-round-and-to-s.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Float#round    30.820k i/100ms
       Kernel#format    51.623k i/100ms
            String#%    51.309k i/100ms
Calculating -------------------------------------
         Float#round    347.540k (± 3.8%) i/s -      1.757M in   5.062593s
       Kernel#format    514.875k (± 2.2%) i/s -      2.581M in   5.015754s
            String#%    516.088k (± 2.3%) i/s -      2.617M in   5.073274s

Comparison:
            String#%:   516088.4 i/s
       Kernel#format:   514875.2 i/s - same-ish: difference falls within error
         Float#round:   347539.9 i/s - 1.48x  (± 0.00) slower

$ ruby -v code/general/hash-vs-openstruct-on-access.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   225.593M i/100ms
          OpenStruct   239.076M i/100ms
Calculating -------------------------------------
                Hash      2.387B (± 0.3%) i/s -     11.956B in   5.008036s
          OpenStruct      2.389B (± 0.2%) i/s -     11.954B in   5.004739s

Comparison:
          OpenStruct: 2388514147.0 i/s
                Hash: 2387471068.9 i/s - same-ish: difference falls within error

$ ruby -v code/general/hash-vs-openstruct.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                Hash   237.885M i/100ms
          OpenStruct     2.562k i/100ms
Calculating -------------------------------------
                Hash      2.382B (± 0.4%) i/s -     12.132B in   5.092456s
          OpenStruct     27.985k (±12.3%) i/s -    138.348k in   5.078183s

Comparison:
                Hash: 2382422618.0 i/s
          OpenStruct:    27984.7 i/s - 85132.92x  (± 0.00) slower

$ ruby -v code/general/inheritance-check.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  less than or equal   671.911k i/100ms
  ancestors.include?   120.646k i/100ms
Calculating -------------------------------------
  less than or equal      7.539M (± 3.4%) i/s -     38.299M in   5.086590s
  ancestors.include?      1.226M (± 4.2%) i/s -      6.153M in   5.026107s

Comparison:
  less than or equal:  7538688.4 i/s
  ancestors.include?:  1226392.0 i/s - 6.15x  (± 0.00) slower

$ ruby -v code/general/loop-vs-while-true.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop     1.000  i/100ms
         Kernel loop     1.000  i/100ms
Calculating -------------------------------------
          While Loop     23.861  (± 0.0%) i/s -    120.000  in   5.029239s
         Kernel loop      5.931  (± 0.0%) i/s -     30.000  in   5.058267s

Comparison:
          While Loop:       23.9 i/s
         Kernel loop:        5.9 i/s - 4.02x  (± 0.00) slower

$ ruby -v code/general/raise-vs-e2mmap.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
$ ruby -v code/array/array-first-vs-index.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           Array#[0]   238.835M i/100ms
         Array#first   238.348M i/100ms
Calculating -------------------------------------
           Array#[0]      2.386B (± 0.3%) i/s -     11.942B in   5.004564s
         Array#first      2.388B (± 0.3%) i/s -     12.156B in   5.090663s

Comparison:
         Array#first: 2387865066.5 i/s
           Array#[0]: 2386191544.0 i/s - same-ish: difference falls within error

$ ruby -v code/array/array-last-vs-index.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Array#[-1]   238.875M i/100ms
          Array#last   238.495M i/100ms
Calculating -------------------------------------
          Array#[-1]      2.385B (± 0.5%) i/s -     11.944B in   5.008581s
          Array#last      2.389B (± 0.2%) i/s -     12.163B in   5.091877s

Comparison:
          Array#last: 2388771013.8 i/s
          Array#[-1]: 2384706582.2 i/s - same-ish: difference falls within error

$ ruby -v code/array/bsearch-vs-find.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                find     1.000  i/100ms
             bsearch   432.465k i/100ms
Calculating -------------------------------------
                find     10.458  (±19.1%) i/s -     18.000  in   5.007449s
             bsearch      4.332M (± 3.1%) i/s -     22.056M in   5.097262s

Comparison:
             bsearch:  4331510.9 i/s
                find:       10.5 i/s - 414178.72x  (± 0.00) slower

$ ruby -v code/array/insert-vs-unshift.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       Array#unshift     1.000  i/100ms
        Array#insert     1.000  i/100ms
Calculating -------------------------------------
       Array#unshift      0.124  (± 0.0%) i/s -      1.000  in   8.081738s
        Array#insert      0.942  (± 0.0%) i/s -      5.000  in   5.306502s

Comparison:
        Array#insert:        0.9 i/s
       Array#unshift:        0.1 i/s - 7.61x  (± 0.00) slower

$ ruby -v code/array/length-vs-size-vs-count.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Array#length   238.825M i/100ms
          Array#size   238.780M i/100ms
         Array#count   239.014M i/100ms
Calculating -------------------------------------
        Array#length      2.386B (± 0.3%) i/s -     11.941B in   5.004645s
          Array#size      2.388B (± 0.2%) i/s -     12.178B in   5.098616s
         Array#count      2.389B (± 0.2%) i/s -     11.951B in   5.002454s

Comparison:
         Array#count: 2388977575.4 i/s
          Array#size: 2388453821.2 i/s - same-ish: difference falls within error
        Array#length: 2386057971.8 i/s - same-ish: difference falls within error

$ ruby -v code/array/shuffle-first-vs-sample.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 Array#shuffle.first    22.611k i/100ms
        Array#sample     2.467M i/100ms
Calculating -------------------------------------
 Array#shuffle.first    227.809k (± 2.0%) i/s -      1.153M in   5.064227s
        Array#sample     24.462M (± 0.1%) i/s -    123.337M in   5.041978s

Comparison:
        Array#sample: 24462072.0 i/s
 Array#shuffle.first:   227809.4 i/s - 107.38x  (± 0.00) slower

$ ruby -v code/date/iso8601-vs-parse.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Date.iso8601   346.000  i/100ms
          Date.parse   129.000  i/100ms
Calculating -------------------------------------
        Date.iso8601     13.287k (±34.0%) i/s -     54.668k in   5.389052s
          Date.parse      5.615k (±36.2%) i/s -     22.833k in   5.003516s

Comparison:
        Date.iso8601:    13287.0 i/s
          Date.parse:     5614.8 i/s - 2.37x  (± 0.00) slower

$ ruby -v code/enumerable/each-push-vs-map.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Array#each + push   132.325k i/100ms
           Array#map   528.931k i/100ms
Calculating -------------------------------------
   Array#each + push      1.433M (± 3.9%) i/s -      7.278M in   5.086702s
           Array#map      5.258M (± 6.3%) i/s -     26.447M in   5.049981s

Comparison:
           Array#map:  5258402.1 i/s
   Array#each + push:  1433083.8 i/s - 3.67x  (± 0.00) slower

$ ruby -v code/enumerable/each-vs-for-loop.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            For loop     8.468M i/100ms
               #each    56.932M i/100ms
Calculating -------------------------------------
            For loop     84.615M (± 0.7%) i/s -    423.394M in   5.004037s
               #each    568.547M (± 0.4%) i/s -      2.847B in   5.006858s

Comparison:
               #each: 568547214.9 i/s
            For loop: 84615068.5 i/s - 6.72x  (± 0.00) slower

$ ruby -v code/enumerable/each_with_index-vs-while-loop.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          While Loop   698.038k i/100ms
     each_with_index     1.280M i/100ms
Calculating -------------------------------------
          While Loop      6.998M (± 0.0%) i/s -     35.600M in   5.087365s
     each_with_index     12.809M (± 0.1%) i/s -     65.266M in   5.095312s

Comparison:
     each_with_index: 12809052.1 i/s
          While Loop:  6997717.9 i/s - 1.83x  (± 0.00) slower

$ ruby -v code/enumerable/inject-symbol-vs-block.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       inject symbol   146.515k i/100ms
      inject to_proc   147.475k i/100ms
        inject block   147.480k i/100ms
Calculating -------------------------------------
       inject symbol      1.475M (± 0.1%) i/s -      7.472M in   5.067572s
      inject to_proc      1.475M (± 0.0%) i/s -      7.521M in   5.099797s
        inject block      1.475M (± 0.0%) i/s -      7.374M in   5.000354s

Comparison:
      inject to_proc:  1474808.8 i/s
        inject block:  1474695.9 i/s - same-ish: difference falls within error
       inject symbol:  1474526.2 i/s - same-ish: difference falls within error

$ ruby -v code/enumerable/map-flatten-vs-flat_map.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Array#map.flatten(1)     9.215k i/100ms
   Array#map.flatten    10.767k i/100ms
      Array#flat_map    29.479k i/100ms
Calculating -------------------------------------
Array#map.flatten(1)    106.144k (± 3.6%) i/s -    534.470k in   5.042528s
   Array#map.flatten    109.172k (± 3.4%) i/s -    549.117k in   5.035972s
      Array#flat_map    294.312k (± 2.9%) i/s -      1.474M in   5.012676s

Comparison:
      Array#flat_map:   294312.3 i/s
   Array#map.flatten:   109172.3 i/s - 2.70x  (± 0.00) slower
Array#map.flatten(1):   106144.0 i/s - 2.77x  (± 0.00) slower

$ ruby -v code/enumerable/reverse-each-vs-reverse_each.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Array#reverse.each   165.260k i/100ms
  Array#reverse_each   916.631k i/100ms
Calculating -------------------------------------
  Array#reverse.each      1.701M (± 3.3%) i/s -      8.594M in   5.058842s
  Array#reverse_each      9.165M (± 0.0%) i/s -     45.832M in   5.000626s

Comparison:
  Array#reverse_each:  9165164.5 i/s
  Array#reverse.each:  1700575.8 i/s - 5.39x  (± 0.00) slower

$ ruby -v code/enumerable/select-first-vs-detect.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#select.first
                       529.518k i/100ms
   Enumerable#detect     3.845M i/100ms
Calculating -------------------------------------
Enumerable#select.first
                          6.010M (± 5.9%) i/s -    119.671M in  20.010847s
   Enumerable#detect     38.508M (± 0.5%) i/s -    772.787M in  20.068566s

Comparison:
   Enumerable#detect: 38508221.6 i/s
Enumerable#select.first:  6010243.2 i/s - 6.41x  (± 0.00) slower

$ ruby -v code/enumerable/select-last-vs-reverse-detect.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#reverse.detect
                       163.575k i/100ms
Enumerable#select.last
                       317.647k i/100ms
Calculating -------------------------------------
Enumerable#reverse.detect
                          1.689M (± 3.6%) i/s -      8.506M in   5.041999s
Enumerable#select.last
                          3.177M (± 3.5%) i/s -     15.882M in   5.005688s

Comparison:
Enumerable#select.last:  3176986.1 i/s
Enumerable#reverse.detect:  1689228.0 i/s - 1.88x  (± 0.00) slower

$ ruby -v code/enumerable/sort-vs-sort_by.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         2.134k i/100ms
  Enumerable#sort_by     2.416k i/100ms
     Enumerable#sort     2.578k i/100ms
Calculating -------------------------------------
Enumerable#sort_by (Symbol#to_proc)
                         22.148k (±18.5%) i/s -    100.298k in   5.066362s
  Enumerable#sort_by     22.385k (±17.4%) i/s -    101.472k in   5.032323s
     Enumerable#sort     31.535k (± 0.1%) i/s -    159.836k in   5.068565s

Comparison:
     Enumerable#sort:    31534.8 i/s
  Enumerable#sort_by:    22384.5 i/s - 1.41x  (± 0.00) slower
Enumerable#sort_by (Symbol#to_proc):    22148.4 i/s - 1.42x  (± 0.00) slower

$ ruby -v code/enumerable/sort_by-first-vs-min_by.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
   Enumerable#min_by   320.135k i/100ms
Enumerable#sort_by...first
                         4.994k i/100ms
Calculating -------------------------------------
   Enumerable#min_by      3.201M (± 0.0%) i/s -     16.007M in   5.000437s
Enumerable#sort_by...first
                         54.563k (± 3.1%) i/s -    274.670k in   5.039246s

Comparison:
   Enumerable#min_by:  3201070.8 i/s
Enumerable#sort_by...first:    54562.5 i/s - 58.67x  (± 0.00) slower

$ ruby -v code/hash/bracket-vs-dup.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
              Hash[]   179.651k i/100ms
            Hash#dup   189.498k i/100ms
Calculating -------------------------------------
              Hash[]      1.951M (± 4.4%) i/s -      9.881M in   5.074503s
            Hash#dup      1.907M (± 4.0%) i/s -      9.664M in   5.076306s

Comparison:
              Hash[]:  1951179.4 i/s
            Hash#dup:  1907032.0 i/s - same-ish: difference falls within error

$ ruby -v code/hash/bracket-vs-fetch.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
     Hash#[], symbol   238.441M i/100ms
  Hash#fetch, symbol   238.260M i/100ms
     Hash#[], string     4.872M i/100ms
  Hash#fetch, string     4.976M i/100ms
Calculating -------------------------------------
     Hash#[], symbol      2.388B (± 0.3%) i/s -     12.160B in   5.093457s
  Hash#fetch, symbol      2.388B (± 0.3%) i/s -     12.151B in   5.087637s
     Hash#[], string     47.508M (± 1.2%) i/s -    238.733M in   5.025852s
  Hash#fetch, string     49.722M (± 0.3%) i/s -    248.786M in   5.003597s

Comparison:
  Hash#fetch, symbol: 2388407807.5 i/s
     Hash#[], symbol: 2387500720.3 i/s - same-ish: difference falls within error
  Hash#fetch, string: 49721846.6 i/s - 48.04x  (± 0.00) slower
     Hash#[], string: 47508077.6 i/s - 50.27x  (± 0.00) slower

$ ruby -v code/hash/dig-vs-[]-vs-fetch.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            Hash#dig    59.719M i/100ms
             Hash#[]    59.677M i/100ms
          Hash#[] ||    59.742M i/100ms
          Hash#[] &&    59.708M i/100ms
          Hash#fetch    59.765M i/100ms
 Hash#fetch fallback    59.762M i/100ms
Calculating -------------------------------------
            Hash#dig    596.874M (± 0.3%) i/s -      2.986B in   5.002716s
             Hash#[]    597.173M (± 0.3%) i/s -      3.044B in   5.096615s
          Hash#[] ||    597.281M (± 0.2%) i/s -      2.987B in   5.001158s
          Hash#[] &&    597.206M (± 0.2%) i/s -      3.045B in   5.098935s
          Hash#fetch    597.450M (± 0.1%) i/s -      2.988B in   5.001675s
 Hash#fetch fallback    597.321M (± 0.2%) i/s -      2.988B in   5.002536s

Comparison:
          Hash#fetch: 597450134.6 i/s
 Hash#fetch fallback: 597321247.0 i/s - same-ish: difference falls within error
          Hash#[] ||: 597280767.1 i/s - same-ish: difference falls within error
          Hash#[] &&: 597205854.9 i/s - same-ish: difference falls within error
             Hash#[]: 597172554.2 i/s - same-ish: difference falls within error
            Hash#dig: 596873951.4 i/s - same-ish: difference falls within error

$ ruby -v code/hash/fetch-vs-fetch-with-block.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#fetch + const   238.481M i/100ms
  Hash#fetch + block   238.663M i/100ms
    Hash#fetch + arg   238.959M i/100ms
Calculating -------------------------------------
  Hash#fetch + const      2.386B (± 0.3%) i/s -     12.163B in   5.096554s
  Hash#fetch + block      2.388B (± 0.2%) i/s -     12.172B in   5.096724s
    Hash#fetch + arg      2.388B (± 0.3%) i/s -     11.948B in   5.003591s

Comparison:
  Hash#fetch + block: 2388172318.9 i/s
    Hash#fetch + arg: 2387896215.8 i/s - same-ish: difference falls within error
  Hash#fetch + const: 2386445957.5 i/s - same-ish: difference falls within error

$ ruby -v code/hash/hash-key-sort_by-vs-sort.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      sort_by + to_h    16.814k i/100ms
         sort + to_h    11.871k i/100ms
Calculating -------------------------------------
      sort_by + to_h    194.480k (± 6.3%) i/s -    975.212k in   5.034384s
         sort + to_h    127.751k (± 4.4%) i/s -    641.034k in   5.028006s

Comparison:
      sort_by + to_h:   194480.1 i/s
         sort + to_h:   127750.7 i/s - 1.52x  (± 0.00) slower

$ ruby -v code/hash/keys-each-vs-each_key.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Hash#keys.each    99.676k i/100ms
       Hash#each_key   110.383k i/100ms
Calculating -------------------------------------
      Hash#keys.each      1.045M (± 4.1%) i/s -      5.283M in   5.065759s
       Hash#each_key      1.140M (± 3.8%) i/s -      5.740M in   5.042374s

Comparison:
       Hash#each_key:  1140050.0 i/s
      Hash#keys.each:  1044729.3 i/s - 1.09x  (± 0.00) slower

$ ruby -v code/hash/keys-include-vs-key.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  Hash#keys.include?   156.000  i/100ms
           Hash#key?    99.593M i/100ms
Calculating -------------------------------------
  Hash#keys.include?      1.867k (±15.0%) i/s -      9.048k in   5.046241s
           Hash#key?    995.280M (± 0.2%) i/s -      4.980B in   5.003286s

Comparison:
           Hash#key?: 995280496.9 i/s
  Hash#keys.include?:     1866.9 i/s - 533117.02x  (± 0.00) slower

$ ruby -v code/hash/merge-bang-vs-[]=.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         Hash#merge!    17.721k i/100ms
            Hash#[]=    20.523k i/100ms
Calculating -------------------------------------
         Hash#merge!    208.516k (± 4.0%) i/s -      1.046M in   5.022443s
            Hash#[]=    211.101k (± 3.0%) i/s -      1.067M in   5.060100s

Comparison:
            Hash#[]=:   211100.9 i/s
         Hash#merge!:   208515.9 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-bang-vs-merge-vs-dup-merge-bang.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
{}#merge!(Hash) do end
                         9.143k i/100ms
      Hash#merge({})     7.076k i/100ms
 Hash#dup#merge!({})    11.784k i/100ms
Calculating -------------------------------------
{}#merge!(Hash) do end
                        111.738k (± 4.2%) i/s -    557.723k in   5.001229s
      Hash#merge({})     72.110k (± 3.8%) i/s -    360.876k in   5.012550s
 Hash#dup#merge!({})    119.662k (± 3.8%) i/s -    600.984k in   5.030519s

Comparison:
 Hash#dup#merge!({}):   119662.0 i/s
{}#merge!(Hash) do end:   111738.5 i/s - same-ish: difference falls within error
      Hash#merge({}):    72110.3 i/s - 1.66x  (± 0.00) slower

$ ruby -v code/hash/merge-vs-double-splat-operator.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Hash#**other   238.497M i/100ms
          Hash#merge   239.008M i/100ms
Calculating -------------------------------------
        Hash#**other      2.387B (± 0.3%) i/s -     12.163B in   5.095061s
          Hash#merge      2.389B (± 0.3%) i/s -     11.950B in   5.003025s

Comparison:
          Hash#merge: 2388653707.2 i/s
        Hash#**other: 2387305872.2 i/s - same-ish: difference falls within error

$ ruby -v code/hash/merge-vs-merge-bang.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          Hash#merge   285.000  i/100ms
         Hash#merge!    21.038k i/100ms
Calculating -------------------------------------
          Hash#merge      3.073k (± 4.2%) i/s -     15.390k in   5.017227s
         Hash#merge!    212.748k (± 3.3%) i/s -      1.073M in   5.049070s

Comparison:
         Hash#merge!:   212747.9 i/s
          Hash#merge:     3073.1 i/s - 69.23x  (± 0.00) slower

$ ruby -v code/hash/slice-native-vs-before-native.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#native-slice        1.052M i/100ms
Array#each             871.118k i/100ms
Array#each_w/_object   876.914k i/100ms
Hash#select-include      1.137M i/100ms
Calculating -------------------------------------
Hash#native-slice        11.103M (± 3.8%) i/s -     55.765M in   5.030362s
Array#each                8.847M (± 2.7%) i/s -     44.427M in   5.025456s
Array#each_w/_object      8.860M (± 2.9%) i/s -     44.723M in   5.052431s
Hash#select-include      11.539M (± 3.0%) i/s -     58.007M in   5.032027s

Comparison:
Hash#select-include : 11538954.6 i/s
Hash#native-slice   : 11103309.0 i/s - same-ish: difference falls within error
Array#each_w/_object:  8860230.3 i/s - 1.30x  (± 0.00) slower
Array#each          :  8847465.3 i/s - 1.30x  (± 0.00) slower

$ ruby -v code/hash/values-include-vs-value.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
Hash#values.include?   163.000  i/100ms
         Hash#value?     1.047k i/100ms
Calculating -------------------------------------
Hash#values.include?      2.221k (±11.0%) i/s -     10.921k in   5.018195s
         Hash#value?     10.579k (± 0.9%) i/s -     53.397k in   5.048079s

Comparison:
         Hash#value?:    10578.5 i/s
Hash#values.include?:     2221.5 i/s - 4.76x  (± 0.00) slower

$ ruby -v code/method/call-vs-send-vs-method_missing.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
                call   238.412M i/100ms
                send   238.390M i/100ms
      method_missing   239.046M i/100ms
Calculating -------------------------------------
                call      2.388B (± 0.2%) i/s -     12.159B in   5.092000s
                send      2.388B (± 0.3%) i/s -     12.158B in   5.090537s
      method_missing      2.389B (± 0.3%) i/s -     11.952B in   5.004091s

Comparison:
      method_missing: 2388524578.6 i/s
                send: 2388352793.8 i/s - same-ish: difference falls within error
                call: 2387884400.4 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/block-vs-to_proc.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
               Block    16.093k i/100ms
      Symbol#to_proc    16.924k i/100ms
Calculating -------------------------------------
               Block    170.704k (± 3.6%) i/s -    852.929k in   5.003251s
      Symbol#to_proc    171.064k (± 3.2%) i/s -    863.124k in   5.051188s

Comparison:
      Symbol#to_proc:   171063.7 i/s
               Block:   170704.1 i/s - same-ish: difference falls within error

$ ruby -v code/proc-and-block/proc-call-vs-yield.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          block.call   238.409M i/100ms
       block + yield   239.003M i/100ms
        unused block   239.036M i/100ms
               yield   238.719M i/100ms
Calculating -------------------------------------
          block.call      2.387B (± 0.3%) i/s -     12.159B in   5.093437s
       block + yield      2.389B (± 0.3%) i/s -     11.950B in   5.003068s
        unused block      2.389B (± 0.2%) i/s -     11.952B in   5.002792s
               yield      2.390B (± 0.2%) i/s -     12.175B in   5.094292s

Comparison:
               yield: 2389867006.9 i/s
        unused block: 2389036379.3 i/s - same-ish: difference falls within error
       block + yield: 2388584603.9 i/s - same-ish: difference falls within error
          block.call: 2387186912.6 i/s - same-ish: difference falls within error

$ ruby -v code/range/cover-vs-include.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        range#cover?    58.266k i/100ms
      range#include?   244.000  i/100ms
       range#member?   247.000  i/100ms
       plain compare    34.992k i/100ms
Calculating -------------------------------------
        range#cover?    203.887k (±31.4%) i/s -    932.256k in   5.093552s
      range#include?      5.494k (±36.9%) i/s -     18.788k in   5.015759s
       range#member?      5.529k (±34.7%) i/s -     14.326k in   4.999960s
       plain compare    494.425k (±32.3%) i/s -      1.470M in   5.002918s

Comparison:
       plain compare:   494424.8 i/s
        range#cover?:   203887.4 i/s - 2.42x  (± 0.00) slower
       range#member?:     5529.0 i/s - 89.42x  (± 0.00) slower
      range#include?:     5493.6 i/s - 90.00x  (± 0.00) slower

$ ruby -v code/string/===-vs-=~-vs-match.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
       String#match?     2.908M i/100ms
           String#=~     6.041M i/100ms
          Regexp#===     6.054M i/100ms
        String#match     4.748M i/100ms
Calculating -------------------------------------
       String#match?     36.011M (± 4.1%) i/s -    180.307M in   5.015704s
           String#=~     60.036M (± 0.5%) i/s -    302.031M in   5.030940s
          Regexp#===     60.187M (± 0.5%) i/s -    302.701M in   5.029490s
        String#match     47.378M (± 0.5%) i/s -    237.410M in   5.011135s

Comparison:
          Regexp#===: 60186895.4 i/s
           String#=~: 60036240.6 i/s - same-ish: difference falls within error
        String#match: 47377678.0 i/s - 1.27x  (± 0.00) slower
       String#match?: 36011085.4 i/s - 1.67x  (± 0.00) slower

$ ruby -v code/string/casecmp-vs-downcase-==.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#downcase + ==     1.136M i/100ms
      String#casecmp     3.456M i/100ms
Calculating -------------------------------------
String#downcase + ==     12.714M (± 4.4%) i/s -     63.644M in   5.016021s
      String#casecmp     34.610M (± 0.1%) i/s -    176.245M in   5.092363s

Comparison:
      String#casecmp: 34609757.8 i/s
String#downcase + ==: 12713601.7 i/s - 2.72x  (± 0.00) slower

$ ruby -v code/string/concatenation.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
            String#+   238.284M i/100ms
       String#concat   238.963M i/100ms
       String#append   239.010M i/100ms
         "foo" "bar"   238.987M i/100ms
  "#{'foo'}#{'bar'}"   238.959M i/100ms
Calculating -------------------------------------
            String#+      2.388B (± 0.2%) i/s -     12.152B in   5.088241s
       String#concat      2.388B (± 0.2%) i/s -     11.948B in   5.002796s
       String#append      2.388B (± 0.2%) i/s -     11.950B in   5.003745s
         "foo" "bar"      2.389B (± 0.2%) i/s -     11.949B in   5.001649s
  "#{'foo'}#{'bar'}"      2.390B (± 0.1%) i/s -     12.187B in   5.099498s

Comparison:
  "#{'foo'}#{'bar'}": 2389825317.3 i/s
         "foo" "bar": 2389093988.0 i/s - same-ish: difference falls within error
            String#+: 2388354094.8 i/s - same-ish: difference falls within error
       String#append: 2388321157.6 i/s - same-ish: difference falls within error
       String#concat: 2388305962.3 i/s - same-ish: difference falls within error

$ ruby -v code/string/dup-vs-unary-plus.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#+@   238.645M i/100ms
          String#dup   238.688M i/100ms
Calculating -------------------------------------
           String#+@      2.386B (± 0.4%) i/s -     11.932B in   5.001158s
          String#dup      2.389B (± 0.2%) i/s -     12.173B in   5.096477s

Comparison:
          String#dup: 2388544607.6 i/s
           String#+@: 2385929373.3 i/s - same-ish: difference falls within error

$ ruby -v code/string/end-string-checking-match-vs-end_with.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     1.197M i/100ms
       String#match?     1.147M i/100ms
    String#end_with?    12.441M i/100ms
Calculating -------------------------------------
           String#=~     12.155M (± 2.5%) i/s -     61.031M in   5.024455s
       String#match?     12.562M (± 2.9%) i/s -     63.099M in   5.027235s
    String#end_with?    124.387M (± 0.3%) i/s -    622.056M in   5.001030s

Comparison:
    String#end_with?: 124386784.3 i/s
       String#match?: 12562402.2 i/s - 9.90x  (± 0.00) slower
           String#=~: 12155052.6 i/s - 10.23x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-sub.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub    51.848k i/100ms
          String#sub   393.509k i/100ms
String#dup["string"]=
                        13.436M i/100ms
Calculating -------------------------------------
         String#gsub    811.734k (± 3.6%) i/s -      4.096M in   5.053983s
          String#sub      4.354M (± 5.6%) i/s -     22.037M in   5.077795s
String#dup["string"]=
                        134.739M (± 0.5%) i/s -    685.234M in   5.085731s

Comparison:
String#dup["string"]=: 134739496.2 i/s
          String#sub:  4354124.3 i/s - 30.95x  (± 0.00) slower
         String#gsub:   811733.8 i/s - 165.99x  (± 0.00) slower

$ ruby -v code/string/gsub-vs-tr.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
         String#gsub   171.869k i/100ms
           String#tr   118.602k i/100ms
Calculating -------------------------------------
         String#gsub      1.786M (± 4.0%) i/s -      8.937M in   5.011736s
           String#tr      1.242M (± 4.2%) i/s -      6.286M in   5.069555s

Comparison:
         String#gsub:  1786233.5 i/s
           String#tr:  1242172.1 i/s - 1.44x  (± 0.00) slower

$ ruby -v code/string/mutable_vs_immutable_strings.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      Without Freeze   238.626M i/100ms
         With Freeze   238.538M i/100ms
Calculating -------------------------------------
      Without Freeze      2.387B (± 0.3%) i/s -     11.931B in   4.999185s
         With Freeze      2.388B (± 0.3%) i/s -     12.165B in   5.095503s

Comparison:
         With Freeze: 2387503992.6 i/s
      Without Freeze: 2386673116.8 i/s - same-ish: difference falls within error

$ ruby -v code/string/remove-extra-spaces-or-other-chars.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
 String#gsub/regex+/     4.257k i/100ms
      String#squeeze    57.891k i/100ms
Calculating -------------------------------------
 String#gsub/regex+/     58.079k (± 4.7%) i/s -    293.733k in   5.069521s
      String#squeeze    580.343k (± 2.7%) i/s -      2.952M in   5.091453s

Comparison:
      String#squeeze:   580343.5 i/s
 String#gsub/regex+/:    58078.6 i/s - 9.99x  (± 0.00) slower

$ ruby -v code/string/start-string-checking-match-vs-start_with.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
           String#=~     2.556M i/100ms
       String#match?     2.671M i/100ms
  String#start_with?     1.722M i/100ms
Calculating -------------------------------------
           String#=~     26.528M (± 3.1%) i/s -    132.892M in   5.014792s
       String#match?     27.304M (± 3.0%) i/s -    138.874M in   5.091273s
  String#start_with?     17.231M (± 3.5%) i/s -     86.114M in   5.004141s

Comparison:
       String#match?: 27303641.0 i/s
           String#=~: 26527880.4 i/s - same-ish: difference falls within error
  String#start_with?: 17231084.4 i/s - 1.58x  (± 0.00) slower

$ ruby -v code/string/start_with-vs-substring-==.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#start_with?   279.517k i/100ms
    String#[0, n] ==   160.947k i/100ms
   String#[RANGE] ==   171.855k i/100ms
   String#[0...n] ==   126.478k i/100ms
Calculating -------------------------------------
  String#start_with?      3.166M (± 4.0%) i/s -     15.932M in   5.041833s
    String#[0, n] ==      1.611M (± 4.0%) i/s -      8.047M in   5.003713s
   String#[RANGE] ==      1.741M (± 4.8%) i/s -      8.765M in   5.046807s
   String#[0...n] ==      1.287M (± 4.1%) i/s -      6.450M in   5.019500s

Comparison:
  String#start_with?:  3165703.1 i/s
   String#[RANGE] ==:  1740865.9 i/s - 1.82x  (± 0.00) slower
    String#[0, n] ==:  1611088.1 i/s - 1.96x  (± 0.00) slower
   String#[0...n] ==:  1287392.7 i/s - 2.46x  (± 0.00) slower

$ ruby -v code/string/sub!-vs-gsub!-vs-[]=.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
  String#['string']=    11.470M i/100ms
 String#sub!'string'   449.909k i/100ms
String#gsub!'string'    78.516k i/100ms
  String#[/regexp/]=     3.876M i/100ms
 String#sub!/regexp/     1.834M i/100ms
String#gsub!/regexp/   433.367k i/100ms
Calculating -------------------------------------
  String#['string']=    114.898M (± 0.0%) i/s -    584.989M in   5.091396s
 String#sub!'string'      5.066M (±14.2%) i/s -     23.395M in   5.011146s
String#gsub!'string'      1.045M (± 2.6%) i/s -      5.261M in   5.037542s
  String#[/regexp/]=     38.757M (± 0.1%) i/s -    193.810M in   5.000643s
 String#sub!/regexp/     18.536M (± 2.3%) i/s -     93.546M in   5.049555s
String#gsub!/regexp/      4.294M (± 5.1%) i/s -     21.668M in   5.059530s

Comparison:
  String#['string']=: 114897652.6 i/s
  String#[/regexp/]=: 38757041.5 i/s - 2.96x  (± 0.00) slower
 String#sub!/regexp/: 18536093.8 i/s - 6.20x  (± 0.00) slower
 String#sub!'string':  5066044.5 i/s - 22.68x  (± 0.00) slower
String#gsub!/regexp/:  4294467.4 i/s - 26.75x  (± 0.00) slower
String#gsub!'string':  1045146.8 i/s - 109.93x  (± 0.00) slower

$ ruby -v code/string/sub-vs-chomp-vs-delete_suffix.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
          String#sub     1.372M i/100ms
        String#chomp     2.387M i/100ms
String#delete_suffix     5.189M i/100ms
Calculating -------------------------------------
          String#sub     17.023M (± 4.0%) i/s -     85.091M in   5.007279s
        String#chomp     24.657M (± 3.5%) i/s -    124.104M in   5.039586s
String#delete_suffix     51.883M (± 0.4%) i/s -    259.466M in   5.001058s

Comparison:
String#delete_suffix: 51883115.0 i/s
        String#chomp: 24657097.3 i/s - 2.10x  (± 0.00) slower
          String#sub: 17022552.6 i/s - 3.05x  (± 0.00) slower

$ ruby -v code/string/sub-vs-delete_prefix.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
String#delete_prefix     1.826M i/100ms
          String#sub     7.074M i/100ms
Calculating -------------------------------------
String#delete_prefix     18.740M (± 3.8%) i/s -     94.933M in   5.073339s
          String#sub     70.013M (± 1.4%) i/s -    353.687M in   5.052661s

Comparison:
          String#sub: 70012969.8 i/s
String#delete_prefix: 18740431.4 i/s - 3.74x  (± 0.00) slower

$ ruby -v code/string/unpack1-vs-unpack[0].rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
      String#unpack1     1.313M i/100ms
    String#unpack[0]     1.344M i/100ms
Calculating -------------------------------------
      String#unpack1     13.867M (± 3.8%) i/s -     69.615M in   5.027925s
    String#unpack[0]     13.956M (± 3.5%) i/s -     69.909M in   5.015647s

Comparison:
    String#unpack[0]: 13956058.9 i/s
      String#unpack1: 13867306.2 i/s - same-ish: difference falls within error

$ ruby -v code/time/iso8601-vs-parse.rb
truffleruby 22.2.0-dev-536661d2, like ruby 3.0.2, GraalVM CE Native [x86_64-linux]
Warming up --------------------------------------
        Time.iso8601    10.870k i/100ms
          Time.parse   158.000  i/100ms
Calculating -------------------------------------
        Time.iso8601     77.557k (±28.2%) i/s -    369.580k in   5.022339s
          Time.parse      3.890k (±25.1%) i/s -     17.380k in   5.003074s

Comparison:
        Time.iso8601:    77557.0 i/s
          Time.parse:     3890.2 i/s - 19.94x  (± 0.00) slower

